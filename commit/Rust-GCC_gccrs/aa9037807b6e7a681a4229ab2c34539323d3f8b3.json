{"sha": "aa9037807b6e7a681a4229ab2c34539323d3f8b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5MDM3ODA3YjZlN2E2ODFhNDIyOWFiMmMzNDUzOTMyM2QzZjhiMw==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2009-04-22T10:51:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-22T10:51:36Z"}, "message": "prj-proc.adb, [...] (Load_Naming_Exceptions): New subprogram.\n\n2009-04-22  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-proc.adb, prj-nmsc.adb (Load_Naming_Exceptions): New subprogram.\n\tMinor refactoring to reduce the size of\n\tProcess_Sources_In_Multi_Language_Mode.\n\tAvoid extra copied of Source_Data, which we found in the past could be\n\tquite slow.\n\t(Mark_Excluded_Sources): new subprogram.\n\t(Remove_Locally_Removed_Files_From_Units): merged into the above\n \tRefactors Process_Sources_In_Multi_Language_Mode to reduce its size,\n \tand allow better sharing of code between multi_lang and ada_only modes\n\t(Project_Extends): removed, since exact duplicate of Prj.Is_Extending\n\nFrom-SVN: r146565", "tree": {"sha": "69808ab1a883c8c4914c6b280c04d0f6fef884d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69808ab1a883c8c4914c6b280c04d0f6fef884d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9037807b6e7a681a4229ab2c34539323d3f8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9037807b6e7a681a4229ab2c34539323d3f8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9037807b6e7a681a4229ab2c34539323d3f8b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9037807b6e7a681a4229ab2c34539323d3f8b3/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95c05c62640f9dd08f4487ed7ecd3002dcaa170d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c05c62640f9dd08f4487ed7ecd3002dcaa170d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c05c62640f9dd08f4487ed7ecd3002dcaa170d"}], "stats": {"total": 373, "additions": 185, "deletions": 188}, "files": [{"sha": "79a7fa4781e63d7a6f7f52dcda4709078efa725b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa9037807b6e7a681a4229ab2c34539323d3f8b3", "patch": "@@ -1,3 +1,16 @@\n+2009-04-22  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-proc.adb, prj-nmsc.adb (Load_Naming_Exceptions): New subprogram.\n+\tMinor refactoring to reduce the size of\n+\tProcess_Sources_In_Multi_Language_Mode.\n+\tAvoid extra copied of Source_Data, which we found in the past could be\n+\tquite slow.\n+\t(Mark_Excluded_Sources): new subprogram.\n+\t(Remove_Locally_Removed_Files_From_Units): merged into the above\n+ \tRefactors Process_Sources_In_Multi_Language_Mode to reduce its size,\n+ \tand allow better sharing of code between multi_lang and ada_only modes\n+\t(Project_Extends): removed, since exact duplicate of Prj.Is_Extending\n+\n 2009-04-22  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-proc.adb, prj.adb, prj.ads (Project_Data.First_Referred_By):"}, {"sha": "31e5bdfd9cdbc1fa456f41e2d639eff6322d069b", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 169, "deletions": 187, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=aa9037807b6e7a681a4229ab2c34539323d3f8b3", "patch": "@@ -101,6 +101,8 @@ package body Prj.Nmsc is\n       Spec : File_Name_Type;\n       Impl : File_Name_Type;\n    end record;\n+   --  Record special naming schemes for Ada units (name of spec file and name\n+   --  of implementation file).\n \n    No_Unit_Exception : constant Unit_Exception :=\n                          (Name => No_Name,\n@@ -213,6 +215,14 @@ package body Prj.Nmsc is\n    --  A table to check if a unit with an exceptional name will hide a source\n    --  with a file name following the naming convention.\n \n+   procedure Load_Naming_Exceptions\n+     (Project     : Project_Id;\n+      In_Tree     : Project_Tree_Ref;\n+      Data        : in out Project_Data);\n+   --  All source files in Data.First_Source are considered as naming\n+   --  exceptions, and copied into the Source_Names and Unit_Exceptions tables\n+   --  as appropriate.\n+\n    procedure Add_Source\n      (Id                  : out Source_Id;\n       Data                : in out Project_Data;\n@@ -499,7 +509,8 @@ package body Prj.Nmsc is\n       Data        : in out Project_Data;\n       Current_Dir : String);\n    --  Find all the sources of project Project in project tree In_Tree and\n-   --  update its Data accordingly.\n+   --  update its Data accordingly. This assumes that Data.First_Source has\n+   --  been initialized with the list of excluded sources.\n    --\n    --  Current_Dir should represent the current directory, and is passed for\n    --  efficiency to avoid system calls to recompute it.\n@@ -517,13 +528,6 @@ package body Prj.Nmsc is\n    --  Prepare the internal hash tables used for checking naming exceptions\n    --  for Ada. Insert all elements of List in the tables.\n \n-   function Project_Extends\n-     (Extending : Project_Id;\n-      Extended  : Project_Id;\n-      In_Tree   : Project_Tree_Ref) return Boolean;\n-   --  Returns True if Extending is extending Extended either directly or\n-   --  indirectly.\n-\n    procedure Record_Ada_Source\n      (File_Name       : File_Name_Type;\n       Path_Name       : Path_Name_Type;\n@@ -8602,198 +8606,198 @@ package body Prj.Nmsc is\n       end if;\n    end Search_Directories;\n \n-   ----------------------\n-   -- Look_For_Sources --\n-   ----------------------\n+   ----------------------------\n+   -- Load_Naming_Exceptions --\n+   ----------------------------\n \n-   procedure Look_For_Sources\n+   procedure Load_Naming_Exceptions\n      (Project     : Project_Id;\n       In_Tree     : Project_Tree_Ref;\n-      Data        : in out Project_Data;\n-      Current_Dir : String)\n+      Data        : in out Project_Data)\n    is\n-      procedure Remove_Locally_Removed_Files_From_Units;\n-      --  Mark all locally removed sources as such in the Units table\n+      Source   : Source_Id := Data.First_Source;\n+      File     : File_Name_Type;\n+      Unit     : Name_Id;\n+   begin\n+      Unit_Exceptions.Reset;\n \n-      procedure Process_Sources_In_Multi_Language_Mode;\n-      --  Find all source files when in multi language mode\n+      while Source /= No_Source loop\n+         File := In_Tree.Sources.Table (Source).File;\n+         Unit := In_Tree.Sources.Table (Source).Unit;\n \n-      ---------------------------------------------\n-      -- Remove_Locally_Removed_Files_From_Units --\n-      ---------------------------------------------\n+         --  An excluded file cannot also be an exception file name\n \n-      procedure Remove_Locally_Removed_Files_From_Units is\n-         Excluded : File_Found;\n-         OK       : Boolean;\n-         Unit     : Unit_Data;\n-         Extended : Project_Id;\n-\n-      begin\n-         Excluded := Excluded_Sources_Htable.Get_First;\n-         while Excluded /= No_File_Found loop\n-            OK := False;\n+         if Excluded_Sources_Htable.Get (File) /= No_File_Found then\n+            Error_Msg_File_1 := File;\n+            Error_Msg\n+              (Project, In_Tree,\n+               \"{ cannot be both excluded and an exception file name\",\n+               No_Location);\n+         end if;\n \n-            For_Each_Unit :\n-            for Index in Unit_Table.First ..\n-              Unit_Table.Last (In_Tree.Units)\n-            loop\n-               Unit := In_Tree.Units.Table (Index);\n+         if Current_Verbosity = High then\n+            Write_Str (\"Naming exception: Putting source #\");\n+            Write_Str (Source'Img);\n+            Write_Str (\", file \");\n+            Write_Str (Get_Name_String (File));\n+            Write_Line (\" in Source_Names\");\n+         end if;\n \n-               for Kind in Spec_Or_Body'Range loop\n-                  if Unit.File_Names (Kind).Name = Excluded.File then\n-                     OK := True;\n+         Source_Names.Set\n+           (K => File,\n+            E => Name_Location'\n+              (Name     => File,\n+               Location => No_Location,\n+               Source   => Source,\n+               Except   => Unit /= No_Name,\n+               Found    => False));\n \n-                     --  Check that this is from the current project or\n-                     --  that the current project extends.\n+         --  If this is an Ada exception, record in table Unit_Exceptions\n \n-                     Extended := Unit.File_Names (Kind).Project;\n+         if Unit /= No_Name then\n+            declare\n+               Unit_Except : Unit_Exception := Unit_Exceptions.Get (Unit);\n \n-                     if Extended = Project\n-                       or else Project_Extends (Project, Extended, In_Tree)\n-                     then\n-                        Unit.File_Names (Kind).Path.Name := Slash;\n-                        Unit.File_Names (Kind).Needs_Pragma := False;\n-                        In_Tree.Units.Table (Index) := Unit;\n-                        Add_Forbidden_File_Name\n-                          (Unit.File_Names (Kind).Name);\n-                     else\n-                        Error_Msg\n-                          (Project, In_Tree,\n-                           \"cannot remove a source from \" &\n-                           \"another project\",\n-                           Excluded.Location);\n-                     end if;\n-                     exit For_Each_Unit;\n-                  end if;\n-               end loop;\n-            end loop For_Each_Unit;\n+            begin\n+               Unit_Except.Name := Unit;\n \n-            if not OK then\n-               Err_Vars.Error_Msg_File_1 := Excluded.File;\n-               Error_Msg\n-                 (Project, In_Tree, \"unknown file {\", Excluded.Location);\n-            end if;\n+               if In_Tree.Sources.Table (Source).Kind = Spec then\n+                  Unit_Except.Spec := File;\n+               else\n+                  Unit_Except.Impl := File;\n+               end if;\n \n-            Excluded := Excluded_Sources_Htable.Get_Next;\n-         end loop;\n-      end Remove_Locally_Removed_Files_From_Units;\n+               Unit_Exceptions.Set (Unit, Unit_Except);\n+            end;\n+         end if;\n \n-      --------------------------------------------\n-      -- Process_Sources_In_Multi_Language_Mode --\n-      --------------------------------------------\n+         Source := In_Tree.Sources.Table (Source).Next_In_Project;\n+      end loop;\n+   end Load_Naming_Exceptions;\n \n-      procedure Process_Sources_In_Multi_Language_Mode is\n-         Source   : Source_Id;\n-         Name_Loc : Name_Location;\n-         OK       : Boolean;\n-         FF       : File_Found;\n+   ----------------------\n+   -- Look_For_Sources --\n+   ----------------------\n \n-      begin\n-         --  First, put all naming exceptions if any, in the Source_Names table\n+   procedure Look_For_Sources\n+     (Project     : Project_Id;\n+      In_Tree     : Project_Tree_Ref;\n+      Data        : in out Project_Data;\n+      Current_Dir : String)\n+   is\n+      procedure Process_Sources_In_Multi_Language_Mode;\n+      --  Find all source files when in multi language mode\n \n-         Unit_Exceptions.Reset;\n+      procedure Mark_Excluded_Sources;\n+      --  Mark as such the sources that are declared as excluded\n \n-         Source := Data.First_Source;\n-         while Source /= No_Source loop\n-            declare\n-               Src_Data : Source_Data renames In_Tree.Sources.Table (Source);\n+      ---------------------------\n+      -- Mark_Excluded_Sources --\n+      ---------------------------\n \n-            begin\n-               --  An excluded file cannot also be an exception file name\n+      procedure Mark_Excluded_Sources is\n+         Source   : Source_Id := No_Source;\n+         OK       : Boolean;\n+         Unit     : Unit_Data;\n+         Excluded : File_Found := Excluded_Sources_Htable.Get_First;\n \n-               if Excluded_Sources_Htable.Get (Src_Data.File) /=\n-                 No_File_Found\n-               then\n-                  Error_Msg_File_1 := Src_Data.File;\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"{ cannot be both excluded and an exception file name\",\n-                     No_Location);\n-               end if;\n+         procedure Exclude\n+           (Extended : Project_Id; Index : Unit_Index; Kind : Spec_Or_Body);\n+         --  If the current file (Excluded) belongs to the current project or\n+         --  one that the current project extends, then mark this file/unit as\n+         --  excluded. It is an error to locally remove a file from another\n+         --  project.\n \n-               Name_Loc := (Name     => Src_Data.File,\n-                            Location => No_Location,\n-                            Source   => Source,\n-                            Except   => Src_Data.Unit /= No_Name,\n-                            Found    => False);\n+         procedure Exclude\n+           (Extended : Project_Id; Index : Unit_Index; Kind : Spec_Or_Body) is\n+         begin\n+            if Extended = Project\n+              or else Is_Extending (Project, Extended, In_Tree)\n+            then\n+               OK := True;\n \n-               if Current_Verbosity = High then\n-                  Write_Str (\"Putting source #\");\n-                  Write_Str (Source'Img);\n-                  Write_Str (\", file \");\n-                  Write_Str (Get_Name_String (Src_Data.File));\n-                  Write_Line (\" in Source_Names\");\n+               if Index /= No_Unit_Index then\n+                  Unit.File_Names (Kind).Path.Name    := Slash;\n+                  Unit.File_Names (Kind).Needs_Pragma := False;\n+                  In_Tree.Units.Table (Index) := Unit;\n                end if;\n \n-               Source_Names.Set (K => Src_Data.File, E => Name_Loc);\n-\n-               --  If this is an Ada exception, record in table Unit_Exceptions\n-\n-               if Src_Data.Unit /= No_Name then\n-                  declare\n-                     Unit_Except : Unit_Exception :=\n-                                     Unit_Exceptions.Get (Src_Data.Unit);\n-\n-                  begin\n-                     Unit_Except.Name := Src_Data.Unit;\n-\n-                     if Src_Data.Kind = Spec then\n-                        Unit_Except.Spec := Src_Data.File;\n-                     else\n-                        Unit_Except.Impl := Src_Data.File;\n-                     end if;\n-\n-                     Unit_Exceptions.Set (Src_Data.Unit, Unit_Except);\n-                  end;\n+               if Source /= No_Source then\n+                  In_Tree.Sources.Table (Source).Locally_Removed := True;\n+                  In_Tree.Sources.Table (Source).In_Interfaces := False;\n                end if;\n \n-               Source := Src_Data.Next_In_Project;\n-            end;\n-         end loop;\n+               if Current_Verbosity = High then\n+                  Write_Str (\"Removing file \");\n+                  Write_Line (Get_Name_String (Excluded.File));\n+               end if;\n \n-         Find_Explicit_Sources\n-           (Current_Dir, Project, In_Tree, Data);\n+               Add_Forbidden_File_Name (Excluded.File);\n \n-         --  Mark as such the sources that are declared as excluded\n+            else\n+               Error_Msg\n+                 (Project, In_Tree,\n+                  \"cannot remove a source from another project\",\n+                  Excluded.Location);\n+            end if;\n+         end Exclude;\n \n-         FF := Excluded_Sources_Htable.Get_First;\n-         while FF /= No_File_Found loop\n+      begin\n+         while Excluded /= No_File_Found loop\n             OK     := False;\n-            Source := In_Tree.First_Source;\n-            while Source /= No_Source loop\n-               declare\n-                  Src_Data : Source_Data renames\n-                               In_Tree.Sources.Table (Source);\n \n-               begin\n-                  if Src_Data.File = FF.File then\n-\n-                     --  Check that this is from this project or a project that\n-                     --  the current project extends.\n+            case Get_Mode is\n+            when Ada_Only =>\n+               --  ??? This loop could be the same as for Multi_Language if\n+               --  we were setting In_Tree.First_Source when we search for\n+               --  Ada sources (basically once we have removed the use of\n+               --  Data.Ada_Sources).\n+               For_Each_Unit :\n+               for Index in Unit_Table.First ..\n+                 Unit_Table.Last (In_Tree.Units)\n+               loop\n+                  Unit := In_Tree.Units.Table (Index);\n \n-                     if Src_Data.Project = Project or else\n-                       Is_Extending (Project, Src_Data.Project, In_Tree)\n-                     then\n-                        Src_Data.Locally_Removed := True;\n-                        Src_Data.In_Interfaces := False;\n-                        Add_Forbidden_File_Name (FF.File);\n-                        OK := True;\n-                        exit;\n+                  for Kind in Spec_Or_Body'Range loop\n+                     if Unit.File_Names (Kind).Name = Excluded.File then\n+                        Exclude (Unit.File_Names (Kind).Project, Index, Kind);\n+                        exit For_Each_Unit;\n                      end if;\n+                  end loop;\n+               end loop For_Each_Unit;\n+\n+            when Multi_Language =>\n+               Source := In_Tree.First_Source;\n+               while Source /= No_Source loop\n+                  if In_Tree.Sources.Table (Source).File = Excluded.File then\n+                     Exclude\n+                       (In_Tree.Sources.Table (Source).Project,\n+                        No_Unit_Index, Specification);\n+                     exit;\n                   end if;\n \n-                  Source := Src_Data.Next_In_Sources;\n-               end;\n-            end loop;\n+                  Source := In_Tree.Sources.Table (Source).Next_In_Sources;\n+               end loop;\n+\n+               OK := OK or Excluded.Found;\n+            end case;\n \n-            if not FF.Found and not OK then\n-               Err_Vars.Error_Msg_File_1 := FF.File;\n-               Error_Msg (Project, In_Tree, \"unknown file {\", FF.Location);\n+            if not OK then\n+               Err_Vars.Error_Msg_File_1 := Excluded.File;\n+               Error_Msg\n+                 (Project, In_Tree, \"unknown file {\", Excluded.Location);\n             end if;\n \n-            FF := Excluded_Sources_Htable.Get_Next;\n+            Excluded := Excluded_Sources_Htable.Get_Next;\n          end loop;\n+      end Mark_Excluded_Sources;\n+\n+      --------------------------------------------\n+      -- Process_Sources_In_Multi_Language_Mode --\n+      --------------------------------------------\n \n+      procedure Process_Sources_In_Multi_Language_Mode is\n+      begin\n          --  Check that two sources of this project do not have the same object\n          --  file name.\n \n@@ -8840,8 +8844,7 @@ package body Prj.Nmsc is\n \n                begin\n                   if Src_Data.Compiled and then Src_Data.Object_Exists\n-                    and then Project_Extends\n-                               (Project, Src_Data.Project, In_Tree)\n+                    and then Is_Extending (Project, Src_Data.Project, In_Tree)\n                   then\n                      if Src_Data.Unit = No_Name then\n                         if Src_Data.Kind = Impl then\n@@ -8901,11 +8904,14 @@ package body Prj.Nmsc is\n          when Ada_Only =>\n             if Is_A_Language (In_Tree, Data, Name_Ada) then\n                Find_Explicit_Sources (Current_Dir, Project, In_Tree, Data);\n-               Remove_Locally_Removed_Files_From_Units;\n+               Mark_Excluded_Sources;\n             end if;\n \n          when Multi_Language =>\n             if Data.First_Language_Processing /= No_Language_Index then\n+               Load_Naming_Exceptions (Project, In_Tree, Data);\n+               Find_Explicit_Sources (Current_Dir, Project, In_Tree, Data);\n+               Mark_Excluded_Sources;\n                Process_Sources_In_Multi_Language_Mode;\n             end if;\n       end case;\n@@ -8983,30 +8989,6 @@ package body Prj.Nmsc is\n       end loop;\n    end Prepare_Ada_Naming_Exceptions;\n \n-   ---------------------\n-   -- Project_Extends --\n-   ---------------------\n-\n-   function Project_Extends\n-     (Extending : Project_Id;\n-      Extended  : Project_Id;\n-      In_Tree   : Project_Tree_Ref) return Boolean\n-   is\n-      Current : Project_Id := Extending;\n-\n-   begin\n-      loop\n-         if Current = No_Project then\n-            return False;\n-\n-         elsif Current = Extended then\n-            return True;\n-         end if;\n-\n-         Current := In_Tree.Projects.Table (Current).Extends;\n-      end loop;\n-   end Project_Extends;\n-\n    -----------------------\n    -- Record_Ada_Source --\n    -----------------------\n@@ -9173,7 +9155,7 @@ package body Prj.Nmsc is\n                         The_Unit_Data.File_Names\n                           (Unit_Kind).Path.Name = Slash)\n                     or else The_Unit_Data.File_Names (Unit_Kind).Name = No_File\n-                    or else Project_Extends\n+                    or else Is_Extending\n                       (Data.Extends,\n                        The_Unit_Data.File_Names (Unit_Kind).Project,\n                        In_Tree)"}, {"sha": "933df7fd97ef8094e9e1ded55b7d9d499deab84f", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9037807b6e7a681a4229ab2c34539323d3f8b3/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=aa9037807b6e7a681a4229ab2c34539323d3f8b3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2632,6 +2632,7 @@ package body Prj.Proc is\n                declare\n                   New_Project : Project_Id;\n                   New_Data    : Project_Data;\n+                  pragma Unreferenced (New_Data);\n                   Proj_Node   : Project_Node_Id;\n \n                begin\n@@ -2834,6 +2835,7 @@ package body Prj.Proc is\n                declare\n                   New_Project : Project_Id;\n                   New_Data    : Project_Data;\n+                  pragma Unreferenced (New_Data);\n                   Proj_Node   : Project_Node_Id;\n \n                begin"}]}