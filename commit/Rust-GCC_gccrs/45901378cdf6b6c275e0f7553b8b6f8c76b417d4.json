{"sha": "45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5MDEzNzhjZGY2YjZjMjc1ZTBmNzU1M2I4YjZmOGM3NmI0MTdkNA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-06-24T06:36:46Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-06-24T06:36:46Z"}, "message": "S/390 Vector ABI GNU Attribute.\n\ngcc/\n\t* config/s390/s390.c (s390_vector_abi): New variable definition.\n\t(s390_check_type_for_vector_abi): New function.\n\t(TARGET_ASM_FILE_END): New macro definition.\n\t(s390_asm_file_end): New function.\n\t(s390_function_arg): Call s390_check_type_for_vector_abi.\n\t(s390_gimplify_va_arg): Likewise.\n\t* configure: Regenerate.\n\t* configure.ac: Check for .gnu_attribute Binutils feature.\n\ngcc/testsuite/\n\t* gcc.target/s390/vector/vec-abi-1.c: Add gnu attribute check.\n\t* gcc.target/s390/vector/vec-abi-attr-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-attr-2.c: New test.\n\t* gcc.target/s390/vector/vec-abi-attr-3.c: New test.\n\t* gcc.target/s390/vector/vec-abi-attr-4.c: New test.\n\t* gcc.target/s390/vector/vec-abi-attr-5.c: New test.\n\t* gcc.target/s390/vector/vec-abi-attr-6.c: New test.\n\nFrom-SVN: r224867", "tree": {"sha": "1dc0d37c5782af35011ad84bf3a3235d9aeea5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc0d37c5782af35011ad84bf3a3235d9aeea5e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/comments", "author": null, "committer": null, "parents": [{"sha": "5a5c3debfede40be3bdfd5c03a4dbb3ad2d6db21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5c3debfede40be3bdfd5c03a4dbb3ad2d6db21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5c3debfede40be3bdfd5c03a4dbb3ad2d6db21"}], "stats": {"total": 335, "additions": 335, "deletions": 0}, "files": [{"sha": "57ab9e8e29c6dae7c8d0e4188bd0143cb0c004ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -1,3 +1,14 @@\n+2015-06-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_vector_abi): New variable definition.\n+\t(s390_check_type_for_vector_abi): New function.\n+\t(TARGET_ASM_FILE_END): New macro definition.\n+\t(s390_asm_file_end): New function.\n+\t(s390_function_arg): Call s390_check_type_for_vector_abi.\n+\t(s390_gimplify_va_arg): Likewise.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check for .gnu_attribute Binutils feature.\n+\n 2015-06-23  Chen Gang  <gang.chen.5i5j@gmail.com>\n \n \tPR target/65803"}, {"sha": "4408d4c9be0ae539314d29c19d68b0c7c0e558dd", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -452,6 +452,97 @@ struct GTY(()) machine_function\n #define PREDICT_DISTANCE (TARGET_Z10 ? 384 : 2048)\n \n \n+/* Indicate which ABI has been used for passing vector args.\n+   0 - no vector type arguments have been passed where the ABI is relevant\n+   1 - the old ABI has been used\n+   2 - a vector type argument has been passed either in a vector register\n+       or on the stack by value  */\n+static int s390_vector_abi = 0;\n+\n+/* Set the vector ABI marker if TYPE is subject to the vector ABI\n+   switch.  The vector ABI affects only vector data types.  There are\n+   two aspects of the vector ABI relevant here:\n+\n+   1. vectors >= 16 bytes have an alignment of 8 bytes with the new\n+   ABI and natural alignment with the old.\n+\n+   2. vector <= 16 bytes are passed in VRs or by value on the stack\n+   with the new ABI but by reference on the stack with the old.\n+\n+   If ARG_P is true TYPE is used for a function argument or return\n+   value.  The ABI marker then is set for all vector data types.  If\n+   ARG_P is false only type 1 vectors are being checked.  */\n+\n+static void\n+s390_check_type_for_vector_abi (const_tree type, bool arg_p, bool in_struct_p)\n+{\n+  static hash_set<const_tree> visited_types_hash;\n+\n+  if (s390_vector_abi)\n+    return;\n+\n+  if (type == NULL_TREE || TREE_CODE (type) == ERROR_MARK)\n+    return;\n+\n+  if (visited_types_hash.contains (type))\n+    return;\n+\n+  visited_types_hash.add (type);\n+\n+  if (VECTOR_TYPE_P (type))\n+    {\n+      int type_size = int_size_in_bytes (type);\n+\n+      /* Outside arguments only the alignment is changing and this\n+\t only happens for vector types >= 16 bytes.  */\n+      if (!arg_p && type_size < 16)\n+\treturn;\n+\n+      /* In arguments vector types > 16 are passed as before (GCC\n+\t never enforced the bigger alignment for arguments which was\n+\t required by the old vector ABI).  However, it might still be\n+\t ABI relevant due to the changed alignment if it is a struct\n+\t member.  */\n+      if (arg_p && type_size > 16 && !in_struct_p)\n+\treturn;\n+\n+      s390_vector_abi = TARGET_VX_ABI ? 2 : 1;\n+    }\n+  else if (POINTER_TYPE_P (type) || TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      /* ARRAY_TYPE: Since with neither of the ABIs we have more than\n+\t natural alignment there will never be ABI dependent padding\n+\t in an array type.  That's why we do not set in_struct_p to\n+\t true here.  */\n+      s390_check_type_for_vector_abi (TREE_TYPE (type), arg_p, in_struct_p);\n+    }\n+  else if (TREE_CODE (type) == FUNCTION_TYPE || TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      tree arg_chain;\n+\n+      /* Check the return type.  */\n+      s390_check_type_for_vector_abi (TREE_TYPE (type), true, false);\n+\n+      for (arg_chain = TYPE_ARG_TYPES (type);\n+\t   arg_chain;\n+\t   arg_chain = TREE_CHAIN (arg_chain))\n+\ts390_check_type_for_vector_abi (TREE_VALUE (arg_chain), true, false);\n+    }\n+  else if (RECORD_OR_UNION_TYPE_P (type))\n+    {\n+      tree field;\n+\n+      for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+\t{\n+\t  if (TREE_CODE (field) != FIELD_DECL)\n+\t    continue;\n+\n+\t  s390_check_type_for_vector_abi (TREE_TYPE (field), arg_p, true);\n+\t}\n+    }\n+}\n+\n+\n /* System z builtins.  */\n \n #include \"s390-builtins.h\"\n@@ -10889,6 +10980,8 @@ s390_function_arg (cumulative_args_t cum_v, machine_mode mode,\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n \n+  if (!named)\n+    s390_check_type_for_vector_abi (type, true, false);\n \n   if (s390_function_arg_vector (mode, type))\n     {\n@@ -11280,6 +11373,8 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   size = int_size_in_bytes (type);\n \n+  s390_check_type_for_vector_abi (type, true, false);\n+\n   if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n     {\n       if (TARGET_DEBUG_ARG)\n@@ -13642,6 +13737,29 @@ s390_vector_alignment (const_tree type)\n   return MIN (64, tree_to_shwi (TYPE_SIZE (type)));\n }\n \n+/* Implement TARGET_ASM_FILE_END.  */\n+static void\n+s390_asm_file_end (void)\n+{\n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+  varpool_node *vnode;\n+  cgraph_node *cnode;\n+\n+  FOR_EACH_VARIABLE (vnode)\n+    if (TREE_PUBLIC (vnode->decl))\n+      s390_check_type_for_vector_abi (TREE_TYPE (vnode->decl), false, false);\n+\n+  FOR_EACH_FUNCTION (cnode)\n+    if (TREE_PUBLIC (cnode->decl))\n+      s390_check_type_for_vector_abi (TREE_TYPE (cnode->decl), false, false);\n+\n+\n+  if (s390_vector_abi != 0)\n+    fprintf (asm_out_file, \"\\t.gnu_attribute 8, %d\\n\",\n+\t     s390_vector_abi);\n+#endif\n+  file_end_indicate_exec_stack ();\n+}\n \n /* Return true if TYPE is a vector bool type.  */\n static inline bool\n@@ -13918,6 +14036,9 @@ s390_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n #undef TARGET_INVALID_BINARY_OP\n #define TARGET_INVALID_BINARY_OP s390_invalid_binary_op\n \n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END s390_asm_file_end\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "3f3f5785d577682591ba04320d4119cd7ae74ec3", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -26708,6 +26708,42 @@ fi\n       as_fn_error \"Requesting --with-nan= requires assembler support for -mnan=\" \"$LINENO\" 5\n     fi\n     ;;\n+    s390*-*-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .gnu_attribute support\" >&5\n+$as_echo_n \"checking assembler for .gnu_attribute support... \" >&6; }\n+if test \"${gcc_cv_as_s390_gnu_attribute+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_s390_gnu_attribute=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 18 \\) \\* 1000 + 0`\n+  then gcc_cv_as_s390_gnu_attribute=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '.gnu_attribute 8,1' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_s390_gnu_attribute=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_s390_gnu_attribute\" >&5\n+$as_echo \"$gcc_cv_as_s390_gnu_attribute\" >&6; }\n+if test $gcc_cv_as_s390_gnu_attribute = yes; then\n+\n+$as_echo \"#define HAVE_AS_GNU_ATTRIBUTE 1\" >>confdefs.h\n+\n+fi\n+    ;;\n esac\n \n # Mips and HP-UX need the GNU assembler."}, {"sha": "85f72d50dbfed0c342800f672b4210dd66bc9fe4", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -4442,6 +4442,13 @@ pointers into PC-relative form.])\n \t[Requesting --with-nan= requires assembler support for -mnan=])\n     fi\n     ;;\n+    s390*-*-*)\n+    gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n+      gcc_cv_as_s390_gnu_attribute, [2,18,0],,\n+      [.gnu_attribute 8,1],,\n+      [AC_DEFINE(HAVE_AS_GNU_ATTRIBUTE, 1,\n+\t  [Define if your assembler supports .gnu_attribute.])])\n+    ;;\n esac\n \n # Mips and HP-UX need the GNU assembler."}, {"sha": "d1431575ae8cb5e48f7a4da574f6be5e5782bc9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -1,3 +1,13 @@\n+2015-06-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-abi-1.c: Add gnu attribute check.\n+\t* gcc.target/s390/vector/vec-abi-attr-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-attr-2.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-attr-3.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-attr-4.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-attr-5.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-attr-6.c: New test.\n+\n 2015-06-23  Chen Gang  <gang.chen.5i5j@gmail.com>\n \n         PR target/65803"}, {"sha": "db18e5ec57b319a1179fdc64320a1ceefa1f80af", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -6,6 +6,7 @@\n /* Make sure the last argument is fetched from the argument overflow area.  */\n /* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,160\\\\(%r15\\\\)\" { target lp64 } } } */\n /* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,96\\\\(%r15\\\\)\" { target ilp32 } } } */\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n \n typedef double v2df __attribute__((vector_size(16)));\n "}, {"sha": "a06b33884488b2174672b6f8a7a9aa0ec4e39aef", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-1.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,18 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -mno-vx\" } */\n+\n+/* The function passes arguments whose calling conventions change with\n+   -mvx/-mno-vx.  In that case GCC has to emit the ABI attribute to\n+   allow GDB and Binutils to detect this.  */\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 1\" } } */\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+\n+v2df\n+add (v2df a, v2df b, v2df c, v2df d,\n+     v2df e, v2df f, v2df g, v2df h, v2df i)\n+{\n+  return a + b + c + d + e + f + g + h + i;\n+}"}, {"sha": "97b9748bb6c0298b1654fc6ee3a8d181c943d997", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-2.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,53 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* No abi attribute should be emitted when nothing relevant happened.  */\n+/* { dg-final { scan-assembler-not \"gnu_attribute\" } } */\n+\n+#include <stdarg.h>\n+\n+/* Local use is ok.  */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+static\n+v4si __attribute__((__noinline__))\n+foo (v4si a)\n+{\n+  return a + (v4si){ 1, 2, 3, 4 };\n+}\n+\n+int\n+bar (int a)\n+{\n+  return foo ((v4si){ 1, 1, 1, 1 })[1];\n+}\n+\n+/* Big vector type only used as function argument and return value\n+   without being a struct/union member.  The alignment change is not\n+   relevant here.  */\n+\n+typedef double v4df __attribute__((vector_size(32)));\n+\n+v4df\n+add (v4df a, v4df b, v4df c, v4df d,\n+     v4df e, v4df f, v4df g, v4df h, v4df i)\n+{\n+  return a + b + c + d + e + f + g + h + i;\n+}\n+\n+double\n+bar2 (int n, ...)\n+{\n+  double ret;\n+  v4df a;\n+  va_list va;\n+\n+  va_start (va, n);\n+  ret = va_arg (va, v4df)[2];\n+  va_end (va);\n+\n+  return ret;\n+}"}, {"sha": "f3dc368d26e652e4edee44a45efdca78030ca10f", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-3.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,18 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n+\n+typedef double v4df __attribute__((vector_size(32)));\n+typedef struct { v4df a; } s;\n+\n+s\n+add (v4df a, v4df b, v4df c, v4df d,\n+     v4df e, v4df f, v4df g, v4df h, v4df i)\n+{\n+  s t;\n+  t.a = a + b + c + d + e + f + g + h + i;\n+  return t;\n+}"}, {"sha": "ad9b29a8731ab759d72b6d0a999bf3e875d3def4", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-4.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,17 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n+\n+typedef int __attribute__((vector_size(16))) v4si;\n+\n+extern void bar (v4si);\n+\n+void\n+foo (int a)\n+{\n+  v4si b = (v4si){ a, a, a, a };\n+  bar (b);\n+}"}, {"sha": "fb5de4e71ad0baac7f26f9b287967c62a2ab42ff", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-5.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,19 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n+\n+#include <stdarg.h>\n+\n+typedef int __attribute__((vector_size(16))) v4si;\n+\n+extern void bar (int, ...);\n+\n+void\n+foo (int a)\n+{\n+  v4si b = (v4si){ a, a, a, a };\n+  bar (1, b);\n+}"}, {"sha": "9134fa7c88fd8609474c8683ced3809fb4227a0c", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-attr-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45901378cdf6b6c275e0f7553b8b6f8c76b417d4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-attr-6.c?ref=45901378cdf6b6c275e0f7553b8b6f8c76b417d4", "patch": "@@ -0,0 +1,24 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n+\n+#include <stdarg.h>\n+\n+typedef int __attribute__((vector_size(16))) v4si;\n+\n+int\n+bar (int n, ...)\n+{\n+  int ret;\n+  v4si a;\n+  va_list va;\n+\n+  va_start (va, n);\n+  ret = va_arg (va, v4si)[2];\n+  va_end (va);\n+\n+  return ret;\n+}"}]}