{"sha": "616fde536ecb92831bff313532f99121c9695c5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2ZmRlNTM2ZWNiOTI4MzFiZmYzMTM1MzJmOTkxMjFjOTY5NWM1YQ==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@redhat.com", "date": "2001-01-26T22:06:45Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-26T22:06:45Z"}, "message": "loop.c (loop_giv_reduce_benefit): Copy mode size into int variable.\n\n\t* loop.c (loop_giv_reduce_benefit): Copy mode size into\n\tint variable.\n\t(check_ext_dependant_givs): Initialise u_start_val and\n\tu_end_val.\n\t(load_mems): Make last_max_reg unsigned.\n\t(try_swap_copy_prop): Use INSN_P and initialise set.\n\nFrom-SVN: r39284", "tree": {"sha": "e95fe54314bf85527f266d1988a7b4ae636e31df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e95fe54314bf85527f266d1988a7b4ae636e31df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616fde536ecb92831bff313532f99121c9695c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616fde536ecb92831bff313532f99121c9695c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616fde536ecb92831bff313532f99121c9695c5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616fde536ecb92831bff313532f99121c9695c5a/comments", "author": null, "committer": null, "parents": [{"sha": "5bb1db008c77467f06f954152e24c9c071395aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb1db008c77467f06f954152e24c9c071395aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb1db008c77467f06f954152e24c9c071395aad"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "c2dcc4e422e3c1172f7647030b2edbb2b7742e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616fde536ecb92831bff313532f99121c9695c5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616fde536ecb92831bff313532f99121c9695c5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=616fde536ecb92831bff313532f99121c9695c5a", "patch": "@@ -1,3 +1,12 @@\n+2001-01-27  Michael Hayes  <mhayes@redhat.com>\n+\n+\t* loop.c (loop_giv_reduce_benefit): Copy mode size into\n+\tint variable.\n+\t(check_ext_dependant_givs): Initialise u_start_val and\n+\tu_end_val.\n+\t(load_mems): Make last_max_reg unsigned.\n+\t(try_swap_copy_prop): Use INSN_P and initialise set.\n+\n Fri Jan 26 23:22:58 2001  Denis Chertykov  <denisc@overta.ru>\n \n \t* README.AVR : Removed."}, {"sha": "eee79a31ae58c3291985ec4b930d30e1db7d721c", "filename": "gcc/loop.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616fde536ecb92831bff313532f99121c9695c5a/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616fde536ecb92831bff313532f99121c9695c5a/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=616fde536ecb92831bff313532f99121c9695c5a", "patch": "@@ -4135,17 +4135,19 @@ loop_giv_reduce_benefit (loop, bl, v, test_reg)\n       && benefit > 0\n       && GET_CODE (v->mult_val) == CONST_INT)\n     {\n+      int size = GET_MODE_SIZE (GET_MODE (v->mem));\n+\n       if (HAVE_POST_INCREMENT\n-\t  && INTVAL (v->mult_val) == GET_MODE_SIZE (GET_MODE (v->mem)))\n+\t  && INTVAL (v->mult_val) == size)\n \tbenefit += add_cost * bl->biv_count;\n       else if (HAVE_PRE_INCREMENT\n-\t       && INTVAL (v->mult_val) == GET_MODE_SIZE (GET_MODE (v->mem)))\n+\t       && INTVAL (v->mult_val) == size)\n \tbenefit += add_cost * bl->biv_count;\n       else if (HAVE_POST_DECREMENT\n-\t       && -INTVAL (v->mult_val) == GET_MODE_SIZE (GET_MODE (v->mem)))\n+\t       && -INTVAL (v->mult_val) == size)\n \tbenefit += add_cost * bl->biv_count;\n       else if (HAVE_PRE_DECREMENT\n-\t       && -INTVAL (v->mult_val) == GET_MODE_SIZE (GET_MODE (v->mem)))\n+\t       && -INTVAL (v->mult_val) == size)\n \tbenefit += add_cost * bl->biv_count;\n     }\n #endif\n@@ -6482,7 +6484,8 @@ check_ext_dependant_givs (bl, loop_info)\n   int ze_ok = 0, se_ok = 0, info_ok = 0;\n   enum machine_mode biv_mode = GET_MODE (bl->biv->src_reg);\n   HOST_WIDE_INT start_val;\n-  unsigned HOST_WIDE_INT u_end_val, u_start_val;\n+  unsigned HOST_WIDE_INT u_end_val = 0;\n+  unsigned HOST_WIDE_INT u_start_val = 0;\n   rtx incr = pc_rtx;\n   struct induction *v;\n \n@@ -8815,7 +8818,7 @@ load_mems (loop)\n   rtx end_label;\n   /* Nonzero if the next instruction may never be executed.  */\n   int next_maybe_never = 0;\n-  int last_max_reg = max_reg_num ();\n+  unsigned int last_max_reg = max_reg_num ();\n \n   if (loop_info->mems_idx == 0)\n     return;\n@@ -9247,7 +9250,7 @@ try_swap_copy_prop (loop, replacement, regno)\n      unsigned int regno;\n {\n   rtx insn;\n-  rtx set;\n+  rtx set = NULL_RTX;\n   unsigned int new_regno;\n \n   new_regno = REGNO (replacement);\n@@ -9257,7 +9260,7 @@ try_swap_copy_prop (loop, replacement, regno)\n        insn = next_insn_in_loop (loop, insn))\n     {\n       /* Search for the insn that copies REGNO to NEW_REGNO?  */\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+      if (INSN_P (insn)\n \t  && (set = single_set (insn))\n \t  && GET_CODE (SET_DEST (set)) == REG\n \t  && REGNO (SET_DEST (set)) == new_regno\n@@ -9266,7 +9269,7 @@ try_swap_copy_prop (loop, replacement, regno)\n \tbreak;\n     }\n \n-  if (insn != NULL_RTX)\n+  if (set)\n     {\n       rtx prev_insn;\n       rtx prev_set;\n@@ -9277,7 +9280,7 @@ try_swap_copy_prop (loop, replacement, regno)\n \n       prev_insn = PREV_INSN (insn);\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+      if (INSN_P (insn)\n \t  && (prev_set = single_set (prev_insn))\n \t  && GET_CODE (SET_DEST (prev_set)) == REG\n \t  && REGNO (SET_DEST (prev_set)) == regno)"}]}