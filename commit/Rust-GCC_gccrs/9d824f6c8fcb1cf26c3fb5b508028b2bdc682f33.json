{"sha": "9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4MjRmNmM4ZmNiMWNmMjZjM2ZiNWI1MDgwMjhiMmJkYzY4MmYzMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-23T21:23:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-23T21:23:27Z"}, "message": "log/syslog: Restore interface to make this work on Solaris again.\n\nFrom-SVN: r201188", "tree": {"sha": "5691227e5c7cd0babfc77fc0d3a3bb1700380e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5691227e5c7cd0babfc77fc0d3a3bb1700380e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/comments", "author": null, "committer": null, "parents": [{"sha": "dd7a40e14c20495d719ad715de00cff5c490fd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7a40e14c20495d719ad715de00cff5c490fd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd7a40e14c20495d719ad715de00cff5c490fd07"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "20acab8ffc02b9e5c972eae9a83d74dd9849644c", "filename": "libgo/go/log/syslog/syslog.go", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go?ref=9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "patch": "@@ -88,6 +88,15 @@ type Writer struct {\n \traddr    string\n \n \tmu   sync.Mutex // guards conn\n+\tconn serverConn\n+}\n+\n+type serverConn interface {\n+\twriteString(p Priority, hostname, tag, s, nl string) error\n+\tclose() error\n+}\n+\n+type netConn struct {\n \tconn net.Conn\n }\n \n@@ -135,7 +144,7 @@ func Dial(network, raddr string, priority Priority, tag string) (*Writer, error)\n func (w *Writer) connect() (err error) {\n \tif w.conn != nil {\n \t\t// ignore err from close, it makes sense to continue anyway\n-\t\tw.conn.Close()\n+\t\tw.conn.close()\n \t\tw.conn = nil\n \t}\n \n@@ -148,7 +157,7 @@ func (w *Writer) connect() (err error) {\n \t\tvar c net.Conn\n \t\tc, err = net.Dial(w.network, w.raddr)\n \t\tif err == nil {\n-\t\t\tw.conn = c\n+\t\t\tw.conn = netConn{c}\n \t\t\tif w.hostname == \"\" {\n \t\t\t\tw.hostname = c.LocalAddr().String()\n \t\t\t}\n@@ -168,7 +177,7 @@ func (w *Writer) Close() error {\n \tdefer w.mu.Unlock()\n \n \tif w.conn != nil {\n-\t\terr := w.conn.Close()\n+\t\terr := w.conn.close()\n \t\tw.conn = nil\n \t\treturn err\n \t}\n@@ -257,13 +266,22 @@ func (w *Writer) write(p Priority, msg string) (int, error) {\n \t\tnl = \"\\n\"\n \t}\n \n-\ttimestamp := time.Now().Format(time.RFC3339)\n-\tfmt.Fprintf(w.conn, \"<%d>%s %s %s[%d]: %s%s\",\n-\t\tp, timestamp, w.hostname,\n-\t\tw.tag, os.Getpid(), msg, nl)\n+\tw.conn.writeString(p, w.hostname, w.tag, msg, nl)\n \treturn len(msg), nil\n }\n \n+func (n netConn) writeString(p Priority, hostname, tag, msg, nl string) error {\n+\ttimestamp := time.Now().Format(time.RFC3339)\n+\t_, err := fmt.Fprintf(n.conn, \"<%d>%s %s %s[%d]: %s%s\",\n+\t\tp, timestamp, hostname,\n+\t\ttag, os.Getpid(), msg, nl)\n+\treturn err\n+}\n+\n+func (n netConn) close() error {\n+\treturn n.conn.Close()\n+}\n+\n // NewLogger creates a log.Logger whose output is written to\n // the system log service with the specified priority. The logFlag\n // argument is the flag set passed through to log.New to create"}, {"sha": "cf370eff9d768c660f656500d3e6e891b12c0ee0", "filename": "libgo/go/log/syslog/syslog_libc.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go?ref=9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "patch": "@@ -23,17 +23,17 @@ type libcConn int\n \n func syslog_c(int, *byte)\n \n-func (libcConn) writeString(p Priority, hostname, tag, msg string) (int, error) {\n+func (libcConn) writeString(p Priority, hostname, tag, msg, nl string) error {\n \ttimestamp := time.Now().Format(time.RFC3339)\n-\tlog := fmt.Sprintf(\"%s %s %s[%d]: %s\", timestamp, hostname, tag, os.Getpid(), msg)\n+\tlog := fmt.Sprintf(\"%s %s %s[%d]: %s%s\", timestamp, hostname, tag, os.Getpid(), msg, nl)\n \tbuf, err := syscall.BytePtrFromString(log)\n \tif err != nil {\n-\t\treturn 0, err\n+\t\treturn err\n \t}\n \tsyscall.Entersyscall()\n \tsyslog_c(int(p), buf)\n \tsyscall.Exitsyscall()\n-\treturn len(msg), nil\n+\treturn nil\n }\n \n func (libcConn) close() error {"}, {"sha": "1716d60feaad31f1d89f1f54fd98d0bf49acadcb", "filename": "libgo/go/log/syslog/syslog_unix.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go?ref=9d824f6c8fcb1cf26c3fb5b508028b2bdc682f33", "patch": "@@ -14,7 +14,7 @@ import (\n // unixSyslog opens a connection to the syslog daemon running on the\n // local machine using a Unix domain socket.\n \n-func unixSyslog() (conn net.Conn, err error) {\n+func unixSyslog() (conn serverConn, err error) {\n \tlogTypes := []string{\"unixgram\", \"unix\"}\n \tlogPaths := []string{\"/dev/log\", \"/var/run/syslog\"}\n \tfor _, network := range logTypes {\n@@ -23,7 +23,7 @@ func unixSyslog() (conn net.Conn, err error) {\n \t\t\tif err != nil {\n \t\t\t\tcontinue\n \t\t\t} else {\n-\t\t\t\treturn conn, nil\n+\t\t\t\treturn netConn{conn}, nil\n \t\t\t}\n \t\t}\n \t}"}]}