{"sha": "22fc7d3d46881819c51a2e38cfd5626172b3338e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmYzdkM2Q0Njg4MTgxOWM1MWEyZTM4Y2ZkNTYyNjE3MmIzMzM4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-19T06:52:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-19T06:52:56Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r200189", "tree": {"sha": "08f236dbded380e17f23f15743d46c9d7d702920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f236dbded380e17f23f15743d46c9d7d702920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22fc7d3d46881819c51a2e38cfd5626172b3338e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc7d3d46881819c51a2e38cfd5626172b3338e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fc7d3d46881819c51a2e38cfd5626172b3338e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc7d3d46881819c51a2e38cfd5626172b3338e/comments", "author": null, "committer": null, "parents": [{"sha": "b04e4b081bc1c36489c4f1fe76ecb3025b065d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04e4b081bc1c36489c4f1fe76ecb3025b065d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04e4b081bc1c36489c4f1fe76ecb3025b065d5c"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "9fc3562576cc901b741118ec23c13f1847fc2a0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fc7d3d46881819c51a2e38cfd5626172b3338e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fc7d3d46881819c51a2e38cfd5626172b3338e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22fc7d3d46881819c51a2e38cfd5626172b3338e", "patch": "@@ -13,7 +13,7 @@\n \tfunctions are inlined during failures to flag an error.\n \t* tree-inline.c (expand_call_inline): Allow the error to be flagged\n \tin early inline pass.\n-\t\n+\n 2013-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (initial_ix86_tune_features): Fix a typo\n@@ -80,8 +80,8 @@\n \n 2013-06-18  Sofiane Naci  <sofiane.naci@arm.com>\n \n-\t* config/arm/arm.md (attribute \"insn\"): Move multiplication and division\n-\tattributes to...\n+\t* config/arm/arm.md (attribute \"insn\"): Move multiplication and\n+\tdivision attributes to...\n \t(attribute \"type\"): ... here.  Remove mult.\n \t(attribute \"mul32\"): New attribute.\n \t(attribute \"mul64\"): Add umaal.\n@@ -134,7 +134,8 @@\n \t(1020mult4): Likewise.\n \t(1020mult5): Likewise.\n \t(1020mult6): Likewise.\n-\t* config/arm/cortex-a15.md (cortex_a15_mult32): Update attribute change.\n+\t* config/arm/cortex-a15.md (cortex_a15_mult32): Update attribute\n+\tchange.\n \t(cortex_a15_mult64): Likewise.\n \t(cortex_a15_sdiv): Likewise.\n \t(cortex_a15_udiv): Likewise.\n@@ -418,8 +419,7 @@\n \n 2013-06-13  Bin Cheng  <bin.cheng@arm.com>\n \n-\t* rtlanal.c (noop_move_p): Check the code to be executed for\n-\tCOND_EXEC.\n+\t* rtlanal.c (noop_move_p): Check the code to be executed for COND_EXEC.\n \n 2013-06-13  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -510,7 +510,8 @@\n \n 2013-06-12  Sofiane Naci  <sofiane.naci@arm.com>\n \n-\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): convert to split.\n+\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): Convert\n+\tto split.\n \t(aarch64_simd_combine<mode>): New instruction expansion.\n \t* config/aarch64/aarch64-protos.h (aarch64_split_simd_combine): New\n \tfunction prototype.\n@@ -646,8 +647,7 @@\n \n 2013-06-11  Richard Biener  <rguenther@suse.de>\n \n-\t* collect2.c (main): Do not redirect ld stdout/stderr when\n-\tdebugging.\n+\t* collect2.c (main): Do not redirect ld stdout/stderr when debugging.\n \n 2013-06-11  Anton Blanchard  <anton@samba.org>\n \n@@ -728,8 +728,7 @@\n \t(UNSPEC_P8V_RELOAD_FROM_VSX): Likewise.\n \t(UNSPEC_FUSION_GPR): Likewise.\n \t(FMOVE128_GPR): New iterator for direct move.\n-\t(f32_lv): New mode attribute for load/store of SFmode/SDmode\n-\tvalues.\n+\t(f32_lv): New mode attribute for load/store of SFmode/SDmode values.\n \t(f32_sv): Likewise.\n \t(f32_dm): Likewise.\n \t(zero_extend<mode>di2_internal1): Add support for power8 32-bit"}]}