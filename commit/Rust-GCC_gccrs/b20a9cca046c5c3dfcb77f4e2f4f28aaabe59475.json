{"sha": "b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwYTljY2EwNDZjNWMzZGZjYjc3ZjRlMmY0ZjI4YWFhYmU1OTQ3NQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-10-13T16:28:23Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-10-13T16:28:23Z"}, "message": "linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Choose MASK_ALIGN_NATURAL if rs6000_alignment_string not given.\n\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Choose\n\tMASK_ALIGN_NATURAL if rs6000_alignment_string not given.  Don't\n\tassign DEFAULT_ABI.\n\t(ADJUST_FIELD_ALIGN, ROUND_TYPE_ALIGN): Update comment.\n\t* config/rs6000/rs6000.c: Formatting.\n\t(rs6000_parse_alignment_option): Only set rs6000_alignment_flags\n\twhen rs6000_alignment_string given.\n\nFrom-SVN: r72431", "tree": {"sha": "49cc312f10effe408004249b7d5bf4b256eecc0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49cc312f10effe408004249b7d5bf4b256eecc0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/comments", "author": null, "committer": null, "parents": [{"sha": "776fd3363ad46d2a6f743a830da3fe61ad22d401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776fd3363ad46d2a6f743a830da3fe61ad22d401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776fd3363ad46d2a6f743a830da3fe61ad22d401"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "028191d5030b3af08fcbfe6ad1f1d99b3537bafa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "patch": "@@ -1,3 +1,13 @@\n+2003-10-14  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Choose\n+\tMASK_ALIGN_NATURAL if rs6000_alignment_string not given.  Don't\n+\tassign DEFAULT_ABI.\n+\t(ADJUST_FIELD_ALIGN, ROUND_TYPE_ALIGN): Update comment.\n+\t* config/rs6000/rs6000.c: Formatting.\n+\t(rs6000_parse_alignment_option): Only set rs6000_alignment_flags\n+\twhen rs6000_alignment_string given.\n+\n 2003-10-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/12538"}, {"sha": "63471ea7b1f6a8f85c0fa6970ab95f786eb8ee41", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "patch": "@@ -65,11 +65,13 @@\n #define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n+      if (rs6000_alignment_string == 0)\t\t\t\t\\\n+\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n       if (TARGET_64BIT)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      DEFAULT_ABI = ABI_AIX;\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n \t      error (INVALID_64BIT, \"call\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if (TARGET_RELOCATABLE)\t\t\t\t\\\n@@ -202,8 +204,7 @@\n /* We don't need to generate entries in .fixup.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n \n-/* This now supports a natural alignment mode. */\n-/* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n+/* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN\n #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n   ((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)\t\\\n@@ -216,8 +217,8 @@\n    ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n \n-/* AIX increases natural record alignment to doubleword if the first\n-   field is an FP double while the FP fields remain word aligned.  */\n+/* PowerPC64 Linux increases natural record alignment to doubleword if\n+   the first field is an FP double.  */\n #undef  ROUND_TYPE_ALIGN\n #define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\\\n   ((TARGET_ALTIVEC && TREE_CODE (STRUCT) == VECTOR_TYPE)\t\\"}, {"sha": "d518ed502cc100b4eba54bdea4a2cfe20a95169a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b20a9cca046c5c3dfcb77f4e2f4f28aaabe59475", "patch": "@@ -217,8 +217,8 @@ static void rs6000_emit_stack_tie (void);\n static void rs6000_frame_related (rtx, rtx, HOST_WIDE_INT, rtx, rtx);\n static rtx spe_synthesize_frame_save (rtx);\n static bool spe_func_has_64bit_regs_p (void);\n-static void emit_frame_save (rtx, rtx, enum machine_mode,\n-\t\t\t\t     unsigned int, int, int);\n+static void emit_frame_save (rtx, rtx, enum machine_mode, unsigned int,\n+\t\t\t     int, int);\n static rtx gen_frame_mem_offset (enum machine_mode, rtx, int);\n static void rs6000_emit_allocate_stack (HOST_WIDE_INT, int);\n static unsigned rs6000_hash_constant (rtx);\n@@ -243,8 +243,8 @@ extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static void rs6000_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void rs6000_output_function_epilogue (FILE *, HOST_WIDE_INT);\n-static void rs6000_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t    HOST_WIDE_INT, tree);\n+static void rs6000_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t    tree);\n static rtx rs6000_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n static bool rs6000_return_in_memory (tree, tree);\n static void rs6000_file_start (void);\n@@ -255,7 +255,7 @@ static void rs6000_elf_asm_out_destructor (rtx, int);\n static void rs6000_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void rs6000_elf_unique_section (tree, int);\n static void rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t\t   unsigned HOST_WIDE_INT);\n+\t\t\t\t\t   unsigned HOST_WIDE_INT);\n static void rs6000_elf_encode_section_info (tree, rtx, int)\n      ATTRIBUTE_UNUSED;\n static bool rs6000_elf_in_small_data_p (tree);\n@@ -266,7 +266,7 @@ static void rs6000_xcoff_asm_named_section (const char *, unsigned int);\n static void rs6000_xcoff_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void rs6000_xcoff_unique_section (tree, int);\n static void rs6000_xcoff_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t\t     unsigned HOST_WIDE_INT);\n+\t\t\t\t\t     unsigned HOST_WIDE_INT);\n static const char * rs6000_xcoff_strip_name_encoding (const char *);\n static unsigned int rs6000_xcoff_section_type_flags (tree, const char *, int);\n static void rs6000_xcoff_file_start (void);\n@@ -294,9 +294,9 @@ static void altivec_init_builtins (void);\n static void rs6000_common_init_builtins (void);\n static void rs6000_init_libfuncs (void);\n \n-static void enable_mask_for_builtins (struct builtin_description *,\n-\t\t\t\t\t      int, enum rs6000_builtins,\n-\t\t\t\t\t      enum rs6000_builtins);\n+static void enable_mask_for_builtins (struct builtin_description *, int,\n+\t\t\t\t      enum rs6000_builtins,\n+\t\t\t\t      enum rs6000_builtins);\n static void spe_init_builtins (void);\n static rtx spe_expand_builtin (tree, rtx, bool *);\n static rtx spe_expand_predicate_builtin (enum insn_code, tree, rtx);\n@@ -330,7 +330,7 @@ static inline int rs6000_tls_symbol_ref_1 (rtx *, void *);\n static const char *rs6000_get_some_local_dynamic_name (void);\n static int rs6000_get_some_local_dynamic_name_1 (rtx *, void *);\n static rtx rs6000_complex_function_value (enum machine_mode);\n-static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *, \n+static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n@@ -975,8 +975,9 @@ rs6000_parse_abi_options (void)\n static void\n rs6000_parse_alignment_option (void)\n {\n-  if (rs6000_alignment_string == 0\n-      || ! strcmp (rs6000_alignment_string, \"power\"))\n+  if (rs6000_alignment_string == 0)\n+    return;\n+  else if (! strcmp (rs6000_alignment_string, \"power\"))\n     rs6000_alignment_flags = MASK_ALIGN_POWER;\n   else if (! strcmp (rs6000_alignment_string, \"natural\"))\n     rs6000_alignment_flags = MASK_ALIGN_NATURAL;"}]}