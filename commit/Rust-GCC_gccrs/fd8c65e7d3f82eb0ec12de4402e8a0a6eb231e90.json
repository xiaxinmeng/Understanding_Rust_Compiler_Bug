{"sha": "fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4YzY1ZTdkM2Y4MmViMGVjMTJkZTQ0MDJlOGEwYTZlYjIzMWU5MA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2013-06-26T14:46:44Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2013-06-26T14:46:44Z"}, "message": "power8.md: New.\n\n\t* config/rs6000/power8.md: New.\n\t* config/rs6000/rs6000-cpus.def (RS6000_CPU table): Adjust processor\n\tsetting for power8 entry.\n\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add power8.md.\n\t* config/rs6000/rs6000.c (is_microcoded_insn, is_cracked_insn): Adjust\n\ttest for Power4/Power5 only.\n\t(insn_must_be_first_in_group, insn_must_be_last_in_group): Add Power8\n\tsupport.\n\t(force_new_group): Adjust comment.\n\t* config/rs6000/rs6000.md: Include power8.md.\n\n\nCo-Authored-By: Pat Haugen <pthaugen@us.ibm.com>\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r200423", "tree": {"sha": "24423cd5a257b811e3d268b11920412e0af00131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24423cd5a257b811e3d268b11920412e0af00131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/comments", "author": null, "committer": null, "parents": [{"sha": "b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24a2ce5b25b5009ac9371b474d25aefc653ebb7"}], "stats": {"total": 454, "additions": 448, "deletions": 6}, "files": [{"sha": "9ee878b092f5959d376dcdc25f72b7c44b9f3719", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -1,3 +1,18 @@\n+2013-06-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Pat Haugen <pthaugen@us.ibm.com>\n+\t    Peter Bergner <bergner@vnet.ibm.com>\n+\n+\t* config/rs6000/power8.md: New.\n+\t* config/rs6000/rs6000-cpus.def (RS6000_CPU table): Adjust processor\n+\tsetting for power8 entry.\n+\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add power8.md.\n+\t* config/rs6000/rs6000.c (is_microcoded_insn, is_cracked_insn): Adjust\n+\ttest for Power4/Power5 only.\n+\t(insn_must_be_first_in_group, insn_must_be_last_in_group): Add Power8\n+\tsupport.\n+\t(force_new_group): Adjust comment.\n+\t* config/rs6000/rs6000.md: Include power8.md.\n+\n 2013-06-26  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/arm.h (MAX_CONDITIONAL_EXECUTE): Define macro."}, {"sha": "83bf71974830b1052afb4361d229180d33777bb7", "filename": "gcc/config/rs6000/power8.md", "status": "added", "additions": 373, "deletions": 0, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -0,0 +1,373 @@\n+;; Scheduling description for IBM POWER8 processor.\n+;; Copyright (C) 2013 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"power8fxu,power8lsu,power8vsu,power8misc\")\n+\n+(define_cpu_unit \"fxu0_power8,fxu1_power8\" \"power8fxu\")\n+(define_cpu_unit \"lu0_power8,lu1_power8\" \"power8lsu\")\n+(define_cpu_unit \"lsu0_power8,lsu1_power8\" \"power8lsu\")\n+(define_cpu_unit \"vsu0_power8,vsu1_power8\" \"power8vsu\")\n+(define_cpu_unit \"bpu_power8,cru_power8\" \"power8misc\")\n+(define_cpu_unit \"du0_power8,du1_power8,du2_power8,du3_power8,du4_power8,\\\n+\t\t  du5_power8,du6_power8\"  \"power8misc\")\n+\n+\n+; Dispatch group reservations\n+(define_reservation \"DU_any_power8\"\n+\t\t    \"du0_power8|du1_power8|du2_power8|du3_power8|du4_power8|\\\n+\t\t     du5_power8\")\n+\n+; 2-way Cracked instructions go in slots 0-1\n+;   (can also have a second in slots 3-4 if insns are adjacent)\n+(define_reservation \"DU_cracked_power8\"\n+\t\t    \"du0_power8+du1_power8\")\n+\n+; Insns that are first in group\n+(define_reservation \"DU_first_power8\"\n+\t\t    \"du0_power8\")\n+\n+; Insns that are first and last in group\n+(define_reservation \"DU_both_power8\"\n+\t\t    \"du0_power8+du1_power8+du2_power8+du3_power8+du4_power8+\\\n+\t\t     du5_power8+du6_power8\")\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du0_power8\" \"du1_power8,du2_power8,du3_power8,du4_power8,\\\n+\t      du5_power8,du6_power8\")\n+(absence_set \"du1_power8\" \"du2_power8,du3_power8,du4_power8,du5_power8,\\\n+\t      du6_power8\")\n+(absence_set \"du2_power8\" \"du3_power8,du4_power8,du5_power8,du6_power8\")\n+(absence_set \"du3_power8\" \"du4_power8,du5_power8,du6_power8\")\n+(absence_set \"du4_power8\" \"du5_power8,du6_power8\")\n+(absence_set \"du5_power8\" \"du6_power8\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"FXU_power8\"\n+                    \"fxu0_power8|fxu1_power8\")\n+\n+(define_reservation \"LU_power8\"\n+                    \"lu0_power8|lu1_power8\")\n+\n+(define_reservation \"LSU_power8\"\n+                    \"lsu0_power8|lsu1_power8\")\n+\n+(define_reservation \"LU_or_LSU_power8\"\n+                    \"lu0_power8|lu1_power8|lsu0_power8|lsu1_power8\")\n+\n+(define_reservation \"VSU_power8\"\n+                    \"vsu0_power8|vsu1_power8\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power8-load\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LU_or_LSU_power8\")\n+\n+(define_insn_reservation \"power8-load-update\" 3\n+  (and (eq_attr \"type\" \"load_u,load_ux\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_or_LSU_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-load-ext\" 3\n+  (and (eq_attr \"type\" \"load_ext\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_or_LSU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-load-ext-update\" 3\n+  (and (eq_attr \"type\" \"load_ext_u,load_ext_ux\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LU_or_LSU_power8+FXU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-fpload\" 5\n+  (and (eq_attr \"type\" \"fpload,vecload\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LU_power8\")\n+\n+(define_insn_reservation \"power8-fpload-update\" 5\n+  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-store\" 5 ; store-forwarding latency\n+  (and (eq_attr \"type\" \"store,store_u\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-store-update-indexed\" 5\n+  (and (eq_attr \"type\" \"store_ux\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-fpstore\" 5\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-fpstore-update\" 5\n+  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecstore\" 5\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-larx\" 3\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LU_or_LSU_power8\")\n+\n+(define_insn_reservation \"power8-stcx\" 10\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-sync\" 1\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LSU_power8\")\n+\n+\n+; FX Unit\n+(define_insn_reservation \"power8-1cyc\" 1\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,shift,trap,\\\n+                        var_shift_rotate,exts,isel\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 2 \"power8-1cyc\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+;\t\t \"power8-load,power8-load-update,power8-load-ext,\\\n+;\t\t  power8-load-ext-update,power8-fpload,power8-fpload-update,\\\n+;\t\t  power8-store,power8-store-update,power8-store-update-indexed,\\\n+;\t\t  power8-fpstore,power8-fpstore-update,power8-vecstore,\\\n+;\t\t  power8-larx,power8-stcx\")\n+\n+(define_insn_reservation \"power8-2cyc\" 2\n+  (and (eq_attr \"type\" \"cntlz,popcnt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8+DU_any_power8,FXU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8+DU_any_power8+DU_any_power8,FXU_power8,FXU_power8,FXU_power8\")\n+\n+; cmp - Normal compare insns\n+(define_insn_reservation \"power8-cmp\" 2\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; fast_compare : add./and./nor./etc\n+(define_insn_reservation \"power8-fast-compare\" 2\n+  (and (eq_attr \"type\" \"fast_compare\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; compare : rldicl./exts./etc\n+; delayed_compare : rlwinm./slwi./etc\n+; var_delayed_compare : rlwnm./slw./etc\n+(define_insn_reservation \"power8-compare\" 2\n+  (and (eq_attr \"type\" \"compare,delayed_compare,var_delayed_compare\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,FXU_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 3 \"power8-fast-compare,power8-compare\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+\n+; 5 cycle CR latency \n+(define_bypass 5 \"power8-fast-compare,power8-compare\"\n+\t\t \"power8-crlogical,power8-mfcr,power8-mfcrf,power8-branch\")\n+\n+(define_insn_reservation \"power8-mul\" 4\n+  (and (eq_attr \"type\" \"imul,imul2,imul3,lmul\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-mul-compare\" 4\n+  (and (eq_attr \"type\" \"imul_compare,lmul_compare\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 5 \"power8-mul,power8-mul-compare\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+\n+; 7 cycle CR latency \n+(define_bypass 7 \"power8-mul,power8-mul-compare\"\n+\t\t \"power8-crlogical,power8-mfcr,power8-mfcrf,power8-branch\")\n+\n+; FXU divides are not pipelined\n+(define_insn_reservation \"power8-idiv\" 37\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,fxu0_power8*37|fxu1_power8*37\")\n+\n+(define_insn_reservation \"power8-ldiv\" 68\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,fxu0_power8*68|fxu1_power8*68\")\n+\n+(define_insn_reservation \"power8-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,FXU_power8\")\n+\n+; Should differentiate between 1 cr field and > 1 since mtocrf is not microcode\n+(define_insn_reservation \"power8-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,FXU_power8\")\n+\n+\n+; CR Unit\n+(define_insn_reservation \"power8-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8\")\n+\n+(define_insn_reservation \"power8-mfcr\" 5\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,cru_power8\")\n+\n+(define_insn_reservation \"power8-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8\")\n+\n+\n+; BR Unit\n+; Branches take dispatch slot 7, but reserve any remaining prior slots to\n+; prevent other insns from grabbing them once this is assigned.\n+(define_insn_reservation \"power8-branch\" 3\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"(du6_power8\\\n+   |du5_power8+du6_power8\\\n+   |du4_power8+du5_power8+du6_power8\\\n+   |du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du2_power8+du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du1_power8+du2_power8+du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du0_power8+du1_power8+du2_power8+du3_power8+du4_power8+du5_power8+\\\n+    du6_power8),bpu_power8\")\n+\n+; Branch updating LR/CTR feeding mf[lr|ctr]\n+(define_bypass 4 \"power8-branch\" \"power8-mfjmpr\")\n+\n+\n+; VS Unit (includes FP/VSX/VMX/DFP/Crypto)\n+(define_insn_reservation \"power8-fp\" 6\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+; Additional 3 cycles for any CR result\n+(define_bypass 9 \"power8-fp\" \"power8-crlogical,power8-mfcr*,power8-branch\")\n+\n+(define_insn_reservation \"power8-fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-sdiv\" 27\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-sqrt\" 32\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-dsqrt\" 44\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecsimple\" 2\n+  (and (eq_attr \"type\" \"vecperm,vecsimple,veccmp\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecnormal\" 6\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_bypass 7 \"power8-vecnormal\"\n+\t\t \"power8-vecsimple,power8-veccomplex,power8-fpstore*,\\\n+\t\t  power8-vecstore\")\n+\n+(define_insn_reservation \"power8-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecfdiv\" 25\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecdiv\" 31\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-mffgpr\" 5\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-mftgpr\" 6\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-crypto\" 7\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+"}, {"sha": "08346b61d17e65c889ab4301707f624376292870", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -181,7 +181,7 @@ RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n \t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n \t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n \t    | MASK_VSX | MASK_RECIP_PRECISION | MASK_VSX_TIMODE)\n-RS6000_CPU (\"power8\", PROCESSOR_POWER7, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n+RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "2331c5029c272250b373f2bf5bb799d64fd94532", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -24196,7 +24196,8 @@ is_microcoded_insn (rtx insn)\n   if (rs6000_cpu_attr == CPU_CELL)\n     return get_attr_cell_micro (insn) == CELL_MICRO_ALWAYS;\n \n-  if (rs6000_sched_groups)\n+  if (rs6000_sched_groups\n+      && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n       if (type == TYPE_LOAD_EXT_U\n@@ -24221,7 +24222,8 @@ is_cracked_insn (rtx insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  if (rs6000_sched_groups)\n+  if (rs6000_sched_groups\n+      && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n       if (type == TYPE_LOAD_U || type == TYPE_STORE_U\n@@ -25095,7 +25097,6 @@ insn_must_be_first_in_group (rtx insn)\n         }\n       break;\n     case PROCESSOR_POWER7:\n-    case PROCESSOR_POWER8:\t/* FIXME */\n       type = get_attr_type (insn);\n \n       switch (type)\n@@ -25130,6 +25131,39 @@ insn_must_be_first_in_group (rtx insn)\n           break;\n         }\n       break;\n+    case PROCESSOR_POWER8:\n+      type = get_attr_type (insn);\n+\n+      switch (type)\n+        {\n+        case TYPE_CR_LOGICAL:\n+        case TYPE_DELAYED_CR:\n+        case TYPE_MFCR:\n+        case TYPE_MFCRF:\n+        case TYPE_MTCR:\n+        case TYPE_COMPARE:\n+        case TYPE_DELAYED_COMPARE:\n+        case TYPE_VAR_DELAYED_COMPARE:\n+        case TYPE_IMUL_COMPARE:\n+        case TYPE_LMUL_COMPARE:\n+        case TYPE_SYNC:\n+        case TYPE_ISYNC:\n+        case TYPE_LOAD_L:\n+        case TYPE_STORE_C:\n+        case TYPE_LOAD_U:\n+        case TYPE_LOAD_UX:\n+        case TYPE_LOAD_EXT:\n+        case TYPE_LOAD_EXT_U:\n+        case TYPE_LOAD_EXT_UX:\n+        case TYPE_STORE_UX:\n+        case TYPE_VECSTORE:\n+        case TYPE_MFJMPR:\n+        case TYPE_MTJMPR:\n+          return true;\n+        default:\n+          break;\n+        }\n+      break;\n     default:\n       break;\n     }\n@@ -25192,7 +25226,6 @@ insn_must_be_last_in_group (rtx insn)\n     }\n     break;\n   case PROCESSOR_POWER7:\n-  case PROCESSOR_POWER8:\t/* FIXME */\n     type = get_attr_type (insn);\n \n     switch (type)\n@@ -25209,6 +25242,25 @@ insn_must_be_last_in_group (rtx insn)\n         break;\n     }\n     break;\n+  case PROCESSOR_POWER8:\n+    type = get_attr_type (insn);\n+\n+    switch (type)\n+      {\n+      case TYPE_MFCR:\n+      case TYPE_MTCR:\n+      case TYPE_ISYNC:\n+      case TYPE_SYNC:\n+      case TYPE_LOAD_L:\n+      case TYPE_STORE_C:\n+      case TYPE_LOAD_EXT_U:\n+      case TYPE_LOAD_EXT_UX:\n+      case TYPE_STORE_UX:\n+        return true;\n+      default:\n+        break;\n+    }\n+    break;\n   default:\n     break;\n   }\n@@ -25298,7 +25350,7 @@ force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n       if (can_issue_more && !is_branch_slot_insn (next_insn))\n \tcan_issue_more--;\n \n-      /* Power6 and Power7 have special group ending nop. */\n+      /* Do we have a special group ending nop? */\n       if (rs6000_cpu_attr == CPU_POWER6 || rs6000_cpu_attr == CPU_POWER7\n \t  || rs6000_cpu_attr == CPU_POWER8)\n \t{"}, {"sha": "010e21f7413fc1d55dec5fb6a47a9807ce5db719", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -213,6 +213,7 @@\n (include \"power5.md\")\n (include \"power6.md\")\n (include \"power7.md\")\n+(include \"power8.md\")\n (include \"cell.md\")\n (include \"xfpu.md\")\n (include \"a2.md\")"}, {"sha": "5889d6d82d4261c02bce290285ae2455bd2d61b4", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=fd8c65e7d3f82eb0ec12de4402e8a0a6eb231e90", "patch": "@@ -60,6 +60,7 @@ MD_INCLUDES = $(srcdir)/config/rs6000/rs64.md \\\n \t$(srcdir)/config/rs6000/power5.md \\\n \t$(srcdir)/config/rs6000/power6.md \\\n \t$(srcdir)/config/rs6000/power7.md \\\n+\t$(srcdir)/config/rs6000/power8.md \\\n \t$(srcdir)/config/rs6000/cell.md \\\n \t$(srcdir)/config/rs6000/xfpu.md \\\n \t$(srcdir)/config/rs6000/a2.md \\"}]}