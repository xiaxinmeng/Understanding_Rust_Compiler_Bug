{"sha": "3c64582372cf445eabc4f9e99def7e33fb0270ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2NDU4MjM3MmNmNDQ1ZWFiYzRmOWU5OWRlZjdlMzNmYjAyNzBlZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-31T08:46:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-08T21:34:16Z"}, "message": "c++: Fix docs on assignment of virtual bases [PR60318]\n\nThe description of behaviour is incorrect, the virtual base gets\nassigned before entering the bodies of A::operator= and B::operator=,\nnot after.\n\nThe example is also ill-formed (passing a string literal to char*) and\nundefined (missing return from Base::operator=).\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\ngcc/ChangeLog:\n\n\tPR c++/60318\n\t* doc/trouble.texi (Copy Assignment): Fix description of\n\tbehaviour and fix code in example.", "tree": {"sha": "420f0cb5fd97ec25c47fa1354f7ae952116e5b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/420f0cb5fd97ec25c47fa1354f7ae952116e5b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c64582372cf445eabc4f9e99def7e33fb0270ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c64582372cf445eabc4f9e99def7e33fb0270ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c64582372cf445eabc4f9e99def7e33fb0270ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c64582372cf445eabc4f9e99def7e33fb0270ee/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66b9f6779f46433b0e2c093b58403604ed131cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66b9f6779f46433b0e2c093b58403604ed131cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66b9f6779f46433b0e2c093b58403604ed131cc"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "8b34be4aa638f63fed92eb54ad574f253af172b5", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c64582372cf445eabc4f9e99def7e33fb0270ee/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c64582372cf445eabc4f9e99def7e33fb0270ee/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=3c64582372cf445eabc4f9e99def7e33fb0270ee", "patch": "@@ -865,10 +865,11 @@ objects behave unspecified when being assigned.  For example:\n @smallexample\n struct Base@{\n   char *name;\n-  Base(char *n) : name(strdup(n))@{@}\n+  Base(const char *n) : name(strdup(n))@{@}\n   Base& operator= (const Base& other)@{\n    free (name);\n    name = strdup (other.name);\n+   return *this;\n   @}\n @};\n \n@@ -901,8 +902,8 @@ inside @samp{func} in the example).\n G++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n direct bases, then assign all members.  In that algorithm, the virtual\n base subobject can be encountered more than once.  In the example, copying\n-proceeds in the following order: @samp{val}, @samp{name} (via\n-@code{strdup}), @samp{bval}, and @samp{name} again.\n+proceeds in the following order: @samp{name} (via @code{strdup}),\n+@samp{val}, @samp{name} again, and @samp{bval}.\n \n If application code relies on copy-assignment, a user-defined\n copy-assignment operator removes any uncertainties.  With such an"}]}