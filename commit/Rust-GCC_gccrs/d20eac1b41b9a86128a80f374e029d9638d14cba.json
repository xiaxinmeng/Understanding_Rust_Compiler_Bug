{"sha": "d20eac1b41b9a86128a80f374e029d9638d14cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwZWFjMWI0MWI5YTg2MTI4YTgwZjM3NGUwMjlkOTYzOGQxNGNiYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-06T09:27:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-06T09:27:09Z"}, "message": "re PR tree-optimization/82397 (qsort comparator non-negative on sorted output: 1 in vect_analyze_data_ref_accesses)\n\n2017-10-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82397\n\t* tree-vect-data-refs.c (dr_group_sort_cmp): Do not use\n\toperand_equal_p but rely on data_ref_compare_tree for detecting\n\tequalities.\n\t(vect_analyze_data_ref_accesses): Use data_ref_compare_tree\n\tto match up with dr_group_sort_cmp.\n\n\t* gfortran.dg/pr82397.f: New testcase.\n\nFrom-SVN: r253482", "tree": {"sha": "049b9f13d10c464947754cf3b63b31f315f8dcc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049b9f13d10c464947754cf3b63b31f315f8dcc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d20eac1b41b9a86128a80f374e029d9638d14cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20eac1b41b9a86128a80f374e029d9638d14cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20eac1b41b9a86128a80f374e029d9638d14cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20eac1b41b9a86128a80f374e029d9638d14cba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac95a65da150a120cf729d1a773af7417e263330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac95a65da150a120cf729d1a773af7417e263330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac95a65da150a120cf729d1a773af7417e263330"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "a5666868b74b966c00f8eeafb147bf24d51b468c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d20eac1b41b9a86128a80f374e029d9638d14cba", "patch": "@@ -1,3 +1,12 @@\n+2017-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82397\n+\t* tree-vect-data-refs.c (dr_group_sort_cmp): Do not use\n+\toperand_equal_p but rely on data_ref_compare_tree for detecting\n+\tequalities.\n+\t(vect_analyze_data_ref_accesses): Use data_ref_compare_tree\n+\tto match up with dr_group_sort_cmp.\n+\n 2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/82322"}, {"sha": "cf7f2c82a37bb785f4b113f06d70b3991c7981b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d20eac1b41b9a86128a80f374e029d9638d14cba", "patch": "@@ -1,3 +1,8 @@\n+2017-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82397\n+\t* gfortran.dg/pr82397.f: New testcase.\n+\n 2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/82322"}, {"sha": "9a51e9e0453bb11b51c4184571641716188bf8c6", "filename": "gcc/testsuite/gfortran.dg/pr82397.f", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82397.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82397.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82397.f?ref=d20eac1b41b9a86128a80f374e029d9638d14cba", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! { dg-options \"-Ofast\" }\n+\n+      subroutine foo(U,V,R,N,A)\n+      integer N\n+      real*8 U(N,N,N),V(N,N,N),R(N,N,N),A(0:3)\n+      integer I3, I2, I1\n+C\n+      do I3=2,N-1\n+       do I2=2,N-1\n+        do I1=2,N-1\n+         R(I1,I2,I3)=V(I1,I2,I3)\n+     *      -A(0)*( U(I1,  I2,  I3  ) )\n+     *      -A(1)*( U(I1-1,I2,  I3  ) + U(I1+1,I2,  I3  )\n+     *                 +  U(I1,  I2-1,I3  ) + U(I1,  I2+1,I3  )\n+     *                 +  U(I1,  I2,  I3-1) + U(I1,  I2,  I3+1) )\n+     *      -A(2)*( U(I1-1,I2-1,I3  ) + U(I1+1,I2-1,I3  )\n+     *                 +  U(I1-1,I2+1,I3  ) + U(I1+1,I2+1,I3  )\n+     *                 +  U(I1,  I2-1,I3-1) + U(I1,  I2+1,I3-1)\n+     *                 +  U(I1,  I2-1,I3+1) + U(I1,  I2+1,I3+1)\n+     *                 +  U(I1-1,I2,  I3-1) + U(I1-1,I2,  I3+1)\n+     *                 +  U(I1+1,I2,  I3-1) + U(I1+1,I2,  I3+1) )\n+     *      -A(3)*( U(I1-1,I2-1,I3-1) + U(I1+1,I2-1,I3-1)\n+     *                 +  U(I1-1,I2+1,I3-1) + U(I1+1,I2+1,I3-1)\n+     *                 +  U(I1-1,I2-1,I3+1) + U(I1+1,I2-1,I3+1)\n+     *                 +  U(I1-1,I2+1,I3+1) + U(I1+1,I2+1,I3+1) )\n+        enddo\n+       enddo\n+      enddo\n+      return\n+      end\n+"}, {"sha": "ca864987a595ccf46aa2e2deb3f25e5d1780f6ee", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20eac1b41b9a86128a80f374e029d9638d14cba/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=d20eac1b41b9a86128a80f374e029d9638d14cba", "patch": "@@ -2727,43 +2727,30 @@ dr_group_sort_cmp (const void *dra_, const void *drb_)\n     return loopa->num < loopb->num ? -1 : 1;\n \n   /* Ordering of DRs according to base.  */\n-  if (!operand_equal_p (DR_BASE_ADDRESS (dra), DR_BASE_ADDRESS (drb), 0))\n-    {\n-      cmp = data_ref_compare_tree (DR_BASE_ADDRESS (dra),\n-\t\t\t\t   DR_BASE_ADDRESS (drb));\n-      if (cmp != 0)\n-        return cmp;\n-    }\n+  cmp = data_ref_compare_tree (DR_BASE_ADDRESS (dra),\n+\t\t\t       DR_BASE_ADDRESS (drb));\n+  if (cmp != 0)\n+    return cmp;\n \n   /* And according to DR_OFFSET.  */\n-  if (!dr_equal_offsets_p (dra, drb))\n-    {\n-      cmp = data_ref_compare_tree (DR_OFFSET (dra), DR_OFFSET (drb));\n-      if (cmp != 0)\n-        return cmp;\n-    }\n+  cmp = data_ref_compare_tree (DR_OFFSET (dra), DR_OFFSET (drb));\n+  if (cmp != 0)\n+    return cmp;\n \n   /* Put reads before writes.  */\n   if (DR_IS_READ (dra) != DR_IS_READ (drb))\n     return DR_IS_READ (dra) ? -1 : 1;\n \n   /* Then sort after access size.  */\n-  if (!operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))),\n-\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))), 0))\n-    {\n-      cmp = data_ref_compare_tree (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))),\n-\t\t\t\t   TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))));\n-      if (cmp != 0)\n-        return cmp;\n-    }\n+  cmp = data_ref_compare_tree (TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra))),\n+\t\t\t       TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb))));\n+  if (cmp != 0)\n+    return cmp;\n \n   /* And after step.  */\n-  if (!operand_equal_p (DR_STEP (dra), DR_STEP (drb), 0))\n-    {\n-      cmp = data_ref_compare_tree (DR_STEP (dra), DR_STEP (drb));\n-      if (cmp != 0)\n-        return cmp;\n-    }\n+  cmp = data_ref_compare_tree (DR_STEP (dra), DR_STEP (drb));\n+  if (cmp != 0)\n+    return cmp;\n \n   /* Then sort after DR_INIT.  In case of identical DRs sort after stmt UID.  */\n   cmp = tree_int_cst_compare (DR_INIT (dra), DR_INIT (drb));\n@@ -2835,9 +2822,9 @@ vect_analyze_data_ref_accesses (vec_info *vinfo)\n \t     and they are both either store or load (not load and store,\n \t     not masked loads or stores).  */\n \t  if (DR_IS_READ (dra) != DR_IS_READ (drb)\n-\t      || !operand_equal_p (DR_BASE_ADDRESS (dra),\n-\t\t\t\t   DR_BASE_ADDRESS (drb), 0)\n-\t      || !dr_equal_offsets_p (dra, drb)\n+\t      || data_ref_compare_tree (DR_BASE_ADDRESS (dra),\n+\t\t\t\t\tDR_BASE_ADDRESS (drb)) != 0\n+\t      || data_ref_compare_tree (DR_OFFSET (dra), DR_OFFSET (drb)) != 0\n \t      || !gimple_assign_single_p (DR_STMT (dra))\n \t      || !gimple_assign_single_p (DR_STMT (drb)))\n \t    break;\n@@ -2851,7 +2838,7 @@ vect_analyze_data_ref_accesses (vec_info *vinfo)\n \t    break;\n \n \t  /* Check that the data-refs have the same step.  */\n-\t  if (!operand_equal_p (DR_STEP (dra), DR_STEP (drb), 0))\n+\t  if (data_ref_compare_tree (DR_STEP (dra), DR_STEP (drb)) != 0)\n \t    break;\n \n \t  /* Do not place the same access in the interleaving chain twice.  */"}]}