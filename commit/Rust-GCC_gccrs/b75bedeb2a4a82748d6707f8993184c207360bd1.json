{"sha": "b75bedeb2a4a82748d6707f8993184c207360bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1YmVkZWIyYTRhODI3NDhkNjcwN2Y4OTkzMTg0YzIwNzM2MGJkMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-14T19:44:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-14T19:44:03Z"}, "message": "string.tcc (_Rep::_S_max_size): Use typename for its size_type return type.\n\n\n2000-09-14  Brendan Kehoe  <brendan@zen.org>\n\n        * bits/string.tcc (_Rep::_S_max_size): Use typename for its size_type\n        return type.\n\n        * src/Makefile.an (headers): Also install backward/fstream.h.\n        * src/Makefile.in: Regenerate.\n\n        * bits/char_traits.h (char_traits<_CharT>::get_state,\n        char_traits<char>::get_state, char_traits<wchar_t>::get_state): Pass\n        argument in by reference, not by value. Uglify to _S_get_state.\n\t(char_traits<*>::__eos): Uglify to _S_eos.\n\t* bits/std_ostream.h (ends(basic_ostream<_CharT, _Traits>& __os)):\n\tChange __eos to _S_eos.\n\nFrom-SVN: r36417", "tree": {"sha": "fdb2dd41854b82121eb551840a0baa6e5366e44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdb2dd41854b82121eb551840a0baa6e5366e44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75bedeb2a4a82748d6707f8993184c207360bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75bedeb2a4a82748d6707f8993184c207360bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75bedeb2a4a82748d6707f8993184c207360bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75bedeb2a4a82748d6707f8993184c207360bd1/comments", "author": null, "committer": null, "parents": [{"sha": "3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c71084a5333c7153ec4714d1930e9ebdb3bf82e"}], "stats": {"total": 163, "additions": 82, "deletions": 81}, "files": [{"sha": "db6f542a081eee9d923a8e4a565606b6e932d46b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -1,3 +1,24 @@\n+2000-09-14  Brendan Kehoe  <brendan@zen.org>\n+\n+        * bits/string.tcc (_Rep::_S_max_size): Use typename for its size_type\n+        return type.\n+\n+        * src/Makefile.an (headers): Also install backward/fstream.h.\n+        * src/Makefile.in: Regenerate.\t\n+\n+        * bits/char_traits.h (char_traits<_CharT>::get_state,\n+        char_traits<char>::get_state, char_traits<wchar_t>::get_state): Pass\n+        argument in by reference, not by value. Uglify to _S_get_state.\n+\t(char_traits<*>::__eos): Uglify to _S_eos.\n+\t* bits/std_ostream.h (ends(basic_ostream<_CharT, _Traits>& __os)):\n+\tChange __eos to _S_eos.\n+\t\n+2000-09-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/22_locale/static_members.cc: New file.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc: New file.\n+\t* src/locale.cc: Minor formatting tweaks.\n+\n 2000-09-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* testsuite/22_locale/global_templates.cc (test01): Add negative"}, {"sha": "4b141f9de3b5fa893829ad9aec06d22de5e440ae", "filename": "libstdc++-v3/bits/char_traits.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -131,13 +131,13 @@ namespace std {\n       { return __c1 == __c2; }\n \n       static state_type \n-      get_state (pos_type __pos) { return __pos.state(); }\n+      _S_get_state(const pos_type& __pos) { return __pos.state(); }\n \n       static int_type \n       eof() { return static_cast<int_type>(-1); }\n \n       static int_type \n-      __eos() { return char_type(); }\n+      _S_eos() { return char_type(); }\n \n       static int_type \n       not_eof(const int_type& __c)\n@@ -205,13 +205,13 @@ namespace std {\n       { return __c1 == __c2; }\n \n       static state_type \n-      get_state(pos_type __pos) { return __pos.state(); }\n+      _S_get_state(const pos_type& __pos) { return __pos.state(); }\n \n       static int_type \n       eof() { return static_cast<int_type>(EOF); }\n \n       static int_type \n-      __eos() { return char_type(); }\n+      _S_eos() { return char_type(); }\n \n       static int_type \n       not_eof(const int_type& __c)\n@@ -276,13 +276,13 @@ namespace std {\n       { return __c1 == __c2; }\n \n       static state_type \n-      get_state(pos_type __pos) { return __pos.state(); }\n+      _S_get_state(const pos_type& __pos) { return __pos.state(); }\n \n       static int_type \n       eof() { return static_cast<int_type>(WEOF); }\n \n       static int_type \n-      __eos() { return char_type(); }\n+      _S_eos() { return char_type(); }\n \n       static int_type \n       not_eof(const int_type& __c)"}, {"sha": "eb63e93623a116ad19aaf8a6e7e9158df76e94ea", "filename": "libstdc++-v3/bits/std_ostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_ostream.h?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -262,7 +262,7 @@ namespace std {\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n     ends(basic_ostream<_CharT, _Traits>& __os)\n-    { return __os.put(_Traits::__eos()); }\n+    { return __os.put(_Traits::_S_eos()); }\n   \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& "}, {"sha": "82a5a7af8ffe3750f20d9f10eb44d4b57aa52783", "filename": "libstdc++-v3/bits/string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -49,7 +49,7 @@ namespace std\n     _Rep::_S_terminal = _CharT();\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type \n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type \n     basic_string<_CharT, _Traits, _Alloc>::\n     _Rep::_S_max_size = (((npos - sizeof(_Rep))/sizeof(_CharT)) - 1) / 4;\n "}, {"sha": "92a197a2dc52039025413b912515d49885dbffa1", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.28 2000/08/16 18:36:57 aoliva Exp $\n+## $Id: Makefile.am,v 1.29 2000/08/22 17:22:38 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -138,6 +138,7 @@ headers = \\\n \tbackward/multiset.h backward/pair.h backward/iostream.h \\\n \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n \tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h \\\n \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n \tbits/std_iterator.h bits/std_list.h \\\n \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\"}, {"sha": "a3aed9b757d22f4085632359ab390724853b0502", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -163,7 +163,7 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \t       $(AM\n # course is impossible.\n CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n-headers =  \tbits/cpp_type_traits.h \tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \tbits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/libio.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/unistd.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_unistd.h \tshadow/sys/cdefs.h \n+headers =  \tbits/cpp_type_traits.h \tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \tbits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/libio.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/unistd.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_unistd.h \tshadow/sys/cdefs.h \n \n \n std_headers =  \talgorithm bitset cassert cctype cerrno cfloat climits clocale ciso646 \tcmath complex csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype deque exception fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory new numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream typeinfo utility valarray vector "}, {"sha": "58e55a36d0a803a98d39fb2b33b864a09d3e3469", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 50, "deletions": 71, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bedeb2a4a82748d6707f8993184c207360bd1/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=b75bedeb2a4a82748d6707f8993184c207360bd1", "patch": "@@ -43,18 +43,18 @@\n namespace std {\n \n   // Definitions for static const data members of locale.\n-  const locale::category locale::none;\n-  const locale::category locale::collate;\n-  const locale::category locale::ctype;\n-  const locale::category locale::monetary;\n-  const locale::category locale::numeric;\n-  const locale::category locale::time;\n-  const locale::category locale::messages;\n-  const locale::category locale::all;\n-\n-  locale::_Impl* locale::_S_global;  // init'd to 0 before static ctors run\n-  locale::_Impl* locale::_S_classic; // init'd to 0 before static ctors run\n-  const int locale::_S_num_categories;\n+  const locale::category \tlocale::none;\n+  const locale::category \tlocale::collate;\n+  const locale::category \tlocale::ctype;\n+  const locale::category \tlocale::monetary;\n+  const locale::category \tlocale::numeric;\n+  const locale::category \tlocale::time;\n+  const locale::category \tlocale::messages;\n+  const locale::category \tlocale::all;\n+\n+  locale::_Impl* \t\tlocale::_S_global; \n+  locale::_Impl* \t\tlocale::_S_classic;\n+  const int \t\t\tlocale::_S_num_categories;\n \n   // Definitions for static const data members of locale::_Impl\n   const locale::id* const\n@@ -563,31 +563,25 @@ namespace std {\n \n   locale::_Impl::\n   _Impl(size_t __numfacets, size_t __refs)\n-  : _M_num_references(__refs - 1)\n-  , _M_facets(0)\n-  , _M_category_names(0)\n-  , _M_has_name(false)\n-  , _M_cached_name_ok(false)\n-  , _M_cached_name(string (\"*\"))\n+  : _M_num_references(__refs - 1), _M_facets(0), _M_category_names(0), \n+    _M_has_name(false), _M_cached_name_ok(false), _M_cached_name(string (\"*\"))\n   { \n     typedef vector<facet*, allocator<facet*> > __vec_facet;\n     typedef vector<string, allocator<string> > __vec_string;\n \n     auto_ptr<__vec_facet> __pvf(new __vec_facet(__numfacets, (facet*)0));\n-    auto_ptr<__vec_string> __pcn(new __vec_string(_S_num_categories,\n+    auto_ptr<__vec_string> __pcn(new __vec_string(_S_num_categories, \n \t\t\t\t\t\t  string(\"*\")));\n     _M_facets = __pvf.release();\n     _M_category_names = __pcn.release();\n   }\n   \n   locale::_Impl::\n   _Impl(const _Impl& __other, size_t __refs)\n-  : _M_num_references(__refs)\n-  , _M_facets(0)\n-  , _M_category_names(0)\n-  , _M_has_name(__other._M_has_name)\n-  , _M_cached_name_ok(__other._M_cached_name_ok)\n-  , _M_cached_name(__other._M_cached_name)\n+  : _M_num_references(__refs), _M_facets(0), _M_category_names(0), \n+    _M_has_name(__other._M_has_name), \n+    _M_cached_name_ok(__other._M_cached_name_ok), \n+    _M_cached_name(__other._M_cached_name)\n   {\n     typedef vector<facet*, allocator<facet*> > __vec_facet;\n     typedef vector<string, allocator<string> > __vec_string;\n@@ -600,9 +594,9 @@ namespace std {\n     for (; __it != __pvf->end(); ++__it)\n       (*__it)->_M_add_reference();\n \n-    // these must be last since in the presence of an exception, the \n+    // These must be last since in the presence of an exception, the \n     // destructor for 'this' won't run until AFTER execution has passed  \n-    // the closing brace of the constructor\n+    // the closing brace of the constructor.\n     _M_facets = __pvf.release();\n     _M_category_names = __pcn.release();\n   }\n@@ -659,20 +653,18 @@ namespace std {\n     if (__index >= _M_facets->size())\n       _M_facets->resize(__index + 1, 0);  // might throw\n     facet*& __fpr = (*_M_facets)[__index];\n-    // order matters, here:\n+    // Order matters, here:\n     __fp->_M_add_reference();\n     if (__fpr) \n       __fpr->_M_remove_reference();\n     __fpr = __fp;\n   }\n  \n-  locale::\n-  locale(_Impl* __ip) throw()\n+  locale::locale(_Impl* __ip) throw()\n   : _M_impl(__ip)\n   { __ip->_M_add_reference(); }\n \n-  locale::\n-  locale(const locale& __other, const locale& __one, category __cats)\n+  locale::locale(const locale& __other, const locale& __one, category __cats)\n   {\n     __cats = _S_normalize_category(__cats);    // might throw\n     _M_impl = new _Impl(*__other._M_impl, 1);  // might throw\n@@ -691,8 +683,7 @@ namespace std {\n   }\n \n   const locale&\n-  locale::\n-  operator=(const locale& __other) throw()\n+  locale::operator=(const locale& __other) throw()\n   {\n     __other._M_impl->_M_add_reference();\n     _M_impl->_M_remove_reference();\n@@ -701,8 +692,7 @@ namespace std {\n   }\n \n   locale\n-  locale::\n-  global(const locale& __other)\n+  locale::global(const locale& __other)\n   {\n     // XXX MT\n     _S_initialize();\n@@ -716,26 +706,24 @@ namespace std {\n   }\n \n   string\n-  locale::\n-  name() const\n+  locale::name() const\n   {\n     // XXX not done\n     return \"*\";\n   }\n \n   locale const&\n-  locale::\n-  classic()\n+  locale::classic()\n   {\n     static locale* __classic_locale;\n     // XXX MT\n     if (!_S_classic)\n       {\n \ttry {\n-\t  _S_classic = _S_global = new _Impl(26u, 2u);\n+\t  // 26 Standard facets, 2 references.\n \t  // One reference for _M_classic, one for _M_global\n-\t  // (constructor for (*the_classic_locale) adds a third)\n-\t    \n+\t  _S_classic = _S_global = new _Impl(26, 2);\n+\n \t  // collate category\n \t  _S_classic->_M_facet_init(new std::collate<char>);\n \t  \n@@ -777,7 +765,7 @@ namespace std {\n \t  _S_classic->_M_facet_init(new std::messages<wchar_t>);\n #endif\t  \n \n-\t  // finesse static init order hassles\n+\t  // Finesse static init order hassles\n \t  __classic_locale = new locale(_S_classic);\n \t}\n \tcatch(...) {\n@@ -796,8 +784,7 @@ namespace std {\n   }\n \n   int\n-  locale::\n-  _S_normalize_category(int __cats) \n+  locale::_S_normalize_category(int __cats) \n   {\n     if ((__cats & all) && !(__cats & ~all))\n       return __cats;\n@@ -816,7 +803,7 @@ namespace std {\n       case LC_ALL:      return all;\n       }\n     \n-    // XXX should throw derived class here\n+    // XXX Should throw derived class here\n     throw runtime_error(\"bad locale category\");\n     /* NOTREACHED */\n   }\n@@ -863,39 +850,34 @@ namespace std {\n \n   const size_t ctype<char>::table_size;\n \n-  ctype<char>::\n-  ~ctype()\n+  ctype<char>::~ctype()\n   { if (_M_del) delete[] this->table(); }\n \n   char\n-  ctype<char>::\n-  do_widen(char __c) const\n+  ctype<char>::do_widen(char __c) const\n   { return __c; }\n   \n   const char* \n-  ctype<char>::\n-  do_widen(const char* __low, const char* __high, char* __dest) const\n+  ctype<char>::do_widen(const char* __low, const char* __high, \n+\t\t\tchar* __dest) const\n   {\n     memcpy(__dest, __low, __high - __low);\n     return __high;\n   }\n   \n   char\n-  ctype<char>::\n-  do_narrow(char __c, char /*__dfault*/) const\n+  ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n   { return __c; }\n   \n   const char* \n-  ctype<char>::\n-  do_narrow(const char* __low, const char* __high, char /*__dfault*/,\n-\t    char* __dest) const\n+  ctype<char>::do_narrow(const char* __low, const char* __high, \n+\t\t\t char /*__dfault*/, char* __dest) const\n   {\n     memcpy(__dest, __low, __high - __low);\n     return __high;\n   }\n \n-  ctype_byname<char>::\n-  ctype_byname(const char* /*__s*/, size_t __refs)\n+  ctype_byname<char>::ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<char>(new mask[table_size], true, __refs)\n   { }\n \n@@ -907,9 +889,8 @@ namespace std {\n   collate<char>::~collate() { }\n   \n   int \n-  collate<char>::\n-  do_compare(const char* __lo1, const char* __hi1, \n-\t     const char* __lo2, const char* __hi2) const\n+  collate<char>::do_compare(const char* __lo1, const char* __hi1, \n+\t\t\t    const char* __lo2, const char* __hi2) const\n   {\n     for (; __lo1 < __hi1 && __lo2 < __hi2; ++__lo1, ++__lo2) \n       if (*__lo1 != *__lo2) \n@@ -938,20 +919,18 @@ namespace std {\n     return __val;\n   }\n   \n-  collate_byname<char>::\n-  collate_byname(const char* /*__s*/, size_t __refs)\n+  collate_byname<char>::collate_byname(const char* /*__s*/, size_t __refs)\n   : collate<char>(__refs) { }\n \n-  numpunct_byname<char>::\n-  numpunct_byname(const char* /*__s*/, size_t __refs)\n+  numpunct_byname<char>::numpunct_byname(const char* /*__s*/, size_t __refs)\n   : numpunct<char>(__refs) { }\n \n-  moneypunct_byname<char, false>::\n-  moneypunct_byname(const char* /*__s*/, size_t __refs)\n+  moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n+\t\t\t\t\t\t    size_t __refs)\n   : moneypunct<char, false>(__refs) { }\n   \n-  moneypunct_byname<char, true>::\n-  moneypunct_byname(const char* /*__s*/, size_t __refs)\n+  moneypunct_byname<char, true>::moneypunct_byname(const char* /*__s*/, \n+\t\t\t\t\t\t   size_t __refs)\n   : moneypunct<char, true>(__refs) { }\n   \n   messages_byname<char>::"}]}