{"sha": "22aede7a1228617661105048a91fddd8797e141b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhZWRlN2ExMjI4NjE3NjYxMTA1MDQ4YTkxZmRkZDg3OTdlMTQxYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:49:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:49:01Z"}, "message": "expand: Fix up LTO ICE with COMPOUND_LITERAL_EXPR [PR99849]\n\nThe gimplifier optimizes away COMPOUND_LITERAL_EXPRs, but they can remain\nin the form of ADDR_EXPR of COMPOUND_LITERAL_EXPRs in static initializers.\nBy the TREE_STATIC check I meant to check that the underlying decl of\nthe compound literal is a global rather than automatic variable which\nobviously can't be referenced in static initializers, but unfortunately\nwith LTO it might end up in another partition and thus be DECL_EXTERNAL\ninstead.\n\n2021-04-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR lto/99849\n\t* expr.c (expand_expr_addr_expr_1): Test is_global_var rather than\n\tjust TREE_STATIC on COMPOUND_LITERAL_EXPR_DECLs.\n\n\t* gcc.dg/lto/pr99849_0.c: New test.", "tree": {"sha": "4149a06f234a6599a9c32dad657b87d382c5fa88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4149a06f234a6599a9c32dad657b87d382c5fa88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22aede7a1228617661105048a91fddd8797e141b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22aede7a1228617661105048a91fddd8797e141b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22aede7a1228617661105048a91fddd8797e141b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22aede7a1228617661105048a91fddd8797e141b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e350d8539a4e28ddc30d0f08a4040f10b699135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e350d8539a4e28ddc30d0f08a4040f10b699135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e350d8539a4e28ddc30d0f08a4040f10b699135"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "a0e194659659da378edc603b53d51128bfce9bd0", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aede7a1228617661105048a91fddd8797e141b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aede7a1228617661105048a91fddd8797e141b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=22aede7a1228617661105048a91fddd8797e141b", "patch": "@@ -8204,7 +8204,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, scalar_int_mode tmode,\n \t array with address of COMPOUND_LITERAL_EXPR in DECL_INITIAL;\n \t the initializers aren't gimplified.  */\n       if (COMPOUND_LITERAL_EXPR_DECL (exp)\n-\t  && TREE_STATIC (COMPOUND_LITERAL_EXPR_DECL (exp)))\n+\t  && is_global_var (COMPOUND_LITERAL_EXPR_DECL (exp)))\n \treturn expand_expr_addr_expr_1 (COMPOUND_LITERAL_EXPR_DECL (exp),\n \t\t\t\t\ttarget, tmode, modifier, as);\n       /* FALLTHRU */"}, {"sha": "d489cee0f5273eb652c6dbe2c87a127d6e015f11", "filename": "gcc/testsuite/gcc.dg/lto/pr99849_0.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aede7a1228617661105048a91fddd8797e141b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr99849_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aede7a1228617661105048a91fddd8797e141b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr99849_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr99849_0.c?ref=22aede7a1228617661105048a91fddd8797e141b", "patch": "@@ -0,0 +1,23 @@\n+/* PR lto/99849 */\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target shared } */\n+/* { dg-extra-ld-options { -shared } } */\n+/* { dg-lto-options { { -flto -flto-partition=1to1 -O2 -Wno-incompatible-pointer-types -Wno-discarded-qualifiers -fPIC } } } */\n+\n+struct { struct A *a; } *b;\n+struct B { int *b; };\n+struct C { int *c; };\n+const struct D { struct C d; } d;\n+struct A { struct { struct C e; }; };\n+struct E { void *e; } e = { &( &(const struct D) { (void *) &d })->d };\n+struct C f = { &( &(const struct D) { (void *) &d })->d };\n+struct A g[] = { &e, &f };\n+void foo () { b->a = g; }\n+struct E h = { foo };\n+void bar ();\n+int baz () { bar (h); }\n+struct B i = { (int *) baz };\n+void qux ();\n+void corge () { qux (i); }\n+void *j __attribute__((__used__)) = corge;"}]}