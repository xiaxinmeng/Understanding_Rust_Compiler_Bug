{"sha": "8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkOGY4NTZiMzNiYmQ2YzY2MjdlYjBhMThlMzRiMDQ2ZTIxNjNmMQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-08-02T00:53:59Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-08-02T00:53:59Z"}, "message": "rtl.h (enum reg_note): Add REG_MAYBE_DEAD.\n\n* rtl.h (enum reg_note): Add REG_MAYBE_DEAD.\n* rtl.c (reg_note_name): Add REG_MAYBE_DEAD.\n* flow.c (propagate_one_insn): Allow deletion of prologue/epilogue\ninsns if they have a REG_MAYBE_DEAD note attached.\n* config/rs6000/rs6000.c (rs6000_maybe_dead): New function.\n(rs6000_emit_load_toc_table): TOC loads may go dead.\n\nFrom-SVN: r35414", "tree": {"sha": "51e7cfa73194f407e18d5c607f8f9f28b8c01196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e7cfa73194f407e18d5c607f8f9f28b8c01196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/comments", "author": null, "committer": null, "parents": [{"sha": "7d17b34de55c8cd8d83581036f8e87fae492db13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d17b34de55c8cd8d83581036f8e87fae492db13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d17b34de55c8cd8d83581036f8e87fae492db13"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "b45669775caca64a5aa8dc59b076daf7cf1fde9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "patch": "@@ -1,3 +1,12 @@\n+2000-08-01  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* rtl.h (enum reg_note): Add REG_MAYBE_DEAD.\n+\t* rtl.c (reg_note_name): Add REG_MAYBE_DEAD.\n+\t* flow.c (propagate_one_insn): Allow deletion of prologue/epilogue\n+\tinsns if they have a REG_MAYBE_DEAD note attached.\n+\t* config/rs6000/rs6000.c (rs6000_maybe_dead): New function.\n+\t(rs6000_emit_load_toc_table): TOC loads may go dead.\n+\n 2000-08-01  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/ia64.c (ia64_function_arg): Fix last change.  Verify"}, {"sha": "67ff693ae55174fd2ea1ab63c46a198916f3212d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "patch": "@@ -4819,6 +4819,16 @@ debug_stack_info (info)\n   fprintf (stderr, \"\\n\");\n }\n \f\n+/* Add a REG_MAYBE_DEAD note to the insn.  */\n+static void\n+rs6000_maybe_dead (insn)\n+     rtx insn;\n+{\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD,\n+\t\t\t\t\tconst0_rtx,\n+\t\t\t\t\tREG_NOTES (insn));\n+}\n+\n /* Emit instructions needed to load the TOC register.\n    This is only needed when TARGET_TOC, TARGET_MINIMAL_TOC, and there is\n    a constant pool; or for SVR4 -fpic.  */\n@@ -4839,10 +4849,10 @@ rs6000_emit_load_toc_table (fromprolog)\n \t\t      ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n \t\t      : gen_reg_rtx (Pmode));\n \t  if (TARGET_32BIT)\n-\t    emit_insn (gen_load_toc_v4_pic_si (temp));\n+\t    rs6000_maybe_dead (emit_insn (gen_load_toc_v4_pic_si (temp)));\n \t  else\n-\t    emit_insn (gen_load_toc_v4_pic_di (temp));\n-\t  emit_move_insn (dest, temp);\n+\t    rs6000_maybe_dead (emit_insn (gen_load_toc_v4_pic_di (temp)));\n+\t  rs6000_maybe_dead (emit_move_insn (dest, temp));\n \t}\n       else if (flag_pic == 2)\n         {\n@@ -4872,9 +4882,12 @@ rs6000_emit_load_toc_table (fromprolog)\n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCL\", rs6000_pic_labelno);\n \t      symL = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n \n-\t      emit_insn (gen_load_toc_v4_PIC_1 (tempLR, symF));\n-\t      emit_move_insn (dest, tempLR);\n-\t      emit_insn (gen_load_toc_v4_PIC_2 (temp0, dest, symL, symF));\n+\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (tempLR, \n+\t\t\t\t\t\t\t\t   symF)));\n+\t      rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n+\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_2 (temp0, dest,\n+\t\t\t\t\t\t\t\t   symL,\n+\t\t\t\t\t\t\t\t   symF)));\n \t    }\n \t  else\n \t    {\n@@ -4887,11 +4900,14 @@ rs6000_emit_load_toc_table (fromprolog)\n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCG\", reload_toc_labelno++);\n \t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n \n-\t      emit_insn (gen_load_toc_v4_PIC_1b (tempLR, symF, tocsym));\n-\t      emit_move_insn (dest, tempLR);\n-\t      emit_move_insn (temp0, gen_rtx_MEM (Pmode, dest));\n+\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1b (tempLR, \n+\t\t\t\t\t\t\t\t    symF, \n+\t\t\t\t\t\t\t\t    tocsym)));\n+\t      rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n+\t      rs6000_maybe_dead (emit_move_insn (temp0, \n+\t\t\t\t\t\t gen_rtx_MEM (Pmode, dest)));\n \t    }\n-\t  emit_insn (gen_addsi3 (dest, temp0, dest));\n+\t  rs6000_maybe_dead (emit_insn (gen_addsi3 (dest, temp0, dest)));\n \t}\n       else if (flag_pic == 0 && TARGET_MINIMAL_TOC)\n         {\n@@ -4901,18 +4917,18 @@ rs6000_emit_load_toc_table (fromprolog)\n \t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n \t  realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n \t  \n-\t  emit_insn (gen_elf_high (dest, realsym));\n-\t  emit_insn (gen_elf_low (dest, dest, realsym));\n+\t  rs6000_maybe_dead (emit_insn (gen_elf_high (dest, realsym)));\n+\t  rs6000_maybe_dead (emit_insn (gen_elf_low (dest, dest, realsym)));\n \t}\n       else\n         abort();\n     }\n   else\n     {\n       if (TARGET_32BIT)\n-        emit_insn (gen_load_toc_aix_si (dest));\n+        rs6000_maybe_dead (emit_insn (gen_load_toc_aix_si (dest)));\n       else\n-        emit_insn (gen_load_toc_aix_di (dest));\n+        rs6000_maybe_dead (emit_insn (gen_load_toc_aix_di (dest)));\n     }\n }\n \n@@ -4939,7 +4955,7 @@ uses_TOC ()\n \t  rtx pat = PATTERN (insn);\n \t  int i;\n \n-\t  if (GET_CODE(pat) == PARALLEL) \n+\t  if (GET_CODE (pat) == PARALLEL) \n \t    for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n \t      if (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == UNSPEC \n \t\t && XINT (XVECEXP (PATTERN (insn), 0, i), 1) == 7)"}, {"sha": "688e256c3391f51158f57c299f5650d838b65661", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "patch": "@@ -3428,7 +3428,8 @@ propagate_one_insn (pbi, insn)\n       && (((HAVE_epilogue || HAVE_prologue)\n \t   && prologue_epilogue_contains (insn))\n \t  || (HAVE_sibcall_epilogue\n-\t      && sibcall_epilogue_contains (insn))))\n+\t      && sibcall_epilogue_contains (insn)))\n+      && find_reg_note (insn, REG_MAYBE_DEAD, NULL_RTX) == 0)\n     {\n       if (flags & PROP_KILL_DEAD_CODE)\n \t{ "}, {"sha": "dedb38a11b4f23db0e25fdeb41db89f92e7d978e", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "patch": "@@ -258,7 +258,7 @@ const char * const reg_note_name[] =\n   \"REG_LABEL\", \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n   \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n   \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n-  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\"\n+  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\"\n };\n \n static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))"}, {"sha": "b96c53f326744a883ee206e9dd32694fea27befb", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd8f856b33bbd6c6627eb0a18e34b046e2163f1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8cd8f856b33bbd6c6627eb0a18e34b046e2163f1", "patch": "@@ -515,7 +515,13 @@ enum reg_note\n   REG_EH_RETHROW,\n \n   /* Used by haifa-sched to save NOTE_INSN notes across scheduling.  */\n-  REG_SAVE_NOTE\n+  REG_SAVE_NOTE,\n+\n+  /* Indicates that this insn (which is part of the prologue) computes\n+     a value which might not be used later, and if so it's OK to delete\n+     the insn.  Normally, deleting any insn in the prologue is an error. \n+     At present the parameter is unused and set to (const_int 0).  */\n+  REG_MAYBE_DEAD\n };\n \n /* The base value for branch probability notes.  */"}]}