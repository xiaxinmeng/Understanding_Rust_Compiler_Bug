{"sha": "4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxMmNmM2NjMzE0Mzg0MzIyNWVjZGIwZTUwNDhmYzdjMzdiMTU3NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-31T17:56:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-31T17:56:36Z"}, "message": "runtime: implement cheaper context switch on Linux/AMD64\n    \n    Currently, goroutine switches are implemented with libc\n    getcontext/setcontext functions, which saves/restores the machine\n    register states and also the signal context. This does more than\n    what we need, and performs an expensive syscall.\n    \n    This CL implements a simplified version of getcontext/setcontext,\n    in assembly, that only saves/restores the necessary part, i.e.\n    the callee-save registers, and the PC, SP. A simplified version\n    of makecontext, written in C, is also added. Currently this is\n    only implemented on Linux/AMD64.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/178298\n\nFrom-SVN: r271818", "tree": {"sha": "30d27f1ac980671a5b890c86e562a746f4f4b54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d27f1ac980671a5b890c86e562a746f4f4b54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/comments", "author": null, "committer": null, "parents": [{"sha": "34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a13a521e3fc6f46fcaf2f158d20e66874e99fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a13a521e3fc6f46fcaf2f158d20e66874e99fd"}], "stats": {"total": 359, "additions": 334, "deletions": 25}, "files": [{"sha": "72268229fbcc0ad6d17d73aa1971b1221731502e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -1,4 +1,4 @@\n-4dc60d989293d070702024e7dea52b9849f74775\n+8402f6ac021ba20163ab4fcdb10ab7bb642de6dc\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8a3844c1fc70061cdb9bb995362f2536980a0b70", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -481,6 +481,7 @@ runtime_files = \\\n \truntime/runtime_c.c \\\n \truntime/stack.c \\\n \truntime/yield.c \\\n+\truntime/go-context.S \\\n \t$(rtems_task_variable_add_file) \\\n \t$(runtime_getncpu_file)\n "}, {"sha": "20e2a496d778f8c5f12cafbddb6c76f6260a6032", "filename": "libgo/Makefile.in", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -253,7 +253,8 @@ am__objects_3 = runtime/aeshash.lo runtime/go-assert.lo \\\n \truntime/go-unwind.lo runtime/go-varargs.lo \\\n \truntime/env_posix.lo runtime/panic.lo runtime/print.lo \\\n \truntime/proc.lo runtime/runtime_c.lo runtime/stack.lo \\\n-\truntime/yield.lo $(am__objects_1) $(am__objects_2)\n+\truntime/yield.lo runtime/go-context.lo $(am__objects_1) \\\n+\t$(am__objects_2)\n am_libgo_llgo_la_OBJECTS = $(am__objects_3)\n libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n@@ -287,6 +288,16 @@ DEFAULT_INCLUDES = -I.@am__isrc@\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n am__depfiles_maybe = depfiles\n am__mv = mv -f\n+CPPASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)\n+LTCPPASCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) \\\n+\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t$(AM_CCASFLAGS) $(CCASFLAGS)\n+AM_V_CPPAS = $(am__v_CPPAS_@AM_V@)\n+am__v_CPPAS_ = $(am__v_CPPAS_@AM_DEFAULT_V@)\n+am__v_CPPAS_0 = @echo \"  CPPAS   \" $@;\n+am__v_CPPAS_1 = \n COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n@@ -380,6 +391,9 @@ AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n+CCAS = @CCAS@\n+CCASDEPMODE = @CCASDEPMODE@\n+CCASFLAGS = @CCASFLAGS@\n CCDEPMODE = @CCDEPMODE@\n CC_FOR_BUILD = @CC_FOR_BUILD@\n CFLAGS = @CFLAGS@\n@@ -512,6 +526,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -901,6 +916,7 @@ runtime_files = \\\n \truntime/runtime_c.c \\\n \truntime/stack.c \\\n \truntime/yield.c \\\n+\truntime/go-context.S \\\n \t$(rtems_task_variable_add_file) \\\n \t$(runtime_getncpu_file)\n \n@@ -1158,7 +1174,7 @@ all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n \n .SUFFIXES:\n-.SUFFIXES: .c .go .gox .o .obj .lo .a\n+.SUFFIXES: .c .go .gox .o .obj .lo .a .S\n am--refresh: Makefile\n \t@:\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/../multilib.am $(am__configure_deps)\n@@ -1375,6 +1391,8 @@ runtime/stack.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/yield.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n+runtime/go-context.lo: runtime/$(am__dirstamp) \\\n+\truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/rtems-task-variable-add.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/getncpu-none.lo: runtime/$(am__dirstamp) \\\n@@ -1421,6 +1439,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-cdiv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-cgo.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-construct-map.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-context.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-ffi.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-fieldtrack.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-matherr.Plo@am__quote@\n@@ -1451,6 +1470,30 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/stack.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/yield.Plo@am__quote@\n \n+.S.o:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`;\\\n+@am__fastdepCCAS_TRUE@\t$(CPPASCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\\\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(CPPASCOMPILE) -c -o $@ $<\n+\n+.S.obj:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.obj$$||'`;\\\n+@am__fastdepCCAS_TRUE@\t$(CPPASCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\\\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(CPPASCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.S.lo:\n+@am__fastdepCCAS_TRUE@\t$(AM_V_CPPAS)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.lo$$||'`;\\\n+@am__fastdepCCAS_TRUE@\t$(LTCPPASCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\\\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $$depbase.Tpo $$depbase.Plo\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(AM_V_CPPAS@am__nodep@)$(LTCPPASCOMPILE) -c -o $@ $<\n+\n .c.o:\n @am__fastdepCC_TRUE@\t$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`;\\\n @am__fastdepCC_TRUE@\t$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\\"}, {"sha": "951aed3a81b27a09897f61098ba159ccabfb05d9", "filename": "libgo/aclocal.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Faclocal.m4?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -56,6 +56,26 @@ m4_ifndef([AC_AUTOCONF_VERSION],\n   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n \n+# Figure out how to run the assembler.                      -*- Autoconf -*-\n+\n+# Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_PROG_AS\n+# ----------\n+AC_DEFUN([AM_PROG_AS],\n+[# By default we simply use the C compiler to build assembly code.\n+AC_REQUIRE([AC_PROG_CC])\n+test \"${CCAS+set}\" = set || CCAS=$CC\n+test \"${CCASFLAGS+set}\" = set || CCASFLAGS=$CFLAGS\n+AC_ARG_VAR([CCAS],      [assembler compiler command (defaults to CC)])\n+AC_ARG_VAR([CCASFLAGS], [assembler compiler flags (defaults to CFLAGS)])\n+_AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([CCAS])])dnl\n+])\n+\n # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n \n # Copyright (C) 2001-2017 Free Software Foundation, Inc."}, {"sha": "837f6fec053a942da7cfc7764cbd5357a0368e78", "filename": "libgo/configure", "status": "modified", "additions": 159, "deletions": 3, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -729,6 +729,11 @@ SED\n MAINT\n MAINTAINER_MODE_FALSE\n MAINTAINER_MODE_TRUE\n+am__fastdepCCAS_FALSE\n+am__fastdepCCAS_TRUE\n+CCASDEPMODE\n+CCASFLAGS\n+CCAS\n GOFLAGS\n GOC\n am__fastdepCC_FALSE\n@@ -808,6 +813,7 @@ infodir\n docdir\n oldincludedir\n includedir\n+runstatedir\n localstatedir\n sharedstatedir\n sysconfdir\n@@ -889,6 +895,7 @@ datadir='${datarootdir}'\n sysconfdir='${prefix}/etc'\n sharedstatedir='${prefix}/com'\n localstatedir='${prefix}/var'\n+runstatedir='${localstatedir}/run'\n includedir='${prefix}/include'\n oldincludedir='/usr/include'\n docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\n@@ -1141,6 +1148,15 @@ do\n   | -silent | --silent | --silen | --sile | --sil)\n     silent=yes ;;\n \n+  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n+  | --runstate | --runstat | --runsta | --runst | --runs \\\n+  | --run | --ru | --r)\n+    ac_prev=runstatedir ;;\n+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n+  | --run=* | --ru=* | --r=*)\n+    runstatedir=$ac_optarg ;;\n+\n   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n     ac_prev=sbindir ;;\n   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n@@ -1278,7 +1294,7 @@ fi\n for ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n \t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n \t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n-\t\tlibdir localedir mandir\n+\t\tlibdir localedir mandir runstatedir\n do\n   eval ac_val=\\$$ac_var\n   # Remove trailing slashes.\n@@ -1431,6 +1447,7 @@ Fine tuning of the installation directories:\n   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]\n   --libdir=DIR            object code libraries [EPREFIX/lib]\n   --includedir=DIR        C header files [PREFIX/include]\n   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n@@ -1510,6 +1527,8 @@ Some influential environment variables:\n               you have headers in a nonstandard directory <include dir>\n   GOC         Go compiler command\n   GOFLAGS     Go compiler flags\n+  CCAS        assembler compiler command (defaults to CC)\n+  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)\n   CPP         C preprocessor\n \n Use these variables to override the choices made by `configure' or to help\n@@ -4556,6 +4575,139 @@ ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n+# By default we simply use the C compiler to build assembly code.\n+\n+test \"${CCAS+set}\" = set || CCAS=$CC\n+test \"${CCASFLAGS+set}\" = set || CCASFLAGS=$CFLAGS\n+\n+\n+\n+depcc=\"$CCAS\"   am_compiler_list=\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc\" >&5\n+$as_echo_n \"checking dependency style of $depcc... \" >&6; }\n+if ${am_cv_CCAS_dependencies_compiler_type+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n+  # We make a subdir and do the tests there.  Otherwise we can end up\n+  # making bogus files that we don't know about and never remove.  For\n+  # instance it was reported that on HP-UX the gcc test will end up\n+  # making a dummy file named 'D' -- because '-MD' means \"put the output\n+  # in D\".\n+  rm -rf conftest.dir\n+  mkdir conftest.dir\n+  # Copy depcomp to subdir because otherwise we won't find it if we're\n+  # using a relative directory.\n+  cp \"$am_depcomp\" conftest.dir\n+  cd conftest.dir\n+  # We will build objects and dependencies in a subdirectory because\n+  # it helps to detect inapplicable dependency modes.  For instance\n+  # both Tru64's cc and ICC support -MD to output dependencies as a\n+  # side effect of compilation, but ICC will put the dependencies in\n+  # the current directory while Tru64 will put them in the object\n+  # directory.\n+  mkdir sub\n+\n+  am_cv_CCAS_dependencies_compiler_type=none\n+  if test \"$am_compiler_list\" = \"\"; then\n+     am_compiler_list=`sed -n 's/^#*\\([a-zA-Z0-9]*\\))$/\\1/p' < ./depcomp`\n+  fi\n+  am__universal=false\n+\n+\n+  for depmode in $am_compiler_list; do\n+    # Setup a source with many dependencies, because some compilers\n+    # like to wrap large dependency lists on column 80 (with \\), and\n+    # we should not choose a depcomp mode which is confused by this.\n+    #\n+    # We need to recreate these files for each test, as the compiler may\n+    # overwrite some of them when testing with obscure command lines.\n+    # This happens at least with the AIX C compiler.\n+    : > sub/conftest.c\n+    for i in 1 2 3 4 5 6; do\n+      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n+      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n+      # Solaris 10 /bin/sh.\n+      echo '/* dummy */' > sub/conftst$i.h\n+    done\n+    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n+\n+    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n+    # mode.  It turns out that the SunPro C++ compiler does not properly\n+    # handle '-M -o', and we need to detect this.  Also, some Intel\n+    # versions had trouble with output in subdirs.\n+    am__obj=sub/conftest.${OBJEXT-o}\n+    am__minus_obj=\"-o $am__obj\"\n+    case $depmode in\n+    gcc)\n+      # This depmode causes a compiler race in universal mode.\n+      test \"$am__universal\" = false || continue\n+      ;;\n+    nosideeffect)\n+      # After this tag, mechanisms are not by side-effect, so they'll\n+      # only be used when explicitly requested.\n+      if test \"x$enable_dependency_tracking\" = xyes; then\n+\tcontinue\n+      else\n+\tbreak\n+      fi\n+      ;;\n+    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+      # This compiler won't grok '-c -o', but also, the minuso test has\n+      # not run yet.  These depmodes are late enough in the game, and\n+      # so weak that their functioning should not be impacted.\n+      am__obj=conftest.${OBJEXT-o}\n+      am__minus_obj=\n+      ;;\n+    none) break ;;\n+    esac\n+    if depmode=$depmode \\\n+       source=sub/conftest.c object=$am__obj \\\n+       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n+       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n+         >/dev/null 2>conftest.err &&\n+       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n+       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n+       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n+       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n+      # icc doesn't choke on unknown options, it will just issue warnings\n+      # or remarks (even with -Werror).  So we grep stderr for any message\n+      # that says an option was ignored or not supported.\n+      # When given -MP, icc 7.0 and 7.1 complain thusly:\n+      #   icc: Command line warning: ignoring option '-M'; no argument required\n+      # The diagnosis changed in icc 8.0:\n+      #   icc: Command line remark: option '-MP' not supported\n+      if (grep 'ignoring option' conftest.err ||\n+          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n+        am_cv_CCAS_dependencies_compiler_type=$depmode\n+        break\n+      fi\n+    fi\n+  done\n+\n+  cd ..\n+  rm -rf conftest.dir\n+else\n+  am_cv_CCAS_dependencies_compiler_type=none\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $am_cv_CCAS_dependencies_compiler_type\" >&5\n+$as_echo \"$am_cv_CCAS_dependencies_compiler_type\" >&6; }\n+CCASDEPMODE=depmode=$am_cv_CCAS_dependencies_compiler_type\n+\n+ if\n+  test \"x$enable_dependency_tracking\" != xno \\\n+  && test \"$am_cv_CCAS_dependencies_compiler_type\" = gcc3; then\n+  am__fastdepCCAS_TRUE=\n+  am__fastdepCCAS_FALSE='#'\n+else\n+  am__fastdepCCAS_TRUE='#'\n+  am__fastdepCCAS_FALSE=\n+fi\n+\n+\n \n \n \n@@ -11344,7 +11496,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11347 \"configure\"\n+#line 11499 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11450,7 +11602,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11453 \"configure\"\n+#line 11605 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15838,6 +15990,10 @@ if test -z \"${am__fastdepCC_TRUE}\" && test -z \"${am__fastdepCC_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"am__fastdepCC\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${am__fastdepCCAS_TRUE}\" && test -z \"${am__fastdepCCAS_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"am__fastdepCCAS\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "0ae8162a1bafce4cfa633ed8a63e961b1857561a", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -26,6 +26,7 @@ m4_rename([_AC_ARG_VAR_PRECIOUS],[glibgo_PRECIOUS])\n m4_define([_AC_ARG_VAR_PRECIOUS],[])\n AC_PROG_CC\n AC_PROG_GO\n+AM_PROG_AS\n m4_rename_force([glibgo_PRECIOUS],[_AC_ARG_VAR_PRECIOUS])\n \n AC_SUBST(CFLAGS)"}, {"sha": "0cd22426b58dbb95068f52dde645cd49bd60edfb", "filename": "libgo/runtime/go-context.S", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fgo-context.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fgo-context.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-context.S?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This provides a simplified version of getcontext and\n+// setcontext. They are like the corresponding functions\n+// in libc, but we only save/restore the callee-save\n+// registers and PC, SP. Unlike the libc functions, we\n+// don't save/restore the signal masks and floating point\n+// environment.\n+\n+#if defined(__x86_64__) && defined(__linux__) && !defined(__CET__)\n+\n+#define RBP_OFF\t(0*8)\n+#define RBX_OFF\t(1*8)\n+#define R12_OFF\t(2*8)\n+#define R13_OFF\t(3*8)\n+#define R14_OFF\t(4*8)\n+#define R15_OFF\t(5*8)\n+#define SP_OFF\t(6*8)\n+#define PC_OFF\t(7*8)\n+\n+.globl __go_getcontext\n+.text\n+__go_getcontext:\n+\tmovq\t%rbx, RBX_OFF(%rdi)\n+\tmovq\t%rbp, RBP_OFF(%rdi)\n+\tmovq\t%r12, R12_OFF(%rdi)\n+\tmovq\t%r13, R13_OFF(%rdi)\n+\tmovq\t%r14, R14_OFF(%rdi)\n+\tmovq\t%r15, R15_OFF(%rdi)\n+\n+\tmovq\t(%rsp), %rax\t// return PC\n+\tmovq\t%rax, PC_OFF(%rdi)\n+\tleaq\t8(%rsp), %rax\t// the SP before pushing return PC\n+\tmovq\t%rax, SP_OFF(%rdi)\n+\n+\tret\n+\n+.globl __go_setcontext\n+.text\n+__go_setcontext:\n+\tmovq\tRBX_OFF(%rdi), %rbx\n+\tmovq\tRBP_OFF(%rdi), %rbp\n+\tmovq\tR12_OFF(%rdi), %r12\n+\tmovq\tR13_OFF(%rdi), %r13\n+\tmovq\tR14_OFF(%rdi), %r14\n+\tmovq\tR15_OFF(%rdi), %r15\n+\tmovq\tSP_OFF(%rdi), %rsp\n+\tmovq\tPC_OFF(%rdi), %rdx\n+\n+\tjmp\t*%rdx\n+\n+.globl __go_makecontext\n+.text\n+__go_makecontext:\n+\taddq\t%rcx, %rdx\n+\n+\t// Align the SP, and push a dummy return address.\n+\tandq\t$~0xfULL, %rdx\n+\tsubq\t$8, %rdx\n+\tmovq\t$0, (%rdx)\n+\n+\tmovq\t%rdx, SP_OFF(%rdi)\n+\tmovq\t%rsi, PC_OFF(%rdi)\n+\n+\tret\n+\n+#endif"}, {"sha": "5ef421f862498e8a8315571fdf9d2bb53a348aa3", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -75,7 +75,7 @@ initcontext(void)\n }\n \n static inline void\n-fixcontext(ucontext_t *c __attribute__ ((unused)))\n+fixcontext(__go_context_t *c __attribute__ ((unused)))\n {\n }\n \n@@ -182,18 +182,18 @@ fixcontext(ucontext_t* c)\n // Go, and Go has no simple way to align a field to such a boundary.\n // So we make the field larger in runtime2.go and pick an appropriate\n // offset within the field here.\n-static ucontext_t*\n+static __go_context_t*\n ucontext_arg(uintptr_t* go_ucontext)\n {\n \tuintptr_t p = (uintptr_t)go_ucontext;\n-\tsize_t align = __alignof__(ucontext_t);\n+\tsize_t align = __alignof__(__go_context_t);\n \tif(align > 16) {\n \t\t// We only ensured space for up to a 16 byte alignment\n \t\t// in libgo/go/runtime/runtime2.go.\n-\t\truntime_throw(\"required alignment of ucontext_t too large\");\n+\t\truntime_throw(\"required alignment of __go_context_t too large\");\n \t}\n \tp = (p + align - 1) &~ (uintptr_t)(align - 1);\n-\treturn (ucontext_t*)p;\n+\treturn (__go_context_t*)p;\n }\n \n // We can not always refer to the TLS variables directly.  The\n@@ -289,7 +289,7 @@ runtime_gogo(G* newg)\n \tg = newg;\n \tnewg->fromgogo = true;\n \tfixcontext(ucontext_arg(&newg->context[0]));\n-\tsetcontext(ucontext_arg(&newg->context[0]));\n+\t__go_setcontext(ucontext_arg(&newg->context[0]));\n \truntime_throw(\"gogo setcontext returned\");\n }\n \n@@ -328,7 +328,7 @@ runtime_mcall(FuncVal *fv)\n \t\tgp->gcnextsp2 = (uintptr)(secondary_stack_pointer());\n #endif\n \t\tgp->fromgogo = false;\n-\t\tgetcontext(ucontext_arg(&gp->context[0]));\n+\t\t__go_getcontext(ucontext_arg(&gp->context[0]));\n \n \t\t// When we return from getcontext, we may be running\n \t\t// in a new thread.  That means that g may have\n@@ -358,7 +358,7 @@ runtime_mcall(FuncVal *fv)\n \t\tg = mp->g0;\n \n \t\tfixcontext(ucontext_arg(&mp->g0->context[0]));\n-\t\tsetcontext(ucontext_arg(&mp->g0->context[0]));\n+\t\t__go_setcontext(ucontext_arg(&mp->g0->context[0]));\n \t\truntime_throw(\"runtime: mcall function returned\");\n \t}\n }\n@@ -450,7 +450,7 @@ void getTraceback(G* me, G* gp)\n #ifdef USING_SPLIT_STACK\n \t__splitstack_getcontext((void*)(&me->stackcontext[0]));\n #endif\n-\tgetcontext(ucontext_arg(&me->context[0]));\n+\t__go_getcontext(ucontext_arg(&me->context[0]));\n \n \tif (gp->traceback != 0) {\n \t\truntime_gogo(gp);\n@@ -493,7 +493,7 @@ doscanstackswitch(G* me, G* gp)\n #ifdef USING_SPLIT_STACK\n \t__splitstack_getcontext((void*)(&me->stackcontext[0]));\n #endif\n-\tgetcontext(ucontext_arg(&me->context[0]));\n+\t__go_getcontext(ucontext_arg(&me->context[0]));\n \n \tif(me->entry != nil) {\n \t\t// Got here from mcall.\n@@ -574,7 +574,7 @@ runtime_mstart(void *arg)\n \n \t// Save the currently active context.  This will return\n \t// multiple times via the setcontext call in mcall.\n-\tgetcontext(ucontext_arg(&gp->context[0]));\n+\t__go_getcontext(ucontext_arg(&gp->context[0]));\n \n \tif(gp->traceback != 0) {\n \t\t// Got here from getTraceback.\n@@ -652,7 +652,7 @@ setGContext(void)\n \tgp->gcinitialsp2 = secondary_stack_pointer();\n \tgp->gcnextsp2 = (uintptr)(gp->gcinitialsp2);\n #endif\n-\tgetcontext(ucontext_arg(&gp->context[0]));\n+\t__go_getcontext(ucontext_arg(&gp->context[0]));\n \n \tif(gp->entry != nil) {\n \t\t// Got here from mcall.\n@@ -672,13 +672,11 @@ void makeGContext(G*, byte*, uintptr)\n // makeGContext makes a new context for a g.\n void\n makeGContext(G* gp, byte* sp, uintptr spsize) {\n-\tucontext_t *uc;\n+\t__go_context_t *uc;\n \n \tuc = ucontext_arg(&gp->context[0]);\n-\tgetcontext(uc);\n-\tuc->uc_stack.ss_sp = sp;\n-\tuc->uc_stack.ss_size = (size_t)spsize;\n-\tmakecontext(uc, kickoff, 0);\n+\t__go_getcontext(uc);\n+\t__go_makecontext(uc, kickoff, sp, (size_t)spsize);\n }\n \n // The goroutine g is about to enter a system call.\n@@ -700,7 +698,7 @@ runtime_entersyscall()\n \t// Save the registers in the g structure so that any pointers\n \t// held in registers will be seen by the garbage collector.\n \tif (!runtime_usestackmaps)\n-\t\tgetcontext(ucontext_arg(&g->gcregs[0]));\n+\t\t__go_getcontext(ucontext_arg(&g->gcregs[0]));\n \n \t// Note that if this function does save any registers itself,\n \t// we might store the wrong value in the call to getcontext.\n@@ -747,7 +745,7 @@ runtime_entersyscallblock()\n \t// Save the registers in the g structure so that any pointers\n \t// held in registers will be seen by the garbage collector.\n \tif (!runtime_usestackmaps)\n-\t\tgetcontext(ucontext_arg(&g->gcregs[0]));\n+\t\t__go_getcontext(ucontext_arg(&g->gcregs[0]));\n \n \t// See comment in runtime_entersyscall.\n \tdoentersyscallblock((uintptr)runtime_getcallerpc(),"}, {"sha": "a421dead67edaa950d3ef6b0469cefb15e65689e", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -510,3 +510,20 @@ bool probestackmaps(void)\n // older versions of glibc when a SIGPROF signal arrives while\n // collecting a backtrace.\n extern uint32 __go_runtime_in_callers;\n+\n+// Cheaper context switch functions.  Currently only defined on\n+// Linux/AMD64.\n+#if defined(__x86_64__) && defined(__linux__) && !defined(__CET__)\n+typedef struct {\n+\tuint64 regs[8];\n+} __go_context_t;\n+int __go_getcontext(__go_context_t*);\n+int __go_setcontext(__go_context_t*);\n+void __go_makecontext(__go_context_t*, void (*)(), void*, size_t);\n+#else\n+#define __go_context_t\tucontext_t\n+#define __go_getcontext(c)\tgetcontext(c)\n+#define __go_setcontext(c)\tsetcontext(c)\n+#define __go_makecontext(c, fn, sp, size) \\\n+\t((c)->uc_stack.ss_sp = sp, (c)->uc_stack.ss_size = size, makecontext(c, fn, 0))\n+#endif"}, {"sha": "4b4d07dbd4e1d7aa355c96ecc5c09b077389f0c4", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d12cf3cc3143843225ecdb0e5048fc7c37b1574/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=4d12cf3cc3143843225ecdb0e5048fc7c37b1574", "patch": "@@ -141,6 +141,9 @@ AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n+CCAS = @CCAS@\n+CCASDEPMODE = @CCASDEPMODE@\n+CCASFLAGS = @CCASFLAGS@\n CCDEPMODE = @CCDEPMODE@\n CC_FOR_BUILD = @CC_FOR_BUILD@\n CFLAGS = @CFLAGS@\n@@ -273,6 +276,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@"}]}