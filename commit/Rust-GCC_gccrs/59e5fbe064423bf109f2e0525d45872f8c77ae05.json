{"sha": "59e5fbe064423bf109f2e0525d45872f8c77ae05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNWZiZTA2NDQyM2JmMTA5ZjJlMDUyNWQ0NTg3MmY4Yzc3YWUwNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:46:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:46:36Z"}, "message": "re PR ada/10671 (improve error message for named notation used in pragma)\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\tPR ada/10671\n\n\t* sem_prag.adb: Implement pragma Persistent_BSS\n\tRemove obsolete pragma Persistent_Data, Persistent_Object\n\tSet Ada_Version_Explicit, for implementation of AI-362\n\tTest Ada_Version_Explicit for Preelaborate_05 and Pure_05\n\tAdd processing for pragma Pure_05 and Preelaborate_05\n\tAdd processing for Assertion_Policy pragma\n\tAdd pragma identifiers for Assert\n\t(Analyze_Pragma, case Assert): Check number of arguments\n\t(Process_Inline): Additional guard against an illegal program, where the\n\targument of the pragma is undefined, and warnings on redundant\n\tconstructs are enabled.\n\t(Analyze_Pragma, case Obsolescent): Allow an optional second argument\n\tAda_05 to this pragma, specifying that the pragma is only active in\n\tAda_05 mode.\n\t(Check_Arg_Order): New procedure\n\tAdd appropriate calls to this procedure throughout\n\tAlso throughout, check entity name before doing any other checks\n\n\t* snames.h snames.ads, snames.adb: Add pragma Persistent_BSS\n\tRemove obsolete pragma Persistent_Data, Persistent_Object\n\tAdd entries for pragma Pure_05 and Preelaborate_05\n\tAdd entries for Assertion_Policy pragma and associated names\n\tAdd some names for pragma argument processing\n\n\t* tbuild.ads, tbuild.adb: (Make_Linker_Section_Pragma): New function\n\nFrom-SVN: r101060", "tree": {"sha": "473b3727e61ab7b0c861751f6de3c8d7be1894ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/473b3727e61ab7b0c861751f6de3c8d7be1894ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e5fbe064423bf109f2e0525d45872f8c77ae05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e5fbe064423bf109f2e0525d45872f8c77ae05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e5fbe064423bf109f2e0525d45872f8c77ae05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e5fbe064423bf109f2e0525d45872f8c77ae05/comments", "author": null, "committer": null, "parents": [{"sha": "6eaf4095470fa44376f802f70382f4ee56b6aa9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaf4095470fa44376f802f70382f4ee56b6aa9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaf4095470fa44376f802f70382f4ee56b6aa9e"}], "stats": {"total": 1868, "additions": 1043, "deletions": 825}, "files": [{"sha": "2c11ca3c0d121f4cdb453209db324376b9f96de8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 293, "deletions": 127, "changes": 420, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -249,6 +249,10 @@ package body Sem_Prag is\n       --  First four pragma arguments (pragma argument association nodes,\n       --  or Empty if the corresponding argument does not exist).\n \n+      type Name_List is array (Natural range <>) of Name_Id;\n+      type Args_List is array (Natural range <>) of Node_Id;\n+      --  Types used for arguments to Check_Arg_Order and Gather_Associations\n+\n       procedure Check_Ada_83_Warning;\n       --  Issues a warning message for the current pragma if operating in Ada\n       --  83 mode (used for language pragmas that are not a standard part of\n@@ -322,6 +326,11 @@ package body Sem_Prag is\n       --  valid task dispatching policy name. If not give error and raise\n       --  Pragma_Exit.\n \n+      procedure Check_Arg_Order (Names : Name_List);\n+      --  Checks for an instance of two arguments with identifiers for the\n+      --  current pragma which are not in the sequence indicated by Names,\n+      --  and if so, generates a fatal message about bad order of arguments.\n+\n       procedure Check_At_Least_N_Arguments (N : Nat);\n       --  Check there are at least N arguments present\n \n@@ -443,8 +452,6 @@ package body Sem_Prag is\n       --  unit pragma that is not a compilation unit pragma, then the\n       --  identifier must be visible.\n \n-      type Name_List is array (Natural range <>) of Name_Id;\n-      type Args_List is array (Natural range <>) of Node_Id;\n       procedure Gather_Associations\n         (Names : Name_List;\n          Args  : out Args_List);\n@@ -899,6 +906,42 @@ package body Sem_Prag is\n          end if;\n       end Check_Arg_Is_Task_Dispatching_Policy;\n \n+      ---------------------\n+      -- Check_Arg_Order --\n+      ---------------------\n+\n+      procedure Check_Arg_Order (Names : Name_List) is\n+         Arg : Node_Id;\n+\n+         Highest_So_Far : Natural := 0;\n+         --  Highest index in Names seen do far\n+\n+      begin\n+         Arg := Arg1;\n+         for J in 1 .. Arg_Count loop\n+            if Chars (Arg) /= No_Name then\n+               for K in Names'Range loop\n+                  if Chars (Arg) = Names (K) then\n+                     if K < Highest_So_Far then\n+                        Error_Msg_Name_1 := Chars (N);\n+                        Error_Msg_N\n+                          (\"parameters out of order for pragma%\", Arg);\n+                        Error_Msg_Name_1 := Names (K);\n+                        Error_Msg_Name_2 := Names (Highest_So_Far);\n+                        Error_Msg_N (\"\\% must appear before %\", Arg);\n+                        raise Pragma_Exit;\n+\n+                     else\n+                        Highest_So_Far := K;\n+                     end if;\n+                  end if;\n+               end loop;\n+            end if;\n+\n+            Arg := Next (Arg);\n+         end loop;\n+      end Check_Arg_Order;\n+\n       --------------------------------\n       -- Check_At_Least_N_Arguments --\n       --------------------------------\n@@ -1965,8 +2008,8 @@ package body Sem_Prag is\n \n       begin\n          Check_At_Least_N_Arguments (2);\n-         Check_Arg_Is_Identifier (Arg1);\n          Check_Optional_Identifier (Arg1, Name_Convention);\n+         Check_Arg_Is_Identifier (Arg1);\n          Cname := Chars (Expression (Arg1));\n \n          --  C_Pass_By_Copy is treated as a synonym for convention C\n@@ -1996,8 +2039,8 @@ package body Sem_Prag is\n             C := Convention_C;\n          end if;\n \n-         Check_Arg_Is_Local_Name (Arg2);\n          Check_Optional_Identifier (Arg2, Name_Entity);\n+         Check_Arg_Is_Local_Name (Arg2);\n \n          Id := Expression (Arg2);\n          Analyze (Id);\n@@ -3289,7 +3332,11 @@ package body Sem_Prag is\n                Subp := Entity (Subp_Id);\n \n                if Subp = Any_Id then\n+\n+                  --  If previous error, avoid cascaded errors\n+\n                   Applies := True;\n+                  Effective := True;\n \n                else\n                   Make_Inline (Subp);\n@@ -4286,6 +4333,7 @@ package body Sem_Prag is\n          when Pragma_Ada_83 =>\n             GNAT_Pragma;\n             Ada_Version := Ada_83;\n+            Ada_Version_Explicit := Ada_Version;\n             Check_Arg_Count (0);\n \n          ------------\n@@ -4300,6 +4348,7 @@ package body Sem_Prag is\n          when Pragma_Ada_95 =>\n             GNAT_Pragma;\n             Ada_Version := Ada_95;\n+            Ada_Version_Explicit := Ada_Version;\n             Check_Arg_Count (0);\n \n          ------------\n@@ -4329,8 +4378,9 @@ package body Sem_Prag is\n                Set_Is_Ada_2005 (Entity (E_Id));\n \n             else\n-               Ada_Version := Ada_05;\n                Check_Arg_Count (0);\n+               Ada_Version := Ada_05;\n+               Ada_Version_Explicit := Ada_Version;\n             end if;\n          end;\n \n@@ -4413,14 +4463,17 @@ package body Sem_Prag is\n          -- Assert --\n          ------------\n \n-         --  pragma Assert (Boolean_EXPRESSION [, static_string_EXPRESSION]);\n+         --  pragma Assert ([Check =>] Boolean_EXPRESSION\n+         --                 [, [Message =>] Static_String_EXPRESSION]);\n \n          when Pragma_Assert =>\n-            GNAT_Pragma;\n-            Check_No_Identifiers;\n+            Check_At_Least_N_Arguments (1);\n+            Check_At_Most_N_Arguments (2);\n+            Check_Arg_Order ((Name_Check, Name_Message));\n+            Check_Optional_Identifier (Arg1, Name_Check);\n \n             if Arg_Count > 1 then\n-               Check_Arg_Count (2);\n+               Check_Optional_Identifier (Arg2, Name_Message);\n                Check_Arg_Is_Static_Expression (Arg2, Standard_String);\n             end if;\n \n@@ -4457,6 +4510,17 @@ package body Sem_Prag is\n                Analyze_And_Resolve (Expression (Arg1), Any_Boolean);\n             end if;\n \n+         ----------------------\n+         -- Assertion_Policy --\n+         ----------------------\n+\n+         --  pragma Assertion_Policy (Check | Ignore)\n+\n+         when Pragma_Assertion_Policy =>\n+            Check_Arg_Count (1);\n+            Check_Arg_Is_One_Of (Arg1, Name_Check, Name_Ignore);\n+            Assertions_Enabled := Chars (Expression (Arg1)) = Name_Check;\n+\n          ---------------\n          -- AST_Entry --\n          ---------------\n@@ -5065,6 +5129,7 @@ package body Sem_Prag is\n             C : Convention_Id;\n             E : Entity_Id;\n          begin\n+            Check_Arg_Order ((Name_Convention, Name_Entity));\n             Check_Ada_83_Warning;\n             Check_Arg_Count (2);\n             Process_Convention (C, E);\n@@ -5083,6 +5148,7 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Name, Name_Convention));\n             Check_Arg_Count (2);\n             Check_Optional_Identifier (Arg1, Name_Name);\n             Check_Optional_Identifier (Arg2, Name_Convention);\n@@ -5276,17 +5342,18 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Vtable_Ptr, Name_Position));\n \n             if Arg_Count = 3 then\n-               Check_Optional_Identifier (Arg2, \"vtable_ptr\");\n+               Check_Optional_Identifier (Arg2, Name_Vtable_Ptr);\n \n                --  We allow Entry_Count as well as Position for the third\n                --  parameter for back compatibility with versions of GNAT\n                --  before version 3.12. The documentation has always said\n                --  Position, but the code up to 3.12 said Entry_Count.\n \n-               if Chars (Arg3) /= Name_Position then\n-                  Check_Optional_Identifier (Arg3, \"entry_count\");\n+               if Chars (Arg3) /= Name_Entry_Count then\n+                  Check_Optional_Identifier (Arg3, Name_Position);\n                end if;\n \n             else\n@@ -5393,10 +5460,11 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Vtable_Ptr, Name_Entry_Count));\n             Check_Arg_Count (3);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n-            Check_Optional_Identifier (Arg2, \"vtable_ptr\");\n-            Check_Optional_Identifier (Arg3, \"entry_count\");\n+            Check_Optional_Identifier (Arg2, Name_Vtable_Ptr);\n+            Check_Optional_Identifier (Arg3, Name_Entry_Count);\n             Check_Arg_Is_Local_Name (Arg1);\n \n             --  First argument is a record type name\n@@ -5943,6 +6011,11 @@ package body Sem_Prag is\n \n          begin\n             Check_Ada_83_Warning;\n+            Check_Arg_Order\n+              ((Name_Convention,\n+                Name_Entity,\n+                Name_External_Name,\n+                Name_Link_Name));\n             Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments  (4);\n             Process_Convention (C, Def_Id);\n@@ -6186,6 +6259,7 @@ package body Sem_Prag is\n \n          when Pragma_Export_Value =>\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Value, Name_Link_Name));\n             Check_Arg_Count (2);\n \n             Check_Optional_Identifier (Arg1, Name_Value);\n@@ -6315,6 +6389,8 @@ package body Sem_Prag is\n                Ada_Version := Ada_Version_Type'Min (Ada_Version, Ada_95);\n             end if;\n \n+            Ada_Version_Explicit := Ada_Version;\n+\n          --------------\n          -- External --\n          --------------\n@@ -6328,9 +6404,13 @@ package body Sem_Prag is\n          when Pragma_External => External : declare\n             C      : Convention_Id;\n             Def_Id : Entity_Id;\n-\n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order\n+              ((Name_Convention,\n+                Name_Entity,\n+                Name_External_Name,\n+                Name_Link_Name));\n             Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments  (4);\n             Process_Convention (C, Def_Id);\n@@ -6650,6 +6730,11 @@ package body Sem_Prag is\n \n          when Pragma_Import =>\n             Check_Ada_83_Warning;\n+            Check_Arg_Order\n+              ((Name_Convention,\n+                Name_Entity,\n+                Name_External_Name,\n+                Name_Link_Name));\n             Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments  (4);\n             Process_Import_Or_Interface;\n@@ -7034,6 +7119,8 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order\n+              ((Name_Entity, Name_External_Name, Name_Link_Name));\n             Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments  (3);\n             Id := Expression (Arg1);\n@@ -7215,10 +7302,11 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Name, Name_State));\n             Check_Arg_Count (2);\n \n             Check_Optional_Identifier (Arg1, Name_Name);\n-            Check_Optional_Identifier (Arg2, \"state\");\n+            Check_Optional_Identifier (Arg2, Name_State);\n             Check_Arg_Is_Identifier (Arg2);\n \n             --  First argument is identifier\n@@ -7455,7 +7543,7 @@ package body Sem_Prag is\n          -- License --\n          -------------\n \n-         --  pragma License (RESTRICTED | UNRESRICTED | GPL | MODIFIED_GPL);\n+         --  pragma License (RESTRICTED | UNRESTRICTED | GPL | MODIFIED_GPL);\n \n          when Pragma_License =>\n             GNAT_Pragma;\n@@ -7575,9 +7663,10 @@ package body Sem_Prag is\n \n          when Pragma_Linker_Alias =>\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Alias));\n             Check_Arg_Count (2);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n-            Check_Optional_Identifier (Arg2, \"alias\");\n+            Check_Optional_Identifier (Arg2, Name_Alias);\n             Check_Arg_Is_Library_Level_Local_Name (Arg1);\n             Check_Arg_Is_Static_Expression (Arg2, Standard_String);\n \n@@ -7636,6 +7725,7 @@ package body Sem_Prag is\n \n          when Pragma_Linker_Section =>\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Section));\n             Check_Arg_Count (2);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n             Check_Optional_Identifier (Arg2, Name_Section);\n@@ -7754,17 +7844,18 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Attribute_Name, Name_Info));\n \n             if Arg_Count = 3 then\n-               Check_Optional_Identifier (Arg3, \"info\");\n+               Check_Optional_Identifier (Arg3, Name_Info);\n                Check_Arg_Is_Static_Expression (Arg3, Standard_String);\n             else\n                Check_Arg_Count (2);\n             end if;\n \n-            Check_Arg_Is_Local_Name (Arg1);\n-            Check_Optional_Identifier (Arg2, \"attribute_name\");\n             Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Optional_Identifier (Arg2, Name_Attribute_Name);\n+            Check_Arg_Is_Local_Name (Arg1);\n             Check_Arg_Is_Static_Expression (Arg2, Standard_String);\n             Def_Id := Entity (Expression (Arg1));\n \n@@ -7978,15 +8069,16 @@ package body Sem_Prag is\n          -- Obsolescent --\n          -----------------\n \n-         --  pragma Obsolescent [(static_string_EXPRESSION)];\n+            --  pragma Obsolescent [(static_string_EXPRESSION [, Ada_05])];\n \n          when Pragma_Obsolescent => Obsolescent : declare\n-            Subp : Node_Or_Entity_Id;\n-            S    : String_Id;\n+            Subp   : Node_Or_Entity_Id;\n+            S      : String_Id;\n+            Active : Boolean := True;\n \n          begin\n             GNAT_Pragma;\n-            Check_At_Most_N_Arguments (1);\n+            Check_At_Most_N_Arguments (2);\n             Check_No_Identifiers;\n \n             --  Check OK placement\n@@ -8017,28 +8109,60 @@ package body Sem_Prag is\n                Error_Pragma\n                  (\"pragma% misplaced, must immediately \" &\n                   \"follow subprogram spec\");\n+            end if;\n \n-            --  If OK placement, set flag and acquire argument\n+            --  If OK placement, acquire arguments\n \n-            else\n-               Subp := Defining_Entity (Subp);\n-               Set_Is_Obsolescent (Subp);\n+            Subp := Defining_Entity (Subp);\n+\n+            if Arg_Count >= 1 then\n+\n+               --  Deal with static string argument\n+\n+               Check_Arg_Is_Static_Expression (Arg1, Standard_String);\n+               S := Strval (Expression (Arg1));\n+\n+               for J in 1 .. String_Length (S) loop\n+                  if not In_Character_Range (Get_String_Char (S, J)) then\n+                     Error_Pragma_Arg\n+                       (\"pragma% argument does not allow wide characters\",\n+                        Arg1);\n+                  end if;\n+               end loop;\n+\n+               Set_Obsolescent_Warning (Subp, Expression (Arg1));\n+\n+               --  Check for Ada_05 parameter\n \n-               if Arg_Count = 1 then\n-                  Check_Arg_Is_Static_Expression (Arg1, Standard_String);\n-                  S := Strval (Expression (Arg1));\n+               if Arg_Count /= 1 then\n+                  Check_Arg_Count (2);\n \n-                  for J in 1 .. String_Length (S) loop\n-                     if not In_Character_Range (Get_String_Char (S, J)) then\n+                  declare\n+                     Argx : constant Node_Id := Get_Pragma_Arg (Arg2);\n+\n+                  begin\n+                     Check_Arg_Is_Identifier (Argx);\n+\n+                     if Chars (Argx) /= Name_Ada_05 then\n+                        Error_Msg_Name_2 := Name_Ada_05;\n                         Error_Pragma_Arg\n-                          (\"pragma% argument does not allow wide characters\",\n-                           Arg1);\n+                          (\"only allowed argument for pragma% is %\", Argx);\n                      end if;\n-                  end loop;\n \n-                  Set_Obsolescent_Warning (Subp, Expression (Arg1));\n+                     if Ada_Version_Explicit < Ada_05\n+                       or else not Warn_On_Ada_2005_Compatibility\n+                     then\n+                        Active := False;\n+                     end if;\n+                  end;\n                end if;\n             end if;\n+\n+            --  Set flag if pragma active\n+\n+            if Active then\n+               Set_Is_Obsolescent (Subp);\n+            end if;\n          end Obsolescent;\n \n          -----------------\n@@ -8230,104 +8354,63 @@ package body Sem_Prag is\n             Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off);\n             Polling_Required := (Chars (Expression (Arg1)) = Name_On);\n \n-         ---------------------\n-         -- Persistent_Data --\n-         ---------------------\n-\n-         when Pragma_Persistent_Data => declare\n-            Ent : Entity_Id;\n-\n-         begin\n-            --  Register the pragma as applying to the compilation unit.\n-            --  Individual Persistent_Object pragmas for relevant objects\n-            --  are generated the end of the compilation.\n-\n-            GNAT_Pragma;\n-            Check_Valid_Configuration_Pragma;\n-            Check_Arg_Count (0);\n-            Ent := Find_Lib_Unit_Name;\n-            Set_Is_Preelaborated (Ent);\n-         end;\n-\n-         -----------------------\n-         -- Persistent_Object --\n-         -----------------------\n+         --------------------\n+         -- Persistent_BSS --\n+         --------------------\n \n-         when Pragma_Persistent_Object => declare\n+         when Pragma_Persistent_BSS => Persistent_BSS :  declare\n             Decl : Node_Id;\n             Ent  : Entity_Id;\n-            MA   : Node_Id;\n-            Str  : String_Id;\n+            Prag : Node_Id;\n \n          begin\n             GNAT_Pragma;\n-            Check_Arg_Count (1);\n-            Check_Arg_Is_Library_Level_Local_Name (Arg1);\n+            Check_At_Most_N_Arguments (1);\n \n-            if not Is_Entity_Name (Expression (Arg1))\n-              or else\n-               (Ekind (Entity (Expression (Arg1))) /= E_Variable\n-                 and then Ekind (Entity (Expression (Arg1))) /= E_Constant)\n-            then\n-               Error_Pragma_Arg (\"pragma only applies to objects\", Arg1);\n-            end if;\n+            --  Case of application to specific object (one argument)\n \n-            Ent := Entity (Expression (Arg1));\n-            Decl := Parent (Ent);\n+            if Arg_Count = 1 then\n+               Check_Arg_Is_Library_Level_Local_Name (Arg1);\n \n-            if Nkind (Decl) /= N_Object_Declaration then\n-               return;\n-            end if;\n+               if not Is_Entity_Name (Expression (Arg1))\n+                 or else\n+                  (Ekind (Entity (Expression (Arg1))) /= E_Variable\n+                    and then Ekind (Entity (Expression (Arg1))) /= E_Constant)\n+               then\n+                  Error_Pragma_Arg (\"pragma% only applies to objects\", Arg1);\n+               end if;\n \n-            --  Placement of the object depends on whether there is\n-            --  an initial value or none. If the No_Initialization flag\n-            --  is set, the initialization has been transformed into\n-            --  assignments, which is disallowed elaboration code.\n+               Ent := Entity (Expression (Arg1));\n+               Decl := Parent (Ent);\n \n-            if No_Initialization (Decl) then\n-               Error_Msg_N\n-                 (\"initialization for persistent object\"\n-                   &  \"must be static expression\", Decl);\n-               return;\n-            end if;\n+               if Rep_Item_Too_Late (Ent, N) then\n+                  return;\n+               end if;\n \n-            if No (Expression (Decl)) then\n-               Start_String;\n-               Store_String_Chars (\"section (\"\".persistent.bss\"\")\");\n-               Str := End_String;\n+               if Present (Expression (Decl)) then\n+                  Error_Pragma_Arg\n+                    (\"object for pragma% cannot have initialization\", Arg1);\n+               end if;\n \n-            else\n-               if not Is_OK_Static_Expression (Expression (Decl)) then\n-                  Flag_Non_Static_Expr\n-                    (\"initialization for persistent object\"\n-                      &  \"must be static expression!\", Expression (Decl));\n-                  return;\n+               if not Is_Potentially_Persistent_Type (Etype (Ent)) then\n+                  Error_Pragma_Arg\n+                    (\"object type for pragma% is not potentially persistent\",\n+                     Arg1);\n                end if;\n \n-               Start_String;\n-               Store_String_Chars (\"section (\"\".persistent.data\"\")\");\n-               Str := End_String;\n-            end if;\n-\n-            MA :=\n-               Make_Pragma\n-                 (Sloc (N),\n-                  Name_Machine_Attribute,\n-                  New_List\n-                    (Make_Pragma_Argument_Association\n-                       (Sloc => Sloc (Arg1),\n-                        Expression => New_Occurrence_Of (Ent, Sloc (Ent))),\n-                     Make_Pragma_Argument_Association\n-                       (Sloc => Sloc (Arg1),\n-                        Expression =>\n-                          Make_String_Literal\n-                            (Sloc => Sloc (Arg1),\n-                             Strval => Str))));\n-\n-            Insert_After (N, MA);\n-            Analyze (MA);\n-            Set_Has_Gigi_Rep_Item (Ent);\n-         end;\n+               Prag :=\n+                 Make_Linker_Section_Pragma\n+                   (Ent, Sloc (N), \".persistent.bss\");\n+               Insert_After (N, Prag);\n+               Analyze (Prag);\n+\n+            --  Case of use as configuration pragma with no arguments\n+\n+            else\n+               Check_Valid_Configuration_Pragma;\n+               Persistent_BSS_Mode := True;\n+            end if;\n+         end Persistent_BSS;\n \n          ------------------\n          -- Preelaborate --\n@@ -8357,7 +8440,7 @@ package body Sem_Prag is\n \n             if Present (Ent)\n               and then not (Pk = N_Package_Specification\n-                             and then Present (Generic_Parent (Pa)))\n+                              and then Present (Generic_Parent (Pa)))\n             then\n                if not Debug_Flag_U then\n                   Set_Is_Preelaborated (Ent);\n@@ -8366,6 +8449,44 @@ package body Sem_Prag is\n             end if;\n          end Preelaborate;\n \n+         ---------------------\n+         -- Preelaborate_05 --\n+         ---------------------\n+\n+         --  pragma Preelaborate_05 [(library_unit_NAME)];\n+\n+         --  This pragma is useable only in GNAT_Mode, where it is used like\n+         --  pragma Preelaborate but it is only effective in Ada 2005 mode\n+         --  (otherwise it is ignored). This is used to implement AI-362 which\n+         --  recategorizes some run-time packages in Ada 2005 mode.\n+\n+         when Pragma_Preelaborate_05 => Preelaborate_05 : declare\n+            Ent : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Valid_Library_Unit_Pragma;\n+\n+            if not GNAT_Mode then\n+               Error_Pragma (\"pragma% only available in GNAT mode\");\n+            end if;\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n+            --  This is one of the few cases where we need to test the value of\n+            --  Ada_Version_Explicit rather than Ada_Version (which is always\n+            --  set to Ada_05 in a predefined unit), we need to know the\n+            --  explicit version set to know if this pragma is active.\n+\n+            if Ada_Version_Explicit >= Ada_05 then\n+               Ent := Find_Lib_Unit_Name;\n+               Set_Is_Preelaborated (Ent);\n+               Set_Suppress_Elaboration_Warnings (Ent);\n+            end if;\n+         end Preelaborate_05;\n+\n          --------------\n          -- Priority --\n          --------------\n@@ -8674,6 +8795,7 @@ package body Sem_Prag is\n \n          when Pragma_Pure => Pure : declare\n             Ent : Entity_Id;\n+\n          begin\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n@@ -8687,6 +8809,46 @@ package body Sem_Prag is\n             Set_Suppress_Elaboration_Warnings (Ent);\n          end Pure;\n \n+         -------------\n+         -- Pure_05 --\n+         -------------\n+\n+         --  pragma Pure_05 [(library_unit_NAME)];\n+\n+         --  This pragma is useable only in GNAT_Mode, where it is used like\n+         --  pragma Pure but it is only effective in Ada 2005 mode (otherwise\n+         --  it is ignored). It may be used after a pragma Preelaborate, in\n+         --  which case it overrides the effect of the pragma Preelaborate.\n+         --  This is used to implement AI-362 which recategorizes some run-time\n+         --  packages in Ada 2005 mode.\n+\n+         when Pragma_Pure_05 => Pure_05 : declare\n+            Ent : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Valid_Library_Unit_Pragma;\n+\n+            if not GNAT_Mode then\n+               Error_Pragma (\"pragma% only available in GNAT mode\");\n+            end if;\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n+            --  This is one of the few cases where we need to test the value of\n+            --  Ada_Version_Explicit rather than Ada_Version (which is always\n+            --  set to Ada_05 in a predefined unit), we need to know the\n+            --  explicit version set to know if this pragma is active.\n+\n+            if Ada_Version_Explicit >= Ada_05 then\n+               Ent := Find_Lib_Unit_Name;\n+               Set_Is_Preelaborated (Ent, False);\n+               Set_Is_Pure (Ent);\n+               Set_Suppress_Elaboration_Warnings (Ent);\n+            end if;\n+         end Pure_05;\n+\n          -------------------\n          -- Pure_Function --\n          -------------------\n@@ -9185,6 +9347,7 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Read, Name_Write));\n             Check_Arg_Count (3);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n             Check_Optional_Identifier (Arg2, Name_Read);\n@@ -9389,8 +9552,8 @@ package body Sem_Prag is\n          when Pragma_Suppress_Debug_Info =>\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n-            Check_Arg_Is_Local_Name (Arg1);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Arg_Is_Local_Name (Arg1);\n             Set_Debug_Info_Off (Entity (Get_Pragma_Arg (Arg1)));\n \n          ----------------------------------\n@@ -9628,6 +9791,7 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n+            Check_Arg_Order ((Name_Entity, Name_Secondary_Stack_Size));\n             Check_At_Least_N_Arguments (1);\n             Check_At_Most_N_Arguments (2);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n@@ -10328,6 +10492,7 @@ package body Sem_Prag is\n       Pragma_All_Calls_Remote             => -1,\n       Pragma_Annotate                     => -1,\n       Pragma_Assert                       => -1,\n+      Pragma_Assertion_Policy             =>  0,\n       Pragma_Asynchronous                 => -1,\n       Pragma_Atomic                       =>  0,\n       Pragma_Atomic_Components            =>  0,\n@@ -10410,16 +10575,17 @@ package body Sem_Prag is\n       Pragma_Page                         => -1,\n       Pragma_Passive                      => -1,\n       Pragma_Polling                      => -1,\n-      Pragma_Persistent_Data              => -1,\n-      Pragma_Persistent_Object            => -1,\n+      Pragma_Persistent_BSS               =>  0,\n       Pragma_Preelaborate                 => -1,\n+      Pragma_Preelaborate_05              => -1,\n       Pragma_Priority                     => -1,\n       Pragma_Profile                      =>  0,\n       Pragma_Profile_Warnings             =>  0,\n       Pragma_Propagate_Exceptions         => -1,\n       Pragma_Psect_Object                 => -1,\n-      Pragma_Pure                         =>  0,\n-      Pragma_Pure_Function                =>  0,\n+      Pragma_Pure                         => -1,\n+      Pragma_Pure_05                      => -1,\n+      Pragma_Pure_Function                => -1,\n       Pragma_Queuing_Policy               => -1,\n       Pragma_Ravenscar                    => -1,\n       Pragma_Remote_Call_Interface        => -1,"}, {"sha": "4894f549599434d939e668a43b50f73550577719", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -169,6 +169,7 @@ package body Snames is\n      \"ada_83#\" &\n      \"ada_95#\" &\n      \"ada_05#\" &\n+     \"assertion_policy#\" &\n      \"c_pass_by_copy#\" &\n      \"compile_time_warning#\" &\n      \"component_alignment#\" &\n@@ -191,8 +192,7 @@ package body Snames is\n      \"no_strict_aliasing#\" &\n      \"normalize_scalars#\" &\n      \"polling#\" &\n-     \"persistent_data#\" &\n-     \"persistent_object#\" &\n+     \"persistent_bss#\" &\n      \"profile#\" &\n      \"profile_warnings#\" &\n      \"propagate_exceptions#\" &\n@@ -277,9 +277,11 @@ package body Snames is\n      \"page#\" &\n      \"passive#\" &\n      \"preelaborate#\" &\n+     \"preelaborate_05#\" &\n      \"priority#\" &\n      \"psect_object#\" &\n      \"pure#\" &\n+     \"pure_05#\" &\n      \"pure_function#\" &\n      \"remote_call_interface#\" &\n      \"remote_types#\" &\n@@ -320,9 +322,12 @@ package body Snames is\n      \"default#\" &\n      \"dll#\" &\n      \"win32#\" &\n+     \"alias#\" &\n      \"as_is#\" &\n+     \"attribute_name#\" &\n      \"body_file_name#\" &\n      \"boolean_entry_barriers#\" &\n+     \"check#\" &\n      \"casing#\" &\n      \"code#\" &\n      \"component#\" &\n@@ -333,6 +338,7 @@ package body Snames is\n      \"dot_replacement#\" &\n      \"dynamic#\" &\n      \"entity#\" &\n+     \"entry_count#\" &\n      \"external_name#\" &\n      \"first_optional_parameter#\" &\n      \"form#\" &\n@@ -341,13 +347,16 @@ package body Snames is\n      \"gnat#\" &\n      \"gpl#\" &\n      \"ieee_float#\" &\n+     \"ignore#\" &\n+     \"info#\" &\n      \"internal#\" &\n      \"link_name#\" &\n      \"lowercase#\" &\n      \"max_entry_queue_depth#\" &\n      \"max_entry_queue_length#\" &\n      \"max_size#\" &\n      \"mechanism#\" &\n+     \"message#\" &\n      \"mixedcase#\" &\n      \"modified_gpl#\" &\n      \"name#\" &\n@@ -373,6 +382,7 @@ package body Snames is\n      \"semaphore#\" &\n      \"simple_barriers#\" &\n      \"spec_file_name#\" &\n+     \"state#\" &\n      \"static#\" &\n      \"stack_size#\" &\n      \"subunit_file_name#\" &\n@@ -390,6 +400,7 @@ package body Snames is\n      \"user#\" &\n      \"vax_float#\" &\n      \"vms#\" &\n+     \"vtable_ptr#\" &\n      \"working_storage#\" &\n      \"abort_signal#\" &\n      \"access#\" &"}, {"sha": "aa0c8d4952cd869c9da17319250e3e21918a74c0", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 497, "deletions": 484, "changes": 981, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -47,17 +47,17 @@ package Snames is\n    -- Preset Names --\n    ------------------\n \n-   --  The following are preset entries in the names table, which are\n-   --  entered at the start of every compilation for easy access. Note\n-   --  that the order of initialization of these names in the body must\n-   --  be coordinated with the order of names in this table.\n-\n-   --  Note: a name may not appear more than once in the following list.\n-   --  If additional pragmas or attributes are introduced which might\n-   --  otherwise cause a duplicate, then list it only once in this table,\n-   --  and adjust the definition of the functions for testing for pragma\n-   --  names and attribute names, and returning their ID values. Of course\n-   --  everything is simpler if no such duplications occur!\n+   --  The following are preset entries in the names table, which are entered\n+   --  at the start of every compilation for easy access. Note that the order\n+   --  of initialization of these names in the body must be coordinated with\n+   --  the order of names in this table.\n+\n+   --  Note: a name may not appear more than once in the following list. If\n+   --  additional pragmas or attributes are introduced which might otherwise\n+   --  cause a duplicate, then list it only once in this table, and adjust the\n+   --  definition of the functions for testing for pragma names and attribute\n+   --  names, and returning their ID values. Of course everything is simpler\n+   --  if no such duplications occur!\n \n    --  First we have the one character names used to optimize the lookup\n    --  process for one character identifiers (to avoid the hashing in this\n@@ -323,36 +323,36 @@ package Snames is\n    Name_Ada_83                         : constant Name_Id := N + 109; -- GNAT\n    Name_Ada_95                         : constant Name_Id := N + 110; -- GNAT\n    Name_Ada_05                         : constant Name_Id := N + 111; -- GNAT\n-   Name_C_Pass_By_Copy                 : constant Name_Id := N + 112; -- GNAT\n-   Name_Compile_Time_Warning           : constant Name_Id := N + 113; -- GNAT\n-   Name_Component_Alignment            : constant Name_Id := N + 114; -- GNAT\n-   Name_Convention_Identifier          : constant Name_Id := N + 115; -- GNAT\n-   Name_Detect_Blocking                : constant Name_Id := N + 116; -- Ada05\n-   Name_Discard_Names                  : constant Name_Id := N + 117;\n-   Name_Elaboration_Checks             : constant Name_Id := N + 118; -- GNAT\n-   Name_Eliminate                      : constant Name_Id := N + 119; -- GNAT\n-   Name_Explicit_Overriding            : constant Name_Id := N + 120;\n-   Name_Extend_System                  : constant Name_Id := N + 121; -- GNAT\n-   Name_Extensions_Allowed             : constant Name_Id := N + 122; -- GNAT\n-   Name_External_Name_Casing           : constant Name_Id := N + 123; -- GNAT\n-   Name_Float_Representation           : constant Name_Id := N + 124; -- GNAT\n-   Name_Initialize_Scalars             : constant Name_Id := N + 125; -- GNAT\n-   Name_Interrupt_State                : constant Name_Id := N + 126; -- GNAT\n-   Name_License                        : constant Name_Id := N + 127; -- GNAT\n-   Name_Locking_Policy                 : constant Name_Id := N + 128;\n-   Name_Long_Float                     : constant Name_Id := N + 129; -- VMS\n-   Name_No_Run_Time                    : constant Name_Id := N + 130; -- GNAT\n-   Name_No_Strict_Aliasing             : constant Name_Id := N + 131; -- GNAT\n-   Name_Normalize_Scalars              : constant Name_Id := N + 132;\n-   Name_Polling                        : constant Name_Id := N + 133; -- GNAT\n-   Name_Persistent_Data                : constant Name_Id := N + 134; -- GNAT\n-   Name_Persistent_Object              : constant Name_Id := N + 135; -- GNAT\n-   Name_Profile                        : constant Name_Id := N + 136; -- Ada05\n+   Name_Assertion_Policy               : constant Name_Id := N + 112; -- Ada 05\n+   Name_C_Pass_By_Copy                 : constant Name_Id := N + 113; -- GNAT\n+   Name_Compile_Time_Warning           : constant Name_Id := N + 114; -- GNAT\n+   Name_Component_Alignment            : constant Name_Id := N + 115; -- GNAT\n+   Name_Convention_Identifier          : constant Name_Id := N + 116; -- GNAT\n+   Name_Detect_Blocking                : constant Name_Id := N + 117; -- Ada 05\n+   Name_Discard_Names                  : constant Name_Id := N + 118;\n+   Name_Elaboration_Checks             : constant Name_Id := N + 119; -- GNAT\n+   Name_Eliminate                      : constant Name_Id := N + 120; -- GNAT\n+   Name_Explicit_Overriding            : constant Name_Id := N + 121; -- Ada 05\n+   Name_Extend_System                  : constant Name_Id := N + 122; -- GNAT\n+   Name_Extensions_Allowed             : constant Name_Id := N + 123; -- GNAT\n+   Name_External_Name_Casing           : constant Name_Id := N + 124; -- GNAT\n+   Name_Float_Representation           : constant Name_Id := N + 125; -- GNAT\n+   Name_Initialize_Scalars             : constant Name_Id := N + 126; -- GNAT\n+   Name_Interrupt_State                : constant Name_Id := N + 127; -- GNAT\n+   Name_License                        : constant Name_Id := N + 128; -- GNAT\n+   Name_Locking_Policy                 : constant Name_Id := N + 129;\n+   Name_Long_Float                     : constant Name_Id := N + 130; -- VMS\n+   Name_No_Run_Time                    : constant Name_Id := N + 131; -- GNAT\n+   Name_No_Strict_Aliasing             : constant Name_Id := N + 132; -- GNAT\n+   Name_Normalize_Scalars              : constant Name_Id := N + 133;\n+   Name_Polling                        : constant Name_Id := N + 134; -- GNAT\n+   Name_Persistent_BSS                 : constant Name_Id := N + 135; -- GNAT\n+   Name_Profile                        : constant Name_Id := N + 136; -- Ada 05\n    Name_Profile_Warnings               : constant Name_Id := N + 137; -- GNAT\n    Name_Propagate_Exceptions           : constant Name_Id := N + 138; -- GNAT\n    Name_Queuing_Policy                 : constant Name_Id := N + 139;\n-   Name_Ravenscar                      : constant Name_Id := N + 140;\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 141;\n+   Name_Ravenscar                      : constant Name_Id := N + 140; -- Ada 05\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 141; -- GNAT\n    Name_Restrictions                   : constant Name_Id := N + 142;\n    Name_Restriction_Warnings           : constant Name_Id := N + 143; -- GNAT\n    Name_Reviewable                     : constant Name_Id := N + 144;\n@@ -381,7 +381,7 @@ package Snames is\n    --  and Check_Pragma_Id correctly recognize and process Name_AST_Entry.\n    --  AST_Entry is a VMS specific pragma.\n \n-   Name_Assert                         : constant Name_Id := N + 159; -- GNAT\n+   Name_Assert                         : constant Name_Id := N + 159; -- Ada 05\n    Name_Asynchronous                   : constant Name_Id := N + 160;\n    Name_Atomic                         : constant Name_Id := N + 161;\n    Name_Atomic_Components              : constant Name_Id := N + 162;\n@@ -437,20 +437,22 @@ package Snames is\n    Name_No_Return                      : constant Name_Id := N + 212; -- GNAT\n    Name_Obsolescent                    : constant Name_Id := N + 213; -- GNAT\n    Name_Optimize                       : constant Name_Id := N + 214;\n-   Name_Optional_Overriding            : constant Name_Id := N + 215;\n+   Name_Optional_Overriding            : constant Name_Id := N + 215; -- Ada 05\n    Name_Pack                           : constant Name_Id := N + 216;\n    Name_Page                           : constant Name_Id := N + 217;\n    Name_Passive                        : constant Name_Id := N + 218; -- GNAT\n    Name_Preelaborate                   : constant Name_Id := N + 219;\n-   Name_Priority                       : constant Name_Id := N + 220;\n-   Name_Psect_Object                   : constant Name_Id := N + 221; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 222;\n-   Name_Pure_Function                  : constant Name_Id := N + 223; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 224;\n-   Name_Remote_Types                   : constant Name_Id := N + 225;\n-   Name_Share_Generic                  : constant Name_Id := N + 226; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 227; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 228;\n+   Name_Preelaborate_05                : constant Name_Id := N + 220; -- GNAT\n+   Name_Priority                       : constant Name_Id := N + 221;\n+   Name_Psect_Object                   : constant Name_Id := N + 222; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 223;\n+   Name_Pure_05                        : constant Name_Id := N + 224; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 225; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 226;\n+   Name_Remote_Types                   : constant Name_Id := N + 227;\n+   Name_Share_Generic                  : constant Name_Id := N + 228; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 229; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 230;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -460,27 +462,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 229; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 230; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 231; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 232; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 233; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 234; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 235; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 236; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 237; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 238; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 239; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 240; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 241; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 242; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 243; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 244; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 245; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 246;\n-   Name_Volatile_Components            : constant Name_Id := N + 247;\n-   Name_Weak_External                  : constant Name_Id := N + 248; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 248;\n+   Name_Source_Reference               : constant Name_Id := N + 231; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 232; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 233; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 234; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 235; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 236; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 237; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 238; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 239; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 240; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 241; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 242; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 243; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 244; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 245; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 246; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 247; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 248;\n+   Name_Volatile_Components            : constant Name_Id := N + 249;\n+   Name_Weak_External                  : constant Name_Id := N + 250; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 250;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -491,106 +493,115 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 249;\n-   Name_Ada                            : constant Name_Id := N + 249;\n-   Name_Assembler                      : constant Name_Id := N + 250;\n-   Name_COBOL                          : constant Name_Id := N + 251;\n-   Name_CPP                            : constant Name_Id := N + 252;\n-   Name_Fortran                        : constant Name_Id := N + 253;\n-   Name_Intrinsic                      : constant Name_Id := N + 254;\n-   Name_Java                           : constant Name_Id := N + 255;\n-   Name_Stdcall                        : constant Name_Id := N + 256;\n-   Name_Stubbed                        : constant Name_Id := N + 257;\n-   Last_Convention_Name                : constant Name_Id := N + 257;\n+   First_Convention_Name               : constant Name_Id := N + 251;\n+   Name_Ada                            : constant Name_Id := N + 251;\n+   Name_Assembler                      : constant Name_Id := N + 252;\n+   Name_COBOL                          : constant Name_Id := N + 253;\n+   Name_CPP                            : constant Name_Id := N + 254;\n+   Name_Fortran                        : constant Name_Id := N + 255;\n+   Name_Intrinsic                      : constant Name_Id := N + 256;\n+   Name_Java                           : constant Name_Id := N + 257;\n+   Name_Stdcall                        : constant Name_Id := N + 258;\n+   Name_Stubbed                        : constant Name_Id := N + 259;\n+   Last_Convention_Name                : constant Name_Id := N + 259;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 258;\n-   Name_Assembly                       : constant Name_Id := N + 259;\n+   Name_Asm                            : constant Name_Id := N + 260;\n+   Name_Assembly                       : constant Name_Id := N + 261;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 260;\n+   Name_Default                        : constant Name_Id := N + 262;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 261;\n-   Name_Win32                          : constant Name_Id := N + 262;\n+   Name_DLL                            : constant Name_Id := N + 263;\n+   Name_Win32                          : constant Name_Id := N + 264;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 263;\n-   Name_Body_File_Name                 : constant Name_Id := N + 264;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 265;\n-   Name_Casing                         : constant Name_Id := N + 266;\n-   Name_Code                           : constant Name_Id := N + 267;\n-   Name_Component                      : constant Name_Id := N + 268;\n-   Name_Component_Size_4               : constant Name_Id := N + 269;\n-   Name_Copy                           : constant Name_Id := N + 270;\n-   Name_D_Float                        : constant Name_Id := N + 271;\n-   Name_Descriptor                     : constant Name_Id := N + 272;\n-   Name_Dot_Replacement                : constant Name_Id := N + 273;\n-   Name_Dynamic                        : constant Name_Id := N + 274;\n-   Name_Entity                         : constant Name_Id := N + 275;\n-   Name_External_Name                  : constant Name_Id := N + 276;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 277;\n-   Name_Form                           : constant Name_Id := N + 278;\n-   Name_G_Float                        : constant Name_Id := N + 279;\n-   Name_Gcc                            : constant Name_Id := N + 280;\n-   Name_Gnat                           : constant Name_Id := N + 281;\n-   Name_GPL                            : constant Name_Id := N + 282;\n-   Name_IEEE_Float                     : constant Name_Id := N + 283;\n-   Name_Internal                       : constant Name_Id := N + 284;\n-   Name_Link_Name                      : constant Name_Id := N + 285;\n-   Name_Lowercase                      : constant Name_Id := N + 286;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 287;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 288;\n-   Name_Max_Size                       : constant Name_Id := N + 289;\n-   Name_Mechanism                      : constant Name_Id := N + 290;\n-   Name_Mixedcase                      : constant Name_Id := N + 291;\n-   Name_Modified_GPL                   : constant Name_Id := N + 292;\n-   Name_Name                           : constant Name_Id := N + 293;\n-   Name_NCA                            : constant Name_Id := N + 294;\n-   Name_No                             : constant Name_Id := N + 295;\n-   Name_No_Dependence                  : constant Name_Id := N + 296;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 297;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 298;\n-   Name_No_Requeue                     : constant Name_Id := N + 299;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 300;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 301;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 302;\n-   Name_On                             : constant Name_Id := N + 303;\n-   Name_Parameter_Types                : constant Name_Id := N + 304;\n-   Name_Reference                      : constant Name_Id := N + 305;\n-   Name_Restricted                     : constant Name_Id := N + 306;\n-   Name_Result_Mechanism               : constant Name_Id := N + 307;\n-   Name_Result_Type                    : constant Name_Id := N + 308;\n-   Name_Runtime                        : constant Name_Id := N + 309;\n-   Name_SB                             : constant Name_Id := N + 310;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 311;\n-   Name_Section                        : constant Name_Id := N + 312;\n-   Name_Semaphore                      : constant Name_Id := N + 313;\n-   Name_Simple_Barriers                : constant Name_Id := N + 314;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 315;\n-   Name_Static                         : constant Name_Id := N + 316;\n-   Name_Stack_Size                     : constant Name_Id := N + 317;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 318;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 319;\n-   Name_Task_Type                      : constant Name_Id := N + 320;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 321;\n-   Name_Top_Guard                      : constant Name_Id := N + 322;\n-   Name_UBA                            : constant Name_Id := N + 323;\n-   Name_UBS                            : constant Name_Id := N + 324;\n-   Name_UBSB                           : constant Name_Id := N + 325;\n-   Name_Unit_Name                      : constant Name_Id := N + 326;\n-   Name_Unknown                        : constant Name_Id := N + 327;\n-   Name_Unrestricted                   : constant Name_Id := N + 328;\n-   Name_Uppercase                      : constant Name_Id := N + 329;\n-   Name_User                           : constant Name_Id := N + 330;\n-   Name_VAX_Float                      : constant Name_Id := N + 331;\n-   Name_VMS                            : constant Name_Id := N + 332;\n-   Name_Working_Storage                : constant Name_Id := N + 333;\n+   Name_Alias                          : constant Name_Id := N + 265;\n+   Name_As_Is                          : constant Name_Id := N + 266;\n+   Name_Attribute_Name                 : constant Name_Id := N + 267;\n+   Name_Body_File_Name                 : constant Name_Id := N + 268;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 269;\n+   Name_Check                          : constant Name_Id := N + 270;\n+   Name_Casing                         : constant Name_Id := N + 271;\n+   Name_Code                           : constant Name_Id := N + 272;\n+   Name_Component                      : constant Name_Id := N + 273;\n+   Name_Component_Size_4               : constant Name_Id := N + 274;\n+   Name_Copy                           : constant Name_Id := N + 275;\n+   Name_D_Float                        : constant Name_Id := N + 276;\n+   Name_Descriptor                     : constant Name_Id := N + 277;\n+   Name_Dot_Replacement                : constant Name_Id := N + 278;\n+   Name_Dynamic                        : constant Name_Id := N + 279;\n+   Name_Entity                         : constant Name_Id := N + 280;\n+   Name_Entry_Count                    : constant Name_Id := N + 281;\n+   Name_External_Name                  : constant Name_Id := N + 282;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 283;\n+   Name_Form                           : constant Name_Id := N + 284;\n+   Name_G_Float                        : constant Name_Id := N + 285;\n+   Name_Gcc                            : constant Name_Id := N + 286;\n+   Name_Gnat                           : constant Name_Id := N + 287;\n+   Name_GPL                            : constant Name_Id := N + 288;\n+   Name_IEEE_Float                     : constant Name_Id := N + 289;\n+   Name_Ignore                         : constant Name_Id := N + 290;\n+   Name_Info                           : constant Name_Id := N + 291;\n+   Name_Internal                       : constant Name_Id := N + 292;\n+   Name_Link_Name                      : constant Name_Id := N + 293;\n+   Name_Lowercase                      : constant Name_Id := N + 294;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 295;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 296;\n+   Name_Max_Size                       : constant Name_Id := N + 297;\n+   Name_Mechanism                      : constant Name_Id := N + 298;\n+   Name_Message                        : constant Name_Id := N + 299;\n+   Name_Mixedcase                      : constant Name_Id := N + 300;\n+   Name_Modified_GPL                   : constant Name_Id := N + 301;\n+   Name_Name                           : constant Name_Id := N + 302;\n+   Name_NCA                            : constant Name_Id := N + 303;\n+   Name_No                             : constant Name_Id := N + 304;\n+   Name_No_Dependence                  : constant Name_Id := N + 305;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 306;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 307;\n+   Name_No_Requeue                     : constant Name_Id := N + 308;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 309;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 310;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 311;\n+   Name_On                             : constant Name_Id := N + 312;\n+   Name_Parameter_Types                : constant Name_Id := N + 313;\n+   Name_Reference                      : constant Name_Id := N + 314;\n+   Name_Restricted                     : constant Name_Id := N + 315;\n+   Name_Result_Mechanism               : constant Name_Id := N + 316;\n+   Name_Result_Type                    : constant Name_Id := N + 317;\n+   Name_Runtime                        : constant Name_Id := N + 318;\n+   Name_SB                             : constant Name_Id := N + 319;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 320;\n+   Name_Section                        : constant Name_Id := N + 321;\n+   Name_Semaphore                      : constant Name_Id := N + 322;\n+   Name_Simple_Barriers                : constant Name_Id := N + 323;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 324;\n+   Name_State                          : constant Name_Id := N + 325;\n+   Name_Static                         : constant Name_Id := N + 326;\n+   Name_Stack_Size                     : constant Name_Id := N + 327;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 328;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 329;\n+   Name_Task_Type                      : constant Name_Id := N + 330;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 331;\n+   Name_Top_Guard                      : constant Name_Id := N + 332;\n+   Name_UBA                            : constant Name_Id := N + 333;\n+   Name_UBS                            : constant Name_Id := N + 334;\n+   Name_UBSB                           : constant Name_Id := N + 335;\n+   Name_Unit_Name                      : constant Name_Id := N + 336;\n+   Name_Unknown                        : constant Name_Id := N + 337;\n+   Name_Unrestricted                   : constant Name_Id := N + 338;\n+   Name_Uppercase                      : constant Name_Id := N + 339;\n+   Name_User                           : constant Name_Id := N + 340;\n+   Name_VAX_Float                      : constant Name_Id := N + 341;\n+   Name_VMS                            : constant Name_Id := N + 342;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 343;\n+   Name_Working_Storage                : constant Name_Id := N + 344;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -604,403 +615,403 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 334;\n-   Name_Abort_Signal                   : constant Name_Id := N + 334; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 335;\n-   Name_Address                        : constant Name_Id := N + 336;\n-   Name_Address_Size                   : constant Name_Id := N + 337; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 338;\n-   Name_Alignment                      : constant Name_Id := N + 339;\n-   Name_Asm_Input                      : constant Name_Id := N + 340; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 341; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 342; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 343; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 344;\n-   Name_Bit_Position                   : constant Name_Id := N + 345; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 346;\n-   Name_Callable                       : constant Name_Id := N + 347;\n-   Name_Caller                         : constant Name_Id := N + 348;\n-   Name_Code_Address                   : constant Name_Id := N + 349; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 350;\n-   Name_Compose                        : constant Name_Id := N + 351;\n-   Name_Constrained                    : constant Name_Id := N + 352;\n-   Name_Count                          : constant Name_Id := N + 353;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 354; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 355;\n-   Name_Delta                          : constant Name_Id := N + 356;\n-   Name_Denorm                         : constant Name_Id := N + 357;\n-   Name_Digits                         : constant Name_Id := N + 358;\n-   Name_Elaborated                     : constant Name_Id := N + 359; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 360; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 361; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 362; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 363;\n-   Name_External_Tag                   : constant Name_Id := N + 364;\n-   Name_First                          : constant Name_Id := N + 365;\n-   Name_First_Bit                      : constant Name_Id := N + 366;\n-   Name_Fixed_Value                    : constant Name_Id := N + 367; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 368;\n-   Name_Has_Access_Values              : constant Name_Id := N + 369; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 370; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 371;\n-   Name_Img                            : constant Name_Id := N + 372; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 373; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 374; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 375;\n-   Name_Last_Bit                       : constant Name_Id := N + 376;\n-   Name_Leading_Part                   : constant Name_Id := N + 377;\n-   Name_Length                         : constant Name_Id := N + 378;\n-   Name_Machine_Emax                   : constant Name_Id := N + 379;\n-   Name_Machine_Emin                   : constant Name_Id := N + 380;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 381;\n-   Name_Machine_Overflows              : constant Name_Id := N + 382;\n-   Name_Machine_Radix                  : constant Name_Id := N + 383;\n-   Name_Machine_Rounds                 : constant Name_Id := N + 384;\n-   Name_Machine_Size                   : constant Name_Id := N + 385; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 386; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 387;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 388; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 389; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 390;\n-   Name_Model_Emin                     : constant Name_Id := N + 391;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 392;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 393;\n-   Name_Model_Small                    : constant Name_Id := N + 394;\n-   Name_Modulus                        : constant Name_Id := N + 395;\n-   Name_Null_Parameter                 : constant Name_Id := N + 396; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 397; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 398;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 399; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 400;\n-   Name_Pos                            : constant Name_Id := N + 401;\n-   Name_Position                       : constant Name_Id := N + 402;\n-   Name_Range                          : constant Name_Id := N + 403;\n-   Name_Range_Length                   : constant Name_Id := N + 404; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 405;\n-   Name_Safe_Emax                      : constant Name_Id := N + 406; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 407;\n-   Name_Safe_Large                     : constant Name_Id := N + 408; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 409;\n-   Name_Safe_Small                     : constant Name_Id := N + 410; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 411;\n-   Name_Scaling                        : constant Name_Id := N + 412;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 413;\n-   Name_Size                           : constant Name_Id := N + 414;\n-   Name_Small                          : constant Name_Id := N + 415;\n-   Name_Storage_Size                   : constant Name_Id := N + 416;\n-   Name_Storage_Unit                   : constant Name_Id := N + 417; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 418; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 419;\n-   Name_Target_Name                    : constant Name_Id := N + 420; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 421;\n-   Name_To_Address                     : constant Name_Id := N + 422; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 423; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 424; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 425;\n-   Name_Unchecked_Access               : constant Name_Id := N + 426;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 427;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 428; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 429; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 430; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 431;\n-   Name_Valid                          : constant Name_Id := N + 432;\n-   Name_Value_Size                     : constant Name_Id := N + 433; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 434;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 435; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 436; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 437;\n-   Name_Width                          : constant Name_Id := N + 438;\n-   Name_Word_Size                      : constant Name_Id := N + 439; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 345;\n+   Name_Abort_Signal                   : constant Name_Id := N + 345; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 346;\n+   Name_Address                        : constant Name_Id := N + 347;\n+   Name_Address_Size                   : constant Name_Id := N + 348; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 349;\n+   Name_Alignment                      : constant Name_Id := N + 350;\n+   Name_Asm_Input                      : constant Name_Id := N + 351; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 352; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 353; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 354; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 355;\n+   Name_Bit_Position                   : constant Name_Id := N + 356; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 357;\n+   Name_Callable                       : constant Name_Id := N + 358;\n+   Name_Caller                         : constant Name_Id := N + 359;\n+   Name_Code_Address                   : constant Name_Id := N + 360; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 361;\n+   Name_Compose                        : constant Name_Id := N + 362;\n+   Name_Constrained                    : constant Name_Id := N + 363;\n+   Name_Count                          : constant Name_Id := N + 364;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 365; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 366;\n+   Name_Delta                          : constant Name_Id := N + 367;\n+   Name_Denorm                         : constant Name_Id := N + 368;\n+   Name_Digits                         : constant Name_Id := N + 369;\n+   Name_Elaborated                     : constant Name_Id := N + 370; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 371; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 372; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 373; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 374;\n+   Name_External_Tag                   : constant Name_Id := N + 375;\n+   Name_First                          : constant Name_Id := N + 376;\n+   Name_First_Bit                      : constant Name_Id := N + 377;\n+   Name_Fixed_Value                    : constant Name_Id := N + 378; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 379;\n+   Name_Has_Access_Values              : constant Name_Id := N + 380; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 381; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 382;\n+   Name_Img                            : constant Name_Id := N + 383; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 384; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 385; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 386;\n+   Name_Last_Bit                       : constant Name_Id := N + 387;\n+   Name_Leading_Part                   : constant Name_Id := N + 388;\n+   Name_Length                         : constant Name_Id := N + 389;\n+   Name_Machine_Emax                   : constant Name_Id := N + 390;\n+   Name_Machine_Emin                   : constant Name_Id := N + 391;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 392;\n+   Name_Machine_Overflows              : constant Name_Id := N + 393;\n+   Name_Machine_Radix                  : constant Name_Id := N + 394;\n+   Name_Machine_Rounds                 : constant Name_Id := N + 395;\n+   Name_Machine_Size                   : constant Name_Id := N + 396; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 397; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 398;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 399; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 400; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 401;\n+   Name_Model_Emin                     : constant Name_Id := N + 402;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 403;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 404;\n+   Name_Model_Small                    : constant Name_Id := N + 405;\n+   Name_Modulus                        : constant Name_Id := N + 406;\n+   Name_Null_Parameter                 : constant Name_Id := N + 407; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 408; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 409;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 410; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 411;\n+   Name_Pos                            : constant Name_Id := N + 412;\n+   Name_Position                       : constant Name_Id := N + 413;\n+   Name_Range                          : constant Name_Id := N + 414;\n+   Name_Range_Length                   : constant Name_Id := N + 415; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 416;\n+   Name_Safe_Emax                      : constant Name_Id := N + 417; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 418;\n+   Name_Safe_Large                     : constant Name_Id := N + 419; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 420;\n+   Name_Safe_Small                     : constant Name_Id := N + 421; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 422;\n+   Name_Scaling                        : constant Name_Id := N + 423;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 424;\n+   Name_Size                           : constant Name_Id := N + 425;\n+   Name_Small                          : constant Name_Id := N + 426;\n+   Name_Storage_Size                   : constant Name_Id := N + 427;\n+   Name_Storage_Unit                   : constant Name_Id := N + 428; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 429; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 430;\n+   Name_Target_Name                    : constant Name_Id := N + 431; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 432;\n+   Name_To_Address                     : constant Name_Id := N + 433; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 434; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 435; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 436;\n+   Name_Unchecked_Access               : constant Name_Id := N + 437;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 438;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 439; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 440; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 441; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 442;\n+   Name_Valid                          : constant Name_Id := N + 443;\n+   Name_Value_Size                     : constant Name_Id := N + 444; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 445;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 446; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 447; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 448;\n+   Name_Width                          : constant Name_Id := N + 449;\n+   Name_Word_Size                      : constant Name_Id := N + 450; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 440;\n-   Name_Adjacent                       : constant Name_Id := N + 440;\n-   Name_Ceiling                        : constant Name_Id := N + 441;\n-   Name_Copy_Sign                      : constant Name_Id := N + 442;\n-   Name_Floor                          : constant Name_Id := N + 443;\n-   Name_Fraction                       : constant Name_Id := N + 444;\n-   Name_Image                          : constant Name_Id := N + 445;\n-   Name_Input                          : constant Name_Id := N + 446;\n-   Name_Machine                        : constant Name_Id := N + 447;\n-   Name_Max                            : constant Name_Id := N + 448;\n-   Name_Min                            : constant Name_Id := N + 449;\n-   Name_Model                          : constant Name_Id := N + 450;\n-   Name_Pred                           : constant Name_Id := N + 451;\n-   Name_Remainder                      : constant Name_Id := N + 452;\n-   Name_Rounding                       : constant Name_Id := N + 453;\n-   Name_Succ                           : constant Name_Id := N + 454;\n-   Name_Truncation                     : constant Name_Id := N + 455;\n-   Name_Value                          : constant Name_Id := N + 456;\n-   Name_Wide_Image                     : constant Name_Id := N + 457;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 458;\n-   Name_Wide_Value                     : constant Name_Id := N + 459;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 460;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 460;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 451;\n+   Name_Adjacent                       : constant Name_Id := N + 451;\n+   Name_Ceiling                        : constant Name_Id := N + 452;\n+   Name_Copy_Sign                      : constant Name_Id := N + 453;\n+   Name_Floor                          : constant Name_Id := N + 454;\n+   Name_Fraction                       : constant Name_Id := N + 455;\n+   Name_Image                          : constant Name_Id := N + 456;\n+   Name_Input                          : constant Name_Id := N + 457;\n+   Name_Machine                        : constant Name_Id := N + 458;\n+   Name_Max                            : constant Name_Id := N + 459;\n+   Name_Min                            : constant Name_Id := N + 460;\n+   Name_Model                          : constant Name_Id := N + 461;\n+   Name_Pred                           : constant Name_Id := N + 462;\n+   Name_Remainder                      : constant Name_Id := N + 463;\n+   Name_Rounding                       : constant Name_Id := N + 464;\n+   Name_Succ                           : constant Name_Id := N + 465;\n+   Name_Truncation                     : constant Name_Id := N + 466;\n+   Name_Value                          : constant Name_Id := N + 467;\n+   Name_Wide_Image                     : constant Name_Id := N + 468;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 469;\n+   Name_Wide_Value                     : constant Name_Id := N + 470;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 471;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 471;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 461;\n-   Name_Output                         : constant Name_Id := N + 461;\n-   Name_Read                           : constant Name_Id := N + 462;\n-   Name_Write                          : constant Name_Id := N + 463;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 463;\n+   First_Procedure_Attribute           : constant Name_Id := N + 472;\n+   Name_Output                         : constant Name_Id := N + 472;\n+   Name_Read                           : constant Name_Id := N + 473;\n+   Name_Write                          : constant Name_Id := N + 474;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 474;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 464;\n-   Name_Elab_Body                      : constant Name_Id := N + 464; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 465; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 466;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 475;\n+   Name_Elab_Body                      : constant Name_Id := N + 475; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 476; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 477;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 467;\n-   Name_Base                           : constant Name_Id := N + 467;\n-   Name_Class                          : constant Name_Id := N + 468;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 468;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 468;\n-   Last_Attribute_Name                 : constant Name_Id := N + 468;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 478;\n+   Name_Base                           : constant Name_Id := N + 478;\n+   Name_Class                          : constant Name_Id := N + 479;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 479;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 479;\n+   Last_Attribute_Name                 : constant Name_Id := N + 479;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 469;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 469;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 470;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 470;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 480;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 480;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 481;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 481;\n \n    --  Names of recognized queuing policy identifiers.\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 471;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 471;\n-   Name_Priority_Queuing               : constant Name_Id := N + 472;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 472;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 482;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 482;\n+   Name_Priority_Queuing               : constant Name_Id := N + 483;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 483;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 473;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 473;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 473;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 484;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 484;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 484;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 474;\n-   Name_Access_Check                   : constant Name_Id := N + 474;\n-   Name_Accessibility_Check            : constant Name_Id := N + 475;\n-   Name_Discriminant_Check             : constant Name_Id := N + 476;\n-   Name_Division_Check                 : constant Name_Id := N + 477;\n-   Name_Elaboration_Check              : constant Name_Id := N + 478;\n-   Name_Index_Check                    : constant Name_Id := N + 479;\n-   Name_Length_Check                   : constant Name_Id := N + 480;\n-   Name_Overflow_Check                 : constant Name_Id := N + 481;\n-   Name_Range_Check                    : constant Name_Id := N + 482;\n-   Name_Storage_Check                  : constant Name_Id := N + 483;\n-   Name_Tag_Check                      : constant Name_Id := N + 484;\n-   Name_All_Checks                     : constant Name_Id := N + 485;\n-   Last_Check_Name                     : constant Name_Id := N + 485;\n+   First_Check_Name                    : constant Name_Id := N + 485;\n+   Name_Access_Check                   : constant Name_Id := N + 485;\n+   Name_Accessibility_Check            : constant Name_Id := N + 486;\n+   Name_Discriminant_Check             : constant Name_Id := N + 487;\n+   Name_Division_Check                 : constant Name_Id := N + 488;\n+   Name_Elaboration_Check              : constant Name_Id := N + 489;\n+   Name_Index_Check                    : constant Name_Id := N + 490;\n+   Name_Length_Check                   : constant Name_Id := N + 491;\n+   Name_Overflow_Check                 : constant Name_Id := N + 492;\n+   Name_Range_Check                    : constant Name_Id := N + 493;\n+   Name_Storage_Check                  : constant Name_Id := N + 494;\n+   Name_Tag_Check                      : constant Name_Id := N + 495;\n+   Name_All_Checks                     : constant Name_Id := N + 496;\n+   Last_Check_Name                     : constant Name_Id := N + 496;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 486;\n-   Name_Abs                            : constant Name_Id := N + 487;\n-   Name_Accept                         : constant Name_Id := N + 488;\n-   Name_And                            : constant Name_Id := N + 489;\n-   Name_All                            : constant Name_Id := N + 490;\n-   Name_Array                          : constant Name_Id := N + 491;\n-   Name_At                             : constant Name_Id := N + 492;\n-   Name_Begin                          : constant Name_Id := N + 493;\n-   Name_Body                           : constant Name_Id := N + 494;\n-   Name_Case                           : constant Name_Id := N + 495;\n-   Name_Constant                       : constant Name_Id := N + 496;\n-   Name_Declare                        : constant Name_Id := N + 497;\n-   Name_Delay                          : constant Name_Id := N + 498;\n-   Name_Do                             : constant Name_Id := N + 499;\n-   Name_Else                           : constant Name_Id := N + 500;\n-   Name_Elsif                          : constant Name_Id := N + 501;\n-   Name_End                            : constant Name_Id := N + 502;\n-   Name_Entry                          : constant Name_Id := N + 503;\n-   Name_Exception                      : constant Name_Id := N + 504;\n-   Name_Exit                           : constant Name_Id := N + 505;\n-   Name_For                            : constant Name_Id := N + 506;\n-   Name_Function                       : constant Name_Id := N + 507;\n-   Name_Generic                        : constant Name_Id := N + 508;\n-   Name_Goto                           : constant Name_Id := N + 509;\n-   Name_If                             : constant Name_Id := N + 510;\n-   Name_In                             : constant Name_Id := N + 511;\n-   Name_Is                             : constant Name_Id := N + 512;\n-   Name_Limited                        : constant Name_Id := N + 513;\n-   Name_Loop                           : constant Name_Id := N + 514;\n-   Name_New                            : constant Name_Id := N + 515;\n-   Name_Not                            : constant Name_Id := N + 516;\n-   Name_Null                           : constant Name_Id := N + 517;\n-   Name_Of                             : constant Name_Id := N + 518;\n-   Name_Or                             : constant Name_Id := N + 519;\n-   Name_Others                         : constant Name_Id := N + 520;\n-   Name_Out                            : constant Name_Id := N + 521;\n-   Name_Package                        : constant Name_Id := N + 522;\n-   Name_Pragma                         : constant Name_Id := N + 523;\n-   Name_Private                        : constant Name_Id := N + 524;\n-   Name_Procedure                      : constant Name_Id := N + 525;\n-   Name_Raise                          : constant Name_Id := N + 526;\n-   Name_Record                         : constant Name_Id := N + 527;\n-   Name_Rem                            : constant Name_Id := N + 528;\n-   Name_Renames                        : constant Name_Id := N + 529;\n-   Name_Return                         : constant Name_Id := N + 530;\n-   Name_Reverse                        : constant Name_Id := N + 531;\n-   Name_Select                         : constant Name_Id := N + 532;\n-   Name_Separate                       : constant Name_Id := N + 533;\n-   Name_Subtype                        : constant Name_Id := N + 534;\n-   Name_Task                           : constant Name_Id := N + 535;\n-   Name_Terminate                      : constant Name_Id := N + 536;\n-   Name_Then                           : constant Name_Id := N + 537;\n-   Name_Type                           : constant Name_Id := N + 538;\n-   Name_Use                            : constant Name_Id := N + 539;\n-   Name_When                           : constant Name_Id := N + 540;\n-   Name_While                          : constant Name_Id := N + 541;\n-   Name_With                           : constant Name_Id := N + 542;\n-   Name_Xor                            : constant Name_Id := N + 543;\n+   Name_Abort                          : constant Name_Id := N + 497;\n+   Name_Abs                            : constant Name_Id := N + 498;\n+   Name_Accept                         : constant Name_Id := N + 499;\n+   Name_And                            : constant Name_Id := N + 500;\n+   Name_All                            : constant Name_Id := N + 501;\n+   Name_Array                          : constant Name_Id := N + 502;\n+   Name_At                             : constant Name_Id := N + 503;\n+   Name_Begin                          : constant Name_Id := N + 504;\n+   Name_Body                           : constant Name_Id := N + 505;\n+   Name_Case                           : constant Name_Id := N + 506;\n+   Name_Constant                       : constant Name_Id := N + 507;\n+   Name_Declare                        : constant Name_Id := N + 508;\n+   Name_Delay                          : constant Name_Id := N + 509;\n+   Name_Do                             : constant Name_Id := N + 510;\n+   Name_Else                           : constant Name_Id := N + 511;\n+   Name_Elsif                          : constant Name_Id := N + 512;\n+   Name_End                            : constant Name_Id := N + 513;\n+   Name_Entry                          : constant Name_Id := N + 514;\n+   Name_Exception                      : constant Name_Id := N + 515;\n+   Name_Exit                           : constant Name_Id := N + 516;\n+   Name_For                            : constant Name_Id := N + 517;\n+   Name_Function                       : constant Name_Id := N + 518;\n+   Name_Generic                        : constant Name_Id := N + 519;\n+   Name_Goto                           : constant Name_Id := N + 520;\n+   Name_If                             : constant Name_Id := N + 521;\n+   Name_In                             : constant Name_Id := N + 522;\n+   Name_Is                             : constant Name_Id := N + 523;\n+   Name_Limited                        : constant Name_Id := N + 524;\n+   Name_Loop                           : constant Name_Id := N + 525;\n+   Name_New                            : constant Name_Id := N + 526;\n+   Name_Not                            : constant Name_Id := N + 527;\n+   Name_Null                           : constant Name_Id := N + 528;\n+   Name_Of                             : constant Name_Id := N + 529;\n+   Name_Or                             : constant Name_Id := N + 530;\n+   Name_Others                         : constant Name_Id := N + 531;\n+   Name_Out                            : constant Name_Id := N + 532;\n+   Name_Package                        : constant Name_Id := N + 533;\n+   Name_Pragma                         : constant Name_Id := N + 534;\n+   Name_Private                        : constant Name_Id := N + 535;\n+   Name_Procedure                      : constant Name_Id := N + 536;\n+   Name_Raise                          : constant Name_Id := N + 537;\n+   Name_Record                         : constant Name_Id := N + 538;\n+   Name_Rem                            : constant Name_Id := N + 539;\n+   Name_Renames                        : constant Name_Id := N + 540;\n+   Name_Return                         : constant Name_Id := N + 541;\n+   Name_Reverse                        : constant Name_Id := N + 542;\n+   Name_Select                         : constant Name_Id := N + 543;\n+   Name_Separate                       : constant Name_Id := N + 544;\n+   Name_Subtype                        : constant Name_Id := N + 545;\n+   Name_Task                           : constant Name_Id := N + 546;\n+   Name_Terminate                      : constant Name_Id := N + 547;\n+   Name_Then                           : constant Name_Id := N + 548;\n+   Name_Type                           : constant Name_Id := N + 549;\n+   Name_Use                            : constant Name_Id := N + 550;\n+   Name_When                           : constant Name_Id := N + 551;\n+   Name_While                          : constant Name_Id := N + 552;\n+   Name_With                           : constant Name_Id := N + 553;\n+   Name_Xor                            : constant Name_Id := N + 554;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 544;\n-   Name_Divide                          : constant Name_Id := N + 544;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 545;\n-   Name_Exception_Information           : constant Name_Id := N + 546;\n-   Name_Exception_Message               : constant Name_Id := N + 547;\n-   Name_Exception_Name                  : constant Name_Id := N + 548;\n-   Name_File                            : constant Name_Id := N + 549;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 550;\n-   Name_Import_Address                  : constant Name_Id := N + 551;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 552;\n-   Name_Import_Value                    : constant Name_Id := N + 553;\n-   Name_Is_Negative                     : constant Name_Id := N + 554;\n-   Name_Line                            : constant Name_Id := N + 555;\n-   Name_Rotate_Left                     : constant Name_Id := N + 556;\n-   Name_Rotate_Right                    : constant Name_Id := N + 557;\n-   Name_Shift_Left                      : constant Name_Id := N + 558;\n-   Name_Shift_Right                     : constant Name_Id := N + 559;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 560;\n-   Name_Source_Location                 : constant Name_Id := N + 561;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 562;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 563;\n-   Name_To_Pointer                      : constant Name_Id := N + 564;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 564;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 555;\n+   Name_Divide                          : constant Name_Id := N + 555;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 556;\n+   Name_Exception_Information           : constant Name_Id := N + 557;\n+   Name_Exception_Message               : constant Name_Id := N + 558;\n+   Name_Exception_Name                  : constant Name_Id := N + 559;\n+   Name_File                            : constant Name_Id := N + 560;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 561;\n+   Name_Import_Address                  : constant Name_Id := N + 562;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 563;\n+   Name_Import_Value                    : constant Name_Id := N + 564;\n+   Name_Is_Negative                     : constant Name_Id := N + 565;\n+   Name_Line                            : constant Name_Id := N + 566;\n+   Name_Rotate_Left                     : constant Name_Id := N + 567;\n+   Name_Rotate_Right                    : constant Name_Id := N + 568;\n+   Name_Shift_Left                      : constant Name_Id := N + 569;\n+   Name_Shift_Right                     : constant Name_Id := N + 570;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 571;\n+   Name_Source_Location                 : constant Name_Id := N + 572;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 573;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 574;\n+   Name_To_Pointer                      : constant Name_Id := N + 575;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 575;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 565;\n-   Name_Abstract                       : constant Name_Id := N + 565;\n-   Name_Aliased                        : constant Name_Id := N + 566;\n-   Name_Protected                      : constant Name_Id := N + 567;\n-   Name_Until                          : constant Name_Id := N + 568;\n-   Name_Requeue                        : constant Name_Id := N + 569;\n-   Name_Tagged                         : constant Name_Id := N + 570;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 570;\n+   First_95_Reserved_Word              : constant Name_Id := N + 576;\n+   Name_Abstract                       : constant Name_Id := N + 576;\n+   Name_Aliased                        : constant Name_Id := N + 577;\n+   Name_Protected                      : constant Name_Id := N + 578;\n+   Name_Until                          : constant Name_Id := N + 579;\n+   Name_Requeue                        : constant Name_Id := N + 580;\n+   Name_Tagged                         : constant Name_Id := N + 581;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 581;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 571;\n+   Name_Raise_Exception                : constant Name_Id := N + 582;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 572;\n-   Name_Binder                         : constant Name_Id := N + 573;\n-   Name_Binder_Driver                  : constant Name_Id := N + 574;\n-   Name_Body_Suffix                    : constant Name_Id := N + 575;\n-   Name_Builder                        : constant Name_Id := N + 576;\n-   Name_Compiler                       : constant Name_Id := N + 577;\n-   Name_Compiler_Driver                : constant Name_Id := N + 578;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 579;\n-   Name_Compute_Dependency             : constant Name_Id := N + 580;\n-   Name_Cross_Reference                : constant Name_Id := N + 581;\n-   Name_Default_Linker                 : constant Name_Id := N + 582;\n-   Name_Default_Switches               : constant Name_Id := N + 583;\n-   Name_Dependency_Option              : constant Name_Id := N + 584;\n-   Name_Exec_Dir                       : constant Name_Id := N + 585;\n-   Name_Executable                     : constant Name_Id := N + 586;\n-   Name_Executable_Suffix              : constant Name_Id := N + 587;\n-   Name_Extends                        : constant Name_Id := N + 588;\n-   Name_Externally_Built               : constant Name_Id := N + 589;\n-   Name_Finder                         : constant Name_Id := N + 590;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 591;\n-   Name_Gnatls                         : constant Name_Id := N + 592;\n-   Name_Gnatstub                       : constant Name_Id := N + 593;\n-   Name_Implementation                 : constant Name_Id := N + 594;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 595;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 596;\n-   Name_Include_Option                 : constant Name_Id := N + 597;\n-   Name_Language_Processing            : constant Name_Id := N + 598;\n-   Name_Languages                      : constant Name_Id := N + 599;\n-   Name_Library_Dir                    : constant Name_Id := N + 600;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 601;\n-   Name_Library_GCC                    : constant Name_Id := N + 602;\n-   Name_Library_Interface              : constant Name_Id := N + 603;\n-   Name_Library_Kind                   : constant Name_Id := N + 604;\n-   Name_Library_Name                   : constant Name_Id := N + 605;\n-   Name_Library_Options                : constant Name_Id := N + 606;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 607;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 608;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 609;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 610;\n-   Name_Library_Version                : constant Name_Id := N + 611;\n-   Name_Linker                         : constant Name_Id := N + 612;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 613;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 614;\n-   Name_Metrics                        : constant Name_Id := N + 615;\n-   Name_Naming                         : constant Name_Id := N + 616;\n-   Name_Object_Dir                     : constant Name_Id := N + 617;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 618;\n-   Name_Project                        : constant Name_Id := N + 619;\n-   Name_Separate_Suffix                : constant Name_Id := N + 620;\n-   Name_Source_Dirs                    : constant Name_Id := N + 621;\n-   Name_Source_Files                   : constant Name_Id := N + 622;\n-   Name_Source_List_File               : constant Name_Id := N + 623;\n-   Name_Spec                           : constant Name_Id := N + 624;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 625;\n-   Name_Specification                  : constant Name_Id := N + 626;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 627;\n-   Name_Specification_Suffix           : constant Name_Id := N + 628;\n-   Name_Switches                       : constant Name_Id := N + 629;\n+   Name_Ada_Roots                      : constant Name_Id := N + 583;\n+   Name_Binder                         : constant Name_Id := N + 584;\n+   Name_Binder_Driver                  : constant Name_Id := N + 585;\n+   Name_Body_Suffix                    : constant Name_Id := N + 586;\n+   Name_Builder                        : constant Name_Id := N + 587;\n+   Name_Compiler                       : constant Name_Id := N + 588;\n+   Name_Compiler_Driver                : constant Name_Id := N + 589;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 590;\n+   Name_Compute_Dependency             : constant Name_Id := N + 591;\n+   Name_Cross_Reference                : constant Name_Id := N + 592;\n+   Name_Default_Linker                 : constant Name_Id := N + 593;\n+   Name_Default_Switches               : constant Name_Id := N + 594;\n+   Name_Dependency_Option              : constant Name_Id := N + 595;\n+   Name_Exec_Dir                       : constant Name_Id := N + 596;\n+   Name_Executable                     : constant Name_Id := N + 597;\n+   Name_Executable_Suffix              : constant Name_Id := N + 598;\n+   Name_Extends                        : constant Name_Id := N + 599;\n+   Name_Externally_Built               : constant Name_Id := N + 600;\n+   Name_Finder                         : constant Name_Id := N + 601;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 602;\n+   Name_Gnatls                         : constant Name_Id := N + 603;\n+   Name_Gnatstub                       : constant Name_Id := N + 604;\n+   Name_Implementation                 : constant Name_Id := N + 605;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 606;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 607;\n+   Name_Include_Option                 : constant Name_Id := N + 608;\n+   Name_Language_Processing            : constant Name_Id := N + 609;\n+   Name_Languages                      : constant Name_Id := N + 610;\n+   Name_Library_Dir                    : constant Name_Id := N + 611;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 612;\n+   Name_Library_GCC                    : constant Name_Id := N + 613;\n+   Name_Library_Interface              : constant Name_Id := N + 614;\n+   Name_Library_Kind                   : constant Name_Id := N + 615;\n+   Name_Library_Name                   : constant Name_Id := N + 616;\n+   Name_Library_Options                : constant Name_Id := N + 617;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 618;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 619;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 620;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 621;\n+   Name_Library_Version                : constant Name_Id := N + 622;\n+   Name_Linker                         : constant Name_Id := N + 623;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 624;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 625;\n+   Name_Metrics                        : constant Name_Id := N + 626;\n+   Name_Naming                         : constant Name_Id := N + 627;\n+   Name_Object_Dir                     : constant Name_Id := N + 628;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 629;\n+   Name_Project                        : constant Name_Id := N + 630;\n+   Name_Separate_Suffix                : constant Name_Id := N + 631;\n+   Name_Source_Dirs                    : constant Name_Id := N + 632;\n+   Name_Source_Files                   : constant Name_Id := N + 633;\n+   Name_Source_List_File               : constant Name_Id := N + 634;\n+   Name_Spec                           : constant Name_Id := N + 635;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 636;\n+   Name_Specification                  : constant Name_Id := N + 637;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 638;\n+   Name_Specification_Suffix           : constant Name_Id := N + 639;\n+   Name_Switches                       : constant Name_Id := N + 640;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 630;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 641;\n \n    --  ----------------------------------------------------------------\n-   First_2005_Reserved_Word            : constant Name_Id := N + 631;\n-   Name_Interface                      : constant Name_Id := N + 631;\n-   Name_Overriding                     : constant Name_Id := N + 632;\n-   Name_Synchronized                   : constant Name_Id := N + 633;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 633;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 642;\n+   Name_Interface                      : constant Name_Id := N + 642;\n+   Name_Overriding                     : constant Name_Id := N + 643;\n+   Name_Synchronized                   : constant Name_Id := N + 644;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 644;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 633;\n+   Last_Predefined_Name                : constant Name_Id := N + 644;\n \n    subtype Any_Operator_Name is Name_Id range\n      First_Operator_Name .. Last_Operator_Name;\n@@ -1212,6 +1223,7 @@ package Snames is\n       Pragma_Ada_83,\n       Pragma_Ada_95,\n       Pragma_Ada_05,\n+      Pragma_Assertion_Policy,\n       Pragma_C_Pass_By_Copy,\n       Pragma_Compile_Time_Warning,\n       Pragma_Component_Alignment,\n@@ -1234,8 +1246,7 @@ package Snames is\n       Pragma_No_Strict_Aliasing,\n       Pragma_Normalize_Scalars,\n       Pragma_Polling,\n-      Pragma_Persistent_Data,\n-      Pragma_Persistent_Object,\n+      Pragma_Persistent_BSS,\n       Pragma_Profile,\n       Pragma_Profile_Warnings,\n       Pragma_Propagate_Exceptions,\n@@ -1323,9 +1334,11 @@ package Snames is\n       Pragma_Page,\n       Pragma_Passive,\n       Pragma_Preelaborate,\n+      Pragma_Preelaborate_05,\n       Pragma_Priority,\n       Pragma_Psect_Object,\n       Pragma_Pure,\n+      Pragma_Pure_05,\n       Pragma_Pure_Function,\n       Pragma_Remote_Call_Interface,\n       Pragma_Remote_Types,"}, {"sha": "7b62805bf108aef0fc0f0c45425ee6cc43e0ea65", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 202, "deletions": 212, "changes": 414, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -25,7 +25,7 @@\n  ****************************************************************************/\n \n /* This is the C file that corresponds to the Ada package specification\n-   Snames. It was created manually from the file snames.ads. */\n+   Snames. It was created automatically from the file snames.ads. */\n \n /* Name_Id values */\n \n@@ -45,16 +45,16 @@ extern unsigned char Get_Attribute_Id (int);\n \n /* Define the numeric values for attributes.  */\n \n-#define  Attr_Abort_Signal                   0\n-#define  Attr_Access                         1\n-#define  Attr_Address                        2\n-#define  Attr_Address_Size                   3\n-#define  Attr_Aft                            4\n-#define  Attr_Alignment                      5\n-#define  Attr_Asm_Input                      6\n-#define  Attr_Asm_Output                     7\n-#define  Attr_AST_Entry                      8\n-#define  Attr_Bit                            9\n+#define  Attr_Abort_Signal                  0\n+#define  Attr_Access                        1\n+#define  Attr_Address                       2\n+#define  Attr_Address_Size                  3\n+#define  Attr_Aft                           4\n+#define  Attr_Alignment                     5\n+#define  Attr_Asm_Input                     6\n+#define  Attr_Asm_Output                    7\n+#define  Attr_AST_Entry                     8\n+#define  Attr_Bit                           9\n #define  Attr_Bit_Order                     10\n #define  Attr_Bit_Position                  11\n #define  Attr_Body_Version                  12\n@@ -145,45 +145,56 @@ extern unsigned char Get_Attribute_Id (int);\n #define  Attr_Val                           97\n #define  Attr_Valid                         98\n #define  Attr_Value_Size                    99\n-#define  Attr_Version                      100\n-#define  Attr_Wchar_T_Size                 101\n-#define  Attr_Wide_Wide_Width              102\n-#define  Attr_Wide_Width                   103\n-#define  Attr_Width                        104\n-#define  Attr_Word_Size                    105\n+#define  Attr_Version                       100\n+#define  Attr_Wchar_T_Size                  101\n+#define  Attr_Wide_Wide_Width               102\n+#define  Attr_Wide_Width                    103\n+#define  Attr_Width                         104\n+#define  Attr_Word_Size                     105\n+#define  Attr_Adjacent                      106\n+#define  Attr_Ceiling                       107\n+#define  Attr_Copy_Sign                     108\n+#define  Attr_Floor                         109\n+#define  Attr_Fraction                      110\n+#define  Attr_Image                         111\n+#define  Attr_Input                         112\n+#define  Attr_Machine                       113\n+#define  Attr_Max                           114\n+#define  Attr_Min                           115\n+#define  Attr_Model                         116\n+#define  Attr_Pred                          117\n+#define  Attr_Remainder                     118\n+#define  Attr_Rounding                      119\n+#define  Attr_Succ                          120\n+#define  Attr_Truncation                    121\n+#define  Attr_Value                         122\n+#define  Attr_Wide_Image                    123\n+#define  Attr_Wide_Wide_Image               124\n+#define  Attr_Wide_Value                    125\n+#define  Attr_Wide_Wide_Value               126\n+#define  Attr_Output                        127\n+#define  Attr_Read                          128\n+#define  Attr_Write                         129\n+#define  Attr_Elab_Body                     130\n+#define  Attr_Elab_Spec                     131\n+#define  Attr_Storage_Pool                  132\n+#define  Attr_Base                          133\n+#define  Attr_Class                         134\n \n-#define  Attr_Adjacent                     106\n-#define  Attr_Ceiling                      107\n-#define  Attr_Copy_Sign                    108\n-#define  Attr_Floor                        109\n-#define  Attr_Fraction                     110\n-#define  Attr_Image                        111\n-#define  Attr_Input                        112\n-#define  Attr_Machine                      113\n-#define  Attr_Max                          114\n-#define  Attr_Min                          115\n-#define  Attr_Model                        116\n-#define  Attr_Pred                         117\n-#define  Attr_Remainder                    118\n-#define  Attr_Rounding                     119\n-#define  Attr_Succ                         120\n-#define  Attr_Truncation                   121\n-#define  Attr_Value                        122\n-#define  Attr_Wide_Image                   123\n-#define  Attr_Wide_Wide_Image              124\n-#define  Attr_Wide_Value                   125\n-#define  Attr_Wide_Wide_Value              126\n-\n-#define  Attr_Output                       127\n-#define  Attr_Read                         128\n-#define  Attr_Write                        129\n-\n-#define  Attr_Elab_Body                    130\n-#define  Attr_Elab_Spec                    131\n-#define  Attr_Storage_Pool                 132\n+/* Define the numeric values for the conventions.  */\n \n-#define  Attr_Base                         133\n-#define  Attr_Class                        134\n+#define  Convention_Ada                           0\n+#define  Convention_Intrinsic                     1\n+#define  Convention_Entry                         2\n+#define  Convention_Protected                     3\n+#define  Convention_Assembler                     4\n+#define  Convention_C                             5\n+#define  Convention_COBOL                         6\n+#define  Convention_CPP                           7\n+#define  Convention_Fortran                       8\n+#define  Convention_Java                          9\n+#define  Convention_Stdcall                       10\n+#define  Convention_Stubbed                       11\n \n /* Define the function to check if a Name_Id value is a valid pragma */\n \n@@ -200,172 +211,151 @@ extern unsigned char Get_Pragma_Id (int);\n \n /* Define the numeric values for the pragmas. */\n \n-/* Configuration pragmas first */\n-\n #define  Pragma_Ada_83                        0\n #define  Pragma_Ada_95                        1\n #define  Pragma_Ada_05                        2\n-#define  Pragma_C_Pass_By_Copy                3\n-#define  Pragma_Compile_Time_Warning          4\n-#define  Pragma_Component_Alignment           5\n-#define  Pragma_Convention_Identifier         6\n-#define  Pragma_Detect_Blocking               7\n-#define  Pragma_Discard_Names                 8\n-#define  Pragma_Elaboration_Checking          9\n-#define  Pragma_Eliminate                    10\n-#define  Pragma_Explicit_Overriding          11\n-#define  Pragma_Extend_System                12\n-#define  Pragma_Extensions_Allowed           13\n-#define  Pragma_External_Name_Casing         14\n-#define  Pragma_Float_Representation         15\n-#define  Pragma_Initialize_Scalars           16\n-#define  Pragma_Interrupt_State              17\n-#define  Pragma_License                      18\n-#define  Pragma_Locking_Policy               19\n-#define  Pragma_Long_Float                   20\n-#define  Pragma_No_Run_Time                  21\n-#define  Pragma_No_Strict_Aliasing           22\n-#define  Pragma_Normalize_Scalars            23\n-#define  Pragma_Polling                      24\n-#define  Pragma_Persistent_Data              25\n-#define  Pragma_Persistent_Object            26\n-#define  Pragma_Profile                      27\n-#define  Pragma_Profile_Warnings             28\n-#define  Pragma_Propagate_Exceptions         29\n-#define  Pragma_Queuing_Policy               30\n-#define  Pragma_Ravenscar                    31\n-#define  Pragma_Restricted_Run_Time          32\n-#define  Pragma_Restrictions                 33\n-#define  Pragma_Restriction_Warnings         34\n-#define  Pragma_Reviewable                   35\n-#define  Pragma_Source_File_Name             36\n-#define  Pragma_Source_File_Name_Project     37\n-#define  Pragma_Style_Checks                 38\n-#define  Pragma_Suppress                     39\n-#define  Pragma_Suppress_Exception_Locations 40\n-#define  Pragma_Task_Dispatching_Policy      41\n-#define  Pragma_Universal_Data               42\n-#define  Pragma_Unsuppress                   43\n-#define  Pragma_Use_VADS_Size                44\n-#define  Pragma_Validity_Checks              45\n-#define  Pragma_Warnings                     46\n-\n-/* Remaining pragmas */\n-\n-#define  Pragma_Abort_Defer                  47\n-#define  Pragma_All_Calls_Remote             48\n-#define  Pragma_Annotate                     49\n-#define  Pragma_Assert                       50\n-#define  Pragma_Asynchronous                 51\n-#define  Pragma_Atomic                       52\n-#define  Pragma_Atomic_Components            53\n-#define  Pragma_Attach_Handler               54\n-#define  Pragma_Comment                      55\n-#define  Pragma_Common_Object                56\n-#define  Pragma_Complex_Representation       57\n-#define  Pragma_Controlled                   58\n-#define  Pragma_Convention                   59\n-#define  Pragma_CPP_Class                    60\n-#define  Pragma_CPP_Constructor              61\n-#define  Pragma_CPP_Virtual                  62\n-#define  Pragma_CPP_Vtable                   63\n-#define  Pragma_Debug                        64\n-#define  Pragma_Elaborate                    65\n-#define  Pragma_Elaborate_All                66\n-#define  Pragma_Elaborate_Body               67\n-#define  Pragma_Export                       68\n-#define  Pragma_Export_Exception             69\n-#define  Pragma_Export_Function              70\n-#define  Pragma_Export_Object                71\n-#define  Pragma_Export_Procedure             72\n-#define  Pragma_Export_Value                 73\n-#define  Pragma_Export_Valued_Procedure      74\n-#define  Pragma_External                     75\n-#define  Pragma_Finalize_Storage_Only        76\n-#define  Pragma_Ident                        77\n-#define  Pragma_Import                       78\n-#define  Pragma_Import_Exception             79\n-#define  Pragma_Import_Function              80\n-#define  Pragma_Import_Object                81\n-#define  Pragma_Import_Procedure             82\n-#define  Pragma_Import_Valued_Procedure      83\n-#define  Pragma_Inline                       84\n-#define  Pragma_Inline_Always                85\n-#define  Pragma_Inline_Generic               86\n-#define  Pragma_Inspection_Point             87\n-#define  Pragma_Interface_Name               88\n-#define  Pragma_Interrupt_Handler            89\n-#define  Pragma_Interrupt_Priority           90\n-#define  Pragma_Java_Constructor             91\n-#define  Pragma_Java_Interface               92\n-#define  Pragma_Keep_Names                   93\n-#define  Pragma_Link_With                    94\n-#define  Pragma_Linker_Alias                 95\n-#define  Pragma_Linker_Options               96\n-#define  Pragma_Linker_Section               97\n-#define  Pragma_List                         98\n-#define  Pragma_Machine_Attribute            99\n-#define  Pragma_Main                        100\n-#define  Pragma_Main_Storage                101\n-#define  Pragma_Memory_Size                 102\n-#define  Pragma_No_Return                   103\n-#define  Pragma_Obsolescent                 104\n-#define  Pragma_Optimize                    105\n-#define  Pragma_Optional_Overriding         106\n-#define  Pragma_Pack                        107\n-#define  Pragma_Page                        108\n-#define  Pragma_Passive                     109\n-#define  Pragma_Preelaborate                110\n-#define  Pragma_Priority                    111\n-#define  Pragma_Psect_Object                112\n-#define  Pragma_Pure                        113\n-#define  Pragma_Pure_Function               114\n-#define  Pragma_Remote_Call_Interface       115\n-#define  Pragma_Remote_Types                116\n-#define  Pragma_Share_Generic               117\n-#define  Pragma_Shared                      118\n-#define  Pragma_Shared_Passive              119\n-#define  Pragma_Source_Reference            120\n-#define  Pragma_Stream_Convert              121\n-#define  Pragma_Subtitle                    122\n-#define  Pragma_Suppress_All                123\n-#define  Pragma_Suppress_Debug_Info         124\n-#define  Pragma_Suppress_Initialization     125\n-#define  Pragma_System_Name                 126\n-#define  Pragma_Task_Info                   127\n-#define  Pragma_Task_Name                   128\n-#define  Pragma_Task_Storage                129\n-#define  Pragma_Thread_Body                 130\n-#define  Pragma_Time_Slice                  131\n-#define  Pragma_Title                       132\n-#define  Pragma_Unchecked_Union             133\n-#define  Pragma_Unimplemented_Unit          134\n-#define  Pragma_Unreferenced                135\n-#define  Pragma_Unreserve_All_Interrupts    136\n-#define  Pragma_Volatile                    137\n-#define  Pragma_Volatile_Components         138\n-#define  Pragma_Weak_External               139\n-\n-/* The following are deliberately out of alphabetical order, see Snames */\n-\n-#define  Pragma_AST_Entry                   140\n-#define  Pragma_Interface                   141\n-#define  Pragma_Storage_Size                142\n-#define  Pragma_Storage_Unit                143\n-\n-/* Define the numeric values for the conventions.  */\n-\n-#define  Convention_Ada                      0\n-#define  Convention_Intrinsic                1\n-#define  Convention_Entry                    2\n-#define  Convention_Protected                3\n-#define  Convention_Assembler                4\n-#define  Convention_C                        5\n-#define  Convention_COBOL                    6\n-#define  Convention_CPP                      7\n-#define  Convention_Fortran                  8\n-#define  Convention_Java                     9\n-#define  Convention_Stdcall                 10\n-#define  Convention_Stubbed                 11\n+#define  Pragma_Assertion_Policy              3\n+#define  Pragma_C_Pass_By_Copy                4\n+#define  Pragma_Compile_Time_Warning          5\n+#define  Pragma_Component_Alignment           6\n+#define  Pragma_Convention_Identifier         7\n+#define  Pragma_Detect_Blocking               8\n+#define  Pragma_Discard_Names                 9\n+#define  Pragma_Elaboration_Checks            10\n+#define  Pragma_Eliminate                     11\n+#define  Pragma_Explicit_Overriding           12\n+#define  Pragma_Extend_System                 13\n+#define  Pragma_Extensions_Allowed            14\n+#define  Pragma_External_Name_Casing          15\n+#define  Pragma_Float_Representation          16\n+#define  Pragma_Initialize_Scalars            17\n+#define  Pragma_Interrupt_State               18\n+#define  Pragma_License                       19\n+#define  Pragma_Locking_Policy                20\n+#define  Pragma_Long_Float                    21\n+#define  Pragma_No_Run_Time                   22\n+#define  Pragma_No_Strict_Aliasing            23\n+#define  Pragma_Normalize_Scalars             24\n+#define  Pragma_Polling                       25\n+#define  Pragma_Persistent_BSS                26\n+#define  Pragma_Profile                       27\n+#define  Pragma_Profile_Warnings              28\n+#define  Pragma_Propagate_Exceptions          29\n+#define  Pragma_Queuing_Policy                30\n+#define  Pragma_Ravenscar                     31\n+#define  Pragma_Restricted_Run_Time           32\n+#define  Pragma_Restrictions                  33\n+#define  Pragma_Restriction_Warnings          34\n+#define  Pragma_Reviewable                    35\n+#define  Pragma_Source_File_Name              36\n+#define  Pragma_Source_File_Name_Project      37\n+#define  Pragma_Style_Checks                  38\n+#define  Pragma_Suppress                      39\n+#define  Pragma_Suppress_Exception_Locations  40\n+#define  Pragma_Task_Dispatching_Policy       41\n+#define  Pragma_Universal_Data                42\n+#define  Pragma_Unsuppress                    43\n+#define  Pragma_Use_VADS_Size                 44\n+#define  Pragma_Validity_Checks               45\n+#define  Pragma_Warnings                      46\n+#define  Pragma_Abort_Defer                   47\n+#define  Pragma_All_Calls_Remote              48\n+#define  Pragma_Annotate                      49\n+#define  Pragma_Assert                        50\n+#define  Pragma_Asynchronous                  51\n+#define  Pragma_Atomic                        52\n+#define  Pragma_Atomic_Components             53\n+#define  Pragma_Attach_Handler                54\n+#define  Pragma_Comment                       55\n+#define  Pragma_Common_Object                 56\n+#define  Pragma_Complex_Representation        57\n+#define  Pragma_Controlled                    58\n+#define  Pragma_Convention                    59\n+#define  Pragma_CPP_Class                     60\n+#define  Pragma_CPP_Constructor               61\n+#define  Pragma_CPP_Virtual                   62\n+#define  Pragma_CPP_Vtable                    63\n+#define  Pragma_Debug                         64\n+#define  Pragma_Elaborate                     65\n+#define  Pragma_Elaborate_All                 66\n+#define  Pragma_Elaborate_Body                67\n+#define  Pragma_Export                        68\n+#define  Pragma_Export_Exception              69\n+#define  Pragma_Export_Function               70\n+#define  Pragma_Export_Object                 71\n+#define  Pragma_Export_Procedure              72\n+#define  Pragma_Export_Value                  73\n+#define  Pragma_Export_Valued_Procedure       74\n+#define  Pragma_External                      75\n+#define  Pragma_Finalize_Storage_Only         76\n+#define  Pragma_Ident                         77\n+#define  Pragma_Import                        78\n+#define  Pragma_Import_Exception              79\n+#define  Pragma_Import_Function               80\n+#define  Pragma_Import_Object                 81\n+#define  Pragma_Import_Procedure              82\n+#define  Pragma_Import_Valued_Procedure       83\n+#define  Pragma_Inline                        84\n+#define  Pragma_Inline_Always                 85\n+#define  Pragma_Inline_Generic                86\n+#define  Pragma_Inspection_Point              87\n+#define  Pragma_Interface_Name                88\n+#define  Pragma_Interrupt_Handler             89\n+#define  Pragma_Interrupt_Priority            90\n+#define  Pragma_Java_Constructor              91\n+#define  Pragma_Java_Interface                92\n+#define  Pragma_Keep_Names                    93\n+#define  Pragma_Link_With                     94\n+#define  Pragma_Linker_Alias                  95\n+#define  Pragma_Linker_Options                96\n+#define  Pragma_Linker_Section                97\n+#define  Pragma_List                          98\n+#define  Pragma_Machine_Attribute             99\n+#define  Pragma_Main                          100\n+#define  Pragma_Main_Storage                  101\n+#define  Pragma_Memory_Size                   102\n+#define  Pragma_No_Return                     103\n+#define  Pragma_Obsolescent                   104\n+#define  Pragma_Optimize                      105\n+#define  Pragma_Optional_Overriding           106\n+#define  Pragma_Pack                          107\n+#define  Pragma_Page                          108\n+#define  Pragma_Passive                       109\n+#define  Pragma_Preelaborate                  110\n+#define  Pragma_Preelaborate_05               111\n+#define  Pragma_Priority                      112\n+#define  Pragma_Psect_Object                  113\n+#define  Pragma_Pure                          114\n+#define  Pragma_Pure_05                       115\n+#define  Pragma_Pure_Function                 116\n+#define  Pragma_Remote_Call_Interface         117\n+#define  Pragma_Remote_Types                  118\n+#define  Pragma_Share_Generic                 119\n+#define  Pragma_Shared                        120\n+#define  Pragma_Shared_Passive                121\n+#define  Pragma_Source_Reference              122\n+#define  Pragma_Stream_Convert                123\n+#define  Pragma_Subtitle                      124\n+#define  Pragma_Suppress_All                  125\n+#define  Pragma_Suppress_Debug_Info           126\n+#define  Pragma_Suppress_Initialization       127\n+#define  Pragma_System_Name                   128\n+#define  Pragma_Task_Info                     129\n+#define  Pragma_Task_Name                     130\n+#define  Pragma_Task_Storage                  131\n+#define  Pragma_Thread_Body                   132\n+#define  Pragma_Time_Slice                    133\n+#define  Pragma_Title                         134\n+#define  Pragma_Unchecked_Union               135\n+#define  Pragma_Unimplemented_Unit            136\n+#define  Pragma_Unreferenced                  137\n+#define  Pragma_Unreserve_All_Interrupts      138\n+#define  Pragma_Volatile                      139\n+#define  Pragma_Volatile_Components           140\n+#define  Pragma_Weak_External                 141\n+#define  Pragma_AST_Entry                     142\n+#define  Pragma_Interface                     143\n+#define  Pragma_Storage_Size                  144\n+#define  Pragma_Storage_Unit                  145\n \n /* End of snames.h (C version of Snames package spec) */"}, {"sha": "b3afd564db5ccbb001c8f3789f59fc87f69235f5", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -256,6 +256,37 @@ package body Tbuild is\n       return Make_Integer_Literal (Loc, UI_From_Int (Intval));\n    end Make_Integer_Literal;\n \n+   --------------------------------\n+   -- Make_Linker_Section_Pragma --\n+   --------------------------------\n+\n+   function Make_Linker_Section_Pragma\n+     (Ent : Entity_Id;\n+      Loc : Source_Ptr;\n+      Sec : String) return Node_Id\n+   is\n+      LS : Node_Id;\n+\n+   begin\n+      LS :=\n+        Make_Pragma\n+          (Loc,\n+           Name_Linker_Section,\n+           New_List\n+             (Make_Pragma_Argument_Association\n+                (Sloc => Loc,\n+                 Expression => New_Occurrence_Of (Ent, Loc)),\n+              Make_Pragma_Argument_Association\n+                (Sloc => Loc,\n+                 Expression =>\n+                   Make_String_Literal\n+                     (Sloc => Loc,\n+                      Strval => Sec))));\n+\n+      Set_Has_Gigi_Rep_Item (Ent);\n+      return LS;\n+   end Make_Linker_Section_Pragma;\n+\n    ---------------------------------\n    -- Make_Raise_Constraint_Error --\n    ---------------------------------"}, {"sha": "483496678dff6c952d88db3d3863b3b89e77d42d", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e5fbe064423bf109f2e0525d45872f8c77ae05/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=59e5fbe064423bf109f2e0525d45872f8c77ae05", "patch": "@@ -118,6 +118,13 @@ package Tbuild is\n    pragma Inline (Make_Integer_Literal);\n    --  A convenient form of Make_Integer_Literal taking Int instead of Uint\n \n+   function Make_Linker_Section_Pragma\n+     (Ent : Entity_Id;\n+      Loc : Source_Ptr;\n+      Sec : String) return Node_Id;\n+   --  Construct a Linker_Section pragma for entity Ent, using string Sec as\n+   --  the section name. Loc is the Sloc value to use in building the pragma.\n+\n    function Make_Raise_Constraint_Error\n      (Sloc      : Source_Ptr;\n       Condition : Node_Id := Empty;"}]}