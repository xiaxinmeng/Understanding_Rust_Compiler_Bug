{"sha": "9bf2f779045072c0db1e57f67fbc864caf212585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmMmY3NzkwNDUwNzJjMGRiMWU1N2Y2N2ZiYzg2NGNhZjIxMjU4NQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-05-04T16:14:37Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-05-04T16:14:37Z"}, "message": "[AArch64] Accept more addressing modes for PRFM\n\n\t* config/aarch64/aarch64.md (prefetch); Adjust predicate and\n\tconstraint on operand 0 to allow more general addressing modes.\n\tAdjust output template.\n\t* config/aarch64/aarch64.c (aarch64_address_valid_for_prefetch_p):\n\tNew function.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_address_valid_for_prefetch_p): Declare prototype.\n\t* config/aarch64/constraints.md (Dp): New address constraint.\n\t* config/aarch64/predicates.md (aarch64_prefetch_operand): New\n\tpredicate.\n\n\t* gcc.target/aarch64/prfm_imm_offset_1.c: New test.\n\nFrom-SVN: r247603", "tree": {"sha": "16f7572235259d3af564038314b1a61a4227c071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f7572235259d3af564038314b1a61a4227c071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf2f779045072c0db1e57f67fbc864caf212585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf2f779045072c0db1e57f67fbc864caf212585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf2f779045072c0db1e57f67fbc864caf212585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf2f779045072c0db1e57f67fbc864caf212585/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "928351c3ef8422a1733ce5f19fddf2da146a6a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928351c3ef8422a1733ce5f19fddf2da146a6a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928351c3ef8422a1733ce5f19fddf2da146a6a32"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "34a56ab17c626a7fc4d99edec0dc6ca4c99c467a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -1,3 +1,16 @@\n+2016-05-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (prefetch); Adjust predicate and\n+\tconstraint on operand 0 to allow more general addressing modes.\n+\tAdjust output template.\n+\t* config/aarch64/aarch64.c (aarch64_address_valid_for_prefetch_p):\n+\tNew function.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_address_valid_for_prefetch_p): Declare prototype.\n+\t* config/aarch64/constraints.md (Dp): New address constraint.\n+\t* config/aarch64/predicates.md (aarch64_prefetch_operand): New\n+\tpredicate.\n+\n 2017-05-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-cp.c (perform_estimation_of_a_value): Drop base_time parameter;"}, {"sha": "2895a2a97b5a9c63327cf1dc1ef74b8382c69ad1", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -301,6 +301,7 @@ extern struct tune_params aarch64_tune_params;\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n+bool aarch64_address_valid_for_prefetch_p (rtx, bool);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n unsigned HOST_WIDE_INT aarch64_and_split_imm1 (HOST_WIDE_INT val_in);\n unsigned HOST_WIDE_INT aarch64_and_split_imm2 (HOST_WIDE_INT val_in);"}, {"sha": "43fc928b4602d9181bfedf99ca2edd3e241f007d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -4549,6 +4549,24 @@ aarch64_classify_address (struct aarch64_address_info *info,\n     }\n }\n \n+/* Return true if the address X is valid for a PRFM instruction.\n+   STRICT_P is true if we should do strict checking with\n+   aarch64_classify_address.  */\n+\n+bool\n+aarch64_address_valid_for_prefetch_p (rtx x, bool strict_p)\n+{\n+  struct aarch64_address_info addr;\n+\n+  /* PRFM accepts the same addresses as DImode...  */\n+  bool res = aarch64_classify_address (&addr, x, DImode, MEM, strict_p);\n+  if (!res)\n+    return false;\n+\n+  /* ... except writeback forms.  */\n+  return addr.type != ADDRESS_REG_WB;\n+}\n+\n bool\n aarch64_symbolic_address_p (rtx x)\n {"}, {"sha": "d39b8507c7570b4490ede20c523ffcf6bd533a36", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -519,27 +519,31 @@\n )\n \n (define_insn \"prefetch\"\n-  [(prefetch (match_operand:DI 0 \"register_operand\" \"r\")\n+  [(prefetch (match_operand:DI 0 \"aarch64_prefetch_operand\" \"Dp\")\n             (match_operand:QI 1 \"const_int_operand\" \"\")\n             (match_operand:QI 2 \"const_int_operand\" \"\"))]\n   \"\"\n   {\n-    const char * pftype[2][4] = \n+    const char * pftype[2][4] =\n     {\n-      {\"prfm\\\\tPLDL1STRM, %a0\",\n-       \"prfm\\\\tPLDL3KEEP, %a0\",\n-       \"prfm\\\\tPLDL2KEEP, %a0\",\n-       \"prfm\\\\tPLDL1KEEP, %a0\"},\n-      {\"prfm\\\\tPSTL1STRM, %a0\",\n-       \"prfm\\\\tPSTL3KEEP, %a0\",\n-       \"prfm\\\\tPSTL2KEEP, %a0\",\n-       \"prfm\\\\tPSTL1KEEP, %a0\"},\n+      {\"prfm\\\\tPLDL1STRM, %0\",\n+       \"prfm\\\\tPLDL3KEEP, %0\",\n+       \"prfm\\\\tPLDL2KEEP, %0\",\n+       \"prfm\\\\tPLDL1KEEP, %0\"},\n+      {\"prfm\\\\tPSTL1STRM, %0\",\n+       \"prfm\\\\tPSTL3KEEP, %0\",\n+       \"prfm\\\\tPSTL2KEEP, %0\",\n+       \"prfm\\\\tPSTL1KEEP, %0\"},\n     };\n \n     int locality = INTVAL (operands[2]);\n \n     gcc_assert (IN_RANGE (locality, 0, 3));\n \n+    /* PRFM accepts the same addresses as a 64-bit LDR so wrap\n+       the address into a DImode MEM so that aarch64_print_operand knows\n+       how to print it.  */\n+    operands[0] = gen_rtx_MEM (DImode, operands[0]);\n     return pftype[INTVAL(operands[1])][locality];\n   }\n   [(set_attr \"type\" \"load1\")]"}, {"sha": "b8293376fde7e03c4cfc2a6ad6268201f487eb92", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -214,3 +214,8 @@\n  A constraint that matches an immediate operand valid for AdvSIMD scalar.\"\n  (and (match_code \"const_int\")\n       (match_test \"aarch64_simd_imm_scalar_p (op, GET_MODE (op))\")))\n+\n+(define_address_constraint \"Dp\"\n+  \"@internal\n+ An address valid for a prefetch instruction.\"\n+ (match_test \"aarch64_address_valid_for_prefetch_p (op, true)\"))"}, {"sha": "8e3ea9b469659410fe3d6ff52d9d590a711a46fa", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -165,6 +165,9 @@\n        (match_test \"aarch64_legitimate_address_p (mode, XEXP (op, 0), PARALLEL,\n \t\t\t\t\t       0)\")))\n \n+(define_predicate \"aarch64_prefetch_operand\"\n+  (match_test \"aarch64_address_valid_for_prefetch_p (op, false)\"))\n+\n (define_predicate \"aarch64_valid_symref\"\n   (match_code \"const, symbol_ref, label_ref\")\n {"}, {"sha": "b8d1e2f3cb3aaf41db59f8a48e31f2e4fc083235", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -1,3 +1,7 @@\n+2016-05-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/prfm_imm_offset_1.c: New test.\n+\n 2017-05-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/ipa/ipcp-2.c: Decrease ipcp threshold"}, {"sha": "26ab9139cbc2395792d7f4fe0fa123c1b0359109", "filename": "gcc/testsuite/gcc.target/aarch64/prfm_imm_offset_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fprfm_imm_offset_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf2f779045072c0db1e57f67fbc864caf212585/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fprfm_imm_offset_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fprfm_imm_offset_1.c?ref=9bf2f779045072c0db1e57f67fbc864caf212585", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Check that we can generate the immediate-offset addressing\n+   mode for PRFM.  */\n+\n+#define ARRSIZE 65\n+int *bad_addr[ARRSIZE];\n+\n+void\n+prefetch_for_read (void)\n+{\n+  int i;\n+  for (i = 0; i < ARRSIZE; i++)\n+    __builtin_prefetch (bad_addr[i] + 2, 0, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"prfm.*\\\\\\[x\\[0-9\\]+, 8\\\\\\]\" 1 } } */"}]}