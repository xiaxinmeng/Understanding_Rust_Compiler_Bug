{"sha": "06a67bdd66ac806bea322b14f4e94fd03ad444f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhNjdiZGQ2NmFjODA2YmVhMzIyYjE0ZjRlOTRmZDAzYWQ0NDRmMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-11T14:32:49Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-11T14:32:49Z"}, "message": "rs6000.c (struct processor_costs): Change semantics of fields to include the COST_N_INSNS scaling...\n\n\n\t* rs6000.c (struct processor_costs): Change semantics of fields to\n\tinclude the COST_N_INSNS scaling, and update all initializers.\n\t(rs6000_rtx_costs): Don't use COSTS_N_INSNS on rs6000_cost fields.\n\tUse COSTS_N_INSNS(1) for NOT, SIGN_EXTEND, ZERO_EXTEND and COMPARE.\n\tUse rs6000_cost->fp for both FLOAT_TRUNCATE and UNSPEC_FRSP.  When\n\toptimizing for size, use COSTS_N_INSNS(1) for CALL and IF_THEN_ELSE.\n\nFrom-SVN: r84512", "tree": {"sha": "d42a31e10870dfca2e30938ea3e93da70534df8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42a31e10870dfca2e30938ea3e93da70534df8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a67bdd66ac806bea322b14f4e94fd03ad444f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a67bdd66ac806bea322b14f4e94fd03ad444f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a67bdd66ac806bea322b14f4e94fd03ad444f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a67bdd66ac806bea322b14f4e94fd03ad444f2/comments", "author": null, "committer": null, "parents": [{"sha": "e08b5a758a9dec2bf31df677b2da9345ca791044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08b5a758a9dec2bf31df677b2da9345ca791044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08b5a758a9dec2bf31df677b2da9345ca791044"}], "stats": {"total": 459, "additions": 251, "deletions": 208}, "files": [{"sha": "0eaf63705c26f91be08c34696cc53c707d184956", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a67bdd66ac806bea322b14f4e94fd03ad444f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a67bdd66ac806bea322b14f4e94fd03ad444f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a67bdd66ac806bea322b14f4e94fd03ad444f2", "patch": "@@ -1,3 +1,12 @@\n+2004-07-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* rs6000.c (struct processor_costs): Change semantics of fields to\n+\tinclude the COST_N_INSNS scaling, and update all initializers.\n+\t(rs6000_rtx_costs): Don't use COSTS_N_INSNS on rs6000_cost fields.\n+\tUse COSTS_N_INSNS(1) for NOT, SIGN_EXTEND, ZERO_EXTEND and COMPARE.\n+\tUse rs6000_cost->fp for both FLOAT_TRUNCATE and UNSPEC_FRSP.  When\n+\toptimizing for size, use COSTS_N_INSNS(1) for CALL and IF_THEN_ELSE.\n+\n 2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* LANGUAGES: Remove obsolete information."}, {"sha": "713a09bcc9692e1772974bd2b1f165bae7bfdb49", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 242, "deletions": 208, "changes": 450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a67bdd66ac806bea322b14f4e94fd03ad444f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a67bdd66ac806bea322b14f4e94fd03ad444f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=06a67bdd66ac806bea322b14f4e94fd03ad444f2", "patch": "@@ -305,286 +305,286 @@ const struct processor_costs *rs6000_cost;\n /* Instruction size costs on 32bit processors.  */\n static const\n struct processor_costs size32_cost = {\n-  1,    /* mulsi */\n-  1,    /* mulsi_const */\n-  1,    /* mulsi_const9 */\n-  1,    /* muldi */\n-  1,    /* divsi */\n-  1,    /* divdi */\n-  1,    /* fp */\n-  1,    /* dmul */\n-  1,    /* sdiv */\n-  1,    /* ddiv */\n+  COSTS_N_INSNS (1),    /* mulsi */\n+  COSTS_N_INSNS (1),    /* mulsi_const */\n+  COSTS_N_INSNS (1),    /* mulsi_const9 */\n+  COSTS_N_INSNS (1),    /* muldi */\n+  COSTS_N_INSNS (1),    /* divsi */\n+  COSTS_N_INSNS (1),    /* divdi */\n+  COSTS_N_INSNS (1),    /* fp */\n+  COSTS_N_INSNS (1),    /* dmul */\n+  COSTS_N_INSNS (1),    /* sdiv */\n+  COSTS_N_INSNS (1),    /* ddiv */\n };\n \n /* Instruction size costs on 64bit processors.  */\n static const\n struct processor_costs size64_cost = {\n-  1,    /* mulsi */\n-  1,    /* mulsi_const */\n-  1,    /* mulsi_const9 */\n-  1,    /* muldi */\n-  1,    /* divsi */\n-  1,    /* divdi */\n-  1,    /* fp */\n-  1,    /* dmul */\n-  1,    /* sdiv */\n-  1,    /* ddiv */\n+  COSTS_N_INSNS (1),    /* mulsi */\n+  COSTS_N_INSNS (1),    /* mulsi_const */\n+  COSTS_N_INSNS (1),    /* mulsi_const9 */\n+  COSTS_N_INSNS (1),    /* muldi */\n+  COSTS_N_INSNS (1),    /* divsi */\n+  COSTS_N_INSNS (1),    /* divdi */\n+  COSTS_N_INSNS (1),    /* fp */\n+  COSTS_N_INSNS (1),    /* dmul */\n+  COSTS_N_INSNS (1),    /* sdiv */\n+  COSTS_N_INSNS (1),    /* ddiv */\n };\n \n /* Instruction costs on RIOS1 processors.  */\n static const\n struct processor_costs rios1_cost = {\n-  5,    /* mulsi */\n-  4,    /* mulsi_const */\n-  3,    /* mulsi_const9 */\n-  5,    /* muldi */\n-  19,   /* divsi */\n-  19,   /* divdi */\n-  2,    /* fp */\n-  2,    /* dmul */\n-  19,   /* sdiv */\n-  19,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (3),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (19),   /* divsi */\n+  COSTS_N_INSNS (19),   /* divdi */\n+  COSTS_N_INSNS (2),    /* fp */\n+  COSTS_N_INSNS (2),    /* dmul */\n+  COSTS_N_INSNS (19),   /* sdiv */\n+  COSTS_N_INSNS (19),   /* ddiv */\n };\n \n /* Instruction costs on RIOS2 processors.  */\n static const\n struct processor_costs rios2_cost = {\n-  2,    /* mulsi */\n-  2,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  2,    /* muldi */\n-  13,   /* divsi */\n-  13,   /* divdi */\n-  2,    /* fp */\n-  2,    /* dmul */\n-  17,   /* sdiv */\n-  17,   /* ddiv */\n+  COSTS_N_INSNS (2),    /* mulsi */\n+  COSTS_N_INSNS (2),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (2),    /* muldi */\n+  COSTS_N_INSNS (13),   /* divsi */\n+  COSTS_N_INSNS (13),   /* divdi */\n+  COSTS_N_INSNS (2),    /* fp */\n+  COSTS_N_INSNS (2),    /* dmul */\n+  COSTS_N_INSNS (17),   /* sdiv */\n+  COSTS_N_INSNS (17),   /* ddiv */\n };\n \n /* Instruction costs on RS64A processors.  */\n static const\n struct processor_costs rs64a_cost = {\n-  20,   /* mulsi */\n-  12,   /* mulsi_const */\n-  8,    /* mulsi_const9 */\n-  34,   /* muldi */\n-  65,   /* divsi */\n-  67,   /* divdi */\n-  4,    /* fp */\n-  4,    /* dmul */\n-  31,   /* sdiv */\n-  31,   /* ddiv */\n+  COSTS_N_INSNS (20),   /* mulsi */\n+  COSTS_N_INSNS (12),   /* mulsi_const */\n+  COSTS_N_INSNS (8),    /* mulsi_const9 */\n+  COSTS_N_INSNS (34),   /* muldi */\n+  COSTS_N_INSNS (65),   /* divsi */\n+  COSTS_N_INSNS (67),   /* divdi */\n+  COSTS_N_INSNS (4),    /* fp */\n+  COSTS_N_INSNS (4),    /* dmul */\n+  COSTS_N_INSNS (31),   /* sdiv */\n+  COSTS_N_INSNS (31),   /* ddiv */\n };\n \n /* Instruction costs on MPCCORE processors.  */\n static const\n struct processor_costs mpccore_cost = {\n-  2,    /* mulsi */\n-  2,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  2,    /* muldi */\n-  6,    /* divsi */\n-  6,    /* divdi */\n-  4,    /* fp */\n-  5,    /* dmul */\n-  10,   /* sdiv */\n-  17,   /* ddiv */\n+  COSTS_N_INSNS (2),    /* mulsi */\n+  COSTS_N_INSNS (2),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (2),    /* muldi */\n+  COSTS_N_INSNS (6),    /* divsi */\n+  COSTS_N_INSNS (6),    /* divdi */\n+  COSTS_N_INSNS (4),    /* fp */\n+  COSTS_N_INSNS (5),    /* dmul */\n+  COSTS_N_INSNS (10),   /* sdiv */\n+  COSTS_N_INSNS (17),   /* ddiv */\n };\n \n /* Instruction costs on PPC403 processors.  */\n static const\n struct processor_costs ppc403_cost = {\n-  4,    /* mulsi */\n-  4,    /* mulsi_const */\n-  4,    /* mulsi_const9 */\n-  4,    /* muldi */\n-  33,   /* divsi */\n-  33,   /* divdi */\n-  11,   /* fp */\n-  11,   /* dmul */\n-  11,   /* sdiv */\n-  11,   /* ddiv */\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (33),   /* divsi */\n+  COSTS_N_INSNS (33),   /* divdi */\n+  COSTS_N_INSNS (11),   /* fp */\n+  COSTS_N_INSNS (11),   /* dmul */\n+  COSTS_N_INSNS (11),   /* sdiv */\n+  COSTS_N_INSNS (11),   /* ddiv */\n };\n \n /* Instruction costs on PPC405 processors.  */\n static const\n struct processor_costs ppc405_cost = {\n-  5,    /* mulsi */\n-  4,    /* mulsi_const */\n-  3,    /* mulsi_const9 */\n-  5,    /* muldi */\n-  35,   /* divsi */\n-  35,   /* divdi */\n-  11,   /* fp */\n-  11,   /* dmul */\n-  11,   /* sdiv */\n-  11,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (3),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (35),   /* divsi */\n+  COSTS_N_INSNS (35),   /* divdi */\n+  COSTS_N_INSNS (11),   /* fp */\n+  COSTS_N_INSNS (11),   /* dmul */\n+  COSTS_N_INSNS (11),   /* sdiv */\n+  COSTS_N_INSNS (11),   /* ddiv */\n };\n \n /* Instruction costs on PPC440 processors.  */\n static const\n struct processor_costs ppc440_cost = {\n-  3,    /* mulsi */\n-  2,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  3,    /* muldi */\n-  34,   /* divsi */\n-  34,   /* divdi */\n-  5,    /* fp */\n-  5,    /* dmul */\n-  19,   /* sdiv */\n-  33,   /* ddiv */\n+  COSTS_N_INSNS (3),    /* mulsi */\n+  COSTS_N_INSNS (2),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (3),    /* muldi */\n+  COSTS_N_INSNS (34),   /* divsi */\n+  COSTS_N_INSNS (34),   /* divdi */\n+  COSTS_N_INSNS (5),    /* fp */\n+  COSTS_N_INSNS (5),    /* dmul */\n+  COSTS_N_INSNS (19),   /* sdiv */\n+  COSTS_N_INSNS (33),   /* ddiv */\n };\n \n /* Instruction costs on PPC601 processors.  */\n static const\n struct processor_costs ppc601_cost = {\n-  5,    /* mulsi */\n-  5,    /* mulsi_const */\n-  5,    /* mulsi_const9 */\n-  5,    /* muldi */\n-  36,   /* divsi */\n-  36,   /* divdi */\n-  4,    /* fp */\n-  5,    /* dmul */\n-  17,   /* sdiv */\n-  31,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (5),    /* mulsi_const */\n+  COSTS_N_INSNS (5),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (36),   /* divsi */\n+  COSTS_N_INSNS (36),   /* divdi */\n+  COSTS_N_INSNS (4),    /* fp */\n+  COSTS_N_INSNS (5),    /* dmul */\n+  COSTS_N_INSNS (17),   /* sdiv */\n+  COSTS_N_INSNS (31),   /* ddiv */\n };\n \n /* Instruction costs on PPC603 processors.  */\n static const\n struct processor_costs ppc603_cost = {\n-  5,    /* mulsi */\n-  3,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  5,    /* muldi */\n-  37,   /* divsi */\n-  37,   /* divdi */\n-  3,    /* fp */\n-  4,    /* dmul */\n-  18,   /* sdiv */\n-  33,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (3),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (37),   /* divsi */\n+  COSTS_N_INSNS (37),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (4),    /* dmul */\n+  COSTS_N_INSNS (18),   /* sdiv */\n+  COSTS_N_INSNS (33),   /* ddiv */\n };\n \n /* Instruction costs on PPC604 processors.  */\n static const\n struct processor_costs ppc604_cost = {\n-  4,    /* mulsi */\n-  4,    /* mulsi_const */\n-  4,    /* mulsi_const9 */\n-  4,    /* muldi */\n-  20,   /* divsi */\n-  20,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  18,   /* sdiv */\n-  32,   /* ddiv */\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (20),   /* divsi */\n+  COSTS_N_INSNS (20),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (18),   /* sdiv */\n+  COSTS_N_INSNS (32),   /* ddiv */\n };\n \n /* Instruction costs on PPC604e processors.  */\n static const\n struct processor_costs ppc604e_cost = {\n-  2,    /* mulsi */\n-  2,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  2,    /* muldi */\n-  20,   /* divsi */\n-  20,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  18,   /* sdiv */\n-  32,   /* ddiv */\n+  COSTS_N_INSNS (2),    /* mulsi */\n+  COSTS_N_INSNS (2),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (2),    /* muldi */\n+  COSTS_N_INSNS (20),   /* divsi */\n+  COSTS_N_INSNS (20),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (18),   /* sdiv */\n+  COSTS_N_INSNS (32),   /* ddiv */\n };\n \n /* Instruction costs on PPC620 processors.  */\n static const\n struct processor_costs ppc620_cost = {\n-  5,    /* mulsi */\n-  4,    /* mulsi_const */\n-  3,    /* mulsi_const9 */\n-  7,    /* muldi */\n-  21,   /* divsi */\n-  37,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  18,   /* sdiv */\n-  32,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (3),    /* mulsi_const9 */\n+  COSTS_N_INSNS (7),    /* muldi */\n+  COSTS_N_INSNS (21),   /* divsi */\n+  COSTS_N_INSNS (37),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (18),   /* sdiv */\n+  COSTS_N_INSNS (32),   /* ddiv */\n };\n \n /* Instruction costs on PPC630 processors.  */\n static const\n struct processor_costs ppc630_cost = {\n-  5,    /* mulsi */\n-  4,    /* mulsi_const */\n-  3,    /* mulsi_const9 */\n-  7,    /* muldi */\n-  21,   /* divsi */\n-  37,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  17,   /* sdiv */\n-  21,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (3),    /* mulsi_const9 */\n+  COSTS_N_INSNS (7),    /* muldi */\n+  COSTS_N_INSNS (21),   /* divsi */\n+  COSTS_N_INSNS (37),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (17),   /* sdiv */\n+  COSTS_N_INSNS (21),   /* ddiv */\n };\n \n /* Instruction costs on PPC750 and PPC7400 processors.  */\n static const\n struct processor_costs ppc750_cost = {\n-  5,    /* mulsi */\n-  3,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  5,    /* muldi */\n-  17,   /* divsi */\n-  17,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  17,   /* sdiv */\n-  31,   /* ddiv */\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (3),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (17),   /* divsi */\n+  COSTS_N_INSNS (17),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (17),   /* sdiv */\n+  COSTS_N_INSNS (31),   /* ddiv */\n };\n \n /* Instruction costs on PPC7450 processors.  */\n static const\n struct processor_costs ppc7450_cost = {\n-  4,    /* mulsi */\n-  3,    /* mulsi_const */\n-  3,    /* mulsi_const9 */\n-  4,    /* muldi */\n-  23,   /* divsi */\n-  23,   /* divdi */\n-  5,    /* fp */\n-  5,    /* dmul */\n-  21,   /* sdiv */\n-  35,   /* ddiv */\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (3),    /* mulsi_const */\n+  COSTS_N_INSNS (3),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (23),   /* divsi */\n+  COSTS_N_INSNS (23),   /* divdi */\n+  COSTS_N_INSNS (5),    /* fp */\n+  COSTS_N_INSNS (5),    /* dmul */\n+  COSTS_N_INSNS (21),   /* sdiv */\n+  COSTS_N_INSNS (35),   /* ddiv */\n };\n \n /* Instruction costs on PPC8540 processors.  */\n static const\n struct processor_costs ppc8540_cost = {\n-  4,    /* mulsi */\n-  4,    /* mulsi_const */\n-  4,    /* mulsi_const9 */\n-  4,    /* muldi */\n-  19,   /* divsi */\n-  19,   /* divdi */\n-  4,    /* fp */\n-  4,    /* dmul */\n-  29,   /* sdiv */\n-  29,   /* ddiv */\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (19),   /* divsi */\n+  COSTS_N_INSNS (19),   /* divdi */\n+  COSTS_N_INSNS (4),    /* fp */\n+  COSTS_N_INSNS (4),    /* dmul */\n+  COSTS_N_INSNS (29),   /* sdiv */\n+  COSTS_N_INSNS (29),   /* ddiv */\n };\n \n /* Instruction costs on POWER4 and POWER5 processors.  */\n static const\n struct processor_costs power4_cost = {\n-  3,    /* mulsi */\n-  2,    /* mulsi_const */\n-  2,    /* mulsi_const9 */\n-  4,    /* muldi */\n-  18,   /* divsi */\n-  34,   /* divdi */\n-  3,    /* fp */\n-  3,    /* dmul */\n-  17,   /* sdiv */\n-  17,   /* ddiv */\n+  COSTS_N_INSNS (3),    /* mulsi */\n+  COSTS_N_INSNS (2),    /* mulsi_const */\n+  COSTS_N_INSNS (2),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (18),   /* divsi */\n+  COSTS_N_INSNS (34),   /* divdi */\n+  COSTS_N_INSNS (3),    /* fp */\n+  COSTS_N_INSNS (3),    /* dmul */\n+  COSTS_N_INSNS (17),   /* sdiv */\n+  COSTS_N_INSNS (17),   /* ddiv */\n };\n \n \f\n@@ -16531,10 +16531,10 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n     case PLUS:\n       if (mode == DFmode)\n \t*total = GET_CODE (XEXP (x, 0)) == MULT\n-\t\t ? COSTS_N_INSNS (rs6000_cost->dmul)\n-\t\t : COSTS_N_INSNS (rs6000_cost->fp);\n+\t\t ? rs6000_cost->dmul\n+\t\t : rs6000_cost->fp;\n       else if (mode == SFmode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->fp);\n+\t*total = rs6000_cost->fp;\n       else\n \t*total = ((GET_CODE (XEXP (x, 1)) == CONST_INT\n \t\t  && ((unsigned HOST_WIDE_INT) (INTVAL (XEXP (x, 1))\n@@ -16547,10 +16547,10 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n     case MINUS:\n       if (mode == DFmode)\n \t*total = GET_CODE (XEXP (x, 0)) == MULT\n-\t\t ? COSTS_N_INSNS (rs6000_cost->dmul)\n-\t\t : COSTS_N_INSNS (rs6000_cost->fp);\n+\t\t ? rs6000_cost->dmul\n+\t\t : rs6000_cost->fp;\n       else if (mode == SFmode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->fp);\n+\t*total = rs6000_cost->fp;\n       else\n         *total = COSTS_N_INSNS (1);\n       return true;\n@@ -16570,26 +16570,26 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n \t{\n \t  if (INTVAL (XEXP (x, 1)) >= -256\n \t      && INTVAL (XEXP (x, 1)) <= 255)\n-\t    *total = COSTS_N_INSNS (rs6000_cost->mulsi_const9);\n+\t    *total = rs6000_cost->mulsi_const9;\n \t  else\n-\t    *total = COSTS_N_INSNS (rs6000_cost->mulsi_const);\n+\t    *total = rs6000_cost->mulsi_const;\n \t}\n       else if (mode == DFmode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->dmul);\n+\t*total = rs6000_cost->dmul;\n       else if (mode == SFmode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->fp);\n+\t*total = rs6000_cost->fp;\n       else if (mode == DImode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->muldi);\n+\t*total = rs6000_cost->muldi;\n       else\n-\t*total = COSTS_N_INSNS (rs6000_cost->mulsi);\n+\t*total = rs6000_cost->mulsi;\n       return true;\n \n     case DIV:\n     case MOD:\n       if (FLOAT_MODE_P (mode))\n \t{\n-\t  *total = mode == DFmode ? COSTS_N_INSNS (rs6000_cost->ddiv)\n-\t\t\t\t  : COSTS_N_INSNS (rs6000_cost->sdiv);\n+\t  *total = mode == DFmode ? rs6000_cost->ddiv\n+\t\t\t\t  : rs6000_cost->sdiv;\n \t  return true;\n \t}\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n@@ -16603,9 +16603,9 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n     case UDIV:\n     case UMOD:\n       if (GET_MODE (XEXP (x, 1)) == DImode)\n-\t*total = COSTS_N_INSNS (rs6000_cost->divdi);\n+\t*total = rs6000_cost->divdi;\n       else\n-\t*total = COSTS_N_INSNS (rs6000_cost->divsi);\n+\t*total = rs6000_cost->divsi;\n       return true;\n \n     case FFS:\n@@ -16615,7 +16615,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n     case NEG:\n     case ABS:\n       if (FLOAT_MODE_P (mode))\n-\t*total = COSTS_N_INSNS (rs6000_cost->fp);\n+\t*total = rs6000_cost->fp;\n       else\n \t*total = COSTS_N_INSNS (1);\n       return true;\n@@ -16625,9 +16625,43 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n       *total = COSTS_N_INSNS (1) + 1;\n       return true;\n \n+    case NOT:\n+    case SIGN_EXTEND:\n+    case ZERO_EXTEND:\n+    case COMPARE:\n+      *total = COSTS_N_INSNS (1);\n+      break;\n+\n+    case FLOAT_TRUNCATE:\n+      *total = rs6000_cost->fp;\n+      return true;\n+\n+    case UNSPEC:\n+      switch (XINT (x, 1))\n+\t{\n+\tcase UNSPEC_FRSP:\n+\t  *total = rs6000_cost->fp;\n+\t  return true;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+\n+    case CALL:\n+    case IF_THEN_ELSE:\n+      if (optimize_size)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      break;\n+\n     default:\n-      return false;\n+      break;\n     }\n+\n+  return false;\n }\n \n /* A C expression returning the cost of moving data from a register of class"}]}