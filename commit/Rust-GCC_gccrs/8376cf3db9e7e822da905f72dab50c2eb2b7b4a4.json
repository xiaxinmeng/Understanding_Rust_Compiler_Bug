{"sha": "8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM3NmNmM2RiOWU3ZTgyMmRhOTA1ZjcyZGFiNTBjMmViMmI3YjRhNA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-07-28T04:39:29Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-07-28T04:39:29Z"}, "message": "treetree.c: Convert remaining K&R prototypes to ISO C90.\n\ntreelang:\n\t* treetree.c: Convert remaining K&R prototypes to ISO C90.\n\t* tree1.c: Likewise.\n\t* parse.y: Likewise.\n\t* tree-convert.c: Likewise.\n\njava:\n\n\t* jvspec.c: Convert to ISO C90 prototypes.\n\nFrom-SVN: r69881", "tree": {"sha": "55e10618e71584ed59b5320375fea1ee21c91a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e10618e71584ed59b5320375fea1ee21c91a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30c3de1ffb2daa8b2b8281bcece806793c4d4803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c3de1ffb2daa8b2b8281bcece806793c4d4803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c3de1ffb2daa8b2b8281bcece806793c4d4803"}], "stats": {"total": 146, "additions": 63, "deletions": 83}, "files": [{"sha": "fba8cd5c1e6493e019923f9014531c48421d1125", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -1,3 +1,7 @@\n+2003-07-28  Andreas Jaeger  <aj@suse.de>\n+\n+\t* jvspec.c: Convert to ISO C90 prototypes.\n+\n 2003-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (force_poplevels): Fix warning call."}, {"sha": "575d9410b3815a3ad85c46f6ff4d07d2ea90a7ab", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -84,8 +84,7 @@ static const char jvgenmain_spec[] =\n /* Return full path name of spec file if it is in DIR, or NULL if\n    not.  */\n static char *\n-find_spec_file (dir)\n-     const char *dir;\n+find_spec_file (const char *dir)\n {\n   char *spec;\n   int x;\n@@ -116,8 +115,7 @@ find_spec_file (dir)\n /* Verify that NAME is a valid Java class name that might contain\n    `main'.  Return 0 on failure.  */\n static int\n-verify_class_name (name)\n-     const char *name;\n+verify_class_name (const char *name)\n {\n   /* FIXME: what encoding do we use for command-line arguments?  For\n      now we assume plain ASCII, which of course is wrong.  */\n@@ -144,10 +142,8 @@ verify_class_name (name)\n }\n \n void\n-lang_specific_driver (in_argc, in_argv, in_added_libraries)\n-     int *in_argc;\n-     const char *const **in_argv;\n-     int *in_added_libraries;\n+lang_specific_driver (int *in_argc, const char *const **in_argv,\n+\t\t      int *in_added_libraries)\n {\n   int i, j;\n \n@@ -600,7 +596,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n }\n \n int\n-lang_specific_pre_link ()\n+lang_specific_pre_link (void)\n {\n   int err;\n   if (main_class_name == NULL)"}, {"sha": "4dc41e7d1d54834c4517a4140828263ac468b925", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -1,3 +1,10 @@\n+2003-07-28  Andreas Jaeger  <aj@suse.de>\n+\n+\t* treetree.c: Convert remaining K&R prototypes to ISO C90.\n+\t* tree1.c: Likewise.\n+\t* parse.y: Likewise.\n+\t* tree-convert.c: Likewise.\n+\n 2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* treetree.c: Remove unnecessary casts."}, {"sha": "f0f721d554536eae3f11cafc188836e7b2153d45", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -59,9 +59,10 @@\n /* My yylex routine used to intercept calls to flex generated code, to\n      record lex time.  */\n int yylex (void);\n-static inline int my_yylex(void);\n+static inline int my_yylex (void);\n /* Call lex, but ensure time is charged to TV_LEX.  */ \n-static inline int my_yylex ()\n+static inline int\n+my_yylex (void)\n {\n   int res;\n   timevar_push (TV_LEX);"}, {"sha": "77741453f40c804361db52a2dad636a7ecccf4cf", "filename": "gcc/treelang/tree-convert.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftree-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftree-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree-convert.c?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -1,6 +1,6 @@\n /* Language-level data type conversion for Treelang.\n    This is a very slightly modified copy of c-convert.c.\n-   Copyright (C) 1987, 1988, 1991, 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1991, 1998, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -60,8 +60,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    not permitted by the language being compiled.  */\n \n tree\n-convert (type, expr)\n-     tree type, expr;\n+convert (tree type, tree expr)\n {\n   tree e = expr;\n   enum tree_code code = TREE_CODE (type);"}, {"sha": "3ee7c161944ebcf29d24ccff940c8dd9bfcc857a", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -138,7 +138,7 @@ treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n /* Language dependent parser setup.  */\n \n bool\n-treelang_init ()\n+treelang_init (void)\n {\n   input_filename = main_input_filename;\n   input_line = 0;"}, {"sha": "7697e3c49e51c2acf54069252933f41440c6d7be", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 41, "deletions": 68, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "patch": "@@ -122,29 +122,26 @@ struct language_function GTY(())\n   char junk; /* dummy field to ensure struct is not empty */\n };\n \n-static tree tree_lang_truthvalue_conversion PARAMS((tree expr));\n-static bool tree_mark_addressable PARAMS((tree exp));\n-static tree tree_lang_type_for_size PARAMS((unsigned precision,\n-\t\t\t\t\t    int unsignedp));\n-static tree tree_lang_type_for_mode PARAMS((enum machine_mode mode,\n-\t\t\t\t\t    int unsignedp));\n-static tree tree_lang_unsigned_type PARAMS((tree type_node));\n-static tree tree_lang_signed_type PARAMS((tree type_node));\n-static tree tree_lang_signed_or_unsigned_type PARAMS((int unsignedp,\n-\t\t\t\t\t\t      tree type));\n+static tree tree_lang_truthvalue_conversion (tree expr);\n+static bool tree_mark_addressable (tree exp);\n+static tree tree_lang_type_for_size (unsigned precision, int unsignedp);\n+static tree tree_lang_type_for_mode (enum machine_mode mode, int unsignedp);\n+static tree tree_lang_unsigned_type (tree type_node);\n+static tree tree_lang_signed_type (tree type_node);\n+static tree tree_lang_signed_or_unsigned_type (int unsignedp, tree type);\n \n /* XXX these should be static */\n-void pushlevel PARAMS((int ignore));\n-tree poplevel PARAMS((int keep, int reverse, int functionbody));\n-int global_bindings_p PARAMS((void));\n-void insert_block PARAMS((tree block));\n-void set_block PARAMS((tree block));\n-tree pushdecl PARAMS((tree decl));\n-tree getdecls PARAMS((void));\n-int kept_level_p PARAMS((void));\n-\n-static void tree_push_type_decl PARAMS((tree id, tree type_node));\n-static void tree_push_atomic_type_decl PARAMS((tree id, tree type_node));\n+void pushlevel (int ignore);\n+tree poplevel (int keep, int reverse, int functionbody);\n+int global_bindings_p (void);\n+void insert_block (tree block);\n+void set_block (tree block);\n+tree pushdecl (tree decl);\n+tree getdecls (void);\n+int kept_level_p (void);\n+\n+static void tree_push_type_decl (tree id, tree type_node);\n+static void tree_push_atomic_type_decl (tree id, tree type_node);\n \n /* The front end language hooks (addresses of code for this front\n    end).  These are not really very language-dependent, i.e.\n@@ -708,7 +705,8 @@ tree_code_get_integer_value (unsigned char* chars, unsigned int length)\n    with tree type TYPE and with operands1 OP1, OP2 (maybe), OP3 (maybe).  */\n tree\n tree_code_get_expression (unsigned int exp_type,\n-                          tree type, tree op1, tree op2, tree op3 ATTRIBUTE_UNUSED)\n+                          tree type, tree op1, tree op2,\n+\t\t\t  tree op3 ATTRIBUTE_UNUSED)\n {\n   tree ret1;\n   int operator;\n@@ -906,8 +904,7 @@ static GTY(()) tree signed_and_unsigned_types[MAX_BITS_PER_WORD + 1][2];\n \n /* XXX is this definition OK? */\n static tree\n-tree_lang_truthvalue_conversion (expr)\n-     tree expr;\n+tree_lang_truthvalue_conversion (tree expr)\n {\n   return expr;\n }\n@@ -919,8 +916,7 @@ tree_lang_truthvalue_conversion (expr)\n    This implementation was copied from c-decl.c. */\n \n static bool\n-tree_mark_addressable (exp)\n-     tree exp;\n+tree_mark_addressable (tree exp)\n {\n   register tree x = exp;\n   while (1)\n@@ -982,9 +978,7 @@ tree_mark_addressable (exp)\n    it is a signed type.  */\n   \n static tree\n-tree_lang_type_for_size (precision, unsignedp)\n-     unsigned precision;\n-     int unsignedp;\n+tree_lang_type_for_size (unsigned precision, int unsignedp)\n {\n   tree t;\n \n@@ -1006,27 +1000,23 @@ tree_lang_type_for_size (precision, unsignedp)\n    an unsigned type; otherwise a signed type is returned.  */\n \n static tree\n-tree_lang_type_for_mode (mode, unsignedp)\n-     enum machine_mode mode;\n-     int unsignedp;\n+tree_lang_type_for_mode (enum machine_mode mode, int unsignedp)\n {\n   return tree_lang_type_for_size (GET_MODE_BITSIZE (mode), unsignedp);\n }\n \n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n \n static tree\n-tree_lang_unsigned_type (type_node)\n-     tree type_node;\n+tree_lang_unsigned_type (tree type_node)\n {\n   return tree_lang_type_for_size (TYPE_PRECISION (type_node), 1);\n }\n \n /* Return the signed version of a TYPE_NODE, a scalar type.  */\n \n static tree\n-tree_lang_signed_type (type_node)\n-     tree type_node;\n+tree_lang_signed_type (tree type_node)\n {\n   return tree_lang_type_for_size (TYPE_PRECISION (type_node), 0);\n }\n@@ -1035,9 +1025,7 @@ tree_lang_signed_type (type_node)\n    UNSIGNEDP.  */\n \n static tree\n-tree_lang_signed_or_unsigned_type (unsignedp, type)\n-     int unsignedp;\n-     tree type;\n+tree_lang_signed_or_unsigned_type (int unsignedp, tree type)\n {\n   if (! INTEGRAL_TYPE_P (type) || TREE_UNSIGNED (type) == unsignedp)\n     return type;\n@@ -1095,7 +1083,7 @@ static struct binding_level clear_binding_level = {NULL, NULL, NULL, NULL};\n /* Return non-zero if we are currently in the global binding level.  */\n \n int\n-global_bindings_p ()\n+global_bindings_p (void)\n {\n   return current_binding_level == global_binding_level ? -1 : 0;\n }\n@@ -1104,15 +1092,15 @@ global_bindings_p ()\n    is in reverse order (it has to be so for back-end compatibility).  */\n \n tree\n-getdecls ()\n+getdecls (void)\n {\n   return current_binding_level->names;\n }\n \n /* Nonzero if the current level needs to have a BLOCK made.  */\n \n int\n-kept_level_p ()\n+kept_level_p (void)\n {\n   return (current_binding_level->names != 0);\n }\n@@ -1121,8 +1109,7 @@ kept_level_p ()\n    specified for back-end compatibility.  */\n \n void\n-pushlevel (ignore)\n-     int ignore ATTRIBUTE_UNUSED;\n+pushlevel (int ignore ATTRIBUTE_UNUSED)\n {\n   struct binding_level *newlevel = xmalloc (sizeof (struct binding_level));\n \n@@ -1150,10 +1137,7 @@ pushlevel (ignore)\n    them into the BLOCK.  */\n \n tree\n-poplevel (keep, reverse, functionbody)\n-     int keep;\n-     int reverse;\n-     int functionbody;\n+poplevel (int keep, int reverse, int functionbody)\n {\n   /* Points to a BLOCK tree node. This is the BLOCK node construted for the\n      binding level that we are about to exit and which is returned by this\n@@ -1247,8 +1231,7 @@ poplevel (keep, reverse, functionbody)\n    to handle the BLOCK node inside the BIND_EXPR.  */\n \n void\n-insert_block (block)\n-     tree block;\n+insert_block (tree block)\n {\n   TREE_USED (block) = 1;\n   current_binding_level->blocks\n@@ -1259,8 +1242,7 @@ insert_block (block)\n    (the one we are currently in).  */\n \n void\n-set_block (block)\n-     tree block;\n+set_block (tree block)\n {\n   current_binding_level->block_created_by_back_end = block;\n }\n@@ -1269,8 +1251,7 @@ set_block (block)\n    Returns the ..._DECL node. */\n \n tree\n-pushdecl (decl)\n-     tree decl;\n+pushdecl (tree decl)\n {\n   /* External objects aren't nested, other objects may be.  */\n     \n@@ -1297,9 +1278,7 @@ pushdecl (decl)\n \f\n \n static void\n-tree_push_type_decl(id, type_node)\n-     tree id;\n-     tree type_node;\n+tree_push_type_decl(tree id, tree type_node)\n {\n   tree decl = build_decl (TYPE_DECL, id, type_node);\n   TYPE_NAME (type_node) = decl;\n@@ -1312,9 +1291,7 @@ tree_push_type_decl(id, type_node)\n    not for e.g. pointer or array types.  */\n \n static void\n-tree_push_atomic_type_decl(id, type_node)\n-     tree id;\n-     tree type_node;\n+tree_push_atomic_type_decl(tree id, tree type_node)\n {\n   TREE_TYPE (type_node) = type_node;\n   tree_push_type_decl (id, type_node);\n@@ -1328,7 +1305,7 @@ tree_push_atomic_type_decl(id, type_node)\n    Make definitions for built-in primitive functions.  */\n \n void\n-treelang_init_decl_processing ()\n+treelang_init_decl_processing (void)\n {\n   current_function_decl = NULL;\n   current_binding_level = NULL_BINDING_LEVEL;\n@@ -1406,13 +1383,9 @@ treelang_init_decl_processing ()\n */\n \n tree\n-builtin_function (name, type, function_code, class, library_name, attrs)\n-     const char *name;\n-     tree type;\n-     int function_code;\n-     enum built_in_class class;\n-     const char *library_name;\n-     tree attrs;\n+builtin_function (const char *name, tree type, int function_code,\n+\t\t  enum built_in_class class, const char *library_name,\n+\t\t  tree attrs)\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;"}]}