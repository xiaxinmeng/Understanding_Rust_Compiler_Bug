{"sha": "8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlZTA5MmU3ZjliZmNlYWUwMDc2ZWJkNWI3MjYwYjhiMDdhYWY1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-21T07:30:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-21T07:30:48Z"}, "message": "re PR c++/35878 ([LWG 2302] Useless NULL pointer check when constructing object)\n\n\tPR c++/35878\n\t* init.c (std_placement_new_fn_p, build_new_1): Formatting fixes.\n\n\t* g++.dg/init/pr35878_1.C: Rewrite directives to scan optimized\n\tdump instead of assembler.\n\t* g++.dg/init/pr35878_2.C: Likewise.\n\t* g++.dg/init/pr35878_3.C: Likewise.\n\nFrom-SVN: r246303", "tree": {"sha": "6d3e5797881b1ebb3cb74a2adf14bca57898e98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d3e5797881b1ebb3cb74a2adf14bca57898e98f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/comments", "author": null, "committer": null, "parents": [{"sha": "4d1b8e70fa5a3b4f305afdc977f02ae39761761b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1b8e70fa5a3b4f305afdc977f02ae39761761b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1b8e70fa5a3b4f305afdc977f02ae39761761b"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "00dd769edd7514c6023f5bb2bb0f6e369f65d477", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -1,7 +1,12 @@\n+2017-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/35878\n+\t* init.c (std_placement_new_fn_p, build_new_1): Formatting fixes.\n+\n 2017-03-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/35878\n-\t* cp/init.c (std_placement_new_fn_p): New.\n+\t* init.c (std_placement_new_fn_p): New.\n \t(build_new_1): Call it.\n \n 2017-03-20  Jason Merrill  <jason@redhat.com>"}, {"sha": "773279504eeb8cbcde2788f70d40c28bb4bc3114", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -2710,7 +2710,8 @@ malloc_alignment ()\n /* Determine whether an allocation function is a namespace-scope\n    non-replaceable placement new function. See DR 1748.\n    TODO: Enable in all standard modes.  */\n-static bool std_placement_new_fn_p (tree alloc_fn)\n+static bool\n+std_placement_new_fn_p (tree alloc_fn)\n {\n   if ((cxx_dialect > cxx14) && DECL_NAMESPACE_SCOPE_P (alloc_fn))\n     {\n@@ -3200,8 +3201,8 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n      So check for a null exception spec on the op new we just called.  */\n \n   nothrow = TYPE_NOTHROW_P (TREE_TYPE (alloc_fn));\n-  check_new = flag_check_new\n-    || (nothrow && !std_placement_new_fn_p (alloc_fn));\n+  check_new\n+    = flag_check_new || (nothrow && !std_placement_new_fn_p (alloc_fn));\n \n   if (cookie_size)\n     {"}, {"sha": "c2dc55a42efd3ef75d73b56d62f1dba14a20e7ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -1,3 +1,11 @@\n+2017-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/35878\n+\t* g++.dg/init/pr35878_1.C: Rewrite directives to scan optimized\n+\tdump instead of assembler.\n+\t* g++.dg/init/pr35878_2.C: Likewise.\n+\t* g++.dg/init/pr35878_3.C: Likewise.\n+\n 2017-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/80097"}, {"sha": "e2fc4933425bcf8fd007467b535ad80c496ec9e7", "filename": "gcc/testsuite/g++.dg/init/pr35878_1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -1,6 +1,8 @@\n-// { dg-options \"-O2 --std=gnu++11\" }\n+// PR c++/35878\n // { dg-do compile }\n-// { dg-final { scan-assembler \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+// { dg-options \"-O2 -std=gnu++11 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" 1 \"optimized\" } }\n+\n #include <new>\n #include <utility>\n "}, {"sha": "c675cb6ed648d0a28baa1594b2297da3aad68234", "filename": "gcc/testsuite/g++.dg/init/pr35878_2.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -1,6 +1,8 @@\n-// { dg-options \"-O2 --std=gnu++17 -fcheck-new\" }\n+// PR c++/35878\n // { dg-do compile }\n-// { dg-final { scan-assembler \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+// { dg-options \"-O2 -std=gnu++17 -fcheck-new -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" 1 \"optimized\" } }\n+\n #include <new>\n #include <utility>\n "}, {"sha": "9317ea1b231a2777b9d852098170ef9504270ca6", "filename": "gcc/testsuite/g++.dg/init/pr35878_3.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C?ref=8bee092e7f9bfceae0076ebd5b7260b8b07aaf5c", "patch": "@@ -1,6 +1,8 @@\n-// { dg-options \"-O2 --std=gnu++17\" }\n+// PR c++/35878\n // { dg-do compile }\n-// { dg-final { scan-assembler-not \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+// { dg-options \"-O2 -std=gnu++17 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-not \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" \"optimized\" } }\n+\n #include <new>\n #include <utility>\n "}]}