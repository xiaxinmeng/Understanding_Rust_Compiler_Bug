{"sha": "4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5MzhjZTZlNzZlOTE4OWZiMmM0Yjg4NTBjM2EyZmY3YWQwNzc4Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-02T18:58:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-02T18:58:32Z"}, "message": "mmx.md (*mov<mode>_internal_rex64): Use %vmovq for reg<->xmm moves.\n\n\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Use %vmovq for\n\treg<->xmm moves.\n\t(*mov<mode>_internal): Merge with *mov<mode>_internal_avx.\n\t(*movv2sf_internal_rex64): Use %vmovq for reg<->xmm moves.  Merge\n\twith *movv2sf_internal_rex64_avx.\n\t(*movv2sf_internal): Merge with *movv2sf_internal_avx.\n\t* config/i386/i386.md (*movdi_internal_rex64) <TYPE_SSEMOV>:\n\tUse %v prefix in insn mnemonic to handle TARGET_AVX.\n\t(*movdi_internal): Add \"isa\" attribute.  Use \"maybe_vex\" instead of\n\t\"vex\" in \"prefix\" attribute calculation.\n\t(*movdf_internal): Output AVX mnemonics.  Add \"prefix\" attribute.\n\nFrom-SVN: r173265", "tree": {"sha": "8c6b66280f2942900ba1c4b05e43b77f0deb4531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6b66280f2942900ba1c4b05e43b77f0deb4531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/comments", "author": null, "committer": null, "parents": [{"sha": "9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9257f35f7bf0c9272fbbc54bcc4c266db56a48c8"}], "stats": {"total": 263, "additions": 124, "deletions": 139}, "files": [{"sha": "f7d3f55466b5089bccac53f5d40211ef67b0f923", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "patch": "@@ -1,3 +1,17 @@\n+2011-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Use %vmovq for\n+\treg<->xmm moves.\n+\t(*mov<mode>_internal): Merge with *mov<mode>_internal_avx.\n+\t(*movv2sf_internal_rex64): Use %vmovq for reg<->xmm moves.  Merge\n+\twith *movv2sf_internal_rex64_avx.\n+\t(*movv2sf_internal): Merge with *movv2sf_internal_avx.\n+\t* config/i386/i386.md (*movdi_internal_rex64) <TYPE_SSEMOV>:\n+\tUse %v prefix in insn mnemonic to handle TARGET_AVX.\n+\t(*movdi_internal): Add \"isa\" attribute.  Use \"maybe_vex\" instead of\n+\t\"vex\" in \"prefix\" attribute calculation.\n+\t(*movdf_internal): Output AVX mnemonics.  Add \"prefix\" attribute.\n+\n 2011-05-02  Stuart Henderson  <shenders@gcc.gnu.org>\n \n         PR target/47951\n@@ -38,8 +52,7 @@\n \t* config/m68k/m68k.h (enum uarch_type, enum target_device): Move\n \tto m68k-opts.h.\n \t(m68k_library_id_string): Remove declaration.\n-\t* config/m68k/m68k.opt (config/m68k/m68k-opts.h): New\n-\tHeaderInclude.\n+\t* config/m68k/m68k.opt (config/m68k/m68k-opts.h): New HeaderInclude.\n \t(m68k_library_id_string): New Variable.\n \t(march=, mcpu=, mtune=): Use Enum and Var.\n "}, {"sha": "bf042488fd401f4a2df75e3cec91f6d1614a0970", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "patch": "@@ -1999,17 +1999,9 @@\n \treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSEMOV:\n-      if (TARGET_AVX)\n-\t{\n-\t  if (get_attr_mode (insn) == MODE_TI)\n-\t    return \"vmovdqa\\t{%1, %0|%0, %1}\";\n-\t  else\n-\t    return \"vmovq\\t{%1, %0|%0, %1}\";\n-\t}\n-\n       if (get_attr_mode (insn) == MODE_TI)\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n-      /* FALLTHRU */\n+\treturn \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+      return \"%vmovq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_MMXMOV:\n       /* Moves from and into integer register is done using movd\n@@ -2130,10 +2122,14 @@\n    movlps\\t{%1, %0|%0, %1}\n    movaps\\t{%1, %0|%0, %1}\n    movlps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"*,*,mmx,mmxmov,mmxmov,sselog1,ssemov,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10,11,12\")\n+       (const_string \"noavx\")\n+       (const_string \"base\")))\n+   (set_attr \"type\" \"*,*,mmx,mmxmov,mmxmov,sselog1,ssemov,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n-       (const_string \"vex\")\n+       (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,TI,DI,V4SF,V2SF,V4SF,V2SF\")])\n \n@@ -3131,17 +3127,17 @@\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V4SF:\n-\t  return \"xorps\\t%0, %0\";\n+\t  return \"%vxorps\\t%0, %d0\";\n \tcase MODE_V2DF:\n \t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"xorps\\t%0, %0\";\n+\t    return \"%vxorps\\t%0, %d0\";\n \t  else\n-\t    return \"xorpd\\t%0, %0\";\n+\t    return \"%vxorpd\\t%0, %d0\";\n \tcase MODE_TI:\n \t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"xorps\\t%0, %0\";\n+\t    return \"%vxorps\\t%0, %d0\";\n \t  else\n-\t    return \"pxor\\t%0, %0\";\n+\t    return \"%vpxor\\t%0, %d0\";\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -3151,34 +3147,62 @@\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V4SF:\n-\t  return \"movaps\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2DF:\n \t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"movaps\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \t  else\n-\t    return \"movapd\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n \tcase MODE_TI:\n \t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"movaps\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \t  else\n-\t    return \"movdqa\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \tcase MODE_DI:\n-\t  return \"movq\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_DF:\n-\t  return \"movsd\\t{%1, %0|%0, %1}\";\n+\t  if (TARGET_AVX)\n+\t    {\n+\t      if (REG_P (operands[0]) && REG_P (operands[1]))\n+\t\treturn \"vmovsd\\t{%1, %0, %0|%0, %0, %1}\";\n+\t      else\n+\t\treturn \"vmovsd\\t{%1, %0|%0, %1}\";\n+\t    }\n+\t  else\n+\t    return \"movsd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V1DF:\n-\t  return \"movlpd\\t{%1, %0|%0, %1}\";\n+\t  if (TARGET_AVX)\n+\t    {\n+\t      if (REG_P (operands[0]))\n+\t\treturn \"vmovlpd\\t{%1, %0, %0|%0, %0, %1}\";\n+\t      else\n+\t\treturn \"vmovlpd\\t{%1, %0|%0, %1}\";\n+\t    }\n+\t  else\n+\t    return \"movlpd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2SF:\n-\t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\t  if (TARGET_AVX)\n+\t    {\n+\t      if (REG_P (operands[0]))\n+\t\treturn \"vmovlps\\t{%1, %0, %0|%0, %0, %1}\";\n+\t      else\n+\t\treturn \"vmovlps\\t{%1, %0|%0, %1}\";\n+\t    }\n+\t  else\n+\t    return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n     default:\n-      gcc_unreachable();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov\")\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n+       (const_string \"orig\")\n+       (const_string \"maybe_vex\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else (eq_attr \"mode\" \"V1DF\")\n        (const_string \"1\")\n@@ -3457,8 +3481,12 @@\n \treturn \"%vmovss\\t{%1, %d0|%d0, %1}\";\n     case 7:\n       if (TARGET_AVX)\n-\treturn REG_P (operands[1]) ? \"vmovss\\t{%1, %0, %0|%0, %0, %1}\"\n-\t\t\t\t   : \"vmovss\\t{%1, %0|%0, %1}\";\n+        {\n+\t  if (REG_P (operands[1]))\n+\t    return \"vmovss\\t{%1, %0, %0|%0, %0, %1}\";\n+\t  else\n+\t    return \"vmovss\\t{%1, %0|%0, %1}\";\n+\t}\n       else\n \treturn \"movss\\t{%1, %0|%0, %1}\";\n     case 8:"}, {"sha": "b9fedefd11bb7619e455d1909e1808a3fcbb57d2", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 52, "deletions": 108, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for MMX and 3dNOW! instructions\n-;; Copyright (C) 2005, 2007, 2008, 2009, 2010\n+;; Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -82,8 +82,8 @@\n     %vpxor\\t%0, %d0\n     %vmovq\\t{%1, %0|%0, %1}\n     %vmovq\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\"\n+    %vmovq\\t{%1, %0|%0, %1}\n+    %vmovq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,ssemov\")\n    (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*\")\n    (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,1,*,*,*\")\n@@ -98,40 +98,12 @@\n        (const_string \"orig\")))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*mov<mode>_internal_avx\"\n-  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,r  ,m\")\n-\t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*Y2,!y ,C  ,*Y2m,*Y2,irm,r\"))]\n-  \"TARGET_AVX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    vpxor\\t%0, %0, %0\n-    vmovq\\t{%1, %0|%0, %1}\n-    vmovq\\t{%1, %0|%0, %1}\n-    #\n-    #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*\")\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7,8\")\n-       (const_string \"vex\")\n-       (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,DI,DI\")])\n-\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n \t \"=!?y,!y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,r  ,m\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n \t \"C   ,!y,m  ,!?y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n-  \"TARGET_MMX\n+  \"!TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n@@ -140,19 +112,38 @@\n     movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n+    %vpxor\\t%0, %d0\n+    %vmovq\\t{%1, %0|%0, %1}\n+    %vmovq\\t{%1, %0|%0, %1}\n     xorps\\t%0, %0\n     movaps\\t{%1, %0|%0, %1}\n     movlps\\t{%1, %0|%0, %1}\n     movlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov,*,*\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10,11,12\")\n+       (const_string \"noavx\")\n+       (const_string \"base\")))\n+   (set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,1,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,1,*,*,*,*,*,*\")\n+   (set (attr \"prefix_rep\")\n+     (if_then_else\n+       (ior (eq_attr \"alternative\" \"4,5\")\n+\t    (and (eq_attr \"alternative\" \"7\")\n+\t\t (eq (symbol_ref \"TARGET_AVX\") (const_int 0))))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"8\")\n+\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"alternative\" \"6,7,8\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_expand \"movv2sf\"\n@@ -164,38 +155,6 @@\n   DONE;\n })\n \n-(define_insn \"*movv2sf_internal_rex64_avx\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=rm,r,!?y,!y,!?y,m  ,!y,Y2,x,x,x,m,r,x\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"Cr ,m,C  ,!y,m  ,!?y,Y2,!y,C,x,m,x,x,r\"))]\n-  \"TARGET_64BIT && TARGET_AVX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    mov{q}\\t{%1, %0|%0, %1}\n-    mov{q}\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    vxorps\\t%0, %0, %0\n-    vmovaps\\t{%1, %0|%0, %1}\n-    vmovlps\\t{%1, %0, %0|%0, %0, %1}\n-    vmovlps\\t{%1, %0|%0, %1}\n-    vmovq\\t{%1, %0|%0, %1}\n-    vmovq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,*,*,*,*,*\")\n-   (set_attr \"length_vex\" \"*,*,*,*,*,*,*,*,*,*,*,*,4,4\")\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12,13\")\n-       (const_string \"vex\")\n-       (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n-\n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n \t \"=rm,r,!?y,!y,!?y,m  ,!y ,*Y2,x,x,x,m,r ,Yi\")\n@@ -212,23 +171,33 @@\n     movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movaps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\"\n+    %vxorps\\t%0, %d0\n+    %vmovaps\\t{%1, %0|%0, %1}\n+    %vmovlps\\t{%1, %0|%0, %1}\n+    %vmovlps\\t{%1, %0|%0, %1}\n+    %vmovq\\t{%1, %0|%0, %1}\n+    %vmovq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n    (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n    (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,*,*,*,*,*\")\n+   (set (attr \"length_vex\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"12,13\")\n+\t    (ne (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+       (const_string \"4\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12,13\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n-(define_insn \"*movv2sf_internal_avx\"\n+(define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n \t \"=!?y,!y,!?y,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n \t \"C   ,!y,m  ,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n-  \"TARGET_AVX\n+  \"!TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n@@ -237,46 +206,21 @@\n     movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n-    vxorps\\t%0, %0, %0\n-    vmovaps\\t{%1, %0|%0, %1}\n-    vmovlps\\t{%1, %0, %0|%0, %0, %1}\n-    vmovlps\\t{%1, %0|%0, %1}\n+    %vxorps\\t%0, %d0\n+    %vmovaps\\t{%1, %0|%0, %1}\n+    %vmovlps\\t{%1, %0|%0, %1}\n+    %vmovlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n   [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n    (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"6,7,8,9\")\n-       (const_string \"vex\")\n+       (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n-(define_insn \"*movv2sf_internal\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n-  \"TARGET_MMX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movaps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    #\n-    #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n-\n ;; %%% This multiword shite has got to go.\n (define_split\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")"}]}