{"sha": "08e931f3b7bf16416bee1424065b7af462bd5819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlOTMxZjNiN2JmMTY0MTZiZWUxNDI0MDY1YjdhZjQ2MmJkNTgxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-30T19:07:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-30T19:07:28Z"}, "message": "defaults.h (SLOW_UNALIGNED_ACCESS): Provide default definition.\n\ngcc/\n\t* defaults.h (SLOW_UNALIGNED_ACCESS): Provide default definition.\n\t* expmed.c (SLOW_UNALIGNED_ACCESS): Remove default definition.\n\t* expr.c (SLOW_UNALIGNED_ACCESS): Likewise.\n\t* lra-constraints.c (SLOW_UNALIGNED_ACCESS): Likewise.\n\t(simplify_operand_subreg): Don't check STRICT_ALIGNMENT here.\n\nFrom-SVN: r192992", "tree": {"sha": "1357150fb34ab027be24b4f97411723036bf4979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1357150fb34ab027be24b4f97411723036bf4979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e931f3b7bf16416bee1424065b7af462bd5819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e931f3b7bf16416bee1424065b7af462bd5819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e931f3b7bf16416bee1424065b7af462bd5819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e931f3b7bf16416bee1424065b7af462bd5819/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "67348c209b467c709e50fa0c2501b4ba42565fe0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e931f3b7bf16416bee1424065b7af462bd5819", "patch": "@@ -1,3 +1,11 @@\n+2012-10-30  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* defaults.h (SLOW_UNALIGNED_ACCESS): Provide default definition.\n+\t* expmed.c (SLOW_UNALIGNED_ACCESS): Remove default definition.\n+\t* expr.c (SLOW_UNALIGNED_ACCESS): Likewise.\n+\t* lra-constraints.c (SLOW_UNALIGNED_ACCESS): Likewise.\n+\t(simplify_operand_subreg): Don't check STRICT_ALIGNMENT here.\n+\n 2012-10-30  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c (eliminated_by_inlining_prob): Cleanup."}, {"sha": "76909ab2d7ef71994cb97b22ab8253b41c4e6c48", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=08e931f3b7bf16416bee1424065b7af462bd5819", "patch": "@@ -1218,6 +1218,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT\n #endif\n \n+#ifndef SLOW_UNALIGNED_ACCESS\n+#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n+#endif\n+\n /* For most ports anything that evaluates to a constant symbolic\n    or integer value is acceptable as a constant address.  */\n #ifndef CONSTANT_ADDRESS_P"}, {"sha": "eb4b0d09152b1795a46dbf8b5fcc12ad7bf66d3d", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=08e931f3b7bf16416bee1424065b7af462bd5819", "patch": "@@ -69,11 +69,6 @@ static rtx expand_sdiv_pow2 (enum machine_mode, rtx, HOST_WIDE_INT);\n /* Test whether a value is zero of a power of two.  */\n #define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)\n \n-#ifndef SLOW_UNALIGNED_ACCESS\n-#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n-#endif\n-\n-\n /* Reduce conditional compilation elsewhere.  */\n #ifndef HAVE_insv\n #define HAVE_insv\t0"}, {"sha": "699dae93d3d8a77e0082b560adca9c2728356ae5", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=08e931f3b7bf16416bee1424065b7af462bd5819", "patch": "@@ -189,12 +189,6 @@ static void write_complex_part (rtx, rtx, bool);\n   (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n    < (unsigned int) MOVE_RATIO (optimize_insn_for_speed_p ()))\n #endif\n-\n-/* SLOW_UNALIGNED_ACCESS is nonzero if unaligned accesses are very slow.  */\n-\n-#ifndef SLOW_UNALIGNED_ACCESS\n-#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n-#endif\n \f\n /* This is run to set up which modes can be used\n    directly in memory and to initialize the block move optab.  It is run"}, {"sha": "1c2058f2ad73b4f2624d9cdc76d020eb33502dbf", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e931f3b7bf16416bee1424065b7af462bd5819/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=08e931f3b7bf16416bee1424065b7af462bd5819", "patch": "@@ -1107,10 +1107,6 @@ process_addr_reg (rtx *loc, rtx *before, rtx *after, enum reg_class cl)\n   return true;\n }\n \n-#ifndef SLOW_UNALIGNED_ACCESS\n-#define SLOW_UNALIGNED_ACCESS(mode, align) 0\n-#endif\n-\n /* Make reloads for subreg in operand NOP with internal subreg mode\n    REG_MODE, add new reloads for further processing.  Return true if\n    any reload was generated.  */\n@@ -1134,8 +1130,7 @@ simplify_operand_subreg (int nop, enum machine_mode reg_mode)\n      address might violate the necessary alignment or the access might\n      be slow.  So take this into consideration.\t */\n   if ((MEM_P (reg)\n-       && ((! STRICT_ALIGNMENT\n-\t    && ! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg)))\n+       && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg))\n \t   || MEM_ALIGN (reg) >= GET_MODE_ALIGNMENT (mode)))\n       || (REG_P (reg) && REGNO (reg) < FIRST_PSEUDO_REGISTER))\n     {"}]}