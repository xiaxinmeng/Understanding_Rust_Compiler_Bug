{"sha": "59ad8b684dd67e171141761f520c6a2ec70e5d6c", "node_id": "C_kwDOANBUbNoAKDU5YWQ4YjY4NGRkNjdlMTcxMTQxNzYxZjUyMGM2YTJlYzcwZTVkNmM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-20T18:41:08Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-08T08:35:01Z"}, "message": "ada: Implement RM 4.5.7(10/3) name resolution rule\n\nThis rule deals with the specific case of a conditional expression that is\nthe operand of a type conversion and effectively distributes the conversion\nto the dependent expressions with the help of the dynamic semantics.\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_Case_Expression): Compute the\n\tinterpretations of the expression only at the end of the analysis,\n\tbut skip doing it if it is the operand of a type conversion.\n\t(Analyze_If_Expression): Likewise.\n\t* sem_res.adb (Resolve): Deal specially with conditional\n\texpression that is the operand of a type conversion.\n\t(Resolve_Dependent_Expression): New procedure.\n\t(Resolve_Case_Expression): Call Resolve_Dependent_Expression.\n\t(Resolve_If_Expression): Likewise.\n\t(Resolve_If_Expression.Apply_Check): Take result type as\n\tparameter.\n\t(Resolve_Type_Conversion): Do not warn about a redundant\n\tconversion when the operand is a conditional expression.", "tree": {"sha": "a2b81e2d26a7b41318cebd02b22b90fe296e96e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b81e2d26a7b41318cebd02b22b90fe296e96e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ad8b684dd67e171141761f520c6a2ec70e5d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ad8b684dd67e171141761f520c6a2ec70e5d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ad8b684dd67e171141761f520c6a2ec70e5d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ad8b684dd67e171141761f520c6a2ec70e5d6c/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1668c3d35b1031fa3ee266b6c3292e53344d315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1668c3d35b1031fa3ee266b6c3292e53344d315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1668c3d35b1031fa3ee266b6c3292e53344d315"}], "stats": {"total": 238, "additions": 156, "deletions": 82}, "files": [{"sha": "23040d7033b81557d1e41cab3a60bf532b2be6e5", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 73, "deletions": 56, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ad8b684dd67e171141761f520c6a2ec70e5d6c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ad8b684dd67e171141761f520c6a2ec70e5d6c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=59ad8b684dd67e171141761f520c6a2ec70e5d6c", "patch": "@@ -1740,6 +1740,70 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n+      --  The expression must be of a discrete type which must be determinable\n+      --  independently of the context in which the expression occurs, but\n+      --  using the fact that the expression must be of a discrete type.\n+      --  Moreover, the type this expression must not be a character literal\n+      --  (which is always ambiguous).\n+\n+      --  If error already reported by Resolve, nothing more to do\n+\n+      if Exp_Btype = Any_Discrete or else Exp_Btype = Any_Type then\n+         return;\n+\n+      --  Special case message for character literal\n+\n+      elsif Exp_Btype = Any_Character then\n+         Error_Msg_N\n+           (\"character literal as case expression is ambiguous\", Expr);\n+         return;\n+      end if;\n+\n+      --  If the case expression is a formal object of mode in out, then\n+      --  treat it as having a nonstatic subtype by forcing use of the base\n+      --  type (which has to get passed to Check_Case_Choices below). Also\n+      --  use base type when the case expression is parenthesized.\n+\n+      if Paren_Count (Expr) > 0\n+        or else (Is_Entity_Name (Expr)\n+                  and then Ekind (Entity (Expr)) = E_Generic_In_Out_Parameter)\n+      then\n+         Exp_Type := Exp_Btype;\n+      end if;\n+\n+      --  The case expression alternatives cover the range of a static subtype\n+      --  subject to aspect Static_Predicate. Do not check the choices when the\n+      --  case expression has not been fully analyzed yet because this may lead\n+      --  to bogus errors.\n+\n+      if Is_OK_Static_Subtype (Exp_Type)\n+        and then Has_Static_Predicate_Aspect (Exp_Type)\n+        and then In_Spec_Expression\n+      then\n+         null;\n+\n+      --  Call Analyze_Choices and Check_Choices to do the rest of the work\n+\n+      else\n+         Analyze_Choices (Alternatives (N), Exp_Type);\n+         Check_Choices (N, Alternatives (N), Exp_Type, Others_Present);\n+\n+         if Exp_Type = Universal_Integer and then not Others_Present then\n+            Error_Msg_N\n+              (\"case on universal integer requires OTHERS choice\", Expr);\n+            return;\n+         end if;\n+      end if;\n+\n+      --  RM 4.5.7(10/3): If the case_expression is the operand of a type\n+      --  conversion, the type of the case_expression is the target type\n+      --  of the conversion.\n+\n+      if Nkind (Parent (N)) = N_Type_Conversion then\n+         Set_Etype (N, Etype (Parent (N)));\n+         return;\n+      end if;\n+\n       --  Loop through the interpretations of the first expression and check\n       --  the other expressions if present.\n \n@@ -1763,25 +1827,6 @@ package body Sem_Ch4 is\n          end loop;\n       end if;\n \n-      --  The expression must be of a discrete type which must be determinable\n-      --  independently of the context in which the expression occurs, but\n-      --  using the fact that the expression must be of a discrete type.\n-      --  Moreover, the type this expression must not be a character literal\n-      --  (which is always ambiguous).\n-\n-      --  If error already reported by Resolve, nothing more to do\n-\n-      if Exp_Btype = Any_Discrete or else Exp_Btype = Any_Type then\n-         return;\n-\n-      --  Special casee message for character literal\n-\n-      elsif Exp_Btype = Any_Character then\n-         Error_Msg_N\n-           (\"character literal as case expression is ambiguous\", Expr);\n-         return;\n-      end if;\n-\n       --  If no possible interpretation has been found, the type of the wrong\n       --  alternative doesn't match any interpretation of the FIRST expression.\n \n@@ -1829,43 +1874,6 @@ package body Sem_Ch4 is\n                   Etype (Second_Expr));\n             end if;\n          end if;\n-\n-         return;\n-      end if;\n-\n-      --  If the case expression is a formal object of mode in out, then\n-      --  treat it as having a nonstatic subtype by forcing use of the base\n-      --  type (which has to get passed to Check_Case_Choices below). Also\n-      --  use base type when the case expression is parenthesized.\n-\n-      if Paren_Count (Expr) > 0\n-        or else (Is_Entity_Name (Expr)\n-                  and then Ekind (Entity (Expr)) = E_Generic_In_Out_Parameter)\n-      then\n-         Exp_Type := Exp_Btype;\n-      end if;\n-\n-      --  The case expression alternatives cover the range of a static subtype\n-      --  subject to aspect Static_Predicate. Do not check the choices when the\n-      --  case expression has not been fully analyzed yet because this may lead\n-      --  to bogus errors.\n-\n-      if Is_OK_Static_Subtype (Exp_Type)\n-        and then Has_Static_Predicate_Aspect (Exp_Type)\n-        and then In_Spec_Expression\n-      then\n-         null;\n-\n-      --  Call Analyze_Choices and Check_Choices to do the rest of the work\n-\n-      else\n-         Analyze_Choices (Alternatives (N), Exp_Type);\n-         Check_Choices (N, Alternatives (N), Exp_Type, Others_Present);\n-\n-         if Exp_Type = Universal_Integer and then not Others_Present then\n-            Error_Msg_N\n-              (\"case on universal integer requires OTHERS choice\", Expr);\n-         end if;\n       end if;\n    end Analyze_Case_Expression;\n \n@@ -2555,6 +2563,15 @@ package body Sem_Ch4 is\n          Analyze_Expression (Else_Expr);\n       end if;\n \n+      --  RM 4.5.7(10/3): If the if_expression is the operand of a type\n+      --  conversion, the type of the if_expression is the target type\n+      --  of the conversion.\n+\n+      if Nkind (Parent (N)) = N_Type_Conversion then\n+         Set_Etype (N, Etype (Parent (N)));\n+         return;\n+      end if;\n+\n       --  Loop through the interpretations of the THEN expression and check the\n       --  ELSE expression if present.\n "}, {"sha": "c8652c959b7435c89075a485ae4ab945fb20512d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 83, "deletions": 26, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ad8b684dd67e171141761f520c6a2ec70e5d6c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ad8b684dd67e171141761f520c6a2ec70e5d6c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=59ad8b684dd67e171141761f520c6a2ec70e5d6c", "patch": "@@ -171,6 +171,13 @@ package body Sem_Res is\n    --  of the task, it must be replaced with a reference to the discriminant\n    --  of the task being called.\n \n+   procedure Resolve_Dependent_Expression\n+     (N    : Node_Id;\n+      Expr : Node_Id;\n+      Typ  : Entity_Id);\n+   --  Internal procedure to resolve the dependent expression Expr of the\n+   --  conditional expression N with type Typ.\n+\n    procedure Resolve_Op_Concat_Arg\n      (N       : Node_Id;\n       Arg     : Node_Id;\n@@ -291,12 +298,6 @@ package body Sem_Res is\n    --  Called after N has been resolved and evaluated, but before range checks\n    --  have been applied. This rewrites the conversion into a simpler form.\n \n-   function Unique_Fixed_Point_Type (N : Node_Id) return Entity_Id;\n-   --  A universal_fixed expression in an universal context is unambiguous if\n-   --  there is only one applicable fixed point type. Determining whether there\n-   --  is only one requires a search over all visible entities, and happens\n-   --  only in very pathological cases (see 6115-006).\n-\n    function Try_User_Defined_Literal\n      (N   : Node_Id;\n       Typ : Entity_Id) return Boolean;\n@@ -306,6 +307,12 @@ package body Sem_Res is\n    --  If such aspect exists, replace literal with a call to the\n    --  corresponding function and return True, return false otherwise.\n \n+   function Unique_Fixed_Point_Type (N : Node_Id) return Entity_Id;\n+   --  A universal_fixed expression in an universal context is unambiguous if\n+   --  there is only one applicable fixed point type. Determining whether there\n+   --  is only one requires a search over all visible entities, and happens\n+   --  only in very pathological cases (see 6115-006).\n+\n    -------------------------\n    -- Ambiguous_Character --\n    -------------------------\n@@ -2461,6 +2468,15 @@ package body Sem_Res is\n          Found := True;\n          Expr_Type := Etype (Expression (N));\n \n+      --  The resolution of a conditional expression that is the operand of a\n+      --  type conversion is determined by the conversion (RM 4.5.7(10/3)).\n+\n+      elsif Nkind (N) in N_Case_Expression | N_If_Expression\n+        and then Nkind (Parent (N)) = N_Type_Conversion\n+      then\n+         Found := True;\n+         Expr_Type := Etype (Parent (N));\n+\n       --  If not overloaded, then we know the type, and all that needs doing\n       --  is to check that this type is compatible with the context.\n \n@@ -7390,7 +7406,8 @@ package body Sem_Res is\n             return;\n          end if;\n \n-         Resolve (Alt_Expr, Typ);\n+         Resolve_Dependent_Expression (N, Alt_Expr, Typ);\n+\n          Check_Unset_Reference (Alt_Expr);\n          Alt_Typ := Etype (Alt_Expr);\n \n@@ -7671,6 +7688,34 @@ package body Sem_Res is\n       Check_Unset_Reference (Expr);\n    end Resolve_Declare_Expression;\n \n+   -----------------------------------\n+   --  Resolve_Dependent_Expression --\n+   -----------------------------------\n+\n+   procedure Resolve_Dependent_Expression\n+     (N    : Node_Id;\n+      Expr : Node_Id;\n+      Typ  : Entity_Id)\n+   is\n+   begin\n+      --  RM 4.5.7(8/3) says that the expected type of dependent expressions is\n+      --  that of the conditional expression but RM 4.5.7(10/3) forces the type\n+      --  of the conditional expression without changing the expected type (the\n+      --  expected type of the operand of a type conversion is any type), so we\n+      --  may have a gap between these two types that is bridged by the dynamic\n+      --  semantics specified by RM 4.5.7(20/3) with the associated legality\n+      --  rule RM 4.5.7(16/3) that will be automatically enforced.\n+\n+      if Nkind (Parent (N)) = N_Type_Conversion\n+        and then Nkind (Expr) /= N_Raise_Expression\n+      then\n+         Convert_To_And_Rewrite (Typ, Expr);\n+         Analyze_And_Resolve (Expr);\n+      else\n+         Resolve (Expr, Typ);\n+      end if;\n+   end Resolve_Dependent_Expression;\n+\n    -----------------------------------------\n    -- Resolve_Discrete_Subtype_Indication --\n    -----------------------------------------\n@@ -9307,29 +9352,21 @@ package body Sem_Res is\n    ---------------------------\n \n    procedure Resolve_If_Expression (N : Node_Id; Typ : Entity_Id) is\n-      procedure Apply_Check (Expr : Node_Id);\n+      Condition : constant Node_Id := First (Expressions (N));\n+\n+      procedure Apply_Check (Expr : Node_Id; Result_Type : Entity_Id);\n       --  When a dependent expression is of a subtype different from\n       --  the context subtype, then insert a qualification to ensure\n       --  the generation of a constraint check. This was previously\n       --  for scalar types. For array types apply a length check, given\n       --  that the context in general allows sliding, while a qualified\n       --  expression forces equality of bounds.\n \n-      Result_Type  : Entity_Id := Typ;\n-      --  So in most cases the type of the If_Expression and of its\n-      --  dependent expressions is that of the context. However, if\n-      --  the expression is the index of an Indexed_Component, we must\n-      --  ensure that a proper index check is applied, rather than a\n-      --  range check on the index type (which might be discriminant\n-      --  dependent). In this case we resolve with the base type of the\n-      --  index type, and the index check is generated in the resolution\n-      --  of the indexed_component above.\n-\n       -----------------\n       -- Apply_Check --\n       -----------------\n \n-      procedure Apply_Check (Expr : Node_Id) is\n+      procedure Apply_Check (Expr : Node_Id; Result_Type : Entity_Id) is\n          Expr_Typ : constant Entity_Id  := Etype (Expr);\n          Loc      : constant Source_Ptr := Sloc (Expr);\n \n@@ -9357,10 +9394,19 @@ package body Sem_Res is\n \n       --  Local variables\n \n-      Condition : constant Node_Id := First (Expressions (N));\n       Else_Expr : Node_Id;\n       Then_Expr : Node_Id;\n \n+      Result_Type : Entity_Id;\n+      --  So in most cases the type of the if_expression and of its\n+      --  dependent expressions is that of the context. However, if\n+      --  the expression is the index of an Indexed_Component, we must\n+      --  ensure that a proper index check is applied, rather than a\n+      --  range check on the index type (which might be discriminant\n+      --  dependent). In this case we resolve with the base type of the\n+      --  index type, and the index check is generated in the resolution\n+      --  of the indexed_component above.\n+\n    --  Start of processing for Resolve_If_Expression\n \n    begin\n@@ -9375,6 +9421,9 @@ package body Sem_Res is\n                     or else Nkind (Parent (Parent (N))) = N_Indexed_Component)\n       then\n          Result_Type := Base_Type (Typ);\n+\n+      else\n+         Result_Type := Typ;\n       end if;\n \n       Then_Expr := Next (Condition);\n@@ -9383,21 +9432,23 @@ package body Sem_Res is\n          return;\n       end if;\n \n-      Else_Expr := Next (Then_Expr);\n-\n       Resolve (Condition, Any_Boolean);\n-      Resolve (Then_Expr, Result_Type);\n       Check_Unset_Reference (Condition);\n+\n+      Resolve_Dependent_Expression (N, Then_Expr, Result_Type);\n+\n       Check_Unset_Reference (Then_Expr);\n+      Apply_Check (Then_Expr, Result_Type);\n \n-      Apply_Check (Then_Expr);\n+      Else_Expr := Next (Then_Expr);\n \n       --  If ELSE expression present, just resolve using the determined type\n \n       if Present (Else_Expr) then\n-         Resolve (Else_Expr, Result_Type);\n+         Resolve_Dependent_Expression (N, Else_Expr, Result_Type);\n+\n          Check_Unset_Reference (Else_Expr);\n-         Apply_Check (Else_Expr);\n+         Apply_Check (Else_Expr, Result_Type);\n \n          --  Apply RM 4.5.7 (17/3): whether the expression is statically or\n          --  dynamically tagged must be known statically.\n@@ -12158,6 +12209,12 @@ package body Sem_Res is\n             then\n                null;\n \n+            --  Never give a warning if the operand is a conditional expression\n+            --  because RM 4.5.7(10/3) forces its type to be the target type.\n+\n+            elsif Nkind (Orig_N) in N_Case_Expression | N_If_Expression then\n+               null;\n+\n             --  Finally, if this type conversion occurs in a context requiring\n             --  a prefix, and the expression is a qualified expression then the\n             --  type conversion is not redundant, since a qualified expression"}]}