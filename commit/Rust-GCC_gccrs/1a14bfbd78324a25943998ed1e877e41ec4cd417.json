{"sha": "1a14bfbd78324a25943998ed1e877e41ec4cd417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExNGJmYmQ3ODMyNGEyNTk0Mzk5OGVkMWU4NzdlNDFlYzRjZDQxNw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-12-11T09:21:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-05-25T14:00:55Z"}, "message": "[Ada] Change pragma Compile_Time_Error to force compile-time evaluation\n\n2020-05-25  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document\n\tchanges to pragmas Compile_Time_Error/Compile_Time_Warning.\n\t* gnat_rm.texi: Regenerate.\n\t* libgnat/g-bytswa.adb: Change uses of Compile_Time_Error to\n\tCompile_Time_Warning, as the actual expression may not always be\n\tknown statically.\n\t* sem_prag.adb (Analyze_Pragma): Handle differently pragma\n\tCompile_Time_Error in both compilation and in GNATprove mode.\n\t(Validate_Compile_Time_Warning_Or_Error): Issue an error or\n\twarning when the expression is not known at compile time.\n\t* usage.adb: Add missing documentation for warning switches _c\n\tand _r.\n\t* warnsw.ads: Update comment.", "tree": {"sha": "d0e872f1ccf8f88f00a3c65d46fc0245941a19e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0e872f1ccf8f88f00a3c65d46fc0245941a19e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a14bfbd78324a25943998ed1e877e41ec4cd417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a14bfbd78324a25943998ed1e877e41ec4cd417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a14bfbd78324a25943998ed1e877e41ec4cd417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a14bfbd78324a25943998ed1e877e41ec4cd417/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4354291994e6f6cb6eba1acef3192fa5c18b1274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4354291994e6f6cb6eba1acef3192fa5c18b1274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4354291994e6f6cb6eba1acef3192fa5c18b1274"}], "stats": {"total": 128, "additions": 99, "deletions": 29}, "files": [{"sha": "7c8af5f8387b5d85d64d26c1f1a1aadf1641525d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -1,3 +1,19 @@\n+2020-05-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document\n+\tchanges to pragmas Compile_Time_Error/Compile_Time_Warning.\n+\t* gnat_rm.texi: Regenerate.\n+\t* libgnat/g-bytswa.adb: Change uses of Compile_Time_Error to\n+\tCompile_Time_Warning, as the actual expression may not always be\n+\tknown statically.\n+\t* sem_prag.adb (Analyze_Pragma): Handle differently pragma\n+\tCompile_Time_Error in both compilation and in GNATprove mode.\n+\t(Validate_Compile_Time_Warning_Or_Error): Issue an error or\n+\twarning when the expression is not known at compile time.\n+\t* usage.adb: Add missing documentation for warning switches _c\n+\tand _r.\n+\t* warnsw.ads: Update comment.\n+\n 2020-05-25  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch6.adb (Check_Return_Obj_Accessibility): Use original"}, {"sha": "471bfdc2e370bad2c3d6d5c1b8b265494411e98e", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -1094,14 +1094,14 @@ This pragma can be used to generate additional compile time\n error messages. It\n is particularly useful in generics, where errors can be issued for\n specific problematic instantiations. The first parameter is a boolean\n-expression. The pragma is effective only if the value of this expression\n-is known at compile time, and has the value True. The set of expressions\n+expression. The pragma ensures that the value of an expression\n+is known at compile time, and has the value False. The set of expressions\n whose values are known at compile time includes all static boolean\n expressions, and also other values which the compiler can determine\n at compile time (e.g., the size of a record type set by an explicit\n size representation clause, or the value of a variable which was\n initialized to a constant and is known not to have been modified).\n-If these conditions are met, an error message is generated using\n+If these conditions are not met, an error message is generated using\n the value given as the second argument. This string value may contain\n embedded ASCII.LF characters to break the message into multiple lines.\n \n@@ -1118,7 +1118,10 @@ Syntax:\n \n \n Same as pragma Compile_Time_Error, except a warning is issued instead\n-of an error message. Note that if this pragma is used in a package that\n+of an error message. If switch *-gnatw_C* is used, a warning is only issued\n+if the value of the expression is known to be True at compile time, not when\n+the value of the expression is not known at compile time.\n+Note that if this pragma is used in a package that\n is with'ed by a client, the client will get the warning even though it\n is issued by a with'ed package (normally warnings in with'ed units are\n suppressed, but this is a special exception to that rule)."}, {"sha": "d616ca9bb5b84c3740c89fc92c113c732adf80e9", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Dec 10, 2019\n+GNAT Reference Manual , May 04, 2020\n \n AdaCore\n \n@@ -2492,14 +2492,14 @@ This pragma can be used to generate additional compile time\n error messages. It\n is particularly useful in generics, where errors can be issued for\n specific problematic instantiations. The first parameter is a boolean\n-expression. The pragma is effective only if the value of this expression\n-is known at compile time, and has the value True. The set of expressions\n+expression. The pragma ensures that the value of an expression\n+is known at compile time, and has the value False. The set of expressions\n whose values are known at compile time includes all static boolean\n expressions, and also other values which the compiler can determine\n at compile time (e.g., the size of a record type set by an explicit\n size representation clause, or the value of a variable which was\n initialized to a constant and is known not to have been modified).\n-If these conditions are met, an error message is generated using\n+If these conditions are not met, an error message is generated using\n the value given as the second argument. This string value may contain\n embedded ASCII.LF characters to break the message into multiple lines.\n \n@@ -2516,7 +2516,10 @@ pragma Compile_Time_Warning\n @end example\n \n Same as pragma Compile_Time_Error, except a warning is issued instead\n-of an error message. Note that if this pragma is used in a package that\n+of an error message. If switch @emph{-gnatw_C} is used, a warning is only issued\n+if the value of the expression is known to be True at compile time, not when\n+the value of the expression is not known at compile time.\n+Note that if this pragma is used in a package that\n is with'ed by a client, the client will get the warning even though it\n is issued by a with'ed package (normally warnings in with'ed units are\n suppressed, but this is a special exception to that rule)."}, {"sha": "abcfe779abe8408a74a4e93da8a885920afe3c32", "filename": "gcc/ada/libgnat/g-bytswa.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Flibgnat%2Fg-bytswa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Flibgnat%2Fg-bytswa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-bytswa.adb?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -45,7 +45,7 @@ package body GNAT.Byte_Swapping is\n    function Swapped2 (Input : Item) return Item is\n       function As_U16 is new Unchecked_Conversion (Item, U16);\n       function As_Item is new Unchecked_Conversion (U16, Item);\n-      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 2,\n+      pragma Compile_Time_Warning (Item'Max_Size_In_Storage_Elements /= 2,\n         \"storage size must be 2 bytes\");\n    begin\n       return As_Item (Bswap_16 (As_U16 (Input)));\n@@ -58,7 +58,7 @@ package body GNAT.Byte_Swapping is\n    function Swapped4 (Input : Item) return Item is\n       function As_U32 is new Unchecked_Conversion (Item, U32);\n       function As_Item is new Unchecked_Conversion (U32, Item);\n-      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 4,\n+      pragma Compile_Time_Warning (Item'Max_Size_In_Storage_Elements /= 4,\n         \"storage size must be 4 bytes\");\n    begin\n       return As_Item (Bswap_32 (As_U32 (Input)));\n@@ -71,7 +71,7 @@ package body GNAT.Byte_Swapping is\n    function Swapped8 (Input : Item) return Item is\n       function As_U64 is new Unchecked_Conversion (Item, U64);\n       function As_Item is new Unchecked_Conversion (U64, Item);\n-      pragma Compile_Time_Error (Item'Max_Size_In_Storage_Elements /= 8,\n+      pragma Compile_Time_Warning (Item'Max_Size_In_Storage_Elements /= 8,\n         \"storage size must be 8 bytes\");\n    begin\n       return As_Item (Bswap_64 (As_U64 (Input)));"}, {"sha": "936d699a8b706bbdf61d7123309b6cf3aa369498", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -7750,23 +7750,60 @@ package body Sem_Prag is\n       procedure Process_Compile_Time_Warning_Or_Error is\n          P : Node_Id := Parent (N);\n          Arg1x : constant Node_Id := Get_Pragma_Arg (Arg1);\n+\n       begin\n-         --  In GNATprove mode, pragmas Compile_Time_Error and\n+         Check_Arg_Count (2);\n+         Check_No_Identifiers;\n+         Check_Arg_Is_OK_Static_Expression (Arg2, Standard_String);\n+         Analyze_And_Resolve (Arg1x, Standard_Boolean);\n+\n+         --  In GNATprove mode, pragma Compile_Time_Error is translated as\n+         --  a Check pragma in GNATprove mode, handled as an assumption in\n+         --  GNATprove. This is correct as the compiler will issue an error\n+         --  if the condition cannot be statically evaluated to False.\n          --  Compile_Time_Warning are ignored, as the analyzer may not have the\n          --  same information as the compiler (in particular regarding size of\n-         --  objects decided in gigi) so it makes no sense to issue an error or\n-         --  warning in GNATprove.\n+         --  objects decided in gigi) so it makes no sense to issue a warning\n+         --  in GNATprove.\n \n          if GNATprove_Mode then\n-            Rewrite (N, Make_Null_Statement (Loc));\n+            if Prag_Id = Pragma_Compile_Time_Error then\n+               declare\n+                  New_Args : List_Id;\n+               begin\n+                  --  Implement Compile_Time_Error by generating\n+                  --  a corresponding Check pragma:\n+\n+                  --    pragma Check (name, condition);\n+\n+                  --  where name is the identifier matching the pragma name. So\n+                  --  rewrite pragma in this manner and analyze the result.\n+\n+                  New_Args := New_List\n+                    (Make_Pragma_Argument_Association\n+                       (Loc,\n+                        Expression => Make_Identifier (Loc, Pname)),\n+                     Make_Pragma_Argument_Association\n+                       (Sloc (Arg1x),\n+                        Expression => Arg1x));\n+\n+                  --  Rewrite as Check pragma\n+\n+                  Rewrite (N,\n+                           Make_Pragma (Loc,\n+                             Chars                        => Name_Check,\n+                             Pragma_Argument_Associations => New_Args));\n+\n+                  Analyze (N);\n+               end;\n+\n+            else\n+               Rewrite (N, Make_Null_Statement (Loc));\n+            end if;\n+\n             return;\n          end if;\n \n-         Check_Arg_Count (2);\n-         Check_No_Identifiers;\n-         Check_Arg_Is_OK_Static_Expression (Arg2, Standard_String);\n-         Analyze_And_Resolve (Arg1x, Standard_Boolean);\n-\n          --  If the condition is known at compile time (now), validate it now.\n          --  Otherwise, register the expression for validation after the back\n          --  end has been called, because it might be known at compile time\n@@ -31687,6 +31724,9 @@ package body Sem_Prag is\n       Arg1x : constant Node_Id := Get_Pragma_Arg (Arg1);\n       Arg2  : constant Node_Id := Next (Arg1);\n \n+      Pname   : constant Name_Id   := Pragma_Name_Unmapped (N);\n+      Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n+\n    begin\n       Analyze_And_Resolve (Arg1x, Standard_Boolean);\n \n@@ -31700,8 +31740,6 @@ package body Sem_Prag is\n \n             declare\n                Cent    : constant Entity_Id := Cunit_Entity (Current_Sem_Unit);\n-               Pname   : constant Name_Id   := Pragma_Name_Unmapped (N);\n-               Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n                Str     : constant String_Id :=\n                            Strval (Expr_Value_S (Get_Pragma_Arg (Arg2)));\n                Str_Len : constant Nat       := String_Length (Str);\n@@ -31787,10 +31825,14 @@ package body Sem_Prag is\n             end;\n          end if;\n \n-      --  Arg1x is not known at compile time, so issue a warning. This can\n-      --  happen only if the pragma's processing was deferred until after the\n-      --  back end is run (see Process_Compile_Time_Warning_Or_Error).\n-      --  Note that the warning control switch applies to both pragmas.\n+      --  Arg1x is not known at compile time, so possibly issue an error\n+      --  or warning. This can happen only if the pragma's processing\n+      --  was deferred until after the back end is run (see\n+      --  Process_Compile_Time_Warning_Or_Error). Note that the warning\n+      --  control switch applies to only the warning case.\n+\n+      elsif Prag_Id = Pragma_Compile_Time_Error then\n+         Error_Msg_N (\"condition is not known at compile time\", Arg1x);\n \n       elsif Warn_On_Unknown_Compile_Time_Warning then\n          Error_Msg_N (\"?condition is not known at compile time\", Arg1x);"}, {"sha": "0d1e1684eb7b14c2f82daffa5dbc46c5a0075906", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -495,6 +495,10 @@ begin\n    Write_Line (\"        C*   turn off warnings for constant conditional\");\n    Write_Line (\"        .c+  turn on warnings for unrepped components\");\n    Write_Line (\"        .C*  turn off warnings for unrepped components\");\n+   Write_Line (\"        _c*  turn on warnings for unknown \" &\n+                                                 \"Compile_Time_Warning\");\n+   Write_Line (\"        _C   turn off warnings for unknown \" &\n+                                                 \"Compile_Time_Warning\");\n    Write_Line (\"        d    turn on warnings for implicit dereference\");\n    Write_Line (\"        D*   turn off warnings for implicit dereference\");\n    Write_Line (\"        .d   turn on tagging of warnings with -gnatw switch\");\n@@ -571,6 +575,8 @@ begin\n    Write_Line (\"        R*   turn off warnings for redundant construct\");\n    Write_Line (\"        .r+  turn on warnings for object renaming function\");\n    Write_Line (\"        .R*  turn off warnings for object renaming function\");\n+   Write_Line (\"        _r   turn on warnings for components out of order\");\n+   Write_Line (\"        _R   turn off warnings for components out of order\");\n    Write_Line (\"        s    suppress all info/warnings\");\n    Write_Line (\"        .s   turn on warnings for overridden size clause\");\n    Write_Line (\"        .S*  turn off warnings for overridden size clause\");"}, {"sha": "abec8817cc9560bfafc00d896fcafa2f4059433a", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a14bfbd78324a25943998ed1e877e41ec4cd417/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=1a14bfbd78324a25943998ed1e877e41ec4cd417", "patch": "@@ -49,8 +49,8 @@ package Warnsw is\n    --  extensions.\n \n    Warn_On_Unknown_Compile_Time_Warning : Boolean := True;\n-   --  Warn on a pragma Compile_Time_Warning or Compile_Time_Error whose\n-   --  condition has a value that is not known at compile time.\n+   --  Warn on a pragma Compile_Time_Warning whose condition has a value that\n+   --  is not known at compile time.\n \n    Warn_On_Overridden_Size : Boolean := False;\n    --  Warn when explicit record component clause or array component_size"}]}