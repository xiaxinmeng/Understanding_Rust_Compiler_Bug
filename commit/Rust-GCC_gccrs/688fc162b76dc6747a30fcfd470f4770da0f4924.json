{"sha": "688fc162b76dc6747a30fcfd470f4770da0f4924", "node_id": "C_kwDOANBUbNoAKDY4OGZjMTYyYjc2ZGM2NzQ3YTMwZmNmZDQ3MGY0NzcwZGEwZjQ5MjQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-01-11T21:27:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-01-11T21:27:06Z"}, "message": "analyzer: fix leak false positives on \"*UNKNOWN = PTR;\" [PR108252]\n\nPR analyzer/108252 reports a false positive from -Wanalyzer-malloc-leak on\ncode like this:\n\n  *ptr_ptr = strdup(EXPR);\n\nwhere ptr_ptr is an UNKNOWN_VALUE.\n\nWhen we handle:\n  *UNKNOWN = PTR;\nstore::set_value normally marks *PTR as having escaped, and this means\nwe don't report PTR as leaking when the last usage of PTR is lost.\n\nHowever this only works for cases where PTR is a region_svalue.\nIn the example in the bug, it's a conjured_svalue, rather than a\nregion_svalue.  A similar problem can arise for FDs, which aren't\npointers.\n\nThis patch fixes the bug by updating store::set_value to mark any\nvalues stored via *UNKNOWN = VAL as not leaking.\n\nAdditionally, sm-malloc.cc's known_allocator_p hardcodes strdup and\nstrndup as allocators (and thus transitioning their result to\n\"unchecked\"), but we don't implement known_functions for these, leading\nto the LHS being a CONJURED_SVALUE, rather than a region_svalue to a\nheap-allocated region.  A similar issue happens with functions marked\nwith __attribute__((malloc)).  As part of a \"belt and braces\" fix, the\npatch also updates the handling of these functions, so that they use\nheap-allocated regions.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108252\n\t* kf.cc (class kf_strdup): New.\n\t(class kf_strndup): New.\n\t(register_known_functions): Register them.\n\t* region-model.cc (region_model::on_call_pre): Use\n\t&HEAP_ALLOCATED_REGION for the default result of an external\n\tfunction with the \"malloc\" attribute, rather than CONJURED_SVALUE.\n\t(region_model::get_or_create_region_for_heap_alloc): Allow\n\t\"size_in_bytes\" to be NULL.\n\t* store.cc (store::set_value): When handling *UNKNOWN = VAL,\n\tmark VAL as \"maybe bound\".\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108252\n\t* gcc.dg/analyzer/attr-malloc-pr108252.c: New test.\n\t* gcc.dg/analyzer/fd-leak-pr108252.c: New test.\n\t* gcc.dg/analyzer/flex-with-call-summaries.c: Remove xfail from\n\twarning false +ve directives.\n\t* gcc.dg/analyzer/pr103217-2.c: Add -Wno-analyzer-too-complex.\n\t* gcc.dg/analyzer/pr103217-3.c: Likewise.\n\t* gcc.dg/analyzer/strdup-pr108252.c: New test.\n\t* gcc.dg/analyzer/strndup-pr108252.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "ff0f5ea0fcfdc97d7508791b82793a27de1128f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0f5ea0fcfdc97d7508791b82793a27de1128f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688fc162b76dc6747a30fcfd470f4770da0f4924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688fc162b76dc6747a30fcfd470f4770da0f4924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688fc162b76dc6747a30fcfd470f4770da0f4924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688fc162b76dc6747a30fcfd470f4770da0f4924/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b4ce18379cd336d99d7c71701be28118905b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b4ce18379cd336d99d7c71701be28118905b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b4ce18379cd336d99d7c71701be28118905b57"}], "stats": {"total": 180, "additions": 166, "deletions": 14}, "files": [{"sha": "53190c51772a0edee9a3da56c1d977791d45cefe", "filename": "gcc/analyzer/kf.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fkf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fkf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fkf.cc?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -851,6 +851,32 @@ kf_strcpy::impl_call_pre (const call_details &cd) const\n   model->set_value (sized_dest_reg, src_contents_sval, cd.get_ctxt ());\n }\n \n+/* Handler for \"strdup\" and \"__builtin_strdup\".  */\n+\n+class kf_strdup : public known_function\n+{\n+public:\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return (cd.num_args () == 1 && cd.arg_is_pointer_p (0));\n+  }\n+  void impl_call_pre (const call_details &cd) const final override\n+  {\n+    region_model *model = cd.get_model ();\n+    region_model_manager *mgr = cd.get_manager ();\n+    /* Ideally we'd get the size here, and simulate copying the bytes.  */\n+    const region *new_reg\n+      = model->get_or_create_region_for_heap_alloc (NULL, cd.get_ctxt ());\n+    model->mark_region_as_unknown (new_reg, NULL);\n+    if (cd.get_lhs_type ())\n+      {\n+\tconst svalue *ptr_sval\n+\t  = mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n+\tcd.maybe_set_lhs (ptr_sval);\n+      }\n+  }\n+};\n+\n /* Handle the on_call_pre part of \"strlen\".  */\n \n class kf_strlen : public known_function\n@@ -892,6 +918,32 @@ kf_strlen::impl_call_pre (const call_details &cd) const\n   /* Otherwise a conjured value.  */\n }\n \n+/* Handler for \"strndup\" and \"__builtin_strndup\".  */\n+\n+class kf_strndup : public known_function\n+{\n+public:\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return (cd.num_args () == 2 && cd.arg_is_pointer_p (0));\n+  }\n+  void impl_call_pre (const call_details &cd) const final override\n+  {\n+    region_model *model = cd.get_model ();\n+    region_model_manager *mgr = cd.get_manager ();\n+    /* Ideally we'd get the size here, and simulate copying the bytes.  */\n+    const region *new_reg\n+      = model->get_or_create_region_for_heap_alloc (NULL, cd.get_ctxt ());\n+    model->mark_region_as_unknown (new_reg, NULL);\n+    if (cd.get_lhs_type ())\n+      {\n+\tconst svalue *ptr_sval\n+\t  = mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n+\tcd.maybe_set_lhs (ptr_sval);\n+      }\n+  }\n+};\n+\n class kf_ubsan_bounds : public internal_known_function\n {\n   /* Empty.  */\n@@ -943,6 +995,8 @@ register_known_functions (known_function_manager &kfm)\n     kfm.add (BUILT_IN_STRCHR, make_unique<kf_strchr> ());\n     kfm.add (BUILT_IN_STRCPY, make_unique<kf_strcpy> (2));\n     kfm.add (BUILT_IN_STRCPY_CHK, make_unique<kf_strcpy> (3));\n+    kfm.add (BUILT_IN_STRDUP, make_unique<kf_strdup> ());\n+    kfm.add (BUILT_IN_STRNDUP, make_unique<kf_strndup> ());\n     kfm.add (BUILT_IN_STRLEN, make_unique<kf_strlen> ());\n \n     register_varargs_builtins (kfm);\n@@ -951,6 +1005,8 @@ register_known_functions (known_function_manager &kfm)\n   /* Known builtins and C standard library functions.  */\n   {\n     kfm.add (\"memset\", make_unique<kf_memset> ());\n+    kfm.add (\"strdup\", make_unique<kf_strdup> ());\n+    kfm.add (\"strndup\", make_unique<kf_strndup> ());\n   }\n \n   /* Known POSIX functions, and some non-standard extensions.  */"}, {"sha": "2e59fbaadd713fa24eb1bb94d99a6c75b26be956", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -1441,6 +1441,8 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n   if (ctxt)\n     check_call_args (cd);\n \n+  tree callee_fndecl = get_fndecl_for_call (call, ctxt);\n+\n   /* Some of the cases below update the lhs of the call based on the\n      return value, but not all.  Provide a default value, which may\n      get overwritten below.  */\n@@ -1450,13 +1452,22 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n       const svalue *sval = maybe_get_const_fn_result (cd);\n       if (!sval)\n \t{\n-\t  /* For the common case of functions without __attribute__((const)),\n-\t     use a conjured value, and purge any prior state involving that\n-\t     value (in case this is in a loop).  */\n-\t  sval = m_mgr->get_or_create_conjured_svalue (TREE_TYPE (lhs), call,\n-\t\t\t\t\t\t       lhs_region,\n-\t\t\t\t\t\t       conjured_purge (this,\n-\t\t\t\t\t\t\t\t       ctxt));\n+\t  if (callee_fndecl\n+\t      && lookup_attribute (\"malloc\", DECL_ATTRIBUTES (callee_fndecl)))\n+\t    {\n+\t      const region *new_reg\n+\t\t= get_or_create_region_for_heap_alloc (NULL, ctxt);\n+\t      mark_region_as_unknown (new_reg, NULL);\n+\t      sval = m_mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n+\t    }\n+\t  else\n+\t    /* For the common case of functions without __attribute__((const)),\n+\t       use a conjured value, and purge any prior state involving that\n+\t       value (in case this is in a loop).  */\n+\t    sval = m_mgr->get_or_create_conjured_svalue (TREE_TYPE (lhs), call,\n+\t\t\t\t\t\t\t lhs_region,\n+\t\t\t\t\t\t\t conjured_purge (this,\n+\t\t\t\t\t\t\t\t\t ctxt));\n \t}\n       set_value (lhs_region, sval, ctxt);\n     }\n@@ -1469,7 +1480,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \treturn false;\n       }\n \n-  if (tree callee_fndecl = get_fndecl_for_call (call, ctxt))\n+  if (callee_fndecl)\n     {\n       int callee_fndecl_flags = flags_from_decl_or_type (callee_fndecl);\n \n@@ -4909,8 +4920,9 @@ region_model::get_or_create_region_for_heap_alloc (const svalue *size_in_bytes,\n   get_referenced_base_regions (base_regs_in_use);\n   const region *reg\n     = m_mgr->get_or_create_region_for_heap_alloc (base_regs_in_use);\n-  if (compat_types_p (size_in_bytes->get_type (), size_type_node))\n-    set_dynamic_extents (reg, size_in_bytes, ctxt);\n+  if (size_in_bytes)\n+    if (compat_types_p (size_in_bytes->get_type (), size_type_node))\n+      set_dynamic_extents (reg, size_in_bytes, ctxt);\n   return reg;\n }\n "}, {"sha": "6ad7110a53c71bb910de6a6e617032aaaa7b6d6d", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -2578,6 +2578,8 @@ store::set_value (store_manager *mgr, const region *lhs_reg,\n \t  const region *ptr_base_reg = ptr_dst->get_base_region ();\n \t  mark_as_escaped (ptr_base_reg);\n \t}\n+      if (uncertainty)\n+\tuncertainty->on_maybe_bound_sval (rhs_sval);\n     }\n   else if (lhs_base_reg->tracked_p ())\n     {"}, {"sha": "5e3437985cb8acbc27c23b9bfce9cdd9b0850658", "filename": "gcc/testsuite/gcc.dg/analyzer/attr-malloc-pr108252.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-pr108252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-pr108252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-pr108252.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -0,0 +1,25 @@\n+struct foo\n+{\n+  int m_int;\n+};\n+\n+extern void foo_release (struct foo *);\n+extern struct foo *foo_acquire (void)\n+  __attribute__ ((malloc (foo_release)));\n+\n+struct {\n+  /* [...snip...] */\n+  struct foo *listen_default_ciphers;\n+  struct foo *connect_default_ciphers;\n+  /* [...snip...] */\n+} g;\n+\n+int parse_global_ciphers(char **args)\n+{\n+  struct foo **target;\n+  target = ((args[0][12] == 'b')\n+\t    ? &g.listen_default_ciphers\n+\t    : &g.connect_default_ciphers);\n+  *target = foo_acquire ();\n+  return 0; /* { dg-bogus \"leak\" } */\n+}"}, {"sha": "29f58d361c1ce450e43065d79fc0f38aab33c0e0", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-leak-pr108252.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-leak-pr108252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-leak-pr108252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-leak-pr108252.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -0,0 +1,15 @@\n+extern int open(const char *, int mode);\n+#define O_RDONLY 0\n+\n+struct {\n+  int fd_a;\n+  int fd_b;\n+} g;\n+\n+int test (const char *path, int flag)\n+{\n+  int *target;\n+  target = flag ? &g.fd_a : &g.fd_b;\n+  *target = open (path, O_RDONLY);  \n+  return 0; /* { dg-bogus \"leak of file descriptor\" } */\n+}"}, {"sha": "0ff652b427ba11ac149efaf6a8f1cbe05f48829b", "filename": "gcc/testsuite/gcc.dg/analyzer/flex-with-call-summaries.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflex-with-call-summaries.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflex-with-call-summaries.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflex-with-call-summaries.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -913,8 +913,7 @@ static int yy_get_next_buffer (void)\n \t\tif ( number_to_move == YY_MORE_ADJ )\n \t\t\t{\n \t\t\tret_val = EOB_ACT_END_OF_FILE;\n-\t\t\tyyrestart( yyin  );/* { dg-bogus \"leak\" \"\" { xfail *-*-* } } */\n-\t\t\t/* TODO: leak false positive: PR analyzer/103546.  */\n+\t\t\tyyrestart( yyin  );/* { dg-bogus \"leak\" } */\n \t\t\t}\n \n \t\telse\n@@ -1101,8 +1100,7 @@ static int yy_get_next_buffer (void)\n #ifdef __cplusplus\n \t\t\t\t\treturn yyinput();\n #else\n-\t\t\t\t\treturn input();  /* { dg-bogus \"infinite recursion\" \"\" { xfail *-*-* } } */\n-\t\t\t\t\t/* TODO: infinite recursion positive: PR analyzer/103546.  */\n+\t\t\t\t\treturn input();  /* { dg-bogus \"infinite recursion\" } */\n #endif\n \t\t\t\t\t}\n "}, {"sha": "aa8bca7ce5f099c4db7e1aa07656453826cfb379", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n typedef __SIZE_TYPE__ size_t;\n \n extern void *calloc (size_t __nmemb, size_t __size)"}, {"sha": "e5f1e4bd62d1900452de4dafe9132049d5620fb0", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n extern char *strdup (const char *__s)\n   __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n "}, {"sha": "d79d11fca66c89bc43595099b352b321530df247", "filename": "gcc/testsuite/gcc.dg/analyzer/strdup-pr108252.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-pr108252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-pr108252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrdup-pr108252.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -0,0 +1,19 @@\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+struct {\n+  /* [...snip...] */\n+  char *listen_default_ciphers;\n+  char *connect_default_ciphers;\n+  /* [...snip...] */\n+} g;\n+\n+int parse_global_ciphers(char **args)\n+{\n+  char **target;\n+  target = ((args[0][12] == 'b')\n+\t    ? &g.listen_default_ciphers\n+\t    : &g.connect_default_ciphers);\n+  *target = strdup(args[1]);\n+  return 0; /* { dg-bogus \"leak\" } */\n+}"}, {"sha": "3e64f27c29a6bf330a13c2da584b157a6ad6e43a", "filename": "gcc/testsuite/gcc.dg/analyzer/strndup-pr108252.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrndup-pr108252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fc162b76dc6747a30fcfd470f4770da0f4924/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrndup-pr108252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrndup-pr108252.c?ref=688fc162b76dc6747a30fcfd470f4770da0f4924", "patch": "@@ -0,0 +1,21 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern char *strndup (const char *__s, size_t sz)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+struct {\n+  /* [...snip...] */\n+  char *listen_default_ciphers;\n+  char *connect_default_ciphers;\n+  /* [...snip...] */\n+} g;\n+\n+int parse_global_ciphers(char **args)\n+{\n+  char **target;\n+  target = ((args[0][12] == 'b')\n+\t    ? &g.listen_default_ciphers\n+\t    : &g.connect_default_ciphers);\n+  *target = strndup(args[1], 42);\n+  return 0; /* { dg-bogus \"leak\" } */\n+}"}]}