{"sha": "d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlNmI1NWI3YWFkMWQ3NDk3OWY5ZWE1YzMwMjkzNDBlOGUzNjcwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-23T12:39:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-23T12:39:18Z"}, "message": "Warning fixes:\n\n        * alpha.c (override_options): Use ISDIGIT(), not isdigit().  Cast\n        the argument to (unsigned char).\n        * alpha.h (EXTRA_SPECS): Add missing initializers.\n        (ASM_GENERATE_INTERNAL_LABEL): Ensure the argument matches the\n        format specifier.\n\nFrom-SVN: r23253", "tree": {"sha": "596b98d920bcb1fb71092ae778db7ff5306e21ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/596b98d920bcb1fb71092ae778db7ff5306e21ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/comments", "author": null, "committer": null, "parents": [{"sha": "c4214310ab9803b44a26494c2fc1fcd960ee1b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4214310ab9803b44a26494c2fc1fcd960ee1b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4214310ab9803b44a26494c2fc1fcd960ee1b0b"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "f39d2f64a4579e148938f3b468f5359fc84a67aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "patch": "@@ -1,3 +1,12 @@\n+Fri Oct 23 15:34:14 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c (override_options): Use ISDIGIT(), not isdigit().  Cast\n+\tthe argument to (unsigned char).\n+\n+\t* alpha.h (EXTRA_SPECS): Add missing initializers.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Ensure the argument matches the\n+\tformat specifier.\n+\n Fri Oct 23 13:12:35 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* mn10200.md (truncated shift): Accept constant inputs too."}, {"sha": "c9506a6667982030bcbed7b906f3d19ad2feaa91", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "patch": "@@ -264,11 +264,11 @@ override_options ()\n     if (!alpha_mlat_string)\n       alpha_mlat_string = \"L1\";\n \n-    if (isdigit (alpha_mlat_string[0])\n+    if (ISDIGIT ((unsigned char)alpha_mlat_string[0])\n \t&& (lat = strtol (alpha_mlat_string, &end, 10), *end == '\\0'))\n       ;\n     else if ((alpha_mlat_string[0] == 'L' || alpha_mlat_string[0] == 'l')\n-\t     && isdigit (alpha_mlat_string[1])\n+\t     && ISDIGIT ((unsigned char)alpha_mlat_string[1])\n \t     && alpha_mlat_string[2] == '\\0')\n       {\n \tstatic int const cache_latency[][4] = "}, {"sha": "d9efa596233fc1f1230d95338650cd4678129f93", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e6b55b7aad1d74979f9ea5c3029340e8e36707/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "patch": "@@ -308,21 +308,21 @@ extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define SUBTARGET_EXTRA_SPECS\n #endif\n \n-#define EXTRA_SPECS\t\t\t\t\\\n-  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC },\t\t\\\n-  { \"cpp_am_max\", CPP_AM_MAX_SPEC },\t\t\\\n-  { \"cpp_am_cix\", CPP_AM_CIX_SPEC },\t\t\\\n-  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC },\t\t\\\n-  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC },\t\t\\\n-  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC },\t\t\\\n-  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC },\t\t\\\n-  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC },\t\t\\\n-  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC },\t\\\n-  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC },\t\\\n-  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC },\t\t\\\n-  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC },\t\\\n-  { \"cpp_cpu\", CPP_CPU_SPEC },\t\t\t\\\n-  { \"cpp_subtarget\", CPP_SUBTARGET_SPEC },\t\\\n+#define EXTRA_SPECS\t\t\t\t\t\t\\\n+  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_am_max\", CPP_AM_MAX_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_am_cix\", CPP_AM_CIX_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"cpp_cpu\", CPP_CPU_SPEC, 0, 0, 0, 0 },\t\t\t\\\n+  { \"cpp_subtarget\", CPP_SUBTARGET_SPEC, 0, 0, 0, 0 },\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n \n@@ -1972,7 +1972,7 @@ literal_section ()\t\t\t\t\t\t\\\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*$%s%d\", PREFIX, NUM)\n+  sprintf ((LABEL), \"*$%s%ld\", (PREFIX), (long)(NUM))\n \n /* Check a floating-point value for validity for a particular machine mode.  */\n "}]}