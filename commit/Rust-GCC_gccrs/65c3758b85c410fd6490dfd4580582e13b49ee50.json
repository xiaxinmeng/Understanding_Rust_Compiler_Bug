{"sha": "65c3758b85c410fd6490dfd4580582e13b49ee50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjMzc1OGI4NWM0MTBmZDY0OTBkZmQ0NTgwNTgyZTEzYjQ5ZWU1MA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-05-10T22:13:39Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-05-10T22:13:39Z"}, "message": "target-supports-dg.exp (check-flags): New.\n\n\t* lib/target-supports-dg.exp (check-flags): New.\n\t(dg-skip-if): Move flag checks.\n\nFrom-SVN: r113686", "tree": {"sha": "88d1e2f31e0e1923f00f0f8d7faf6d5abf916311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d1e2f31e0e1923f00f0f8d7faf6d5abf916311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c3758b85c410fd6490dfd4580582e13b49ee50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c3758b85c410fd6490dfd4580582e13b49ee50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c3758b85c410fd6490dfd4580582e13b49ee50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c3758b85c410fd6490dfd4580582e13b49ee50/comments", "author": null, "committer": null, "parents": [{"sha": "403ac6aca3a1d11c54e1b7cfac9d8d8681f8dba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403ac6aca3a1d11c54e1b7cfac9d8d8681f8dba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403ac6aca3a1d11c54e1b7cfac9d8d8681f8dba5"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "35fbf2dd7a3bdaa96b192e9ffacc7fc8a5745963", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c3758b85c410fd6490dfd4580582e13b49ee50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c3758b85c410fd6490dfd4580582e13b49ee50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65c3758b85c410fd6490dfd4580582e13b49ee50", "patch": "@@ -1,3 +1,8 @@\n+2006-05-10  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/target-supports-dg.exp (check-flags): New.\n+\t(dg-skip-if): Move flag checks.\n+\n 2006-05-09  Steve Ellcey  <sje@cup.hp.com>\n \n \t* lib/target-supports-dg.exp (dg-require-cxa-atexit): New."}, {"sha": "128ed8fd93b53c52621a7813e89bbcaa3451d3ba", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c3758b85c410fd6490dfd4580582e13b49ee50/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c3758b85c410fd6490dfd4580582e13b49ee50/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=65c3758b85c410fd6490dfd4580582e13b49ee50", "patch": "@@ -179,6 +179,40 @@ proc check_test_flags { args } {\n     return $answer\n }\n \n+# Compare flags for a test directive against flags that will be used to\n+# compile the test: multilib flags, flags for torture options, and either\n+# the default flags for this group of tests or flags specified with a\n+# previous dg-options directive.\n+\n+proc check-flags { args } {\n+    global compiler_flags\n+    # These variables are from DejaGnu's dg-test.\n+    upvar dg-extra-tool-flags extra_tool_flags\n+    upvar tool_flags tool_flags\n+\n+    # The args are within another list; pull them out.\n+    set args [lindex $args 0]\n+\n+    # Start the list with a dummy tool name so the list will match \"*\"\n+    # if there are no flags.\n+    set compiler_flags \" toolname \"\n+    append compiler_flags $extra_tool_flags\n+    append compiler_flags $tool_flags\n+    set dest [target_info name]\n+    if [board_info $dest exists multilib_flags] {\n+\tappend compiler_flags \"[board_info $dest multilib_flags] \"\n+    }\n+\n+    # The target list might be an effective-target keyword, so replace\n+    # the original list with \"*-*-*\", since we already know it matches.\n+    set result [check_conditional_xfail [lreplace $args 1 1 \"*-*-*\"]]\n+\n+    # Any value in this variable was left over from an earlier test.\n+    set compiler_flags \"\"\n+\n+    return $result\n+}\n+\n # Skip the test (report it as UNSUPPORTED) if the target list and\n # included flags are matched and the excluded flags are not matched.\n #\n@@ -190,35 +224,24 @@ proc check_test_flags { args } {\n # group of tests or flags specified with a previous dg-options command.\n \n proc dg-skip-if { args } {\n+    # Don't bother if we're already skipping the test.\n+    upvar dg-do-what dg-do-what\n+    if { [lindex ${dg-do-what} 1] == \"N\" } {\n+      return\n+    }\n+\n     set args [lreplace $args 0 0]\n \n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n-\t# The target list matched; now check the flags.  The DejaGnu proc\n-\t# check_conditional_xfail will look at the options in compiler_flags,\n-\t# so set that up for this test based on flags we know about.  Start\n-\t# the list with a dummy tool name so the list will match \"*\" if\n-\t# there are no flags.\n-\n-\tglobal compiler_flags\n-\tupvar dg-extra-tool-flags extra_tool_flags\n-\n-\tset compiler_flags \" toolname \"\n-\tappend compiler_flags $extra_tool_flags\n-\tset dest [target_info name]\n-\tif [board_info $dest exists multilib_flags] {\n-\t    append compiler_flags \"[board_info $dest multilib_flags] \"\n-\t}\n+\t# These are defined in DejaGnu's dg-test, needed by check-flags.\n+\tupvar dg-extra-tool-flags dg-extra-tool-flags\n+\tupvar tool_flags tool_flags\n \n-\t# The target list might be an effective-target keyword, so replace\n-\t# the original list with \"*-*-*\".\n-\tif [check_conditional_xfail [lreplace $args 1 1 \"*-*-*\"]] {\n+\tif [check-flags $args] {\n \t    upvar dg-do-what dg-do-what\n             set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n \t}\n-\n-\t# Any value in this variable was left over from an earlier test.\n-\tset compiler_flags \"\"\n     }\n }\n "}]}