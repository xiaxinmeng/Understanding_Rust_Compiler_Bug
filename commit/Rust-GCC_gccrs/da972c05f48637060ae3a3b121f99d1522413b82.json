{"sha": "da972c05f48637060ae3a3b121f99d1522413b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5NzJjMDVmNDg2MzcwNjBhZTNhM2IxMjFmOTlkMTUyMjQxM2I4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-11T21:03:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-11T21:03:53Z"}, "message": "re PR middle-end/85956 (ICE in wide_int_to_tree_1, at tree.c:1549)\n\n\tPR middle-end/85956\n\tPR lto/88733\n\t* tree-inline.h (struct copy_body_data): Add adjust_array_error_bounds\n\tfield.\n\t* tree-inline.c (remap_type_1): Formatting fix.  If TYPE_MAX_VALUE of\n\tARRAY_TYPE's TYPE_DOMAIN is newly error_mark_node, replace it with\n\ta dummy \"omp dummy var\" variable if id->adjust_array_error_bounds.\n\t* omp-low.c (new_omp_context): Set cb.adjust_array_error_bounds.\nfortran/\n\t* trans-openmp.c: Include attribs.h.\n\t(gfc_walk_alloc_comps, gfc_omp_clause_linear_ctor): Handle\n\tVAR_DECL max bound with \"omp dummy var\" attribute like NULL or\n\terror_mark_node - recompute number of elts independently.\ntestsuite/\n\t* c-c++-common/gomp/pr85956.c: New test.\n\t* g++.dg/gomp/pr88733.C: New test.\n\nFrom-SVN: r267858", "tree": {"sha": "52b89022a5b5b913eb3ed34efd5c71cfade6bf23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b89022a5b5b913eb3ed34efd5c71cfade6bf23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da972c05f48637060ae3a3b121f99d1522413b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da972c05f48637060ae3a3b121f99d1522413b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da972c05f48637060ae3a3b121f99d1522413b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da972c05f48637060ae3a3b121f99d1522413b82/comments", "author": null, "committer": null, "parents": [{"sha": "b13091dd9dbabe7fde4b112c4bfb9be729493c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13091dd9dbabe7fde4b112c4bfb9be729493c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13091dd9dbabe7fde4b112c4bfb9be729493c16"}], "stats": {"total": 116, "additions": 112, "deletions": 4}, "files": [{"sha": "0b86eec6cf106a7ed4ac91ffe9ea4a55abf9bb9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -1,3 +1,14 @@\n+2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/85956\n+\tPR lto/88733\n+\t* tree-inline.h (struct copy_body_data): Add adjust_array_error_bounds\n+\tfield.\n+\t* tree-inline.c (remap_type_1): Formatting fix.  If TYPE_MAX_VALUE of\n+\tARRAY_TYPE's TYPE_DOMAIN is newly error_mark_node, replace it with\n+\ta dummy \"omp dummy var\" variable if id->adjust_array_error_bounds.\n+\t* omp-low.c (new_omp_context): Set cb.adjust_array_error_bounds.\n+\n 2019-01-11  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/87305"}, {"sha": "c54da9dc2749a3a6150648d5c0153f3062d48911", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -1,7 +1,16 @@\n+2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/85956\n+\tPR lto/88733\n+\t* trans-openmp.c: Include attribs.h.\n+\t(gfc_walk_alloc_comps, gfc_omp_clause_linear_ctor): Handle\n+\tVAR_DECL max bound with \"omp dummy var\" attribute like NULL or\n+\terror_mark_node - recompute number of elts independently.\n+\n 2019-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/59345\n-\t* trans-array.c (gfc_conv_parameter_array):  Temporary\n+\t* trans-array.c (gfc_conv_parameter_array): Temporary\n \tarrays generated for expressions do not need to be repacked.\n \n 2019-01-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n@@ -103,7 +112,7 @@\n \n 2019-01-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\t* parse.c (decode_statement):  Suppress \"Unclassifiable statement\"\n+\t* parse.c (decode_statement): Suppress \"Unclassifiable statement\"\n \terror if previous error messages were emittes.\n \n 2019-01-01  Thomas Koenig  <tkoenig@gcc.gnu.org>"}, {"sha": "1fdb70e9bd8dd14ce0b3ad46ae3741735ce2c0ac", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #undef GCC_DIAG_STYLE\n #define GCC_DIAG_STYLE __gcc_gfc__\n+#include \"attribs.h\"\n \n int ompws_flags;\n \n@@ -297,10 +298,19 @@ gfc_walk_alloc_comps (tree decl, tree dest, tree var,\n \t}\n       else\n \t{\n+\t  bool compute_nelts = false;\n \t  if (!TYPE_DOMAIN (type)\n \t      || TYPE_MAX_VALUE (TYPE_DOMAIN (type)) == NULL_TREE\n \t      || TYPE_MIN_VALUE (TYPE_DOMAIN (type)) == error_mark_node\n \t      || TYPE_MAX_VALUE (TYPE_DOMAIN (type)) == error_mark_node)\n+\t    compute_nelts = true;\n+\t  else if (VAR_P (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n+\t    {\n+\t      tree a = DECL_ATTRIBUTES (TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n+\t      if (lookup_attribute (\"omp dummy var\", a))\n+\t\tcompute_nelts = true;\n+\t    }\n+\t  if (compute_nelts)\n \t    {\n \t      tem = fold_build2 (EXACT_DIV_EXPR, sizetype,\n \t\t\t\t TYPE_SIZE_UNIT (type),\n@@ -912,11 +922,20 @@ gfc_omp_clause_linear_ctor (tree clause, tree dest, tree src, tree add)\n       && (!GFC_DECL_GET_SCALAR_ALLOCATABLE (OMP_CLAUSE_DECL (clause))\n \t  || !POINTER_TYPE_P (type)))\n     {\n+      bool compute_nelts = false;\n       gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n       if (!TYPE_DOMAIN (type)\n \t  || TYPE_MAX_VALUE (TYPE_DOMAIN (type)) == NULL_TREE\n \t  || TYPE_MIN_VALUE (TYPE_DOMAIN (type)) == error_mark_node\n \t  || TYPE_MAX_VALUE (TYPE_DOMAIN (type)) == error_mark_node)\n+\tcompute_nelts = true;\n+      else if (VAR_P (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n+\t{\n+\t  tree a = DECL_ATTRIBUTES (TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n+\t  if (lookup_attribute (\"omp dummy var\", a))\n+\t    compute_nelts = true;\n+\t}\n+      if (compute_nelts)\n \t{\n \t  nelems = fold_build2 (EXACT_DIV_EXPR, sizetype,\n \t\t\t\tTYPE_SIZE_UNIT (type),"}, {"sha": "1043b6b806c697f8973cde021f3e83d0a534f93e", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -872,6 +872,7 @@ new_omp_context (gimple *stmt, omp_context *outer_ctx)\n     }\n \n   ctx->cb.decl_map = new hash_map<tree, tree>;\n+  ctx->cb.adjust_array_error_bounds = true;\n \n   return ctx;\n }"}, {"sha": "f991df8673c4f96505cb8204ad3fc97fdbace805", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -1,3 +1,10 @@\n+2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/85956\n+\tPR lto/88733\n+\t* c-c++-common/gomp/pr85956.c: New test.\n+\t* g++.dg/gomp/pr88733.C: New test.\n+\n 2019-01-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR C++/88114"}, {"sha": "bfbf1e302cffe5c4ef119320196cc8a2c7e9561a", "filename": "gcc/testsuite/c-c++-common/gomp/pr85956.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr85956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr85956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr85956.c?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/85956 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -Wall\" } */\n+\n+void\n+foo (int n, void *p)\n+{\n+  int (*a)[n] = (int (*)[n]) p;\n+  #pragma omp parallel shared(a) default(none)\n+  #pragma omp master\n+    a[-1][-1] = 42;\t/* { dg-warning \"array subscript -1 is below array bounds\" } */\n+}"}, {"sha": "f80de7ec480362d4c09b560863b6e1a63635861b", "filename": "gcc/testsuite/g++.dg/gomp/pr88733.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88733.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88733.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88733.C?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -0,0 +1,29 @@\n+// PR lto/88733\n+// { dg-do compile }\n+// { dg-additional-options \"-flto -ffat-lto-objects\" { target lto } }\n+\n+struct A { int f; } a;\n+\n+__attribute__((noipa)) void\n+bar (A **x, int)\n+{\n+  x[0] = &a;\n+}\n+\n+int\n+foo (int n)\n+{\n+  int g;\n+  A *j[n];\n+  bar (j, n);\n+#pragma omp parallel\n+#pragma omp single\n+  g = j[0]->f;\n+  return g;\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+}"}, {"sha": "88620770212a16423e12add1ff35cba52104d351", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -523,11 +523,27 @@ remap_type_1 (tree type, copy_body_data *id)\n \n       if (TYPE_MAIN_VARIANT (new_tree) != new_tree)\n \t{\n-\t  gcc_checking_assert (TYPE_DOMAIN (type) == TYPE_DOMAIN (TYPE_MAIN_VARIANT (type)));\n+\t  gcc_checking_assert (TYPE_DOMAIN (type)\n+\t\t\t       == TYPE_DOMAIN (TYPE_MAIN_VARIANT (type)));\n \t  TYPE_DOMAIN (new_tree) = TYPE_DOMAIN (TYPE_MAIN_VARIANT (new_tree));\n \t}\n       else\n-\tTYPE_DOMAIN (new_tree) = remap_type (TYPE_DOMAIN (new_tree), id);\n+        {\n+\t  TYPE_DOMAIN (new_tree) = remap_type (TYPE_DOMAIN (new_tree), id);\n+\t  /* For array bounds where we have decided not to copy over the bounds\n+\t     variable which isn't used in OpenMP/OpenACC region, change them to\n+\t     an uninitialized VAR_DECL temporary.  */\n+\t  if (TYPE_MAX_VALUE (TYPE_DOMAIN (new_tree)) == error_mark_node\n+\t      && id->adjust_array_error_bounds\n+\t      && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != error_mark_node)\n+\t    {\n+\t      tree v = create_tmp_var (TREE_TYPE (TYPE_DOMAIN (new_tree)));\n+\t      DECL_ATTRIBUTES (v)\n+\t\t= tree_cons (get_identifier (\"omp dummy var\"), NULL_TREE,\n+\t\t\t     DECL_ATTRIBUTES (v));\n+\t      TYPE_MAX_VALUE (TYPE_DOMAIN (new_tree)) = v;\n+\t    }\n+        }\n       break;\n \n     case RECORD_TYPE:"}, {"sha": "f09e2b4350864059d0ca28a20a385577d8956f49", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da972c05f48637060ae3a3b121f99d1522413b82/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=da972c05f48637060ae3a3b121f99d1522413b82", "patch": "@@ -122,6 +122,10 @@ struct copy_body_data\n   /* True if the location information will need to be reset.  */\n   bool reset_location;\n \n+  /* Replace error_mark_node as upper bound of array types with\n+     an uninitialized VAR_DECL temporary.  */\n+  bool adjust_array_error_bounds;\n+\n   /* A function to be called when duplicating BLOCK nodes.  */\n   void (*transform_lang_insert_block) (tree);\n "}]}