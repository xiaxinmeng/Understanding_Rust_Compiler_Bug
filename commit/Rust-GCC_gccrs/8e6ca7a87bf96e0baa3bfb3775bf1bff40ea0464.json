{"sha": "8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2Y2E3YTg3YmY5NmUwYmFhM2JmYjM3NzViZjFiZmY0MGVhMDQ2NA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-02-25T21:58:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:01Z"}, "message": "[Ada] Ada2020 AI12-0282: Shared variable control aspects in generics\n\n2020-06-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Require\n\texact match between formal and actual for aspects Atomic,\n\tAtomic_Component, Volatile, and Volatile_Components.", "tree": {"sha": "862f3e866e1177ab12b59772dc0a2df2fe8faab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/862f3e866e1177ab12b59772dc0a2df2fe8faab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cb816ba5a1b4ab00df26699829483d7c1d156c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cb816ba5a1b4ab00df26699829483d7c1d156c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05cb816ba5a1b4ab00df26699829483d7c1d156c"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "106226fdfc6bb686fdc400f1e016393f9137cc43", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "patch": "@@ -12398,65 +12398,67 @@ package body Sem_Ch12 is\n       procedure Check_Shared_Variable_Control_Aspects is\n       begin\n          if Ada_Version >= Ada_2020 then\n-            if Is_Atomic (A_Gen_T) and then not Is_Atomic (Act_T) then\n+            if Is_Atomic (A_Gen_T) /= Is_Atomic (Act_T) then\n                Error_Msg_NE\n-                  (\"actual for& must be an atomic type\", Actual, A_Gen_T);\n+                  (\"actual for& has different Atomic aspect\", Actual, A_Gen_T);\n             end if;\n \n-            if Is_Volatile (A_Gen_T) and then not Is_Volatile (Act_T) then\n+            if Is_Volatile (A_Gen_T) /= Is_Volatile (Act_T) then\n                Error_Msg_NE\n-                  (\"actual for& must be a Volatile type\", Actual, A_Gen_T);\n-            end if;\n-\n-            if\n-              Is_Independent (A_Gen_T) and then not Is_Independent (Act_T)\n-            then\n-               Error_Msg_NE\n-                 (\"actual for& must be an Independent type\", Actual, A_Gen_T);\n+                  (\"actual for& has different Volatile aspect\",\n+                    Actual, A_Gen_T);\n             end if;\n \n             --  We assume that an array type whose atomic component type\n             --  is Atomic is equivalent to an array type with the explicit\n             --  aspect Has_Atomic_Components. This is a reasonable inference\n             --  from the intent of AI12-0282, and makes it legal to use an\n             --  actual that does not have the identical aspect as the formal.\n+            --  Ditto for volatile components.\n \n-            if Has_Atomic_Components (A_Gen_T)\n-               and then not Has_Atomic_Components (Act_T)\n-            then\n-               if Is_Array_Type (Act_T)\n-                 and then Is_Atomic (Component_Type (Act_T))\n-               then\n-                  null;\n+            declare\n+               Actual_Atomic_Comp : constant Boolean :=\n+               Has_Atomic_Components (Act_T)\n+                      or else (Is_Array_Type (Act_T)\n+                                and then Is_Atomic (Component_Type (Act_T)));\n+            begin\n+               if Has_Atomic_Components (A_Gen_T) /= Actual_Atomic_Comp then\n+                  Error_Msg_NE\n+                    (\"formal and actual for& must agree on atomic components\",\n+                       Actual, A_Gen_T);\n+               end if;\n+            end;\n \n-               else\n+            declare\n+               Actual_Volatile_Comp : constant Boolean :=\n+                 Has_Volatile_Components (Act_T)\n+                   or else (Is_Array_Type (Act_T)\n+                             and then Is_Volatile (Component_Type (Act_T)));\n+            begin\n+               if Has_Volatile_Components (A_Gen_T) /= Actual_Volatile_Comp\n+               then\n                   Error_Msg_NE\n-                    (\"actual for& must have atomic components\",\n+                    (\"actual for& must have volatile components\",\n                        Actual, A_Gen_T);\n                end if;\n-            end if;\n+            end;\n \n-            if Has_Independent_Components (A_Gen_T)\n-               and then not Has_Independent_Components (Act_T)\n+            --  The following two aspects do not require exact matching,\n+            --  but only one-way agreement. See RM C.6.\n+\n+            if Is_Independent (A_Gen_T) and then not Is_Independent (Act_T)\n             then\n                Error_Msg_NE\n-                 (\"actual for& must have independent components\",\n-                    Actual, A_Gen_T);\n+                 (\"actual for& must have Independent aspect specified\",\n+                     Actual, A_Gen_T);\n             end if;\n \n-            if Has_Volatile_Components (A_Gen_T)\n-               and then not Has_Volatile_Components (Act_T)\n+            if Has_Independent_Components (A_Gen_T)\n+              and then not Has_Independent_Components (Act_T)\n             then\n-               if Is_Array_Type (Act_T)\n-                 and then Is_Volatile (Component_Type (Act_T))\n-               then\n-                  null;\n-\n-               else\n-                  Error_Msg_NE\n-                    (\"actual for& must have volatile components\",\n-                       Actual, A_Gen_T);\n-               end if;\n+               Error_Msg_NE\n+                 (\"actual for& must have Independent_Components specified\",\n+                     Actual, A_Gen_T);\n             end if;\n          end if;\n       end Check_Shared_Variable_Control_Aspects;"}]}