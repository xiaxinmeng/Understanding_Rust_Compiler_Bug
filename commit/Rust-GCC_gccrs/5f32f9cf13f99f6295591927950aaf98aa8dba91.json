{"sha": "5f32f9cf13f99f6295591927950aaf98aa8dba91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzMmY5Y2YxM2Y5OWY2Mjk1NTkxOTI3OTUwYWFmOThhYThkYmE5MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-22T11:08:11Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-22T11:08:11Z"}, "message": "Smart relaxation of TOP N counter.\n\n\tPR tree-optimization/92924\n\t* profile.c (compute_value_histograms): Divide\n\tall counter values.\n\tPR tree-optimization/92924\n\t* libgcov-driver.c (prune_topn_counter): New.\n\t(prune_counters): Likewise.\n\t(dump_one_gcov): Prune a run-time counter.\n\t* libgcov-profiler.c (__gcov_topn_values_profiler_body):\n\tFor a known value, add GCOV_TOPN_VALUES to value.\n\tOtherwise, decrement all counters by one.", "tree": {"sha": "59ab45c6e2d886178d1ca9e17317ffdc1c043c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59ab45c6e2d886178d1ca9e17317ffdc1c043c31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f32f9cf13f99f6295591927950aaf98aa8dba91", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl4oLRsACgkQTcGC3A+n\nN4UcwQgAqi0BqGAbLNXWaKu8E+HUCrOFOWL/OQlTRlKVFEgk1d4dYFWF88J4oaDW\nbAuz6/48gd9w6vdbp8UMZSOW5ZtYEt1eTw8FmiZfVY+CZTBX7bYFtebxGjZBh8r+\nxFMqyHMj5cu1TCr0Kup6VWpKKToxRK/GZXsg5FkOWt1lqfK8lkoWczZlFE9vhZlY\nZTHTy/yomJtmqgoiVBacKGr8YDHYjiWS124MFzH4gnGAtv2Nsazko2ZXMULGrdNo\ncIQqe+KweI56UkUg72hvlWrF0bFNS/VR/pD3L58gxJ8DU1YpXdrg2gmdbfYnWGzN\npkTgGHeB4F5x3rAVdcaYW+XEQTolmA==\n=nv16\n-----END PGP SIGNATURE-----", "payload": "tree 59ab45c6e2d886178d1ca9e17317ffdc1c043c31\nparent f96af171bee93486896407ccad0e1e4dc200bc0c\nauthor Martin Liska <mliska@suse.cz> 1579691291 +0100\ncommitter Martin Liska <mliska@suse.cz> 1579691291 +0100\n\nSmart relaxation of TOP N counter.\n\n\tPR tree-optimization/92924\n\t* profile.c (compute_value_histograms): Divide\n\tall counter values.\n\tPR tree-optimization/92924\n\t* libgcov-driver.c (prune_topn_counter): New.\n\t(prune_counters): Likewise.\n\t(dump_one_gcov): Prune a run-time counter.\n\t* libgcov-profiler.c (__gcov_topn_values_profiler_body):\n\tFor a known value, add GCOV_TOPN_VALUES to value.\n\tOtherwise, decrement all counters by one.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f32f9cf13f99f6295591927950aaf98aa8dba91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f32f9cf13f99f6295591927950aaf98aa8dba91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f32f9cf13f99f6295591927950aaf98aa8dba91/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96af171bee93486896407ccad0e1e4dc200bc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96af171bee93486896407ccad0e1e4dc200bc0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96af171bee93486896407ccad0e1e4dc200bc0c"}], "stats": {"total": 110, "additions": 92, "deletions": 18}, "files": [{"sha": "f672e939b5d994ee9df982d7d2f2651f562b7e85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f32f9cf13f99f6295591927950aaf98aa8dba91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f32f9cf13f99f6295591927950aaf98aa8dba91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f32f9cf13f99f6295591927950aaf98aa8dba91", "patch": "@@ -1,3 +1,9 @@\n+2020-01-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/92924\n+\t* profile.c (compute_value_histograms): Divide\n+\tall counter values.\n+\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91298"}, {"sha": "cd754c4c66a1f2ff4bcd7a8dd8ef2d9d70c04ff0", "filename": "gcc/profile.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f32f9cf13f99f6295591927950aaf98aa8dba91/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f32f9cf13f99f6295591927950aaf98aa8dba91/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=5f32f9cf13f99f6295591927950aaf98aa8dba91", "patch": "@@ -863,7 +863,15 @@ compute_value_histograms (histogram_values values, unsigned cfg_checksum,\n \n       if (hist->type == HIST_TYPE_TOPN_VALUES\n \t  || hist->type == HIST_TYPE_INDIR_CALL)\n-\tsort_hist_values (hist);\n+\t{\n+\t  /* Each count value is multiplied by GCOV_TOPN_VALUES.  */\n+\t  if (hist->hvalue.counters[2] != -1)\n+\t    for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n+\t      hist->hvalue.counters[2 * i + 2]\n+\t\t= RDIV (hist->hvalue.counters[2 * i + 2], GCOV_TOPN_VALUES);\n+\n+\t  sort_hist_values (hist);\n+\t}\n \n       /* Time profiler counter is not related to any statement,\n          so that we have to read the counter and set the value to"}, {"sha": "441c8f0ccf17145de45f68e170200f26f8344722", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5f32f9cf13f99f6295591927950aaf98aa8dba91", "patch": "@@ -1,3 +1,13 @@\n+2020-01-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/92924\n+\t* libgcov-driver.c (prune_topn_counter): New.\n+\t(prune_counters): Likewise.\n+\t(dump_one_gcov): Prune a run-time counter.\n+\t* libgcov-profiler.c (__gcov_topn_values_profiler_body):\n+\tFor a known value, add GCOV_TOPN_VALUES to value.\n+\tOtherwise, decrement all counters by one.\n+\n 2020-01-18  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/arit.c (DS): Apply attribute __fallthrough__."}, {"sha": "cdb611de2a283bf1e21bec2cc5813902021b9032", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=5f32f9cf13f99f6295591927950aaf98aa8dba91", "patch": "@@ -213,6 +213,56 @@ static struct gcov_fn_buffer *fn_buffer;\n /* Including system dependent components. */\n #include \"libgcov-driver-system.c\"\n \n+/* Prune TOP N value COUNTERS.  It's needed in order to preserve\n+   reproducibility of builds.  */\n+\n+static void\n+prune_topn_counter (gcov_type *counters, gcov_type all)\n+{\n+  if (counters[1] == -1)\n+    return;\n+\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n+    {\n+      if (counters[2 * i + 1] < all)\n+\t{\n+\t  counters[2 * i] = 0;\n+\t  counters[2 * i + 1] = 0;\n+\t}\n+    }\n+}\n+\n+/* Prune counters so that they are ready to store or merge.  */\n+\n+static void\n+prune_counters (struct gcov_info *gi)\n+{\n+  for (unsigned i = 0; i < gi->n_functions; i++)\n+    {\n+      const struct gcov_fn_info *gfi = gi->functions[i];\n+      const struct gcov_ctr_info *ci = gfi->ctrs;\n+\n+      for (unsigned j = 0; j < GCOV_COUNTERS; j++)\n+\t{\n+\t  if (gi->merge[j] == NULL)\n+\t    continue;\n+\n+\t  if (gi->merge[j] == __gcov_merge_topn)\n+\t    {\n+\t      gcc_assert (!(ci->num % GCOV_TOPN_VALUES_COUNTERS));\n+\t      for (unsigned k = 0; k < (ci->num / GCOV_TOPN_VALUES_COUNTERS);\n+\t\t   k++)\n+\t\t{\n+\t\t  gcov_type *counters\n+\t\t    = ci->values + (k * GCOV_TOPN_VALUES_COUNTERS);\n+\t\t  prune_topn_counter (counters + 1, *counters);\n+\t\t}\n+\t    }\n+\t  ci++;\n+\t}\n+    }\n+}\n+\n /* This function merges counters in GI_PTR to an existing gcda file.\n    Return 0 on success.\n    Return -1 on error. In this case, caller will goto read_fatal.  */\n@@ -429,9 +479,11 @@ dump_one_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n   struct gcov_summary summary = {};\n   int error;\n   gcov_unsigned_t tag;\n-\n   fn_buffer = 0;\n \n+  /* Prune current counters before we merge them.  */\n+  prune_counters (gi_ptr);\n+\n   error = gcov_exit_open_gcda_file (gi_ptr, gf);\n   if (error == -1)\n     return;"}, {"sha": "f45ef498a6e18790394ec88545cd3e691ddfc77b", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f32f9cf13f99f6295591927950aaf98aa8dba91/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=5f32f9cf13f99f6295591927950aaf98aa8dba91", "patch": "@@ -119,37 +119,35 @@ __gcov_topn_values_profiler_body (gcov_type *counters, gcov_type value,\n \n   ++counters;\n \n-  /* We have GCOV_TOPN_VALUES as we can keep multiple values\n-     next to each other.  */\n-  unsigned sindex = 0;\n-\n   for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n     {\n       if (value == counters[2 * i])\n \t{\n \t  if (use_atomic)\n-\t    __atomic_fetch_add (&counters[2 * i + 1], 1, __ATOMIC_RELAXED);\n+\t    __atomic_fetch_add (&counters[2 * i + 1], GCOV_TOPN_VALUES,\n+\t\t\t\t__ATOMIC_RELAXED);\n \t  else\n-\t    counters[2 * i + 1]++;\n+\t    counters[2 * i + 1] += GCOV_TOPN_VALUES;\n \t  return;\n \t}\n-      else if (counters[2 * i + 1] == 0)\n+      else if (counters[2 * i + 1] <= 0)\n \t{\n \t  /* We found an empty slot.  */\n \t  counters[2 * i] = value;\n-\t  counters[2 * i + 1] = 1;\n+\t  counters[2 * i + 1] = GCOV_TOPN_VALUES;\n \t  return;\n \t}\n-\n-      if (counters[2 * i + 1] < counters[2 * sindex + 1])\n-\tsindex = i;\n     }\n \n-  /* We haven't found an empty slot, then decrement the smallest.  */\n-  if (use_atomic)\n-    __atomic_fetch_sub (&counters[2 * sindex + 1], 1, __ATOMIC_RELAXED);\n-  else\n-    counters[2 * sindex + 1]--;\n+  /* We haven't found an empty slot, then decrement all\n+     counter values by one.  */\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n+    {\n+      if (use_atomic)\n+\t__atomic_fetch_sub (&counters[2 * i + 1], 1, __ATOMIC_RELAXED);\n+      else\n+\tcounters[2 * i + 1]--;\n+    }\n }\n \n #ifdef L_gcov_topn_values_profiler"}]}