{"sha": "733a1b777f16cd397b43a242d9c31761f66d3da8", "node_id": "C_kwDOANBUbNoAKDczM2ExYjc3N2YxNmNkMzk3YjQzYTI0MmQ5YzMxNzYxZjY2ZDNkYTg", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2023-01-13T18:04:02Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2023-01-13T18:33:14Z"}, "message": "sched-deps: do not schedule pseudos across calls [PR108117]\n\nScheduling across calls in the pre-RA scheduler is problematic: we do\nnot take liveness info into account, and are thus prone to extending\nlifetime of a pseudo over the loop, requiring a callee-saved hardreg\nor causing a spill.\n\nIf current function called a setjmp, lifting an assignment over a call\nmay be incorrect if a longjmp would happen before the assignment.\n\nThanks to Jose Marchesi for testing on AArch64.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/108117\n\tPR rtl-optimization/108132\n\t* sched-deps.cc (deps_analyze_insn): Do not schedule across\n\tcalls before reload.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/108117\n\tPR rtl-optimization/108132\n\t* gcc.dg/pr108117.c: New test.", "tree": {"sha": "aecfd13965c06cc086077992307d31d06a75714f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aecfd13965c06cc086077992307d31d06a75714f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733a1b777f16cd397b43a242d9c31761f66d3da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733a1b777f16cd397b43a242d9c31761f66d3da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733a1b777f16cd397b43a242d9c31761f66d3da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733a1b777f16cd397b43a242d9c31761f66d3da8/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b1c6aa6d28d3afe989a6dc3210606a3d55a367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b1c6aa6d28d3afe989a6dc3210606a3d55a367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b1c6aa6d28d3afe989a6dc3210606a3d55a367"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "f9371b81fb41eddad842f0a63133fddf50c59131", "filename": "gcc/sched-deps.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733a1b777f16cd397b43a242d9c31761f66d3da8/gcc%2Fsched-deps.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733a1b777f16cd397b43a242d9c31761f66d3da8/gcc%2Fsched-deps.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.cc?ref=733a1b777f16cd397b43a242d9c31761f66d3da8", "patch": "@@ -3688,7 +3688,14 @@ deps_analyze_insn (class deps_desc *deps, rtx_insn *insn)\n \n       CANT_MOVE (insn) = 1;\n \n-      if (find_reg_note (insn, REG_SETJMP, NULL))\n+      if (!reload_completed)\n+\t{\n+\t  /* Scheduling across calls may increase register pressure by extending\n+\t     live ranges of pseudos over the call.  Worse, in presence of setjmp\n+\t     it may incorrectly move up an assignment over a longjmp.  */\n+\t  reg_pending_barrier = MOVE_BARRIER;\n+\t}\n+      else if (find_reg_note (insn, REG_SETJMP, NULL))\n         {\n           /* This is setjmp.  Assume that all registers, not just\n              hard registers, may be clobbered by this call.  */"}, {"sha": "ae151693e2f9636024f3a0799509ccb346862231", "filename": "gcc/testsuite/gcc.dg/pr108117.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733a1b777f16cd397b43a242d9c31761f66d3da8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733a1b777f16cd397b43a242d9c31761f66d3da8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108117.c?ref=733a1b777f16cd397b43a242d9c31761f66d3da8", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target nonlocal_goto } */\n+/* { dg-options \"-O2 -fschedule-insns\" } */\n+\n+#include <stdio.h>\n+#include <setjmp.h>\n+\n+jmp_buf ex_buf;\n+\n+__attribute__((noipa))\n+void fn_throw(int x)\n+{\n+   if (x)\n+      longjmp(ex_buf, 1);\n+}\n+\n+int main(void)\n+{\n+    int vb = 0; // NB: not volatile, not modified after setjmp\n+\n+    if (!setjmp(ex_buf)) {\n+        fn_throw(1);\n+        vb = 1; // not reached in the abstract machine\n+    }\n+\n+    if (vb) {\n+        printf(\"Failed, vb = %d!\\n\", vb);\n+        return 1;\n+    }\n+}"}]}