{"sha": "e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxZDU3NTdlY2ZkNzBmNTVmODdiYWQ3YzVkYjQ4YjBlMjhiZDQ2Ng==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2008-08-17T10:48:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-08-17T10:48:46Z"}, "message": "install.texi (--with-mips-plt): Document.\n\ngcc/\n2008-08-17  Daniel Jacobowitz  <dan@codesourcery.com>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* doc/install.texi (--with-mips-plt): Document.\n\t* doc/invoke.texi (-mplt, -mno-plt): Document.\n\t* config.gcc (mips*-*-*): Add mips-plt to supported_defaults\n\tand handle ${with_mips_plt}.\n\t* config/mips/mips.opt (mplt): New option.\n\t* config/mips/mips.h (TARGET_ABICALLS_PIC0): New macro.\n\t(TARGET_ABICALLS_PIC2): Likewise.\n\t(TARGET_GPWORD): Return false for TARGET_ABSOLUTE_ABICALLS.\n\t(OPTION_DEFAULT_SPECS): Add a mips-plt entry.\n\t(ASM_SPEC): Use !mabi=* instead of !mabi*.\n\t(MIPS_CALL): Use TARGET_ABICALLS_PIC2 instead of TARGET_ABICALLS\n\tto decide whether to output \".option picX\" directives.\n\t* config/mips/linux.h (SUBTARGET_ASM_SPEC): Remove -mabi=64 handling.\n\tPass -call_nonpic rather than -KPIC for -mplt.\n\t(BASE_DRIVER_SELF_SPECS): Remove -mplt if -mno-shared is not present\n\ton the command line.  Also remove it when -mabi=64 is used without\n\t-msym32.\n\t* config/mips/linux64.h (SUBTARGET_ASM_SPEC): Delete.\n\t* config/mips/mips.c (mips_use_pic_fn_addr_reg_p): Handle\n\tTARGET_ABICALLS_PIC0.\n\t(mips_classify_symbol): Use TARGET_ABICALLS_PIC2 instead of\n\tTARGET_ABICALLS.\n\t(mips16_build_function_stub): Only output \".option pic\" directives\n\tand PIC stubs if TARGET_ABICALLS_PIC2.  Call through $25 instead of $1.\n\t(mips16_build_call_stub): Fix comment and remove redundant\n\t\".set at\"/\"set .noat\" directives.\n\t(mips_function_rodata_section): Use the default behaviour for\n\tTARGET_ABSOLUTE_ABICALLS.\n\t(mips_file_start): Emit \".option pic0\" for TARGET_ABICALLS_PIC0.\n\t(mips_global_pointer): Handle TARGET_ABICALLS_PIC0.\n\t(mips_restore_gp): Do nothing if the current function doesn't use\n\ta global pointer.\n\t(mips_expand_prologue): Only save $gp if the current function uses it.\n\tUse a normal move for TARGET_ABICALLS_PIC0.\n\t(mips_override_options): Only set flag_pic if TARGET_ABICALLS_PIC2.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r139170", "tree": {"sha": "767a35a420e130538e9c5f9e1d7aa7a06d475905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767a35a420e130538e9c5f9e1d7aa7a06d475905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/comments", "author": null, "committer": null, "parents": [{"sha": "4817c43b1740e11de6ad2e6074cf2a9c4c1d431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4817c43b1740e11de6ad2e6074cf2a9c4c1d431c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4817c43b1740e11de6ad2e6074cf2a9c4c1d431c"}], "stats": {"total": 271, "additions": 199, "deletions": 72}, "files": [{"sha": "9ca20ac74c07c5742579a51decaf212105055bd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -1,3 +1,42 @@\n+2008-08-17  Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/install.texi (--with-mips-plt): Document.\n+\t* doc/invoke.texi (-mplt, -mno-plt): Document.\n+\t* config.gcc (mips*-*-*): Add mips-plt to supported_defaults\n+\tand handle ${with_mips_plt}.\n+\t* config/mips/mips.opt (mplt): New option.\n+\t* config/mips/mips.h (TARGET_ABICALLS_PIC0): New macro.\n+\t(TARGET_ABICALLS_PIC2): Likewise.\n+\t(TARGET_GPWORD): Return false for TARGET_ABSOLUTE_ABICALLS.\n+\t(OPTION_DEFAULT_SPECS): Add a mips-plt entry.\n+\t(ASM_SPEC): Use !mabi=* instead of !mabi*.\n+\t(MIPS_CALL): Use TARGET_ABICALLS_PIC2 instead of TARGET_ABICALLS\n+\tto decide whether to output \".option picX\" directives.\n+\t* config/mips/linux.h (SUBTARGET_ASM_SPEC): Remove -mabi=64 handling.\n+\tPass -call_nonpic rather than -KPIC for -mplt.\n+\t(BASE_DRIVER_SELF_SPECS): Remove -mplt if -mno-shared is not present\n+\ton the command line.  Also remove it when -mabi=64 is used without\n+\t-msym32.\n+\t* config/mips/linux64.h (SUBTARGET_ASM_SPEC): Delete.\n+\t* config/mips/mips.c (mips_use_pic_fn_addr_reg_p): Handle\n+\tTARGET_ABICALLS_PIC0.\n+\t(mips_classify_symbol): Use TARGET_ABICALLS_PIC2 instead of\n+\tTARGET_ABICALLS.\n+\t(mips16_build_function_stub): Only output \".option pic\" directives\n+\tand PIC stubs if TARGET_ABICALLS_PIC2.  Call through $25 instead of $1.\n+\t(mips16_build_call_stub): Fix comment and remove redundant\n+\t\".set at\"/\"set .noat\" directives.\n+\t(mips_function_rodata_section): Use the default behaviour for\n+\tTARGET_ABSOLUTE_ABICALLS.\n+\t(mips_file_start): Emit \".option pic0\" for TARGET_ABICALLS_PIC0.\n+\t(mips_global_pointer): Handle TARGET_ABICALLS_PIC0.\n+\t(mips_restore_gp): Do nothing if the current function doesn't use\n+\ta global pointer.\n+\t(mips_expand_prologue): Only save $gp if the current function uses it.\n+\tUse a normal move for TARGET_ABICALLS_PIC0.\n+\t(mips_override_options): Only set flag_pic if TARGET_ABICALLS_PIC2.\n+\n 2008-08-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_save_reg_p): Don't short-circuit rest"}, {"sha": "7078b0bda9246343546ec18a6c598aae9548bea0", "filename": "gcc/config.gcc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -2779,7 +2779,7 @@ case \"${target}\" in\n \t\t;;\n \n \tmips*-*-*)\n-\t\tsupported_defaults=\"abi arch float tune divide llsc\"\n+\t\tsupported_defaults=\"abi arch float tune divide llsc mips-plt\"\n \n \t\tcase ${with_float} in\n \t\t\"\" | soft | hard)\n@@ -2826,6 +2826,21 @@ case \"${target}\" in\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n+\n+\t\tcase ${with_mips_plt} in\n+\t\tyes)\n+\t\t\twith_mips_plt=plt\n+\t\t\t;;\n+\t\tno)\n+\t\t\twith_mips_plt=no-plt\n+\t\t\t;;\n+\t\t\"\")\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown --with-mips-plt argument: $with_mips_plt\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n \t\t;;\n \n \tpowerpc*-*-* | rs6000-*-*)\n@@ -3078,10 +3093,10 @@ case ${target} in\n esac\n \n t=\n-all_defaults=\"abi cpu cpu_32 cpu_64 arch arch_32 arch_64 tune tune_32 tune_64 schedule float mode fpu divide llsc\"\n+all_defaults=\"abi cpu cpu_32 cpu_64 arch arch_32 arch_64 tune tune_32 tune_64 schedule float mode fpu divide llsc mips-plt\"\n for option in $all_defaults\n do\n-\teval \"val=\\$with_$option\"\n+\teval \"val=\\$with_\"`echo $option | sed s/-/_/g`\n \tif test -n \"$val\"; then\n \t\tcase \" $supported_defaults \" in\n \t\t*\" $option \"*)"}, {"sha": "b30289741fe136e1d99243f789f720a8d31c1a1f", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -79,7 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n         %{static:-static}}}\"\n \n #undef SUBTARGET_ASM_SPEC\n-#define SUBTARGET_ASM_SPEC \"%{mabi=64: -64} %{!mno-abicalls:-KPIC}\"\n+#define SUBTARGET_ASM_SPEC \\\n+  \"%{!mno-abicalls:%{mplt:-call_nonpic;:-KPIC}}\"\n \n /* The MIPS assembler has different syntax for .set. We set it to\n    .dummy to trap any errors.  */\n@@ -134,6 +135,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #endif\n \n #define BASE_DRIVER_SELF_SPECS \\\n-  NO_SHARED_SPECS \\\n-  MARCH_MTUNE_NATIVE_SPECS\n+  NO_SHARED_SPECS\t\t\t\t\t\t\t\\\n+  MARCH_MTUNE_NATIVE_SPECS,\t\t\t\t\t\t\\\n+  /* -mplt has no effect without -mno-shared.  Simplify later\t\t\\\n+     specs handling by removing a redundant option.  */\t\t\t\\\n+  \"%{!mno-shared:%<mplt}\",\t\t\t\t\t\t\\\n+  /* -mplt likewise has no effect for -mabi=64 without -msym32.  */\t\\\n+  \"%{mabi=64:%{!msym32:%<mplt}}\"\n #define DRIVER_SELF_SPECS BASE_DRIVER_SELF_SPECS"}, {"sha": "3d37aeba24f8045cc3f9ce7045465b0817644f5e", "filename": "gcc/config/mips/linux64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux64.h?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -26,11 +26,6 @@ BASE_DRIVER_SELF_SPECS \\\n \" %{!EB:%{!EL:%(endian_spec)}}\" \\\n \" %{!mabi=*: -mabi=n32}\"\n \n-#undef SUBTARGET_ASM_SPEC\n-#define SUBTARGET_ASM_SPEC \"\\\n-%{!fno-PIC:%{!fno-pic:-KPIC}} \\\n-%{fno-PIC:-non_shared} %{fno-pic:-non_shared}\"\n-\n #undef LIB_SPEC\n #define LIB_SPEC \"\\\n %{pthread:-lpthread} \\"}, {"sha": "e9eb20cc0eec58bb7ef5440ef53775fff17c20b7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 91, "deletions": 55, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -1454,13 +1454,20 @@ mips_use_pic_fn_addr_reg_p (const_rtx x)\n   if (mips16_stub_function_p (x))\n     return false;\n \n-  /* When TARGET_ABSOLUTE_ABICALLS is true, locally-defined functions\n-     use absolute accesses to set up the global pointer.  */\n-  if (TARGET_ABSOLUTE_ABICALLS\n-      && GET_CODE (x) == SYMBOL_REF\n-      && mips_symbol_binds_local_p (x)\n-      && !SYMBOL_REF_EXTERNAL_P (x))\n-    return false;\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    {\n+      /* If PLTs and copy relocations are available, the static linker\n+\t will make sure that $25 is valid on entry to the target function.  */\n+      if (TARGET_ABICALLS_PIC0)\n+\treturn false;\n+\n+      /* Locally-defined functions use absolute accesses to set up\n+\t the global pointer.  */\n+      if (TARGET_ABSOLUTE_ABICALLS\n+\t  && mips_symbol_binds_local_p (x)\n+\t  && !SYMBOL_REF_EXTERNAL_P (x))\n+\treturn false;\n+    }\n \n   return true;\n }\n@@ -1512,7 +1519,7 @@ mips_classify_symbol (const_rtx x, enum mips_symbol_context context)\n \n   /* Don't use GOT accesses for locally-binding symbols when -mno-shared\n      is in effect.  */\n-  if (TARGET_ABICALLS\n+  if (TARGET_ABICALLS_PIC2\n       && !(TARGET_ABSOLUTE_ABICALLS && mips_symbol_binds_local_p (x)))\n     {\n       /* There are three cases to consider:\n@@ -5657,35 +5664,36 @@ mips16_build_function_stub (void)\n   assemble_start_function (stubdecl, stubname);\n   mips_start_function_definition (stubname, false);\n \n-  /* If generating abicalls code, either set up the global pointer or\n-     switch to absolute mode.  */\n-  if (TARGET_ABSOLUTE_ABICALLS)\n-    fprintf (asm_out_file, \"\\t.option\\tpic0\\n\");\n-  else if (TARGET_ABICALLS)\n+  /* If generating pic2 code, either set up the global pointer or\n+     switch to pic0.  */\n+  if (TARGET_ABICALLS_PIC2)\n     {\n-      output_asm_insn (\"%(.cpload\\t%^%)\", NULL);\n-      /* Emit an R_MIPS_NONE relocation to tell the linker what the\n-\t target function is.  Use a local GOT access when loading the\n-\t symbol, to cut down on the number of unnecessary GOT entries\n-\t for stubs that aren't needed.  */\n-      output_asm_insn (\".reloc\\t0,R_MIPS_NONE,%0\", &symbol);\n-      symbol = alias;\n+      if (TARGET_ABSOLUTE_ABICALLS)\n+\tfprintf (asm_out_file, \"\\t.option\\tpic0\\n\");\n+      else\n+\t{\n+\t  output_asm_insn (\"%(.cpload\\t%^%)\", NULL);\n+\t  /* Emit an R_MIPS_NONE relocation to tell the linker what the\n+\t     target function is.  Use a local GOT access when loading the\n+\t     symbol, to cut down on the number of unnecessary GOT entries\n+\t     for stubs that aren't needed.  */\n+\t  output_asm_insn (\".reloc\\t0,R_MIPS_NONE,%0\", &symbol);\n+\t  symbol = alias;\n+\t}\n     }\n \n-  /* Load the address of the MIPS16 function into $at.  Do this first so\n+  /* Load the address of the MIPS16 function into $25.  Do this first so\n      that targets with coprocessor interlocks can use an MFC1 to fill the\n      delay slot.  */\n-  fprintf (asm_out_file, \"\\t.set\\tnoat\\n\");\n-  output_asm_insn (\"la\\t%@,%0\", &symbol);\n+  output_asm_insn (\"la\\t%^,%0\", &symbol);\n \n   /* Move the arguments from floating-point registers to general registers.  */\n   mips_output_args_xfer (crtl->args.info.fp_code, 'f');\n \n   /* Jump to the MIPS16 function.  */\n-  output_asm_insn (\"jr\\t%@\", NULL);\n-  fprintf (asm_out_file, \"\\t.set\\tat\\n\");\n+  output_asm_insn (\"jr\\t%^\", NULL);\n \n-  if (TARGET_ABSOLUTE_ABICALLS)\n+  if (TARGET_ABICALLS_PIC2 && TARGET_ABSOLUTE_ABICALLS)\n     fprintf (asm_out_file, \"\\t.option\\tpic2\\n\");\n \n   mips_end_function_definition (stubname);\n@@ -5906,10 +5914,9 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \n       if (!fp_ret_p)\n \t{\n-\t  /* Load the address of the MIPS16 function into $at.  Do this\n+\t  /* Load the address of the MIPS16 function into $25.  Do this\n \t     first so that targets with coprocessor interlocks can use\n \t     an MFC1 to fill the delay slot.  */\n-\t  fprintf (asm_out_file, \"\\t.set\\tnoat\\n\");\n \t  if (TARGET_EXPLICIT_RELOCS)\n \t    {\n \t      output_asm_insn (\"lui\\t%^,%%hi(%0)\", &fn);\n@@ -5927,7 +5934,6 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \t{\n \t  /* Jump to the previously-loaded address.  */\n \t  output_asm_insn (\"jr\\t%^\", NULL);\n-\t  fprintf (asm_out_file, \"\\t.set\\tat\\n\");\n \t}\n       else\n \t{\n@@ -7222,15 +7228,16 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n /* Implement TARGET_ASM_FUNCTION_RODATA_SECTION.\n \n    The complication here is that, with the combination TARGET_ABICALLS\n-   && !TARGET_GPWORD, jump tables will use absolute addresses, and should\n-   therefore not be included in the read-only part of a DSO.  Handle such\n-   cases by selecting a normal data section instead of a read-only one.\n-   The logic apes that in default_function_rodata_section.  */\n+   && !TARGET_ABSOLUTE_ABICALLS && !TARGET_GPWORD, jump tables will use\n+   absolute addresses, and should therefore not be included in the\n+   read-only part of a DSO.  Handle such cases by selecting a normal\n+   data section instead of a read-only one.  The logic apes that in\n+   default_function_rodata_section.  */\n \n static section *\n mips_function_rodata_section (tree decl)\n {\n-  if (!TARGET_ABICALLS || TARGET_GPWORD)\n+  if (!TARGET_ABICALLS || TARGET_ABSOLUTE_ABICALLS || TARGET_GPWORD)\n     return default_function_rodata_section (decl);\n \n   if (decl && DECL_SECTION_NAME (decl))\n@@ -7729,7 +7736,11 @@ mips_file_start (void)\n \n   /* If TARGET_ABICALLS, tell GAS to generate -KPIC code.  */\n   if (TARGET_ABICALLS)\n-    fprintf (asm_out_file, \"\\t.abicalls\\n\");\n+    {\n+      fprintf (asm_out_file, \"\\t.abicalls\\n\");\n+      if (TARGET_ABICALLS_PIC0)\n+\tfprintf (asm_out_file, \"\\t.option\\tpic0\\n\");\n+    }\n \n   if (flag_verbose_asm)\n     fprintf (asm_out_file, \"\\n%s -G value = %d, Arch = %s, ISA = %d\\n\",\n@@ -8285,24 +8296,40 @@ mips_global_pointer (void)\n   if (crtl->has_nonlocal_goto)\n     return GLOBAL_POINTER_REGNUM;\n \n-  /* If the gp is never referenced, there's no need to initialize it.\n-     Note that reload can sometimes introduce constant pool references\n-     into a function that otherwise didn't need them.  For example,\n-     suppose we have an instruction like:\n+  /* There's no need to initialize $gp if it isn't referenced now,\n+     and if we can be sure that no new references will be added during\n+     or after reload.  */\n+  if (!df_regs_ever_live_p (GLOBAL_POINTER_REGNUM)\n+      && !mips_function_has_gp_insn ())\n+    {\n+      /* The function doesn't use $gp at the moment.  If we're generating\n+\t -call_nonpic code, no new uses will be introduced during or after\n+\t reload.  */\n+      if (TARGET_ABICALLS_PIC0)\n+\treturn 0;\n \n-\t  (set (reg:DF R1) (float:DF (reg:SI R2)))\n+      /* We need to handle the following implicit gp references:\n \n-     If R2 turns out to be constant such as 1, the instruction may have a\n-     REG_EQUAL note saying that R1 == 1.0.  Reload then has the option of\n-     using this constant if R2 doesn't get allocated to a register.\n+\t - Reload can sometimes introduce constant pool references\n+\t   into a function that otherwise didn't need them.  For example,\n+\t   suppose we have an instruction like:\n \n-     In cases like these, reload will have added the constant to the pool\n-     but no instruction will yet refer to it.  */\n-  if (!df_regs_ever_live_p (GLOBAL_POINTER_REGNUM)\n-      && !crtl->uses_const_pool\n-      && !mips16_cfun_returns_in_fpr_p ()\n-      && !mips_function_has_gp_insn ())\n-    return 0;\n+\t       (set (reg:DF R1) (float:DF (reg:SI R2)))\n+\n+\t   If R2 turns out to be constant such as 1, the instruction may\n+\t   have a REG_EQUAL note saying that R1 == 1.0.  Reload then has\n+\t   the option of using this constant if R2 doesn't get allocated\n+\t   to a register.\n+\n+\t   In cases like these, reload will have added the constant to the\n+\t   pool but no instruction will yet refer to it.\n+\n+\t - MIPS16 functions that return in FPRs need to call an\n+\t   external libgcc routine.  */\n+      if (!crtl->uses_const_pool\n+\t  && !mips16_cfun_returns_in_fpr_p ())\n+\treturn 0;\n+    }\n \n   /* We need a global pointer, but perhaps we can use a call-clobbered\n      register instead of $gp.  */\n@@ -8694,6 +8721,9 @@ mips_restore_gp (rtx temp)\n {\n   gcc_assert (TARGET_ABICALLS && TARGET_OLDABI);\n \n+  if (cfun->machine->global_pointer == 0)\n+    return;\n+\n   if (TARGET_MIPS16)\n     {\n       mips_emit_move (temp, mips_cprestore_slot (temp));\n@@ -9121,13 +9151,17 @@ mips_expand_prologue (void)\n   mips_emit_loadgp ();\n \n   /* Initialize the $gp save slot.  */\n-  if (frame->cprestore_size > 0)\n+  if (frame->cprestore_size > 0\n+      && cfun->machine->global_pointer != 0)\n     {\n       if (TARGET_MIPS16)\n \tmips_emit_move (mips_cprestore_slot (MIPS_PROLOGUE_TEMP (Pmode)),\n \t\t\tMIPS16_PIC_TEMP);\n-      else\n+      else if (TARGET_ABICALLS_PIC2)\n \temit_insn (gen_cprestore (GEN_INT (frame->args_size)));\n+      else\n+\temit_move_insn (mips_cprestore_slot (MIPS_PROLOGUE_TEMP (Pmode)),\n+\t\t\tpic_offset_table_rtx);\n     }\n \n   /* If we are profiling, make sure no instructions are scheduled before\n@@ -13196,14 +13230,16 @@ mips_override_options (void)\n       target_flags &= ~MASK_ABICALLS;\n     }\n \n-  if (TARGET_ABICALLS)\n+  if (TARGET_ABICALLS_PIC2)\n     /* We need to set flag_pic for executables as well as DSOs\n        because we may reference symbols that are not defined in\n        the final executable.  (MIPS does not use things like\n        copy relocs, for example.)\n \n-       Also, there is a body of code that uses __PIC__ to distinguish\n-       between -mabicalls and -mno-abicalls code.  */\n+       There is a body of code that uses __PIC__ to distinguish\n+       between -mabicalls and -mno-abicalls code.  The non-__PIC__\n+       variant is usually appropriate for TARGET_ABICALLS_PIC0, as\n+       long as any indirect jumps use $25.  */\n     flag_pic = 1;\n \n   /* -mvr4130-align is a \"speed over size\" optimization: it usually produces"}, {"sha": "30d77eb5cc3263dc53ebeac022da17526e030601", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -148,6 +148,15 @@ enum mips_code_readable_setting {\n /* True if we are generating position-independent VxWorks RTP code.  */\n #define TARGET_RTP_PIC (TARGET_VXWORKS_RTP && flag_pic)\n \n+/* True if the output file is marked as \".abicalls; .option pic0\"\n+   (-call_nonpic).  */\n+#define TARGET_ABICALLS_PIC0 \\\n+  (TARGET_ABSOLUTE_ABICALLS && TARGET_PLT)\n+\n+/* True if the output file is marked as \".abicalls; .option pic2\" (-KPIC).  */\n+#define TARGET_ABICALLS_PIC2 \\\n+  (TARGET_ABICALLS && !TARGET_ABICALLS_PIC0)\n+\n /* True if the call patterns should be split into a jalr followed by\n    an instruction to restore $gp.  It is only safe to split the load\n    from the call when every use of $gp is explicit.  */\n@@ -200,7 +209,10 @@ enum mips_code_readable_setting {\n    Although GAS does understand .gpdword, the SGI linker mishandles\n    the relocations GAS generates (R_MIPS_GPREL32 followed by R_MIPS_64).\n    We therefore disable GP-relative switch tables for n64 on IRIX targets.  */\n-#define TARGET_GPWORD (TARGET_ABICALLS && !(mips_abi == ABI_64 && TARGET_IRIX))\n+#define TARGET_GPWORD\t\t\t\t\\\n+  (TARGET_ABICALLS\t\t\t\t\\\n+   && !TARGET_ABSOLUTE_ABICALLS\t\t\t\\\n+   && !(mips_abi == ABI_64 && TARGET_IRIX))\n \n /* Generate mips16 code */\n #define TARGET_MIPS16\t\t((target_flags & MASK_MIPS16) != 0)\n@@ -715,7 +727,8 @@ enum mips_code_readable_setting {\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\" }, \\\n   {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" }, \\\n   {\"divide\", \"%{!mdivide-traps:%{!mdivide-breaks:-mdivide-%(VALUE)}}\" }, \\\n-  {\"llsc\", \"%{!mllsc:%{!mno-llsc:-m%(VALUE)}}\" }\n+  {\"llsc\", \"%{!mllsc:%{!mno-llsc:-m%(VALUE)}}\" }, \\\n+  {\"mips-plt\", \"%{!mplt:%{!mno-plt:-m%(VALUE)}}\" }\n \n \n #define GENERATE_DIVIDE_TRAPS (TARGET_DIVIDE_TRAPS \\\n@@ -1074,7 +1087,7 @@ enum mips_code_readable_setting {\n %{mfix-vr4120} %{mfix-vr4130} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n-%{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mabi=*} %{!mabi=*: %(asm_abi_default_spec)} \\\n %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n %{mfp32} %{mfp64} \\\n %{mshared} %{mno-shared} \\\n@@ -2559,7 +2572,7 @@ typedef struct mips_args {\n    ? \"%*\" INSN \"\\t%\" #OPNO \"%/\"\t\t\t\t\t\\\n    : REG_P (OPERANDS[OPNO])\t\t\t\t\t\\\n    ? \"%*\" INSN \"r\\t%\" #OPNO \"%/\"\t\t\t\t\\\n-   : TARGET_ABICALLS\t\t\t\t\t\t\\\n+   : TARGET_ABICALLS_PIC2\t\t\t\t\t\\\n    ? (\".option\\tpic0\\n\\t\"\t\t\t\t\t\\\n       \"%*\" INSN \"\\t%\" #OPNO \"%/\\n\\t\"\t\t\t\t\\\n       \".option\\tpic2\")\t\t\t\t\t\t\\"}, {"sha": "4e69e29a7e5a5bd642f05f3283cf271f1e912d4a", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -160,6 +160,10 @@ mgpopt\n Target Report Var(TARGET_GPOPT) Init(1)\n Use GP-relative addressing to access small data\n \n+mplt\n+Target Report Var(TARGET_PLT)\n+When generating -mabicalls code, allow executables to use PLTs and copy relocations\n+\n mhard-float\n Target Report RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)\n Allow the use of hardware floating-point ABI and instructions"}, {"sha": "e3560c80138be76626f65064040e82eda38e1ad0", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -1076,6 +1076,12 @@ not provide them.\n On MIPS targets, make @option{-mno-llsc} the default when no\n @option{-mllsc} option is passed.\n \n+@item --with-mips-plt\n+On MIPS targets, make use of copy relocations and PLTs.\n+These features are extensions to the traditional\n+SVR4-based MIPS ABIs and require support from GNU binutils\n+and the runtime C library.\n+\n @item --enable-__cxa_atexit\n Define if you want to use __cxa_atexit, rather than atexit, to\n register C++ destructors for local statics and global objects."}, {"sha": "3d034536a2894cb80a06799ffeae766a1b77279c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21d5757ecfd70f55f87bad7c5db48b0e28bd466/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e21d5757ecfd70f55f87bad7c5db48b0e28bd466", "patch": "@@ -634,8 +634,8 @@ Objective-C and Objective-C++ Dialects}.\n -mips16  -mno-mips16  -mflip-mips16 @gol\n -minterlink-mips16  -mno-interlink-mips16 @gol\n -mabi=@var{abi}  -mabicalls  -mno-abicalls @gol\n--mshared  -mno-shared  -mxgot  -mno-xgot  -mgp32  -mgp64 @gol\n--mfp32  -mfp64  -mhard-float  -msoft-float @gol\n+-mshared  -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot @gol\n+-mgp32  -mgp64  -mfp32  -mfp64  -mhard-float  -msoft-float @gol\n -msingle-float  -mdouble-float  -mdsp  -mno-dsp  -mdspr2  -mno-dspr2 @gol\n -msmartmips  -mno-smartmips @gol\n -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx @gol\n@@ -12162,6 +12162,19 @@ executables both smaller and quicker.\n \n @option{-mshared} is the default.\n \n+@item -mplt\n+@itemx -mno-plt\n+@opindex mplt\n+@opindex mno-plt\n+Assume (do not assume) that the static and dynamic linkers\n+support PLTs and copy relocations.  This option only affects\n+@samp{-mno-shared -mabicalls}.  For the n64 ABI, this option\n+has no effect without @samp{-msym32}.\n+\n+You can make @option{-mplt} the default by configuring\n+GCC with @option{--with-mips-plt}.  The default is\n+@option{-mno-plt} otherwise.\n+\n @item -mxgot\n @itemx -mno-xgot\n @opindex mxgot"}]}