{"sha": "5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4MWI4MmIzMDI3YWM3MGZmNjEwYTBmOGYyZTFhMjQ2NjUzOTBhZQ==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-09T18:15:17Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-09T18:15:17Z"}, "message": "s390.c: (s390_decompose_address...\n\n2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.c: (s390_decompose_address,\n\ttls_symbolic_operand, legitimate_pic_operand_p,\n\tlegitimate_constant_p, legitimate_reload_constant_p,\n\ts390_expand_plus_operand, legitimate_address_p,\n\tlegitimate_la_operand_p, ): Remove 'register' from signature.\n\t(symbolic_reference_mentioned_p,\n\ttls_symbolic_reference_mentioned_p): Remove 'register' from local\n\tvariable declarations.\n\t(legitimize_address): Remove 'register' from\n\tsignature and local variable declarations.\n\nFrom-SVN: r99464", "tree": {"sha": "b1d7436675e6dd375c1625d32111797095651a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d7436675e6dd375c1625d32111797095651a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d81b82b3027ac70ff610a0f8f2e1a24665390ae/comments", "author": null, "committer": null, "parents": [{"sha": "3ed99cc9201090163e6dd0e938c22dac226754a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed99cc9201090163e6dd0e938c22dac226754a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed99cc9201090163e6dd0e938c22dac226754a0"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "da0d85ca88fa0635305013c473579a8a8ea36086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d81b82b3027ac70ff610a0f8f2e1a24665390ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d81b82b3027ac70ff610a0f8f2e1a24665390ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "patch": "@@ -1,3 +1,16 @@\n+2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.c: (s390_decompose_address,\n+\ttls_symbolic_operand, legitimate_pic_operand_p,\n+\tlegitimate_constant_p, legitimate_reload_constant_p,\n+\ts390_expand_plus_operand, legitimate_address_p,\n+\tlegitimate_la_operand_p, ): Remove 'register' from signature.\n+\t(symbolic_reference_mentioned_p,\n+\ttls_symbolic_reference_mentioned_p): Remove 'register' from local\n+\tvariable declarations.\n+\t(legitimize_address): Remove 'register' from\n+\tsignature and local variable declarations.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390-protos.h: (s390_match_ccmode,"}, {"sha": "3a1c77395474c58aa5c989c47c7d32857a701683", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d81b82b3027ac70ff610a0f8f2e1a24665390ae/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d81b82b3027ac70ff610a0f8f2e1a24665390ae/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5d81b82b3027ac70ff610a0f8f2e1a24665390ae", "patch": "@@ -1281,7 +1281,7 @@ s390_short_displacement (rtx disp)\n    canonical form so that they will be recognized.  */\n \n static int\n-s390_decompose_address (register rtx addr, struct s390_address *out)\n+s390_decompose_address (rtx addr, struct s390_address *out)\n {\n   HOST_WIDE_INT offset = 0;\n   rtx base = NULL_RTX;\n@@ -1970,7 +1970,7 @@ s390_address_cost (rtx addr)\n    otherwise return 0.  */\n \n int\n-tls_symbolic_operand (register rtx op)\n+tls_symbolic_operand (rtx op)\n {\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n@@ -1999,8 +1999,8 @@ s390_split_access_reg (rtx reg, rtx *lo, rtx *hi)\n bool\n symbolic_reference_mentioned_p (rtx op)\n {\n-  register const char *fmt;\n-  register int i;\n+  const char *fmt;\n+  int i;\n \n   if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)\n     return 1;\n@@ -2010,7 +2010,7 @@ symbolic_reference_mentioned_p (rtx op)\n     {\n       if (fmt[i] == 'E')\n \t{\n-\t  register int j;\n+\t  int j;\n \n \t  for (j = XVECLEN (op, i) - 1; j >= 0; j--)\n \t    if (symbolic_reference_mentioned_p (XVECEXP (op, i, j)))\n@@ -2029,8 +2029,8 @@ symbolic_reference_mentioned_p (rtx op)\n bool\n tls_symbolic_reference_mentioned_p (rtx op)\n {\n-  register const char *fmt;\n-  register int i;\n+  const char *fmt;\n+  int i;\n \n   if (GET_CODE (op) == SYMBOL_REF)\n     return tls_symbolic_operand (op);\n@@ -2040,7 +2040,7 @@ tls_symbolic_reference_mentioned_p (rtx op)\n     {\n       if (fmt[i] == 'E')\n \t{\n-\t  register int j;\n+\t  int j;\n \n \t  for (j = XVECLEN (op, i) - 1; j >= 0; j--)\n \t    if (tls_symbolic_reference_mentioned_p (XVECEXP (op, i, j)))\n@@ -2060,7 +2060,7 @@ tls_symbolic_reference_mentioned_p (rtx op)\n    and that OP satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n int\n-legitimate_pic_operand_p (register rtx op)\n+legitimate_pic_operand_p (rtx op)\n {\n   /* Accept all non-symbolic constants.  */\n   if (!SYMBOLIC_CONST (op))\n@@ -2075,7 +2075,7 @@ legitimate_pic_operand_p (register rtx op)\n    It is given that OP satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n int\n-legitimate_constant_p (register rtx op)\n+legitimate_constant_p (rtx op)\n {\n   /* Accept all non-symbolic constants.  */\n   if (!SYMBOLIC_CONST (op))\n@@ -2173,7 +2173,7 @@ s390_cannot_force_const_mem (rtx x)\n    before it can be used as operand.  */\n \n bool\n-legitimate_reload_constant_p (register rtx op)\n+legitimate_reload_constant_p (rtx op)\n {\n   /* Accept la(y) operands.  */\n   if (GET_CODE (op) == CONST_INT\n@@ -2288,8 +2288,8 @@ s390_secondary_output_reload_class (enum reg_class class,\n    SCRATCH may be used as scratch register.  */\n \n void\n-s390_expand_plus_operand (register rtx target, register rtx src,\n-\t\t\t  register rtx scratch)\n+s390_expand_plus_operand (rtx target, rtx src,\n+\t\t\t  rtx scratch)\n {\n   rtx sum1, sum2;\n   struct s390_address ad;\n@@ -2348,7 +2348,7 @@ s390_expand_plus_operand (register rtx target, register rtx src,\n \n bool\n legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t      register rtx addr, int strict)\n+\t\t      rtx addr, int strict)\n {\n   struct s390_address ad;\n   if (!s390_decompose_address (addr, &ad))\n@@ -2377,7 +2377,7 @@ legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n    address, as LA performs only a 31-bit addition.  */\n \n bool\n-legitimate_la_operand_p (register rtx op)\n+legitimate_la_operand_p (rtx op)\n {\n   struct s390_address addr;\n   if (!s390_decompose_address (op, &addr))\n@@ -2972,7 +2972,7 @@ emit_symbolic_move (rtx *operands)\n    See comments by legitimize_pic_address for details.  */\n \n rtx\n-legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n+legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t\t    enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   rtx constant_term = const0_rtx;\n@@ -3027,8 +3027,8 @@ legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n     {\n       if (GET_CODE (XEXP (x, 0)) == REG)\n \t{\n-\t  register rtx temp = gen_reg_rtx (Pmode);\n-\t  register rtx val  = force_operand (XEXP (x, 1), temp);\n+\t  rtx temp = gen_reg_rtx (Pmode);\n+\t  rtx val  = force_operand (XEXP (x, 1), temp);\n \t  if (val != temp)\n \t    emit_move_insn (temp, val);\n \n@@ -3037,8 +3037,8 @@ legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n \n       else if (GET_CODE (XEXP (x, 1)) == REG)\n \t{\n-\t  register rtx temp = gen_reg_rtx (Pmode);\n-\t  register rtx val  = force_operand (XEXP (x, 0), temp);\n+\t  rtx temp = gen_reg_rtx (Pmode);\n+\t  rtx val  = force_operand (XEXP (x, 0), temp);\n \t  if (val != temp)\n \t    emit_move_insn (temp, val);\n "}]}