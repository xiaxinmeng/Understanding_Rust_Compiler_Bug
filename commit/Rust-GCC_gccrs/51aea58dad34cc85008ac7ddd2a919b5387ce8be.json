{"sha": "51aea58dad34cc85008ac7ddd2a919b5387ce8be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhZWE1OGRhZDM0Y2M4NTAwOGFjN2RkZDJhOTE5YjUzODdjZThiZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-21T01:18:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-21T01:18:26Z"}, "message": "Delete spurious constraints from all define_expands.\n\n(rotlsi3_1): Set T reg instead of clobbering it.\n(ashrsi3): Use expand_ashiftrt instead of gen_shifty_op.\n(movsi_i, movhi_i, movsf_i): Add conditions to reject patterns\nneeding a reload.\n(movdi-2, movdf_k): Correct conditions to reject patterns needing\na reload.\n([inverse_]branch_{true,false}): Pass operands to output_branch.\n(jump): Delete unnecessary braces.\n(call, call_value): Don't use expand_acall.  Force operand0 into\na register.\n\nFrom-SVN: r9421", "tree": {"sha": "01e4f7f4d442d234159b6da53822190be536ba29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e4f7f4d442d234159b6da53822190be536ba29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51aea58dad34cc85008ac7ddd2a919b5387ce8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51aea58dad34cc85008ac7ddd2a919b5387ce8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51aea58dad34cc85008ac7ddd2a919b5387ce8be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51aea58dad34cc85008ac7ddd2a919b5387ce8be/comments", "author": null, "committer": null, "parents": [{"sha": "657bb6dc84c557465d1d6683ba0731017f6137b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657bb6dc84c557465d1d6683ba0731017f6137b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657bb6dc84c557465d1d6683ba0731017f6137b8"}], "stats": {"total": 137, "additions": 70, "deletions": 67}, "files": [{"sha": "d6b5475ef724ca15aa9457a0579d6371f3f72997", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 70, "deletions": 67, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51aea58dad34cc85008ac7ddd2a919b5387ce8be/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51aea58dad34cc85008ac7ddd2a919b5387ce8be/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=51aea58dad34cc85008ac7ddd2a919b5387ce8be", "patch": "@@ -1,6 +1,7 @@\n-;;- Machine description the Hitachi SH\n-;;  Copyright (C) 1993 Free Software Foundation, Inc.\n-;;  Contributed by Steve Chamberlain (sac@cygnus.com)\n+;;- Machine description for the Hitachi SH.\n+;;  Copyright (C) 1993, 1994, 1995 Free Software Foundation, Inc.\n+;;  Contributed by Steve Chamberlain (sac@cygnus.com).\n+;;  Improved by Jim Wilson (wilson@cygnus.com).\n \n ;; This file is part of GNU CC.\n \n@@ -38,22 +39,20 @@\n ;; Special formats used for outputting SH instructions:\n ;;\n ;;   %.  --  print a .s if insn needs delay slot\n+;;   %@  --  print rte/rts if is/isn't an interrupt function\n ;;   %#  --  output a nop if there is nothing to put in the delay slot\n-;;   %R  --  print the lsw arg of a double,\n-;;   %S  --  print the msw arg of a double\n ;;   %O  --  print a constant without the #\n-;;   %M  --  print a constant as its negative\n-;;\n+;;   %R  --  print the lsw reg of a double\n+;;   %S  --  print the msw reg of a double\n+;;   %T  --  print next word of a double REG or MEM\n ;;\n ;; Special predicates:\n ;;\n ;;  arith_operand          -- operand is valid source for arithmetic op\n ;;  arith_reg_operand      -- operand is valid register for arithmetic op\n-;;  byte_index_operand     -- operand is ok as an index in a mov.b\n ;;  general_movdst_operand -- operand is valid move destination\n ;;  general_movsrc_operand -- operand is valid move source\n ;;  logical_operand        -- operand is valid source for logical op\n-;;  system_reg_operand     -- operand is MACL, MACH, or PR\n ;; -------------------------------------------------------------------------\n ;; Attributes\n ;; -------------------------------------------------------------------------\n@@ -147,6 +146,9 @@\n   (eq_attr \"needs_delay_slot\" \"yes\")\n   [(eq_attr \"in_delay_slot\" \"yes\") (nil) (nil)])\n \n+;; On the SH and SH2, the rte instruction reads the return pc from the stack,\n+;; and thus we can't put a pop instruction in its delay slot.\n+\n (define_delay\n   (eq_attr \"type\" \"return\")\n   [(and (eq_attr \"in_delay_slot\" \"yes\")\n@@ -316,10 +318,10 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"udivsi3\"\n-  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n+  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n    (set (match_dup 3) (symbol_ref:SI \"__udivsi3\"))\n-   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t  (udiv:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 18))\n@@ -344,10 +346,10 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"divsi3\"\n-  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n+  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n    (set (match_dup 3) (symbol_ref:SI \"__sdivsi3\"))\n-   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t  (div:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 18))\n@@ -384,21 +386,21 @@\n (define_expand \"mulhisi3\"\n   [(set (reg:SI 21)\n \t(mult:SI (sign_extend:SI\n-\t\t  (match_operand:HI 1 \"arith_reg_operand\" \"r\"))\n+\t\t  (match_operand:HI 1 \"arith_reg_operand\" \"\"))\n \t\t (sign_extend:SI\n-\t\t  (match_operand:HI 2 \"arith_reg_operand\" \"r\"))))\n-   (set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t\t  (match_operand:HI 2 \"arith_reg_operand\" \"\"))))\n+   (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(reg:SI 21))]\n   \"\"\n   \"\")\n \n (define_expand \"umulhisi3\"\n   [(set (reg:SI 21)\n \t(mult:SI (zero_extend:SI\n-\t\t  (match_operand:HI 1 \"arith_reg_operand\" \"r\"))\n+\t\t  (match_operand:HI 1 \"arith_reg_operand\" \"\"))\n \t\t (zero_extend:SI\n-\t\t  (match_operand:HI 2 \"arith_reg_operand\" \"r\"))))\n-   (set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t\t  (match_operand:HI 2 \"arith_reg_operand\" \"\"))))\n+   (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(reg:SI 21))]\n   \"\"\n   \"\")\n@@ -422,10 +424,10 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"mulsi3_call\"\n-  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n+  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n    (set (match_dup 3) (symbol_ref:SI \"__mulsi3\"))\n-   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t  (mult:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 21))\n@@ -448,9 +450,9 @@\n \n (define_expand \"mulsi3\"\n   [(set (reg:SI 21)\n-\t(mult:SI  (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t  (match_operand:SI 2 \"arith_reg_operand\" \"r\")))\n-   (set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(mult:SI  (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t  (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n+   (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(reg:SI 21))]\n   \"\"\n   \"\n@@ -474,9 +476,9 @@\n \n (define_expand \"mulsidi3\"\n   [(set (reg:DI 20)\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n-   (set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\"))))\n+   (set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t(reg:DI 20))]\n   \"(TARGET_SH2) && 0\"\n   \"\")\n@@ -491,9 +493,9 @@\n \n (define_expand \"umulsidi3\"\n   [(set (reg:DI 20)\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n-   (set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\"))))\n+   (set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t(reg:DI 20))]\n   \"(TARGET_SH2) && 0\"\n   \"\")\n@@ -551,7 +553,8 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t   (const_int 1)))\n-   (clobber (reg:SI 18))]\n+   (set (reg:SI 18)\n+\t(lshiftrt:SI (match_dup 1) (const_int 31)))]\n   \"\"\n   \"rotl\t%0\")\n \n@@ -615,6 +618,7 @@\n ;;\n ;; shift left\n \n+\n (define_insn \"ashlsi3_k\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n@@ -706,6 +710,7 @@\n }\"\n   [(set_attr \"length\" \"4,6\")])\n \n+\n (define_insn \"ashrsi3_n\"\n   [(set (reg:SI 4)\n \t(ashiftrt:SI (reg:SI 4)\n@@ -719,12 +724,12 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"ashrsi3\"\n-  [(parallel[(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t\t  (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"M\")))\n+  [(parallel[(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t\t  (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n \t     (clobber (reg:SI 18))])]\n   \"\"\n-  \"if (gen_shifty_op (ASHIFTRT, operands)) DONE; else FAIL;\")\n+  \"if (expand_ashiftrt (operands)) DONE; else FAIL;\")\n \n ;; logical shift right\n \n@@ -861,8 +866,8 @@\n   [(set_attr \"type\" \"arith\")])\n \n (define_expand \"negdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n    (clobber (reg:SI 18))]\n   \"\"\n   \"{\n@@ -993,7 +998,8 @@\n (define_insn \"movsi_i\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,r,m,<,xl,xl,t,r\")\n \t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,m,xl,t,r,xl,r,>,r,i\"))]\n-  \"\"\n+  \"register_operand (operands[0], SImode)\n+   || register_operand (operands[1], SImode)\"\n   \"@\n \tmov.l\t%1,%0\n \tmov\t%1,%0\n@@ -1040,7 +1046,8 @@\n (define_insn \"movhi_i\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"=r,r,r,r,m,r,l,r\")\n \t(match_operand:HI 1 \"general_movsrc_operand\" \"Q,rI,m,t,r,l,r,i\"))]\n-  \"\"\n+  \"arith_reg_operand (operands[0], HImode)\n+   || arith_reg_operand (operands[1], HImode)\"\n   \"@\n \tmov.w\t%1,%0\n \tmov\t%1,%0\n@@ -1061,8 +1068,8 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,m,r\")\n \t(match_operand:DI 1 \"general_movsrc_operand\" \"Q,r,m,r,i\"))]\n-  \"register_operand (operands[0], DImode)\n-  || register_operand (operands[1], DImode)\"\n+  \"arith_reg_operand (operands[0], DImode)\n+   || arith_reg_operand (operands[1], DImode)\"\n   \"* return output_movedouble (insn, operands, DImode);\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"pcload,move,load,store,move\")])\n@@ -1123,8 +1130,8 @@\n (define_insn \"movdf_k\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,m\")\n \t(match_operand:DF 1 \"general_movsrc_operand\" \"r,m,r\"))]\n-  \"register_operand (operands[0], DFmode)\n-   || register_operand (operands[1], DFmode)\"\n+  \"arith_reg_operand (operands[0], DFmode)\n+   || arith_reg_operand (operands[1], DFmode)\"\n   \"* return output_movedouble (insn, operands, DFmode);\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"move,load,store\")])\n@@ -1180,7 +1187,8 @@\n (define_insn \"movsf_i\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m,l,r\")\n \t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,I,m,r,r,l\"))]\n-  \"\"\n+  \"arith_reg_operand (operands[0], SFmode)\n+   || arith_reg_operand (operands[1], SFmode)\"\n   \"@\n \tmov\t%1,%0\n \tmov\t%1,%0\n@@ -1205,31 +1213,31 @@\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n-  \"* return output_branch (1, insn);\"\n+  \"* return output_branch (1, insn, operands);\"\n   [(set_attr \"type\" \"cbranch\")])\n \n (define_insn \"branch_false\"\n   [(set (pc) (if_then_else (ne (reg:SI 18) (const_int 1))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n-  \"* return output_branch (0, insn);\"\n+  \"* return output_branch (0, insn, operands);\"\n   [(set_attr \"type\" \"cbranch\")])\n \n (define_insn \"inverse_branch_true\"\n   [(set (pc) (if_then_else (eq (reg:SI 18) (const_int 1))\n \t\t\t   (pc)\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"* return output_branch (0, insn);\"\n+  \"* return output_branch (0, insn, operands);\"\n   [(set_attr \"type\" \"cbranch\")])\n \n (define_insn \"inverse_branch_false\"\n   [(set (pc) (if_then_else (ne (reg:SI 18) (const_int 1))\n    \t\t\t   (pc)\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"* return output_branch (1, insn);\"\n+  \"* return output_branch (1, insn, operands);\"\n   [(set_attr \"type\" \"cbranch\")])\n \f\n ;; Conditional branch insns\n@@ -1349,18 +1357,13 @@\n {\n   /* The length is 16 if the delay slot is unfilled.  */\n   if (get_attr_length(insn) >= 14)\n-    {\n-      return output_far_jump(insn, operands[0]);\n-    }\n+    return output_far_jump(insn, operands[0]);\n   else\n-    {\n-      return   \\\"bra\t%l0%#\\\";\n-    }\n+    return   \\\"bra\t%l0%#\\\";\n }\"\n   [(set_attr \"type\" \"jump\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n-\n (define_insn \"calli\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -1379,19 +1382,19 @@\n   [(set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"call\"\n-  [(parallel[(call (match_operand 0 \"arith_reg_operand\" \"o\")\n-\t\t   (match_operand 1 \"\" \"\"))\n-\t     (clobber (reg:SI 17))])]\n+  [(parallel [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n+\t\t\t    (match_operand 1 \"\" \"\"))\n+\t      (clobber (reg:SI 17))])]\n   \"\"\n-  \"expand_acall(0, operands); DONE;\")\n+  \"operands[0] = force_reg (SImode, XEXP (operands[0], 0));\")\n \n (define_expand \"call_value\"\n-  [(parallel[(set (match_operand 0 \"\" \"=rf\")\n-\t\t  (call (match_operand 1 \"arith_reg_operand\" \"o\")\n-\t\t\t(match_operand 2 \"\" \"\")))\n-\t     (clobber (reg:SI 17))])]\n+  [(parallel [(set (match_operand 0 \"arith_reg_operand\" \"\")\n+\t\t   (call (mem:SI (match_operand 1 \"arith_reg_operand\" \"\"))\n+\t\t\t\t (match_operand 2 \"\" \"\")))\n+\t      (clobber (reg:SI 17))])]\n   \"\"\n-  \"expand_acall(1, operands); DONE; \")\n+  \"operands[1] = force_reg (SImode, XEXP (operands[1], 0));\")\n \n (define_insn \"indirect_jump\"\n   [(set (pc)"}]}