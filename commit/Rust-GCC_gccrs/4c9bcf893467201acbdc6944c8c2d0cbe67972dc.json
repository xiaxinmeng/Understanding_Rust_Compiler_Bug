{"sha": "4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5YmNmODkzNDY3MjAxYWNiZGM2OTQ0YzhjMmQwY2JlNjc5NzJkYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-18T10:46:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-18T10:46:05Z"}, "message": "re PR tree-optimization/53970 (-ftree-vectorization does not handle well unaligned data)\n\n2012-07-18  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53970\n\t* tree.h (contains_packed_reference): Remove.\n\t* expr.c (contains_packed_reference): Likewise.\n\t* tree-vect-data-refs.c (not_size_aligned): New function.\n\t(vector_alignment_reachable_p): Use it.\n\t(vect_supportable_dr_alignment): Likewise.\n\n\t* g++.dg/torture/pr53970.C: New testcase.\n\nFrom-SVN: r189609", "tree": {"sha": "a29a811549836915e77e5838f455d345d6548dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29a811549836915e77e5838f455d345d6548dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0f4a35f73d421cac856149de1756a51d833adb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f4a35f73d421cac856149de1756a51d833adb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f4a35f73d421cac856149de1756a51d833adb3"}], "stats": {"total": 102, "additions": 47, "deletions": 55}, "files": [{"sha": "eda5fb6293914c05636229ec63d20e327d108b0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -1,3 +1,12 @@\n+2012-07-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53970\n+\t* tree.h (contains_packed_reference): Remove.\n+\t* expr.c (contains_packed_reference): Likewise.\n+\t* tree-vect-data-refs.c (not_size_aligned): New function.\n+\t(vector_alignment_reachable_p): Use it.\n+\t(vect_supportable_dr_alignment): Likewise.\n+\n 2012-07-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (get_object_or_type_alignment): Remove."}, {"sha": "3ba57432460b2b9f8a561e55962d05f39c80bd69", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -6709,47 +6709,6 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   return exp;\n }\n \n-/* Given an expression EXP that may be a COMPONENT_REF, an ARRAY_REF or an\n-   ARRAY_RANGE_REF, look for whether EXP or any nested component-refs within\n-   EXP is marked as PACKED.  */\n-\n-bool\n-contains_packed_reference (const_tree exp)\n-{\n-  bool packed_p = false;\n-\n-  while (1)\n-    {\n-      switch (TREE_CODE (exp))\n-\t{\n-\tcase COMPONENT_REF:\n-\t  {\n-\t    tree field = TREE_OPERAND (exp, 1);\n-\t    packed_p = DECL_PACKED (field)\n-\t\t       || TYPE_PACKED (TREE_TYPE (field))\n-\t\t       || TYPE_PACKED (TREE_TYPE (exp));\n-\t    if (packed_p)\n-\t      goto done;\n-\t  }\n-\t  break;\n-\n-\tcase BIT_FIELD_REF:\n-\tcase ARRAY_REF:\n-\tcase ARRAY_RANGE_REF:\n-\tcase REALPART_EXPR:\n-\tcase IMAGPART_EXPR:\n-\tcase VIEW_CONVERT_EXPR:\n-\t  break;\n-\n-\tdefault:\n-\t  goto done;\n-\t}\n-      exp = TREE_OPERAND (exp, 0);\n-    }\n- done:\n-  return packed_p;\n-}\n-\n /* Return a tree of sizetype representing the size, in bytes, of the element\n    of EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n "}, {"sha": "b046c68a3d3ab83ff048b990610b4510b7d68fe3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -1,3 +1,8 @@\n+2012-07-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53970\n+\t* g++.dg/torture/pr53970.C: New testcase.\n+\n 2012-07-18  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/38621"}, {"sha": "53cbc1f855a523e5d108727b498a5f9fbbce996a", "filename": "gcc/testsuite/g++.dg/torture/pr53970.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr53970.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr53970.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr53970.C?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+\n+#pragma pack(1)\n+struct mystruct {\n+    char c;\n+    unsigned long l[1024];\n+};\n+#pragma pack()\n+\n+int main(int argc, char **argv)\n+{\n+  mystruct *a = new mystruct;\n+  unsigned long i;\n+  for (i = 0; i < 1024; ++i)\n+    a->l[i] = 0xdeadbeaf;\n+  return 0;\n+}"}, {"sha": "147fa902cd644e33d82971e0b303bcb3f3853814", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -1131,6 +1131,18 @@ vect_verify_datarefs_alignment (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n   return true;\n }\n \n+/* Given an memory reference EXP return whether its alignment is less\n+   than its size.  */\n+\n+static bool\n+not_size_aligned (tree exp)\n+{\n+  if (!host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1))\n+    return true;\n+\n+  return (tree_low_cst (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+\t  > get_object_alignment (exp));\n+}\n \n /* Function vector_alignment_reachable_p\n \n@@ -1184,12 +1196,8 @@ vector_alignment_reachable_p (struct data_reference *dr)\n \n   if (!known_alignment_for_access_p (dr))\n     {\n-      tree type = (TREE_TYPE (DR_REF (dr)));\n-      bool is_packed = contains_packed_reference (DR_REF (dr));\n-\n-      if (compare_tree_int (TYPE_SIZE (type), TYPE_ALIGN (type)) > 0)\n-\tis_packed = true;\n-\n+      tree type = TREE_TYPE (DR_REF (dr));\n+      bool is_packed = not_size_aligned (DR_REF (dr));\n       if (vect_print_dump_info (REPORT_DETAILS))\n \tfprintf (vect_dump, \"Unknown misalignment, is_packed = %d\",is_packed);\n       if (targetm.vectorize.vector_alignment_reachable (type, is_packed))\n@@ -4863,7 +4871,7 @@ vect_supportable_dr_alignment (struct data_reference *dr,\n \t    return dr_explicit_realign_optimized;\n \t}\n       if (!known_alignment_for_access_p (dr))\n-\tis_packed = contains_packed_reference (DR_REF (dr));\n+\tis_packed = not_size_aligned (DR_REF (dr));\n \n       if (targetm.vectorize.\n \t  support_vector_misalignment (mode, type,\n@@ -4877,7 +4885,7 @@ vect_supportable_dr_alignment (struct data_reference *dr,\n       tree type = (TREE_TYPE (DR_REF (dr)));\n \n       if (!known_alignment_for_access_p (dr))\n-\tis_packed = contains_packed_reference (DR_REF (dr));\n+\tis_packed = not_size_aligned (DR_REF (dr));\n \n      if (targetm.vectorize.\n          support_vector_misalignment (mode, type,"}, {"sha": "62d66456e3255ffec409d0c75705cf931b921ebc", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9bcf893467201acbdc6944c8c2d0cbe67972dc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4c9bcf893467201acbdc6944c8c2d0cbe67972dc", "patch": "@@ -5068,12 +5068,6 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t tree *, enum machine_mode *, int *, int *,\n \t\t\t\t bool);\n \n-/* Given an expression EXP that may be a COMPONENT_REF, an ARRAY_REF or an\n-   ARRAY_RANGE_REF, look for whether EXP or any nested component-refs within\n-   EXP is marked as PACKED.  */\n-\n-extern bool contains_packed_reference (const_tree exp);\n-\n /* Return a tree of sizetype representing the size, in bytes, of the element\n    of EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n "}]}