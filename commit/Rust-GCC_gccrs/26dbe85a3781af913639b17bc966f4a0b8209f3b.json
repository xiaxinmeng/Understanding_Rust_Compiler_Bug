{"sha": "26dbe85a3781af913639b17bc966f4a0b8209f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkYmU4NWEzNzgxYWY5MTM2MzliMTdiYzk2NmY0YTBiODIwOWYzYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-09T19:18:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-11T02:32:21Z"}, "message": "c++: Extend std::is_constant_evaluated in if warning [PR100995]\n\nJakub pointed me at\n<http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1938r3.html#compiler-warnings>\nwhich shows that our existing warning could be extended to handle more\ncases.  This patch implements that.\n\nA minor annoyance was handling macros, in libstdc++ we have\n\n  reference operator[](size_type __pos) {\n      __glibcxx_assert(__pos <= size());\n      ...\n  }\n\nwherein __glibcxx_assert expands to\n\n  if (__builtin_is_constant_evaluated() && !bool(__pos <= size())\n    ...\n\nbut I'm of a mind to not warn on that.\n\nOnce consteval if makes it in, we should tweak this warning one more\ntime.\n\n\tPR c++/100995\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (maybe_constexpr_fn): New.\n\t* cp-tree.h (maybe_constexpr_fn): Declare.\n\t* semantics.c (find_std_constant_evaluated_r): New.\n\t(maybe_warn_for_constant_evaluated): New.\n\t(finish_if_stmt_cond): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/is-constant-evaluated9.C: Add dg-warning.\n\t* g++.dg/cpp2a/is-constant-evaluated12.C: New test.", "tree": {"sha": "7e1b0f3b3434d95a1287b7a8c7a4caddd42d5d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1b0f3b3434d95a1287b7a8c7a4caddd42d5d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26dbe85a3781af913639b17bc966f4a0b8209f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dbe85a3781af913639b17bc966f4a0b8209f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26dbe85a3781af913639b17bc966f4a0b8209f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dbe85a3781af913639b17bc966f4a0b8209f3b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edec2660ff4890ecf8cc191f7c92cf527de51fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2660ff4890ecf8cc191f7c92cf527de51fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edec2660ff4890ecf8cc191f7c92cf527de51fe2"}], "stats": {"total": 176, "additions": 160, "deletions": 16}, "files": [{"sha": "01b0c42471d99fb6d9a7e19f3c2aca62338844fc", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=26dbe85a3781af913639b17bc966f4a0b8209f3b", "patch": "@@ -5121,6 +5121,16 @@ var_in_constexpr_fn (tree t)\n \t  && DECL_DECLARED_CONSTEXPR_P (ctx));\n }\n \n+/* True if a function might be constexpr: either a function that was\n+   declared constexpr, or a C++17 lambda op().  */\n+\n+bool\n+maybe_constexpr_fn (tree t)\n+{\n+  return (DECL_DECLARED_CONSTEXPR_P (t)\n+\t  || (cxx_dialect >= cxx17 && LAMBDA_FUNCTION_P (t)));\n+}\n+\n /* True if T was declared in a function that might be constexpr: either a\n    function that was declared constexpr, or a C++17 lambda op().  */\n "}, {"sha": "9ac8b527749aace1ec231e9c789ef4a038bc9e3d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=26dbe85a3781af913639b17bc966f4a0b8209f3b", "patch": "@@ -8244,6 +8244,7 @@ extern bool reduced_constant_expression_p       (tree);\n extern bool is_instantiation_of_constexpr       (tree);\n extern bool var_in_constexpr_fn                 (tree);\n extern bool var_in_maybe_constexpr_fn           (tree);\n+extern bool maybe_constexpr_fn\t\t\t(tree);\n extern void explain_invalid_constexpr_fn        (tree);\n extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);"}, {"sha": "384c54bd025f2d91ef3c32d206da530a54a61ce3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=26dbe85a3781af913639b17bc966f4a0b8209f3b", "patch": "@@ -927,6 +927,71 @@ is_std_constant_evaluated_p (tree fn)\n   return name && id_equal (name, \"is_constant_evaluated\");\n }\n \n+/* Callback function for maybe_warn_for_constant_evaluated that looks\n+   for calls to std::is_constant_evaluated in TP.  */\n+\n+static tree\n+find_std_constant_evaluated_r (tree *tp, int *walk_subtrees, void *)\n+{\n+  tree t = *tp;\n+\n+  if (TYPE_P (t) || TREE_CONSTANT (t))\n+    {\n+      *walk_subtrees = false;\n+      return NULL_TREE;\n+    }\n+\n+  switch (TREE_CODE (t))\n+    {\n+    case CALL_EXPR:\n+      if (is_std_constant_evaluated_p (t))\n+\treturn t;\n+      break;\n+    case EXPR_STMT:\n+      /* Don't warn in statement expressions.  */\n+      *walk_subtrees = false;\n+      return NULL_TREE;\n+    default:\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* In certain contexts, std::is_constant_evaluated() is always true (for\n+   instance, in a consteval function or in a constexpr if), or always false\n+   (e.g., in a non-constexpr non-consteval function) so give the user a clue.  */\n+\n+static void\n+maybe_warn_for_constant_evaluated (tree cond, bool constexpr_if)\n+{\n+  if (!warn_tautological_compare)\n+    return;\n+\n+  /* Suppress warning for std::is_constant_evaluated if the conditional\n+     comes from a macro.  */\n+  if (from_macro_expansion_at (EXPR_LOCATION (cond)))\n+    return;\n+\n+  cond = cp_walk_tree_without_duplicates (&cond, find_std_constant_evaluated_r,\n+\t\t\t\t\t  NULL);\n+  if (cond)\n+    {\n+      if (constexpr_if)\n+\twarning_at (EXPR_LOCATION (cond), OPT_Wtautological_compare,\n+\t\t    \"%<std::is_constant_evaluated%> always evaluates to \"\n+\t\t    \"true in %<if constexpr%>\");\n+      else if (!maybe_constexpr_fn (current_function_decl))\n+\twarning_at (EXPR_LOCATION (cond), OPT_Wtautological_compare,\n+\t\t    \"%<std::is_constant_evaluated%> always evaluates to \"\n+\t\t    \"false in a non-%<constexpr%> function\");\n+      else if (DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n+\twarning_at (EXPR_LOCATION (cond), OPT_Wtautological_compare,\n+\t\t    \"%<std::is_constant_evaluated%> always evaluates to \"\n+\t\t    \"true in a %<consteval%> function\");\n+    }\n+}\n+\n /* Process the COND of an if-statement, which may be given by\n    IF_STMT.  */\n \n@@ -942,23 +1007,12 @@ finish_if_stmt_cond (tree cond, tree if_stmt)\n \t converted to bool.  */\n       && TYPE_MAIN_VARIANT (TREE_TYPE (cond)) == boolean_type_node)\n     {\n-      /* if constexpr (std::is_constant_evaluated()) is always true,\n-\t so give the user a clue.  */\n-      if (warn_tautological_compare)\n-\t{\n-\t  tree t = cond;\n-\t  if (TREE_CODE (t) == CLEANUP_POINT_EXPR)\n-\t    t = TREE_OPERAND (t, 0);\n-\t  if (TREE_CODE (t) == CALL_EXPR\n-\t      && is_std_constant_evaluated_p (t))\n-\t    warning_at (EXPR_LOCATION (cond), OPT_Wtautological_compare,\n-\t\t\t\"%qs always evaluates to true in %<if constexpr%>\",\n-\t\t\t\"std::is_constant_evaluated\");\n-\t}\n-\n+      maybe_warn_for_constant_evaluated (cond, /*constexpr_if=*/true);\n       cond = instantiate_non_dependent_expr (cond);\n       cond = cxx_constant_value (cond, NULL_TREE);\n     }\n+  else\n+    maybe_warn_for_constant_evaluated (cond, /*constexpr_if=*/false);\n   finish_cond (&IF_COND (if_stmt), cond);\n   add_stmt (if_stmt);\n   THEN_CLAUSE (if_stmt) = push_stmt_list ();"}, {"sha": "0de6bf74f4a8c38a80c49405e0d0c0d940f2bdd6", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated12.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated12.C?ref=26dbe85a3781af913639b17bc966f4a0b8209f3b", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/100995\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wtautological-compare\" }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated ();\n+  }\n+}\n+\n+template <int I = []() constexpr { if (std::is_constant_evaluated()) return 1; return 0; }()>\n+struct X { };\n+\n+template <int I = [](){ if (std::is_constant_evaluated()) return 1; return 0; }()>\n+struct Y { };\n+\n+template <int I = [](){ if constexpr (std::is_constant_evaluated()) return 1; return 0; }()> // { dg-warning \"always evaluates to true\" }\n+struct Z { };\n+\n+constexpr bool b = true;\n+\n+#define __glibcxx_assert(cond) \\\n+  if (__builtin_is_constant_evaluated() && !bool(cond)) \\\n+__builtin_unreachable()\n+#define CHECK __builtin_is_constant_evaluated() // { dg-warning \"always evaluates to false\" }\n+#define CHECK2 __builtin_is_constant_evaluated()\n+\n+int\n+foo ()\n+{\n+  if (std::is_constant_evaluated ()) // { dg-warning \"always evaluates to false\" }\n+    return 1;\n+  __glibcxx_assert(b);\n+  if (CHECK && b)\n+    return 2;\n+  if (CHECK2)\n+    return 3;\n+  return 0;\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  if (std::is_constant_evaluated ())\n+    return 1;\n+  if constexpr (std::is_constant_evaluated ()) // { dg-warning \"always evaluates to true\" }\n+    return 2;\n+  if constexpr (std::is_constant_evaluated () && b) // { dg-warning \"always evaluates to true\" }\n+    return 3;\n+  if constexpr (!std::is_constant_evaluated ()) // { dg-warning \"always evaluates to true\" }\n+    return 4;\n+  return 0;\n+}\n+\n+consteval int\n+baz ()\n+{\n+  if (std::is_constant_evaluated ()) // { dg-warning \"always evaluates to true\" }\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+qux ()\n+{\n+  if (({ static bool a = std::is_constant_evaluated (); a; }))\n+    return 1;\n+  if (({ bool a = std::is_constant_evaluated (); a; }))\n+    return 2;\n+  if (static bool a = std::is_constant_evaluated (); a)\n+    return 3;\n+  if (bool a = std::is_constant_evaluated (); a)\n+    return 4;\n+  if constexpr (constexpr bool a = std::is_constant_evaluated (); a)\n+    return 5;\n+  return 0;\n+}"}, {"sha": "5e405e71cc0c3aadf67882e33c75aaf8f4c16d3a", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dbe85a3781af913639b17bc966f4a0b8209f3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C?ref=26dbe85a3781af913639b17bc966f4a0b8209f3b", "patch": "@@ -32,7 +32,7 @@ constexpr int\n foo3(int i)\n {\n   // I is not a constant expression but we short-circuit it.\n-  if constexpr (__builtin_is_constant_evaluated () || i)\n+  if constexpr (__builtin_is_constant_evaluated () || i) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n     return 42;\n   else\n     return i;\n@@ -42,7 +42,7 @@ constexpr int\n foo4(int i)\n {\n   const int j = 0;\n-  if constexpr (j && __builtin_is_constant_evaluated ())\n+  if constexpr (j && __builtin_is_constant_evaluated ()) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n     return 42;\n   else\n     return i;"}]}