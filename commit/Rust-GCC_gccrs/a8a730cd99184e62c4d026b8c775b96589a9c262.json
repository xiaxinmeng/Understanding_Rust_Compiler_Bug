{"sha": "a8a730cd99184e62c4d026b8c775b96589a9c262", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhNzMwY2Q5OTE4NGU2MmM0ZDAyNmI4Yzc3NWI5NjU4OWE5YzI2Mg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-06-09T13:18:23Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-06-29T15:19:56Z"}, "message": "amdgcn: Enable support for TImode for AMD GCN\n\nThis patch enables support for TImode for AMD GCN, the lack of which\nis currently causing a number of test failures for the target and which\nis also needed to support \"omp_depend_kind\" for OpenMP 5.0, since that\nis implemented as a 128-bit integer.\n\nSeveral libgcc support routines are built by default for the \"word size\"\nof a machine, and also for \"2 * word size\" of the machine.  The libgcc\nbuild for AMD GCN is changed so that it builds for a \"word size\" of 64\nbits, in order to better match the (64-bit) host compiler.  However it\nisn't really true that we have 64-bit words -- GCN has 32-bit registers,\nso changing UNITS_PER_WORD unconditionally would be the wrong thing to do.\n\nChanging this setting for libgcc (only) means that support routines\nare built for \"single word\" operations that are DImode (64 bits), and\nthose for \"double word\" operations are built for TImode (128 bits).\nThat leaves some gaps regarding previous operations that were built\nfor a \"single word\" size of 32 bits and a \"double word\" size of 64 bits\n(generic code doesn't cover both alternatives for all operations that\nmight be needed).  Those gaps are filled in by this patch, or by the\npreceding patches in the series.\n\n2021-06-18  Julian Brown  <julian@codesourcery.com>\n\ngcc/\n\t* config/gcn/gcn.c (gcn_init_libfuncs): New function.\n\t(TARGET_INIT_LIBFUNCS): Define target hook using above function.\n\t* config/gcn/gcn.h (UNITS_PER_WORD): Define to 8 for IN_LIBGCC2, 4\n\totherwise.\n\t(LIBGCC2_UNITS_PER_WORD, BITS_PER_WORD): Remove definitions.\n\t(MAX_FIXED_MODE_SIZE): Change to 128.\n\nlibgcc/\n\t* config/gcn/lib2-bswapti2.c: New file.\n\t* config/gcn/lib2-divmod-di.c: New file.\n\t* config/gcn/lib2-gcn.h (DItype, UDItype, TItype, UTItype): Add\n\ttypedefs.\n\t(__divdi3, __moddi3, __udivdi3, __umoddi3): Add prototypes.\n\t* config/gcn/t-amdgcn (LIB2ADD): Add lib2-divmod-di.c and\n\tlib2-bswapti2.c.", "tree": {"sha": "dbdae551485ac2725318d60267b2cb95fccf95e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbdae551485ac2725318d60267b2cb95fccf95e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a730cd99184e62c4d026b8c775b96589a9c262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a730cd99184e62c4d026b8c775b96589a9c262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a730cd99184e62c4d026b8c775b96589a9c262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a730cd99184e62c4d026b8c775b96589a9c262/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c06e46a81d86d70d788ca1a93d27b6902bd4dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c06e46a81d86d70d788ca1a93d27b6902bd4dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c06e46a81d86d70d788ca1a93d27b6902bd4dc1"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "aa9d455bb08b43914fe7b49d633a3816c50b64b9", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -3610,6 +3610,34 @@ gcn_init_builtins (void)\n #endif\n }\n \n+/* Implement TARGET_INIT_LIBFUNCS.  */\n+\n+static void\n+gcn_init_libfuncs (void)\n+{\n+  /* BITS_PER_UNIT * 2 is 64 bits, which causes\n+     optabs-libfuncs.c:gen_int_libfunc to omit TImode (i.e 128 bits)\n+     libcalls that we need to support operations for that type.  Initialise\n+     them here instead.  */\n+  set_optab_libfunc (udiv_optab, TImode, \"__udivti3\");\n+  set_optab_libfunc (umod_optab, TImode, \"__umodti3\");\n+  set_optab_libfunc (sdiv_optab, TImode, \"__divti3\");\n+  set_optab_libfunc (smod_optab, TImode, \"__modti3\");\n+  set_optab_libfunc (smul_optab, TImode, \"__multi3\");\n+  set_optab_libfunc (addv_optab, TImode, \"__addvti3\");\n+  set_optab_libfunc (subv_optab, TImode, \"__subvti3\");\n+  set_optab_libfunc (negv_optab, TImode, \"__negvti2\");\n+  set_optab_libfunc (absv_optab, TImode, \"__absvti2\");\n+  set_optab_libfunc (smulv_optab, TImode, \"__mulvti3\");\n+  set_optab_libfunc (ffs_optab, TImode, \"__ffsti2\");\n+  set_optab_libfunc (clz_optab, TImode, \"__clzti2\");\n+  set_optab_libfunc (ctz_optab, TImode, \"__ctzti2\");\n+  set_optab_libfunc (clrsb_optab, TImode, \"__clrsbti2\");\n+  set_optab_libfunc (popcount_optab, TImode, \"__popcountti2\");\n+  set_optab_libfunc (parity_optab, TImode, \"__parityti2\");\n+  set_optab_libfunc (bswap_optab, TImode, \"__bswapti2\");\n+}\n+\n /* Expand the CMP_SWAP GCN builtins.  We have our own versions that do\n    not require taking the address of any object, other than the memory\n    cell being operated on.\n@@ -6345,6 +6373,8 @@ gcn_dwarf_register_span (rtx rtl)\n #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS gcn_init_builtins\n+#undef  TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS gcn_init_libfuncs\n #undef  TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS\n #define TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS \\\n   gcn_ira_change_pseudo_allocno_class"}, {"sha": "540835b81cc0dd1aa4f2d498142543e845879123", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -46,17 +46,20 @@\n #define BYTES_BIG_ENDIAN 0\n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_WORD 32\n-#define UNITS_PER_WORD (BITS_PER_WORD/BITS_PER_UNIT)\n-#define LIBGCC2_UNITS_PER_WORD 4\n+#ifdef IN_LIBGCC2\n+/* We want DImode and TImode helpers.  */\n+#define UNITS_PER_WORD 8\n+#else\n+#define UNITS_PER_WORD 4\n+#endif\n \n #define POINTER_SIZE\t     64\n #define PARM_BOUNDARY\t     64\n #define STACK_BOUNDARY\t     64\n #define FUNCTION_BOUNDARY    32\n #define BIGGEST_ALIGNMENT    64\n #define EMPTY_FIELD_BOUNDARY 32\n-#define MAX_FIXED_MODE_SIZE  64\n+#define MAX_FIXED_MODE_SIZE  128\n #define MAX_REGS_PER_ADDRESS 2\n #define STACK_SIZE_MODE      DImode\n #define Pmode\t\t     DImode"}, {"sha": "c19b70b7cd30e974b972c48b5679372edb3e1baf", "filename": "libgcc/config/gcn/lib2-bswapti2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-bswapti2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-bswapti2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Flib2-bswapti2.c?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-gcn.h\"\n+\n+UTItype\n+__bswapti2 (UTItype x)\n+{\n+  UDItype lo, hi, outlo, outhi;\n+  lo = (UDItype) x;\n+  hi = (UDItype) (x >> 64);\n+  outhi = (lo >> 56) & 0xff;\n+  outhi |= ((lo >> 48) & 0xff) << 8;\n+  outhi |= ((lo >> 40) & 0xff) << 16;\n+  outhi |= ((lo >> 32) & 0xff) << 24;\n+  outhi |= ((lo >> 24) & 0xff) << 32;\n+  outhi |= ((lo >> 16) & 0xff) << 40;\n+  outhi |= ((lo >> 8) & 0xff) << 48;\n+  outhi |= (lo & 0xff) << 56;\n+  outlo = (hi >> 56) & 0xff;\n+  outlo |= ((hi >> 48) & 0xff) << 8;\n+  outlo |= ((hi >> 40) & 0xff) << 16;\n+  outlo |= ((hi >> 32) & 0xff) << 24;\n+  outlo |= ((hi >> 24) & 0xff) << 32;\n+  outlo |= ((hi >> 16) & 0xff) << 40;\n+  outlo |= ((hi >> 8) & 0xff) << 48;\n+  outlo |= (hi & 0xff) << 56;\n+  return ((UTItype) outhi << 64) | outlo;\n+}"}, {"sha": "ceb3962eb7e4d23de18465eb214989cac3b15ffa", "filename": "libgcc/config/gcn/lib2-divmod-di.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-divmod-di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-divmod-di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Flib2-divmod-di.c?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Mentor Graphics, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"lib2-gcn.h\"\n+\n+/* We really want DImode here: override LIBGCC2_UNITS_PER_WORD.  */\n+#define LIBGCC2_UNITS_PER_WORD 4\n+#define TARGET_HAS_NO_HW_DIVIDE\n+\n+#define L_divmoddi4\n+#define L_divdi3\n+#define L_moddi3\n+#define L_udivdi3\n+#define L_umoddi3\n+\n+#include \"libgcc2.c\""}, {"sha": "155cf7c691dff7ba8dbbe0d2dd55c7720d95b792", "filename": "libgcc/config/gcn/lib2-gcn.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-gcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Flib2-gcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Flib2-gcn.h?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -33,9 +33,17 @@ typedef short HItype __attribute__ ((mode (HI)));\n typedef unsigned short UHItype __attribute__ ((mode (HI)));\n typedef int SItype __attribute__ ((mode (SI)));\n typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n typedef int word_type __attribute__ ((mode (__word__)));\n \n /* Exported functions.  */\n+extern DItype __divdi3 (DItype, DItype);\n+extern DItype __moddi3 (DItype, DItype);\n+extern UDItype __udivdi3 (UDItype, UDItype);\n+extern UDItype __umoddi3 (UDItype, UDItype);\n extern SItype __divsi3 (SItype, SItype);\n extern SItype __modsi3 (SItype, SItype);\n extern USItype __udivsi3 (USItype, USItype);"}, {"sha": "38bde54a0966be87155aea47cfdd77a03d6ef749", "filename": "libgcc/config/gcn/t-amdgcn", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Ft-amdgcn", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a730cd99184e62c4d026b8c775b96589a9c262/libgcc%2Fconfig%2Fgcn%2Ft-amdgcn", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Ft-amdgcn?ref=a8a730cd99184e62c4d026b8c775b96589a9c262", "patch": "@@ -1,6 +1,8 @@\n LIB2ADD += $(srcdir)/config/gcn/atomic.c \\\n \t   $(srcdir)/config/gcn/lib2-divmod.c \\\n \t   $(srcdir)/config/gcn/lib2-divmod-hi.c \\\n+\t   $(srcdir)/config/gcn/lib2-divmod-di.c \\\n+\t   $(srcdir)/config/gcn/lib2-bswapti2.c \\\n \t   $(srcdir)/config/gcn/unwind-gcn.c\n \n LIB2ADDEH="}]}