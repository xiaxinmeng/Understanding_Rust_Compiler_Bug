{"sha": "b30e10aba7ee054286393da539d4fc4f534b5b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwZTEwYWJhN2VlMDU0Mjg2MzkzZGE1MzlkNGZjNGY1MzRiNWI1Yg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-07T10:33:19Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-07T10:33:19Z"}, "message": "re PR target/52461 ([avr] XMEGA+EBI: RAMPZ clobbered while reading from flash)\n\nlibgcc/\n\tPR target/52461\n\tPR target/52508\n\t* config/avr/lib1funcs.S (__do_copy_data): Clear RAMPZ after usage\n\tif RAMPZ affects reading from RAM.\n\t(__tablejump_elpm__): Ditto.\n\t(.xload): Ditto.\n\t(__movmemx_hi): Ditto.\n\t(__do_global_ctors): Right condition for RAMPZ usage is \"have ELPM\".\n\t(__do_global_dtors): Ditto.\n\t(__xload_1, __xload_2, __xload_3, __xload_4): Ditto.\n\t(__movmemx_hi): Ditto.\ngcc/\t\n\tPR target/52461\n\t* gcc/config/avr/avr.c (avr_out_lpm): Clear RAMPZ after usage\n\tif RAMPZ affects reading from RAM.\n\nFrom-SVN: r185030", "tree": {"sha": "7638785fce50e0f49c390449f2a2707afca1e1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7638785fce50e0f49c390449f2a2707afca1e1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b30e10aba7ee054286393da539d4fc4f534b5b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30e10aba7ee054286393da539d4fc4f534b5b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30e10aba7ee054286393da539d4fc4f534b5b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30e10aba7ee054286393da539d4fc4f534b5b5b/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3e63ccf77951625062082a487a21d199a83b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3e63ccf77951625062082a487a21d199a83b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3e63ccf77951625062082a487a21d199a83b51"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "1ceccc4308daeebd44d78ceb3d6b6d69bd6365cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30e10aba7ee054286393da539d4fc4f534b5b5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30e10aba7ee054286393da539d4fc4f534b5b5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b30e10aba7ee054286393da539d4fc4f534b5b5b", "patch": "@@ -1,3 +1,9 @@\n+2012-03-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52461\n+\t* gcc/config/avr/avr.c (avr_out_lpm): Clear RAMPZ after usage\n+\tif RAMPZ affects reading from RAM.\n+\n 2012-03-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR pch/52518"}, {"sha": "ef49c738a6f504188b0d83a1e136ea3dc9510a2d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30e10aba7ee054286393da539d4fc4f534b5b5b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30e10aba7ee054286393da539d4fc4f534b5b5b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b30e10aba7ee054286393da539d4fc4f534b5b5b", "patch": "@@ -2762,7 +2762,14 @@ avr_out_lpm (rtx insn, rtx *op, int *plen)\n       break; /* POST_INC */\n \n     } /* switch CODE (addr) */\n+\n+  if (xop[4] == xstring_e && AVR_HAVE_RAMPD)\n+    {\n+      /* Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM */\n       \n+      avr_asm_len (\"out __RAMPZ__,__zero_reg__\", xop, plen, 1);\n+    }\n+\n   return \"\";\n }\n "}, {"sha": "a85c6948e109b22bd5351427175b9f14a85ab4f9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30e10aba7ee054286393da539d4fc4f534b5b5b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30e10aba7ee054286393da539d4fc4f534b5b5b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b30e10aba7ee054286393da539d4fc4f534b5b5b", "patch": "@@ -1,3 +1,17 @@\n+2012-03-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52461\n+\tPR target/52508\n+\t* config/avr/lib1funcs.S (__do_copy_data): Clear RAMPZ after usage\n+\tif RAMPZ affects reading from RAM.\n+\t(__tablejump_elpm__): Ditto.\n+\t(.xload): Ditto.\n+\t(__movmemx_hi): Ditto.\n+\t(__do_global_ctors): Right condition for RAMPZ usage is \"have ELPM\".\n+\t(__do_global_dtors): Ditto.\n+\t(__xload_1, __xload_2, __xload_3, __xload_4): Ditto.\n+\t(__movmemx_hi): Ditto.\n+\n 2012-03-05  Richard Henderson  <rth@redhat.com>\n \n \t* longlong.h [ARM] (umul_ppmm): Use umull for arm3m and later."}, {"sha": "1a8c7a1ce8b1315d4e20f8d28e59c8affda781fe", "filename": "libgcc/config/avr/lib1funcs.S", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30e10aba7ee054286393da539d4fc4f534b5b5b/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30e10aba7ee054286393da539d4fc4f534b5b5b/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs.S?ref=b30e10aba7ee054286393da539d4fc4f534b5b5b", "patch": "@@ -1893,6 +1893,10 @@ DEFUN __do_copy_data\n \tcpc\tr27, r17\n \tbrne\t.L__do_copy_data_loop\n #endif /* !defined(__AVR_HAVE_ELPMX__) && !defined(__AVR_HAVE_ELPM__) */\n+#if defined (__AVR_HAVE_ELPM__) && defined (__AVR_HAVE_RAMPD__)\n+\t;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n+\tout\t__RAMPZ__, __zero_reg__\n+#endif /* ELPM && RAMPD */\n ENDF __do_copy_data\n #endif /* L_copy_data */\n \n@@ -1920,7 +1924,7 @@ ENDF __do_clear_bss\n #ifdef L_ctors\n \t.section .init6,\"ax\",@progbits\n DEFUN __do_global_ctors\n-#if defined(__AVR_HAVE_RAMPZ__)\n+#if defined(__AVR_HAVE_ELPM__)\n \tldi\tr17, hi8(__ctors_start)\n \tldi\tr28, lo8(__ctors_end)\n \tldi\tr29, hi8(__ctors_end)\n@@ -1953,14 +1957,14 @@ DEFUN __do_global_ctors\n \tcpi\tr28, lo8(__ctors_start)\n \tcpc\tr29, r17\n \tbrne\t.L__do_global_ctors_loop\n-#endif /* defined(__AVR_HAVE_RAMPZ__) */\n+#endif /* defined(__AVR_HAVE_ELPM__) */\n ENDF __do_global_ctors\n #endif /* L_ctors */\n \n #ifdef L_dtors\n \t.section .fini6,\"ax\",@progbits\n DEFUN __do_global_dtors\n-#if defined(__AVR_HAVE_RAMPZ__)\n+#if defined(__AVR_HAVE_ELPM__)\n \tldi\tr17, hi8(__dtors_end)\n \tldi\tr28, lo8(__dtors_start)\n \tldi\tr29, hi8(__dtors_start)\n@@ -1993,26 +1997,29 @@ DEFUN __do_global_dtors\n \tcpi\tr28, lo8(__dtors_end)\n \tcpc\tr29, r17\n \tbrne\t.L__do_global_dtors_loop\n-#endif /* defined(__AVR_HAVE_RAMPZ__) */\n+#endif /* defined(__AVR_HAVE_ELPM__) */\n ENDF __do_global_dtors\n #endif /* L_dtors */\n \n .section .text.libgcc, \"ax\", @progbits\n     \n #ifdef L_tablejump_elpm\n DEFUN __tablejump_elpm__\n-#if defined (__AVR_HAVE_ELPM__)\n-#if defined (__AVR_HAVE_LPMX__)\n+#if defined (__AVR_HAVE_ELPMX__)\n \telpm\t__tmp_reg__, Z+\n \telpm\tr31, Z\n \tmov\tr30, __tmp_reg__\n+#if defined (__AVR_HAVE_RAMPD__)\n+\t;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n+\tout\t__RAMPZ__, __zero_reg__\n+#endif /* RAMPD */\n #if defined (__AVR_HAVE_EIJMP_EICALL__)\n \teijmp\n #else\n \tijmp\n #endif\n \n-#else\n+#elif defined (__AVR_HAVE_ELPM__)\n \telpm\n \tadiw\tr30, 1\n \tpush\tr0\n@@ -2024,7 +2031,6 @@ DEFUN __tablejump_elpm__\n #endif\n \tret\n #endif\n-#endif /* defined (__AVR_HAVE_ELPM__) */\n ENDF __tablejump_elpm__\n #endif /* defined (L_tablejump_elpm) */\n \n@@ -2114,36 +2120,42 @@ ENDF __load_4\n     adiw    r30, 1\n .endif\n #endif\n+#if defined (__AVR_HAVE_ELPM__) && defined (__AVR_HAVE_RAMPD__)\n+.if \\dest == D0+\\n-1\n+    ;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n+    out     __RAMPZ__, __zero_reg__\n+.endif\n+#endif\n .endm ; .xload\n \n #if defined (L_xload_1)\n DEFUN __xload_1\n-#if defined (__AVR_HAVE_LPMX__) && !defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_LPMX__) && !defined (__AVR_HAVE_ELPM__)\n     ld      D0, Z\n     sbrs    HHI8, 7\n     lpm     D0, Z\n     ret\n #else\n     sbrc    HHI8, 7\n     rjmp    1f\n-#if defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_ELPM__)\n     out     __RAMPZ__, HHI8\n-#endif /* __AVR_HAVE_RAMPZ__ */\n+#endif /* __AVR_HAVE_ELPM__ */\n     .xload  D0, 1\n     ret\n 1:  ld      D0, Z\n     ret\n-#endif /* LPMx && ! RAMPZ */\n+#endif /* LPMx && ! ELPM */\n ENDF __xload_1\n #endif /* L_xload_1 */\n \n #if defined (L_xload_2)\n DEFUN __xload_2\n     sbrc    HHI8, 7\n     rjmp    1f\n-#if defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_ELPM__)\n     out     __RAMPZ__, HHI8\n-#endif /* __AVR_HAVE_RAMPZ__ */\n+#endif /* __AVR_HAVE_ELPM__ */\n     .xload  D0, 2\n     .xload  D1, 2\n     ret\n@@ -2157,9 +2169,9 @@ ENDF __xload_2\n DEFUN __xload_3\n     sbrc    HHI8, 7\n     rjmp    1f\n-#if defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_ELPM__)\n     out     __RAMPZ__, HHI8\n-#endif /* __AVR_HAVE_RAMPZ__ */\n+#endif /* __AVR_HAVE_ELPM__ */\n     .xload  D0, 3\n     .xload  D1, 3\n     .xload  D2, 3\n@@ -2175,9 +2187,9 @@ ENDF __xload_3\n DEFUN __xload_4\n     sbrc    HHI8, 7\n     rjmp    1f\n-#if defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_ELPM__)\n     out     __RAMPZ__, HHI8\n-#endif /* __AVR_HAVE_RAMPZ__ */\n+#endif /* __AVR_HAVE_ELPM__ */\n     .xload  D0, 4\n     .xload  D1, 4\n     .xload  D2, 4\n@@ -2219,7 +2231,7 @@ DEFUN __movmemx_hi\n \n ;; Read from Flash\n \n-#if defined (__AVR_HAVE_RAMPZ__)\n+#if defined (__AVR_HAVE_ELPM__)\n     out     __RAMPZ__, HHI8\n #endif\n \n@@ -2243,6 +2255,10 @@ DEFUN __movmemx_hi\n     st      X+, r0\n     sbiw    LOOP, 1\n     brne    0b\n+#if defined (__AVR_HAVE_ELPM__) && defined (__AVR_HAVE_RAMPD__)\n+    ;; Reset RAMPZ to 0 so that EBI devices don't read garbage from RAM\n+    out\t__RAMPZ__, __zero_reg__\n+#endif /* ELPM && RAMPD */\n     ret\n \n ;; Read from RAM"}]}