{"sha": "19f51f28fcb611671a103412b53c9fd04b1f4848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlmNTFmMjhmY2I2MTE2NzFhMTAzNDEyYjUzYzlmZDA0YjFmNDg0OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-22T12:23:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-22T12:23:47Z"}, "message": "trans.c (Call_to_gnu): Strip unchecked conversions on actuals of In parameters if...\n\n\t* gcc-interface/trans.c (Call_to_gnu): Strip unchecked conversions on\n\tactuals of In parameters if the destination type is an unconstrained\n\tcomposite type.\n\nFrom-SVN: r217965", "tree": {"sha": "0825a1f37f346ee11c1ac7a73d0322fcb2799cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0825a1f37f346ee11c1ac7a73d0322fcb2799cee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19f51f28fcb611671a103412b53c9fd04b1f4848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f51f28fcb611671a103412b53c9fd04b1f4848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f51f28fcb611671a103412b53c9fd04b1f4848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f51f28fcb611671a103412b53c9fd04b1f4848/comments", "author": null, "committer": null, "parents": [{"sha": "5e0f1fca62d34663d2e2040c61d711c09fa9762d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f1fca62d34663d2e2040c61d711c09fa9762d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0f1fca62d34663d2e2040c61d711c09fa9762d"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "3cde2d8d434b463f11e79d7a7736a1add5aca277", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=19f51f28fcb611671a103412b53c9fd04b1f4848", "patch": "@@ -1,3 +1,9 @@\n+2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): Strip unchecked conversions on\n+\tactuals of In parameters if the destination type is an unconstrained\n+\tcomposite type.\n+\n 2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_gimplify_expr): Add 'type' variable."}, {"sha": "1888c194006e44a7b606e285cc03bf5f766520e9", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=19f51f28fcb611671a103412b53c9fd04b1f4848", "patch": "@@ -4016,9 +4016,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n        gnat_formal = Next_Formal_With_Extras (gnat_formal),\n        gnat_actual = Next_Actual (gnat_actual))\n     {\n+      Entity_Id gnat_formal_type = Etype (gnat_formal);\n       tree gnu_formal = present_gnu_tree (gnat_formal)\n \t\t\t? get_gnu_tree (gnat_formal) : NULL_TREE;\n-      tree gnu_formal_type = gnat_to_gnu_type (Etype (gnat_formal));\n+      tree gnu_formal_type = gnat_to_gnu_type (gnat_formal_type);\n       const bool is_true_formal_parm\n \t= gnu_formal && TREE_CODE (gnu_formal) == PARM_DECL;\n       const bool is_by_ref_formal_parm\n@@ -4031,13 +4032,16 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t address if it's passed by reference or as target of the back copy\n \t done after the call if it uses the copy-in/copy-out mechanism.\n \t We do it in the In case too, except for an unchecked conversion\n-\t because it alone can cause the actual to be misaligned and the\n-\t addressability test is applied to the real object.  */\n+\t to an elementary type or a constrained composite type because it\n+\t alone can cause the actual to be misaligned and the addressability\n+\t test is applied to the real object.  */\n       const bool suppress_type_conversion\n \t= ((Nkind (gnat_actual) == N_Unchecked_Type_Conversion\n-\t    && Ekind (gnat_formal) != E_In_Parameter)\n+\t    && (Ekind (gnat_formal) != E_In_Parameter\n+\t\t|| (Is_Composite_Type (Underlying_Type (gnat_formal_type))\n+\t\t    && !Is_Constrained (Underlying_Type (gnat_formal_type)))))\n \t   || (Nkind (gnat_actual) == N_Type_Conversion\n-\t       && Is_Composite_Type (Underlying_Type (Etype (gnat_formal)))));\n+\t       && Is_Composite_Type (Underlying_Type (gnat_formal_type))));\n       Node_Id gnat_name = suppress_type_conversion\n \t\t\t  ? Expression (gnat_actual) : gnat_actual;\n       tree gnu_name = gnat_to_gnu (gnat_name), gnu_name_type;\n@@ -4200,7 +4204,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n       if (Ekind (gnat_formal) != E_Out_Parameter\n \t  && Do_Range_Check (gnat_actual))\n \tgnu_actual\n-\t  = emit_range_check (gnu_actual, Etype (gnat_formal), gnat_actual);\n+\t  = emit_range_check (gnu_actual, gnat_formal_type, gnat_actual);\n \n       /* Unless this is an In parameter, we must remove any justified modular\n \t building from GNU_NAME to get an lvalue.  */"}, {"sha": "5d5706b0b5c6bc38f4610206d29fbc44bd933a00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19f51f28fcb611671a103412b53c9fd04b1f4848", "patch": "@@ -1,3 +1,7 @@\n+2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/pack11.ads: New test.\n+\n 2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/no_streams.ads: New test."}, {"sha": "9a25ec4d4318db074a1106de7e58000c3db56ba0", "filename": "gcc/testsuite/gnat.dg/specs/pack11.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f51f28fcb611671a103412b53c9fd04b1f4848/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack11.ads?ref=19f51f28fcb611671a103412b53c9fd04b1f4848", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+\n+with Ada.Strings.Bounded;\n+\n+package Pack11 is\n+\n+  package My_Strings is new Ada.Strings.Bounded.Generic_Bounded_Length (4);\n+  subtype My_Bounded_String is My_Strings.Bounded_String;\n+\n+  type Rec1 is tagged null record;\n+\n+  type Rec2 is record\n+    S : My_Bounded_String;\n+  end record;\n+  pragma Pack (Rec2);\n+\n+  type Rec3 is new Rec1 with record\n+    R : Rec2;\n+  end record;\n+\n+end Pack11;"}]}