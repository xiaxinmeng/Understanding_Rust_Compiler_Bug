{"sha": "8165795c1555c83c0c6c68650321540f9253d461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2NTc5NWMxNTU1YzgzYzBjNmM2ODY1MDMyMTU0MGY5MjUzZDQ2MQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T16:26:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T16:26:53Z"}, "message": "[ARM][GCC][2/3x]: MVE intrinsics with ternary operands.\n\nThis patch supports following MVE ACLE intrinsics with ternary operands.\n\nvpselq_u8, vpselq_s8, vrev64q_m_u8, vqrdmlashq_n_u8, vqrdmlahq_n_u8, vqdmlahq_n_u8, vmvnq_m_u8, vmlasq_n_u8, vmlaq_n_u8, vmladavq_p_u8, vmladavaq_u8, vminvq_p_u8, vmaxvq_p_u8, vdupq_m_n_u8, vcmpneq_m_u8, vcmpneq_m_n_u8, vcmphiq_m_u8, vcmphiq_m_n_u8, vcmpeqq_m_u8, vcmpeqq_m_n_u8, vcmpcsq_m_u8, vcmpcsq_m_n_u8, vclzq_m_u8, vaddvaq_p_u8, vsriq_n_u8, vsliq_n_u8, vshlq_m_r_u8, vrshlq_m_n_u8, vqshlq_m_r_u8, vqrshlq_m_n_u8, vminavq_p_s8, vminaq_m_s8, vmaxavq_p_s8, vmaxaq_m_s8, vcmpneq_m_s8, vcmpneq_m_n_s8, vcmpltq_m_s8, vcmpltq_m_n_s8, vcmpleq_m_s8, vcmpleq_m_n_s8, vcmpgtq_m_s8, vcmpgtq_m_n_s8, vcmpgeq_m_s8, vcmpgeq_m_n_s8, vcmpeqq_m_s8, vcmpeqq_m_n_s8, vshlq_m_r_s8, vrshlq_m_n_s8, vrev64q_m_s8, vqshlq_m_r_s8, vqrshlq_m_n_s8, vqnegq_m_s8, vqabsq_m_s8, vnegq_m_s8, vmvnq_m_s8, vmlsdavxq_p_s8, vmlsdavq_p_s8, vmladavxq_p_s8, vmladavq_p_s8, vminvq_p_s8, vmaxvq_p_s8, vdupq_m_n_s8, vclzq_m_s8, vclsq_m_s8, vaddvaq_p_s8, vabsq_m_s8, vqrdmlsdhxq_s8, vqrdmlsdhq_s8, vqrdmlashq_n_s8, vqrdmlahq_n_s8, vqrdmladhxq_s8, vqrdmladhq_s8, vqdmlsdhxq_s8, vqdmlsdhq_s8, vqdmlahq_n_s8, vqdmladhxq_s8, vqdmladhq_s8, vmlsdavaxq_s8, vmlsdavaq_s8, vmlasq_n_s8, vmlaq_n_s8, vmladavaxq_s8, vmladavaq_s8, vsriq_n_s8, vsliq_n_s8, vpselq_u16, vpselq_s16, vrev64q_m_u16, vqrdmlashq_n_u16, vqrdmlahq_n_u16, vqdmlahq_n_u16, vmvnq_m_u16, vmlasq_n_u16, vmlaq_n_u16, vmladavq_p_u16, vmladavaq_u16, vminvq_p_u16, vmaxvq_p_u16, vdupq_m_n_u16, vcmpneq_m_u16, vcmpneq_m_n_u16, vcmphiq_m_u16, vcmphiq_m_n_u16, vcmpeqq_m_u16, vcmpeqq_m_n_u16, vcmpcsq_m_u16, vcmpcsq_m_n_u16, vclzq_m_u16, vaddvaq_p_u16, vsriq_n_u16, vsliq_n_u16, vshlq_m_r_u16, vrshlq_m_n_u16, vqshlq_m_r_u16, vqrshlq_m_n_u16, vminavq_p_s16, vminaq_m_s16, vmaxavq_p_s16, vmaxaq_m_s16, vcmpneq_m_s16, vcmpneq_m_n_s16, vcmpltq_m_s16, vcmpltq_m_n_s16, vcmpleq_m_s16, vcmpleq_m_n_s16, vcmpgtq_m_s16, vcmpgtq_m_n_s16, vcmpgeq_m_s16, vcmpgeq_m_n_s16, vcmpeqq_m_s16, vcmpeqq_m_n_s16, vshlq_m_r_s16, vrshlq_m_n_s16, vrev64q_m_s16, vqshlq_m_r_s16, vqrshlq_m_n_s16, vqnegq_m_s16, vqabsq_m_s16, vnegq_m_s16, vmvnq_m_s16, vmlsdavxq_p_s16, vmlsdavq_p_s16, vmladavxq_p_s16, vmladavq_p_s16, vminvq_p_s16, vmaxvq_p_s16, vdupq_m_n_s16, vclzq_m_s16, vclsq_m_s16, vaddvaq_p_s16, vabsq_m_s16, vqrdmlsdhxq_s16, vqrdmlsdhq_s16, vqrdmlashq_n_s16, vqrdmlahq_n_s16, vqrdmladhxq_s16, vqrdmladhq_s16, vqdmlsdhxq_s16, vqdmlsdhq_s16, vqdmlahq_n_s16, vqdmladhxq_s16, vqdmladhq_s16, vmlsdavaxq_s16, vmlsdavaq_s16, vmlasq_n_s16, vmlaq_n_s16, vmladavaxq_s16, vmladavaq_s16, vsriq_n_s16, vsliq_n_s16, vpselq_u32, vpselq_s32, vrev64q_m_u32, vqrdmlashq_n_u32, vqrdmlahq_n_u32, vqdmlahq_n_u32, vmvnq_m_u32, vmlasq_n_u32, vmlaq_n_u32, vmladavq_p_u32, vmladavaq_u32, vminvq_p_u32, vmaxvq_p_u32, vdupq_m_n_u32, vcmpneq_m_u32, vcmpneq_m_n_u32, vcmphiq_m_u32, vcmphiq_m_n_u32, vcmpeqq_m_u32, vcmpeqq_m_n_u32, vcmpcsq_m_u32, vcmpcsq_m_n_u32, vclzq_m_u32, vaddvaq_p_u32, vsriq_n_u32, vsliq_n_u32, vshlq_m_r_u32, vrshlq_m_n_u32, vqshlq_m_r_u32, vqrshlq_m_n_u32, vminavq_p_s32, vminaq_m_s32, vmaxavq_p_s32, vmaxaq_m_s32, vcmpneq_m_s32, vcmpneq_m_n_s32, vcmpltq_m_s32, vcmpltq_m_n_s32, vcmpleq_m_s32, vcmpleq_m_n_s32, vcmpgtq_m_s32, vcmpgtq_m_n_s32, vcmpgeq_m_s32, vcmpgeq_m_n_s32, vcmpeqq_m_s32, vcmpeqq_m_n_s32, vshlq_m_r_s32, vrshlq_m_n_s32, vrev64q_m_s32, vqshlq_m_r_s32, vqrshlq_m_n_s32, vqnegq_m_s32, vqabsq_m_s32, vnegq_m_s32, vmvnq_m_s32, vmlsdavxq_p_s32, vmlsdavq_p_s32, vmladavxq_p_s32, vmladavq_p_s32, vminvq_p_s32, vmaxvq_p_s32, vdupq_m_n_s32, vclzq_m_s32, vclsq_m_s32, vaddvaq_p_s32, vabsq_m_s32, vqrdmlsdhxq_s32, vqrdmlsdhq_s32, vqrdmlashq_n_s32, vqrdmlahq_n_s32, vqrdmladhxq_s32, vqrdmladhq_s32, vqdmlsdhxq_s32, vqdmlsdhq_s32, vqdmlahq_n_s32, vqdmladhxq_s32, vqdmladhq_s32, vmlsdavaxq_s32, vmlsdavaq_s32, vmlasq_n_s32, vmlaq_n_s32, vmladavaxq_s32, vmladavaq_s32, vsriq_n_s32, vsliq_n_s32, vpselq_u64, vpselq_s64.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nIn this patch new constraints \"Rc\" and \"Re\" are added, which checks the constant is with in the range of 0 to 15 and 0 to 31 respectively.\n\nAlso a new predicates \"mve_imm_15\" and \"mve_imm_31\" are added, to check the the matching constraint Rc and Re respectively.\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vpselq_u8): Define macro.\n\t(vpselq_s8): Likewise.\n\t(vrev64q_m_u8): Likewise.\n\t(vqrdmlashq_n_u8): Likewise.\n\t(vqrdmlahq_n_u8): Likewise.\n\t(vqdmlahq_n_u8): Likewise.\n\t(vmvnq_m_u8): Likewise.\n\t(vmlasq_n_u8): Likewise.\n\t(vmlaq_n_u8): Likewise.\n\t(vmladavq_p_u8): Likewise.\n\t(vmladavaq_u8): Likewise.\n\t(vminvq_p_u8): Likewise.\n\t(vmaxvq_p_u8): Likewise.\n\t(vdupq_m_n_u8): Likewise.\n\t(vcmpneq_m_u8): Likewise.\n\t(vcmpneq_m_n_u8): Likewise.\n\t(vcmphiq_m_u8): Likewise.\n\t(vcmphiq_m_n_u8): Likewise.\n\t(vcmpeqq_m_u8): Likewise.\n\t(vcmpeqq_m_n_u8): Likewise.\n\t(vcmpcsq_m_u8): Likewise.\n\t(vcmpcsq_m_n_u8): Likewise.\n\t(vclzq_m_u8): Likewise.\n\t(vaddvaq_p_u8): Likewise.\n\t(vsriq_n_u8): Likewise.\n\t(vsliq_n_u8): Likewise.\n\t(vshlq_m_r_u8): Likewise.\n\t(vrshlq_m_n_u8): Likewise.\n\t(vqshlq_m_r_u8): Likewise.\n\t(vqrshlq_m_n_u8): Likewise.\n\t(vminavq_p_s8): Likewise.\n\t(vminaq_m_s8): Likewise.\n\t(vmaxavq_p_s8): Likewise.\n\t(vmaxaq_m_s8): Likewise.\n\t(vcmpneq_m_s8): Likewise.\n\t(vcmpneq_m_n_s8): Likewise.\n\t(vcmpltq_m_s8): Likewise.\n\t(vcmpltq_m_n_s8): Likewise.\n\t(vcmpleq_m_s8): Likewise.\n\t(vcmpleq_m_n_s8): Likewise.\n\t(vcmpgtq_m_s8): Likewise.\n\t(vcmpgtq_m_n_s8): Likewise.\n\t(vcmpgeq_m_s8): Likewise.\n\t(vcmpgeq_m_n_s8): Likewise.\n\t(vcmpeqq_m_s8): Likewise.\n\t(vcmpeqq_m_n_s8): Likewise.\n\t(vshlq_m_r_s8): Likewise.\n\t(vrshlq_m_n_s8): Likewise.\n\t(vrev64q_m_s8): Likewise.\n\t(vqshlq_m_r_s8): Likewise.\n\t(vqrshlq_m_n_s8): Likewise.\n\t(vqnegq_m_s8): Likewise.\n\t(vqabsq_m_s8): Likewise.\n\t(vnegq_m_s8): Likewise.\n\t(vmvnq_m_s8): Likewise.\n\t(vmlsdavxq_p_s8): Likewise.\n\t(vmlsdavq_p_s8): Likewise.\n\t(vmladavxq_p_s8): Likewise.\n\t(vmladavq_p_s8): Likewise.\n\t(vminvq_p_s8): Likewise.\n\t(vmaxvq_p_s8): Likewise.\n\t(vdupq_m_n_s8): Likewise.\n\t(vclzq_m_s8): Likewise.\n\t(vclsq_m_s8): Likewise.\n\t(vaddvaq_p_s8): Likewise.\n\t(vabsq_m_s8): Likewise.\n\t(vqrdmlsdhxq_s8): Likewise.\n\t(vqrdmlsdhq_s8): Likewise.\n\t(vqrdmlashq_n_s8): Likewise.\n\t(vqrdmlahq_n_s8): Likewise.\n\t(vqrdmladhxq_s8): Likewise.\n\t(vqrdmladhq_s8): Likewise.\n\t(vqdmlsdhxq_s8): Likewise.\n\t(vqdmlsdhq_s8): Likewise.\n\t(vqdmlahq_n_s8): Likewise.\n\t(vqdmladhxq_s8): Likewise.\n\t(vqdmladhq_s8): Likewise.\n\t(vmlsdavaxq_s8): Likewise.\n\t(vmlsdavaq_s8): Likewise.\n\t(vmlasq_n_s8): Likewise.\n\t(vmlaq_n_s8): Likewise.\n\t(vmladavaxq_s8): Likewise.\n\t(vmladavaq_s8): Likewise.\n\t(vsriq_n_s8): Likewise.\n\t(vsliq_n_s8): Likewise.\n\t(vpselq_u16): Likewise.\n\t(vpselq_s16): Likewise.\n\t(vrev64q_m_u16): Likewise.\n\t(vqrdmlashq_n_u16): Likewise.\n\t(vqrdmlahq_n_u16): Likewise.\n\t(vqdmlahq_n_u16): Likewise.\n\t(vmvnq_m_u16): Likewise.\n\t(vmlasq_n_u16): Likewise.\n\t(vmlaq_n_u16): Likewise.\n\t(vmladavq_p_u16): Likewise.\n\t(vmladavaq_u16): Likewise.\n\t(vminvq_p_u16): Likewise.\n\t(vmaxvq_p_u16): Likewise.\n\t(vdupq_m_n_u16): Likewise.\n\t(vcmpneq_m_u16): Likewise.\n\t(vcmpneq_m_n_u16): Likewise.\n\t(vcmphiq_m_u16): Likewise.\n\t(vcmphiq_m_n_u16): Likewise.\n\t(vcmpeqq_m_u16): Likewise.\n\t(vcmpeqq_m_n_u16): Likewise.\n\t(vcmpcsq_m_u16): Likewise.\n\t(vcmpcsq_m_n_u16): Likewise.\n\t(vclzq_m_u16): Likewise.\n\t(vaddvaq_p_u16): Likewise.\n\t(vsriq_n_u16): Likewise.\n\t(vsliq_n_u16): Likewise.\n\t(vshlq_m_r_u16): Likewise.\n\t(vrshlq_m_n_u16): Likewise.\n\t(vqshlq_m_r_u16): Likewise.\n\t(vqrshlq_m_n_u16): Likewise.\n\t(vminavq_p_s16): Likewise.\n\t(vminaq_m_s16): Likewise.\n\t(vmaxavq_p_s16): Likewise.\n\t(vmaxaq_m_s16): Likewise.\n\t(vcmpneq_m_s16): Likewise.\n\t(vcmpneq_m_n_s16): Likewise.\n\t(vcmpltq_m_s16): Likewise.\n\t(vcmpltq_m_n_s16): Likewise.\n\t(vcmpleq_m_s16): Likewise.\n\t(vcmpleq_m_n_s16): Likewise.\n\t(vcmpgtq_m_s16): Likewise.\n\t(vcmpgtq_m_n_s16): Likewise.\n\t(vcmpgeq_m_s16): Likewise.\n\t(vcmpgeq_m_n_s16): Likewise.\n\t(vcmpeqq_m_s16): Likewise.\n\t(vcmpeqq_m_n_s16): Likewise.\n\t(vshlq_m_r_s16): Likewise.\n\t(vrshlq_m_n_s16): Likewise.\n\t(vrev64q_m_s16): Likewise.\n\t(vqshlq_m_r_s16): Likewise.\n\t(vqrshlq_m_n_s16): Likewise.\n\t(vqnegq_m_s16): Likewise.\n\t(vqabsq_m_s16): Likewise.\n\t(vnegq_m_s16): Likewise.\n\t(vmvnq_m_s16): Likewise.\n\t(vmlsdavxq_p_s16): Likewise.\n\t(vmlsdavq_p_s16): Likewise.\n\t(vmladavxq_p_s16): Likewise.\n\t(vmladavq_p_s16): Likewise.\n\t(vminvq_p_s16): Likewise.\n\t(vmaxvq_p_s16): Likewise.\n\t(vdupq_m_n_s16): Likewise.\n\t(vclzq_m_s16): Likewise.\n\t(vclsq_m_s16): Likewise.\n\t(vaddvaq_p_s16): Likewise.\n\t(vabsq_m_s16): Likewise.\n\t(vqrdmlsdhxq_s16): Likewise.\n\t(vqrdmlsdhq_s16): Likewise.\n\t(vqrdmlashq_n_s16): Likewise.\n\t(vqrdmlahq_n_s16): Likewise.\n\t(vqrdmladhxq_s16): Likewise.\n\t(vqrdmladhq_s16): Likewise.\n\t(vqdmlsdhxq_s16): Likewise.\n\t(vqdmlsdhq_s16): Likewise.\n\t(vqdmlahq_n_s16): Likewise.\n\t(vqdmladhxq_s16): Likewise.\n\t(vqdmladhq_s16): Likewise.\n\t(vmlsdavaxq_s16): Likewise.\n\t(vmlsdavaq_s16): Likewise.\n\t(vmlasq_n_s16): Likewise.\n\t(vmlaq_n_s16): Likewise.\n\t(vmladavaxq_s16): Likewise.\n\t(vmladavaq_s16): Likewise.\n\t(vsriq_n_s16): Likewise.\n\t(vsliq_n_s16): Likewise.\n\t(vpselq_u32): Likewise.\n\t(vpselq_s32): Likewise.\n\t(vrev64q_m_u32): Likewise.\n\t(vqrdmlashq_n_u32): Likewise.\n\t(vqrdmlahq_n_u32): Likewise.\n\t(vqdmlahq_n_u32): Likewise.\n\t(vmvnq_m_u32): Likewise.\n\t(vmlasq_n_u32): Likewise.\n\t(vmlaq_n_u32): Likewise.\n\t(vmladavq_p_u32): Likewise.\n\t(vmladavaq_u32): Likewise.\n\t(vminvq_p_u32): Likewise.\n\t(vmaxvq_p_u32): Likewise.\n\t(vdupq_m_n_u32): Likewise.\n\t(vcmpneq_m_u32): Likewise.\n\t(vcmpneq_m_n_u32): Likewise.\n\t(vcmphiq_m_u32): Likewise.\n\t(vcmphiq_m_n_u32): Likewise.\n\t(vcmpeqq_m_u32): Likewise.\n\t(vcmpeqq_m_n_u32): Likewise.\n\t(vcmpcsq_m_u32): Likewise.\n\t(vcmpcsq_m_n_u32): Likewise.\n\t(vclzq_m_u32): Likewise.\n\t(vaddvaq_p_u32): Likewise.\n\t(vsriq_n_u32): Likewise.\n\t(vsliq_n_u32): Likewise.\n\t(vshlq_m_r_u32): Likewise.\n\t(vrshlq_m_n_u32): Likewise.\n\t(vqshlq_m_r_u32): Likewise.\n\t(vqrshlq_m_n_u32): Likewise.\n\t(vminavq_p_s32): Likewise.\n\t(vminaq_m_s32): Likewise.\n\t(vmaxavq_p_s32): Likewise.\n\t(vmaxaq_m_s32): Likewise.\n\t(vcmpneq_m_s32): Likewise.\n\t(vcmpneq_m_n_s32): Likewise.\n\t(vcmpltq_m_s32): Likewise.\n\t(vcmpltq_m_n_s32): Likewise.\n\t(vcmpleq_m_s32): Likewise.\n\t(vcmpleq_m_n_s32): Likewise.\n\t(vcmpgtq_m_s32): Likewise.\n\t(vcmpgtq_m_n_s32): Likewise.\n\t(vcmpgeq_m_s32): Likewise.\n\t(vcmpgeq_m_n_s32): Likewise.\n\t(vcmpeqq_m_s32): Likewise.\n\t(vcmpeqq_m_n_s32): Likewise.\n\t(vshlq_m_r_s32): Likewise.\n\t(vrshlq_m_n_s32): Likewise.\n\t(vrev64q_m_s32): Likewise.\n\t(vqshlq_m_r_s32): Likewise.\n\t(vqrshlq_m_n_s32): Likewise.\n\t(vqnegq_m_s32): Likewise.\n\t(vqabsq_m_s32): Likewise.\n\t(vnegq_m_s32): Likewise.\n\t(vmvnq_m_s32): Likewise.\n\t(vmlsdavxq_p_s32): Likewise.\n\t(vmlsdavq_p_s32): Likewise.\n\t(vmladavxq_p_s32): Likewise.\n\t(vmladavq_p_s32): Likewise.\n\t(vminvq_p_s32): Likewise.\n\t(vmaxvq_p_s32): Likewise.\n\t(vdupq_m_n_s32): Likewise.\n\t(vclzq_m_s32): Likewise.\n\t(vclsq_m_s32): Likewise.\n\t(vaddvaq_p_s32): Likewise.\n\t(vabsq_m_s32): Likewise.\n\t(vqrdmlsdhxq_s32): Likewise.\n\t(vqrdmlsdhq_s32): Likewise.\n\t(vqrdmlashq_n_s32): Likewise.\n\t(vqrdmlahq_n_s32): Likewise.\n\t(vqrdmladhxq_s32): Likewise.\n\t(vqrdmladhq_s32): Likewise.\n\t(vqdmlsdhxq_s32): Likewise.\n\t(vqdmlsdhq_s32): Likewise.\n\t(vqdmlahq_n_s32): Likewise.\n\t(vqdmladhxq_s32): Likewise.\n\t(vqdmladhq_s32): Likewise.\n\t(vmlsdavaxq_s32): Likewise.\n\t(vmlsdavaq_s32): Likewise.\n\t(vmlasq_n_s32): Likewise.\n\t(vmlaq_n_s32): Likewise.\n\t(vmladavaxq_s32): Likewise.\n\t(vmladavaq_s32): Likewise.\n\t(vsriq_n_s32): Likewise.\n\t(vsliq_n_s32): Likewise.\n\t(vpselq_u64): Likewise.\n\t(vpselq_s64): Likewise.\n\t(__arm_vpselq_u8): Define intrinsic.\n\t(__arm_vpselq_s8): Likewise.\n\t(__arm_vrev64q_m_u8): Likewise.\n\t(__arm_vqrdmlashq_n_u8): Likewise.\n\t(__arm_vqrdmlahq_n_u8): Likewise.\n\t(__arm_vqdmlahq_n_u8): Likewise.\n\t(__arm_vmvnq_m_u8): Likewise.\n\t(__arm_vmlasq_n_u8): Likewise.\n\t(__arm_vmlaq_n_u8): Likewise.\n\t(__arm_vmladavq_p_u8): Likewise.\n\t(__arm_vmladavaq_u8): Likewise.\n\t(__arm_vminvq_p_u8): Likewise.\n\t(__arm_vmaxvq_p_u8): Likewise.\n\t(__arm_vdupq_m_n_u8): Likewise.\n\t(__arm_vcmpneq_m_u8): Likewise.\n\t(__arm_vcmpneq_m_n_u8): Likewise.\n\t(__arm_vcmphiq_m_u8): Likewise.\n\t(__arm_vcmphiq_m_n_u8): Likewise.\n\t(__arm_vcmpeqq_m_u8): Likewise.\n\t(__arm_vcmpeqq_m_n_u8): Likewise.\n\t(__arm_vcmpcsq_m_u8): Likewise.\n\t(__arm_vcmpcsq_m_n_u8): Likewise.\n\t(__arm_vclzq_m_u8): Likewise.\n\t(__arm_vaddvaq_p_u8): Likewise.\n\t(__arm_vsriq_n_u8): Likewise.\n\t(__arm_vsliq_n_u8): Likewise.\n\t(__arm_vshlq_m_r_u8): Likewise.\n\t(__arm_vrshlq_m_n_u8): Likewise.\n\t(__arm_vqshlq_m_r_u8): Likewise.\n\t(__arm_vqrshlq_m_n_u8): Likewise.\n\t(__arm_vminavq_p_s8): Likewise.\n\t(__arm_vminaq_m_s8): Likewise.\n\t(__arm_vmaxavq_p_s8): Likewise.\n\t(__arm_vmaxaq_m_s8): Likewise.\n\t(__arm_vcmpneq_m_s8): Likewise.\n\t(__arm_vcmpneq_m_n_s8): Likewise.\n\t(__arm_vcmpltq_m_s8): Likewise.\n\t(__arm_vcmpltq_m_n_s8): Likewise.\n\t(__arm_vcmpleq_m_s8): Likewise.\n\t(__arm_vcmpleq_m_n_s8): Likewise.\n\t(__arm_vcmpgtq_m_s8): Likewise.\n\t(__arm_vcmpgtq_m_n_s8): Likewise.\n\t(__arm_vcmpgeq_m_s8): Likewise.\n\t(__arm_vcmpgeq_m_n_s8): Likewise.\n\t(__arm_vcmpeqq_m_s8): Likewise.\n\t(__arm_vcmpeqq_m_n_s8): Likewise.\n\t(__arm_vshlq_m_r_s8): Likewise.\n\t(__arm_vrshlq_m_n_s8): Likewise.\n\t(__arm_vrev64q_m_s8): Likewise.\n\t(__arm_vqshlq_m_r_s8): Likewise.\n\t(__arm_vqrshlq_m_n_s8): Likewise.\n\t(__arm_vqnegq_m_s8): Likewise.\n\t(__arm_vqabsq_m_s8): Likewise.\n\t(__arm_vnegq_m_s8): Likewise.\n\t(__arm_vmvnq_m_s8): Likewise.\n\t(__arm_vmlsdavxq_p_s8): Likewise.\n\t(__arm_vmlsdavq_p_s8): Likewise.\n\t(__arm_vmladavxq_p_s8): Likewise.\n\t(__arm_vmladavq_p_s8): Likewise.\n\t(__arm_vminvq_p_s8): Likewise.\n\t(__arm_vmaxvq_p_s8): Likewise.\n\t(__arm_vdupq_m_n_s8): Likewise.\n\t(__arm_vclzq_m_s8): Likewise.\n\t(__arm_vclsq_m_s8): Likewise.\n\t(__arm_vaddvaq_p_s8): Likewise.\n\t(__arm_vabsq_m_s8): Likewise.\n\t(__arm_vqrdmlsdhxq_s8): Likewise.\n\t(__arm_vqrdmlsdhq_s8): Likewise.\n\t(__arm_vqrdmlashq_n_s8): Likewise.\n\t(__arm_vqrdmlahq_n_s8): Likewise.\n\t(__arm_vqrdmladhxq_s8): Likewise.\n\t(__arm_vqrdmladhq_s8): Likewise.\n\t(__arm_vqdmlsdhxq_s8): Likewise.\n\t(__arm_vqdmlsdhq_s8): Likewise.\n\t(__arm_vqdmlahq_n_s8): Likewise.\n\t(__arm_vqdmladhxq_s8): Likewise.\n\t(__arm_vqdmladhq_s8): Likewise.\n\t(__arm_vmlsdavaxq_s8): Likewise.\n\t(__arm_vmlsdavaq_s8): Likewise.\n\t(__arm_vmlasq_n_s8): Likewise.\n\t(__arm_vmlaq_n_s8): Likewise.\n\t(__arm_vmladavaxq_s8): Likewise.\n\t(__arm_vmladavaq_s8): Likewise.\n\t(__arm_vsriq_n_s8): Likewise.\n\t(__arm_vsliq_n_s8): Likewise.\n\t(__arm_vpselq_u16): Likewise.\n\t(__arm_vpselq_s16): Likewise.\n\t(__arm_vrev64q_m_u16): Likewise.\n\t(__arm_vqrdmlashq_n_u16): Likewise.\n\t(__arm_vqrdmlahq_n_u16): Likewise.\n\t(__arm_vqdmlahq_n_u16): Likewise.\n\t(__arm_vmvnq_m_u16): Likewise.\n\t(__arm_vmlasq_n_u16): Likewise.\n\t(__arm_vmlaq_n_u16): Likewise.\n\t(__arm_vmladavq_p_u16): Likewise.\n\t(__arm_vmladavaq_u16): Likewise.\n\t(__arm_vminvq_p_u16): Likewise.\n\t(__arm_vmaxvq_p_u16): Likewise.\n\t(__arm_vdupq_m_n_u16): Likewise.\n\t(__arm_vcmpneq_m_u16): Likewise.\n\t(__arm_vcmpneq_m_n_u16): Likewise.\n\t(__arm_vcmphiq_m_u16): Likewise.\n\t(__arm_vcmphiq_m_n_u16): Likewise.\n\t(__arm_vcmpeqq_m_u16): Likewise.\n\t(__arm_vcmpeqq_m_n_u16): Likewise.\n\t(__arm_vcmpcsq_m_u16): Likewise.\n\t(__arm_vcmpcsq_m_n_u16): Likewise.\n\t(__arm_vclzq_m_u16): Likewise.\n\t(__arm_vaddvaq_p_u16): Likewise.\n\t(__arm_vsriq_n_u16): Likewise.\n\t(__arm_vsliq_n_u16): Likewise.\n\t(__arm_vshlq_m_r_u16): Likewise.\n\t(__arm_vrshlq_m_n_u16): Likewise.\n\t(__arm_vqshlq_m_r_u16): Likewise.\n\t(__arm_vqrshlq_m_n_u16): Likewise.\n\t(__arm_vminavq_p_s16): Likewise.\n\t(__arm_vminaq_m_s16): Likewise.\n\t(__arm_vmaxavq_p_s16): Likewise.\n\t(__arm_vmaxaq_m_s16): Likewise.\n\t(__arm_vcmpneq_m_s16): Likewise.\n\t(__arm_vcmpneq_m_n_s16): Likewise.\n\t(__arm_vcmpltq_m_s16): Likewise.\n\t(__arm_vcmpltq_m_n_s16): Likewise.\n\t(__arm_vcmpleq_m_s16): Likewise.\n\t(__arm_vcmpleq_m_n_s16): Likewise.\n\t(__arm_vcmpgtq_m_s16): Likewise.\n\t(__arm_vcmpgtq_m_n_s16): Likewise.\n\t(__arm_vcmpgeq_m_s16): Likewise.\n\t(__arm_vcmpgeq_m_n_s16): Likewise.\n\t(__arm_vcmpeqq_m_s16): Likewise.\n\t(__arm_vcmpeqq_m_n_s16): Likewise.\n\t(__arm_vshlq_m_r_s16): Likewise.\n\t(__arm_vrshlq_m_n_s16): Likewise.\n\t(__arm_vrev64q_m_s16): Likewise.\n\t(__arm_vqshlq_m_r_s16): Likewise.\n\t(__arm_vqrshlq_m_n_s16): Likewise.\n\t(__arm_vqnegq_m_s16): Likewise.\n\t(__arm_vqabsq_m_s16): Likewise.\n\t(__arm_vnegq_m_s16): Likewise.\n\t(__arm_vmvnq_m_s16): Likewise.\n\t(__arm_vmlsdavxq_p_s16): Likewise.\n\t(__arm_vmlsdavq_p_s16): Likewise.\n\t(__arm_vmladavxq_p_s16): Likewise.\n\t(__arm_vmladavq_p_s16): Likewise.\n\t(__arm_vminvq_p_s16): Likewise.\n\t(__arm_vmaxvq_p_s16): Likewise.\n\t(__arm_vdupq_m_n_s16): Likewise.\n\t(__arm_vclzq_m_s16): Likewise.\n\t(__arm_vclsq_m_s16): Likewise.\n\t(__arm_vaddvaq_p_s16): Likewise.\n\t(__arm_vabsq_m_s16): Likewise.\n\t(__arm_vqrdmlsdhxq_s16): Likewise.\n\t(__arm_vqrdmlsdhq_s16): Likewise.\n\t(__arm_vqrdmlashq_n_s16): Likewise.\n\t(__arm_vqrdmlahq_n_s16): Likewise.\n\t(__arm_vqrdmladhxq_s16): Likewise.\n\t(__arm_vqrdmladhq_s16): Likewise.\n\t(__arm_vqdmlsdhxq_s16): Likewise.\n\t(__arm_vqdmlsdhq_s16): Likewise.\n\t(__arm_vqdmlahq_n_s16): Likewise.\n\t(__arm_vqdmladhxq_s16): Likewise.\n\t(__arm_vqdmladhq_s16): Likewise.\n\t(__arm_vmlsdavaxq_s16): Likewise.\n\t(__arm_vmlsdavaq_s16): Likewise.\n\t(__arm_vmlasq_n_s16): Likewise.\n\t(__arm_vmlaq_n_s16): Likewise.\n\t(__arm_vmladavaxq_s16): Likewise.\n\t(__arm_vmladavaq_s16): Likewise.\n\t(__arm_vsriq_n_s16): Likewise.\n\t(__arm_vsliq_n_s16): Likewise.\n\t(__arm_vpselq_u32): Likewise.\n\t(__arm_vpselq_s32): Likewise.\n\t(__arm_vrev64q_m_u32): Likewise.\n\t(__arm_vqrdmlashq_n_u32): Likewise.\n\t(__arm_vqrdmlahq_n_u32): Likewise.\n\t(__arm_vqdmlahq_n_u32): Likewise.\n\t(__arm_vmvnq_m_u32): Likewise.\n\t(__arm_vmlasq_n_u32): Likewise.\n\t(__arm_vmlaq_n_u32): Likewise.\n\t(__arm_vmladavq_p_u32): Likewise.\n\t(__arm_vmladavaq_u32): Likewise.\n\t(__arm_vminvq_p_u32): Likewise.\n\t(__arm_vmaxvq_p_u32): Likewise.\n\t(__arm_vdupq_m_n_u32): Likewise.\n\t(__arm_vcmpneq_m_u32): Likewise.\n\t(__arm_vcmpneq_m_n_u32): Likewise.\n\t(__arm_vcmphiq_m_u32): Likewise.\n\t(__arm_vcmphiq_m_n_u32): Likewise.\n\t(__arm_vcmpeqq_m_u32): Likewise.\n\t(__arm_vcmpeqq_m_n_u32): Likewise.\n\t(__arm_vcmpcsq_m_u32): Likewise.\n\t(__arm_vcmpcsq_m_n_u32): Likewise.\n\t(__arm_vclzq_m_u32): Likewise.\n\t(__arm_vaddvaq_p_u32): Likewise.\n\t(__arm_vsriq_n_u32): Likewise.\n\t(__arm_vsliq_n_u32): Likewise.\n\t(__arm_vshlq_m_r_u32): Likewise.\n\t(__arm_vrshlq_m_n_u32): Likewise.\n\t(__arm_vqshlq_m_r_u32): Likewise.\n\t(__arm_vqrshlq_m_n_u32): Likewise.\n\t(__arm_vminavq_p_s32): Likewise.\n\t(__arm_vminaq_m_s32): Likewise.\n\t(__arm_vmaxavq_p_s32): Likewise.\n\t(__arm_vmaxaq_m_s32): Likewise.\n\t(__arm_vcmpneq_m_s32): Likewise.\n\t(__arm_vcmpneq_m_n_s32): Likewise.\n\t(__arm_vcmpltq_m_s32): Likewise.\n\t(__arm_vcmpltq_m_n_s32): Likewise.\n\t(__arm_vcmpleq_m_s32): Likewise.\n\t(__arm_vcmpleq_m_n_s32): Likewise.\n\t(__arm_vcmpgtq_m_s32): Likewise.\n\t(__arm_vcmpgtq_m_n_s32): Likewise.\n\t(__arm_vcmpgeq_m_s32): Likewise.\n\t(__arm_vcmpgeq_m_n_s32): Likewise.\n\t(__arm_vcmpeqq_m_s32): Likewise.\n\t(__arm_vcmpeqq_m_n_s32): Likewise.\n\t(__arm_vshlq_m_r_s32): Likewise.\n\t(__arm_vrshlq_m_n_s32): Likewise.\n\t(__arm_vrev64q_m_s32): Likewise.\n\t(__arm_vqshlq_m_r_s32): Likewise.\n\t(__arm_vqrshlq_m_n_s32): Likewise.\n\t(__arm_vqnegq_m_s32): Likewise.\n\t(__arm_vqabsq_m_s32): Likewise.\n\t(__arm_vnegq_m_s32): Likewise.\n\t(__arm_vmvnq_m_s32): Likewise.\n\t(__arm_vmlsdavxq_p_s32): Likewise.\n\t(__arm_vmlsdavq_p_s32): Likewise.\n\t(__arm_vmladavxq_p_s32): Likewise.\n\t(__arm_vmladavq_p_s32): Likewise.\n\t(__arm_vminvq_p_s32): Likewise.\n\t(__arm_vmaxvq_p_s32): Likewise.\n\t(__arm_vdupq_m_n_s32): Likewise.\n\t(__arm_vclzq_m_s32): Likewise.\n\t(__arm_vclsq_m_s32): Likewise.\n\t(__arm_vaddvaq_p_s32): Likewise.\n\t(__arm_vabsq_m_s32): Likewise.\n\t(__arm_vqrdmlsdhxq_s32): Likewise.\n\t(__arm_vqrdmlsdhq_s32): Likewise.\n\t(__arm_vqrdmlashq_n_s32): Likewise.\n\t(__arm_vqrdmlahq_n_s32): Likewise.\n\t(__arm_vqrdmladhxq_s32): Likewise.\n\t(__arm_vqrdmladhq_s32): Likewise.\n\t(__arm_vqdmlsdhxq_s32): Likewise.\n\t(__arm_vqdmlsdhq_s32): Likewise.\n\t(__arm_vqdmlahq_n_s32): Likewise.\n\t(__arm_vqdmladhxq_s32): Likewise.\n\t(__arm_vqdmladhq_s32): Likewise.\n\t(__arm_vmlsdavaxq_s32): Likewise.\n\t(__arm_vmlsdavaq_s32): Likewise.\n\t(__arm_vmlasq_n_s32): Likewise.\n\t(__arm_vmlaq_n_s32): Likewise.\n\t(__arm_vmladavaxq_s32): Likewise.\n\t(__arm_vmladavaq_s32): Likewise.\n\t(__arm_vsriq_n_s32): Likewise.\n\t(__arm_vsliq_n_s32): Likewise.\n\t(__arm_vpselq_u64): Likewise.\n\t(__arm_vpselq_s64): Likewise.\n\t(vcmpneq_m_n): Define polymorphic variant.\n\t(vcmpneq_m): Likewise.\n\t(vqrdmlsdhq): Likewise.\n\t(vqrdmlsdhxq): Likewise.\n\t(vqrshlq_m_n): Likewise.\n\t(vqshlq_m_r): Likewise.\n\t(vrev64q_m): Likewise.\n\t(vrshlq_m_n): Likewise.\n\t(vshlq_m_r): Likewise.\n\t(vsliq_n): Likewise.\n\t(vsriq_n): Likewise.\n\t(vqrdmlashq_n): Likewise.\n\t(vqrdmlahq): Likewise.\n\t(vqrdmladhxq): Likewise.\n\t(vqrdmladhq): Likewise.\n\t(vqnegq_m): Likewise.\n\t(vqdmlsdhxq): Likewise.\n\t(vabsq_m): Likewise.\n\t(vclsq_m): Likewise.\n\t(vclzq_m): Likewise.\n\t(vcmpgeq_m): Likewise.\n\t(vcmpgeq_m_n): Likewise.\n\t(vdupq_m_n): Likewise.\n\t(vmaxaq_m): Likewise.\n\t(vmlaq_n): Likewise.\n\t(vmlasq_n): Likewise.\n\t(vmvnq_m): Likewise.\n\t(vnegq_m): Likewise.\n\t(vpselq): Likewise.\n\t(vqdmlahq_n): Likewise.\n\t(vqrdmlahq_n): Likewise.\n\t(vqdmlsdhq): Likewise.\n\t(vqdmladhq): Likewise.\n\t(vqabsq_m): Likewise.\n\t(vminaq_m): Likewise.\n\t(vrmlaldavhaq): Likewise.\n\t(vmlsdavxq_p): Likewise.\n\t(vmlsdavq_p): Likewise.\n\t(vmlsdavaxq): Likewise.\n\t(vmlsdavaq): Likewise.\n\t(vaddvaq_p): Likewise.\n\t(vcmpcsq_m_n): Likewise.\n\t(vcmpcsq_m): Likewise.\n\t(vcmpeqq_m_n): Likewise.\n\t(vcmpeqq_m): Likewise.\n\t(vmladavxq_p): Likewise.\n\t(vmladavq_p): Likewise.\n\t(vmladavaxq): Likewise.\n\t(vmladavaq): Likewise.\n\t(vminvq_p): Likewise.\n\t(vminavq_p): Likewise.\n\t(vmaxvq_p): Likewise.\n\t(vmaxavq_p): Likewise.\n\t(vcmpltq_m_n): Likewise.\n\t(vcmpltq_m): Likewise.\n\t(vcmpleq_m): Likewise.\n\t(vcmpleq_m_n): Likewise.\n\t(vcmphiq_m_n): Likewise.\n\t(vcmphiq_m): Likewise.\n\t(vcmpgtq_m_n): Likewise.\n\t(vcmpgtq_m): Likewise.\n\t* config/arm/arm_mve_builtins.def (TERNOP_NONE_NONE_NONE_IMM): Use\n\tbuiltin qualifier.\n\t(TERNOP_NONE_NONE_NONE_NONE): Likewise.\n\t(TERNOP_NONE_NONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_NONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_IMM): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/constraints.md (Rc): Define constraint to check constant is\n\tin the range of 0 to 15.\n\t(Re): Define constraint to check constant is in the range of 0 to 31.\n\t* config/arm/mve.md (VADDVAQ_P): Define iterator.\n\t(VCLZQ_M): Likewise.\n\t(VCMPEQQ_M_N): Likewise.\n\t(VCMPEQQ_M): Likewise.\n\t(VCMPNEQ_M_N): Likewise.\n\t(VCMPNEQ_M): Likewise.\n\t(VDUPQ_M_N): Likewise.\n\t(VMAXVQ_P): Likewise.\n\t(VMINVQ_P): Likewise.\n\t(VMLADAVAQ): Likewise.\n\t(VMLADAVQ_P): Likewise.\n\t(VMLAQ_N): Likewise.\n\t(VMLASQ_N): Likewise.\n\t(VMVNQ_M): Likewise.\n\t(VPSELQ): Likewise.\n\t(VQDMLAHQ_N): Likewise.\n\t(VQRDMLAHQ_N): Likewise.\n\t(VQRDMLASHQ_N): Likewise.\n\t(VQRSHLQ_M_N): Likewise.\n\t(VQSHLQ_M_R): Likewise.\n\t(VREV64Q_M): Likewise.\n\t(VRSHLQ_M_N): Likewise.\n\t(VSHLQ_M_R): Likewise.\n\t(VSLIQ_N): Likewise.\n\t(VSRIQ_N): Likewise.\n\t(mve_vabsq_m_s<mode>): Define RTL pattern.\n\t(mve_vaddvaq_p_<supf><mode>): Likewise.\n\t(mve_vclsq_m_s<mode>): Likewise.\n\t(mve_vclzq_m_<supf><mode>): Likewise.\n\t(mve_vcmpcsq_m_n_u<mode>): Likewise.\n\t(mve_vcmpcsq_m_u<mode>): Likewise.\n\t(mve_vcmpeqq_m_n_<supf><mode>): Likewise.\n\t(mve_vcmpeqq_m_<supf><mode>): Likewise.\n\t(mve_vcmpgeq_m_n_s<mode>): Likewise.\n\t(mve_vcmpgeq_m_s<mode>): Likewise.\n\t(mve_vcmpgtq_m_n_s<mode>): Likewise.\n\t(mve_vcmpgtq_m_s<mode>): Likewise.\n\t(mve_vcmphiq_m_n_u<mode>): Likewise.\n\t(mve_vcmphiq_m_u<mode>): Likewise.\n\t(mve_vcmpleq_m_n_s<mode>): Likewise.\n\t(mve_vcmpleq_m_s<mode>): Likewise.\n\t(mve_vcmpltq_m_n_s<mode>): Likewise.\n\t(mve_vcmpltq_m_s<mode>): Likewise.\n\t(mve_vcmpneq_m_n_<supf><mode>): Likewise.\n\t(mve_vcmpneq_m_<supf><mode>): Likewise.\n\t(mve_vdupq_m_n_<supf><mode>): Likewise.\n\t(mve_vmaxaq_m_s<mode>): Likewise.\n\t(mve_vmaxavq_p_s<mode>): Likewise.\n\t(mve_vmaxvq_p_<supf><mode>): Likewise.\n\t(mve_vminaq_m_s<mode>): Likewise.\n\t(mve_vminavq_p_s<mode>): Likewise.\n\t(mve_vminvq_p_<supf><mode>): Likewise.\n\t(mve_vmladavaq_<supf><mode>): Likewise.\n\t(mve_vmladavq_p_<supf><mode>): Likewise.\n\t(mve_vmladavxq_p_s<mode>): Likewise.\n\t(mve_vmlaq_n_<supf><mode>): Likewise.\n\t(mve_vmlasq_n_<supf><mode>): Likewise.\n\t(mve_vmlsdavq_p_s<mode>): Likewise.\n\t(mve_vmlsdavxq_p_s<mode>): Likewise.\n\t(mve_vmvnq_m_<supf><mode>): Likewise.\n\t(mve_vnegq_m_s<mode>): Likewise.\n\t(mve_vpselq_<supf><mode>): Likewise.\n\t(mve_vqabsq_m_s<mode>): Likewise.\n\t(mve_vqdmlahq_n_<supf><mode>): Likewise.\n\t(mve_vqnegq_m_s<mode>): Likewise.\n\t(mve_vqrdmladhq_s<mode>): Likewise.\n\t(mve_vqrdmladhxq_s<mode>): Likewise.\n\t(mve_vqrdmlahq_n_<supf><mode>): Likewise.\n\t(mve_vqrdmlashq_n_<supf><mode>): Likewise.\n\t(mve_vqrdmlsdhq_s<mode>): Likewise.\n\t(mve_vqrdmlsdhxq_s<mode>): Likewise.\n\t(mve_vqrshlq_m_n_<supf><mode>): Likewise.\n\t(mve_vqshlq_m_r_<supf><mode>): Likewise.\n\t(mve_vrev64q_m_<supf><mode>): Likewise.\n\t(mve_vrshlq_m_n_<supf><mode>): Likewise.\n\t(mve_vshlq_m_r_<supf><mode>): Likewise.\n\t(mve_vsliq_n_<supf><mode>): Likewise.\n\t(mve_vsriq_n_<supf><mode>): Likewise.\n\t(mve_vqdmlsdhxq_s<mode>): Likewise.\n\t(mve_vqdmlsdhq_s<mode>): Likewise.\n\t(mve_vqdmladhxq_s<mode>): Likewise.\n\t(mve_vqdmladhq_s<mode>): Likewise.\n\t(mve_vmlsdavaxq_s<mode>): Likewise.\n\t(mve_vmlsdavaq_s<mode>): Likewise.\n\t(mve_vmladavaxq_s<mode>): Likewise.\n\t* config/arm/predicates.md (mve_imm_15):Define predicate to check the\n\tmatching constraint Rc.\n\t(mve_imm_31): Define predicate to check\tthe matching constraint Re.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u8.c: Likewise.", "tree": {"sha": "096df9e8fbbca04b0c08d95b1fffc15bdf116836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/096df9e8fbbca04b0c08d95b1fffc15bdf116836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8165795c1555c83c0c6c68650321540f9253d461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8165795c1555c83c0c6c68650321540f9253d461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8165795c1555c83c0c6c68650321540f9253d461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8165795c1555c83c0c6c68650321540f9253d461/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26cbcfe5fce57b090b0f2336aad27d84b725f760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cbcfe5fce57b090b0f2336aad27d84b725f760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26cbcfe5fce57b090b0f2336aad27d84b725f760"}], "stats": {"total": 10829, "additions": 10779, "deletions": 50}, "files": [{"sha": "ebbdb8eac5fd7a59f1f8fc9fcc48e72a6b92d71e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 679, "deletions": 0, "changes": 679, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -1,3 +1,682 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vpselq_u8): Define macro.\n+\t(vpselq_s8): Likewise.\n+\t(vrev64q_m_u8): Likewise.\n+\t(vqrdmlashq_n_u8): Likewise.\n+\t(vqrdmlahq_n_u8): Likewise.\n+\t(vqdmlahq_n_u8): Likewise.\n+\t(vmvnq_m_u8): Likewise.\n+\t(vmlasq_n_u8): Likewise.\n+\t(vmlaq_n_u8): Likewise.\n+\t(vmladavq_p_u8): Likewise.\n+\t(vmladavaq_u8): Likewise.\n+\t(vminvq_p_u8): Likewise.\n+\t(vmaxvq_p_u8): Likewise.\n+\t(vdupq_m_n_u8): Likewise.\n+\t(vcmpneq_m_u8): Likewise.\n+\t(vcmpneq_m_n_u8): Likewise.\n+\t(vcmphiq_m_u8): Likewise.\n+\t(vcmphiq_m_n_u8): Likewise.\n+\t(vcmpeqq_m_u8): Likewise.\n+\t(vcmpeqq_m_n_u8): Likewise.\n+\t(vcmpcsq_m_u8): Likewise.\n+\t(vcmpcsq_m_n_u8): Likewise.\n+\t(vclzq_m_u8): Likewise.\n+\t(vaddvaq_p_u8): Likewise.\n+\t(vsriq_n_u8): Likewise.\n+\t(vsliq_n_u8): Likewise.\n+\t(vshlq_m_r_u8): Likewise.\n+\t(vrshlq_m_n_u8): Likewise.\n+\t(vqshlq_m_r_u8): Likewise.\n+\t(vqrshlq_m_n_u8): Likewise.\n+\t(vminavq_p_s8): Likewise.\n+\t(vminaq_m_s8): Likewise.\n+\t(vmaxavq_p_s8): Likewise.\n+\t(vmaxaq_m_s8): Likewise.\n+\t(vcmpneq_m_s8): Likewise.\n+\t(vcmpneq_m_n_s8): Likewise.\n+\t(vcmpltq_m_s8): Likewise.\n+\t(vcmpltq_m_n_s8): Likewise.\n+\t(vcmpleq_m_s8): Likewise.\n+\t(vcmpleq_m_n_s8): Likewise.\n+\t(vcmpgtq_m_s8): Likewise.\n+\t(vcmpgtq_m_n_s8): Likewise.\n+\t(vcmpgeq_m_s8): Likewise.\n+\t(vcmpgeq_m_n_s8): Likewise.\n+\t(vcmpeqq_m_s8): Likewise.\n+\t(vcmpeqq_m_n_s8): Likewise.\n+\t(vshlq_m_r_s8): Likewise.\n+\t(vrshlq_m_n_s8): Likewise.\n+\t(vrev64q_m_s8): Likewise.\n+\t(vqshlq_m_r_s8): Likewise.\n+\t(vqrshlq_m_n_s8): Likewise.\n+\t(vqnegq_m_s8): Likewise.\n+\t(vqabsq_m_s8): Likewise.\n+\t(vnegq_m_s8): Likewise.\n+\t(vmvnq_m_s8): Likewise.\n+\t(vmlsdavxq_p_s8): Likewise.\n+\t(vmlsdavq_p_s8): Likewise.\n+\t(vmladavxq_p_s8): Likewise.\n+\t(vmladavq_p_s8): Likewise.\n+\t(vminvq_p_s8): Likewise.\n+\t(vmaxvq_p_s8): Likewise.\n+\t(vdupq_m_n_s8): Likewise.\n+\t(vclzq_m_s8): Likewise.\n+\t(vclsq_m_s8): Likewise.\n+\t(vaddvaq_p_s8): Likewise.\n+\t(vabsq_m_s8): Likewise.\n+\t(vqrdmlsdhxq_s8): Likewise.\n+\t(vqrdmlsdhq_s8): Likewise.\n+\t(vqrdmlashq_n_s8): Likewise.\n+\t(vqrdmlahq_n_s8): Likewise.\n+\t(vqrdmladhxq_s8): Likewise.\n+\t(vqrdmladhq_s8): Likewise.\n+\t(vqdmlsdhxq_s8): Likewise.\n+\t(vqdmlsdhq_s8): Likewise.\n+\t(vqdmlahq_n_s8): Likewise.\n+\t(vqdmladhxq_s8): Likewise.\n+\t(vqdmladhq_s8): Likewise.\n+\t(vmlsdavaxq_s8): Likewise.\n+\t(vmlsdavaq_s8): Likewise.\n+\t(vmlasq_n_s8): Likewise.\n+\t(vmlaq_n_s8): Likewise.\n+\t(vmladavaxq_s8): Likewise.\n+\t(vmladavaq_s8): Likewise.\n+\t(vsriq_n_s8): Likewise.\n+\t(vsliq_n_s8): Likewise.\n+\t(vpselq_u16): Likewise.\n+\t(vpselq_s16): Likewise.\n+\t(vrev64q_m_u16): Likewise.\n+\t(vqrdmlashq_n_u16): Likewise.\n+\t(vqrdmlahq_n_u16): Likewise.\n+\t(vqdmlahq_n_u16): Likewise.\n+\t(vmvnq_m_u16): Likewise.\n+\t(vmlasq_n_u16): Likewise.\n+\t(vmlaq_n_u16): Likewise.\n+\t(vmladavq_p_u16): Likewise.\n+\t(vmladavaq_u16): Likewise.\n+\t(vminvq_p_u16): Likewise.\n+\t(vmaxvq_p_u16): Likewise.\n+\t(vdupq_m_n_u16): Likewise.\n+\t(vcmpneq_m_u16): Likewise.\n+\t(vcmpneq_m_n_u16): Likewise.\n+\t(vcmphiq_m_u16): Likewise.\n+\t(vcmphiq_m_n_u16): Likewise.\n+\t(vcmpeqq_m_u16): Likewise.\n+\t(vcmpeqq_m_n_u16): Likewise.\n+\t(vcmpcsq_m_u16): Likewise.\n+\t(vcmpcsq_m_n_u16): Likewise.\n+\t(vclzq_m_u16): Likewise.\n+\t(vaddvaq_p_u16): Likewise.\n+\t(vsriq_n_u16): Likewise.\n+\t(vsliq_n_u16): Likewise.\n+\t(vshlq_m_r_u16): Likewise.\n+\t(vrshlq_m_n_u16): Likewise.\n+\t(vqshlq_m_r_u16): Likewise.\n+\t(vqrshlq_m_n_u16): Likewise.\n+\t(vminavq_p_s16): Likewise.\n+\t(vminaq_m_s16): Likewise.\n+\t(vmaxavq_p_s16): Likewise.\n+\t(vmaxaq_m_s16): Likewise.\n+\t(vcmpneq_m_s16): Likewise.\n+\t(vcmpneq_m_n_s16): Likewise.\n+\t(vcmpltq_m_s16): Likewise.\n+\t(vcmpltq_m_n_s16): Likewise.\n+\t(vcmpleq_m_s16): Likewise.\n+\t(vcmpleq_m_n_s16): Likewise.\n+\t(vcmpgtq_m_s16): Likewise.\n+\t(vcmpgtq_m_n_s16): Likewise.\n+\t(vcmpgeq_m_s16): Likewise.\n+\t(vcmpgeq_m_n_s16): Likewise.\n+\t(vcmpeqq_m_s16): Likewise.\n+\t(vcmpeqq_m_n_s16): Likewise.\n+\t(vshlq_m_r_s16): Likewise.\n+\t(vrshlq_m_n_s16): Likewise.\n+\t(vrev64q_m_s16): Likewise.\n+\t(vqshlq_m_r_s16): Likewise.\n+\t(vqrshlq_m_n_s16): Likewise.\n+\t(vqnegq_m_s16): Likewise.\n+\t(vqabsq_m_s16): Likewise.\n+\t(vnegq_m_s16): Likewise.\n+\t(vmvnq_m_s16): Likewise.\n+\t(vmlsdavxq_p_s16): Likewise.\n+\t(vmlsdavq_p_s16): Likewise.\n+\t(vmladavxq_p_s16): Likewise.\n+\t(vmladavq_p_s16): Likewise.\n+\t(vminvq_p_s16): Likewise.\n+\t(vmaxvq_p_s16): Likewise.\n+\t(vdupq_m_n_s16): Likewise.\n+\t(vclzq_m_s16): Likewise.\n+\t(vclsq_m_s16): Likewise.\n+\t(vaddvaq_p_s16): Likewise.\n+\t(vabsq_m_s16): Likewise.\n+\t(vqrdmlsdhxq_s16): Likewise.\n+\t(vqrdmlsdhq_s16): Likewise.\n+\t(vqrdmlashq_n_s16): Likewise.\n+\t(vqrdmlahq_n_s16): Likewise.\n+\t(vqrdmladhxq_s16): Likewise.\n+\t(vqrdmladhq_s16): Likewise.\n+\t(vqdmlsdhxq_s16): Likewise.\n+\t(vqdmlsdhq_s16): Likewise.\n+\t(vqdmlahq_n_s16): Likewise.\n+\t(vqdmladhxq_s16): Likewise.\n+\t(vqdmladhq_s16): Likewise.\n+\t(vmlsdavaxq_s16): Likewise.\n+\t(vmlsdavaq_s16): Likewise.\n+\t(vmlasq_n_s16): Likewise.\n+\t(vmlaq_n_s16): Likewise.\n+\t(vmladavaxq_s16): Likewise.\n+\t(vmladavaq_s16): Likewise.\n+\t(vsriq_n_s16): Likewise.\n+\t(vsliq_n_s16): Likewise.\n+\t(vpselq_u32): Likewise.\n+\t(vpselq_s32): Likewise.\n+\t(vrev64q_m_u32): Likewise.\n+\t(vqrdmlashq_n_u32): Likewise.\n+\t(vqrdmlahq_n_u32): Likewise.\n+\t(vqdmlahq_n_u32): Likewise.\n+\t(vmvnq_m_u32): Likewise.\n+\t(vmlasq_n_u32): Likewise.\n+\t(vmlaq_n_u32): Likewise.\n+\t(vmladavq_p_u32): Likewise.\n+\t(vmladavaq_u32): Likewise.\n+\t(vminvq_p_u32): Likewise.\n+\t(vmaxvq_p_u32): Likewise.\n+\t(vdupq_m_n_u32): Likewise.\n+\t(vcmpneq_m_u32): Likewise.\n+\t(vcmpneq_m_n_u32): Likewise.\n+\t(vcmphiq_m_u32): Likewise.\n+\t(vcmphiq_m_n_u32): Likewise.\n+\t(vcmpeqq_m_u32): Likewise.\n+\t(vcmpeqq_m_n_u32): Likewise.\n+\t(vcmpcsq_m_u32): Likewise.\n+\t(vcmpcsq_m_n_u32): Likewise.\n+\t(vclzq_m_u32): Likewise.\n+\t(vaddvaq_p_u32): Likewise.\n+\t(vsriq_n_u32): Likewise.\n+\t(vsliq_n_u32): Likewise.\n+\t(vshlq_m_r_u32): Likewise.\n+\t(vrshlq_m_n_u32): Likewise.\n+\t(vqshlq_m_r_u32): Likewise.\n+\t(vqrshlq_m_n_u32): Likewise.\n+\t(vminavq_p_s32): Likewise.\n+\t(vminaq_m_s32): Likewise.\n+\t(vmaxavq_p_s32): Likewise.\n+\t(vmaxaq_m_s32): Likewise.\n+\t(vcmpneq_m_s32): Likewise.\n+\t(vcmpneq_m_n_s32): Likewise.\n+\t(vcmpltq_m_s32): Likewise.\n+\t(vcmpltq_m_n_s32): Likewise.\n+\t(vcmpleq_m_s32): Likewise.\n+\t(vcmpleq_m_n_s32): Likewise.\n+\t(vcmpgtq_m_s32): Likewise.\n+\t(vcmpgtq_m_n_s32): Likewise.\n+\t(vcmpgeq_m_s32): Likewise.\n+\t(vcmpgeq_m_n_s32): Likewise.\n+\t(vcmpeqq_m_s32): Likewise.\n+\t(vcmpeqq_m_n_s32): Likewise.\n+\t(vshlq_m_r_s32): Likewise.\n+\t(vrshlq_m_n_s32): Likewise.\n+\t(vrev64q_m_s32): Likewise.\n+\t(vqshlq_m_r_s32): Likewise.\n+\t(vqrshlq_m_n_s32): Likewise.\n+\t(vqnegq_m_s32): Likewise.\n+\t(vqabsq_m_s32): Likewise.\n+\t(vnegq_m_s32): Likewise.\n+\t(vmvnq_m_s32): Likewise.\n+\t(vmlsdavxq_p_s32): Likewise.\n+\t(vmlsdavq_p_s32): Likewise.\n+\t(vmladavxq_p_s32): Likewise.\n+\t(vmladavq_p_s32): Likewise.\n+\t(vminvq_p_s32): Likewise.\n+\t(vmaxvq_p_s32): Likewise.\n+\t(vdupq_m_n_s32): Likewise.\n+\t(vclzq_m_s32): Likewise.\n+\t(vclsq_m_s32): Likewise.\n+\t(vaddvaq_p_s32): Likewise.\n+\t(vabsq_m_s32): Likewise.\n+\t(vqrdmlsdhxq_s32): Likewise.\n+\t(vqrdmlsdhq_s32): Likewise.\n+\t(vqrdmlashq_n_s32): Likewise.\n+\t(vqrdmlahq_n_s32): Likewise.\n+\t(vqrdmladhxq_s32): Likewise.\n+\t(vqrdmladhq_s32): Likewise.\n+\t(vqdmlsdhxq_s32): Likewise.\n+\t(vqdmlsdhq_s32): Likewise.\n+\t(vqdmlahq_n_s32): Likewise.\n+\t(vqdmladhxq_s32): Likewise.\n+\t(vqdmladhq_s32): Likewise.\n+\t(vmlsdavaxq_s32): Likewise.\n+\t(vmlsdavaq_s32): Likewise.\n+\t(vmlasq_n_s32): Likewise.\n+\t(vmlaq_n_s32): Likewise.\n+\t(vmladavaxq_s32): Likewise.\n+\t(vmladavaq_s32): Likewise.\n+\t(vsriq_n_s32): Likewise.\n+\t(vsliq_n_s32): Likewise.\n+\t(vpselq_u64): Likewise.\n+\t(vpselq_s64): Likewise.\n+\t(__arm_vpselq_u8): Define intrinsic.\n+\t(__arm_vpselq_s8): Likewise.\n+\t(__arm_vrev64q_m_u8): Likewise.\n+\t(__arm_vqrdmlashq_n_u8): Likewise.\n+\t(__arm_vqrdmlahq_n_u8): Likewise.\n+\t(__arm_vqdmlahq_n_u8): Likewise.\n+\t(__arm_vmvnq_m_u8): Likewise.\n+\t(__arm_vmlasq_n_u8): Likewise.\n+\t(__arm_vmlaq_n_u8): Likewise.\n+\t(__arm_vmladavq_p_u8): Likewise.\n+\t(__arm_vmladavaq_u8): Likewise.\n+\t(__arm_vminvq_p_u8): Likewise.\n+\t(__arm_vmaxvq_p_u8): Likewise.\n+\t(__arm_vdupq_m_n_u8): Likewise.\n+\t(__arm_vcmpneq_m_u8): Likewise.\n+\t(__arm_vcmpneq_m_n_u8): Likewise.\n+\t(__arm_vcmphiq_m_u8): Likewise.\n+\t(__arm_vcmphiq_m_n_u8): Likewise.\n+\t(__arm_vcmpeqq_m_u8): Likewise.\n+\t(__arm_vcmpeqq_m_n_u8): Likewise.\n+\t(__arm_vcmpcsq_m_u8): Likewise.\n+\t(__arm_vcmpcsq_m_n_u8): Likewise.\n+\t(__arm_vclzq_m_u8): Likewise.\n+\t(__arm_vaddvaq_p_u8): Likewise.\n+\t(__arm_vsriq_n_u8): Likewise.\n+\t(__arm_vsliq_n_u8): Likewise.\n+\t(__arm_vshlq_m_r_u8): Likewise.\n+\t(__arm_vrshlq_m_n_u8): Likewise.\n+\t(__arm_vqshlq_m_r_u8): Likewise.\n+\t(__arm_vqrshlq_m_n_u8): Likewise.\n+\t(__arm_vminavq_p_s8): Likewise.\n+\t(__arm_vminaq_m_s8): Likewise.\n+\t(__arm_vmaxavq_p_s8): Likewise.\n+\t(__arm_vmaxaq_m_s8): Likewise.\n+\t(__arm_vcmpneq_m_s8): Likewise.\n+\t(__arm_vcmpneq_m_n_s8): Likewise.\n+\t(__arm_vcmpltq_m_s8): Likewise.\n+\t(__arm_vcmpltq_m_n_s8): Likewise.\n+\t(__arm_vcmpleq_m_s8): Likewise.\n+\t(__arm_vcmpleq_m_n_s8): Likewise.\n+\t(__arm_vcmpgtq_m_s8): Likewise.\n+\t(__arm_vcmpgtq_m_n_s8): Likewise.\n+\t(__arm_vcmpgeq_m_s8): Likewise.\n+\t(__arm_vcmpgeq_m_n_s8): Likewise.\n+\t(__arm_vcmpeqq_m_s8): Likewise.\n+\t(__arm_vcmpeqq_m_n_s8): Likewise.\n+\t(__arm_vshlq_m_r_s8): Likewise.\n+\t(__arm_vrshlq_m_n_s8): Likewise.\n+\t(__arm_vrev64q_m_s8): Likewise.\n+\t(__arm_vqshlq_m_r_s8): Likewise.\n+\t(__arm_vqrshlq_m_n_s8): Likewise.\n+\t(__arm_vqnegq_m_s8): Likewise.\n+\t(__arm_vqabsq_m_s8): Likewise.\n+\t(__arm_vnegq_m_s8): Likewise.\n+\t(__arm_vmvnq_m_s8): Likewise.\n+\t(__arm_vmlsdavxq_p_s8): Likewise.\n+\t(__arm_vmlsdavq_p_s8): Likewise.\n+\t(__arm_vmladavxq_p_s8): Likewise.\n+\t(__arm_vmladavq_p_s8): Likewise.\n+\t(__arm_vminvq_p_s8): Likewise.\n+\t(__arm_vmaxvq_p_s8): Likewise.\n+\t(__arm_vdupq_m_n_s8): Likewise.\n+\t(__arm_vclzq_m_s8): Likewise.\n+\t(__arm_vclsq_m_s8): Likewise.\n+\t(__arm_vaddvaq_p_s8): Likewise.\n+\t(__arm_vabsq_m_s8): Likewise.\n+\t(__arm_vqrdmlsdhxq_s8): Likewise.\n+\t(__arm_vqrdmlsdhq_s8): Likewise.\n+\t(__arm_vqrdmlashq_n_s8): Likewise.\n+\t(__arm_vqrdmlahq_n_s8): Likewise.\n+\t(__arm_vqrdmladhxq_s8): Likewise.\n+\t(__arm_vqrdmladhq_s8): Likewise.\n+\t(__arm_vqdmlsdhxq_s8): Likewise.\n+\t(__arm_vqdmlsdhq_s8): Likewise.\n+\t(__arm_vqdmlahq_n_s8): Likewise.\n+\t(__arm_vqdmladhxq_s8): Likewise.\n+\t(__arm_vqdmladhq_s8): Likewise.\n+\t(__arm_vmlsdavaxq_s8): Likewise.\n+\t(__arm_vmlsdavaq_s8): Likewise.\n+\t(__arm_vmlasq_n_s8): Likewise.\n+\t(__arm_vmlaq_n_s8): Likewise.\n+\t(__arm_vmladavaxq_s8): Likewise.\n+\t(__arm_vmladavaq_s8): Likewise.\n+\t(__arm_vsriq_n_s8): Likewise.\n+\t(__arm_vsliq_n_s8): Likewise.\n+\t(__arm_vpselq_u16): Likewise.\n+\t(__arm_vpselq_s16): Likewise.\n+\t(__arm_vrev64q_m_u16): Likewise.\n+\t(__arm_vqrdmlashq_n_u16): Likewise.\n+\t(__arm_vqrdmlahq_n_u16): Likewise.\n+\t(__arm_vqdmlahq_n_u16): Likewise.\n+\t(__arm_vmvnq_m_u16): Likewise.\n+\t(__arm_vmlasq_n_u16): Likewise.\n+\t(__arm_vmlaq_n_u16): Likewise.\n+\t(__arm_vmladavq_p_u16): Likewise.\n+\t(__arm_vmladavaq_u16): Likewise.\n+\t(__arm_vminvq_p_u16): Likewise.\n+\t(__arm_vmaxvq_p_u16): Likewise.\n+\t(__arm_vdupq_m_n_u16): Likewise.\n+\t(__arm_vcmpneq_m_u16): Likewise.\n+\t(__arm_vcmpneq_m_n_u16): Likewise.\n+\t(__arm_vcmphiq_m_u16): Likewise.\n+\t(__arm_vcmphiq_m_n_u16): Likewise.\n+\t(__arm_vcmpeqq_m_u16): Likewise.\n+\t(__arm_vcmpeqq_m_n_u16): Likewise.\n+\t(__arm_vcmpcsq_m_u16): Likewise.\n+\t(__arm_vcmpcsq_m_n_u16): Likewise.\n+\t(__arm_vclzq_m_u16): Likewise.\n+\t(__arm_vaddvaq_p_u16): Likewise.\n+\t(__arm_vsriq_n_u16): Likewise.\n+\t(__arm_vsliq_n_u16): Likewise.\n+\t(__arm_vshlq_m_r_u16): Likewise.\n+\t(__arm_vrshlq_m_n_u16): Likewise.\n+\t(__arm_vqshlq_m_r_u16): Likewise.\n+\t(__arm_vqrshlq_m_n_u16): Likewise.\n+\t(__arm_vminavq_p_s16): Likewise.\n+\t(__arm_vminaq_m_s16): Likewise.\n+\t(__arm_vmaxavq_p_s16): Likewise.\n+\t(__arm_vmaxaq_m_s16): Likewise.\n+\t(__arm_vcmpneq_m_s16): Likewise.\n+\t(__arm_vcmpneq_m_n_s16): Likewise.\n+\t(__arm_vcmpltq_m_s16): Likewise.\n+\t(__arm_vcmpltq_m_n_s16): Likewise.\n+\t(__arm_vcmpleq_m_s16): Likewise.\n+\t(__arm_vcmpleq_m_n_s16): Likewise.\n+\t(__arm_vcmpgtq_m_s16): Likewise.\n+\t(__arm_vcmpgtq_m_n_s16): Likewise.\n+\t(__arm_vcmpgeq_m_s16): Likewise.\n+\t(__arm_vcmpgeq_m_n_s16): Likewise.\n+\t(__arm_vcmpeqq_m_s16): Likewise.\n+\t(__arm_vcmpeqq_m_n_s16): Likewise.\n+\t(__arm_vshlq_m_r_s16): Likewise.\n+\t(__arm_vrshlq_m_n_s16): Likewise.\n+\t(__arm_vrev64q_m_s16): Likewise.\n+\t(__arm_vqshlq_m_r_s16): Likewise.\n+\t(__arm_vqrshlq_m_n_s16): Likewise.\n+\t(__arm_vqnegq_m_s16): Likewise.\n+\t(__arm_vqabsq_m_s16): Likewise.\n+\t(__arm_vnegq_m_s16): Likewise.\n+\t(__arm_vmvnq_m_s16): Likewise.\n+\t(__arm_vmlsdavxq_p_s16): Likewise.\n+\t(__arm_vmlsdavq_p_s16): Likewise.\n+\t(__arm_vmladavxq_p_s16): Likewise.\n+\t(__arm_vmladavq_p_s16): Likewise.\n+\t(__arm_vminvq_p_s16): Likewise.\n+\t(__arm_vmaxvq_p_s16): Likewise.\n+\t(__arm_vdupq_m_n_s16): Likewise.\n+\t(__arm_vclzq_m_s16): Likewise.\n+\t(__arm_vclsq_m_s16): Likewise.\n+\t(__arm_vaddvaq_p_s16): Likewise.\n+\t(__arm_vabsq_m_s16): Likewise.\n+\t(__arm_vqrdmlsdhxq_s16): Likewise.\n+\t(__arm_vqrdmlsdhq_s16): Likewise.\n+\t(__arm_vqrdmlashq_n_s16): Likewise.\n+\t(__arm_vqrdmlahq_n_s16): Likewise.\n+\t(__arm_vqrdmladhxq_s16): Likewise.\n+\t(__arm_vqrdmladhq_s16): Likewise.\n+\t(__arm_vqdmlsdhxq_s16): Likewise.\n+\t(__arm_vqdmlsdhq_s16): Likewise.\n+\t(__arm_vqdmlahq_n_s16): Likewise.\n+\t(__arm_vqdmladhxq_s16): Likewise.\n+\t(__arm_vqdmladhq_s16): Likewise.\n+\t(__arm_vmlsdavaxq_s16): Likewise.\n+\t(__arm_vmlsdavaq_s16): Likewise.\n+\t(__arm_vmlasq_n_s16): Likewise.\n+\t(__arm_vmlaq_n_s16): Likewise.\n+\t(__arm_vmladavaxq_s16): Likewise.\n+\t(__arm_vmladavaq_s16): Likewise.\n+\t(__arm_vsriq_n_s16): Likewise.\n+\t(__arm_vsliq_n_s16): Likewise.\n+\t(__arm_vpselq_u32): Likewise.\n+\t(__arm_vpselq_s32): Likewise.\n+\t(__arm_vrev64q_m_u32): Likewise.\n+\t(__arm_vqrdmlashq_n_u32): Likewise.\n+\t(__arm_vqrdmlahq_n_u32): Likewise.\n+\t(__arm_vqdmlahq_n_u32): Likewise.\n+\t(__arm_vmvnq_m_u32): Likewise.\n+\t(__arm_vmlasq_n_u32): Likewise.\n+\t(__arm_vmlaq_n_u32): Likewise.\n+\t(__arm_vmladavq_p_u32): Likewise.\n+\t(__arm_vmladavaq_u32): Likewise.\n+\t(__arm_vminvq_p_u32): Likewise.\n+\t(__arm_vmaxvq_p_u32): Likewise.\n+\t(__arm_vdupq_m_n_u32): Likewise.\n+\t(__arm_vcmpneq_m_u32): Likewise.\n+\t(__arm_vcmpneq_m_n_u32): Likewise.\n+\t(__arm_vcmphiq_m_u32): Likewise.\n+\t(__arm_vcmphiq_m_n_u32): Likewise.\n+\t(__arm_vcmpeqq_m_u32): Likewise.\n+\t(__arm_vcmpeqq_m_n_u32): Likewise.\n+\t(__arm_vcmpcsq_m_u32): Likewise.\n+\t(__arm_vcmpcsq_m_n_u32): Likewise.\n+\t(__arm_vclzq_m_u32): Likewise.\n+\t(__arm_vaddvaq_p_u32): Likewise.\n+\t(__arm_vsriq_n_u32): Likewise.\n+\t(__arm_vsliq_n_u32): Likewise.\n+\t(__arm_vshlq_m_r_u32): Likewise.\n+\t(__arm_vrshlq_m_n_u32): Likewise.\n+\t(__arm_vqshlq_m_r_u32): Likewise.\n+\t(__arm_vqrshlq_m_n_u32): Likewise.\n+\t(__arm_vminavq_p_s32): Likewise.\n+\t(__arm_vminaq_m_s32): Likewise.\n+\t(__arm_vmaxavq_p_s32): Likewise.\n+\t(__arm_vmaxaq_m_s32): Likewise.\n+\t(__arm_vcmpneq_m_s32): Likewise.\n+\t(__arm_vcmpneq_m_n_s32): Likewise.\n+\t(__arm_vcmpltq_m_s32): Likewise.\n+\t(__arm_vcmpltq_m_n_s32): Likewise.\n+\t(__arm_vcmpleq_m_s32): Likewise.\n+\t(__arm_vcmpleq_m_n_s32): Likewise.\n+\t(__arm_vcmpgtq_m_s32): Likewise.\n+\t(__arm_vcmpgtq_m_n_s32): Likewise.\n+\t(__arm_vcmpgeq_m_s32): Likewise.\n+\t(__arm_vcmpgeq_m_n_s32): Likewise.\n+\t(__arm_vcmpeqq_m_s32): Likewise.\n+\t(__arm_vcmpeqq_m_n_s32): Likewise.\n+\t(__arm_vshlq_m_r_s32): Likewise.\n+\t(__arm_vrshlq_m_n_s32): Likewise.\n+\t(__arm_vrev64q_m_s32): Likewise.\n+\t(__arm_vqshlq_m_r_s32): Likewise.\n+\t(__arm_vqrshlq_m_n_s32): Likewise.\n+\t(__arm_vqnegq_m_s32): Likewise.\n+\t(__arm_vqabsq_m_s32): Likewise.\n+\t(__arm_vnegq_m_s32): Likewise.\n+\t(__arm_vmvnq_m_s32): Likewise.\n+\t(__arm_vmlsdavxq_p_s32): Likewise.\n+\t(__arm_vmlsdavq_p_s32): Likewise.\n+\t(__arm_vmladavxq_p_s32): Likewise.\n+\t(__arm_vmladavq_p_s32): Likewise.\n+\t(__arm_vminvq_p_s32): Likewise.\n+\t(__arm_vmaxvq_p_s32): Likewise.\n+\t(__arm_vdupq_m_n_s32): Likewise.\n+\t(__arm_vclzq_m_s32): Likewise.\n+\t(__arm_vclsq_m_s32): Likewise.\n+\t(__arm_vaddvaq_p_s32): Likewise.\n+\t(__arm_vabsq_m_s32): Likewise.\n+\t(__arm_vqrdmlsdhxq_s32): Likewise.\n+\t(__arm_vqrdmlsdhq_s32): Likewise.\n+\t(__arm_vqrdmlashq_n_s32): Likewise.\n+\t(__arm_vqrdmlahq_n_s32): Likewise.\n+\t(__arm_vqrdmladhxq_s32): Likewise.\n+\t(__arm_vqrdmladhq_s32): Likewise.\n+\t(__arm_vqdmlsdhxq_s32): Likewise.\n+\t(__arm_vqdmlsdhq_s32): Likewise.\n+\t(__arm_vqdmlahq_n_s32): Likewise.\n+\t(__arm_vqdmladhxq_s32): Likewise.\n+\t(__arm_vqdmladhq_s32): Likewise.\n+\t(__arm_vmlsdavaxq_s32): Likewise.\n+\t(__arm_vmlsdavaq_s32): Likewise.\n+\t(__arm_vmlasq_n_s32): Likewise.\n+\t(__arm_vmlaq_n_s32): Likewise.\n+\t(__arm_vmladavaxq_s32): Likewise.\n+\t(__arm_vmladavaq_s32): Likewise.\n+\t(__arm_vsriq_n_s32): Likewise.\n+\t(__arm_vsliq_n_s32): Likewise.\n+\t(__arm_vpselq_u64): Likewise.\n+\t(__arm_vpselq_s64): Likewise.\n+\t(vcmpneq_m_n): Define polymorphic variant.\n+\t(vcmpneq_m): Likewise.\n+\t(vqrdmlsdhq): Likewise.\n+\t(vqrdmlsdhxq): Likewise.\n+\t(vqrshlq_m_n): Likewise.\n+\t(vqshlq_m_r): Likewise.\n+\t(vrev64q_m): Likewise.\n+\t(vrshlq_m_n): Likewise.\n+\t(vshlq_m_r): Likewise.\n+\t(vsliq_n): Likewise.\n+\t(vsriq_n): Likewise.\n+\t(vqrdmlashq_n): Likewise.\n+\t(vqrdmlahq): Likewise.\n+\t(vqrdmladhxq): Likewise.\n+\t(vqrdmladhq): Likewise.\n+\t(vqnegq_m): Likewise.\n+\t(vqdmlsdhxq): Likewise.\n+\t(vabsq_m): Likewise.\n+\t(vclsq_m): Likewise.\n+\t(vclzq_m): Likewise.\n+\t(vcmpgeq_m): Likewise.\n+\t(vcmpgeq_m_n): Likewise.\n+\t(vdupq_m_n): Likewise.\n+\t(vmaxaq_m): Likewise.\n+\t(vmlaq_n): Likewise.\n+\t(vmlasq_n): Likewise.\n+\t(vmvnq_m): Likewise.\n+\t(vnegq_m): Likewise.\n+\t(vpselq): Likewise.\n+\t(vqdmlahq_n): Likewise.\n+\t(vqrdmlahq_n): Likewise.\n+\t(vqdmlsdhq): Likewise.\n+\t(vqdmladhq): Likewise.\n+\t(vqabsq_m): Likewise.\n+\t(vminaq_m): Likewise.\n+\t(vrmlaldavhaq): Likewise.\n+\t(vmlsdavxq_p): Likewise.\n+\t(vmlsdavq_p): Likewise.\t\n+\t(vmlsdavaxq): Likewise.\t\n+\t(vmlsdavaq): Likewise.\t\n+\t(vaddvaq_p): Likewise.\t\n+\t(vcmpcsq_m_n): Likewise.\t\n+\t(vcmpcsq_m): Likewise.\t\n+\t(vcmpeqq_m_n): Likewise.\t\n+\t(vcmpeqq_m): Likewise.\t\n+\t(vmladavxq_p): Likewise.\t\n+\t(vmladavq_p): Likewise.\t\n+\t(vmladavaxq): Likewise.\t\n+\t(vmladavaq): Likewise.\t\n+\t(vminvq_p): Likewise.\t\n+\t(vminavq_p): Likewise.\t\n+\t(vmaxvq_p): Likewise.\t\n+\t(vmaxavq_p): Likewise.\t\n+\t(vcmpltq_m_n): Likewise.\t\n+\t(vcmpltq_m): Likewise.\t\n+\t(vcmpleq_m): Likewise.\t\n+\t(vcmpleq_m_n): Likewise.\t\n+\t(vcmphiq_m_n): Likewise.\t\n+\t(vcmphiq_m): Likewise.\t\n+\t(vcmpgtq_m_n): Likewise.\t\n+\t(vcmpgtq_m): Likewise.\t\n+\t* config/arm/arm_mve_builtins.def (TERNOP_NONE_NONE_NONE_IMM): Use\n+\tbuiltin qualifier.\n+\t(TERNOP_NONE_NONE_NONE_NONE): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_NONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_IMM): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/constraints.md (Rc): Define constraint to check constant is\n+\tin the range of 0 to 15.\n+\t(Re): Define constraint to check constant is in the range of 0 to 31.\n+\t* config/arm/mve.md (VADDVAQ_P): Define iterator.\n+\t(VCLZQ_M): Likewise.\n+\t(VCMPEQQ_M_N): Likewise.\n+\t(VCMPEQQ_M): Likewise.\n+\t(VCMPNEQ_M_N): Likewise.\n+\t(VCMPNEQ_M): Likewise.\n+\t(VDUPQ_M_N): Likewise.\n+\t(VMAXVQ_P): Likewise.\n+\t(VMINVQ_P): Likewise.\n+\t(VMLADAVAQ): Likewise.\n+\t(VMLADAVQ_P): Likewise.\n+\t(VMLAQ_N): Likewise.\n+\t(VMLASQ_N): Likewise.\n+\t(VMVNQ_M): Likewise.\n+\t(VPSELQ): Likewise.\n+\t(VQDMLAHQ_N): Likewise.\n+\t(VQRDMLAHQ_N): Likewise.\n+\t(VQRDMLASHQ_N): Likewise.\n+\t(VQRSHLQ_M_N): Likewise.\n+\t(VQSHLQ_M_R): Likewise.\n+\t(VREV64Q_M): Likewise.\n+\t(VRSHLQ_M_N): Likewise.\n+\t(VSHLQ_M_R): Likewise.\n+\t(VSLIQ_N): Likewise.\n+\t(VSRIQ_N): Likewise.\n+\t(mve_vabsq_m_s<mode>): Define RTL pattern.\n+\t(mve_vaddvaq_p_<supf><mode>): Likewise.\n+\t(mve_vclsq_m_s<mode>): Likewise.\n+\t(mve_vclzq_m_<supf><mode>): Likewise.\n+\t(mve_vcmpcsq_m_n_u<mode>): Likewise.\n+\t(mve_vcmpcsq_m_u<mode>): Likewise.\n+\t(mve_vcmpeqq_m_n_<supf><mode>): Likewise.\n+\t(mve_vcmpeqq_m_<supf><mode>): Likewise.\n+\t(mve_vcmpgeq_m_n_s<mode>): Likewise.\n+\t(mve_vcmpgeq_m_s<mode>): Likewise.\n+\t(mve_vcmpgtq_m_n_s<mode>): Likewise.\n+\t(mve_vcmpgtq_m_s<mode>): Likewise.\n+\t(mve_vcmphiq_m_n_u<mode>): Likewise.\n+\t(mve_vcmphiq_m_u<mode>): Likewise.\n+\t(mve_vcmpleq_m_n_s<mode>): Likewise.\n+\t(mve_vcmpleq_m_s<mode>): Likewise.\n+\t(mve_vcmpltq_m_n_s<mode>): Likewise.\n+\t(mve_vcmpltq_m_s<mode>): Likewise.\n+\t(mve_vcmpneq_m_n_<supf><mode>): Likewise.\n+\t(mve_vcmpneq_m_<supf><mode>): Likewise.\n+\t(mve_vdupq_m_n_<supf><mode>): Likewise.\n+\t(mve_vmaxaq_m_s<mode>): Likewise.\n+\t(mve_vmaxavq_p_s<mode>): Likewise.\n+\t(mve_vmaxvq_p_<supf><mode>): Likewise.\n+\t(mve_vminaq_m_s<mode>): Likewise.\n+\t(mve_vminavq_p_s<mode>): Likewise.\n+\t(mve_vminvq_p_<supf><mode>): Likewise.\n+\t(mve_vmladavaq_<supf><mode>): Likewise.\n+\t(mve_vmladavq_p_<supf><mode>): Likewise.\n+\t(mve_vmladavxq_p_s<mode>): Likewise.\n+\t(mve_vmlaq_n_<supf><mode>): Likewise.\n+\t(mve_vmlasq_n_<supf><mode>): Likewise.\n+\t(mve_vmlsdavq_p_s<mode>): Likewise.\n+\t(mve_vmlsdavxq_p_s<mode>): Likewise.\n+\t(mve_vmvnq_m_<supf><mode>): Likewise.\n+\t(mve_vnegq_m_s<mode>): Likewise.\n+\t(mve_vpselq_<supf><mode>): Likewise.\n+\t(mve_vqabsq_m_s<mode>): Likewise.\n+\t(mve_vqdmlahq_n_<supf><mode>): Likewise.\n+\t(mve_vqnegq_m_s<mode>): Likewise.\n+\t(mve_vqrdmladhq_s<mode>): Likewise.\n+\t(mve_vqrdmladhxq_s<mode>): Likewise.\n+\t(mve_vqrdmlahq_n_<supf><mode>): Likewise.\n+\t(mve_vqrdmlashq_n_<supf><mode>): Likewise.\n+\t(mve_vqrdmlsdhq_s<mode>): Likewise.\n+\t(mve_vqrdmlsdhxq_s<mode>): Likewise.\n+\t(mve_vqrshlq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqshlq_m_r_<supf><mode>): Likewise.\n+\t(mve_vrev64q_m_<supf><mode>): Likewise.\n+\t(mve_vrshlq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshlq_m_r_<supf><mode>): Likewise.\n+\t(mve_vsliq_n_<supf><mode>): Likewise.\n+\t(mve_vsriq_n_<supf><mode>): Likewise.\n+\t(mve_vqdmlsdhxq_s<mode>): Likewise.\n+\t(mve_vqdmlsdhq_s<mode>): Likewise.\n+\t(mve_vqdmladhxq_s<mode>): Likewise.\n+\t(mve_vqdmladhq_s<mode>): Likewise.\n+\t(mve_vmlsdavaxq_s<mode>): Likewise.\n+\t(mve_vmlsdavaq_s<mode>): Likewise.\n+\t(mve_vmladavaxq_s<mode>): Likewise.\n+\t* config/arm/predicates.md (mve_imm_15):Define predicate to check the\n+\tmatching constraint Rc.\n+\t(mve_imm_31): Define predicate to check\tthe matching constraint Re.\n+\n 2020-03-18  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (vec_cmp<mode>di): Set operand 1 to DImode."}, {"sha": "f852c68d9ae53e4e3a4214e1720251faabcaa8c8", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 2921, "deletions": 45, "changes": 2966, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=8165795c1555c83c0c6c68650321540f9253d461"}, {"sha": "25badfbca936bf99a2da99bfc0fbdbbd5f5dd182", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -309,3 +309,88 @@ VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtaq_m_u, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtaq_m_s, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vshlcq_vec_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_UNONE_IMM, vshlcq_vec_s, v16qi, v8hi, v4si)\n+VAR4 (TERNOP_UNONE_UNONE_UNONE_UNONE, vpselq_u, v16qi, v8hi, v4si, v2di)\n+VAR4 (TERNOP_NONE_NONE_NONE_UNONE, vpselq_s, v16qi, v8hi, v4si, v2di)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrev64q_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqrdmlashq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqrdmlahq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqdmlahq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmvnq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlasq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlaq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmladavq_p_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmladavaq_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vminvq_p_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmaxvq_p_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vdupq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpneq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpneq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmphiq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmphiq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpeqq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpeqq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpcsq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vcmpcsq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vclzq_m_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vaddvaq_p_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vsriq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vsliq_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vshlq_m_r_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vrshlq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vqshlq_m_r_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vqrshlq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vminavq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vminaq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vmaxavq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_UNONE, vmaxaq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpneq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpneq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpltq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpltq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpleq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpleq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgtq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgtq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgeq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgeq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpeqq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpeqq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vshlq_m_r_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vrshlq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vrev64q_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vqshlq_m_r_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vqrshlq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vqnegq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vqabsq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vnegq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmvnq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmlsdavxq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmlsdavq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmladavxq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmladavq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vminvq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vmaxvq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vdupq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vclzq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vclsq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vaddvaq_p_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_UNONE, vabsq_m_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmlsdhxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmlsdhq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmlashq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmlahq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmladhxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmladhq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlsdhxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlsdhq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlahq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmladhxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmladhq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmlsdavaxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmlsdavaq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmlasq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmlaq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmladavaxq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmladavaq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_IMM, vsriq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_IMM, vsliq_n_s, v16qi, v8hi, v4si)"}, {"sha": "2641669d8e0797052bb4318b9fff5b8783646e32", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -69,6 +69,16 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 8\")))\n \n+(define_constraint \"Rc\"\n+  \"@internal In Thumb-2 state a constant in range 0 to 15\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 0 && ival <= 15\")))\n+\n+(define_constraint \"Re\"\n+  \"@internal In Thumb-2 state a constant in range 0 to 31\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 0 && ival <= 31\")))\n+\n (define_constraint \"Rf\"\n   \"@internal In Thumb-2 state a constant in range 1 to 32\"\n   (and (match_code \"const_int\")"}, {"sha": "b9985a031fadf6b877e9810d5b6fb7ed289bca74", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1029, "deletions": 3, "changes": 1032, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -89,7 +89,28 @@\n \t\t\t VCVTAQ_M_S VCVTAQ_M_U VCVTQ_M_TO_F_S VCVTQ_M_TO_F_U\n \t\t\t VQRSHRNBQ_N_U VQRSHRNBQ_N_S VQRSHRUNBQ_N_S\n \t\t\t VRMLALDAVHAQ_S VABAVQ_S VABAVQ_U VSHLCQ_S VSHLCQ_U\n-\t\t\t VRMLALDAVHAQ_U])\n+\t\t\t VRMLALDAVHAQ_U VABSQ_M_S VADDVAQ_P_S VADDVAQ_P_U\n+\t\t\t VCLSQ_M_S VCLZQ_M_S VCLZQ_M_U VCMPCSQ_M_N_U\n+\t\t\t VCMPCSQ_M_U VCMPEQQ_M_N_S VCMPEQQ_M_N_U VCMPEQQ_M_S\n+\t\t\t VCMPEQQ_M_U VCMPGEQ_M_N_S VCMPGEQ_M_S VCMPGTQ_M_N_S\n+\t\t\t VCMPGTQ_M_S VCMPHIQ_M_N_U VCMPHIQ_M_U VCMPLEQ_M_N_S\n+\t\t\t VCMPLEQ_M_S VCMPLTQ_M_N_S VCMPLTQ_M_S VCMPNEQ_M_N_S\n+\t\t\t VCMPNEQ_M_N_U VCMPNEQ_M_S VCMPNEQ_M_U VDUPQ_M_N_S\n+\t\t\t VDUPQ_M_N_U VDWDUPQ_N_U VDWDUPQ_WB_U VIWDUPQ_N_U\n+\t\t\t VIWDUPQ_WB_U VMAXAQ_M_S VMAXAVQ_P_S VMAXVQ_P_S\n+\t\t\t VMAXVQ_P_U VMINAQ_M_S VMINAVQ_P_S VMINVQ_P_S VMINVQ_P_U\n+\t\t\t VMLADAVAQ_S VMLADAVAQ_U VMLADAVQ_P_S VMLADAVQ_P_U\n+\t\t\t VMLADAVXQ_P_S VMLAQ_N_S VMLAQ_N_U VMLASQ_N_S VMLASQ_N_U\n+\t\t\t VMLSDAVQ_P_S VMLSDAVXQ_P_S VMVNQ_M_S VMVNQ_M_U\n+\t\t\t VNEGQ_M_S VPSELQ_S VPSELQ_U VQABSQ_M_S VQDMLAHQ_N_S\n+\t\t\t VQDMLAHQ_N_U VQNEGQ_M_S VQRDMLADHQ_S VQRDMLADHXQ_S\n+\t\t\t VQRDMLAHQ_N_S VQRDMLAHQ_N_U VQRDMLASHQ_N_S\n+\t\t\t VQRDMLASHQ_N_U VQRDMLSDHQ_S VQRDMLSDHXQ_S VQRSHLQ_M_N_S\n+\t\t\t VQRSHLQ_M_N_U VQSHLQ_M_R_S VQSHLQ_M_R_U VREV64Q_M_S\n+\t\t\t VREV64Q_M_U VRSHLQ_M_N_S VRSHLQ_M_N_U VSHLQ_M_R_S\n+\t\t\t VSHLQ_M_R_U VSLIQ_N_S VSLIQ_N_U VSRIQ_N_S VSRIQ_N_U\n+\t\t\t VQDMLSDHXQ_S VQDMLSDHQ_S VQDMLADHXQ_S VQDMLADHQ_S\n+\t\t\t VMLSDAVAXQ_S VMLSDAVAQ_S VMLADAVAXQ_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -155,7 +176,24 @@\n \t\t       (VCVTQ_M_TO_F_U \"u\") (VQRSHRNBQ_N_S \"s\")\n \t\t       (VQRSHRNBQ_N_U \"u\") (VABAVQ_S \"s\") (VABAVQ_U \"u\")\n \t\t       (VRMLALDAVHAQ_U \"u\") (VRMLALDAVHAQ_S \"s\") (VSHLCQ_S \"s\")\n-\t\t       (VSHLCQ_U \"u\")])\n+\t\t       (VSHLCQ_U \"u\") (VADDVAQ_P_S \"s\") (VADDVAQ_P_U \"u\")\n+\t\t       (VCLZQ_M_S \"s\") (VCLZQ_M_U \"u\") (VCMPEQQ_M_N_S \"s\")\n+\t\t       (VCMPEQQ_M_N_U \"u\") (VCMPEQQ_M_S \"s\") (VCMPEQQ_M_U \"u\")\n+\t\t       (VCMPNEQ_M_N_S \"s\") (VCMPNEQ_M_N_U \"u\") (VCMPNEQ_M_S \"s\")\n+\t\t       (VCMPNEQ_M_U \"u\") (VDUPQ_M_N_S \"s\") (VDUPQ_M_N_U \"u\")\n+\t\t       (VMAXVQ_P_S \"s\") (VMAXVQ_P_U \"u\") (VMINVQ_P_S \"s\")\n+\t\t       (VMINVQ_P_U \"u\") (VMLADAVAQ_S \"s\") (VMLADAVAQ_U \"u\")\n+\t\t       (VMLADAVQ_P_S \"s\") (VMLADAVQ_P_U \"u\") (VMLAQ_N_S \"s\")\n+\t\t       (VMLAQ_N_U \"u\") (VMLASQ_N_S \"s\") (VMLASQ_N_U \"u\")\n+\t\t       (VMVNQ_M_S \"s\") (VMVNQ_M_U \"u\") (VPSELQ_S \"s\")\n+\t\t       (VPSELQ_U \"u\") (VQDMLAHQ_N_S \"s\") (VQDMLAHQ_N_U \"u\")\n+\t\t       (VQRDMLAHQ_N_S \"s\") (VQRDMLAHQ_N_U \"u\")\n+\t\t       (VQRDMLASHQ_N_S \"s\") (VQRDMLASHQ_N_U \"u\")\n+\t\t       (VQRSHLQ_M_N_S \"s\") (VQRSHLQ_M_N_U \"u\")\n+\t\t       (VQSHLQ_M_R_S \"s\") (VQSHLQ_M_R_U \"u\") (VSRIQ_N_S \"s\")\n+\t\t       (VREV64Q_M_S \"s\") (VREV64Q_M_U \"u\") (VSRIQ_N_U \"u\")\n+\t\t       (VRSHLQ_M_N_S \"s\") (VRSHLQ_M_N_U \"u\") (VSHLQ_M_R_S \"s\")\n+\t\t       (VSHLQ_M_R_U \"u\") (VSLIQ_N_S \"s\") (VSLIQ_N_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -164,6 +202,9 @@\n \t\t\t     (V4SI \"mve_imm_32\")])\n (define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")])\n (define_mode_attr MVE_LANES [(V16QI \"16\") (V8HI \"8\") (V4SI \"4\")])\n+(define_mode_attr MVE_constraint [ (V16QI \"Ra\") (V8HI \"Rc\") (V4SI \"Re\")])\n+(define_mode_attr MVE_pred [ (V16QI \"mve_imm_7\") (V8HI \"mve_imm_15\")\n+\t\t\t\t   (V4SI \"mve_imm_31\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -257,6 +298,31 @@\n (define_int_iterator VABAVQ [VABAVQ_S VABAVQ_U])\n (define_int_iterator VSHLCQ [VSHLCQ_S VSHLCQ_U])\n (define_int_iterator VRMLALDAVHAQ [VRMLALDAVHAQ_S VRMLALDAVHAQ_U])\n+(define_int_iterator VADDVAQ_P [VADDVAQ_P_S VADDVAQ_P_U])\n+(define_int_iterator VCLZQ_M [VCLZQ_M_S VCLZQ_M_U])\n+(define_int_iterator VCMPEQQ_M_N [VCMPEQQ_M_N_S VCMPEQQ_M_N_U])\n+(define_int_iterator VCMPEQQ_M [VCMPEQQ_M_S VCMPEQQ_M_U])\n+(define_int_iterator VCMPNEQ_M_N [VCMPNEQ_M_N_S VCMPNEQ_M_N_U])\n+(define_int_iterator VCMPNEQ_M [VCMPNEQ_M_S VCMPNEQ_M_U])\n+(define_int_iterator VDUPQ_M_N [VDUPQ_M_N_S VDUPQ_M_N_U])\n+(define_int_iterator VMAXVQ_P [VMAXVQ_P_S VMAXVQ_P_U])\n+(define_int_iterator VMINVQ_P [VMINVQ_P_S VMINVQ_P_U])\n+(define_int_iterator VMLADAVAQ [VMLADAVAQ_S VMLADAVAQ_U])\n+(define_int_iterator VMLADAVQ_P [VMLADAVQ_P_S VMLADAVQ_P_U])\n+(define_int_iterator VMLAQ_N [VMLAQ_N_S VMLAQ_N_U])\n+(define_int_iterator VMLASQ_N [VMLASQ_N_S VMLASQ_N_U])\n+(define_int_iterator VMVNQ_M [VMVNQ_M_S VMVNQ_M_U])\n+(define_int_iterator VPSELQ [VPSELQ_S VPSELQ_U])\n+(define_int_iterator VQDMLAHQ_N [VQDMLAHQ_N_S VQDMLAHQ_N_U])\n+(define_int_iterator VQRDMLAHQ_N [VQRDMLAHQ_N_S VQRDMLAHQ_N_U])\n+(define_int_iterator VQRDMLASHQ_N [VQRDMLASHQ_N_S VQRDMLASHQ_N_U])\n+(define_int_iterator VQRSHLQ_M_N [VQRSHLQ_M_N_S VQRSHLQ_M_N_U])\n+(define_int_iterator VQSHLQ_M_R [VQSHLQ_M_R_S VQSHLQ_M_R_U])\n+(define_int_iterator VREV64Q_M [VREV64Q_M_S VREV64Q_M_U])\n+(define_int_iterator VRSHLQ_M_N [VRSHLQ_M_N_S VRSHLQ_M_N_U])\n+(define_int_iterator VSHLQ_M_R [VSHLQ_M_R_S VSHLQ_M_R_U])\n+(define_int_iterator VSLIQ_N [VSLIQ_N_S VSLIQ_N_U])\n+(define_int_iterator VSRIQ_N [VSRIQ_N_S VSRIQ_N_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -3209,7 +3275,7 @@\n {\n   rtx ignore_wb = gen_reg_rtx (SImode);\n   emit_insn(gen_mve_vshlcq_<supf><mode>(operands[0], ignore_wb, operands[1],\n-                                      operands[2], operands[3]));\n+\t\t\t\t      operands[2], operands[3]));\n   DONE;\n })\n \n@@ -3240,3 +3306,963 @@\n \tVSHLCQ))]\n  \"TARGET_HAVE_MVE\"\n  \"vshlc %q0, %1, %4\")\n+\n+;;\n+;; [vabsq_m_s])\n+;;\n+(define_insn \"mve_vabsq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VABSQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vabst.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddvaq_p_u, vaddvaq_p_s])\n+;;\n+(define_insn \"mve_vaddvaq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VADDVAQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddvat.<supf>%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vclsq_m_s])\n+;;\n+(define_insn \"mve_vclsq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCLSQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vclst.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vclzq_m_s, vclzq_m_u])\n+;;\n+(define_insn \"mve_vclzq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCLZQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vclzt.i%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpcsq_m_n_u])\n+;;\n+(define_insn \"mve_vcmpcsq_m_n_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPCSQ_M_N_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.u%#<V_sz_elem>\tcs, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpcsq_m_u])\n+;;\n+(define_insn \"mve_vcmpcsq_m_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPCSQ_M_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.u%#<V_sz_elem>\tcs, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpeqq_m_n_u, vcmpeqq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpeqq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPEQQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.i%#<V_sz_elem>\teq, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpeqq_m_u, vcmpeqq_m_s])\n+;;\n+(define_insn \"mve_vcmpeqq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPEQQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.i%#<V_sz_elem>\teq, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgeq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpgeq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGEQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tge, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgeq_m_s])\n+;;\n+(define_insn \"mve_vcmpgeq_m_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGEQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tge, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgtq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpgtq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGTQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tgt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgtq_m_s])\n+;;\n+(define_insn \"mve_vcmpgtq_m_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGTQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tgt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmphiq_m_n_u])\n+;;\n+(define_insn \"mve_vcmphiq_m_n_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPHIQ_M_N_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.u%#<V_sz_elem>\thi, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmphiq_m_u])\n+;;\n+(define_insn \"mve_vcmphiq_m_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPHIQ_M_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.u%#<V_sz_elem>\thi, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpleq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpleq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLEQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tle, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpleq_m_s])\n+;;\n+(define_insn \"mve_vcmpleq_m_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLEQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tle, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpltq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpltq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLTQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tlt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpltq_m_s])\n+;;\n+(define_insn \"mve_vcmpltq_m_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLTQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.s%#<V_sz_elem>\tlt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpneq_m_n_u, vcmpneq_m_n_s])\n+;;\n+(define_insn \"mve_vcmpneq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPNEQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.i%#<V_sz_elem>\tne, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpneq_m_s, vcmpneq_m_u])\n+;;\n+(define_insn \"mve_vcmpneq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPNEQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcmpt.i%#<V_sz_elem>\tne, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vdupq_m_n_s, vdupq_m_n_u])\n+;;\n+(define_insn \"mve_vdupq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VDUPQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vdupt.%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxaq_m_s])\n+;;\n+(define_insn \"mve_vmaxaq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXAQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmaxat.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxavq_p_s])\n+;;\n+(define_insn \"mve_vmaxavq_p_s<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXAVQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmaxavt.s%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxvq_p_u, vmaxvq_p_s])\n+;;\n+(define_insn \"mve_vmaxvq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmaxvt.<supf>%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminaq_m_s])\n+;;\n+(define_insn \"mve_vminaq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINAQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vminat.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminavq_p_s])\n+;;\n+(define_insn \"mve_vminavq_p_s<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINAVQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vminavt.s%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminvq_p_s, vminvq_p_u])\n+;;\n+(define_insn \"mve_vminvq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vminvt.<supf>%#<V_sz_elem>\\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmladavaq_u, vmladavaq_s])\n+;;\n+(define_insn \"mve_vmladavaq_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VMLADAVAQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmladava.<supf>%#<V_sz_elem>\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmladavq_p_u, vmladavq_p_s])\n+;;\n+(define_insn \"mve_vmladavq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLADAVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmladavt.<supf>%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmladavxq_p_s])\n+;;\n+(define_insn \"mve_vmladavxq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLADAVXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmladavxt.s%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlaq_n_u, vmlaq_n_s])\n+;;\n+(define_insn \"mve_vmlaq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VMLAQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmla.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlasq_n_u, vmlasq_n_s])\n+;;\n+(define_insn \"mve_vmlasq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VMLASQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlas.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsdavq_p_s])\n+;;\n+(define_insn \"mve_vmlsdavq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLSDAVQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsdavt.s%#<V_sz_elem>\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsdavxq_p_s])\n+;;\n+(define_insn \"mve_vmlsdavxq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLSDAVXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsdavxt.s%#<V_sz_elem>\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmvnq_m_s, vmvnq_m_u])\n+;;\n+(define_insn \"mve_vmvnq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMVNQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmvnt %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vnegq_m_s])\n+;;\n+(define_insn \"mve_vnegq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VNEGQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vnegt.s%#<V_sz_elem>\\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vpselq_u, vpselq_s])\n+;;\n+(define_insn \"mve_vpselq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_1 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_1 [(match_operand:MVE_1 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_1 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VPSELQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpsel %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqabsq_m_s])\n+;;\n+(define_insn \"mve_vqabsq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQABSQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqabst.s%#<V_sz_elem>\\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmlahq_n_s, vqdmlahq_n_u])\n+;;\n+(define_insn \"mve_vqdmlahq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VQDMLAHQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmlah.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqnegq_m_s])\n+;;\n+(define_insn \"mve_vqnegq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQNEGQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqnegt.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmladhq_s])\n+;;\n+(define_insn \"mve_vqrdmladhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQRDMLADHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmladh.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmladhxq_s])\n+;;\n+(define_insn \"mve_vqrdmladhxq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQRDMLADHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmladhx.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmlahq_n_s, vqrdmlahq_n_u])\n+;;\n+(define_insn \"mve_vqrdmlahq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VQRDMLAHQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmlah.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmlashq_n_s, vqrdmlashq_n_u])\n+;;\n+(define_insn \"mve_vqrdmlashq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VQRDMLASHQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmlash.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmlsdhq_s])\n+;;\n+(define_insn \"mve_vqrdmlsdhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQRDMLSDHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmlsdh.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmlsdhxq_s])\n+;;\n+(define_insn \"mve_vqrdmlsdhxq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQRDMLSDHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmlsdhx.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrshlq_m_n_s, vqrshlq_m_n_u])\n+;;\n+(define_insn \"mve_vqrshlq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHLQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshlt.<supf>%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshlq_m_r_u, vqshlq_m_r_s])\n+;;\n+(define_insn \"mve_vqshlq_m_r_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQSHLQ_M_R))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshlt.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrev64q_m_u, vrev64q_m_s])\n+;;\n+(define_insn \"mve_vrev64q_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VREV64Q_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrev64t.%#<V_sz_elem>\\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshlq_m_n_s, vrshlq_m_n_u])\n+;;\n+(define_insn \"mve_vrshlq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRSHLQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrshlt.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshlq_m_r_u, vshlq_m_r_s])\n+;;\n+(define_insn \"mve_vshlq_m_r_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSHLQ_M_R))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshlt.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vsliq_n_u, vsliq_n_s])\n+;;\n+(define_insn \"mve_vsliq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred>\" \"<MVE_constraint>\")]\n+\t VSLIQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsli.%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vsriq_n_u, vsriq_n_s])\n+;;\n+(define_insn \"mve_vsriq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_selective_upto_8\" \"Rg\")]\n+\t VSRIQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsri.%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmlsdhxq_s])\n+;;\n+(define_insn \"mve_vqdmlsdhxq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQDMLSDHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmlsdhx.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmlsdhq_s])\n+;;\n+(define_insn \"mve_vqdmlsdhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQDMLSDHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmlsdh.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmladhxq_s])\n+;;\n+(define_insn \"mve_vqdmladhxq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQDMLADHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmladhx.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmladhq_s])\n+;;\n+(define_insn \"mve_vqdmladhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VQDMLADHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmladh.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsdavaxq_s])\n+;;\n+(define_insn \"mve_vmlsdavaxq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VMLSDAVAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsdavax.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsdavaq_s])\n+;;\n+(define_insn \"mve_vmlsdavaq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VMLSDAVAQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsdava.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmladavaxq_s])\n+;;\n+(define_insn \"mve_vmladavaxq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VMLADAVAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmladavax.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "2b65e646b0574145fb39e53fddc76ac957529dee", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -43,6 +43,14 @@\n (define_predicate \"mve_imm_8\"\n   (match_test \"satisfies_constraint_Rb (op)\"))\n \n+;; True for immediates in the range of 0 to 15 for MVE.\n+(define_predicate \"mve_imm_15\"\n+  (match_test \"satisfies_constraint_Rc (op)\"))\n+\n+;; True for immediates in the range of 0 to 31 for MVE.\n+(define_predicate \"mve_imm_31\"\n+  (match_test \"satisfies_constraint_Re (op)\"))\n+\n ;; True for immediates in the range of 1 to 32 for MVE.\n (define_predicate \"mve_imm_32\"\n   (match_test \"satisfies_constraint_Rf (op)\"))"}, {"sha": "6cae249eee8bf385b55d96843748d84e06c672ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -1,3 +1,265 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabsq_m_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_n_u8.c: Likewise.\n+\n 2020-03-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94047"}, {"sha": "4c07ad253f0ae8dd04a185817f0a6faa721954c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0566786a857691b060e099be774a6104beba6a59", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f16bf7e8e47d73c459617325064b9a52f7e7d217", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vabsq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6799c80ecc357609678c2ff3dd0ebb0d3520c542", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s16\"  }  } */"}, {"sha": "fde294286a2e204cf244097812b739afa23fae5a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s32\"  }  } */"}, {"sha": "53a6fe0c967461300f6bdeb221813742182c603d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.s8\"  }  } */"}, {"sha": "9dc39da1cc67360df8c41deddd5f87811eef177b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u16\"  }  } */"}, {"sha": "445accb57996dd1456a109e7ea1b5b14e283461b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u32\"  }  } */"}, {"sha": "774ee9f5b90e0918a644fe747fed15ee6dc17777", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvat.u8\"  }  } */"}, {"sha": "8277577971ae9bd4362501ad33a65a527a694e9d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vclsq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vclsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "88b94db536c2ec097f3db2ecdf3c3c5f1ce8ff89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vclsq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vclsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2fbc10c211e29b48047ee497d27bfee94b5292a3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vclsq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vclsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6f1acc4c2addf0c6169aa500c3d3e70f9319958e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d5f6f19c28f5dc3a5f6d695fc218c232d718a9db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "db7df73d27132e1c9f2f85ac8d6f71a4d32efec0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a59409a1aefa7d2f17d1b1dfd6d8752889536825", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "02906421d39972fc3f34e156aded87a3a1d481ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_u32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ee29433682474f97b7ae82bfb679bd39a1a796d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8682715473b115c5e1530d855e23f65e4dc6c091", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9909279dfd3b04e8d9aa937495176c12f6b67b19", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0350934e65f82d817b8dd8620783f53d9b4c1d3d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "85accf7f3112d88f7b79d08e08dc735b1f98727b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9018c7118d03b3642f10cd175ce8f44af6582d7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9f73e6f24ad1f1b74b4407565e890c85f92150b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "751b95e7379eb64ca9f699aea3e1e6414aa4404e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b26993b5d38237a16ab31fce7d5b68cf3e7f2276", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "105002b89d85da4adddec76b1863b84f4bf85f86", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "97d5cfb2b41f5b29590a129e114dcc909f3da049", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "aa99be6a604df1799d93c7a9c69ba814d0fa171a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f61acc699668eb312f8133f043c90aa3dc32e833", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c0277445444353baca70ccdcbc73e6f2c05136c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0eab804324c57adc1dec37126d9f4310d2a858e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "68300400e7cea996a4e7da89c17a108be2cdc815", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3484f3b48de97f7c483d7cd97248d870b4444379", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "efec6cf916dd63b2d75a3e99cdf3d560959b2bcc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "34942fc3e418109b883f7a57f26a842b69987918", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f755e770c8ccc6e4f09c899bd183806ab132c8ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a12de372f2fc78ded803c78019a335318f799af6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "dacc7bb0cc633f50f81c25c6b8a45ee5b6167761", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9763eea7956c47a0c95e0ed8392acb894454c530", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0fd2c6105c03567807094fb0e09fcdcc89dfaf08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "589d9c4e40e43c3a594d34b11d45ebe7a2b5aa74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "49462ea68b65dc01fdd8002cad4ae152ae81f93f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d60110017e843c5347ba51b2d71584bf474c9d1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0bf9c59a0929e290826b44a0e6bf2555e8002a52", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4f10cf6f930ac6632384754f03c47a697c718c88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "600dbc15192c25d6fd28b634ed08c09ace3c8836", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8ff848d19a4c09f516dd09000acad74c5eae279d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "428d3e54ef20f6ad2562a7de3a3fad19efcc7e65", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c5d5b2b0bd91a8eee1496701d3f3b0858ce7f391", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "34dba3a33ba9413a60b0aaa54ceb9d3e6f2a0041", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8bf9bfedb6e0bda62baa7b56d460586ed1e16402", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3d1a35ad957c27e5e2b6ca9902e99e57f71c865d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0c66a82e120b7eedd17e4efcb04484b2219ae8c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e5e48fbbd1b1b6830f8288ef0262779cb76d2be6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b18a1e6138ed8caccc4aca5e61a4241750ea35e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a846f43eff0d290d0318a12afde891222867e0f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2f2a8d4dec73dd8a029fc4c0a48a9bb603b6e4af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "67eb5b0a732c524578e38f790659bab827ba9340", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c0e3c3f337d257bc42c9a485cf4fbafbc5a8d6bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f90a4aba7b1b3633748cb84ae31e828f18b24898", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e199f652b1f3b1fcea6fc87b1daa42347e87004b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "833383052b4044bcca227ffffadf6fefaa249d42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ea2696fc2596640971cb547bc52e5899feb94e7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a68225915f0c3fb135c39adcf554967e679a72d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3d4ab7702d172868fe2f5ef615895eede4d93b1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "50cacad18993a8b392553798d7c36beb46d860f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpltq_n (a, b);\n+  return vcmpltq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "dc6578742d5f649625a45178a108e4e37a09b5eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpltq_n (a, b);\n+  return vcmpltq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "832fec2510a604d2b5b41c61e94ef0c12aa0aa61", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c351cb9f23523b784431962604567df74178ff21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "40e38e8b0367404872e164df3d51155a7ef3101e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a287f33660f4441c84502be6f6603fe72dc859dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cb81ec4d1cace6788173bca0cbae27b15806185a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "21ed443a47d97c192c3326cd8c3061f7eb26adea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e98c854ab23485078255a722f32bb9f11b48f450", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "240dd6320b6d1bf5b8b887adf9346c873b3981b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a941bac878f444c615d440d49c300f17ac5bd055", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "1f4bdb814d0431994398c76bf1942cdfdf9290fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "eaeb6a60591e791aa080772c5aae670a3d27cad9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4a31aa3bcd577df11b9a23e5476daec65b83056c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d24d63676f566113db020c8b645ba9c5ed343bee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d685fcf88a6194d570348fd8d6f61c5c0063fef4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "28fb04821ed86c2cadccae58b69ebc69a27ece51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e0c101ab56f5813dbf9153b389f5ad6c3efe4891", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b1f0ef51bcdce2e32bbcf819e71caf04c4d829f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_u32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "be23f15ac19a468c083ee921bbe4fecdbad62fb8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6f967e012cef4399f8dd4ac8ab34fe382fed0526", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxat.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ef2daa765d4233d5dfa8f9e480973903a7cbabd6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxat.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a6ef4f9d3d29bf65b5e7e45b50c29aa20871a0ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxat.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d4996c30ee6b7ae2abc8a7bf6711f947a19a91d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s16\"  }  } */"}, {"sha": "3d45852586d945d063106467dd83823816bb2511", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s32\"  }  } */"}, {"sha": "cc65137240d8dfc84bccf2915acf4dc3a60e6cba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxavt.s8\"  }  } */"}, {"sha": "4c1e2ceb6f9b838baf59ffe2b6db84a5e8895b5c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16_t\n+foo (int16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s16\"  }  } */\n+\n+int16_t\n+foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s16\"  }  } */"}, {"sha": "2ed9fcfab8351c892fcfdf365e9f7f1a621550e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s32\"  }  } */"}, {"sha": "25c1ef09927b3dc784c811065fb508f0aa700345", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8_t\n+foo (int8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s8\"  }  } */\n+\n+int8_t\n+foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.s8\"  }  } */"}, {"sha": "35390363811a62c7468cee3ed252eab3fe05bf26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u16\"  }  } */"}, {"sha": "464c05a5a28d033aff4912b50a076f1512abaa4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u32\"  }  } */"}, {"sha": "26c6d24a6c638a091e7502dec5571946d1efbbe5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxvt.u8\"  }  } */"}, {"sha": "8342abc67ea5c07a5fb27b5494b496e67555317c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminaq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminat.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5527d17bcd3cf9ec04c16462f970319a5038cd84", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminaq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminat.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "48d10224ff615005dcd8b0f20520896cc4ec22cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminaq_m_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminat.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e754069e8e01cc21fbacbc8c9465f7c159e6afb8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s16\"  }  } */"}, {"sha": "758547b74950f2d350a5be731d973eab5f6d7280", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s32\"  }  } */"}, {"sha": "d59b8e93d6f099f02faf6addb87248627c0bdb6d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminavq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminavt.s8\"  }  } */"}, {"sha": "872fc982a5c48d3d7eb58ab17b2d65095b726678", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16_t\n+foo (int16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s16\"  }  } */\n+\n+int16_t\n+foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s16\"  }  } */"}, {"sha": "47c6a0105837e869a4dc487ee6d87c0301a51ebd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s32\"  }  } */"}, {"sha": "a2e330718fff7279281ad4f52254972bac53b321", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8_t\n+foo (int8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s8\"  }  } */\n+\n+int8_t\n+foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.s8\"  }  } */"}, {"sha": "0100340affb70843e4321ac56b34cd6f8f50a306", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u16\"  }  } */"}, {"sha": "964455fc41e6b643ada1307e688330bb0d7ccec4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u32\"  }  } */"}, {"sha": "dfae14d8ed5848094c9a9e48f6b77c5bbc6d5cdc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminvt.u8\"  }  } */"}, {"sha": "6d7bbce6e902fe45c6070139a97f408fd7ab2495", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmladavaq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s16\"  }  } */"}, {"sha": "5c0b9e2aad1f52bae1811c9f959726321cc395b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmladavaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s32\"  }  } */"}, {"sha": "5620ba4fbd2c234e8df602716083d2a02ae283a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmladavaq_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.s8\"  }  } */"}, {"sha": "34e01291b9c04642bf7b308efea5c62465ebf42a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vmladavaq_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u16\"  }  } */"}, {"sha": "55185651a618d97a966323d31d84231e96a6fc16", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vmladavaq_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u32\"  }  } */"}, {"sha": "1d5af5e9d463ded6acbdfa0973922ae5945387d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b, uint8x16_t c)\n+{\n+  return vmladavaq_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b, uint8x16_t c)\n+{\n+  return vmladavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladava.u8\"  }  } */"}, {"sha": "e74b07e83023bd1d4fe99437be1420c58e60a534", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmladavaxq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmladavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s16\"  }  } */"}, {"sha": "5bf679da86bd670000111b9bf63c692dd07793c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmladavaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmladavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s32\"  }  } */"}, {"sha": "67dd10be02716e327d94a79a7ee50a61ee255ab8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmladavaxq_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmladavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavax.s8\"  }  } */"}, {"sha": "20638fef671fc3fd716aa5e16f2b17bbc68b1a99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s16\"  }  } */"}, {"sha": "be640188e5bfc1b86f93b6b131ed77d40b23e426", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s32\"  }  } */"}, {"sha": "20cbcdfab32b166c2be9e39898d5a474d2b8ccec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.s8\"  }  } */"}, {"sha": "9573d2705e64ee8d3b4e778ba6435fd1d99eb739", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u16\"  }  } */"}, {"sha": "52d5adb81cb88355584c95aab5545125d01ec4ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u32\"  }  } */"}, {"sha": "d51d02b4a8d6f0babd45977aef038de9bfbf2e7a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_p_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavt.u8\"  }  } */"}, {"sha": "2a86612d2bf65ade3b8395bda7cbe2045bdbc1f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s16\"  }  } */"}, {"sha": "7f2811320d16dc1de80e6f0e2fccc2339249ef96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s32\"  }  } */"}, {"sha": "2765be8a819814458c61ee8e54753df350e5560a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmladavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavxt.s8\"  }  } */"}, {"sha": "e14adfa94d681927faf310bf50b10accff597352", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vmlaq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s16\"  }  } */"}, {"sha": "e68fecbef369cc127d0b6e4fc8562bc5aaec9ba6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vmlaq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s32\"  }  } */"}, {"sha": "ca4446c5b14d18e7fa3bb5303188a72c64956259", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vmlaq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.s8\"  }  } */"}, {"sha": "81219f09b77a2778cf50891b68d75316f22c4aff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vmlaq_n_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u16\"  }  } */"}, {"sha": "871c7fc25648f61de6d678f10c942d30c4d1a09b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vmlaq_n_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u32\"  }  } */"}, {"sha": "bb0412f81d5bafde5a573bbfc3818f190bbb4664", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vmlaq_n_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmla.u8\"  }  } */"}, {"sha": "abe9e1dfa613faed17524a6165903d49a5c4891e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vmlasq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s16\"  }  } */"}, {"sha": "d18178c768106475a8d185378cd7d1c573443b87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vmlasq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s32\"  }  } */"}, {"sha": "a67f6242eb3f427e8b336b2f8bf771de26fd96f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vmlasq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.s8\"  }  } */"}, {"sha": "d86a35daa65b16df8add3c5863461cef78b0cf21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vmlasq_n_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u16\"  }  } */"}, {"sha": "bd9280d41ce7ef1e7faadc2b1d50c7e5d05cb269", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vmlasq_n_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u32\"  }  } */"}, {"sha": "22d6344f825a588f1fda17721dd0144830a828a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vmlasq_n_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vmlasq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlas.u8\"  }  } */"}, {"sha": "2e1ba824c6fef5ffb9b274fdc55cbacfecac6a05", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsdavaq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsdavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s16\"  }  } */"}, {"sha": "0a4a4cdc0c8d7f75aab8bc8d640fe6b3e80669c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsdavaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsdavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s32\"  }  } */"}, {"sha": "3151a59ba669bc0bc833890662e8200208e399c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmlsdavaq_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmlsdavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdava.s8\"  }  } */"}, {"sha": "fcd0f39176d868c180a0e5436b5a54195d404fbe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsdavaxq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsdavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s16\"  }  } */"}, {"sha": "36b5c5494002d5e24ce1e5f71678520c3ef557bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsdavaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsdavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s32\"  }  } */"}, {"sha": "7170a57fe32ecce096e086c9d72f9dc0517606e3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmlsdavaxq_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vmlsdavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavax.s8\"  }  } */"}, {"sha": "41cc553612e794349f3c0d7f2890a4aef394aae9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s16\"  }  } */"}, {"sha": "b74d60282bc96cc4c37e039d022ac755e62c428b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s32\"  }  } */"}, {"sha": "5457e2cba39fa4cb7cf442fd575f5cee69ba1119", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmlsdavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavt.s8\"  }  } */"}, {"sha": "cb900bb161fb817b7173774383f08ce0e3584705", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s16\"  }  } */"}, {"sha": "682d62ac104feb821801c9cd47f050e93373c3ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s32\"  }  } */"}, {"sha": "96b81d79e70b7a44751c480f980c6a55dba4bae0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_p_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmlsdavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavxt.s8\"  }  } */"}, {"sha": "24317ba822efdcc60138e22ac4240000afcb6049", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ac6caa1302f3682e62f92dcea11abb0b9aeadd9f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "95be493ef758a7e5a1241558b5ad8e5887b3e222", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6d85ba9c3c9ce76c27fa03aecf96ee1e8c82eed9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e08d1fcb203f6fced0351fa8250eb840b97d9abf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_u32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "73edc54e7c9fc1ef49cbfecba7859540646f7daa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "32261610185c9d136c1d92d8dff285ec96e0631e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "1c54ff7fb6d77e09ea2ced4f8b71111cad426574", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2e828b18cfe0e843576da9d8d8a2a3ff6d869e91", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vnegq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "379972a2deced551059a900366f336518764645f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "8b79e311826e5f1884e3ecb20488a52eb6db10d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "daf67f5bae181bb632344209cb67833b71e2c7be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s64.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t a, int64x2_t b, mve_pred16_t p)\n+{\n+  return vpselq_s64 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t a, int64x2_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "def4758fc757965e3724fee5e22e190b6f8f8f59", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vpselq_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "c559afd7a66bd1d7cb7af3c936f8e543c3605499", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "ac7c11a2081cc292e75f5e71535518430ac41130", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "09303ac9da4c9ad8b02ebf5ff6931d38f38024c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u64.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t a, uint64x2_t b, mve_pred16_t p)\n+{\n+  return vpselq_u64 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64x2_t a, uint64x2_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "a592d15aa572601ea162a3c1d6bdcca796455a20", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vpselq_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "2047818c086240c441056821fb2c9febd2ff27a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqabst.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "95af4623d9ec6bef52d63ed1b42fd5d3725358b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqabst.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cde5328aaf23c6ab9e9550da197e2ba43f8a5e36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqabst.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fa5bcc48ba2936dd330d10d1817a729e1094d83b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmladhq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s16\"  }  } */"}, {"sha": "ba37ad534220944871984c49df93f2a222cc4716", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmladhq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s32\"  }  } */"}, {"sha": "32d2eb860445884eb01efc85d1fba6a300c0c625", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmladhq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladh.s8\"  }  } */"}, {"sha": "ff95d20c61954e08dcea08c15f7754866ea85402", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmladhxq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s16\"  }  } */"}, {"sha": "d8f08ee96eefb38640170a571ea7f2aaa7e5d906", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmladhxq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s32\"  }  } */"}, {"sha": "6ffbfb05346475ac41cb6029fa779e8ea1f48f8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmladhxq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmladhx.s8\"  }  } */"}, {"sha": "7b90c71cba88df7e3edbc303f4655358e25f931c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqdmlahq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */"}, {"sha": "6c2e487e1d62ff467c4561e6cda86b862800d1f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqdmlahq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */"}, {"sha": "7a62762e8835e61361056b0fe95e0207f34c0321", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqdmlahq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */"}, {"sha": "926a2fb176305d97d1cdec71df0993662cf70e8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqdmlahq_n_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s16\"  }  } */"}, {"sha": "9f59e5487b8bb11cd9d3301aff828e4f13c1768b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqdmlahq_n_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s32\"  }  } */"}, {"sha": "9a578fadb823302861282bedab29155a4168aaf1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqdmlahq_n_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlah.s8\"  }  } */"}, {"sha": "3084c6ea699498d4c3ca101f99db9ed75a58454d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmlsdhq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s16\"  }  } */"}, {"sha": "243b545c08941467aaa4b750b03dd08effad614c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmlsdhq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s32\"  }  } */"}, {"sha": "6b31a59306237355b8cbf8b641c371b3b12e63c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmlsdhq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdh.s8\"  }  } */"}, {"sha": "99efed1ed9b04dd07275e69e79b25217226506f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmlsdhxq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s16\"  }  } */"}, {"sha": "e654b64943a6554cb251255e9b73dadd2cc3df1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmlsdhxq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s32\"  }  } */"}, {"sha": "653732cd05e3d995ba74e695ca1fcf7fb1cbe9e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmlsdhxq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlsdhx.s8\"  }  } */"}, {"sha": "0faae49a1fc9b1b53fbea308b04a95a5d9fe5418", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqnegt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a4b9b9ef061c71e6216a345800cdee2066411655", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqnegt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5b6b8d8af0613a2643b2bf95fd48ff4664be9ccf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqnegt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "68814a0b2b20b2d16973a75ca0d522b3880239d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmladhq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s16\"  }  } */"}, {"sha": "b76abef0d342986d56b409bfadb24a518651eef4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmladhq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s32\"  }  } */"}, {"sha": "af692a6402d7eda081f51f342353f3cb3943de0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmladhq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmladhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladh.s8\"  }  } */"}, {"sha": "9a265012d13f21b1962443e366828dadbc934f2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmladhxq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s16\"  }  } */"}, {"sha": "7b79fd199cb0c6200d21a028328ad13866fdc560", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmladhxq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s32\"  }  } */"}, {"sha": "0e6cc19fabcebde9619095c17880210da93db647", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmladhxq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmladhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmladhx.s8\"  }  } */"}, {"sha": "bea00388f16e32a39644cb79d916b2ea0de548a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqrdmlahq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */"}, {"sha": "50878ca914209afdbe083a8fc3fc814b3a1c5dba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqrdmlahq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */"}, {"sha": "8d75b1a8d8faca25550ef0a9fcffe5c603f44148", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqrdmlahq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */"}, {"sha": "aecc0f54f8c7a4ae28dc180891bb7f6009ba13bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqrdmlahq_n_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s16\"  }  } */"}, {"sha": "bef2b3c707a1e0385f5818d105d1c6ba601d53d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqrdmlahq_n_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s32\"  }  } */"}, {"sha": "69aab303f48f5d34ff06c35c5e787208bd97c6c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqrdmlahq_n_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqrdmlahq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlah.s8\"  }  } */"}, {"sha": "b02cb583ce1ad61f611921017b0d9a1ce5858279", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqrdmlashq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */"}, {"sha": "0b2e2aab737eb3fdbfb5b80462cf28f4de3a9277", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqrdmlashq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */"}, {"sha": "fe0c7b5f95e4c2f1584fe48f13f057e33cb9548a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqrdmlashq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */"}, {"sha": "5390e4d1acc4b35a4d454b6efea701b0963d6f69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqrdmlashq_n_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s16\"  }  } */"}, {"sha": "716ead2303c9ee6556727e6de21663f63492cb99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqrdmlashq_n_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s32\"  }  } */"}, {"sha": "5ec79f9e5fdc5854331855fead2d83a9531ea089", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqrdmlashq_n_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c)\n+{\n+  return vqrdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlash.s8\"  }  } */"}, {"sha": "ca0a8d110806e650831a6ecda6cf6c277ce8dc29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmlsdhq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s16\"  }  } */"}, {"sha": "9c16270a674ef0d45171fdef3cf311e7e5e86713", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmlsdhq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s32\"  }  } */"}, {"sha": "2a0479340ee145e3b5d2620ae4c782e5a85153e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmlsdhq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmlsdhq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdh.s8\"  }  } */"}, {"sha": "c7fda4336bd19be764168e5ba2e43f3e6a3289bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmlsdhxq_s16 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s16\"  }  } */"}, {"sha": "eaa8ae8e8afdeaa04e9be16ae1fac01e3f3d29de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmlsdhxq_s32 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s32\"  }  } */"}, {"sha": "faca85e3458074f0feeb90e0452229b3e6463e1c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmlsdhxq_s8 (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmlsdhxq (inactive, a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmlsdhx.s8\"  }  } */"}, {"sha": "399d2149a97c8d10715f63805289aed7dcbe8e69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cdf08ddf8dabc9d03e5bad46f95aaa3e7f5f5288", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "82c221dd470889daf04b6832278fd4b708d6d6df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d366ebe81be7db70d2a867bda6f363e893cc6260", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "058492ae419a5041581e20fad85091fed5e18ec2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9cb660be141c0d892eda23ab57f90fe8e7bcd65e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "677e6733fdc7bb68645a5751c82d7989d42b7deb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6cc14a44149d81c93b23bedd396ce7953be59750", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0cbb8a09e56a40377bf7aae12fe9dcf3bd58b66d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "30d83028fb513f675203adedcb39e9d1e7d3b229", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "02ae638cdbf31cca94a1114e3db7a3bb1f6dd97c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "db706812d652859f744c9ab21a1b605986b65786", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_r_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_r_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fc8a6ee452610ca5c166d8aa841582f44f61e4f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8ee35c66f7e088231732e35b998bfbfe061da44e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "390652ca2df5bee56e496a5cdb1b73bc2c52e9b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "51e7859f6599853b7aa99632e3e0cc186871190b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7bcd7c805d04d99dc2b4c01002743edd33ca0e38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_u32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "96a9d2be1d27d95a8ed33efecb3607a4bcf10d81", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "348a1f84546bf3fa84b05a7398b60a25ef36ec9f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c15c1baaeefc24871738960ffbcb1543398b77ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ac9b90d7d3e897d58f0d5ee6c78f7a09c8f30824", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "72fc614a3fe12c828a94988cf73179906d48dd8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "db3db7aec0e34ad614634321d059b9a3082eb41d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "74ee42dfe14a16159b2303815cabc41f206e1e49", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c02823212c00999ece791f74aea97057c00479f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2d48bceb061ad83799c7d2d27b3a3addaca3fed7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ba8a62a1a255bd1a3b912fb1fd64f2e84b1f08a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6d16399f66c935568d09c3fdfdfb125d51b2ec13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e597dd420ee5fb06c83d3333ec8379ca9080e83f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d95a312ab16ce442d6bde0ca56c388f94b9c1cde", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_r_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_r_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_r (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "64f6c980b01e6dcc801918e87f87bdb40fd44fd6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vsliq_n_s16 (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vsliq (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.16\"  }  } */"}, {"sha": "25bc97b4227314c8a3a3f4d5efe228dc9e735e78", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vsliq_n_s32 (a, b, 31);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vsliq (a, b, 31);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.32\"  }  } */"}, {"sha": "6516b0ccc88aabfce0fbbd0d679c18de1957d0fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vsliq_n_s8 (a, b, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vsliq (a, b, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.8\"  }  } */"}, {"sha": "dc70a65702300a8a493de9bbd84373d9672e0d5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vsliq_n_u16 (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vsliq (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.16\"  }  } */"}, {"sha": "cb0d191600c318a069393160afd90e779ef6bac7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsliq_n_u32 (a, b, 31);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsliq (a, b, 31);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.32\"  }  } */"}, {"sha": "765853a923f81f79a02ce4de80aeb24b0f9a57b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vsliq_n_u8 (a, b, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vsliq (a, b, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli.8\"  }  } */"}, {"sha": "f1a80919e73fbd303461ba3225521c65ed6eb5dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vsriq_n_s16 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.16\"  }  } */"}, {"sha": "f1288340d164709167e03b1eba3df8ee33821b4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vsriq_n_s32 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.32\"  }  } */"}, {"sha": "5e51bd9663e806a4a7a4155ef07bb8b9b2fbfa38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_s8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vsriq_n_s8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.8\"  }  } */"}, {"sha": "5ce35ffedef80976e23f7f19b948f1f4b86ffcee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u16.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vsriq_n_u16 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.16\"  }  } */"}, {"sha": "861a3b753b67af3ce249c269766c7917cead8ba0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u32.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsriq_n_u32 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.32\"  }  } */"}, {"sha": "bca07881a12f55fa999ee6bc257fce22de57b37f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8165795c1555c83c0c6c68650321540f9253d461/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_n_u8.c?ref=8165795c1555c83c0c6c68650321540f9253d461", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vsriq_n_u8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vsriq (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri.8\"  }  } */"}]}