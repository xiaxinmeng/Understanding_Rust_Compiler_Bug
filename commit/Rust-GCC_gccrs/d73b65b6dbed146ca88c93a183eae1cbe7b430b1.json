{"sha": "d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczYjY1YjZkYmVkMTQ2Y2E4OGM5M2ExODNlYWUxY2JlN2I0MzBiMQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-31T18:40:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-31T18:40:55Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-05-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * trans-array.c (gfc_trans_dummy_array_bias): Handle\n        cobounds of assumed-shape arrays.\n\n2011-05-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray/dummy_1.f90: New.\n\nFrom-SVN: r174504", "tree": {"sha": "4b923cc8e159fecaef06728ba93216f4f175820c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b923cc8e159fecaef06728ba93216f4f175820c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f3761c527c003969c4f18497876c4d18b5f2305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3761c527c003969c4f18497876c4d18b5f2305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3761c527c003969c4f18497876c4d18b5f2305"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "b962ff55acc78258c439d1f5f56dac8b30682623", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "patch": "@@ -1,3 +1,9 @@\n+2011-05-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* trans-array.c (gfc_trans_dummy_array_bias): Handle\n+\tcobounds of assumed-shape arrays.\n+\n 2011-05-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "c7aeadb3c8bda3fe334d55e4357f0ba9bd638213", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "patch": "@@ -5232,6 +5232,8 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n \t}\n     }\n \n+  gfc_trans_array_cobounds (type, &init, sym);\n+\n   /* Set the offset.  */\n   if (TREE_CODE (GFC_TYPE_ARRAY_OFFSET (type)) == VAR_DECL)\n     gfc_add_modify (&init, GFC_TYPE_ARRAY_OFFSET (type), offset);"}, {"sha": "f9fae6282e4b2eef640473abddadc13fe244d556", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "patch": "@@ -1,3 +1,8 @@\n+2011-05-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray/dummy_1.f90: New.\n+\n 2011-05-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "8e4b7d7fcf1f2ade82a382bad9a4972e759c82f2", "filename": "gcc/testsuite/gfortran.dg/coarray/dummy_1.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fdummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73b65b6dbed146ca88c93a183eae1cbe7b430b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fdummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fdummy_1.f90?ref=d73b65b6dbed146ca88c93a183eae1cbe7b430b1", "patch": "@@ -0,0 +1,70 @@\n+! { dg-do run }\n+!\n+! PR fortran/18918\n+!\n+! Check whether assumed-shape's cobounds are properly handled\n+!\n+    implicit none\n+    integer :: B(1)[*]\n+    integer :: C(8:11)[-3:10,43:*]\n+    integer, allocatable :: D(:)[:,:]\n+\n+    allocate (D(20)[2:3,5:*])\n+\n+    call sub (B,5)\n+    call sub (C,3)\n+    call sub (D,3)\n+\n+    call sub2 (B, -3)\n+    call sub2 (C, 44)\n+    call sub2 (D, 44)\n+\n+    call sub3 (B)\n+    call sub3 (C)\n+    call sub3 (D)\n+\n+    call sub4 (B)\n+    call sub4 (C)\n+    call sub4 (D)\n+\n+    call sub5 (D)\n+  contains\n+\n+  subroutine sub(A,n)\n+    integer :: n\n+    integer :: A(n:)[n:2*n,3*n:*]\n+    if (lbound(A,dim=1) /= n) call abort ()\n+    if (any (lcobound(A) /= [n, 3*n])) call abort ()\n+    if (ucobound(A, dim=1) /= 2*n) call abort()\n+  end subroutine sub\n+\n+  subroutine sub2(A,n)\n+    integer :: n\n+    integer :: A(:)[-n:*]\n+    if (lbound(A,dim=1) /= 1) call abort ()\n+    if (lcobound(A, dim=1) /= -n) call abort ()\n+  end subroutine sub2\n+\n+  subroutine sub3(A)\n+    integer :: A(:)[0,*]\n+    if (lbound(A,dim=1) /= 1) call abort ()\n+    if (lcobound(A, dim=1) /= 1) call abort ()\n+    if (ucobound(A, dim=1) /= 0) call abort ()\n+    if (lcobound(A, dim=2) /= 1) call abort ()\n+  end subroutine sub3\n+\n+  subroutine sub4(A)\n+    integer :: A(:)[*]\n+    if (lbound(A,dim=1) /= 1) call abort ()\n+    if (lcobound(A, dim=1) /= 1) call abort ()\n+  end subroutine sub4\n+\n+  subroutine sub5(A)\n+    integer, allocatable :: A(:)[:,:]\n+\n+    if (lbound(A,dim=1) /= 1) call abort ()\n+    if (lcobound(A, dim=1) /= 2) call abort ()\n+    if (ucobound(A, dim=1) /= 3) call abort ()\n+    if (lcobound(A, dim=2) /= 5) call abort ()\n+  end subroutine sub5\n+  end"}]}