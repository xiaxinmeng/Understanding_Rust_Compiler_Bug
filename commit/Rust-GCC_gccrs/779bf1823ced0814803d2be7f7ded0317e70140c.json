{"sha": "779bf1823ced0814803d2be7f7ded0317e70140c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5YmYxODIzY2VkMDgxNDgwM2QyYmU3ZjdkZWQwMzE3ZTcwMTQwYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-12-10T21:26:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-10T21:30:30Z"}, "message": "Fix PR ada/98230\n\nIt's a rather curious malfunction of the 'Mod attribute applied to the\nvariable of a loop whose upper bound is dynamic.\n\ngcc/ada/ChangeLog:\n\tPR ada/98230\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case Mod): Use base\n\ttype of argument to obtain static bound and required size.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/modular6.adb: New test.", "tree": {"sha": "d391a3cc0d828f52135f79badbd91c4d6641057a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d391a3cc0d828f52135f79badbd91c4d6641057a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/779bf1823ced0814803d2be7f7ded0317e70140c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779bf1823ced0814803d2be7f7ded0317e70140c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779bf1823ced0814803d2be7f7ded0317e70140c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779bf1823ced0814803d2be7f7ded0317e70140c/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cf63c94df4712569e0ab996155013a3a043bed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf63c94df4712569e0ab996155013a3a043bed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf63c94df4712569e0ab996155013a3a043bed3"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "b21592c78b22c595ccfdf867e21fd7a8fddb9a7b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779bf1823ced0814803d2be7f7ded0317e70140c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779bf1823ced0814803d2be7f7ded0317e70140c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=779bf1823ced0814803d2be7f7ded0317e70140c", "patch": "@@ -4702,13 +4702,15 @@ package body Exp_Attr is\n \n       when Attribute_Mod => Mod_Case : declare\n          Arg  : constant Node_Id := Relocate_Node (First (Exprs));\n-         Hi   : constant Node_Id := Type_High_Bound (Etype (Arg));\n+         Hi   : constant Node_Id := Type_High_Bound (Base_Type (Etype (Arg)));\n          Modv : constant Uint    := Modulus (Btyp);\n \n       begin\n \n          --  This is not so simple. The issue is what type to use for the\n-         --  computation of the modular value.\n+         --  computation of the modular value. In addition we need to use\n+         --  the base type as above to retrieve a static bound for the\n+         --  comparisons that follow.\n \n          --  The easy case is when the modulus value is within the bounds\n          --  of the signed integer type of the argument. In this case we can"}, {"sha": "f0f1c80c62f2a2347d352b77be0d8a503c0864f5", "filename": "gcc/testsuite/gnat.dg/modular6.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779bf1823ced0814803d2be7f7ded0317e70140c/gcc%2Ftestsuite%2Fgnat.dg%2Fmodular6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779bf1823ced0814803d2be7f7ded0317e70140c/gcc%2Ftestsuite%2Fgnat.dg%2Fmodular6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmodular6.adb?ref=779bf1823ced0814803d2be7f7ded0317e70140c", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+procedure Modular6 is\n+   Max : Integer := 0;\n+   \n+   type Modulus is mod 3;\n+begin\n+   Max := 30;\n+   \n+   for N in 1 .. Max loop\n+      Put_Line(\"N: \" & Integer'Image(N) & \" Modulus:    \" & Integer'Image(Modulus'Modulus) & \" Mod:\" & Modulus'Image(Modulus'Mod(N)));\n+   end loop;\n+end;"}]}