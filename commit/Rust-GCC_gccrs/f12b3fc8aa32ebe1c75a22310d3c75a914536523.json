{"sha": "f12b3fc8aa32ebe1c75a22310d3c75a914536523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyYjNmYzhhYTMyZWJlMWM3NWEyMjMxMGQzYzc1YTkxNDUzNjUyMw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-09-28T12:09:07Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-09-28T12:09:07Z"}, "message": "pdp11-protos.h, [...]: Convert to ISO C90 function declarations and definitions.\n\n\t* config/pdp11/pdp11-protos.h, config/pdp11/pdp11.c,\n\tconfig/c4x/c4x-c.c, config/c4x/c4x-protos.h, config/c4x/c4x.c,\n\tconfig/c4x/c4x.h:\n\tConvert to ISO C90 function declarations and definitions.\n\nFrom-SVN: r71880", "tree": {"sha": "2d79b08b990c3fd3b3ff14ea4511d3a1600a488b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d79b08b990c3fd3b3ff14ea4511d3a1600a488b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12b3fc8aa32ebe1c75a22310d3c75a914536523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12b3fc8aa32ebe1c75a22310d3c75a914536523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12b3fc8aa32ebe1c75a22310d3c75a914536523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12b3fc8aa32ebe1c75a22310d3c75a914536523/comments", "author": null, "committer": null, "parents": [{"sha": "753aaa17f32dee4f1800808c9b4d149164158a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753aaa17f32dee4f1800808c9b4d149164158a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/753aaa17f32dee4f1800808c9b4d149164158a16"}], "stats": {"total": 1029, "additions": 372, "deletions": 657}, "files": [{"sha": "064679ba6082ff5232ea2d0a045d05f0b6e9b6a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -1,3 +1,10 @@\n+2003-09-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/pdp11/pdp11-protos.h, config/pdp11/pdp11.c,\n+\tconfig/c4x/c4x-c.c, config/c4x/c4x-protos.h, config/c4x/c4x.c,\n+\tconfig/c4x/c4x.h:\n+\tConvert to ISO C90 function declarations and definitions.\n+\n 2003-09-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t*  config/stormy16/stormy16.c, config/stormy16/stormy16-protos.h:"}, {"sha": "780a12b380faa226afced85ffd4f7fb32edf8bf3", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"tm_p.h\"\n \n-static int c4x_parse_pragma PARAMS ((const char *, tree *, tree *));\n+static int c4x_parse_pragma (const char *, tree *, tree *);\n \n /* Handle machine specific pragmas for compatibility with existing\n    compilers for the C3x/C4x."}, {"sha": "36bf96164c18803bc461dee651aa1323a6cb0e70", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 119, "deletions": 127, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  TMS320C[34]x\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2003\n    Free Software Foundation, Inc.\n \n    Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n@@ -25,244 +25,236 @@\n #ifndef GCC_C4X_PROTOS_H\n #define GCC_C4X_PROTOS_H\n \n-extern void c4x_override_options PARAMS ((void));\n+extern void c4x_override_options (void);\n \n-extern void c4x_optimization_options PARAMS ((int, int));\n+extern void c4x_optimization_options (int, int);\n \n-extern void c4x_output_ascii PARAMS ((FILE *, const char *, int));\n+extern void c4x_output_ascii (FILE *, const char *, int);\n \n-extern int c4x_interrupt_function_p PARAMS ((void));\n+extern int c4x_interrupt_function_p (void);\n \n-extern void c4x_expand_prologue PARAMS ((void));\n+extern void c4x_expand_prologue (void);\n \n-extern void c4x_expand_epilogue PARAMS ((void));\n+extern void c4x_expand_epilogue (void);\n \n-extern int c4x_null_epilogue_p PARAMS ((void));\n+extern int c4x_null_epilogue_p (void);\n \n extern void c4x_global_label (const char *);\n \n extern void c4x_external_ref (const char *);\n \n #ifdef TREE_CODE\n-extern void c4x_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, \n-\t\t\t\t\t      enum machine_mode, tree, int));\n+extern void c4x_function_arg_advance (CUMULATIVE_ARGS *, \n+\t\t\t\t      enum machine_mode, tree, int);\n \n-extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode, tree,\n-\t\t\t\t\t\t int));\n+extern struct rtx_def *c4x_function_arg (CUMULATIVE_ARGS *,\n+\t\t\t\t\t enum machine_mode, tree, int);\n \n #endif /* TREE_CODE */\n \n \n #if defined(RTX_CODE) && defined(TREE_CODE)\n-extern void c4x_init_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n+extern void c4x_init_cumulative_args (CUMULATIVE_ARGS *c, tree, rtx);\n \n-extern struct rtx_def *c4x_va_arg PARAMS ((tree, tree));\n+extern struct rtx_def *c4x_va_arg (tree, tree);\n \n-extern rtx c4x_expand_builtin PARAMS ((tree, rtx, rtx,\n-\t\t\t\t       enum machine_mode, int));\n+extern rtx c4x_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n \n-extern void c4x_init_builtins PARAMS ((void));\n+extern void c4x_init_builtins (void);\n \n #endif /* TREE_CODE and RTX_CODE*/\n \n \n #ifdef RTX_CODE\n-extern struct rtx_def *c4x_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+extern struct rtx_def *c4x_gen_compare_reg (enum rtx_code, rtx, rtx);\n \n-extern int c4x_check_legit_addr PARAMS ((enum machine_mode, rtx, int));\n+extern int c4x_check_legit_addr (enum machine_mode, rtx, int);\n \n-extern int c4x_hard_regno_mode_ok PARAMS ((unsigned int, enum machine_mode));\n+extern int c4x_hard_regno_mode_ok (unsigned int, enum machine_mode);\n \n-extern int c4x_hard_regno_rename_ok PARAMS ((unsigned int, unsigned int));\n+extern int c4x_hard_regno_rename_ok (unsigned int, unsigned int);\n \n-extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n-\t\t\t\t\t\t       enum machine_mode));\n+extern struct rtx_def *c4x_legitimize_address (rtx, enum machine_mode);\n \n-extern void c4x_print_operand PARAMS ((FILE *, rtx, int));\n+extern void c4x_print_operand (FILE *, rtx, int);\n \n-extern void c4x_print_operand_address PARAMS ((FILE *, rtx));\n+extern void c4x_print_operand_address (FILE *, rtx);\n \n-extern enum reg_class c4x_preferred_reload_class PARAMS ((rtx,\n-\t\t\t\t\t\t\t  enum reg_class));\n+extern enum reg_class c4x_preferred_reload_class (rtx, enum reg_class);\n \n-extern struct rtx_def *c4x_operand_subword PARAMS ((rtx, int, int,\n-\t\t\t\t\t\t   enum machine_mode));\n+extern struct rtx_def *c4x_operand_subword (rtx, int, int, enum machine_mode);\n \n-extern char *c4x_output_cbranch PARAMS ((const char *, rtx));\n+extern char *c4x_output_cbranch (const char *, rtx);\n \n-extern int c4x_label_conflict PARAMS ((rtx, rtx, rtx));\n+extern int c4x_label_conflict (rtx, rtx, rtx);\n \n-extern int c4x_address_conflict PARAMS ((rtx, rtx, int, int));\n+extern int c4x_address_conflict (rtx, rtx, int, int);\n \n-extern void c4x_rptb_insert PARAMS ((rtx insn));\n+extern void c4x_rptb_insert (rtx insn);\n \n-extern int c4x_rptb_nop_p PARAMS ((rtx));\n+extern int c4x_rptb_nop_p (rtx);\n \n-extern int c4x_rptb_rpts_p PARAMS ((rtx, rtx));\n+extern int c4x_rptb_rpts_p (rtx, rtx);\n \n-extern int c4x_check_laj_p PARAMS ((rtx));\n+extern int c4x_check_laj_p (rtx);\n \n-extern int c4x_autoinc_operand PARAMS ((rtx, enum machine_mode));\n+extern int c4x_autoinc_operand (rtx, enum machine_mode);\n \n-extern int any_operand PARAMS ((rtx, enum machine_mode));\n+extern int any_operand (rtx, enum machine_mode);\n \n-extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n+extern int fp_zero_operand (rtx, enum machine_mode);\n \n-extern int const_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_operand (rtx, enum machine_mode);\n \n-extern int stik_const_operand PARAMS ((rtx, enum machine_mode));\n+extern int stik_const_operand (rtx, enum machine_mode);\n \n-extern int not_const_operand PARAMS ((rtx, enum machine_mode));\n+extern int not_const_operand (rtx, enum machine_mode);\n \n-extern int parallel_operand PARAMS ((rtx, enum machine_mode));\n+extern int parallel_operand (rtx, enum machine_mode);\n \n-extern int reg_or_const_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_const_operand (rtx, enum machine_mode);\n \n-extern int reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_operand (rtx, enum machine_mode);\n \n-extern int mixed_subreg_operand PARAMS ((rtx, enum machine_mode));\n+extern int mixed_subreg_operand (rtx, enum machine_mode);\n \n-extern int reg_imm_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_imm_operand (rtx, enum machine_mode);\n \n-extern int r0r1_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int r0r1_reg_operand (rtx, enum machine_mode);\n \n-extern int r2r3_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int r2r3_reg_operand (rtx, enum machine_mode);\n \n-extern int ext_low_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ext_low_reg_operand (rtx, enum machine_mode);\n \n-extern int ext_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ext_reg_operand (rtx, enum machine_mode);\n \n-extern int std_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int std_reg_operand (rtx, enum machine_mode);\n \n-extern int std_or_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int std_or_reg_operand (rtx, enum machine_mode);\n \n-extern int dst_operand PARAMS ((rtx, enum machine_mode));\n+extern int dst_operand (rtx, enum machine_mode);\n \n-extern int src_operand PARAMS ((rtx, enum machine_mode));\n+extern int src_operand (rtx, enum machine_mode);\n \n-extern int src_hi_operand PARAMS ((rtx, enum machine_mode));\n+extern int src_hi_operand (rtx, enum machine_mode);\n \n-extern int lsrc_operand PARAMS ((rtx, enum machine_mode));\n+extern int lsrc_operand (rtx, enum machine_mode);\n \n-extern int tsrc_operand PARAMS ((rtx, enum machine_mode));\n+extern int tsrc_operand (rtx, enum machine_mode);\n \n-extern int nonimmediate_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonimmediate_src_operand (rtx, enum machine_mode);\n \n-extern int nonimmediate_lsrc_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonimmediate_lsrc_operand (rtx, enum machine_mode);\n \n-extern int addr_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int addr_reg_operand (rtx, enum machine_mode);\n \n-extern int index_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int index_reg_operand (rtx, enum machine_mode);\n \n-extern int dp_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int dp_reg_operand (rtx, enum machine_mode);\n \n-extern int sp_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int sp_reg_operand (rtx, enum machine_mode);\n \n-extern int rc_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int rc_reg_operand (rtx, enum machine_mode);\n \n-extern int st_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int st_reg_operand (rtx, enum machine_mode);\n \n-extern int symbolic_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_address_operand (rtx, enum machine_mode);\n \n-extern int ar0_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar0_reg_operand (rtx, enum machine_mode);\n \n-extern int ar0_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar0_mem_operand (rtx, enum machine_mode);\n \n-extern int ar1_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar1_reg_operand (rtx, enum machine_mode);\n \n-extern int ar1_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar1_mem_operand (rtx, enum machine_mode);\n \n-extern int ar2_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar2_reg_operand (rtx, enum machine_mode);\n \n-extern int ar2_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar2_mem_operand (rtx, enum machine_mode);\n \n-extern int ar3_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar3_reg_operand (rtx, enum machine_mode);\n \n-extern int ar3_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar3_mem_operand (rtx, enum machine_mode);\n \n-extern int ar4_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar4_reg_operand (rtx, enum machine_mode);\n \n-extern int ar4_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar4_mem_operand (rtx, enum machine_mode);\n \n-extern int ar5_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar5_reg_operand (rtx, enum machine_mode);\n \n-extern int ar5_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar5_mem_operand (rtx, enum machine_mode);\n \n-extern int ar6_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar6_reg_operand (rtx, enum machine_mode);\n \n-extern int ar6_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar6_mem_operand (rtx, enum machine_mode);\n \n-extern int ar7_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar7_reg_operand (rtx, enum machine_mode);\n \n-extern int ar7_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ar7_mem_operand (rtx, enum machine_mode);\n \n-extern int ir0_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ir0_reg_operand (rtx, enum machine_mode);\n \n-extern int ir0_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ir0_mem_operand (rtx, enum machine_mode);\n \n-extern int ir1_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ir1_reg_operand (rtx, enum machine_mode);\n \n-extern int ir1_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int ir1_mem_operand (rtx, enum machine_mode);\n \n-extern int group1_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int group1_reg_operand (rtx, enum machine_mode);\n \n-extern int group1_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int group1_mem_operand (rtx, enum machine_mode);\n \n-extern int arx_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int arx_reg_operand (rtx, enum machine_mode);\n \n-extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_address_operand (rtx, enum machine_mode);\n \n-extern int par_ind_operand PARAMS ((rtx, enum machine_mode));\n+extern int par_ind_operand (rtx, enum machine_mode);\n \n-extern int not_rc_reg PARAMS ((rtx, enum machine_mode));\n+extern int not_rc_reg (rtx, enum machine_mode);\n \n-extern int not_modify_reg PARAMS ((rtx, enum machine_mode));\n+extern int not_modify_reg (rtx, enum machine_mode);\n \n-extern int c4x_shiftable_constant PARAMS ((rtx));\n+extern int c4x_shiftable_constant (rtx);\n \n-extern int c4x_H_constant PARAMS ((rtx));\n+extern int c4x_H_constant (rtx);\n \n-extern int c4x_I_constant PARAMS ((rtx));\n+extern int c4x_I_constant (rtx);\n \n-extern int c4x_J_constant PARAMS ((rtx));\n+extern int c4x_J_constant (rtx);\n \n-extern int c4x_L_constant PARAMS ((rtx));\n+extern int c4x_L_constant (rtx);\n \n-extern int c4x_Q_constraint PARAMS ((rtx));\n+extern int c4x_Q_constraint (rtx);\n \n-extern int c4x_R_constraint PARAMS ((rtx));\n+extern int c4x_R_constraint (rtx);\n \n-extern int c4x_S_constraint PARAMS ((rtx));\n+extern int c4x_S_constraint (rtx);\n \n-extern int c4x_T_constraint PARAMS ((rtx));\n+extern int c4x_T_constraint (rtx);\n \n-extern int c4x_U_constraint PARAMS ((rtx));\n+extern int c4x_U_constraint (rtx);\n \n-extern void c4x_emit_libcall PARAMS ((rtx, enum rtx_code,\n-\t\t\t\t      enum machine_mode,\n-\t\t\t\t      enum machine_mode, int, rtx *));\n+extern void c4x_emit_libcall (rtx, enum rtx_code, enum machine_mode,\n+\t\t\t      enum machine_mode, int, rtx *);\n \n-extern void c4x_emit_libcall3 PARAMS ((rtx, enum rtx_code, \n-\t\t\t\t       enum machine_mode, rtx *));\n+extern void c4x_emit_libcall3 (rtx, enum rtx_code, enum machine_mode, rtx *);\n \n-extern void c4x_emit_libcall_mulhi PARAMS ((rtx, enum rtx_code,\n-\t\t\t\t\t    enum machine_mode, rtx *));\n+extern void c4x_emit_libcall_mulhi (rtx, enum rtx_code,\n+\t\t\t\t    enum machine_mode, rtx *);\n \n-extern int c4x_emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n+extern int c4x_emit_move_sequence (rtx *, enum machine_mode);\n \n-extern int legitimize_operands PARAMS ((enum rtx_code, rtx *, \n-\t\t\t\t\tenum machine_mode));\n+extern int legitimize_operands (enum rtx_code, rtx *, enum machine_mode);\n \n-extern int valid_operands PARAMS ((enum rtx_code, rtx *, enum machine_mode));\n+extern int valid_operands (enum rtx_code, rtx *, enum machine_mode);\n \n-extern int valid_parallel_load_store PARAMS ((rtx *, enum machine_mode));\n+extern int valid_parallel_load_store (rtx *, enum machine_mode);\n \n-extern int valid_parallel_operands_4 PARAMS ((rtx *, enum machine_mode));\n+extern int valid_parallel_operands_4 (rtx *, enum machine_mode);\n \n-extern int valid_parallel_operands_5 PARAMS ((rtx *, enum machine_mode));\n+extern int valid_parallel_operands_5 (rtx *, enum machine_mode);\n \n-extern int valid_parallel_operands_6 PARAMS ((rtx *, enum machine_mode));\n+extern int valid_parallel_operands_6 (rtx *, enum machine_mode);\n \n extern GTY(()) rtx smulhi3_libfunc;\n extern GTY(()) rtx umulhi3_libfunc;\n@@ -287,13 +279,13 @@ extern enum machine_mode c4x_caller_save_map[FIRST_PSEUDO_REGISTER];\n extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/40/44.  */\n \n-extern void c4x_pr_CODE_SECTION\t\tPARAMS ((struct cpp_reader *));\n-extern void c4x_pr_DATA_SECTION\t\tPARAMS ((struct cpp_reader *));\n-extern void c4x_pr_FUNC_IS_PURE\t\tPARAMS ((struct cpp_reader *));\n-extern void c4x_pr_FUNC_NEVER_RETURNS\tPARAMS ((struct cpp_reader *));\n-extern void c4x_pr_INTERRUPT\t\tPARAMS ((struct cpp_reader *));\n-extern void c4x_pr_ignored\t\tPARAMS ((struct cpp_reader *));\n-extern void c4x_init_pragma\t\tPARAMS ((int (*) (tree *)));\n+extern void c4x_pr_CODE_SECTION (struct cpp_reader *);\n+extern void c4x_pr_DATA_SECTION (struct cpp_reader *);\n+extern void c4x_pr_FUNC_IS_PURE (struct cpp_reader *);\n+extern void c4x_pr_FUNC_NEVER_RETURNS (struct cpp_reader *);\n+extern void c4x_pr_INTERRUPT (struct cpp_reader *);\n+extern void c4x_pr_ignored (struct cpp_reader *);\n+extern void c4x_init_pragma (int (*) (tree *));\n \n extern GTY(()) tree code_tree;\n extern GTY(()) tree data_tree;"}, {"sha": "2d8a8b606fc5a98e9e93c8363f832fe5915abe55", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 194, "deletions": 434, "changes": 628, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the TMS320C[34]x\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2003\n    Free Software Foundation, Inc.\n \n    Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n@@ -167,39 +167,38 @@ tree interrupt_tree = NULL_TREE;\n tree naked_tree = NULL_TREE;\n \n /* Forward declarations */\n-static int c4x_isr_reg_used_p PARAMS ((unsigned int));\n-static int c4x_leaf_function_p PARAMS ((void));\n-static int c4x_naked_function_p PARAMS ((void));\n-static int c4x_immed_float_p PARAMS ((rtx));\n-static int c4x_a_register PARAMS ((rtx));\n-static int c4x_x_register PARAMS ((rtx));\n-static int c4x_immed_int_constant PARAMS ((rtx));\n-static int c4x_immed_float_constant PARAMS ((rtx));\n-static int c4x_K_constant PARAMS ((rtx));\n-static int c4x_N_constant PARAMS ((rtx));\n-static int c4x_O_constant PARAMS ((rtx));\n-static int c4x_R_indirect PARAMS ((rtx));\n-static int c4x_S_indirect PARAMS ((rtx));\n-static void c4x_S_address_parse PARAMS ((rtx , int *, int *, int *, int *));\n-static int c4x_valid_operands PARAMS ((enum rtx_code, rtx *,\n-\t\t\t\t       enum machine_mode, int));\n-static int c4x_arn_reg_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n-static int c4x_arn_mem_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n-static void c4x_file_start PARAMS ((void));\n-static void c4x_file_end PARAMS ((void));\n-static void c4x_check_attribute PARAMS ((const char *, tree, tree, tree *));\n-static int c4x_r11_set_p PARAMS ((rtx));\n-static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n-static void c4x_reorg PARAMS ((void));\n-static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n-static tree c4x_handle_fntype_attribute PARAMS ((tree *, tree, tree, int, bool *));\n+static int c4x_isr_reg_used_p (unsigned int);\n+static int c4x_leaf_function_p (void);\n+static int c4x_naked_function_p (void);\n+static int c4x_immed_float_p (rtx);\n+static int c4x_a_register (rtx);\n+static int c4x_x_register (rtx);\n+static int c4x_immed_int_constant (rtx);\n+static int c4x_immed_float_constant (rtx);\n+static int c4x_K_constant (rtx);\n+static int c4x_N_constant (rtx);\n+static int c4x_O_constant (rtx);\n+static int c4x_R_indirect (rtx);\n+static int c4x_S_indirect (rtx);\n+static void c4x_S_address_parse (rtx , int *, int *, int *, int *);\n+static int c4x_valid_operands (enum rtx_code, rtx *, enum machine_mode, int);\n+static int c4x_arn_reg_operand (rtx, enum machine_mode, unsigned int);\n+static int c4x_arn_mem_operand (rtx, enum machine_mode, unsigned int);\n+static void c4x_file_start (void);\n+static void c4x_file_end (void);\n+static void c4x_check_attribute (const char *, tree, tree, tree *);\n+static int c4x_r11_set_p (rtx);\n+static int c4x_rptb_valid_p (rtx, rtx);\n+static void c4x_reorg (void);\n+static int c4x_label_ref_used_p (rtx, rtx);\n+static tree c4x_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n const struct attribute_spec c4x_attribute_table[];\n-static void c4x_insert_attributes PARAMS ((tree, tree *));\n-static void c4x_asm_named_section PARAMS ((const char *, unsigned int));\n-static int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n-static void c4x_globalize_label PARAMS ((FILE *, const char *));\n-static bool c4x_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int c4x_address_cost PARAMS ((rtx));\n+static void c4x_insert_attributes (tree, tree *);\n+static void c4x_asm_named_section (const char *, unsigned int);\n+static int c4x_adjust_cost (rtx, rtx, rtx, int);\n+static void c4x_globalize_label (FILE *, const char *);\n+static bool c4x_rtx_costs (rtx, int, int, int *);\n+static int c4x_address_cost (rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -249,7 +248,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n    type and sometimes adjust other TARGET_ options.  */\n \n void\n-c4x_override_options ()\n+c4x_override_options (void)\n {\n   if (c4x_rpts_cycles_string)\n     c4x_rpts_cycles = atoi (c4x_rpts_cycles_string);\n@@ -322,9 +321,8 @@ c4x_override_options ()\n /* This is called before c4x_override_options.  */\n \n void\n-c4x_optimization_options (level, size)\n-     int level ATTRIBUTE_UNUSED;\n-     int size ATTRIBUTE_UNUSED;\n+c4x_optimization_options (int level ATTRIBUTE_UNUSED,\n+\t\t\t  int size ATTRIBUTE_UNUSED)\n {\n   /* Scheduling before register allocation can screw up global\n      register allocation, especially for functions that use MPY||ADD\n@@ -339,10 +337,7 @@ c4x_optimization_options (level, size)\n #define C4X_ASCII_LIMIT 40\n \n void\n-c4x_output_ascii (stream, ptr, len)\n-     FILE *stream;\n-     const char *ptr;\n-     int len;\n+c4x_output_ascii (FILE *stream, const char *ptr, int len)\n {\n   char sbuf[C4X_ASCII_LIMIT + 1];\n   int s, l, special, first = 1, onlys;\n@@ -423,9 +418,7 @@ c4x_output_ascii (stream, ptr, len)\n \n \n int\n-c4x_hard_regno_mode_ok (regno, mode)\n-     unsigned int regno;\n-     enum machine_mode mode;\n+c4x_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n {\n   switch (mode)\n     {\n@@ -460,9 +453,7 @@ c4x_hard_regno_mode_ok (regno, mode)\n \n /* Return nonzero if REGNO1 can be renamed to REGNO2.  */\n int\n-c4x_hard_regno_rename_ok (regno1, regno2)\n-     unsigned int regno1;\n-     unsigned int regno2;\n+c4x_hard_regno_rename_ok (unsigned int regno1, unsigned int regno2)\n {\n   /* We can not copy call saved registers from mode QI into QF or from\n      mode QF into QI.  */\n@@ -522,10 +513,7 @@ static const int c4x_fp_reglist[2] = {R2_REGNO, R3_REGNO};\n    For a library call, FNTYPE is  0.  */\n \n void\n-c4x_init_cumulative_args (cum, fntype, libname)\n-     CUMULATIVE_ARGS *cum;\t/* Argument info to initialize.  */\n-     tree fntype;\t\t/* Tree ptr for function decl.  */\n-     rtx libname;\t\t/* SYMBOL_REF of library name or 0.  */\n+c4x_init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype, rtx libname)\n {\n   tree param, next_param;\n \n@@ -601,11 +589,8 @@ c4x_init_cumulative_args (cum, fntype, libname)\n    (TYPE is null for libcalls where that information may not be available.)  */\n \n void\n-c4x_function_arg_advance (cum, mode, type, named)\n-     CUMULATIVE_ARGS *cum;\t/* Current arg information.  */\n-     enum machine_mode mode;\t/* Current arg mode.  */\n-     tree type;\t\t\t/* Type of the arg or 0 if lib support.  */\n-     int named;\t\t\t/* Whether or not the argument was named.  */\n+c4x_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t  tree type, int named)\n {\n   if (TARGET_DEBUG)\n     fprintf (stderr, \"c4x_function_adv(mode=%s, named=%d)\\n\\n\",\n@@ -648,11 +633,8 @@ c4x_function_arg_advance (cum, mode, type, named)\n    (otherwise it is an extra parameter matching an ellipsis).  */\n \n struct rtx_def *\n-c4x_function_arg (cum, mode, type, named)\n-     CUMULATIVE_ARGS *cum;\t/* Current arg information.  */\n-     enum machine_mode mode;\t/* Current arg mode.  */\n-     tree type;\t\t\t/* Type of the arg or 0 if lib support.  */\n-     int named;\t\t\t/* != 0 for normal args, == 0 for ... args.  */\n+c4x_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t  tree type, int named)\n {\n   int reg = 0;\t\t\t/* Default to passing argument on stack.  */\n \n@@ -731,8 +713,7 @@ c4x_function_arg (cum, mode, type, named)\n /* C[34]x arguments grow in weird ways (downwards) that the standard\n    varargs stuff can't handle..  */\n rtx\n-c4x_va_arg (valist, type)\n-     tree valist, type;\n+c4x_va_arg (tree valist, tree type)\n {\n   tree t;\n \n@@ -745,8 +726,7 @@ c4x_va_arg (valist, type)\n \n \n static int\n-c4x_isr_reg_used_p (regno)\n-     unsigned int regno;\n+c4x_isr_reg_used_p (unsigned int regno)\n {\n   /* Don't save/restore FP or ST, we handle them separately.  */\n   if (regno == FRAME_POINTER_REGNUM\n@@ -773,7 +753,7 @@ c4x_isr_reg_used_p (regno)\n \n \n static int\n-c4x_leaf_function_p ()\n+c4x_leaf_function_p (void)\n {\n   /* A leaf function makes no calls, so we only need\n      to save/restore the registers we actually use.\n@@ -800,7 +780,7 @@ c4x_leaf_function_p ()\n \n \n static int\n-c4x_naked_function_p ()\n+c4x_naked_function_p (void)\n {\n   tree type;\n \n@@ -810,7 +790,7 @@ c4x_naked_function_p ()\n \n \n int\n-c4x_interrupt_function_p ()\n+c4x_interrupt_function_p (void)\n {\n   if (lookup_attribute (\"interrupt\",\n \t\t\tTYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n@@ -827,7 +807,7 @@ c4x_interrupt_function_p ()\n }\n \n void\n-c4x_expand_prologue ()\n+c4x_expand_prologue (void)\n {\n   unsigned int regno;\n   int size = get_frame_size ();\n@@ -1017,7 +997,7 @@ c4x_expand_prologue ()\n \n \n void\n-c4x_expand_epilogue()\n+c4x_expand_epilogue(void)\n {\n   int regno;\n   int jump = 0;\n@@ -1216,7 +1196,7 @@ c4x_expand_epilogue()\n \n \n int\n-c4x_null_epilogue_p ()\n+c4x_null_epilogue_p (void)\n {\n   int regno;\n \n@@ -1239,9 +1219,7 @@ c4x_null_epilogue_p ()\n \n \n int\n-c4x_emit_move_sequence (operands, mode)\n-     rtx *operands;\n-     enum machine_mode mode;     \n+c4x_emit_move_sequence (rtx *operands, enum machine_mode mode)\n {\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n@@ -1388,13 +1366,9 @@ c4x_emit_move_sequence (operands, mode)\n \n \n void\n-c4x_emit_libcall (libcall, code, dmode, smode, noperands, operands)\n-     rtx libcall;\n-     enum rtx_code code;\n-     enum machine_mode dmode;\n-     enum machine_mode smode;\n-     int noperands;\n-     rtx *operands;\n+c4x_emit_libcall (rtx libcall, enum rtx_code code,\n+\t\t  enum machine_mode dmode, enum machine_mode smode,\n+\t\t  int noperands, rtx *operands)\n {\n   rtx ret;\n   rtx insns;\n@@ -1426,22 +1400,16 @@ c4x_emit_libcall (libcall, code, dmode, smode, noperands, operands)\n \n \n void\n-c4x_emit_libcall3 (libcall, code, mode, operands)\n-     rtx libcall;\n-     enum rtx_code code;\n-     enum machine_mode mode;\n-     rtx *operands;\n+c4x_emit_libcall3 (rtx libcall, enum rtx_code code,\n+\t\t   enum machine_mode mode, rtx *operands)\n {\n   c4x_emit_libcall (libcall, code, mode, mode, 3, operands);\n }\n \n \n void\n-c4x_emit_libcall_mulhi (libcall, code, mode, operands)\n-     rtx libcall;\n-     enum rtx_code code;\n-     enum machine_mode mode;\n-     rtx *operands;\n+c4x_emit_libcall_mulhi (rtx libcall, enum rtx_code code,\n+\t\t\tenum machine_mode mode, rtx *operands)\n {\n   rtx ret;\n   rtx insns;\n@@ -1463,10 +1431,7 @@ c4x_emit_libcall_mulhi (libcall, code, mode, operands)\n \n \n int\n-c4x_check_legit_addr (mode, addr, strict)\n-     enum machine_mode mode;\n-     rtx addr;\n-     int strict;\n+c4x_check_legit_addr (enum machine_mode mode, rtx addr, int strict)\n {\n   rtx base = NULL_RTX;\t\t/* Base register (AR0-AR7).  */\n   rtx indx = NULL_RTX;\t\t/* Index register (IR0,IR1).  */\n@@ -1660,9 +1625,8 @@ c4x_check_legit_addr (mode, addr, strict)\n \n \n rtx\n-c4x_legitimize_address (orig, mode)\n-     rtx orig ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+c4x_legitimize_address (rtx orig ATTRIBUTE_UNUSED,\n+\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (orig) == SYMBOL_REF\n       || GET_CODE (orig) == LABEL_REF)\n@@ -1697,8 +1661,7 @@ c4x_legitimize_address (orig, mode)\n    Unfortunately, the C4x address cost depends on other operands.  */\n \n static int \n-c4x_address_cost (addr)\n-     rtx addr;\n+c4x_address_cost (rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -1788,9 +1751,7 @@ c4x_address_cost (addr)\n \n \n rtx\n-c4x_gen_compare_reg (code, x, y)\n-     enum rtx_code code;\n-     rtx x, y;\n+c4x_gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n {\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg;\n@@ -1806,9 +1767,7 @@ c4x_gen_compare_reg (code, x, y)\n }\n \n char *\n-c4x_output_cbranch (form, seq)\n-     const char *form;\n-     rtx seq;\n+c4x_output_cbranch (const char *form, rtx seq)\n {\n   int delayed = 0;\n   int annultrue = 0;\n@@ -1850,10 +1809,7 @@ c4x_output_cbranch (form, seq)\n }\n \n void\n-c4x_print_operand (file, op, letter)\n-     FILE *file;\t\t/* File to write to.  */\n-     rtx op;\t\t\t/* Operand to print.  */\n-     int letter;\t\t/* %<letter> or 0.  */\n+c4x_print_operand (FILE *file, rtx op, int letter)\n {\n   rtx op1;\n   enum rtx_code code;\n@@ -2033,9 +1989,7 @@ c4x_print_operand (file, op, letter)\n \n \n void\n-c4x_print_operand_address (file, addr)\n-     FILE *file;\n-     rtx addr;\n+c4x_print_operand_address (FILE *file, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -2176,8 +2130,7 @@ c4x_print_operand_address (file, addr)\n    in the immediate field.  */\n \n static int\n-c4x_immed_float_p (op)\n-     rtx op;\n+c4x_immed_float_p (rtx op)\n {\n   long convval[2];\n   int exponent;\n@@ -2223,8 +2176,7 @@ c4x_immed_float_p (op)\n    !!! FIXME.  The rptb_top insn may be sucked into a SEQUENCE.  */\n \n int\n-c4x_rptb_nop_p (insn)\n-     rtx insn;\n+c4x_rptb_nop_p (rtx insn)\n {\n   rtx start_label;\n   int i;\n@@ -2282,8 +2234,7 @@ c4x_rptb_nop_p (insn)\n   pass. The C4x cpu can not handle this.  */\n \n static int\n-c4x_label_ref_used_p (x, code_label)\n-     rtx x, code_label;\n+c4x_label_ref_used_p (rtx x, rtx code_label)\n {\n   enum rtx_code code;\n   int i, j;\n@@ -2314,8 +2265,7 @@ c4x_label_ref_used_p (x, code_label)\n \n \n static int\n-c4x_rptb_valid_p (insn, start_label)\n-     rtx insn, start_label;\n+c4x_rptb_valid_p (rtx insn, rtx start_label)\n {\n   rtx end = insn;\n   rtx start;\n@@ -2375,8 +2325,7 @@ c4x_rptb_valid_p (insn, start_label)\n \n \n void\n-c4x_rptb_insert (insn)\n-     rtx insn;\n+c4x_rptb_insert (rtx insn)\n {\n   rtx end_label;\n   rtx start_label;\n@@ -2446,7 +2395,7 @@ c4x_rptb_insert (insn)\n    allocated as the loop counter.  */\n \n static void\n-c4x_reorg ()\n+c4x_reorg (void)\n {\n   rtx insn;\n \n@@ -2491,24 +2440,21 @@ c4x_reorg ()\n \n \n static int\n-c4x_a_register (op)\n-     rtx op;\n+c4x_a_register (rtx op)\n {\n   return REG_P (op) && IS_ADDR_OR_PSEUDO_REG (op);\n }\n \n \n static int\n-c4x_x_register (op)\n-     rtx op;\n+c4x_x_register (rtx op)\n {\n   return REG_P (op) && IS_INDEX_OR_PSEUDO_REG (op);\n }\n \n \n static int\n-c4x_immed_int_constant (op)\n-     rtx op;\n+c4x_immed_int_constant (rtx op)\n {\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -2520,8 +2466,7 @@ c4x_immed_int_constant (op)\n \n \n static int\n-c4x_immed_float_constant (op)\n-     rtx op;\n+c4x_immed_float_constant (rtx op)\n {\n   if (GET_CODE (op) != CONST_DOUBLE)\n     return 0;\n@@ -2535,8 +2480,7 @@ c4x_immed_float_constant (op)\n \n \n int\n-c4x_shiftable_constant (op)\n-     rtx op;\n+c4x_shiftable_constant (rtx op)\n {\n   int i;\n   int mask;\n@@ -2556,24 +2500,21 @@ c4x_shiftable_constant (op)\n \n \n int\n-c4x_H_constant (op)\n-     rtx op;\n+c4x_H_constant (rtx op)\n {\n   return c4x_immed_float_constant (op) && c4x_immed_float_p (op);\n }\n \n \n int\n-c4x_I_constant (op)\n-     rtx op;\n+c4x_I_constant (rtx op)\n {\n   return c4x_immed_int_constant (op) && IS_INT16_CONST (INTVAL (op));\n }\n \n \n int\n-c4x_J_constant (op)\n-     rtx op;\n+c4x_J_constant (rtx op)\n {\n   if (TARGET_C3X)\n     return 0;\n@@ -2582,8 +2523,7 @@ c4x_J_constant (op)\n \n \n static int\n-c4x_K_constant (op)\n-     rtx op;\n+c4x_K_constant (rtx op)\n {\n   if (TARGET_C3X || ! c4x_immed_int_constant (op))\n     return 0;\n@@ -2592,24 +2532,21 @@ c4x_K_constant (op)\n \n \n int\n-c4x_L_constant (op)\n-     rtx op;\n+c4x_L_constant (rtx op)\n {\n   return c4x_immed_int_constant (op) && IS_UINT16_CONST (INTVAL (op));\n }\n \n \n static int\n-c4x_N_constant (op)\n-     rtx op;\n+c4x_N_constant (rtx op)\n {\n   return c4x_immed_int_constant (op) && IS_NOT_UINT16_CONST (INTVAL (op));\n }\n \n \n static int\n-c4x_O_constant (op)\n-     rtx op;\n+c4x_O_constant (rtx op)\n {\n   return c4x_immed_int_constant (op) && IS_HIGH_CONST (INTVAL (op));\n }\n@@ -2625,8 +2562,7 @@ c4x_O_constant (op)\n    they are handled by the <> constraints.  */\n \n int\n-c4x_Q_constraint (op)\n-     rtx op;\n+c4x_Q_constraint (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n \n@@ -2671,8 +2607,7 @@ c4x_Q_constraint (op)\n    *ARx, *+ARx(n) for n < 32.  */\n \n int\n-c4x_R_constraint (op)\n-     rtx op;\n+c4x_R_constraint (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n \n@@ -2713,8 +2648,7 @@ c4x_R_constraint (op)\n \n \n static int\n-c4x_R_indirect (op)\n-     rtx op;\n+c4x_R_indirect (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n \n@@ -2758,8 +2692,7 @@ c4x_R_indirect (op)\n    they are handled by the <> constraints.  */\n \n int\n-c4x_S_constraint (op)\n-     rtx op;\n+c4x_S_constraint (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n   if (GET_CODE (op) != MEM)\n@@ -2818,8 +2751,7 @@ c4x_S_constraint (op)\n \n \n static int\n-c4x_S_indirect (op)\n-     rtx op;\n+c4x_S_indirect (rtx op)\n {\n   enum machine_mode mode = GET_MODE (op);\n   if (GET_CODE (op) != MEM)\n@@ -2896,8 +2828,7 @@ c4x_S_indirect (op)\n /* Direct memory operand.  */\n \n int\n-c4x_T_constraint (op)\n-     rtx op;\n+c4x_T_constraint (rtx op)\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -2926,8 +2857,7 @@ c4x_T_constraint (op)\n /* Symbolic operand.  */\n \n int\n-c4x_U_constraint (op)\n-     rtx op;\n+c4x_U_constraint (rtx op)\n {\n   /* Don't allow direct addressing to an arbitrary constant.  */\n   return GET_CODE (op) == CONST\n@@ -2937,9 +2867,7 @@ c4x_U_constraint (op)\n \n \n int\n-c4x_autoinc_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+c4x_autoinc_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) == MEM)\n     {\n@@ -2961,9 +2889,8 @@ c4x_autoinc_operand (op, mode)\n /* Match any operand.  */\n \n int\n-any_operand (op, mode)\n-     register rtx op ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+any_operand (register rtx op ATTRIBUTE_UNUSED,\n+\t     enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return 1;\n }\n@@ -2972,9 +2899,7 @@ any_operand (op, mode)\n /* Nonzero if OP is a floating point value with value 0.0.  */\n \n int\n-fp_zero_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+fp_zero_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   REAL_VALUE_TYPE r;\n \n@@ -2986,9 +2911,7 @@ fp_zero_operand (op, mode)\n \n \n int\n-const_operand (op, mode)\n-     register rtx op;\n-     register enum machine_mode mode;\n+const_operand (register rtx op, register enum machine_mode mode)\n {\n   switch (mode)\n     {\n@@ -3025,27 +2948,21 @@ const_operand (op, mode)\n \n \n int\n-stik_const_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+stik_const_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return c4x_K_constant (op);\n }\n \n \n int\n-not_const_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+not_const_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return c4x_N_constant (op);\n }\n \n \n int\n-reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == SUBREG\n       && GET_MODE (op) == QFmode)\n@@ -3055,9 +2972,7 @@ reg_operand (op, mode)\n \n \n int\n-mixed_subreg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+mixed_subreg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* Allow (subreg:HF (reg:HI)) that be generated for a union of an\n      int and a long double.  */\n@@ -3071,9 +2986,7 @@ mixed_subreg_operand (op, mode)\n \n \n int\n-reg_imm_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+reg_imm_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (REG_P (op) || CONSTANT_P (op))\n     return 1;\n@@ -3082,9 +2995,7 @@ reg_imm_operand (op, mode)\n \n \n int\n-not_modify_reg (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+not_modify_reg (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (REG_P (op) || CONSTANT_P (op))\n     return 1;\n@@ -3130,9 +3041,7 @@ not_modify_reg (op, mode)\n \n \n int\n-not_rc_reg (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+not_rc_reg (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (REG_P (op) && REGNO (op) == RC_REGNO)\n     return 0;\n@@ -3143,9 +3052,7 @@ not_rc_reg (op, mode)\n /* Extended precision register R0-R1.  */\n \n int\n-r0r1_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+r0r1_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3158,9 +3065,7 @@ r0r1_reg_operand (op, mode)\n /* Extended precision register R2-R3.  */\n \n int\n-r2r3_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+r2r3_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3173,9 +3078,7 @@ r2r3_reg_operand (op, mode)\n /* Low extended precision register R0-R7.  */\n \n int\n-ext_low_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ext_low_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3188,9 +3091,7 @@ ext_low_reg_operand (op, mode)\n /* Extended precision register.  */\n \n int\n-ext_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ext_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3205,9 +3106,7 @@ ext_reg_operand (op, mode)\n /* Standard precision register.  */\n \n int\n-std_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+std_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3219,9 +3118,7 @@ std_reg_operand (op, mode)\n /* Standard precision or normal register.  */\n \n int\n-std_or_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+std_or_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (reload_in_progress)\n     return std_reg_operand (op, mode);\n@@ -3231,9 +3128,7 @@ std_or_reg_operand (op, mode)\n /* Address register.  */\n \n int\n-addr_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+addr_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3244,9 +3139,7 @@ addr_reg_operand (op, mode)\n /* Index register.  */\n \n int\n-index_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+index_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (! reg_operand (op, mode))\n     return 0;\n@@ -3259,9 +3152,7 @@ index_reg_operand (op, mode)\n /* DP register.  */\n \n int\n-dp_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+dp_reg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return REG_P (op) && IS_DP_OR_PSEUDO_REG (op);\n }\n@@ -3270,9 +3161,7 @@ dp_reg_operand (op, mode)\n /* SP register.  */\n \n int\n-sp_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+sp_reg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return REG_P (op) && IS_SP_OR_PSEUDO_REG (op);\n }\n@@ -3281,9 +3170,7 @@ sp_reg_operand (op, mode)\n /* ST register.  */\n \n int\n-st_reg_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+st_reg_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return REG_P (op) && IS_ST_OR_PSEUDO_REG (op);\n }\n@@ -3292,18 +3179,14 @@ st_reg_operand (op, mode)\n /* RC register.  */\n \n int\n-rc_reg_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+rc_reg_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return REG_P (op) && IS_RC_OR_PSEUDO_REG (op);\n }\n \n \n int\n-call_address_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+call_address_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (REG_P (op) || symbolic_address_operand (op, mode));\n }\n@@ -3312,9 +3195,8 @@ call_address_operand (op, mode)\n /* Symbolic address operand.  */\n \n int\n-symbolic_address_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+symbolic_address_operand (register rtx op,\n+\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -3331,9 +3213,7 @@ symbolic_address_operand (op, mode)\n /* Check dst operand of a move instruction.  */\n \n int\n-dst_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+dst_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == SUBREG\n       && mixed_subreg_operand (op, mode))\n@@ -3349,9 +3229,7 @@ dst_operand (op, mode)\n /* Check src operand of two operand arithmetic instructions.  */\n \n int\n-src_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+src_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == SUBREG\n       && mixed_subreg_operand (op, mode))\n@@ -3393,9 +3271,7 @@ src_operand (op, mode)\n \n \n int\n-src_hi_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+src_hi_operand (rtx op, enum machine_mode mode)\n {\n   if (c4x_O_constant (op))\n     return 1;\n@@ -3406,9 +3282,7 @@ src_hi_operand (op, mode)\n /* Check src operand of two operand logical instructions.  */\n \n int\n-lsrc_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+lsrc_operand (rtx op, enum machine_mode mode)\n {\n   if (mode == VOIDmode)\n     mode = GET_MODE (op);\n@@ -3426,9 +3300,7 @@ lsrc_operand (op, mode)\n /* Check src operand of two operand tricky instructions.  */\n \n int\n-tsrc_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+tsrc_operand (rtx op, enum machine_mode mode)\n {\n   if (mode == VOIDmode)\n     mode = GET_MODE (op);\n@@ -3446,9 +3318,7 @@ tsrc_operand (op, mode)\n /* Check src operand of two operand non immedidate instructions.  */\n \n int\n-nonimmediate_src_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+nonimmediate_src_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE)\n     return 0;\n@@ -3460,9 +3330,7 @@ nonimmediate_src_operand (op, mode)\n /* Check logical src operand of two operand non immedidate instructions.  */\n \n int\n-nonimmediate_lsrc_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+nonimmediate_lsrc_operand (rtx op, enum machine_mode mode)\n {\n   if (GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE)\n     return 0;\n@@ -3472,9 +3340,7 @@ nonimmediate_lsrc_operand (op, mode)\n \n \n int\n-reg_or_const_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+reg_or_const_operand (rtx op, enum machine_mode mode)\n {\n   return reg_operand (op, mode) || const_operand (op, mode);\n }\n@@ -3483,9 +3349,7 @@ reg_or_const_operand (op, mode)\n /* Check for indirect operands allowable in parallel instruction.  */\n \n int\n-par_ind_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+par_ind_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -3497,21 +3361,14 @@ par_ind_operand (op, mode)\n /* Check for operands allowable in parallel instruction.  */\n \n int\n-parallel_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+parallel_operand (rtx op, enum machine_mode mode)\n {\n   return ext_low_reg_operand (op, mode) || par_ind_operand (op, mode);\n }\n \n \n static void \n-c4x_S_address_parse (op, base, incdec, index, disp)\n-     rtx op;\n-     int *base;\n-     int *incdec;\n-     int *index;\n-     int *disp;\n+c4x_S_address_parse (rtx op, int *base, int *incdec, int *index, int *disp)\n {\n   *base = 0;\n   *incdec = 0;\n@@ -3614,11 +3471,7 @@ c4x_S_address_parse (op, base, incdec, index, disp)\n \n \n int\n-c4x_address_conflict (op0, op1, store0, store1)\n-     rtx op0;\n-     rtx op1;\n-     int store0;\n-     int store1;\n+c4x_address_conflict (rtx op0, rtx op1, int store0, int store1)\n {\n   int base0;\n   int base1;\n@@ -3681,10 +3534,7 @@ c4x_address_conflict (op0, op1, store0, store1)\n /* Check for while loop inside a decrement and branch loop.  */\n \n int\n-c4x_label_conflict (insn, jump, db)\n-     rtx insn;\n-     rtx jump;\n-     rtx db;\n+c4x_label_conflict (rtx insn, rtx jump, rtx db)\n {\n   while (insn)\n     {\n@@ -3704,9 +3554,8 @@ c4x_label_conflict (insn, jump, db)\n /* Validate combination of operands for parallel load/store instructions.  */\n \n int\n-valid_parallel_load_store (operands, mode)\n-     rtx *operands;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+valid_parallel_load_store (rtx *operands,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n@@ -3760,9 +3609,8 @@ valid_parallel_load_store (operands, mode)\n \n \n int\n-valid_parallel_operands_4 (operands, mode)\n-     rtx *operands;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+valid_parallel_operands_4 (rtx *operands,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   rtx op0 = operands[0];\n   rtx op2 = operands[2];\n@@ -3785,9 +3633,8 @@ valid_parallel_operands_4 (operands, mode)\n \n \n int\n-valid_parallel_operands_5 (operands, mode)\n-     rtx *operands;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+valid_parallel_operands_5 (rtx *operands,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int regs = 0;\n   rtx op0 = operands[0];\n@@ -3826,9 +3673,8 @@ valid_parallel_operands_5 (operands, mode)\n \n \n int\n-valid_parallel_operands_6 (operands, mode)\n-     rtx *operands;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+valid_parallel_operands_6 (rtx *operands,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int regs = 0;\n   rtx op0 = operands[0];\n@@ -3882,11 +3728,9 @@ valid_parallel_operands_6 (operands, mode)\n    that the destination regno is valid if we have a 2 operand insn.  */\n \n static int\n-c4x_valid_operands (code, operands, mode, force)\n-     enum rtx_code code;\n-     rtx *operands;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     int force;\n+c4x_valid_operands (enum rtx_code code, rtx *operands,\n+\t\t    enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    int force)\n {\n   rtx op1;\n   rtx op2;\n@@ -4004,10 +3848,7 @@ c4x_valid_operands (code, operands, mode, force)\n }\n \n \n-int valid_operands (code, operands, mode)\n-     enum rtx_code code;\n-     rtx *operands;\n-     enum machine_mode mode;\n+int valid_operands (enum rtx_code code, rtx *operands, enum machine_mode mode)\n {\n \n   /* If we are not optimizing then we have to let anything go and let\n@@ -4023,10 +3864,7 @@ int valid_operands (code, operands, mode)\n \n \n int\n-legitimize_operands (code, operands, mode)\n-     enum rtx_code code;\n-     rtx *operands;\n-     enum machine_mode mode;\n+legitimize_operands (enum rtx_code code, rtx *operands, enum machine_mode mode)\n {\n   /* Compare only has 2 operands.  */\n   if (code == COMPARE)\n@@ -4114,9 +3952,7 @@ legitimize_operands (code, operands, mode)\n /* The following predicates are used for instruction scheduling.  */\n \n int\n-group1_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+group1_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4127,9 +3963,7 @@ group1_reg_operand (op, mode)\n \n \n int\n-group1_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+group1_mem_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4157,9 +3991,7 @@ group1_mem_operand (op, mode)\n /* Return true if any one of the address registers.  */\n \n int\n-arx_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+arx_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4170,10 +4002,7 @@ arx_reg_operand (op, mode)\n \n \n static int\n-c4x_arn_reg_operand (op, mode, regno)\n-     rtx op;\n-     enum machine_mode mode;\n-     unsigned int regno;\n+c4x_arn_reg_operand (rtx op, enum machine_mode mode, unsigned int regno)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4184,10 +4013,7 @@ c4x_arn_reg_operand (op, mode, regno)\n \n \n static int\n-c4x_arn_mem_operand (op, mode, regno)\n-     rtx op;\n-     enum machine_mode mode;\n-     unsigned int regno;\n+c4x_arn_mem_operand (rtx op, enum machine_mode mode, unsigned int regno)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4239,180 +4065,140 @@ c4x_arn_mem_operand (op, mode, regno)\n \n \n int\n-ar0_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar0_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR0_REGNO);\n }\n \n \n int\n-ar0_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar0_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR0_REGNO);\n }\n \n \n int\n-ar1_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar1_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR1_REGNO);\n }\n \n \n int\n-ar1_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar1_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR1_REGNO);\n }\n \n \n int\n-ar2_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar2_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR2_REGNO);\n }\n \n \n int\n-ar2_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar2_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR2_REGNO);\n }\n \n \n int\n-ar3_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar3_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR3_REGNO);\n }\n \n \n int\n-ar3_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar3_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR3_REGNO);\n }\n \n \n int\n-ar4_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar4_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR4_REGNO);\n }\n \n \n int\n-ar4_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar4_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR4_REGNO);\n }\n \n \n int\n-ar5_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar5_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR5_REGNO);\n }\n \n \n int\n-ar5_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar5_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR5_REGNO);\n }\n \n \n int\n-ar6_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar6_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR6_REGNO);\n }\n \n \n int\n-ar6_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar6_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR6_REGNO);\n }\n \n \n int\n-ar7_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar7_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, AR7_REGNO);\n }\n \n \n int\n-ar7_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ar7_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, AR7_REGNO);\n }\n \n \n int\n-ir0_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ir0_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, IR0_REGNO);\n }\n \n \n int\n-ir0_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ir0_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, IR0_REGNO);\n }\n \n \n int\n-ir1_reg_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ir1_reg_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_reg_operand (op, mode, IR1_REGNO);\n }\n \n \n int\n-ir1_mem_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+ir1_mem_operand (rtx op, enum machine_mode mode)\n {\n   return c4x_arn_mem_operand (op, mode, IR1_REGNO);\n }\n@@ -4422,11 +4208,8 @@ ir1_mem_operand (op, mode)\n    addressing.  */\n \n rtx\n-c4x_operand_subword (op, i, validate_address, mode)\n-     rtx op;\n-     int i;\n-     int validate_address;\n-     enum machine_mode mode;\n+c4x_operand_subword (rtx op, int i, int validate_address,\n+\t\t     enum machine_mode  mode)\n {\n   if (mode != HImode && mode != HFmode)\n     fatal_insn (\"c4x_operand_subword: invalid mode\", op);\n@@ -4499,8 +4282,7 @@ static struct name_list *extern_head;\n    present on external list.  */\n \n void\n-c4x_global_label (name)\n-     const char *name;\n+c4x_global_label (const char *name)\n {\n   struct name_list *p, *last;\n \n@@ -4540,8 +4322,7 @@ c4x_global_label (name)\n /* Add NAME to list of external symbols.  */\n \n void\n-c4x_external_ref (name)\n-     const char *name;\n+c4x_external_ref (const char *name)\n {\n   struct name_list *p;\n \n@@ -4573,7 +4354,7 @@ c4x_external_ref (name)\n    This is only required for ISRs if we are paranoid that someone\n    may have quietly changed this register on the sly.  */\n static void\n-c4x_file_start ()\n+c4x_file_start (void)\n {\n   int dspversion = 0;\n   if (TARGET_C30) dspversion = 30;\n@@ -4590,7 +4371,7 @@ c4x_file_start ()\n \n \n static void\n-c4x_file_end ()\n+c4x_file_end (void)\n {\n   struct name_list *p;\n   \n@@ -4608,9 +4389,7 @@ c4x_file_end ()\n \n \n static void\n-c4x_check_attribute (attrib, list, decl, attributes)\n-     const char *attrib;\n-     tree list, decl, *attributes;\n+c4x_check_attribute (const char *attrib, tree list, tree decl, tree *attributes)\n {\n   while (list != NULL_TREE\n          && IDENTIFIER_POINTER (TREE_PURPOSE (list))\n@@ -4623,8 +4402,7 @@ c4x_check_attribute (attrib, list, decl, attributes)\n \n \n static void\n-c4x_insert_attributes (decl, attributes)\n-     tree decl, *attributes;\n+c4x_insert_attributes (tree decl, tree *attributes)\n {\n   switch (TREE_CODE (decl))\n     {\n@@ -4658,12 +4436,10 @@ const struct attribute_spec c4x_attribute_table[] =\n /* Handle an attribute requiring a FUNCTION_TYPE;\n    arguments as in struct attribute_spec.handler.  */\n static tree\n-c4x_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n-     tree *node;\n-     tree name;\n-     tree args ATTRIBUTE_UNUSED;\n-     int flags ATTRIBUTE_UNUSED;\n-     bool *no_add_attrs;\n+c4x_handle_fntype_attribute (tree *node, tree name,\n+\t\t\t     tree args ATTRIBUTE_UNUSED,\n+\t\t\t     int flags ATTRIBUTE_UNUSED,\n+\t\t\t     bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n@@ -4679,8 +4455,7 @@ c4x_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n /* !!! FIXME to emit RPTS correctly.  */\n \n int\n-c4x_rptb_rpts_p (insn, op)\n-     rtx insn, op;\n+c4x_rptb_rpts_p (rtx insn, rtx op)\n {\n   /* The next insn should be our label marking where the\n      repeat block starts.  */\n@@ -4724,8 +4499,7 @@ c4x_rptb_rpts_p (insn, op)\n /* Check if register r11 is used as the destination of an insn.  */\n \n static int\n-c4x_r11_set_p(x)\n-    rtx x;\n+c4x_r11_set_p(rtx x)\n {\n   rtx set;\n   int i, j;\n@@ -4764,8 +4538,7 @@ c4x_r11_set_p(x)\n    sets the r11 register.  Check for this situation.  */\n \n int\n-c4x_check_laj_p (insn)\n-     rtx insn;\n+c4x_check_laj_p (rtx insn)\n {\n   insn = prev_nonnote_insn (insn);\n \n@@ -4799,11 +4572,7 @@ c4x_check_laj_p (insn)\n #define\tREAD_USE_COST\t2\n \n static int\n-c4x_adjust_cost (insn, link, dep_insn, cost)\n-     rtx insn;\n-     rtx link;\n-     rtx dep_insn;\n-     int cost;\n+c4x_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n {\n   /* Don't worry about this until we know what registers have been\n      assigned.  */\n@@ -4936,7 +4705,7 @@ c4x_adjust_cost (insn, link, dep_insn, cost)\n }\n \n void\n-c4x_init_builtins ()\n+c4x_init_builtins (void)\n {\n   tree endlink = void_list_node;\n \n@@ -4980,12 +4749,10 @@ c4x_init_builtins ()\n \n \n rtx\n-c4x_expand_builtin (exp, target, subtarget, mode, ignore)\n-     tree exp;\n-     rtx target;\n-     rtx subtarget ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     int ignore ATTRIBUTE_UNUSED;\n+c4x_expand_builtin (tree exp, rtx target,\n+\t\t    rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t    enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n@@ -5072,17 +4839,13 @@ c4x_expand_builtin (exp, target, subtarget, mode, ignore)\n }\n \n static void\n-c4x_asm_named_section (name, flags)\n-     const char *name;\n-     unsigned int flags ATTRIBUTE_UNUSED;\n+c4x_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n {\n   fprintf (asm_out_file, \"\\t.sect\\t\\\"%s\\\"\\n\", name);\n }\n \n static void\n-c4x_globalize_label (stream, name)\n-     FILE *stream;\n-     const char *name;\n+c4x_globalize_label (FILE *stream, const char *name)\n {\n   default_globalize_label (stream, name);\n   c4x_global_label (name);\n@@ -5098,10 +4861,7 @@ c4x_globalize_label (stream, name)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-c4x_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code, outer_code;\n-     int *total;\n+c4x_rtx_costs (rtx x, int code, int outer_code, int *total)\n {\n   HOST_WIDE_INT val;\n "}, {"sha": "5a59740e5db1e942e81bd77e030b8f7896de99f9", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -1519,9 +1519,9 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n #define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n-extern void init_section PARAMS ((void));\t\t\t\\\n+extern void init_section (void);\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n-init_section ()\t\t\t\t\t\t\t\\\n+init_section (void)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_init)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "2aebab01dc5533bce778ff5285eb9303ce756334", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GCC.\n@@ -21,23 +21,23 @@ Boston, MA 02111-1307, USA.  */\n \n /* declarations */\n #ifdef RTX_CODE\n-extern int arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_immediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int expand_shift_operand PARAMS ((rtx, enum machine_mode));\n-extern int immediate15_operand PARAMS ((rtx, enum machine_mode));\n-extern int simple_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int comp_operator PARAMS ((rtx, enum machine_mode));\n+extern int arith_operand (rtx, enum machine_mode);\n+extern int const_immediate_operand (rtx, enum machine_mode);\n+extern int expand_shift_operand (rtx, enum machine_mode);\n+extern int immediate15_operand (rtx, enum machine_mode);\n+extern int simple_memory_operand (rtx, enum machine_mode);\n+extern int comp_operator (rtx, enum machine_mode);\n \n-extern int legitimate_address_p PARAMS ((enum machine_mode, rtx));\n-extern void notice_update_cc_on_set PARAMS ((rtx, rtx));\n-extern void output_addr_const_pdp11 PARAMS ((FILE *, rtx));\n-extern const char *output_move_double PARAMS ((rtx *));\n-extern const char *output_move_quad PARAMS ((rtx *));\n-extern const char *output_block_move PARAMS ((rtx *));\n-extern void print_operand_address PARAMS ((FILE *, rtx));\n-extern int register_move_cost PARAMS ((enum reg_class, enum reg_class));\n-extern int comparison_operator_index PARAMS ((rtx));\n+extern int legitimate_address_p (enum machine_mode, rtx);\n+extern void notice_update_cc_on_set (rtx, rtx);\n+extern void output_addr_const_pdp11 (FILE *, rtx);\n+extern const char *output_move_double (rtx *);\n+extern const char *output_move_quad (rtx *);\n+extern const char *output_block_move (rtx *);\n+extern void print_operand_address (FILE *, rtx);\n+extern int register_move_cost (enum reg_class, enum reg_class);\n+extern int comparison_operator_index (rtx);\n #endif /* RTX_CODE */\n \n-extern void output_ascii PARAMS ((FILE *, const char *, int));\n-extern const char *output_jump PARAMS ((const char *, const char *, int));\n+extern void output_ascii (FILE *, const char *, int);\n+extern const char *output_jump (const char *, const char *, int);"}, {"sha": "02565432cda80035cf96850fbeeba1076d4e30fc", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 31, "deletions": 75, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12b3fc8aa32ebe1c75a22310d3c75a914536523/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=f12b3fc8aa32ebe1c75a22310d3c75a914536523", "patch": "@@ -54,12 +54,12 @@ int current_first_parm_offset;\n /* This is where the condition code register lives.  */\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n-static rtx find_addr_reg PARAMS ((rtx)); \n-static const char *singlemove_string PARAMS ((rtx *));\n-static bool pdp11_assemble_integer PARAMS ((rtx, unsigned int, int));\n-static void pdp11_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void pdp11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static bool pdp11_rtx_costs PARAMS ((rtx, int, int, int *));\n+static rtx find_addr_reg (rtx); \n+static const char *singlemove_string (rtx *);\n+static bool pdp11_assemble_integer (rtx, unsigned int, int);\n+static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void pdp11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static bool pdp11_rtx_costs (rtx, int, int, int *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -89,33 +89,25 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n \n int\n-arith_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+arith_operand (rtx op, enum machine_mode mode)\n {\n   return (register_operand (op, mode) || GET_CODE (op) == CONST_INT);\n }\n \n int\n-const_immediate_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+const_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT);\n }\n \n int \n-immediate15_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+immediate15_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n     return (GET_CODE (op) == CONST_INT && ((INTVAL (op) & 0x8000) == 0x0000));\n }\n \n int\n-expand_shift_operand (op, mode)\n-  rtx op;\n-  enum machine_mode mode ATTRIBUTE_UNUSED;\n+expand_shift_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n     return (GET_CODE (op) == CONST_INT \n \t    && abs (INTVAL(op)) > 1 \n@@ -134,9 +126,7 @@ expand_shift_operand (op, mode)\n #ifdef TWO_BSD\n \n static void\n-pdp11_output_function_prologue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size;\n+pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n {\t\t\t\t\t\t\t       \n   fprintf (stream, \"\\tjsr\tr5, csv\\n\");\n   if (size)\n@@ -151,9 +141,7 @@ pdp11_output_function_prologue (stream, size)\n #else  /* !TWO_BSD */\n \n static void\n-pdp11_output_function_prologue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size;\n+pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n {\t\t\t\t\t\t\t       \n     HOST_WIDE_INT fsize = ((size) + 1) & ~1;\n     int regno;\n@@ -249,9 +237,8 @@ pdp11_output_function_prologue (stream, size)\n #ifdef TWO_BSD\n \n static void\n-pdp11_output_function_epilogue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n+pdp11_output_function_epilogue (FILE *stream,\n+\t\t\t\tHOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\t\t\t\t\t\t\t\t\n   fprintf (stream, \"\\t/* SP ignored by cret? */\\n\");\n   fprintf (stream, \"\\tjmp cret\\n\");\n@@ -260,9 +247,7 @@ pdp11_output_function_epilogue (stream, size)\n #else  /* !TWO_BSD */\n \n static void\n-pdp11_output_function_epilogue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size;\n+pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n {\t\t\t\t\t\t\t\t\n     HOST_WIDE_INT fsize = ((size) + 1) & ~1;\n     int i, j, k;\n@@ -369,8 +354,7 @@ pdp11_output_function_epilogue (stream, size)\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */\n static const char *\n-singlemove_string (operands)\n-     rtx *operands;\n+singlemove_string (rtx *operands)\n {\n   if (operands[1] != const0_rtx)\n     return \"mov %1,%0\";\n@@ -383,8 +367,7 @@ singlemove_string (operands)\n    with operands OPERANDS.  */\n \n const char *\n-output_move_double (operands)\n-     rtx *operands;\n+output_move_double (rtx *operands)\n {\n   enum { REGOP, OFFSOP, MEMOP, PUSHOP, POPOP, CNSTOP, RNDOP } optype0, optype1;\n   rtx latehalf[2];\n@@ -562,8 +545,7 @@ output_move_double (operands)\n    with operands OPERANDS.  */\n \n const char *\n-output_move_quad (operands)\n-     rtx *operands;\n+output_move_quad (rtx *operands)\n {\n   enum { REGOP, OFFSOP, MEMOP, PUSHOP, POPOP, CNSTOP, RNDOP } optype0, optype1;\n   rtx latehalf[2];\n@@ -787,8 +769,7 @@ output_move_quad (operands)\n    ADDR can be effectively incremented by incrementing REG.  */\n \n static rtx\n-find_addr_reg (addr)\n-     rtx addr;\n+find_addr_reg (rtx addr)\n {\n   while (GET_CODE (addr) == PLUS)\n     {\n@@ -808,10 +789,7 @@ find_addr_reg (addr)\n \f\n /* Output an ascii string.  */\n void\n-output_ascii (file, p, size)\n-     FILE *file;\n-     const char *p;\n-     int size;\n+output_ascii (FILE *file, const char *p, int size)\n {\n   int i;\n \n@@ -835,9 +813,7 @@ output_ascii (file, p, size)\n /* --- stole from out-vax, needs changes */\n \n void\n-print_operand_address (file, addr)\n-     FILE *file;\n-     register rtx addr;\n+print_operand_address (FILE *file, register rtx addr)\n {\n   register rtx reg1, reg2, breg, ireg;\n   rtx offset;\n@@ -967,10 +943,7 @@ print_operand_address (file, addr)\n    pdp-specific version of output_addr_const.  */\n \n static bool\n-pdp11_assemble_integer (x, size, aligned_p)\n-     rtx x;\n-     unsigned int size;\n-     int aligned_p;\n+pdp11_assemble_integer (rtx x, unsigned int size, int aligned_p)\n {\n   if (aligned_p)\n     switch (size)\n@@ -1020,10 +993,7 @@ register_move_cost(c1, c2)\n }\n \n static bool\n-pdp11_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code, outer_code ATTRIBUTE_UNUSED;\n-     int *total;\n+pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n {\n   switch (code)\n     {\n@@ -1130,9 +1100,7 @@ pdp11_rtx_costs (x, code, outer_code, total)\n }\n \n const char *\n-output_jump(pos, neg, length)\n-  const char *pos, *neg;\n-  int length;\n+output_jump(const char *pos, const char *neg, int length)\n {\n     static int x = 0;\n     \n@@ -1173,9 +1141,7 @@ output_jump(pos, neg, length)\n }\n \n void\n-notice_update_cc_on_set(exp, insn)\n-  rtx exp;\n-  rtx insn ATTRIBUTE_UNUSED;\n+notice_update_cc_on_set(rtx exp, rtx insn ATTRIBUTE_UNUSED)\n {\n     if (GET_CODE (SET_DEST (exp)) == CC0)\n     { \n@@ -1245,9 +1211,7 @@ notice_update_cc_on_set(exp, insn)\n \n \n int\n-simple_memory_operand(op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+simple_memory_operand(rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n     rtx addr;\n \n@@ -1320,8 +1284,7 @@ simple_memory_operand(op, mode)\n \n  \n const char *\n-output_block_move(operands)\n-  rtx *operands;\n+output_block_move(rtx *operands)\n {\n     static int count = 0;\n     char buf[200];\n@@ -1560,8 +1523,7 @@ output_block_move(operands)\n \n /* for future use */\n int\n-comparison_operator_index(op)\n-  rtx op;\n+comparison_operator_index(rtx op)\n {\n     switch (GET_CODE(op))\n     {\n@@ -1602,18 +1564,14 @@ comparison_operator_index(op)\n \t\n /* tests whether the rtx is a comparison operator */\n int\n-comp_operator (op, mode)\n-  rtx op;\n-  enum machine_mode mode ATTRIBUTE_UNUSED;\n+comp_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n     return comparison_operator_index(op) >= 0;\n }\n \n     \n int\n-legitimate_address_p (mode, address)\n-  enum machine_mode mode;\n-  rtx address;\n+legitimate_address_p (enum machine_mode mode, rtx address)\n {\n /* #define REG_OK_STRICT */\n     GO_IF_LEGITIMATE_ADDRESS(mode, address, win);\n@@ -1632,9 +1590,7 @@ legitimate_address_p (mode, address)\n    So this copy should get called whenever needed.\n */\n void\n-output_addr_const_pdp11 (file, x)\n-     FILE *file;\n-     rtx x;\n+output_addr_const_pdp11 (FILE *file, rtx x)\n {\n   char buf[256];\n "}]}