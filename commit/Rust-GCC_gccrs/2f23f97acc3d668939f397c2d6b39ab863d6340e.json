{"sha": "2f23f97acc3d668939f397c2d6b39ab863d6340e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyM2Y5N2FjYzNkNjY4OTM5ZjM5N2MyZDZiMzlhYjg2M2Q2MzQwZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-25T03:10:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-25T03:10:42Z"}, "message": "dwarf2cfi: Reset args_size properly across abnormal edges.\n\n        * dwarf2cfi.c (maybe_record_trace_start): Add abnormal parameter.\n        Zero args_size for abnormal edges.  Adjust all callers.\n\nFrom-SVN: r176727", "tree": {"sha": "2e6c9e8714e863d676dac7095a4204b9b14a0de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6c9e8714e863d676dac7095a4204b9b14a0de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f23f97acc3d668939f397c2d6b39ab863d6340e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f23f97acc3d668939f397c2d6b39ab863d6340e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f23f97acc3d668939f397c2d6b39ab863d6340e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f23f97acc3d668939f397c2d6b39ab863d6340e/comments", "author": null, "committer": null, "parents": [{"sha": "2edb462ee46b548bf329776139299d29ad355eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2edb462ee46b548bf329776139299d29ad355eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2edb462ee46b548bf329776139299d29ad355eac"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "ab089e504b4ab5ab5a7ca178d1e995c50d31b4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f23f97acc3d668939f397c2d6b39ab863d6340e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f23f97acc3d668939f397c2d6b39ab863d6340e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f23f97acc3d668939f397c2d6b39ab863d6340e", "patch": "@@ -1,3 +1,8 @@\n+2011-07-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2cfi.c (maybe_record_trace_start): Add abnormal parameter.\n+\tZero args_size for abnormal edges.  Adjust all callers.\n+\n 2011-07-24  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/49825"}, {"sha": "fd5f680f6822fc3ce092a1c2b9de842b512f9320", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f23f97acc3d668939f397c2d6b39ab863d6340e/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f23f97acc3d668939f397c2d6b39ab863d6340e/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=2f23f97acc3d668939f397c2d6b39ab863d6340e", "patch": "@@ -2396,7 +2396,7 @@ add_cfis_to_fde (void)\n    trace from CUR_TRACE and CUR_ROW.  */\n \n static void\n-maybe_record_trace_start (rtx start, rtx origin)\n+maybe_record_trace_start (rtx start, rtx origin, bool abnormal)\n {\n   dw_trace_info *ti;\n \n@@ -2421,6 +2421,11 @@ maybe_record_trace_start (rtx start, rtx origin)\n       /* This is the first time we've encountered this trace.  Propagate\n \t state across the edge and push the trace onto the work list.  */\n       ti->beg_row = copy_cfi_row (cur_row);\n+      /* On all abnormal edges, especially EH and non-local-goto, we take\n+\t care to free the pushed arguments.  */\n+      if (abnormal)\n+\tti->beg_row->args_size = 0;\n+\n       ti->cfa_store = cur_trace->cfa_store;\n       ti->cfa_temp = cur_trace->cfa_temp;\n       ti->regs_saved_in_regs = VEC_copy (reg_saved_in_data, heap,\n@@ -2465,13 +2470,13 @@ create_trace_edges (rtx insn)\n \t  for (i = 0; i < n; ++i)\n \t    {\n \t      lab = XEXP (RTVEC_ELT (vec, i), 0);\n-\t      maybe_record_trace_start (lab, insn);\n+\t      maybe_record_trace_start (lab, insn, false);\n \t    }\n \t}\n       else if (computed_jump_p (insn))\n \t{\n \t  for (lab = forced_labels; lab; lab = XEXP (lab, 1))\n-\t    maybe_record_trace_start (XEXP (lab, 0), insn);\n+\t    maybe_record_trace_start (XEXP (lab, 0), insn, true);\n \t}\n       else if (returnjump_p (insn))\n \t;\n@@ -2481,14 +2486,14 @@ create_trace_edges (rtx insn)\n \t  for (i = 0; i < n; ++i)\n \t    {\n \t      lab = XEXP (ASM_OPERANDS_LABEL (tmp, i), 0);\n-\t      maybe_record_trace_start (lab, insn);\n+\t      maybe_record_trace_start (lab, insn, true);\n \t    }\n \t}\n       else\n \t{\n \t  lab = JUMP_LABEL (insn);\n \t  gcc_assert (lab != NULL);\n-\t  maybe_record_trace_start (lab, insn);\n+\t  maybe_record_trace_start (lab, insn, false);\n \t}\n     }\n   else if (CALL_P (insn))\n@@ -2500,15 +2505,15 @@ create_trace_edges (rtx insn)\n       /* Process non-local goto edges.  */\n       if (can_nonlocal_goto (insn))\n \tfor (lab = nonlocal_goto_handler_labels; lab; lab = XEXP (lab, 1))\n-\t  maybe_record_trace_start (XEXP (lab, 0), insn);\n+\t  maybe_record_trace_start (XEXP (lab, 0), insn, true);\n     }\n \n   /* Process EH edges.  */\n   if (CALL_P (insn) || cfun->can_throw_non_call_exceptions)\n     {\n       eh_landing_pad lp = get_eh_landing_pad_from_rtx (insn);\n       if (lp)\n-\tmaybe_record_trace_start (lp->landing_pad, insn);\n+\tmaybe_record_trace_start (lp->landing_pad, insn, true);\n     }\n }\n \n@@ -2545,7 +2550,7 @@ scan_trace (dw_trace_info *trace)\n \n \t  /* Propagate across fallthru edges.  */\n \t  if (!BARRIER_P (insn))\n-\t    maybe_record_trace_start (insn, NULL);\n+\t    maybe_record_trace_start (insn, NULL, false);\n \t  break;\n \t}\n "}]}