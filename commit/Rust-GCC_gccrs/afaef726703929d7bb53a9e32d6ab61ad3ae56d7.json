{"sha": "afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZhZWY3MjY3MDM5MjlkN2JiNTNhOWUzMmQ2YWI2MWFkM2FlNTZkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-31T02:56:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-31T02:56:34Z"}, "message": "re PR c++/3719 (Unable to retrow exception in unexpected exception handler.)\n\n        PR c++/3719\n        * libsupc++/eh_personality.cc (__cxa_call_unexpected): Copy handler\n        data out of the exception struct before calling unexpectedHandler.\n\n\t* g++.dg/eh/unexpected1.C: New.\n\nFrom-SVN: r51623", "tree": {"sha": "90cff28282aff9e481151ddefc4808ecd0a2226d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90cff28282aff9e481151ddefc4808ecd0a2226d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/comments", "author": null, "committer": null, "parents": [{"sha": "606cc0562db3ee50a1e6182fe748d092f9417b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606cc0562db3ee50a1e6182fe748d092f9417b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606cc0562db3ee50a1e6182fe748d092f9417b5a"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "26a58483044cc239720829f04f229152eface7bf", "filename": "gcc/testsuite/g++.dg/eh/unexpected1.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funexpected1.C?ref=afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "patch": "@@ -0,0 +1,46 @@\n+// PR 3719\n+// Test that an unexpected handler can rethrow to categorize.\n+// { dg-do run }\n+\n+#include <exception>\n+\n+extern \"C\" void abort ();\n+\n+struct One { };\n+struct Two { };\n+\n+static void\n+handle_unexpected ()\n+{\n+  try\n+  {\n+    throw;\n+  }\n+  catch (One &)\n+  {\n+    throw Two ();\n+  }\n+}\n+\n+static void\n+doit () throw (Two)\n+{\n+  throw One ();\n+}\n+\n+main ()\n+{\n+  std::set_unexpected (handle_unexpected);\n+\n+  try\n+  {\n+    doit ();\n+  }\n+  catch (Two &)\n+  {\n+  }\n+  catch (...)\n+  {\n+    abort ();\n+  }\n+}"}, {"sha": "948d4d5e29984651a0bff34a9f8de037ee0704b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "patch": "@@ -1,3 +1,9 @@\n+2002-03-30  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/3719\n+\t* libsupc++/eh_personality.cc (__cxa_call_unexpected): Copy handler\n+\tdata out of the exception struct before calling unexpectedHandler.\n+\n 2002-03-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* include/c_std/std_cmath.h:  To prevent problems overloading"}, {"sha": "35e93a3c473ee163806fac2dc0b0e6076d8c8ad9", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afaef726703929d7bb53a9e32d6ab61ad3ae56d7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=afaef726703929d7bb53a9e32d6ab61ad3ae56d7", "patch": "@@ -439,7 +439,18 @@ __cxa_call_unexpected (void *exc_obj_in)\n     ~end_catch_protect() { __cxa_end_catch(); }\n   } end_catch_protect_obj;\n \n+  lsda_header_info info;\n   __cxa_exception *xh = __get_exception_header_from_ue (exc_obj);\n+  const unsigned char *xh_lsda;\n+  _Unwind_Sword xh_switch_value;\n+  std::terminate_handler xh_terminate_handler;\n+\n+  // If the unexpectedHandler rethrows the exception (e.g. to categorize it),\n+  // it will clobber data about the current handler.  So copy the data out now.\n+  xh_lsda = xh->languageSpecificData;\n+  xh_switch_value = xh->handlerSwitchValue;\n+  xh_terminate_handler = xh->terminateHandler;\n+  info.ttype_base = (_Unwind_Ptr) xh->catchTemp;\n \n   try \n     { __unexpected (xh->unexpectedHandler); } \n@@ -453,24 +464,22 @@ __cxa_call_unexpected (void *exc_obj_in)\n       void *new_ptr = new_xh + 1;\n       \n       // We don't quite have enough stuff cached; re-parse the LSDA.\n-      lsda_header_info info;\n-      parse_lsda_header (0, xh->languageSpecificData, &info);\n-      info.ttype_base = (_Unwind_Ptr) xh->catchTemp;\n+      parse_lsda_header (0, xh_lsda, &info);\n       \n       // If this new exception meets the exception spec, allow it.\n       if (check_exception_spec (&info, new_xh->exceptionType,\n-\t\t\t\tnew_ptr, xh->handlerSwitchValue))\n+\t\t\t\tnew_ptr, xh_switch_value))\n \t__throw_exception_again;\n       \n       // If the exception spec allows std::bad_exception, throw that.\n       // We don't have a thrown object to compare against, but since\n       // bad_exception doesn't have virtual bases, that's OK; just pass 0.\n #ifdef __EXCEPTIONS  \n       const std::type_info &bad_exc = typeid (std::bad_exception);\n-      if (check_exception_spec (&info, &bad_exc, 0, xh->handlerSwitchValue))\n+      if (check_exception_spec (&info, &bad_exc, 0, xh_switch_value))\n \tthrow std::bad_exception();\n #endif   \n       // Otherwise, die.\n-      __terminate(xh->terminateHandler);\n+      __terminate (xh_terminate_handler);\n     }\n }"}]}