{"sha": "2b9dc906d0445906387fa231ee5081bb4f3a7abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5ZGM5MDZkMDQ0NTkwNjM4N2ZhMjMxZWU1MDgxYmI0ZjNhN2FiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-12T01:30:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-12T01:30:11Z"}, "message": "friend.c (do_friend): Pull the identifier out of declarator.\n\n\t* friend.c (do_friend): Pull the identifier out of declarator.\n\tUse cp_error and friends.\n\t* decl2.c (qualified_lookup_using_namespace): Fix call to\n\tpurpose_member.\n\t* decl.c (lookup_name_real): Don't call complete_type on a namespace.\n\t(grokvardecl): Use DECL_CLASS_SCOPE_P.\n\t(xref_basetypes): Fix call to GNU_xref_hier.\n\t* cvt.c (convert_pointer_to_real): Check for error_mark_node sooner.\n\t* class.c (warn_hidden): Fix for OVERLOAD.\n\tFrom grahams@rcp.co.uk:\n\t* cp-tree.h (DEFARG_NODE_CHECK): New macro.\n \t(DEFARG_LENGTH, DEFARG_POINTER): Use it.\n\nFrom-SVN: r21068", "tree": {"sha": "f19dba58a0e689a830924e88bdb5d136e6ba39d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19dba58a0e689a830924e88bdb5d136e6ba39d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9dc906d0445906387fa231ee5081bb4f3a7abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9dc906d0445906387fa231ee5081bb4f3a7abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9dc906d0445906387fa231ee5081bb4f3a7abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9dc906d0445906387fa231ee5081bb4f3a7abc/comments", "author": null, "committer": null, "parents": [{"sha": "555f90c5ef78860b3ebcc4ff8e8201fa4bf4fb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555f90c5ef78860b3ebcc4ff8e8201fa4bf4fb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555f90c5ef78860b3ebcc4ff8e8201fa4bf4fb6f"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "310376ddb2cbc84b46d49d79ac22d629ebd23eff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -1,3 +1,18 @@\n+1998-07-12  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* friend.c (do_friend): Pull the identifier out of declarator.\n+\tUse cp_error and friends.\n+\t* decl2.c (qualified_lookup_using_namespace): Fix call to \n+\tpurpose_member.\n+\t* decl.c (lookup_name_real): Don't call complete_type on a namespace.\n+\t(grokvardecl): Use DECL_CLASS_SCOPE_P.\n+\t(xref_basetypes): Fix call to GNU_xref_hier.\n+\t* cvt.c (convert_pointer_to_real): Check for error_mark_node sooner.\n+\t* class.c (warn_hidden): Fix for OVERLOAD.\n+\tFrom grahams@rcp.co.uk:\n+\t* cp-tree.h (DEFARG_NODE_CHECK): New macro.\n+ \t(DEFARG_LENGTH, DEFARG_POINTER): Use it.\n+\n Sun Jul 12 01:20:57 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* g++.1 (-traditional): Remove duplicated documentation."}, {"sha": "43995921ce6fb72ec5145d87ee4a91e7b4b0bb96", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -2929,12 +2929,14 @@ warn_hidden (t)\n   /* We go through each separately named virtual function.  */\n   for (i = 2; i < n_methods; ++i)\n     {\n-      tree fndecl = TREE_VEC_ELT (method_vec, i);\n+      tree fns = TREE_VEC_ELT (method_vec, i);\n+      tree fndecl;\n \n       tree base_fndecls = NULL_TREE;\n       tree binfos = BINFO_BASETYPES (TYPE_BINFO (t));\n       int i, n_baseclasses = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n \n+      fndecl = OVL_CURRENT (fns);\n       if (DECL_VINDEX (fndecl) == NULL_TREE)\n \tcontinue;\n \n@@ -2949,11 +2951,11 @@ warn_hidden (t)\n \t\t\t\t  base_fndecls);\n \t}\n \n-      if (TREE_CHAIN (fndecl)\n-\t  && DECL_NAME (TREE_CHAIN (fndecl)) == DECL_NAME (fndecl))\n-\t  fndecl = TREE_CHAIN (fndecl);\n-\telse\n-\t  fndecl = NULL_TREE;\n+      fns = OVL_NEXT (fns);\n+      if (fns)\n+\tfndecl = OVL_CURRENT (fns);\n+      else\n+\tfndecl = NULL_TREE;\n \n       /* ...then mark up all the base functions with overriders, preferring\n \t overriders to hiders.  */\n@@ -2962,9 +2964,9 @@ warn_hidden (t)\n \t  {\n \t    mark_overriders (fndecl, base_fndecls);\n \t    \n-\t    if (TREE_CHAIN (fndecl)\n-\t\t&& DECL_NAME (TREE_CHAIN (fndecl)) == DECL_NAME (fndecl))\n-\t      fndecl = TREE_CHAIN (fndecl);\n+\t    fns = OVL_NEXT (fns);\n+\t    if (fns)\n+\t      fndecl = OVL_CURRENT (fns);\n \t    else\n \t      fndecl = NULL_TREE;\n \t  }\n@@ -4856,6 +4858,10 @@ push_nested_class (type, modify)\n {\n   tree context;\n \n+  /* FIXME should handle namespaces like classes.  */\n+  if (TREE_CODE (type) == NAMESPACE_DECL)\n+    return;\n+\n   if (type == NULL_TREE || type == error_mark_node || ! IS_AGGR_TYPE (type)\n       || TREE_CODE (type) == TEMPLATE_TYPE_PARM\n       || TREE_CODE (type) == TEMPLATE_TEMPLATE_PARM)"}, {"sha": "735dc8a14700db9df36981e0033ccbc5d5271c83", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -1655,8 +1655,9 @@ extern int flag_new_for_scope;\n #define UPT_PARMS(NODE)         TREE_VALUE(TYPE_VALUES(NODE))\n \n /* An un-parsed default argument looks like an identifier.  */\n-#define DEFARG_LENGTH(NODE)\tIDENTIFIER_LENGTH(NODE)\n-#define DEFARG_POINTER(NODE)\tIDENTIFIER_POINTER(NODE)\n+#define DEFARG_NODE_CHECK(t)\tTREE_CHECK(t, DEFAULT_ARG) \n+#define DEFARG_LENGTH(NODE)\t(DEFARG_NODE_CHECK(NODE)->identifier.length)\n+#define DEFARG_POINTER(NODE)\t(DEFARG_NODE_CHECK(NODE)->identifier.pointer)\n \n #define builtin_function(NAME, TYPE, CODE, LIBNAME) \\\n   define_function (NAME, TYPE, CODE, (void (*) PROTO((tree)))pushdecl, LIBNAME)"}, {"sha": "18b7d8be482658888c433ab95baf0fa07deed399", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -554,6 +554,9 @@ convert_pointer_to_real (binfo, expr)\n   tree ptr_type;\n   tree type, rval;\n \n+  if (intype == error_mark_node)\n+    return error_mark_node;\n+\n   if (TREE_CODE (binfo) == TREE_VEC)\n     type = BINFO_TYPE (binfo);\n   else if (IS_AGGR_TYPE (binfo))\n@@ -572,9 +575,6 @@ convert_pointer_to_real (binfo, expr)\n   if (ptr_type == TYPE_MAIN_VARIANT (intype))\n     return expr;\n \n-  if (intype == error_mark_node)\n-    return error_mark_node;\n-\n   my_friendly_assert (!integer_zerop (expr), 191);\n \n   if (TREE_CODE (type) == RECORD_TYPE"}, {"sha": "40c60bd127afa70d246e7ac1f8f8ddff9ff16c67", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -4784,7 +4784,8 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t  if (TREE_CODE (type) == TYPENAME_TYPE && TREE_TYPE (type))\n \t    type = TREE_TYPE (type);\n \n-\t  type = complete_type (type);\n+\t  if (TYPE_P (type))\n+\t    type = complete_type (type);\n \n \t  if (TREE_CODE (type) == VOID_TYPE)\n \t    type = global_namespace;\n@@ -7876,8 +7877,7 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n \n   /* In class context, static means one per class,\n      public access, and static storage.  */\n-  if (DECL_FIELD_CONTEXT (decl) != NULL_TREE\n-      && IS_AGGR_TYPE (DECL_FIELD_CONTEXT (decl)))\n+  if (DECL_CLASS_SCOPE_P (decl))\n     {\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;\n@@ -11309,6 +11309,9 @@ xref_basetypes (code_type_node, name, ref, binfo)\n   SET_CLASSTYPE_MARKED (ref);\n   BINFO_BASETYPES (TYPE_BINFO (ref)) = binfos = make_tree_vec (len);\n \n+  if (TREE_CODE (name) == TYPE_DECL)\n+    name = DECL_NAME (name);\n+\n   for (i = 0; binfo; binfo = TREE_CHAIN (binfo))\n     {\n       /* The base of a derived struct is public by default.  */\n@@ -11329,10 +11332,6 @@ xref_basetypes (code_type_node, name, ref, binfo)\n       tree basetype = TREE_VALUE (binfo);\n       tree base_binfo;\n \n-      GNU_xref_hier (IDENTIFIER_POINTER (name),\n-\t\t     IDENTIFIER_POINTER (TREE_VALUE (binfo)),\n-\t\t     via_public, via_virtual, 0);\n-\n       if (basetype && TREE_CODE (basetype) == TYPE_DECL)\n \tbasetype = TREE_TYPE (basetype);\n       if (!basetype\n@@ -11345,11 +11344,16 @@ xref_basetypes (code_type_node, name, ref, binfo)\n \t\t    TREE_VALUE (binfo));\n \t  continue;\n \t}\n+\n+      GNU_xref_hier (IDENTIFIER_POINTER (name),\n+\t\t     IDENTIFIER_POINTER (TYPE_IDENTIFIER (basetype)),\n+\t\t     via_public, via_virtual, 0);\n+\n #if 1\n       /* This code replaces similar code in layout_basetypes.\n          We put the complete_type first for implicit `typename'.  */\n-      else if (TYPE_SIZE (complete_type (basetype)) == NULL_TREE\n-\t       && ! (current_template_parms && uses_template_parms (basetype)))\n+      if (TYPE_SIZE (complete_type (basetype)) == NULL_TREE\n+\t  && ! (current_template_parms && uses_template_parms (basetype)))\n \t{\n \t  cp_error (\"base class `%T' has incomplete type\", basetype);\n \t  continue;"}, {"sha": "ccf00f58485bc6eb572e311d957b3423ed2fb978", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -3995,7 +3995,7 @@ qualified_lookup_using_namespace (name, scope, result)\n \t     usings = TREE_CHAIN (usings))\n \t  /* If this was a real directive, and we have not seen it. */\n \t  if (!TREE_INDIRECT_USING (usings)\n-\t      && !purpose_member (seen, TREE_PURPOSE (usings)))\n+\t      && !purpose_member (TREE_PURPOSE (usings), seen))\n \t    todo = temp_tree_cons (TREE_PURPOSE (usings), NULL_TREE, todo);\n       if (todo)\n \t{"}, {"sha": "6a7083c7c28fd82c5ec5e2fd49e5707201005e56", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9dc906d0445906387fa231ee5081bb4f3a7abc/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=2b9dc906d0445906387fa231ee5081bb4f3a7abc", "patch": "@@ -322,6 +322,15 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n   /* Every decl that gets here is a friend of something.  */\n   DECL_FRIEND_P (decl) = 1;\n \n+  if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n+    {\n+      declarator = TREE_OPERAND (declarator, 0);\n+      if (TREE_CODE (declarator) == LOOKUP_EXPR)\n+\tdeclarator = TREE_OPERAND (declarator, 0);\n+      if (is_overloaded_fn (declarator))\n+\tdeclarator = DECL_NAME (get_first_fn (declarator));\n+    }\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     is_friend_template = processing_template_decl >\n       template_class_depth (current_class_type);\n@@ -371,9 +380,8 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \t  if (fields)\n \t    add_friends (current_class_type, declarator, ctype);\n \t  else\n-\t    error (\"method `%s' is not a member of class `%s'\",\n-\t\t   IDENTIFIER_POINTER (declarator),\n-\t\t   IDENTIFIER_POINTER (cname));\n+\t    cp_error (\"method `%D' is not a member of class `%T'\",\n+\t\t      declarator, ctype);\n \t  decl = void_type_node;\n \t}\n     }\n@@ -453,8 +461,7 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n       tree decl = lookup_name_nonclass (declarator);\n       if (decl == NULL_TREE)\n \t{\n-\t  warning (\"implicitly declaring `%s' as struct\",\n-\t\t   IDENTIFIER_POINTER (declarator));\n+\t  cp_warning (\"implicitly declaring `%T' as struct\", declarator);\n \t  decl = xref_tag (record_type_node, declarator, NULL_TREE, 1);\n \t  decl = TYPE_MAIN_DECL (decl);\n \t}\n@@ -463,9 +470,8 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \t but not if those functions are really class names.  */\n       if (TREE_CODE (decl) == TREE_LIST && TREE_TYPE (TREE_PURPOSE (decl)))\n \t{\n-\t  warning (\"`friend %s' archaic, use `friend class %s' instead\",\n-\t\t   IDENTIFIER_POINTER (declarator),\n-\t\t   IDENTIFIER_POINTER (declarator));\n+\t  cp_warning (\"`friend %T' archaic, use `friend class %T' instead\",\n+\t\t      declarator, declarator);\n \t  decl = TREE_TYPE (TREE_PURPOSE (decl));\n \t}\n "}]}