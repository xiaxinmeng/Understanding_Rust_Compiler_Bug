{"sha": "68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhOTdkMjQyY2JlYWNmNTBhODMxMjJiMGI3YWEzMmM4NmNlYmRjMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-06T21:11:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-06T21:11:47Z"}, "message": "condition_variable: New.\n\n2008-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/condition_variable: New.\n\t* include/std/mutex: New.\n\t* src/condition_variable.cc: New.\n\t* src/mutex.cc: New.\n\t* include/bits/functexcept.h: Add __throw_system_error varients.\n\t* src/functexcept.cc: Same.\n\t* config/abi/pre/gnu.ver: Add exports.\n\n\t* doc/xml/manual/using.xml: Add new includes.\n\t* doc/doxygen/user.cfg.in: Doxygen support.\n\t* doc/doxygen/doxygroups.cc: Same.\n\n\t* include/Makefile.am: Add mutex, condition_variable.\n\t* include/Makefile.in: Regenerated.\n\t* src/Makefile.am: Add mutex.cc, condition_variable.cc.\n\t* src/Makefile.in: Regenerated.\n\n\t* testsuite/30_threads: New.\n\t* testsuite/30_threads/lock_error: New.\n\t* testsuite/30_threads/mutex: New.\n\t* testsuite/30_threads/mutex/dest: New.\n\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: New.\n\t* testsuite/30_threads/mutex/native_handle: New.\n\t* testsuite/30_threads/mutex/native_handle/1.cc: New.\n\t* testsuite/30_threads/mutex/cons: New.\n\t* testsuite/30_threads/mutex/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/mutex/cons/1.cc: New.\n\t* testsuite/30_threads/mutex/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/mutex/requirements: New.\n\t* testsuite/30_threads/mutex/requirements/typedefs.cc: New.\n\t* testsuite/30_threads/mutex/try_lock: New.\n\t* testsuite/30_threads/mutex/try_lock/1.cc: New.\n\t* testsuite/30_threads/mutex/try_lock/2.cc: New.\n\t* testsuite/30_threads/mutex/lock: New.\n\t* testsuite/30_threads/mutex/lock/1.cc: New.\n\t* testsuite/30_threads/mutex/unlock: New.\n\t* testsuite/30_threads/mutex/unlock/1.cc: New.\n\t* testsuite/30_threads/recursive_mutex: New.\n\t* testsuite/30_threads/recursive_mutex/dest: New.\n\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc: New.\n\t* testsuite/30_threads/recursive_mutex/native_handle: New.\n\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: New.\n\t* testsuite/30_threads/recursive_mutex/cons: New.\n\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/recursive_mutex/cons/1.cc: New.\n\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/recursive_mutex/requirements: New.\n\t* testsuite/30_threads/recursive_mutex/requirements/typedefs.cc: New.\n\t* testsuite/30_threads/lock_guard: New.\n\t* testsuite/30_threads/lock_guard/requirements: New.\n\t* testsuite/30_threads/lock_guard/requirements/typedefs.cc: New.\n\t* testsuite/30_threads/lock_guard/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/30_threads/headers: New.\n\t* testsuite/30_threads/headers/mutex: New.\n\t* testsuite/30_threads/headers/mutex/types_std_c++0x.cc: New.\n\t* testsuite/30_threads/headers/mutex/std_c++0x_neg.cc: New.\n\t* testsuite/30_threads/headers/condition_variable: New.\n\t* testsuite/30_threads/headers/condition_variable/\n\ttypes_std_c++0x.cc: New.\n\t* testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc: New.\n\t* testsuite/30_threads/once_flag: New.\n\t* testsuite/30_threads/unique_lock: New.\n\t* testsuite/30_threads/unique_lock/requirements: New.\n\t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: New.\n\t* testsuite/30_threads/unique_lock/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/17_intro/headers/c++200x/all.cc: Add new includes.\n\nFrom-SVN: r135007", "tree": {"sha": "cd392e25499481feab8d9adb71f2fb0e3a793cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd392e25499481feab8d9adb71f2fb0e3a793cbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/comments", "author": null, "committer": null, "parents": [{"sha": "006601890b953c9177624f9f533b997f344802ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006601890b953c9177624f9f533b997f344802ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006601890b953c9177624f9f533b997f344802ad"}], "stats": {"total": 2082, "additions": 2010, "deletions": 72}, "files": [{"sha": "456be98f38d236d732581268a60c42f785ce8b7d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 134, "deletions": 63, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -1,21 +1,92 @@\n+2008-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/condition_variable: New.\n+\t* include/std/mutex: New.\n+\t* src/condition_variable.cc: New.\n+\t* src/mutex.cc: New.\n+\t* include/bits/functexcept.h: Add __throw_system_error varients.\n+\t* src/functexcept.cc: Same.\n+\t* config/abi/pre/gnu.ver: Add exports.\n+\n+\t* doc/xml/manual/using.xml: Add new includes.\n+\t* doc/doxygen/user.cfg.in: Doxygen support.\n+\t* doc/doxygen/doxygroups.cc: Same.\n+\n+\t* include/Makefile.am: Add mutex, condition_variable.\n+\t* include/Makefile.in: Regenerated.\n+\t* src/Makefile.am: Add mutex.cc, condition_variable.cc.\n+\t* src/Makefile.in: Regenerated.\n+\n+\t* testsuite/30_threads: New.\n+\t* testsuite/30_threads/lock_error: New.\n+\t* testsuite/30_threads/mutex: New.\n+\t* testsuite/30_threads/mutex/dest: New.\n+\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: New.\n+\t* testsuite/30_threads/mutex/native_handle: New.\n+\t* testsuite/30_threads/mutex/native_handle/1.cc: New.\n+\t* testsuite/30_threads/mutex/cons: New.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/mutex/cons/1.cc: New.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/mutex/requirements: New.\n+\t* testsuite/30_threads/mutex/requirements/typedefs.cc: New.\n+\t* testsuite/30_threads/mutex/try_lock: New.\n+\t* testsuite/30_threads/mutex/try_lock/1.cc: New.\n+\t* testsuite/30_threads/mutex/try_lock/2.cc: New.\n+\t* testsuite/30_threads/mutex/lock: New.\n+\t* testsuite/30_threads/mutex/lock/1.cc: New.\n+\t* testsuite/30_threads/mutex/unlock: New.\n+\t* testsuite/30_threads/mutex/unlock/1.cc: New.\n+\t* testsuite/30_threads/recursive_mutex: New.\n+\t* testsuite/30_threads/recursive_mutex/dest: New.\n+\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc: New.\n+\t* testsuite/30_threads/recursive_mutex/native_handle: New.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: New.\n+\t* testsuite/30_threads/recursive_mutex/cons: New.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/recursive_mutex/cons/1.cc: New.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/recursive_mutex/requirements: New.\n+\t* testsuite/30_threads/recursive_mutex/requirements/typedefs.cc: New.\n+\t* testsuite/30_threads/lock_guard: New.\n+\t* testsuite/30_threads/lock_guard/requirements: New.\n+\t* testsuite/30_threads/lock_guard/requirements/typedefs.cc: New.\n+\t* testsuite/30_threads/lock_guard/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/30_threads/headers: New.\n+\t* testsuite/30_threads/headers/mutex: New.\n+\t* testsuite/30_threads/headers/mutex/types_std_c++0x.cc: New.\n+\t* testsuite/30_threads/headers/mutex/std_c++0x_neg.cc: New.\n+\t* testsuite/30_threads/headers/condition_variable: New.\n+\t* testsuite/30_threads/headers/condition_variable/\n+\ttypes_std_c++0x.cc: New.\n+\t* testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc: New.\n+\t* testsuite/30_threads/once_flag: New.\n+\t* testsuite/30_threads/unique_lock: New.\n+\t* testsuite/30_threads/unique_lock/requirements: New.\n+\t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: New.\n+\t* testsuite/30_threads/unique_lock/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/17_intro/headers/c++200x/all.cc: Add new includes.\n+\n 2008-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/36130\n \t* include/bits/c++config: Namespace macros and setup only in C++.\n \t* testsuite/29_atomics/headers/stdatomic.h/debug_mode.c: New.\n-\t\n+\n 2008-05-06  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/multiway_merge.h:\n-          (multiway_merge_*_unguarded):\n-          Pass sentinel directly, to allow correct determination.\n-          (multiway_merge_loser_tree_unguarded):\n-          Remove over-cautious assertion.\n-          (calls to multiway_merge_*_splitting):\n-          Parametrize with type that is correct in all cases.\n-        * include/parallel/losertree.h:\n-          (delete_min_insert (in many classes)):\n-          Correct and standardize assertions. \n+\t* include/parallel/multiway_merge.h:\n+\t  (multiway_merge_*_unguarded):\n+\t  Pass sentinel directly, to allow correct determination.\n+\t  (multiway_merge_loser_tree_unguarded):\n+\t  Remove over-cautious assertion.\n+\t  (calls to multiway_merge_*_splitting):\n+\t  Parametrize with type that is correct in all cases.\n+\t* include/parallel/losertree.h:\n+\t  (delete_min_insert (in many classes)):\n+\t  Correct and standardize assertions.\n \n 2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -42,7 +113,7 @@\n \n \t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust line numbers.\n \t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n-\t\n+\n 2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* 20_util/make_signed/requirements/typedefs-1.cc: Correct requirements.\n@@ -143,36 +214,36 @@\n \n 2008-04-23  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/quicksort.h: Reformat,\n-        (parallel_sort_qs): Do not pass number of elements.\n-        * include/parallel/balanced_quicksort.h: Reformat,\n-        (parallel_sort_qsb): Do not pass number of elements.\n-        * include/parallel/tags.h:\n-        Introduce new tags for compile-time choice.\n-        * include/parallel/merge.h:\n-        (parallel_merge_advance):Beautified.\n-        * include/parallel/algo.h: Reformatting (spaces for tabs)\n-        New sort and stable_sort variants, corresponding to the tags.\n-        * include/parallel/sort.h:\n-        New sort and stable_sort variants, corresponding to the tags.\n-        Changed determining the desired number of threads. \n+\t* include/parallel/quicksort.h: Reformat,\n+\t(parallel_sort_qs): Do not pass number of elements.\n+\t* include/parallel/balanced_quicksort.h: Reformat,\n+\t(parallel_sort_qsb): Do not pass number of elements.\n+\t* include/parallel/tags.h:\n+\tIntroduce new tags for compile-time choice.\n+\t* include/parallel/merge.h:\n+\t(parallel_merge_advance):Beautified.\n+\t* include/parallel/algo.h: Reformatting (spaces for tabs)\n+\tNew sort and stable_sort variants, corresponding to the tags.\n+\t* include/parallel/sort.h:\n+\tNew sort and stable_sort variants, corresponding to the tags.\n+\tChanged determining the desired number of threads.\n \n 2008-04-23  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/multiway_merge.h\n-        (multiway_merge_loser_tree):\n-        Leave checks to callers, add precondition instead.\n-        (multiway_merge_loser_tree_unguarded): Likewise.\n-        (multiway_merge_loser_tree_sentinel): Likewise.\n-        (sequential_multiway_merge): Added checks for total length 0.\n-        (parallel_multiway_merge): Skip empty sequences.\n-        (multiway_merge, all variants):\n-        Remove temporary variable, return directly.\n-        (stable_multiway_merge, all variants): Likewise.\n-        (multiway_merge_sentinels, all variants):  Likewise.\n-        (stable_multiway_merge_sentinels, all variants): Likewise.\n-        * include/parallel/multiseq_selection.h\n-        (multiseq_partition): More detailed assertions.\n+\t* include/parallel/multiway_merge.h\n+\t(multiway_merge_loser_tree):\n+\tLeave checks to callers, add precondition instead.\n+\t(multiway_merge_loser_tree_unguarded): Likewise.\n+\t(multiway_merge_loser_tree_sentinel): Likewise.\n+\t(sequential_multiway_merge): Added checks for total length 0.\n+\t(parallel_multiway_merge): Skip empty sequences.\n+\t(multiway_merge, all variants):\n+\tRemove temporary variable, return directly.\n+\t(stable_multiway_merge, all variants): Likewise.\n+\t(multiway_merge_sentinels, all variants):  Likewise.\n+\t(stable_multiway_merge_sentinels, all variants): Likewise.\n+\t* include/parallel/multiseq_selection.h\n+\t(multiseq_partition): More detailed assertions.\n \n 2008-04-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n@@ -366,7 +437,7 @@\n \t* include/std/regex: Same.\n \t* include/std/array: Same.\n \t* include/std/system_error: Same, add error_code ctor.\n-\t\n+\n 2008-04-07  Johannes Singler  <singler@ira.uka.de>\n \n \t* include/parallel/multiway_merge.h: Moved decisions to\n@@ -413,7 +484,7 @@\n 2008-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/testsuite_abi.h: Remove symbol_objects,\n-\tsymbol_names typedefs.\t\n+\tsymbol_names typedefs.\n \t* testsuite/util/testsuite_abi.cc (compare_symbols): Correct check\n \tfor long double compatiblity symbols, simplify data structures used.\n \n@@ -433,13 +504,13 @@\n \t* doc/doxygen/Intro.3: Correct typo.\n \n \t* doc/xml/api.xml: Add gcc-4.3 links.\n-\t* doc/html/api.html: Regenerate.\t\n-\t\n+\t* doc/html/api.html: Regenerate.\n+\n \t* include/debug/debug.h: Document namepaces here.\n \t* include/parallel/base.h: Same.\n \t* include/ext/typelist.h: Same.\n \t* include/ext/pb_ds/tag_and_trait.hpp: Same.\n-\t\n+\n \t* include/tr1_impl/random: Adjust line break.\n \t* include/tr1_impl/unordered_map: Correct and or add markup.\n \t* include/tr1_impl/boost_shared_ptr.h: Correct and or add markup.\n@@ -516,7 +587,7 @@\n \n 2008-03-20  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/set_operations.h (set_intersection): Remove.\n+\t* include/parallel/set_operations.h (set_intersection): Remove.\n \n 2008-03-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -541,8 +612,8 @@\n \n \t* include/std/date_time: New file.\n \t* src/date_time.cc: New file.\n- \t* config/abi/pre/gnu.ver: Added <date_time> symbols in version\n- \tGLIBCXX_3.4.11 and changed two patterns in version GLIBCXX_3.4\n+\t* config/abi/pre/gnu.ver: Added <date_time> symbols in version\n+\tGLIBCXX_3.4.11 and changed two patterns in version GLIBCXX_3.4\n \tthat matched new symbols.\n \t* include/Makefile.am: Add date_time in std headers.\n \t* src/Makefile.am: Add date_time.cc to source files.\n@@ -558,7 +629,7 @@\n       * testsuite/31_date_time/nanoseconds/requirements/traits.cc: Likewise.\n       * testsuite/31_date_time/nanoseconds/requirements/duration.cc: Likewise.\n       * testsuite/31_date_time/system_time/requirements: Likewise.\n-      * testsuite/31_date_time/system_time/requirements/traits.cc: Likewise. \t\n+      * testsuite/31_date_time/system_time/requirements/traits.cc: Likewise.\n \n 2008-03-16  Paolo Carlini  <pcarlini@suse.de>\n \n@@ -643,7 +714,7 @@\n \t(_GLIBCXX_LONG_DOUBLE_COMPAT_IMPL): Define.\n \t(_ZNKSt4hashIeEclEe): New alias.\n \t* testsuite/util/testsuite_abi.cc (check_version): Support\n-\tGLIBCXX_LDBL_3.4.10. \n+\tGLIBCXX_LDBL_3.4.10.\n \n 2008-02-25  Jan Beulich  <jbeulich@novell.com>\n \n@@ -656,7 +727,7 @@\n \n 2008-02-20  Jason Merrill  <jason@redhat.com>\n \n-\t* include/bits/c++config: Use 'inline namespace' instead of \n+\t* include/bits/c++config: Use 'inline namespace' instead of\n \tstrong using.\n \n 2008-02-18  Pedro Lamarao <pedro.lamarao@mndfck.org>\n@@ -674,16 +745,16 @@\n \t* include/tr1/exp_integral.tcc: Same.\n \t* include/tr1/gamma.tcc: Same.\n \t* include/tr1/hypergeometric.tcc: Same.\n-\t\n+\n 2008-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/34797\n \t* include/parallel/settings.h (_Settings): Reconstruct Settings class\n \there, uglify, remove anonymous namespace and static\n-\tmembers. Convert to datum.\t\n+\tmembers. Convert to datum.\n \t* include/parallel/types.h: Move Settings:: enumerations here, uglify.\n \t* src/parallel_settings.cc: New, definition for _Settings member\n-\tfunctions.\t\n+\tfunctions.\n \t* include/parallel/multiway_merge.h: Same.\n \t* include/parallel/for_each.h: Same.\n \t* include/parallel/workstealing.h: Same.\n@@ -708,7 +779,7 @@\n \n \t* src/Makefile.am (parallel_sources): Add parallel_settings.cc.\n \t* src/Makefile.in: Regenerate.\n-\t\n+\n \t* config/abi/pre/gnu.ver: Export _Settings::get and _Settings::set.\n \n 2008-02-17  Paolo Carlini  <pcarlini@suse.de>\n@@ -727,22 +798,22 @@\n \t* config/abi/pre/gnu.ver: Export stdio_sync_filebuf symbols.\n \t* testsuite/ext/stdio_sync_filebuf/char/35209.cc: New.\n \t* testsuite/ext/stdio_sync_filebuf/wchar_t/35209.cc: Likewise.\n-\t\n+\n 2008-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/parallel/random_number.h: Use TR1's mersenne_twister.\n \t(random_number::genrand_bits()): Remove.\n \t(random_number::set_seed): Remove.\n-\t\n+\n 2008-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* include/parallel/types.h: Remove enum parallelism.\n-\t\n+\n 2008-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/parallel/types.h: Move enum parallelism here.  Use\n \ttr1/cstdint's int16_t, uint16_t, int32_t, uint32_t, int64_t,\n-\tuint64_t. \n+\tuint64_t.\n \t* include/parallel/multiseq_selection.h: Adjust for cstdint.\n \t* include/parallel/compatibility.h: Same.\n \t* include/parallel/tags.h: Just compile-time tags.\n@@ -981,7 +1052,7 @@\n \t* testsuite/tr1/6_containers/tuple/cons/constructor.cc: Likewise.\n \t* testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc:\n \tLikewise.\n-\t* testsuite/tr1/6_containers/array/requirements/contiguous.cc: \n+\t* testsuite/tr1/6_containers/array/requirements/contiguous.cc:\n \tLikewise.\n \t* testsuite/tr1/6_containers/array/requirements/member_swap.cc:\n \tLikewise.\n@@ -1182,7 +1253,7 @@\n \t__glibcxx_requires_sorted_set_pred): Add.\n \t* include/bits/stl_algo.h (merge, includes, set_union,\n \tset_intersection, set_difference, set_symmetric_difference):\n-\tAdjust, use __glibcxx_requires_sorted_set* instead. \n+\tAdjust, use __glibcxx_requires_sorted_set* instead.\n \t* testsuite/25_algorithms/set_intersection/34730.cc: New.\n \n 2008-01-09  Paolo Carlini  <pcarlini@suse.de>\n@@ -1240,7 +1311,7 @@\n \t* include/parallel/algobase.h: Likewise.\n \t* include/parallel/find.h: Likewise.\n \t* include/parallel/algo.h: Likewise.\n-\t* include/parallel/checkers.h: Likewise.\t\n+\t* include/parallel/checkers.h: Likewise.\n \n 2008-01-09  Francesco Biscani  <bluescarni@gmail.com>\n \n@@ -1304,7 +1375,7 @@\n \t* include/parallel/multiway_mergesort.h (parallel_sort_mwms_pu,\n \tparallel_sort_mwms): Likewise.\n \t* include/parallel/partial_sum.h (parallel_partial_sum_linear):\n-\tLikewise. \n+\tLikewise.\n \t* testsuite/25_algorithms/sort/34095.cc: New.\n \n 2008-01-01  Paolo Carlini  <pcarlini@suse.de>"}, {"sha": "48b8cfd0aae0a216bdc999c3078fc62bdfe48163", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -62,7 +62,10 @@ GLIBCXX_3.4 {\n       std::c[a-g]*;\n #     std::char_traits;\n #     std::c[i-z]*;\n-      std::c[i-s]*;\n+      std::c[i-n]*;\n+#     std::condition_variable;\n+      std::co[^n]*;\n+      std::c[p-s]*;\n       std::c[u-z]*;\n #     std::[d-g]*;\n       std::d[a-d]*;\n@@ -831,6 +834,24 @@ GLIBCXX_3.4.11 {\n     atomic_flag_test_and_set;\n     atomic_flag_test_and_set_explicit;\n     atomic_global_fence_compatibility;\n+    \n+    # mutex\n+    _ZSt10adopt_lock;\n+    _ZSt10defer_lock;\n+    _ZSt11try_to_lock;\n+\n+    _ZTISt10lock_error;\n+    _ZTVSt10lock_error;\n+    _ZTSSt10lock_error;\n+    _ZNKSt10lock_error4whatEv;\n+\n+    # condition_variable\n+    _ZNSt18condition_variable10notify_allEv;\n+    _ZNSt18condition_variable10notify_oneEv;\n+    _ZNSt18condition_variableC1Ev;\n+    _ZNSt18condition_variableC2Ev;\n+    _ZNSt18condition_variableD1Ev;\n+    _ZNSt18condition_variableD2Ev;\n \n     # system_error\n     _ZSt15system_category;\n@@ -847,6 +868,9 @@ GLIBCXX_3.4.11 {\n \n     _ZNKSt4hashISt10error_codeEclES0_;\n \n+    _ZSt20__throw_system_errorPKc;\n+    _ZSt20__throw_system_errori;\n+\n     # date_time\n     _ZSt15get_system_timev;\n  "}, {"sha": "d0adec9e5fb5da1a3e476d2669bbdc9ec67c9e62", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -34,6 +34,9 @@\n /** @namespace std::placeholders\n  *  @brief ISO C++ 0x entities sub namespace for functional.\n */\n+/** @namespace std::this_thread\n+ *  @brief ISO C++ 0x entities sub namespace for thread.\n+*/\n /** @namespace __gnu_cxx\n  *  @brief GNU extensions for public use.\n */"}, {"sha": "fdb1ea1e5f8a5b24f1999908e91097321171568b", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -468,6 +468,7 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/algorithm \\\n                          include/array \\\n                          include/bitset \\\n+                         include/condition_variable \\\n                          include/date_time \\\n                          include/deque \\\n                          include/fstream \\\n@@ -483,6 +484,7 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/locale \\\n                          include/map \\\n                          include/memory \\\n+                         include/mutex \\\n                          include/numeric \\\n                          include/ostream \\\n                          include/queue \\\n@@ -495,6 +497,7 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/streambuf \\\n                          include/string \\\n                          include/system_error \\\n+                         include/thread \\\n                          include/tuple \\\n                          include/type_traits \\\n                          include/unordered_map \\\n@@ -516,6 +519,7 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/csetjmp \\\n                          include/csignal \\\n                          include/cstdarg \\\n+                         include/cstdatomic \\\n                          include/cstdbool \\\n                          include/cstddef \\\n                          include/cstdint \\\n@@ -1162,7 +1166,8 @@ INCLUDE_FILE_PATTERNS  =\n # undefined via #undef or recursively expanded use the := operator \n # instead of the = operator.\n \n-PREDEFINED             = __GTHREADS \\\n+PREDEFINED             = __cplusplus \\\n+\t\t         __GTHREADS \\\n                          \"_GLIBCXX_STD_P= \" \\\n                          \"_GLIBCXX_STD_D= \" \\\n                          _GLIBCXX_STD=std \\"}, {"sha": "fc3c97a49ca6ab0cfb5b42541a9273d28cfe6a54", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -169,6 +169,7 @@\n <row><entry><filename class=\"headerfile\">exception</filename></entry><entry><filename class=\"headerfile\">iterator</filename></entry><entry><filename class=\"headerfile\">ostream</filename></entry><entry><filename class=\"headerfile\">streambuf</filename></entry><entry><filename class=\"headerfile\">utility</filename></entry></row>\n <row><entry><filename class=\"headerfile\">fstream</filename></entry><entry><filename class=\"headerfile\">limits</filename></entry><entry><filename class=\"headerfile\">queue</filename></entry><entry><filename class=\"headerfile\">string</filename></entry><entry><filename class=\"headerfile\">valarray</filename></entry></row>\n <row><entry><filename class=\"headerfile\">functional</filename></entry><entry><filename class=\"headerfile\">list</filename></entry><entry><filename class=\"headerfile\">random</filename></entry><entry><filename class=\"headerfile\">system_error</filename></entry><entry><filename class=\"headerfile\">vector</filename></entry></row>\n+<row><entry><filename class=\"headerfile\">condition_variable</filename></entry><entry><filename class=\"headerfile\">mutex</filename></entry><entry><filename class=\"headerfile\">thread</filename></entry><entry></entry><entry></entry></row>\n </tbody>\n </tgroup>\n </table>\n@@ -189,6 +190,7 @@\n <row><entry><filename class=\"headerfile\">cctype</filename></entry><entry><filename class=\"headerfile\">ciso646</filename></entry><entry><filename class=\"headerfile\">csignal</filename></entry><entry><filename class=\"headerfile\">cstdio</filename></entry><entry><filename class=\"headerfile\">cuchar</filename></entry></row>\n <row><entry><filename class=\"headerfile\">cerrno</filename></entry><entry><filename class=\"headerfile\">climits</filename></entry><entry><filename class=\"headerfile\">cstdarg</filename></entry><entry><filename class=\"headerfile\">cstdlib</filename></entry><entry><filename class=\"headerfile\">cwchar</filename></entry></row>\n <row><entry><filename class=\"headerfile\">cfenv</filename></entry><entry><filename class=\"headerfile\">clocale</filename></entry><entry><filename class=\"headerfile\">cstdbool</filename></entry><entry><filename class=\"headerfile\">cstring</filename></entry><entry><filename class=\"headerfile\">cwctype</filename></entry></row>\n+<row><entry><filename class=\"headerfile\">cstdatomic</filename></entry><entry></entry><entry></entry><entry></entry><entry></entry></row>\n </tbody>\n </tgroup>\n </table>"}, {"sha": "9b950b58e28a02edec5d0f90d6df4df6b1199d4c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -33,6 +33,7 @@ std_headers = \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/complex \\\n+\t${std_srcdir}/condition_variable \\\n \t${std_srcdir}/date_time \\\n \t${std_srcdir}/deque \\\n \t${std_srcdir}/fstream \\\n@@ -48,6 +49,7 @@ std_headers = \\\n \t${std_srcdir}/locale \\\n \t${std_srcdir}/map \\\n \t${std_srcdir}/memory \\\n+\t${std_srcdir}/mutex \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\"}, {"sha": "b94c0cd632eb5cae861dba784acbb2a1fe65f732", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -286,6 +286,7 @@ std_headers = \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/complex \\\n+\t${std_srcdir}/condition_variable \\\n \t${std_srcdir}/date_time \\\n \t${std_srcdir}/deque \\\n \t${std_srcdir}/fstream \\\n@@ -301,6 +302,7 @@ std_headers = \\\n \t${std_srcdir}/locale \\\n \t${std_srcdir}/map \\\n \t${std_srcdir}/memory \\\n+\t${std_srcdir}/mutex \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\"}, {"sha": "241384f0730e12d5062d0a9e8619cc3f062fd1e9", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -1,6 +1,6 @@\n // Function-Based Exception Support -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -86,6 +86,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_underflow_error(const char*) __attribute__((__noreturn__));\n \n+  void\n+  __throw_system_error(const char*) __attribute__((__noreturn__));\n+\n+  void\n+  __throw_system_error(int) __attribute__((__noreturn__));\n+\n   // Helpers for exception objects in basic_ios\n   void\n   __throw_ios_failure(const char*) __attribute__((__noreturn__));"}, {"sha": "c8d8f7845e462702abb55c785c57dba9f36d94d2", "filename": "libstdc++-v3/include/std/condition_variable", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,162 @@\n+// <condition_variable> -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file condition_variable\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_CONDITION_VARIABLE\n+#define _GLIBCXX_CONDITION_VARIABLE 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#endif\n+\n+#include <mutex> // unique_lock\n+\n+namespace std \n+{\n+  // XXX\n+  class system_time;\n+\n+  /// condition_variable\n+  class condition_variable\n+  {\n+  public:\n+\n+#if __GTHREAD_HAS_COND\n+    typedef __gthread_cond_t native_handle_type;\n+#else\n+    typedef int native_handle_type;\n+#endif\n+\n+    condition_variable();\n+    ~condition_variable();\n+\n+    void \n+    notify_one();\n+\n+    void \n+    notify_all();\n+\n+    void \n+    wait(unique_lock<mutex>& __lock);\n+\n+    template<typename _Predicate>\n+      void \n+      wait(unique_lock<mutex>& __lock, _Predicate __p)\n+      {\n+\twhile (!__p())\n+\t  wait(__lock);\n+      }\n+  \n+    template<typename _Duration>\n+      bool \n+      timed_wait(unique_lock<mutex>& __lock, const _Duration& __rtime);\n+\n+    bool \n+    timed_wait(unique_lock<mutex>& __lock, const system_time& __atime);\n+\n+    template<typename _Predicate>\n+      bool \n+      timed_wait(unique_lock<mutex>& __lock, const system_time& __atime,\n+\t\t _Predicate pred);\n+\n+    template<typename _Duration, typename _Predicate>\n+      bool \n+      timed_wait(unique_lock<mutex>& __lock, const _Duration& __rtime, \n+\t\t _Predicate pred);\n+\n+    native_handle_type \n+    native_handle() { return _M_cond; }\n+\n+  private:\n+    native_handle_type\t_M_cond;\n+    condition_variable(const condition_variable&);\n+    condition_variable& operator=(const condition_variable&);\n+  };\n+\n+  /// condition_variable_any\n+  // Like above, only mutex may not have try_lock.\n+  class condition_variable_any\n+  {\n+  public:\n+#if __GTHREAD_HAS_COND\n+    typedef __gthread_cond_t native_handle_type;\n+#else\n+    typedef int native_handle_type;\n+#endif\n+\n+    condition_variable_any();\n+    ~condition_variable_any();\n+\n+    void \n+    notify_one();\n+\n+    void \n+    notify_all();\n+\n+    template<typename _Lock>\n+      void \n+      wait(_Lock& __lock);\n+\n+    template<typename _Lock, typename _Predicate>\n+      void \n+      wait(_Lock& __lock, _Predicate __p);\n+\n+    template<typename _Lock>\n+      bool \n+      timed_wait(_Lock& __lock, const system_time& __atime);\n+\n+    template<typename _Lock, typename _Duration>\n+      bool \n+      timed_wait(_Lock& __lock, const _Duration& __rtime);\n+\n+    template<typename _Lock, typename _Predicate>\n+      bool \n+      timed_wait(_Lock& __lock, const system_time& __atime, _Predicate __p);\n+\n+    template<typename _Lock, typename _Duration, typename _Predicate>\n+      bool \n+      timed_wait(_Lock& __lock, const _Duration& __rtime, _Predicate __p);\n+\n+    native_handle_type \n+    native_handle() { return _M_cond; }\n+\n+  private:\n+    native_handle_type\t_M_cond;\n+    condition_variable_any(const condition_variable_any&);\n+    condition_variable_any& operator=(const condition_variable_any&);\n+  };\n+\n+}\n+\n+#endif"}, {"sha": "57e817fcc7943bceceef5cd24c376c84258c78f0", "filename": "libstdc++-v3/include/std/mutex", "status": "added", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,385 @@\n+// <mutex> -*- C++ -*-\n+\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 \n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file mutex\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_MUTEX\n+#define _GLIBCXX_MUTEX 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#endif\n+\n+#include <exception>\n+#include <cstddef>\n+#include <bits/functexcept.h>\n+#include <bits/gthr.h> \n+\n+namespace std \n+{\n+  // XXX\n+  class system_time;\n+\n+  /// mutex\n+  class mutex\n+  {\n+  public:\n+    typedef __gthread_mutex_t native_handle_type;\n+\n+    mutex()\n+    {\n+#if defined __GTHREAD_MUTEX_INIT\n+      native_handle_type __tmp = __GTHREAD_MUTEX_INIT;\n+      _M_mutex = __tmp;\n+#else\n+      int __e = __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex); \n+\n+      // EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n+      if ( __e)\n+       __throw_system_error(__e);      \n+#endif\n+    }\n+\n+    void \n+    lock()\n+    {\n+      int __e = __gthread_mutex_lock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n+     if ( __e)\n+       __throw_system_error(__e);\n+    }\n+ \n+    bool \n+    try_lock()\n+    {\n+      int __e = __gthread_mutex_trylock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY\n+     if ( __e)\n+       __throw_system_error(__e);\n+     else\n+       return true;\n+    }\n+\n+    void \n+    unlock()\n+    {\n+      int __e = __gthread_mutex_unlock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EPERM\n+     if ( __e)\n+       __throw_system_error(__e);\n+    }\n+\n+    native_handle_type \n+    native_handle()\n+    { return _M_mutex; }\n+\n+  private:\n+    native_handle_type _M_mutex;\n+    mutex(const mutex&);\n+    mutex& operator=(const mutex&);\n+  };\n+\n+\n+  /// recursive_mutex\n+  class recursive_mutex\n+  {\n+  public:\n+    typedef __gthread_recursive_mutex_t native_handle_type;\n+\n+    recursive_mutex()\n+    { \n+#if defined __GTHREAD_RECURSIVE_MUTEX_INIT\n+      native_handle_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n+      _M_mutex = __tmp;\n+#else\n+      int __e = __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n+\n+      // EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n+      if ( __e)\n+       __throw_system_error(__e);      \n+#endif\n+    }\n+\n+\n+    void \n+    lock()\n+    { \n+      int __e = __gthread_recursive_mutex_lock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n+     if ( __e)\n+       __throw_system_error(__e);\n+    }\n+  \n+    bool \n+    try_lock()\n+    {\n+      int __e = __gthread_recursive_mutex_trylock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY\n+     if ( __e)\n+       __throw_system_error(__e);\n+     else\n+       return true;\n+    }\n+\n+    void \n+    unlock()\n+    { \n+      int __e = __gthread_recursive_mutex_unlock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY\n+     if ( __e)\n+       __throw_system_error(__e);\n+    }\n+\n+    native_handle_type \n+    native_handle() { return _M_mutex; }\n+\n+  private:\n+    native_handle_type _M_mutex;\n+\n+    recursive_mutex(const recursive_mutex&);\n+    recursive_mutex& operator=(const recursive_mutex&);\n+  };\n+\n+\n+  // class timed_mutex;\n+  // class recursive_timed_mutex;\n+\n+  /// Do not acquire ownership of the mutex.\n+  struct defer_lock_t { };\n+\n+  /// Try to acquire ownership of the mutex without blocking.\n+  struct try_to_lock_t { };\n+\n+  /// Assume the calling thread has already obtained mutex ownership\n+  /// and manage it.\n+  struct adopt_lock_t { };\n+\n+  extern const defer_lock_t \tdefer_lock;\n+  extern const try_to_lock_t \ttry_to_lock;\n+  extern const adopt_lock_t \tadopt_lock;\n+\n+  /// Thrown to indicate errors with lock operations.\n+  class lock_error : public exception\n+  {\n+  public:\n+    virtual const char* \n+    what() const throw();\n+  };\n+  \n+  /// @brief  Scoped lock idiom.\n+  // Acquire the mutex here with a constructor call, then release with\n+  // the destructor call in accordance with RAII style.\n+  template<typename _Mutex> \n+    class lock_guard\n+    {\n+    public:\n+      typedef _Mutex mutex_type;\n+\n+      explicit lock_guard(mutex_type& __m) : _M_device(__m)\n+      { _M_device.lock(); }\n+\n+      lock_guard(mutex_type& __m, adopt_lock_t __a) : _M_device(__m)\n+      { _M_device.lock(); }\n+\n+      ~lock_guard()\n+      { _M_device.unlock(); }\n+\n+    private:\n+      mutex_type&  _M_device;\n+      lock_guard(lock_guard const&);\n+      lock_guard& operator=(lock_guard const&);\n+    };\n+\n+  /// unique_lock\n+  template<typename _Mutex> \n+    class unique_lock\n+    {\n+    public:\n+      typedef _Mutex mutex_type;\n+\n+      unique_lock() : _M_device(NULL), _M_owns(false) { }\n+\n+      explicit unique_lock(mutex_type& __m) : _M_device(&__m)\n+      { \n+\tlock(); \n+\t_M_owns = true;\n+      }\n+      \n+      unique_lock(mutex_type& __m, defer_lock_t) \n+      : _M_device(&__m), _M_owns(false) { }\n+\n+      unique_lock(mutex_type& __m, try_to_lock_t) \n+      : _M_device(&__m), _M_owns(_M_device->try_lock()) { }\n+\n+      unique_lock(mutex_type& __m, adopt_lock_t) \n+      : _M_device(&__m), _M_owns(true)\n+      {\n+\t// XXX calling thread owns mutex\n+      }\n+\n+      unique_lock(mutex_type& __m, const system_time& abs_time);\n+\n+      template<typename _Duration>\n+        unique_lock(mutex_type& __m, const _Duration& rel_time);\n+\n+      ~unique_lock()\n+      {\n+\tif (_M_owns)\n+\t  unlock();\n+      }\n+\n+      unique_lock(unique_lock&&);\n+\n+      unique_lock& operator=(unique_lock&&);\n+\n+\n+      void \n+      lock()\n+      { \n+\tif (_M_device && !_M_owns)\n+\t  _M_device->lock(); \n+\telse\n+\t  throw lock_error();\n+      }\n+\n+      bool \n+      try_lock()\n+      { \n+\tbool __ret = false;\n+\tif (_M_device && !_M_owns)\n+\t  __ret = _M_device->try_lock(); \n+\telse\n+\t  throw lock_error();\n+\treturn __ret;\n+      }\n+\n+      void \n+      unlock()\n+      { \n+\tif (_M_device && _M_owns)\n+\t  _M_device->unlock(); \n+\telse\n+\t  throw lock_error();\n+      }\n+\n+\n+      template<typename _Duration>\n+        bool timed_lock(const _Duration& rel_time);\n+\n+      bool \n+      timed_lock(const system_time& abs_time);\n+\n+      void \n+      swap(unique_lock&& __u);\n+\n+      mutex_type* \n+      release() \n+      { \n+\tmutex_type* __ret = _M_device; \n+\t_M_device = NULL;\n+\t_M_owns = false;\n+\treturn __ret;\n+      }\n+\n+      bool \n+      owns_lock() const { return _M_owns; }\n+\n+      operator bool () const { return owns_lock(); }\n+\n+      mutex_type* \n+      mutex() const\n+      { return _M_device; }\n+\n+    private:\n+      unique_lock(unique_lock const&);\n+      unique_lock& operator=(unique_lock const&);\n+\n+      mutex_type* \t_M_device;\n+      bool \t\t_M_owns; // XXX use atomic_bool\n+    };\n+\n+  template<typename _Mutex>\n+    void \n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y);\n+\n+  template<typename _Mutex>\n+    void \n+    swap(unique_lock<_Mutex>&& __x, unique_lock<_Mutex>& __y);\n+\n+  template<typename _Mutex>\n+    void \n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>&& __y);\n+\n+  template<typename _L1, typename _L2, typename ..._L3> \n+    int \n+    try_lock(_L1&, _L2&, _L3&...);\n+\n+  template<typename _L1, typename _L2, typename ..._L3> \n+    void \n+    lock(_L1&, _L2&, _L3&...);\n+\n+  /// once_flag\n+  struct once_flag \n+  {\n+    typedef __gthread_once_t __native_type;\n+\n+    once_flag() : _M_once(__GTHREAD_ONCE_INIT) { }\n+\n+    __native_type&\n+    _M_get() { return _M_once; }\n+\n+  private:\n+    __native_type  _M_once;\n+    once_flag(const once_flag&);\n+    once_flag& operator=(const once_flag&);\n+  };\n+\n+  template<typename _Callable, typename... _Args>\n+    void \n+    call_once(once_flag& __once, _Callable __f, _Args&&... __args)\n+    {\n+      int __e = __gthread_once(&(__once._M_get()), __f(__args...)); \n+      if ( __e)\n+\t__throw_system_error(__e);\n+    }\n+}\n+\n+\n+#endif"}, {"sha": "0b5f2a708858f3260b6eff656f6c8f71967aa861", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -183,6 +183,8 @@ sources = \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n+\tmutex.cc \\\n+\tcondition_variable.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -229,11 +231,26 @@ parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n # Use special rules for the C++0x sources so that the proper flags are passed.\n+functexcept.lo: functexcept.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+functexcept.o: functexcept.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n system_error.lo: system_error.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n system_error.o: system_error.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+mutex.lo: mutex.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+mutex.o: mutex.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+condition_variable.lo: condition_variable.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+condition_variable.o: condition_variable.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n hash_c++0x.lo: hash_c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n hash_c++0x.o: hash_c++0x.cc"}, {"sha": "c1e56fb4071d9afc728c4dd0379255b58a30b7e7", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -84,11 +84,11 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tiostream-inst.cc istream-inst.cc istream.cc locale-inst.cc \\\n \tmisc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \\\n \tstreambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc atomicity.cc codecvt_members.cc \\\n-\tcollate_members.cc ctype_members.cc messages_members.cc \\\n-\tmonetary_members.cc numeric_members.cc time_members.cc \\\n-\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n-\tparallel_list.cc parallel_settings.cc\n+\twstring-inst.cc mutex.cc condition_variable.cc atomicity.cc \\\n+\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n+\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n+\ttime_members.cc basic_file.cc c++locale.cc \\\n+\tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -109,7 +109,8 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo $(am__objects_1) $(am__objects_4)\n+\twstring-inst.lo mutex.lo condition_variable.lo \\\n+\t$(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -419,6 +420,8 @@ sources = \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n+\tmutex.cc \\\n+\tcondition_variable.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -823,11 +826,26 @@ parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n # Use special rules for the C++0x sources so that the proper flags are passed.\n+functexcept.lo: functexcept.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+functexcept.o: functexcept.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n system_error.lo: system_error.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n system_error.o: system_error.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+mutex.lo: mutex.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+mutex.o: mutex.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+condition_variable.lo: condition_variable.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+condition_variable.o: condition_variable.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n hash_c++0x.lo: hash_c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n hash_c++0x.o: hash_c++0x.cc"}, {"sha": "74541e9f34bb11a20e3785a248768875f4568755", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,84 @@\n+// mutex -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+\n+namespace std\n+{\n+  condition_variable::condition_variable()\n+  {\n+#if __GTHREAD_HAS_COND\n+# if defined __GTHREAD_COND_INIT\n+    native_handle_type __tmp = __GTHREAD_COND_INIT;\n+    _M_cond = __tmp;\n+# else\n+    int __e = __gthread_cond_init(&_M_cond, NULL);\n+    if ( __e)\n+      __throw_system_error(__e);\n+# endif\n+#endif\n+  }\n+\n+  condition_variable::~condition_variable()\n+  {\n+#if __GTHREAD_HAS_COND\n+    // XXX no thread blocked\n+    int __e = pthread_cond_destroy(&_M_cond);\n+    // if __e == EBUSY then blocked\n+#endif\n+  }\n+\n+  void \n+  condition_variable::notify_one()\n+  { \n+#if __GTHREAD_HAS_COND\n+    int __e = pthread_cond_signal(&_M_cond);\n+\n+    // XXX not in spec\n+    // EINVAL\n+    if ( __e)\n+      __throw_system_error(__e);\n+#endif\n+  }\n+\n+  void \n+  condition_variable::notify_all()\n+  { \n+#if __GTHREAD_HAS_COND\n+    int __e = pthread_cond_broadcast(&_M_cond);\n+\n+    // XXX not in spec\n+    // EINVAL\n+    if ( __e)\n+      __throw_system_error(__e);\n+#endif\n+  }\n+\n+}\n+"}, {"sha": "f77bb0d29cdad6a49ae270ba0ae5bfcff131bd43", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -29,6 +29,7 @@\n #include <cstdlib>\n #include <exception>\n #include <stdexcept>\n+#include <system_error>\n #include <new>\n #include <typeinfo>\n #include <ios>\n@@ -95,6 +96,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __throw_underflow_error(const char* __s)\n   { throw underflow_error(_(__s)); }\n \n+  void\n+  __throw_system_error(const char* __s)\n+  { throw system_error(_(__s)); }\n+\n+  void\n+  __throw_system_error(int __i)\n+  { throw system_error(error_code(__i, system_category)); }\n+\n   void\n   __throw_ios_failure(const char* __s)\n   { throw ios_base::failure(_(__s)); }\n@@ -151,6 +160,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __throw_underflow_error(const char*)\n   { std::abort(); }\n \n+  void\n+  __throw_system_error(const char* __s)\n+  { std::abort(); }\n+\n+  void\n+  __throw_system_error(int __i)\n+  { std::abort(); }\n+\n   void\n   __throw_ios_failure(const char*)\n   { std::abort(); }"}, {"sha": "a1c74aab101c976e090f0bed6e459ab77f37b748", "filename": "libstdc++-v3/src/mutex.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,42 @@\n+// mutex -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+namespace std\n+{\n+  const defer_lock_t defer_lock = defer_lock_t();\n+  const try_to_lock_t try_to_lock = try_to_lock_t();\n+  const adopt_lock_t adopt_lock = adopt_lock_t();\n+\n+  const char*\n+  lock_error::what() const throw()\n+  { return \"std::lock_error\"; }\n+}\n+"}, {"sha": "049f42096d010b20030eb8854c1d936709aa9d94", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -95,6 +95,7 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n+#include <condition_variable>\n #include <complex>\n #include <date_time>\n #include <deque>\n@@ -112,6 +113,7 @@\n #include <locale>\n #include <map>\n #include <memory>\n+#include <mutex>\n #include <new>\n #include <numeric>\n #include <ostream>"}, {"sha": "3638ec70b02e0f1d389c4c5227d98697478c8db8", "filename": "libstdc++-v3/testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++98\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <condition_variable>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "8c15bb57e7d3d90ee7336955007e012d3ce79901", "filename": "libstdc++-v3/testsuite/30_threads/headers/condition_variable/types_std_c++0x.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  typedef std::condition_variable c_t;\n+  typedef std::condition_variable_any ca_t;\n+}"}, {"sha": "d6f7dca5b8b86ed579a23f828053080278b29131", "filename": "libstdc++-v3/testsuite/30_threads/headers/mutex/std_c++0x_neg.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++98\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <mutex>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "6296f92d1163116ac8ab8a92ee30497a988c498d", "filename": "libstdc++-v3/testsuite/30_threads/headers/mutex/types_std_c++0x.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  typedef std::mutex mutext_t;\n+  typedef std::recursive_mutex rmutext_t;\n+\n+  typedef std::defer_lock_t dl_t;\n+  typedef std::try_to_lock_t ttl_t;\n+  typedef std::adopt_lock_t al_t;\n+\n+  using std::defer_lock;\n+  using std::try_to_lock;\n+  using std::adopt_lock;\n+\n+  typedef std::lock_error error_t;\n+\n+  typedef std::once_flag once_t;\n+}"}, {"sha": "51bee1b2ac9d5c77818e5be9fb628621111d9b93", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/requirements/explicit_instantiation.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+namespace std\n+{\n+  template class lock_guard<mutex>;\n+}"}, {"sha": "f38ee5dc77123d735582b569fe8dfea4e07b2ad8", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/requirements/typedefs.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::lock_guard<std::mutex> test_type;\n+  typedef test_type::mutex_type mutex_type;\n+}"}, {"sha": "fca1ffa4740c470b48a7b44a833bc727d4415fda", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "650dc967195c2e1edd9d8b04d838e42f27f2c0a7", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2;\n+  m1 = m2;\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 113 } "}, {"sha": "82d5e5eb4e77f3f0665c4b18fbde929d5b79e959", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2(m1);\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 112 } "}, {"sha": "6fad4b5a69455ef1d1750512d809adbd75c33272", "filename": "libstdc++-v3/testsuite/30_threads/mutex/dest/destructor_locked.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // Destroying locked mutex raises system error, or undefined.\n+      // POSIX == may fail with EBUSY.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3ca6b4af880b89507e68cea36213bbea96d6b423", "filename": "libstdc++-v3/testsuite/30_threads/mutex/lock/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+\n+      // Lock already locked mutex, should be ok.\n+      // XXX\n+      try\n+\t{\n+\t  m.lock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8f3034a291dd76f62f51d705c18470d398342f40", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      mutex_type::native_handle_type n = m.native_handle();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "225539958de9b908ee3f90787d6015b7a65ed424", "filename": "libstdc++-v3/testsuite/30_threads/mutex/requirements/typedefs.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-18 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::mutex test_type;\n+  typedef test_type::native_handle_type type;\n+}"}, {"sha": "20a3caa39e3cf59730053c497cd0cd6cc43742f7", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "617a6525615084b23a6f481392b59aae4b631966", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/2.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock();\n+\t  VERIFY( b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "1a157290ee7592945217a427bc8fd8e41b052218", "filename": "libstdc++-v3/testsuite/30_threads/mutex/unlock/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+\n+  try \n+    {\n+      // Unlock mutex that hasn't been locked.\n+      mutex_type m;\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // POSIX == EPERM\n+      VERIFY( true );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "eb76d11a3296bbdc33bf419a3d72788486f3f1fe", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "5d83a708e5848483484a435b32f16333facf8358", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::recursive_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2;\n+  m1 = m2;\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 177 } "}, {"sha": "b0d0b9d4a1ad03e1ea9020be8373c0bc6ee14964", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::recursive_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2(m1);\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 176 } "}, {"sha": "3586cfa5398c719a89df92926fedd9b5e29562ea", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // Destroying locked mutex raises system error, or undefined.\n+      // POSIX == may fail with EBUSY.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "d28513fc628296179fd271e0145d690e4114bec1", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      mutex_type::native_handle_type n = m.native_handle();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "6b7c3cf724cae9be1c6b71a8dd20849cc8df41a5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/requirements/typedefs.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-18 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::recursive_mutex test_type;\n+  typedef test_type::native_handle_type type;\n+}"}, {"sha": "594d8291a09d192735eeb3302349291d5feaf10d", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/requirements/explicit_instantiation.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+namespace std\n+{\n+  template class unique_lock<mutex>;\n+}"}, {"sha": "5933afe8d0d597a57f862ce00114be22d9403b7c", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/requirements/typedefs.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a97d242cbeacf50a83122b0b7aa32c86cebdc0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc?ref=68a97d242cbeacf50a83122b0b7aa32c86cebdc0", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::unique_lock<std::mutex> test_type;\n+  typedef test_type::mutex_type mutex_type;\n+}"}]}