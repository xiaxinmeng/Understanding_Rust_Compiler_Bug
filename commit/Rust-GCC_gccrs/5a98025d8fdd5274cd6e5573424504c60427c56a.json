{"sha": "5a98025d8fdd5274cd6e5573424504c60427c56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5ODAyNWQ4ZmRkNTI3NGNkNmU1NTczNDI0NTA0YzYwNDI3YzU2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-06T11:24:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-06T11:24:36Z"}, "message": "re PR sanitizer/85213 (-fsanitize=undefined internal compiler error: in fold_convert_loc, at fold-const.c:2402)\n\n\tPR sanitizer/85213\n\t* fold-const.c (twoval_comparison_p): Remove SAVE_P argument and don't\n\tlook through SAVE_EXPRs with non-side-effects argument.  Adjust\n\trecursive calls.\n\t(fold_comparison): Adjust twoval_comparison_p caller, don't handle\n\tsave_p here.\n\n\t* c-c++-common/ubsan/pr85213.c: New test.\n\nFrom-SVN: r259167", "tree": {"sha": "75c14130ed8e38050878d33603b17007c92d9f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c14130ed8e38050878d33603b17007c92d9f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a98025d8fdd5274cd6e5573424504c60427c56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98025d8fdd5274cd6e5573424504c60427c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a98025d8fdd5274cd6e5573424504c60427c56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98025d8fdd5274cd6e5573424504c60427c56a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ca838330b632ebbe339a65d194afb0d863ddc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca838330b632ebbe339a65d194afb0d863ddc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca838330b632ebbe339a65d194afb0d863ddc21"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "654a0aa28b4ac206b085235c98b6c22004045223", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a98025d8fdd5274cd6e5573424504c60427c56a", "patch": "@@ -1,3 +1,12 @@\n+2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/85213\n+\t* fold-const.c (twoval_comparison_p): Remove SAVE_P argument and don't\n+\tlook through SAVE_EXPRs with non-side-effects argument.  Adjust\n+\trecursive calls.\n+\t(fold_comparison): Adjust twoval_comparison_p caller, don't handle\n+\tsave_p here.\n+\n 2018-04-06  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85180"}, {"sha": "3134f8e638320d4b4c6bf5a7a598080672b657c6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5a98025d8fdd5274cd6e5573424504c60427c56a", "patch": "@@ -115,7 +115,7 @@ static tree negate_expr (tree);\n static tree associate_trees (location_t, tree, tree, enum tree_code, tree);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n-static int twoval_comparison_p (tree, tree *, tree *, int *);\n+static int twoval_comparison_p (tree, tree *, tree *);\n static tree eval_subst (location_t, tree, tree, tree, tree, tree);\n static tree optimize_bit_field_compare (location_t, enum tree_code,\n \t\t\t\t\ttree, tree, tree);\n@@ -3549,13 +3549,12 @@ operand_equal_for_comparison_p (tree arg0, tree arg1)\n    two different values, which will be stored in *CVAL1 and *CVAL2; if\n    they are nonzero it means that some operands have already been found.\n    No variables may be used anywhere else in the expression except in the\n-   comparisons.  If SAVE_P is true it means we removed a SAVE_EXPR around\n-   the expression and save_expr needs to be called with CVAL1 and CVAL2.\n+   comparisons.  \n \n    If this is true, return 1.  Otherwise, return zero.  */\n \n static int\n-twoval_comparison_p (tree arg, tree *cval1, tree *cval2, int *save_p)\n+twoval_comparison_p (tree arg, tree *cval1, tree *cval2)\n {\n   enum tree_code code = TREE_CODE (arg);\n   enum tree_code_class tclass = TREE_CODE_CLASS (code);\n@@ -3568,39 +3567,23 @@ twoval_comparison_p (tree arg, tree *cval1, tree *cval2, int *save_p)\n \t       || code == COMPOUND_EXPR))\n     tclass = tcc_binary;\n \n-  else if (tclass == tcc_expression && code == SAVE_EXPR\n-\t   && ! TREE_SIDE_EFFECTS (TREE_OPERAND (arg, 0)))\n-    {\n-      /* If we've already found a CVAL1 or CVAL2, this expression is\n-\t two complex to handle.  */\n-      if (*cval1 || *cval2)\n-\treturn 0;\n-\n-      tclass = tcc_unary;\n-      *save_p = 1;\n-    }\n-\n   switch (tclass)\n     {\n     case tcc_unary:\n-      return twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2, save_p);\n+      return twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2);\n \n     case tcc_binary:\n-      return (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2, save_p)\n-\t      && twoval_comparison_p (TREE_OPERAND (arg, 1),\n-\t\t\t\t      cval1, cval2, save_p));\n+      return (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2)\n+\t      && twoval_comparison_p (TREE_OPERAND (arg, 1), cval1, cval2));\n \n     case tcc_constant:\n       return 1;\n \n     case tcc_expression:\n       if (code == COND_EXPR)\n-\treturn (twoval_comparison_p (TREE_OPERAND (arg, 0),\n-\t\t\t\t     cval1, cval2, save_p)\n-\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 1),\n-\t\t\t\t\tcval1, cval2, save_p)\n-\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 2),\n-\t\t\t\t\tcval1, cval2, save_p));\n+\treturn (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2)\n+\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 1), cval1, cval2)\n+\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 2), cval1, cval2));\n       return 0;\n \n     case tcc_comparison:\n@@ -8781,9 +8764,8 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n   if (TREE_CODE (arg1) == INTEGER_CST && TREE_CODE (arg0) != INTEGER_CST)\n     {\n       tree cval1 = 0, cval2 = 0;\n-      int save_p = 0;\n \n-      if (twoval_comparison_p (arg0, &cval1, &cval2, &save_p)\n+      if (twoval_comparison_p (arg0, &cval1, &cval2)\n \t  /* Don't handle degenerate cases here; they should already\n \t     have been handled anyway.  */\n \t  && cval1 != 0 && cval2 != 0\n@@ -8856,12 +8838,6 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t\t  return omit_one_operand_loc (loc, type, integer_one_node, arg0);\n \t\t}\n \n-\t      if (save_p)\n-\t\t{\n-\t\t  tem = save_expr (build2 (code, type, cval1, cval2));\n-\t\t  protected_set_expr_location (tem, loc);\n-\t\t  return tem;\n-\t\t}\n \t      return fold_build2_loc (loc, code, type, cval1, cval2);\n \t    }\n \t}"}, {"sha": "60d0484fc6d98db0d61f6c29ffea4b96a15f46a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a98025d8fdd5274cd6e5573424504c60427c56a", "patch": "@@ -1,3 +1,8 @@\n+2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/85213\n+\t* c-c++-common/ubsan/pr85213.c: New test.\n+\n 2018-04-06  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85180"}, {"sha": "8a6be81d20fa5eb9f2a29e05316c732a5072d02a", "filename": "gcc/testsuite/c-c++-common/ubsan/pr85213.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr85213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a98025d8fdd5274cd6e5573424504c60427c56a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr85213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr85213.c?ref=5a98025d8fdd5274cd6e5573424504c60427c56a", "patch": "@@ -0,0 +1,9 @@\n+/* PR sanitizer/85213 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fsanitize=undefined -fcompare-debug\" } */\n+\n+int\n+foo (int x)\n+{\n+  return (__builtin_expect (({ x != 0; }) ? 0 : 1, 3) == 0) * -1 << 0;\n+}"}]}