{"sha": "26352f47241ad682ee92fef24a2c5f138ddfea8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNTJmNDcyNDFhZDY4MmVlOTJmZWYyNGEyYzVmMTM4ZGRmZWE4Zg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2009-10-14T00:01:37Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2009-10-14T00:01:37Z"}, "message": "re PR rtl-optimization/38948 (unrecognizable insn, postreload.c:395)\n\n\tPR target/38948\n\t* gcc.dg/torture/pr38948.c: New test.\n\nFrom-SVN: r152741", "tree": {"sha": "79e9b01cb2ad6657259f0bb8cab6b9fbc7f64692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e9b01cb2ad6657259f0bb8cab6b9fbc7f64692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26352f47241ad682ee92fef24a2c5f138ddfea8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26352f47241ad682ee92fef24a2c5f138ddfea8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26352f47241ad682ee92fef24a2c5f138ddfea8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26352f47241ad682ee92fef24a2c5f138ddfea8f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83907fddfa147786b3e1723007d6d3fb7c4bbc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83907fddfa147786b3e1723007d6d3fb7c4bbc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83907fddfa147786b3e1723007d6d3fb7c4bbc20"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "55a49e95b153599ab1537435d061b10cea4775ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26352f47241ad682ee92fef24a2c5f138ddfea8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26352f47241ad682ee92fef24a2c5f138ddfea8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26352f47241ad682ee92fef24a2c5f138ddfea8f", "patch": "@@ -1,3 +1,8 @@\n+2009-10-14  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/38948\n+\t* gcc.dg/torture/pr38948.c: New test.\n+\n 2009-10-13  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gfortran.dg/vect/fast-math-pr38968.f90: Add timeout."}, {"sha": "98ed493cbd748670badfb19feea023e7928e0259", "filename": "gcc/testsuite/gcc.dg/torture/pr38948.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26352f47241ad682ee92fef24a2c5f138ddfea8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26352f47241ad682ee92fef24a2c5f138ddfea8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c?ref=26352f47241ad682ee92fef24a2c5f138ddfea8f", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-options \"-fno-tree-sra\" } */\n+/* { dg-options \"-fno-tree-sra -march=v32\" { target cris-*-* } } */\n+typedef unsigned char byte;\n+typedef unsigned int uint;\n+typedef int bool;\n+typedef struct gs_const_string_s\n+{\n+  const byte *data;\n+}\n+gs_const_string;\n+struct gs_matrix_s\n+{\n+  float xx, xy, yx, yy, tx, ty;\n+};\n+typedef struct gs_matrix_s gs_matrix;\n+typedef long fixed;\n+typedef struct gs_fixed_point_s\n+{\n+  fixed x, y;\n+}\n+gs_fixed_point;\n+typedef struct gs_matrix_fixed_s\n+{\n+  int x;\n+}\n+gs_matrix_fixed;\n+static int\n+append_simple (const byte * glyph, const gs_matrix_fixed * pmat, void * ppath)\n+{\n+  int numContours =\n+    (int) (((((uint) ((glyph)[0]) << 8) + (glyph)[1]) ^ 0x8000) - 0x8000);\n+  const byte *pends = glyph + 10;\n+  int code = 0;\n+  {\n+    uint i = 0;\n+    uint np = 0;\n+    gs_fixed_point pt = {0};\n+    uint reps = 0;\n+    for (i = 0, np = 0; i < numContours; ++i)\n+      {\n+\tbool move = ((bool) 1);\n+\tuint last_point =\n+\t  (((uint) ((pends + i * 2)[0]) << 8) + (pends + i * 2)[1]);\n+\tint off_curve = 0;\n+\tgs_fixed_point cpoints[3];\n+\tfor (; np <= last_point; --reps, ++np)\n+\t  {\n+\t    if (move)\n+\t      {\n+\t\tcpoints[0] = pt;\n+\t\tmove = ((bool) 0);\n+\t      }\n+\t    else\n+\t      {\n+\t\tswitch (off_curve++)\n+\t\t  {\n+\t\t  default:\n+\t\t    cpoints[2].x = ((cpoints[1].x + pt.x) / 2);\n+\t\t    cpoints[2].y = ((cpoints[1].y + pt.y) / 2);\n+\t\t    code =\n+\t\t      gx_path_add_curve_notes (ppath,\n+\t\t\t\t\t       ((cpoints[0].x +\n+\t\t\t\t\t\t 2 * cpoints[1].x) / 3),\n+\t\t\t\t\t       ((cpoints[0].y +\n+\t\t\t\t\t\t 2 * cpoints[1].y) / 3),\n+\t\t\t\t\t       ((2 * cpoints[1].x +\n+\t\t\t\t\t\t cpoints[2].x) / 3),\n+\t\t\t\t\t       ((2 * cpoints[1].y +\n+\t\t\t\t\t\t cpoints[2].y) / 3),\n+\t\t\t\t\t       cpoints[2].x, cpoints[2].y,\n+\t\t\t\t\t       0);\n+\t\t    cpoints[0] = cpoints[2];\n+\t\t  case 0:\n+\t\t    cpoints[1] = pt;\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n+  }\n+}\n+int\n+append_outline (uint glyph_index, const gs_matrix_fixed *pmat, void *ppath)\n+{\n+  gs_const_string glyph_string = {0};\n+  int numContours = 0;\n+  numContours =\n+    (int) (((((uint) ((glyph_string.data)[0]) << 8) +\n+\t     (glyph_string.data)[1]) ^ 0x8000) - 0x8000);\n+  if (numContours >= 0)\n+    return append_simple (glyph_string.data, pmat, ppath);\n+  {\n+    uint flags = 0;\n+    do\n+      {\n+\tgs_matrix_fixed mat = {0};\n+\tgs_matrix scale_mat = {0};\n+\tgs_matrix_multiply (&scale_mat, (const gs_matrix *) &mat, (gs_matrix *) & mat);\n+      }\n+    while (flags & 32);\n+  }\n+}"}]}