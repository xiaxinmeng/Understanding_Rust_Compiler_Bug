{"sha": "c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1MmVmYmIxMDUwOGFkNzcxNGFhNWUxNGM4OWJjZmM3ZjBkMTY5Nw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-19T01:04:03Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-19T01:04:03Z"}, "message": "re PR fortran/31964 ([4.2, 4.1 only]ishftc fails with certain thrid argument)\n\n2007-05-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/31964\n\t* intrinsics/ishftc.c (ishftc4, ishftc8, ishftc16): Fix mask to handle\n\tshift of bit-size number of bits.\n\nFrom-SVN: r124846", "tree": {"sha": "e363e48aa8385b05ad91d014553d9aa4d1ea607d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e363e48aa8385b05ad91d014553d9aa4d1ea607d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c152efbb10508ad7714aa5e14c89bcfc7f0d1697/comments", "author": null, "committer": null, "parents": [{"sha": "cc25a1c4582663ccd8fce97612339d59439efbb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc25a1c4582663ccd8fce97612339d59439efbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc25a1c4582663ccd8fce97612339d59439efbb6"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "07199e75872eaac470ed57a8b4170ba00b2d46f6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c152efbb10508ad7714aa5e14c89bcfc7f0d1697/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c152efbb10508ad7714aa5e14c89bcfc7f0d1697/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "patch": "@@ -1,3 +1,9 @@\n+2007-05-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/31964\n+\t* intrinsics/ishftc.c (ishftc4, ishftc8, ishftc16): Fix mask to handle\n+\tshift of bit-size number of bits.\n+\n 2007-05-17  Tobias Burnus <burnus@net-b.de>\n \n \tPR fortran/31917"}, {"sha": "68cc4cb82c10fbf0ce0a9d946613665592db4226", "filename": "libgfortran/intrinsics/ishftc.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c152efbb10508ad7714aa5e14c89bcfc7f0d1697/libgfortran%2Fintrinsics%2Fishftc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c152efbb10508ad7714aa5e14c89bcfc7f0d1697/libgfortran%2Fintrinsics%2Fishftc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fishftc.c?ref=c152efbb10508ad7714aa5e14c89bcfc7f0d1697", "patch": "@@ -36,18 +36,22 @@ export_proto(ishftc4);\n GFC_INTEGER_4\n ishftc4 (GFC_INTEGER_4 i, GFC_INTEGER_4 shift, GFC_INTEGER_4 size)\n {\n-  GFC_INTEGER_4 mask;\n-  GFC_UINTEGER_4 bits;\n+  GFC_UINTEGER_4 mask, bits;\n \n   if (shift < 0)\n     shift = shift + size;\n \n   if (shift == 0 || shift == size)\n     return i;\n \n-  mask = (~(GFC_INTEGER_4)0) << size;\n-  bits = i & ~mask;\n-  return (i & mask) | (bits >> (size - shift)) | ((i << shift) & ~mask);\n+  /* In C, the result of the shift operator is undefined if the right operand\n+     is greater than or equal to the number of bits in the left operand. So we\n+     have to special case it for fortran.  */\n+  mask = ~((size == 32) ? (GFC_UINTEGER_4)0 : (~(GFC_UINTEGER_4)0 << size));\n+\n+  bits = i & mask;\n+  \n+  return (i & ~mask) | ((bits << shift) & mask) | (bits >> (size - shift));\n }\n \n extern GFC_INTEGER_8 ishftc8 (GFC_INTEGER_8, GFC_INTEGER_4, GFC_INTEGER_4);\n@@ -56,18 +60,22 @@ export_proto(ishftc8);\n GFC_INTEGER_8\n ishftc8 (GFC_INTEGER_8 i, GFC_INTEGER_4 shift, GFC_INTEGER_4 size)\n {\n-  GFC_INTEGER_8 mask;\n-  GFC_UINTEGER_8 bits;\n+  GFC_UINTEGER_8 mask, bits;\n \n   if (shift < 0)\n     shift = shift + size;\n \n   if (shift == 0 || shift == size)\n     return i;\n \n-  mask = (~(GFC_INTEGER_8)0) << size;\n-  bits = i & ~mask;\n-  return (i & mask) | (bits >> (size - shift)) | ((i << shift) & ~mask);\n+  /* In C, the result of the shift operator is undefined if the right operand\n+     is greater than or equal to the number of bits in the left operand. So we\n+     have to special case it for fortran.  */\n+  mask = ~((size == 64) ? (GFC_UINTEGER_8)0 : (~(GFC_UINTEGER_8)0 << size));\n+\n+  bits = i & mask;\n+  \n+  return (i & ~mask) | ((bits << shift) & mask) | (bits >> (size - shift));\n }\n \n #ifdef HAVE_GFC_INTEGER_16\n@@ -77,17 +85,21 @@ export_proto(ishftc16);\n GFC_INTEGER_16\n ishftc16 (GFC_INTEGER_16 i, GFC_INTEGER_4 shift, GFC_INTEGER_4 size)\n {\n-  GFC_INTEGER_16 mask;\n-  GFC_UINTEGER_16 bits;\n+  GFC_UINTEGER_16 mask, bits;\n \n   if (shift < 0)\n     shift = shift + size;\n \n   if (shift == 0 || shift == size)\n     return i;\n \n-  mask = (~(GFC_INTEGER_16)0) << size;\n-  bits = i & ~mask;\n-  return (i & mask) | (bits >> (size - shift)) | ((i << shift) & ~mask);\n+  /* In C, the result of the shift operator is undefined if the right operand\n+     is greater than or equal to the number of bits in the left operand. So we\n+     have to special case it for fortran.  */\n+  mask = ~((size == 128) ? (GFC_UINTEGER_16)0 : (~(GFC_UINTEGER_16)0 << size));\n+\n+  bits = i & mask;\n+  \n+  return (i & ~mask) | ((bits << shift) & mask) | (bits >> (size - shift));\n }\n #endif"}]}