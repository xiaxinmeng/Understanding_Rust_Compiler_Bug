{"sha": "9eb28a0f19b290094a76889e90bd7fefa5da6d11", "node_id": "C_kwDOANBUbNoAKDllYjI4YTBmMTliMjkwMDk0YTc2ODg5ZTkwYmQ3ZmVmYTVkYTZkMTE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-14T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-14T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "9611f3df195371d892d0cf1197a6a0d1fe300320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9611f3df195371d892d0cf1197a6a0d1fe300320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb28a0f19b290094a76889e90bd7fefa5da6d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb28a0f19b290094a76889e90bd7fefa5da6d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb28a0f19b290094a76889e90bd7fefa5da6d11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb28a0f19b290094a76889e90bd7fefa5da6d11/comments", "author": null, "committer": null, "parents": [{"sha": "f874a13ca3870a56036a90758b0d41c8c217f4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f874a13ca3870a56036a90758b0d41c8c217f4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f874a13ca3870a56036a90758b0d41c8c217f4f7"}], "stats": {"total": 188, "additions": 187, "deletions": 1}, "files": [{"sha": "7eb01ecd7d77a5aea86029e3a911c438a0a24c36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1,3 +1,102 @@\n+2021-10-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_vector_move):  Use a\n+\tpseudo intermediate when moving a SUBREG into a hard register,\n+\tby checking ix86_hardreg_mov_ok.\n+\t(ix86_expand_vector_extract): Store zero-extended SImode\n+\tintermediate in a pseudo, then set target using a SUBREG_PROMOTED\n+\tannotated subreg.\n+\t* config/i386/sse.md (mov<VMOVE>_internal): Prevent CSE creating\n+\tcomplex (SUBREG) sets of (vector) hard registers before reload, by\n+\tchecking ix86_hardreg_mov_ok.\n+\n+2021-10-13  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* ctfc.h (enum ctf_dtu_d_union_enum): Remove redundant comma.\n+\n+2021-10-13  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* dwarf2ctf.c (gen_ctf_array_type): Fix typo in comment.\n+\n+2021-10-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102630\n+\t* pointer-query.cc (compute_objsize_r): Handle named address spaces.\n+\n+2021-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* collect2.c (is_lto_object_file): Release simple-object\n+\tresources, close files.\n+\n+2021-10-13  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.c (thumb2_legitimate_address_p): Use VALID_MVE_MODE\n+\twhen checking mve addressing modes.\n+\t(mve_vector_mem_operand): Fix the way we handle pre, post and offset\n+\taddressing modes.\n+\t(arm_print_operand): Fix printing of POST_ and PRE_MODIFY.\n+\t* config/arm/mve.md: Use mve_memory_operand predicate everywhere where\n+\tthere is a single Ux constraint.\n+\n+2021-10-13  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.md (muldi3): Add support for inlining 64-bit\n+\tmultiplication on 32-bit PA 1.1 and 2.0 targets.\n+\n+2021-10-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/90364\n+\t* coverage.c (build_info): Emit checksum to the global variable.\n+\t(build_info_type): Add new field for checksum.\n+\t(coverage_obj_finish): Pass object_checksum.\n+\t(coverage_init): Use 0 as checksum for .gcno files.\n+\t* gcov-dump.c (dump_gcov_file): Dump also new checksum field.\n+\t* gcov.c (read_graph_file): Read also checksum.\n+\t* doc/invoke.texi: Document the behaviour change.\n+\n+2021-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-iterator.h (gsi_iterator_update): Add GSI_LAST_NEW_STMT,\n+\tstart at integer value 2.\n+\t* gimple-iterator.c (gsi_insert_seq_nodes_before): Update\n+\tthe iterator for GSI_LAST_NEW_STMT.\n+\t(gsi_insert_seq_nodes_after): Likewise.\n+\t* tree-if-conv.c (predicate_statements): Use GSI_LAST_NEW_STMT.\n+\t* tree-ssa.c (execute_update_addresses_taken): Correct bogus\n+\targuments to gsi_replace.\n+\n+2021-10-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102688\n+\t* common.opt: Use EnabledBy instead of detection in\n+\tfinish_options and process_options.\n+\t* opts.c (finish_options): Remove handling of\n+\tx_flag_unroll_all_loops.\n+\t* toplev.c (process_options): Likewise for flag_web and\n+\tflag_rename_registers.\n+\n+2021-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102659\n+\t* tree-if-conv.c (need_to_rewrite_undefined): New flag.\n+\t(if_convertible_gimple_assign_stmt_p): Mark the loop for\n+\trewrite when stmts with undefined behavior on integer\n+\toverflow appear.\n+\t(combine_blocks): Predicate also when we need to rewrite stmts.\n+\t(predicate_statements): Rewrite affected stmts to something\n+\twith well-defined behavior on overflow.\n+\t(tree_if_conversion): Initialize need_to_rewrite_undefined.\n+\n+2021-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/102714\n+\t* ipa-sra.c (ptr_parm_has_nonarg_uses): Fix volatileness\n+\tcheck.\n+\n+2021-10-13  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* dwarf2ctf.c: Fix typo in comment.\n+\n 2021-10-12  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR target/101985"}, {"sha": "4f146eef94c0a56fddfb0bbd66eb6cbcc64fc42d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1 +1 @@\n-20211013\n+20211014"}, {"sha": "f5d5d21d5b0f740379a5f9b6a463f6838ef1904f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1,3 +1,9 @@\n+2021-10-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle ancestor modifier,\n+\tavoid ICE for GFC_OMP_ATOMIC_SWAP.\n+\t* gfortran.h (gfc_omp_clauses): Change 'anecestor' into a bitfield.\n+\n 2021-10-12  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/102541"}, {"sha": "885e3835c77de9966c0ae633a0162a8c69b7e187", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1,3 +1,34 @@\n+2021-10-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102630\n+\t* gcc.target/i386/addr-space-2.c: Add -Wall.\n+\t* gcc.target/i386/addr-space-3.c: New test.\n+\n+2021-10-13  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/mve.exp: Make it test main directory.\n+\t* gcc.target/arm/mve/mve_load_memory_modes.c: New test.\n+\t* gcc.target/arm/mve/mve_store_memory_modes.c: New test.\n+\n+2021-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102659\n+\t* gcc.dg/torture/pr69760.c: Adjust the testcase.\n+\t* gcc.target/i386/avx2-vect-mask-store-move1.c: Expect to move\n+\tthe conversions to unsigned as well.\n+\n+2021-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/102714\n+\t* gcc.dg/ipa/pr102714.c: New testcase.\n+\n+2021-10-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/102658\n+\t* gcc.target/powerpc/dform-1.c: Adjust as vectorization enabled at O2.\n+\t* gcc.target/powerpc/dform-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80510-2.c: Likewise.\n+\n 2021-10-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/format/c11-printf-1.c, gcc.dg/format/c11-scanf-1.c,"}, {"sha": "ae9007dcc0c4aa80d5d95efec5cb7a6b01011c6a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1,3 +1,12 @@\n+2021-10-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/90364\n+\t* libgcov-driver.c (merge_one_data): Skip timestamp and verify\n+\tchecksums.\n+\t(write_one_data): Write also checksum.\n+\t* libgcov-util.c (read_gcda_file): Read also checksum field.\n+\t* libgcov.h (struct gcov_info): Add new field.\n+\n 2021-10-08  Ian Lance Taylor  <iant@golang.org>\n \n \t* config/i386/morestack.S: Use .init_array for constructor if"}, {"sha": "b7b0259043d68d22b99ba934bdf1625bc28c5afa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb28a0f19b290094a76889e90bd7fefa5da6d11/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb28a0f19b290094a76889e90bd7fefa5da6d11/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9eb28a0f19b290094a76889e90bd7fefa5da6d11", "patch": "@@ -1,3 +1,44 @@\n+2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (__detail::__is_contiguous): Add\n+\tpartial specializations for pointers and __normal_iterator.\n+\n+2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/filesystem/path/construct/102592.C: Moved to...\n+\t* testsuite/27_io/filesystem/path/construct/102592.cc: ...here.\n+\t* testsuite/28_regex/match_results/102667.C: Moved to...\n+\t* testsuite/28_regex/match_results/102667.cc: ...here.\n+\n+2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (__detail::__is_contiguous): New\n+\tvariable template to identify contiguous iterators.\n+\t(__detail::__unified_char8_t): New alias template to decide when\n+\tto treat char8_t as char without encoding conversion.\n+\t(__detail::__effective_range(const basic_string<C,T>&)): Use\n+\tstd::char_traits<C> for returned string view.\n+\t(__detail::__effective_range(const basic_string_view<C,T>&)):\n+\tLikewise.\n+\t(__detail::__effective_range(const Source&)): Use\n+\t__is_contiguous to detect mode cases of contiguous iterators.\n+\tUse __unified_char8_t to return a std::string instead of\n+\tstd::u8string.\n+\n+2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102592\n+\t* include/bits/fs_path.h (path::path(Iter, Iter, format))\n+\t(path::append(Iter, Iter), path::concat(Iter, Iter)): Call\n+\t__string_from_range directly, instead of two-argument overload\n+\tof _S_convert.\n+\t(path::_S_convert(Iter, Iter)): Remove.\n+\t* testsuite/27_io/filesystem/path/construct/102592.C: New test.\n+\n+2021-10-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (__terminate): Add extern \"C++\".\n+\n 2021-10-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/tuple/comparison_operators/overloaded.cc:"}]}