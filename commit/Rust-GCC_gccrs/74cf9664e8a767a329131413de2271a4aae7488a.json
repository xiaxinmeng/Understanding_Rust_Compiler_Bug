{"sha": "74cf9664e8a767a329131413de2271a4aae7488a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjZjk2NjRlOGE3NjdhMzI5MTMxNDEzZGUyMjcxYTRhYWU3NDg4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-17T12:00:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-17T12:00:44Z"}, "message": "PR77987 Fix unique_ptr<T[], D>::reset(U) for T != U\n\n\tPR libstdc++/77987\n\t* include/bits/unique_ptr.h (unique_ptr<T[], D>::reset<U>(U)): Copy\n\tvalue to pointer of the correct type to swap, to support conversions\n\tallowed by LWG 2118 / N4089.\n\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Move test for\n\tincompatible deleters from ...\n\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: ... here.\n\t* testsuite/20_util/unique_ptr/modifiers/cv_qual.cc: Move tests for\n\tincompatible pointers to ...\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: ... here. Move\n\tdestructor definition to base class. Test for invalid derived-to-base\n\tconversion.\n\nFrom-SVN: r241235", "tree": {"sha": "0ef4ef2ed5d22135910b345867ec3a81dc9c5f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef4ef2ed5d22135910b345867ec3a81dc9c5f17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74cf9664e8a767a329131413de2271a4aae7488a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cf9664e8a767a329131413de2271a4aae7488a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74cf9664e8a767a329131413de2271a4aae7488a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cf9664e8a767a329131413de2271a4aae7488a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594ef205ae28bdd8d32ff141b41cc08158b84552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594ef205ae28bdd8d32ff141b41cc08158b84552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594ef205ae28bdd8d32ff141b41cc08158b84552"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "ed572815d6447bc82932431a121f0ff1261ba276", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -1,5 +1,18 @@\n 2016-10-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/77987\n+\t* include/bits/unique_ptr.h (unique_ptr<T[], D>::reset<U>(U)): Copy\n+\tvalue to pointer of the correct type to swap, to support conversions\n+\tallowed by LWG 2118 / N4089.\n+\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Move test for\n+\tincompatible deleters from ...\n+\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: ... here.\n+\t* testsuite/20_util/unique_ptr/modifiers/cv_qual.cc: Move tests for\n+\tincompatible pointers to ...\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: ... here. Move\n+\tdestructor definition to base class. Test for invalid derived-to-base\n+\tconversion.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update status.\n \t* doc/html/*: Regenerate.\n \t* include/bits/deque.tcc (deque::emplace_front, deque::emplace_back):"}, {"sha": "a36794d632ef278780e82c88ff895ebfbd3923d2", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -610,10 +610,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       reset(_Up __p) noexcept\n       {\n+\tpointer __ptr = __p;\n \tusing std::swap;\n-\tswap(std::get<0>(_M_t), __p);\n-\tif (__p != nullptr)\n-\t  get_deleter()(__p);\n+\tswap(std::get<0>(_M_t), __ptr);\n+\tif (__ptr != nullptr)\n+\t  get_deleter()(__ptr);\n       }\n \n       void reset(nullptr_t = nullptr) noexcept"}, {"sha": "9142e6146b4ffaf6511285a47fe62cd523532e2e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign_neg.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -48,4 +48,25 @@ test03()\n   std::unique_ptr<int[2]> p2 = p1; // { dg-error \"deleted\" }\n }\n \n+struct base_pointer { operator base*() const { return nullptr; } };\n+\n+template<typename T>\n+struct deleter\n+{\n+  deleter() = default;\n+  template<typename U>\n+    deleter(const deleter<U>) { }\n+  typedef T pointer;\n+  void operator()(T) const { }\n+};\n+\n+void\n+test04()\n+{\n+  // Disallow conversions from incompatible deleter\n+  std::unique_ptr<derived[], deleter<base_pointer>> p;\n+  std::unique_ptr<base[], deleter<base*>> upA;\n+  upA = std::move(p);  // { dg-error \"no match\" }\n+}\n+\n // { dg-prune-output \"include\" }"}, {"sha": "7add5a9c0a3ec26782054c0a8d27200ca836739e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/cv_qual.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -65,26 +65,3 @@ test03()\n   std::unique_ptr<const volatile A[]> cvA;\n   cvA = std::move(upA);\n }\n-\n-struct A_pointer { operator A*() const { return nullptr; } };\n-\n-template<typename T>\n-struct deleter\n-{\n-  deleter() = default;\n-  template<typename U>\n-    deleter(const deleter<U>) { }\n-  typedef T pointer;\n-  void operator()(T) const { }\n-};\n-\n-void\n-test04()\n-{\n-  // Disallow conversions from incompatible deleter\n-  std::unique_ptr<B[], deleter<A_pointer>> p;\n-  std::unique_ptr<A[], deleter<A*>> upA;\n-  upA = std::move(p);  // { dg-error \"no match\" }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 537 }\n-  // { dg-error \"no matching function\" \"\" { target *-*-* } 614 }\n-}"}, {"sha": "f92949b441ecdf79c0f564cb4f019d0279b1a724", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/cv_qual.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -86,15 +86,4 @@ test07()\n   vA2.reset((A*)p);\n   std::unique_ptr<const volatile A[]> cvA2;\n   cvA2.reset((A*)p);\n-  // Disallow conversions from user-defined pointer-like types\n-  // for the array version\n-  std::unique_ptr<A[]> upA3;\n-  upA3.reset(p); // { dg-error \"no matching function\" }\n-  std::unique_ptr<const A[]> cA3;\n-  cA3.reset(p); // { dg-error \"no matching function\" }\n-  std::unique_ptr<volatile A[]> vA3;\n-  vA3.reset(p); // { dg-error \"no matching function\" }\n-  std::unique_ptr<const volatile A[]> cvA3;\n-  cvA3.reset(p); // { dg-error \"no matching function\" }\n-  // { dg-error \"no matching function\" \"\" { target *-*-* } 614 }\n }"}, {"sha": "cb5f2e6a1c5bd259257027174c1c7a0f4535264e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf9664e8a767a329131413de2271a4aae7488a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=74cf9664e8a767a329131413de2271a4aae7488a", "patch": "@@ -21,17 +21,37 @@\n \n struct A\n {\n+  virtual ~A() { }\n };\n \n struct B : A\n {\n-  virtual ~B() { }\n };\n \n-void test01()\n+void\n+test01()\n {\n   std::unique_ptr<B[]> up;\n-  up.reset(new A[3]);\t\t// { dg-error \"\" }\n+  up.reset(new A[3]);\t\t// { dg-error \"no matching function\" }\n+\n+  std::unique_ptr<A[]> up2;\n+  up2.reset(new B[3]);\t\t// { dg-error \"no matching function\" }\n }\n \n-// { dg-prune-output \"include\" }\n+struct A_pointer { operator A*() const { return nullptr; } };\n+\n+void\n+test02()\n+{\n+  A_pointer p;\n+  // Disallow conversions from user-defined pointer-like types\n+  // for the array version\n+  std::unique_ptr<A[]> upA3;\n+  upA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const A[]> cA3;\n+  cA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<volatile A[]> vA3;\n+  vA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const volatile A[]> cvA3;\n+  cvA3.reset(p); // { dg-error \"no matching function\" }\n+}"}]}