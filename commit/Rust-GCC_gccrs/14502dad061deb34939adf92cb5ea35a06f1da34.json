{"sha": "14502dad061deb34939adf92cb5ea35a06f1da34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1MDJkYWQwNjFkZWIzNDkzOWFkZjkyY2I1ZWEzNWEwNmYxZGEzNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-11-29T17:33:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-11-29T17:33:59Z"}, "message": "predicates.md (gpc_reg_operand): Check invalid_e500_subreg.\n\n\t* config/rs6000/predicates.md (gpc_reg_operand): Check\n\tinvalid_e500_subreg.\n\t* config/rs6000/rs6000.c (invalid_e500_subreg): Don't allow any\n\tSImode subregs of SPE vectors.\n\t* config/rs6000/rs6000.md (insv): Fail for invalid E500 subregs.\n\t* jump.c (true_regnum): Require subregs to satisfy\n\tsubreg_offset_representable_p.\n\nFrom-SVN: r119324", "tree": {"sha": "e78160a35391b3a8c25d75660bc057354bc86734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e78160a35391b3a8c25d75660bc057354bc86734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14502dad061deb34939adf92cb5ea35a06f1da34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14502dad061deb34939adf92cb5ea35a06f1da34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14502dad061deb34939adf92cb5ea35a06f1da34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14502dad061deb34939adf92cb5ea35a06f1da34/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d315c4a9f8367f9452ff6afd3a49d9a3b6fa3105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d315c4a9f8367f9452ff6afd3a49d9a3b6fa3105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d315c4a9f8367f9452ff6afd3a49d9a3b6fa3105"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "9bef3c87451b9b3442ba436823688c1ff8857f4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14502dad061deb34939adf92cb5ea35a06f1da34", "patch": "@@ -1,3 +1,13 @@\n+2006-11-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/predicates.md (gpc_reg_operand): Check\n+\tinvalid_e500_subreg.\n+\t* config/rs6000/rs6000.c (invalid_e500_subreg): Don't allow any\n+\tSImode subregs of SPE vectors.\n+\t* config/rs6000/rs6000.md (insv): Fail for invalid E500 subregs.\n+\t* jump.c (true_regnum): Require subregs to satisfy\n+\tsubreg_offset_representable_p.\n+\n 2006-11-29  Daniel Berlin  <dberlin@dberlin.org>\n \t    Steven Bosscher <stevenb.gcc@gmail.com>\n "}, {"sha": "6aefe2dd0c989835466d6a58bc2e46a6ecf732ed", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=14502dad061deb34939adf92cb5ea35a06f1da34", "patch": "@@ -84,10 +84,12 @@\n ;; Return 1 if op is a register that is not special.\n (define_predicate \"gpc_reg_operand\"\n    (and (match_operand 0 \"register_operand\")\n-\t(match_test \"GET_CODE (op) != REG\n-\t\t     || (REGNO (op) >= ARG_POINTER_REGNUM\n-\t\t\t && !XER_REGNO_P (REGNO (op)))\n-\t\t     || REGNO (op) < MQ_REGNO\")))\n+\t(match_test \"(GET_CODE (op) != REG\n+\t\t      || (REGNO (op) >= ARG_POINTER_REGNUM\n+\t\t\t  && !XER_REGNO_P (REGNO (op)))\n+\t\t      || REGNO (op) < MQ_REGNO)\n+\t\t     && !((TARGET_E500_DOUBLE || TARGET_SPE)\n+\t\t\t  && invalid_e500_subreg (op, mode))\")))\n \n ;; Return 1 if op is a register that is a condition register field.\n (define_predicate \"cc_reg_operand\""}, {"sha": "d607de26f840e000371c70971eb9e5e2f8806f05", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=14502dad061deb34939adf92cb5ea35a06f1da34", "patch": "@@ -2737,8 +2737,7 @@ invalid_e500_subreg (rtx op, enum machine_mode mode)\n       && GET_CODE (op) == SUBREG\n       && mode == SImode\n       && REG_P (SUBREG_REG (op))\n-      && SPE_VECTOR_MODE (GET_MODE (SUBREG_REG (op)))\n-      && SUBREG_BYTE (op) != 4)\n+      && SPE_VECTOR_MODE (GET_MODE (SUBREG_REG (op))))\n     return true;\n \n   return false;"}, {"sha": "7e1d0a193268f94c7355b171efafc846c5a07041", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=14502dad061deb34939adf92cb5ea35a06f1da34", "patch": "@@ -3419,9 +3419,12 @@\n {\n   /* Do not handle 16/8 bit structures that fit in HI/QI modes directly, since\n      the (SUBREG:SI (REG:HI xxx)) that is otherwise generated can confuse the\n-     compiler if the address of the structure is taken later.  */\n+     compiler if the address of the structure is taken later.  Likewise, do\n+     not handle invalid E500 subregs.  */\n   if (GET_CODE (operands[0]) == SUBREG\n-      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[0]))) < UNITS_PER_WORD))\n+      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[0]))) < UNITS_PER_WORD\n+\t  || ((TARGET_E500_DOUBLE || TARGET_SPE)\n+\t      && invalid_e500_subreg (operands[0], GET_MODE (operands[0])))))\n     FAIL;\n \n   if (TARGET_POWERPC64 && GET_MODE (operands[0]) == DImode)"}, {"sha": "567017004f5df8d6558aecef4a2ab4b476c5d4c2", "filename": "gcc/jump.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14502dad061deb34939adf92cb5ea35a06f1da34/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=14502dad061deb34939adf92cb5ea35a06f1da34", "patch": "@@ -1951,7 +1951,11 @@ true_regnum (rtx x)\n   if (GET_CODE (x) == SUBREG)\n     {\n       int base = true_regnum (SUBREG_REG (x));\n-      if (base >= 0 && base < FIRST_PSEUDO_REGISTER)\n+      if (base >= 0\n+\t  && base < FIRST_PSEUDO_REGISTER\n+\t  && subreg_offset_representable_p (REGNO (SUBREG_REG (x)),\n+\t\t\t\t\t    GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t\t    SUBREG_BYTE (x), GET_MODE (x)))\n \treturn base + subreg_regno_offset (REGNO (SUBREG_REG (x)),\n \t\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n \t\t\t\t\t   SUBREG_BYTE (x), GET_MODE (x));"}]}