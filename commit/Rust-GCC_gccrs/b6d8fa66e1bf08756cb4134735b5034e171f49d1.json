{"sha": "b6d8fa66e1bf08756cb4134735b5034e171f49d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkOGZhNjZlMWJmMDg3NTZjYjQxMzQ3MzViNTAzNGUxNzFmNDlkMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-15T08:20:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-15T09:13:21Z"}, "message": "tree-optimization/102318 - reduction epilogue re-use\n\nThis refines the fix for PR102226 to do the mode conversion\nfrom V2DI to VNx2DI separately from the sign-conversion, retaining\nthe signedness of the saved accumulator as before the original fix.\n\n2021-09-15  Richard Biener <rguenther@suse.de>\n\n\tPR tree-optimization/102318\n\t* tree-vect-loop.c (vect_transform_cycle_phi): Revert\n\tprevious change and do the mode conversion separately from\n\tthe sign conversion.\n\n\t* gcc.dg/vect/pr102318.c: New testcase.", "tree": {"sha": "a3c40c775922f33cc28c3dafb3ffacb4b3fee4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3c40c775922f33cc28c3dafb3ffacb4b3fee4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d8fa66e1bf08756cb4134735b5034e171f49d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d8fa66e1bf08756cb4134735b5034e171f49d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d8fa66e1bf08756cb4134735b5034e171f49d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d8fa66e1bf08756cb4134735b5034e171f49d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1e28878a228b6c4a0872e56d97ac88971b7725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e28878a228b6c4a0872e56d97ac88971b7725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e28878a228b6c4a0872e56d97ac88971b7725"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "cc58efacecdf82fbd6b811443bb5c560e4734745", "filename": "gcc/testsuite/gcc.dg/vect/pr102318.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d8fa66e1bf08756cb4134735b5034e171f49d1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d8fa66e1bf08756cb4134735b5034e171f49d1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102318.c?ref=b6d8fa66e1bf08756cb4134735b5034e171f49d1", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+\n+void\n+vec_slp_int16_t (short int *restrict a, short int *restrict b, int n)\n+{\n+  short int x0 = b[0];\n+  short int x1 = b[1];\n+  short int x2 = b[2];\n+  short int x3 = b[3];\n+  for (int i = 0; i < n; ++i)\n+  {\n+    x0 += a[i * 4];\n+    x1 += a[i * 4 + 1];\n+    x2 += a[i * 4 + 2];\n+    x3 += a[i * 4 + 3];\n+  }\n+  b[0] = x0;\n+  b[1] = x1;\n+  b[2] = x2;\n+  b[3] = x3;\n+}"}, {"sha": "5a5b8da2e771a1dd204f22a6447eba96bb3b352c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d8fa66e1bf08756cb4134735b5034e171f49d1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d8fa66e1bf08756cb4134735b5034e171f49d1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b6d8fa66e1bf08756cb4134735b5034e171f49d1", "patch": "@@ -7755,11 +7755,20 @@ vect_transform_cycle_phi (loop_vec_info loop_vinfo,\n \t\t\t\t\t\t  (reduc_info),\n \t\t\t\t\t\t&stmts);\n \t    }\n-\t  if (!useless_type_conversion_p (vectype_out, TREE_TYPE (def)))\n-\t    def = gimple_convert (&stmts, vectype_out, def);\n+\t  /* The epilogue loop might use a different vector mode, like\n+\t     VNx2DI vs. V2DI.  */\n+\t  if (TYPE_MODE (vectype_out) != TYPE_MODE (TREE_TYPE (def)))\n+\t    {\n+\t      tree reduc_type = build_vector_type_for_mode\n+\t\t(TREE_TYPE (TREE_TYPE (def)), TYPE_MODE (vectype_out));\n+\t      def = gimple_convert (&stmts, reduc_type, def);\n+\t    }\n \t  /* Adjust the input so we pick up the partially reduced value\n \t     for the skip edge in vect_create_epilog_for_reduction.  */\n \t  accumulator->reduc_input = def;\n+\t  /* And the reduction could be carried out using a different sign.  */\n+\t  if (!useless_type_conversion_p (vectype_out, TREE_TYPE (def)))\n+\t    def = gimple_convert (&stmts, vectype_out, def);\n \t  if (loop_vinfo->main_loop_edge)\n \t    {\n \t      /* While we'd like to insert on the edge this will split"}]}