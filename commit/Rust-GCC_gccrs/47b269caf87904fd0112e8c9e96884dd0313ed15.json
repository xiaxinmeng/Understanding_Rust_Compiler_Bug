{"sha": "47b269caf87904fd0112e8c9e96884dd0313ed15", "node_id": "C_kwDOANBUbNoAKDQ3YjI2OWNhZjg3OTA0ZmQwMTEyZThjOWU5Njg4NGRkMDMxM2VkMTU", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2023-01-11T10:22:34Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2023-01-23T17:26:53Z"}, "message": "modula-2, driver, Front end: Revise handling of I and L paths [PR108182].\n\nThe adds the includes in the FE as done in other GCC languages.\nIt also revises the library handling to avoid additional -L options\nfrom hiding LIBDIR.\n\nFor the include/import paths as presented to the front end initialisation,\nwe capture them and then arrange to emit the 'standard library' paths in\nthe same order as specified for C.\n\nThe specs are tidied up.\n\nThe use of the internal prefix also fixes searching in a relocated compiler.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR modula2/108182\n\tPR modula2/108480\n\ngcc/m2/ChangeLog:\n\n\t* Make-lang.in: Pass libsubdir to the language init\n\tbuild.\n\t* gm2-lang.cc (INCLUDE_VECTOR): Define.\n\t(add_one_import_path): New.\n\t(add_m2_import_paths): New.\n\t(gm2_langhook_post_options): Arrange to add the include\n\tpaths (and add the system ones) in the same order as C\n\tuses.\n\t* gm2spec.cc (build_archive_path): Remove.\n\t(add_default_combination): Remove.\n\t(add_default_archives): Remove.\n\t(add_default_libs): We no longer need a '-L' option, just\n\temit the -l and each library in use.\n\t(build_include_path): Remove.\n\t(add_include): Remove.\n\t(add_default_includes): Remove.\n\t(library_installed): Remove.\n\t(check_valid_library): Remove.\n\t(check_valid_list): Remove.\n\t(convert_abbreviation): Diagnose unhandled cases.\n\t(lang_specific_driver): Skip options where we will add back\n\ta validated version.\n\t* lang-specs.h (M2CPP): Reformat, append %I when -fcpp is not\n\tin use.  Revise the cc1gm2 spec to omit mentioning options that\n\tare handled in the c pre-processor line.\n\t* lang.opt: Allow preprocessing and path options as input to the\n\tcc1gm2 invocation, so that they can be passed to the preprocessor\n\tinvocation.", "tree": {"sha": "3b44b1817a0df1ef659f426bb5524cd40dd9a891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b44b1817a0df1ef659f426bb5524cd40dd9a891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47b269caf87904fd0112e8c9e96884dd0313ed15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b269caf87904fd0112e8c9e96884dd0313ed15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b269caf87904fd0112e8c9e96884dd0313ed15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b269caf87904fd0112e8c9e96884dd0313ed15/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc023e2b4dd0dc1fd1fca3ea12664d5bdade4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc023e2b4dd0dc1fd1fca3ea12664d5bdade4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc023e2b4dd0dc1fd1fca3ea12664d5bdade4dc"}], "stats": {"total": 574, "additions": 304, "deletions": 270}, "files": [{"sha": "00cca7de617a19000c55c63e16729838ce5aa99e", "filename": "gcc/m2/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FMake-lang.in?ref=47b269caf87904fd0112e8c9e96884dd0313ed15", "patch": "@@ -543,6 +543,7 @@ m2/gm2-gcc/m2configure.o: $(srcdir)/m2/gm2-gcc/m2configure.cc \\\n \n m2/gm2-lang.o: $(srcdir)/m2/gm2-lang.cc gt-m2-gm2-lang.h $(GCC_HEADER_DEPENDENCIES_FOR_M2)\n \t$(COMPILER) -c -g $(GM2GCC) $(ALL_COMPILERFLAGS) \\\n+\t    -DLIBSUBDIR=\\\"$(libsubdir)\\\" \\\n             $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n m2/stor-layout.o: $(srcdir)/stor-layout.cc $(GCC_HEADER_DEPENDENCIES_FOR_M2)"}, {"sha": "98707430ef5bc8290f97f7c12c82f0fb1e1276bd", "filename": "gcc/m2/gm2-lang.cc", "status": "modified", "additions": 153, "deletions": 15, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Fgm2-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Fgm2-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-lang.cc?ref=47b269caf87904fd0112e8c9e96884dd0313ed15", "patch": "@@ -20,6 +20,7 @@ along with GNU Modula-2; see the file COPYING.  If not, write to the\n Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n 02110-1301, USA.  */\n \n+#define INCLUDE_VECTOR\n #include \"gm2-gcc/gcc-consolidation.h\"\n \n #include \"langhooks-def.h\" /* FIXME: for lhd_set_decl_assembler_name.  */\n@@ -45,6 +46,18 @@ static void write_globals (void);\n \n static int insideCppArgs = FALSE;\n \n+/* We default to pim in the absence of fiso.  */\n+static bool iso = false;\n+\n+/* The language include paths are based on the libraries in use.  */\n+static bool allow_libraries = true;\n+static const char *flibs = nullptr;\n+static const char *iprefix = nullptr;\n+static const char *imultilib = nullptr;\n+static std::vector<const char*>Ipaths;\n+static std::vector<const char*>isystem;\n+static std::vector<const char*>iquote;\n+\n #define EXPR_STMT_EXPR(NODE) TREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n \n /* start of new stuff.  */\n@@ -198,34 +211,41 @@ gm2_langhook_handle_option (\n       return 1;\n     case OPT_I:\n       if (insideCppArgs)\n-        {\n-          const struct cl_option *option = &cl_options[scode];\n-          const char *opt = (const char *)option->opt_text;\n-          M2Options_CppArg (opt, arg, TRUE);\n-        }\n+\t{\n+\t  const struct cl_option *option = &cl_options[scode];\n+\t  const char *opt = (const char *)option->opt_text;\n+\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t\t       && !(option->flags & CL_SEPARATE));\n+\t}\n       else\n-        M2Options_SetSearchPath (arg);\n+\tIpaths.push_back (arg);\n       return 1;\n     case OPT_fiso:\n       M2Options_SetISO (value);\n+      iso = value;\n       return 1;\n     case OPT_fpim:\n       M2Options_SetPIM (value);\n+      iso = value ? false : iso;\n       return 1;\n     case OPT_fpim2:\n       M2Options_SetPIM2 (value);\n+      iso = value ? false : iso;\n       return 1;\n     case OPT_fpim3:\n       M2Options_SetPIM3 (value);\n+      iso = value ? false : iso;\n       return 1;\n     case OPT_fpim4:\n       M2Options_SetPIM4 (value);\n+      iso = value ? false : iso;\n       return 1;\n     case OPT_fpositive_mod_floor_div:\n       M2Options_SetPositiveModFloor (value);\n       return 1;\n     case OPT_flibs_:\n-      /* handled in the gm2 driver.  */\n+      allow_libraries = value;\n+      flibs = arg;\n       return 1;\n     case OPT_fgen_module_list_:\n       M2Options_SetGenModuleList (value, arg);\n@@ -374,6 +394,30 @@ gm2_langhook_handle_option (\n     case OPT_fm2_g:\n       M2Options_SetM2g (value);\n       return 1;\n+      break;\n+    case OPT_iprefix:\n+    case OPT_imultilib:\n+    case OPT_isystem:\n+    case OPT_iquote:\n+    case OPT_isysroot:\n+      if (insideCppArgs)\n+\t{\n+\t  const struct cl_option *option = &cl_options[scode];\n+\t  const char *opt = (const char *)option->opt_text;\n+\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t\t       && !(option->flags & CL_SEPARATE));\n+\t}\n+      if (code == OPT_iprefix)\n+\tiprefix = arg;\n+      else if (code == OPT_imultilib)\n+\timultilib = arg;\n+      else if (code == OPT_iquote)\n+\tiquote.push_back (arg);\n+      else if (code == OPT_isystem)\n+\tisystem.push_back (arg);\n+      /* Otherwise, ignored, at least for now. */\n+      return 1;\n+      break;\n     case OPT_O:\n       M2Options_SetOptimizing (value);\n       return 1;\n@@ -412,18 +456,77 @@ gm2_langhook_handle_option (\n       return 1;\n     default:\n       if (insideCppArgs)\n-        {\n-          const struct cl_option *option = &cl_options[scode];\n-          const char *opt = (const char *)option->opt_text;\n-\n-          M2Options_CppArg (opt, arg, TRUE);\n-          return 1;\n-        }\n+\t{\n+\t  const struct cl_option *option = &cl_options[scode];\n+\t  const char *opt = (const char *)option->opt_text;\n+\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t\t       && !(option->flags & CL_SEPARATE));\n+\t  return 1;\n+\t}\n       return 0;\n     }\n   return 0;\n }\n \n+/* This prefixes LIBNAME with the current compiler prefix (if it has been\n+   relocated) or the LIBSUBDIR, if not.  */\n+static void\n+add_one_import_path (const char *libname)\n+{\n+  const char *libpath = iprefix ? iprefix : LIBSUBDIR;\n+  const char dir_sep[] = {DIR_SEPARATOR, (char)0};\n+  size_t dir_sep_size = strlen (dir_sep);\n+  unsigned int mlib_len = 0;\n+\n+  if (imultilib)\n+    {\n+      mlib_len = strlen (imultilib);\n+      mlib_len += strlen (dir_sep);\n+    }\n+\n+  char *lib = (char *)alloca (strlen (libpath) + dir_sep_size\n+\t\t\t      + strlen (\"m2\") + dir_sep_size\n+\t\t\t      + strlen (libname) + 1\n+\t\t\t      + mlib_len + 1);\n+  strcpy (lib, libpath);\n+  /* iprefix has a trailing dir separator, LIBSUBDIR does not.  */\n+  if (!iprefix)\n+    strcat (lib, dir_sep);\n+\n+  if (imultilib)\n+    {\n+      strcat (lib, imultilib);\n+      strcat (lib, dir_sep);\n+    }\n+  strcat (lib, \"m2\");\n+  strcat (lib, dir_sep);\n+  strcat (lib, libname);\n+  M2Options_SetSearchPath (lib);\n+}\n+\n+/* For each comma-separated standard library name in LIBLIST, add the\n+   corresponding include path.  */\n+static void\n+add_m2_import_paths (const char *liblist)\n+{\n+  while (*liblist != 0 && *liblist != '-')\n+    {\n+      const char *comma = strstr (liblist, \",\");\n+      size_t len;\n+      if (comma)\n+\tlen = comma - liblist;\n+      else\n+\tlen = strlen (liblist);\n+      char *libname = (char *) alloca (len+1);\n+      strncpy (libname, liblist, len);\n+      libname[len] = 0;\n+      add_one_import_path (libname);\n+      liblist += len;\n+      if (*liblist == ',')\n+\tliblist++;\n+    }\n+}\n+\n /* Run after parsing options.  */\n \n static bool\n@@ -435,7 +538,42 @@ gm2_langhook_post_options (const char **pfilename)\n   M2Options_FinaliseOptions ();\n   main_input_filename = filename;\n \n-  /* Returning false means that the backend should be used.  */\n+  /* Add the include paths as per the libraries specified.\n+     NOTE: This assumes that the driver has validated the input and makes\n+     no attempt to be defensive of nonsense input in flibs=.  */\n+  if (allow_libraries)\n+    {\n+      if (!flibs)\n+\t{\n+\t  if (iso)\n+\t    flibs = \"m2iso,m2cor,m2pim,m2log\";\n+\t  else\n+\t    flibs = \"m2pim,m2iso,m2cor,m2log\";\n+\t}\n+    }\n+\n+  /* Add search paths.\n+     We are not handling all of the cases yet (e.g idirafter).\n+     This (barring the missing cases) is intended to follow the directory\n+     search rules used for c-family.  It would be less confusing if the\n+     presence of absence of these search paths was not dependent on the\n+     flibs= option. */\n+\n+  for (auto *s : iquote)\n+    M2Options_SetSearchPath (s);\n+  iquote.clear();\n+  for (auto *s : Ipaths)\n+    M2Options_SetSearchPath (s);\n+  Ipaths.clear();\n+  for (auto *s : isystem)\n+    M2Options_SetSearchPath (s);\n+  isystem.clear();\n+  /* FIXME: this is not a good way to suppress the addition of the import\n+     paths.  */\n+  if (allow_libraries)\n+    add_m2_import_paths (flibs);\n+\n+ /* Returning false means that the backend should be used.  */\n   return false;\n }\n "}, {"sha": "c248d1bfcb2258b90577668e4a178dfea74f3317", "filename": "gcc/m2/gm2spec.cc", "status": "modified", "additions": 95, "deletions": 249, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Fgm2spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Fgm2spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2spec.cc?ref=47b269caf87904fd0112e8c9e96884dd0313ed15", "patch": "@@ -103,6 +103,7 @@ enum stdcxxlib_kind\n };\n \n #define DEFAULT_DIALECT \"pim\"\n+\n #undef DEBUG_ARG\n \n typedef enum { iso, pim, min, logitech, pimcoroutine, maxlib } libs;\n@@ -132,14 +133,13 @@ static const char *add_include (const char *libpath, const char *library);\n \n static bool seen_scaffold_static = false;\n static bool seen_scaffold_dynamic = false;\n+static bool scaffold_dynamic = true; // Default uses -fscaffold-dynamic.\n static bool scaffold_static = false;\n-static bool scaffold_dynamic = true;  // Default uses -fscaffold-dynamic.\n static bool seen_gen_module_list = false;\n static bool seen_uselist = false;\n static bool uselist = false;\n static bool gen_module_list = true;  // Default uses -fgen-module-list=-.\n static const char *gen_module_filename = \"-\";\n-static const char *multilib_dir = NULL;\n /* The original argument list and related info is copied here.  */\n static unsigned int gm2_xargc;\n static const struct cl_decoded_option *gm2_x_decoded_options;\n@@ -148,6 +148,8 @@ static void append_arg (const struct cl_decoded_option *);\n /* The new argument list will be built here.  */\n static unsigned int gm2_newargc;\n static struct cl_decoded_option *gm2_new_decoded_options;\n+static const char *full_libraries = NULL;\n+static const char *libraries = NULL;  /* Abbreviated libraries.  */\n \n \n /* Return whether strings S1 and S2 are both NULL or both the same\n@@ -227,50 +229,6 @@ append_option (size_t opt_index, const char *arg, int value)\n   append_arg (&decoded);\n }\n \n-/* build_archive_path returns a string containing the path to the\n-   archive defined by libpath and dialectLib.  */\n-\n-static const char *\n-build_archive_path (const char *libpath, const char *library)\n-{\n-  if (library != NULL)\n-    {\n-      const char *libdir = (const char *)library;\n-\n-      if (libdir != NULL)\n-        {\n-\t  int machine_length = 0;\n-          char dir_sep[2];\n-\n-          dir_sep[0] = DIR_SEPARATOR;\n-          dir_sep[1] = (char)0;\n-\n-\t  if (multilib_dir != NULL)\n-\t    {\n-\t      machine_length = strlen (multilib_dir);\n-\t      machine_length += strlen (dir_sep);\n-\t    }\n-\n-\t  int l = strlen (libpath) + 1 + strlen (\"m2\") + 1\n-\t    + strlen (libdir) + 1 + machine_length + 1;\n-          char *s = (char *)xmalloc (l);\n-\n-          strcpy (s, libpath);\n-          strcat (s, dir_sep);\n-\t  if (machine_length > 0)\n-\t    {\n-\t      strcat (s, multilib_dir);\n-\t      strcat (s, dir_sep);\n-\t    }\n-          strcat (s, \"m2\");\n-          strcat (s, dir_sep);\n-          strcat (s, libdir);\n-          return s;\n-        }\n-    }\n-  return NULL;\n-}\n-\n /* safe_strdup safely duplicates a string.  */\n \n static char *\n@@ -281,205 +239,65 @@ safe_strdup (const char *s)\n   return NULL;\n }\n \n-/* add_default_combination adds the correct link path and then the\n-   library name.  */\n-\n-static bool\n-add_default_combination (const char *libpath, const char *library)\n+static char *\n+concat_option (char *dest, const char *pre, const char *path, const char *post)\n {\n-  if (library != NULL)\n+  if (dest == NULL)\n     {\n-      append_option (OPT_L, build_archive_path (libpath, library), 1);\n-      append_option (OPT_l, safe_strdup (library), 1);\n-      return true;\n+      dest = (char *) xmalloc (strlen (pre) + strlen (path) + strlen (post) + 1);\n+      strcpy (dest, pre);\n+      strcat (dest, path);\n+      strcat (dest, post);\n+      return dest;\n+    }\n+  else\n+    {\n+      char *result = (char *) xmalloc (strlen (dest) + strlen (pre)\n+\t\t\t\t       + strlen (path) + strlen (post) + 1 + 1);\n+      strcpy (result, dest);\n+      strcat (result, \" \");\n+      strcat (result, pre);\n+      strcat (result, path);\n+      strcat (result, post);\n+      free (dest);\n+      return result;\n     }\n-  return false;\n }\n \n-/* add_default_archives adds the default archives to the end of the\n-   current command line.  */\n+/* add_default_libs adds the -l option which is derived from the\n+   libraries.  */\n \n static int\n-add_default_archives (const char *libpath, const char *libraries)\n+add_default_libs (const char *libraries)\n {\n   const char *l = libraries;\n   const char *e;\n   char *libname;\n   unsigned int libcount = 0;\n \n-  do\n+  while ((l != NULL) && (l[0] != (char)0))\n     {\n       e = index (l, ',');\n       if (e == NULL)\n         {\n           libname = xstrdup (l);\n           l = NULL;\n-\t  if (add_default_combination (libpath, libname))\n-\t    libcount++;\n+\t  append_option (OPT_l, safe_strdup (libname), 1);\n+\t  libcount++;\n \t  free (libname);\n         }\n       else\n         {\n           libname = xstrndup (l, e - l);\n           l = e + 1;\n-\t  if (add_default_combination (libpath, libname))\n-\t    libcount++;\n+\t  append_option (OPT_l, safe_strdup (libname), 1);\n+\t  libcount++;\n \t  free (libname);\n         }\n     }\n-  while ((l != NULL) && (l[0] != (char)0));\n   return libcount;\n }\n \n-/* build_include_path builds the component of the include path\n-   referenced by the library.  */\n-\n-static const char *\n-build_include_path (const char *libpath, const char *library)\n-{\n-  char dir_sep[2];\n-  char *gm2libs;\n-  unsigned int machine_length = 0;\n-\n-  dir_sep[0] = DIR_SEPARATOR;\n-  dir_sep[1] = (char)0;\n-\n-  if (multilib_dir != NULL)\n-    {\n-      machine_length = strlen (multilib_dir);\n-      machine_length += strlen (dir_sep);\n-    }\n-\n-  gm2libs = (char *)alloca (strlen (libpath) + strlen (dir_sep) + strlen (\"m2\")\n-                            + strlen (dir_sep) + strlen (library) + 1\n-\t\t\t    + machine_length + 1);\n-  strcpy (gm2libs, libpath);\n-  strcat (gm2libs, dir_sep);\n-  if (machine_length > 0)\n-    {\n-      strcat (gm2libs, multilib_dir);\n-      strcat (gm2libs, dir_sep);\n-    }\n-  strcat (gm2libs, \"m2\");\n-  strcat (gm2libs, dir_sep);\n-  strcat (gm2libs, library);\n-\n-  return xstrdup (gm2libs);\n-}\n-\n-/* add_include add the correct include path given the libpath and\n-   library.  The new path is returned.  */\n-\n-static const char *\n-add_include (const char *libpath, const char *library)\n-{\n-  if (library == NULL)\n-    return NULL;\n-  else\n-    return build_include_path (libpath, library);\n-}\n-\n-/* add_default_includes add the appropriate default include paths\n-   depending upon the style of libraries chosen.  */\n-\n-static void\n-add_default_includes (const char *libpath, const char *libraries)\n-{\n-  const char *l = libraries;\n-  const char *e;\n-  const char *c;\n-  const char *path;\n-\n-  do\n-    {\n-      e = index (l, ',');\n-      if (e == NULL)\n-        {\n-          c = xstrdup (l);\n-          l = NULL;\n-        }\n-      else\n-        {\n-          c = xstrndup (l, e - l);\n-          l = e + 1;\n-        }\n-      path = add_include (libpath, c);\n-      append_option (OPT_I, path, 1);\n-    }\n-  while ((l != NULL) && (l[0] != (char)0));\n-}\n-\n-/* library_installed returns true if directory library is found under\n-   libpath.  */\n-\n-static bool\n-library_installed (const char *libpath, const char *library)\n-{\n-#if defined(HAVE_OPENDIR) && defined(HAVE_DIRENT_H)\n-  const char *complete = build_archive_path (libpath, library);\n-  DIR *directory = opendir (complete);\n-\n-  if (directory == NULL || (errno == ENOENT))\n-    return false;\n-  /* Directory exists and therefore the library also exists.  */\n-  closedir (directory);\n-  return true;\n-#else\n-  return false;\n-#endif\n-}\n-\n-/* check_valid check to see that the library is valid.\n-   It check the library against the default library set in gm2 and\n-   also against any additional libraries installed in the prefix tree.  */\n-\n-static bool\n-check_valid_library (const char *libpath, const char *library)\n-{\n-  /* Firstly check against the default libraries (which might not be\n-     installed yet).  */\n-  for (int i = 0; i < maxlib; i++)\n-    if (strcmp (library, library_name[i]) == 0)\n-      return true;\n-  /* Secondly check whether it is installed (a third party library).  */\n-  return library_installed (libpath, library);\n-}\n-\n-/* check_valid_list check to see that the libraries specified are valid.\n-   It checks against the default library set in gm2 and also against\n-   any additional libraries installed in the libpath tree.  */\n-\n-static bool\n-check_valid_list (const char *libpath, const char *libraries)\n-{\n-  const char *start = libraries;\n-  const char *end;\n-  const char *copy;\n-\n-  do\n-    {\n-      end = index (start, ',');\n-      if (end == NULL)\n-        {\n-          copy = xstrdup (start);\n-          start = NULL;\n-        }\n-      else\n-        {\n-          copy = xstrndup (start, end - start);\n-          start = end + 1;\n-        }\n-      if (! check_valid_library (libpath, copy))\n-\t{\n-\t  error (\"library specified %sq is either not installed or does not exist\",\n-\t\t copy);\n-\t  return false;\n-\t}\n-    }\n-  while ((start != NULL) && (start[0] != (char)0));\n-  return true;\n-}\n-\n /* add_word returns a new string which has the contents of lib\n    appended to list.  If list is NULL then lib is duplicated and\n    returned otherwise the list is appended by \",\" and the contents of\n@@ -509,8 +327,14 @@ convert_abbreviation (const char *full_libraries, const char *abbreviation)\n   for (int i = 0; i < maxlib; i++)\n     if (strcmp (abbreviation, library_abbrev[i]) == 0)\n       return add_word (full_libraries, library_name[i]);\n-  /* No abbreviation found therefore assume user specified full library name.  */\n-  return add_word (full_libraries, abbreviation);\n+  /* Perhaps the user typed in the whole lib name rather than an abbrev.  */\n+  for (int i = 0; i < maxlib; i++)\n+    if (strcmp (abbreviation, library_name[i]) == 0)\n+      return add_word (full_libraries, abbreviation);\n+  /* Not found, probably a user typo.  */\n+  error (\"%qs is not a valid Modula-2 system library name or abbreviation\",\n+\t abbreviation);\n+  return full_libraries;\n }\n \n /* convert_abbreviations checks each element in the library list to\n@@ -535,7 +359,8 @@ convert_abbreviations (const char *libraries)\n         }\n       else\n         {\n-          full_libraries = convert_abbreviation (full_libraries, xstrndup (start, end - start));\n+\t  full_libraries = convert_abbreviation (full_libraries,\n+\t\t\t\t\t\t xstrndup (start, end - start));\n           start = end + 1;\n         }\n     }\n@@ -572,9 +397,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Which c++ runtime library to link.  */\n   stdcxxlib_kind which_library = USE_LIBSTDCXX;\n \n-  const char *libraries = NULL;\n   const char *dialect = DEFAULT_DIALECT;\n-  const char *libpath = LIBSUBDIR;\n \n   /* An array used to flag each argument that needs a bit set for\n      LANGSPEC, MATHLIB, or WITHLIBC.  */\n@@ -673,12 +496,15 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \tcase OPT_flibs_:\n \t  libraries = xstrdup (arg);\n \t  allow_libraries = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fmod_:\n \t  seen_module_extension = true;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n         case OPT_fpthread:\n           need_pthread = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n           break;\n         case OPT_fm2_plugin:\n           need_plugin = decoded_options[i].value;\n@@ -687,24 +513,29 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t    error (\"plugin support is disabled; configure with \"\n \t\t   \"%<--enable-plugin%>\");\n #endif\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n           break;\n \tcase OPT_fscaffold_dynamic:\n \t  seen_scaffold_dynamic = true;\n \t  scaffold_dynamic = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fscaffold_static:\n \t  seen_scaffold_static = true;\n \t  scaffold_static = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fgen_module_list_:\n \t  seen_gen_module_list = true;\n \t  gen_module_list = decoded_options[i].value;\n \t  if (gen_module_list)\n \t    gen_module_filename = decoded_options[i].arg;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fuse_list_:\n \t  seen_uselist = true;\n \t  uselist = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \n \tcase OPT_nostdlib:\n@@ -794,24 +625,23 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  break;\n \n \tdefault:\n-\t  if ((decoded_options[i].orig_option_with_args_text != NULL)\n-\t      && (strncmp (decoded_options[i].orig_option_with_args_text,\n-\t\t\t   \"-m\", 2) == 0))\n-\t    multilib_dir = xstrdup (decoded_options[i].orig_option_with_args_text\n-\t\t\t\t    + 2);\n+\t  break;\n \t}\n     }\n   if (language != NULL && (strcmp (language, \"modula-2\") != 0))\n     return;\n \n-  if (scaffold_static && scaffold_dynamic)\n-    {\n-      if (! seen_scaffold_dynamic)\n-\tscaffold_dynamic = false;\n-      if (scaffold_dynamic && scaffold_static)\n-\terror (\"%qs and %qs cannot both be enabled\",\n-\t       \"-fscaffold-dynamic\", \"-fscaffold-static\");\n-    }\n+  /* Override the default when the user specifies it.  */\n+  if (seen_scaffold_static && scaffold_static && !seen_scaffold_dynamic)\n+    scaffold_dynamic = false;\n+\n+  /* If both options have been seen and both are true, that means the user\n+     tried to set both.  */\n+  if (seen_scaffold_dynamic && scaffold_dynamic\n+     && seen_scaffold_static && scaffold_static)\n+    error (\"%qs and %qs cannot both be enabled\",\n+\t   \"-fscaffold-dynamic\", \"-fscaffold-static\");\n+\n   if (uselist && gen_module_list)\n     {\n       if (! seen_gen_module_list)\n@@ -855,32 +685,44 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n     }\n \n-  /* We now add in extra arguments to facilitate a successful\n-     compile or link.  For example include paths for dialect of Modula-2,\n-     library paths and default scaffold linking options.  */\n+  /* We now add in extra arguments to facilitate a successful link.\n+     Note that the libraries are added to the end of the link here\n+     and also placed earlier into the link by lang-specs.h.  Possibly\n+     this is needed because the m2pim,m2iso libraries are cross linked\n+     (--fixme-- combine all the m2 libraries into a single archive).\n+\n+     We also add default scaffold linking options.  */\n \n   /* If we have not seen either uselist or gen_module_list and we need\n      to link then we turn on -fgen_module_list=- as the default.  */\n   if ((! (seen_uselist || seen_gen_module_list)) && linking)\n     append_option (OPT_fgen_module_list_, \"-\", 1);\n \n+  /* We checked that they were not both enabled above, if there was a set\n+     value (even iff that is 'off'), pass that to the FE.  */\n+  if (seen_scaffold_dynamic || scaffold_dynamic)\n+    append_option (OPT_fscaffold_dynamic, NULL, scaffold_dynamic);\n+  if (seen_scaffold_static)\n+    append_option (OPT_fscaffold_static, NULL, scaffold_static);\n+\n   if (allow_libraries)\n     {\n-      /* If the libraries have not been specified by the user but the\n-\t dialect has been specified then select the appropriate libraries.  */\n+      /* If the libraries have not been specified by the user, select the\n+\t appropriate libraries for the active dialect.  */\n       if (libraries == NULL)\n \t{\n \t  if (strcmp (dialect, \"iso\") == 0)\n-\t    libraries = xstrdup (\"m2iso,m2pim\");\n+\t    libraries = xstrdup (\"m2iso,m2cor,m2pim,m2log\");\n \t  else\n-\t    /* Default to pim libraries if none specified.  */\n-\t    libraries = xstrdup (\"m2pim,m2log,m2iso\");\n+\t    /* Default to pim libraries otherwise.  */\n+\t    libraries = xstrdup (\"m2pim,m2iso,m2cor,m2log\");\n \t}\n       libraries = convert_abbreviations (libraries);\n-      if (! check_valid_list (libpath, libraries))\n-\treturn;\n-      add_default_includes (libpath, libraries);\n+      append_option (OPT_flibs_, xstrdup (libraries), 1);\n     }\n+  else\n+    append_option (OPT_flibs_, xstrdup (\"-\"), 0); /* no system libs.  */\n+\n   if ((! seen_x_flag) && seen_module_extension)\n     append_option (OPT_x, \"modula-2\", 1);\n \n@@ -889,16 +731,19 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \n   if (linking)\n     {\n+      if (allow_libraries)\n+\t{\n #ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (allow_libraries && !shared_libgm2)\n-\tappend_option (OPT_Wl_, LD_STATIC_OPTION, 1);\n+\t  if (!shared_libgm2)\n+\t    append_option (OPT_Wl_, LD_STATIC_OPTION, 1);\n #endif\n-      if (allow_libraries)\n-\tadd_default_archives (libpath, libraries);\n+\t  added_libraries += add_default_libs (libraries);\n #ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (allow_libraries && !shared_libgm2)\n-\tappend_option (OPT_Wl_, LD_DYNAMIC_OPTION, 1);\n+\t  if (!shared_libgm2)\n+\t    append_option (OPT_Wl_, LD_DYNAMIC_OPTION, 1);\n #endif\n+\t}\n+\n       /* Add `-lstdc++' if we haven't already done so.  */\n #ifdef HAVE_LD_STATIC_DYNAMIC\n       if (library > 1 && !static_link)\n@@ -962,6 +807,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   *in_added_libraries = added_libraries;\n }\n \n+\n /* Called before linking.  Returns 0 on success and -1 on failure.  */\n int\n lang_specific_pre_link (void)  /* Not used for M2.  */"}, {"sha": "bf882649b21790351431ab43d1ea80c86fe601c1", "filename": "gcc/m2/lang-specs.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Flang-specs.h?ref=47b269caf87904fd0112e8c9e96884dd0313ed15", "patch": "@@ -24,15 +24,16 @@ along with GCC; see the file COPYING3.  If not see\n /* Pass the preprocessor options on the command line together with\n    the exec prefix.  */\n \n-#define M2CPP \"%{fcpp:-fcpp-begin \" \\\n-              \"      -E -lang-asm -traditional-cpp \" \\\n-              \"      %(cpp_unique_options) -fcpp-end}\"\n+#define M2CPP \\\n+  \"%{fcpp:-fcpp-begin \" \\\n+  \"      -E -lang-asm -traditional-cpp \" \\\n+  \"      %(cpp_unique_options) -fcpp-end; \\\n+     : %I } \"\n \n   {\".mod\", \"@modula-2\", 0, 0, 0},\n   {\"@modula-2\",\n       \"cc1gm2 \" M2CPP\n-      \"      %(cc1_options) %{B*} %{c*} %{f*} %{+e*} %{I*} \"\n-      \"      %{MD} %{MMD} %{M} %{MM} %{MA} %{MT*} %{MF*} %V\"\n-      \"      %{save-temps*} %{v} \"\n+      \"      %(cc1_options) %{B*} %{c*} %{+e*} %{I*} \"\n+      \"      %{i*} %{save-temps*} %{v} \"\n       \"      %i %{!fsyntax-only:%(invoke_as)}\",\n       0, 0, 0},"}, {"sha": "7a19adc0790bc38a83d9b406d83902830e359fbd", "filename": "gcc/m2/lang.opt", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b269caf87904fd0112e8c9e96884dd0313ed15/gcc%2Fm2%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Flang.opt?ref=47b269caf87904fd0112e8c9e96884dd0313ed15", "patch": "@@ -50,6 +50,50 @@ M\n Modula-2\n ; Documented in c.opt\n \n+MD\n+Modula-2\n+; Documented in c.opt\n+\n+MF\n+Modula-2\n+; Documented in c.opt\n+\n+MG\n+Modula-2\n+; Documented in c.opt\n+\n+MM\n+Modula-2\n+; Documented in c.opt\n+\n+MMD\n+Modula-2\n+; Documented in c.opt\n+\n+Mmodules\n+Modula-2\n+; Documented in c.opt\n+\n+Mno-modules\n+Modula-2\n+; Documented in c.opt\n+\n+MP\n+Modula-2\n+; Documented in c.opt\n+\n+MQ\n+Modula-2\n+; Documented in c.opt\n+\n+MT\n+Modula-2\n+; Documented in c.opt\n+\n+P\n+Modula-2\n+; Documented in c.opt\n+\n O\n Modula-2\n ; Documented in c.opt\n@@ -310,6 +354,10 @@ iprefix\n Modula-2\n ; Documented in c.opt\n \n+iquote\n+Modula-2\n+; Documented in c.opt\n+\n isystem\n Modula-2\n ; Documented in c.opt"}]}