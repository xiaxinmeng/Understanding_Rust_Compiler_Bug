{"sha": "20b506726b1e07f028fa81ffc80f5081aabaea02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiNTA2NzI2YjFlMDdmMDI4ZmE4MWZmYzgwZjUwODFhYWJhZWEwMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-26T08:51:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-26T08:51:35Z"}, "message": "builtins.c (build_function_call_expr): Don't set TREE_SIDE_EFFECTS here.\n\n\t* builtins.c (build_function_call_expr): Don't set\n\tTREE_SIDE_EFFECTS here.\n\t* expr.c (emit_block_move_via_libcall): Likewise.\n\t(clear_storage_via_libcall): Likewise.\n\t* tree.c (build): Set TREE_SIDE_EFFECTS for non-const, non-pure\n\tCALL_EXPRs.\ncp:\n\t* call.c (build_call): Don't set TREE_SIDE_EFFECTS here.\n\t(build_new_method_call): Add goto finish.\n\t* semantics.c (simplify_aggr_init_exprs_r): Don't set\n\tTREE_SIDE_EFFECTS on a call.\ntestsuite:\n\t* c++.dg/warn/noeffect3.C: New test.\n\nFrom-SVN: r70802", "tree": {"sha": "152ffb66aceabfdd630712ed76616a8b76fb2e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152ffb66aceabfdd630712ed76616a8b76fb2e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b506726b1e07f028fa81ffc80f5081aabaea02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b506726b1e07f028fa81ffc80f5081aabaea02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b506726b1e07f028fa81ffc80f5081aabaea02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b506726b1e07f028fa81ffc80f5081aabaea02/comments", "author": null, "committer": null, "parents": [{"sha": "d128effb32977a5a1621b106465133970a842c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d128effb32977a5a1621b106465133970a842c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d128effb32977a5a1621b106465133970a842c4d"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "147b68eb3c44f034fc6156c3331a15322cdf977d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -1,5 +1,12 @@\n 2003-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* builtins.c (build_function_call_expr): Don't set\n+\tTREE_SIDE_EFFECTS here.\n+\t* expr.c (emit_block_move_via_libcall): Likewise.\n+\t(clear_storage_via_libcall): Likewise.\n+\t* tree.c (build): Set TREE_SIDE_EFFECTS for non-const, non-pure\n+\tCALL_EXPRs.\n+\t\n \t* gcse.c (is_too_expensive): New function.\n \t(gcse_main, delete_null_pointer_checks, bypass_jumps): Use it.\n "}, {"sha": "fea2a15d62ba0ec1c575907985d2166fa1970376", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -6242,7 +6242,6 @@ build_function_call_expr (tree fn, tree arglist)\n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t     call_expr, arglist);\n-  TREE_SIDE_EFFECTS (call_expr) = 1;\n   return fold (call_expr);\n }\n "}, {"sha": "692937ea36aeecc84743805fee0318053b60ffc7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -1,3 +1,10 @@\n+2003-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* call.c (build_call): Don't set TREE_SIDE_EFFECTS here.\n+\t(build_new_method_call): Add goto finish.\n+\t* semantics.c (simplify_aggr_init_exprs_r): Don't set\n+\tTREE_SIDE_EFFECTS on a call.\n+\n 2003-08-25  Richard Henderson  <rth@redhat.com>\n \n \t* cxx-pretty-print.c (pp_cxx_class_name): Remove unused function."}, {"sha": "a74fd63d556d993d2f1996041051a98fb682a85f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -303,10 +303,8 @@ build_call (tree function, tree parms)\n \t\t\t\t    TREE_VALUE (tmp), t);\n \t}\n \n-  function = build_nt (CALL_EXPR, function, parms, NULL_TREE);\n+  function = build (CALL_EXPR, result_type, function, parms);\n   TREE_HAS_CONSTRUCTOR (function) = is_constructor;\n-  TREE_TYPE (function) = result_type;\n-  TREE_SIDE_EFFECTS (function) = 1;\n   TREE_NOTHROW (function) = nothrow;\n   \n   return function;\n@@ -4918,7 +4916,7 @@ build_new_method_call (tree instance, tree fns, tree args,\n     {\n       call = build_field_call (instance_ptr, fns, args);\n       if (call)\n-\treturn call;\n+\tgoto finish;\n       error (\"call to non-function `%D'\", fns);\n       return error_mark_node;\n     }\n@@ -5079,13 +5077,11 @@ build_new_method_call (tree instance, tree fns, tree args,\n       if (!is_dummy_object (instance_ptr) && TREE_SIDE_EFFECTS (instance))\n \tcall = build (COMPOUND_EXPR, TREE_TYPE (call), instance, call);\n     }\n-\n+ finish:;\n+  \n   if (processing_template_decl && call != error_mark_node)\n-    return build_min (CALL_EXPR,\n-\t\t      TREE_TYPE (call),\n-\t\t      build_min_nt (COMPONENT_REF,\n-\t\t\t\t    orig_instance, \n-\t\t\t\t    orig_fns),\n+    return build_min (CALL_EXPR, TREE_TYPE (call),\n+\t\t      build_min_nt (COMPONENT_REF, orig_instance, orig_fns),\n \t\t      orig_args);\n   return call;\n }"}, {"sha": "ee80beefad6a9189a00f0ca6c68c51349d8ccf03", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -2796,7 +2796,6 @@ simplify_aggr_init_expr (tree *tp)\n   call_expr = build (CALL_EXPR, \n \t\t     TREE_TYPE (TREE_TYPE (TREE_TYPE (fn))),\n \t\t     fn, args, NULL_TREE);\n-  TREE_SIDE_EFFECTS (call_expr) = 1;\n \n   if (style == arg)\n     /* Tell the backend that we've added our return slot to the argument"}, {"sha": "52cdfee3938932f858e7667504988c3a4b76b128", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -2006,7 +2006,6 @@ emit_block_move_via_libcall (rtx dst, rtx src, rtx size)\n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t     call_expr, arg_list, NULL_TREE);\n-  TREE_SIDE_EFFECTS (call_expr) = 1;\n \n   retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n \n@@ -3120,7 +3119,6 @@ clear_storage_via_libcall (rtx object, rtx size)\n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t     call_expr, arg_list, NULL_TREE);\n-  TREE_SIDE_EFFECTS (call_expr) = 1;\n \n   retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n "}, {"sha": "608a27c7d1f9e8d66247b2c5f7be2dab63a67097", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -1,3 +1,7 @@\n+2003-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c++.dg/warn/noeffect3.C: New test.\n+\n 2003-08-25  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/compat/vector-1_x.c: Compile with -w."}, {"sha": "df074e85510f3b8269db35fe742d612b65c84c3a", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b506726b1e07f028fa81ffc80f5081aabaea02/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=20b506726b1e07f028fa81ffc80f5081aabaea02", "patch": "@@ -2378,6 +2378,17 @@ build (enum tree_code code, tree tt, ...)\n   va_end (p);\n \n   TREE_CONSTANT (t) = constant;\n+  \n+  if (code == CALL_EXPR && !TREE_SIDE_EFFECTS (t))\n+    {\n+      /* Calls have side-effects, except those to const or\n+\t pure functions.  */\n+      tree fn = get_callee_fndecl (t);\n+\n+      if (!fn || (!DECL_IS_PURE (fn) && !TREE_READONLY (fn)))\n+\tTREE_SIDE_EFFECTS (t) = 1;\n+    }\n+\n   return t;\n }\n "}]}