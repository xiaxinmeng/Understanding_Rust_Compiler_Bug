{"sha": "c767f54b88953760289ecb529621e91c4247e3db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2N2Y1NGI4ODk1Mzc2MDI4OWVjYjUyOTYyMWU5MWM0MjQ3ZTNkYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-05T18:02:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-05T18:02:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1442", "tree": {"sha": "8671111e5fdc6afc21f85a26e126f7725e7eaab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8671111e5fdc6afc21f85a26e126f7725e7eaab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c767f54b88953760289ecb529621e91c4247e3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c767f54b88953760289ecb529621e91c4247e3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c767f54b88953760289ecb529621e91c4247e3db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c767f54b88953760289ecb529621e91c4247e3db/comments", "author": null, "committer": null, "parents": [{"sha": "41c801688207770e5d73f7c57d332cb555403916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c801688207770e5d73f7c57d332cb555403916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c801688207770e5d73f7c57d332cb555403916"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "5163f5c83f6c35b9a1b78410ba33b29f2db418b8", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c767f54b88953760289ecb529621e91c4247e3db/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c767f54b88953760289ecb529621e91c4247e3db/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c767f54b88953760289ecb529621e91c4247e3db", "patch": "@@ -1520,6 +1520,19 @@ try_combine (i3, i2, i1)\n \t  i2_code_number = recog_for_combine (&newi2pat, i2, &new_i2_notes);\n \t  if (i2_code_number >= 0)\n \t    insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\n+\t  /* It is possible that both insns now set the destination of I3.\n+\t     If so, we must show an extra use of it and update\n+\t     reg_significant.  */\n+\n+\t  if (insn_code_number >= 0 && GET_CODE (SET_DEST (newpat)) == REG\n+\t      && GET_CODE (SET_DEST (newi2pat)) == REG\n+\t      && REGNO (SET_DEST (newpat)) == REGNO (SET_DEST (newi2pat)))\n+\t    {\n+\t      reg_n_sets[REGNO (SET_DEST (newpat))]++;\n+\t      set_significant (SET_DEST (newi2pat), newi2pat);\n+\t      set_significant (SET_DEST (newpat), newpat);\n+\t    }\n \t}\n \n       /* If we can split it and use I2DEST, go ahead and see if that"}]}