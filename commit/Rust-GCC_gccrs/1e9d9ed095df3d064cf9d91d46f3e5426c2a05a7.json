{"sha": "1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7", "node_id": "C_kwDOANBUbNoAKDFlOWQ5ZWQwOTVkZjNkMDY0Y2Y5ZDkxZDQ2ZjNlNTQyNmMyYTA1YTc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-23T14:51:17Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-24T10:15:22Z"}, "message": "Check HONOR_NANS instead of flag_finite_math_only in frange:verify_range.\n\n[Jakub and other FP experts, would this be OK, or am I missing\nsomething?]\n\nVax does not seem to have !flag_finite_math_only, but float_type_node\ndoes not HONOR_NANS.  The check in frange::verify_range dependend on\nflag_finite_math_only, which is technically not correct since\nfrange::set_varying() checks HONOR_NANS instead of\nflag_finite_math_only.\n\nI'm actually getting tired of flag_finite_math_only and\n!flag_finite_math_only discrepancies in the selftests (Vax and rx-elf\ncome to mind).  I think we should just test both alternatives in the\nselftests as in this patch.\n\nWe could also check flag_finite_math_only=0 with a float_type_node\nthat does not HONOR_NANs, but I have no idea how to twiddle\nFLOAT_MODE_FORMAT temporarily, and that may be over thinking it.\n\n\tPR tree-optimization/107365\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::verify_range): Predicate NAN check in\n\tVARYING range on HONOR_NANS instead of flag_finite_math_only.\n\t(range_tests_floats): Same.\n\t(range_tests_floats_various): New.\n\t(range_tests): Call range_tests_floats_various.", "tree": {"sha": "d9ae4c7d7c1e67b7e28c89ff871d90bced522018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ae4c7d7c1e67b7e28c89ff871d90bced522018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47db37ed477f29ac52c4484c260138d15e44a36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47db37ed477f29ac52c4484c260138d15e44a36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47db37ed477f29ac52c4484c260138d15e44a36b"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "d8ee6ec0d0f83dff39d880e196efafc5cad22db8", "filename": "gcc/value-range.cc", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=1e9d9ed095df3d064cf9d91d46f3e5426c2a05a7", "patch": "@@ -720,13 +720,13 @@ frange::verify_range ()\n       gcc_checking_assert (!m_type);\n       return;\n     case VR_VARYING:\n-      if (flag_finite_math_only)\n-\tgcc_checking_assert (!m_pos_nan && !m_neg_nan);\n-      else\n-\tgcc_checking_assert (m_pos_nan && m_neg_nan);\n       gcc_checking_assert (m_type);\n       gcc_checking_assert (frange_val_is_min (m_min, m_type));\n       gcc_checking_assert (frange_val_is_max (m_max, m_type));\n+      if (HONOR_NANS (m_type))\n+\tgcc_checking_assert (m_pos_nan && m_neg_nan);\n+      else\n+\tgcc_checking_assert (!m_pos_nan && !m_neg_nan);\n       return;\n     case VR_RANGE:\n       gcc_checking_assert (m_type);\n@@ -3957,10 +3957,9 @@ range_tests_floats ()\n   // A range of [-INF,+INF] is actually VARYING if no other properties\n   // are set.\n   r0 = frange_float (\"-Inf\", \"+Inf\");\n-  if (r0.maybe_isnan ())\n-    ASSERT_TRUE (r0.varying_p ());\n+  ASSERT_TRUE (r0.varying_p ());\n   // ...unless it has some special property...\n-  if (!flag_finite_math_only)\n+  if (HONOR_NANS (r0.type ()))\n     {\n       r0.clear_nan ();\n       ASSERT_FALSE (r0.varying_p ());\n@@ -4041,6 +4040,24 @@ range_tests_floats ()\n     }\n }\n \n+// Run floating range tests for various combinations of NAN and INF\n+// support.\n+\n+static void\n+range_tests_floats_various ()\n+{\n+  int save_finite_math_only = flag_finite_math_only;\n+\n+  // Test -ffinite-math-only.\n+  flag_finite_math_only = 1;\n+  range_tests_floats ();\n+  // Test -fno-finite-math-only.\n+  flag_finite_math_only = 0;\n+  range_tests_floats ();\n+\n+  flag_finite_math_only = save_finite_math_only;\n+}\n+\n void\n range_tests ()\n {\n@@ -4049,7 +4066,7 @@ range_tests ()\n   range_tests_int_range_max ();\n   range_tests_strict_enum ();\n   range_tests_nonzero_bits ();\n-  range_tests_floats ();\n+  range_tests_floats_various ();\n   range_tests_misc ();\n }\n "}]}