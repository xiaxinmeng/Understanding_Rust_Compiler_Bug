{"sha": "918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "node_id": "C_kwDOANBUbNoAKDkxOGNjY2NiYjBlNzhhZTQyYmZjZjgwOGExZTkzYThmNmI5ZDAyZWE", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-06-29T17:34:05Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-06-30T01:37:21Z"}, "message": "Don't use gori dependencies to optimize.\n\n  The routine fold_using_range::relation_fold_and_or needs to veriyf that both\noperands of 2 stmts are the same, and uses GORIs dependency cache for this.\nThis cache cannot be counted on to reflect the current contents of a\nstmt, expecially in the presence of an IL changing pass.  Instead, look at the\nstatement operands.\n\n\tPR tree-optimization/106114\n\tgcc/\n\t* gimple-range-fold.cc (fold_using_range::relation_fold_and_or): Check\n\tstatement operands instead of GORI cache.\n\tgcc/testsuite/\n\t* gcc.dg/pr106114.c: New.", "tree": {"sha": "83ae2acd54adb33ba626d31089e61fa1680fa1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ae2acd54adb33ba626d31089e61fa1680fa1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea/comments", "author": null, "committer": null, "parents": [{"sha": "e484755aecd543b4c9e2adb4f348118c1e43cfd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e484755aecd543b4c9e2adb4f348118c1e43cfd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e484755aecd543b4c9e2adb4f348118c1e43cfd0"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "0f815b50b9ace569c302e8f37b6616f8511bb503", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "patch": "@@ -1397,14 +1397,25 @@ fold_using_range::relation_fold_and_or (irange& lhs_range, gimple *s,\n   // Ideally we search dependencies for common names, and see what pops out.\n   // until then, simply try to resolve direct dependencies.\n \n-  // Both names will need to have 2 direct dependencies.\n-  tree ssa1_dep2 = src.gori ()->depend2 (ssa1);\n-  tree ssa2_dep2 = src.gori ()->depend2 (ssa2);\n-  if (!ssa1_dep2 || !ssa2_dep2)\n+  gimple *ssa1_stmt = SSA_NAME_DEF_STMT (ssa1);\n+  gimple *ssa2_stmt = SSA_NAME_DEF_STMT (ssa2);\n+\n+  range_op_handler handler1 (SSA_NAME_DEF_STMT (ssa1));\n+  range_op_handler handler2 (SSA_NAME_DEF_STMT (ssa2));\n+\n+  // If either handler is not present, no relation can be found.\n+  if (!handler1 || !handler2)\n+    return;\n+\n+  // Both stmts will need to have 2 ssa names in the stmt.\n+  tree ssa1_dep1 = gimple_range_ssa_p (gimple_range_operand1 (ssa1_stmt));\n+  tree ssa1_dep2 = gimple_range_ssa_p (gimple_range_operand2 (ssa1_stmt));\n+  tree ssa2_dep1 = gimple_range_ssa_p (gimple_range_operand1 (ssa2_stmt));\n+  tree ssa2_dep2 = gimple_range_ssa_p (gimple_range_operand2 (ssa2_stmt));\n+\n+  if (!ssa1_dep1 || !ssa1_dep2 || !ssa2_dep1 || !ssa2_dep2)\n     return;\n \n-  tree ssa1_dep1 = src.gori ()->depend1 (ssa1);\n-  tree ssa2_dep1 = src.gori ()->depend1 (ssa2);\n   // Make sure they are the same dependencies, and detect the order of the\n   // relationship.\n   bool reverse_op2 = true;\n@@ -1413,13 +1424,6 @@ fold_using_range::relation_fold_and_or (irange& lhs_range, gimple *s,\n   else if (ssa1_dep1 != ssa2_dep2 || ssa1_dep2 != ssa2_dep1)\n     return;\n \n-  range_op_handler handler1 (SSA_NAME_DEF_STMT (ssa1));\n-  range_op_handler handler2 (SSA_NAME_DEF_STMT (ssa2));\n-\n-  // If either handler is not present, no relation is found.\n-  if (!handler1 || !handler2)\n-    return;\n-\n   int_range<2> bool_one (boolean_true_node, boolean_true_node);\n \n   relation_kind relation1 = handler1.op1_op2_relation (bool_one);"}, {"sha": "64c8b8d390a7ea6c59164fb7621da65b37496e60", "filename": "gcc/testsuite/gcc.dg/pr106114.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106114.c?ref=918ccccbb0e78ae42bfcf808a1e93a8f6b9d02ea", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+\n+int printf(const char *, ...);\n+char a = 139, b;\n+int main() {\n+  char c = 173;\n+  b = a;\n+  while (c <= a || a < -117)\n+    c = printf(\"0\\n\");\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times  \"if\" 2 \"dom2\" } }  */"}]}