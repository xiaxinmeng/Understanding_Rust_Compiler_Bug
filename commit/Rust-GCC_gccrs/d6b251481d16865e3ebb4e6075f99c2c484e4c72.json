{"sha": "d6b251481d16865e3ebb4e6075f99c2c484e4c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiMjUxNDgxZDE2ODY1ZTNlYmI0ZTYwNzVmOTljMmM0ODRlNGM3Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-01-14T13:24:46Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-01-14T13:24:46Z"}, "message": "Avoid PR72749 by not using unspecs\n\nRather than using unspecs in doloop insns to stop combine creating\nthese insns, use legitimate_combined_insn.\n\n\tPR target/72749\n\t* combine.c (recog_for_combine_1): Set INSN_CODE before calling\n\ttarget legitimate_combined_insn.\n\t* config/rs6000/rs6000.c (TARGET_LEGITIMATE_COMBINED_INSN): Define.\n\t(rs6000_legitimate_combined_insn): New function.\n\t* config/rs6000/rs6000.md (UNSPEC_DOLOOP): Delete, and remove\n\tall uses.\n\t(ctr<mode>_internal3): Rename from *ctr<mode>_internal5.\n\t(ctr<mode>_internal4): Rename from *ctr<mode>_internal6.\n\t(ctr<mode>_internal1, ctr<mode>_internal2): Remove '*' from name.\n\nFrom-SVN: r244465", "tree": {"sha": "364027b7a18ed0f254e4edbce192537dc2713f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364027b7a18ed0f254e4edbce192537dc2713f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b251481d16865e3ebb4e6075f99c2c484e4c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b251481d16865e3ebb4e6075f99c2c484e4c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b251481d16865e3ebb4e6075f99c2c484e4c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b251481d16865e3ebb4e6075f99c2c484e4c72/comments", "author": null, "committer": null, "parents": [{"sha": "ac4664f9da074d5e146102142cd2bf3bcde17b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4664f9da074d5e146102142cd2bf3bcde17b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4664f9da074d5e146102142cd2bf3bcde17b33"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "910605368d34862d6b482372290e3e26d4fbe8d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6b251481d16865e3ebb4e6075f99c2c484e4c72", "patch": "@@ -1,7 +1,20 @@\n+2017-01-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/72749\n+\t* combine.c (recog_for_combine_1): Set INSN_CODE before calling\n+\ttarget legitimate_combined_insn.\n+\t* config/rs6000/rs6000.c (TARGET_LEGITIMATE_COMBINED_INSN): Define.\n+\t(rs6000_legitimate_combined_insn): New function.\n+\t* config/rs6000/rs6000.md (UNSPEC_DOLOOP): Delete, and remove\n+\tall uses.\n+\t(ctr<mode>_internal3): Rename from *ctr<mode>_internal5.\n+\t(ctr<mode>_internal4): Rename from *ctr<mode>_internal6.\n+\t(ctr<mode>_internal1, ctr<mode>_internal2): Remove '*' from name.\n+\n 2017-01-14  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/frontends.texi (G++ and GCC): Remove references to Java.\n-\t\n+\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/33562\n@@ -362,7 +375,7 @@\n \t* config.gcc (*-*-fuchsia*): Set native_system_header_dir.\n \t(aarch64*-*-fuchsia*, arm*-*-fuchsia*, x86_64-*-fuchsia*): Add to\n \ttargets.\n-\t* config.host: (aarch64*-*-fuchsia*, arm*-*-fuchsia*): Add to hosts. \n+\t* config.host: (aarch64*-*-fuchsia*, arm*-*-fuchsia*): Add to hosts.\n \n 2016-01-10  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "28133ff3ba9cbd6e9ff9ab3e543876daa25c36d5", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d6b251481d16865e3ebb4e6075f99c2c484e4c72", "patch": "@@ -11201,6 +11201,7 @@ recog_for_combine_1 (rtx *pnewpat, rtx_insn *insn, rtx *pnotes)\n       old_icode = INSN_CODE (insn);\n       PATTERN (insn) = pat;\n       REG_NOTES (insn) = notes;\n+      INSN_CODE (insn) = insn_code_number;\n \n       /* Allow targets to reject combined insn.  */\n       if (!targetm.legitimate_combined_insn (insn))"}, {"sha": "11394b2f70095c9c6becb6d1a37be469b1b23d00", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d6b251481d16865e3ebb4e6075f99c2c484e4c72", "patch": "@@ -1558,6 +1558,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_CONST_NOT_OK_FOR_DEBUG_P\n #define TARGET_CONST_NOT_OK_FOR_DEBUG_P rs6000_const_not_ok_for_debug_p\n \n+#undef TARGET_LEGITIMATE_COMBINED_INSN\n+#define TARGET_LEGITIMATE_COMBINED_INSN rs6000_legitimate_combined_insn\n+\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE rs6000_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n@@ -9076,6 +9079,49 @@ rs6000_const_not_ok_for_debug_p (rtx x)\n   return false;\n }\n \n+\n+/* Implement the TARGET_LEGITIMATE_COMBINED_INSN hook.  */\n+\n+static bool\n+rs6000_legitimate_combined_insn (rtx_insn *insn)\n+{\n+  switch (INSN_CODE (insn))\n+    {\n+      /* Reject creating doloop insns.  Combine should not be allowed\n+\t to create these for a number of reasons:\n+\t 1) In a nested loop, if combine creates one of these in an\n+\t outer loop and the register allocator happens to allocate ctr\n+\t to the outer loop insn, then the inner loop can't use ctr.\n+\t Inner loops ought to be more highly optimized.\n+\t 2) Combine often wants to create one of these from what was\n+\t originally a three insn sequence, first combining the three\n+\t insns to two, then to ctrsi/ctrdi.  When ctrsi/ctrdi is not\n+\t allocated ctr, the splitter takes use back to the three insn\n+\t sequence.  It's better to stop combine at the two insn\n+\t sequence.\n+\t 3) Faced with not being able to allocate ctr for ctrsi/crtdi\n+\t insns, the register allocator sometimes uses floating point\n+\t or vector registers for the pseudo.  Since ctrsi/ctrdi is a\n+\t jump insn and output reloads are not implemented for jumps,\n+\t the ctrsi/ctrdi splitters need to handle all possible cases.\n+\t That's a pain, and it gets to be seriously difficult when a\n+\t splitter that runs after reload needs memory to transfer from\n+\t a gpr to fpr.  See PR70098 and PR71763 which are not fixed\n+\t for the difficult case.  It's better to not create problems\n+\t in the first place.  */\n+    case CODE_FOR_ctrsi_internal1:\n+    case CODE_FOR_ctrdi_internal1:\n+    case CODE_FOR_ctrsi_internal2:\n+    case CODE_FOR_ctrdi_internal2:\n+    case CODE_FOR_ctrsi_internal3:\n+    case CODE_FOR_ctrdi_internal3:\n+    case CODE_FOR_ctrsi_internal4:\n+    case CODE_FOR_ctrdi_internal4:\n+      return false;\n+    }\n+  return true;\n+}\n+\n /* Construct the SYMBOL_REF for the tls_get_addr function.  */\n \n static GTY(()) rtx rs6000_tls_symbol;"}, {"sha": "b3334749860d92c2f9ba3519027e2468c926214e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b251481d16865e3ebb4e6075f99c2c484e4c72/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d6b251481d16865e3ebb4e6075f99c2c484e4c72", "patch": "@@ -149,7 +149,6 @@\n    UNSPEC_IEEE128_MOVE\n    UNSPEC_IEEE128_CONVERT\n    UNSPEC_SIGNBIT\n-   UNSPEC_DOLOOP\n    UNSPEC_SF_FROM_SI\n    UNSPEC_SI_FROM_SF\n   ])\n@@ -12737,7 +12736,6 @@\n \t      (set (match_dup 0)\n \t\t   (plus:P (match_dup 0)\n \t\t\t    (const_int -1)))\n-\t      (unspec [(const_int 0)] UNSPEC_DOLOOP)\n \t      (clobber (match_scratch:CC 2 \"\"))\n \t      (clobber (match_scratch:P 3 \"\"))])]\n   \"\"\n@@ -12748,9 +12746,10 @@\n ;; JUMP_INSNs.\n ;; For the length attribute to be calculated correctly, the\n ;; label MUST be operand 0.\n-;; The UNSPEC is present to prevent combine creating this pattern.\n+;; rs6000_legitimate_combined_insn prevents combine creating any of\n+;; the ctr<mode> insns.\n \n-(define_insn \"*ctr<mode>_internal1\"\n+(define_insn \"ctr<mode>_internal1\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n@@ -12759,7 +12758,6 @@\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n@@ -12775,7 +12773,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n-(define_insn \"*ctr<mode>_internal2\"\n+(define_insn \"ctr<mode>_internal2\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n@@ -12784,7 +12782,6 @@\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n@@ -12802,7 +12799,7 @@\n \n ;; Similar but use EQ\n \n-(define_insn \"*ctr<mode>_internal5\"\n+(define_insn \"ctr<mode>_internal3\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n@@ -12811,7 +12808,6 @@\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n@@ -12827,7 +12823,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n-(define_insn \"*ctr<mode>_internal6\"\n+(define_insn \"ctr<mode>_internal4\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n@@ -12836,7 +12832,6 @@\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n@@ -12863,7 +12858,6 @@\n \t\t      (match_operand 6 \"\" \"\")))\n    (set (match_operand:P 0 \"int_reg_operand\" \"\")\n \t(plus:P (match_dup 1) (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:P 4 \"\"))]\n   \"reload_completed\"\n@@ -12889,7 +12883,6 @@\n \t\t      (match_operand 6 \"\" \"\")))\n    (set (match_operand:P 0 \"nonimmediate_operand\" \"\")\n \t(plus:P (match_dup 1) (const_int -1)))\n-   (unspec [(const_int 0)] UNSPEC_DOLOOP)\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:P 4 \"\"))]\n   \"reload_completed && ! gpc_reg_operand (operands[0], SImode)\""}]}