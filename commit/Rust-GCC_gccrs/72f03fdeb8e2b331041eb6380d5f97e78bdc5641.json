{"sha": "72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJmMDNmZGViOGUyYjMzMTA0MWViNjM4MGQ1Zjk3ZTc4YmRjNTY0MQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-11-01T02:11:12Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-11-01T02:11:12Z"}, "message": "vax.c: Include toplev.h.\n\n\t* vax.c: Include toplev.h.\n\t(vax_init_libfuncs): Fix typo (umod).\n\t* vax.h (ASM_COMMENT_START): Define.\n\t(PRINT_OPERAND): Fix warning when HOST_WIDE_INT is a long long.\n\nFrom-SVN: r73167", "tree": {"sha": "01c14a382d70fdc14448d1c7f3e906f50f53e71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01c14a382d70fdc14448d1c7f3e906f50f53e71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/comments", "author": null, "committer": null, "parents": [{"sha": "41ba7ed74c7c2f8c4ede7dd98f9e5550869df45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ba7ed74c7c2f8c4ede7dd98f9e5550869df45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ba7ed74c7c2f8c4ede7dd98f9e5550869df45c"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "ac79d42e26be2cc2e44e66276ed05589a5ffdfdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "patch": "@@ -1,3 +1,10 @@\n+2003-10-31  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* vax.c: Include toplev.h.\n+\t(vax_init_libfuncs): Fix typo (umod).\n+\t* vax.h (ASM_COMMENT_START): Define.\n+\t(PRINT_OPERAND): Fix warning when HOST_WIDE_INT is a long long.\n+\n 2003-10-31  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/11968"}, {"sha": "f572652fadee77b330cb3d3886560f0509809c7e", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"optabs.h\"\n #include \"flags.h\"\n #include \"debug.h\"\n+#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -152,7 +153,7 @@ static void\n vax_init_libfuncs (void)\n {\n   set_optab_libfunc (udiv_optab, SImode, TARGET_ELF ? \"*__udiv\" : \"*udiv\");\n-  set_optab_libfunc (umod_optab, SImode, TARGET_ELF ? \"*__umod\" : \"*umod\");\n+  set_optab_libfunc (umod_optab, SImode, TARGET_ELF ? \"*__urem\" : \"*urem\");\n }\n \n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */"}, {"sha": "35d865d0f8a72a0bf91ba40157ea2675d2fba679", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f03fdeb8e2b331041eb6380d5f97e78bdc5641/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=72f03fdeb8e2b331041eb6380d5f97e78bdc5641", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  VAX version.\n    Copyright (C) 1987, 1988, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -933,6 +933,12 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \f\n /* Control the assembler format that we output.  */\n \n+/* A C string constant describing how to begin a comment in the target\n+   assembler language.  The compiler assumes that the comment will end at\n+   the end of the line.  */\n+\n+#define ASM_COMMENT_START \"#\"\n+\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n \n@@ -1106,7 +1112,13 @@ VAX operand formatting codes:\n \n /* The purpose of D is to get around a quirk or bug in VAX assembler\n    whereby -1 in a 64-bit immediate operand means 0x00000000ffffffff,\n-   which is not a 64-bit minus one.  */\n+   which is not a 64-bit minus one.  As a workaround, we output negative\n+   values in hex.  */\n+#if HOST_BITS_PER_WIDE_INT == 64\n+#  define NEG_HWI_PRINT_HEX16 HOST_WIDE_INT_PRINT_HEX\n+#else\n+#  define NEG_HWI_PRINT_HEX16 \"0xffffffff%08lx\"\n+#endif\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '#' || (CODE) == '|')\n@@ -1118,7 +1130,7 @@ VAX operand formatting codes:\n   else if (CODE == 'C')\t\t\t\t\t\t\t\\\n     fputs (rev_cond_name (X), FILE);\t\t\t\t\t\\\n   else if (CODE == 'D' && GET_CODE (X) == CONST_INT && INTVAL (X) < 0)\t\\\n-    fprintf (FILE, \"$0xffffffff%08x\", INTVAL (X));\t\t\t\\\n+    fprintf (FILE, \"$\" NEG_HWI_PRINT_HEX16, INTVAL (X));\t\t\\\n   else if (CODE == 'P' && GET_CODE (X) == CONST_INT)\t\t\t\\\n     fprintf (FILE, \"$\" HOST_WIDE_INT_PRINT_DEC, INTVAL (X) + 1);\t\\\n   else if (CODE == 'N' && GET_CODE (X) == CONST_INT)\t\t\t\\"}]}