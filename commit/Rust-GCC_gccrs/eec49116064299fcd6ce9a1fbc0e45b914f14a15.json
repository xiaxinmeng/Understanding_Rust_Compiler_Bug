{"sha": "eec49116064299fcd6ce9a1fbc0e45b914f14a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjNDkxMTYwNjQyOTlmY2Q2Y2U5YTFmYmMwZTQ1YjkxNGYxNGExNQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-04-01T17:04:42Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-04-01T17:04:42Z"}, "message": "re PR c/33466 (mixed-case suffix for decimal float constants)\n\nlibcpp/\n\tPR c/33466\n\t* expr.c (interpret_float_suffix): Reject invalid suffix that uses\n\tletters from decimal float and fixed-point suffixes.\n\ngcc/testsuite\n\tPR c/33466\n\t* gcc.dg/cpp/pr33466.c: New test.\n\t* gcc.dg/dfp/pr33466.c: New test.\n\t* gcc.dg/fixed-point/pr33466.c: New test.\n\nFrom-SVN: r145417", "tree": {"sha": "03c9e0cc5126cdeaeacf71743476447cbfcfadbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c9e0cc5126cdeaeacf71743476447cbfcfadbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec49116064299fcd6ce9a1fbc0e45b914f14a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec49116064299fcd6ce9a1fbc0e45b914f14a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec49116064299fcd6ce9a1fbc0e45b914f14a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec49116064299fcd6ce9a1fbc0e45b914f14a15/comments", "author": null, "committer": null, "parents": [{"sha": "c4e751024524920e060b1c2fcbcc15423d86ac2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e751024524920e060b1c2fcbcc15423d86ac2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e751024524920e060b1c2fcbcc15423d86ac2c"}], "stats": {"total": 262, "additions": 200, "deletions": 62}, "files": [{"sha": "3723cb7ef23aeeff2c27bed35bf10559b27baf86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -1,3 +1,10 @@\n+2009-04-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/33466\n+\t* gcc.dg/cpp/pr33466.c: New test.\n+\t* gcc.dg/dfp/pr33466.c: New test.\n+\t* gcc.dg/fixed-point/pr33466.c: New test.\n+\n 2009-04-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/35011"}, {"sha": "8ddb37c8ed920b744c65581cd9c91eda90dc7c67", "filename": "gcc/testsuite/gcc.dg/cpp/pr33466.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33466.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33466.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33466.c?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Test various invalid constant float suffixes made up of letters of\n+   valid suffixes.  These are invalid regardless of whether the target\n+   compiler supports decimal float or fixed-point types.  */\n+\n+long double rh = 0.5rh;\t\t/* { dg-error \"invalid suffix\" } */\n+long double rl = 0.5rl;\t\t/* { dg-error \"invalid suffix\" } */\n+long double rll = 0.5rll;\t/* { dg-error \"invalid suffix\" } */\n+long double kh = 0.5kh;\t\t/* { dg-error \"invalid suffix\" } */\n+long double kl = 0.5kl;\t\t/* { dg-error \"invalid suffix\" } */\n+long double kll = 0.5kll;\t/* { dg-error \"invalid suffix\" } */\n+long double ru = 0.5ru;\t\t/* { dg-error \"invalid suffix\" } */\n+long double urh = 0.5urh;\t/* { dg-error \"invalid suffix\" } */\n+long double hur = 0.5hur;\t/* { dg-error \"invalid suffix\" } */\n+long double hru = 0.5hru;\t/* { dg-error \"invalid suffix\" } */\n+long double ruh = 0.5ruh;\t/* { dg-error \"invalid suffix\" } */\n+long double rhu = 0.5rhu;\t/* { dg-error \"invalid suffix\" } */\n+long double url = 0.5url;\t/* { dg-error \"invalid suffix\" } */\n+long double lur = 0.5lur;\t/* { dg-error \"invalid suffix\" } */\n+long double lru = 0.5lru;\t/* { dg-error \"invalid suffix\" } */\n+long double rul = 0.5rul;\t/* { dg-error \"invalid suffix\" } */\n+long double rlu = 0.5rlu;\t/* { dg-error \"invalid suffix\" } */\n+long double urll = 0.5urll;\t/* { dg-error \"invalid suffix\" } */\n+long double llur = 0.5llur;\t/* { dg-error \"invalid suffix\" } */\n+long double llru = 0.5llru;\t/* { dg-error \"invalid suffix\" } */\n+long double rull = 0.5rull;\t/* { dg-error \"invalid suffix\" } */\n+long double rllu = 0.5rllu;\t/* { dg-error \"invalid suffix\" } */\n+long double ku = 0.5ku;\t\t/* { dg-error \"invalid suffix\" } */\n+long double ukh = 0.5ukh;\t/* { dg-error \"invalid suffix\" } */\n+long double huk = 0.5huk;\t/* { dg-error \"invalid suffix\" } */\n+long double hku = 0.5hku;\t/* { dg-error \"invalid suffix\" } */\n+long double kuh = 0.5kuh;\t/* { dg-error \"invalid suffix\" } */\n+long double khu = 0.5khu;\t/* { dg-error \"invalid suffix\" } */\n+long double ukl = 0.5ukl;\t/* { dg-error \"invalid suffix\" } */\n+long double luk = 0.5luk;\t/* { dg-error \"invalid suffix\" } */\n+long double lku = 0.5lku;\t/* { dg-error \"invalid suffix\" } */\n+long double kul = 0.5kul;\t/* { dg-error \"invalid suffix\" } */\n+long double klu = 0.5klu;\t/* { dg-error \"invalid suffix\" } */\n+long double ukll = 0.5ukll;\t/* { dg-error \"invalid suffix\" } */\n+long double lluk = 0.5lluk;\t/* { dg-error \"invalid suffix\" } */\n+long double llku = 0.5llku;\t/* { dg-error \"invalid suffix\" } */\n+long double kull = 0.5kull;\t/* { dg-error \"invalid suffix\" } */\n+long double kllu = 0.5kllu;\t/* { dg-error \"invalid suffix\" } */\n+long double ld = 0.5ld;\t\t/* { dg-error \"invalid suffix\" } */\n+long double fd = 0.5fd;\t\t/* { dg-error \"invalid suffix\" } */\n+long double dk = 0.5dk;\t\t/* { dg-error \"invalid suffix\" } */\n+long double dr = 0.5dr;\t\t/* { dg-error \"invalid suffix\" } */\n+long double ddw = 0.5ddw;\t/* { dg-error \"invalid suffix\" } */\n+long double ddq = 0.5ddq;\t/* { dg-error \"invalid suffix\" } */\n+long double ddl = 0.5ddl;\t/* { dg-error \"invalid suffix\" } */\n+long double ddf = 0.5ddf;\t/* { dg-error \"invalid suffix\" } */\n+long double ddd = 0.5ddd;\t/* { dg-error \"invalid suffix\" } */\n+long double dw = 0.5dw;\t\t/* { dg-error \"invalid suffix\" } */\n+long double dq = 0.5dq;\t\t/* { dg-error \"invalid suffix\" } */\n+long double wd = 0.5wd;\t\t/* { dg-error \"invalid suffix\" } */\n+long double qd = 0.5qd;\t\t/* { dg-error \"invalid suffix\" } */\n+long double wdd = 0.5wdd;\t/* { dg-error \"invalid suffix\" } */\n+long double qdd = 0.5qdd;\t/* { dg-error \"invalid suffix\" } */\n+long double ldd = 0.5ldd;\t/* { dg-error \"invalid suffix\" } */\n+long double fdd = 0.5fdd;\t/* { dg-error \"invalid suffix\" } */\n+long double ddi = 0.5ddi;\t/* { dg-error \"invalid suffix\" } */\n+long double idd = 0.5idd;\t/* { dg-error \"invalid suffix\" } */"}, {"sha": "c8ac1116558aa3767cc15c53d7a47a695ce670a1", "filename": "gcc/testsuite/gcc.dg/dfp/pr33466.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* The suffix for a decimal float constant must use a single case.\n+\n+   These are invalid for all targets, not just those that support\n+    decimal float.  */\n+\n+long double dF = 4.5dF;\t\t/* { dg-error \"invalid suffix\" } */\n+long double Df = 4.5Df;\t\t/* { dg-error \"invalid suffix\" } */\n+long double dD = 4.5dD;\t\t/* { dg-error \"invalid suffix\" } */\n+long double Dd = 4.5Dd;\t\t/* { dg-error \"invalid suffix\" } */\n+long double dL = 4.5dL;\t\t/* { dg-error \"invalid suffix\" } */\n+long double Dl = 4.5Dl;\t\t/* { dg-error \"invalid suffix\" } */"}, {"sha": "196db310bf5cb5b1cb4de2f8d78b6c40f848edde", "filename": "gcc/testsuite/gcc.dg/fixed-point/pr33466.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fpr33466.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fpr33466.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fpr33466.c?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* The suffix for a fixed-point constant must use a specific order\n+   for the pieces, and a long long length specifier must use the\n+   same case (ll or LL).\n+\n+   These are invalid for all targets, not just those that support\n+   fixed-point types.  */\n+\n+long double lLr = 0.5lLr;\t/* { dg-error \"invalid suffix\" } */\n+long double lLR = 0.5lLR;\t/* { dg-error \"invalid suffix\" } */\n+long double Llr = 0.5Llr;\t/* { dg-error \"invalid suffix\" } */\n+long double LlR = 0.5LlR;\t/* { dg-error \"invalid suffix\" } */\n+long double ulLr = 0.5ulLr;\t/* { dg-error \"invalid suffix\" } */\n+long double ulLR = 0.5ulLR;\t/* { dg-error \"invalid suffix\" } */\n+long double uLlr = 0.5uLlr;\t/* { dg-error \"invalid suffix\" } */\n+long double uLlR = 0.5uLlR;\t/* { dg-error \"invalid suffix\" } */\n+long double UlLr = 0.5UlLr;\t/* { dg-error \"invalid suffix\" } */\n+long double UlLR = 0.5UlLR;\t/* { dg-error \"invalid suffix\" } */\n+long double ULlr = 0.5ULlr;\t/* { dg-error \"invalid suffix\" } */\n+long double ULlR = 0.5ULlR;\t/* { dg-error \"invalid suffix\" } */\n+long double lLk = 0.5lLk;\t/* { dg-error \"invalid suffix\" } */\n+long double lLK = 0.5lLK;\t/* { dg-error \"invalid suffix\" } */\n+long double Llk = 0.5Llk;\t/* { dg-error \"invalid suffix\" } */\n+long double LlK = 0.5LlK;\t/* { dg-error \"invalid suffix\" } */\n+long double ulLk = 0.5ulLk;\t/* { dg-error \"invalid suffix\" } */\n+long double ulLK = 0.5ulLK;\t/* { dg-error \"invalid suffix\" } */\n+long double uLlk = 0.5uLlk;\t/* { dg-error \"invalid suffix\" } */\n+long double uLlK = 0.5uLlK;\t/* { dg-error \"invalid suffix\" } */\n+long double UlLk = 0.5UlLk;\t/* { dg-error \"invalid suffix\" } */\n+long double UlLK = 0.5UlLK;\t/* { dg-error \"invalid suffix\" } */\n+long double ULlk = 0.5ULlk;\t/* { dg-error \"invalid suffix\" } */\n+long double ULlK = 0.5ULlK;\t/* { dg-error \"invalid suffix\" } */"}, {"sha": "c7c723995c882daff5ffb1c7c277f11db20cadec", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -1,3 +1,9 @@\n+2009-04-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/33466\n+\t* expr.c (interpret_float_suffix): Reject invalid suffix that uses\n+\tletters from decimal float and fixed-point suffixes.\n+\n 2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/15638"}, {"sha": "dbbb05a60bb53bc906cd7487a0cc3789c5b89637", "filename": "libcpp/expr.c", "status": "modified", "additions": 75, "deletions": 62, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec49116064299fcd6ce9a1fbc0e45b914f14a15/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec49116064299fcd6ce9a1fbc0e45b914f14a15/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=eec49116064299fcd6ce9a1fbc0e45b914f14a15", "patch": "@@ -83,89 +83,102 @@ static void check_promotion (cpp_reader *, const struct op *);\n static unsigned int\n interpret_float_suffix (const uchar *s, size_t len)\n {\n-  size_t f, l, w, q, i, d;\n-  size_t r, k, u, h;\n+  size_t flags;\n+  size_t f, l, w, q, i;\n \n-  f = l = w = q = i = d = 0;\n-  r = k = u = h = 0;\n+  flags = 0;\n+  f = l = w = q = i = 0;\n \n-  while (len--)\n-    switch (s[len])\n+  /* Process decimal float suffixes, which are two letters starting\n+     with d or D.  Order and case are significant.  */\n+  if (len == 2 && (*s == 'd' || *s == 'D'))\n+    {\n+      bool uppercase = (*s == 'D');\n+      switch (s[1])\n       {\n-      case 'r': case 'R': r++; break;\n-      case 'k': case 'K': k++; break;\n-      case 'u': case 'U': u++; break;\n-      case 'h': case 'H': h++; break;\n-      case 'f': case 'F':\n-\tif (d > 0)\n-\t  return 0;\n-\tf++;\n-\tbreak;\n-      case 'l': case 'L':\n-\tif (d > 0)\n-\t  return 0;\n-\tl++;\n-\t/* If there are two Ls, they must be adjacent and the same case.  */\n-\tif (l == 2 && s[len] != s[len + 1])\n-\t  return 0;\n-\tbreak;\n-      case 'w': case 'W':\n-\tif (d > 0)\n-\t  return 0;\n-\tw++;\n-\tbreak;\n-      case 'q': case 'Q':\n-\tif (d > 0)\n-\t  return 0;\n-\tq++;\n-\tbreak;\n-      case 'i': case 'I':\n-      case 'j': case 'J': i++; break;\n-      case 'd': case 'D': d++; break;\n+      case 'f': return (!uppercase ? (CPP_N_DFLOAT | CPP_N_SMALL): 0); break;\n+      case 'F': return (uppercase ? (CPP_N_DFLOAT | CPP_N_SMALL) : 0); break;\n+      case 'd': return (!uppercase ? (CPP_N_DFLOAT | CPP_N_MEDIUM): 0); break;\n+      case 'D': return (uppercase ? (CPP_N_DFLOAT | CPP_N_MEDIUM) : 0); break;\n+      case 'l': return (!uppercase ? (CPP_N_DFLOAT | CPP_N_LARGE) : 0); break;\n+      case 'L': return (uppercase ? (CPP_N_DFLOAT | CPP_N_LARGE) : 0); break;\n       default:\n \treturn 0;\n       }\n+    }\n \n-  if (r + k > 1 || h > 1 || l > 2 || u > 1)\n-    return 0;\n-\n-  if (r == 1)\n+  /* Recognize a fixed-point suffix.  */\n+  switch (s[len-1])\n     {\n-      if (f || i || d || w || q)\n-\treturn 0;\n-\n-      return (CPP_N_FRACT\n-\t      | (u ? CPP_N_UNSIGNED : 0)\n-\t      | (h ? CPP_N_SMALL :\n-\t\t l == 2 ? CPP_N_LARGE :\n-\t\t l == 1 ? CPP_N_MEDIUM :  0));\n+    case 'k': case 'K': flags = CPP_N_ACCUM; break;\n+    case 'r': case 'R': flags = CPP_N_FRACT; break;\n+    default: break;\n     }\n \n-  if (k == 1)\n+  /* Continue processing a fixed-point suffix.  The suffix is case\n+     insensitive except for ll or LL.  Order is significant.  */\n+  if (flags)\n     {\n-      if (f || i || d || w || q)\n-\treturn 0;\n+      if (len == 1)\n+\treturn flags;\n+      len--;\n+\n+      if (*s == 'u' || *s == 'U')\n+\t{\n+\t  flags |= CPP_N_UNSIGNED;\n+\t  if (len == 1)\n+\t    return flags;\n+\t  len--;\n+\t  s++;\n+        }\n \n-      return (CPP_N_ACCUM\n-\t      | (u ? CPP_N_UNSIGNED : 0)\n-\t      | (h ? CPP_N_SMALL :\n-\t\t l == 2 ? CPP_N_LARGE :\n-\t\t l == 1 ? CPP_N_MEDIUM :  0));\n+      switch (*s)\n+      {\n+      case 'h': case 'H':\n+\tif (len == 1)\n+\t  return flags |= CPP_N_SMALL;\n+\tbreak;\n+      case 'l':\n+\tif (len == 1)\n+\t  return flags |= CPP_N_MEDIUM;\n+\tif (len == 2 && s[1] == 'l')\n+\t  return flags |= CPP_N_LARGE;\n+\tbreak;\n+      case 'L':\n+\tif (len == 1)\n+\t  return flags |= CPP_N_MEDIUM;\n+\tif (len == 2 && s[1] == 'L')\n+\t  return flags |= CPP_N_LARGE;\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+      /* Anything left at this point is invalid.  */\n+      return 0;\n     }\n \n-  if (f + l + w + q > 1 || i > 1 || h + u > 0)\n-    return 0;\n+  /* In any remaining valid suffix, the case and order don't matter.  */\n+  while (len--)\n+    switch (s[len])\n+      {\n+      case 'f': case 'F': f++; break;\n+      case 'l': case 'L': l++; break;\n+      case 'w': case 'W': w++; break;\n+      case 'q': case 'Q': q++; break;\n+      case 'i': case 'I':\n+      case 'j': case 'J': i++; break;\n+      default:\n+\treturn 0;\n+      }\n \n-  /* Allow dd, df, dl suffixes for decimal float constants.  */\n-  if (d && ((d + f + l != 2) || i))\n+  if (f + l + w + q > 1 || i > 1)\n     return 0;\n \n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (f ? CPP_N_SMALL :\n \t     l ? CPP_N_LARGE :\n \t     w ? CPP_N_MD_W :\n-\t     q ? CPP_N_MD_Q : CPP_N_MEDIUM)\n-\t  | (d ? CPP_N_DFLOAT : 0));\n+\t     q ? CPP_N_MD_Q : CPP_N_MEDIUM));\n }\n \n /* Subroutine of cpp_classify_number.  S points to an integer suffix"}]}