{"sha": "74d91e8bb7935c1bf57fbc26437935eeee00d238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkOTFlOGJiNzkzNWMxYmY1N2ZiYzI2NDM3OTM1ZWVlZTAwZDIzOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-07T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-07T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "ca6d059e6626a827a5040cd5e2fa811cb6600553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6d059e6626a827a5040cd5e2fa811cb6600553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d91e8bb7935c1bf57fbc26437935eeee00d238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d91e8bb7935c1bf57fbc26437935eeee00d238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d91e8bb7935c1bf57fbc26437935eeee00d238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d91e8bb7935c1bf57fbc26437935eeee00d238/comments", "author": null, "committer": null, "parents": [{"sha": "11b8ffa493039e8da3a7bc7d3c14354735d41e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8ffa493039e8da3a7bc7d3c14354735d41e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8ffa493039e8da3a7bc7d3c14354735d41e46"}], "stats": {"total": 317, "additions": 316, "deletions": 1}, "files": [{"sha": "ba8a00966b33322fb23247ed8ca7c21667332a38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d91e8bb7935c1bf57fbc26437935eeee00d238", "patch": "@@ -1,3 +1,110 @@\n+2020-08-06  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (MM): New mode_iterator.\n+\t(\"mov<mode>\"): New expander to expand for all MM-modes.\n+\t(\"*movqi_expanded\", \"*movhi_expanded\", \"*movsi_expanded\")\n+\t(\"*movsf_expanded\", \"*movdf_expanded\"): Rename from the\n+\tcorresponding mov<M> named pattern.  Add to the condition that\n+\teither operand must be a register_operand.\n+\t(\"*movdi_expanded\"): Similar, but also allow STCO in the condition.\n+\n+2020-08-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/96191\n+\t* config/arm/arm.md (arm_stack_protect_test_insn): Zero out\n+\toperand 2 after use.\n+\t* config/arm/thumb1.md (thumb1_stack_protect_test_insn): Likewise.\n+\n+2020-08-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/96446\n+\t* config/rs6000/mma.md (*movpxi): Add xxsetaccz generation.\n+\tDisable split for zero constant source operand.\n+\t(mma_xxsetaccz): Change to define_expand.  Call gen_movpxi.\n+\n+2020-08-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96480\n+\t* tree-ssa-reassoc.c (suitable_cond_bb): Add TEST_SWAPPED_P argument.\n+\tIf TEST_BB ends in cond and has one edge to *OTHER_BB and another\n+\tthrough an empty bb to that block too, if PHI args don't match, retry\n+\tthem through the other path from TEST_BB.\n+\t(maybe_optimize_range_tests): Adjust callers.  Handle such LAST_BB\n+\tthrough inversion of the condition.\n+\n+2020-08-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config/bpf/bpf-helpers.h (KERNEL_HELPER): Define.\n+\t(KERNEL_VERSION): Remove.\n+\t* config/bpf/bpf-helpers.def: Delete.\n+\t* config/bpf/bpf.c (bpf_handle_fndecl_attribute): New function.\n+\t(bpf_attribute_table): Define.\n+\t(bpf_helper_names): Delete.\n+\t(bpf_helper_code): Likewise.\n+\t(enum bpf_builtins): Adjust to new helpers mechanism.\n+\t(bpf_output_call): Likewise.\n+\t(bpf_init_builtins): Likewise.\n+\t(bpf_init_builtins): Likewise.\n+\t* doc/extend.texi (BPF Function Attributes): New section.\n+\t(BPF Kernel Helpers): Delete section.\n+\n+2020-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96491\n+\t* tree-ssa-sink.c (sink_common_stores_to_bb): Avoid\n+\tsinking across abnormal edges.\n+\n+2020-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96483\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Handle\n+\tPOLY_INT_CST.\n+\n+2020-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-isl-ast-to-gimple.c (ivs_params): Use hash_map instead\n+\tof std::map.\n+\t(ivs_params_clear): Adjust.\n+\t(gcc_expression_from_isl_ast_expr_id): Likewise.\n+\t(graphite_create_new_loop): Likewise.\n+\t(add_parameters_to_ivs_params): Likewise.\n+\n+2020-08-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (MAXMIN_IMODE): No longer needed.\n+\t(<maxmin><mode>3):  Support SWI248 and general_operand for\n+\tsecond operand, when TARGET_CMOVE.\n+\t(<maxmin><mode>3_1 splitter): Optimize comparisons against\n+\t0, 1 and -1 to use \"test\" instead of \"cmp\".\n+\t(*<maxmin>di3_doubleword): Likewise, allow general_operand\n+\tand enable on TARGET_CMOVE.\n+\t(peephole2): Convert clearing a register after a flag setting\n+\tinstruction into an xor followed by the original flag setter.\n+\n+2020-08-06  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* ipa-fnsummary.c (INCLUDE_VECTOR): Define.\n+\tRemove direct inclusion of <vector>.\n+\n+2020-08-06  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_adjust_vect_cost_per_loop): New\n+\tfunction.\n+\t(rs6000_finish_cost): Call rs6000_adjust_vect_cost_per_loop.\n+\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Add cost\n+\tmodeling for vector with length.\n+\t(vect_rgroup_iv_might_wrap_p): New function, factored out from...\n+\t* tree-vect-loop-manip.c (vect_set_loop_controls_directly): ...this.\n+\tUpdate function comment.\n+\t* tree-vect-stmts.c (vect_gen_len): Update function comment.\n+\t* tree-vectorizer.h (vect_rgroup_iv_might_wrap_p): New declare.\n+\n+2020-08-06  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vectorizer.c (try_vectorize_loop_1): Skip the epilogue loops\n+\tfor dbgcnt check.\n+\n 2020-08-05  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/95906"}, {"sha": "007638ea22c873a9b44e331051a2765dd1760af2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=74d91e8bb7935c1bf57fbc26437935eeee00d238", "patch": "@@ -1 +1 @@\n-20200806\n+20200807"}, {"sha": "ca9395e78bfd8746ae0d61b76f44a9d92126c18e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d91e8bb7935c1bf57fbc26437935eeee00d238/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74d91e8bb7935c1bf57fbc26437935eeee00d238", "patch": "@@ -1,3 +1,147 @@\n+2020-08-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/arm/stack-protector-1.c: New test.\n+\t* gcc.target/arm/stack-protector-2.c: Likewise.\n+\n+2020-08-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/96446\n+\t* gcc.target/powerpc/pr96446.c: New test.\n+\n+2020-08-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/minmax-9.c: Restrict test to !ia32.\n+\n+2020-08-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96480\n+\t* gcc.dg/tree-ssa/pr96480.c: New test.\n+\n+2020-08-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* gcc.target/bpf/helper-bind.c: Adjust to new kernel helpers\n+\tmechanism.\n+\t* gcc.target/bpf/helper-bpf-redirect.c: Likewise.\n+\t* gcc.target/bpf/helper-clone-redirect.c: Likewise.\n+\t* gcc.target/bpf/helper-csum-diff.c: Likewise.\n+\t* gcc.target/bpf/helper-csum-update.c: Likewise.\n+\t* gcc.target/bpf/helper-current-task-under-cgroup.c: Likewise.\n+\t* gcc.target/bpf/helper-fib-lookup.c: Likewise.\n+\t* gcc.target/bpf/helper-get-cgroup-classid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-cgroup-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-comm.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-pid-tgid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-task.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-uid-gid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-hash-recalc.c: Likewise.\n+\t* gcc.target/bpf/helper-get-listener-sock.c: Likewise.\n+\t* gcc.target/bpf/helper-get-local-storage.c: Likewise.\n+\t* gcc.target/bpf/helper-get-numa-node-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-prandom-u32.c: Likewise.\n+\t* gcc.target/bpf/helper-get-route-realm.c: Likewise.\n+\t* gcc.target/bpf/helper-get-smp-processor-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-socket-cookie.c: Likewise.\n+\t* gcc.target/bpf/helper-get-socket-uid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-stack.c: Likewise.\n+\t* gcc.target/bpf/helper-get-stackid.c: Likewise.\n+\t* gcc.target/bpf/helper-getsockopt.c: Likewise.\n+\t* gcc.target/bpf/helper-ktime-get-ns.c: Likewise.\n+\t* gcc.target/bpf/helper-l3-csum-replace.c: Likewise.\n+\t* gcc.target/bpf/helper-l4-csum-replace.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-push-encap.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-action.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-adjust-srh.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-store-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-map-delete-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-lookup-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-peek-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-pop-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-push-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-update-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-apply-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-cork-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-pop-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-pull-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-push-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-redirect-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-override-return.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-output.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-read-value.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-read.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-prog-read-value.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-read-str.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-read.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-write-user.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-keydown.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-pointer-rel.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-repeat.c: Likewise.\n+\t* gcc.target/bpf/helper-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-set-hash-invalid.c: Likewise.\n+\t* gcc.target/bpf/helper-set-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-setsockopt.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-fullsock.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-lookup-tcp.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-lookup-upd.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-redirect-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-release.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-select-reuseport.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-storage-delete.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-storage-get.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-adjust-room.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-cgroup-id.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-head.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-proto.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-tail.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-type.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-ecn-set-ce.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-tunnel-key.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-tunnel-opt.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-xfrm-state.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-load-bytes-relative.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-load-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-pull-data.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-set-tunnel-key.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-set-tunnel-opt.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-store-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-under-cgroup.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-vlan-pop.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-vlan-push.c: Likewise.\n+\t* gcc.target/bpf/helper-skc-lookup-tcp.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-hash-update.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-map-update.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-ops-cb-flags-set.c: Likewise.\n+\t* gcc.target/bpf/helper-spin-lock.c: Likewise.\n+\t* gcc.target/bpf/helper-spin-unlock.c: Likewise.\n+\t* gcc.target/bpf/helper-strtol.c: Likewise.\n+\t* gcc.target/bpf/helper-strtoul.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-current-value.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-name.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-new-value.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-set-new-value.c: Likewise.\n+\t* gcc.target/bpf/helper-tail-call.c: Likewise.\n+\t* gcc.target/bpf/helper-tcp-check-syncookie.c: Likewise.\n+\t* gcc.target/bpf/helper-tcp-sock.c: Likewise.\n+\t* gcc.target/bpf/helper-trace-printk.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-head.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-meta.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-tail.c: Likewise.\n+\t* gcc.target/bpf/skb-ancestor-cgroup-id.c: Likewise.\n+\n+2020-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96491\n+\t* gcc.dg/torture/pr96491.c: New testcase.\n+\n+2020-08-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/minmax-8.c: New test.\n+\t* gcc.target/i386/minmax-9.c: New test.\n+\t* gcc.target/i386/minmax-10.c: New test.\n+\t* gcc.target/i386/minmax-11.c: New test.\n+\n 2020-08-05  Patrick Palka  <ppalka@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "d67aa1414758e978d5c5f22461257fea70c7e8d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d91e8bb7935c1bf57fbc26437935eeee00d238/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d91e8bb7935c1bf57fbc26437935eeee00d238/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74d91e8bb7935c1bf57fbc26437935eeee00d238", "patch": "@@ -1,3 +1,67 @@\n+2020-08-06  Andrew Luo  <andrewluotechnologies@outlook.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4): Use less greedy\n+\tpatterns for basic_string members.\n+\t(GLIBCXX_3.4.29): Export new basic_string::reserve symbols.\n+\t* doc/xml/manual/status_cxx2020.xml: Update P0966 status.\n+\t* include/bits/basic_string.h (shrink_to_fit()): Call reserve().\n+\t(reserve(size_type)): Remove default argument.\n+\t(reserve()): Declare new overload.\n+\t[!_GLIBCXX_USE_CXX11_ABI] (shrink_to_fit, reserve): Likewise.\n+\t* include/bits/basic_string.tcc (reserve(size_type)): Remove\n+\tsupport for shrinking capacity.\n+\t(reserve()): Perform shrink-to-fit operation.\n+\t[!_GLIBCXX_USE_CXX11_ABI] (reserve): Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/1.cc: Adjust to\n+\treflect new behavior.\n+\t* testsuite/21_strings/basic_string/capacity/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/18654.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/2.cc:\n+\tLikewise.\n+\n+2020-08-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.tcc\n+\t(operator>>(basic_istream&, basic_string&)): Do not set eofbit\n+\tif extraction stopped after in.width() characters.\n+\t* src/c++98/istream-string.cc (operator>>(istream&, string&)):\n+\tLikewise.\n+\t* include/bits/istream.tcc (__istream_extract): Do not set\n+\teofbit if extraction stopped after n-1 characters.\n+\t* src/c++98/istream.cc (__istream_extract): Likewise.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/13.cc: New test.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/13.cc: New test.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/5.cc: New test.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/5.cc: New test.\n+\n+2020-08-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96484\n+\t* src/c++17/fs_ops.cc (fs::read_symlink): Return an error\n+\timmediately for non-symlinks.\n+\t* src/filesystem/ops.cc (fs::read_symlink): Likewise.\n+\n+2020-08-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/istream (operator>>(istream&, char*)): Add\n+\tattributes to get warnings for pointers that are null or known\n+\tto point to the end of a buffer. Request upper bound from\n+\t__builtin_object_size check and handle zero-sized buffer case.\n+\t(operator>>(istream&, signed char))\n+\t(operator>>(istream&, unsigned char*)): Add attributes.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/overflow.cc:\n+\tCheck extracting into the middle of a buffer.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/overflow.cc: New test.\n+\n 2020-08-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/atomic (atomic<T>::store): Reformat."}]}