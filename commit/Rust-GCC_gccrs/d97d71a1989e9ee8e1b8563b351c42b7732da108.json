{"sha": "d97d71a1989e9ee8e1b8563b351c42b7732da108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3ZDcxYTE5ODllOWVlOGUxYjg1NjNiMzUxYzQyYjc3MzJkYTEwOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-16T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-16T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "2c298de71746b71c3c1e7323d6a22cb9df115913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c298de71746b71c3c1e7323d6a22cb9df115913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97d71a1989e9ee8e1b8563b351c42b7732da108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d71a1989e9ee8e1b8563b351c42b7732da108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97d71a1989e9ee8e1b8563b351c42b7732da108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d71a1989e9ee8e1b8563b351c42b7732da108/comments", "author": null, "committer": null, "parents": [{"sha": "c031ea2782a1873eee5ba82fb114cd87ff831412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c031ea2782a1873eee5ba82fb114cd87ff831412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c031ea2782a1873eee5ba82fb114cd87ff831412"}], "stats": {"total": 483, "additions": 482, "deletions": 1}, "files": [{"sha": "65e6a94e2bd9a793c9f52f0e30db45dd29778b81", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,7 @@\n+2021-07-15  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* MAINTAINERS: Add myself to DCO section.\n+\n 2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure: Regenerate."}, {"sha": "47772d9ff44b630ee9fcb9a41cea2fe51651c418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,155 @@\n+2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101346\n+\t* config/i386/i386.h (VALID_SSE_REG_MODE): Add TDmode.\n+\t(VALID_INT_MODE_P): Add SDmode and DDmode.\n+\tAdd TDmode for TARGET_64BIT.\n+\t(VALID_DFP_MODE_P): Remove.\n+\t* config/i386/i386.c (ix86_hard_regno_mode_ok):\n+\tDo not use VALID_DFP_MODE_P.\n+\n+2021-07-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (adjust_pointer_diff_expr): Use\n+\tgimple_range_type.\n+\t(fold_using_range::fold_stmt): Ditto.\n+\t(fold_using_range::range_of_range_op): Ditto.\n+\t(fold_using_range::range_of_phi): Ditto.\n+\t(fold_using_range::range_of_call): Ditto.\n+\t(fold_using_range::range_of_builtin_ubsan_call): Ditto.\n+\t(fold_using_range::range_of_builtin_call): Ditto.\n+\t(fold_using_range::range_of_cond_expr): Ditto.\n+\t* gimple-range-fold.h (gimple_range_type): New.\n+\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97027\n+\t* tree-ssa-strlen.c (handle_assign): New function.\n+\t(maybe_warn_overflow): Add argument.\n+\t(nonzero_bytes_for_type): New function.\n+\t(count_nonzero_bytes): Handle more tree types.  Call\n+\tnonzero_bytes_for_tye.\n+\t(count_nonzero_bytes): Handle types.\n+\t(handle_store): Handle stores from function calls.\n+\t(strlen_check_and_optimize_call): Move code to handle_assign.  Call\n+\tit for assignments from function calls.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95006\n+\tPR analyzer/94713\n+\tPR analyzer/94714\n+\t* doc/invoke.texi: Add -Wanalyzer-use-of-uninitialized-value.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (-fdump-analyzer-exploded-paths): New.\n+\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101289\n+\tPR c/97548\n+\t* fold-const.c (operand_compare::operand_equal_p): Handle OEP_DECL_NAME.\n+\t(operand_compare::verify_hash_value): Same.\n+\t* tree-core.h (OEP_DECL_NAME): New.\n+\n+2021-07-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* profile-count.h (profile_count::value): Change the return type to\n+\tuint64_t.\n+\t* gimple-pretty-print.c (dump_gimple_bb_header): Adjust print\n+\tstatement.\n+\t* tree-cfg.c (dump_function_to_file): Likewise.\n+\n+2021-07-15  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/101129\n+\t* config/rs6000/rs6000-p8swap.c (has_part_mult): New.\n+\t(rs6000_analyze_swaps): Insns containing a subreg of a mult are\n+\tnot swappable.\n+\n+2021-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_gen_while): Match up with\n+\tvect_gen_while_not.\n+\t* tree-vect-stmts.c (vect_gen_while): Adjust API to that\n+\tof vect_gen_while_not.\n+\t(vect_gen_while_not): Adjust.\n+\t* tree-vect-loop-manip.c (vect_set_loop_controls_directly): Likewise.\n+\n+2021-07-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::adjust_range): New.\n+\t(ranger_cache::range_of_def): Call adjust_range.\n+\t(ranger_cache::entry_range): Same.\n+\t* gimple-range-cache.h (non_null_ref::adjust_range): New.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Call\n+\tadjust_range.\n+\t(gimple_ranger::range_on_entry): Same.\n+\n+2021-07-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tRevert:\n+\t2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/neon.md (<sup>dot_prod<vsi2qi>): Drop statements.\n+\n+2021-07-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tRevert:\n+\t2021-07-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (udot, sdot): Rename to...\n+\t(sdot_prod, udot_prod): ...These.\n+\t* config/aarch64/aarch64-simd.md (<sur>dot_prod<vsi2qi>): Remove.\n+\t(aarch64_<sur>dot<vsi2qi>): Rename to...\n+\t(<sur>dot_prod<vsi2qi>): ...This.\n+\t* config/aarch64/arm_neon.h (vdot_u32, vdotq_u32, vdot_s32, vdotq_s32):\n+\tUpdate builtins.\n+\n+2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101437\n+\t* gimplify.c (gimplify_expr): Throw away volatile reads from empty\n+\ttypes even if they have non-BLKmode TYPE_MODE.\n+\n+2021-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR driver/101383\n+\t* gcc.c (process_command): Process -gtoggle like process_options\n+\twould after parsing options.\n+\n+2021-07-15  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* cfgexpand.c (expand_asm_loc): Adjust.\n+\t(expand_asm_stmt): Likewise.\n+\t* config/arm/aarch-common-protos.h (arm_md_asm_adjust): Likewise.\n+\t* config/arm/aarch-common.c (arm_md_asm_adjust): Likewise.\n+\t* config/arm/arm.c (thumb1_md_asm_adjust): Likewise.\n+\t* config/avr/avr.c (avr_md_asm_adjust): Likewise.\n+\t* config/cris/cris.c (cris_md_asm_adjust): Likewise.\n+\t* config/i386/i386.c (ix86_md_asm_adjust): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_md_asm_adjust): Likewise.\n+\t* config/nds32/nds32.c (nds32_md_asm_adjust): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_md_asm_adjust): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_md_asm_adjust): Likewise.\n+\t* config/s390/s390.c (s390_md_asm_adjust): Likewise.\n+\t* config/vax/vax.c (vax_md_asm_adjust): Likewise.\n+\t* config/visium/visium.c (visium_md_asm_adjust): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def: Add location argument to md_asm_adjust.\n+\n+2021-07-15  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* tree-diagnostic.c (diagnostic_report_current_function): Use the\n+\tdiagnostic's location, not input_location.\n+\n+2021-07-15  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* cfgexpand.c (tree_conflicts_with_clobbers_p): Pass location to\n+\tdiagnostics.\n+\t(expand_asm_stmt): Likewise.\n+\n 2021-07-14  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* config/rs6000/rs6000.c (adjacent_mem_locations): Return the lower"}, {"sha": "16244c60afdb3efb460106642047175a1ddebee7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1 +1 @@\n-20210715\n+20210716"}, {"sha": "e6bd95c31e3d67d53b4fa114e133b82eb01019e7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,151 @@\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* svalue.h (is_a_helper <placeholder_svalue *>::test): Make\n+\tparam and template param const.\n+\t(is_a_helper <widening_svalue *>::test): Likewise.\n+\t(is_a_helper <compound_svalue *>::test): Likewise.\n+\t(is_a_helper <conjured_svalue *>::test): Likewise.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95006\n+\tPR analyzer/94713\n+\tPR analyzer/94714\n+\t* analyzer.cc (maybe_reconstruct_from_def_stmt): Split out\n+\tGIMPLE_ASSIGN case into...\n+\t(get_diagnostic_tree_for_gassign_1): New.\n+\t(get_diagnostic_tree_for_gassign): New.\n+\t* analyzer.h (get_diagnostic_tree_for_gassign): New decl.\n+\t* analyzer.opt (Wanalyzer-write-to-string-literal): New.\n+\t* constraint-manager.cc (class svalue_purger): New.\n+\t(constraint_manager::purge_state_involving): New.\n+\t* constraint-manager.h\n+\t(constraint_manager::purge_state_involving): New.\n+\t* diagnostic-manager.cc (saved_diagnostic::supercedes_p): New.\n+\t(dedupe_winners::handle_interactions): New.\n+\t(diagnostic_manager::emit_saved_diagnostics): Call it.\n+\t* diagnostic-manager.h (saved_diagnostic::supercedes_p): New decl.\n+\t* engine.cc (impl_region_model_context::warn): Convert return type\n+\tto bool.  Return false if the diagnostic isn't saved.\n+\t(impl_region_model_context::purge_state_involving): New.\n+\t(impl_sm_context::get_state): Use NULL ctxt when querying old\n+\trvalue.\n+\t(impl_sm_context::set_next_state): Use new sval when querying old\n+\tstate.\n+\t(class dump_path_diagnostic): Move to region-model.cc\n+\t(exploded_node::on_stmt): Move to on_stmt_pre and on_stmt_post.\n+\tRemove call to purge_state_involving.\n+\t(exploded_node::on_stmt_pre): New, based on the above.  Move most\n+\tof it to region_model::on_stmt_pre.\n+\t(exploded_node::on_stmt_post): Likewise, moving to\n+\tregion_model::on_stmt_post.\n+\t(class stale_jmp_buf): Fix parent class to use curiously recurring\n+\ttemplate pattern.\n+\t(feasibility_state::maybe_update_for_edge): Call on_call_pre and\n+\ton_call_post on gcalls.\n+\t* exploded-graph.h (impl_region_model_context::warn): Return bool.\n+\t(impl_region_model_context::purge_state_involving): New decl.\n+\t(exploded_node::on_stmt_pre): New decl.\n+\t(exploded_node::on_stmt_post): New decl.\n+\t* pending-diagnostic.h (pending_diagnostic::use_of_uninit_p): New.\n+\t(pending_diagnostic::supercedes_p): New.\n+\t* program-state.cc (sm_state_map::get_state): Inherit state for\n+\tconjured_svalue as well as initial_svalue.\n+\t(sm_state_map::purge_state_involving): Also support SK_CONJURED.\n+\t* region-model-impl-calls.cc (call_details::get_uncertainty):\n+\tHandle m_ctxt being NULL.\n+\t(call_details::get_or_create_conjured_svalue): New.\n+\t(region_model::impl_call_fgets): New.\n+\t(region_model::impl_call_fread): New.\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_initial_value): Return an\n+\tuninitialized poisoned value for regions that can't have initial\n+\tvalues.\n+\t* region-model-reachability.cc\n+\t(reachable_regions::mark_escaped_clusters): Handle ctxt being\n+\tNULL.\n+\t* region-model.cc (region_to_value_map::purge_state_involving): New.\n+\t(poisoned_value_diagnostic::use_of_uninit_p): New.\n+\t(poisoned_value_diagnostic::emit): Handle POISON_KIND_UNINIT.\n+\t(poisoned_value_diagnostic::describe_final_event): Likewise.\n+\t(region_model::check_for_poison): New.\n+\t(region_model::on_assignment): Call it.\n+\t(class dump_path_diagnostic): Move here from engine.cc.\n+\t(region_model::on_stmt_pre): New, based on exploded_node::on_stmt.\n+\t(region_model::on_call_pre): Move the setting of the LHS to a\n+\tconjured svalue to before the checks for specific functions.\n+\tHandle \"fgets\", \"fgets_unlocked\", and \"fread\".\n+\t(region_model::purge_state_involving): New.\n+\t(region_model::handle_unrecognized_call): Handle ctxt being NULL.\n+\t(region_model::get_rvalue): Call check_for_poison.\n+\t(selftest::test_stack_frames): Use NULL for context when getting\n+\tuninitialized rvalue.\n+\t(selftest::test_alloca): Likewise.\n+\t* region-model.h (region_to_value_map::purge_state_involving): New\n+\tdecl.\n+\t(call_details::get_or_create_conjured_svalue): New decl.\n+\t(region_model::on_stmt_pre): New decl.\n+\t(region_model::purge_state_involving): New decl.\n+\t(region_model::impl_call_fgets): New decl.\n+\t(region_model::impl_call_fread): New decl.\n+\t(region_model::check_for_poison): New decl.\n+\t(region_model_context::warn): Return bool.\n+\t(region_model_context::purge_state_involving): New.\n+\t(noop_region_model_context::warn): Return bool.\n+\t(noop_region_model_context::purge_state_involving): New.\n+\t(test_region_model_context:: warn): Return bool.\n+\t* region.cc (region::get_memory_space): New.\n+\t(region::can_have_initial_svalue_p): New.\n+\t(region::involves_p): New.\n+\t* region.h (enum memory_space): New.\n+\t(region::get_memory_space): New decl.\n+\t(region::can_have_initial_svalue_p): New decl.\n+\t(region::involves_p): New decl.\n+\t* sm-malloc.cc (use_after_free::supercedes_p): New.\n+\t* store.cc (binding_cluster::purge_state_involving): New.\n+\t(store::purge_state_involving): New.\n+\t* store.h (class symbolic_binding): New forward decl.\n+\t(binding_key::dyn_cast_symbolic_binding): New.\n+\t(symbolic_binding::dyn_cast_symbolic_binding): New.\n+\t(binding_cluster::purge_state_involving): New.\n+\t(store::purge_state_involving): New.\n+\t* svalue.cc (svalue::can_merge_p): Reject attempts to merge\n+\tpoisoned svalues with other svalues, so that we identify\n+\tpaths in which a variable is conditionally uninitialized.\n+\t(involvement_visitor::visit_conjured_svalue): New.\n+\t(svalue::involves_p): Also handle SK_CONJURED.\n+\t(poison_kind_to_str): Handle POISON_KIND_UNINIT.\n+\t(poisoned_svalue::maybe_fold_bits_within): New.\n+\t* svalue.h (enum poison_kind): Add POISON_KIND_UNINIT.\n+\t(poisoned_svalue::maybe_fold_bits_within): New decl.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.opt (fdump-analyzer-exploded-paths): New.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::emit_saved_diagnostic): Implement it.\n+\t* engine.cc (exploded_path::dump_to_pp): Add ext_state param and\n+\tuse it to dump states if non-NULL.\n+\t(exploded_path::dump): Likewise.\n+\t(exploded_path::dump_to_file): New.\n+\t* exploded-graph.h (exploded_path::dump_to_pp): Add ext_state\n+\tparam.\n+\t(exploded_path::dump): Likewise.\n+\t(exploded_path::dump): Likewise.\n+\t(exploded_path::dump_to_file): New.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.cc (fixup_tree_for_diagnostic_1): Use DECL_DEBUG_EXPR\n+\tif it's available.\n+\t* engine.cc (readability): Likewise.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* state-purge.cc (self_referential_phi_p): New.\n+\t(state_purge_per_ssa_name::process_point): Don't purge an SSA name\n+\tat its def-stmt if the def-stmt is self-referential.\n+\n 2021-07-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-manager.cc (null_assignment_sm_context::get_state):"}, {"sha": "817f4c4079a9a1375558aaabce5c0d6944964d9b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,9 @@\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101289\n+\tPR c/97548\n+\t* c-warn.c (warn_parm_array_mismatch): Use OEP_DECL_NAME.\n+\n 2021-07-14  Jason Merrill  <jason@redhat.com>\n \n \t* c-opts.c (c_common_post_options): Set -fdelete-dead-exceptions."}, {"sha": "a19080619dbbfd0669a4153ea9b67025ddd84366", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,9 @@\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101289\n+\tPR c/97548\n+\t* c-decl.c (get_parm_array_spec): Strip nops.\n+\n 2021-07-06  Martin Sebor  <msebor@redhat.com>\n \n \t* c-objc-common.c (c_tree_printer): Remove support for %G and %K."}, {"sha": "0e2139ae47058e55f0b7ef1c5456d276f88c76b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,15 @@\n+2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101443\n+\t* cp-gimplify.c (cp_fold): For comparisons with NULLPTR_TYPE\n+\toperands, fold them right away to true or false.\n+\n+2021-07-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101095\n+\t* cp-objcp-common.c (cp_common_init_ts): Mark types as types.\n+\t(cp_tree_size): Remove redundant entries.\n+\n 2021-07-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88252"}, {"sha": "7a9a29ea2b27b78b3ab119d32cc1efb4969e3c9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,128 @@\n+2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101346\n+\t* gcc.target/i386/pr101346.c: New test.\n+\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97027\n+\t* gcc.dg/Wstringop-overflow-15.c: Remove an xfail.\n+\t* gcc.dg/Wstringop-overflow-47.c: Adjust xfails.\n+\t* gcc.dg/torture/pr69170.c: Avoid valid warnings.\n+\t* gcc.dg/torture/pr70025.c: Prune out a false positive.\n+\t* gcc.dg/vect/pr97769.c: Initialize a loop control variable.\n+\t* gcc.target/i386/pr92658-avx512bw-trunc.c: Increase buffer size\n+\tto avoid overflow.\n+\t* gcc.target/i386/pr92658-avx512f.c: Same.\n+\t* gcc.dg/Wstringop-overflow-68.c: New test.\n+\t* gcc.dg/Wstringop-overflow-69.c: New test.\n+\t* gcc.dg/Wstringop-overflow-70.c: New test.\n+\t* gcc.dg/Wstringop-overflow-71.c: New test.\n+\t* gcc.dg/strlenopt-95.c: New test.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95006\n+\tPR analyzer/94713\n+\tPR analyzer/94714\n+\t* g++.dg/analyzer/pr93212.C: Update location of warning.\n+\t* g++.dg/analyzer/pr94011.C: Add\n+\t-Wno-analyzer-use-of-uninitialized-value.\n+\t* g++.dg/analyzer/pr94503.C: Likewise.\n+\t* gcc.dg/analyzer/clobbers-1.c: Convert \"f\" from a local to a\n+\tparam to avoid uninitialized warning.\n+\t* gcc.dg/analyzer/data-model-1.c (test_12): Add test for\n+\tuninitialized value on result of alloca.\n+\t(test_12a): Add expected warning.\n+\t(test_12c): Likewise.\n+\t(test_19): Likewise.\n+\t(test_29b): Likewise.\n+\t(test_29c): Likewise.\n+\t(test_37): Remove xfail.\n+\t(test_37a): Likewise.\n+\t* gcc.dg/analyzer/data-model-20.c: Add warning about leak.\n+\t* gcc.dg/analyzer/explode-2.c: Remove params; add\n+\t-Wno-analyzer-too-complex, -Wno-analyzer-malloc-leak, and xfails.\n+\tInitialize the locals.\n+\t* gcc.dg/analyzer/explode-2a.c: Initialize the locals.  Add\n+\texpected leak.\n+\t* gcc.dg/analyzer/fgets-1.c: New test.\n+\t* gcc.dg/analyzer/fread-1.c: New test.\n+\t* gcc.dg/analyzer/malloc-1.c (test_16): Add expected warning.\n+\t(test_40): Likewise.\n+\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: Check for\n+\tuninitialized padding.\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility.c (fread): New\n+\tdecl.\n+\t(read_alias_file): Call it.\n+\t* gcc.dg/analyzer/pr94047.c: Add expected warnings.\n+\t* gcc.dg/analyzer/pr94851-2.c: Likewise.\n+\t* gcc.dg/analyzer/pr96841.c: Convert local to a param.\n+\t* gcc.dg/analyzer/pr98628.c: Likewise.\n+\t* gcc.dg/analyzer/pr99042.c: Updated expected location of leak\n+\tdiagnostics.\n+\t* gcc.dg/analyzer/symbolic-1.c: Add expected warnings.\n+\t* gcc.dg/analyzer/symbolic-7.c: Likewise.\n+\t* gcc.dg/analyzer/torture/pr93649.c: Add expected warning.  Skip\n+\twith -fno-fat-lto-objects.\n+\t* gcc.dg/analyzer/uninit-1.c: New test.\n+\t* gcc.dg/analyzer/uninit-2.c: New test.\n+\t* gcc.dg/analyzer/uninit-3.c: New test.\n+\t* gcc.dg/analyzer/uninit-4.c: New test.\n+\t* gcc.dg/analyzer/uninit-pr94713.c: New test.\n+\t* gcc.dg/analyzer/uninit-pr94714.c: New test.\n+\t* gcc.dg/analyzer/use-after-free-2.c: New test.\n+\t* gcc.dg/analyzer/use-after-free-3.c: New test.\n+\t* gcc.dg/analyzer/zlib-3.c: Add expected warning.\n+\t* gcc.dg/analyzer/zlib-6.c: Convert locals to params to avoid\n+\tuninitialized warnings.  Remove xfail.\n+\t* gcc.dg/analyzer/zlib-6a.c: New test, based on the old version\n+\tof the above.\n+\t* gfortran.dg/analyzer/pr97668.f: Add\n+\t-Wno-analyzer-use-of-uninitialized-value and\n+\t-Wno-analyzer-too-complex.\n+\n+2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/phi-1.c: New test.\n+\n+2021-07-15  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* lib/target-supports.exp (arm_v8_2a_imm8_neon_ok_nocache):\n+\tDelete.\n+\n+2021-07-15  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* gcc.target/arm/simd/vusdot-autovec.c: Use arm_v8_2a_i8mm_ok\n+\teffective-target.\n+\n+2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101443\n+\t* g++.dg/cpp0x/nullptr46.C: New test.\n+\n+2021-07-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR middle-end/101457\n+\t* gcc.dg/vect/vect-reduc-dot-17.c: Fix signs of scalar code.\n+\t* gcc.dg/vect/vect-reduc-dot-18.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-22.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-9.c: Likewise.\n+\n+2021-07-15  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wvla-parameter-12.c: New test.\n+\n+2021-07-15  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/101129\n+\t* gcc.target/powerpc/pr101129.c: New.\n+\n+2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101437\n+\t* gcc.c-torture/compile/pr101437.c: New test.\n+\n 2021-07-14  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* gcc.target/powerpc/mma-builtin-9.c: New test."}, {"sha": "01bac7a5804903f559b6795c70707d64d8e73102", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,9 @@\n+2021-07-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/morestack.S (R2_SAVE): Define.\n+\t(__morestack): Save and restore r2.  Set up r2 for called\n+\tfunctions.\n+\n 2021-07-01  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* soft-fp/extendhfxf2.c: New file."}, {"sha": "0072eed32f254586d3757b1f63eb5526f773d2e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d71a1989e9ee8e1b8563b351c42b7732da108/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d71a1989e9ee8e1b8563b351c42b7732da108/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d97d71a1989e9ee8e1b8563b351c42b7732da108", "patch": "@@ -1,3 +1,25 @@\n+2021-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101427\n+\t* include/std/tuple (tuple_element): Improve static_assert text.\n+\t(__get_helper): Add deleted overload.\n+\t(get<i>(tuple<T...>&&), get<i>(const tuple<T...>&&)): Use\n+\t__get_helper directly.\n+\t(__get_helper2): Remove.\n+\t(__find_uniq_type_in_pack): New constexpr helper function.\n+\t(get<T>): Use __find_uniq_type_in_pack and __get_helper instead\n+\tof __get_helper2.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust\n+\texpected errors.\n+\t* testsuite/20_util/tuple/element_access/101427.cc: New test.\n+\n+2021-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101429\n+\t* include/bits/c++config (__replacement_assert): Add noexcept.\n+\t[!_GLIBCXX_VERBOSE] (__glibcxx_assert_impl): Use __builtin_trap\n+\tinstead of __replacement_assert.\n+\n 2021-07-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/string_view (basic_string_view(It, End)): Add"}]}