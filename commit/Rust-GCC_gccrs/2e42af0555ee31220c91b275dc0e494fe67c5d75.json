{"sha": "2e42af0555ee31220c91b275dc0e494fe67c5d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0MmFmMDU1NWVlMzEyMjBjOTFiMjc1ZGMwZTQ5NGZlNjdjNWQ3NQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2005-06-07T01:18:02Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-07T01:18:02Z"}, "message": "* gnu/classpath/jdwp/transport/JdwpConnection.java: New file.\n\nFrom-SVN: r100688", "tree": {"sha": "9b7e063dfa88799855b3c4c63c7e1982d1dd0312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b7e063dfa88799855b3c4c63c7e1982d1dd0312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e42af0555ee31220c91b275dc0e494fe67c5d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e42af0555ee31220c91b275dc0e494fe67c5d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e42af0555ee31220c91b275dc0e494fe67c5d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e42af0555ee31220c91b275dc0e494fe67c5d75/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b1f7fc35d049ddd9223a969c141f45da9fd8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b1f7fc35d049ddd9223a969c141f45da9fd8d4"}], "stats": {"total": 266, "additions": 266, "deletions": 0}, "files": [{"sha": "a5ad66c5270dafe60857c3c0e26bec45f422d003", "filename": "libjava/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e42af0555ee31220c91b275dc0e494fe67c5d75/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e42af0555ee31220c91b275dc0e494fe67c5d75/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2e42af0555ee31220c91b275dc0e494fe67c5d75", "patch": "@@ -1,6 +1,7 @@\n 2005-06-06  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/util/Signature.java: New file.\n+\t* gnu/classpath/jdwp/transport/JdwpConnection.java: New file.\n \n 2005-06-05  Anthony Green  <green@redhat.com>\n "}, {"sha": "a22bbb9f208d95603a9ff074d85035be6fb0cf34", "filename": "libjava/gnu/classpath/jdwp/transport/JdwpConnection.java", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e42af0555ee31220c91b275dc0e494fe67c5d75/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e42af0555ee31220c91b275dc0e494fe67c5d75/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java?ref=2e42af0555ee31220c91b275dc0e494fe67c5d75", "patch": "@@ -0,0 +1,265 @@\n+/* JdwpConnection.java -- A JDWP-speaking connection\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+import gnu.classpath.jdwp.Jdwp;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * A connection via some transport to some JDWP-speaking entity.\n+ * This is also a thread which handles all communications to/from\n+ * the debugger. While access to the transport layer may be accessed by\n+ * several threads, start-up and initialization should not be allowed\n+ * to occur more than once.\n+ *\n+ * <p>This class is also a thread that is responsible for pulling\n+ * packets off the wire and sticking them in a queue for packet\n+ * processing threads.\n+ * \n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class JdwpConnection\n+  extends Thread\n+{\n+  // The JDWP handshake\n+  private static final byte[] _HANDSHAKE = {'J', 'D', 'W', 'P', '-', 'H', 'a', 'n', 'd', 's', 'h', 'a', 'k', 'e'};\n+\n+  // Transport method\n+  private ITransport _transport;\n+\n+  // Command queue\n+  private ArrayList _commandQueue;\n+\n+  // Shutdown flag\n+  private boolean _shutdown;\n+\n+  // Input stream from transport\n+  private DataInputStream _inStream;\n+\n+  // Output stream from transprot\n+  private DataOutputStream _outStream;\n+\n+  /**\n+   * Creates a new <code>JdwpConnection</code> instance\n+   *\n+   * @param transport  the transport to use for communications\n+   */\n+  public JdwpConnection (ITransport transport)\n+  {\n+    _transport = transport;\n+    _commandQueue = new ArrayList ();\n+    _shutdown = false;\n+  }\n+\n+  /**\n+   * Initializes the connection, including connecting\n+   * to socket or shared memory endpoint\n+   *\n+   * @throws TransportException if initialization fails\n+   */\n+  public void initialize ()\n+    throws TransportException\n+  {\n+    // Initialize transport (connect socket, e.g.)\n+    _transport.initialize ();\n+\n+    // Do handshake\n+    try\n+      {\n+\t_inStream = new DataInputStream (_transport.getInputStream ());\n+\t_outStream = new DataOutputStream (_transport.getOutputStream ());\n+\t_doHandshake ();\n+      }\n+    catch (IOException ioe)\n+      {\n+\tthrow new TransportException (ioe);\n+      }\n+  }\n+\n+  /* Does the JDWP handshake -- this should not need synchronization\n+     because this is called by VM startup code, i.e., no packet\n+     processing threads have started yet. */\n+  private void _doHandshake ()\n+    throws IOException\n+  {\n+    // According to the spec, the handshake is always initiated by\n+    // the debugger, regardless of whether the JVM is in client mode or\n+    // server mode.\n+\n+    // Wait for handshake from debugger\n+    byte[] hshake = new byte[_HANDSHAKE.length];\n+    _inStream.readFully (hshake, 0, _HANDSHAKE.length);\n+\n+    if (Arrays.equals (hshake, _HANDSHAKE))\n+      {\n+\t// Send reply handshake\n+\t_outStream.write (_HANDSHAKE, 0, _HANDSHAKE.length);\n+\treturn;\n+      }\n+    else\n+      {\n+\tthrow new IOException (\"invalid JDWP handshake (\\\"\" + hshake + \"\\\")\");\n+      }\n+  }\n+\n+  /**\n+   * Main run method for the thread. This thread loops waiting for\n+   * packets to be read via the connection. When a packet is complete\n+   * and ready for processing, it places the packet in a queue that can\n+   * be accessed via <code>getPacket</code>\n+   */\n+  public void run ()\n+  {\n+    while (!_shutdown)\n+      {\n+\ttry\n+\t  {\n+\t    _readOnePacket ();\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t    /* IOException can occur for two reasons:\n+\t       1. Lost connection with the other side\n+\t       2. Transport was shutdown\n+\t       In either case, we make sure that all of the\n+\t       back-end gets shutdown. */\n+\t    Jdwp.getInstance().shutdown ();\n+\t  }\n+\tcatch (Throwable t)\n+\t  {\n+\t    System.out.println (\"JdwpConnection.run: caught an exception: \"\n+\t\t\t\t+ t);\n+\t    // Just keep going\n+\t  }\n+      }\n+  }\n+\n+  // Reads a single packet from the connection, adding it to the packet\n+  // queue when a complete packet is ready.\n+  private void _readOnePacket ()\n+    throws IOException\n+  {\n+    byte[] data = null;\n+\n+    // Read in the packet\n+    int length = _inStream.readInt ();\n+    if (length < 11)\n+      {\n+\tthrow new IOException (\"JDWP packet length < 11 (\" \n+\t\t\t       + length + \")\");\n+      }\n+\n+    data = new byte[length];\n+    data[0] = (byte) (length >>> 24);\n+    data[1] = (byte) (length >>> 16);\n+    data[2] = (byte) (length >>> 8);\n+    data[3] = (byte) length;\n+    _inStream.readFully (data, 4, length - 4);\n+\n+    JdwpPacket packet = JdwpPacket.fromBytes (data);\n+    if (packet != null)\n+      {\n+\tsynchronized (_commandQueue)\n+\t  {\n+\t    _commandQueue.add (packet);\n+\t    _commandQueue.notifyAll ();\n+\t  }\n+      }\n+  }\n+\n+  /**\n+   * Returns a packet from the queue of ready packets\n+   *\n+   * @returns  a <code>JdwpPacket</code> ready for processing\n+   *           <code>null</code> when shutting down\n+   */\n+  public JdwpPacket getPacket ()\n+  {\n+    synchronized (_commandQueue)\n+      {\n+\twhile (_commandQueue.isEmpty ())\n+\t  {\n+\t    try\n+\t      {\n+\t\t_commandQueue.wait ();\n+\t      }\n+\t    catch (InterruptedException ie)\n+\t      {\n+\t\t/* PacketProcessor is interrupted\n+\t\t   when shutting down */\n+\t\treturn null;\n+\t      }\n+\t  }\n+\n+\treturn (JdwpPacket) _commandQueue.remove (0);\n+      }\n+  }\n+\n+  /**\n+   * Send a packet to the debugger\n+   *\n+   * @param pkt a <code>JdwpPacket</code> to send\n+   * @throws TransportException\n+   */\n+  public void sendPacket (JdwpPacket pkt)\n+    throws IOException\n+  {\n+    byte[] data = pkt.toBytes ();\n+    _outStream.write (data, 0, data.length);\n+  }\n+\n+  /**\n+   * Shutdown the connection\n+   */\n+  public void shutdown ()\n+  {\n+    if (!_shutdown)\n+      {\n+\t_transport.shutdown ();\n+\t_shutdown = true;\n+\tinterrupt ();\n+      }\n+  }\n+}"}]}