{"sha": "9716cc3efff27109cc0ac293f0a1356c2fcf249d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxNmNjM2VmZmYyNzEwOWNjMGFjMjkzZjBhMTM1NmMyZmNmMjQ5ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-08-03T14:02:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-08-03T14:02:19Z"}, "message": "ipa-devirt.c (odr_type_warn_count): Add type.\n\n\t* ipa-devirt.c (odr_type_warn_count): Add type.\n\t(possible_polymorphic_call_targets): Set it.\n\t(ipa_devirt): Use it.\n\nFrom-SVN: r213526", "tree": {"sha": "ad75b0f0e4dadb536b176aa8622f4faadae1fdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad75b0f0e4dadb536b176aa8622f4faadae1fdc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9716cc3efff27109cc0ac293f0a1356c2fcf249d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9716cc3efff27109cc0ac293f0a1356c2fcf249d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9716cc3efff27109cc0ac293f0a1356c2fcf249d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9716cc3efff27109cc0ac293f0a1356c2fcf249d/comments", "author": null, "committer": null, "parents": [{"sha": "62e4eb3553f9ce05a6d08a1ef7d8e59f81aeeee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e4eb3553f9ce05a6d08a1ef7d8e59f81aeeee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e4eb3553f9ce05a6d08a1ef7d8e59f81aeeee6"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "f193068343e11392acfcf9840c5e5141aafd041a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9716cc3efff27109cc0ac293f0a1356c2fcf249d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9716cc3efff27109cc0ac293f0a1356c2fcf249d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9716cc3efff27109cc0ac293f0a1356c2fcf249d", "patch": "@@ -1,3 +1,9 @@\n+2014-08-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (odr_type_warn_count): Add type.\n+\t(possible_polymorphic_call_targets): Set it.\n+\t(ipa_devirt): Use it.\n+\n 2014-08-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* doc/invoke.texi (Wsuggest-final-types, Wsuggest-final-methods): Document.\n@@ -24,14 +30,14 @@\n \t* hash-map.h (default_hashmap_traits::mark_key_deleted):\n \tFix cast.\n \t(hash_map::remove): New method.\n-(hash_map::traverse): New method.\n+\t(hash_map::traverse): New method.\n \t* cgraph.h, except.c, except.h, gimple-ssa-strength-reduction.c,\n \tipa-utils.c, lto-cgraph.c, lto-streamer.h, omp-low.c, predict.c,\n \ttree-cfg.c, tree-cfgcleanup.c, tree-eh.c, tree-eh.h, tree-inline.c,\n \ttree-inline.h, tree-nested.c, tree-sra.c, tree-ssa-loop-im.c,\n \ttree-ssa-loop-ivopts.c, tree-ssa-reassoc.c, tree-ssa-structalias.c,\n \ttree-ssa.c, tree-ssa.h, var-tracking.c: Use hash_map instead of\n- pointer_map.\n+\tpointer_map.\n \n 2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n "}, {"sha": "56eeaf5c9c2d05aa671754e780cd5e803b6171c4", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9716cc3efff27109cc0ac293f0a1356c2fcf249d/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9716cc3efff27109cc0ac293f0a1356c2fcf249d/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=9716cc3efff27109cc0ac293f0a1356c2fcf249d", "patch": "@@ -2518,6 +2518,7 @@ devirt_variable_node_removal_hook (varpool_node *n,\n /* Record about how many calls would benefit from given type to be final.  */\n struct odr_type_warn_count\n {\n+  tree type;\n   int count;\n   gcov_type dyn_count;\n };\n@@ -2738,6 +2739,7 @@ possible_polymorphic_call_targets (tree otr_type,\n       if (binfo)\n \tmatched_vtables.add (BINFO_VTABLE (binfo));\n \n+\n       /* Next walk recursively all derived types.  */\n       if (context.speculative_maybe_derived_type)\n \tfor (i = 0; i < speculative_outer_type->derived_types.length(); i++)\n@@ -2818,6 +2820,8 @@ possible_polymorphic_call_targets (tree otr_type,\n \t\t  final_warning_records->type_warnings[outer_type->id].count++;\n \t\t  final_warning_records->type_warnings[outer_type->id].dyn_count\n \t\t    += final_warning_records->dyn_count;\n+\t\t  final_warning_records->type_warnings[outer_type->id].type\n+\t\t    = outer_type->type;\n \t\t  (*slot)->type_warning = outer_type->id + 1;\n \t\t}\n \t      if (complete\n@@ -3274,12 +3278,12 @@ ipa_devirt (void)\n \t       i < final_warning_records->type_warnings.length (); i++)\n \t    if (final_warning_records->type_warnings[i].count)\n \t      {\n-\t\todr_type type = odr_types[i];\n-\t\twarning_at (DECL_SOURCE_LOCATION (TYPE_NAME (type->type)),\n+\t        tree type = final_warning_records->type_warnings[i].type;\n+\t\twarning_at (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n \t\t\t    OPT_Wsuggest_final_types,\n \t\t\t    \"Declaring type %qD final \"\n \t\t\t    \"would enable devirtualization of %i calls\",\n-\t\t\t    type->type,\n+\t\t\t    type,\n \t\t\t    final_warning_records->type_warnings[i].count);\n \t      }\n \t}"}]}