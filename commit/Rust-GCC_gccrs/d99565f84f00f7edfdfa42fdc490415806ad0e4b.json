{"sha": "d99565f84f00f7edfdfa42fdc490415806ad0e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk5NTY1Zjg0ZjAwZjdlZGZkZmE0MmZkYzQ5MDQxNTgwNmFkMGU0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:12:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:12:14Z"}, "message": "[multiple changes]\n\n2014-10-31  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch13.adb (Check_Constant_Address_Clause): Disable checks\n\ton address clauses in CodePeer mode.\n\n2014-10-31  Javier Miranda  <miranda@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): Do not skip\n\tinlining of calls to subprogram renamings.\n\n2014-10-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Entity_Name): Account for\n\tthe case where the immediate parent of a reference to an entity\n\tis a parameter association.\n\nFrom-SVN: r216960", "tree": {"sha": "3d78a402ce261033d427e046bc679f4a1ec37435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d78a402ce261033d427e046bc679f4a1ec37435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d99565f84f00f7edfdfa42fdc490415806ad0e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99565f84f00f7edfdfa42fdc490415806ad0e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99565f84f00f7edfdfa42fdc490415806ad0e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99565f84f00f7edfdfa42fdc490415806ad0e4b/comments", "author": null, "committer": null, "parents": [{"sha": "2ef051289c77160d87d20f11c27d2ea53bf75861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef051289c77160d87d20f11c27d2ea53bf75861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef051289c77160d87d20f11c27d2ea53bf75861"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "37e32f928fcb945aeb04b4534d43ad28d80d609f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d99565f84f00f7edfdfa42fdc490415806ad0e4b", "patch": "@@ -1,3 +1,19 @@\n+2014-10-31  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Constant_Address_Clause): Disable checks\n+\ton address clauses in CodePeer mode.\n+\n+2014-10-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Do not skip\n+\tinlining of calls to subprogram renamings.\n+\n+2014-10-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entity_Name): Account for\n+\tthe case where the immediate parent of a reference to an entity\n+\tis a parameter association.\n+\n 2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inline.adb (Check_And_Split_Unconstrained_Function): Do not"}, {"sha": "8157bf20a258b327ef4d339e786e1ccc3d005a22", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d99565f84f00f7edfdfa42fdc490415806ad0e4b", "patch": "@@ -2659,7 +2659,9 @@ package body Inline is\n       --  Body_To_Inline is also set for renamings (see sinfo.ads)\n \n       elsif Nkind (Orig_Bod) in N_Entity then\n-         return;\n+         if not Has_Pragma_Inline (Subp) then\n+            return;\n+         end if;\n \n       --  Skip inlining if the function returns an unconstrained type using\n       --  an extended return statement since this part of the new inlining"}, {"sha": "826b3dc18a4539cacfcb405995386f7158231ac0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d99565f84f00f7edfdfa42fdc490415806ad0e4b", "patch": "@@ -9197,8 +9197,9 @@ package body Sem_Ch13 is\n       --  particular, no need to pester user about rep clauses that violate\n       --  the rule on constant addresses, given that these clauses will be\n       --  removed by Freeze before they reach the back end.\n+      --  Similarly in CodePeer mode, we want to relax these checks.\n \n-      if not Ignore_Rep_Clauses then\n+      if not Ignore_Rep_Clauses and not CodePeer_Mode then\n          Check_Expr_Constants (Expr);\n       end if;\n    end Check_Constant_Address_Clause;"}, {"sha": "973c0d899a8ee27850dc6b172c30655e7f8c686c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d99565f84f00f7edfdfa42fdc490415806ad0e4b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d99565f84f00f7edfdfa42fdc490415806ad0e4b", "patch": "@@ -6740,7 +6740,7 @@ package body Sem_Res is\n       --  Local variables\n \n       E   : constant Entity_Id := Entity (N);\n-      Par : constant Node_Id   := Parent (N);\n+      Par : Node_Id;\n \n    --  Start of processing for Resolve_Entity_Name\n \n@@ -6846,6 +6846,15 @@ package body Sem_Res is\n          Eval_Entity_Name (N);\n       end if;\n \n+      Par := Parent (N);\n+\n+      --  When the entity appears in a parameter association, retrieve the\n+      --  related subprogram call.\n+\n+      if Nkind (Par) = N_Parameter_Association then\n+         Par := Parent (Par);\n+      end if;\n+\n       --  An effectively volatile object subject to enabled properties\n       --  Async_Writers or Effective_Reads must appear in a specific context.\n       --  The following checks are only relevant when SPARK_Mode is on as they\n@@ -6865,8 +6874,8 @@ package body Sem_Res is\n             null;\n \n          --  Assume that references to effectively volatile objects that appear\n-         --  as actual parameters in a procedure call are always legal. The\n-         --  full legality check is done when the actuals are resolved.\n+         --  as actual parameters in a procedure call are always legal. A full\n+         --  legality check is done when the actuals are resolved.\n \n          elsif Nkind (Par) = N_Procedure_Call_Statement then\n             null;"}]}