{"sha": "c1d5bfb9275017caf0d6af87577796ee982c2515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkNWJmYjkyNzUwMTdjYWYwZDZhZjg3NTc3Nzk2ZWU5ODJjMjUxNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T21:41:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T21:41:32Z"}, "message": "(reload_outhi): New pattern.\n\n(movhi): Handle reloads better.\n(restorehi): Delete.  Also tidy up commented out code.\n(call): Make this a define_expand.\n(matcher for above): only accept MEM(reg)\n(call_value): Handle as for (call).\n\nFrom-SVN: r5810", "tree": {"sha": "15268f84ee417477bdc2c4c8d3033355e4225c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15268f84ee417477bdc2c4c8d3033355e4225c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1d5bfb9275017caf0d6af87577796ee982c2515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d5bfb9275017caf0d6af87577796ee982c2515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d5bfb9275017caf0d6af87577796ee982c2515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d5bfb9275017caf0d6af87577796ee982c2515/comments", "author": null, "committer": null, "parents": [{"sha": "7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e"}], "stats": {"total": 90, "additions": 32, "deletions": 58}, "files": [{"sha": "c778d92ea55e88d746161f48e65c62580a5d69cf", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 32, "deletions": 58, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d5bfb9275017caf0d6af87577796ee982c2515/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d5bfb9275017caf0d6af87577796ee982c2515/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c1d5bfb9275017caf0d6af87577796ee982c2515", "patch": "@@ -2410,52 +2410,6 @@\n \"\n [(set_attr \"conds\" \"set\")])\n \n-;; XXX The movhi stuff isn't as correct or as nice as it could be...\n-\n-;; Subroutine to load a half word into a register from memory.\n-;; Operand 0 is the destination register (HImode).\n-;; Operand 1 is the source address (SImode).\n-;; Operand 2 is a temporary (SImode).\n-\n-;;(define_expand \"loadhi\"\n-;;  [;; load the whole word (ARM realigns it if not on word boundary)\n-;;   (set (match_operand:SI 2 \"s_register_operand\" \"\")\n-;;        (mem:SI (match_operand:SI 1 \"address_operand\" \"\")))\n-;;   ;; quietly forget the upper 16 bits\n-;;   (set (match_operand:HI 0 \"s_register_operand\" \"\")\n-;;        (subreg:HI (match_dup 2) 0))]\n-;;  \"\"\n-;;  \"\"\n-;;)\n-\n-;; Load op0 from mem:op1.  Subroutine in case we're reloading and the normal\n-;; loadhi is not allowed.\n-\n-;;(define_expand \"reloadhi\"\n-;;  [(set (reg:SI 10)\n-;;\t(mem:SI (match_operand:SI 1 \"address_operand\" \"\")))\n-;;   (set (match_operand:HI 0 \"s_register_operand\" \"\")\n-;;\t(subreg:HI (reg:SI 10) 0))]\n-;;  \"\" \"\")\n-\n-;; Store op0 into mem:op1.  Subroutine in case we're reloading and the normal\n-;; storehi is not allowed.\n-\n-(define_expand \"restorehi\"\n-  [(set (mem:QI (match_operand:SI 1 \"\" \"\"))\n-\t(match_dup 2))\n-   (set (reg:SI 10)\n-\t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n-   (set (mem:QI (match_dup 3))\n-\t(reg:QI 10))]\n-  \"\"\n-  \"\n-{\n-  operands[2] = gen_lowpart (QImode, operands[0]);\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[3] = plus_constant (operands[1], 1);\n-}\")\n-\n ;; Subroutine to store a half word from a register into memory.\n ;; Operand 0 is the source register (HImode)\n ;; Operand 1 is the destination address in a register (SImode)\n@@ -2525,12 +2479,7 @@\n   rtx insn;\n \n   if (reload_in_progress || reload_completed)\n-    {\n-      if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == REG)\n-\tinsn = gen_restorehi (operands[1], XEXP (operands[0], 0));\n-      else\n-\tinsn = gen_rtx (SET, VOIDmode, operands[0], operands[1]);\n-    }\n+    insn = gen_rtx (SET, VOIDmode, operands[0], operands[1]);\n   else\n     {\n       if (GET_CODE (operands[0]) == MEM)\n@@ -2611,6 +2560,16 @@\n \"\n [(set_attr \"type\" \"*,*,load,store1\")])\n \n+(define_expand \"reload_outhi\"\n+  [(parallel [(match_operand:HI 0 \"reload_memory_operand\" \"=o\")\n+\t      (match_operand:HI 1 \"s_register_operand\" \"r\")\n+\t      (match_operand:SI 2 \"s_register_operand\" \"=&r\")])]\n+  \"\"\n+  \"\n+  arm_reload_out_hi (operands);\n+  DONE;\n+\")\n+\n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n         (match_operand:QI 1 \"general_operand\" \"\"))]\n@@ -3724,9 +3683,16 @@\n   return (arm_output_asm_insn (\\\"b\\\\t%l0\\\", operands));\n }\")\n \n-(define_insn \"call\"\n-  [(call (match_operand 0 \"memory_operand\" \"m\")\n-\t (match_operand 1 \"general_operand\" \"g\"))\n+(define_expand \"call\"\n+  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n+\t            (match_operand 1 \"general_operand\" \"\"))\n+\t      (clobber (reg:SI 14))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(call (mem:SI (match_operand:SI 0 \"s_register_operand\" \"r\"))\n+         (match_operand 1 \"\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n@@ -3755,10 +3721,18 @@\n  (set_attr \"length\" \"3\")\n  (set_attr \"type\" \"call\")])\n \n-(define_insn \"call_value\"\n+(define_expand \"call_value\"\n+  [(parallel [(set (match_operand 0 \"\" \"=rf\")\n+\t           (call (match_operand 1 \"memory_operand\" \"m\")\n+\t\t         (match_operand 2 \"general_operand\" \"g\")))\n+\t      (clobber (reg:SI 14))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (match_operand 1 \"memory_operand\" \"m\")\n-\t(match_operand 2 \"general_operand\" \"g\")))\n+        (call (mem:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t      (match_operand 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*"}]}