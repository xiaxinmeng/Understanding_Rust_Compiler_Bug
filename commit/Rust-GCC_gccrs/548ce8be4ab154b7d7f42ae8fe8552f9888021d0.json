{"sha": "548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4Y2U4YmU0YWIxNTRiN2Q3ZjQyYWU4ZmU4NTUyZjk4ODgwMjFkMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-16T21:15:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-16T21:15:44Z"}, "message": "RuntimeException.java: Re-merge with Classpath.\n\n\t* java/lang/RuntimeException.java: Re-merge with Classpath.\n\t* java/util/ArrayList.java: Likewise.\n\t* java/util/Arrays.java: Likewise.\n\t* java/util/BitSet.java: Likewise.\n\t* java/util/Dictionary.java: Likewise.\n\t* java/util/IdentityHashMap.java: Likewise.\n\t* java/util/MissingResourceException.java: Likewise.\n\t* java/util/Observer.java: Likewise.\n\t* java/util/TooManyListenersException.java: Likewise.\n\t* java/util/zip/DataFormatException.java: Likewise.\n\t* java/util/zip/ZipException.java: Likewise.\n\nFrom-SVN: r54680", "tree": {"sha": "d91d4df026dc21bcf38db7c9f56a8deeaa7301c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91d4df026dc21bcf38db7c9f56a8deeaa7301c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/comments", "author": null, "committer": null, "parents": [{"sha": "3d05b15f106942bb499c9a5c1d143a3ddb33bd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d05b15f106942bb499c9a5c1d143a3ddb33bd6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d05b15f106942bb499c9a5c1d143a3ddb33bd6f"}], "stats": {"total": 332, "additions": 202, "deletions": 130}, "files": [{"sha": "0e39f29b028f6ca299a9030d2b0b3a4d039def64", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,3 +1,17 @@\n+2002-06-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/RuntimeException.java: Re-merge with Classpath.\n+\t* java/util/ArrayList.java: Likewise.\n+\t* java/util/Arrays.java: Likewise.\n+\t* java/util/BitSet.java: Likewise.\n+\t* java/util/Dictionary.java: Likewise.\n+\t* java/util/IdentityHashMap.java: Likewise.\n+\t* java/util/MissingResourceException.java: Likewise.\n+\t* java/util/Observer.java: Likewise.\n+\t* java/util/TooManyListenersException.java: Likewise.\n+\t* java/util/zip/DataFormatException.java: Likewise.\n+\t* java/util/zip/ZipException.java: Likewise.\n+\n 2002-06-16  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* java/rmi/AccessException.java: Remerge from Classpath."}, {"sha": "8fc9fb10aabd4895f54ae7f4880216f2d6eafdb3", "filename": "libjava/java/lang/RuntimeException.java", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Flang%2FRuntimeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Flang%2FRuntimeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntimeException.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,14 +1,13 @@\n-/* RuntimeException.java -- all exceptions which are subclasses of this class\n-   can be thrown at any time during the execution of a Java virtual machine.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* RuntimeException.java -- root of all unchecked exceptions\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,43 +38,65 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n  * All exceptions which are subclasses of <code>RuntimeException</code>\n  * can be thrown at any time during the execution of a Java virtual machine.\n  * Methods which throw these exceptions are not required to declare them\n  * in their throws clause.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @status updated to 1.4\n  */\n public class RuntimeException extends Exception\n {\n-  static final long serialVersionUID = -7034897190745766939L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -7034897190745766939L;\n \n   /**\n-   * Create an exception without a message.\n+   * Create an exception without a message. The cause remains uninitialized.\n+   *\n+   * @see #initCause(Throwable)\n    */\n   public RuntimeException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n-   * Create an exception with a message.\n+   * Create an exception with a message. The cause remains uninitialized.\n+   *\n+   * @param s the message string\n+   * @see #initCause(Throwable)\n    */\n   public RuntimeException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n+\n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message string\n+   * @param cause the cause of this exception\n+   * @since 1.4\n+   */\n+  public RuntimeException(String s, Throwable cause)\n+  {\n+    super(s, cause);\n+  }\n+\n+  /**\n+   * Create an exception with the given cause, and a message of\n+   * <code>cause == null ? null : cause.toString()</code>.\n+   *\n+   * @param cause the cause of this exception\n+   * @since 1.4\n+   */\n+  public RuntimeException(Throwable cause)\n+  {\n+    super(cause);\n+  }\n }"}, {"sha": "2d2146ddf595afca5d195e2a781fe53d76680010", "filename": "libjava/java/util/ArrayList.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FArrayList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FArrayList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrayList.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -160,7 +160,7 @@ public void trimToSize()\n   /**\n    * Guarantees that this list will have at least enough capacity to\n    * hold minCapacity elements. This implementation will grow the list to\n-   * max(current * 2, minCapacity) if (minCapacity > current). The JCL says\n+   * max(current * 2, minCapacity) if (minCapacity &gt; current). The JCL says\n    * explictly that \"this method increases its capacity to minCap\", while\n    * the JDK 1.3 online docs specify that the list will grow to at least the\n    * size specified."}, {"sha": "35e0e92ca599214541585de6cbc3fd1e3a6c1386", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -2205,9 +2205,9 @@ public static void sort(Object[] a, Comparator c)\n    *         comparable\n    * @throws NullPointerException if an element is null (since\n    *         null.compareTo cannot work)\n-   * @throws ArrayIndexOutOfBoundsException, if fromIndex and toIndex\n+   * @throws ArrayIndexOutOfBoundsException if fromIndex and toIndex\n    *         are not in range.\n-   * @throws IllegalArgumentException if fromIndex > toIndex\n+   * @throws IllegalArgumentException if fromIndex &gt; toIndex\n    */\n   public static void sort(Object[] a, int fromIndex, int toIndex)\n   {\n@@ -2229,9 +2229,9 @@ public static void sort(Object[] a, int fromIndex, int toIndex)\n    *        the elements' natural order\n    * @throws ClassCastException if any two elements are not mutually\n    *         comparable by the Comparator provided\n-   * @throws ArrayIndexOutOfBoundsException, if fromIndex and toIndex\n+   * @throws ArrayIndexOutOfBoundsException if fromIndex and toIndex\n    *         are not in range.\n-   * @throws IllegalArgumentException if fromIndex > toIndex\n+   * @throws IllegalArgumentException if fromIndex &gt; toIndex\n    * @throws NullPointerException if a null element is compared with natural\n    *         ordering (only possible when c is null)\n    */"}, {"sha": "c56c0d18c7ffc4493bf6c8a6e5ede68026a6f9fe", "filename": "libjava/java/util/BitSet.java", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FBitSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FBitSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FBitSet.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -398,22 +398,24 @@ public BitSet get(int from, int to)\n    * bit <code>k</code> is set in the BitSet (for non-negative values\n    * of <code>k</code>) if and only if\n    *\n-   * <pre>\n-   * ((k/64) < bits.length) && ((bits[k/64] & (1L << (bit % 64))) != 0)\n-   * </pre>\n+   * <code>((k/64) &lt; bits.length)\n+   * && ((bits[k/64] & (1L &lt;&lt; (bit % 64))) != 0)\n+   * </code>\n    *\n    * Then the following definition of the hashCode method\n    * would be a correct implementation of the actual algorithm:\n    *\n-   * <pre>\n-   * public int hashCode() {\n-   *     long h = 1234;\n-   *     for (int i = bits.length-1; i>=0; i--) {\n-   *         h ^= bits[i] * (i + 1);\n-   *     }\n-   *     return (int)((h >> 32) ^ h);\n-   * }\n-   * </pre>\n+   * \n+<pre>public int hashCode()\n+{\n+  long h = 1234;\n+  for (int i = bits.length-1; i &gt;= 0; i--)\n+  {\n+    h ^= bits[i] * (i + 1);\n+  }\n+\n+  return (int)((h >> 32) ^ h);\n+}</pre>\n    *\n    * Note that the hash code values changes, if the set is changed.\n    *\n@@ -526,10 +528,11 @@ public int nextClearBit(int from)\n    * Returns the index of the next true bit, from the specified bit\n    * (inclusive). If there is none, -1 is returned. You can iterate over\n    * all true bits with this loop:<br>\n-   * <pre>\n-   * for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i + 1))\n-   *   { // operate on i here }\n-   * </pre>\n+   * \n+<pre>for (int i = bs.nextSetBit(0); i &gt;= 0; i = bs.nextSetBit(i + 1))\n+{\n+  // operate on i here\n+}</pre>\n    *\n    * @param from the start location\n    * @return the first true bit, or -1"}, {"sha": "53c4d64083662e8d1326bff7e0ddeb7ddd731815", "filename": "libjava/java/util/Dictionary.java", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FDictionary.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FDictionary.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FDictionary.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,6 +1,6 @@\n /* Dictionary.java -- an abstract (and essentially worthless) \n    class which is Hashtable's superclass\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -47,18 +47,21 @@ class which is Hashtable's superclass\n  * People at Javasoft are probably embarrassed by it.  At this point,\n  * it might as well be an interface rather than a class, but it remains\n  * this poor, laughable skeleton for the sake of backwards compatibility.\n- * At any rate, this was what came before the <pre>Map</pre> interface \n+ * At any rate, this was what came before the {@link Map} interface \n  * in the Collections framework.\n  *\n  * @author Jon Zeppieri\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @see Map\n  * @see Hashtable\n  * @since 1.0\n  * @status updated to 1.4\n  */\n-public abstract class Dictionary extends Object\n+public abstract class Dictionary\n {\n+  // WARNING: Dictionary is a CORE class in the bootstrap cycle. See the\n+  // comments in vm/reference/java/lang/Runtime for implications of this fact.\n+\n   /**\n    * Sole constructor (often called implicitly).\n    */\n@@ -130,4 +133,4 @@ public Dictionary()\n    * @return the number of keys in the Dictionary\n    */\n   public abstract int size();\n-}\n+} // class Dictionary"}, {"sha": "f48c430cf9a542417e7115e5554f9b3200807954", "filename": "libjava/java/util/IdentityHashMap.java", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FIdentityHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FIdentityHashMap.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -162,9 +162,9 @@ public IdentityHashMap(int max)\n     // Need at least two slots, or hash() will break.\n     if (max < 2)\n       max = 2;\n-    table = new Object[2 * max];\n+    table = new Object[max << 1];\n     Arrays.fill(table, emptyslot);\n-    threshold = max / 4 * 3;\n+    threshold = (max >> 2) * 3;\n   }\n \n   /**\n@@ -176,7 +176,7 @@ public IdentityHashMap(int max)\n    */\n   public IdentityHashMap(Map m)\n   {\n-    this(Math.max(m.size() * 2, DEFAULT_CAPACITY));\n+    this(Math.max(m.size() << 1, DEFAULT_CAPACITY));\n     putAll(m);\n   }\n \n@@ -341,12 +341,14 @@ public boolean equals(Object o)\n   }\n \n   /**\n-   * Return the value in this Map associated with the supplied key,\n-   * or <pre>null</pre> if the key maps to nothing.  NOTE: Since the value\n-   * could also be null, you must use containsKey to see if this key\n-   * actually maps to something.  Unlike normal maps, this tests for the key\n-   * with <code>entry == key</code> instead of\n-   * <code>entry == null ? key == null : entry.equals(key)</code>.\n+   * Return the value in this Map associated with the supplied key, or\n+   * <code>null</code> if the key maps to nothing.\n+   *\n+   * <p>NOTE: Since the value could also be null, you must use\n+   * containsKey to see if this key actually maps to something.\n+   * Unlike normal maps, this tests for the key with <code>entry ==\n+   * key</code> instead of <code>entry == null ? key == null :\n+   * entry.equals(key)</code>.\n    *\n    * @param key the key for which to fetch an associated value\n    * @return what the key maps to, if present\n@@ -487,10 +489,10 @@ public Object put(Object key, Object value)\n         Object[] old = table;\n         // This isn't necessarily prime, but it is an odd number of key/value\n         // slots, which has a higher probability of fewer collisions.\n-        table = new Object[old.length * 2 + 2];\n+        table = new Object[old.length << 1 + 2];\n         Arrays.fill(table, emptyslot);\n         size = 0;\n-        threshold = (table.length / 2) / 4 * 3;\n+        threshold = (table.length >>> 3) * 3;\n \n         for (int i = old.length - 2; i >= 0; i -= 2)\n           {\n@@ -531,13 +533,15 @@ public void putAll(Map m)\n   }\n \n   /**\n-   * Removes from the HashMap and returns the value which is mapped by the\n-   * supplied key. If the key maps to nothing, then the HashMap remains\n-   * unchanged, and <pre>null</pre> is returned. NOTE: Since the value\n-   * could also be null, you must use containsKey to see if you are\n-   * actually removing a mapping.  Unlike normal maps, this tests for the\n-   * key with <code>entry == key</code> instead of\n-   * <code>entry == null ? key == null : entry.equals(key)</code>.\n+   * Removes from the HashMap and returns the value which is mapped by\n+   * the supplied key. If the key maps to nothing, then the HashMap\n+   * remains unchanged, and <code>null</code> is returned.\n+   *\n+   * NOTE: Since the value could also be null, you must use\n+   * containsKey to see if you are actually removing a mapping.\n+   * Unlike normal maps, this tests for the key with <code>entry ==\n+   * key</code> instead of <code>entry == null ? key == null :\n+   * entry.equals(key)</code>.\n    *\n    * @param key the key used to locate the value to remove\n    * @return whatever the key mapped to, if present\n@@ -642,7 +646,7 @@ int hash(Object key)\n     // By requiring at least 2 key/value slots, and rehashing at 75%\n     // capacity, we guarantee that there will always be either an emptyslot\n     // or a tombstone somewhere in the table.\n-    int h = 2 * Math.abs(System.identityHashCode(key) % (table.length / 2));\n+    int h = Math.abs(System.identityHashCode(key) % (table.length >> 1)) << 1;\n     int del = -1;\n     int save = h;\n \n@@ -735,7 +739,8 @@ public Object next()\n \n     /**\n      * Removes from the backing Map the last element which was fetched\n-     * with the <pre>next()</pre> method.\n+     * with the <code>next()</code> method.\n+     *\n      * @throws ConcurrentModificationException if the Map was modified\n      * @throws IllegalStateException if called when there is no last element\n      */\n@@ -894,7 +899,7 @@ private void readObject(ObjectInputStream s)\n     s.defaultReadObject();\n \n     int num = s.readInt();\n-    table = new Object[2 * Math.max(num * 2, DEFAULT_CAPACITY)];\n+    table = new Object[Math.max(num << 1, DEFAULT_CAPACITY) << 1];\n     // Read key/value pairs.\n     while (--num >= 0)\n       put(s.readObject(), s.readObject());"}, {"sha": "47525e55bfaa3fe1ee4091d13de20b75d2569dba", "filename": "libjava/java/util/MissingResourceException.java", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FMissingResourceException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FMissingResourceException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FMissingResourceException.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,5 +1,5 @@\n-/* java.util.MissingResourceException\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* MissingResourceException.java -- thrown for a missing resource\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,38 +38,42 @@\n \n package java.util;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * This exception is thrown when a resource is missing.\n  *\n- * @see ResourceBundle\n  * @author Jochen Hoenicke\n  * @author Warren Levy <warrenl@cygnus.com>\n+ * @see ResourceBundle\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class MissingResourceException extends RuntimeException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n   private static final long serialVersionUID = -4876345176062000401L;\n \n   /**\n    * The name of the resource bundle requested by user.\n+   *\n+   * @serial the class name of the resource bundle\n    */\n-  private String className;\n+  private final String className;\n \n   /**\n    * The key of the resource in the bundle requested by user.\n+   *\n+   * @serial the name of the resouce\n    */\n-  private String key;\n+  private final String key;\n \n   /**\n    * Creates a new exception, with the specified parameters.\n-   * @param s the detail message.\n-   * @param className the name of the resource bundle.\n-   * @param key the key of the missing resource.\n+   *\n+   * @param s the detail message\n+   * @param className the name of the resource bundle\n+   * @param key the key of the missing resource\n    */\n   public MissingResourceException(String s, String className, String key)\n   {\n@@ -80,7 +84,8 @@ public MissingResourceException(String s, String className, String key)\n \n   /**\n    * Gets the name of the resource bundle, for which a resource is missing.\n-   * @return the name of the resource bundle.\n+   *\n+   * @return the name of the resource bundle\n    */\n   public String getClassName()\n   {\n@@ -90,7 +95,8 @@ public String getClassName()\n   /**\n    * Gets the key of the resource that is missing bundle, this is an empty\n    * string if the whole resource bundle is missing.\n-   * @return the name of the resource bundle.\n+   *\n+   * @return the name of the resource bundle\n    */\n   public String getKey()\n   {"}, {"sha": "a703e90099e50161541bb3c675b18999449ab239", "filename": "libjava/java/util/Observer.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FObserver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FObserver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FObserver.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,6 +1,5 @@\n-/* Implemented when a class wants to be informed of changes in Observable\n-   objects.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* Observer.java -- an object that will be informed of changes in an Observable\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,21 +38,23 @@\n \n package java.util;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct\n- */\n-\n /**\n  * Interface that is implemented when a class wants to be informed of changes\n  * in Observable objects.\n  *\n- * @see java.util.Observable\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date August 25, 1998.\n+ * @see Observable\n+ * @status updated to 1.4\n  */\n public interface Observer\n {\n+  /**\n+   * This method is called whenever the observable object changes, and has\n+   * called <code>notifyObservers</code>. The Observable object can pass\n+   * arbitrary information in the second parameter.\n+   *\n+   * @param observable the Observable object that changed\n+   * @param arg arbitrary information, usually relating to the change\n+   */\n   public void update(Observable observable, Object arg);\n }"}, {"sha": "883bdbc70868b3f0254fee45fe80507fa5eb3502", "filename": "libjava/java/util/TooManyListenersException.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FTooManyListenersException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2FTooManyListenersException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTooManyListenersException.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,5 +1,6 @@\n-/* java.util.TooManyListenersException\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* TooManyListenersException.java -- thrown when a unicast event can't accept\n+   another Listener\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,26 +39,24 @@\n \n package java.util;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * This exception is part of the java event model.  It is thrown if an\n  * event listener is added via the addXyzEventListener method, but the\n  * object doesn't support any more listeners, e.g. it only supports a\n  * single event listener.\n  *\n+ * @author Jochen Hoenicke\n+ * @author Warren Levy <warrenl@cygnus.com>\n  * @see EventListener\n  * @see EventObject\n- * @author Jochen Hoenicke \n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n public class TooManyListenersException extends Exception\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n   private static final long serialVersionUID = 5074640544770687831L;\n \n   /**\n@@ -69,7 +68,8 @@ public TooManyListenersException()\n \n   /**\n    * Constructs a TooManyListenersException with a detail message.\n-   * @param detail the detail message.\n+   *\n+   * @param detail the detail message\n    */\n   public TooManyListenersException(String detail)\n   {"}, {"sha": "e5a948e8a2962d8f290a2879c640619b56259f41", "filename": "libjava/java/util/zip/DataFormatException.java", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,5 +1,5 @@\n-/* DataformatException.java - Exception thrown when compressed data is corrupt\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* DataformatException.java -- thrown when compressed data is corrupt\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,25 +37,34 @@\n \n package java.util.zip;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Believed complete and correct.\n- */\n-\n /**\n  * Exception thrown when compressed data is corrupt.\n  *\n  * @author Tom Tromey\n  * @author John Leuner\n- * @since JDK 1.1\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class DataFormatException extends Exception\n {\n-  public DataFormatException ()\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 2219632870893641452L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n+  public DataFormatException()\n   {\n-    super();\n   }\n \n-  public DataFormatException (String msg)\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param msg the message\n+   */\n+  public DataFormatException(String msg)\n   {\n     super(msg);\n   }"}, {"sha": "9130ef2967a25a3f6a054ed0f2f50080c497690e", "filename": "libjava/java/util/zip/ZipException.java", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2Fzip%2FZipException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548ce8be4ab154b7d7f42ae8fe8552f9888021d0/libjava%2Fjava%2Futil%2Fzip%2FZipException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipException.java?ref=548ce8be4ab154b7d7f42ae8fe8552f9888021d0", "patch": "@@ -1,5 +1,5 @@\n-/* ZipException.java - Exception representing a zip related error\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* ZipException.java - exception representing a zip related error\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,24 +37,34 @@\n \n package java.util.zip;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n- * Is thrown during the creation or input of a zip file.\n+ * Thrown during the creation or input of a zip file.\n  *\n  * @author Jochen Hoenicke\n  * @author Per Bothner\n- * @since JDK 1.1\n+ * @status updated to 1.4\n  */\n-public class ZipException extends java.io.IOException\n+public class ZipException extends IOException\n {\n-  public ZipException ()\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 8000196834066748623L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n+  public ZipException()\n   {\n-    super();\n   }\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param msg the message\n+   */\n   public ZipException (String msg)\n   {\n     super(msg);"}]}