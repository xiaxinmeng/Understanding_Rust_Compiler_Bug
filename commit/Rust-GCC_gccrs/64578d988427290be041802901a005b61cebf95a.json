{"sha": "64578d988427290be041802901a005b61cebf95a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1NzhkOTg4NDI3MjkwYmUwNDE4MDI5MDFhMDA1YjYxY2ViZjk1YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-06-08T22:24:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-06-08T22:24:57Z"}, "message": "lto.c (hash_canonical_type): Drop hashing of TYPE_STRING_FLAG.\n\n\n\t* lto.c (hash_canonical_type): Drop hashing of TYPE_STRING_FLAG.\n\t* tree.c (gimple_canonical_types_compatible_p): Drop comparsion of\n\tTYPE_STRING_FLAG.\n\n\t* gfortran.dg/lto/bind_c-2b_0.f90: New testcase\n\t* gfortran.dg/lto/bind_c-2b_1.c: New testcase\n\nFrom-SVN: r224252", "tree": {"sha": "35be7a92fc2dbe146f3c69e913968b9856f0f396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35be7a92fc2dbe146f3c69e913968b9856f0f396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64578d988427290be041802901a005b61cebf95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64578d988427290be041802901a005b61cebf95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64578d988427290be041802901a005b61cebf95a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64578d988427290be041802901a005b61cebf95a/comments", "author": null, "committer": null, "parents": [{"sha": "44433db051a923a6e32baa8e448ec8cf5a88f5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44433db051a923a6e32baa8e448ec8cf5a88f5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44433db051a923a6e32baa8e448ec8cf5a88f5f8"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "18c4538d09e3b9e63b1536a51f01f7e5ecb3afe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -1,3 +1,8 @@\n+2015-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (gimple_canonical_types_compatible_p): Drop comparsion of\n+\tTYPE_STRING_FLAG.\n+\n 2015-06-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer-out.c (lto_output_location): Stream"}, {"sha": "5d0e8881a176be37df5daa1a0705ccef95eb7bc1", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -1,3 +1,7 @@\n+2015-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (hash_canonical_type): Drop hashing of TYPE_STRING_FLAG.\n+\n 2015-06-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* lto-lang.c : Adjust include files."}, {"sha": "b9b11106ac3063b9b360bb56d0cc3a545aac9de5", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -332,17 +332,15 @@ hash_canonical_type (tree type)\n   if (TREE_CODE (type) == COMPLEX_TYPE)\n     hstate.add_int (TYPE_UNSIGNED (type));\n \n+  /* Fortran's C_SIGNED_CHAR is !TYPE_STRING_FLAG but needs to be\n+     interoperable with \"signed char\".  Unless all frontends are revisited to\n+     agree on these types, we must ignore the flag completely.  */\n+\n   /* Fortran standard define C_PTR type that is compatible with every\n      C pointer.  For this reason we need to glob all pointers into one.\n      Still pointers in different address spaces are not compatible.  */\n   if (POINTER_TYPE_P (type))\n-    {\n-      hstate.add_int (TYPE_ADDR_SPACE (TREE_TYPE (type)));\n-    }\n-\n-  /* For integer types hash only the string flag.  */\n-  if (TREE_CODE (type) == INTEGER_TYPE)\n-    hstate.add_int (TYPE_STRING_FLAG (type));\n+    hstate.add_int (TYPE_ADDR_SPACE (TREE_TYPE (type)));\n \n   /* For array types hash the domain bounds and the string flag.  */\n   if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))"}, {"sha": "705282d8dde0d500263bbe159d548a3b3b4c2747", "filename": "gcc/testsuite/gfortran.dg/lto/bind_c-2b_0.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_0.f90?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -0,0 +1,21 @@\n+! { dg-lto-do run }\n+! { dg-lto-options {{ -O3 -flto }} }\n+! This testcase will abort if C_SIGNED_CHAR is not interoperable with signed\n+! char\n+module lto_type_merge_test\n+  use, intrinsic :: iso_c_binding\n+  implicit none\n+\n+  type, bind(c) :: MYFTYPE_1\n+     integer(c_signed_char) :: chr\n+     integer(c_signed_char) :: chrb\n+  end type MYFTYPE_1\n+\n+  type(myftype_1), bind(c, name=\"myVar\") :: myVar\n+\n+contains\n+  subroutine types_test() bind(c)\n+    myVar%chr = myVar%chrb\n+  end subroutine types_test\n+end module lto_type_merge_test\n+"}, {"sha": "d00508123b9d382a36062d4ce3b2f3b585fd4a91", "filename": "gcc/testsuite/gfortran.dg/lto/bind_c-2b_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fbind_c-2b_1.c?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -0,0 +1,36 @@\n+#include <stdlib.h>\n+/* interopse with myftype_1 */\n+typedef struct {\n+   signed char chr;\n+   signed char chr2;\n+} myctype_t;\n+\n+\n+extern void abort(void);\n+void types_test(void);\n+/* declared in the fortran module */\n+extern myctype_t myVar;\n+\n+int main(int argc, char **argv)\n+{\n+   myctype_t *cchr;\n+   asm(\"\":\"=r\"(cchr):\"0\"(&myVar));\n+   cchr->chr = 1;\n+   cchr->chr2 = 2;\n+\n+   types_test();\n+\n+   if(cchr->chr != 2)\n+      abort();\n+   if(cchr->chr2 != 2)\n+      abort();\n+   myVar.chr2 = 3;\n+   types_test();\n+\n+   if(myVar.chr != 3)\n+      abort();\n+   if(myVar.chr2 != 3)\n+      abort();\n+   return 0;\n+}\n+"}, {"sha": "be01d0e19c96226578ff299bc3cbddee07c06d4a", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64578d988427290be041802901a005b61cebf95a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64578d988427290be041802901a005b61cebf95a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=64578d988427290be041802901a005b61cebf95a", "patch": "@@ -12948,9 +12948,9 @@ gimple_canonical_types_compatible_p (const_tree t1, const_tree t2,\n \t  || TYPE_UNSIGNED (t1) != TYPE_UNSIGNED (t2))\n \treturn false;\n \n-      if (TREE_CODE (t1) == INTEGER_TYPE\n-\t  && TYPE_STRING_FLAG (t1) != TYPE_STRING_FLAG (t2))\n-\treturn false;\n+      /* Fortran's C_SIGNED_CHAR is !TYPE_STRING_FLAG but needs to be\n+\t interoperable with \"signed char\".  Unless all frontends are revisited\n+\t to agree on these types, we must ignore the flag completely.  */\n \n       /* Fortran standard define C_PTR type that is compatible with every\n  \t C pointer.  For this reason we need to glob all pointers into one."}]}