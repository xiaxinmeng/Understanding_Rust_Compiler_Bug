{"sha": "e6a125a009ce35346ccc1afa40d9dd3714cef210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZhMTI1YTAwOWNlMzUzNDZjY2MxYWZhNDBkOWRkMzcxNGNlZjIxMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:15:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:15:00Z"}, "message": "(cse_insn): Ifdef out code that pre-truncates src_folded.\n\nFrom-SVN: r10127", "tree": {"sha": "2638450cee95afb1f7c4541a06762e9984ecee37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2638450cee95afb1f7c4541a06762e9984ecee37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6a125a009ce35346ccc1afa40d9dd3714cef210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a125a009ce35346ccc1afa40d9dd3714cef210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a125a009ce35346ccc1afa40d9dd3714cef210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a125a009ce35346ccc1afa40d9dd3714cef210/comments", "author": null, "committer": null, "parents": [{"sha": "b7d9c4185decb56898befa10117145d6f2a024f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d9c4185decb56898befa10117145d6f2a024f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d9c4185decb56898befa10117145d6f2a024f2"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "1b302f5e92f6b783f7a796e9b3600d343355f2f7", "filename": "gcc/cse.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a125a009ce35346ccc1afa40d9dd3714cef210/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a125a009ce35346ccc1afa40d9dd3714cef210/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e6a125a009ce35346ccc1afa40d9dd3714cef210", "patch": "@@ -6317,6 +6317,13 @@ cse_insn (insn, in_libcall_block)\n \t simplified result, which may not necessarily be valid.  */\n       src_folded = fold_rtx (src, insn);\n \n+#if 0\n+      /* ??? This caused bad code to be generated for the m68k port with -O2.\n+\t Suppose src is (CONST_INT -1), and that after truncation src_folded\n+\t is (CONST_INT 3).  Suppose src_folded is then used for src_const.\n+\t At the end we will add src and src_const to the same equivalence\n+\t class.  We now have 3 and -1 on the same equivalence class.  This\n+\t causes later instructions to be mis-optimized.  */\n       /* If storing a constant in a bitfield, pre-truncate the constant\n \t so we will be able to record it later.  */\n       if (GET_CODE (SET_DEST (sets[i].rtl)) == ZERO_EXTRACT\n@@ -6332,6 +6339,7 @@ cse_insn (insn, in_libcall_block)\n \t      = GEN_INT (INTVAL (src) & (((HOST_WIDE_INT) 1\n \t\t\t\t\t  << INTVAL (width)) - 1));\n \t}\n+#endif\n \n       /* Compute SRC's hash code, and also notice if it\n \t should not be recorded at all.  In that case,"}]}