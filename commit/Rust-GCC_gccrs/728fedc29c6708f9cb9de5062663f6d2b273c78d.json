{"sha": "728fedc29c6708f9cb9de5062663f6d2b273c78d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4ZmVkYzI5YzY3MDhmOWNiOWRlNTA2MjY2M2Y2ZDJiMjczYzc4ZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-23T10:22:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:22:03Z"}, "message": "[Ada] Compiler fails to reject illegal store of anonymous_access_to_subprogram\n\nGNAT properly rejects an attempt to assign an access_to_subprogram formal\nto a local variable, according to accessibiiity rules. This patch forces the\nsame behavior on the use of such a formal in an object declaration.\n\nCompiling store_anon.adb must yield:\n\n  store_anon.adb:7:35: illegal attempt to store anonymous access to subprogram\n  store_anon.adb:7:35: value has deeper accessibility than any master\n   (RM 3.10.2 (13))\n store_anon.adb:7:35: use named access type for \"P\" instead of access parameter\n\n----\npackage Store_Anon is\n   procedure Store (P : not null access procedure);\n\n   procedure Invoke;\nend Store_Anon;\n----\npackage body Store_Anon is\n   type P_Ptr is access procedure;\n\n   Stored : P_Ptr;\n\n   procedure Store (P : not null access procedure) is\n      Illegal : constant P_Ptr := P;\n   begin -- Store\n      Stored := Illegal;\n   end Store;\n\n   procedure Invoke is\n      -- Empty\n   begin -- Invoke\n      Stored.all;\n   end Invoke;\nend Store_Anon;\n\n2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): If expression is an\n\tanonymous_access_to_ subprogram formal, apply a conversion to force an\n\taccsssibility check that will fail statically, enforcing 3.10.2 (13).\n\nFrom-SVN: r260576", "tree": {"sha": "211833fabf134b6ba51e6acff286783a3662c3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211833fabf134b6ba51e6acff286783a3662c3c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/728fedc29c6708f9cb9de5062663f6d2b273c78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728fedc29c6708f9cb9de5062663f6d2b273c78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728fedc29c6708f9cb9de5062663f6d2b273c78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728fedc29c6708f9cb9de5062663f6d2b273c78d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87843c8388536e2ed9143e56916d1ecec4e07da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87843c8388536e2ed9143e56916d1ecec4e07da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87843c8388536e2ed9143e56916d1ecec4e07da1"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "723a7c1b27de343c611ccf55550aad5bcf431953", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728fedc29c6708f9cb9de5062663f6d2b273c78d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728fedc29c6708f9cb9de5062663f6d2b273c78d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=728fedc29c6708f9cb9de5062663f6d2b273c78d", "patch": "@@ -1,3 +1,9 @@\n+2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If expression is an\n+\tanonymous_access_to_ subprogram formal, apply a conversion to force an\n+\taccsssibility check that will fail statically, enforcing 3.10.2 (13).\n+\n 2018-05-23  Daniel Mercier  <mercier@adacore.com>\n \n \t* gnat1drv.adb: Turn off length expansion in CodePeer mode."}, {"sha": "965596a5a4bf236721cddc03240738e65b18a849", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728fedc29c6708f9cb9de5062663f6d2b273c78d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728fedc29c6708f9cb9de5062663f6d2b273c78d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=728fedc29c6708f9cb9de5062663f6d2b273c78d", "patch": "@@ -4268,6 +4268,23 @@ package body Sem_Ch3 is\n             Set_Etype (E, T);\n \n          else\n+\n+            --  If the expression is a formal that is a \"subprogram pointer\"\n+            --  this is illegal in accessibility terms. Add an explicit\n+            --  conversion to force the corresponding check, as is done for\n+            --  assignments.\n+\n+            if Comes_From_Source (N)\n+              and then Is_Entity_Name (E)\n+              and then Present (Entity (E))\n+              and then Is_Formal (Entity (E))\n+              and then\n+                Ekind (Etype (Entity (E))) = E_Anonymous_Access_Subprogram_Type\n+              and then Ekind (T) /= E_Anonymous_Access_Subprogram_Type\n+            then\n+               Rewrite (E, Convert_To (T, Relocate_Node (E)));\n+            end if;\n+\n             Resolve (E, T);\n          end if;\n "}]}