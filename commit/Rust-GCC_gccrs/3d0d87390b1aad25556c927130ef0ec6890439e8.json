{"sha": "3d0d87390b1aad25556c927130ef0ec6890439e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwZDg3MzkwYjFhYWQyNTU1NmM5MjcxMzBlZjBlYzY4OTA0MzllOA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-11T12:38:56Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-11T12:38:56Z"}, "message": "In libobjc:\n\n        * objc/deprecated/struct_objc_selector.h: New file.  Definition of\n        'struct objc_selector' and 'sel_eq' moved here.\n        * objc/deprecated/struct_objc_protocol.h: New file.  Definition of\n        'struct objc_procotol' moved here.\n        * objc/deprecated/struct_objc_class.h: New file.  Definition of\n        'struct objc_class' moved here.\n        * objc/deprecated/MetaClass.h: New file.  Definition of MetClass\n        moved here.\n        * objc/deprecated/STR.h: New file.  Definition of STR moved here.       \n        * objc/message.h: New file.  Definitions for relval_t, apply_t,\n        arglist, arglist_t and objc_msg_lookup were moved here.\n        * objc/objc.h: Include the above files instead of defining the\n        corresponding structs, types and functions here.  Added new opaque\n        definitions for SEL and Class.  Use Class and not 'struct\n        objc_class *' in the definition of 'struct objc_object'.\n        Commented all types defined in the file.  Removed special\n        definition of BOOL as 'int' on __vxworks; use 'unsigned char'\n        there as well.\n        * objc/deprecated/objc-unexpected-exception.h: Renamed to\n        objc_unexpected_exception.h.\n        * objc/objc-api.h: Updated include of\n        objc-unexpetected-exception.h\n        * objc/objc-exception.h: Updated comments.\n        * Makefile.in (OBJC_H, OBJC_DEPRECATED_H): Added the new header\n        files.  Reindented list of files.\n\nFrom-SVN: r164212", "tree": {"sha": "34a7ed63e36b5323657af9af9dc423fa5a37dd3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a7ed63e36b5323657af9af9dc423fa5a37dd3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d0d87390b1aad25556c927130ef0ec6890439e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0d87390b1aad25556c927130ef0ec6890439e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0d87390b1aad25556c927130ef0ec6890439e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0d87390b1aad25556c927130ef0ec6890439e8/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9132eb797d897b8e66b8e8ddb3e8e2744b6ac51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9132eb797d897b8e66b8e8ddb3e8e2744b6ac51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9132eb797d897b8e66b8e8ddb3e8e2744b6ac51"}], "stats": {"total": 400, "additions": 286, "deletions": 114}, "files": [{"sha": "431c7fc200982ef021ccb44e64b40004b1d892b9", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -1,3 +1,31 @@\n+2010-09-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/deprecated/struct_objc_selector.h: New file.  Definition of\n+\t'struct objc_selector' and 'sel_eq' moved here.\n+\t* objc/deprecated/struct_objc_protocol.h: New file.  Definition of\n+\t'struct objc_procotol' moved here.\n+\t* objc/deprecated/struct_objc_class.h: New file.  Definition of\n+\t'struct objc_class' moved here.\n+\t* objc/deprecated/MetaClass.h: New file.  Definition of MetClass\n+\tmoved here.\n+\t* objc/deprecated/STR.h: New file.  Definition of STR moved here.\t\n+\t* objc/message.h: New file.  Definitions for relval_t, apply_t,\n+\targlist, arglist_t and objc_msg_lookup were moved here.\n+\t* objc/objc.h: Include the above files instead of defining the\n+\tcorresponding structs, types and functions here.  Added new opaque\n+\tdefinitions for SEL and Class.  Use Class and not 'struct\n+\tobjc_class *' in the definition of 'struct objc_object'.\n+\tCommented all types defined in the file.  Removed special\n+\tdefinition of BOOL as 'int' on __vxworks; use 'unsigned char'\n+\tthere as well.\n+\t* objc/deprecated/objc-unexpected-exception.h: Renamed to\n+\tobjc_unexpected_exception.h.\n+\t* objc/objc-api.h: Updated include of\n+\tobjc-unexpetected-exception.h\n+\t* objc/objc-exception.h: Updated comments.\n+\t* Makefile.in (OBJC_H, OBJC_DEPRECATED_H): Added the new header\n+\tfiles.  Reindented list of files.\n+\t\n 2010-09-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc-api.h (objc_trace): Unused variable removed."}, {"sha": "1dfced3dfb49578a7adcef16cfcc13a8b02b2cfb", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -143,15 +143,35 @@ all: libobjc$(libsuffix).la $(OBJC_BOEHM_GC)\n \n # User-visible header files, from the objc/ directory\n \n-OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h objc-exception.h \\\n-\t NXConstStr.h Object.h Protocol.h encoding.h typedstream.h \\\n-\t thr.h objc-decls.h\n+OBJC_H = \\\n+  objc.h \\\n+  objc-exception.h \\\n+  \\\n+  message.h \\\n+  hash.h \\\n+  objc-list.h \\\n+  sarray.h \\\n+  objc-api.h \\\n+  NXConstStr.h \\\n+  Object.h \\\n+  Protocol.h \\\n+  encoding.h \\\n+  typedstream.h \\\n+  thr.h \\\n+  objc-decls.h\n \n # User-visible header files containing deprecated APIs, from the\n # objc/deprecated directory\n \n-OBJC_DEPRECATED_H = Object.h objc-unexpected-exception.h \\\n-                    typedstream.h \n+OBJC_DEPRECATED_H = \\\n+  MetaClass.h \\\n+  Object.h \\\n+  STR.h \\\n+  objc_unexpected_exception.h \\\n+  struct_objc_class.h \\\n+  struct_objc_protocol.h \\\n+  struct_objc_selector.h \\\n+  typedstream.h \n \n # Modules that comprise the runtime library.\n "}, {"sha": "01597782c57b3f4ad7a7f2cdccd23685ac0fdedf", "filename": "libobjc/objc/deprecated/MetaClass.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FMetaClass.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1 @@\n+typedef struct objc_class *MetaClass;"}, {"sha": "17c20e2d6e3a07081d7ad3dbb5d6f720a45f765d", "filename": "libobjc/objc/deprecated/STR.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2FSTR.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2FSTR.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FSTR.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1,2 @@\n+/* Incredibly obsolete.  */\n+typedef char *STR;  /* String alias */"}, {"sha": "69ffd4e87da1854a75ad47dd639c9fa79c3035eb", "filename": "libobjc/objc/deprecated/objc_unexpected_exception.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fobjc_unexpected_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fobjc_unexpected_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_unexpected_exception.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "previous_filename": "libobjc/objc/deprecated/objc-unexpected-exception.h"}, {"sha": "4918e738e8d3bfe2c49d679fa88e96b4663ca850", "filename": "libobjc/objc/deprecated/struct_objc_class.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_class.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1,44 @@\n+/* This structure used to be public, but is now private to the runtime.  */\n+\n+/*\n+** The compiler generates one of these structures for each class.  \n+** \n+** This structure is the definition for classes. \n+** \n+** This structure is generated by the compiler in the executable and used by\n+** the run-time during normal messaging operations.  Therefore some members\n+** change type. The compiler generates \"char* const\" and places a string in\n+** the following member variables:  super_class. \n+*/\n+struct objc_class {     \n+  MetaClass           class_pointer;          /* Pointer to the class's\n+                                                meta class. */\n+  struct objc_class*  super_class;            /* Pointer to the super \n+                                                class. NULL for class \n+                                                Object. */\n+  const char*         name;                   /* Name of the class. */\n+  long                version;                /* Unknown. */\n+  unsigned long       info;                   /* Bit mask.  See class masks \n+                                                defined above. */\n+  long                instance_size;          /* Size in bytes of the class.  \n+                                                The sum of the class \n+\t\t\t\t\t\tdefinition and all super \n+\t\t\t\t\t\tclass definitions. */\n+  struct objc_ivar_list* ivars;               /* Pointer to a structure that\n+                                                describes the instance \n+                                                variables in the class\n+                                                definition.  NULL indicates\n+                                                no instance variables.  Does\n+                                                not include super class\n+                                                variables. */\n+  struct objc_method_list*  methods;          /* Linked list of instance\n+                                                methods defined for the \n+                                                class. */\n+  struct sarray *    dtable;                  /* Pointer to instance \n+\t\t\t\t\t         method dispatch table. */  \n+  struct objc_class* subclass_list;           /* Subclasses */\n+  struct objc_class* sibling_class;\n+\n+  struct objc_protocol_list *protocols;\t      /* Protocols conformed to */\n+  void* gc_object_type;\n+};"}, {"sha": "5344e3f5493c27cd5f0a2a0db6d8f6d0e76373d9", "filename": "libobjc/objc/deprecated/struct_objc_protocol.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_protocol.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1,6 @@\n+typedef struct objc_protocol {\n+  struct objc_class* class_pointer;\n+  char *protocol_name;\n+  struct objc_protocol_list *protocol_list;\n+  struct objc_method_description_list *instance_methods, *class_methods; \n+} Protocol;"}, {"sha": "34aaf0d8b4ed614287d5bbdc7249856f0a659a08", "filename": "libobjc/objc/deprecated/struct_objc_selector.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_selector.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1,20 @@\n+/* This struct used to be public, but is now private to the runtime.  */\n+\n+/*\n+** Definition of a selector.  Selectors themselves are not unique, but\n+** the sel_id is a unique identifier.\n+*/\n+struct objc_selector\n+{\n+  void *sel_id;\n+  const char *sel_types;\n+};\n+\n+inline static BOOL\n+sel_eq (SEL s1, SEL s2)\n+{\n+  if (s1 == 0 || s2 == 0)\n+    return s1 == s2;\n+  else\n+    return s1->sel_id == s2->sel_id;\n+}"}, {"sha": "31ee33b305c8d282188eec7cfd4bf5d12f5763d8", "filename": "libobjc/objc/message.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fmessage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fmessage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fmessage.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -0,0 +1,52 @@\n+/* GNU Objective C Runtime messaging declarations\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009, \n+   2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __objc_message_INCLUDE_GNU\n+#define __objc_message_INCLUDE_GNU\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include \"objc.h\"\n+\n+/* This file includes declarations of the messaging functions and types.  */\n+\n+typedef void* retval_t;\t\t/* return value */\n+typedef void(*apply_t)(void);\t/* function pointer */\n+typedef union arglist {\n+  char *arg_ptr;\n+  char arg_regs[sizeof (char*)];\n+} *arglist_t;\t\t\t/* argument frame */\n+\n+IMP objc_msg_lookup(id receiver, SEL op);\n+\n+/* TODO: Add the remaining messaging declarations from objc-api.h.  */\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* not __objc_message_INCLUDE_GNU */"}, {"sha": "018a3cc520331472e5fde2bee073165a522fd41d", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -426,7 +426,7 @@ objc_EXPORT void (*_objc_free)(void *);\n objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n-#include \"deprecated/objc-unexpected-exception.h\"\n+#include \"deprecated/objc_unexpected_exception.h\"\n \n Method_t class_get_class_method(MetaClass _class, SEL aSel);\n "}, {"sha": "2fb9ba6c7dd88d08252c663ed4b196df24cb7a5e", "filename": "libobjc/objc/objc-exception.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc-exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc-exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-exception.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -59,9 +59,9 @@ extern \"C\" {\n  */\n void objc_exception_throw (id exception);\n \n-/* PS: the Apple runtime seems to also have objc_exception_rethrow(),\n-   objc_begin_catch() and objc_end_catch().  Currently the GNU runtime\n-   does not use them.\n+/* Compatibility note: the Apple/NeXT runtime seems to also have\n+   objc_exception_rethrow(), objc_begin_catch() and objc_end_catch().\n+   Currently the GNU runtime does not use them.\n */\n \n /* The following functions allow customizing to a certain extent the\n@@ -73,8 +73,8 @@ void objc_exception_throw (id exception);\n    functions unless you are writing your own Foundation library.\n */\n \n-/* PS: objc_set_exception_preprocessor() (available on the Apple\n-   runtime) is not supported on the GNU runtime.  */\n+/* Compatibility note: objc_set_exception_preprocessor() (available on\n+   the Apple/NeXT runtime) is not available on the GNU runtime.  */\n \n /* An 'objc_exception_matcher' function is used to match an exception\n    to a @catch clause.  'catch_class' is the class of objects caught\n@@ -106,7 +106,7 @@ objc_uncaught_exception_handler\n objc_set_uncaught_exception_handler (objc_uncaught_exception_handler new_handler);\n \n \n-/* For compatibility with the Apple runtime.  */\n+/* For compatibility with the Apple/NeXT runtime.  */\n #define objc_setExceptionMatcher objc_set_exception_matcher\n #define objc_setUncaughtExceptionHandler objc_set_uncaught_exception_handler\n "}, {"sha": "17ae49b17472711176c46b26b9a349d215db0236", "filename": "libobjc/objc/objc.h", "status": "modified", "additions": 101, "deletions": 102, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0d87390b1aad25556c927130ef0ec6890439e8/libobjc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc.h?ref=3d0d87390b1aad25556c927130ef0ec6890439e8", "patch": "@@ -1,5 +1,6 @@\n /* Basic data types for Objective C.\n-   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009, \n+   2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,7 +23,6 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-\n #ifndef __objc_INCLUDE_GNU\n #define __objc_INCLUDE_GNU\n \n@@ -33,130 +33,129 @@ extern \"C\" {\n #include <stddef.h>\n \n /*\n-** Definition of the boolean type.  \n+  Definition of the boolean type.\n+\n+  Compatibility note: the Apple/NeXT runtime defines a BOOL as a\n+  'signed char'.  The GNU runtime uses an 'unsigned char'.\n+\n+  Important: this could change and we could switch to 'typedef bool\n+  BOOL' in the future.  Do not depend on the type of BOOL.\n */\n-#ifdef __vxworks\n-typedef int BOOL;\n-#else\n #undef BOOL\n typedef unsigned char  BOOL;\n-#endif\n+\n #define YES   (BOOL)1\n #define NO    (BOOL)0\n \n-/*\n-** Definition of a selector.  Selectors themselves are not unique, but\n-** the sel_id is a unique identifier.\n+/* The basic Objective-C types (SEL, Class, id) are defined as pointer\n+   to opaque structures.  The details of the structures are private to\n+   the runtime and may potentially change from one version to the\n+   other.\n */\n-typedef const struct objc_selector \n-{\n-  void *sel_id;\n-  const char *sel_types;\n-} *SEL;\n-\n-inline static BOOL\n-sel_eq (SEL s1, SEL s2)\n-{\n-  if (s1 == 0 || s2 == 0)\n-    return s1 == s2;\n-  else\n-    return s1->sel_id == s2->sel_id;\n-}\n-\n \n-/*\n-** ObjC uses this typedef for untyped instances.\n+/* A SEL (selector) represents an abstract method (in the\n+   object-oriented sense) and includes all the details of how to\n+   invoke the method (which means its name, arguments and return\n+   types) but provides no implementation of its own.  You can check\n+   whether a class implements a selector or not, and if you have a\n+   selector and know that the class implements it, you can use it to\n+   call the method for an object in the class.\n+ */\n+typedef const struct objc_selector *SEL;\n+#include \"deprecated/struct_objc_selector.h\"\n+\n+/* A Class is a class (in the object-oriented sense).  In Objective-C\n+   there is the complication that each Class is an object itself, and\n+   so belongs to a class too.  This class that a class belongs to is\n+   called its 'meta class'.\n */\n-typedef struct objc_object {\n-  struct objc_class*  class_pointer;\n+typedef struct objc_class *Class;\n+#include \"deprecated/MetaClass.h\"\n+#include \"deprecated/struct_objc_class.h\"\n+\n+/* An 'id' is an object of an unknown class.  The struct objc_object\n+   is private and what you see here is only the beginning of the\n+   struct.  In theory, the fact that 'class_pointer' is public means\n+   that if you have any object 'object', you can immediately get its\n+   class by using '((id)object)->class_pointer', but this is not\n+   recommended; you should use object_get_class(object) instead.\n+*/\n+typedef struct objc_object\n+{\n+  /* 'class_pointer' is the Class that the object belongs to.  In case\n+     of a Class object, this pointer points to the meta class.  */\n+  /* Note that the Apple/NeXT runtime calls this variable 'isa'.\n+     TODO: Decide if we want to call it 'isa' too.  TODO: Why not\n+     simply hide this pointer and force users to use the proper API to\n+     get it ?\n+  */\n+  Class class_pointer;\n } *id;\n \n /*\n-** Definition of method type.  When retrieving the implementation of a\n-** method, this is type of the pointer returned.  The idea of the\n-** definition of IMP is to represent a 'pointer to a general function\n-** taking an id, a SEL, followed by other unspecified arguments'.  You\n-** must always cast an IMP to a pointer to a function taking the\n-** appropriate, specific types for that function, before calling it -\n-** to make sure the appropriate arguments are passed to it.  The code\n-** generated by the compiler to perform method calls automatically\n-** does this cast inside method calls.\n+  'IMP' is a C function that implements a method.  When retrieving the\n+  implementation of a method from the runtime, this is the type of the\n+  pointer returned.  The idea of the definition of IMP is to represent\n+  a 'pointer to a general function taking an id, a SEL, followed by\n+  other unspecified arguments'.  You must always cast an IMP to a\n+  pointer to a function taking the appropriate, specific types for\n+  that function, before calling it - to make sure the appropriate\n+  arguments are passed to it.  The code generated by the compiler to\n+  perform method calls automatically does this cast inside method\n+  calls.\n */\n typedef id (*IMP)(id, SEL, ...); \n \n-/*\n-** More simple types...\n-*/\n-#define nil (id)0                               /* id of Nil instance */\n-#define Nil (Class)0                            /* id of Nil class */\n-typedef char *STR;                              /* String alias */\n+/* 'nil' is the null object.  Messages to nil do nothing and always\n+   return 0.  */\n+#define nil (id)0\n \n-/*\n-** The compiler generates one of these structures for each class.  \n-** \n-** This structure is the definition for classes. \n-** \n-** This structure is generated by the compiler in the executable and used by\n-** the run-time during normal messaging operations.  Therefore some members\n-** change type. The compiler generates \"char* const\" and places a string in\n-** the following member variables:  super_class. \n+/* 'Nil' is the null class.  Since classes are objects too, this is\n+   actually the same object as 'nil' (and behaves in the same way),\n+   but it has a type of Class, so it is good to use it instead of\n+   'nil' if you are comparing a Class object to nil as it enables the\n+   compiler to do some type-checking.  */\n+#define Nil (Class)0\n+\n+#include \"deprecated/STR.h\"\n+\n+/* TODO: Move the 'Protocol' declaration into objc/runtime.h.  A\n+   Protocol is simply an object, not a basic Objective-C type.  The\n+   Apple runtime defines Protocol in objc/runtime.h too, so it's good\n+   to move it there for API compatibility.\n */\n-typedef struct objc_class *MetaClass;\n-typedef struct objc_class *Class;\n-struct objc_class {     \n-  MetaClass           class_pointer;          /* Pointer to the class's\n-                                                meta class. */\n-  struct objc_class*  super_class;            /* Pointer to the super \n-                                                class. NULL for class \n-                                                Object. */\n-  const char*         name;                   /* Name of the class. */\n-  long                version;                /* Unknown. */\n-  unsigned long       info;                   /* Bit mask.  See class masks \n-                                                defined above. */\n-  long                instance_size;          /* Size in bytes of the class.  \n-                                                The sum of the class \n-\t\t\t\t\t\tdefinition and all super \n-\t\t\t\t\t\tclass definitions. */\n-  struct objc_ivar_list* ivars;               /* Pointer to a structure that\n-                                                describes the instance \n-                                                variables in the class\n-                                                definition.  NULL indicates\n-                                                no instance variables.  Does\n-                                                not include super class\n-                                                variables. */\n-  struct objc_method_list*  methods;          /* Linked list of instance\n-                                                methods defined for the \n-                                                class. */\n-  struct sarray *    dtable;                  /* Pointer to instance \n-\t\t\t\t\t         method dispatch table. */  \n-  struct objc_class* subclass_list;           /* Subclasses */\n-  struct objc_class* sibling_class;\n-\n-  struct objc_protocol_list *protocols;\t      /* Protocols conformed to */\n-  void* gc_object_type;\n-};\n \n+/* A 'Protocol' is a formally defined list of selectors (normally\n+   created using the @protocol Objective-C syntax).  It is mostly used\n+   at compile-time to check that classes implement all the methods\n+   that they are supposed to.  Protocols are also available in the\n+   runtime system as Protocol objects.\n+ */\n #ifndef __OBJC__\n-typedef struct objc_protocol {\n-  struct objc_class* class_pointer;\n-  char *protocol_name;\n-  struct objc_protocol_list *protocol_list;\n-  struct objc_method_description_list *instance_methods, *class_methods; \n-} Protocol; \n-\n+  /* Once we stop including the deprecated struct_objc_protocol.h\n+     there is no reason to even define a 'struct objc_protocol'.  As\n+     all the structure details will be hidden, a Protocol basically is\n+     simply an object (as it should be).\n+   */\n+  /* typedef struct objc_object Protocol; */\n+  #include \"deprecated/struct_objc_protocol.h\"\n #else /* __OBJC__ */\n-@class Protocol;\n+  @class Protocol;\n #endif \n \n-typedef void* retval_t;\t\t/* return value */\n-typedef void(*apply_t)(void);\t/* function pointer */\n-typedef union arglist {\n-  char *arg_ptr;\n-  char arg_regs[sizeof (char*)];\n-} *arglist_t;\t\t\t/* argument frame */\n+/* Deprecated include - here temporarily, for backwards-compatibility\n+   as reval_t, apply_t, arglist_t and objc_msg_lookup() used to be\n+   defined here.  */\n+#include \"message.h\"\n \n+/* Compatibility note: the Apple/NeXT runtime defines sel_getName(),\n+   sel_registerName(), object_getClassName(), object_getIndexedIvars()\n+   in this file while the GNU runtime defines them in runtime.h.\n \n-IMP objc_msg_lookup(id receiver, SEL op);\n+   The reason the GNU runtime does not define them here is that they\n+   are not basic Objective-C types (defined in this file), but are\n+   part of the runtime API (defined in runtime.h).\n+*/\n \n #ifdef __cplusplus\n }"}]}