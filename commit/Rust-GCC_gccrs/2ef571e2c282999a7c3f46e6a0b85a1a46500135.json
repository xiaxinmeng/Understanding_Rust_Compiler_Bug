{"sha": "2ef571e2c282999a7c3f46e6a0b85a1a46500135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmNTcxZTJjMjgyOTk5YTdjM2Y0NmU2YTBiODVhMWE0NjUwMDEzNQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-08-09T03:28:38Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-08-09T03:28:38Z"}, "message": "re PR tree-optimization/23234 (ICE in verify_flow_info())\n\ngcc/\n\tPR tree-optimization/23234\n\t* tree-ssa-math-opts.c (place_reciprocal): New enum.\n\t(execute_cse_reciprocals_1): Replace the 'phi' argument with an\n\targument of the new enum.\n\t(execute_cse_reciprocals): Add reciprocals for function arguments\n\ton the unique successor edge of the entry block.  Update other calls\n\tto execute_cse_reciprocals_1.\n\ntestsuite/\n\tPR tree-optimization/23234\n\t* gcc.dg/tree-ssa/pr23234.c: New test.\n\nFrom-SVN: r102895", "tree": {"sha": "e06f14d183b255d4bb3d257328e666b13eec089a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e06f14d183b255d4bb3d257328e666b13eec089a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef571e2c282999a7c3f46e6a0b85a1a46500135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef571e2c282999a7c3f46e6a0b85a1a46500135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef571e2c282999a7c3f46e6a0b85a1a46500135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef571e2c282999a7c3f46e6a0b85a1a46500135/comments", "author": null, "committer": null, "parents": [{"sha": "3d092c45bf57b3f9df0892e8d95a6284106a86c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d092c45bf57b3f9df0892e8d95a6284106a86c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d092c45bf57b3f9df0892e8d95a6284106a86c2"}], "stats": {"total": 102, "additions": 93, "deletions": 9}, "files": [{"sha": "751668f29c3f4e680a55d54adb7e98bb1309d950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ef571e2c282999a7c3f46e6a0b85a1a46500135", "patch": "@@ -1,3 +1,13 @@\n+2005-08-09  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/23234\n+\t* tree-ssa-math-opts.c (place_reciprocal): New enum.\n+\t(execute_cse_reciprocals_1): Replace the 'phi' argument with an\n+\targument of the new enum.\n+\t(execute_cse_reciprocals): Add reciprocals for function arguments\n+\ton the unique successor edge of the entry block.  Update other calls\n+\tto execute_cse_reciprocals_1.\n+\n 2005-08-08  Richard Henderson  <rth@redhat.com>\n \n \tPR 22439"}, {"sha": "57681cd9035361bcbca2a8c8d7f46ec0dd3856e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ef571e2c282999a7c3f46e6a0b85a1a46500135", "patch": "@@ -1,3 +1,8 @@\n+2005-08-09  Stevem Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/23234\n+\t* gcc.dg/tree-ssa/pr23234.c: New test.\n+\n 2005-08-08  Josh Conner  <jconner@apple.com>\n \n \tPR rtl-optimization/23241"}, {"sha": "bd0b62b558f6c95f4a9150fe653764e86b42cb77", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23234.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23234.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23234.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23234.c?ref=2ef571e2c282999a7c3f46e6a0b85a1a46500135", "patch": "@@ -0,0 +1,52 @@\n+/* The problem in this PR was mostly finding a suitable place to insert\n+   the reciprocals of the function arguments.  This test case tries to\n+   test three possible ways of how this may go wrong.  */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-do compile } */\n+\n+/* The original test case.  */\n+double\n+f1 (double a, double b, double c)\n+{\n+  double y0;\n+\n+  if (a == 0.0)\n+    {\n+      y0 = -c / b;\n+      return y0;\n+    }\n+  y0 = c / b;\n+  return y0;\n+}\n+\n+/* Labels may end up in the middle of a block.  Also bad.  */\n+double\n+f2 (double a, double b, double c)\n+{\n+  double y0;\n+\n+a_label:\n+another_label:\n+  if (a == 0.0)\n+    {\n+      y0 = -c / b;\n+      return y0;\n+    }\n+  y0 = c / b;\n+  return y0;\n+}\n+\n+/* Uses must still be dominated by their defs.  */\n+double\n+f3 (double a, double b, double c)\n+{\n+  double y0;\n+\n+  y0 = -c / b;\n+  if (a == 0.0)\n+    {\n+      return y0;\n+    }\n+  y0 = c / b;\n+  return y0;\n+}"}, {"sha": "456043fc3f45f30355f7b5d84975e81dd7a7c719", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef571e2c282999a7c3f46e6a0b85a1a46500135/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=2ef571e2c282999a7c3f46e6a0b85a1a46500135", "patch": "@@ -54,16 +54,25 @@ gate_cse_reciprocals (void)\n   return optimize && !optimize_size && flag_unsafe_math_optimizations;\n }\n \n+/* Where to put the statement computing a reciprocal.  */\n+enum place_reciprocal\n+{\n+  PR_BEFORE_BSI,\t/* Put it using bsi_insert_before.  */\n+  PR_AFTER_BSI,\t\t/* Put it using bsi_insert_after.  */\n+  PR_ON_ENTRY_EDGE\t/* Put it on the edge between the entry\n+\t\t\t   and the first basic block.  */\n+};\n+\n /* Check if DEF's uses include more than one floating-point division,\n-   and if so replace them by multiplications with the reciprocal.  If\n-   PHI is true, insert the reciprocal calculation before BSI, otherwise\n-   insert it after and move BSI to the new statement.\n+   and if so replace them by multiplications with the reciprocal.  Add\n+   the statement computing the reciprocal according to WHERE.\n \n    Does not check the type of DEF, nor that DEF is a GIMPLE register.\n    This is done in the caller for speed, because otherwise this routine\n    would be called for every definition and phi node.  */\n static void\n-execute_cse_reciprocals_1 (block_stmt_iterator *bsi, tree def, bool phi)\n+execute_cse_reciprocals_1 (block_stmt_iterator *bsi, tree def,\n+\t\t\t   enum place_reciprocal where)\n {\n   use_operand_p use_p;\n   imm_use_iterator use_iter;\n@@ -99,10 +108,14 @@ execute_cse_reciprocals_1 (block_stmt_iterator *bsi, tree def, bool phi)\n \t\t     fold_build2 (RDIV_EXPR, type, build_real (type, dconst1),\n \t\t\t\t  def));\n \n-  if (phi)\n+  if (where == PR_BEFORE_BSI)\n     bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n-  else\n+  else if (where == PR_AFTER_BSI)\n     bsi_insert_after (bsi, new_stmt, BSI_NEW_STMT);\n+  else if (where == PR_ON_ENTRY_EDGE)\n+    bsi_insert_on_edge (single_succ_edge (ENTRY_BLOCK_PTR), new_stmt);\n+  else\n+    gcc_unreachable ();\n \n   FOR_EACH_IMM_USE_SAFE (use_p, use_iter, def)\n     {\n@@ -133,7 +146,8 @@ execute_cse_reciprocals (void)\n \t{\n \t  block_stmt_iterator bsi;\n \t  bsi = bsi_start (single_succ (ENTRY_BLOCK_PTR));\n-          execute_cse_reciprocals_1 (&bsi, default_def (arg), false);\n+\t  execute_cse_reciprocals_1 (&bsi, default_def (arg),\n+\t\t\t\t     PR_ON_ENTRY_EDGE);\n \t}\n \n   FOR_EACH_BB (bb)\n@@ -150,7 +164,7 @@ execute_cse_reciprocals (void)\n \t  def = PHI_RESULT (phi);\n \t  if (FLOAT_TYPE_P (TREE_TYPE (def))\n \t      && is_gimple_reg (def))\n-\t    execute_cse_reciprocals_1 (&bsi, def, true);\n+\t    execute_cse_reciprocals_1 (&bsi, def, PR_BEFORE_BSI);\n \t}\n \n       for (; !bsi_end_p (bsi); bsi_next (&bsi))\n@@ -160,12 +174,15 @@ execute_cse_reciprocals (void)\n \t      && (def = SINGLE_SSA_TREE_OPERAND (stmt, SSA_OP_DEF)) != NULL\n \t      && FLOAT_TYPE_P (TREE_TYPE (def))\n \t      && TREE_CODE (def) == SSA_NAME)\n-\t    execute_cse_reciprocals_1 (&bsi, def, false);\n+\t    execute_cse_reciprocals_1 (&bsi, def, PR_AFTER_BSI);\n \t}\n     }\n \n   if (flag_trapping_math)\n     free_dominance_info (CDI_POST_DOMINATORS);\n+  \n+  if (single_succ_p (ENTRY_BLOCK_PTR))\n+    bsi_commit_one_edge_insert (single_succ_edge (ENTRY_BLOCK_PTR), NULL);\n }\n \n struct tree_opt_pass pass_cse_reciprocals ="}]}