{"sha": "873ff98777cfd6685aae1aac33d2bc4d52bcd781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczZmY5ODc3N2NmZDY2ODVhYWUxYWFjMzNkMmJjNGQ1MmJjZDc4MQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2001-11-18T06:24:45Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2001-11-18T06:24:45Z"}, "message": "mangle.c (write_expression): Handle CAST_EXPR, STATIC_CAST_EXPR, CONST_CAST_EXPR.\n\n\t* mangle.c (write_expression): Handle CAST_EXPR, STATIC_CAST_EXPR,\n\tCONST_CAST_EXPR.\n\t* operators.def: Add CAST_EXPR, STATIC_CAST_EXPR, CONST_CAST_EXPR.\n\nFrom-SVN: r47135", "tree": {"sha": "088f153453be5db54057e007758e8f560c599b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088f153453be5db54057e007758e8f560c599b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873ff98777cfd6685aae1aac33d2bc4d52bcd781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873ff98777cfd6685aae1aac33d2bc4d52bcd781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873ff98777cfd6685aae1aac33d2bc4d52bcd781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873ff98777cfd6685aae1aac33d2bc4d52bcd781/comments", "author": null, "committer": null, "parents": [{"sha": "6f684b536827ea2e00d45fa88b8be9b301bfd8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f684b536827ea2e00d45fa88b8be9b301bfd8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f684b536827ea2e00d45fa88b8be9b301bfd8e0"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "6503ad8e62252bac0862e016717874e5170ca4b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=873ff98777cfd6685aae1aac33d2bc4d52bcd781", "patch": "@@ -1,3 +1,9 @@\n+2001-11-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* mangle.c (write_expression): Handle CAST_EXPR, STATIC_CAST_EXPR,\n+\tCONST_CAST_EXPR.\n+\t* operators.def: Add CAST_EXPR, STATIC_CAST_EXPR, CONST_CAST_EXPR.\n+\n 2001-11-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-tree.h (print_class_statistics): Restore."}, {"sha": "5466ca90bf100349ec77c058ce1ee2dea1aca390", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=873ff98777cfd6685aae1aac33d2bc4d52bcd781", "patch": "@@ -1818,18 +1818,32 @@ write_expression (expr)\n       /* If it wasn't any of those, recursively expand the expression.  */\n       write_string (operator_name_info[(int) code].mangled_name);\n \n-      /* Handle pointers-to-members specially.  */\n-      if (code == SCOPE_REF)\n+      switch (code)\n \t{\n+\tcase CAST_EXPR:\n+\t  write_type (TREE_TYPE (expr));\n+\t  write_expression (TREE_VALUE (TREE_OPERAND (expr, 0)));\n+\t  break;\n+\n+\tcase STATIC_CAST_EXPR:\n+\tcase CONST_CAST_EXPR:\n+\t  write_type (TREE_TYPE (expr));\n+\t  write_expression (TREE_OPERAND (expr, 0));\n+\t  break;\n+\n+\t/* Handle pointers-to-members specially.  */\n+\tcase SCOPE_REF:\n \t  write_type (TREE_OPERAND (expr, 0));\n \t  if (TREE_CODE (TREE_OPERAND (expr, 1)) == IDENTIFIER_NODE)\n \t    write_source_name (TREE_OPERAND (expr, 1));\n \t  else\n \t    write_encoding (TREE_OPERAND (expr, 1));\n+\t  break;\n+\n+\tdefault:\n+\t  for (i = 0; i < TREE_CODE_LENGTH (code); ++i)\n+\t    write_expression (TREE_OPERAND (expr, i));\n \t}\n-      else\n-\tfor (i = 0; i < TREE_CODE_LENGTH (code); ++i)\n-\t  write_expression (TREE_OPERAND (expr, i));\n     }\n }\n "}, {"sha": "8e0f7b2478e0f57dcb6a7c33fe4f06a5492a12b8", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=873ff98777cfd6685aae1aac33d2bc4d52bcd781", "patch": "@@ -102,6 +102,9 @@ DEF_SIMPLE_OPERATOR (\"alignof\", ALIGNOF_EXPR, \"v17alignof\", 1)\n \n /* The cast operator.  */\n DEF_SIMPLE_OPERATOR (\"\", TYPE_EXPR, \"cv\", 1)\n+DEF_SIMPLE_OPERATOR (\"\", CAST_EXPR, \"cv\", 1)\n+DEF_SIMPLE_OPERATOR (\"\", CONST_CAST_EXPR, \"cv\", 1)\n+DEF_SIMPLE_OPERATOR (\"\", STATIC_CAST_EXPR, \"cv\", 1)\n \n /* Binary operators.  */\n DEF_SIMPLE_OPERATOR (\"+\", PLUS_EXPR, \"pl\", 2)"}, {"sha": "a20b877f477bd97747e0ade6746a97217b2195c6", "filename": "gcc/testsuite/g++.dg/abi/mangle3.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C?ref=873ff98777cfd6685aae1aac33d2bc4d52bcd781", "patch": "@@ -0,0 +1,19 @@\n+// Test mangling of type casts\n+// { dg-do compile }\n+\n+template<int i> class A {};\n+template<bool b> class B {};\n+\n+template<int i> void f(A<i> &, B<bool(i)> &) {}\n+template<int i> void g(A<i> &, B<static_cast<bool>(i)> &) {}\n+\n+int main()\n+{\n+  A<1> a;\n+  B<true> b;\n+  f(a, b);\n+  g(a, b);\n+}\n+\n+// { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvR1AIXT_EER1BIXcvbT_EE\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvR1AIXT_EER1BIXcvbT_EE\\[: \\t\\n\\]\" } }"}, {"sha": "e0981273b2e94484fb42625f2d613a84ad9d36cb", "filename": "gcc/testsuite/g++.dg/abi/mangle4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ff98777cfd6685aae1aac33d2bc4d52bcd781/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C?ref=873ff98777cfd6685aae1aac33d2bc4d52bcd781", "patch": "@@ -0,0 +1,26 @@\n+// Test mangling of type casts\n+// { dg-do compile }\n+\n+class A {};\n+class B : A {};\n+\n+template<const A* a> class C {};\n+template<const B* b> class D {};\n+template<B* b> class E {};\n+\n+template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {}\n+template<const B* b> void g(D<b> &, E<const_cast<B*>(b)> &) {}\n+\n+B b;\n+\n+int main()\n+{\n+  C<static_cast<const A*>(&b)> c;\n+  D<&b> d;\n+  E<const_cast<B*>(&b)> e;\n+  f(d, c);\n+  g(d, e);\n+}\n+\n+// { dg-final { scan-assembler \"\\n_?_Z1fIXadL_Z1bEEEvR1DIXT_EER1CIXcvPK1AT_EE\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z1gIXadL_Z1bEEEvR1DIXT_EER1EIXcvP1BT_EE\\[: \\t\\n\\]\" } }"}]}