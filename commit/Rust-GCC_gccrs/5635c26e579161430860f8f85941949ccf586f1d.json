{"sha": "5635c26e579161430860f8f85941949ccf586f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzNWMyNmU1NzkxNjE0MzA4NjBmOGY4NTk0MTk0OWNjZjU4NmYxZA==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-05-10T21:29:04Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-05-10T21:29:04Z"}, "message": "ffi.c (ffi_prep_incoming_args_SYSV, [...]): New, add closure support.\n\n\t* src/m68k/ffi.c (ffi_prep_incoming_args_SYSV,\n\tffi_closure_SYSV_inner,ffi_prep_closure): New, add closure support.\n\t* src/m68k/sysv.S(ffi_closure_SYSV,ffi_closure_struct_SYSV): Likewise.\n\t* src/m68k/ffitarget.h (FFI_TRAMPOLINE_SIZE): Likewise.\n\t(FFI_CLOSURES): Enable closure support.\n\nFrom-SVN: r124601", "tree": {"sha": "78cb2774ba34e95691b63ceefd517e55587b612b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78cb2774ba34e95691b63ceefd517e55587b612b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5635c26e579161430860f8f85941949ccf586f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5635c26e579161430860f8f85941949ccf586f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5635c26e579161430860f8f85941949ccf586f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5635c26e579161430860f8f85941949ccf586f1d/comments", "author": null, "committer": null, "parents": [{"sha": "e6fbf387cfb88e498691e6bc48ef1566b2556fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fbf387cfb88e498691e6bc48ef1566b2556fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fbf387cfb88e498691e6bc48ef1566b2556fff"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "1f49a27e555ca2cfdd065c94db98be32c882a0de", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5635c26e579161430860f8f85941949ccf586f1d/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5635c26e579161430860f8f85941949ccf586f1d/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=5635c26e579161430860f8f85941949ccf586f1d", "patch": "@@ -1,3 +1,11 @@\n+2007-05-10  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* src/m68k/ffi.c (ffi_prep_incoming_args_SYSV,\n+\tffi_closure_SYSV_inner,ffi_prep_closure): New, add closure support.\n+\t* src/m68k/sysv.S(ffi_closure_SYSV,ffi_closure_struct_SYSV): Likewise.\n+\t* src/m68k/ffitarget.h (FFI_TRAMPOLINE_SIZE): Likewise.\n+\t(FFI_CLOSURES): Enable closure support.\n+\n 2007-05-10  Roman Zippel <zippel@linux-m68k.org>\n \n \t* configure.ac (HAVE_AS_CFI_PSEUDO_OP): New test."}, {"sha": "600cf20527ff9d1c81fb5c9ad8010e8d82a88c03", "filename": "libffi/src/m68k/ffi.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fffi.c?ref=5635c26e579161430860f8f85941949ccf586f1d", "patch": "@@ -8,11 +8,18 @@\n #include <ffi_common.h>\n \n #include <stdlib.h>\n+#include <unistd.h>\n+#include <sys/syscall.h>\n+#include <asm/cachectl.h>\n \n void ffi_call_SYSV (extended_cif *,\n \t\t    unsigned, unsigned,\n \t\t    void *, void (*fn) ());\n void *ffi_prep_args (void *stack, extended_cif *ecif);\n+void ffi_closure_SYSV (ffi_closure *);\n+void ffi_closure_struct_SYSV (ffi_closure *);\n+unsigned int ffi_closure_SYSV_inner (ffi_closure *closure,\n+\t\t\t\t     void *resp, void *args);\n \n /* ffi_prep_args is called by the assembly routine once stack space has\n    been allocated for the function's arguments.  */\n@@ -188,3 +195,84 @@ ffi_call (ffi_cif *cif, void (*fn) (), void *rvalue, void **avalue)\n       break;\n     }\n }\n+\n+static void\n+ffi_prep_incoming_args_SYSV (char *stack, void **avalue, ffi_cif *cif)\n+{\n+  unsigned int i;\n+  void **p_argv;\n+  char *argp;\n+  ffi_type **p_arg;\n+\n+  argp = stack;\n+  p_argv = avalue;\n+\n+  for (i = cif->nargs, p_arg = cif->arg_types; (i != 0); i--, p_arg++)\n+    {\n+      size_t z;\n+\n+      z = (*p_arg)->size;\n+      if (z <= 4)\n+\t{\n+\t  *p_argv = (void *) (argp + 4 - z);\n+\n+\t  z = 4;\n+\t}\n+      else\n+\t{\n+\t  *p_argv = (void *) argp;\n+\n+\t  /* Align if necessary */\n+\t  if ((sizeof(int) - 1) & z)\n+\t    z = ALIGN(z, sizeof(int));\n+\t}\n+\n+      p_argv++;\n+      argp += z;\n+    }\n+}\n+\n+unsigned int\n+ffi_closure_SYSV_inner (ffi_closure *closure, void *resp, void *args)\n+{\n+  ffi_cif *cif;\n+  void **arg_area;\n+\n+  cif = closure->cif;\n+  arg_area = (void**) alloca (cif->nargs * sizeof (void *));\n+\n+  ffi_prep_incoming_args_SYSV(args, arg_area, cif);\n+\n+  (closure->fun) (cif, resp, arg_area, closure->user_data);\n+\n+  return cif->flags;\n+}\n+\n+ffi_status\n+ffi_prep_closure_loc (ffi_closure* closure,\n+\t\t      ffi_cif* cif,\n+\t\t      void (*fun)(ffi_cif*,void*,void**,void*),\n+\t\t      void *user_data,\n+\t\t      void *codeloc)\n+{\n+  FFI_ASSERT (cif->abi == FFI_SYSV);\n+\n+  *(unsigned short *)closure->tramp = 0x207c;\n+  *(void **)(closure->tramp + 2) = codeloc;\n+  *(unsigned short *)(closure->tramp + 6) = 0x4ef9;\n+  if (cif->rtype->type == FFI_TYPE_STRUCT\n+      && !cif->flags)\n+    *(void **)(closure->tramp + 8) = ffi_closure_struct_SYSV;\n+  else\n+    *(void **)(closure->tramp + 8) = ffi_closure_SYSV;\n+\n+  syscall(SYS_cacheflush, codeloc, FLUSH_SCOPE_LINE,\n+\t  FLUSH_CACHE_BOTH, FFI_TRAMPOLINE_SIZE);\n+\n+  closure->cif  = cif;\n+  closure->user_data = user_data;\n+  closure->fun  = fun;\n+\n+  return FFI_OK;\n+}\n+"}, {"sha": "9a072db404fd07e5a0d4048d395f6329cfce6f9b", "filename": "libffi/src/m68k/ffitarget.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fffitarget.h?ref=5635c26e579161430860f8f85941949ccf586f1d", "patch": "@@ -40,7 +40,8 @@ typedef enum ffi_abi {\n \n /* ---- Definitions for closures ----------------------------------------- */\n \n-#define FFI_CLOSURES 0\n+#define FFI_CLOSURES 1\n+#define FFI_TRAMPOLINE_SIZE 16\n #define FFI_NATIVE_RAW_API 0\n \n #endif"}, {"sha": "d2a4ff1c64a756686c0427ce936f9728aaf5b610", "filename": "libffi/src/m68k/sysv.S", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5635c26e579161430860f8f85941949ccf586f1d/libffi%2Fsrc%2Fm68k%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fsysv.S?ref=5635c26e579161430860f8f85941949ccf586f1d", "patch": "@@ -121,3 +121,89 @@ epilogue:\n \trts\n \tCFI_ENDPROC()\n \t.size\tffi_call_SYSV,.-ffi_call_SYSV\n+\n+\t.globl\tffi_closure_SYSV\n+\t.type\tffi_closure_SYSV, @function\n+\t.align\t4\n+\n+ffi_closure_SYSV:\n+\tCFI_STARTPROC()\n+\tlink\t%fp,#-12\n+\tCFI_OFFSET(14,-8)\n+\tCFI_DEF_CFA(14,8)\n+\tmove.l\t%sp,-12(%fp)\n+\tpea\t8(%fp)\n+\tpea\t-12(%fp)\n+\tmove.l\t%a0,-(%sp)\n+#if !defined __PIC__\n+\tjsr\tffi_closure_SYSV_inner\n+#else\n+\tbsr.l\tffi_closure_SYSV_inner@PLTPC\n+#endif\n+\n+\tlsr.l\t#1,%d0\n+\tjne\t1f\n+\tjcc\t.Lcls_epilogue\n+\tmove.l\t-12(%fp),%d0\n+.Lcls_epilogue:\n+\tunlk\t%fp\n+\trts\n+1:\n+\tlea\t-12(%fp),%a0\n+\tlsr.l\t#2,%d0\n+\tjne\t1f\n+\tjcs\t.Lcls_ret_float\n+\tmove.l\t(%a0)+,%d0\n+\tmove.l\t(%a0),%d1\n+\tjra\t.Lcls_epilogue\n+.Lcls_ret_float:\n+\tfmove.s\t(%a0),%fp0\n+\tjra\t.Lcls_epilogue\n+1:\n+\tlsr.l\t#2,%d0\n+\tjne\t1f\n+\tjcs\t.Lcls_ret_ldouble\n+\tfmove.d\t(%a0),%fp0\n+\tjra\t.Lcls_epilogue\n+.Lcls_ret_ldouble:\n+\tfmove.x\t(%a0),%fp0\n+\tjra\t.Lcls_epilogue\n+1:\n+\tlsr.l\t#2,%d0\n+\tjne\t.Lcls_ret_struct2\n+\tjcs\t.Lcls_ret_struct1\n+\tmove.l\t(%a0),%a0\n+\tmove.l\t%a0,%d0\n+\tjra\t.Lcls_epilogue\n+.Lcls_ret_struct1:\n+\tmove.b\t(%a0),%d0\n+\tjra\t.Lcls_epilogue\n+.Lcls_ret_struct2:\n+\tmove.w\t(%a0),%d0\n+\tjra\t.Lcls_epilogue\n+\tCFI_ENDPROC()\n+\n+\t.size\tffi_closure_SYSV,.-ffi_closure_SYSV\n+\n+\t.globl\tffi_closure_struct_SYSV\n+\t.type\tffi_closure_struct_SYSV, @function\n+\t.align\t4\n+\n+ffi_closure_struct_SYSV:\n+\tCFI_STARTPROC()\n+\tlink\t%fp,#0\n+\tCFI_OFFSET(14,-8)\n+\tCFI_DEF_CFA(14,8)\n+\tmove.l\t%sp,-12(%fp)\n+\tpea\t8(%fp)\n+\tmove.l\t%a1,-(%sp)\n+\tmove.l\t%a0,-(%sp)\n+#if !defined __PIC__\n+\tjsr\tffi_closure_SYSV_inner\n+#else\n+\tbsr.l\tffi_closure_SYSV_inner@PLTPC\n+#endif\n+\tunlk\t%fp\n+\trts\n+\tCFI_ENDPROC()\n+\t.size\tffi_closure_struct_SYSV,.-ffi_closure_struct_SYSV"}]}