{"sha": "53aedcce09b10467e60b9717223191f28e0360a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhZWRjY2UwOWIxMDQ2N2U2MGI5NzE3MjIzMTkxZjI4ZTAzNjBhMw==", "commit": {"author": {"name": "Michael Ploujnikov", "email": "michael.ploujnikov@oracle.com", "date": "2018-11-30T22:27:11Z"}, "committer": {"name": "Michael Ploujnikov", "email": "plouj@gcc.gnu.org", "date": "2018-11-30T22:27:11Z"}, "message": "Minimize clone counter memory usage in create_virtual_clone.\n\nBased on Martin Jambour's suggestion:\nhttps://gcc.gnu.org/ml/gcc-patches/2018-09/msg00111.html\n\ngcc:\n\n\t* cgraph.h (clone_function_name): Add a variant that takes a\n\ttree decl.\n\t* cgraph.h (cgraph_node::create_virtual_clone): Add a new\n\targument: num_suffix.\n\t* cgraphclones.c (cgraph_node::create_virtual_clone): Pass\n\tnum_suffix to clone_function_name.\n\t(clone_function_name): Add a variant that takes a tree decl.\n\t* ipa-cp.c (create_specialized_node): Keep track of clone\n\tcounters in clone_num_suffixes hash map.\n\t(ipcp_driver): Free the counter hash map.\n\t* ipa-hsa.c (process_hsa_functions): Creates at most one hsa\n\tclone per function.\n\nFrom-SVN: r266692", "tree": {"sha": "c72d1dda4f4a1aa9ddf8b49d3b4e9c31949ec228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72d1dda4f4a1aa9ddf8b49d3b4e9c31949ec228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53aedcce09b10467e60b9717223191f28e0360a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53aedcce09b10467e60b9717223191f28e0360a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53aedcce09b10467e60b9717223191f28e0360a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53aedcce09b10467e60b9717223191f28e0360a3/comments", "author": {"login": "plouj-oracle", "id": 7086511, "node_id": "MDQ6VXNlcjcwODY1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7086511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plouj-oracle", "html_url": "https://github.com/plouj-oracle", "followers_url": "https://api.github.com/users/plouj-oracle/followers", "following_url": "https://api.github.com/users/plouj-oracle/following{/other_user}", "gists_url": "https://api.github.com/users/plouj-oracle/gists{/gist_id}", "starred_url": "https://api.github.com/users/plouj-oracle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plouj-oracle/subscriptions", "organizations_url": "https://api.github.com/users/plouj-oracle/orgs", "repos_url": "https://api.github.com/users/plouj-oracle/repos", "events_url": "https://api.github.com/users/plouj-oracle/events{/privacy}", "received_events_url": "https://api.github.com/users/plouj-oracle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b75255a9b11ae672e569966860090d70ff10ffca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75255a9b11ae672e569966860090d70ff10ffca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75255a9b11ae672e569966860090d70ff10ffca"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "873d1c8d25f4ab4a9129d21926f4e4e778351e10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53aedcce09b10467e60b9717223191f28e0360a3", "patch": "@@ -1,3 +1,19 @@\n+2018-11-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\n+\tMinimize clone counter memory usage in create_virtual_clone.\n+\t* cgraph.h (clone_function_name): Add a variant that takes a\n+\ttree decl.\n+\t* cgraph.h (cgraph_node::create_virtual_clone): Add a new\n+\targument: num_suffix.\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone): Pass\n+\tnum_suffix to clone_function_name.\n+\t(clone_function_name): Add a variant that takes a tree decl.\n+\t* ipa-cp.c (create_specialized_node): Keep track of clone\n+\tcounters in clone_num_suffixes hash map.\n+\t(ipcp_driver): Free the counter hash map.\n+\t* ipa-hsa.c (process_hsa_functions): Creates at most one hsa\n+\tclone per function.\n+\n 2018-11-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n \tMake function assembly more independent.\n "}, {"sha": "b8e23cc338aec7ead0c68240a04906ba5b1ecd61", "filename": "gcc/cgraph.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=53aedcce09b10467e60b9717223191f28e0360a3", "patch": "@@ -968,11 +968,13 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n \t\t\t     cgraph_node *new_inlined_to,\n \t\t\t     bitmap args_to_skip, const char *suffix = NULL);\n \n-  /* Create callgraph node clone with new declaration.  The actual body will\n-     be copied later at compilation stage.  */\n+  /* Create callgraph node clone with new declaration.  The actual body will be\n+     copied later at compilation stage.  The name of the new clone will be\n+     constructed from the name of the original node, SUFFIX and NUM_SUFFIX.  */\n   cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n \t\t\t\t     vec<ipa_replace_map *, va_gc> *tree_map,\n-\t\t\t\t     bitmap args_to_skip, const char * suffix);\n+\t\t\t\t     bitmap args_to_skip, const char * suffix,\n+\t\t\t\t     unsigned num_suffix);\n \n   /* cgraph node being removed from symbol table; see if its entry can be\n    replaced by other inline clone.  */\n@@ -2386,6 +2388,8 @@ tree clone_function_name_numbered (const char *name, const char *suffix);\n tree clone_function_name_numbered (tree decl, const char *suffix);\n tree clone_function_name (const char *name, const char *suffix,\n \t\t\t  unsigned long number);\n+tree clone_function_name (tree decl, const char *suffix,\n+\t\t\t  unsigned long number);\n tree clone_function_name (tree decl, const char *suffix);\n \n void tree_function_versioning (tree, tree, vec<ipa_replace_map *, va_gc> *,"}, {"sha": "f8076920fff7f509f5c729c62b81fd9f134ecd0a", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=53aedcce09b10467e60b9717223191f28e0360a3", "patch": "@@ -572,6 +572,19 @@ clone_function_name (const char *name, const char *suffix,\n   return get_identifier (tmp_name);\n }\n \n+/* Return a new assembler name for a clone of DECL.  Apart from the\n+   string SUFFIX, the new name will end with the specified NUMBER.  If\n+   clone numbering is not needed then the two argument\n+   clone_function_name should be used instead.  */\n+\n+tree\n+clone_function_name (tree decl, const char *suffix,\n+\t\t     unsigned long number)\n+{\n+  return clone_function_name (\n+\t   IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), suffix, number);\n+}\n+\n /* Return a new assembler name ending with the string SUFFIX for a\n    clone of DECL.  */\n \n@@ -599,16 +612,18 @@ clone_function_name (tree decl, const char *suffix)\n }\n \n \n-/* Create callgraph node clone with new declaration.  The actual body will\n-   be copied later at compilation stage.\n+/* Create callgraph node clone with new declaration.  The actual body will be\n+   copied later at compilation stage.  The name of the new clone will be\n+   constructed from the name of the original node, SUFFIX and NUM_SUFFIX.\n \n    TODO: after merging in ipa-sra use function call notes instead of args_to_skip\n    bitmap interface.\n    */\n cgraph_node *\n cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n \t\t\t\t   vec<ipa_replace_map *, va_gc> *tree_map,\n-\t\t\t\t   bitmap args_to_skip, const char * suffix)\n+\t\t\t\t   bitmap args_to_skip, const char * suffix,\n+\t\t\t\t   unsigned num_suffix)\n {\n   tree old_decl = decl;\n   cgraph_node *new_node = NULL;\n@@ -643,8 +658,8 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n   strcpy (name + len + 1, suffix);\n   name[len] = '.';\n   DECL_NAME (new_decl) = get_identifier (name);\n-  SET_DECL_ASSEMBLER_NAME (new_decl, clone_function_name_numbered (old_decl,\n-\t\t\t\t\t\t\t\t   suffix));\n+  SET_DECL_ASSEMBLER_NAME (new_decl,\n+\t\t\t   clone_function_name (old_decl, suffix, num_suffix));\n   SET_DECL_RTL (new_decl, NULL);\n \n   new_node = create_clone (new_decl, count, false,"}, {"sha": "84ca688fce3d9b04d49bc74e3ce200a78f1bf4a2", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=53aedcce09b10467e60b9717223191f28e0360a3", "patch": "@@ -376,6 +376,9 @@ static profile_count max_count;\n \n static long overall_size, max_new_size;\n \n+/* Node to unique clone suffix number map.  */\n+static hash_map<cgraph_node *, unsigned> *clone_num_suffixes;\n+\n /* Return the param lattices structure corresponding to the Ith formal\n    parameter of the function described by INFO.  */\n static inline struct ipcp_param_lattices *\n@@ -3829,8 +3832,11 @@ create_specialized_node (struct cgraph_node *node,\n \t}\n     }\n \n+  unsigned &suffix_counter = clone_num_suffixes->get_or_insert (node);\n   new_node = node->create_virtual_clone (callers, replace_trees,\n-\t\t\t\t\t args_to_skip, \"constprop\");\n+\t\t\t\t\t args_to_skip, \"constprop\",\n+\t\t\t\t\t suffix_counter);\n+  suffix_counter++;\n \n   bool have_self_recursive_calls = !self_recursive_calls.is_empty ();\n   for (unsigned j = 0; j < self_recursive_calls.length (); j++)\n@@ -5044,6 +5050,7 @@ ipcp_driver (void)\n \n   ipa_check_create_node_params ();\n   ipa_check_create_edge_args ();\n+  clone_num_suffixes = new hash_map<cgraph_node *, unsigned>;\n \n   if (dump_file)\n     {\n@@ -5065,6 +5072,7 @@ ipcp_driver (void)\n   ipcp_store_vr_results ();\n \n   /* Free all IPCP structures.  */\n+  delete clone_num_suffixes;\n   free_toporder_info (&topo);\n   delete edge_clone_summaries;\n   edge_clone_summaries = NULL;"}, {"sha": "63b41eabc9a3ef84f0bf9f6f79d5ff6100b50c8b", "filename": "gcc/ipa-hsa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fipa-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53aedcce09b10467e60b9717223191f28e0360a3/gcc%2Fipa-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-hsa.c?ref=53aedcce09b10467e60b9717223191f28e0360a3", "patch": "@@ -88,7 +88,7 @@ process_hsa_functions (void)\n \t    continue;\n \t  cgraph_node *clone\n \t    = node->create_virtual_clone (vec <cgraph_edge *> (),\n-\t\t\t\t\t  NULL, NULL, \"hsa\");\n+\t\t\t\t\t  NULL, NULL, \"hsa\", 0);\n \t  TREE_PUBLIC (clone->decl) = TREE_PUBLIC (node->decl);\n \t  clone->externally_visible = node->externally_visible;\n \n@@ -109,7 +109,7 @@ process_hsa_functions (void)\n \t    continue;\n \t  cgraph_node *clone\n \t    = node->create_virtual_clone (vec <cgraph_edge *> (),\n-\t\t\t\t\t  NULL, NULL, \"hsa\");\n+\t\t\t\t\t  NULL, NULL, \"hsa\", 0);\n \t  TREE_PUBLIC (clone->decl) = TREE_PUBLIC (node->decl);\n \t  clone->externally_visible = node->externally_visible;\n "}]}