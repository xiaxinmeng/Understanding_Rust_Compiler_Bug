{"sha": "b2505143369334866ed98d69f08033068b24de34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1MDUxNDMzNjkzMzQ4NjZlZDk4ZDY5ZjA4MDMzMDY4YjI0ZGUzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-25T07:44:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-25T07:44:57Z"}, "message": "re PR middle-end/61762 (failure to optimize memcpy from constant string)\n\n2014-07-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/61762\n\tPR middle-end/61894\n\t* fold-const.c (native_encode_int): Add and handle offset\n\tparameter to do partial encodings of expr.\n\t(native_encode_fixed): Likewise.\n\t(native_encode_real): Likewise.\n\t(native_encode_complex): Likewise.\n\t(native_encode_vector): Likewise.\n\t(native_encode_string): Likewise.\n\t(native_encode_expr): Likewise.\n\t* fold-const.c (native_encode_expr): Add offset parameter\n\tdefaulting to -1.\n\t* gimple-fold.c (fold_string_cst_ctor_reference): Remove.\n\t(fold_ctor_reference): Handle all reads from tcc_constant\n\tctors.\n\n\t* gcc.dg/pr61762.c: New testcase.\n\t* gcc.dg/fold-cstring.c: Likewise.\n\t* gcc.dg/fold-cvect.c: Likewise.\n\nFrom-SVN: r213045", "tree": {"sha": "c7fe34fd006f2ff66fbe4a743da4b4b825b9c156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fe34fd006f2ff66fbe4a743da4b4b825b9c156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2505143369334866ed98d69f08033068b24de34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2505143369334866ed98d69f08033068b24de34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2505143369334866ed98d69f08033068b24de34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2505143369334866ed98d69f08033068b24de34/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ed85d52ef443e528bfccc64d81a7b263e9defa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed85d52ef443e528bfccc64d81a7b263e9defa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed85d52ef443e528bfccc64d81a7b263e9defa3"}], "stats": {"total": 284, "additions": 211, "deletions": 73}, "files": [{"sha": "268c40a6a5e14bc26d2f7c7df37867465f516815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -1,3 +1,21 @@\n+2014-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61762\n+\tPR middle-end/61894\n+\t* fold-const.c (native_encode_int): Add and handle offset\n+\tparameter to do partial encodings of expr.\n+\t(native_encode_fixed): Likewise.\n+\t(native_encode_real): Likewise.\n+\t(native_encode_complex): Likewise.\n+\t(native_encode_vector): Likewise.\n+\t(native_encode_string): Likewise.\n+\t(native_encode_expr): Likewise.\n+\t* fold-const.c (native_encode_expr): Add offset parameter\n+\tdefaulting to -1.\n+\t* gimple-fold.c (fold_string_cst_ctor_reference): Remove.\n+\t(fold_ctor_reference): Handle all reads from tcc_constant\n+\tctors.\n+\n 2014-07-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-inline.c (estimate_move_cost): Mark speed_p argument"}, {"sha": "0999625dc281dcd2386409abba58f5b6b127c277", "filename": "gcc/fold-const.c", "status": "modified", "additions": 70, "deletions": 35, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -7240,15 +7240,18 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n    upon failure.  */\n \n static int\n-native_encode_int (const_tree expr, unsigned char *ptr, int len)\n+native_encode_int (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n   int byte, offset, word, words;\n   unsigned char value;\n \n-  if (total_bytes > len)\n+  if ((off == -1 && total_bytes > len)\n+      || off >= total_bytes)\n     return 0;\n+  if (off == -1)\n+    off = 0;\n   words = total_bytes / UNITS_PER_WORD;\n \n   for (byte = 0; byte < total_bytes; byte++)\n@@ -7271,9 +7274,11 @@ native_encode_int (const_tree expr, unsigned char *ptr, int len)\n \t}\n       else\n \toffset = BYTES_BIG_ENDIAN ? (total_bytes - 1) - byte : byte;\n-      ptr[offset] = value;\n+      if (offset >= off\n+\t  && offset - off < len)\n+\tptr[offset - off] = value;\n     }\n-  return total_bytes;\n+  return MIN (len, total_bytes - off);\n }\n \n \n@@ -7283,7 +7288,7 @@ native_encode_int (const_tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_fixed (const_tree expr, unsigned char *ptr, int len)\n+native_encode_fixed (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n   enum machine_mode mode = TYPE_MODE (type);\n@@ -7303,7 +7308,7 @@ native_encode_fixed (const_tree expr, unsigned char *ptr, int len)\n   value = TREE_FIXED_CST (expr);\n   i_value = double_int_to_tree (i_type, value.data);\n \n-  return native_encode_int (i_value, ptr, len);\n+  return native_encode_int (i_value, ptr, len, off);\n }\n \n \n@@ -7313,7 +7318,7 @@ native_encode_fixed (const_tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_real (const_tree expr, unsigned char *ptr, int len)\n+native_encode_real (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n@@ -7325,8 +7330,11 @@ native_encode_real (const_tree expr, unsigned char *ptr, int len)\n      up to 192 bits.  */\n   long tmp[6];\n \n-  if (total_bytes > len)\n+  if ((off == -1 && total_bytes > len)\n+      || off >= total_bytes)\n     return 0;\n+  if (off == -1)\n+    off = 0;\n   words = (32 / BITS_PER_UNIT) / UNITS_PER_WORD;\n \n   real_to_target (tmp, TREE_REAL_CST_PTR (expr), TYPE_MODE (type));\n@@ -7350,9 +7358,12 @@ native_encode_real (const_tree expr, unsigned char *ptr, int len)\n \t}\n       else\n \toffset = BYTES_BIG_ENDIAN ? 3 - byte : byte;\n-      ptr[offset + ((bitpos / BITS_PER_UNIT) & ~3)] = value;\n+      offset = offset + ((bitpos / BITS_PER_UNIT) & ~3);\n+      if (offset >= off\n+\t  && offset - off < len)\n+\tptr[offset - off] = value;\n     }\n-  return total_bytes;\n+  return MIN (len, total_bytes - off);\n }\n \n /* Subroutine of native_encode_expr.  Encode the COMPLEX_CST\n@@ -7361,18 +7372,22 @@ native_encode_real (const_tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_complex (const_tree expr, unsigned char *ptr, int len)\n+native_encode_complex (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   int rsize, isize;\n   tree part;\n \n   part = TREE_REALPART (expr);\n-  rsize = native_encode_expr (part, ptr, len);\n-  if (rsize == 0)\n+  rsize = native_encode_expr (part, ptr, len, off);\n+  if (off == -1\n+      && rsize == 0)\n     return 0;\n   part = TREE_IMAGPART (expr);\n-  isize = native_encode_expr (part, ptr+rsize, len-rsize);\n-  if (isize != rsize)\n+  if (off != -1)\n+    off = MAX (0, off - GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (part))));\n+  isize = native_encode_expr (part, ptr+rsize, len-rsize, off);\n+  if (off == -1\n+      && isize != rsize)\n     return 0;\n   return rsize + isize;\n }\n@@ -7384,7 +7399,7 @@ native_encode_complex (const_tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_vector (const_tree expr, unsigned char *ptr, int len)\n+native_encode_vector (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   unsigned i, count;\n   int size, offset;\n@@ -7396,10 +7411,21 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len)\n   size = GET_MODE_SIZE (TYPE_MODE (itype));\n   for (i = 0; i < count; i++)\n     {\n+      if (off >= size)\n+\t{\n+\t  off -= size;\n+\t  continue;\n+\t}\n       elem = VECTOR_CST_ELT (expr, i);\n-      if (native_encode_expr (elem, ptr+offset, len-offset) != size)\n+      int res = native_encode_expr (elem, ptr+offset, len-offset, off);\n+      if ((off == -1 && res != size)\n+\t  || res == 0)\n \treturn 0;\n-      offset += size;\n+      offset += res;\n+      if (offset >= len)\n+\treturn offset;\n+      if (off != -1)\n+\toff = 0;\n     }\n   return offset;\n }\n@@ -7411,7 +7437,7 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_string (const_tree expr, unsigned char *ptr, int len)\n+native_encode_string (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n   HOST_WIDE_INT total_bytes;\n@@ -7422,47 +7448,56 @@ native_encode_string (const_tree expr, unsigned char *ptr, int len)\n       || !tree_fits_shwi_p (TYPE_SIZE_UNIT (type)))\n     return 0;\n   total_bytes = tree_to_shwi (TYPE_SIZE_UNIT (type));\n-  if (total_bytes > len)\n+  if ((off == -1 && total_bytes > len)\n+      || off >= total_bytes)\n     return 0;\n-  if (TREE_STRING_LENGTH (expr) < total_bytes)\n+  if (off == -1)\n+    off = 0;\n+  if (TREE_STRING_LENGTH (expr) - off < MIN (total_bytes, len))\n     {\n-      memcpy (ptr, TREE_STRING_POINTER (expr), TREE_STRING_LENGTH (expr));\n-      memset (ptr + TREE_STRING_LENGTH (expr), 0,\n-\t      total_bytes - TREE_STRING_LENGTH (expr));\n+      int written = 0;\n+      if (off < TREE_STRING_LENGTH (expr))\n+\t{\n+\t  written = MIN (len, TREE_STRING_LENGTH (expr) - off);\n+\t  memcpy (ptr, TREE_STRING_POINTER (expr) + off, written);\n+\t}\n+      memset (ptr + written, 0,\n+\t      MIN (total_bytes - written, len - written));\n     }\n   else\n-    memcpy (ptr, TREE_STRING_POINTER (expr), total_bytes);\n-  return total_bytes;\n+    memcpy (ptr, TREE_STRING_POINTER (expr) + off, MIN (total_bytes, len));\n+  return MIN (total_bytes - off, len);\n }\n \n \n /* Subroutine of fold_view_convert_expr.  Encode the INTEGER_CST,\n    REAL_CST, COMPLEX_CST or VECTOR_CST specified by EXPR into the\n-   buffer PTR of length LEN bytes.  Return the number of bytes\n-   placed in the buffer, or zero upon failure.  */\n+   buffer PTR of length LEN bytes.  If OFF is not -1 then start\n+   the encoding at byte offset OFF and encode at most LEN bytes.\n+   Return the number of bytes placed in the buffer, or zero upon failure.  */\n \n int\n-native_encode_expr (const_tree expr, unsigned char *ptr, int len)\n+native_encode_expr (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   switch (TREE_CODE (expr))\n     {\n     case INTEGER_CST:\n-      return native_encode_int (expr, ptr, len);\n+      return native_encode_int (expr, ptr, len, off);\n \n     case REAL_CST:\n-      return native_encode_real (expr, ptr, len);\n+      return native_encode_real (expr, ptr, len, off);\n \n     case FIXED_CST:\n-      return native_encode_fixed (expr, ptr, len);\n+      return native_encode_fixed (expr, ptr, len, off);\n \n     case COMPLEX_CST:\n-      return native_encode_complex (expr, ptr, len);\n+      return native_encode_complex (expr, ptr, len, off);\n \n     case VECTOR_CST:\n-      return native_encode_vector (expr, ptr, len);\n+      return native_encode_vector (expr, ptr, len, off);\n \n     case STRING_CST:\n-      return native_encode_string (expr, ptr, len);\n+      return native_encode_string (expr, ptr, len, off);\n \n     default:\n       return 0;"}, {"sha": "b440ca11881a0c5cbacb9898c459dcb8c127b127", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n extern int folding_initializer;\n \n /* Convert between trees and native memory representation.  */\n-extern int native_encode_expr (const_tree, unsigned char *, int);\n+extern int native_encode_expr (const_tree, unsigned char *, int, int off = -1);\n extern tree native_interpret_expr (tree, const unsigned char *, int);\n \n /* Fold constants as much as possible in an expression."}, {"sha": "747c0aa0b359cc947324069217f731f2672e346f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -2881,41 +2881,6 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n     }\n }\n \n-/* CTOR is STRING_CST.  Fold reference of type TYPE and size SIZE\n-   to the memory at bit OFFSET.\n-\n-   We do only simple job of folding byte accesses.  */\n-\n-static tree\n-fold_string_cst_ctor_reference (tree type, tree ctor,\n-\t\t\t\tunsigned HOST_WIDE_INT offset,\n-\t\t\t\tunsigned HOST_WIDE_INT size)\n-{\n-  if (INTEGRAL_TYPE_P (type)\n-      && (TYPE_MODE (type)\n-\t  == TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor))))\n-      && (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor))))\n-\t  == MODE_INT)\n-      && GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor)))) == 1\n-      && size == BITS_PER_UNIT\n-      && !(offset % BITS_PER_UNIT))\n-    {\n-      offset /= BITS_PER_UNIT;\n-      if (offset < (unsigned HOST_WIDE_INT) TREE_STRING_LENGTH (ctor))\n-\treturn build_int_cst_type (type, (TREE_STRING_POINTER (ctor)\n-\t\t\t\t   [offset]));\n-      /* Folding\n-\t const char a[20]=\"hello\";\n-\t return a[10];\n-\n-\t might lead to offset greater than string length.  In this case we\n-\t know value is either initialized to 0 or out of bounds.  Return 0\n-\t in both cases.  */\n-      return build_zero_cst (type);\n-    }\n-  return NULL_TREE;\n-}\n-\n /* CTOR is CONSTRUCTOR of an array type.  Fold reference of type TYPE and size\n    SIZE to the memory at bit OFFSET.  */\n \n@@ -3107,8 +3072,19 @@ fold_ctor_reference (tree type, tree ctor, unsigned HOST_WIDE_INT offset,\n \tSTRIP_NOPS (ret);\n       return ret;\n     }\n-  if (TREE_CODE (ctor) == STRING_CST)\n-    return fold_string_cst_ctor_reference (type, ctor, offset, size);\n+  /* For constants and byte-aligned/sized reads try to go through\n+     native_encode/interpret.  */\n+  if (CONSTANT_CLASS_P (ctor)\n+      && BITS_PER_UNIT == 8\n+      && offset % BITS_PER_UNIT == 0\n+      && size % BITS_PER_UNIT == 0\n+      && size <= MAX_BITSIZE_MODE_ANY_MODE)\n+    {\n+      unsigned char buf[MAX_BITSIZE_MODE_ANY_MODE / BITS_PER_UNIT];\n+      if (native_encode_expr (ctor, buf, size / BITS_PER_UNIT,\n+\t\t\t      offset / BITS_PER_UNIT) > 0)\n+\treturn native_interpret_expr (type, buf, size / BITS_PER_UNIT);\n+    }\n   if (TREE_CODE (ctor) == CONSTRUCTOR)\n     {\n "}, {"sha": "72ba8a7a8a85ae90ed43fc9cc8aa1148a7f84656", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -1,3 +1,11 @@\n+2014-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61762\n+\tPR middle-end/61894\n+\t* gcc.dg/pr61762.c: New testcase.\n+\t* gcc.dg/fold-cstring.c: Likewise.\n+\t* gcc.dg/fold-cvect.c: Likewise.\n+\n 2014-07-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.target/powerpc/ppc64-abi-warn-3.c: New test."}, {"sha": "f92b120b3b7620fbba7670fa7c7c108f9d65a665", "filename": "gcc/testsuite/gcc.dg/fold-cstring.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cstring.c?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+/* The following are testcases for native_interpret_int,\n+   native_interpret_complex and native_interpret_vector decoding\n+   pieces of a string constant encoded by native_encode_string.  */\n+\n+extern void abort (void);\n+\n+/* We should fold all reads from xconstant and eliminate it, removing\n+   the reference to blah which cannot be resolved at link time.  */\n+extern int blah;\n+\n+static const struct {\n+    int *y;\n+    const char x[32] __attribute__((aligned(32)));\n+} xconstant = { &blah, \"01234567899876543210123456789000\" };\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+int main()\n+{\n+  if (sizeof (int) != 4)\n+    return 0;\n+  if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n+    {\n+      if (*(int *)&xconstant.x[4] != 0x34353637)\n+\tabort ();\n+      if ((*(v4si *)&xconstant.x[16])[1] != 0x31323334)\n+\tabort ();\n+      if (__imag (*(_Complex int *)&xconstant.x[8]) != 0x37363534)\n+\tabort ();\n+    }\n+  else if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)\n+    {\n+      if (*(int *)&xconstant.x[4] != 0x37363534)\n+\tabort ();\n+      if ((*(v4si *)&xconstant.x[16])[1] != 0x34333231)\n+\tabort ();\n+      if (__imag (*(_Complex int *)&xconstant.x[8]) != 0x34353637)\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "8687f8db2ad92e48085b3dfa2cd334303c7c26cc", "filename": "gcc/testsuite/gcc.dg/fold-cvect.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cvect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cvect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cvect.c?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+extern void abort (void);\n+\n+/* We should fold all reads from xconstant and eliminate it, removing\n+   the reference to blah which cannot be resolved at link time.  */\n+extern int blah;\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+static const struct {\n+    int *y;\n+    const v4si x[2] __attribute__((aligned(32)));\n+} xconstant = { &blah, { { 0, 1, 2, 3 }, { 2, 3, 4, 5 } } };\n+\n+int main()\n+{\n+  if (sizeof (int) != 4)\n+    return 0;\n+  if (*(int *)&xconstant.x[0][0] != 0)\n+    abort ();\n+  if (*(int *)&xconstant.x[0][1] != 1)\n+    abort ();\n+  if (*(int *)&xconstant.x[0][2] != 2)\n+    abort ();\n+  if (*(int *)&xconstant.x[0][3] != 3)\n+    abort ();\n+  if (*(int *)&xconstant.x[1][0] != 2)\n+    abort ();\n+  if (*(int *)&xconstant.x[1][1] != 3)\n+    abort ();\n+  if (*(int *)&xconstant.x[1][2] != 4)\n+    abort ();\n+  if (*(int *)&xconstant.x[1][3] != 5)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5abe5347e4a3b74b5269e48d6dadfaddab65cfcc", "filename": "gcc/testsuite/gcc.dg/pr61762.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61762.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2505143369334866ed98d69f08033068b24de34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61762.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61762.c?ref=b2505143369334866ed98d69f08033068b24de34", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-release_ssa\" } */\n+\n+unsigned int f()\n+{\n+  static const char string[] = \"Private\";\n+\n+  unsigned int priv;\n+  __builtin_memcpy(&priv, &string[0], sizeof(priv));\n+  return priv;\n+}\n+\n+/* We should have removed the static string and simplified the\n+   memcpy to a store from an integer constant.  CCP\n+   already performs the simplification but only after release_ssa\n+   the unused local static is removed.  */\n+\n+/* { dg-final { scan-tree-dump-not \"Private\" \"release_ssa\" } } */\n+/* { dg-final { cleanup-tree-dump \"release_ssa\" } } */"}]}