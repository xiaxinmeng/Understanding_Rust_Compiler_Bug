{"sha": "15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkZTNiYzBiNDk0ZGFlOWJmZGNjN2FmNjA5NzRkZjBiMzFjM2YwYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-11T07:51:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:00Z"}, "message": "[Ada] Use inline expansion of Image for enumeration types by default\n\ngcc/ada/\n\n\t* debug.adb (d_x): Document new usage.\n\t* exp_imgv.adb (Expand_User_Defined_Enumeration_Image): Add Typ\n\tparameter and use it throughout the processing.\n\t(Expand_Image_Attribute): Retrieve the underlying type of the\n\tprefix and use the inline expansion for user-defined enumeration\n\ttypes with a literal string by default.", "tree": {"sha": "9ce657c18680f7a54e7ea060db09e42a6d95f101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ce657c18680f7a54e7ea060db09e42a6d95f101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a46d0ed6e5b337bae638517ecbdfd84db750530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a46d0ed6e5b337bae638517ecbdfd84db750530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a46d0ed6e5b337bae638517ecbdfd84db750530"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "3c8f0547d2653d2e3128fd58dffb70a78b6d7239", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "patch": "@@ -162,7 +162,7 @@ package body Debug is\n    --  d_u\n    --  d_v\n    --  d_w\n-   --  d_x\n+   --  d_x  Disable inline expansion of Image attribute for enumeration types\n    --  d_y\n    --  d_z  Enable Put_Image on tagged types\n \n@@ -990,6 +990,9 @@ package body Debug is\n    --       a call to routine Ada.Synchronous_Task_Control.Suspend_Until_True\n    --       or Ada.Synchronous_Barriers.Wait_For_Release.\n \n+   --  d_x  The compiler does not expand in line the Image attribute for user-\n+   --       defined enumeration types.\n+\n    --  d_z  Enable the default Put_Image on tagged types that are not\n    --       predefined.\n "}, {"sha": "90abbd4e6b1b096f8750d28777498953744da1c7", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "patch": "@@ -754,7 +754,7 @@ package body Exp_Imgv is\n       Expr  : constant Node_Id    := Relocate_Node (First (Exprs));\n       Pref  : constant Node_Id    := Prefix (N);\n \n-      procedure Expand_User_Defined_Enumeration_Image;\n+      procedure Expand_User_Defined_Enumeration_Image (Typ : Entity_Id);\n       --  Expand attribute 'Image in user-defined enumeration types, avoiding\n       --  string copy.\n \n@@ -766,14 +766,12 @@ package body Exp_Imgv is\n       -- Expand_User_Defined_Enumeration_Image --\n       -------------------------------------------\n \n-      procedure Expand_User_Defined_Enumeration_Image is\n+      procedure Expand_User_Defined_Enumeration_Image (Typ : Entity_Id) is\n          Ins_List : constant List_Id   := New_List;\n          P1_Id    : constant Entity_Id := Make_Temporary (Loc, 'P');\n          P2_Id    : constant Entity_Id := Make_Temporary (Loc, 'P');\n          P3_Id    : constant Entity_Id := Make_Temporary (Loc, 'P');\n          P4_Id    : constant Entity_Id := Make_Temporary (Loc, 'P');\n-         Ptyp     : constant Entity_Id := Entity (Pref);\n-         Rtyp     : constant Entity_Id := Root_Type (Ptyp);\n          S1_Id    : constant Entity_Id := Make_Temporary (Loc, 'S');\n \n       begin\n@@ -785,7 +783,7 @@ package body Exp_Imgv is\n          end if;\n \n          --  Generate:\n-         --    P1 : constant Natural := Pos;\n+         --    P1 : constant Natural := Typ'Pos (Typ?(Expr));\n \n          Append_To (Ins_List,\n            Make_Object_Declaration (Loc,\n@@ -797,8 +795,8 @@ package body Exp_Imgv is\n                Convert_To (Standard_Natural,\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Pos,\n-                   Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-                   Expressions    => New_List (Expr)))));\n+                   Prefix         => New_Occurrence_Of (Typ, Loc),\n+                   Expressions    => New_List (OK_Convert_To (Typ, Expr))))));\n \n          --  Compute the index of the string start, generating:\n          --    P2 : constant Natural := call_put_enumN (P1);\n@@ -813,7 +811,7 @@ package body Exp_Imgv is\n                Convert_To (Standard_Natural,\n                  Make_Indexed_Component (Loc,\n                    Prefix      =>\n-                     New_Occurrence_Of (Lit_Indexes (Rtyp), Loc),\n+                     New_Occurrence_Of (Lit_Indexes (Typ), Loc),\n                    Expressions =>\n                      New_List (New_Occurrence_Of (P1_Id, Loc))))));\n \n@@ -837,7 +835,7 @@ package body Exp_Imgv is\n                   Convert_To (Standard_Natural,\n                     Make_Indexed_Component (Loc,\n                       Prefix      =>\n-                        New_Occurrence_Of (Lit_Indexes (Rtyp), Loc),\n+                        New_Occurrence_Of (Lit_Indexes (Typ), Loc),\n                       Expressions =>\n                         New_List (Add_Node)))));\n          end;\n@@ -860,7 +858,7 @@ package body Exp_Imgv is\n                 Name                =>\n                   Make_Slice (Loc,\n                     Prefix         =>\n-                      New_Occurrence_Of (Lit_Strings (Rtyp), Loc),\n+                      New_Occurrence_Of (Lit_Strings (Typ), Loc),\n                     Discrete_Range =>\n                       Make_Range (Loc,\n                         Low_Bound  => New_Occurrence_Of (P2_Id, Loc),\n@@ -944,7 +942,7 @@ package body Exp_Imgv is\n          return;\n       end if;\n \n-      Ptyp := Entity (Pref);\n+      Ptyp := Underlying_Type (Entity (Pref));\n \n       --  Ada 2020 allows 'Image on private types, so fetch the underlying\n       --  type to obtain the structure of the type. We use the base type,\n@@ -958,16 +956,16 @@ package body Exp_Imgv is\n          Rtyp := Underlying_Type (Base_Type (Ptyp));\n       end if;\n \n-      --  Enable speed-optimized expansion of user-defined enumeration types\n-      --  if we are compiling with optimizations enabled and enumeration type\n-      --  literals are generated. Otherwise the call will be expanded into a\n-      --  call to the runtime library.\n+      --  Use inline expansion for user-defined enumeration types for which\n+      --  the literal string entity has been built, and if -gnatd_x is not\n+      --  passed to the compiler. Otherwise the attribute will be expanded\n+      --  into a call to a routine in the runtime.\n \n-      if Optimization_Level > 0\n-        and then not Global_Discard_Names\n-        and then Is_User_Defined_Enumeration_Type (Rtyp)\n+      if Is_User_Defined_Enumeration_Type (Rtyp)\n+        and then Present (Lit_Strings (Rtyp))\n+        and then not Debug_Flag_Underscore_X\n       then\n-         Expand_User_Defined_Enumeration_Image;\n+         Expand_User_Defined_Enumeration_Image (Rtyp);\n          return;\n       end if;\n "}]}