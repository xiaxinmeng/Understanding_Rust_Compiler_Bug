{"sha": "5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "node_id": "C_kwDOANBUbNoAKDVhMGMyN2NiNzk5ZWM3ZmE4NjRkYmRjNjQ5MDVmNmQ4MGExNWU5YjU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-26T14:09:55Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-31T12:49:27Z"}, "message": "Refactor unify to hit a unify_site\n\nThis allows us to enforce better error handling on unify sites", "tree": {"sha": "255c8651a60e2cf9b5d8b989d27d42fb23a90f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255c8651a60e2cf9b5d8b989d27d42fb23a90f96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119b4c098256a470cf4ab39580159179c48e0cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119b4c098256a470cf4ab39580159179c48e0cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119b4c098256a470cf4ab39580159179c48e0cb2"}], "stats": {"total": 823, "additions": 460, "deletions": 363}, "files": [{"sha": "3d6bc0b169dc9d03ccc54e19b961eccc5ca954e0", "filename": "gcc/rust/typecheck/rust-autoderef.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -255,7 +255,12 @@ resolve_operator_overload_fn (\n \t  lookup = fn->infer_substitions (Location ());\n \t  rust_assert (lookup->get_kind () == TyTy::TypeKind::FNDEF);\n \t  fn = static_cast<TyTy::FnType *> (lookup);\n-\t  fn->get_self_type ()->unify (adjusted_self);\n+\n+\t  Location unify_locus = mappings->lookup_location (ty->get_ref ());\n+\t  TypeCheckBase::unify_site (\n+\t    ty->get_ref (), TyTy::TyWithLocation (fn->get_self_type ()),\n+\t    TyTy::TyWithLocation (adjusted_self), unify_locus);\n+\n \t  lookup = fn;\n \t}\n     }\n@@ -284,6 +289,7 @@ AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n   const TyTy::BaseType *r = receiver;\n   while (true)\n     {\n+      rust_debug (\"autoderef try 1: {%s}\", r->debug_str ().c_str ());\n       if (try_autoderefed (r))\n \treturn true;\n \n@@ -292,12 +298,15 @@ AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n \treturn false;\n \n       // try unsize\n+\n       Adjustment unsize = Adjuster::try_unsize_type (r);\n       if (!unsize.is_error ())\n \t{\n \t  adjustments.push_back (unsize);\n \t  auto unsize_r = unsize.get_expected ();\n \n+\t  rust_debug (\"autoderef try unsize: {%s}\",\n+\t\t      unsize_r->debug_str ().c_str ());\n \t  if (try_autoderefed (unsize_r))\n \t    return true;\n \n@@ -311,6 +320,8 @@ AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n \t  auto deref_r = deref.get_expected ();\n \t  adjustments.push_back (deref);\n \n+\t  rust_debug (\"autoderef try lang-item DEREF: {%s}\",\n+\t\t      deref_r->debug_str ().c_str ());\n \t  if (try_autoderefed (deref_r))\n \t    return true;\n \n@@ -324,6 +335,8 @@ AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n \t  auto deref_r = deref_mut.get_expected ();\n \t  adjustments.push_back (deref_mut);\n \n+\t  rust_debug (\"autoderef try lang-item DEREF_MUT: {%s}\",\n+\t\t      deref_r->debug_str ().c_str ());\n \t  if (try_autoderefed (deref_r))\n \t    return true;\n "}, {"sha": "a361856ae6acc78c4ef52a55f171195b0819920c", "filename": "gcc/rust/typecheck/rust-coercion.cc", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -16,6 +16,7 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"rust-hir-type-check-base.h\"\n #include \"rust-coercion.h\"\n \n namespace Rust {\n@@ -53,6 +54,49 @@ TypeCoercionRules::do_coercion (TyTy::BaseType *receiver)\n   // see:\n   // https://github.com/rust-lang/rust/blob/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/compiler/rustc_typeck/src/check/coercion.rs\n \n+  // handle never\n+  // https://github.com/rust-lang/rust/blob/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/compiler/rustc_typeck/src/check/coercion.rs#L155\n+  if (receiver->get_kind () == TyTy::TypeKind::NEVER)\n+    {\n+      // Subtle: If we are coercing from `!` to `?T`, where `?T` is an unbound\n+      // type variable, we want `?T` to fallback to `!` if not\n+      // otherwise constrained. An example where this arises:\n+      //\n+      //     let _: Option<?T> = Some({ return; });\n+      //\n+      // here, we would coerce from `!` to `?T`.\n+      if (expected->has_subsititions_defined () && !expected->is_concrete ())\n+\t{\n+\t  Location locus = mappings->lookup_location (receiver->get_ref ());\n+\t  TyTy::TyVar implicit_var\n+\t    = TyTy::TyVar::get_implicit_infer_var (locus);\n+\t  try_result = CoercionResult{{}, implicit_var.get_tyty ()};\n+\t  return true;\n+\t}\n+      else\n+\t{\n+\t  bool expected_is_infer_var\n+\t    = expected->get_kind () == TyTy::TypeKind::INFER;\n+\t  bool expected_is_general_infer_var\n+\t    = expected_is_infer_var\n+\t      && (static_cast<TyTy::InferType *> (expected)->get_infer_kind ()\n+\t\t  == TyTy::InferType::InferTypeKind::GENERAL);\n+\n+\t  // FIXME this 'expected_is_general_infer_var' case needs to eventually\n+\t  // should go away see: compile/never_type_err1.rs\n+\t  //\n+\t  // I think we need inference obligations to say that yes we have a\n+\t  // general inference variable but we add the oligation to the expected\n+\t  // type that it could default to '!'\n+\t  if (expected_is_general_infer_var)\n+\t    try_result = CoercionResult{{}, receiver};\n+\t  else\n+\t    try_result = CoercionResult{{}, expected->clone ()};\n+\n+\t  return true;\n+\t}\n+    }\n+\n   // unsize\n   bool unsafe_error = false;\n   CoercionResult unsize_coercion\n@@ -163,13 +207,17 @@ TypeCoercionRules::coerce_borrowed_pointer (TyTy::BaseType *receiver,\n   switch (receiver->get_kind ())\n     {\n       case TyTy::TypeKind::REF: {\n-\tTyTy::ReferenceType *ref\n+\tTyTy::ReferenceType *from\n \t  = static_cast<TyTy::ReferenceType *> (receiver);\n-\tfrom_mutbl = ref->mutability ();\n+\tfrom_mutbl = from->mutability ();\n       }\n       break;\n \n       default: {\n+\t// FIXME\n+\t// we might be able to replace this with a can_eq because we default\n+\t// back to a final unity anyway\n+\trust_debug (\"coerce_borrowed_pointer -- unify\");\n \tTyTy::BaseType *result = receiver->unify (expected);\n \treturn CoercionResult{{}, result};\n       }\n@@ -183,7 +231,12 @@ TypeCoercionRules::coerce_borrowed_pointer (TyTy::BaseType *receiver,\n       return TypeCoercionRules::CoercionResult::get_error ();\n     }\n \n+  rust_debug (\"coerce_borrowed_pointer -- autoderef cycle\");\n   AutoderefCycle::cycle (receiver);\n+  rust_debug (\"coerce_borrowed_pointer -- result: [%s] with adjustments: [%zu]\",\n+\t      try_result.is_error () ? \"failed\" : \"matched\",\n+\t      try_result.adjustments.size ());\n+\n   return try_result;\n }\n \n@@ -310,7 +363,10 @@ TypeCoercionRules::coerce_unsized (TyTy::BaseType *source,\n bool\n TypeCoercionRules::select (const TyTy::BaseType &autoderefed)\n {\n-  if (autoderefed.can_eq (expected, false))\n+  rust_debug (\n+    \"autoderef type-coercion select autoderefed={%s} can_eq expected={%s}\",\n+    autoderefed.debug_str ().c_str (), expected->debug_str ().c_str ());\n+  if (expected->can_eq (&autoderefed, false))\n     {\n       try_result = CoercionResult{adjustments, autoderefed.clone ()};\n       return true;"}, {"sha": "78d36b18c18e9afac6fd45a93337f9a6b640ad8e", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -171,12 +171,21 @@ MethodResolver::select (const TyTy::BaseType &receiver)\n     TyTy::FnType *fntype;\n   };\n \n+  rust_debug (\"inherent_impl_fns found {%lu}, trait_fns found {%lu}, \"\n+\t      \"predicate_items found {%lu}\",\n+\t      (unsigned long) inherent_impl_fns.size (),\n+\t      (unsigned long) trait_fns.size (),\n+\t      (unsigned long) predicate_items.size ());\n+\n   for (auto impl_item : inherent_impl_fns)\n     {\n       TyTy::FnType *fn = impl_item.ty;\n       rust_assert (fn->is_method ());\n \n       TyTy::BaseType *fn_self = fn->get_self_type ();\n+      rust_debug (\"dot-operator impl_item fn_self={%s} can_eq receiver={%s}\",\n+\t\t  fn_self->debug_str ().c_str (),\n+\t\t  receiver.debug_str ().c_str ());\n       if (fn_self->can_eq (&receiver, false))\n \t{\n \t  PathProbeCandidate::ImplItemCandidate c{impl_item.item,\n@@ -195,6 +204,9 @@ MethodResolver::select (const TyTy::BaseType &receiver)\n       rust_assert (fn->is_method ());\n \n       TyTy::BaseType *fn_self = fn->get_self_type ();\n+      rust_debug (\"dot-operator trait_item fn_self={%s} can_eq receiver={%s}\",\n+\t\t  fn_self->debug_str ().c_str (),\n+\t\t  receiver.debug_str ().c_str ());\n       if (fn_self->can_eq (&receiver, false))\n \t{\n \t  PathProbeCandidate::TraitItemCandidate c{trait_item.reference,\n@@ -214,6 +226,9 @@ MethodResolver::select (const TyTy::BaseType &receiver)\n       rust_assert (fn->is_method ());\n \n       TyTy::BaseType *fn_self = fn->get_self_type ();\n+      rust_debug (\"dot-operator predicate fn_self={%s} can_eq receiver={%s}\",\n+\t\t  fn_self->debug_str ().c_str (),\n+\t\t  receiver.debug_str ().c_str ());\n       if (fn_self->can_eq (&receiver, false))\n \t{\n \t  const TraitReference *trait_ref"}, {"sha": "73575859def783f9c9a1fc3bc238208c69a2f7ad", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -324,10 +324,18 @@ TraitItemReference::resolve_item (HIR::TraitItemFunc &func)\n \n   auto block_expr_ty = TypeCheckExpr::Resolve (func.get_block_expr ().get ());\n \n-  context->pop_return_type ();\n+  Location fn_return_locus\n+    = func.get_decl ().has_return_type ()\n+\t? func.get_decl ().get_return_type ()->get_locus ()\n+\t: func.get_locus ();\n+\n+  TypeCheckBase::coercion_site (func.get_mappings ().get_hirid (),\n+\t\t\t\tTyTy::TyWithLocation (expected_ret_tyty,\n+\t\t\t\t\t\t      fn_return_locus),\n+\t\t\t\tTyTy::TyWithLocation (block_expr_ty),\n+\t\t\t\tfunc.get_locus ());\n \n-  if (block_expr_ty->get_kind () != TyTy::NEVER)\n-    expected_ret_tyty->unify (block_expr_ty);\n+  context->pop_return_type ();\n }\n \n void\n@@ -457,7 +465,10 @@ AssociatedImplTrait::setup_associated_types (\n   // the type correctly as our receiver may be generic and we are inferring its\n   // generic arguments and this Self might be the concrete version or vice\n   // versa.\n-  auto result = receiver->unify (impl_self_infer);\n+  auto result = TypeCheckBase::unify_site (\n+    get_impl_block ()->get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (receiver), TyTy::TyWithLocation (impl_self_infer),\n+    impl_predicate.get_locus ());\n   rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n \n   // unify the bounds arguments\n@@ -479,7 +490,10 @@ AssociatedImplTrait::setup_associated_types (\n       TyTy::BaseType *a = impl_trait_predicate_args.at (i);\n       TyTy::BaseType *b = hrtb_bound_arguments.at (i);\n \n-      result = a->unify (b);\n+      result\n+\t= TypeCheckBase::unify_site (a->get_ref (), TyTy::TyWithLocation (a),\n+\t\t\t\t     TyTy::TyWithLocation (b),\n+\t\t\t\t     impl_predicate.get_locus ());\n       rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n     }\n "}, {"sha": "cba7e594cba4e72f1d35506a3330a33e1d7811a5", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -336,6 +336,30 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n   return repr;\n }\n \n+TyTy::BaseType *\n+TypeCheckBase::unify_site (HirId id, TyTy::TyWithLocation lhs,\n+\t\t\t   TyTy::TyWithLocation rhs, Location unify_locus)\n+{\n+  TyTy::BaseType *expected = lhs.get_ty ();\n+  TyTy::BaseType *expr = rhs.get_ty ();\n+\n+  rust_debug (\"unify_site id={%u} expected={%s} expr={%s}\", id,\n+\t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n+\n+  TyTy::BaseType *unified = expected->unify (expr);\n+  if (unified->get_kind () == TyTy::TypeKind::ERROR)\n+    {\n+      RichLocation r (unify_locus);\n+      r.add_range (lhs.get_locus ());\n+      r.add_range (rhs.get_locus ());\n+      rust_error_at (r, \"expected %<%s%> got %<%s%>\",\n+\t\t     expected->get_name ().c_str (),\n+\t\t     expr->get_name ().c_str ());\n+    }\n+\n+  return unified;\n+}\n+\n TyTy::BaseType *\n TypeCheckBase::coercion_site (HirId id, TyTy::TyWithLocation lhs,\n \t\t\t      TyTy::TyWithLocation rhs, Location locus)\n@@ -363,7 +387,9 @@ TypeCheckBase::coercion_site (HirId id, TyTy::TyWithLocation lhs,\n \n   rust_debug (\"coerce_default_unify(a={%s}, b={%s})\",\n \t      receiver->debug_str ().c_str (), expected->debug_str ().c_str ());\n-  TyTy::BaseType *coerced = expected->unify (receiver);\n+  TyTy::BaseType *coerced\n+    = unify_site (id, lhs, TyTy::TyWithLocation (receiver, rhs.get_locus ()),\n+\t\t  locus);\n   context->insert_autoderef_mappings (id, std::move (result.adjustments));\n   return coerced;\n }\n@@ -393,7 +419,11 @@ TypeCheckBase::cast_site (HirId id, TyTy::TyWithLocation from,\n   rust_debug (\"cast_default_unify(a={%s}, b={%s})\",\n \t      casted_result->debug_str ().c_str (),\n \t      to.get_ty ()->debug_str ().c_str ());\n-  TyTy::BaseType *casted = to.get_ty ()->unify (casted_result);\n+\n+  TyTy::BaseType *casted\n+    = unify_site (id, to,\n+\t\t  TyTy::TyWithLocation (casted_result, from.get_locus ()),\n+\t\t  cast_locus);\n   context->insert_cast_autoderef_mappings (id, std::move (result.adjustments));\n   return casted;\n }\n@@ -411,6 +441,7 @@ TypeCheckBase::resolve_generic_params (\n \t  // FIXME: Skipping Lifetime completely until better\n \t  // handling.\n \t  break;\n+\n \t  case HIR::GenericParam::GenericKind::CONST: {\n \t    auto param\n \t      = static_cast<HIR::ConstGenericParam *> (generic_param.get ());\n@@ -422,7 +453,12 @@ TypeCheckBase::resolve_generic_params (\n \t\tauto expr_type = TypeCheckExpr::Resolve (\n \t\t  param->get_default_expression ().get ());\n \n-\t\tspecified_type->unify (expr_type);\n+\t\tcoercion_site (\n+\t\t  param->get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (specified_type),\n+\t\t  TyTy::TyWithLocation (\n+\t\t    expr_type, param->get_default_expression ()->get_locus ()),\n+\t\t  param->get_locus ());\n \t      }\n \n \t    context->insert_type (generic_param->get_mappings (),"}, {"sha": "ce6195e44e11a88e18c877831e07e79ad6a3a2a4", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -34,6 +34,10 @@ class TypeCheckBase\n public:\n   virtual ~TypeCheckBase () {}\n \n+  static TyTy::BaseType *unify_site (HirId id, TyTy::TyWithLocation lhs,\n+\t\t\t\t     TyTy::TyWithLocation rhs,\n+\t\t\t\t     Location unify_locus);\n+\n   static TyTy::BaseType *coercion_site (HirId id, TyTy::TyWithLocation lhs,\n \t\t\t\t\tTyTy::TyWithLocation rhs,\n \t\t\t\t\tLocation coercion_locus);"}, {"sha": "59b58a2f1095d128d7de9be6c8a36065526af94f", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -100,9 +100,9 @@ TypeCheckEnumItem::visit (HIR::EnumItemDiscriminant &item)\n     = new TyTy::ISizeType (discriminant->get_mappings ().get_hirid ());\n   context->insert_type (discriminant->get_mappings (), expected_ty);\n \n-  auto unified = expected_ty->unify (capacity_type);\n-  if (unified->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  unify_site (item.get_mappings ().get_hirid (),\n+\t      TyTy::TyWithLocation (expected_ty),\n+\t      TyTy::TyWithLocation (capacity_type), item.get_locus ());\n \n   const CanonicalPath *canonical_path = nullptr;\n   bool ok = mappings->lookup_canonical_path (item.get_mappings ().get_nodeid (),"}, {"sha": "57ed370571d81fd00cb15d032cb34800160da7b6", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 124, "deletions": 46, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -158,17 +158,17 @@ void\n TypeCheckExpr::visit (HIR::ReturnExpr &expr)\n {\n   auto fn_return_tyty = context->peek_return_type ();\n-  rust_assert (fn_return_tyty != nullptr);\n-\n+  Location expr_locus = expr.has_return_expr () ? expr.get_expr ()->get_locus ()\n+\t\t\t\t\t\t: expr.get_locus ();\n   TyTy::BaseType *expr_ty\n     = expr.has_return_expr ()\n \t? TypeCheckExpr::Resolve (expr.get_expr ())\n \t: TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n \n-  infered = fn_return_tyty->unify (expr_ty);\n-  fn_return_tyty->append_reference (expr_ty->get_ref ());\n-  for (auto &ref : infered->get_combined_refs ())\n-    fn_return_tyty->append_reference (ref);\n+  infered = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t\tTyTy::TyWithLocation (fn_return_tyty),\n+\t\t\tTyTy::TyWithLocation (expr_ty, expr_locus),\n+\t\t\texpr.get_locus ());\n \n   infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n }\n@@ -240,9 +240,12 @@ TypeCheckExpr::visit (HIR::CompoundAssignmentExpr &expr)\n \n   // we dont care about the result of the unify from a compound assignment\n   // since this is a unit-type expr\n-  auto result = lhs->unify (rhs);\n-  if (result->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  coercion_site (expr.get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (lhs,\n+\t\t\t\t       expr.get_left_expr ()->get_locus ()),\n+\t\t TyTy::TyWithLocation (rhs,\n+\t\t\t\t       expr.get_right_expr ()->get_locus ()),\n+\t\t expr.get_locus ());\n \n   auto lang_item_type\n     = Analysis::RustLangItem::CompoundAssignmentOperatorToLangItem (\n@@ -306,8 +309,13 @@ TypeCheckExpr::visit (HIR::ArithmeticOrLogicalExpr &expr)\n       }\n       break;\n \n-    default:\n-      infered = lhs->unify (rhs);\n+      default: {\n+\tinfered = unify_site (\n+\t  expr.get_mappings ().get_hirid (),\n+\t  TyTy::TyWithLocation (lhs, expr.get_lhs ()->get_locus ()),\n+\t  TyTy::TyWithLocation (rhs, expr.get_rhs ()->get_locus ()),\n+\t  expr.get_locus ());\n+      }\n       break;\n     }\n }\n@@ -318,9 +326,10 @@ TypeCheckExpr::visit (HIR::ComparisonExpr &expr)\n   auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n   auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n-  auto result = lhs->unify (rhs);\n-  if (result == nullptr || result->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  unify_site (expr.get_mappings ().get_hirid (),\n+\t      TyTy::TyWithLocation (lhs, expr.get_lhs ()->get_locus ()),\n+\t      TyTy::TyWithLocation (rhs, expr.get_rhs ()->get_locus ()),\n+\t      expr.get_locus ());\n \n   bool ok = context->lookup_builtin (\"bool\", &infered);\n   rust_assert (ok);\n@@ -333,17 +342,28 @@ TypeCheckExpr::visit (HIR::LazyBooleanExpr &expr)\n   auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n   // we expect the lhs and rhs must be bools at this point\n-  TyTy::BoolType elhs (expr.get_mappings ().get_hirid ());\n-  lhs = elhs.unify (lhs);\n-  if (lhs->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  TyTy::BaseType *boolean_node = nullptr;\n+  bool ok = context->lookup_builtin (\"bool\", &boolean_node);\n+  rust_assert (ok);\n \n-  TyTy::BoolType rlhs (expr.get_mappings ().get_hirid ());\n-  rhs = elhs.unify (rhs);\n-  if (lhs->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  // verify the lhs and rhs before unifying together\n+  lhs = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t    TyTy::TyWithLocation (boolean_node,\n+\t\t\t\t\t  expr.get_lhs ()->get_locus ()),\n+\t\t    TyTy::TyWithLocation (lhs, expr.get_lhs ()->get_locus ()),\n+\t\t    expr.get_locus ());\n \n-  infered = lhs->unify (rhs);\n+  rhs = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t    TyTy::TyWithLocation (boolean_node,\n+\t\t\t\t\t  expr.get_rhs ()->get_locus ()),\n+\t\t    TyTy::TyWithLocation (rhs, expr.get_rhs ()->get_locus ()),\n+\t\t    expr.get_locus ());\n+\n+  infered\n+    = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (lhs, expr.get_lhs ()->get_locus ()),\n+\t\t  TyTy::TyWithLocation (rhs, expr.get_rhs ()->get_locus ()),\n+\t\t  expr.get_locus ());\n }\n \n void\n@@ -428,7 +448,15 @@ TypeCheckExpr::visit (HIR::IfExprConseqElse &expr)\n   else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n     infered = if_blk_resolved;\n   else\n-    infered = if_blk_resolved->unify (else_blk_resolved);\n+    {\n+      infered = unify_site (\n+\texpr.get_mappings ().get_hirid (),\n+\tTyTy::TyWithLocation (if_blk_resolved,\n+\t\t\t      expr.get_if_block ()->get_locus ()),\n+\tTyTy::TyWithLocation (else_blk_resolved,\n+\t\t\t      expr.get_else_block ()->get_locus ()),\n+\texpr.get_locus ());\n+    }\n }\n \n void\n@@ -443,7 +471,15 @@ TypeCheckExpr::visit (HIR::IfExprConseqIf &expr)\n   else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n     infered = if_blk_resolved;\n   else\n-    infered = if_blk_resolved->unify (else_blk_resolved);\n+    {\n+      infered = unify_site (\n+\texpr.get_mappings ().get_hirid (),\n+\tTyTy::TyWithLocation (if_blk_resolved,\n+\t\t\t      expr.get_if_block ()->get_locus ()),\n+\tTyTy::TyWithLocation (else_blk_resolved,\n+\t\t\t      expr.get_conseq_if_expr ()->get_locus ()),\n+\texpr.get_locus ());\n+    }\n }\n \n void\n@@ -459,9 +495,10 @@ TypeCheckExpr::visit (HIR::IfLetExpr &expr)\n       TyTy::BaseType *kase_arm_ty\n \t= TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n \n-      TyTy::BaseType *checked_kase = scrutinee_tyty->unify (kase_arm_ty);\n-      if (checked_kase->get_kind () == TyTy::TypeKind::ERROR)\n-\treturn;\n+      unify_site (expr.get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (scrutinee_tyty),\n+\t\t  TyTy::TyWithLocation (kase_arm_ty, pattern->get_locus ()),\n+\t\t  expr.get_locus ());\n     }\n \n   TypeCheckExpr::Resolve (expr.get_if_block ());\n@@ -502,7 +539,10 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n \t{\n \t  auto unit\n \t    = TyTy::TupleType::get_unit_type (s->get_mappings ().get_hirid ());\n-\t  resolved = unit->unify (resolved);\n+\t  resolved\n+\t    = unify_site (s->get_mappings ().get_hirid (),\n+\t\t\t  TyTy::TyWithLocation (unit),\n+\t\t\t  TyTy::TyWithLocation (resolved), s->get_locus ());\n \t}\n     }\n \n@@ -512,7 +552,10 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     infered\n       = TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n   else\n-    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n+    {\n+      // FIXME this seems wrong\n+      infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n+    }\n }\n \n void\n@@ -552,7 +595,12 @@ TypeCheckExpr::visit (HIR::RangeFromToExpr &expr)\n   TyTy::BaseType *from_ty\n     = TypeCheckExpr::Resolve (expr.get_from_expr ().get ());\n   TyTy::BaseType *to_ty = TypeCheckExpr::Resolve (expr.get_to_expr ().get ());\n-  TyTy::BaseType *unified = from_ty->unify (to_ty);\n+\n+  TyTy::BaseType *unified = unify_site (\n+    expr.get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (from_ty, expr.get_from_expr ()->get_locus ()),\n+    TyTy::TyWithLocation (to_ty, expr.get_to_expr ()->get_locus ()),\n+    expr.get_locus ());\n \n   // substitute it in\n   std::vector<TyTy::SubstitutionArg> subst_mappings;\n@@ -722,7 +770,11 @@ TypeCheckExpr::visit (HIR::RangeFromToInclExpr &expr)\n   TyTy::BaseType *from_ty\n     = TypeCheckExpr::Resolve (expr.get_from_expr ().get ());\n   TyTy::BaseType *to_ty = TypeCheckExpr::Resolve (expr.get_to_expr ().get ());\n-  TyTy::BaseType *unified = from_ty->unify (to_ty);\n+  TyTy::BaseType *unified = unify_site (\n+    expr.get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (from_ty, expr.get_from_expr ()->get_locus ()),\n+    TyTy::TyWithLocation (to_ty, expr.get_to_expr ()->get_locus ()),\n+    expr.get_locus ());\n \n   // substitute it in\n   std::vector<TyTy::SubstitutionArg> subst_mappings;\n@@ -763,9 +815,11 @@ TypeCheckExpr::visit (HIR::ArrayIndexExpr &expr)\n   if (maybe_simple_array_access\n       && direct_array_expr_ty->get_kind () == TyTy::TypeKind::ARRAY)\n     {\n-      auto resolved_index_expr = size_ty->unify (index_expr_ty);\n-      if (resolved_index_expr->get_kind () == TyTy::TypeKind::ERROR)\n-\treturn;\n+      unify_site (expr.get_index_expr ()->get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (size_ty),\n+\t\t  TyTy::TyWithLocation (index_expr_ty,\n+\t\t\t\t\texpr.get_index_expr ()->get_locus ()),\n+\t\t  expr.get_locus ());\n \n       TyTy::ArrayType *array_type\n \t= static_cast<TyTy::ArrayType *> (direct_array_expr_ty);\n@@ -821,9 +875,11 @@ TypeCheckExpr::visit (HIR::ArrayExpr &expr)\n \tcontext->insert_type (elems.get_num_copies_expr ()->get_mappings (),\n \t\t\t      expected_ty);\n \n-\tauto unified = expected_ty->unify (capacity_type);\n-\tif (unified->get_kind () == TyTy::TypeKind::ERROR)\n-\t  return;\n+\tunify_site (\n+\t  expr.get_mappings ().get_hirid (), TyTy::TyWithLocation (expected_ty),\n+\t  TyTy::TyWithLocation (capacity_type,\n+\t\t\t\telems.get_num_copies_expr ()->get_locus ()),\n+\t  expr.get_locus ());\n \n \tcapacity_expr = elems.get_num_copies_expr ();\n       }\n@@ -839,11 +895,16 @@ TypeCheckExpr::visit (HIR::ArrayExpr &expr)\n \t    types.push_back (TypeCheckExpr::Resolve (elem.get ()));\n \t  }\n \n+\t// this is a LUB\n \telement_type\n \t  = TyTy::TyVar::get_implicit_infer_var (expr.get_locus ()).get_tyty ();\n \tfor (auto &type : types)\n \t  {\n-\t    element_type = element_type->unify (type);\n+\t    element_type\n+\t      = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t\t    TyTy::TyWithLocation (element_type),\n+\t\t\t    TyTy::TyWithLocation (type, type->get_locus ()),\n+\t\t\t    expr.get_locus ());\n \t  }\n \n \tauto crate_num = mappings->get_current_crate ();\n@@ -1165,7 +1226,12 @@ TypeCheckExpr::visit (HIR::BreakExpr &expr)\n \t  return;\n \t}\n \n-      TyTy::BaseType *unified_ty = loop_context->unify (break_expr_tyty);\n+      TyTy::BaseType *unified_ty\n+\t= unify_site (expr.get_mappings ().get_hirid (),\n+\t\t      TyTy::TyWithLocation (loop_context),\n+\t\t      TyTy::TyWithLocation (break_expr_tyty,\n+\t\t\t\t\t    expr.get_expr ()->get_locus ()),\n+\t\t      expr.get_locus ());\n       context->swap_head_loop_context (unified_ty);\n     }\n \n@@ -1290,7 +1356,12 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n \t  TyTy::BaseType *kase_arm_ty\n \t    = TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n \n-\t  TyTy::BaseType *checked_kase = scrutinee_tyty->unify (kase_arm_ty);\n+\t  TyTy::BaseType *checked_kase = unify_site (\n+\t    expr.get_mappings ().get_hirid (),\n+\t    TyTy::TyWithLocation (scrutinee_tyty,\n+\t\t\t\t  expr.get_scrutinee_expr ()->get_locus ()),\n+\t    TyTy::TyWithLocation (kase_arm_ty, pattern->get_locus ()),\n+\t    expr.get_locus ());\n \t  if (checked_kase->get_kind () == TyTy::TypeKind::ERROR)\n \t    return;\n \t}\n@@ -1308,13 +1379,14 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n       return;\n     }\n \n+  // this is a LUB\n   infered = kase_block_tys.at (0);\n   for (size_t i = 1; i < kase_block_tys.size (); i++)\n     {\n       TyTy::BaseType *kase_ty = kase_block_tys.at (i);\n-      infered = infered->unify (kase_ty);\n-      if (infered->get_kind () == TyTy::TypeKind::ERROR)\n-\treturn;\n+      infered = unify_site (expr.get_mappings ().get_hirid (),\n+\t\t\t    TyTy::TyWithLocation (infered),\n+\t\t\t    TyTy::TyWithLocation (kase_ty), expr.get_locus ());\n     }\n }\n \n@@ -1470,7 +1542,11 @@ TypeCheckExpr::resolve_operator_overload (\n   TyTy::FnType *type = static_cast<TyTy::FnType *> (lookup);\n   rust_assert (type->num_params () > 0);\n   auto fnparam = type->param_at (0);\n-  fnparam.second->unify (adjusted_self); // typecheck the self\n+\n+  // typecheck the self\n+  unify_site (expr.get_mappings ().get_hirid (),\n+\t      TyTy::TyWithLocation (fnparam.second),\n+\t      TyTy::TyWithLocation (adjusted_self), expr.get_locus ());\n   if (rhs == nullptr)\n     {\n       rust_assert (type->num_params () == 1);\n@@ -1479,7 +1555,9 @@ TypeCheckExpr::resolve_operator_overload (\n     {\n       rust_assert (type->num_params () == 2);\n       auto fnparam = type->param_at (1);\n-      fnparam.second->unify (rhs); // typecheck the rhs\n+      unify_site (expr.get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (fnparam.second),\n+\t\t  TyTy::TyWithLocation (rhs), expr.get_locus ());\n     }\n \n   rust_assert (lookup->get_kind () == TyTy::TypeKind::FNDEF);"}, {"sha": "81dd3677609e67ca8737977ff4082d4c1537d2f7", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -179,7 +179,12 @@ TypeCheckTopLevelImplItem::visit (HIR::ConstantItem &constant)\n   TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n   TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n \n-  context->insert_type (constant.get_mappings (), type->unify (expr_type));\n+  TyTy::BaseType *unified = unify_site (\n+    constant.get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (type, constant.get_type ()->get_locus ()),\n+    TyTy::TyWithLocation (expr_type, constant.get_expr ()->get_locus ()),\n+    constant.get_locus ());\n+  context->insert_type (constant.get_mappings (), unified);\n }\n \n void\n@@ -365,8 +370,16 @@ TypeCheckImplItem::visit (HIR::Function &function)\n   auto block_expr_ty\n     = TypeCheckExpr::Resolve (function.get_definition ().get ());\n \n+  Location fn_return_locus = function.has_function_return_type ()\n+\t\t\t       ? function.get_return_type ()->get_locus ()\n+\t\t\t       : function.get_locus ();\n+\n+  coercion_site (function.get_definition ()->get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (expected_ret_tyty, fn_return_locus),\n+\t\t TyTy::TyWithLocation (block_expr_ty),\n+\t\t function.get_definition ()->get_locus ());\n+\n   context->pop_return_type ();\n-  expected_ret_tyty->unify (block_expr_ty);\n }\n \n void"}, {"sha": "fc2c0f27a74b9111c368f64d9f2ebf2ea1dc13f5", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -214,10 +214,15 @@ TypeCheckItem::visit (HIR::Function &function)\n   auto block_expr_ty\n     = TypeCheckExpr::Resolve (function.get_definition ().get ());\n \n-  context->pop_return_type ();\n+  Location fn_return_locus = function.has_function_return_type ()\n+\t\t\t       ? function.get_return_type ()->get_locus ()\n+\t\t\t       : function.get_locus ();\n+  coercion_site (function.get_definition ()->get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (expected_ret_tyty, fn_return_locus),\n+\t\t TyTy::TyWithLocation (block_expr_ty),\n+\t\t function.get_definition ()->get_locus ());\n \n-  if (block_expr_ty->get_kind () != TyTy::NEVER)\n-    expected_ret_tyty->unify (block_expr_ty);\n+  context->pop_return_type ();\n }\n \n void"}, {"sha": "dba3056211558f261e7ca81bf4cdfc6ae9cdc58f", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -390,7 +390,10 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t    impl_block_ty\n \t      = SubstMapper::InferSubst (impl_block_ty, seg.get_locus ());\n \n-\t  prev_segment = prev_segment->unify (impl_block_ty);\n+\t  prev_segment = unify_site (seg.get_mappings ().get_hirid (),\n+\t\t\t\t     TyTy::TyWithLocation (prev_segment),\n+\t\t\t\t     TyTy::TyWithLocation (impl_block_ty),\n+\t\t\t\t     seg.get_locus ());\n \t}\n \n       if (tyseg->needs_generic_substitutions ())"}, {"sha": "a6423bef7b8dd3294156985cc5d38749733ffb8b", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -375,7 +375,9 @@ TypeCheckPattern::visit (HIR::RangePattern &pattern)\n       break;\n     }\n \n-  infered = upper->unify (lower);\n+  infered = unify_site (pattern.get_pattern_mappings ().get_hirid (),\n+\t\t\tTyTy::TyWithLocation (upper),\n+\t\t\tTyTy::TyWithLocation (lower), pattern.get_locus ());\n }\n \n void"}, {"sha": "48db1fd61cfbbf16b839acc452a8577c059a7274", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -68,7 +68,11 @@ TypeCheckStmt::visit (HIR::ConstantItem &constant)\n   TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n   TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n \n-  infered = type->unify (expr_type);\n+  infered = unify_site (\n+    constant.get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (type, constant.get_type ()->get_locus ()),\n+    TyTy::TyWithLocation (expr_type, constant.get_expr ()->get_locus ()),\n+    constant.get_locus ());\n   context->insert_type (constant.get_mappings (), infered);\n }\n \n@@ -498,8 +502,13 @@ TypeCheckStmt::visit (HIR::Function &function)\n \n   context->pop_return_type ();\n \n-  if (block_expr_ty->get_kind () != TyTy::NEVER)\n-    expected_ret_tyty->unify (block_expr_ty);\n+  Location fn_return_locus = function.has_function_return_type ()\n+\t\t\t       ? function.get_return_type ()->get_locus ()\n+\t\t\t       : function.get_locus ();\n+  coercion_site (function.get_definition ()->get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (expected_ret_tyty, fn_return_locus),\n+\t\t TyTy::TyWithLocation (block_expr_ty),\n+\t\t function.get_definition ()->get_locus ());\n \n   infered = fnType;\n }"}, {"sha": "623b16d5e9102db203f34ef9efed00ba56fb7dc8", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -57,14 +57,20 @@ TypeCheckStructExpr::resolve (HIR::StructExprStructFields &struct_expr)\n     {\n       TyTy::BaseType *base_resolved\n \t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get ());\n-      struct_def = static_cast<TyTy::ADTType *> (\n-\tstruct_path_resolved->unify (base_resolved));\n-      if (struct_def == nullptr)\n+      TyTy::BaseType *base_unify = unify_site (\n+\tstruct_expr.struct_base->base_struct->get_mappings ().get_hirid (),\n+\tTyTy::TyWithLocation (struct_path_resolved),\n+\tTyTy::TyWithLocation (base_resolved),\n+\tstruct_expr.struct_base->base_struct->get_locus ());\n+\n+      if (base_unify->get_kind () != struct_path_ty->get_kind ())\n \t{\n \t  rust_fatal_error (struct_expr.struct_base->base_struct->get_locus (),\n \t\t\t    \"incompatible types for base struct reference\");\n \t  return;\n \t}\n+\n+      struct_def = static_cast<TyTy::ADTType *> (base_unify);\n     }\n \n   // figure out the variant"}, {"sha": "c4688dbdf7f46a81ac3150888b006dd513219f33", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -260,7 +260,13 @@ TypeCheckTopLevel::visit (HIR::StaticItem &var)\n   TyTy::BaseType *type = TypeCheckType::Resolve (var.get_type ());\n   TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (var.get_expr ());\n \n-  context->insert_type (var.get_mappings (), type->unify (expr_type));\n+  TyTy::BaseType *unified\n+    = unify_site (var.get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (type, var.get_type ()->get_locus ()),\n+\t\t  TyTy::TyWithLocation (expr_type,\n+\t\t\t\t\tvar.get_expr ()->get_locus ()),\n+\t\t  var.get_locus ());\n+  context->insert_type (var.get_mappings (), unified);\n }\n \n void\n@@ -269,7 +275,12 @@ TypeCheckTopLevel::visit (HIR::ConstantItem &constant)\n   TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n   TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n \n-  context->insert_type (constant.get_mappings (), type->unify (expr_type));\n+  TyTy::BaseType *unified = unify_site (\n+    constant.get_mappings ().get_hirid (),\n+    TyTy::TyWithLocation (type, constant.get_type ()->get_locus ()),\n+    TyTy::TyWithLocation (expr_type, constant.get_expr ()->get_locus ()),\n+    constant.get_locus ());\n+  context->insert_type (constant.get_mappings (), unified);\n }\n \n void"}, {"sha": "37bcd47b105bd5a3bd7cfc8f606eae46582c7e9c", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -623,9 +623,11 @@ TypeCheckType::visit (HIR::ArrayType &type)\n   rust_assert (ok);\n   context->insert_type (type.get_size_expr ()->get_mappings (), expected_ty);\n \n-  auto unified = expected_ty->unify (capacity_type);\n-  if (unified->get_kind () == TyTy::TypeKind::ERROR)\n-    return;\n+  unify_site (type.get_size_expr ()->get_mappings ().get_hirid (),\n+\t      TyTy::TyWithLocation (expected_ty),\n+\t      TyTy::TyWithLocation (capacity_type,\n+\t\t\t\t    type.get_size_expr ()->get_locus ()),\n+\t      type.get_size_expr ()->get_locus ());\n \n   TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n   translated = new TyTy::ArrayType (type.get_mappings ().get_hirid (),"}, {"sha": "2fe09c1fc7f1612d6d9c64cc86a9212e0df1d03d", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -70,7 +70,12 @@ TypeResolution::Resolve (HIR::Crate &crate)\n       }\n     else\n       {\n-\tauto result = ty->unify (default_type);\n+\tauto result\n+\t  = TypeCheckBase::unify_site (id, TyTy::TyWithLocation (ty),\n+\t\t\t\t       TyTy::TyWithLocation (default_type),\n+\t\t\t\t       Location ());\n+\trust_assert (result);\n+\trust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n \tresult->set_ref (id);\n \tcontext->insert_type (\n \t  Analysis::NodeMapping (mappings->get_current_crate (), 0, id,\n@@ -144,7 +149,10 @@ TraitItemReference::get_type_from_constant (\n       TyTy::BaseType *expr\n \t= TypeCheckExpr::Resolve (constant.get_expr ().get ());\n \n-      return type->unify (expr);\n+      return TypeCheckBase::unify_site (constant.get_mappings ().get_hirid (),\n+\t\t\t\t\tTyTy::TyWithLocation (type),\n+\t\t\t\t\tTyTy::TyWithLocation (expr),\n+\t\t\t\t\tconstant.get_locus ());\n     }\n   return type;\n }"}, {"sha": "2d9051fb907a81efb19db51323a1c55174721971", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -129,6 +129,7 @@ TypeCheckContext::lookup_type_by_node_id (NodeId ref, HirId *id)\n TyTy::BaseType *\n TypeCheckContext::peek_return_type ()\n {\n+  rust_assert (!return_type_stack.empty ());\n   return return_type_stack.back ().second;\n }\n "}, {"sha": "49aa2ef406e08593260c3237cfe6c0bea6faeffc", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -219,7 +219,10 @@ TypeCheckCallExpr::visit (FnPtr &type)\n void\n TypeCheckMethodCallExpr::visit (FnType &type)\n {\n-  type.get_self_type ()->unify (adjusted_self);\n+  Resolver::TypeCheckBase::unify_site (\n+    call.get_mappings ().get_hirid (), TyWithLocation (type.get_self_type ()),\n+    TyWithLocation (adjusted_self, call.get_receiver ()->get_locus ()),\n+    call.get_locus ());\n \n   // +1 for the receiver self\n   size_t num_args_to_call = call.num_params () + 1;"}, {"sha": "f99a90e11b747b2651fc75983ab6f09d7d825155", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -1243,8 +1243,8 @@ class ReferenceCmp : public BaseCmp\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    bool mutability_match = base->is_mutable () == type.is_mutable ();\n-    if (!mutability_match)\n+    bool mutability_ok = base->is_mutable () ? type.is_mutable () : true;\n+    if (!mutability_ok)\n       {\n \tBaseCmp::visit (type);\n \treturn;"}, {"sha": "40e7c44d92a481f60daf3477a99e0633545fb25b", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 24, "deletions": 240, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -123,269 +123,53 @@ class BaseRules : public TyVisitor\n     return resolved;\n   }\n \n-  virtual void visit (TupleType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (TupleType &type) override {}\n \n-  virtual void visit (ADTType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ADTType &type) override {}\n \n-  virtual void visit (InferType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (InferType &type) override {}\n \n-  virtual void visit (FnType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (FnType &type) override {}\n \n-  virtual void visit (FnPtr &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (FnPtr &type) override {}\n \n-  virtual void visit (ArrayType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ArrayType &type) override {}\n \n-  virtual void visit (SliceType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (SliceType &type) override {}\n \n-  virtual void visit (BoolType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (BoolType &type) override {}\n \n-  virtual void visit (IntType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (IntType &type) override {}\n \n-  virtual void visit (UintType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (UintType &type) override {}\n \n-  virtual void visit (USizeType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (USizeType &type) override {}\n \n-  virtual void visit (ISizeType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ISizeType &type) override {}\n \n-  virtual void visit (FloatType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (FloatType &type) override {}\n \n-  virtual void visit (ErrorType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ErrorType &type) override {}\n \n-  virtual void visit (CharType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (CharType &type) override {}\n \n-  virtual void visit (ReferenceType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ReferenceType &type) override {}\n \n-  virtual void visit (PointerType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (PointerType &type) override {}\n \n-  virtual void visit (ParamType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ParamType &type) override {}\n \n-  virtual void visit (StrType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (StrType &type) override {}\n \n-  virtual void visit (NeverType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (NeverType &type) override {}\n \n-  virtual void visit (PlaceholderType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (PlaceholderType &type) override {}\n \n-  virtual void visit (ProjectionType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ProjectionType &type) override {}\n \n-  virtual void visit (DynamicObjectType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (DynamicObjectType &type) override {}\n \n-  virtual void visit (ClosureType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n-    RichLocation r (ref_locus);\n-    r.add_range (base_locus);\n-    rust_error_at (r, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n+  virtual void visit (ClosureType &type) override {}\n \n protected:\n   BaseRules (BaseType *base)"}, {"sha": "7cb425458d6653600295bbbcea392eb8752ebbc2", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -296,6 +296,33 @@ BaseType::destructure () const\n   return x;\n }\n \n+std::string\n+BaseType::mappings_str () const\n+{\n+  std::string buffer = \"Ref: \" + std::to_string (get_ref ())\n+\t\t       + \" TyRef: \" + std::to_string (get_ty_ref ());\n+  buffer += \"[\";\n+  for (auto &ref : combined)\n+    buffer += std::to_string (ref) + \",\";\n+  buffer += \"]\";\n+  return \"(\" + buffer + \")\";\n+}\n+\n+std::string\n+BaseType::debug_str () const\n+{\n+  // return TypeKindFormat::to_string (get_kind ()) + \":\" + as_string () + \":\"\n+  //        + mappings_str () + \":\" + bounds_as_string ();\n+  return get_name ();\n+}\n+\n+void\n+BaseType::debug () const\n+{\n+  rust_debug (\"[%p] %s\", static_cast<const void *> (this),\n+\t      debug_str ().c_str ());\n+}\n+\n TyVar::TyVar (HirId ref) : ref (ref)\n {\n   // ensure this reference is defined within the context\n@@ -1159,11 +1186,29 @@ TupleType::accept_vis (TyConstVisitor &vis) const\n std::string\n TupleType::as_string () const\n {\n+  size_t i = 0;\n+  std::string fields_buffer;\n+  for (const TyVar &field : get_fields ())\n+    {\n+      fields_buffer += field.get_tyty ()->as_string ();\n+      bool has_next = (i + 1) < get_fields ().size ();\n+      fields_buffer += has_next ? \", \" : \"\";\n+      i++;\n+    }\n+  return \"(\" + fields_buffer + \")\";\n+}\n+\n+std::string\n+TupleType::get_name () const\n+{\n+  size_t i = 0;\n   std::string fields_buffer;\n   for (const TyVar &field : get_fields ())\n     {\n       fields_buffer += field.get_tyty ()->as_string ();\n-      fields_buffer += \", \";\n+      bool has_next = (i + 1) < get_fields ().size ();\n+      fields_buffer += has_next ? \", \" : \"\";\n+      i++;\n     }\n   return \"(\" + fields_buffer + \")\";\n }\n@@ -2194,6 +2239,13 @@ ReferenceType::as_string () const\n \t + get_base ()->as_string ();\n }\n \n+std::string\n+ReferenceType::get_name () const\n+{\n+  return std::string (\"&\") + (is_mutable () ? \"mut\" : \"\") + \" \"\n+\t + get_base ()->get_name ();\n+}\n+\n BaseType *\n ReferenceType::unify (BaseType *other)\n {\n@@ -2277,6 +2329,13 @@ PointerType::as_string () const\n \t + get_base ()->as_string ();\n }\n \n+std::string\n+PointerType::get_name () const\n+{\n+  return std::string (\"* \") + (is_mutable () ? \"mut\" : \"const\") + \" \"\n+\t + get_base ()->get_name ();\n+}\n+\n BaseType *\n PointerType::unify (BaseType *other)\n {"}, {"sha": "a351932e4326115b3faab0c8203d0f0515cd0323", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -230,28 +230,11 @@ class BaseType : public TypeBoundsMappings\n \n   bool contains_type_parameters () const { return !is_concrete (); }\n \n-  std::string mappings_str () const\n-  {\n-    std::string buffer = \"Ref: \" + std::to_string (get_ref ())\n-\t\t\t + \" TyRef: \" + std::to_string (get_ty_ref ());\n-    buffer += \"[\";\n-    for (auto &ref : combined)\n-      buffer += std::to_string (ref) + \",\";\n-    buffer += \"]\";\n-    return \"(\" + buffer + \")\";\n-  }\n+  std::string mappings_str () const;\n \n-  std::string debug_str () const\n-  {\n-    return TypeKindFormat::to_string (get_kind ()) + \":\" + as_string () + \":\"\n-\t   + mappings_str () + \":\" + bounds_as_string ();\n-  }\n+  std::string debug_str () const;\n \n-  void debug () const\n-  {\n-    rust_debug (\"[%p] %s\", static_cast<const void *> (this),\n-\t\tdebug_str ().c_str ());\n-  }\n+  void debug () const;\n \n   // FIXME this will eventually go away\n   const BaseType *get_root () const;\n@@ -560,7 +543,7 @@ class TupleType : public BaseType\n \n   const std::vector<TyVar> &get_fields () const { return fields; }\n \n-  std::string get_name () const override final { return as_string (); }\n+  std::string get_name () const override final;\n \n   TupleType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n@@ -2164,10 +2147,7 @@ class ReferenceType : public BaseType\n \n   std::string as_string () const override;\n \n-  std::string get_name () const override final\n-  {\n-    return \"&\" + get_base ()->get_name ();\n-  }\n+  std::string get_name () const override final;\n \n   BaseType *unify (BaseType *other) override;\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n@@ -2249,11 +2229,7 @@ class PointerType : public BaseType\n   void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n-\n-  std::string get_name () const override final\n-  {\n-    return \"*\" + get_base ()->get_name ();\n-  }\n+  std::string get_name () const override final;\n \n   BaseType *unify (BaseType *other) override;\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;"}, {"sha": "15697057ec627488a70c2f520475f2823b62b66a", "filename": "gcc/testsuite/rust/compile/issue-1152.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -1,8 +1,6 @@\n fn test() {\n     let f = [0; -4_isize];\n     // { dg-error \"expected .usize. got .isize.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n     let f = [0_usize; -1_isize];\n     // { dg-error \"expected .usize. got .isize.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "0e381dc6ca492c39b55ef55820b137eb69344096", "filename": "gcc/testsuite/rust/compile/tuple1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple1.rs?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let a: (i32, bool) = (123, 123); // { dg-error \"expected .bool. got .<integer>.\" }\n+    let a: (i32, bool) = (123, 123); // { dg-error \"expected\" }\n     let b;\n     b = (456, 5f32);\n }"}, {"sha": "7d038cac4698dde7af66d2451e9d342ff2169860", "filename": "gcc/testsuite/rust/compile/type-alias1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-alias1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-alias1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-alias1.rs?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -2,5 +2,5 @@ type TypeAlias = (i32, u32);\n \n fn main() {\n     let a: TypeAlias;\n-    a = (123, 456f32); // { dg-error \"expected .u32. got .f32.\" }\n+    a = (123, 456f32); // { dg-error \"expected\" }\n }"}, {"sha": "fbb96a60d3630f27904454a31aaaea6ddf2bdc6f", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-output \"mut_deref\\n123\\n\" } */\n+/* { dg-output \"imm_deref\\n123\\n\" } */\n extern \"C\" {\n     fn printf(s: *const i8, ...);\n }"}, {"sha": "206082af6246fc759c7d063e9feb71939e103761", "filename": "gcc/testsuite/rust/execute/torture/slice1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs?ref=5a0c27cb799ec7fa864dbdc64905f6d80a15e9b5", "patch": "@@ -12,9 +12,10 @@ union Repr<T> {\n \n const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n     unsafe {\n-        let a = FatPtr { data, len };\n-        let b = Repr { raw: a };\n-        b.rust\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n     }\n }\n "}]}