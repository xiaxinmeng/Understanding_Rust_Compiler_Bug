{"sha": "b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkZDlmMzUzNWIzMGZiNWVjNjY0ZjE2YWE1MjdiZmZkZGY1OGM2Yw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-05-30T21:05:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-05-30T21:05:20Z"}, "message": "re PR tree-optimization/14819 ([tree-ssa] strchr is not folded at tree-level)\n\n\tPR tree-optimization/14819\n\t* builtins.c (fold_builtin_strchr): New.\n\t(fold_builtin_1): Handle BUILT_IN_STRCHR and BUILT_IN_STRRCHR\n\twith fold_builtin_strchr().\n\nFrom-SVN: r82464", "tree": {"sha": "b84404b76d9b1fd31876be3c25bee7382aa54383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84404b76d9b1fd31876be3c25bee7382aa54383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c/comments", "author": null, "committer": null, "parents": [{"sha": "9cf737f89ffe0c75614ad388440b7b7706b6316b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf737f89ffe0c75614ad388440b7b7706b6316b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf737f89ffe0c75614ad388440b7b7706b6316b"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "6fd198e4472fb1d8c3e7eb174b8a2bb877ca650b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "patch": "@@ -1,3 +1,10 @@\n+2004-05-30  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/14819\n+\t* builtins.c (fold_builtin_strchr): New.\n+\t(fold_builtin_1): Handle BUILT_IN_STRCHR and BUILT_IN_STRRCHR\n+\twith fold_builtin_strchr().\n+\n 2004-05-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* bb-reorder.c, builtins.c, c-common.c, c-gimplify.c,"}, {"sha": "4bac9999703aa39c0b962a7013d9fc3b104fc6c6", "filename": "gcc/builtins.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dd9f3535b30fb5ec664f16aa527bffddf58c6c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b3dd9f3535b30fb5ec664f16aa527bffddf58c6c", "patch": "@@ -7085,6 +7085,47 @@ fold_builtin_strncpy (tree exp)\n   return 0;\n }\n \n+/* Fold function call to builtin strchr and strrchr.\n+   Return NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_strchr (tree exp, bool actually_strrchr)\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n+      const char *p1;\n+\n+      if (TREE_CODE (s2) != INTEGER_CST)\n+\treturn 0;\n+\n+      p1 = c_getstr (s1);\n+      if (p1 != NULL)\n+\t{\n+\t  char c;\n+\t  const char *r;\n+\n+\t  if (target_char_cast (s2, &c))\n+\t    return 0;\n+\n+\t  r = actually_strrchr ? strrchr (p1, c) : strchr (p1, c);\n+\n+\t  if (r == NULL)\n+\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\n+\t  /* Return an offset into the constant string argument.  */\n+\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t ssize_int (r - p1))));\n+\t}\n+\n+      return 0;\n+    }\n+}\n+\n /* Fold function call to builtin memcmp.  Return\n    NULL_TREE if no simplification can be made.  */\n \n@@ -7796,6 +7837,12 @@ fold_builtin_1 (tree exp)\n     case BUILT_IN_STRNCPY:\n       return fold_builtin_strncpy (exp);\n \n+    case BUILT_IN_STRCHR:\n+      return fold_builtin_strchr (exp, false);\n+\n+    case BUILT_IN_STRRCHR:\n+      return fold_builtin_strchr (exp, true);\n+\n     case BUILT_IN_MEMCMP:\n       return fold_builtin_memcmp (exp);\n "}]}