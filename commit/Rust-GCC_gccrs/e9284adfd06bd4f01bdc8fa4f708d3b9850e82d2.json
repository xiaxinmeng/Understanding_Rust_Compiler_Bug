{"sha": "e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyODRhZGZkMDZiZDRmMDFiZGM4ZmE0ZjcwOGQzYjk4NTBlODJkMg==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-11-19T07:10:54Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-11-19T07:10:54Z"}, "message": "avr-protos.h (avr_output_addr_vec_elt): Prototype.\n\n\t* config/avr/avr-protos.h (avr_output_addr_vec_elt): Prototype.\n\t* config/avr/avr.c (jump_tables_size): New variable.\n\t(function_prologue): Initialize it as 0.\n\t(function_epilogue): Add it to function_size.\n\t(avr_output_addr_vec_elt): New function.  Count words in jump\n\ttables in jump_tables_size.  Move code ...\n\t* config/avr/avr.h (ASM_OUTPUT_ADDR_VEC_ELT): ... from here.\n\tCall avr_output_addr_vec_elt instead.\n\t* config/avr/avr.md (tablejump): Remove disabled define_expand.\n\nFrom-SVN: r37557", "tree": {"sha": "f0d45bdca223defbcb01607e87f2e113e0766c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d45bdca223defbcb01607e87f2e113e0766c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/comments", "author": null, "committer": null, "parents": [{"sha": "67c72a630824f2bb6a51298d09b6f11873edcbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c72a630824f2bb6a51298d09b6f11873edcbeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c72a630824f2bb6a51298d09b6f11873edcbeb"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "59c5f77e761c8d06de78cf6182249c4a9a90fc90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "patch": "@@ -1,3 +1,15 @@\n+2000-11-18  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr-protos.h (avr_output_addr_vec_elt): Prototype.\n+\t* config/avr/avr.c (jump_tables_size): New variable.\n+\t(function_prologue): Initialize it as 0.\n+\t(function_epilogue): Add it to function_size.\n+\t(avr_output_addr_vec_elt): New function.  Count words in jump\n+\ttables in jump_tables_size.  Move code ...\n+\t* config/avr/avr.h (ASM_OUTPUT_ADDR_VEC_ELT): ... from here.\n+\tCall avr_output_addr_vec_elt instead.\n+\t* config/avr/avr.md (tablejump): Remove disabled define_expand.\n+\n 2000-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* configure.in: Make --enable-new-gxx-abi the default."}, {"sha": "4fa887a5fd46f4c0699eba79b078c0b93cba0a9b", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "patch": "@@ -110,6 +110,7 @@ extern const char * lshrhi3_out PARAMS ((rtx insn, rtx operands[], int *len));\n extern const char * lshrsi3_out PARAMS ((rtx insn, rtx operands[], int *len));\n \n extern void avr_output_bld PARAMS ((rtx operands[], int bit_nr));\n+extern void avr_output_addr_vec_elt PARAMS ((FILE *stream, int value));\n \n extern enum reg_class preferred_reload_class PARAMS ((rtx x,\n \t\t\t\t\t\t     enum reg_class class));"}, {"sha": "9427de765197ff08a86d5cd97e9fd1a684111514", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "patch": "@@ -88,6 +88,9 @@ static int commands_in_epilogues;\n static int prologue_size;\n static int epilogue_size;\n \n+/* Size of all jump tables in the current function, in words.  */\n+static int jump_tables_size;\n+\n /* Initial stack value specified by the `-minit-stack=' option */\n const char *avr_init_stack = \"__stack\";\n \n@@ -549,6 +552,7 @@ function_prologue (file, size)\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n \n   last_insn_address = 0;\n+  jump_tables_size = 0;\n   prologue_size = 0;\n   fprintf (file, \"/* prologue: frame size=%d */\\n\", size);\n   \n@@ -683,6 +687,7 @@ function_epilogue (file, size)\n   main_p = MAIN_NAME_P (DECL_NAME (current_function_decl));\n   function_size = (INSN_ADDRESSES (INSN_UID (get_last_insn ()))\n \t\t   - INSN_ADDRESSES (INSN_UID (get_insns ())));\n+  function_size += jump_tables_size;\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n@@ -5296,3 +5301,16 @@ avr_output_bld (operands, bit_nr)\n   output_asm_insn (s, operands);\n }\n \n+void\n+avr_output_addr_vec_elt (stream, value)\n+     FILE *stream;\n+     int value;\n+{\n+  if (AVR_MEGA)\n+    fprintf (stream, \"\\t.word pm(.L%d)\\n\", value);\n+  else\n+    fprintf (stream, \"\\trjmp .L%d\\n\", value);\n+\n+  jump_tables_size++;\n+}\n+"}, {"sha": "897dffee26757f818cca0da252f84b87b440a541", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "patch": "@@ -2713,12 +2713,7 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n    not be optimal, since this macro is used only when profiling.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (AVR_MEGA)\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.word pm(.L%d)\\n\", VALUE);\t\\\n-  else\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\trjmp .L%d\\n\", VALUE);\t\t\\\n-} while (0)\n+  avr_output_addr_vec_elt(STREAM, VALUE)\n /* This macro should be provided on machines where the addresses in a\n    dispatch table are absolute.\n "}, {"sha": "57972e6156613fb7963ae112e7e170ffd6f3fbfe", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=e9284adfd06bd4f01bdc8fa4f708d3b9850e82d2", "patch": "@@ -1849,11 +1849,6 @@\n    (set_attr \"cc\" \"none,none\")])\n \n ;; table jump\n-(define_expand \"tablejump\"\n-  [(parallel [(set (pc) (match_operand:HI 0 \"register_operand\" \"\"))\n-\t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n-  \"0 && optimize\"\n-  \"\")\n \n ;; Note: the (mem:HI (...)) memory references here are special - actually\n ;; the data is read from a word address in program memory (r31:r30 is the"}]}