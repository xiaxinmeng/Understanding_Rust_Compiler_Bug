{"sha": "a27d8d801a67b1d03513d6ef408c2f1647273221", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3ZDhkODAxYTY3YjFkMDM1MTNkNmVmNDA4YzJmMTY0NzI3MzIyMQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-18T09:50:30Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-18T09:50:30Z"}, "message": "[Patch ARM Refactor Builtins 2/8] Move Processor flags to arm-protos.h\n\ngcc/\n\n\t* config/arm/t-arm (arm.o): Include arm-protos.h in the recipe.\n\t* config/arm/arm.c (FL_CO_PROC): Move to arm-protos.h.\n\t(FL_ARCH3M): Likewise.\n\t(FL_MODE26): Likewise.\n\t(FL_MODE32): Likewise.\n\t(FL_ARCH4): Likewise.\n\t(FL_ARCH5): Likewise.\n\t(FL_THUMB): Likewise.\n\t(FL_LDSCHED): Likewise.\n\t(FL_STRONG): Likewise.\n\t(FL_ARCH5E): Likewise.\n\t(FL_XSCALE): Likewise.\n\t(FL_ARCH6): Likewise.\n\t(FL_VFPV2): Likewise.\n\t(FL_WBUF): Likewise.\n\t(FL_ARCH6K): Likewise.\n\t(FL_THUMB2): Likewise.\n\t(FL_NOTM): Likewise.\n\t(FL_THUMB_DIV): Likewise.\n\t(FL_VFPV3): Likewise.\n\t(FL_NEON): Likewise.\n\t(FL_ARCH7EM): Likewise.\n\t(FL_ARCH7): Likewise.\n\t(FL_ARM_DIV): Likewise.\n\t(FL_ARCH8): Likewise.\n\t(FL_CRC32): Likewise.\n\t(FL_SMALLMUL): Likewise.\n\t(FL_IWMMXT): Likewise.\n\t(FL_IWMMXT2): Likewise.\n\t(FL_TUNE): Likewise.\n\t(FL_FOR_ARCH2): Likewise.\n\t(FL_FOR_ARCH3): Likewise.\n\t(FL_FOR_ARCH3M): Likewise.\n\t(FL_FOR_ARCH4): Likewise.\n\t(FL_FOR_ARCH4T): Likewise.\n\t(FL_FOR_ARCH5): Likewise.\n\t(FL_FOR_ARCH5T): Likewise.\n\t(FL_FOR_ARCH5E): Likewise.\n\t(FL_FOR_ARCH5TE): Likewise.\n\t(FL_FOR_ARCH5TEJ): Likewise.\n\t(FL_FOR_ARCH6): Likewise.\n\t(FL_FOR_ARCH6J): Likewise.\n\t(FL_FOR_ARCH6K): Likewise.\n\t(FL_FOR_ARCH6Z): Likewise.\n\t(FL_FOR_ARCH6ZK): Likewise.\n\t(FL_FOR_ARCH6T2): Likewise.\n\t(FL_FOR_ARCH6M): Likewise.\n\t(FL_FOR_ARCH7): Likewise.\n\t(FL_FOR_ARCH7A): Likewise.\n\t(FL_FOR_ARCH7VE): Likewise.\n\t(FL_FOR_ARCH7R): Likewise.\n\t(FL_FOR_ARCH7M): Likewise.\n\t(FL_FOR_ARCH7EM): Likewise.\n\t(FL_FOR_ARCH8A): Likewise.\n\t* config/arm/arm-protos.h: Take definitions moved from arm.c.\n\nFrom-SVN: r217694", "tree": {"sha": "82fed9fccd445e0c2b143fb766ef13f260599433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82fed9fccd445e0c2b143fb766ef13f260599433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27d8d801a67b1d03513d6ef408c2f1647273221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27d8d801a67b1d03513d6ef408c2f1647273221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27d8d801a67b1d03513d6ef408c2f1647273221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27d8d801a67b1d03513d6ef408c2f1647273221/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94f0f2ccaff7f298a21fb1daa39c720d3cbd73cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f0f2ccaff7f298a21fb1daa39c720d3cbd73cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f0f2ccaff7f298a21fb1daa39c720d3cbd73cb"}], "stats": {"total": 292, "additions": 224, "deletions": 68}, "files": [{"sha": "b54659cd2555262234525c2c9ab59127d83af8ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a27d8d801a67b1d03513d6ef408c2f1647273221", "patch": "@@ -1,3 +1,61 @@\n+2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/arm/t-arm (arm.o): Include arm-protos.h in the recipe.\n+\t* config/arm/arm.c (FL_CO_PROC): Move to arm-protos.h.\n+\t(FL_ARCH3M): Likewise.\n+\t(FL_MODE26): Likewise.\n+\t(FL_MODE32): Likewise.\n+\t(FL_ARCH4): Likewise.\n+\t(FL_ARCH5): Likewise.\n+\t(FL_THUMB): Likewise.\n+\t(FL_LDSCHED): Likewise.\n+\t(FL_STRONG): Likewise.\n+\t(FL_ARCH5E): Likewise.\n+\t(FL_XSCALE): Likewise.\n+\t(FL_ARCH6): Likewise.\n+\t(FL_VFPV2): Likewise.\n+\t(FL_WBUF): Likewise.\n+\t(FL_ARCH6K): Likewise.\n+\t(FL_THUMB2): Likewise.\n+\t(FL_NOTM): Likewise.\n+\t(FL_THUMB_DIV): Likewise.\n+\t(FL_VFPV3): Likewise.\n+\t(FL_NEON): Likewise.\n+\t(FL_ARCH7EM): Likewise.\n+\t(FL_ARCH7): Likewise.\n+\t(FL_ARM_DIV): Likewise.\n+\t(FL_ARCH8): Likewise.\n+\t(FL_CRC32): Likewise.\n+\t(FL_SMALLMUL): Likewise.\n+\t(FL_IWMMXT): Likewise.\n+\t(FL_IWMMXT2): Likewise.\n+\t(FL_TUNE): Likewise.\n+\t(FL_FOR_ARCH2): Likewise.\n+\t(FL_FOR_ARCH3): Likewise.\n+\t(FL_FOR_ARCH3M): Likewise.\n+\t(FL_FOR_ARCH4): Likewise.\n+\t(FL_FOR_ARCH4T): Likewise.\n+\t(FL_FOR_ARCH5): Likewise.\n+\t(FL_FOR_ARCH5T): Likewise.\n+\t(FL_FOR_ARCH5E): Likewise.\n+\t(FL_FOR_ARCH5TE): Likewise.\n+\t(FL_FOR_ARCH5TEJ): Likewise.\n+\t(FL_FOR_ARCH6): Likewise.\n+\t(FL_FOR_ARCH6J): Likewise.\n+\t(FL_FOR_ARCH6K): Likewise.\n+\t(FL_FOR_ARCH6Z): Likewise.\n+\t(FL_FOR_ARCH6ZK): Likewise.\n+\t(FL_FOR_ARCH6T2): Likewise.\n+\t(FL_FOR_ARCH6M): Likewise.\n+\t(FL_FOR_ARCH7): Likewise.\n+\t(FL_FOR_ARCH7A): Likewise.\n+\t(FL_FOR_ARCH7VE): Likewise.\n+\t(FL_FOR_ARCH7R): Likewise.\n+\t(FL_FOR_ARCH7M): Likewise.\n+\t(FL_FOR_ARCH7EM): Likewise.\n+\t(FL_FOR_ARCH8A): Likewise.\n+\t* config/arm/arm-protos.h: Take definitions moved from arm.c.\n+\n 2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm.c (arm_expand_neon_builtin): Remove \"Magic Word\""}, {"sha": "aa9b1cb14950f323899acffd1794f6db13d71860", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=a27d8d801a67b1d03513d6ef408c2f1647273221", "patch": "@@ -306,4 +306,167 @@ extern const char *arm_rewrite_selected_cpu (const char *name);\n \n extern bool arm_is_constant_pool_ref (rtx);\n \n+/* Flags used to identify the presence of processor capabilities.  */\n+\n+/* Bit values used to identify processor capabilities.  */\n+#define FL_CO_PROC    (1 << 0)        /* Has external co-processor bus */\n+#define FL_ARCH3M     (1 << 1)        /* Extended multiply */\n+#define FL_MODE26     (1 << 2)        /* 26-bit mode support */\n+#define FL_MODE32     (1 << 3)        /* 32-bit mode support */\n+#define FL_ARCH4      (1 << 4)        /* Architecture rel 4 */\n+#define FL_ARCH5      (1 << 5)        /* Architecture rel 5 */\n+#define FL_THUMB      (1 << 6)        /* Thumb aware */\n+#define FL_LDSCHED    (1 << 7)\t      /* Load scheduling necessary */\n+#define FL_STRONG     (1 << 8)\t      /* StrongARM */\n+#define FL_ARCH5E     (1 << 9)        /* DSP extensions to v5 */\n+#define FL_XSCALE     (1 << 10)\t      /* XScale */\n+/* spare\t      (1 << 11)\t*/\n+#define FL_ARCH6      (1 << 12)       /* Architecture rel 6.  Adds\n+\t\t\t\t\t media instructions.  */\n+#define FL_VFPV2      (1 << 13)       /* Vector Floating Point V2.  */\n+#define FL_WBUF\t      (1 << 14)\t      /* Schedule for write buffer ops.\n+\t\t\t\t\t Note: ARM6 & 7 derivatives only.  */\n+#define FL_ARCH6K     (1 << 15)       /* Architecture rel 6 K extensions.  */\n+#define FL_THUMB2     (1 << 16)\t      /* Thumb-2.  */\n+#define FL_NOTM\t      (1 << 17)\t      /* Instructions not present in the 'M'\n+\t\t\t\t\t profile.  */\n+#define FL_THUMB_DIV  (1 << 18)\t      /* Hardware divide (Thumb mode).  */\n+#define FL_VFPV3      (1 << 19)       /* Vector Floating Point V3.  */\n+#define FL_NEON       (1 << 20)       /* Neon instructions.  */\n+#define FL_ARCH7EM    (1 << 21)\t      /* Instructions present in the ARMv7E-M\n+\t\t\t\t\t architecture.  */\n+#define FL_ARCH7      (1 << 22)       /* Architecture 7.  */\n+#define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n+#define FL_ARCH8      (1 << 24)       /* Architecture 8.  */\n+#define FL_CRC32      (1 << 25)\t      /* ARMv8 CRC32 instructions.  */\n+\n+#define FL_SMALLMUL   (1 << 26)       /* Small multiply supported.  */\n+\n+#define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n+#define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n+\n+/* Flags that only effect tuning, not available instructions.  */\n+#define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\\n+\t\t\t | FL_CO_PROC)\n+\n+#define FL_FOR_ARCH2\tFL_NOTM\n+#define FL_FOR_ARCH3\t(FL_FOR_ARCH2 | FL_MODE32)\n+#define FL_FOR_ARCH3M\t(FL_FOR_ARCH3 | FL_ARCH3M)\n+#define FL_FOR_ARCH4\t(FL_FOR_ARCH3M | FL_ARCH4)\n+#define FL_FOR_ARCH4T\t(FL_FOR_ARCH4 | FL_THUMB)\n+#define FL_FOR_ARCH5\t(FL_FOR_ARCH4 | FL_ARCH5)\n+#define FL_FOR_ARCH5T\t(FL_FOR_ARCH5 | FL_THUMB)\n+#define FL_FOR_ARCH5E\t(FL_FOR_ARCH5 | FL_ARCH5E)\n+#define FL_FOR_ARCH5TE\t(FL_FOR_ARCH5E | FL_THUMB)\n+#define FL_FOR_ARCH5TEJ\tFL_FOR_ARCH5TE\n+#define FL_FOR_ARCH6\t(FL_FOR_ARCH5TE | FL_ARCH6)\n+#define FL_FOR_ARCH6J\tFL_FOR_ARCH6\n+#define FL_FOR_ARCH6K\t(FL_FOR_ARCH6 | FL_ARCH6K)\n+#define FL_FOR_ARCH6Z\tFL_FOR_ARCH6\n+#define FL_FOR_ARCH6ZK\tFL_FOR_ARCH6K\n+#define FL_FOR_ARCH6T2\t(FL_FOR_ARCH6 | FL_THUMB2)\n+#define FL_FOR_ARCH6M\t(FL_FOR_ARCH6 & ~FL_NOTM)\n+#define FL_FOR_ARCH7\t((FL_FOR_ARCH6T2 & ~FL_NOTM) | FL_ARCH7)\n+#define FL_FOR_ARCH7A\t(FL_FOR_ARCH7 | FL_NOTM | FL_ARCH6K)\n+#define FL_FOR_ARCH7VE\t(FL_FOR_ARCH7A | FL_THUMB_DIV | FL_ARM_DIV)\n+#define FL_FOR_ARCH7R\t(FL_FOR_ARCH7A | FL_THUMB_DIV)\n+#define FL_FOR_ARCH7M\t(FL_FOR_ARCH7 | FL_THUMB_DIV)\n+#define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n+#define FL_FOR_ARCH8A\t(FL_FOR_ARCH7VE | FL_ARCH8)\n+\n+/* The bits in this mask specify which\n+   instructions we are allowed to generate.  */\n+extern unsigned long insn_flags;\n+\n+/* The bits in this mask specify which instruction scheduling options should\n+   be used.  */\n+extern unsigned long tune_flags;\n+\n+/* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n+extern int arm_arch3m;\n+\n+/* Nonzero if this chip supports the ARM Architecture 4 extensions.  */\n+extern int arm_arch4;\n+\n+/* Nonzero if this chip supports the ARM Architecture 4t extensions.  */\n+extern int arm_arch4t;\n+\n+/* Nonzero if this chip supports the ARM Architecture 5 extensions.  */\n+extern int arm_arch5;\n+\n+/* Nonzero if this chip supports the ARM Architecture 5E extensions.  */\n+extern int arm_arch5e;\n+\n+/* Nonzero if this chip supports the ARM Architecture 6 extensions.  */\n+extern int arm_arch6;\n+\n+/* Nonzero if this chip supports the ARM 6K extensions.  */\n+extern int arm_arch6k;\n+\n+/* Nonzero if instructions present in ARMv6-M can be used.  */\n+extern int arm_arch6m;\n+\n+/* Nonzero if this chip supports the ARM 7 extensions.  */\n+extern int arm_arch7;\n+\n+/* Nonzero if instructions not present in the 'M' profile can be used.  */\n+extern int arm_arch_notm;\n+\n+/* Nonzero if instructions present in ARMv7E-M can be used.  */\n+extern int arm_arch7em;\n+\n+/* Nonzero if instructions present in ARMv8 can be used.  */\n+extern int arm_arch8;\n+\n+/* Nonzero if this chip can benefit from load scheduling.  */\n+extern int arm_ld_sched;\n+\n+/* Nonzero if this chip is a StrongARM.  */\n+extern int arm_tune_strongarm;\n+\n+/* Nonzero if this chip supports Intel Wireless MMX technology.  */\n+extern int arm_arch_iwmmxt;\n+\n+/* Nonzero if this chip supports Intel Wireless MMX2 technology.  */\n+extern int arm_arch_iwmmxt2;\n+\n+/* Nonzero if this chip is an XScale.  */\n+extern int arm_arch_xscale;\n+\n+/* Nonzero if tuning for XScale  */\n+extern int arm_tune_xscale;\n+\n+/* Nonzero if we want to tune for stores that access the write-buffer.\n+   This typically means an ARM6 or ARM7 with MMU or MPU.  */\n+extern int arm_tune_wbuf;\n+\n+/* Nonzero if tuning for Cortex-A9.  */\n+extern int arm_tune_cortex_a9;\n+\n+/* Nonzero if generating Thumb instructions.  */\n+extern int thumb_code;\n+\n+/* Nonzero if generating Thumb-1 instructions.  */\n+extern int thumb1_code;\n+\n+/* Nonzero if we should define __THUMB_INTERWORK__ in the\n+   preprocessor.\n+   XXX This is a bit of a hack, it's intended to help work around\n+   problems in GLD which doesn't understand that armv5t code is\n+   interworking clean.  */\n+extern int arm_cpp_interwork;\n+\n+/* Nonzero if chip supports Thumb 2.  */\n+extern int arm_arch_thumb2;\n+\n+/* Nonzero if chip supports integer division instruction.  */\n+extern int arm_arch_arm_hwdiv;\n+extern int arm_arch_thumb_hwdiv;\n+\n+/* Nonzero if we should use Neon to handle 64-bits operations rather\n+   than core registers.  */\n+extern int prefer_neon_for_64bits;\n+\n+\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "9aa978be7e1020151cd100a9e00be955a610ec11", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a27d8d801a67b1d03513d6ef408c2f1647273221", "patch": "@@ -744,79 +744,13 @@ const struct arm_fpu_desc *arm_fpu_desc;\n rtx thumb_call_via_label[14];\n static int thumb_call_reg_needed;\n \n-/* Bit values used to identify processor capabilities.  */\n-#define FL_CO_PROC    (1 << 0)        /* Has external co-processor bus */\n-#define FL_ARCH3M     (1 << 1)        /* Extended multiply */\n-#define FL_MODE26     (1 << 2)        /* 26-bit mode support */\n-#define FL_MODE32     (1 << 3)        /* 32-bit mode support */\n-#define FL_ARCH4      (1 << 4)        /* Architecture rel 4 */\n-#define FL_ARCH5      (1 << 5)        /* Architecture rel 5 */\n-#define FL_THUMB      (1 << 6)        /* Thumb aware */\n-#define FL_LDSCHED    (1 << 7)\t      /* Load scheduling necessary */\n-#define FL_STRONG     (1 << 8)\t      /* StrongARM */\n-#define FL_ARCH5E     (1 << 9)        /* DSP extensions to v5 */\n-#define FL_XSCALE     (1 << 10)\t      /* XScale */\n-/* spare\t      (1 << 11)\t*/\n-#define FL_ARCH6      (1 << 12)       /* Architecture rel 6.  Adds\n-\t\t\t\t\t media instructions.  */\n-#define FL_VFPV2      (1 << 13)       /* Vector Floating Point V2.  */\n-#define FL_WBUF\t      (1 << 14)\t      /* Schedule for write buffer ops.\n-\t\t\t\t\t Note: ARM6 & 7 derivatives only.  */\n-#define FL_ARCH6K     (1 << 15)       /* Architecture rel 6 K extensions.  */\n-#define FL_THUMB2     (1 << 16)\t      /* Thumb-2.  */\n-#define FL_NOTM\t      (1 << 17)\t      /* Instructions not present in the 'M'\n-\t\t\t\t\t profile.  */\n-#define FL_THUMB_DIV  (1 << 18)\t      /* Hardware divide (Thumb mode).  */\n-#define FL_VFPV3      (1 << 19)       /* Vector Floating Point V3.  */\n-#define FL_NEON       (1 << 20)       /* Neon instructions.  */\n-#define FL_ARCH7EM    (1 << 21)\t      /* Instructions present in the ARMv7E-M\n-\t\t\t\t\t architecture.  */\n-#define FL_ARCH7      (1 << 22)       /* Architecture 7.  */\n-#define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n-#define FL_ARCH8      (1 << 24)       /* Architecture 8.  */\n-#define FL_CRC32      (1 << 25)\t      /* ARMv8 CRC32 instructions.  */\n-\n-#define FL_SMALLMUL   (1 << 26)       /* Small multiply supported.  */\n-\n-#define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n-#define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n-\n-/* Flags that only effect tuning, not available instructions.  */\n-#define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\\n-\t\t\t | FL_CO_PROC)\n-\n-#define FL_FOR_ARCH2\tFL_NOTM\n-#define FL_FOR_ARCH3\t(FL_FOR_ARCH2 | FL_MODE32)\n-#define FL_FOR_ARCH3M\t(FL_FOR_ARCH3 | FL_ARCH3M)\n-#define FL_FOR_ARCH4\t(FL_FOR_ARCH3M | FL_ARCH4)\n-#define FL_FOR_ARCH4T\t(FL_FOR_ARCH4 | FL_THUMB)\n-#define FL_FOR_ARCH5\t(FL_FOR_ARCH4 | FL_ARCH5)\n-#define FL_FOR_ARCH5T\t(FL_FOR_ARCH5 | FL_THUMB)\n-#define FL_FOR_ARCH5E\t(FL_FOR_ARCH5 | FL_ARCH5E)\n-#define FL_FOR_ARCH5TE\t(FL_FOR_ARCH5E | FL_THUMB)\n-#define FL_FOR_ARCH5TEJ\tFL_FOR_ARCH5TE\n-#define FL_FOR_ARCH6\t(FL_FOR_ARCH5TE | FL_ARCH6)\n-#define FL_FOR_ARCH6J\tFL_FOR_ARCH6\n-#define FL_FOR_ARCH6K\t(FL_FOR_ARCH6 | FL_ARCH6K)\n-#define FL_FOR_ARCH6Z\tFL_FOR_ARCH6\n-#define FL_FOR_ARCH6ZK\tFL_FOR_ARCH6K\n-#define FL_FOR_ARCH6T2\t(FL_FOR_ARCH6 | FL_THUMB2)\n-#define FL_FOR_ARCH6M\t(FL_FOR_ARCH6 & ~FL_NOTM)\n-#define FL_FOR_ARCH7\t((FL_FOR_ARCH6T2 & ~FL_NOTM) | FL_ARCH7)\n-#define FL_FOR_ARCH7A\t(FL_FOR_ARCH7 | FL_NOTM | FL_ARCH6K)\n-#define FL_FOR_ARCH7VE\t(FL_FOR_ARCH7A | FL_THUMB_DIV | FL_ARM_DIV)\n-#define FL_FOR_ARCH7R\t(FL_FOR_ARCH7A | FL_THUMB_DIV)\n-#define FL_FOR_ARCH7M\t(FL_FOR_ARCH7 | FL_THUMB_DIV)\n-#define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n-#define FL_FOR_ARCH8A\t(FL_FOR_ARCH7VE | FL_ARCH8)\n-\n /* The bits in this mask specify which\n    instructions we are allowed to generate.  */\n-static unsigned long insn_flags = 0;\n+unsigned long insn_flags = 0;\n \n /* The bits in this mask specify which instruction scheduling options should\n    be used.  */\n-static unsigned long tune_flags = 0;\n+unsigned long tune_flags = 0;\n \n /* The highest ARM architecture version supported by the\n    target.  */"}, {"sha": "25236a4166eed839e18b9fb67e7c487a67cab5ae", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d8d801a67b1d03513d6ef408c2f1647273221/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=a27d8d801a67b1d03513d6ef408c2f1647273221", "patch": "@@ -92,6 +92,7 @@ arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H) $(srcdir)/config/arm/arm-cores.def \\\n   $(srcdir)/config/arm/arm-arches.def $(srcdir)/config/arm/arm-fpus.def \\\n+  $(srcdir)/config/arm/arm-protos.h \\\n   $(srcdir)/config/arm/arm_neon_builtins.def\n \n arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\"}]}