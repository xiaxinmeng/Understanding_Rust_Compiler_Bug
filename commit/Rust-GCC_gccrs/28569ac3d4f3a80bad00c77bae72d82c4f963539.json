{"sha": "28569ac3d4f3a80bad00c77bae72d82c4f963539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1NjlhYzNkNGYzYTgwYmFkMDBjNzdiYWU3MmQ4MmM0Zjk2MzUzOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-12T14:56:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-12T14:56:57Z"}, "message": "* recog.h, genoutput.c, optabs.c: Revert last patch.\n\nFrom-SVN: r172321", "tree": {"sha": "cc03e3af6c23aedc2d35dd550a24766687e4b0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc03e3af6c23aedc2d35dd550a24766687e4b0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28569ac3d4f3a80bad00c77bae72d82c4f963539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28569ac3d4f3a80bad00c77bae72d82c4f963539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28569ac3d4f3a80bad00c77bae72d82c4f963539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28569ac3d4f3a80bad00c77bae72d82c4f963539/comments", "author": null, "committer": null, "parents": [{"sha": "ae59e00d17e296ccdaa5829ced97342bcf09971d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae59e00d17e296ccdaa5829ced97342bcf09971d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae59e00d17e296ccdaa5829ced97342bcf09971d"}], "stats": {"total": 78, "additions": 20, "deletions": 58}, "files": [{"sha": "3a8a279b4c39e751bdcb3ebdb2af9669c8cc261a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28569ac3d4f3a80bad00c77bae72d82c4f963539", "patch": "@@ -1,3 +1,7 @@\n+2011-04-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* recog.h, genoutput.c, optabs.c: Revert last patch.\n+\n 2011-04-12  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n        PR target/48090"}, {"sha": "3e89cfd6df160562cefa452be8d5dd3a4ad763b4", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=28569ac3d4f3a80bad00c77bae72d82c4f963539", "patch": "@@ -66,8 +66,6 @@ along with GCC; see the file COPYING3.  If not see\n      MATCH_OPERAND; it is zero for operands that should not be changed during\n      register elimination such as MATCH_OPERATORs.\n \n-     g. `allows_mem', is true for operands that accept MEM rtxes.\n-\n   The code number of an insn is simply its position in the machine\n   description; code numbers are assigned sequentially to entries in\n   the description, starting with code number 0.\n@@ -258,8 +256,6 @@ output_operand_data (void)\n \n   for (d = odata; d; d = d->next)\n     {\n-      struct pred_data *pred;\n-\n       printf (\"  {\\n\");\n \n       printf (\"    %s,\\n\",\n@@ -273,12 +269,7 @@ output_operand_data (void)\n \n       printf (\"    %d,\\n\", d->constraint == NULL ? 1 : 0);\n \n-      printf (\"    %d,\\n\", d->eliminable);\n-\n-      pred = NULL;\n-      if (d->predicate)\n-\tpred = lookup_predicate (d->predicate);\n-      printf (\"    %d\\n\", pred && pred->codes[MEM]);\n+      printf (\"    %d\\n\", d->eliminable);\n \n       printf(\"  },\\n\");\n     }"}, {"sha": "682b8e40f7c6bd4f9964e388cac46ef227bb9af6", "filename": "gcc/optabs.c", "status": "modified", "additions": 15, "deletions": 46, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=28569ac3d4f3a80bad00c77bae72d82c4f963539", "patch": "@@ -7001,36 +7001,6 @@ insn_operand_matches (enum insn_code icode, unsigned int opno, rtx operand)\n \t      (operand, insn_data[(int) icode].operand[opno].mode)));\n }\n \f\n-/* Like maybe_legitimize_operand, but do not change the code of the\n-   current rtx value.  */\n-\n-static bool\n-maybe_legitimize_operand_same_code (enum insn_code icode, unsigned int opno,\n-\t\t\t\t    struct expand_operand *op)\n-{\n-  /* See if the operand matches in its current form.  */\n-  if (insn_operand_matches (icode, opno, op->value))\n-    return true;\n-\n-  /* If the operand is a memory, try forcing the address into a register.  */\n-  if (MEM_P (op->value) && insn_data[(int) icode].operand[opno].allows_mem)\n-    {\n-      rtx addr, mem, last;\n-\n-      last = get_last_insn ();\n-      addr = force_reg (Pmode, XEXP (op->value, 0));\n-      mem = replace_equiv_address (op->value, addr);\n-      if (insn_operand_matches (icode, opno, mem))\n-\t{\n-\t  op->value = mem;\n-\t  return true;\n-\t}\n-      delete_insns_since (last);\n-    }\n-\n-  return false;\n-}\n-\n /* Try to make OP match operand OPNO of instruction ICODE.  Return true\n    on success, storing the new operand value back in OP.  */\n \n@@ -7041,36 +7011,32 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n   enum machine_mode mode, imode;\n   bool old_volatile_ok, result;\n \n+  old_volatile_ok = volatile_ok;\n   mode = op->mode;\n+  result = false;\n   switch (op->type)\n     {\n     case EXPAND_FIXED:\n-      old_volatile_ok = volatile_ok;\n       volatile_ok = true;\n-      result = maybe_legitimize_operand_same_code (icode, opno, op);\n-      volatile_ok = old_volatile_ok;\n-      return result;\n+      break;\n \n     case EXPAND_OUTPUT:\n       gcc_assert (mode != VOIDmode);\n-      if (op->value\n-\t  && op->value != const0_rtx\n-\t  && GET_MODE (op->value) == mode\n-\t  && maybe_legitimize_operand_same_code (icode, opno, op))\n-\treturn true;\n-\n-      op->value = gen_reg_rtx (mode);\n+      if (!op->value\n+\t  || op->value == const0_rtx\n+\t  || GET_MODE (op->value) != mode\n+\t  || !insn_operand_matches (icode, opno, op->value))\n+\top->value = gen_reg_rtx (mode);\n       break;\n \n     case EXPAND_INPUT:\n     input:\n       gcc_assert (mode != VOIDmode);\n       gcc_assert (GET_MODE (op->value) == VOIDmode\n \t\t  || GET_MODE (op->value) == mode);\n-      if (maybe_legitimize_operand_same_code (icode, opno, op))\n-\treturn true;\n-\n-      op->value = copy_to_mode_reg (mode, op->value);\n+      result = insn_operand_matches (icode, opno, op->value);\n+      if (!result)\n+\top->value = copy_to_mode_reg (mode, op->value);\n       break;\n \n     case EXPAND_CONVERT_TO:\n@@ -7104,7 +7070,10 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n \tgoto input;\n       break;\n     }\n-  return insn_operand_matches (icode, opno, op->value);\n+  if (!result)\n+    result = insn_operand_matches (icode, opno, op->value);\n+  volatile_ok = old_volatile_ok;\n+  return result;\n }\n \n /* Make OP describe an input operand that should have the same value"}, {"sha": "0261bc6072d7c37a803ffd86dd4b9ed776ba6836", "filename": "gcc/recog.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28569ac3d4f3a80bad00c77bae72d82c4f963539/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=28569ac3d4f3a80bad00c77bae72d82c4f963539", "patch": "@@ -272,8 +272,6 @@ struct insn_operand_data\n   const char is_operator;\n \n   const char eliminable;\n-\n-  const char allows_mem;\n };\n \n /* Legal values for insn_data.output_format.  Indicate what type of data"}]}