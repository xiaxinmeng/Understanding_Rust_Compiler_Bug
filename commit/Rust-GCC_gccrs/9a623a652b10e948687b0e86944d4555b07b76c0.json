{"sha": "9a623a652b10e948687b0e86944d4555b07b76c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2MjNhNjUyYjEwZTk0ODY4N2IwZTg2OTQ0ZDQ1NTViMDdiNzZjMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-11-02T19:47:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-11-02T19:47:57Z"}, "message": "print-rtl.c (print_rtx): Call PRINT_REG with second argument -1.\n\n\t* print-rtl.c (print_rtx): Call PRINT_REG with second argument -1.\n\t* config/i386/i386.c (print_reg): Abort on a virtual register\n\tif code != -1; not if file == asm_out_file.\n\t* config/i386/i386.h (PRINT_REG): Document meaning of CODE == -1.\n\t(DEBUG_PRINT_REG): Delete, unused.\n\nFrom-SVN: r73203", "tree": {"sha": "73e06e18b44469f105c8381c8c58d1964958fc73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e06e18b44469f105c8381c8c58d1964958fc73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a623a652b10e948687b0e86944d4555b07b76c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a623a652b10e948687b0e86944d4555b07b76c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a623a652b10e948687b0e86944d4555b07b76c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a623a652b10e948687b0e86944d4555b07b76c0/comments", "author": null, "committer": null, "parents": [{"sha": "634879c891f064bd93eeca377d7654d04c8ce936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634879c891f064bd93eeca377d7654d04c8ce936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634879c891f064bd93eeca377d7654d04c8ce936"}], "stats": {"total": 152, "additions": 50, "deletions": 102}, "files": [{"sha": "3f2dfc3032ce53ce0512f281ce7c119988b7aae0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a623a652b10e948687b0e86944d4555b07b76c0", "patch": "@@ -1,3 +1,11 @@\n+2003-11-02  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* print-rtl.c (print_rtx): Call PRINT_REG with second argument -1.\n+\t* config/i386/i386.c (print_reg): Abort on a virtual register\n+\tif code != -1; not if file == asm_out_file.\n+\t* config/i386/i386.h (PRINT_REG): Document meaning of CODE == -1.\n+\t(DEBUG_PRINT_REG): Delete, unused.\n+\n 2003-11-02  Andreas Schwab  <schwab@suse.de>\n \n \t* config/ia64/fde-glibc.c (_GNU_SOURCE): Define to 1 instead of\n@@ -164,36 +172,36 @@\n \tcode.\n \n 2003-10-31  Andreas Jaeger  <aj@suse.de>,\n-            Zack Weinberg  <zack@codesourcery.com>\n-\n-\n-        * crtstuff.c (__register_frame_info, __register_frame_info_bases)\n-        (__deregister_frame_info, __deregister_frame_info_bases):\n-        Constify void * argument.\n-        * unwind-dw2-fde.h (struct fde_vector):\n-        Constify 'orig_data' and 'array' fields.\n-        (__register_frame_info, __register_frame_info_bases)\n-        (__deregister_frame_info, __deregister_frame_info_bases):\n-        Constify void * argument.\n-        (get_cie, next_fde, _Unwind_Find_FDE): Constify arguments,\n-        return values, and casts of type fde *, struct dwarf_fde *,\n-        and struct dwarf_cie *.\n-        * unwind-dw2-fde.c (__register_frame_info, __register_frame_info_bases)\n-        (__deregister_frame_info, __deregister_frame_info_bases):\n-        Constify void * argument.\n-        (get_cie_encoding, ): Constify struct dwarf_cie * argument.\n-        (get_fde_encoding, fde_unencoded_compare, fde_single_encoding_compare)\n-        (fde_mixed_encoding_compare, fde_compare_t, start_fde_sort, fde_insert)\n-        fde_split, SWAP, frame_downheap, frame_heapsort)\n-        (classify_object_over_fdes, add_fdes, linear_search_fdes,\n-        binary_search_unencoded_fdes, binary_search_single_encoding_fdes,\n-        binary_search_mixed_encoding_fdes, search_object, _Unwind_Find_FDE):\n-        Constify arguments, local variables, return values, and casts\n-        of type fde *, fde **, struct dwarf_fde *, and struct dwarf_cie *.\n-        Use const pointer types in sizeof expressions, for clarity.\n-        * unwind-dw2-fde-glibc.c\n-        (_Unwind_find_registered_FDE, _Unwind_find_FDE): Constify return value.\n-        (struct unw_eh_callback_data): Constify 'ret' field.\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\n+\t* crtstuff.c (__register_frame_info, __register_frame_info_bases)\n+\t(__deregister_frame_info, __deregister_frame_info_bases):\n+\tConstify void * argument.\n+\t* unwind-dw2-fde.h (struct fde_vector):\n+\tConstify 'orig_data' and 'array' fields.\n+\t(__register_frame_info, __register_frame_info_bases)\n+\t(__deregister_frame_info, __deregister_frame_info_bases):\n+\tConstify void * argument.\n+\t(get_cie, next_fde, _Unwind_Find_FDE): Constify arguments,\n+\treturn values, and casts of type fde *, struct dwarf_fde *,\n+\tand struct dwarf_cie *.\n+\t* unwind-dw2-fde.c (__register_frame_info, __register_frame_info_bases)\n+\t(__deregister_frame_info, __deregister_frame_info_bases):\n+\tConstify void * argument.\n+\t(get_cie_encoding, ): Constify struct dwarf_cie * argument.\n+\t(get_fde_encoding, fde_unencoded_compare, fde_single_encoding_compare)\n+\t(fde_mixed_encoding_compare, fde_compare_t, start_fde_sort, fde_insert)\n+\tfde_split, SWAP, frame_downheap, frame_heapsort)\n+\t(classify_object_over_fdes, add_fdes, linear_search_fdes,\n+\tbinary_search_unencoded_fdes, binary_search_single_encoding_fdes,\n+\tbinary_search_mixed_encoding_fdes, search_object, _Unwind_Find_FDE):\n+\tConstify arguments, local variables, return values, and casts\n+\tof type fde *, fde **, struct dwarf_fde *, and struct dwarf_cie *.\n+\tUse const pointer types in sizeof expressions, for clarity.\n+\t* unwind-dw2-fde-glibc.c\n+\t(_Unwind_find_registered_FDE, _Unwind_find_FDE): Constify return value.\n+\t(struct unw_eh_callback_data): Constify 'ret' field.\n \n 2003-10-31  Fariborz Jahanian  <fjahanian@apple.com>\n \t    David Edelsohn  <edelsohn@gnu.org>\n@@ -265,7 +273,7 @@\n 2003-10-30  Eric Christopher  <echristo@redhat.com>\n \n \t* function.c (purge_addressof_1): Add case for REG_RETVAL\n-        notes when modes are unequal.\n+\tnotes when modes are unequal.\n \n 2003-10-31  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "3bcc5eb436c5e8e0d041b9beaa1815017d068a99", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9a623a652b10e948687b0e86944d4555b07b76c0", "patch": "@@ -6993,11 +6993,14 @@ put_condition_code (enum rtx_code code, enum machine_mode mode, int reverse,\n void\n print_reg (rtx x, int code, FILE *file)\n {\n-  if ((REGNO (x) == ARG_POINTER_REGNUM\n-       || REGNO (x) == FRAME_POINTER_REGNUM\n-       || REGNO (x) == FLAGS_REG\n-       || REGNO (x) == FPSR_REG)\n-      && file == asm_out_file)\n+  /* Code -1 indicates we are called from print_rtx, and it is not\n+     an error for a virtual register to appear here.  */\n+  if (code == -1)\n+    code = 0;\n+  else if (REGNO (x) == ARG_POINTER_REGNUM\n+\t   || REGNO (x) == FRAME_POINTER_REGNUM\n+\t   || REGNO (x) == FLAGS_REG\n+\t   || REGNO (x) == FPSR_REG)\n     abort ();\n \n   if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)"}, {"sha": "2f5630a3bd922c3632b86f3022291d80abfc80a0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9a623a652b10e948687b0e86944d4555b07b76c0", "patch": "@@ -2882,7 +2882,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If CODE is 'k', pretend the mode is SImode.\n    If CODE is 'q', pretend the mode is DImode.\n    If CODE is 'h', pretend the reg is the `high' byte register.\n-   If CODE is 'y', print \"st(0)\" instead of \"st\", if the reg is stack op.  */\n+   If CODE is 'y', print \"st(0)\" instead of \"st\", if the reg is stack op.\n+   If CODE is -1, it is not an error for X to be a virtual register.  */\n \n #define PRINT_REG(X, CODE, FILE)  \\\n   print_reg ((X), (CODE), (FILE))\n@@ -2899,70 +2900,6 @@ do {\t\t\t\t\t\t\\\n     goto FAIL;\t\t\t\t\t\\\n } while (0);\n \n-/* Print the name of a register for based on its machine mode and number.\n-   This macro is used to print debugging output.\n-   This macro is different from PRINT_REG in that it may be used in\n-   programs that are not linked with aux-output.o.  */\n-\n-#define DEBUG_PRINT_REG(X, CODE, FILE)\t\t\t\\\n-  do { static const char * const hi_name[] = HI_REGISTER_NAMES;\t\\\n-       static const char * const qi_name[] = QI_REGISTER_NAMES;\t\\\n-       fprintf ((FILE), \"%d \", REGNO (X));\t\t\\\n-       if (REGNO (X) == FLAGS_REG)\t\t\t\\\n-\t { fputs (\"flags\", (FILE)); break; }\t\t\\\n-       if (REGNO (X) == DIRFLAG_REG)\t\t\t\\\n-\t { fputs (\"dirflag\", (FILE)); break; }\t\t\\\n-       if (REGNO (X) == FPSR_REG)\t\t\t\\\n-\t { fputs (\"fpsr\", (FILE)); break; }\t\t\\\n-       if (REGNO (X) == ARG_POINTER_REGNUM)\t\t\\\n-\t { fputs (\"argp\", (FILE)); break; }\t\t\\\n-       if (REGNO (X) == FRAME_POINTER_REGNUM)\t\t\\\n-\t { fputs (\"frame\", (FILE)); break; }\t\t\\\n-       if (STACK_TOP_P (X))\t\t\t\t\\\n-\t { fputs (\"st(0)\", (FILE)); break; }\t\t\\\n-       if (FP_REG_P (X))\t\t\t\t\\\n-\t { fputs (hi_name[REGNO(X)], (FILE)); break; }\t\\\n-       if (REX_INT_REG_P (X))\t\t\t\t\\\n-\t {\t\t\t\t\t\t\\\n-\t   switch (GET_MODE_SIZE (GET_MODE (X)))\t\\\n-\t     {\t\t\t\t\t\t\\\n-\t     default:\t\t\t\t\t\\\n-\t     case 8:\t\t\t\t\t\\\n-\t       fprintf ((FILE), \"r%i\", REGNO (X)\t\\\n-\t\t\t- FIRST_REX_INT_REG + 8);\t\\\n-\t       break;\t\t\t\t\t\\\n-\t     case 4:\t\t\t\t\t\\\n-\t       fprintf ((FILE), \"r%id\", REGNO (X)\t\\\n-\t\t\t- FIRST_REX_INT_REG + 8);\t\\\n-\t       break;\t\t\t\t\t\\\n-\t     case 2:\t\t\t\t\t\\\n-\t       fprintf ((FILE), \"r%iw\", REGNO (X)\t\\\n-\t\t\t- FIRST_REX_INT_REG + 8);\t\\\n-\t       break;\t\t\t\t\t\\\n-\t     case 1:\t\t\t\t\t\\\n-\t       fprintf ((FILE), \"r%ib\", REGNO (X)\t\\\n-\t\t\t- FIRST_REX_INT_REG + 8);\t\\\n-\t       break;\t\t\t\t\t\\\n-\t     }\t\t\t\t\t\t\\\n-\t   break;\t\t\t\t\t\\\n-\t }\t\t\t\t\t\t\\\n-       switch (GET_MODE_SIZE (GET_MODE (X)))\t\t\\\n-\t {\t\t\t\t\t\t\\\n-\t case 8:\t\t\t\t\t\\\n-\t   fputs (\"r\", (FILE));\t\t\t\t\\\n-\t   fputs (hi_name[REGNO (X)], (FILE));\t\t\\\n-\t   break;\t\t\t\t\t\\\n-\t default:\t\t\t\t\t\\\n-\t   fputs (\"e\", (FILE));\t\t\t\t\\\n-\t case 2:\t\t\t\t\t\\\n-\t   fputs (hi_name[REGNO (X)], (FILE));\t\t\\\n-\t   break;\t\t\t\t\t\\\n-\t case 1:\t\t\t\t\t\\\n-\t   fputs (qi_name[REGNO (X)], (FILE));\t\t\\\n-\t   break;\t\t\t\t\t\\\n-\t }\t\t\t\t\t\t\\\n-     } while (0)\n-\n /* a letter which is not needed by the normal asm syntax, which\n    we can use for operand syntax in the extended asm */\n "}, {"sha": "5c3b8d4443eb4752018e4cbfe68f8fb81f591ae9", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a623a652b10e948687b0e86944d4555b07b76c0/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=9a623a652b10e948687b0e86944d4555b07b76c0", "patch": "@@ -386,7 +386,7 @@ print_rtx (rtx in_rtx)\n \t    if (GET_CODE (in_rtx) == REG && value < FIRST_PSEUDO_REGISTER)\n \t      {\n \t\tfputc (' ', outfile);\n-\t\tPRINT_REG (in_rtx, 0, outfile);\n+\t\tPRINT_REG (in_rtx, -1, outfile);\n \t      }\n \t    else if (GET_CODE (in_rtx) == REG\n \t\t     && value <= LAST_VIRTUAL_REGISTER)"}]}