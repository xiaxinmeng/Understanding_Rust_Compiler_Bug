{"sha": "16e723e600a62428b8ed6ab414931ec7a78aceee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZlNzIzZTYwMGE2MjQyOGI4ZWQ2YWI0MTQ5MzFlYzdhNzhhY2VlZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-11-13T04:33:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-11-13T04:33:57Z"}, "message": "cp-tree.h (struct cp_evaluated): New.\n\n\t* cp-tree.h (struct cp_evaluated): New.\n\nThis patch simplifies the saving/clearing/restoring of\ncp_unevaluated_operand and c_inhibit_evaluation_warnings in the presence of\nmid-block returns.\n\n\t* init.c (get_nsdmi): Use it.\n\t* parser.c (cp_parser_enclosed_template_argument_list): Use it.\n\t* pt.c (coerce_template_parms, tsubst_aggr_type): Use it.\n\nFrom-SVN: r266051", "tree": {"sha": "7e0cf797774e91ae6a17d137439115ace9acb318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0cf797774e91ae6a17d137439115ace9acb318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16e723e600a62428b8ed6ab414931ec7a78aceee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e723e600a62428b8ed6ab414931ec7a78aceee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e723e600a62428b8ed6ab414931ec7a78aceee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e723e600a62428b8ed6ab414931ec7a78aceee/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4bd6d5e1f4496e06ac2d08effa977b191b91a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bd6d5e1f4496e06ac2d08effa977b191b91a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bd6d5e1f4496e06ac2d08effa977b191b91a54"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "066d293e531ef329f226b8af34c7fba3ca538f6c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=16e723e600a62428b8ed6ab414931ec7a78aceee", "patch": "@@ -1,3 +1,10 @@\n+2018-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (struct cp_evaluated): New.\n+\t* init.c (get_nsdmi): Use it.\n+\t* parser.c (cp_parser_enclosed_template_argument_list): Use it.\n+\t* pt.c (coerce_template_parms, tsubst_aggr_type): Use it.\n+\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_clause_final, cp_parser_omp_clause_if): Use"}, {"sha": "9c4664c3aa70721aeb40af344eccc785320efdfd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=16e723e600a62428b8ed6ab414931ec7a78aceee", "patch": "@@ -5231,6 +5231,21 @@ struct cp_unevaluated\n   ~cp_unevaluated ();\n };\n \n+/* The reverse: an RAII class used for nested contexts that are evaluated even\n+   if the enclosing context is not.  */\n+\n+struct cp_evaluated\n+{\n+  int uneval;\n+  int inhibit;\n+  cp_evaluated ()\n+    : uneval(cp_unevaluated_operand), inhibit(c_inhibit_evaluation_warnings)\n+  { cp_unevaluated_operand = c_inhibit_evaluation_warnings = 0; }\n+  ~cp_evaluated ()\n+  { cp_unevaluated_operand = uneval;\n+    c_inhibit_evaluation_warnings = inhibit; }\n+};\n+\n /* in pt.c  */\n \n /* These values are used for the `STRICT' parameter to type_unification and"}, {"sha": "a17e1608c80a2cf9613fc49afd55411f3b292413", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=16e723e600a62428b8ed6ab414931ec7a78aceee", "patch": "@@ -569,8 +569,7 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t}\n       else\n \t{\n-\t  int un = cp_unevaluated_operand;\n-\t  cp_unevaluated_operand = 0;\n+\t  cp_evaluated ev;\n \n \t  location_t sloc = input_location;\n \t  input_location = expr_loc;\n@@ -616,7 +615,6 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t    }\n \n \t  input_location = sloc;\n-\t  cp_unevaluated_operand = un;\n \t}\n     }\n   else"}, {"sha": "465ab8fdbaed0efbaa68a8583dac908ce6c72f9e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=16e723e600a62428b8ed6ab414931ec7a78aceee", "patch": "@@ -27861,8 +27861,6 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n   tree saved_qualifying_scope;\n   tree saved_object_scope;\n   bool saved_greater_than_is_operator_p;\n-  int saved_unevaluated_operand;\n-  int saved_inhibit_evaluation_warnings;\n \n   /* [temp.names]\n \n@@ -27879,10 +27877,7 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n   saved_object_scope = parser->object_scope;\n   /* We need to evaluate the template arguments, even though this\n      template-id may be nested within a \"sizeof\".  */\n-  saved_unevaluated_operand = cp_unevaluated_operand;\n-  cp_unevaluated_operand = 0;\n-  saved_inhibit_evaluation_warnings = c_inhibit_evaluation_warnings;\n-  c_inhibit_evaluation_warnings = 0;\n+  cp_evaluated ev;\n   /* Parse the template-argument-list itself.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER)\n       || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n@@ -27951,8 +27946,6 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n   parser->scope = saved_scope;\n   parser->qualifying_scope = saved_qualifying_scope;\n   parser->object_scope = saved_object_scope;\n-  cp_unevaluated_operand = saved_unevaluated_operand;\n-  c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n \n   return arguments;\n }"}, {"sha": "4cb8238ba121f8461bf511fb57844eee90cea1cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e723e600a62428b8ed6ab414931ec7a78aceee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=16e723e600a62428b8ed6ab414931ec7a78aceee", "patch": "@@ -8256,8 +8256,6 @@ coerce_template_parms (tree parms,\n   tree inner_args;\n   tree new_args;\n   tree new_inner_args;\n-  int saved_unevaluated_operand;\n-  int saved_inhibit_evaluation_warnings;\n \n   /* When used as a boolean value, indicates whether this is a\n      variadic template parameter list. Since it's an int, we can also\n@@ -8374,10 +8372,8 @@ coerce_template_parms (tree parms,\n \n   /* We need to evaluate the template arguments, even though this\n      template-id may be nested within a \"sizeof\".  */\n-  saved_unevaluated_operand = cp_unevaluated_operand;\n-  cp_unevaluated_operand = 0;\n-  saved_inhibit_evaluation_warnings = c_inhibit_evaluation_warnings;\n-  c_inhibit_evaluation_warnings = 0;\n+  cp_evaluated ev;\n+\n   new_inner_args = make_tree_vec (nparms);\n   new_args = add_outermost_template_args (args, new_inner_args);\n   int pack_adjust = 0;\n@@ -8517,8 +8513,6 @@ coerce_template_parms (tree parms,\n \tlost++;\n       TREE_VEC_ELT (new_inner_args, arg_idx - pack_adjust) = arg;\n     }\n-  cp_unevaluated_operand = saved_unevaluated_operand;\n-  c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n \n   if (missing || arg_idx < nargs - variadic_args_p)\n     {\n@@ -12655,14 +12649,9 @@ tsubst_aggr_type (tree t,\n \t  tree argvec;\n \t  tree context;\n \t  tree r;\n-\t  int saved_unevaluated_operand;\n-\t  int saved_inhibit_evaluation_warnings;\n \n \t  /* In \"sizeof(X<I>)\" we need to evaluate \"I\".  */\n-\t  saved_unevaluated_operand = cp_unevaluated_operand;\n-\t  cp_unevaluated_operand = 0;\n-\t  saved_inhibit_evaluation_warnings = c_inhibit_evaluation_warnings;\n-\t  c_inhibit_evaluation_warnings = 0;\n+\t  cp_evaluated ev;\n \n \t  /* First, determine the context for the type we are looking\n \t     up.  */\n@@ -12696,9 +12685,6 @@ tsubst_aggr_type (tree t,\n \t      r = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n \t    }\n \n-\t  cp_unevaluated_operand = saved_unevaluated_operand;\n-\t  c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n-\n \t  return r;\n \t}\n       else"}]}