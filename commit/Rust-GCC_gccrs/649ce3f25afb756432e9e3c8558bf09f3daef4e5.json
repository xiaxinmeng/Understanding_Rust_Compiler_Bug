{"sha": "649ce3f25afb756432e9e3c8558bf09f3daef4e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5Y2UzZjI1YWZiNzU2NDMyZTllM2M4NTU4YmYwOWYzZGFlZjRlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-11-30T02:38:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-11-30T02:38:43Z"}, "message": "dwarf2out.c (add_data_member_location_attribute): Do the right thing for virtual bases.\n\n        * dwarf2out.c (add_data_member_location_attribute): Do the\n        right thing for virtual bases.\n        * dbxout.c (dbxout_type): For a virtual base, print the offset\n        within the vtable.\n\nFrom-SVN: r47469", "tree": {"sha": "c86dc6969fd82952537e402e6e79204e43f4aa63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c86dc6969fd82952537e402e6e79204e43f4aa63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649ce3f25afb756432e9e3c8558bf09f3daef4e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649ce3f25afb756432e9e3c8558bf09f3daef4e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649ce3f25afb756432e9e3c8558bf09f3daef4e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649ce3f25afb756432e9e3c8558bf09f3daef4e5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7c737361bb8906ad2b086b971f581546f0297f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c737361bb8906ad2b086b971f581546f0297f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c737361bb8906ad2b086b971f581546f0297f3"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "013d1f7a01092f2084defd69b2edea72f28da0e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=649ce3f25afb756432e9e3c8558bf09f3daef4e5", "patch": "@@ -1,3 +1,10 @@\n+2001-11-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (add_data_member_location_attribute): Do the\n+\tright thing for virtual bases.\n+\t* dbxout.c (dbxout_type): For a virtual base, print the offset\n+\twithin the vtable.\n+\n 2001-11-29  Zoltan Hidvegi  <hzoli@hzoli.2y.net>\n \n \t* doloop.c (doloop_valid_p): Check for LTU and GTU as well."}, {"sha": "8b14f5d2efe58f8bd3052042328e83699d17a545", "filename": "gcc/dbxout.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=649ce3f25afb756432e9e3c8558bf09f3daef4e5", "patch": "@@ -1492,8 +1492,15 @@ dbxout_type (type, full)\n \t\tputc (TREE_VIA_VIRTUAL (child) ? '1' : '0', asmfile);\n \t\tputc (TREE_VIA_PUBLIC (child) ? '2' : '0', asmfile);\n \t\tCHARS (2);\n-\t\tprint_wide_int (tree_low_cst (BINFO_OFFSET (child), 0)\n-\t\t\t\t* BITS_PER_UNIT);\n+\t\tif (TREE_VIA_VIRTUAL (child))\n+\t\t  /* For a virtual base, print the (negative) offset within\n+\t\t     the vtable where we must look to find the necessary\n+\t\t     adjustment.  */\n+\t\t  print_wide_int (tree_low_cst (BINFO_VPTR_FIELD (child), 0)\n+\t\t\t\t  * BITS_PER_UNIT);\n+\t\telse\n+\t\t  print_wide_int (tree_low_cst (BINFO_OFFSET (child), 0)\n+\t\t\t\t  * BITS_PER_UNIT);\n \t\tputc (',', asmfile);\n \t\tCHARS (1);\n \t\tdbxout_type (BINFO_TYPE (child), 0);"}, {"sha": "55bb26420bd6b9957d1fc79eaeefdd1968ec179e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649ce3f25afb756432e9e3c8558bf09f3daef4e5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=649ce3f25afb756432e9e3c8558bf09f3daef4e5", "patch": "@@ -8407,28 +8407,70 @@ add_data_member_location_attribute (die, decl)\n      dw_die_ref die;\n      tree decl;\n {\n-  unsigned long offset;\n-  dw_loc_descr_ref loc_descr;\n-  enum dwarf_location_atom op;\n+  long offset;\n+  dw_loc_descr_ref loc_descr = 0;\n \n   if (TREE_CODE (decl) == TREE_VEC)\n-    offset = tree_low_cst (BINFO_OFFSET (decl), 0);\n+    {\n+      /* We're working on the TAG_inheritance for a base class.  */\n+\n+      if (TREE_VIA_VIRTUAL (decl))\n+\t{\n+\t  /* For C++ virtual bases we can't just use BINFO_OFFSET, as they\n+\t     aren't at a fixed offset from all (sub)objects of the same\n+\t     type.  We need to extract the appropriate offset from our\n+\t     vtable.  The following dwarf expression means\n+\n+\t       BaseAddr = ObAddr + *((*ObAddr) - Offset)\n+\n+\t     This is specific to the V3 ABI, of course.  */\n+\n+\t  dw_loc_descr_ref tmp;\n+\t  /* Make a copy of the object address.  */\n+\t  tmp = new_loc_descr (DW_OP_dup, 0, 0);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t  /* Extract the vtable address.  */\n+\t  tmp = new_loc_descr (DW_OP_deref, 0, 0);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t  /* Calculate the address of the offset.  */\n+\t  offset = tree_low_cst (BINFO_VPTR_FIELD (decl), 0);\n+\t  if (offset >= 0)\n+\t    abort ();\n+\t  tmp = int_loc_descriptor (-offset);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t  tmp = new_loc_descr (DW_OP_minus, 0, 0);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t  /* Extract the offset.  */\n+\t  tmp = new_loc_descr (DW_OP_deref, 0, 0);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t  /* Add it to the object address.  */\n+\t  tmp = new_loc_descr (DW_OP_plus, 0, 0);\n+\t  add_loc_descr (&loc_descr, tmp);\n+\t}\n+      else\n+\toffset = tree_low_cst (BINFO_OFFSET (decl), 0);\n+    }\n   else\n     offset = field_byte_offset (decl);\n \n-  /* The DWARF2 standard says that we should assume that the structure address\n-     is already on the stack, so we can specify a structure field address\n-     by using DW_OP_plus_uconst.  */\n+  if (! loc_descr)\n+    {\n+      enum dwarf_location_atom op;\n+\n+      /* The DWARF2 standard says that we should assume that the structure address\n+\t is already on the stack, so we can specify a structure field address\n+\t by using DW_OP_plus_uconst.  */\n \n #ifdef MIPS_DEBUGGING_INFO\n-  /* ??? The SGI dwarf reader does not handle the DW_OP_plus_uconst operator\n-     correctly.  It works only if we leave the offset on the stack.  */\n-  op = DW_OP_constu;\n+      /* ??? The SGI dwarf reader does not handle the DW_OP_plus_uconst operator\n+\t correctly.  It works only if we leave the offset on the stack.  */\n+      op = DW_OP_constu;\n #else\n-  op = DW_OP_plus_uconst;\n+      op = DW_OP_plus_uconst;\n #endif\n \n-  loc_descr = new_loc_descr (op, offset, 0);\n+      loc_descr = new_loc_descr (op, offset, 0);\n+    }\n   add_AT_loc (die, DW_AT_data_member_location, loc_descr);\n }\n "}]}