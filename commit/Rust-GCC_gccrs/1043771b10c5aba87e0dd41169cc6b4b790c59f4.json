{"sha": "1043771b10c5aba87e0dd41169cc6b4b790c59f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0Mzc3MWIxMGM1YWJhODdlMGRkNDExNjljYzZiNGI3OTBjNTlmNA==", "commit": {"author": {"name": "Tomas Bily", "email": "tbily@suse.cz", "date": "2008-05-09T14:57:39Z"}, "committer": {"name": "Tomas Bily", "email": "tomby@gcc.gnu.org", "date": "2008-05-09T14:57:39Z"}, "message": "pa.c (reloc_needed): Use CASE_CONVERT.\n\n        * config/pa/pa.c (reloc_needed): Use CASE_CONVERT.\n\n        * tree-cfg.c (verify_expr, verify_gimple_expr): Likewise.\n\n        * tree-ssa-structalias.c (get_constraint_for): Likewise.\n\n        * c-common.c (c_common_truthvalue_conversion): Likewise.\n\n        * tree-object-size.c (compute_object_offset): Likewise.\n\n        * tree-inline.c (estimate_num_insns_1): Likewise.\n\n        * varasm.c (const_hash_1, compare_constant, copy_constant)\n        (compute_reloc_for_constant, output_addressed_constants)\n        (initializer_constant_valid_p): Likewise.\n\n        * c-omp.c (check_omp_for_incr_expr): Likewise.\n\n        * gimplify.c (gimplify_expr): Likewise.\n\n        * c-typeck.c (c_finish_return): Likewise.\n\n        * tree-vectorizer.c (supportable_widening_operation)\n        (supportable_narrowing_operation): Likewise.\n\n        * c-pretty-print.c (pp_c_cast_expression, pp_c_expression):\n        Likewise.\n\n        * matrix-reorg.c (can_calculate_expr_before_stmt): Likewise.\n\n        * expr.c (highest_pow2_factor, expand_expr_real_1): Likewise.\n\n        * dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info)\n        (descr_info_loc): Likewise.\n\n        * tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise.\n\n        * fold-const.c (operand_equal_p, make_range, extract_muldiv_1)\n        (fold_unary): Likewise.\n\n        * builtins.c (get_pointer_alignment): Likewise.\n\n        * tree-scalar-evolution.c (interpret_rhs_modify_stmt)\n        (instantiate_parameters_1): Likewise.\n\n        * tree.c (expr_align, stabilize_reference): Likewise.\n\n        * tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n\n        * tree-ssa-loop-niter.c (derive_constant_upper_bound): Likewise.\n\n        * convert.c (strip_float_extensions): Use CONVERT_EXPR_P.\n\n        * tree-ssa-threadedge.c (simplify_control_stmt_condition):\n        Likewise.\n\n        * config/alpha/alpha.c (va_list_skip_additions): Likewise.\n\n        * c-common.c (c_alignof_expr, check_function_arguments_recurse):\n        Likewise.\n\n        * tree-ssa.c (tree_ssa_useless_type_conversion): Likewise.\n\n        * varasm.c (initializer_constant_valid_p, output_constant):\n        Likewise.\n\n        * tree-ssa-forwprop.c (get_prop_source_stmt, can_propagate_from)\n        (forward_propagate_addr_expr_1, forward_propagate_addr_expr)\n        (forward_propagate_comparison)\n        (tree_ssa_forward_propagate_single_use_vars): Likewise.\n\n        * cfgexpand.c (discover_nonconstant_array_refs_r): Likewise.\n\n        * emit-rtl.c (component_ref_for_mem_expr)\n        (set_mem_attributes_minus_bitpos): Likewise.\n\n        * tree-ssa-phiopt.c (conditional_replacement): Likewise.\n\n        * gimplify.c (gimplify_conversion, goa_lhs_expr_p,\n        gimplify_expr): Likewise.\n\n        * c-typeck.c (default_function_array_conversion,\n        build_indirect_ref)\n        (build_function_call, pointer_diff, build_compound_expr)\n        (c_finish_return): Likewise.\n\n        * tree-vect-analyze.c (vect_determine_vectorization_factor):\n        Likewise.\n\n        * matrix-reorg.c (get_inner_of_cast_expr,\n        may_flatten_matrices_1): Likewise.\n\n        * tree-ssa-ifcombine.c (recognize_single_bit_test): Likewise.\n\n        * expr.c (is_aligning_offset): Likewise.\n\n        * tree-ssa-alias.c (is_escape_site): Likewise.\n\n        * tree-stdarg.c (va_list_counter_bump, check_va_list_escapes)\n        (check_all_va_list_escapes): Likewise.\n\n        * tree-ssa-loop-ivopts.c (determine_base_object)\n        (determine_common_wider_type): Likewise.\n\n        * dojump.c (do_jump): Likewise.\n\n        * tree-ssa-sccvn.c (simplify_unary_expression): Likewise.\n\n        * tree-gimple.c (is_gimple_cast): Likewise.\n\n        * fold-const.c (decode_field_reference, )\n        (fold_sign_changed_comparison, fold_unary, fold_comparison)\n        (fold_binary): Likewise.\n\n        * tree-ssa-alias-warnings.c (find_alias_site_helper)\n        (already_warned_in_frontend_p): Likewise.\n\n        * builtins.c (get_memory_rtx, fold_builtin_next_arg): Likewise.\n\n        * tree.c (really_constant_p, get_unwidened): Likewise.\n\n        * tree-ssa-loop-niter.c (expand_simple_operations): Likewise.\n\n        * tree-ssa-loop-im.c (rewrite_bittest): Likewise.\n\n        * tree-vrp.c (register_edge_assert_for_2,\n        register_edge_assert_for_1): Likewise.\n\n        * tree.h (STRIP_NOPS, STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Use\n        CONVERT_EXPR_P.\n        (CONVERT_EXPR_P): Define.\n        (CASE_CONVERT): Define.\n\nFrom-SVN: r135114", "tree": {"sha": "915acaa0ac91d36f503d63fe89c4932a2091a76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/915acaa0ac91d36f503d63fe89c4932a2091a76a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1043771b10c5aba87e0dd41169cc6b4b790c59f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1043771b10c5aba87e0dd41169cc6b4b790c59f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1043771b10c5aba87e0dd41169cc6b4b790c59f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1043771b10c5aba87e0dd41169cc6b4b790c59f4/comments", "author": null, "committer": null, "parents": [{"sha": "5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b"}], "stats": {"total": 410, "additions": 200, "deletions": 210}, "files": [{"sha": "9c2f7617c6ae701e7272c2019cac5098c50bfd4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1,3 +1,77 @@\n+2008-05-09  Tomas Bily  <tbily@suse.cz>\n+\n+\t* config/pa/pa.c (reloc_needed): Use CASE_CONVERT.\n+\t* tree-cfg.c (verify_expr, verify_gimple_expr): Likewise.\n+\t* tree-ssa-structalias.c (get_constraint_for): Likewise.\n+\t* c-common.c (c_common_truthvalue_conversion): Likewise.\n+\t* tree-object-size.c (compute_object_offset): Likewise.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t* varasm.c (const_hash_1, compare_constant, copy_constant)\n+\t(compute_reloc_for_constant, output_addressed_constants)\n+\t(initializer_constant_valid_p): Likewise.\n+\t* c-omp.c (check_omp_for_incr_expr): Likewise.\n+\t* gimplify.c (gimplify_expr): Likewise.\n+\t* c-typeck.c (c_finish_return): Likewise.\n+\t* tree-vectorizer.c (supportable_widening_operation)\n+\t(supportable_narrowing_operation): Likewise.\n+\t* c-pretty-print.c (pp_c_cast_expression, pp_c_expression): Likewise.\n+\t* matrix-reorg.c (can_calculate_expr_before_stmt): Likewise.\n+\t* expr.c (highest_pow2_factor, expand_expr_real_1): Likewise.\n+\t* dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info)\n+\t(descr_info_loc): Likewise.\n+\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise.\n+\t* fold-const.c (operand_equal_p, make_range, extract_muldiv_1)\n+\t(fold_unary): Likewise.\n+\t* builtins.c (get_pointer_alignment): Likewise.\n+\t* tree-scalar-evolution.c (interpret_rhs_modify_stmt)\n+\t(instantiate_parameters_1): Likewise.\n+\t* tree.c (expr_align, stabilize_reference): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n+\t* tree-ssa-loop-niter.c (derive_constant_upper_bound): Likewise.\n+\t* convert.c (strip_float_extensions): Use CONVERT_EXPR_P.\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Likewise.\n+\t* config/alpha/alpha.c (va_list_skip_additions): Likewise.\n+\t* c-common.c (c_alignof_expr, check_function_arguments_recurse): Likewise.\n+\t* tree-ssa.c (tree_ssa_useless_type_conversion): Likewise.\n+\t* varasm.c (initializer_constant_valid_p, output_constant): Likewise.\n+\t* tree-ssa-forwprop.c (get_prop_source_stmt, can_propagate_from)\n+\t(forward_propagate_addr_expr_1, forward_propagate_addr_expr)\n+\t(forward_propagate_comparison)\n+\t(tree_ssa_forward_propagate_single_use_vars): Likewise.\n+\t* cfgexpand.c (discover_nonconstant_array_refs_r): Likewise.\n+\t* emit-rtl.c (component_ref_for_mem_expr)\n+\t(set_mem_attributes_minus_bitpos): Likewise.\n+\t* tree-ssa-phiopt.c (conditional_replacement): Likewise.\n+\t* gimplify.c (gimplify_conversion, goa_lhs_expr_p, gimplify_expr): Likewise.\n+\t* c-typeck.c (default_function_array_conversion, build_indirect_ref)\n+\t(build_function_call, pointer_diff, build_compound_expr)\n+\t(c_finish_return): Likewise.\n+\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Likewise.\n+\t* matrix-reorg.c (get_inner_of_cast_expr, may_flatten_matrices_1): Likewise.\n+\t* tree-ssa-ifcombine.c (recognize_single_bit_test): Likewise.\n+\t* expr.c (is_aligning_offset): Likewise.\n+\t* tree-ssa-alias.c (is_escape_site): Likewise.\n+\t* tree-stdarg.c (va_list_counter_bump, check_va_list_escapes)\n+\t(check_all_va_list_escapes): Likewise.\n+\t* tree-ssa-loop-ivopts.c (determine_base_object)\n+\t(determine_common_wider_type): Likewise.\n+\t* dojump.c (do_jump): Likewise.\n+\t* tree-ssa-sccvn.c (simplify_unary_expression): Likewise.\n+\t* tree-gimple.c (is_gimple_cast): Likewise.\n+\t* fold-const.c (decode_field_reference, )\n+\t(fold_sign_changed_comparison, fold_unary, fold_comparison)\n+\t(fold_binary): Likewise.\n+\t* tree-ssa-alias-warnings.c (find_alias_site_helper)\n+\t(already_warned_in_frontend_p): Likewise.\n+\t* builtins.c (get_memory_rtx, fold_builtin_next_arg): Likewise.\n+\t* tree.c (really_constant_p, get_unwidened): Likewise.\n+\t* tree-ssa-loop-niter.c (expand_simple_operations): Likewise.\n+\t* tree-ssa-loop-im.c (rewrite_bittest): Likewise.\n+\t* tree-vrp.c (register_edge_assert_for_2, register_edge_assert_for_1): Likewise.\n+\t* tree.h (STRIP_NOPS, STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Use CONVERT_EXPR_P.\n+\t(CONVERT_EXPR_P): Define.\n+\t(CASE_CONVERT): Define.\n+\t\n 2008-05-08  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \tPR middle-end/36117"}, {"sha": "7e1ca21fc88c45ef981a8d1531ee50b1535ccdd8", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -279,8 +279,7 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n     {\n       switch (TREE_CODE (exp))\n \t{\n-\tcase NOP_EXPR:\n-\tcase CONVERT_EXPR:\n+\tCASE_CONVERT:\n \t  exp = TREE_OPERAND (exp, 0);\n \t  if (! POINTER_TYPE_P (TREE_TYPE (exp)))\n \t    return align;\n@@ -1077,7 +1076,7 @@ get_memory_rtx (tree exp, tree len)\n   /* Get an expression we can use to find the attributes to assign to MEM.\n      If it is an ADDR_EXPR, use the operand.  Otherwise, dereference it if\n      we can.  First remove any nops.  */\n-  while ((TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR)\n+  while (CONVERT_EXPR_P (exp)\n \t && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (exp, 0))))\n     exp = TREE_OPERAND (exp, 0);\n \n@@ -1107,8 +1106,7 @@ get_memory_rtx (tree exp, tree len)\n \t  tree inner = exp;\n \n \t  while (TREE_CODE (inner) == ARRAY_REF\n-\t\t || TREE_CODE (inner) == NOP_EXPR\n-\t\t || TREE_CODE (inner) == CONVERT_EXPR\n+\t\t || CONVERT_EXPR_P (inner)\n \t\t || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n \t\t || TREE_CODE (inner) == SAVE_EXPR)\n \t    inner = TREE_OPERAND (inner, 0);\n@@ -11368,8 +11366,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t is not quite the same as STRIP_NOPS.  It does more.\n \t We must also strip off INDIRECT_EXPR for C++ reference\n \t parameters.  */\n-      while (TREE_CODE (arg) == NOP_EXPR\n-\t     || TREE_CODE (arg) == CONVERT_EXPR\n+      while (CONVERT_EXPR_P (arg)\n \t     || TREE_CODE (arg) == INDIRECT_REF)\n \targ = TREE_OPERAND (arg, 0);\n       if (arg != last_parm)"}, {"sha": "415807f1c5b750601b6e21a02d78e6c08e8526df", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -3072,8 +3072,7 @@ c_common_truthvalue_conversion (tree expr)\n \t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n \t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2)));\n \n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n \t since that affects how `default_conversion' will behave.  */\n       if (TREE_CODE (TREE_TYPE (expr)) == REFERENCE_TYPE\n@@ -3456,7 +3455,7 @@ c_alignof_expr (tree expr)\n       tree best = t;\n       int bestalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n \n-      while ((TREE_CODE (t) == NOP_EXPR || TREE_CODE (t) == CONVERT_EXPR)\n+      while (CONVERT_EXPR_P (t)\n \t     && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == POINTER_TYPE)\n \t{\n \t  int thisalign;\n@@ -6566,7 +6565,7 @@ check_function_arguments_recurse (void (*callback)\n \t\t\t\t  void *ctx, tree param,\n \t\t\t\t  unsigned HOST_WIDE_INT param_num)\n {\n-  if ((TREE_CODE (param) == NOP_EXPR || TREE_CODE (param) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (param)\n       && (TYPE_PRECISION (TREE_TYPE (param))\n \t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (param, 0)))))\n     {"}, {"sha": "cdca2bcd4a9cf852b688629cff4608542534ba08", "filename": "gcc/c-omp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -171,8 +171,7 @@ check_omp_for_incr_expr (tree exp, tree decl)\n \n   switch (TREE_CODE (exp))\n     {\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       t = check_omp_for_incr_expr (TREE_OPERAND (exp, 0), decl);\n       if (t != error_mark_node)\n         return fold_convert (TREE_TYPE (exp), t);"}, {"sha": "29e987d366000d808aaa4e3ffd6733cf10548dd6", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1555,8 +1555,7 @@ pp_c_cast_expression (c_pretty_printer *pp, tree e)\n     {\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       pp_c_type_cast (pp, TREE_TYPE (e));\n       pp_c_cast_expression (pp, TREE_OPERAND (e, 0));\n       break;\n@@ -1947,8 +1946,7 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n \n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       pp_c_cast_expression (pp, e);\n       break;\n "}, {"sha": "b52a349ac6fdb08578e73c94d616f99c9872b53e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1657,8 +1657,7 @@ default_function_array_conversion (struct c_expr exp)\n \tbool lvalue_array_p;\n \n \twhile ((TREE_CODE (exp.value) == NON_LVALUE_EXPR\n-\t\t|| TREE_CODE (exp.value) == NOP_EXPR\n-\t\t|| TREE_CODE (exp.value) == CONVERT_EXPR)\n+\t\t|| CONVERT_EXPR_P (exp.value))\n \t       && TREE_TYPE (TREE_OPERAND (exp.value, 0)) == type)\n \t  {\n \t    if (TREE_CODE (exp.value) == NON_LVALUE_EXPR)\n@@ -1978,8 +1977,7 @@ build_indirect_ref (tree ptr, const char *errorstring)\n \n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n-      if (TREE_CODE (pointer) == CONVERT_EXPR\n-          || TREE_CODE (pointer) == NOP_EXPR\n+      if (CONVERT_EXPR_P (pointer)\n           || TREE_CODE (pointer) == VIEW_CONVERT_EXPR)\n \t{\n \t  /* If a warning is issued, mark it to avoid duplicates from\n@@ -2398,8 +2396,7 @@ build_function_call (tree function, tree params)\n      expression if necessary.  This has the nice side-effect to prevent\n      the tree-inliner from generating invalid assignment trees which may\n      blow up in the RTL expander later.  */\n-  if ((TREE_CODE (function) == NOP_EXPR\n-       || TREE_CODE (function) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (function)\n       && TREE_CODE (tem = TREE_OPERAND (function, 0)) == ADDR_EXPR\n       && TREE_CODE (tem = TREE_OPERAND (tem, 0)) == FUNCTION_DECL\n       && !comptypes (fntype, TREE_TYPE (tem)))\n@@ -2821,13 +2818,13 @@ pointer_diff (tree op0, tree op1)\n      different mode in place.)\n      So first try to find a common term here 'by hand'; we want to cover\n      at least the cases that occur in legal static initializers.  */\n-  if ((TREE_CODE (op0) == NOP_EXPR || TREE_CODE (op0) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (op0)\n       && (TYPE_PRECISION (TREE_TYPE (op0))\n \t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n     con0 = TREE_OPERAND (op0, 0);\n   else\n     con0 = op0;\n-  if ((TREE_CODE (op1) == NOP_EXPR || TREE_CODE (op1) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (op1)\n       && (TYPE_PRECISION (TREE_TYPE (op1))\n \t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op1, 0)))))\n     con1 = TREE_OPERAND (op1, 0);\n@@ -3555,13 +3552,11 @@ build_compound_expr (tree expr1, tree expr2)\n       if (warn_unused_value)\n \t{\n \t  if (VOID_TYPE_P (TREE_TYPE (expr1))\n-\t      && (TREE_CODE (expr1) == NOP_EXPR\n-\t\t  || TREE_CODE (expr1) == CONVERT_EXPR))\n+\t      && CONVERT_EXPR_P (expr1))\n \t    ; /* (void) a, b */\n \t  else if (VOID_TYPE_P (TREE_TYPE (expr1))\n \t\t   && TREE_CODE (expr1) == COMPOUND_EXPR\n-\t\t   && (TREE_CODE (TREE_OPERAND (expr1, 1)) == CONVERT_EXPR\n-\t\t       || TREE_CODE (TREE_OPERAND (expr1, 1)) == NOP_EXPR))\n+\t\t   && CONVERT_EXPR_P (TREE_OPERAND (expr1, 1)))\n \t    ; /* (void) a, (void) b, c */\n \t  else\n \t    warning (OPT_Wunused_value, \n@@ -7125,7 +7120,7 @@ c_finish_return (tree retval)\n \t{\n \t  switch (TREE_CODE (inner))\n \t    {\n-\t    case NOP_EXPR:   case NON_LVALUE_EXPR:  case CONVERT_EXPR:\n+\t    CASE_CONVERT:   case NON_LVALUE_EXPR:\n \t    case PLUS_EXPR:\n \t      inner = TREE_OPERAND (inner, 0);\n \t      continue;\n@@ -7138,9 +7133,8 @@ c_finish_return (tree retval)\n \t\ttree op1 = TREE_OPERAND (inner, 1);\n \n \t\twhile (!POINTER_TYPE_P (TREE_TYPE (op1))\n-\t\t       && (TREE_CODE (op1) == NOP_EXPR\n-\t\t\t   || TREE_CODE (op1) == NON_LVALUE_EXPR\n-\t\t\t   || TREE_CODE (op1) == CONVERT_EXPR))\n+\t\t       && (CONVERT_EXPR_P (op1)\n+\t\t\t   || TREE_CODE (op1) == NON_LVALUE_EXPR))\n \t\t  op1 = TREE_OPERAND (op1, 0);\n \n \t\tif (POINTER_TYPE_P (TREE_TYPE (op1)))"}, {"sha": "3e36985b3d8112cb9d353d6beab9acabd2285155", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1792,8 +1792,7 @@ discover_nonconstant_array_refs_r (tree * tp, int *walk_subtrees,\n \t     || TREE_CODE (t) == REALPART_EXPR\n \t     || TREE_CODE (t) == IMAGPART_EXPR\n \t     || TREE_CODE (t) == VIEW_CONVERT_EXPR\n-\t     || TREE_CODE (t) == NOP_EXPR\n-\t     || TREE_CODE (t) == CONVERT_EXPR)\n+\t     || CONVERT_EXPR_P (t))\n \tt = TREE_OPERAND (t, 0);\n \n       if (TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)"}, {"sha": "f878e866f5fda0f20d0f7603860d2fa4870088e7", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -5825,8 +5825,7 @@ va_list_skip_additions (tree lhs)\n       if (TREE_CODE (rhs) == WITH_SIZE_EXPR)\n \trhs = TREE_OPERAND (rhs, 0);\n \n-      if ((TREE_CODE (rhs) != NOP_EXPR\n-\t   && TREE_CODE (rhs) != CONVERT_EXPR\n+      if (((!CONVERT_EXPR_P (rhs))\n \t   && ((TREE_CODE (rhs) != PLUS_EXPR\n \t\t&& TREE_CODE (rhs) != POINTER_PLUS_EXPR)\n \t       || TREE_CODE (TREE_OPERAND (rhs, 1)) != INTEGER_CST"}, {"sha": "10c50ffcf12d71b6769f7d138ee7aacbd17e3a3e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2103,8 +2103,7 @@ reloc_needed (tree exp)\n       reloc |= reloc_needed (TREE_OPERAND (exp, 1));\n       break;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case NON_LVALUE_EXPR:\n       reloc = reloc_needed (TREE_OPERAND (exp, 0));\n       break;"}, {"sha": "0fef3a2e7465a42fe0b327ca20af351984c0230a", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -98,8 +98,7 @@ strip_float_extensions (tree exp)\n \treturn build_real (type, real_value_truncate (TYPE_MODE (type), orig));\n     }\n \n-  if (TREE_CODE (exp) != NOP_EXPR\n-      && TREE_CODE (exp) != CONVERT_EXPR)\n+  if (!CONVERT_EXPR_P (exp))\n     return exp;\n \n   sub = TREE_OPERAND (exp, 0);"}, {"sha": "4337348195533fb4c5804cc869f0bc5ed01e608f", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -218,8 +218,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t  rtx set_label, clr_label;\n \n \t  /* Strip narrowing integral type conversions.  */\n-\t  while ((TREE_CODE (exp0) == NOP_EXPR\n-\t\t  || TREE_CODE (exp0) == CONVERT_EXPR)\n+\t  while (CONVERT_EXPR_P (exp0)\n \t\t && TREE_OPERAND (exp0, 0) != error_mark_node\n \t\t && TYPE_PRECISION (TREE_TYPE (exp0))\n \t\t    <= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (exp0, 0))))"}, {"sha": "145b8fefaef48196a5db7a8b16ed5556e932806c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -9598,8 +9598,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n     case COMPOUND_EXPR:\n       return loc_descriptor_from_tree_1 (TREE_OPERAND (loc, 1), want_address);\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n     case SAVE_EXPR:\n     case GIMPLE_MODIFY_STMT:\n@@ -11133,8 +11132,7 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \tadd_AT_unsigned (subrange_die, bound_attr, tree_low_cst (bound, 0));\n       break;\n \n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       add_bound_info (subrange_die, bound_attr, TREE_OPERAND (bound, 0));\n       break;\n@@ -11818,8 +11816,7 @@ descr_info_loc (tree val, tree base_decl)\n \n   switch (TREE_CODE (val))\n     {\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       return descr_info_loc (TREE_OPERAND (val, 0), base_decl);\n     case INTEGER_CST:\n       if (host_integerp (val, 0))"}, {"sha": "45a256347c00419da5580abbeb50a6e3498dd2cd", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1431,7 +1431,7 @@ component_ref_for_mem_expr (tree ref)\n     {\n       /* Now remove any conversions: they don't change what the underlying\n \t object is.  Likewise for SAVE_EXPR.  */\n-      while (TREE_CODE (inner) == NOP_EXPR || TREE_CODE (inner) == CONVERT_EXPR\n+      while (CONVERT_EXPR_P (inner)\n \t     || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n \t     || TREE_CODE (inner) == SAVE_EXPR)\n \tinner = TREE_OPERAND (inner, 0);\n@@ -1561,7 +1561,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \n       /* Now remove any conversions: they don't change what the underlying\n \t object is.  Likewise for SAVE_EXPR.  */\n-      while (TREE_CODE (t) == NOP_EXPR || TREE_CODE (t) == CONVERT_EXPR\n+      while (CONVERT_EXPR_P (t)\n \t     || TREE_CODE (t) == VIEW_CONVERT_EXPR\n \t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);"}, {"sha": "f3d22d82db8d15daa34817e5140b8de8b1fc5327", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -6600,7 +6600,7 @@ highest_pow2_factor (const_tree exp)\n \t}\n       break;\n \n-    case NOP_EXPR:  case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case SAVE_EXPR:\n       return highest_pow2_factor (TREE_OPERAND (exp, 0));\n \n@@ -8018,8 +8018,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_call (exp, target, ignore);\n \n     case PAREN_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       if (TREE_OPERAND (exp, 0) == error_mark_node)\n \treturn const0_rtx;\n \n@@ -9410,8 +9409,7 @@ static int\n is_aligning_offset (const_tree offset, const_tree exp)\n {\n   /* Strip off any conversions.  */\n-  while (TREE_CODE (offset) == NOP_EXPR\n-\t || TREE_CODE (offset) == CONVERT_EXPR)\n+  while (CONVERT_EXPR_P (offset))\n     offset = TREE_OPERAND (offset, 0);\n \n   /* We must now have a BIT_AND_EXPR with a constant that is one less than\n@@ -9426,16 +9424,14 @@ is_aligning_offset (const_tree offset, const_tree exp)\n   /* Look at the first operand of BIT_AND_EXPR and strip any conversion.\n      It must be NEGATE_EXPR.  Then strip any more conversions.  */\n   offset = TREE_OPERAND (offset, 0);\n-  while (TREE_CODE (offset) == NOP_EXPR\n-\t || TREE_CODE (offset) == CONVERT_EXPR)\n+  while (CONVERT_EXPR_P (offset))\n     offset = TREE_OPERAND (offset, 0);\n \n   if (TREE_CODE (offset) != NEGATE_EXPR)\n     return 0;\n \n   offset = TREE_OPERAND (offset, 0);\n-  while (TREE_CODE (offset) == NOP_EXPR\n-\t || TREE_CODE (offset) == CONVERT_EXPR)\n+  while (CONVERT_EXPR_P (offset))\n     offset = TREE_OPERAND (offset, 0);\n \n   /* This must now be the address of EXP.  */"}, {"sha": "358a6166f177f957c6d881cfcc586ba5d0c25519", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -3168,8 +3168,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       /* Two conversions are equal only if signedness and modes match.  */\n       switch (TREE_CODE (arg0))\n         {\n-        case NOP_EXPR:\n-        case CONVERT_EXPR:\n+\tCASE_CONVERT:\n         case FIX_TRUNC_EXPR:\n \t  if (TYPE_UNSIGNED (TREE_TYPE (arg0))\n \t      != TYPE_UNSIGNED (TREE_TYPE (arg1)))\n@@ -3904,8 +3903,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   /* We are interested in the bare arrangement of bits, so strip everything\n      that doesn't affect the machine mode.  However, record the type of the\n      outermost expression if it may matter below.  */\n-  if (TREE_CODE (exp) == NOP_EXPR\n-      || TREE_CODE (exp) == CONVERT_EXPR\n+  if (CONVERT_EXPR_P (exp)\n       || TREE_CODE (exp) == NON_LVALUE_EXPR)\n     outer_type = TREE_TYPE (exp);\n   STRIP_NOPS (exp);\n@@ -4316,7 +4314,7 @@ make_range (tree exp, int *pin_p, tree *plow, tree *phigh,\n \t  exp = arg0;\n \t  continue;\n \n-\tcase NOP_EXPR:  case NON_LVALUE_EXPR:  case CONVERT_EXPR:\n+\tCASE_CONVERT: case NON_LVALUE_EXPR:\n \t  if (TYPE_PRECISION (arg0_type) > TYPE_PRECISION (exp_type))\n \t    break;\n \n@@ -5728,7 +5726,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t\t\t    fold_convert (ctype, c), 0);\n       break;\n \n-    case CONVERT_EXPR:  case NON_LVALUE_EXPR:  case NOP_EXPR:\n+    CASE_CONVERT: case NON_LVALUE_EXPR:\n       /* If op0 is an expression ...  */\n       if ((COMPARISON_CLASS_P (op0)\n \t   || UNARY_CLASS_P (op0)\n@@ -6804,8 +6802,7 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n   tree arg0_inner;\n   tree inner_type, outer_type;\n \n-  if (TREE_CODE (arg0) != NOP_EXPR\n-      && TREE_CODE (arg0) != CONVERT_EXPR)\n+  if (!CONVERT_EXPR_P (arg0))\n     return NULL_TREE;\n \n   outer_type = TREE_TYPE (arg0);\n@@ -6830,8 +6827,7 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n     return NULL_TREE;\n \n   if (TREE_CODE (arg1) != INTEGER_CST\n-      && !((TREE_CODE (arg1) == NOP_EXPR\n-\t    || TREE_CODE (arg1) == CONVERT_EXPR)\n+      && !(CONVERT_EXPR_P (arg1)\n \t   && TREE_TYPE (TREE_OPERAND (arg1, 0)) == inner_type))\n     return NULL_TREE;\n \n@@ -7726,9 +7722,8 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \treturn fold_convert (type, op0);\n       return NULL_TREE;\n \n-    case NOP_EXPR:\n+    CASE_CONVERT:\n     case FLOAT_EXPR:\n-    case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n       if (TREE_TYPE (op0) == type)\n \treturn op0;\n@@ -7740,8 +7735,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t\t\t    TREE_OPERAND (op0, 1));\n \n       /* Handle cases of two conversions in a row.  */\n-      if (TREE_CODE (op0) == NOP_EXPR\n-\t  || TREE_CODE (op0) == CONVERT_EXPR)\n+      if (CONVERT_EXPR_P (op0))\n \t{\n \t  tree inside_type = TREE_TYPE (TREE_OPERAND (op0, 0));\n \t  tree inter_type = TREE_TYPE (op0);\n@@ -7936,8 +7930,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n       if (INTEGRAL_TYPE_P (type)\n \t  && TREE_CODE (op0) == BIT_NOT_EXPR\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t  && (TREE_CODE (TREE_OPERAND (op0, 0)) == NOP_EXPR\n-\t      || TREE_CODE (TREE_OPERAND (op0, 0)) == CONVERT_EXPR)\n+\t  && CONVERT_EXPR_P (TREE_OPERAND (op0, 0))\n \t  && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (op0)))\n \t{\n \t  tem = TREE_OPERAND (TREE_OPERAND (op0, 0), 0);\n@@ -7993,8 +7986,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \treturn fold_convert (type, op0);\n \n       /* Strip inner integral conversions that do not change the precision.  */\n-      if ((TREE_CODE (op0) == NOP_EXPR\n-\t   || TREE_CODE (op0) == CONVERT_EXPR)\n+      if (CONVERT_EXPR_P (op0)\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (op0))\n \t      || POINTER_TYPE_P (TREE_TYPE (op0)))\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0)))\n@@ -8911,8 +8903,7 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n     }\n \n   if (TREE_CODE (TREE_TYPE (arg0)) == INTEGER_TYPE\n-      && (TREE_CODE (arg0) == NOP_EXPR\n-\t  || TREE_CODE (arg0) == CONVERT_EXPR))\n+      && CONVERT_EXPR_P (arg0))\n     {\n       /* If we are widening one operand of an integer comparison,\n \t see if the other operand is similarly being widened.  Perhaps we\n@@ -12666,8 +12657,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \n       if ((code == LT_EXPR || code == GE_EXPR)\n \t  && TYPE_UNSIGNED (TREE_TYPE (arg0))\n-\t  && (TREE_CODE (arg1) == NOP_EXPR\n-\t      || TREE_CODE (arg1) == CONVERT_EXPR)\n+\t  && CONVERT_EXPR_P (arg1)\n \t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == LSHIFT_EXPR\n \t  && integer_onep (TREE_OPERAND (TREE_OPERAND (arg1, 0), 0)))\n \treturn"}, {"sha": "2d0ecbf20d93f16d0fe237d109efb273ecf1b60f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1649,8 +1649,7 @@ static enum gimplify_status\n gimplify_conversion (tree *expr_p)\n {\n   tree tem;\n-  gcc_assert (TREE_CODE (*expr_p) == NOP_EXPR\n-\t      || TREE_CODE (*expr_p) == CONVERT_EXPR);\n+  gcc_assert (CONVERT_EXPR_P (*expr_p));\n   \n   /* Then strip away all but the outermost conversion.  */\n   STRIP_SIGN_NOPS (TREE_OPERAND (*expr_p, 0));\n@@ -1676,7 +1675,7 @@ gimplify_conversion (tree *expr_p)\n \n   /* If we still have a conversion at the toplevel,\n      then canonicalize some constructs.  */\n-  if (TREE_CODE (*expr_p) == NOP_EXPR || TREE_CODE (*expr_p) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (*expr_p))\n     {\n       tree sub = TREE_OPERAND (*expr_p, 0);\n \n@@ -5467,8 +5466,7 @@ goa_lhs_expr_p (tree expr, tree addr)\n   /* Also include casts to other type variants.  The C front end is fond\n      of adding these for e.g. volatile variables.  This is like \n      STRIP_TYPE_NOPS but includes the main variant lookup.  */\n-  while ((TREE_CODE (expr) == NOP_EXPR\n-          || TREE_CODE (expr) == CONVERT_EXPR\n+  while ((CONVERT_EXPR_P (expr)\n           || TREE_CODE (expr) == NON_LVALUE_EXPR)\n          && TREE_OPERAND (expr, 0) != error_mark_node\n          && (TYPE_MAIN_VARIANT (TREE_TYPE (expr))\n@@ -5479,8 +5477,7 @@ goa_lhs_expr_p (tree expr, tree addr)\n     {\n       expr = TREE_OPERAND (expr, 0);\n       while (expr != addr\n-\t     && (TREE_CODE (expr) == NOP_EXPR\n-\t\t || TREE_CODE (expr) == CONVERT_EXPR\n+\t     && (CONVERT_EXPR_P (expr)\n \t\t || TREE_CODE (expr) == NON_LVALUE_EXPR)\n \t     && TREE_CODE (expr) == TREE_CODE (addr)\n \t     && TYPE_MAIN_VARIANT (TREE_TYPE (expr))\n@@ -5765,8 +5762,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  ret = gimplify_va_arg_expr (expr_p, pre_p, post_p);\n \t  break;\n \n-\tcase CONVERT_EXPR:\n-\tcase NOP_EXPR:\n+\tCASE_CONVERT:\n \t  if (IS_EMPTY_STMT (*expr_p))\n \t    {\n \t      ret = GS_ALL_DONE;"}, {"sha": "e77023400e0771af5ae80f2da8b0f2290ebf1d05", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -410,7 +410,7 @@ mtt_info_eq (const void *mtt1, const void *mtt2)\n static tree\n get_inner_of_cast_expr (tree t)\n {\n-  while (TREE_CODE (t) == CONVERT_EXPR || TREE_CODE (t) == NOP_EXPR\n+  while (CONVERT_EXPR_P (t)\n \t || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n     t = TREE_OPERAND (t, 0);\n \n@@ -428,7 +428,7 @@ may_flatten_matrices_1 (tree stmt)\n     {\n     case GIMPLE_MODIFY_STMT:\n       t = GIMPLE_STMT_OPERAND (stmt, 1);\n-      while (TREE_CODE (t) == CONVERT_EXPR || TREE_CODE (t) == NOP_EXPR)\n+      while (CONVERT_EXPR_P (t))\n \t{\n \t  if (TREE_TYPE (t) && POINTER_TYPE_P (TREE_TYPE (t)))\n \t    {\n@@ -1442,8 +1442,7 @@ can_calculate_expr_before_stmt (tree expr, sbitmap visited)\n \t  }\n \treturn res;\n       }\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       res = can_calculate_expr_before_stmt (TREE_OPERAND (expr, 0), visited);\n       if (res != NULL_TREE)\n \treturn build1 (TREE_CODE (expr), TREE_TYPE (expr), res);"}, {"sha": "340c7a257ce806f362cfbe9a6badeb671b251f93", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -3252,8 +3252,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case NON_LVALUE_EXPR:\n \tgcc_unreachable ();\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n@@ -3613,8 +3612,7 @@ verify_gimple_expr (tree expr)\n   /* Special codes we cannot handle via their class.  */\n   switch (TREE_CODE (expr))\n     {\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       {\n \ttree op = TREE_OPERAND (expr, 0);\n \tif (!is_gimple_val (op))"}, {"sha": "da84777725ad301984a547d6e9415ce1e1773334", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -515,8 +515,7 @@ is_gimple_min_lval (tree t)\n bool\n is_gimple_cast (tree t)\n {\n-  return (TREE_CODE (t) == NOP_EXPR\n-\t  || TREE_CODE (t) == CONVERT_EXPR\n+  return (CONVERT_EXPR_P (t)\n           || TREE_CODE (t) == FIX_TRUNC_EXPR);\n }\n "}, {"sha": "e7fed4f072375479bc7bd242e8c6f3debd300791", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2220,8 +2220,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case BIND_EXPR:\n     case WITH_CLEANUP_EXPR:\n     case PAREN_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n     case SAVE_EXPR:\n     case ADDR_EXPR:"}, {"sha": "c1b3b5f1264582b9dfb445d968910fd32726f1bd", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -110,8 +110,7 @@ compute_object_offset (const_tree expr, const_tree var)\n       break;\n \n     case REALPART_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n       return compute_object_offset (TREE_OPERAND (expr, 0), var);"}, {"sha": "69e5e73bda81bf27f0be280ab108c5ef2d9cfe3e", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1422,8 +1422,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case FIXED_CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       type = TREE_TYPE (node);\n       op0 = TREE_OPERAND (node, 0);\n       if (type != TREE_TYPE (op0))\n@@ -2452,8 +2451,7 @@ op_prio (const_tree op)\n     case INDIRECT_REF:\n     case ADDR_EXPR:\n     case FLOAT_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case FIX_TRUNC_EXPR:\n     case TARGET_EXPR:\n       return 14;"}, {"sha": "b4db2f92281457d6c6d1db86a5f7a45b069858f4", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1675,8 +1675,7 @@ interpret_rhs_modify_stmt (struct loop *loop, tree at_stmt,\n \t\t\t   at_stmt);\n       break;\n       \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       opnd10 = TREE_OPERAND (opnd1, 0);\n       chrec10 = analyze_scalar_evolution (loop, opnd10);\n       res = chrec_convert (type, chrec10, at_stmt);\n@@ -2115,8 +2114,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n \t}\n       return chrec;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n \t\t\t\t      flags, cache, size_expr);\n       if (op0 == chrec_dont_know)"}, {"sha": "aacaa0ac0ee8647aedbc594d8cfed36bd0e7858a", "filename": "gcc/tree-ssa-alias-warnings.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-alias-warnings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-alias-warnings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias-warnings.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -258,8 +258,7 @@ find_alias_site_helper (tree var ATTRIBUTE_UNUSED, tree stmt, void *data)\n   tree rhs_pointer = get_rhs (stmt);\n   tree to_match = NULL_TREE;\n \n-  while (TREE_CODE (rhs_pointer) == NOP_EXPR\n-         || TREE_CODE (rhs_pointer) == CONVERT_EXPR\n+  while (CONVERT_EXPR_P (rhs_pointer)\n          || TREE_CODE (rhs_pointer) == VIEW_CONVERT_EXPR)\n     rhs_pointer = TREE_OPERAND (rhs_pointer, 0);\n \n@@ -720,8 +719,7 @@ already_warned_in_frontend_p (tree stmt)\n \n   rhs_pointer = get_rhs (stmt);\n \n-  if ((TREE_CODE (rhs_pointer) == NOP_EXPR\n-       || TREE_CODE (rhs_pointer) == CONVERT_EXPR\n+  if ((CONVERT_EXPR_P (rhs_pointer)\n        || TREE_CODE (rhs_pointer) == VIEW_CONVERT_EXPR)\n       && TREE_NO_WARNING (rhs_pointer))\n     return true;"}, {"sha": "ddd793752895c3b3483eedf0373d72a59cfa03ef", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2864,8 +2864,7 @@ is_escape_site (tree stmt)\n       if (lhs == NULL_TREE)\n \treturn ESCAPE_UNKNOWN;\n \n-      if (TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == NOP_EXPR\n-\t  || TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == CONVERT_EXPR\n+      if (CONVERT_EXPR_P (GIMPLE_STMT_OPERAND (stmt, 1))\n \t  || TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == VIEW_CONVERT_EXPR)\n \t{\n \t  tree from"}, {"sha": "cf6cf04ac1ba9c36938ffefcbf0797a8e428aac3", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -234,8 +234,7 @@ get_prop_source_stmt (tree name, bool single_use_only, bool *single_use_p)\n \t/* We can look through pointer conversions in the search\n \t   for a useful stmt for the comparison folding.  */\n \trhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n-\tif ((TREE_CODE (rhs) == NOP_EXPR\n-\t     || TREE_CODE (rhs) == CONVERT_EXPR)\n+\tif (CONVERT_EXPR_P (rhs)\n \t    && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME\n \t    && POINTER_TYPE_P (TREE_TYPE (rhs))\n \t    && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (rhs, 0))))\n@@ -299,8 +298,7 @@ can_propagate_from (tree def_stmt)\n      then we can not apply optimizations as some targets require function\n      pointers to be canonicalized and in this case this optimization could\n      eliminate a necessary canonicalization.  */\n-  if ((TREE_CODE (rhs) == NOP_EXPR\n-       || TREE_CODE (rhs) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (rhs)\n       && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (rhs, 0)))\n       && TREE_CODE (TREE_TYPE (TREE_TYPE\n \t\t\t        (TREE_OPERAND (rhs, 0)))) == FUNCTION_TYPE)\n@@ -586,8 +584,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n      a conversion to def_rhs type separate, though.  */\n   if (TREE_CODE (lhs) == SSA_NAME\n       && (rhs == name\n-\t  || TREE_CODE (rhs) == NOP_EXPR\n-\t  || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t  || CONVERT_EXPR_P (rhs))\n       && useless_type_conversion_p (TREE_TYPE (rhs), TREE_TYPE (def_rhs)))\n     {\n       /* Only recurse if we don't deal with a single use.  */\n@@ -792,8 +789,7 @@ forward_propagate_addr_expr (tree name, tree rhs)\n       if (result\n \t  && TREE_CODE (GIMPLE_STMT_OPERAND (use_stmt, 0)) == SSA_NAME\n \t  && (TREE_CODE (use_rhs) == SSA_NAME\n-\t      || ((TREE_CODE (use_rhs) == NOP_EXPR\n-\t           || TREE_CODE (use_rhs) == CONVERT_EXPR)\n+\t      || (CONVERT_EXPR_P (use_rhs)\n \t\t  && TREE_CODE (TREE_OPERAND (use_rhs, 0)) == SSA_NAME)))\n \t{\n \t  block_stmt_iterator bsi = bsi_for_stmt (use_stmt);\n@@ -832,8 +828,7 @@ forward_propagate_comparison (tree cond, tree stmt)\n \n   /* Conversion of the condition result to another integral type.  */\n   if (TREE_CODE (use_stmt) == GIMPLE_MODIFY_STMT\n-      && (TREE_CODE (GIMPLE_STMT_OPERAND (use_stmt, 1)) == CONVERT_EXPR\n-\t  || TREE_CODE (GIMPLE_STMT_OPERAND (use_stmt, 1)) == NOP_EXPR\n+      && (CONVERT_EXPR_P (GIMPLE_STMT_OPERAND (use_stmt, 1))\n           || COMPARISON_CLASS_P (GIMPLE_STMT_OPERAND (use_stmt, 1))\n           || TREE_CODE (GIMPLE_STMT_OPERAND (use_stmt, 1)) == TRUTH_NOT_EXPR)\n       && INTEGRAL_TYPE_P (TREE_TYPE (GIMPLE_STMT_OPERAND (use_stmt, 0))))\n@@ -842,8 +837,7 @@ forward_propagate_comparison (tree cond, tree stmt)\n       tree rhs = GIMPLE_STMT_OPERAND (use_stmt, 1);\n \n       /* We can propagate the condition into a conversion.  */\n-      if (TREE_CODE (rhs) == CONVERT_EXPR\n-\t  || TREE_CODE (rhs) == NOP_EXPR)\n+      if (CONVERT_EXPR_P (rhs))\n \t{\n \t  /* Avoid using fold here as that may create a COND_EXPR with\n \t     non-boolean condition as canonical form.  */\n@@ -1033,8 +1027,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t      if (TREE_CODE (rhs) == ADDR_EXPR\n \t\t  /* Handle pointer conversions on invariant addresses\n \t\t     as well, as this is valid gimple.  */\n-\t\t  || ((TREE_CODE (rhs) == NOP_EXPR\n-\t\t       || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t\t  || (CONVERT_EXPR_P (rhs)\n \t\t      && TREE_CODE (TREE_OPERAND (rhs, 0)) == ADDR_EXPR\n \t\t      && POINTER_TYPE_P (TREE_TYPE (rhs))))\n \t\t{"}, {"sha": "4dbe7503c9ea110560b7453ec695329f8176b354", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -202,8 +202,7 @@ recognize_single_bit_test (tree cond_expr, tree *name, tree *bit)\n \tif (TREE_CODE (t) != GIMPLE_MODIFY_STMT)\n \t  break;\n \tt = GIMPLE_STMT_OPERAND (t, 1);\n-\tif (TREE_CODE (t) == NOP_EXPR\n-\t    || TREE_CODE (t) == CONVERT_EXPR)\n+\tif (CONVERT_EXPR_P (t))\n \t  t = TREE_OPERAND (t, 0);\n       } while (TREE_CODE (t) == SSA_NAME);\n "}, {"sha": "ba36343f5482e2b79ccc881330937a240b2d7f10", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -812,8 +812,7 @@ rewrite_bittest (block_stmt_iterator *bsi)\n \n   /* There is a conversion in between possibly inserted by fold.  */\n   t = GIMPLE_STMT_OPERAND (stmt1, 1);\n-  if (TREE_CODE (t) == NOP_EXPR\n-      || TREE_CODE (t) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (t))\n     {\n       t = TREE_OPERAND (t, 0);\n       if (TREE_CODE (t) != SSA_NAME"}, {"sha": "0247a1e71f5ee0e430d28b70e9a9afa756dc6caa", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -772,8 +772,7 @@ determine_base_object (tree expr)\n   /* If this is a pointer casted to any type, we need to determine\n      the base object for the pointer; so handle conversions before\n      throwing away non-pointer expressions.  */\n-  if (TREE_CODE (expr) == NOP_EXPR\n-      || TREE_CODE (expr) == CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (expr))\n     return determine_base_object (TREE_OPERAND (expr, 0));\n \n   if (!POINTER_TYPE_P (TREE_TYPE (expr)))\n@@ -1540,8 +1539,7 @@ may_be_nonaddressable_p (tree expr)\n     case ARRAY_RANGE_REF:\n       return may_be_nonaddressable_p (TREE_OPERAND (expr, 0));\n \n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       return true;\n \n     default:\n@@ -2684,8 +2682,7 @@ determine_common_wider_type (tree *a, tree *b)\n   tree suba, subb;\n   tree atype = TREE_TYPE (*a);\n \n-  if ((TREE_CODE (*a) == NOP_EXPR\n-       || TREE_CODE (*a) == CONVERT_EXPR))\n+  if (CONVERT_EXPR_P (*a))\n     {\n       suba = TREE_OPERAND (*a, 0);\n       wider_type = TREE_TYPE (suba);\n@@ -2695,8 +2692,7 @@ determine_common_wider_type (tree *a, tree *b)\n   else\n     return atype;\n \n-  if ((TREE_CODE (*b) == NOP_EXPR\n-       || TREE_CODE (*b) == CONVERT_EXPR))\n+  if (CONVERT_EXPR_P (*b))\n     {\n       subb = TREE_OPERAND (*b, 0);\n       if (TYPE_PRECISION (wider_type) != TYPE_PRECISION (TREE_TYPE (subb)))"}, {"sha": "934afa78d7dbfa7ae52b2301d761d6ecee7ce699", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1437,8 +1437,7 @@ expand_simple_operations (tree expr)\n \n   e = GIMPLE_STMT_OPERAND (stmt, 1);\n   if (/* Casts are simple.  */\n-      TREE_CODE (e) != NOP_EXPR\n-      && TREE_CODE (e) != CONVERT_EXPR\n+      !CONVERT_EXPR_P (e)\n       /* Copies are simple.  */\n       && TREE_CODE (e) != SSA_NAME\n       /* Assignments of invariants are simple.  */\n@@ -2190,8 +2189,7 @@ derive_constant_upper_bound (const_tree val)\n     case INTEGER_CST:\n       return tree_to_double_int (val);\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       op0 = TREE_OPERAND (val, 0);\n       subtype = TREE_TYPE (op0);\n       if (!TYPE_UNSIGNED (subtype)"}, {"sha": "fbc7a683ec8a349ef9e4da79f681e3db4dffa094", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -592,8 +592,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  /* Only \"real\" casts are OK here, not everything that is\n \t     acceptable to is_gimple_cast.  Make sure we don't do\n \t     anything stupid here.  */\n-\t  gcc_assert (TREE_CODE (cond) == NOP_EXPR\n-\t\t      || TREE_CODE (cond) == CONVERT_EXPR);\n+\t  gcc_assert (CONVERT_EXPR_P (cond));\n \n \t  op0 = TREE_OPERAND (cond, 0);\n \t  tmp = create_tmp_var (TREE_TYPE (op0), NULL);"}, {"sha": "f5ec0a737b4ca0bf97317f05014509cfb911bf2b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1569,8 +1569,7 @@ simplify_unary_expression (tree rhs)\n \n   if (VN_INFO (op0)->has_constants)\n     op0 = valueize_expr (VN_INFO (op0)->expr);\n-  else if (TREE_CODE (rhs) == NOP_EXPR\n-\t   || TREE_CODE (rhs) == CONVERT_EXPR\n+  else if (CONVERT_EXPR_P (rhs)\n \t   || TREE_CODE (rhs) == REALPART_EXPR\n \t   || TREE_CODE (rhs) == IMAGPART_EXPR\n \t   || TREE_CODE (rhs) == VIEW_CONVERT_EXPR)"}, {"sha": "7c79a3df68de8c4835e2193bdeadd47dd497c739", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2911,8 +2911,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n       {\n \tswitch (TREE_CODE (t))\n \t  {\n-\t  case NOP_EXPR:\n-\t  case CONVERT_EXPR:\n+\t  CASE_CONVERT:\n \t    {\n \t      tree op = TREE_OPERAND (t, 0);\n "}, {"sha": "f5de5fdb7ace7d3c6a5aa59d3ae4ab12f3a4c1c4", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -455,8 +455,7 @@ simplify_control_stmt_condition (edge e,\n       fold_defer_overflow_warnings ();\n \n       cached_lhs = fold (COND_EXPR_COND (dummy_cond));\n-      while (TREE_CODE (cached_lhs) == NOP_EXPR\n-\t     || TREE_CODE (cached_lhs) == CONVERT_EXPR)\n+      while (CONVERT_EXPR_P (cached_lhs))\n \tcached_lhs = TREE_OPERAND (cached_lhs, 0);\n \n       fold_undefer_overflow_warnings (is_gimple_min_invariant (cached_lhs),"}, {"sha": "9ba865e241d9ba117e3dc00abf1b17081f2a0635", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1216,7 +1216,7 @@ tree_ssa_useless_type_conversion (tree expr)\n      the top of the RHS to the type of the LHS and the type conversion\n      is \"safe\", then strip away the type conversion so that we can\n      enter LHS = RHS into the const_and_copies table.  */\n-  if (TREE_CODE (expr) == NOP_EXPR || TREE_CODE (expr) == CONVERT_EXPR\n+  if (CONVERT_EXPR_P (expr)\n       || TREE_CODE (expr) == VIEW_CONVERT_EXPR\n       || TREE_CODE (expr) == NON_LVALUE_EXPR)\n     /* FIXME: Use of GENERIC_TREE_TYPE here is a temporary measure to work"}, {"sha": "728c37d4d6de1aaba1533ad7a8d335b96f4ec30a", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -158,8 +158,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  continue;\n \t}\n \n-      if ((TREE_CODE (rhs) == NOP_EXPR\n-\t   || TREE_CODE (rhs) == CONVERT_EXPR)\n+      if (CONVERT_EXPR_P (rhs)\n \t  && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME)\n \t{\n \t  lhs = TREE_OPERAND (rhs, 0);\n@@ -217,8 +216,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t  continue;\n \t}\n \n-      if ((TREE_CODE (rhs) == NOP_EXPR\n-\t   || TREE_CODE (rhs) == CONVERT_EXPR)\n+      if (CONVERT_EXPR_P (rhs)\n \t  && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME)\n \t{\n \t  lhs = TREE_OPERAND (rhs, 0);\n@@ -447,8 +445,7 @@ check_va_list_escapes (struct stdarg_info *si, tree lhs, tree rhs)\n  if (((TREE_CODE (rhs) == POINTER_PLUS_EXPR\n        || TREE_CODE (rhs) == PLUS_EXPR)\n       && TREE_CODE (TREE_OPERAND (rhs, 1)) == INTEGER_CST)\n-     || TREE_CODE (rhs) == NOP_EXPR\n-     || TREE_CODE (rhs) == CONVERT_EXPR)\n+     || CONVERT_EXPR_P (rhs))\n     rhs = TREE_OPERAND (rhs, 0);\n \n   if (TREE_CODE (rhs) != SSA_NAME\n@@ -555,8 +552,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t     statements.  */\n \t\t  if ((TREE_CODE (rhs) == POINTER_PLUS_EXPR\n \t\t       && TREE_CODE (TREE_OPERAND (rhs, 1)) == INTEGER_CST)\n-\t\t      || TREE_CODE (rhs) == NOP_EXPR\n-\t\t      || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t\t      || CONVERT_EXPR_P (rhs))\n \t\t    rhs = TREE_OPERAND (rhs, 0);\n \n \t\t  if (rhs == use)"}, {"sha": "0ef7f9cc4442598ff596894400cfaef5c4b09723", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -218,8 +218,7 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t      scalar_type = TREE_TYPE (GIMPLE_STMT_OPERAND (stmt, 0));\n \n \t      operation = GIMPLE_STMT_OPERAND (stmt, 1);\n-\t      if (TREE_CODE (operation) == NOP_EXPR\n-\t\t  || TREE_CODE (operation) == CONVERT_EXPR\n+\t      if (CONVERT_EXPR_P (operation)\n \t\t  || TREE_CODE (operation) == WIDEN_MULT_EXPR\n \t\t  || TREE_CODE (operation) == FLOAT_EXPR)\n \t\t{"}, {"sha": "bfb41a67675b5d3c65e5f6c851fd79602c71110f", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2172,8 +2172,7 @@ supportable_widening_operation (enum tree_code code, tree stmt, tree vectype,\n         }\n       break;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       if (BYTES_BIG_ENDIAN)\n         {\n           c1 = VEC_UNPACK_HI_EXPR;\n@@ -2267,8 +2266,7 @@ supportable_narrowing_operation (enum tree_code code,\n \n   switch (code)\n     {\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       c1 = VEC_PACK_TRUNC_EXPR;\n       break;\n "}, {"sha": "8636c5f4fa7b26de58803148fadc6625d2d4d409", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -3797,12 +3797,10 @@ register_edge_assert_for_2 (tree name, edge e, block_stmt_iterator bsi,\n \n       /* Extract NAME2 from the (optional) sign-changing cast.  */\n       if (TREE_CODE (def_stmt) == GIMPLE_MODIFY_STMT\n-          && (TREE_CODE (GIMPLE_STMT_OPERAND (def_stmt, 1)) == NOP_EXPR\n-\t      || TREE_CODE (GIMPLE_STMT_OPERAND (def_stmt, 1)) == CONVERT_EXPR))\n+          && CONVERT_EXPR_P (GIMPLE_STMT_OPERAND (def_stmt, 1)))\n \t{\n \t  tree rhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n-\t  if ((TREE_CODE (rhs) == NOP_EXPR\n-\t       || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t  if (CONVERT_EXPR_P (rhs)\n \t      && ! TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (rhs, 0)))\n \t      && (TYPE_PRECISION (TREE_TYPE (rhs))\n \t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (rhs, 0)))))\n@@ -3954,8 +3952,7 @@ register_edge_assert_for_1 (tree op, enum tree_code code,\n       /* Recurse through the copy.  */\n       retval |= register_edge_assert_for_1 (rhs, code, e, bsi);\n     }\n-  else if (TREE_CODE (rhs) == NOP_EXPR\n-\t   || TREE_CODE (rhs) == CONVERT_EXPR)\n+  else if (CONVERT_EXPR_P (rhs))\n     { \n       /* Recurse through the type conversion.  */\n       retval |= register_edge_assert_for_1 (TREE_OPERAND (rhs, 0),"}, {"sha": "5a0656c67acb565fa3d6b06708307f455eeff67e", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -1598,8 +1598,7 @@ int\n really_constant_p (const_tree exp)\n {\n   /* This is not quite the same as STRIP_NOPS.  It does more.  */\n-  while (TREE_CODE (exp) == NOP_EXPR\n-\t || TREE_CODE (exp) == CONVERT_EXPR\n+  while (CONVERT_EXPR_P (exp)\n \t || TREE_CODE (exp) == NON_LVALUE_EXPR)\n     exp = TREE_OPERAND (exp, 0);\n   return TREE_CONSTANT (exp);\n@@ -1918,7 +1917,7 @@ expr_align (const_tree t)\n \n   switch (TREE_CODE (t))\n     {\n-    case NOP_EXPR:  case CONVERT_EXPR:  case NON_LVALUE_EXPR:\n+    CASE_CONVERT:  case NON_LVALUE_EXPR:\n       /* If we have conversions, we know that the alignment of the\n \t object must meet each of the alignments of the types.  */\n       align0 = expr_align (TREE_OPERAND (t, 0));\n@@ -2823,8 +2822,7 @@ stabilize_reference (tree ref)\n       /* No action is needed in this case.  */\n       return ref;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n       result = build_nt (code, stabilize_reference (TREE_OPERAND (ref, 0)));\n@@ -6054,8 +6052,7 @@ get_unwidened (tree op, tree for_type)\n        && TYPE_UNSIGNED (type));\n   tree win = op;\n \n-  while (TREE_CODE (op) == NOP_EXPR\n-\t || TREE_CODE (op) == CONVERT_EXPR)\n+  while (CONVERT_EXPR_P (op))\n     {\n       int bitschange;\n \n@@ -6093,8 +6090,7 @@ get_unwidened (tree op, tree for_type)\n \t     Let's avoid computing it if it does not affect WIN\n \t     and if UNS will not be needed again.  */\n \t  if ((uns\n-\t       || TREE_CODE (op) == NOP_EXPR\n-\t       || TREE_CODE (op) == CONVERT_EXPR)\n+\t       || CONVERT_EXPR_P (op))\n \t      && TYPE_UNSIGNED (TREE_TYPE (op)))\n \t    {\n \t      uns = 1;"}, {"sha": "82c44b10a5d3018e95325abd6bb1faea19223a2c", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -995,12 +995,23 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (TREE_CODE (NODE) == PHI_NODE ? PHI_CHAIN (NODE) :\t\t\\\n      GIMPLE_STMT_P (NODE) ? NULL_TREE : TREE_CHAIN (NODE))\n \n+/* Tests if expression is conversion expr (NOP_EXPRs or CONVERT_EXPRs).  */\n+\n+#define CONVERT_EXPR_P(EXP)\t\t\t\t\t\\\n+  (TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\t\\\n+   || TREE_CODE (EXP) == CONVERT_EXPR)\n+\n+/* Generate case for NOP_EXPR, CONVERT_EXPR.  */\n+\n+#define CASE_CONVERT\t\t\t\t\t\t\\\n+  case NOP_EXPR:\t\t\t\t\t\t\\\n+  case CONVERT_EXPR\n+\n /* Given an expression as a tree, strip any NON_LVALUE_EXPRs and NOP_EXPRs\n    that don't change the machine mode.  */\n \n #define STRIP_NOPS(EXP)\t\t\t\t\t\t\\\n-  while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n-\t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n+  while ((CONVERT_EXPR_P (EXP)\t\t\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n \t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n@@ -1010,8 +1021,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Like STRIP_NOPS, but don't let the signedness change either.  */\n \n #define STRIP_SIGN_NOPS(EXP) \\\n-  while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n-\t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n+  while ((CONVERT_EXPR_P (EXP)\t\t\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n \t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n@@ -1025,8 +1035,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Like STRIP_NOPS, but don't alter the TREE_TYPE either.  */\n \n #define STRIP_TYPE_NOPS(EXP) \\\n-  while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n-\t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n+  while ((CONVERT_EXPR_P (EXP)\t\t\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n \t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TREE_TYPE (EXP)\t\t\t\t\t\\"}, {"sha": "d9468c4997dcd068ba90e04e475c1ac9d1260dc5", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043771b10c5aba87e0dd41169cc6b4b790c59f4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1043771b10c5aba87e0dd41169cc6b4b790c59f4", "patch": "@@ -2867,8 +2867,7 @@ const_hash_1 (const tree exp)\n       return (const_hash_1 (TREE_OPERAND (exp, 0)) * 9\n \t      + const_hash_1 (TREE_OPERAND (exp, 1)));\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       return const_hash_1 (TREE_OPERAND (exp, 0)) * 7 + 2;\n \n     default:\n@@ -3021,8 +3020,7 @@ compare_constant (const tree t1, const tree t2)\n       return (compare_constant (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0))\n \t      && compare_constant(TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1)));\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       return compare_constant (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));\n \n@@ -3068,8 +3066,7 @@ copy_constant (tree exp)\n \t\t     copy_constant (TREE_OPERAND (exp, 0)),\n \t\t     copy_constant (TREE_OPERAND (exp, 1)));\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       return build1 (TREE_CODE (exp), TREE_TYPE (exp),\n \t\t     copy_constant (TREE_OPERAND (exp, 0)));\n@@ -3966,8 +3963,7 @@ compute_reloc_for_constant (tree exp)\n \treloc |= reloc2;\n       break;\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       reloc = compute_reloc_for_constant (TREE_OPERAND (exp, 0));\n       break;\n@@ -4021,8 +4017,7 @@ output_addressed_constants (tree exp)\n       output_addressed_constants (TREE_OPERAND (exp, 1));\n       /* Fall through.  */\n \n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       output_addressed_constants (TREE_OPERAND (exp, 0));\n       break;\n@@ -4128,8 +4123,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n     case NON_LVALUE_EXPR:\n       return initializer_constant_valid_p (TREE_OPERAND (value, 0), endtype);\n \n-    case CONVERT_EXPR:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       {\n \ttree src;\n \ttree src_type;\n@@ -4245,8 +4239,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t     (int)(p1 - p2) to ((int)p1 - (int)p2) under the theory\n \t     that the narrower operation is cheaper.  */\n \n-\t  while (TREE_CODE (op0) == NOP_EXPR\n-\t\t || TREE_CODE (op0) == CONVERT_EXPR\n+\t  while (CONVERT_EXPR_P (op0)\n \t\t || TREE_CODE (op0) == NON_LVALUE_EXPR)\n \t    {\n \t      tree inner = TREE_OPERAND (op0, 0);\n@@ -4258,8 +4251,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t      op0 = inner;\n \t    }\n \n-\t  while (TREE_CODE (op1) == NOP_EXPR\n-\t\t || TREE_CODE (op1) == CONVERT_EXPR\n+\t  while (CONVERT_EXPR_P (op1)\n \t\t || TREE_CODE (op1) == NON_LVALUE_EXPR)\n \t    {\n \t      tree inner = TREE_OPERAND (op1, 0);\n@@ -4360,7 +4352,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n \n   /* Eliminate any conversions since we'll be outputting the underlying\n      constant.  */\n-  while (TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n+  while (CONVERT_EXPR_P (exp)\n \t || TREE_CODE (exp) == NON_LVALUE_EXPR\n \t || TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n     {"}]}