{"sha": "0be9efad938726721fd8c8c35609b1e1d7d30035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlOWVmYWQ5Mzg3MjY3MjFmZDhjOGMzNTYwOWIxZTFkN2QzMDAzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T22:28:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T22:31:12Z"}, "message": "debug: Improve debug info of c++14 deduced return type [PR94459]\n\nOn the following testcase, in gdb ptype S<long>::m1 prints long as return\ntype, but all the other methods show void instead.\nPR53756 added code to add_type_attribute if the return type is\nauto/decltype(auto), but we actually should look through references,\npointers and qualifiers.\nHaven't included there DW_TAG_atomic_type, because I think at least ATM\none can't use that in C++.  Not sure about DW_TAG_array_type or what else\ncould be deduced.\n\n> http://eel.is/c++draft/dcl.spec.auto#3 says it has to appear as a\n> decl-specifier.\n>\n> http://eel.is/c++draft/temp.deduct.type#8 lists the forms where a template\n> argument can be deduced.\n>\n> Looks like you are missing arrays, pointers to members, and function return\n> types.\n\n2020-04-04  Hannes Domani  <ssbssa@yahoo.de>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/94459\n\t* dwarf2out.c (gen_subprogram_die): Look through references, pointers,\n\tarrays, pointer-to-members, function types and qualifiers when\n\tchecking if in-class DIE had an 'auto' or 'decltype(auto)' return type\n\tto emit type again on definition.\n\n\t* g++.dg/debug/pr94459.C: New test.\n\nCo-Authored-By: Hannes Domani <ssbssa@yahoo.de>", "tree": {"sha": "7b791fe73818013af433d080b69b69f83e61a844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b791fe73818013af433d080b69b69f83e61a844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be9efad938726721fd8c8c35609b1e1d7d30035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be9efad938726721fd8c8c35609b1e1d7d30035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be9efad938726721fd8c8c35609b1e1d7d30035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be9efad938726721fd8c8c35609b1e1d7d30035/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458ca332d104240e7752eb1765660141fef878bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458ca332d104240e7752eb1765660141fef878bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458ca332d104240e7752eb1765660141fef878bd"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "9501c946cbd7a28b34b83f5cce1c832be768bc6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0be9efad938726721fd8c8c35609b1e1d7d30035", "patch": "@@ -1,3 +1,12 @@\n+2020-04-04  Hannes Domani  <ssbssa@yahoo.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/94459\n+\t* dwarf2out.c (gen_subprogram_die): Look through references, pointers,\n+\tarrays, pointer-to-members, function types and qualifiers when\n+\tchecking if in-class DIE had an 'auto' or 'decltype(auto)' return type\n+\tto emit type again on definition.\n+\n 2020-04-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/93940"}, {"sha": "7d270f2a1b50cd1db731170ea2ac212f9a09e315", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0be9efad938726721fd8c8c35609b1e1d7d30035", "patch": "@@ -22905,11 +22905,22 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t  != (unsigned) s.column))\n \t    add_AT_unsigned (subr_die, DW_AT_decl_column, s.column);\n \n-\t  /* If the prototype had an 'auto' or 'decltype(auto)' return type,\n-\t     emit the real type on the definition die.  */\n+\t  /* If the prototype had an 'auto' or 'decltype(auto)' in\n+\t     the return type, emit the real type on the definition die.  */\n \t  if (is_cxx () && debug_info_level > DINFO_LEVEL_TERSE)\n \t    {\n \t      dw_die_ref die = get_AT_ref (old_die, DW_AT_type);\n+\t      while (die\n+\t\t     && (die->die_tag == DW_TAG_reference_type\n+\t\t\t || die->die_tag == DW_TAG_rvalue_reference_type\n+\t\t\t || die->die_tag == DW_TAG_pointer_type\n+\t\t\t || die->die_tag == DW_TAG_const_type\n+\t\t\t || die->die_tag == DW_TAG_volatile_type\n+\t\t\t || die->die_tag == DW_TAG_restrict_type\n+\t\t\t || die->die_tag == DW_TAG_array_type\n+\t\t\t || die->die_tag == DW_TAG_ptr_to_member_type\n+\t\t\t || die->die_tag == DW_TAG_subroutine_type))\n+\t\tdie = get_AT_ref (die, DW_AT_type);\n \t      if (die == auto_die || die == decltype_auto_die)\n \t\tadd_type_attribute (subr_die, TREE_TYPE (TREE_TYPE (decl)),\n \t\t\t\t    TYPE_UNQUALIFIED, false, context_die);"}, {"sha": "058af2c3704296b73c77a6402b2d98c4ebcb4075", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0be9efad938726721fd8c8c35609b1e1d7d30035", "patch": "@@ -1,3 +1,9 @@\n+2020-04-04  Hannes Domani  <ssbssa@yahoo.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/94459\n+\t* g++.dg/debug/pr94459.C: New test.\n+\n 2020-04-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94205"}, {"sha": "ebc0cf45cc6466f37e6c0e8b92f8f0db261ddfa3", "filename": "gcc/testsuite/g++.dg/debug/pr94459.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr94459.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be9efad938726721fd8c8c35609b1e1d7d30035/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr94459.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr94459.C?ref=0be9efad938726721fd8c8c35609b1e1d7d30035", "patch": "@@ -0,0 +1,58 @@\n+// PR debug/94459\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-g -dA\" }\n+\n+template <typename T>\n+struct S\n+{\n+  T v;\n+  T w[2];\n+  S () : v (0), w { 0, 0 } {}\n+  static auto baz () { return (T) 0; }\n+  auto m1 () { return v; }\n+  auto &m2 () { return v; }\n+  auto &&m3 () { return (T&&)v; }\n+  const auto m4 () { return v; }\n+  const auto &m5 () { return v; }\n+  const auto &&m6 () { return (T&&)v; }\n+  volatile auto m7 () { return v; }\n+  volatile auto &m8 () { return v; }\n+  volatile auto &&m9 () { return (T&&)v; }\n+  volatile const auto m10 () { return v; }\n+  volatile const auto &m11 () { return v; }\n+  volatile const auto &&m12 () { return (T&&)v; }\n+  const volatile auto m13 () { return v; }\n+  const volatile auto &m14 () { return v; }\n+  const volatile auto &&m15 () { return (T&&)v; }\n+#ifndef __STRICT_ANSI__\n+  __restrict const volatile auto &&m16 () { return (T&&)v; }\n+  const __restrict auto &m17 () { return v; }\n+#endif\n+  auto *m18 () { return &v; }\n+  auto (S::* (m19 ())) () { return &S::m1; }\n+  auto (S::* (m20 ())) { return &S::v; }\n+  auto (*m21 ()) () { return S::baz; }\n+};\n+\n+S<long> s, u, v;\n+\n+long\n+foo ()\n+{\n+  auto x = s.m19 ();\n+  auto y = s.m20 ();\n+  auto z = s.m21 ();\n+  return s.m1 () + s.m2 () + s.m3 () + s.m4 () + s.m5 ()\n+\t + s.m6 () + s.m7 () + s.m8 () + s.m9 () + s.m10 ()\n+\t + s.m11 () + s.m12 () + s.m13 () + s.m14 () + s.m15 ()\n+#ifndef __STRICT_ANSI__\n+\t + u.m16 () + v.m17 ()\n+#endif\n+\t + *s.m18 () + (s.*x) () + s.*y + z ();\n+}\n+\n+int\n+main ()\n+{\n+  return foo ();\n+}"}]}