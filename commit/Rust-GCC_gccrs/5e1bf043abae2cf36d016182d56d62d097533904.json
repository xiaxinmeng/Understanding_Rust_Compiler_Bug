{"sha": "5e1bf043abae2cf36d016182d56d62d097533904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxYmYwNDNhYmFlMmNmMzZkMDE2MTgyZDU2ZDYyZDA5NzUzMzkwNA==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-08-09T17:52:50Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-08-09T17:52:50Z"}, "message": "Add sibcall handling for rs6000 target.\n\nFrom-SVN: r56166", "tree": {"sha": "749a5e06e442a728bfb7e7cd077d1c448b89b1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749a5e06e442a728bfb7e7cd077d1c448b89b1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e1bf043abae2cf36d016182d56d62d097533904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1bf043abae2cf36d016182d56d62d097533904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1bf043abae2cf36d016182d56d62d097533904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1bf043abae2cf36d016182d56d62d097533904/comments", "author": null, "committer": null, "parents": [{"sha": "3971a4d235bd87ba9bcfe3b3b103ca173b7f3646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3971a4d235bd87ba9bcfe3b3b103ca173b7f3646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3971a4d235bd87ba9bcfe3b3b103ca173b7f3646"}], "stats": {"total": 323, "additions": 317, "deletions": 6}, "files": [{"sha": "a8b9a1901fa790aedd8f4042e45f83ffc241e4f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e1bf043abae2cf36d016182d56d62d097533904", "patch": "@@ -1,3 +1,11 @@\n+2002-08-09  Dale Johannesen  <dalej@apple.com>\n+\t* config/rs6000/rs6000.md: Add sibcall patterns.\n+\t* config/rs6000/rs6000.h (FUNCTION_OK_FOR_SIBCALL):  Define.\n+\t* config/rs6000/rs6000.c (rs6000_ra_ever_killed):\n+\tRewritten to handle sibcalls.\n+\t* config/rs6000/rs6000.c (function_ok_for_sibcall):  New.\n+\t* config/rs6000/rs6000-protos.h (function_ok_for_sibcall):  New.\n+\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* profile.c (da_file_name): New static var."}, {"sha": "42092118f60078706b2e85df392232fc1504793e", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=5e1bf043abae2cf36d016182d56d62d097533904", "patch": "@@ -151,6 +151,7 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern int function_ok_for_sibcall PARAMS ((tree));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));"}, {"sha": "28a0a7583b445cc756f07731e7839db454050d96", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5e1bf043abae2cf36d016182d56d62d097533904", "patch": "@@ -9412,25 +9412,82 @@ rs6000_return_addr (count, frame)\n   return get_hard_reg_initial_val (Pmode, LINK_REGISTER_REGNUM);\n }\n \n+/* Say whether a function is a candidate for sibcall handling or not.\n+   We do not allow indirect calls to be optimized into sibling calls.\n+   Also, we can't do it if there are any vector parameters; there's\n+   nowhere to put the VRsave code so it works; note that functions with\n+   vector parameters are required to have a prototype, so the argument\n+   type info must be available here.  (The tail recursion case can work\n+   with vector parameters, but there's no way to distinguish here.) */\n+int\n+function_ok_for_sibcall (fndecl)\n+    tree fndecl;\n+{\n+  tree type;\n+  if (fndecl)\n+    {\n+      if (TARGET_ALTIVEC_VRSAVE)\n+        {\n+\t  for (type = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+\t       type; type = TREE_CHAIN (type))\n+\t    {\n+\t      if (TREE_CODE (TREE_VALUE (type)) == VECTOR_TYPE )\n+\t\treturn 0;\n+\t    }\n+        }\n+      if (DEFAULT_ABI == ABI_DARWIN\n+            || (TREE_ASM_WRITTEN (fndecl) && !flag_pic) || !TREE_PUBLIC (fndecl))\n+        return 1;\n+    }\n+  return 0;\n+}\n+\n+/* function rewritten to handle sibcalls */\n static int\n rs6000_ra_ever_killed ()\n {\n   rtx top;\n+  rtx reg;\n+  rtx insn;\n \n #ifdef ASM_OUTPUT_MI_THUNK\n   if (current_function_is_thunk)\n     return 0;\n #endif\n-  if (!has_hard_reg_initial_val (Pmode, LINK_REGISTER_REGNUM)\n-      || cfun->machine->ra_needs_full_frame)\n-    return regs_ever_live[LINK_REGISTER_REGNUM];\n-\n+  /* regs_ever_live has LR marked as used if any sibcalls\n+     are present.  Which it is, but this should not force\n+     saving and restoring in the prologue/epilog.  Likewise,\n+     reg_set_between_p thinks a sibcall clobbers LR, so\n+     that is inappropriate. */\n+  /* Also, the prologue can generate a store into LR that\n+     doesn't really count, like this:\n+        move LR->R0\n+        bcl to set PIC register\n+        move LR->R31\n+        move R0->LR\n+     When we're called from the epilog, we need to avoid counting\n+     this as a store; thus we ignore any insns with a REG_MAYBE_DEAD note. */\n+         \n   push_topmost_sequence ();\n   top = get_insns ();\n   pop_topmost_sequence ();\n+  reg = gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM);\n \n-  return reg_set_between_p (gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM), \n-\t\t\t    top, NULL_RTX);\n+  for (insn = NEXT_INSN (top); insn != NULL_RTX; insn = NEXT_INSN (insn))\n+    {\n+      if (INSN_P (insn))\n+\t{\n+\t  if (FIND_REG_INC_NOTE (insn, reg))\n+\t    return 1;\n+\t  else if (GET_CODE (insn) == CALL_INSN \n+\t\t    && !SIBLING_CALL_P (insn))\n+\t    return 1;\n+\t  else if (set_of (reg, insn) != NULL_RTX \n+\t\t    && find_reg_note (insn, REG_MAYBE_DEAD, NULL_RTX) == 0)\n+\t    return 1;\n+    \t}\n+    }\n+  return 0;\n }\n \f\n /* Add a REG_MAYBE_DEAD note to the insn.  */"}, {"sha": "42aa929b855bd889e7e021a1eabbb8f37738058a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5e1bf043abae2cf36d016182d56d62d097533904", "patch": "@@ -1798,6 +1798,10 @@ typedef struct rs6000_args\n    argument is passed depends on whether or not it is a named argument.  */\n #define STRICT_ARGUMENT_NAMING 1\n \n+/* We do not allow indirect calls to be optimized into sibling calls, nor\n+   do we allow calls with vector parameters.  */\n+#define FUNCTION_OK_FOR_SIBCALL(DECL) function_ok_for_sibcall ((DECL))\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}, {"sha": "4a441e224477e7d1f4388a7571c1fdb4cc9cd7d9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1bf043abae2cf36d016182d56d62d097533904/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5e1bf043abae2cf36d016182d56d62d097533904", "patch": "@@ -10710,6 +10710,247 @@\n   DONE;\n }\")\n \n+;; sibling call patterns\n+(define_expand \"sibcall\"\n+  [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n+\t\t    (match_operand 1 \"\" \"\"))\n+\t      (use (match_operand 2 \"\" \"\"))\n+\t      (use (scratch:SI))\n+\t      (return)])]\n+  \"\"\n+  \"\n+{\n+#if TARGET_MACHO\n+  if (flag_pic)\n+    operands[0] = machopic_indirect_call_target (operands[0]);\n+#endif\n+\n+  if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != CONST_INT)\n+    abort ();\n+\n+  operands[0] = XEXP (operands[0], 0);\n+\n+}\")\n+\n+;; this and similar patterns must be marked as using LR, otherwise\n+;; dataflow will try to delete the store into it.  This is true\n+;; even when the actual reg to jump to is in CTR, when LR was\n+;; saved and restored around the PIC-setting BCL.\n+(define_insn \"*sibcall_local32\"\n+  [(call (mem:SI (match_operand:SI 0 \"current_file_function_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 3 \"=l,l\"))\n+   (return)]\n+  \"(INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z0@local\\\" : \\\"b %z0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*sibcall_local64\"\n+  [(call (mem:SI (match_operand:DI 0 \"current_file_function_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 3 \"=l,l\"))\n+   (return)]\n+  \"TARGET_64BIT && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z0@local\\\" : \\\"b %z0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*sibcall_value_local32\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:SI 1 \"current_file_function_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 4 \"=l,l\"))\n+   (return)]\n+  \"(INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z1@local\\\" : \\\"b %z1\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+\n+(define_insn \"*sibcall_value_local64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"current_file_function_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 4 \"=l,l\"))\n+   (return)]\n+  \"TARGET_64BIT && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z1@local\\\" : \\\"b %z1\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*sibcall_nonlocal_aix32\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n+\t (match_operand 1 \"\" \"g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n+   (use (match_scratch:SI 3 \"=l\"))\n+   (return)]\n+  \"TARGET_32BIT\n+   && DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"b %z0\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_nonlocal_aix64\"\n+  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n+\t (match_operand 1 \"\" \"g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n+   (use (match_scratch:SI 3 \"=l\"))\n+   (return)]\n+  \"TARGET_64BIT \n+   && DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"b %z0\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_value_nonlocal_aix32\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n+   (use (match_scratch:SI 4 \"=l\"))\n+   (return)]\n+  \"TARGET_32BIT\n+   && DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"b %z1\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_value_nonlocal_aix64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n+\t      (match_operand 2 \"\" \"g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n+   (use (match_scratch:SI 4 \"=l\"))\n+   (return)]\n+  \"TARGET_64BIT \n+   && DEFAULT_ABI == ABI_AIX\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"b %z1\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_nonlocal_sysv\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 3 \"=l,l\"))\n+   (return)]\n+  \"(DEFAULT_ABI == ABI_DARWIN\n+     || DEFAULT_ABI == ABI_V4\n+     || DEFAULT_ABI == ABI_AIX_NODESC)\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z0@plt\\\" : \\\"b %z0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_expand \"sibcall_value\"\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n+\t\t(call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n+\t\t      (match_operand 2 \"\" \"\")))\n+\t      (use (match_operand 3 \"\" \"\"))\n+\t      (use (scratch:SI))\n+\t      (return)])]\n+  \"\"\n+  \"\n+{\n+#if TARGET_MACHO\n+  if (flag_pic)\n+    operands[1] = machopic_indirect_call_target (operands[1]);\n+#endif\n+\n+  if (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != CONST_INT)\n+    abort ();\n+\n+  operands[1] = XEXP (operands[1], 0);\n+\n+}\")\n+\n+(define_insn \"*sibcall_value_nonlocal_sysv\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_scratch:SI 4 \"=l,l\"))\n+   (return)]\n+  \"(DEFAULT_ABI == ABI_DARWIN\n+       || DEFAULT_ABI == ABI_V4\n+       || DEFAULT_ABI == ABI_AIX_NODESC)\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"b %z1@plt\\\" : \\\"b %z1\\\";\n+}\"\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(use (const_int 0))]\n+  \"TARGET_SCHED_PROLOG\"\n+  \"\n+{\n+      rs6000_emit_epilogue (TRUE);\n+      DONE;\n+}\")\n+\n ;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n ;; all of memory.  This blocks insns from being moved across this point.\n "}]}