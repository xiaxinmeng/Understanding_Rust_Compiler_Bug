{"sha": "928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4ZGZhNGJkMGEzMmUzNWE4MzY2ZDdlZjIxMzIzYTc2ZjU0YTk3Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-08T11:02:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-08T11:02:08Z"}, "message": "gigi.h (build_unc_object_type): Add DEBUG_INFO_P param.\n\n\t* gcc-interface/gigi.h (build_unc_object_type): Add DEBUG_INFO_P param.\n\t(build_unc_object_type_from_ptr): Likewise.\n\t* gcc-interface/utils.c (build_unc_object_type): Add DEBUG_INFO_P param\n\tand pass it to create_type_decl.  Declare the type.  Simplify.\n\t(build_unc_object_type_from_ptr): Add DEBUG_INFO_P parameter and pass\n\tit to build_unc_object_type.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust to above change.\n\t* gcc-interface/trans.c (Attribute_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t* gcc-interface/utils2.c (build_allocator): Likewise.\n\nFrom-SVN: r159180", "tree": {"sha": "2593094f791734fc31513027f5e49a230b7b4e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2593094f791734fc31513027f5e49a230b7b4e17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/comments", "author": null, "committer": null, "parents": [{"sha": "d5a8e96fa1155b0447c2a76556c08912933689eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a8e96fa1155b0447c2a76556c08912933689eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a8e96fa1155b0447c2a76556c08912933689eb"}], "stats": {"total": 116, "additions": 89, "deletions": 27}, "files": [{"sha": "634e8ddaee4c48167457d5b8674484d2226146d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -1,3 +1,16 @@\n+2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (build_unc_object_type): Add DEBUG_INFO_P param.\n+\t(build_unc_object_type_from_ptr): Likewise.\n+\t* gcc-interface/utils.c (build_unc_object_type): Add DEBUG_INFO_P param\n+\tand pass it to create_type_decl.  Declare the type.  Simplify.\n+\t(build_unc_object_type_from_ptr): Add DEBUG_INFO_P parameter and pass\n+\tit to build_unc_object_type.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust to above change.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t* gcc-interface/utils2.c (build_allocator): Likewise.\n+\n 2010-05-07 Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR 40989"}, {"sha": "137cbbb3d6365a53fdf8d73892409e6c625c318d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -807,7 +807,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  gnu_type\n \t    = build_unc_object_type_from_ptr (gnu_fat, gnu_type,\n \t\t\t\t\t      concat_name (gnu_entity_name,\n-\t\t\t\t\t\t\t   \"UNC\"));\n+\t\t\t\t\t\t\t   \"UNC\"),\n+\t\t\t\t\t      debug_info_p);\n \t}\n \n #ifdef MINIMUM_ATOMIC_ALIGNMENT\n@@ -2066,7 +2067,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   a record type for the object and its template with the fields\n \t   shifted to have the template at a negative offset.  */\n \ttem = build_unc_object_type (gnu_template_type, tem,\n-\t\t\t\t     create_concat_name (gnat_name, \"XUT\"));\n+\t\t\t\t     create_concat_name (gnat_name, \"XUT\"),\n+\t\t\t\t     debug_info_p);\n \tshift_unc_components_for_thin_pointers (tem);\n \n \tSET_TYPE_UNCONSTRAINED_ARRAY (tem, gnu_type);"}, {"sha": "b7a32002924b653b97475e711526e11122d256c1", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -658,19 +658,20 @@ extern tree build_vms_descriptor32 (tree type, Mechanism_Type mech,\n    and the GNAT node GNAT_SUBPROG.  */\n extern void build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog);\n \n-/* Build a type to be used to represent an aliased object whose nominal\n-   type is an unconstrained array.  This consists of a RECORD_TYPE containing\n-   a field of TEMPLATE_TYPE and a field of OBJECT_TYPE, which is an\n-   ARRAY_TYPE.  If ARRAY_TYPE is that of the unconstrained array, this\n-   is used to represent an arbitrary unconstrained object.  Use NAME\n-   as the name of the record.  */\n+/* Build a type to be used to represent an aliased object whose nominal type\n+   is an unconstrained array.  This consists of a RECORD_TYPE containing a\n+   field of TEMPLATE_TYPE and a field of OBJECT_TYPE, which is an ARRAY_TYPE.\n+   If ARRAY_TYPE is that of an unconstrained array, this is used to represent\n+   an arbitrary unconstrained object.  Use NAME as the name of the record.\n+   DEBUG_INFO_P is true if we need to write debug information for the type.  */\n extern tree build_unc_object_type (tree template_type, tree object_type,\n-                                   tree name);\n+\t\t\t\t   tree name, bool debug_info_p);\n \n /* Same as build_unc_object_type, but taking a thin or fat pointer type\n    instead of the template type.  */\n extern tree build_unc_object_type_from_ptr (tree thin_fat_ptr_type,\n-\t\t\t\t\t    tree object_type, tree name);\n+\t\t\t\t\t    tree object_type, tree name,\n+\t\t\t\t\t    bool debug_info_p);\n \n /* Shift the component offsets within an unconstrained object TYPE to make it\n    suitable for use as a designated type for thin pointers.  */"}, {"sha": "058aaa6468951963d458c09bb5bd5636b8664c7c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -1446,7 +1446,8 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t  gnu_type\n \t\t    = build_unc_object_type_from_ptr (gnu_ptr_type,\n \t\t\t\t\t\t      gnu_actual_obj_type,\n-\t\t\t\t\t\t      get_identifier (\"SIZE\"));\n+\t\t\t\t\t\t      get_identifier (\"SIZE\"),\n+\t\t\t\t\t\t      false);\n \t\t}\n \n \t      gnu_result = TYPE_SIZE (gnu_type);\n@@ -5386,8 +5387,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\tgnu_actual_obj_type\n \t\t  = build_unc_object_type_from_ptr (gnu_ptr_type,\n \t\t\t\t\t\t    gnu_actual_obj_type,\n-\t\t\t\t\t\t    get_identifier\n-\t\t\t\t\t\t    (\"DEALLOC\"));\n+\t\t\t\t\t\t    get_identifier (\"DEALLOC\"),\n+\t\t\t\t\t\t    false);\n \t    }\n \t  else\n \t    gnu_actual_obj_type = gnu_obj_type;"}, {"sha": "8697baf9f1425156a4664fa9653bee9c18b66165", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -3299,15 +3299,16 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n   end_subprog_body (gnu_body);\n }\n \f\n-/* Build a type to be used to represent an aliased object whose nominal\n-   type is an unconstrained array.  This consists of a RECORD_TYPE containing\n-   a field of TEMPLATE_TYPE and a field of OBJECT_TYPE, which is an\n-   ARRAY_TYPE.  If ARRAY_TYPE is that of the unconstrained array, this\n-   is used to represent an arbitrary unconstrained object.  Use NAME\n-   as the name of the record.  */\n+/* Build a type to be used to represent an aliased object whose nominal type\n+   is an unconstrained array.  This consists of a RECORD_TYPE containing a\n+   field of TEMPLATE_TYPE and a field of OBJECT_TYPE, which is an ARRAY_TYPE.\n+   If ARRAY_TYPE is that of an unconstrained array, this is used to represent\n+   an arbitrary unconstrained object.  Use NAME as the name of the record.\n+   DEBUG_INFO_P is true if we need to write debug information for the type.  */\n \n tree\n-build_unc_object_type (tree template_type, tree object_type, tree name)\n+build_unc_object_type (tree template_type, tree object_type, tree name,\n+\t\t       bool debug_info_p)\n {\n   tree type = make_node (RECORD_TYPE);\n   tree template_field = create_field_decl (get_identifier (\"BOUNDS\"),\n@@ -3317,10 +3318,12 @@ build_unc_object_type (tree template_type, tree object_type, tree name)\n \n   TYPE_NAME (type) = name;\n   TYPE_CONTAINS_TEMPLATE_P (type) = 1;\n-  finish_record_type (type,\n-\t\t      chainon (chainon (NULL_TREE, template_field),\n-\t\t\t       array_field),\n-\t\t      0, true);\n+  TREE_CHAIN (template_field) = array_field;\n+  finish_record_type (type, template_field, 0, true);\n+\n+  /* Declare it now since it will never be declared otherwise.  This is\n+     necessary to ensure that its subtrees are properly marked.  */\n+  create_type_decl (name, type, NULL, true, debug_info_p, Empty);\n \n   return type;\n }\n@@ -3329,7 +3332,7 @@ build_unc_object_type (tree template_type, tree object_type, tree name)\n \n tree\n build_unc_object_type_from_ptr (tree thin_fat_ptr_type, tree object_type,\n-\t\t\t\ttree name)\n+\t\t\t\ttree name, bool debug_info_p)\n {\n   tree template_type;\n \n@@ -3339,7 +3342,9 @@ build_unc_object_type_from_ptr (tree thin_fat_ptr_type, tree object_type,\n     = (TYPE_IS_FAT_POINTER_P (thin_fat_ptr_type)\n        ? TREE_TYPE (TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (thin_fat_ptr_type))))\n        : TREE_TYPE (TYPE_FIELDS (TREE_TYPE (thin_fat_ptr_type))));\n-  return build_unc_object_type (template_type, object_type, name);\n+\n+  return\n+    build_unc_object_type (template_type, object_type, name, debug_info_p);\n }\n \n /* Shift the component offsets within an unconstrained object TYPE to make it"}, {"sha": "299860501b4178ce8350e588826e41581c8a7491", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -1984,7 +1984,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n     {\n       tree storage_type\n \t= build_unc_object_type_from_ptr (result_type, type,\n-\t\t\t\t\t  get_identifier (\"ALLOC\"));\n+\t\t\t\t\t  get_identifier (\"ALLOC\"), false);\n       tree template_type = TREE_TYPE (TYPE_FIELDS (storage_type));\n       tree storage_ptr_type = build_pointer_type (storage_type);\n       tree storage;"}, {"sha": "3435fdf8c454eba182db8d1f57a2dcd9aae54f28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -1,3 +1,8 @@\n+2010-05-08  Quentin Ochem  <ochem@adacore.com>\n+\n+\t* gnat.dg/sizetype3.ad[sb]: New test.\n+\t* gnat.dg/sizetype3_pkg.ads: New helper.\n+\n 2010-05-07  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \n \tPR c++/43951"}, {"sha": "31bab1116dcd40706a0240a769eeec9e2f597559", "filename": "gcc/testsuite/gnat.dg/sizetype3.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.adb?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Sizetype3_Pkg; use Sizetype3_Pkg;\n+\n+package body Sizetype3 is\n+\n+   procedure Handle_Enum_Values is\n+      Values : constant List := F;\n+      L : Values_Array_Access;\n+   begin\n+      L := new Values_Array (1 .. Values'Length);\n+   end Handle_Enum_Values;\n+\n+   procedure Simplify_Type_Of is\n+   begin\n+      Handle_Enum_Values;\n+   end Simplify_Type_Of;\n+\n+end Sizetype3;"}, {"sha": "f57e6ab97c9ada58163ff79d95d7cf0ec2250bdb", "filename": "gcc/testsuite/gnat.dg/sizetype3.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3.ads?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -0,0 +1,8 @@\n+package Sizetype3 is\n+\n+   type Values_Array is array (Positive range <>) of Integer;\n+   type Values_Array_Access is access all Values_Array;\n+\n+   procedure Simplify_Type_Of;\n+\n+end Sizetype3;"}, {"sha": "ee03262e28c730a29e08490ac2ca85c477203f15", "filename": "gcc/testsuite/gnat.dg/sizetype3_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928dfa4bd0a32e35a8366d7ef21323a76f54a97c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype3_pkg.ads?ref=928dfa4bd0a32e35a8366d7ef21323a76f54a97c", "patch": "@@ -0,0 +1,7 @@\n+package Sizetype3_Pkg is\n+\n+   type List is array (Integer range <>) of Integer;\n+\n+   function F return List;\n+\n+end Sizetype3_Pkg;"}]}