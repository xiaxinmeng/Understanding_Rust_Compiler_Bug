{"sha": "fee7654ec68b5a1a72169620a5609ce7a74cfa75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlNzY1NGVjNjhiNWExYTcyMTY5NjIwYTU2MDljZTdhNzRjZmE3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-29T06:39:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-29T06:39:42Z"}, "message": "cp-tree.h (lang_type): Replace abstract_virtuals with pure_virtuals.\n\n\t* cp-tree.h (lang_type): Replace abstract_virtuals with pure_virtuals.\n\t(CLASSTYPE_ABSTRACT_VIRTUALS): Rename to ...\n\t(CLASSTYPE_PURE_VIRTUALS): ... this.\n\t(lang_decl_flags): Replace abstract_virtual with pure_virtual.\n\t(DECL_ABSTRACT_VIRTUAL_P): Rename to ...\n\t(DECL_PURE_VIRTUAL_P): ... this.\n\t(get_abstract_virtuals): Rename to ...\n\t(get_pure_virtuals): ... this.\n\t* call.c (build_new_method_call): Replace DECL_PURE_VIRTUAL_P with\n\tDECL_ABSTRACT_VIRTUAL_P.  Replace CLASSTYPE_ABSTRACT_VIRTUALS with\n\tCLASSTYPE_PURE_VIRTUALS.\n\t* class.c (build_vtable_entry): Likewise.\n\t(finish_struct_bits): Likewise.  Call get_pure_virtuals, not\n\tget_abstract_virtuals.\n\t(build_vtbl_initializer): Likewise.\n\t(override_one_vtable): Likewise.\n\t(check_methods): Likewise.\n\t* decl.c (duplicate_decls): Likewise.\n\t(redeclaration_error_message): Likewise.\n\t(lang_mark_tree): Likewise.\n\t* decl2.c (grok_function_init): Likewise.\n\t(import_export_vtable): Likewise.\n\t(import_expor_class): Likewise.\n\t* typeck2.c (abstract_virtuals_error): Likewise.\n\t* xref.c (GNU_xref_member): Likewise.\n\t* search.c (get_abstract_virtuals): Rename to get_pure_virtuals.\n\nFrom-SVN: r31114", "tree": {"sha": "02af3c9fb37ba315f28a7d7bf244be358e737985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02af3c9fb37ba315f28a7d7bf244be358e737985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee7654ec68b5a1a72169620a5609ce7a74cfa75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee7654ec68b5a1a72169620a5609ce7a74cfa75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee7654ec68b5a1a72169620a5609ce7a74cfa75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee7654ec68b5a1a72169620a5609ce7a74cfa75/comments", "author": null, "committer": null, "parents": [{"sha": "0430641bc242b40fc5fdafd534088ae7e8a49aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0430641bc242b40fc5fdafd534088ae7e8a49aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0430641bc242b40fc5fdafd534088ae7e8a49aba"}], "stats": {"total": 116, "additions": 71, "deletions": 45}, "files": [{"sha": "91c343aa58ff781a6c94b00771524aed5d8a450a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -1,3 +1,32 @@\n+1999-12-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (lang_type): Replace abstract_virtuals with pure_virtuals.\n+\t(CLASSTYPE_ABSTRACT_VIRTUALS): Rename to ...\n+\t(CLASSTYPE_PURE_VIRTUALS): ... this.\n+\t(lang_decl_flags): Replace abstract_virtual with pure_virtual.\n+\t(DECL_ABSTRACT_VIRTUAL_P): Rename to ...\n+\t(DECL_PURE_VIRTUAL_P): ... this.\n+\t(get_abstract_virtuals): Rename to ...\n+\t(get_pure_virtuals): ... this.\n+\t* call.c (build_new_method_call): Replace DECL_PURE_VIRTUAL_P with\n+\tDECL_ABSTRACT_VIRTUAL_P.  Replace CLASSTYPE_ABSTRACT_VIRTUALS with\n+\tCLASSTYPE_PURE_VIRTUALS.\n+\t* class.c (build_vtable_entry): Likewise.\n+\t(finish_struct_bits): Likewise.  Call get_pure_virtuals, not\n+\tget_abstract_virtuals.\n+\t(build_vtbl_initializer): Likewise.\n+\t(override_one_vtable): Likewise.\n+\t(check_methods): Likewise.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t(redeclaration_error_message): Likewise.\n+\t(lang_mark_tree): Likewise.\n+\t* decl2.c (grok_function_init): Likewise.\n+\t(import_export_vtable): Likewise.\n+\t(import_expor_class): Likewise.\n+\t* typeck2.c (abstract_virtuals_error): Likewise.\n+\t* xref.c (GNU_xref_member): Likewise.\n+\t* search.c (get_abstract_virtuals): Rename to get_pure_virtuals.\n+\t\n 1999-12-26  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cp-tree.h: Replace ENABLE_CHECKING with ENABLE_TREE_CHECKING"}, {"sha": "fd5cfeecb359a4744d8e1d9459116442d8b7966e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -4319,11 +4319,11 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       return error_mark_node;\n     }\n \n-  if (DECL_ABSTRACT_VIRTUAL_P (cand->fn)\n+  if (DECL_PURE_VIRTUAL_P (cand->fn)\n       && instance == current_class_ref\n       && DECL_CONSTRUCTOR_P (current_function_decl)\n       && ! (flags & LOOKUP_NONVIRTUAL)\n-      && value_member (cand->fn, CLASSTYPE_ABSTRACT_VIRTUALS (basetype)))\n+      && value_member (cand->fn, CLASSTYPE_PURE_VIRTUALS (basetype)))\n     cp_error (\"abstract virtual `%#D' called from constructor\", cand->fn);\n   if (TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE\n       && is_dummy_object (instance_ptr))"}, {"sha": "628e5560c32fd4179333acab0484da90c0b4f0ca", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -389,7 +389,7 @@ build_vtable_entry (delta, pfn)\n   if (flag_vtable_thunks)\n     {\n       HOST_WIDE_INT idelta = TREE_INT_CST_LOW (delta);\n-      if (idelta && ! DECL_ABSTRACT_VIRTUAL_P (TREE_OPERAND (pfn, 0)))\n+      if (idelta && ! DECL_PURE_VIRTUAL_P (TREE_OPERAND (pfn, 0)))\n \t{\n \t  pfn = build1 (ADDR_EXPR, vtable_entry_type,\n \t\t\tmake_thunk (pfn, idelta));\n@@ -1786,17 +1786,15 @@ finish_struct_bits (t, max_has_virtual)\n     }\n \n   if (n_baseclasses && max_has_virtual)\n-    {\n-      /* For a class w/o baseclasses, `finish_struct' has set\n-         CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by definition). Similarly\n-         for a class who's base classes do not have vtables. When neither\n-         of these is true, we might have removed abstract virtuals (by\n-         providing a definition), added some (by declaring new ones), or\n-         redeclared ones from a base class. We need to recalculate what's\n-         really an abstract virtual at this point (by looking in the\n-         vtables).  */\n-      CLASSTYPE_ABSTRACT_VIRTUALS (t) = get_abstract_virtuals (t);\n-    }\n+    /* For a class w/o baseclasses, `finish_struct' has set\n+       CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by\n+       definition). Similarly for a class whose base classes do not\n+       have vtables. When neither of these is true, we might have\n+       removed abstract virtuals (by providing a definition), added\n+       some (by declaring new ones), or redeclared ones from a base\n+       class. We need to recalculate what's really an abstract virtual\n+       at this point (by looking in the vtables).  */\n+      get_pure_virtuals (t);\n \n   if (n_baseclasses)\n     {\n@@ -2251,7 +2249,7 @@ build_vtbl_initializer (binfo)\n \n       /* You can't call an abstract virtual function; it's abstract.\n \t So, we replace these functions with __pure_virtual.  */\n-      if (DECL_ABSTRACT_VIRTUAL_P (fn))\n+      if (DECL_PURE_VIRTUAL_P (fn))\n \tfn = abort_fndecl;\n \n       /* Package up that information for the vtable.  */\n@@ -2806,8 +2804,8 @@ override_one_vtable (binfo, old, t)\n \t    copy_lang_decl (fndecl);\n \t    DECL_NEEDS_FINAL_OVERRIDER_P (fndecl) = 1;\n \t    /* Make sure we search for it later.  */\n-\t    if (! CLASSTYPE_ABSTRACT_VIRTUALS (t))\n-\t      CLASSTYPE_ABSTRACT_VIRTUALS (t) = error_mark_node;\n+\t    if (! CLASSTYPE_PURE_VIRTUALS (t))\n+\t      CLASSTYPE_PURE_VIRTUALS (t) = error_mark_node;\n \n \t    /* We can use integer_zero_node, as we will core dump\n \t       if this is used anyway.  */\n@@ -3922,17 +3920,17 @@ check_methods (t)\n       DECL_FIELD_SIZE (x) = 0;\n \n       check_for_override (x, t);\n-      if (DECL_ABSTRACT_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n+      if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n \tcp_error_at (\"initializer specified for non-virtual method `%D'\", x);\n \n       /* The name of the field is the original field name\n \t Save this in auxiliary field for later overloading.  */\n       if (DECL_VINDEX (x))\n \t{\n \t  TYPE_POLYMORPHIC_P (t) = 1;\n-\t  if (DECL_ABSTRACT_VIRTUAL_P (x))\n-\t    CLASSTYPE_ABSTRACT_VIRTUALS (t)\n-\t      = tree_cons (NULL_TREE, x, CLASSTYPE_ABSTRACT_VIRTUALS (t));\n+\t  if (DECL_PURE_VIRTUAL_P (x))\n+\t    CLASSTYPE_PURE_VIRTUALS (t)\n+\t      = tree_cons (NULL_TREE, x, CLASSTYPE_PURE_VIRTUALS (t));\n \t}\n     }\n }"}, {"sha": "f572916ffb34178c6f613c92ee61d24ba48cef2e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -1240,7 +1240,7 @@ struct lang_type\n \n   union tree_node *size;\n \n-  union tree_node *abstract_virtuals;\n+  union tree_node *pure_virtuals;\n   union tree_node *friend_classes;\n \n   union tree_node *rtti;\n@@ -1428,7 +1428,7 @@ struct lang_type\n /* A cons list of virtual functions which cannot be inherited by\n    derived classes.  When deriving from this type, the derived\n    class must provide its own definition for each of these functions.  */\n-#define CLASSTYPE_ABSTRACT_VIRTUALS(NODE) (TYPE_LANG_SPECIFIC(NODE)->abstract_virtuals)\n+#define CLASSTYPE_PURE_VIRTUALS(NODE) (TYPE_LANG_SPECIFIC(NODE)->pure_virtuals)\n \n /* Nonzero means that this aggr type has been `closed' by a semicolon.  */\n #define CLASSTYPE_GOT_SEMICOLON(NODE) (TYPE_LANG_SPECIFIC (NODE)->got_semicolon)\n@@ -1612,7 +1612,7 @@ struct lang_decl_flags\n   unsigned static_function : 1;\n   unsigned const_memfunc : 1;\n   unsigned volatile_memfunc : 1;\n-  unsigned abstract_virtual : 1;\n+  unsigned pure_virtual : 1;\n   unsigned constructor_for_vbase_attr : 1;\n \n   unsigned mutable_flag : 1;\n@@ -1780,9 +1780,9 @@ struct lang_decl\n    constructor.  */\n #define DECL_NONCONVERTING_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.nonconverting)\n \n-/* Nonzero for FUNCTION_DECL means that this member function\n-   exists as part of an abstract class's interface.  */\n-#define DECL_ABSTRACT_VIRTUAL_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.abstract_virtual)\n+/* Nonzero for FUNCTION_DECL means that this member function is a pure\n+   virtual function.  */\n+#define DECL_PURE_VIRTUAL_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.pure_virtual)\n \n /* Nonzero for FUNCTION_DECL means that this member function\n    must be overridden by derived classes.  */\n@@ -3868,7 +3868,7 @@ extern tree lookup_fnfields\t\t\tPROTO((tree, tree, int));\n extern tree lookup_member\t\t\tPROTO((tree, tree, int, int));\n extern tree lookup_nested_tag\t\t\tPROTO((tree, tree));\n extern tree get_matching_virtual\t\tPROTO((tree, tree, int));\n-extern tree get_abstract_virtuals\t\tPROTO((tree));\n+extern void get_pure_virtuals\t\t        PROTO((tree));\n extern tree init_vbase_pointers\t\t\tPROTO((tree, tree));\n extern void expand_indirect_vtbls_init\t\tPROTO((tree, tree, tree));\n extern void clear_search_slots\t\t\tPROTO((tree));"}, {"sha": "51d2d9ec02eb5057857fdacd842618009835e637", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -3247,7 +3247,7 @@ duplicate_decls (newdecl, olddecl)\n \tDECL_PENDING_INLINE_INFO (newdecl) = DECL_PENDING_INLINE_INFO (olddecl);\n       DECL_STATIC_CONSTRUCTOR (newdecl) |= DECL_STATIC_CONSTRUCTOR (olddecl);\n       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n-      DECL_ABSTRACT_VIRTUAL_P (newdecl) |= DECL_ABSTRACT_VIRTUAL_P (olddecl);\n+      DECL_PURE_VIRTUAL_P (newdecl) |= DECL_PURE_VIRTUAL_P (olddecl);\n       DECL_VIRTUAL_P (newdecl) |= DECL_VIRTUAL_P (olddecl);\n       DECL_NEEDS_FINAL_OVERRIDER_P (newdecl) |= DECL_NEEDS_FINAL_OVERRIDER_P (olddecl);\n       DECL_THIS_STATIC (newdecl) |= DECL_THIS_STATIC (olddecl);\n@@ -4523,7 +4523,7 @@ redeclaration_error_message (newdecl, olddecl)\n       /* If this is a pure function, its olddecl will actually be\n \t the original initialization to `0' (which we force to call\n \t abort()).  Don't complain about redefinition in this case.  */\n-      if (DECL_LANG_SPECIFIC (olddecl) && DECL_ABSTRACT_VIRTUAL_P (olddecl))\n+      if (DECL_LANG_SPECIFIC (olddecl) && DECL_PURE_VIRTUAL_P (olddecl))\n \treturn 0;\n \n       /* If both functions come from different namespaces, this is not\n@@ -14519,7 +14519,7 @@ lang_mark_tree (t)\n \t  ggc_mark_tree (lt->tags);\n \t  ggc_mark_tree (lt->search_slot);\n \t  ggc_mark_tree (lt->size);\n-\t  ggc_mark_tree (lt->abstract_virtuals);\n+\t  ggc_mark_tree (lt->pure_virtuals);\n \t  ggc_mark_tree (lt->friend_classes);\n \t  ggc_mark_tree (lt->rtti);\n \t  ggc_mark_tree (lt->methods);"}, {"sha": "3633c12388d52ddecdc64f94fb6b8c467a3cfff1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -1880,7 +1880,7 @@ grok_function_init (decl, init)\n \t  DECL_RTL (decl) = DECL_RTL (abort_fndecl);\n \t}\n #endif\n-      DECL_ABSTRACT_VIRTUAL_P (decl) = 1;\n+      DECL_PURE_VIRTUAL_P (decl) = 1;\n       if (DECL_NAME (decl) == ansi_opname [(int) MODIFY_EXPR])\n \t{\n \t  tree parmtype\n@@ -2420,7 +2420,7 @@ import_export_vtable (decl, type, final)\n \t       method = TREE_CHAIN (method))\n \t    if (DECL_VINDEX (method) != NULL_TREE\n \t\t&& ! DECL_THIS_INLINE (method)\n-\t\t&& ! DECL_ABSTRACT_VIRTUAL_P (method))\n+\t\t&& ! DECL_PURE_VIRTUAL_P (method))\n \t      {\n \t\tfound = 1;\n \t\tbreak;\n@@ -2489,7 +2489,7 @@ import_export_class (ctype)\n \t{\n \t  if (DECL_VINDEX (method) != NULL_TREE\n \t      && !DECL_THIS_INLINE (method)\n-\t      && !DECL_ABSTRACT_VIRTUAL_P (method))\n+\t      && !DECL_PURE_VIRTUAL_P (method))\n \t    {\n \t      import_export = (DECL_REALLY_EXTERN (method) ? -1 : 1);\n \t      break;"}, {"sha": "ba414de4e0b3bc2658a5c7fd5d03b9efff86f930", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -2138,7 +2138,7 @@ get_abstract_virtuals_1 (binfo, do_self, abstract_virtuals)\n       while (virtuals)\n \t{\n \t  tree base_fndecl = TREE_VALUE (virtuals);\n-\t  if (DECL_ABSTRACT_VIRTUAL_P (base_fndecl))\n+\t  if (DECL_PURE_VIRTUAL_P (base_fndecl))\n \t    abstract_virtuals = tree_cons (NULL_TREE, base_fndecl, \n \t\t\t\t\t   abstract_virtuals);\n \t  virtuals = TREE_CHAIN (virtuals);\n@@ -2147,12 +2147,10 @@ get_abstract_virtuals_1 (binfo, do_self, abstract_virtuals)\n   return abstract_virtuals;\n }\n \n-/* Return the list of virtual functions which are abstract in type TYPE.\n-   This information is cached, and so must be built on a\n-   non-temporary obstack.  */\n+/* Set CLASSTYPE_PURE_VIRTUALS for TYPE.  */\n \n-tree\n-get_abstract_virtuals (type)\n+void\n+get_pure_virtuals (type)\n      tree type;\n {\n   tree vbases;\n@@ -2173,13 +2171,14 @@ get_abstract_virtuals (type)\n \t  tree base_fndecl = TREE_VALUE (virtuals);\n \t  if (DECL_NEEDS_FINAL_OVERRIDER_P (base_fndecl))\n \t    cp_error (\"`%#D' needs a final overrider\", base_fndecl);\n-\t  else if (DECL_ABSTRACT_VIRTUAL_P (base_fndecl))\n+\t  else if (DECL_PURE_VIRTUAL_P (base_fndecl))\n \t    abstract_virtuals = tree_cons (NULL_TREE, base_fndecl, \n \t\t\t\t\t   abstract_virtuals);\n \t  virtuals = TREE_CHAIN (virtuals);\n \t}\n     }\n-  return nreverse (abstract_virtuals);\n+\n+  CLASSTYPE_PURE_VIRTUALS (type) = nreverse (abstract_virtuals);\n }\n \n static tree"}, {"sha": "bda3c077f7aac096f725da7d51321148fcc91d79", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -136,10 +136,10 @@ abstract_virtuals_error (decl, type)\n   tree u;\n   tree tu;\n \n-  if (!CLASS_TYPE_P (type) || !CLASSTYPE_ABSTRACT_VIRTUALS (type))\n+  if (!CLASS_TYPE_P (type) || !CLASSTYPE_PURE_VIRTUALS (type))\n     return 0;\n \n-  u = CLASSTYPE_ABSTRACT_VIRTUALS (type);\n+  u = CLASSTYPE_PURE_VIRTUALS (type);\n   if (decl)\n     {\n       if (TREE_CODE (decl) == RESULT_DECL)"}, {"sha": "94b757b5c8f824300626bb5c2d7c53a8d5d85a43", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee7654ec68b5a1a72169620a5609ce7a74cfa75/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=fee7654ec68b5a1a72169620a5609ce7a74cfa75", "patch": "@@ -608,7 +608,7 @@ GNU_xref_member(cls, fld)\n     confg = 1;\n \n   pure = 0;\n-  if (TREE_CODE (fld) == FUNCTION_DECL && DECL_ABSTRACT_VIRTUAL_P(fld))\n+  if (TREE_CODE (fld) == FUNCTION_DECL && DECL_PURE_VIRTUAL_P(fld))\n     pure = 1;\n \n   d = IDENTIFIER_POINTER(cls);"}]}