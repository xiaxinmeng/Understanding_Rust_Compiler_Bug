{"sha": "14dc5b71d7e845be4ac21b16e849d6689df81b67", "node_id": "C_kwDOANBUbNoAKDE0ZGM1YjcxZDdlODQ1YmU0YWMyMWIxNmU4NDlkNjY4OWRmODFiNjc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-12-03T16:02:19Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-12-06T18:27:10Z"}, "message": "Use dominators to reduce cache-flling.\n\nBefore walking the CFG and filling all cache entries, check if the\nsame information is available in a dominator.\n\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Check for\n\ta range from dominators before filling the cache.\n\t(ranger_cache::range_from_dom): New.\n\t* gimple-range-cache.h (ranger_cache::range_from_dom): Add prototype.", "tree": {"sha": "5fbb2fe9eca38e8c1debb1f0909876668d36da30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbb2fe9eca38e8c1debb1f0909876668d36da30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14dc5b71d7e845be4ac21b16e849d6689df81b67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14dc5b71d7e845be4ac21b16e849d6689df81b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14dc5b71d7e845be4ac21b16e849d6689df81b67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14dc5b71d7e845be4ac21b16e849d6689df81b67/comments", "author": null, "committer": null, "parents": [{"sha": "ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4a5f571bd3a49c495d1b08b42c8c01833061e6"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "47e95ec23beb8a0454861eac642c2138c370521d", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14dc5b71d7e845be4ac21b16e849d6689df81b67/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14dc5b71d7e845be4ac21b16e849d6689df81b67/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=14dc5b71d7e845be4ac21b16e849d6689df81b67", "patch": "@@ -1312,6 +1312,20 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n       fprintf (dump_file, \" : \");\n     }\n \n+  // If there are dominators, check if a dominators can supply the range.\n+  if (dom_info_available_p (CDI_DOMINATORS)\n+      && range_from_dom (block_result, name, bb))\n+    {\n+      m_on_entry.set_bb_range (name, bb, block_result);\n+      if (DEBUG_RANGE_CACHE)\n+\t{\n+\t  fprintf (dump_file, \"Filled from dominator! :  \");\n+\t  block_result.dump (dump_file);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+      return;\n+    }\n+\n   while (m_workback.length () > 0)\n     {\n       basic_block node = m_workback.pop ();\n@@ -1394,3 +1408,62 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n     fprintf (dump_file, \"  Propagation update done.\\n\");\n }\n \n+\n+// Check to see if we can simply get the range from the dominator.\n+\n+bool\n+ranger_cache::range_from_dom (irange &r, tree name, basic_block bb)\n+{\n+  gcc_checking_assert (dom_info_available_p (CDI_DOMINATORS));\n+\n+  // Search back to the definition block or entry block.\n+  basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (name));\n+  if (def_bb == NULL)\n+    def_bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n+\n+  // Flag if we encounter a block with non-null set.\n+  bool non_null = false;\n+  for (bb = get_immediate_dominator (CDI_DOMINATORS, bb);\n+       bb && bb != def_bb;\n+       bb = get_immediate_dominator (CDI_DOMINATORS, bb))\n+    {\n+      // If there is an outgoing range, the on-entry value won't work.\n+      if (m_gori.has_edge_range_p (name, bb))\n+\t{\n+\t  // Check if we can seed this block with a dominator value. THis will\n+\t  // prevent the ache from being filled back further than this.\n+\t  if (bb != def_bb && range_from_dom (r, name, bb))\n+\t    m_on_entry.set_bb_range (name, bb, r);\n+\t  return false;\n+\t}\n+\n+      // Flag if we see a non-null reference during this walk.\n+      if (m_non_null.non_null_deref_p (name, bb, false))\n+\tnon_null = true;\n+\n+      // If range-on-entry is set in this block, it can be used.\n+      if (m_on_entry.get_bb_range (r, name, bb))\n+\t{\n+\t  // Apply non-null if appropriate.\n+\t  if (r.varying_p () && non_null)\n+\t    {\n+\t      gcc_checking_assert (POINTER_TYPE_P (TREE_TYPE (name)));\n+\t      r.set_nonzero (TREE_TYPE (name));\n+\t    }\n+\t  return true;\n+\t}\n+    }\n+  // If this is the def block, and NAME is an export, then this value\n+  // cannot be used.\n+  if (bb == def_bb && m_gori.has_edge_range_p (name, bb))\n+    return false;\n+\n+  // Otherwise choose the global value and use it.\n+  get_global_range (r, name);\n+  if (r.varying_p () && non_null)\n+    {\n+      gcc_checking_assert (POINTER_TYPE_P (TREE_TYPE (name)));\n+      r.set_nonzero (TREE_TYPE (name));\n+    }\n+  return true;\n+}"}, {"sha": "2c52a0b6ce3380af762375fe7282a74e10a0b62d", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14dc5b71d7e845be4ac21b16e849d6689df81b67/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14dc5b71d7e845be4ac21b16e849d6689df81b67/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=14dc5b71d7e845be4ac21b16e849d6689df81b67", "patch": "@@ -98,6 +98,7 @@ class ranger_cache : public range_query\n   virtual bool range_of_expr (irange &r, tree name, gimple *stmt);\n   virtual bool range_on_edge (irange &r, edge e, tree expr);\n   bool block_range (irange &r, basic_block bb, tree name, bool calc = true);\n+  bool range_from_dom (irange &r, tree name, basic_block bb);\n \n   bool get_global_range (irange &r, tree name) const;\n   bool get_global_range (irange &r, tree name, bool &current_p);"}]}