{"sha": "9c8728721e9f5bb6c95061409a85e9cbb0b3a585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4NzI4NzIxZTlmNWJiNmM5NTA2MTQwOWE4NWU5Y2JiMGIzYTU4NQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-06T13:14:03Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-06T13:14:03Z"}, "message": "(PROMOTE_MODE): Promote HImode integers as signed.\n\n(BYTES_BIG_ENDIAN): Allow target description to override default.\n(LOAD_EXTEND_OP): When big-endian, HImode loads are sign extended.\n\nFrom-SVN: r7447", "tree": {"sha": "8db5bfe854584e6ca190f444e15fbc2ab4349973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8db5bfe854584e6ca190f444e15fbc2ab4349973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c8728721e9f5bb6c95061409a85e9cbb0b3a585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8728721e9f5bb6c95061409a85e9cbb0b3a585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8728721e9f5bb6c95061409a85e9cbb0b3a585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8728721e9f5bb6c95061409a85e9cbb0b3a585/comments", "author": null, "committer": null, "parents": [{"sha": "88e70606744ffae9b4e2da6bc610c01548efde48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e70606744ffae9b4e2da6bc610c01548efde48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e70606744ffae9b4e2da6bc610c01548efde48"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "2898ad3348b61598d084b3c93951bbb2d00dcb73", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8728721e9f5bb6c95061409a85e9cbb0b3a585/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8728721e9f5bb6c95061409a85e9cbb0b3a585/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9c8728721e9f5bb6c95061409a85e9cbb0b3a585", "patch": "@@ -168,6 +168,8 @@ extern enum processor_type arm_cpu;\n     {\t\t\t\t\t\\\n       if (MODE == QImode)\t\t\\\n \tUNSIGNEDP = 1;\t\t\t\\\n+      else if (MODE == HImode)\t\t\\\n+\tUNSIGNEDP = 0;\t\t\t\\\n       (MODE) = SImode;\t\t\t\\\n     }\n \n@@ -197,8 +199,13 @@ extern enum processor_type arm_cpu;\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0\n \n-/* Define this if most significant byte of a word is the lowest numbered.  */\n+/* Define this if most significant byte of a word is the lowest numbered.  \n+   Most ARM processors are run in little endian mode, but it should now be\n+   possible to build the compiler to support big endian code. (Note: This\n+   is currently a compiler-build-time option, not a run-time one.  */\n+#ifndef BYTES_BIG_ENDIAN\n #define BYTES_BIG_ENDIAN  0\n+#endif\n \n /* Define this if most significant word of a multiword number is the lowest\n    numbered.  */\n@@ -1129,8 +1136,9 @@ do\t\t\t\t\t\t\t\t\t\\\n    will either zero-extend or sign-extend.  The value of this macro should\n    be the code that says which one of the two operations is implicitly\n    done, NIL if none.  */\n-#define LOAD_EXTEND_OP(MODE) \\\n-  ((MODE) == QImode ? ZERO_EXTEND : NIL)\n+#define LOAD_EXTEND_OP(MODE)\t\t\t\t\t\t\\\n+  ((MODE) == QImode ? ZERO_EXTEND\t\t\t\t\t\\\n+   : ((BYTES_BIG_ENDIAN && (MODE) == HImode) ? SIGN_EXTEND : NIL))\n \n /* Define this if zero-extension is slow (more than one real instruction).\n    On the ARM, it is more than one instruction only if not fetching from"}]}