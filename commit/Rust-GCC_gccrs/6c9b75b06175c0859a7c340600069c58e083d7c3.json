{"sha": "6c9b75b06175c0859a7c340600069c58e083d7c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5Yjc1YjA2MTc1YzA4NTlhN2MzNDA2MDAwNjljNThlMDgzZDdjMw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-02-10T18:10:12Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-02-10T18:10:12Z"}, "message": "Use __GTHREAD_MUTEX_INIT_FUNCTION on Tru64 UNIX (PR libstdc++/51296)\n\n\tPR libstdc++/51296\n\t* config/os/osf/ctype_base.h,\n\tconfig/os/osf/ctype_configure_char.cc,\n\tconfig/os/osf/ctype_inline.h, config/os/osf/error_constants.h:\n\tCopy from config/os/generic.\n\t* config/os/osf/os_defines.h: Likewise.\n\t(_GTHREAD_USE_MUTEX_INIT_FUNC, _GTHREAD_USE_COND_INIT_FUNC):\n\tDefine.\n\t* configure.host <osf*>: Use os/osf for os_include_dir.\n\nFrom-SVN: r184108", "tree": {"sha": "f31f06f6ad51b31b8163924847dc23f0f2afec9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31f06f6ad51b31b8163924847dc23f0f2afec9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9b75b06175c0859a7c340600069c58e083d7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9b75b06175c0859a7c340600069c58e083d7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9b75b06175c0859a7c340600069c58e083d7c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9b75b06175c0859a7c340600069c58e083d7c3/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d4fb4935cf2e224a01e6409341fb6ad5eb0462d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4fb4935cf2e224a01e6409341fb6ad5eb0462d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4fb4935cf2e224a01e6409341fb6ad5eb0462d"}], "stats": {"total": 559, "additions": 558, "deletions": 1}, "files": [{"sha": "b2972f19f566a6a0a3ec9d466d35f7dde22f5d86", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -1,3 +1,15 @@\n+2012-02-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libstdc++/51296\n+\t* config/os/osf/ctype_base.h,\n+\tconfig/os/osf/ctype_configure_char.cc,\n+\tconfig/os/osf/ctype_inline.h, config/os/osf/error_constants.h:\n+\tCopy from config/os/generic.\n+\t* config/os/osf/os_defines.h: Likewise.\n+\t(_GTHREAD_USE_MUTEX_INIT_FUNC, _GTHREAD_USE_COND_INIT_FUNC):\n+\tDefine.\n+\t* configure.host <osf*>: Use os/osf for os_include_dir.\n+\n 2012-02-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/abi/post/alpha-linux-gnu/baseline_symbols.txt: Regenerated."}, {"sha": "72aa6f2ccb02d63fa35bc2d47d2f66bc4eae38b1", "filename": "libstdc++-v3/config/os/osf/ctype_base.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_base.h?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -0,0 +1,59 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2003, 2009, 2010\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// Default information, may not be appropriate for specific host.\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;\n+    static const mask upper    \t= 1 << 0;\n+    static const mask lower \t= 1 << 1;\n+    static const mask alpha \t= 1 << 2;\n+    static const mask digit \t= 1 << 3;\n+    static const mask xdigit \t= 1 << 4;\n+    static const mask space \t= 1 << 5;\n+    static const mask print \t= 1 << 6;\n+    static const mask graph \t= (1 << 2) | (1 << 3) | (1 << 9); // alnum|punct\n+    static const mask cntrl \t= 1 << 8;\n+    static const mask punct \t= 1 << 9;\n+    static const mask alnum \t= (1 << 2) | (1 << 3);  // alpha|digit\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "0daedf54356b486946e10245c56d7209ee4c7eaa", "filename": "libstdc++-v3/config/os/osf/ctype_configure_char.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_configure_char.cc?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -0,0 +1,99 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_configure_char.cc */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+// Information as gleaned from /usr/include/ctype.h\n+\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return 0; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table())\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return ::toupper((int) __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return ::tolower((int) __c); }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ae54f2968bedd00c7f909d90b835d9d7e56114d9", "filename": "libstdc++-v3/config/os/osf/ctype_inline.h", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fctype_inline.h?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -0,0 +1,168 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2003, 2009, 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/ctype_inline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+// The following definitions are portable, but insanely slow. If one\n+// cares at all about performance, then specialized ctype\n+// functionality should be added for the native os in question: see\n+// the config/os/bits/ctype_*.h files.\n+\n+// Constructing a synthetic \"C\" table should be seriously considered...\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { \n+    if (_M_table)\n+      return _M_table[static_cast<unsigned char>(__c)] & __m;\n+    else\n+      {\n+\tbool __ret = false;\n+\tconst size_t __bitmasksize = 15; \n+\tsize_t __bitcur = 0; // Lowest bitmask in ctype_base == 0\n+\tfor (; __bitcur <= __bitmasksize; ++__bitcur)\n+\t  {\n+\t    const mask __bit = static_cast<mask>(1 << __bitcur);\n+\t    if (__m & __bit)\n+\t      {\n+\t\tbool __testis;\n+\t\tswitch (__bit)\n+\t\t  {\n+\t\t  case space:\n+\t\t    __testis = isspace(__c);\n+\t\t    break;\n+\t\t  case print:\n+\t\t    __testis = isprint(__c);\n+\t\t    break;\n+\t\t  case cntrl:\n+\t\t    __testis = iscntrl(__c);\n+\t\t    break;\n+\t\t  case upper:\n+\t\t    __testis = isupper(__c);\n+\t\t    break;\n+\t\t  case lower:\n+\t\t    __testis = islower(__c);\n+\t\t    break;\n+\t\t  case alpha:\n+\t\t    __testis = isalpha(__c);\n+\t\t    break;\n+\t\t  case digit:\n+\t\t    __testis = isdigit(__c);\n+\t\t    break;\n+\t\t  case punct:\n+\t\t    __testis = ispunct(__c);\n+\t\t    break;\n+\t\t  case xdigit:\n+\t\t    __testis = isxdigit(__c);\n+\t\t    break;\n+\t\t  case alnum:\n+\t\t    __testis = isalnum(__c);\n+\t\t    break;\n+\t\t  case graph:\n+\t\t    __testis = isgraph(__c);\n+\t\t    break;\n+\t\t  default:\n+\t\t    __testis = false;\n+\t\t    break;\n+\t\t  }\n+\t\t__ret |= __testis;\n+\t      }\n+\t  }\n+\treturn __ret;\n+      }\n+  }\n+   \n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    if (_M_table)\n+      while (__low < __high)\n+\t*__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    else\n+      {\n+\t// Highest bitmask in ctype_base == 10.\n+\tconst size_t __bitmasksize = 15; \n+\tfor (;__low < __high; ++__vec, ++__low)\n+\t  {\n+\t    mask __m = 0;\n+\t    // Lowest bitmask in ctype_base == 0\n+\t    size_t __i = 0; \n+\t    for (;__i <= __bitmasksize; ++__i)\n+\t      {\n+\t\tconst mask __bit = static_cast<mask>(1 << __i);\n+\t\tif (this->is(__bit, *__low))\n+\t\t  __m |= __bit;\n+\t      }\n+\t    *__vec = __m;\n+\t  }\n+      }\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+\t++__low;\n+    else\n+      while (__low < __high && !this->is(__m, *__low))\n+\t++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+\t++__low;\n+    else\n+      while (__low < __high && this->is(__m, *__low) != 0)\n+\t++__low;\n+    return __low;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "88ea56506c23a7f891fb8c838ca7029b02848f08", "filename": "libstdc++-v3/config/os/osf/error_constants.h", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Ferror_constants.h?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -0,0 +1,178 @@\n+// Specific definitions for generic platforms  -*- C++ -*-\n+\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/error_constants.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{system_error}\n+ */\n+\n+#ifndef _GLIBCXX_ERROR_CONSTANTS\n+#define _GLIBCXX_ERROR_CONSTANTS 1\n+\n+#include <bits/c++config.h>\n+#include <cerrno>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  enum class errc\n+    {\n+      address_family_not_supported = \t\tEAFNOSUPPORT,\n+      address_in_use = \t\t\t\tEADDRINUSE,\n+      address_not_available = \t\t\tEADDRNOTAVAIL,\n+      already_connected = \t\t\tEISCONN,\n+      argument_list_too_long = \t\t\tE2BIG,\n+      argument_out_of_domain = \t\t\tEDOM,\n+      bad_address = \t\t\t\tEFAULT,\n+      bad_file_descriptor = \t\t\tEBADF,\n+\n+#ifdef _GLIBCXX_HAVE_EBADMSG\n+      bad_message = \t\t\t\tEBADMSG,\n+#endif\n+\n+      broken_pipe = \t\t\t\tEPIPE,\n+      connection_aborted = \t\t\tECONNABORTED,\n+      connection_already_in_progress = \t\tEALREADY,\n+      connection_refused = \t\t\tECONNREFUSED,\n+      connection_reset = \t\t\tECONNRESET,\n+      cross_device_link = \t\t\tEXDEV,\n+      destination_address_required = \t\tEDESTADDRREQ,\n+      device_or_resource_busy = \t\tEBUSY,\n+      directory_not_empty = \t\t\tENOTEMPTY,\n+      executable_format_error = \t\tENOEXEC,\n+      file_exists = \t       \t\t\tEEXIST,\n+      file_too_large = \t\t\t\tEFBIG,\n+      filename_too_long = \t\t\tENAMETOOLONG,\n+      function_not_supported = \t\t\tENOSYS,\n+      host_unreachable = \t\t\tEHOSTUNREACH,\n+\n+#ifdef _GLIBCXX_HAVE_EIDRM\n+      identifier_removed = \t\t\tEIDRM,\n+#endif\n+\n+      illegal_byte_sequence = \t\t\tEILSEQ,\n+      inappropriate_io_control_operation = \tENOTTY,\n+      interrupted = \t\t\t\tEINTR,\n+      invalid_argument = \t\t\tEINVAL,\n+      invalid_seek = \t\t\t\tESPIPE,\n+      io_error = \t\t\t\tEIO,\n+      is_a_directory = \t\t\t\tEISDIR,\n+      message_size = \t\t\t\tEMSGSIZE,\n+      network_down = \t\t\t\tENETDOWN,\n+      network_reset = \t\t\t\tENETRESET,\n+      network_unreachable = \t\t\tENETUNREACH,\n+      no_buffer_space = \t\t\tENOBUFS,\n+      no_child_process = \t\t\tECHILD,\n+\n+#ifdef _GLIBCXX_HAVE_ENOLINK\n+      no_link = \t\t\t\tENOLINK,\n+#endif\n+\n+      no_lock_available = \t\t\tENOLCK,\n+\n+#ifdef _GLIBCXX_HAVE_ENODATA\n+      no_message_available = \t\t\tENODATA, \n+#endif\n+\n+      no_message = \t\t\t\tENOMSG, \n+      no_protocol_option = \t\t\tENOPROTOOPT,\n+      no_space_on_device = \t\t\tENOSPC,\n+\n+#ifdef _GLIBCXX_HAVE_ENOSR\n+      no_stream_resources = \t\t\tENOSR,\n+#endif\n+\n+      no_such_device_or_address = \t\tENXIO,\n+      no_such_device = \t\t\t\tENODEV,\n+      no_such_file_or_directory = \t\tENOENT,\n+      no_such_process = \t\t\tESRCH,\n+      not_a_directory = \t\t\tENOTDIR,\n+      not_a_socket = \t\t\t\tENOTSOCK,\n+\n+#ifdef _GLIBCXX_HAVE_ENOSTR\n+      not_a_stream = \t\t\t\tENOSTR,\n+#endif\n+\n+      not_connected = \t\t\t\tENOTCONN,\n+      not_enough_memory = \t\t\tENOMEM,\n+\n+#ifdef _GLIBCXX_HAVE_ENOTSUP\n+      not_supported = \t\t\t\tENOTSUP,\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ECANCELED\n+      operation_canceled = \t\t\tECANCELED,\n+#endif\n+\n+      operation_in_progress = \t\t\tEINPROGRESS,\n+      operation_not_permitted = \t\tEPERM,\n+      operation_not_supported = \t\tEOPNOTSUPP,\n+      operation_would_block = \t\t\tEWOULDBLOCK,\n+\n+#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+      owner_dead = \t\t\t\tEOWNERDEAD,\n+#endif\n+\n+      permission_denied = \t\t\tEACCES,\n+\n+#ifdef _GLIBCXX_HAVE_EPROTO\n+      protocol_error = \t\t\t\tEPROTO,\n+#endif\n+\n+      protocol_not_supported = \t\t\tEPROTONOSUPPORT,\n+      read_only_file_system = \t\t\tEROFS,\n+      resource_deadlock_would_occur = \t\tEDEADLK,\n+      resource_unavailable_try_again = \t\tEAGAIN,\n+      result_out_of_range = \t\t\tERANGE,\n+\n+#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+      state_not_recoverable = \t\t\tENOTRECOVERABLE,\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ETIME\n+      stream_timeout = \t\t\t\tETIME,\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_ETXTBSY\n+      text_file_busy = \t\t\t\tETXTBSY,\n+#endif\n+\n+      timed_out = \t\t\t\tETIMEDOUT,\n+      too_many_files_open_in_system = \t\tENFILE,\n+      too_many_files_open = \t\t\tEMFILE,\n+      too_many_links = \t\t\t\tEMLINK,\n+      too_many_symbolic_link_levels = \t\tELOOP,\n+\n+#ifdef _GLIBCXX_HAVE_EOVERFLOW\n+      value_too_large = \t\t\tEOVERFLOW,\n+#endif\n+\n+      wrong_protocol_type = \t\t\tEPROTOTYPE\n+    };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif"}, {"sha": "68c278d87bc4b85540c987a5f4b522a0871a21f8", "filename": "libstdc++-v3/config/os/osf/os_defines.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fosf%2Fos_defines.h?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -0,0 +1,41 @@\n+// Specific definitions for Tru64 UNIX  -*- C++ -*-\n+\n+// Copyright (C) 2000, 2009, 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/os_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n+ */\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+// Tru64 UNIX requires using pthread_mutex_init()/pthread_cond_init() to\n+// initialized non-statically allocated mutexes/condvars.\n+#define _GTHREAD_USE_MUTEX_INIT_FUNC\n+#define _GTHREAD_USE_COND_INIT_FUNC\n+\n+#endif"}, {"sha": "ca4d81957b68aad769b5eb1a0bc4128c14549907", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9b75b06175c0859a7c340600069c58e083d7c3/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=6c9b75b06175c0859a7c340600069c58e083d7c3", "patch": "@@ -280,7 +280,7 @@ case \"${host_os}\" in\n     os_include_dir=\"os/bsd/netbsd\"\n     ;;\n   osf*)\n-    os_include_dir=\"os/generic\"\n+    os_include_dir=\"os/osf\"\n     # libstdc++.so relies on emutls on Tru64 UNIX, which only works with the\n     # real functions implemented in libpthread.so, not with the dummies in\n     # libgcc, so always pass -lpthread."}]}