{"sha": "acc0ee5c0731a70f15662146fc4f9dc949980aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjMGVlNWMwNzMxYTcwZjE1NjYyMTQ2ZmM0ZjlkYzk0OTk4MGFhMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-18T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-18T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "ec6d5d08b114c33b772fb9d8d11911810eb8a55b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec6d5d08b114c33b772fb9d8d11911810eb8a55b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc0ee5c0731a70f15662146fc4f9dc949980aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc0ee5c0731a70f15662146fc4f9dc949980aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc0ee5c0731a70f15662146fc4f9dc949980aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc0ee5c0731a70f15662146fc4f9dc949980aa2/comments", "author": null, "committer": null, "parents": [{"sha": "963aecff2473080d748b2fc1ea2e32cef36cab11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963aecff2473080d748b2fc1ea2e32cef36cab11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963aecff2473080d748b2fc1ea2e32cef36cab11"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "0b3bdcee6197b5e982d3f5d28d7531f7e702e4cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,14 @@\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gimplify.c (gimplify_scan_omp_clauses): Handle ATTACH_DETACH\n+\tfor non-decls.\n+\n+2021-02-17  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/98491\n+\t* config/mips/mips.c (mips_symbol_insns): Do not use\n+\tMSA_SUPPORTED_MODE_P if mode is MAX_MACHINE_MODE.\n+\n 2021-02-16  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR inline-asm/98096"}, {"sha": "7ff393c1a0f4dcd0629dccca77a9f9b4055c9b62", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1 +1 @@\n-20210217\n+20210218"}, {"sha": "de03487053a2330191170a819f7f2b94f05bc7ed", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,43 @@\n+2021-02-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98969\n+\t* constraint-manager.cc (dead_svalue_purger::should_purge_p):\n+\tUpdate for change to svalue::live_p.\n+\t* program-state.cc (sm_state_map::on_liveness_change): Likewise.\n+\t(program_state::detect_leaks): Likewise.\n+\t* region-model-reachability.cc (reachable_regions::init_cluster):\n+\tWhen dealing with a symbolic region, if the underlying pointer is\n+\timplicitly live, add the region to the reachable regions.\n+\t* region-model.cc (region_model::compare_initial_and_pointer):\n+\tMove logic for detecting initial values of params to\n+\tinitial_svalue::initial_value_of_param_p.\n+\t* svalue.cc (svalue::live_p): Convert \"live_svalues\" from a\n+\treference to a pointer; support it being NULL.\n+\t(svalue::implicitly_live_p): Convert first param from a\n+\trefererence to a pointer.\n+\t(region_svalue::implicitly_live_p): Likewise.\n+\t(constant_svalue::implicitly_live_p): Likewise.\n+\t(initial_svalue::implicitly_live_p): Likewise.  Treat the initial\n+\tvalues of params for the top level frame as still live.\n+\t(initial_svalue::initial_value_of_param_p): New function, taken\n+\tfrom a test in region_model::compare_initial_and_pointer.\n+\t(unaryop_svalue::implicitly_live_p): Convert first param from a\n+\trefererence to a pointer.\n+\t(binop_svalue::implicitly_live_p): Likewise.\n+\t(sub_svalue::implicitly_live_p): Likewise.\n+\t(unmergeable_svalue::implicitly_live_p): Likewise.\n+\t* svalue.h (svalue::live_p): Likewise.\n+\t(svalue::implicitly_live_p): Likewise.\n+\t(region_svalue::implicitly_live_p): Likewise.\n+\t(constant_svalue::implicitly_live_p): Likewise.\n+\t(initial_svalue::implicitly_live_p): Likewise.\n+\t(initial_svalue::initial_value_of_param_p): New decl.\n+\t(unaryop_svalue::implicitly_live_p): Convert first param from a\n+\trefererence to a pointer.\n+\t(binop_svalue::implicitly_live_p): Likewise.\n+\t(sub_svalue::implicitly_live_p): Likewise.\n+\t(unmergeable_svalue::implicitly_live_p): Likewise.\n+\n 2021-02-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/98969"}, {"sha": "e73f0d38cfcec49d5c15c64d030b04ce6eadcf1c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,37 @@\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* module.cc (struct macro_export): Add GTY markers.\n+\t(macro_exports): Likewise, us a va_gc Vector.\n+\n+2021-02-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/99106\n+\t* init.c (build_zero_init_1): For flexible array members just return\n+\tNULL_TREE instead of returning empty CONSTRUCTOR with non-complete\n+\tARRAY_TYPE.\n+\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99116\n+\t* name-lookup.c (do_pushdecl): Don't peek under template_parm\n+\tbindings here ...\n+\t(set_identifier_type_value_with_scope): ... or here.\n+\t(do_pushtag): Only set_identifier_type_value_with_scope at\n+\tnon-class template parm scope, and use parent scope.\n+\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99071\n+\t* name-lookup.c (maybe_record_mergeable_decl): Deref the correct\n+\tpointer.\n+\n+2021-02-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR debug/96997\n+\tPR c++/94034\n+\t* tree.c (build_aggr_init_expr): Revert r10-7718 change.\n+\n 2021-02-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc (module_state::write_cluster): Check bindings for"}, {"sha": "b8ec178c9164244daea4c3fc2462bbb8e7fdfbff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,13 @@\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* openmp.c (resolve_omp_clauses): Disallow selecting components\n+\tof arrays of derived type.\n+\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Handle element selection\n+\tfor arrays of derived types.\n+\n 2021-02-16  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* expr.c (gfc_is_simplify_contiguous): Handle REF_INQUIRY, i.e."}, {"sha": "2e9d1a33f8d20e12b4d59cefcd24548e81265878", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,67 @@\n+2021-02-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94596\n+\t* gcc.dg/analyzer/pr94596.c: New test.\n+\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99023\n+\t* g++.dg/modules/pr99023_a.H: New.\n+\t* g++.dg/modules/pr99023_b.H: New.\n+\n+2021-02-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98969\n+\t* g++.dg/analyzer/pr99064.C: Convert dg-bogus to dg-warning.\n+\t* gcc.dg/analyzer/pr96841.c: Add -Wno-analyzer-too-complex to\n+\toptions.  Remove false leak directive.\n+\t* gcc.dg/analyzer/pr98969.c (test_1): Remove xfail from leak\n+\tfalse positive.\n+\t(test_3): New.\n+\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/array-with-dt-2.f90: Remove expected errors.\n+\t* gfortran.dg/goacc/array-with-dt-6.f90: New test.\n+\t* gfortran.dg/goacc/mapping-tests-2.f90: Update expected error.\n+\t* gfortran.dg/goacc/ref_inquiry.f90: Update expected errors.\n+\t* gfortran.dg/gomp/ref_inquiry.f90: Likewise.\n+\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/array-with-dt-1.f90: New test.\n+\t* gfortran.dg/goacc/array-with-dt-3.f90: Likewise.\n+\t* gfortran.dg/goacc/array-with-dt-4.f90: Likewise.\n+\t* gfortran.dg/goacc/array-with-dt-5.f90: Likewise.\n+\t* gfortran.dg/goacc/derived-chartypes-1.f90: Re-enable test.\n+\t* gfortran.dg/goacc/derived-chartypes-2.f90: Likewise.\n+\t* gfortran.dg/goacc/derived-classtypes-1.f95: Uncomment\n+\tpreviously-broken directives.\n+\n+2021-02-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/99106\n+\t* g++.dg/ubsan/pr99106.C: New test.\n+\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99116\n+\t* g++.dg/lookup/pr99116-1.C: New.\n+\t* g++.dg/lookup/pr99116-2.C: New.\n+\n+2021-02-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99071\n+\t* g++.dg/modules/pr99071_a.H: New.\n+\t* g++.dg/modules/pr99071_b.H: New.\n+\n+2021-02-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR debug/96997\n+\tPR c++/94034\n+\t* g++.dg/cpp1y/constexpr-nsdmi7b.C:  Adjust expected location of\n+\t\"call to non-'constexpr' function\" error message.\n+\n 2021-02-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/modules/pr99050_a.H: New."}, {"sha": "6ea5fa8f81ee8d25b13655a1ec1461bfaaa3ca73", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc0ee5c0731a70f15662146fc4f9dc949980aa2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc0ee5c0731a70f15662146fc4f9dc949980aa2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=acc0ee5c0731a70f15662146fc4f9dc949980aa2", "patch": "@@ -1,3 +1,13 @@\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/array-stride-dt-1.f90: Remove\n+\texpected errors.\n+\n+2021-02-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/update-dt-array.f90: Likewise.\n+\n 2021-02-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/linux/x86/futex.h (__futex_wait):"}]}