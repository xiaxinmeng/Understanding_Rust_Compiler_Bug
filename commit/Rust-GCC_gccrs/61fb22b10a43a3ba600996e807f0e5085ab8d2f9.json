{"sha": "61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmYjIyYjEwYTQzYTNiYTYwMDk5NmU4MDdmMGU1MDg1YWI4ZDJmOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T07:55:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T07:55:12Z"}, "message": "Remove copyrighted testcase\n\nFrom-SVN: r28447", "tree": {"sha": "b5523a60cda18536a6b32765ae8f254b4ad29ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5523a60cda18536a6b32765ae8f254b4ad29ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fb22b10a43a3ba600996e807f0e5085ab8d2f9/comments", "author": null, "committer": null, "parents": [{"sha": "a740d5947e0ffdec11aaa8baec22d886c6cc20a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a740d5947e0ffdec11aaa8baec22d886c6cc20a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a740d5947e0ffdec11aaa8baec22d886c6cc20a0"}], "stats": {"total": 319, "additions": 0, "deletions": 319}, "files": [{"sha": "9cee4305b64fd9e4708b37806fa25ca0ce87b014", "filename": "gcc/testsuite/gcc.misc-tests/optbench.c", "status": "removed", "additions": 0, "deletions": 288, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a740d5947e0ffdec11aaa8baec22d886c6cc20a0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a740d5947e0ffdec11aaa8baec22d886c6cc20a0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.c?ref=a740d5947e0ffdec11aaa8baec22d886c6cc20a0", "patch": "@@ -1,288 +0,0 @@\n-/* ----------------------------------------------------- * \n- |                                                       | \n- |    PC Tech Journal Benchmark Series                   | \n- |    C Code Optimization Benchmark                      | \n- |                                                       | \n- |    Copyright (c) 1988 Ziff-Davis Publishing Company   | \n- |                                                       | \n- |    This benchmark code is designed to test the        | \n- |    code optimization techniques applied by a C        | \n- |    compiler.  It does not produce meaningful results  | \n- |    when executed, or represent good style.            | \n- |                                                       | \n- * ----------------------------------------------------- */ \n- \n-#include <string.h> \n-\n-#define max_vector   2 \n-#define constant5    5 \n- \n-typedef    unsigned char   uchar; \n- \n-int    i,  j,  k , l,  m; \n-int    i2, j2, k2; \n-int    g3, h3, i3, k3, m3; \n-int    i4, j4; \n-int    i5, j5, k5; \n- \n-double flt_1, flt_2, flt_3, flt_4, flt_5, flt_6; \n- \n-int    ivector[ 3 ]; \n-uchar  ivector2[ 3 ]; \n-short  ivector4[ 6 ]; \n-int    ivector5[ 203 ]; \n- \n-#ifndef NO_PROTOTYPES \n-void   dead_code( int, char * ); \n-void   unnecessary_loop( void ); \n-void   loop_jamming( int ); \n-void   loop_unrolling( int ); \n-int    jump_compression ( int, int, int, int, int ); \n-#else \n-void   dead_code(); \n-void   unnecessary_loop(); \n-void   loop_jamming(); \n-void   loop_unrolling(); \n-int    jump_compression(); \n-#endif \n- \n- \n-int     main( argc, argv )      /* optbench */ \n-        int  argc; \n-        char     **argv; \n-        { \n-        /* ------------------------------ * \n-         | Constant and copy propagation  | \n-         * ------------------------------ */ \n- \n-        j4 = 2; \n-        if( i2 < j4 && i4 < j4 ) \n-           i5 = 2; \n- \n-        j4 = k5; \n-        if( i2 < j4 && i4 < j4 ) \n-           i5 = 3; \n-        \n-        /* ---------------------------------------- * \n-         |  Constant folding, arithmetic identities | \n-         |  and redundant load/store operations     | \n-         * ---------------------------------------- */ \n- \n-        i3 = 1 + 2; \n-        flt_1 = 2.4 + 6.3; \n-        i2 = 5;               \n-        j2 = i + 0; \n-        k2 = i / 1; \n-        i4 = i * 1; \n-        i5 = i * 0; \n- \n-#ifndef NO_ZERO_DIVIDE \n-        /* \n-         *   Some compilers correctly recognize a zero divide \n-         *   error and do not generate any object code. \n-         */ \n-/*\n-        i2 = i / 0;            \n-        flt_2 = flt_1 / 0.0; \n-*/\n-#else    \n-/*\n-        printf( \"This compiler handles divide-by-zero as an\n-error\\n\"); \n-*/;\n-#endif \n-        flt_3 = 2.4 / 1.0;  \n-        flt_4 = 1.0 + 0.0000001; \n-        flt_5 = flt_6 * 0.0; \n-        flt_6 = flt_2 * flt_3; \n-  \n-        /* ------------ * \n-         |  Dead store  | \n-         * ------------ */ \n- \n-         k3 = 1; \n-         k3 = 1; \n- \n-        /* --------------------- * \n-         |  Strength reduction   | \n-         * --------------------- */ \n- \n-        k2 = 4 * j5; \n-           for( i = 0; i <= 5; i++ )\n-              ivector4[ i ] = i * 2; \n-    \n-        /* ----------- * \n-         | Simple loop | \n-         * ----------- */ \n- \n-        j5 = 0; \n-        k5 = 10000; \n-        do { \n-              k5 = k5 - 1; \n-              j5 = j5 + 1; \n-              i5 = ( k5 * 3 ) / ( j5 * constant5 ); \n-           } while ( k5 > 0 ); \n- \n-        /* ----------------------------------- * \n-         | Loop induction variable handling    | \n-         * ----------------------------------- */ \n- \n-        for( i = 0; i < 100; i++) \n-           ivector5[ i * 2 + 3 ] = 5; \n- \n-        /* ----------------------------- * \n-         | Very busy expression handling | \n-         * ----------------------------- */ \n- \n-        if( i < 10 ) \n-           j5 = i5 + i2; \n-        else \n-           k5 = i5 + i2; \n- \n-        /* -------------------------------------------- * \n-         | Check how the compiler generates the address | \n-         | of a variable with a constant subscript,     | \n-         | copy propagation, and register propagation.  | \n-         * -------------------------------------------- */ \n- \n-         ivector[ 0  ] = 1;  /* constant address generation */ \n-         ivector[ i2 ] = 2;  /* i2 should be a propagated value\n-*/ \n-         ivector[ i2 ] = 2;  /* register propagation */ \n-         ivector[ 2  ] = 3;  /* constant address generation */ \n-     \n-     \n-         /* ---------------------------------- * \n-          | Common subexpression elimination   | \n-          * ---------------------------------- */ \n-  \n-        if(( h3 + k3 ) < 0 || ( h3 + k3 ) > 5 )\n-        /* \n-               printf(\"Common subexpression elimination\\n\"); \n-        \n-        */;\n-        else { \n-               m3 = ( h3 + k3 ) / i3; \n-               g3 = i3 + (h3 + k3); \n-         } \n-        /* --------------------------------------- * \n-         | Invariant code motion                   | \n-         |  (j * k) can be moved outside the loop. |  \n-         * --------------------------------------- */ \n-  \n-        for( i4 = 0; i4 <= max_vector; i4++ )    \n-           ivector2[ i4 ] = j * k; \n-  \n-        /* ---------------------------- * \n-         | Function call with arguments | \n-         * ---------------------------- */ \n- \n-        dead_code( 1, \"This line should not be printed\" ); \n- \n-        /* ------------------------------- * \n-         | Function call without arguments | \n-         * ------------------------------- */ \n- \n-        unnecessary_loop(); \n-\n-\texit (0);\n-    \n-        }  /* end of main */ \n- \n-            \n-/* --------------------------------------------- * \n- | Function: dead_code                           | \n- |           Test for dead code and dead stores. | \n- |           NO code should be generated.        | \n- * ----------------------------------------------*/ \n- \n-void   dead_code( a, b ) \n-       int a; \n-       char *b; \n-       { \n-         int idead_store; \n- \n-         idead_store = a; \n-         if( 0 )\n-         /* \n-           printf( \"%s\\n\", b );\n-          */; \n-       }  /* end of dead_code */ \n- \n-/* ----------------------------------------------- * \n- | Function: unnecessary_loop                      | \n- |           The loop in the following function is | \n- |           not necessary since the value of the  | \n- |           assignment is constant. Ideally, the  | \n- |           loop should be optimized out.         | \n- * ----------------------------------------------- */ \n- \n-void   unnecessary_loop() \n-       { \n-           int x;  \n- \n-           x = 0; \n-           for( i = 0; i < 5; i++ ) /* loop should not be generated */ \n-           k5 = x + j5;                  \n-       }   /* end of unnecessary_loop */ \n- \n-/* --------------------------------------------- * \n- | Function: loop_jamming                        | \n- |           The two loop in this function share | \n- |           the same loop conditions and could  | \n- |           be coalesced together.              | \n- * --------------------------------------------- */ \n- \n-void   loop_jamming( x ) \n-       int x; \n-       { \n-          for( i = 0; i < 5; i++ ) \n-             k5 = x + j5 * i; \n-          for( i = 0; i < 5; i++ ) \n-             i5 = x * k5 * i; \n-       }  /* end of loop_jamming */ \n- \n-/* ------------------------------------------------ * \n- | Function: loop_unrolling                         | \n- |           The loop in this function should be    | \n- |           replaced with three inline word stores | \n- |           using constant array arithmetic or by  | \n- |           specialized machine instructions used  | \n- |           for block memory initializiation.      | \n- * ------------------------------------------------ */ \n- \n-void  loop_unrolling( x ) \n-      int x; \n-      { \n-         for( i = 0; i < 6; i++ ) \n-           ivector4[ i ] = 0; \n-       }  /* end of loop_unrolling */ \n- \n-/* ------------------------------------------------------ * \n- | Function: jump_compression                             | \n- |           This awkward code is useful to illustrate    | \n- |           jump chain compression. The goto 'end_1' can | \n- |           be replaced by a direct jump to 'beg_1'.     | \n- *------------------------------------------------------ */ \n- \n-int  jump_compression ( i, j, k, l, m ) \n-int i,j ,l, m; \n-        { \n-beg_1: \n-           if( i < j ) \n-               if( j < k ) \n-                   if( k < l ) \n-                       if ( l < m ) \n-                           l += m; \n-                       else \n-                           goto end_1;\n-                   else \n-                       k += l; \n-               else { \n-                   j += k; \n-end_1:            goto beg_1; \n-               } \n-           else \n-               i += j; \n-          return( i + j + k + l + m ); \n-        }   /* end of jump_compression */ "}, {"sha": "a54fd2dc4686c3752cfaaf08540609a31c0a8965", "filename": "gcc/testsuite/gcc.misc-tests/optbench.exp", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a740d5947e0ffdec11aaa8baec22d886c6cc20a0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a740d5947e0ffdec11aaa8baec22d886c6cc20a0/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foptbench.exp?ref=a740d5947e0ffdec11aaa8baec22d886c6cc20a0", "patch": "@@ -1,31 +0,0 @@\n-#   Copyright (C) 1997 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n-\n-# Please email any bugs, comments, and/or additions to this file to:\n-# bug-gcc@prep.ai.mit.edu\n-\n-global PERF_TEST\n-if { ![info exists PERF_TEST] || \"$PERF_TEST\" != \"yes\" } {\n-    return\n-}\n-\n-load_lib mike-gcc.exp\n-\n-prebase\n-set actions run\n-set compiler_output \"^$\"\n-set program_output \"^$\"\n-postbase optbench.c $run $groups"}]}