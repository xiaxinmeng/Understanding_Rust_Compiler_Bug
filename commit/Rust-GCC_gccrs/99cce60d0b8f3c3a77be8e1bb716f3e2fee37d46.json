{"sha": "99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "node_id": "C_kwDOANBUbNoAKDk5Y2NlNjBkMGI4ZjNjM2E3N2JlOGUxYmI3MTZmM2UyZmVlMzdkNDY", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-12-08T05:22:29Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-12-13T08:32:15Z"}, "message": "optabs: make prepare_cmp_insn goto fail when cbranchcc4 checks unsatisfied\n\nprepare_cmp_insn is a help function to generate comparison rtx.\nIt should not assume that cbranchcc4 exists and all sub-CC modes\nare supported on a target.  When the check fails, it could go to\nfail and return a NULL rtx as its callers check the return value\nfor CCmode.\n\nThe test case (gcc.target/powerpc/cbranchcc4-1.c) which covers\nfailure path will be committed with an rs6000 specific patch.\n\n2022-12-05  Haochen Gui <guihaoc@linux.ibm.com>\n\ngcc/\n\t* optabs.cc (prepare_cmp_insn): Return a NULL rtx other than\n\tassertion failure when targets don't have cbranch optab or\n\tpredicate check fails.", "tree": {"sha": "1de5acddb0b9189cacd33c59c74f18b0b62106f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de5acddb0b9189cacd33c59c74f18b0b62106f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46/comments", "author": null, "committer": null, "parents": [{"sha": "1728c537b4f697e2a4b4eba0b0c70165f2a02840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1728c537b4f697e2a4b4eba0b0c70165f2a02840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1728c537b4f697e2a4b4eba0b0c70165f2a02840"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "2ffd455202d3ad215a85402fad891960899cf3a7", "filename": "gcc/optabs.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "patch": "@@ -4491,10 +4491,14 @@ prepare_cmp_insn (rtx x, rtx y, enum rtx_code comparison, rtx size,\n     {\n       enum insn_code icode = optab_handler (cbranch_optab, CCmode);\n       test = gen_rtx_fmt_ee (comparison, VOIDmode, x, y);\n-      gcc_assert (icode != CODE_FOR_nothing\n-                  && insn_operand_matches (icode, 0, test));\n-      *ptest = test;\n-      return;\n+      if (icode != CODE_FOR_nothing\n+\t  && insn_operand_matches (icode, 0, test))\n+\t{\n+\t  *ptest = test;\n+\t  return;\n+\t}\n+      else\n+\tgoto fail;\n     }\n \n   test = gen_rtx_fmt_ee (comparison, VOIDmode, x, y);"}]}