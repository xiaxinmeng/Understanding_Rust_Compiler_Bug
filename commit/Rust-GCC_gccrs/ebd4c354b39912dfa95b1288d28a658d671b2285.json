{"sha": "ebd4c354b39912dfa95b1288d28a658d671b2285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkNGMzNTRiMzk5MTJkZmE5NWIxMjg4ZDI4YTY1OGQ2NzFiMjI4NQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-09-29T21:22:17Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-09-29T21:22:17Z"}, "message": "re PR libstdc++/62313 (Data race in debug iterators)\n\n2014-09-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/62313\n\t* include/debug/safe_base.h\n\t(_Safe_iterator_base(const _Safe_iterator_base&)): Delete declaration.\n\t(_Safe_iterator_base& operator=(const _Safe_iterator_base&)): Likewise.\n\t* include/debug/safe_iterator.h (_Safe_iterator<>): Move normal iterator\n\tbefore _Safe_iterator_base in memory. Lock before modifying the iterator\n\tin numerous places.\n\t* include/debug/safe_local_iterator.h\n\t(_Safe_local_iterator_base(const _Safe_local_iterator_base&)): Delete\n\tdeclaration.\n\t(_Safe_local_iterator_base& operator=(const _Safe_local_iterator_base&)):\n\tLikewise.\n\t* include/debug/safe_unordered_base.h (_Safe_local_iterator<>):  Move\n\tnormal iterator before _Safe_iterator_base in memory. Lock before\n\tmodifying the iterator in numerous places.\n\t* include/debug/forward_list (_Safe_forward_list<>::_M_swap_aux): Adapt.\n\t* include/debug/safe_sequence.tcc\n\t(_Safe_sequence<>::_M_transfer_from_if): Adapt.\n\nFrom-SVN: r215693", "tree": {"sha": "cdd6cf88df941efb4a3211ab113e4194e3fc6b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd6cf88df941efb4a3211ab113e4194e3fc6b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebd4c354b39912dfa95b1288d28a658d671b2285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd4c354b39912dfa95b1288d28a658d671b2285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd4c354b39912dfa95b1288d28a658d671b2285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd4c354b39912dfa95b1288d28a658d671b2285/comments", "author": null, "committer": null, "parents": [{"sha": "a3052d316c4d43df242c2ef4748e8ac5d8cd8437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3052d316c4d43df242c2ef4748e8ac5d8cd8437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3052d316c4d43df242c2ef4748e8ac5d8cd8437"}], "stats": {"total": 359, "additions": 247, "deletions": 112}, "files": [{"sha": "6560372986fc9753327c8453859a02a78edade5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -1,3 +1,24 @@\n+2014-09-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/62313\n+\t* include/debug/safe_base.h\n+\t(_Safe_iterator_base(const _Safe_iterator_base&)): Delete declaration.\n+\t(_Safe_iterator_base& operator=(const _Safe_iterator_base&)): Likewise.\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>): Move normal iterator\n+\tbefore _Safe_iterator_base in memory. Lock before modifying the iterator\n+\tin numerous places.\n+\t* include/debug/safe_local_iterator.h\n+\t(_Safe_local_iterator_base(const _Safe_local_iterator_base&)): Delete\n+\tdeclaration.\n+\t(_Safe_local_iterator_base& operator=(const _Safe_local_iterator_base&)):\n+\tLikewise.\n+\t* include/debug/safe_unordered_base.h (_Safe_local_iterator<>):  Move\n+\tnormal iterator before _Safe_iterator_base in memory. Lock before\n+\tmodifying the iterator in numerous places.\n+\t* include/debug/forward_list (_Safe_forward_list<>::_M_swap_aux): Adapt.\n+\t* include/debug/safe_sequence.tcc\n+\t(_Safe_sequence<>::_M_transfer_from_if): Adapt.\n+\n 2014-09-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \tDR 1339"}, {"sha": "a46f6d44760d022e194200360461af05038b3127", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -86,24 +86,26 @@ namespace __gnu_debug\n       for (_Safe_iterator_base* __iter = __lhs_iterators; __iter;)\n \t{\n \t  // Even iterator is cast to const_iterator, not a problem.\n-\t  const_iterator* __victim = static_cast<const_iterator*>(__iter);\n+\t  _Safe_iterator_base* __victim_base = __iter;\n+\t  const_iterator* __victim =\n+\t    static_cast<const_iterator*>(__victim_base);\n \t  __iter = __iter->_M_next;\n \t  if (__victim->base() == __rseq._M_base().cbefore_begin())\n \t    {\n \t      __victim->_M_unlink();\n-\t      if (__lhs_iterators == __victim)\n-\t\t__lhs_iterators = __victim->_M_next;\n+\t      if (__lhs_iterators == __victim_base)\n+\t\t__lhs_iterators = __victim_base->_M_next;\n \t      if (__bbegin_its)\n \t\t{\n-\t\t  __victim->_M_next = __bbegin_its;\n-\t\t  __bbegin_its->_M_prior = __victim;\n+\t\t  __victim_base->_M_next = __bbegin_its;\n+\t\t  __bbegin_its->_M_prior = __victim_base;\n \t\t}\n \t      else\n-\t\t__last_bbegin = __victim;\n-\t      __bbegin_its = __victim;\n+\t\t__last_bbegin = __victim_base;\n+\t      __bbegin_its = __victim_base;\n \t    }\n \t  else\n-\t    __victim->_M_sequence = &__lhs;\n+\t    __victim_base->_M_sequence = &__lhs;\n \t}\n \n       if (__bbegin_its)"}, {"sha": "35e399dc5350516574711f1404640e69c66dce0a", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -95,12 +95,6 @@ namespace __gnu_debug\n     : _M_sequence(0), _M_version(0), _M_prior(0), _M_next(0)\n     { this->_M_attach(__x._M_sequence, __constant); }\n \n-    _Safe_iterator_base&\n-    operator=(const _Safe_iterator_base&);\n-\n-    explicit\n-    _Safe_iterator_base(const _Safe_iterator_base&);\n-\n     ~_Safe_iterator_base() { this->_M_detach(); }\n \n     /** For use in _Safe_iterator. */"}, {"sha": "8083ed317194822b036f9d2442ee76192e6f54a5", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 96, "deletions": 52, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -109,23 +109,37 @@ namespace __gnu_debug\n    *  %_Safe_iterator has member functions for iterator invalidation,\n    *  attaching/detaching the iterator from sequences, and querying\n    *  the iterator's state.\n+   *\n+   *  Note that _Iterator must be the first base class so that it gets\n+   *  initialized before the iterator is being attached to the container's list\n+   *  of iterators and it is being detached before _Iterator get\n+   *  destroyed. Otherwise it would result in a data race.\n    */\n   template<typename _Iterator, typename _Sequence>\n-    class _Safe_iterator : public _Safe_iterator_base\n+    class _Safe_iterator\n+    : private _Iterator,\n+      public _Safe_iterator_base\n     {\n-      typedef _Safe_iterator _Self;\n+      typedef _Iterator _Iter_base;\n+      typedef _Safe_iterator_base _Safe_base;\n       typedef typename _Sequence::const_iterator _Const_iterator;\n \n-      /// The underlying iterator\n-      _Iterator _M_current;\n-\n       /// Determine if this is a constant iterator.\n       bool\n       _M_constant() const\n       { return std::__are_same<_Const_iterator, _Safe_iterator>::__value; }\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n \n+      struct _Attach_single\n+      { };\n+\n+      _Safe_iterator(const _Iterator& __i, _Safe_sequence_base* __seq,\n+\t\t     _Attach_single)\n+      _GLIBCXX_NOEXCEPT\n+      : _Iter_base(__i)\n+      { _M_attach_single(__seq); }\n+\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -135,7 +149,7 @@ namespace __gnu_debug\n       typedef typename _Traits::pointer\t\t\tpointer;\n \n       /// @post the iterator is singular and unattached\n-      _Safe_iterator() _GLIBCXX_NOEXCEPT : _M_current() { }\n+      _Safe_iterator() _GLIBCXX_NOEXCEPT : _Iter_base() { }\n \n       /**\n        * @brief Safe iterator construction from an unsafe iterator and\n@@ -144,11 +158,11 @@ namespace __gnu_debug\n        * @pre @p seq is not NULL\n        * @post this is not singular\n        */\n-      _Safe_iterator(const _Iterator& __i, const _Sequence* __seq)\n+      _Safe_iterator(const _Iterator& __i, const _Safe_sequence_base* __seq)\n       _GLIBCXX_NOEXCEPT\n-      : _Safe_iterator_base(__seq, _M_constant()), _M_current(__i)\n+      : _Iter_base(__i), _Safe_base(__seq, _M_constant())\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n \t\t\t      ._M_iterator(*this, \"this\"));\n       }\n@@ -157,32 +171,35 @@ namespace __gnu_debug\n        * @brief Copy construction.\n        */\n       _Safe_iterator(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n-      : _Safe_iterator_base(__x, _M_constant()), _M_current(__x._M_current)\n+      : _Iter_base(__x.base())\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n+\t_M_attach(__x._M_sequence);\n       }\n \n #if __cplusplus >= 201103L\n       /**\n        * @brief Move construction.\n        * @post __x is singular and unattached\n        */\n-      _Safe_iterator(_Safe_iterator&& __x) noexcept : _M_current()\n+      _Safe_iterator(_Safe_iterator&& __x) noexcept\n+      : _Iter_base()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n-\tstd::swap(_M_current, __x._M_current);\n-\tthis->_M_attach(__x._M_sequence);\n+\t_Safe_sequence_base* __seq = __x._M_sequence;\n \t__x._M_detach();\n+\tstd::swap(base(), __x.base());\n+\t_M_attach(__seq);\n       }\n #endif\n \n@@ -196,7 +213,7 @@ namespace __gnu_debug\n \t  typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator,\n \t\t      typename _Sequence::iterator::iterator_type>::__value),\n \t\t   _Sequence>::__type>& __x) _GLIBCXX_NOEXCEPT\n-\t: _Safe_iterator_base(__x, _M_constant()), _M_current(__x.base())\n+\t: _Iter_base(__x.base())\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n@@ -205,6 +222,7 @@ namespace __gnu_debug\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n+\t  _M_attach(__x._M_sequence);\n \t}\n \n       /**\n@@ -216,12 +234,24 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n-\t_M_current = __x._M_current;\n-\tthis->_M_attach(__x._M_sequence);\n+\n+\tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n+\t  {\n+\t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t    base() = __x.base();\n+\t    _M_version = __x._M_sequence->_M_version;\n+\t  }\n+\telse\n+\t  {\n+\t    _M_detach();\n+\t    base() = __x.base();\n+\t    _M_attach(__x._M_sequence);\n+\t  }\n+\n \treturn *this;\n       }\n \n@@ -237,14 +267,26 @@ namespace __gnu_debug\n \t\t\t      _M_message(__msg_self_move_assign)\n \t\t\t      ._M_iterator(*this, \"this\"));\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n-\t_M_current = __x._M_current;\n-\t_M_attach(__x._M_sequence);\n+\n+\tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n+\t  {\n+\t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t    base() = __x.base();\n+\t    _M_version = __x._M_sequence->_M_version;\n+\t  }\n+\telse\n+\t  {\n+\t    _M_detach();\n+\t    base() = __x.base();\n+\t    _M_attach(__x._M_sequence);\n+\t  }\n+\n \t__x._M_detach();\n-\t__x._M_current = _Iterator();\n+\t__x.base() = _Iterator();\n \treturn *this;\n       }\n #endif\n@@ -259,7 +301,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn *_M_current;\n+\treturn *base();\n       }\n \n       /**\n@@ -273,7 +315,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn std::__addressof(*_M_current);\n+\treturn std::__addressof(*base());\n       }\n \n       // ------ Input iterator requirements ------\n@@ -287,7 +329,8 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t++_M_current;\n+\t__gnu_cxx::__scoped_lock(this->_M_get_mutex());\n+\t++base();\n \treturn *this;\n       }\n \n@@ -301,9 +344,8 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __tmp(*this);\n-\t++_M_current;\n-\treturn __tmp;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(base()++, this->_M_sequence, _Attach_single());\n       }\n \n       // ------ Bidirectional iterator requirements ------\n@@ -317,7 +359,8 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t--_M_current;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t--base();\n \treturn *this;\n       }\n \n@@ -331,9 +374,8 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __tmp(*this);\n-\t--_M_current;\n-\treturn __tmp;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(base()--, this->_M_sequence, _Attach_single());\n       }\n \n       // ------ Random access iterator requirements ------\n@@ -344,8 +386,7 @@ namespace __gnu_debug\n \t\t\t      && this->_M_can_advance(__n+1),\n \t\t\t      _M_message(__msg_iter_subscript_oob)\n \t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\n-\treturn _M_current[__n];\n+\treturn base()[__n];\n       }\n \n       _Safe_iterator&\n@@ -354,16 +395,18 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n \t\t\t      _M_message(__msg_advance_oob)\n \t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\t_M_current += __n;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\tbase() += __n;\n \treturn *this;\n       }\n \n       _Safe_iterator\n       operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n-\t_Safe_iterator __tmp(*this);\n-\t__tmp += __n;\n-\treturn __tmp;\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n+\t\t\t      _M_message(__msg_advance_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\treturn _Safe_iterator(base() + __n, this->_M_sequence);\n       }\n \n       _Safe_iterator&\n@@ -372,44 +415,45 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n \t\t\t      _M_message(__msg_retreat_oob)\n \t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\t_M_current += -__n;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\tbase() -= __n;\n \treturn *this;\n       }\n \n       _Safe_iterator\n       operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n-\t_Safe_iterator __tmp(*this);\n-\t__tmp -= __n;\n-\treturn __tmp;\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n+\t\t\t      _M_message(__msg_retreat_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\treturn _Safe_iterator(base() - __n, this->_M_sequence);\n       }\n \n       // ------ Utilities ------\n       /**\n        * @brief Return the underlying iterator\n        */\n-      _Iterator\n-      base() const _GLIBCXX_NOEXCEPT { return _M_current; }\n+      _Iterator&\n+      base() _GLIBCXX_NOEXCEPT { return *this; }\n+\n+      const _Iterator&\n+      base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow\n        * better interaction with non-debug containers.\n        */\n-      operator _Iterator() const _GLIBCXX_NOEXCEPT { return _M_current; }\n+      operator _Iterator() const _GLIBCXX_NOEXCEPT { return *this; }\n \n       /** Attach iterator to the given sequence. */\n       void\n       _M_attach(_Safe_sequence_base* __seq)\n-      {\n-\t_Safe_iterator_base::_M_attach(__seq, _M_constant());\n-      }\n+      { _Safe_base::_M_attach(__seq, _M_constant()); }\n \n       /** Likewise, but not thread-safe. */\n       void\n       _M_attach_single(_Safe_sequence_base* __seq)\n-      {\n-\t_Safe_iterator_base::_M_attach_single(__seq, _M_constant());\n-      }\n+      { _Safe_base::_M_attach_single(__seq, _M_constant()); }\n \n       /// Is the iterator dereferenceable?\n       bool"}, {"sha": "8fe16919c0294a2cd9ff3b57bffee6de8f1b73e3", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 104, "deletions": 27, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -49,15 +49,15 @@ namespace __gnu_debug\n    *  the iterator's state.\n    */\n   template<typename _Iterator, typename _Sequence>\n-    class _Safe_local_iterator : public _Safe_local_iterator_base\n+    class _Safe_local_iterator\n+    : private _Iterator\n+    , public _Safe_local_iterator_base\n     {\n-      typedef _Safe_local_iterator _Self;\n+      typedef _Iterator _Iter_base;\n+      typedef _Safe_local_iterator_base _Safe_base;\n       typedef typename _Sequence::const_local_iterator _Const_local_iterator;\n       typedef typename _Sequence::size_type size_type;\n \n-      /// The underlying iterator\n-      _Iterator _M_current;\n-\n       /// Determine if this is a constant iterator.\n       bool\n       _M_constant() const\n@@ -68,6 +68,14 @@ namespace __gnu_debug\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n \n+      struct _Attach_single\n+      { };\n+\n+      _Safe_local_iterator(const _Iterator& __i, _Safe_sequence_base* __cont,\n+\t\t\t   _Attach_single) noexcept\n+      : _Iter_base(__i)\n+      { _M_attach_single(__cont); }\n+\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -77,7 +85,7 @@ namespace __gnu_debug\n       typedef typename _Traits::pointer\t\t\tpointer;\n \n       /// @post the iterator is singular and unattached\n-      _Safe_local_iterator() : _M_current() { }\n+      _Safe_local_iterator() noexcept : _Iter_base() { }\n \n       /**\n        * @brief Safe iterator construction from an unsafe iterator and\n@@ -86,8 +94,9 @@ namespace __gnu_debug\n        * @pre @p seq is not NULL\n        * @post this is not singular\n        */\n-      _Safe_local_iterator(const _Iterator& __i, const _Sequence* __seq)\n-      : _Safe_local_iterator_base(__seq, _M_constant()), _M_current(__i)\n+      _Safe_local_iterator(const _Iterator& __i,\n+\t\t\t   const _Safe_sequence_base* __cont)\n+      : _Iter_base(__i), _Safe_base(__cont, _M_constant())\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n@@ -97,9 +106,8 @@ namespace __gnu_debug\n       /**\n        * @brief Copy construction.\n        */\n-      _Safe_local_iterator(const _Safe_local_iterator& __x)\n-      : _Safe_local_iterator_base(__x, _M_constant()),\n-\t_M_current(__x._M_current)\n+      _Safe_local_iterator(const _Safe_local_iterator& __x) noexcept\n+      : _Iter_base(__x.base())\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n@@ -108,6 +116,25 @@ namespace __gnu_debug\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n+\t_M_attach(__x._M_sequence);\n+      }\n+\n+      /**\n+       * @brief Move construction.\n+       * @post __x is singular and unattached\n+       */\n+      _Safe_local_iterator(_Safe_local_iterator&& __x) noexcept\n+      : _Iter_base()\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n+\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      _M_message(__msg_init_copy_singular)\n+\t\t\t      ._M_iterator(*this, \"this\")\n+\t\t\t      ._M_iterator(__x, \"other\"));\n+\tauto __cont = __x._M_sequence;\n+\t__x._M_detach();\n+\tstd::swap(base(), __x.base());\n+\t_M_attach(__cont);\n       }\n \n       /**\n@@ -121,8 +148,7 @@ namespace __gnu_debug\n \t      _MutableIterator,\n \t      typename _Sequence::local_iterator::iterator_type>::__value,\n \t\t\t\t\t  _Sequence>::__type>& __x)\n-\t: _Safe_local_iterator_base(__x, _M_constant()),\n-\t  _M_current(__x.base())\n+\t: _Iter_base(__x.base())\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n@@ -131,6 +157,7 @@ namespace __gnu_debug\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n+\t  _M_attach(__x._M_sequence);\n \t}\n \n       /**\n@@ -146,8 +173,54 @@ namespace __gnu_debug\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n-\t_M_current = __x._M_current;\n-\tthis->_M_attach(__x._M_sequence);\n+\n+\tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n+\t  {\n+\t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t    base() = __x.base();\n+\t    _M_version = __x._M_sequence->_M_version;\n+\t  }\n+\telse\n+\t  {\n+\t    _M_detach();\n+\t    base() = __x.base();\n+\t    _M_attach(__x._M_sequence);\n+\t  }\n+\n+\treturn *this;\n+      }\n+\n+      /**\n+       * @brief Move assignment.\n+       * @post __x is singular and unattached\n+       */\n+      _Safe_local_iterator&\n+      operator=(_Safe_local_iterator&& __x) noexcept\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this != &__x,\n+\t\t\t      _M_message(__msg_self_move_assign)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n+\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      _M_message(__msg_copy_singular)\n+\t\t\t      ._M_iterator(*this, \"this\")\n+\t\t\t      ._M_iterator(__x, \"other\"));\n+\n+\tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n+\t  {\n+\t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t    base() = __x.base();\n+\t    _M_version = __x._M_sequence->_M_version;\n+\t  }\n+\telse\n+\t  {\n+\t    _M_detach();\n+\t    base() = __x.base();\n+\t    _M_attach(__x._M_sequence);\n+\t  }\n+\n+\t__x._M_detach();\n+\t__x.base() = _Iterator();\n \treturn *this;\n       }\n \n@@ -161,7 +234,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn *_M_current;\n+\treturn *base();\n       }\n \n       /**\n@@ -175,7 +248,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn std::__addressof(*_M_current);\n+\treturn std::__addressof(*base());\n       }\n \n       // ------ Input iterator requirements ------\n@@ -189,7 +262,8 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t++_M_current;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t++base();\n \treturn *this;\n       }\n \n@@ -203,39 +277,42 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_local_iterator __tmp(*this);\n-\t++_M_current;\n-\treturn __tmp;\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_local_iterator(base()++, this->_M_sequence,\n+\t\t\t\t    _Attach_single());\n       }\n \n       // ------ Utilities ------\n       /**\n        * @brief Return the underlying iterator\n        */\n-      _Iterator\n-      base() const { return _M_current; }\n+      _Iterator&\n+      base() noexcept { return *this; }\n+\n+      const _Iterator&\n+      base() const noexcept { return *this; }\n \n       /**\n        * @brief Return the bucket\n        */\n       size_type\n-      bucket() const { return _M_current._M_get_bucket(); }\n+      bucket() const { return base()._M_get_bucket(); }\n \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow\n        * better interaction with non-debug containers.\n        */\n-      operator _Iterator() const { return _M_current; }\n+      operator _Iterator() const { return *this; }\n \n       /** Attach iterator to the given sequence. */\n       void\n       _M_attach(_Safe_sequence_base* __seq)\n-      { _Safe_iterator_base::_M_attach(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach(__seq, _M_constant()); }\n \n       /** Likewise, but not thread-safe. */\n       void\n       _M_attach_single(_Safe_sequence_base* __seq)\n-      { _Safe_iterator_base::_M_attach_single(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach_single(__seq, _M_constant()); }\n \n       /// Is the iterator dereferenceable?\n       bool"}, {"sha": "da9482a9443a2098ea83421a5bd339fe777aeff2", "filename": "libstdc++-v3/include/debug/safe_sequence.tcc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.tcc?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -81,42 +81,45 @@ namespace __gnu_debug\n \n \t  for (_Safe_iterator_base* __iter = __from._M_iterators; __iter;)\n \t    {\n-\t      iterator* __victim = static_cast<iterator*>(__iter);\n+\t      _Safe_iterator_base* __victim_base = __iter;\n+\t      iterator* __victim = static_cast<iterator*>(__victim_base);\n \t      __iter = __iter->_M_next;\n \t      if (!__victim->_M_singular() && __pred(__victim->base()))\n \t\t{\n \t\t  __victim->_M_detach_single();\n \t\t  if (__transfered_iterators)\n \t\t    {\n-\t\t      __victim->_M_next = __transfered_iterators;\n-\t\t      __transfered_iterators->_M_prior = __victim;\n+\t\t      __victim_base->_M_next = __transfered_iterators;\n+\t\t      __transfered_iterators->_M_prior = __victim_base;\n \t\t    }\n \t\t  else\n-\t\t    __last_iterator = __victim;\n-\t\t  __victim->_M_sequence = this;\n-\t\t  __victim->_M_version = this->_M_version;\n-\t\t  __transfered_iterators = __victim;\n+\t\t    __last_iterator = __victim_base;\n+\t\t  __victim_base->_M_sequence = this;\n+\t\t  __victim_base->_M_version = this->_M_version;\n+\t\t  __transfered_iterators = __victim_base;\n \t\t}\n \t    }\n \n \t  for (_Safe_iterator_base* __iter2 = __from._M_const_iterators;\n \t\t __iter2;)\n \t    {\n-\t      const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n+\t      _Safe_iterator_base* __victim_base = __iter2;\n+\t      const_iterator* __victim =\n+\t\tstatic_cast<const_iterator*>(__victim_base);\n \t      __iter2 = __iter2->_M_next;\n \t      if (!__victim->_M_singular() && __pred(__victim->base()))\n \t\t{\n \t\t  __victim->_M_detach_single();\n \t\t  if (__transfered_const_iterators)\n \t\t    {\n-\t\t      __victim->_M_next = __transfered_const_iterators;\n-\t\t      __transfered_const_iterators->_M_prior = __victim;\n+\t\t      __victim_base->_M_next = __transfered_const_iterators;\n+\t\t      __transfered_const_iterators->_M_prior = __victim_base;\n \t\t    }\n \t\t  else\n \t\t    __last_const_iterator = __victim;\n-\t\t  __victim->_M_sequence = this;\n-\t\t  __victim->_M_version = this->_M_version;\n-\t\t  __transfered_const_iterators = __victim;\n+\t\t  __victim_base->_M_sequence = this;\n+\t\t  __victim_base->_M_version = this->_M_version;\n+\t\t  __transfered_const_iterators = __victim_base;\n \t\t}\n \t    }\n \t}"}, {"sha": "380d7fe86020f6d0022100d72b1ee1c6a2e5d255", "filename": "libstdc++-v3/include/debug/safe_unordered_base.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd4c354b39912dfa95b1288d28a658d671b2285/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h?ref=ebd4c354b39912dfa95b1288d28a658d671b2285", "patch": "@@ -71,12 +71,6 @@ namespace __gnu_debug\n \t\t\t      bool __constant)\n     { this->_M_attach(__x._M_sequence, __constant); }\n \n-    _Safe_local_iterator_base&\n-    operator=(const _Safe_local_iterator_base&);\n-\n-    explicit\n-    _Safe_local_iterator_base(const _Safe_local_iterator_base&);\n-\n     ~_Safe_local_iterator_base() { this->_M_detach(); }\n \n     _Safe_unordered_container_base*"}]}