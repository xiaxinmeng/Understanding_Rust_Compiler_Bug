{"sha": "202be58655a1964581facd2e514c7d3431258fe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyYmU1ODY1NWExOTY0NTgxZmFjZDJlNTE0YzdkMzQzMTI1OGZlOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-10-02T23:50:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-10-02T23:50:58Z"}, "message": "Define WIDTH macros for C2x.\n\nAs part of the integration of TS 18661-1 into C2x, many features\nbecame unconditional features not depending on any feature test macro\nbeing defined.  This patch updates the conditionals on the *_WIDTH\nmacros in limits.h and stdint.h accordingly so that they are defined\nfor C2x.  The macro CR_DECIMAL_DIG in float.h does still require\n__STDC_WANT_IEC_60559_BFP_EXT__ to be defined, and a test for this is\nadded.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* ginclude/stdint-gcc.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Change\n\tcondition on WIDTH macros to [__STDC_WANT_IEC_60559_BFP_EXT__ ||\n\t(__STDC_VERSION__ && __STDC_VERSION__ > 201710L)].\n\t* glimits.h: Likewise.\n\ngcc/testsuite:\n\t* gcc.dg/cr-decimal-dig-2.c: New test.\n\t* gcc.dg/limits-width-2.c: New test.  Based on limits-width-1.c.\n\t* gcc.dg/stdint-width-2.c: New test.  Based on stdint-width-1.c.\n\nFrom-SVN: r276497", "tree": {"sha": "e811cbd523fca46ee3d3d346249239b8f0daf021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e811cbd523fca46ee3d3d346249239b8f0daf021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/202be58655a1964581facd2e514c7d3431258fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202be58655a1964581facd2e514c7d3431258fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202be58655a1964581facd2e514c7d3431258fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202be58655a1964581facd2e514c7d3431258fe8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fc32e4a38cee21d1935fd04ad19726f76c06a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fc32e4a38cee21d1935fd04ad19726f76c06a9"}], "stats": {"total": 262, "additions": 258, "deletions": 4}, "files": [{"sha": "26c5c427b9432e20d73543d2c75406b71396178e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -1,3 +1,10 @@\n+2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stdint-gcc.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Change\n+\tcondition on WIDTH macros to [__STDC_WANT_IEC_60559_BFP_EXT__ ||\n+\t(__STDC_VERSION__ && __STDC_VERSION__ > 201710L)].\n+\t* glimits.h: Likewise.\n+\n 2019-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/91976"}, {"sha": "e9dc04e71e426eb961313c118a103131179790b5", "filename": "gcc/ginclude/stdint-gcc.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Fginclude%2Fstdint-gcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Fginclude%2Fstdint-gcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdint-gcc.h?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -260,8 +260,9 @@ typedef __UINTMAX_TYPE__ uintmax_t;\n #endif /* (!defined __cplusplus || __cplusplus >= 201103L\n \t   || defined __STDC_CONSTANT_MACROS) */\n \n-#ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n-/* TS 18661-1 widths of integer types.  */\n+#if (defined __STDC_WANT_IEC_60559_BFP_EXT__ \\\n+     || (defined (__STDC_VERSION__) && __STDC_VERSION__ > 201710L))\n+/* TS 18661-1 / C2X widths of integer types.  */\n \n #ifdef __INT8_TYPE__\n # undef INT8_WIDTH"}, {"sha": "1909344293d12e193e079beba5a847f11ed65177", "filename": "gcc/glimits.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -123,8 +123,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)\n #endif\n \n-#ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n-/* TS 18661-1 widths of integer types.  */\n+#if (defined __STDC_WANT_IEC_60559_BFP_EXT__ \\\n+     || (defined (__STDC_VERSION__) && __STDC_VERSION__ > 201710L))\n+/* TS 18661-1 / C2X widths of integer types.  */\n # undef CHAR_WIDTH\n # define CHAR_WIDTH __SCHAR_WIDTH__\n # undef SCHAR_WIDTH"}, {"sha": "e57cc72b8941e73c0c511e0d144816f67d7727f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -1,3 +1,9 @@\n+2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cr-decimal-dig-2.c: New test.\n+\t* gcc.dg/limits-width-2.c: New test.  Based on limits-width-1.c.\n+\t* gcc.dg/stdint-width-2.c: New test.  Based on stdint-width-1.c.\n+\n 2019-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/diagnostic/integral-array-size-1.C: New."}, {"sha": "42e79d545cd3829cc5812ae29a2a59a0b12d6e37", "filename": "gcc/testsuite/gcc.dg/cr-decimal-dig-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcr-decimal-dig-2.c?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -0,0 +1,10 @@\n+/* Test TS 18661-1 CR_DECIMAL_DIG: not in C2X without\n+   __STDC_WANT_IEC_60559_BFP_EXT__ defined.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <float.h>\n+\n+#ifdef CR_DECIMAL_DIG\n+#error \"CR_DECIMAL_DIG defined\"\n+#endif"}, {"sha": "a3c38958ae4819cbe8612f4a85eb5b1d12a29d7d", "filename": "gcc/testsuite/gcc.dg/limits-width-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-2.c?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -0,0 +1,54 @@\n+/* Test C2X width macros in <limits.h>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <limits.h>\n+\n+#define CHECK_WIDTH(TYPE, MAX, WIDTH)\t\t\t\t\t\\\n+  _Static_assert ((MAX >> ((TYPE) -1 < 0 ? (WIDTH - 2) : (WIDTH - 1))) == 1, \\\n+\t\t  \"width must match type\")\n+\n+#ifndef CHAR_WIDTH\n+# error \"missing CHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (char, CHAR_MAX, CHAR_WIDTH);\n+#ifndef SCHAR_WIDTH\n+# error \"missing SCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed char, SCHAR_MAX, SCHAR_WIDTH);\n+#ifndef UCHAR_WIDTH\n+# error \"missing UCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned char, UCHAR_MAX, UCHAR_WIDTH);\n+#ifndef SHRT_WIDTH\n+# error \"missing SHRT_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed short, SHRT_MAX, SHRT_WIDTH);\n+#ifndef USHRT_WIDTH\n+# error \"missing USHRT_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned short, USHRT_MAX, USHRT_WIDTH);\n+#ifndef INT_WIDTH\n+# error \"missing INT_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed int, INT_MAX, INT_WIDTH);\n+#ifndef UINT_WIDTH\n+# error \"missing UINT_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned int, UINT_MAX, UINT_WIDTH);\n+#ifndef LONG_WIDTH\n+# error \"missing LONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed long, LONG_MAX, LONG_WIDTH);\n+#ifndef ULONG_WIDTH\n+# error \"missing ULONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned long, ULONG_MAX, ULONG_WIDTH);\n+#ifndef LLONG_WIDTH\n+# error \"missing LLONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed long long, LLONG_MAX, LLONG_WIDTH);\n+#ifndef ULLONG_WIDTH\n+# error \"missing ULLONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned long long, ULLONG_MAX, ULLONG_WIDTH);"}, {"sha": "9838cb27612b41708c254e70380903f79831bea7", "filename": "gcc/testsuite/gcc.dg/stdint-width-2.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202be58655a1964581facd2e514c7d3431258fe8/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-2.c?ref=202be58655a1964581facd2e514c7d3431258fe8", "patch": "@@ -0,0 +1,175 @@\n+/* Test C2X width macros in <stdint.h>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -ffreestanding\" } */\n+/* { dg-additional-options \"-DSIGNAL_SUPPRESS\" { target { ! signal } } } */\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#ifndef SIGNAL_SUPPRESS\n+#include <signal.h>\n+#endif\n+typedef __WINT_TYPE__ wint_t;\n+\n+#define CHECK_WIDTH(TYPE, MAX, WIDTH)\t\t\t\t\t\\\n+  _Static_assert ((MAX >> ((TYPE) -1 < 0 ? (WIDTH - 2) : (WIDTH - 1))) == 1, \\\n+\t\t  \"width must match type\")\n+\n+#ifdef INT8_MAX\n+# ifndef INT8_WIDTH\n+#  error \"missing INT8_WIDTH\"\n+# endif\n+CHECK_WIDTH (int8_t, INT8_MAX, INT8_WIDTH);\n+#endif\n+#ifdef INT16_MAX\n+# ifndef INT16_WIDTH\n+#  error \"missing INT16_WIDTH\"\n+# endif\n+CHECK_WIDTH (int16_t, INT16_MAX, INT16_WIDTH);\n+#endif\n+#ifdef INT32_MAX\n+# ifndef INT32_WIDTH\n+#  error \"missing INT32_WIDTH\"\n+# endif\n+CHECK_WIDTH (int32_t, INT32_MAX, INT32_WIDTH);\n+#endif\n+#ifdef INT64_MAX\n+# ifndef INT64_WIDTH\n+#  error \"missing INT64_WIDTH\"\n+# endif\n+CHECK_WIDTH (int64_t, INT64_MAX, INT64_WIDTH);\n+#endif\n+#ifdef UINT8_MAX\n+# ifndef UINT8_WIDTH\n+#  error \"missing UINT8_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint8_t, UINT8_MAX, UINT8_WIDTH);\n+#endif\n+#ifdef UINT16_MAX\n+# ifndef UINT16_WIDTH\n+#  error \"missing UINT16_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint16_t, UINT16_MAX, UINT16_WIDTH);\n+#endif\n+#ifdef UINT32_MAX\n+# ifndef UINT32_WIDTH\n+#  error \"missing UINT32_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint32_t, UINT32_MAX, UINT32_WIDTH);\n+#endif\n+#ifdef UINT64_MAX\n+# ifndef UINT64_WIDTH\n+#  error \"missing UINT64_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint64_t, UINT64_MAX, UINT64_WIDTH);\n+#endif\n+\n+#ifndef INT_LEAST8_WIDTH\n+# error \"missing INT_LEAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least8_t, INT_LEAST8_MAX, INT_LEAST8_WIDTH);\n+#ifndef INT_LEAST16_WIDTH\n+# error \"missing INT_LEAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least16_t, INT_LEAST16_MAX, INT_LEAST16_WIDTH);\n+#ifndef INT_LEAST32_WIDTH\n+# error \"missing INT_LEAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least32_t, INT_LEAST32_MAX, INT_LEAST32_WIDTH);\n+#ifndef INT_LEAST64_WIDTH\n+# error \"missing INT_LEAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least64_t, INT_LEAST64_MAX, INT_LEAST64_WIDTH);\n+#ifndef INT_LEAST8_WIDTH\n+# error \"missing INT_LEAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least8_t, UINT_LEAST8_MAX, UINT_LEAST8_WIDTH);\n+#ifndef UINT_LEAST16_WIDTH\n+# error \"missing UINT_LEAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least16_t, UINT_LEAST16_MAX, UINT_LEAST16_WIDTH);\n+#ifndef UINT_LEAST32_WIDTH\n+# error \"missing UINT_LEAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least32_t, UINT_LEAST32_MAX, UINT_LEAST32_WIDTH);\n+#ifndef UINT_LEAST64_WIDTH\n+# error \"missing UINT_LEAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least64_t, UINT_LEAST64_MAX, UINT_LEAST64_WIDTH);\n+\n+#ifndef INT_FAST8_WIDTH\n+# error \"missing INT_FAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast8_t, INT_FAST8_MAX, INT_FAST8_WIDTH);\n+#ifndef INT_FAST16_WIDTH\n+# error \"missing INT_FAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast16_t, INT_FAST16_MAX, INT_FAST16_WIDTH);\n+#ifndef INT_FAST32_WIDTH\n+# error \"missing INT_FAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast32_t, INT_FAST32_MAX, INT_FAST32_WIDTH);\n+#ifndef INT_FAST64_WIDTH\n+# error \"missing INT_FAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast64_t, INT_FAST64_MAX, INT_FAST64_WIDTH);\n+#ifndef INT_FAST8_WIDTH\n+# error \"missing INT_FAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast8_t, UINT_FAST8_MAX, UINT_FAST8_WIDTH);\n+#ifndef UINT_FAST16_WIDTH\n+# error \"missing UINT_FAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast16_t, UINT_FAST16_MAX, UINT_FAST16_WIDTH);\n+#ifndef UINT_FAST32_WIDTH\n+# error \"missing UINT_FAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast32_t, UINT_FAST32_MAX, UINT_FAST32_WIDTH);\n+#ifndef UINT_FAST64_WIDTH\n+# error \"missing UINT_FAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast64_t, UINT_FAST64_MAX, UINT_FAST64_WIDTH);\n+\n+#ifdef INTPTR_MAX\n+# ifndef INTPTR_WIDTH\n+#  error \"missing INTPTR_WIDTH\"\n+# endif\n+CHECK_WIDTH (intptr_t, INTPTR_MAX, INTPTR_WIDTH);\n+#endif\n+#ifdef UINTPTR_MAX\n+# ifndef UINTPTR_WIDTH\n+#  error \"missing UINTPTR_WIDTH\"\n+# endif\n+CHECK_WIDTH (uintptr_t, UINTPTR_MAX, UINTPTR_WIDTH);\n+#endif\n+\n+#ifndef INTMAX_WIDTH\n+# error \"missing INTMAX_WIDTH\"\n+#endif\n+CHECK_WIDTH (intmax_t, INTMAX_MAX, INTMAX_WIDTH);\n+#ifndef UINTMAX_WIDTH\n+# error \"missing UINTMAX_WIDTH\"\n+#endif\n+CHECK_WIDTH (uintmax_t, UINTMAX_MAX, UINTMAX_WIDTH);\n+\n+#ifndef PTRDIFF_WIDTH\n+# error \"missing PTRDIFF_WIDTH\"\n+#endif\n+CHECK_WIDTH (ptrdiff_t, PTRDIFF_MAX, PTRDIFF_WIDTH);\n+#ifndef SIGNAL_SUPPRESS\n+# ifndef SIG_ATOMIC_WIDTH\n+#  error \"missing SIG_ATOMIC_WIDTH\"\n+# endif\n+CHECK_WIDTH (sig_atomic_t, SIG_ATOMIC_MAX, SIG_ATOMIC_WIDTH);\n+#endif\n+#ifndef SIZE_WIDTH\n+# error \"missing SIZE_WIDTH\"\n+#endif\n+CHECK_WIDTH (size_t, SIZE_MAX, SIZE_WIDTH);\n+#ifndef WCHAR_WIDTH\n+# error \"missing WCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (wchar_t, WCHAR_MAX, WCHAR_WIDTH);\n+#ifndef WINT_WIDTH\n+# error \"missing WINT_WIDTH\"\n+#endif\n+CHECK_WIDTH (wint_t, WINT_MAX, WINT_WIDTH);"}]}