{"sha": "0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGViNGMxYTdjYzA1OTEzYjM5YmI2MjM5ZTIwYTczYjk2NGU0YWU5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:08:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:08:36Z"}, "message": "[multiple changes]\n\n2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch5.adb (P_Sequence_Of_Statements): In Ada2012 a label can end a\n\tsequence of statements.\n\n2010-10-07  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Check_Files): Only add a .ci files if it exists\n\n2010-10-07  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.ads, a-tags.adb (Type_Is_Abstract): New subprogram.\n\t* rtsfind.ads (RE_Type_Is_Abstract): New entity.\n\t* exp_disp.adb (Make_DT): Initialize TSD component Type_Is_Abstract.\n\n2010-10-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch12.adb (Mark_Context): Removed, no longer needed.\n\t(Analyze_Package_Instantiation): No longer analyze systematically a\n\tgeneric body in CodePeer mode.\n\t* freeze.adb, sem_attr.adb: Update comments.\n\nFrom-SVN: r165081", "tree": {"sha": "9eb9f6ea309cf4a3785836cc3a7db2d6bbfd6ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eb9f6ea309cf4a3785836cc3a7db2d6bbfd6ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/comments", "author": null, "committer": null, "parents": [{"sha": "b607a144ea24dd9ba54b893134683fa48d85ce5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b607a144ea24dd9ba54b893134683fa48d85ce5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b607a144ea24dd9ba54b893134683fa48d85ce5e"}], "stats": {"total": 262, "additions": 110, "deletions": 152}, "files": [{"sha": "cf3c16d3e9bbb4e944645626273b4cd638782675", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -1,3 +1,25 @@\n+2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch5.adb (P_Sequence_Of_Statements): In Ada2012 a label can end a\n+\tsequence of statements.\n+\n+2010-10-07  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Check_Files): Only add a .ci files if it exists\n+\n+2010-10-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads, a-tags.adb (Type_Is_Abstract): New subprogram.\n+\t* rtsfind.ads (RE_Type_Is_Abstract): New entity.\n+\t* exp_disp.adb (Make_DT): Initialize TSD component Type_Is_Abstract.\n+\n+2010-10-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch12.adb (Mark_Context): Removed, no longer needed.\n+\t(Analyze_Package_Instantiation): No longer analyze systematically a\n+\tgeneric body in CodePeer mode.\n+\t* freeze.adb, sem_attr.adb: Update comments.\n+\n 2010-10-05  Robert Dewar  <dewar@adacore.com>\n \n \t* par-ch5.adb (Test_Statement_Required): Allow all pragmas in Ada 2012"}, {"sha": "6f6a8aa02defa5f71bba00510ba8895a138cf3ae", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -949,6 +949,24 @@ package body Ada.Tags is\n       SSD (T).SSD_Table (Position).Kind := Value;\n    end Set_Prim_Op_Kind;\n \n+   ----------------------\n+   -- Type_Is_Abstract --\n+   ----------------------\n+\n+   function Type_Is_Abstract (T : Tag) return Boolean is\n+      TSD_Ptr : Addr_Ptr;\n+      TSD     : Type_Specific_Data_Ptr;\n+\n+   begin\n+      if T = No_Tag then\n+         raise Tag_Error;\n+      end if;\n+\n+      TSD_Ptr := To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+      TSD     := To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+      return TSD.Type_Is_Abstract;\n+   end Type_Is_Abstract;\n+\n    ------------------------\n    -- Wide_Expanded_Name --\n    ------------------------"}, {"sha": "e03d58d4f83607185eff07a0ce6a6d3e9ef3e532", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -75,6 +75,9 @@ package Ada.Tags is\n    function Interface_Ancestor_Tags (T : Tag) return Tag_Array;\n    pragma Ada_05 (Interface_Ancestor_Tags);\n \n+   function Type_Is_Abstract (T : Tag) return Boolean;\n+   pragma Ada_05 (Type_Is_Abstract);\n+\n    Tag_Error : exception;\n \n private\n@@ -103,6 +106,8 @@ private\n    --                                    +-------------------+\n    --                                    |   transportable   |\n    --                                    +-------------------+\n+   --                                    |  type_is_abstract |\n+   --                                    +-------------------+\n    --                                    | rec ctrler offset |\n    --                                    +-------------------+\n    --                                    |   Ifaces_Table   ---> Interface Data\n@@ -280,6 +285,9 @@ private\n       --  for being used in remote calls as actuals for classwide formals or as\n       --  return values for classwide functions.\n \n+      Type_Is_Abstract : Boolean;\n+      --  True if the type is abstract (Ada 2012: AI05-0173)\n+\n       RC_Offset : SSE.Storage_Offset;\n       --  Controller Offset: Used to give support to tagged controlled objects\n       --  (see Get_Deep_Controller at s-finimp)"}, {"sha": "7e0cba54a0d428e291409961c11ec3654589ddf4", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -4679,6 +4679,7 @@ package body Exp_Disp is\n       --            External_Tag       => Cstring_Ptr!(Exname'Address))\n       --            HT_Link            => HT_Link'Address,\n       --            Transportable      => <<boolean-value>>,\n+      --            Type_Is_Abstract   => <<boolean-value>>,\n       --            RC_Offset          => <<integer-value>>,\n       --            [ Size_Func         => Size_Prim'Access ]\n       --            [ Interfaces_Table  => <<access-value>> ]\n@@ -4945,6 +4946,22 @@ package body Exp_Disp is\n             New_Occurrence_Of (Transportable, Loc));\n       end;\n \n+      --  Type_Is_Abstract (Ada 2012: AI05-0173). This functionality is\n+      --  not available in the HIE runtime.\n+\n+      if RTE_Record_Component_Available (RE_Type_Is_Abstract) then\n+         declare\n+            Type_Is_Abstract : Entity_Id;\n+\n+         begin\n+            Type_Is_Abstract :=\n+              Boolean_Literals (Is_Abstract_Type (Typ));\n+\n+            Append_To (TSD_Aggr_List,\n+               New_Occurrence_Of (Type_Is_Abstract, Loc));\n+         end;\n+      end if;\n+\n       --  RC_Offset: These are the valid values and their meaning:\n \n       --   >0: For simple types with controlled components is"}, {"sha": "ff32684b9d7c316d0c283a7d20da310159817c6d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -2249,7 +2249,9 @@ package body Freeze is\n            and then Esize (Rec) >= Scalar_Component_Total_RM_Size\n \n            --  Never do implicit packing in CodePeer mode since we don't do\n-           --  any packing ever in this mode (why not???)\n+           --  any packing in this mode, since this generates over-complex\n+           --  code that confuses CodePeer, and in general, CodePeer does not\n+           --  care about the internal representation of objects.\n \n            and then not CodePeer_Mode\n          then"}, {"sha": "a91653cb94dfede4012832ed19c6be491caae1a3", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -377,6 +377,7 @@ procedure GNATCmd is\n \n          declare\n             Proj : Project_List;\n+            File : String_Access;\n \n          begin\n             --  Gnatstack needs to add the .ci file for the binder generated\n@@ -389,7 +390,6 @@ procedure GNATCmd is\n                   if Check_Project (Proj.Project, Project) then\n                      declare\n                         Main : String_List_Id;\n-                        File : String_Access;\n \n                      begin\n                         --  Include binder generated files for main programs\n@@ -541,8 +541,7 @@ procedure GNATCmd is\n                         end if;\n \n                         if not Subunit then\n-                           Last_Switches.Increment_Last;\n-                           Last_Switches.Table (Last_Switches.Last) :=\n+                           File :=\n                              new String'\n                                (Get_Name_String\n                                  (Unit.File_Names\n@@ -551,6 +550,11 @@ procedure GNATCmd is\n                                   (Get_Name_String\n                                      (Unit.File_Names (Impl).Display_File),\n                                    \"ci\"));\n+\n+                           if Is_Regular_File (File.all) then\n+                              Last_Switches.Increment_Last;\n+                              Last_Switches.Table (Last_Switches.Last) := File;\n+                           end if;\n                         end if;\n                      end if;\n \n@@ -562,8 +566,7 @@ procedure GNATCmd is\n                      if Check_Project\n                           (Unit.File_Names (Spec).Project, Project)\n                      then\n-                        Last_Switches.Increment_Last;\n-                        Last_Switches.Table (Last_Switches.Last) :=\n+                        File :=\n                           new String'\n                             (Get_Name_String\n                               (Unit.File_Names\n@@ -572,6 +575,11 @@ procedure GNATCmd is\n                              MLib.Fil.Ext_To\n                                (Get_Name_String (Unit.File_Names (Spec).File),\n                                 \"ci\"));\n+\n+                        if Is_Regular_File (File.all) then\n+                           Last_Switches.Increment_Last;\n+                           Last_Switches.Table (Last_Switches.Last) := File;\n+                        end if;\n                      end if;\n                   end if;\n "}, {"sha": "f18197e0c132b0c7511e9655ec995fa8b73df820", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -83,7 +83,8 @@ package body Ch5 is\n    -- 5.1  Sequence of Statements --\n    ---------------------------------\n \n-   --  SEQUENCE_OF_STATEMENTS ::= STATEMENT {STATEMENT}\n+   --  SEQUENCE_OF_STATEMENTS ::= STATEMENT {STATEMENT} {LABEL}\n+   --  Note: the final label is an Ada2012 addition.\n \n    --  STATEMENT ::=\n    --    {LABEL} SIMPLE_STATEMENT | {LABEL} COMPOUND_STATEMENT\n@@ -149,6 +150,12 @@ package body Ch5 is\n       --  is required. It is initialized from the Sreq flag, and modified as\n       --  statements are scanned (a statement turns it off, and a label turns\n       --  it back on again since a statement must follow a label).\n+      --  Note : this final requirement is lifted in Ada2012.\n+\n+      Statement_Seen : Boolean;\n+      --  In Ada2012 a label can end a sequence of statements, but the sequence\n+      --  cannot contain only labels. This flag is set whenever a label is\n+      --  encountered, to enforce this rule at the end of a sequence.\n \n       Declaration_Found : Boolean := False;\n       --  This flag is set True if a declaration is encountered, so that the\n@@ -222,8 +229,10 @@ package body Ch5 is\n \n             if Ada_Version >= Ada_2012\n               and then not Is_Empty_List (Statement_List)\n-              and then (Nkind (Last (Statement_List)) = N_Label\n-                          or else All_Pragmas)\n+              and then\n+                ((Nkind (Last (Statement_List)) = N_Label\n+                   and then Statement_Seen)\n+                or else All_Pragmas)\n             then\n                declare\n                   Null_Stm : constant Node_Id :=\n@@ -233,8 +242,6 @@ package body Ch5 is\n                   Append_To (Statement_List, Null_Stm);\n                end;\n \n-            --  All pragmas is OK on\n-\n             --  If not Ada 2012, or not special case above, give error message\n \n             else\n@@ -249,6 +256,7 @@ package body Ch5 is\n    begin\n       Statement_List := New_List;\n       Statement_Required := SS_Flags.Sreq;\n+      Statement_Seen     := False;\n \n       loop\n          Ignore (Tok_Semicolon);\n@@ -765,8 +773,15 @@ package body Ch5 is\n                   Statement_Required := False;\n \n                --  Label starting with << which must precede real statement\n+               --  Note: in Ada2012, the label may end the sequence.\n \n                when Tok_Less_Less =>\n+                  if Present (Last (Statement_List))\n+                    and then Nkind (Last (Statement_List)) /= N_Label\n+                  then\n+                     Statement_Seen := True;\n+                  end if;\n+\n                   Append_To (Statement_List, P_Label);\n                   Statement_Required := True;\n "}, {"sha": "94d76be10a45e724ea02948d970397db9880c2d3", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -600,6 +600,7 @@ package Rtsfind is\n      RE_Signature,                       -- Ada.Tags\n      RE_SSD,                             -- Ada.Tags\n      RE_TSD,                             -- Ada.Tags\n+     RE_Type_Is_Abstract,                -- Ada.Tags\n      RE_Type_Specific_Data,              -- Ada.Tags\n      RE_Register_Interface_Offset,       -- Ada.Tags\n      RE_Register_Tag,                    -- Ada.Tags\n@@ -1770,6 +1771,7 @@ package Rtsfind is\n      RE_Signature                        => Ada_Tags,\n      RE_SSD                              => Ada_Tags,\n      RE_TSD                              => Ada_Tags,\n+     RE_Type_Is_Abstract                 => Ada_Tags,\n      RE_Type_Specific_Data               => Ada_Tags,\n      RE_Register_Interface_Offset        => Ada_Tags,\n      RE_Register_Tag                     => Ada_Tags,"}, {"sha": "babdfde8588d1755a4a8be537ffde1b83690f131", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -7950,10 +7950,11 @@ package body Sem_Attr is\n                   --  been caught by the compilation of the generic unit.\n \n                   --  Note that we relax this check in CodePeer mode for\n-                  --  compatibility with legacy code.\n-\n-                  --  This seems an odd decision??? Why should codepeer mode\n-                  --  have a different notion of legality from the compiler???\n+                  --  compatibility with legacy code, since CodePeer is an\n+                  --  Ada source code analyzer, not a strict compiler.\n+                  --  ??? Note that a better approach would be to have a\n+                  --  separate switch to relax this rule, and enable this\n+                  --  switch in CodePeer mode.\n \n                   elsif Attr_Id = Attribute_Access\n                     and then not CodePeer_Mode"}, {"sha": "7b8846f2e1cf31c292f4e513d48115d417ce30d8", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 136, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb4c1a7cc05913b39bb6239e20a73b964e4ae95/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0eb4c1a7cc05913b39bb6239e20a73b964e4ae95", "patch": "@@ -475,12 +475,6 @@ package body Sem_Ch12 is\n    --  of generic formals of a generic package declared with a box or with\n    --  partial parametrization.\n \n-   procedure Mark_Context (Inst_Decl : Node_Id; Gen_Decl : Node_Id);\n-   --  If the generic unit comes from a different unit, indicate that the\n-   --  unit that contains the instance depends on the body that contains\n-   --  the generic body. Used to determine a more precise dependency graph\n-   --  for use by CodePeer.\n-\n    procedure Set_Instance_Env\n      (Gen_Unit : Entity_Id;\n       Act_Unit : Entity_Id);\n@@ -3237,8 +3231,7 @@ package body Sem_Ch12 is\n                   or else Enclosing_Body_Present\n                   or else Present (Corresponding_Body (Gen_Decl)))\n                 and then (Is_In_Main_Unit (N)\n-                           or else Might_Inline_Subp\n-                           or else CodePeer_Mode)\n+                           or else Might_Inline_Subp)\n                 and then not Is_Actual_Pack\n                 and then not Inline_Now\n                 and then (Operating_Mode = Generate_Code\n@@ -8609,8 +8602,6 @@ package body Sem_Ch12 is\n          Gen_Body_Id := Corresponding_Body (Gen_Decl);\n       end if;\n \n-      Mark_Context (Act_Decl, Gen_Decl);\n-\n       --  Establish global variable for sloc adjustment and for error recovery\n \n       Instantiation_Node := Inst_Node;\n@@ -8893,7 +8884,6 @@ package body Sem_Ch12 is\n \n       if Present (Gen_Body_Id) then\n          Gen_Body := Unit_Declaration_Node (Gen_Body_Id);\n-         Mark_Context (Inst_Node, Gen_Decl);\n \n          if Nkind (Gen_Body) = N_Subprogram_Body_Stub then\n \n@@ -10408,131 +10398,6 @@ package body Sem_Ch12 is\n       end if;\n    end Is_Generic_Formal;\n \n-   ------------------\n-   -- Mark_Context --\n-   ------------------\n-\n-   procedure Mark_Context (Inst_Decl : Node_Id; Gen_Decl : Node_Id) is\n-      Loc     : constant Source_Ptr := Sloc (Inst_Decl);\n-      Inst_CU : constant Unit_Number_Type := Get_Code_Unit (Inst_Decl);\n-\n-      --  Note that we use Get_Code_Unit to determine the position of the\n-      --  instantiation, because it may itself appear within another instance\n-      --  and we need to mark the context of the enclosing unit, not that of\n-      --  the unit that contains the generic.\n-\n-      Gen_CU  : constant Unit_Number_Type := Get_Source_Unit (Gen_Decl);\n-      Inst    : Entity_Id;\n-      Clause  : Node_Id;\n-      Scop    : Entity_Id;\n-\n-      procedure Add_Implicit_With (CU : Unit_Number_Type);\n-      --  If a generic is instantiated in the direct or indirect context of\n-      --  the current unit, but there is no with_clause for it in the current\n-      --  context, add a with_clause for it to indicate that the body of the\n-      --  generic should be examined before the current unit.\n-\n-      procedure Add_Implicit_With (CU : Unit_Number_Type) is\n-         Withn : constant Node_Id :=\n-           Make_With_Clause (Loc,\n-              Name => New_Occurrence_Of (Cunit_Entity (CU), Loc));\n-      begin\n-         Set_Implicit_With (Withn);\n-         Set_Library_Unit (Withn, Cunit (CU));\n-         Set_Withed_Body (Withn, Cunit (CU));\n-         Prepend (Withn, Context_Items (Cunit (Inst_CU)));\n-      end Add_Implicit_With;\n-\n-   begin\n-      --  This is only relevant when compiling for CodePeer. In what follows,\n-      --  C is the current unit containing the instance body, and G is the\n-      --  generic unit in that instance.\n-\n-      if not CodePeer_Mode then\n-         return;\n-      end if;\n-\n-      --  Nothing to do if G is local.\n-\n-      if Inst_CU = Gen_CU then\n-         return;\n-      end if;\n-\n-      --  If G is itself  declared within an instance, indicate that the\n-      --  generic body of that instance is also needed by C. This must be\n-      --  done recursively.\n-\n-      Scop := Scope (Defining_Entity (Gen_Decl));\n-\n-      while Is_Generic_Instance (Scop)\n-        and then Ekind (Scop) = E_Package\n-      loop\n-         Mark_Context\n-           (Inst_Decl,\n-            Unit_Declaration_Node\n-              (Generic_Parent\n-                 (Specification (Unit_Declaration_Node (Scop)))));\n-         Scop := Scope (Scop);\n-      end loop;\n-\n-      --  Add references to other generic units in the context of G, because\n-      --  they may be instantiated within G, and their bodies needed by C.\n-\n-      Clause := First (Context_Items (Cunit (Gen_CU)));\n-\n-      while Present (Clause) loop\n-         if Nkind (Clause) = N_With_Clause\n-           and then\n-             Nkind (Unit (Library_Unit (Clause)))\n-               = N_Generic_Package_Declaration\n-         then\n-            Add_Implicit_With (Get_Source_Unit (Library_Unit (Clause)));\n-         end if;\n-\n-         Next (Clause);\n-      end loop;\n-\n-      --  Now indicate that the body of G is needed by C\n-\n-      Clause := First (Context_Items (Cunit (Inst_CU)));\n-      while Present (Clause) loop\n-         if Nkind (Clause) = N_With_Clause\n-           and then  Library_Unit (Clause) = Cunit (Gen_CU)\n-         then\n-            Set_Withed_Body (Clause, Cunit (Gen_CU));\n-            return;\n-         end if;\n-\n-         Next (Clause);\n-      end loop;\n-\n-      --  If the with-clause for G is not in the context of C, it may appear in\n-      --  some ancestor of C.\n-\n-      Inst := Cunit_Entity (Inst_CU);\n-      while Is_Child_Unit (Inst) loop\n-         Inst := Scope (Inst);\n-\n-         Clause :=\n-           First (Context_Items (Parent (Unit_Declaration_Node (Inst))));\n-         while Present (Clause) loop\n-            if Nkind (Clause) = N_With_Clause\n-              and then Library_Unit (Clause) = Cunit (Gen_CU)\n-            then\n-               Set_Withed_Body (Clause, Cunit (Gen_CU));\n-               return;\n-            end if;\n-\n-            Next (Clause);\n-         end loop;\n-      end loop;\n-\n-      --  If not found, G comes from an instance elsewhere in the context. Make\n-      --  the dependence explicit in the context of C.\n-\n-      Add_Implicit_With (Gen_CU);\n-   end Mark_Context;\n-\n    ---------------------\n    -- Is_In_Main_Unit --\n    ---------------------"}]}