{"sha": "8d3631f8a345db1d5d5301a62618004b339a4dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzNjMxZjhhMzQ1ZGIxZDVkNTMwMWE2MjYxODAwNGIzMzlhNGRlYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-02-29T10:29:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-02-29T10:29:52Z"}, "message": "pt.c (fn_type_unification): Unify return type, whenever provided.\n\n\t* pt.c (fn_type_unification): Unify return type, whenever\n\tprovided.\n\t(get_bindings_real): Only pass return type when necessary.\n\tRemove explicit return type check.\n\t* class.c (resolve_address_of_overloaded_function): Pass desired\n\treturn type to fn_type_unification.\n\nFrom-SVN: r32253", "tree": {"sha": "080dc4fc58c5703a899602cb38bd655fd4a062a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/080dc4fc58c5703a899602cb38bd655fd4a062a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3631f8a345db1d5d5301a62618004b339a4dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3631f8a345db1d5d5301a62618004b339a4dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3631f8a345db1d5d5301a62618004b339a4dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3631f8a345db1d5d5301a62618004b339a4dec/comments", "author": null, "committer": null, "parents": [{"sha": "898d4b17a695bb46d7622a24a002b54f3826d8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898d4b17a695bb46d7622a24a002b54f3826d8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898d4b17a695bb46d7622a24a002b54f3826d8b9"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "cfbc6f55c9ab879aaed8cb323fd20957d41be322", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d3631f8a345db1d5d5301a62618004b339a4dec", "patch": "@@ -1,3 +1,12 @@\n+2000-02-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (fn_type_unification): Unify return type, whenever\n+\tprovided.\n+\t(get_bindings_real): Only pass return type when necessary.\n+\tRemove explicit return type check.\n+\t* class.c (resolve_address_of_overloaded_function): Pass desired\n+\treturn type to fn_type_unification.\n+\n Mon Feb 28 08:15:23 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* class.c (build_vtbl_or_vbase_field, check_methods): Don't clear"}, {"sha": "3f922ef4210f73b64b49b124bf4fd88da29e7c4d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8d3631f8a345db1d5d5301a62618004b339a4dec", "patch": "@@ -5829,6 +5829,7 @@ resolve_address_of_overloaded_function (target_type,\n     {\n       tree target_fn_type;\n       tree target_arg_types;\n+      tree target_ret_type;\n       tree fns;\n \n       if (is_ptrmem)\n@@ -5837,6 +5838,7 @@ resolve_address_of_overloaded_function (target_type,\n       else\n \ttarget_fn_type = TREE_TYPE (target_type);\n       target_arg_types = TYPE_ARG_TYPES (target_fn_type);\n+      target_ret_type = TREE_TYPE (target_fn_type);\n \t  \n       for (fns = overload; fns; fns = OVL_CHAIN (fns))\n \t{\n@@ -5858,7 +5860,7 @@ resolve_address_of_overloaded_function (target_type,\n \t  /* Try to do argument deduction.  */\n \t  targs = make_tree_vec (DECL_NTPARMS (fn));\n \t  if (fn_type_unification (fn, explicit_targs, targs,\n-\t\t\t\t   target_arg_types, NULL_TREE,\n+\t\t\t\t   target_arg_types, target_ret_type,\n \t\t\t\t   DEDUCE_EXACT) != 0)\n \t    /* Argument deduction failed.  */\n \t    continue;"}, {"sha": "64b48c44212068f33a7fec646d4599445e7eb6be", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3631f8a345db1d5d5301a62618004b339a4dec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8d3631f8a345db1d5d5301a62618004b339a4dec", "patch": "@@ -7562,12 +7562,18 @@ fn_type_unification (fn, explicit_targs, targs, args, return_type,\n \n   if (DECL_CONV_FN_P (fn))\n     {\n-      /* This is a template conversion operator.  Use the return types\n-         as well as the argument types.  We use it instead of 'this', since\n+      /* This is a template conversion operator.  Remove `this', since\n          we could be comparing conversions from different classes.  */\n-      parms = tree_cons (NULL_TREE, TREE_TYPE (fntype),\n-\t\t\t TREE_CHAIN (parms));\n-      args = tree_cons (NULL_TREE, return_type, TREE_CHAIN (args));\n+      parms = TREE_CHAIN (parms);\n+      args = TREE_CHAIN (args);\n+      my_friendly_assert (return_type != NULL_TREE, 20000227);\n+    }\n+  \n+  if (return_type)\n+    {\n+      /* We've been given a return type to match, prepend it.  */\n+      parms = tree_cons (NULL_TREE, TREE_TYPE (fntype), parms);\n+      args = tree_cons (NULL_TREE, return_type, args);\n     }\n \n   /* We allow incomplete unification without an error message here\n@@ -8793,22 +8799,13 @@ get_bindings_real (fn, decl, explicit_args, check_rettype)\n \n   i = fn_type_unification (fn, explicit_args, targs, \n \t\t\t   decl_arg_types,\n-\t\t\t   TREE_TYPE (decl_type),\n+\t\t\t   (check_rettype || DECL_CONV_FN_P (fn)\n+\t                    ? TREE_TYPE (decl_type) : NULL_TREE),\n \t\t\t   DEDUCE_EXACT);\n \n   if (i != 0)\n     return NULL_TREE;\n \n-  if (check_rettype)\n-    {\n-      /* Check to see that the resulting return type is also OK.  */\n-      tree t = tsubst (TREE_TYPE (TREE_TYPE (fn)), targs,\n-\t\t       /*complain=*/0, NULL_TREE);\n-\n-      if (!same_type_p (t, TREE_TYPE (TREE_TYPE (decl))))\n-\treturn NULL_TREE;\n-    }\n-\n   return targs;\n }\n "}]}