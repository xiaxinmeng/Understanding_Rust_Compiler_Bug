{"sha": "a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmM2ZhNzE2ZjlmYzZmYmFiNDBiNWQyNDdkYjYwMzg1YzY5Y2Q5MA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-12-04T14:45:59Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-12-04T14:45:59Z"}, "message": "[AArch64] Add support for fused compare and branch\n\nAdd support for fused compare with branch.  Rename the existing\nAARCH64_FUSE_CMP_BRANCH to ALU_BRANCH, and AARCH64_FUSE_ALU_BRANCH\nto ALU_CBZ to make it clear what is being fused.\n\n    gcc/\n\t* config/aarch64/aarch64.c\n\t(thunderxt88_tunings): Use AARCH64_FUSE_ALU_BRANCH.\n\t(thunderx_tunings): Likewise.\n\t(tsv110_tunings): Use AARCH64_FUSE_ALU_BRANCH and AARCH64_FUSE_ALU_CBZ.\n\t(thunderx2t99_tunings): Likewise.\n\t(aarch_macro_fusion_pair_p): Add support for AARCH64_FUSE_CMP_BRANCH.\n\t* config/aarch64/aarch64-fusion-pairs.def: Add ALU_CBZ fusion.\n\nFrom-SVN: r278966", "tree": {"sha": "3806b67ba333c4957f494c6caaf1f2859a78f5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3806b67ba333c4957f494c6caaf1f2859a78f5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/comments", "author": null, "committer": null, "parents": [{"sha": "6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "3d59aeab21018cea7128dd5c2e2c67063e02f45c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "patch": "@@ -1,3 +1,13 @@\n+2019-12-04  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(thunderxt88_tunings): Use AARCH64_FUSE_ALU_BRANCH.\n+\t(thunderx_tunings): Likewise.\n+\t(tsv110_tunings): Use AARCH64_FUSE_ALU_BRANCH and AARCH64_FUSE_ALU_CBZ.\n+\t(thunderx2t99_tunings): Likewise.\n+\t(aarch_macro_fusion_pair_p): Add support for AARCH64_FUSE_CMP_BRANCH.\n+\t* config/aarch64/aarch64-fusion-pairs.def: Add ALU_CBZ fusion.\n+\n 2019-12-04  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Properly guard"}, {"sha": "051009b42b2db4e79a8b302fd3f1b65dedfdba8f", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "patch": "@@ -35,5 +35,6 @@ AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR)\n AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n AARCH64_FUSION_PAIR (\"aes+aesmc\", AES_AESMC)\n AARCH64_FUSION_PAIR (\"alu+branch\", ALU_BRANCH)\n+AARCH64_FUSION_PAIR (\"alu+cbz\", ALU_CBZ)\n \n #undef AARCH64_FUSION_PAIR"}, {"sha": "a3b18b381e1748f8fe5e522bdec4f7c850821fe8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f3fa716f9fc6fbab40b5d247db60385c69cd90/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a4f3fa716f9fc6fbab40b5d247db60385c69cd90", "patch": "@@ -915,7 +915,7 @@ static const struct tune_params thunderxt88_tunings =\n   SVE_NOT_IMPLEMENTED, /* sve_width  */\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n-  AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n+  AARCH64_FUSE_ALU_BRANCH, /* fusible_ops  */\n   \"8\",\t/* function_align.  */\n   \"8\",\t/* jump_align.  */\n   \"8\",\t/* loop_align.  */\n@@ -941,7 +941,7 @@ static const struct tune_params thunderx_tunings =\n   SVE_NOT_IMPLEMENTED, /* sve_width  */\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n-  AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n+  AARCH64_FUSE_ALU_BRANCH, /* fusible_ops  */\n   \"8\",\t/* function_align.  */\n   \"8\",\t/* jump_align.  */\n   \"8\",\t/* loop_align.  */\n@@ -968,8 +968,8 @@ static const struct tune_params tsv110_tunings =\n   SVE_NOT_IMPLEMENTED, /* sve_width  */\n   4,    /* memmov_cost  */\n   4,    /* issue_rate  */\n-  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_CMP_BRANCH\n-   | AARCH64_FUSE_ALU_BRANCH), /* fusible_ops  */\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_ALU_BRANCH\n+   | AARCH64_FUSE_ALU_CBZ), /* fusible_ops  */\n   \"16\", /* function_align.  */\n   \"4\",  /* jump_align.  */\n   \"8\",  /* loop_align.  */\n@@ -1103,8 +1103,8 @@ static const struct tune_params thunderx2t99_tunings =\n   SVE_NOT_IMPLEMENTED, /* sve_width  */\n   4, /* memmov_cost.  */\n   4, /* issue_rate.  */\n-  (AARCH64_FUSE_CMP_BRANCH | AARCH64_FUSE_AES_AESMC\n-   | AARCH64_FUSE_ALU_BRANCH), /* fusible_ops  */\n+  (AARCH64_FUSE_ALU_BRANCH | AARCH64_FUSE_AES_AESMC\n+   | AARCH64_FUSE_ALU_CBZ), /* fusible_ops  */\n   \"16\",\t/* function_align.  */\n   \"8\",\t/* jump_align.  */\n   \"16\",\t/* loop_align.  */\n@@ -20396,7 +20396,16 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n+  /* Fuse compare (CMP/CMN/TST/BICS) and conditional branch.  */\n   if (aarch64_fusion_enabled_p (AARCH64_FUSE_CMP_BRANCH)\n+      && prev_set && curr_set && any_condjump_p (curr)\n+      && GET_CODE (SET_SRC (prev_set)) == COMPARE\n+      && SCALAR_INT_MODE_P (GET_MODE (XEXP (SET_SRC (prev_set), 0)))\n+      && reg_referenced_p (SET_DEST (prev_set), PATTERN (curr)))\n+    return true;\n+\n+  /* Fuse flag-setting ALU instructions and conditional branch.  */\n+  if (aarch64_fusion_enabled_p (AARCH64_FUSE_ALU_BRANCH)\n       && any_condjump_p (curr))\n     {\n       unsigned int condreg1, condreg2;\n@@ -20420,9 +20429,10 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n \t}\n     }\n \n+  /* Fuse ALU instructions and CBZ/CBNZ.  */\n   if (prev_set\n       && curr_set\n-      && aarch64_fusion_enabled_p (AARCH64_FUSE_ALU_BRANCH)\n+      && aarch64_fusion_enabled_p (AARCH64_FUSE_ALU_CBZ)\n       && any_condjump_p (curr))\n     {\n       /* We're trying to match:"}]}