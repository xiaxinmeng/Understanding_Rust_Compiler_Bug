{"sha": "e898620c39d4b0c6719eb678f8828577fcc4f2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5ODYyMGMzOWQ0YjBjNjcxOWViNjc4Zjg4Mjg1NzdmY2M0ZjJiNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-19T17:20:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-19T17:20:02Z"}, "message": "ia64.c (ia64_expand_widen_sum): New.\n\n        * config/ia64/ia64.c (ia64_expand_widen_sum): New.\n        (ia64_expand_dot_prod_v8qi): New.\n        * config/ia64/ia64-protos.h: Update.\n        * config/ia64/vect.md (pmpy2_r, pmpy2_l, widen_usumv8qi3,\n        widen_usumv4hi3, widen_ssumv8qi3, widen_ssumv4hi3, udot_prodv8qi,\n        sdot_prodv8qi, sdot_prodv4hi): New.\n        (reduc_splus_v2sf): Rename from reduc_plus_v2sf.\n\nFrom-SVN: r104426", "tree": {"sha": "c7e72ea333368b0edd1b9ed311f8868c8b6e9855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e72ea333368b0edd1b9ed311f8868c8b6e9855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e898620c39d4b0c6719eb678f8828577fcc4f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898620c39d4b0c6719eb678f8828577fcc4f2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e898620c39d4b0c6719eb678f8828577fcc4f2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898620c39d4b0c6719eb678f8828577fcc4f2b7/comments", "author": null, "committer": null, "parents": [{"sha": "a220ee348d9e054e4bb1b4d0292a3406b9d0d0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a220ee348d9e054e4bb1b4d0292a3406b9d0d0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a220ee348d9e054e4bb1b4d0292a3406b9d0d0d8"}], "stats": {"total": 237, "additions": 232, "deletions": 5}, "files": [{"sha": "696921125df9751dd50066ff9994ad6ec0bf5254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e898620c39d4b0c6719eb678f8828577fcc4f2b7", "patch": "@@ -1,3 +1,13 @@\n+2005-09-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_expand_widen_sum): New.\n+\t(ia64_expand_dot_prod_v8qi): New.\n+\t* config/ia64/ia64-protos.h: Update.\n+\t* config/ia64/vect.md (pmpy2_r, pmpy2_l, widen_usumv8qi3,\n+\twiden_usumv4hi3, widen_ssumv8qi3, widen_ssumv4hi3, udot_prodv8qi,\n+\tsdot_prodv8qi, sdot_prodv4hi): New.\n+\t(reduc_splus_v2sf): Rename from reduc_plus_v2sf.\n+\n 2005-09-19  Richard Henderson  <rth@redhat.com>\n \n \tPR 23941"}, {"sha": "6de20c8afd1e968386c275b41572e1afd10efeb5", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=e898620c39d4b0c6719eb678f8828577fcc4f2b7", "patch": "@@ -50,6 +50,8 @@ extern bool ia64_expand_movxf_movrf (enum machine_mode, rtx[]);\n extern rtx ia64_expand_compare (enum rtx_code, enum machine_mode);\n extern void ia64_expand_vecint_cmov (rtx[]);\n extern bool ia64_expand_vecint_minmax (enum rtx_code, enum machine_mode, rtx[]);\n+extern void ia64_expand_widen_sum (rtx[], bool);\n+extern void ia64_expand_dot_prod_v8qi (rtx[], bool);\n extern void ia64_expand_call (rtx, rtx, rtx, int);\n extern void ia64_split_call (rtx, rtx, rtx, rtx, rtx, int, int);\n extern void ia64_reload_gp (void);"}, {"sha": "4dafbd25b9c3726256f45b09df9c4b34955fc3a1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e898620c39d4b0c6719eb678f8828577fcc4f2b7", "patch": "@@ -1766,6 +1766,113 @@ ia64_expand_vecint_minmax (enum rtx_code code, enum machine_mode mode,\n   return true;\n }\n \n+/* Emit an integral vector widening sum operations.  */\n+\n+void\n+ia64_expand_widen_sum (rtx operands[3], bool unsignedp)\n+{\n+  rtx l, h, x, s;\n+  enum machine_mode wmode, mode;\n+  rtx (*unpack_l) (rtx, rtx, rtx);\n+  rtx (*unpack_h) (rtx, rtx, rtx);\n+  rtx (*plus) (rtx, rtx, rtx);\n+\n+  wmode = GET_MODE (operands[0]);\n+  mode = GET_MODE (operands[1]);\n+\n+  switch (mode)\n+    {\n+    case V8QImode:\n+      unpack_l = gen_unpack1_l;\n+      unpack_h = gen_unpack1_h;\n+      plus = gen_addv4hi3;\n+      break;\n+    case V4HImode:\n+      unpack_l = gen_unpack2_l;\n+      unpack_h = gen_unpack2_h;\n+      plus = gen_addv2si3;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Fill in x with the sign extension of each element in op1.  */\n+  if (unsignedp)\n+    x = CONST0_RTX (mode);\n+  else\n+    {\n+      bool neg;\n+\n+      x = gen_reg_rtx (mode);\n+\n+      neg = ia64_expand_vecint_compare (LT, mode, x, operands[1],\n+\t\t\t\t\tCONST0_RTX (mode));\n+      gcc_assert (!neg);\n+    }\n+\n+  l = gen_reg_rtx (wmode);\n+  h = gen_reg_rtx (wmode);\n+  s = gen_reg_rtx (wmode);\n+\n+  emit_insn (unpack_l (gen_lowpart (mode, l), operands[1], x));\n+  emit_insn (unpack_h (gen_lowpart (mode, h), operands[1], x));\n+  emit_insn (plus (s, l, operands[2]));\n+  emit_insn (plus (operands[0], h, s));\n+}\n+\n+/* Emit a signed or unsigned V8QI dot product operation.  */\n+\n+void\n+ia64_expand_dot_prod_v8qi (rtx operands[4], bool unsignedp)\n+{\n+  rtx l1, l2, h1, h2, x1, x2, p1, p2, p3, p4, s1, s2, s3;\n+\n+  /* Fill in x1 and x2 with the sign extension of each element.  */\n+  if (unsignedp)\n+    x1 = x2 = CONST0_RTX (V8QImode);\n+  else\n+    {\n+      bool neg;\n+\n+      x1 = gen_reg_rtx (V8QImode);\n+      x2 = gen_reg_rtx (V8QImode);\n+\n+      neg = ia64_expand_vecint_compare (LT, V8QImode, x1, operands[1],\n+\t\t\t\t\tCONST0_RTX (V8QImode));\n+      gcc_assert (!neg);\n+      neg = ia64_expand_vecint_compare (LT, V8QImode, x2, operands[2],\n+\t\t\t\t\tCONST0_RTX (V8QImode));\n+      gcc_assert (!neg);\n+    }\n+\n+  l1 = gen_reg_rtx (V4HImode);\n+  l2 = gen_reg_rtx (V4HImode);\n+  h1 = gen_reg_rtx (V4HImode);\n+  h2 = gen_reg_rtx (V4HImode);\n+\n+  emit_insn (gen_unpack1_l (gen_lowpart (V8QImode, l1), operands[1], x1));\n+  emit_insn (gen_unpack1_l (gen_lowpart (V8QImode, l2), operands[2], x2));\n+  emit_insn (gen_unpack1_h (gen_lowpart (V8QImode, h1), operands[1], x1));\n+  emit_insn (gen_unpack1_h (gen_lowpart (V8QImode, h2), operands[2], x2));\n+\n+  p1 = gen_reg_rtx (V2SImode);\n+  p2 = gen_reg_rtx (V2SImode);\n+  p3 = gen_reg_rtx (V2SImode);\n+  p4 = gen_reg_rtx (V2SImode);\n+  emit_insn (gen_pmpy2_r (p1, l1, l2));\n+  emit_insn (gen_pmpy2_l (p2, l1, l2));\n+  emit_insn (gen_pmpy2_r (p3, h1, h2));\n+  emit_insn (gen_pmpy2_l (p4, h1, h2));\n+\n+  s1 = gen_reg_rtx (V2SImode);\n+  s2 = gen_reg_rtx (V2SImode);\n+  s3 = gen_reg_rtx (V2SImode);\n+  emit_insn (gen_addv2si3 (s1, p1, p2));\n+  emit_insn (gen_addv2si3 (s2, p3, p4));\n+  emit_insn (gen_addv2si3 (s3, s1, operands[3]));\n+  emit_insn (gen_addv2si3 (operands[0], s2, s3));\n+}\n+\n /* Emit the appropriate sequence for a call.  */\n \n void"}, {"sha": "66295ad3228c31552d12769d2412cfd184f357ca", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 113, "deletions": 5, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898620c39d4b0c6719eb678f8828577fcc4f2b7/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=e898620c39d4b0c6719eb678f8828577fcc4f2b7", "patch": "@@ -212,6 +212,36 @@\n   \"pmpyshr2 %0 = %1, %2, 0\"\n   [(set_attr \"itanium_class\" \"mmmul\")])\n \n+(define_insn \"pmpy2_r\"\n+  [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n+\t(mult:V2SI\n+\t  (vec_select:V2SI\n+\t    (sign_extend:V4SI\n+\t      (match_operand:V4HI 1 \"gr_register_operand\" \"r\"))\n+\t    (parallel [(const_int 0) (const_int 2)]))\n+\t  (vec_select:V2SI\n+\t    (sign_extend:V4SI\n+\t      (match_operand:V4HI 2 \"gr_register_operand\" \"r\"))\n+\t    (parallel [(const_int 0) (const_int 2)]))))]\n+  \"\"\n+  \"pmpy2.r %0 = %1, %2\"\n+  [(set_attr \"itanium_class\" \"mmshf\")])\n+\n+(define_insn \"pmpy2_l\"\n+  [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n+\t(mult:V2SI\n+\t  (vec_select:V2SI\n+\t    (sign_extend:V4SI\n+\t      (match_operand:V4HI 1 \"gr_register_operand\" \"r\"))\n+\t    (parallel [(const_int 1) (const_int 3)]))\n+\t  (vec_select:V2SI\n+\t    (sign_extend:V4SI\n+\t      (match_operand:V4HI 2 \"gr_register_operand\" \"r\"))\n+\t    (parallel [(const_int 1) (const_int 3)]))))]\n+  \"\"\n+  \"pmpy2.l %0 = %1, %2\"\n+  [(set_attr \"itanium_class\" \"mmshf\")])\n+\n (define_expand \"umax<mode>3\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(umax:VECINT (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n@@ -331,6 +361,88 @@\n   operands[1] = gen_lowpart (DImode, operands[1]);\n })\n \n+(define_expand \"widen_usumv8qi3\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_sum (operands, true);\n+  DONE;\n+})\n+\n+(define_expand \"widen_usumv4hi3\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_sum (operands, true);\n+  DONE;\n+})\n+\n+(define_expand \"widen_ssumv8qi3\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_sum (operands, false);\n+  DONE;\n+})\n+\n+(define_expand \"widen_ssumv4hi3\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_widen_sum (operands, false);\n+  DONE;\n+})\n+\n+(define_expand \"udot_prodv8qi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_dot_prod_v8qi (operands, true);\n+  DONE;\n+})\n+\n+(define_expand \"sdot_prodv8qi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V8QI 2 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  ia64_expand_dot_prod_v8qi (operands, false);\n+  DONE;\n+})\n+\n+(define_expand \"sdot_prodv4hi\"\n+  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n+   (match_operand:V4HI 2 \"gr_register_operand\" \"\")\n+   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx l, r, t;\n+\n+  r = gen_reg_rtx (V2SImode);\n+  l = gen_reg_rtx (V2SImode);\n+  t = gen_reg_rtx (V2SImode);\n+\n+  emit_insn (gen_pmpy2_r (r, operands[1], operands[2]));\n+  emit_insn (gen_pmpy2_l (l, operands[1], operands[2]));\n+  emit_insn (gen_addv2si3 (t, r, operands[3]));\n+  emit_insn (gen_addv2si3 (operands[0], t, l));\n+  DONE;\n+})\n+\n (define_expand \"vcond<mode>\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(if_then_else:VECINT\n@@ -717,15 +829,11 @@\n ;; padd.uus\n ;; pavg\n ;; pavgsub\n-;; pmpy\n ;; pmpyshr, general form\n ;; psad\n ;; pshladd\n ;; pshradd\n ;; psub.uus\n-;; vec_set<mode>\n-;; vec_extract<mode>\n-;; vec_init<mode>\n \f\n ;; Floating point vector operations\n \n@@ -947,7 +1055,7 @@\n   \"fpmin %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n-(define_expand \"reduc_plus_v2sf\"\n+(define_expand \"reduc_splus_v2sf\"\n   [(match_operand:V2SF 0 \"fr_register_operand\" \"\")\n    (match_operand:V2SF 1 \"fr_register_operand\" \"\")]\n   \"\""}]}