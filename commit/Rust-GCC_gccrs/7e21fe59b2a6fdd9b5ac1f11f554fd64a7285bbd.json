{"sha": "7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMWZlNTliMmE2ZmRkOWI1YWMxZjExZjU1NGZkNjRhNzI4NWJiZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-12T17:13:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-12T17:13:24Z"}, "message": "Warning fixes:\n\n        * constants.c (find_class_or_string_constant): Cast variable `j'\n        to a `jword' when comparing against one.\n        * expr.c (java_lang_expand_expr): Remove unused variables\n        `has_finally_p' and `op0'.\n        * gjavah.c (print_field_info): Cast a value to jint when comparing\n        against one.  Likewise for a jlong.\n        (add_namelet): Likewise cast a `sizeof' to an int when comparing\n        against a signed quantity.\n        * jcf-dump.c (print_signature_type): Remove unused variable `digit'.\n        (print_signature): Don't needlessly dereference variable `str'\n        * jcf-reader.c (get_attribute): Mark variables `max_stack' and\n        `max_locals' with ATTRIBUTE_UNUSED.\n        (jcf_parse_class): Likewise for variable `index'.\n        * parse.h (reverse_jdep_list): Remove static prototype.\n        * parse.y (build_jump_to_finally): Remove prototype and definition.\n        (reverse_jdep_list): Add static prototype.\n        * typeck.c (convert_ieee_real_to_integer): Remove unused variables\n        `assignment' and `expr_decl'.\n        * verify.c (verify_jvm_instructions): Remove unused label `bad_ldc'.\n\nFrom-SVN: r25731", "tree": {"sha": "46e462e2cad9662691fedffe68c7e8bd046c4eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e462e2cad9662691fedffe68c7e8bd046c4eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/comments", "author": null, "committer": null, "parents": [{"sha": "6e0f130b0ef9c162289989db9d5906458e0e979e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0f130b0ef9c162289989db9d5906458e0e979e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0f130b0ef9c162289989db9d5906458e0e979e"}], "stats": {"total": 137, "additions": 47, "deletions": 90}, "files": [{"sha": "f58292590578a246df681a9c870844c32e4e5203", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -1,3 +1,33 @@\n+Fri Mar 12 19:42:55 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* constants.c (find_class_or_string_constant): Cast variable `j'\n+ \tto a `jword' when comparing against one.\n+\n+\t* expr.c (java_lang_expand_expr): Remove unused variables\n+\t`has_finally_p' and `op0'.\n+\n+\t* gjavah.c (print_field_info): Cast a value to jint when comparing\n+\tagainst one.  Likewise for a jlong.\n+\t(add_namelet): Likewise cast a `sizeof' to an int when comparing\n+\tagainst a signed quantity.\n+\t\n+\t* jcf-dump.c (print_signature_type): Remove unused variable `digit'.\n+\t(print_signature): Don't needlessly dereference variable `str'\n+\n+\t* jcf-reader.c (get_attribute): Mark variables `max_stack' and\n+\t`max_locals' with ATTRIBUTE_UNUSED.\n+\t(jcf_parse_class): Likewise for variable `index'.\n+\n+\t* parse.h (reverse_jdep_list): Remove static prototype.\n+\n+\t* parse.y (build_jump_to_finally): Remove prototype and definition.\n+\t(reverse_jdep_list): Add static prototype.\n+\n+\t* typeck.c (convert_ieee_real_to_integer): Remove unused variables\n+\t`assignment' and `expr_decl'.\n+\n+\t* verify.c (verify_jvm_instructions): Remove unused label `bad_ldc'.\n+\n 1999-03-12  Andrew Haley  <aph@cygnus.com>\n \n \t* jcf-path.c (add_entry): alloca len+2 rather than len+1 bytes;"}, {"sha": "81ff7adc35eb8b9e51fcb8fc637d6aa272eccd80", "filename": "gcc/java/constants.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -123,7 +123,7 @@ find_class_or_string_constant (cpool, tag, name)\n   int i;\n   for (i = cpool->count;  --i > 0; )\n     {\n-      if (cpool->tags[i] == tag && cpool->data[i] == j)\n+      if (cpool->tags[i] == tag && cpool->data[i] == (jword) j)\n \treturn i;\n     }\n   i = cpool->count;"}, {"sha": "15ac0c2b52e9f3a2a341bb7af43a7a98d1348368", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -1750,8 +1750,6 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n      enum expand_modifier modifier;\n {\n   tree current;\n-  int has_finally_p;\n-  rtx op0;\n \n   switch (TREE_CODE (exp))\n     {"}, {"sha": "9b32836278a0dc57a9a057a698b6f909de14badf", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -335,7 +335,7 @@ DEFUN(print_field_info, (stream, jcf, name_index, sig_index, flags),\n \t\tnum = JPOOL_INT (jcf, current_field_value);\n \t\t/* We single out the most negative number to print\n \t\t   specially.  This avoids later warnings from g++.  */\n-\t\tif (num == 0x80000000)\n+\t\tif (num == (jint) 0x80000000)\n \t\t  {\n \t\t    most_negative = 1;\n \t\t    ++num;\n@@ -354,7 +354,7 @@ DEFUN(print_field_info, (stream, jcf, name_index, sig_index, flags),\n \t\tnum = JPOOL_LONG (jcf, current_field_value);\n \t\t/* We single out the most negative number to print\n                    specially..  This avoids later warnings from g++.  */\n-\t\tif (num == 0x8000000000000000LL)\n+\t\tif (num == (jlong) 0x8000000000000000LL)\n \t\t  {\n \t\t    most_negative = 1;\n \t\t    ++num;\n@@ -920,11 +920,11 @@ add_namelet (name, name_limit, parent)\n #define JAVALANG \"java/lang/\"\n #define JAVAIO \"java/io/\"\n #define JAVAUTIL \"java/util/\"\n-      if ((name_limit - name >= sizeof (JAVALANG) - 1\n+      if ((name_limit - name >= (int) sizeof (JAVALANG) - 1\n \t   && ! strncmp (name, JAVALANG, sizeof (JAVALANG) - 1))\n-\t  || (name_limit - name >= sizeof (JAVAUTIL) - 1\n+\t  || (name_limit - name >= (int) sizeof (JAVAUTIL) - 1\n \t      && ! strncmp (name, JAVAUTIL, sizeof (JAVAUTIL) - 1))\n-\t  || (name_limit - name >= sizeof (JAVAIO) - 1\n+\t  || (name_limit - name >= (int) sizeof (JAVAIO) - 1\n \t      && ! strncmp (name, JAVAIO, sizeof (JAVAIO) - 1)))\n \treturn;\n     }"}, {"sha": "b48c0b43c63a11995c3cec45e6ebb0121dc7517f", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -520,8 +520,7 @@ DEFUN(print_signature_type, (stream, ptr, limit),\n       array_size = -1;\n       for ((*ptr)++; (*ptr) < limit && ISDIGIT (**ptr); (*ptr)++)\n \t{\n-\t  int digit = \n-\t    array_size = (array_size < 0 ? 0 : 10 * array_size) + *(*ptr) - '0';\n+\t  array_size = (array_size < 0 ? 0 : 10 * array_size) + *(*ptr) - '0';\n \t}\n       print_signature_type (stream, ptr, limit);\n       if (array_size == -1)\n@@ -592,7 +591,7 @@ DEFUN(print_signature, (stream, jcf, signature_index, int options),\n \t    }\n \t  if (options & PRINT_SIGNATURE_ARGS_ONLY)\n \t    {\n-\t      *str++;\n+\t      str++;\n \t      fputc ('(', stream);\n \t      while (str < limit && *str != ')')\n \t\t{"}, {"sha": "accb1a117067ecbd578ca2a122ba11dd8ecdea00", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -72,8 +72,8 @@ DEFUN(get_attribute, (jcf),\n   if (name_length == 4 && memcmp (name_data, \"Code\", 4) == 0)\n     {\n       uint16 j;\n-      uint16 max_stack = JCF_readu2 (jcf);\n-      uint16 max_locals = JCF_readu2 (jcf);\n+      uint16 max_stack ATTRIBUTE_UNUSED = JCF_readu2 (jcf);\n+      uint16 max_locals ATTRIBUTE_UNUSED = JCF_readu2 (jcf);\n       uint32 code_length = JCF_readu4 (jcf);\n       uint16 exception_table_length, attributes_count;\n       if (code_length + 12 > attribute_length)\n@@ -242,7 +242,7 @@ DEFUN(jcf_parse_class, (jcf),\n   /* Read interfaces. */\n   for (i = 0; i < interfaces_count; i++)\n     {\n-      uint16 index = JCF_readu2 (jcf);\n+      uint16 index ATTRIBUTE_UNUSED = JCF_readu2 (jcf);\n #ifdef HANDLE_CLASS_INTERFACE\n       HANDLE_CLASS_INTERFACE (index);\n #endif"}, {"sha": "485ed0e96654583a4897eaa1e1d8deb2e7c3f924", "filename": "gcc/java/parse.c", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -5,13 +5,6 @@\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n-#define yyparse java_parse\n-#define yylex java_lex\n-#define yyerror java_error\n-#define yylval java_lval\n-#define yychar java_char\n-#define yydebug java_debug\n-#define yynerrs java_nerrs\n #define\tPLUS_TK\t258\n #define\tMINUS_TK\t259\n #define\tMULT_TK\t260\n@@ -275,7 +268,6 @@ static tree string_constant_concatenation PROTO ((tree, tree));\n static tree build_string_concatenation PROTO ((tree, tree));\n static tree patch_string_cst PROTO ((tree));\n static tree patch_string PROTO ((tree));\n-static tree build_jump_to_finally PROTO ((tree, tree, tree, tree));\n static tree build_try_statement PROTO ((int, tree, tree));\n static tree build_try_finally_statement PROTO ((int, tree, tree));\n static tree patch_try_statement PROTO ((tree));\n@@ -315,6 +307,7 @@ static char *purify_type_name PROTO ((char *));\n static tree patch_initialized_static_field PROTO ((tree));\n static tree fold_constant_for_init PROTO ((tree, tree));\n static tree strip_out_static_field_access_decl PROTO ((tree));\n+static jdeplist *reverse_jdep_list PROTO ((struct parser_ctxt *));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -2217,7 +2210,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/misc/bison.simple\"\n+#line 3 \"/usr/local/gnu/share/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2234,7 +2227,7 @@ static const short yycheck[] = {     3,\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n@@ -2410,7 +2403,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/share/misc/bison.simple\"\n+#line 196 \"/usr/local/gnu/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -4675,7 +4668,7 @@ case 493:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/share/misc/bison.simple\"\n+#line 498 \"/usr/local/gnu/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -13313,36 +13306,6 @@ patch_switch_statement (node)\n \n /* 14.18 The try statement */\n \n-/* Wrap BLOCK around a LABELED_BLOCK, set DECL to the newly generated\n-   exit labeld and issue a jump to FINALLY_LABEL:\n-     \n-   LABELED_BLOCK\n-     BLOCK\n-       <orignal_statments>\n-       DECL = &LABEL_DECL\n-       GOTO_EXPR\n-         FINALLY_LABEL\n-     LABEL_DECL */\n-\n-static tree\n-build_jump_to_finally (block, decl, finally_label, type)\n-     tree block, decl, finally_label, type;\n-{\n-  tree stmt;\n-  tree new_block = build (LABELED_BLOCK_EXPR, type,\n-\t\t\t  create_label_decl (generate_name ()), block);\n-\n-  stmt = build (MODIFY_EXPR, void_type_node, decl,\n-\t\tbuild_address_of (LABELED_BLOCK_LABEL (new_block)));\n-  TREE_SIDE_EFFECTS (stmt) = 1;\n-  CAN_COMPLETE_NORMALLY (stmt) = 1;\n-  add_stmt_to_block (block, type, stmt);\n-  stmt = build (GOTO_EXPR, void_type_node, finally_label);\n-  TREE_SIDE_EFFECTS (stmt) = 1;\n-  add_stmt_to_block (block, type, stmt);\n-  return new_block;\n-}\n-\n static tree\n build_try_statement (location, try_block, catches)\n      int location;"}, {"sha": "f917127577bf936c6dfb65d9e24a720468d48148", "filename": "gcc/java/parse.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -392,7 +392,6 @@ typedef struct _jdeplist {\n   jdep *last;\n   struct _jdeplist *next;\n } jdeplist;\n-static jdeplist *reverse_jdep_list ();\n \n #endif /* JC1_LITE */\n "}, {"sha": "ad6122b8fd6502ac35f578fd959f12780721425d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -199,7 +199,6 @@ static tree string_constant_concatenation PROTO ((tree, tree));\n static tree build_string_concatenation PROTO ((tree, tree));\n static tree patch_string_cst PROTO ((tree));\n static tree patch_string PROTO ((tree));\n-static tree build_jump_to_finally PROTO ((tree, tree, tree, tree));\n static tree build_try_statement PROTO ((int, tree, tree));\n static tree build_try_finally_statement PROTO ((int, tree, tree));\n static tree patch_try_statement PROTO ((tree));\n@@ -239,6 +238,7 @@ static char *purify_type_name PROTO ((char *));\n static tree patch_initialized_static_field PROTO ((tree));\n static tree fold_constant_for_init PROTO ((tree, tree));\n static tree strip_out_static_field_access_decl PROTO ((tree));\n+static jdeplist *reverse_jdep_list PROTO ((struct parser_ctxt *));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -10711,36 +10711,6 @@ patch_switch_statement (node)\n \n /* 14.18 The try statement */\n \n-/* Wrap BLOCK around a LABELED_BLOCK, set DECL to the newly generated\n-   exit labeld and issue a jump to FINALLY_LABEL:\n-     \n-   LABELED_BLOCK\n-     BLOCK\n-       <orignal_statments>\n-       DECL = &LABEL_DECL\n-       GOTO_EXPR\n-         FINALLY_LABEL\n-     LABEL_DECL */\n-\n-static tree\n-build_jump_to_finally (block, decl, finally_label, type)\n-     tree block, decl, finally_label, type;\n-{\n-  tree stmt;\n-  tree new_block = build (LABELED_BLOCK_EXPR, type,\n-\t\t\t  create_label_decl (generate_name ()), block);\n-\n-  stmt = build (MODIFY_EXPR, void_type_node, decl,\n-\t\tbuild_address_of (LABELED_BLOCK_LABEL (new_block)));\n-  TREE_SIDE_EFFECTS (stmt) = 1;\n-  CAN_COMPLETE_NORMALLY (stmt) = 1;\n-  add_stmt_to_block (block, type, stmt);\n-  stmt = build (GOTO_EXPR, void_type_node, finally_label);\n-  TREE_SIDE_EFFECTS (stmt) = 1;\n-  add_stmt_to_block (block, type, stmt);\n-  return new_block;\n-}\n-\n static tree\n build_try_statement (location, try_block, catches)\n      int location;"}, {"sha": "ad0ba4cda87d233769f553e898f9e6bacc4d9ead", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -66,7 +66,6 @@ static tree\n convert_ieee_real_to_integer (type, expr)\n      tree type, expr;\n {\n-  tree assignment, expr_decl;\n   expr = save_expr (expr);\n \n   return build (COND_EXPR, type, "}, {"sha": "4b6ffffae4426fa8f232ad56697337b890cb1ac6", "filename": "gcc/java/verify.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=7e21fe59b2a6fdd9b5ac1f11f554fd64a7285bbd", "patch": "@@ -786,7 +786,6 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t\tbreak;\n \t      /* ... else fall through ... */\n \t    default:\n-\t    bad_ldc:\n \t      VERIFICATION_ERROR (\"bad constant pool tag in ldc\");\n \t    }\n \t  if (type == int_type_node)"}]}