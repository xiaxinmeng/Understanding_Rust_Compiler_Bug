{"sha": "46097c763954059fdbd8fa5859c3a6a744096d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwOTdjNzYzOTU0MDU5ZmRiZDhmYTU4NTljM2E2YTc0NDA5NmQ4Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-10-30T08:50:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-30T08:50:31Z"}, "message": "re PR c/16666 (dremf type conflict)\n\n\tPR c/16666\n\t* c-decl.c (start_function): Don't check for DECL_BUILT_IN when\n\tdetermining whether to copy parameter types from a previous\n\tprototype declaration.\n\ntestsuite:\n\t* gcc.dg/dremf-type-compat-1.c, gcc.dg/dremf-type-compat-2.c,\n\tgcc.dg/dremf-type-compat-3.c, gcc.dg/dremf-type-compat-4.c,\n\tgcc.dg/old-style-prom-1.c, gcc.dg/old-style-prom-2.c,\n\tgcc.dg/old-style-prom-3.c: New tests.\n\nFrom-SVN: r89883", "tree": {"sha": "f14d7c8e29c272504247e1d4eb33a70e85877d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14d7c8e29c272504247e1d4eb33a70e85877d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46097c763954059fdbd8fa5859c3a6a744096d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46097c763954059fdbd8fa5859c3a6a744096d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46097c763954059fdbd8fa5859c3a6a744096d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46097c763954059fdbd8fa5859c3a6a744096d8b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "514a3b1100835a73bc91d2bfcc897929a792e85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514a3b1100835a73bc91d2bfcc897929a792e85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514a3b1100835a73bc91d2bfcc897929a792e85b"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "e255638479b12e3867ebfc8cecad9642d692bbbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -1,3 +1,10 @@\n+2004-10-30  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/16666\n+\t* c-decl.c (start_function): Don't check for DECL_BUILT_IN when\n+\tdetermining whether to copy parameter types from a previous\n+\tprototype declaration.\n+\n 2004-10-29  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/17581"}, {"sha": "839b5f3b2ab8f3ff5635d5fdf0b9c784d6e8db76", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -5698,11 +5698,9 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   DECL_INITIAL (decl1) = error_mark_node;\n \n   /* If this definition isn't a prototype and we had a prototype declaration\n-     before, copy the arg type info from that prototype.\n-     But not if what we had before was a builtin function.  */\n+     before, copy the arg type info from that prototype.  */\n   old_decl = lookup_name_in_scope (DECL_NAME (decl1), current_scope);\n   if (old_decl != 0 && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n-      && !DECL_BUILT_IN (old_decl)\n       && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n \t\t    TREE_TYPE (TREE_TYPE (old_decl)))\n       && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)"}, {"sha": "7ccc30d9bf5042eede540ecf396ef2c1101fa2a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -1,3 +1,11 @@\n+2004-10-30  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/16666\n+\t* gcc.dg/dremf-type-compat-1.c, gcc.dg/dremf-type-compat-2.c,\n+\tgcc.dg/dremf-type-compat-3.c, gcc.dg/dremf-type-compat-4.c,\n+\tgcc.dg/old-style-prom-1.c, gcc.dg/old-style-prom-2.c,\n+\tgcc.dg/old-style-prom-3.c: New tests.\n+\n 2004-10-30  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* gcc.dg/bf-ms-attrib.c: Add protototype for abort."}, {"sha": "79c55ef840c54e83d8645c99129b8b5e5a34fe54", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-1.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,16 @@\n+/* Test for bogus diagnostics for dremf definition.  Although this\n+   definition is formally incorrect in ISO C, a GNU extension permits\n+   a prototype followed by unpromoted types in a function definition,\n+   so it should be permitted when the function is built in.  Bug\n+   16666.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+float dremf (float, float);\n+\n+float\n+dremf (x, y)\n+     float x, y;\n+{\n+  return x + y;\n+}"}, {"sha": "101da65cd442d03b638394ef98a73f0879aca09d", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-2.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,18 @@\n+/* Test for bogus diagnostics for dremf definition.  Although this\n+   definition is formally incorrect in ISO C, a GNU extension permits\n+   a prototype followed by unpromoted types in a function definition,\n+   so it should be permitted when the function is built in.  Bug\n+   16666.  Test with -pedantic, where the problem should still be\n+   diagnosed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+float dremf (float, float); /* { dg-warning \"warning: prototype declaration\" } */\n+\n+float\n+dremf (x, y)\n+     float x;\n+     float y;\n+{ /* { dg-warning \"warning: promoted argument '.' doesn't match prototype\" } */\n+  return x + y;\n+}"}, {"sha": "ff0f5098ee362849864e6049f97d35f0b1b708f3", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-3.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,18 @@\n+/* Test for bogus diagnostics for dremf definition.  Although this\n+   definition is formally incorrect in ISO C, a GNU extension permits\n+   a prototype followed by unpromoted types in a function definition,\n+   so it should be permitted when the function is built in.  Bug\n+   16666.  Test with -pedantic-errors, where the problem should still\n+   be diagnosed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+float dremf (float, float); /* { dg-error \"error: prototype declaration\" } */\n+\n+float\n+dremf (x, y)\n+     float x;\n+     float y;\n+{ /* { dg-error \"error: promoted argument '.' doesn't match prototype\" } */\n+  return x + y;\n+}"}, {"sha": "6355fadf7c670fa75647871ad09553c844a91850", "filename": "gcc/testsuite/gcc.dg/dremf-type-compat-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdremf-type-compat-4.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,13 @@\n+/* Test for bogus diagnostics for dremf definition, as in bug 16666.\n+   The GNU extension permitting a prototype to override the promotion\n+   of old-style parameter declarations should only apply when the\n+   prototype is visible, not for a built-in prototype.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+float\n+dremf(x, y)\n+     float x, y; /* { dg-warning \"warning: conflicting types for built-in function 'dremf'\" } */\n+{\n+  return x + y;\n+}"}, {"sha": "165ff982708675b728e7842554d0519b3bcad963", "filename": "gcc/testsuite/gcc.dg/old-style-prom-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-1.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,13 @@\n+/* Test for prototype followed by old-style definition, as in\n+   dremf-type-compat-1.c but with a non-built-in function.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+float f (float, float);\n+\n+float\n+f (x, y)\n+     float x, y;\n+{\n+  return x + y;\n+}"}, {"sha": "5f4d877624e8eb0fcfab9812acd9c6d8094926a1", "filename": "gcc/testsuite/gcc.dg/old-style-prom-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-2.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,14 @@\n+/* Test for prototype followed by old-style definition, as in\n+   dremf-type-compat-2.c but with a non-built-in function.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+float f (float, float); /* { dg-warning \"warning: prototype declaration\" } */\n+\n+float\n+f (x, y)\n+     float x;\n+     float y;\n+{ /* { dg-warning \"warning: promoted argument '.' doesn't match prototype\" } */\n+  return x + y;\n+}"}, {"sha": "19bbc8c8d560007cc902391f4fb9c22168e4d303", "filename": "gcc/testsuite/gcc.dg/old-style-prom-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46097c763954059fdbd8fa5859c3a6a744096d8b/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-prom-3.c?ref=46097c763954059fdbd8fa5859c3a6a744096d8b", "patch": "@@ -0,0 +1,14 @@\n+/* Test for prototype followed by old-style definition, as in\n+   dremf-type-compat-3.c but with a non-built-in function.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+float f (float, float); /* { dg-error \"error: prototype declaration\" } */\n+\n+float\n+f (x, y)\n+     float x;\n+     float y;\n+{ /* { dg-error \"error: promoted argument '.' doesn't match prototype\" } */\n+  return x + y;\n+}"}]}