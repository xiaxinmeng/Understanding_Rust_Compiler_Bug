{"sha": "a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzMDY4YjZkZDQ5ZjYyMGU4NWM5NWYxZGZlZDhmN2Q3NDczZTE3Yw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-09-03T01:00:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-03T01:00:04Z"}, "message": "diagnostic.c (error_at): New.\n\n        * diagnostic.c (error_at): New.\n        * toplev.h (error_at): New prototype.\n        * c-typeck.c (build_array_ref): Call error_at instead of error.\n        Pass location to pedwarn.\ncp/\n        * typeck.c (build_array_ref): Use new location argument.\n        * class.c (build_vtbl_ref_1): Pass location to build_array_ref.\n        * call.c (build_new_op): Same.\n        * decl2.c (grok_array_decl): Same.\n        * cp-tree.h (build_array_ref): Add location argument to prototype.\n\nFrom-SVN: r139924", "tree": {"sha": "e8cf01ea25ea102fb71086ca128988be07714307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cf01ea25ea102fb71086ca128988be07714307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aeb76a25a759aac503037bad8f1dc07b8dd1e9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb76a25a759aac503037bad8f1dc07b8dd1e9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb76a25a759aac503037bad8f1dc07b8dd1e9a7"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "ee3bf7d8644305f0f9188bbd52878c628c22e1f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -1,3 +1,10 @@\n+2008-09-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* diagnostic.c (error_at): New.\n+\t* toplev.h (error_at): New prototype.\n+\t* c-typeck.c (build_array_ref): Call error_at instead of error.\n+\tPass location to pedwarn.\n+\n 2008-09-02  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* sel-sched.c (sel_hard_regno_rename_ok): Mark arguments unused."}, {"sha": "e9f3fc75b5d1455da04df0a1a7b50e116e62f8c5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -2061,7 +2061,7 @@ build_array_ref (tree array, tree index, location_t loc)\n       if (TREE_CODE (TREE_TYPE (index)) != ARRAY_TYPE\n \t  && TREE_CODE (TREE_TYPE (index)) != POINTER_TYPE)\n \t{\n-\t  error (\"subscripted value is neither array nor pointer\");\n+\t  error_at (loc, \"subscripted value is neither array nor pointer\");\n \t  return error_mark_node;\n \t}\n       temp = array;\n@@ -2072,13 +2072,13 @@ build_array_ref (tree array, tree index, location_t loc)\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (index)))\n     {\n-      error (\"array subscript is not an integer\");\n+      error_at (loc, \"array subscript is not an integer\");\n       return error_mark_node;\n     }\n \n   if (TREE_CODE (TREE_TYPE (TREE_TYPE (array))) == FUNCTION_TYPE)\n     {\n-      error (\"subscripted value is pointer to function\");\n+      error_at (loc, \"subscripted value is pointer to function\");\n       return error_mark_node;\n     }\n \n@@ -2125,10 +2125,10 @@ build_array_ref (tree array, tree index, location_t loc)\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && C_DECL_REGISTER (foo))\n-\t    pedwarn (input_location, OPT_pedantic, \n+\t    pedwarn (loc, OPT_pedantic, \n \t\t     \"ISO C forbids subscripting %<register%> array\");\n \t  else if (!flag_isoc99 && !lvalue_p (foo))\n-\t    pedwarn (input_location, OPT_pedantic, \n+\t    pedwarn (loc, OPT_pedantic, \n \t\t     \"ISO C90 forbids subscripting non-lvalue array\");\n \t}\n "}, {"sha": "c5ccb40b402559c47909ca98cb626c79d36b61d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -1,3 +1,11 @@\n+2008-09-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* typeck.c (build_array_ref): Use new location argument.\n+\t* class.c (build_vtbl_ref_1): Pass location to build_array_ref.\n+\t* call.c (build_new_op): Same.\n+\t* decl2.c (grok_array_decl): Same.\n+\t* cp-tree.h (build_array_ref): Add location argument to prototype.\n+\n 2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* typeck.c (build_x_indirect_ref): Add location argument."}, {"sha": "571f36fb70d2ed9084ec7990965f7b678990fc13", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -4214,7 +4214,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n       return cp_build_unary_op (code, arg1, candidates != 0, complain);\n \n     case ARRAY_REF:\n-      return build_array_ref (arg1, arg2);\n+      return build_array_ref (arg1, arg2, input_location);\n \n     case COND_EXPR:\n       return build_conditional_expr (arg1, arg2, arg3, complain);"}, {"sha": "4f69c7e776ac788b1e1a2ed259faeee429eb1784", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -627,7 +627,7 @@ build_vtbl_ref_1 (tree instance, tree idx)\n \n   assemble_external (vtbl);\n \n-  aref = build_array_ref (vtbl, idx);\n+  aref = build_array_ref (vtbl, idx, input_location);\n   TREE_CONSTANT (aref) |= TREE_CONSTANT (vtbl) && TREE_CONSTANT (idx);\n \n   return aref;"}, {"sha": "09b3b2f40338365bf45e67d109681d9d1e596321", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -4911,7 +4911,7 @@ extern tree build_x_indirect_ref\t\t(tree, const char *,\n                                                  tsubst_flags_t);\n extern tree cp_build_indirect_ref\t\t(tree, const char *,\n                                                  tsubst_flags_t);\n-extern tree build_array_ref\t\t\t(tree, tree);\n+extern tree build_array_ref\t\t\t(tree, tree, location_t);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree);\n extern tree cp_build_function_call              (tree, tree, tsubst_flags_t);\n extern tree build_x_binary_op\t\t\t(enum tree_code, tree,"}, {"sha": "0e56c070456f8bc92fe7f31a269c3fd5c192f712", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -354,7 +354,7 @@ grok_array_decl (tree array_expr, tree index_exp)\n       if (array_expr == error_mark_node || index_exp == error_mark_node)\n \terror (\"ambiguous conversion for array subscript\");\n \n-      expr = build_array_ref (array_expr, index_exp);\n+      expr = build_array_ref (array_expr, index_exp, input_location);\n     }\n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (ARRAY_REF, expr, orig_array_expr, orig_index_exp,"}, {"sha": "9de51c53c16a6c38bfaa24c99f4e2b58215d1d35", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -2506,14 +2506,18 @@ cp_build_indirect_ref (tree ptr, const char *errorstring,\n \n    If INDEX is of some user-defined type, it must be converted to\n    integer type.  Otherwise, to make a compatible PLUS_EXPR, it\n-   will inherit the type of the array, which will be some pointer type.  */\n+   will inherit the type of the array, which will be some pointer type.\n+   \n+   LOC is the location to use in building the array reference.  */\n \n tree\n-build_array_ref (tree array, tree idx)\n+build_array_ref (tree array, tree idx, location_t loc)\n {\n+  tree ret;\n+\n   if (idx == 0)\n     {\n-      error (\"subscript missing in array reference\");\n+      error_at (loc, \"subscript missing in array reference\");\n       return error_mark_node;\n     }\n \n@@ -2527,17 +2531,21 @@ build_array_ref (tree array, tree idx)\n     {\n     case COMPOUND_EXPR:\n       {\n-\ttree value = build_array_ref (TREE_OPERAND (array, 1), idx);\n-\treturn build2 (COMPOUND_EXPR, TREE_TYPE (value),\n-\t\t       TREE_OPERAND (array, 0), value);\n+\ttree value = build_array_ref (TREE_OPERAND (array, 1), idx, loc);\n+\tret = build2 (COMPOUND_EXPR, TREE_TYPE (value),\n+\t\t      TREE_OPERAND (array, 0), value);\n+\tSET_EXPR_LOCATION (ret, loc);\n+\treturn ret;\n       }\n \n     case COND_EXPR:\n-      return build_conditional_expr\n-\t(TREE_OPERAND (array, 0),\n-\t build_array_ref (TREE_OPERAND (array, 1), idx),\n-\t build_array_ref (TREE_OPERAND (array, 2), idx),\n-         tf_warning_or_error);\n+      ret = build_conditional_expr\n+\t      (TREE_OPERAND (array, 0),\n+\t      build_array_ref (TREE_OPERAND (array, 1), idx, loc),\n+\t      build_array_ref (TREE_OPERAND (array, 2), idx, loc),\n+\t      tf_warning_or_error);\n+      SET_EXPR_LOCATION (ret, loc);\n+      return ret;\n \n     default:\n       break;\n@@ -2551,7 +2559,7 @@ build_array_ref (tree array, tree idx)\n \n       if (!INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (idx)))\n \t{\n-\t  error (\"array subscript is not an integer\");\n+\t  error_at (loc, \"array subscript is not an integer\");\n \t  return error_mark_node;\n \t}\n \n@@ -2588,7 +2596,8 @@ build_array_ref (tree array, tree idx)\n \t}\n \n       if (!lvalue_p (array))\n-\tpedwarn (input_location, OPT_pedantic, \"ISO C++ forbids subscripting non-lvalue array\");\n+\tpedwarn (loc, OPT_pedantic, \n+\t         \"ISO C++ forbids subscripting non-lvalue array\");\n \n       /* Note in C++ it is valid to subscript a `register' array, since\n \t it is valid to take the address of something with that\n@@ -2599,7 +2608,8 @@ build_array_ref (tree array, tree idx)\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n-\t    warning (OPT_Wextra, \"subscripting array declared %<register%>\");\n+\t    warning_at (loc, OPT_Wextra,\n+\t\t\t\"subscripting array declared %<register%>\");\n \t}\n \n       type = TREE_TYPE (TREE_TYPE (array));\n@@ -2612,7 +2622,9 @@ build_array_ref (tree array, tree idx)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_SIDE_EFFECTS (array));\n       TREE_THIS_VOLATILE (rval)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_THIS_VOLATILE (array));\n-      return require_complete_type (fold_if_not_in_template (rval));\n+      ret = require_complete_type (fold_if_not_in_template (rval));\n+      SET_EXPR_LOCATION (ret, loc);\n+      return ret;\n     }\n \n   {\n@@ -2632,21 +2644,23 @@ build_array_ref (tree array, tree idx)\n \n     if (TREE_CODE (TREE_TYPE (ar)) != POINTER_TYPE)\n       {\n-\terror (\"subscripted value is neither array nor pointer\");\n+\terror_at (loc, \"subscripted value is neither array nor pointer\");\n \treturn error_mark_node;\n       }\n     if (TREE_CODE (TREE_TYPE (ind)) != INTEGER_TYPE)\n       {\n-\terror (\"array subscript is not an integer\");\n+\terror_at (loc, \"array subscript is not an integer\");\n \treturn error_mark_node;\n       }\n \n     warn_array_subscript_with_type_char (idx);\n \n-    return cp_build_indirect_ref (cp_build_binary_op (PLUS_EXPR, ar, ind,\n-\t\t\t\t\t\t   tf_warning_or_error),\n-                                  \"array indexing\",\n-                                  tf_warning_or_error);\n+    ret = cp_build_indirect_ref (cp_build_binary_op (PLUS_EXPR, ar, ind,\n+\t\t\t\t\t\t     tf_warning_or_error),\n+                                 \"array indexing\",\n+                                 tf_warning_or_error);\n+    protected_set_expr_location (ret, loc);\n+    return ret;\n   }\n }\n \f"}, {"sha": "f323f363ae59dfec1076c44901a5c30534fbf548", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -598,6 +598,19 @@ error (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* Same as ebove, but use location LOC instead of input_location.  */\n+void\n+error_at (location_t loc, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, loc, DK_ERROR);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n /* \"Sorry, not implemented.\"  Use for a language feature which is\n    required by the relevant specification but not implemented by GCC.\n    An object file will not be produced.  */"}, {"sha": "552ed3367d2f0939755b42bfb7b87f69482ab95d", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63068b6dd49f620e85c95f1dfed8f7d7473e17c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "patch": "@@ -61,6 +61,7 @@ extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the second parameter.  */"}]}