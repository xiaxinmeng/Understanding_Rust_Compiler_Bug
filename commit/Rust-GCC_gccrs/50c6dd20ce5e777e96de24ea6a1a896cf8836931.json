{"sha": "50c6dd20ce5e777e96de24ea6a1a896cf8836931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjNmRkMjBjZTVlNzc3ZTk2ZGUyNGVhNmExYTg5NmNmODgzNjkzMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-09-25T06:59:37Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-09-25T06:59:37Z"}, "message": "This fixes a fallout that actually goes back to 5.0 but went unnoticed.\n\nThe costs for movt and movrt type of insns were not correctly reported\nand ifcvt thus made some bad choices for SH.  A new cset_zero pattern\nvariant is also required to fix the matching for some recent changes\nin the middle end.\n \ngcc/\n\tPR target/51244\n\t* config/sh/sh.c (sh_movt_set_dest, sh_movrt_set_dest): Add overloads.\n\t(sh_rtx_costs): Handle SET of movt and movrt patterns.\n\t* cnofig/sh/sh-protos.h (sh_movt_set_dest, sh_movrt_set_dest): Forward\n\tdeclare new overloads.\n\t* config/sh/sh.md (*cset_zero): Add variant that takes a treg_set_expr\n\toperand.\n\ngcc/testsuite/\n\tPR target/51244\n\t* gcc.target/sh/pr51244-11.c: Add more detailed expected insn matching.\n\nFrom-SVN: r240471", "tree": {"sha": "69658dc6948bcfd9cfb05d59758237eca0527549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69658dc6948bcfd9cfb05d59758237eca0527549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50c6dd20ce5e777e96de24ea6a1a896cf8836931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c6dd20ce5e777e96de24ea6a1a896cf8836931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c6dd20ce5e777e96de24ea6a1a896cf8836931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c6dd20ce5e777e96de24ea6a1a896cf8836931/comments", "author": null, "committer": null, "parents": [{"sha": "eaaa68f33d943f9714e48d5f81d96e364bb77054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaaa68f33d943f9714e48d5f81d96e364bb77054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaaa68f33d943f9714e48d5f81d96e364bb77054"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "ce6841b6894f6c7e85f6c1b7f93162ea9aaa4a8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -1,3 +1,13 @@\n+2016-09-25  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.c (sh_movt_set_dest, sh_movrt_set_dest): Add overloads.\n+\t(sh_rtx_costs): Handle SET of movt and movrt patterns.\n+\t* cnofig/sh/sh-protos.h (sh_movt_set_dest, sh_movrt_set_dest): Forward\n+\tdeclare new overloads.\n+\t* config/sh/sh.md (*cset_zero): Add variant that takes a treg_set_expr\n+\toperand.\n+\n 2016-09-24  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (expand_block_compare, do_load_for_compare):"}, {"sha": "1bac4030d0b84c1aaf418ee918a90b18bde28f33", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -235,7 +235,9 @@ extern void sh_split_tst_subregs (rtx_insn* curr_insn,\n \n extern bool sh_is_nott_insn (const rtx_insn* i);\n extern rtx sh_movt_set_dest (const rtx_insn* i);\n+extern rtx sh_movt_set_dest (const_rtx i);\n extern rtx sh_movrt_set_dest (const rtx_insn* i);\n+extern rtx sh_movrt_set_dest (const_rtx i);\n \n inline bool sh_is_movt_insn (const rtx_insn* i)\n {"}, {"sha": "bfa248d56df1dfb4a3e836db47282efc880f91b5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -3208,6 +3208,10 @@ sh_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n \t\t\t\t  / mov_insn_size (mode, TARGET_SH2A));\n \t  return true;\n         }\n+\n+      if (sh_movt_set_dest (x) != NULL || sh_movrt_set_dest (x) != NULL)\n+\treturn COSTS_N_INSNS (1);\n+\n       return false;\n \n     /* The cost of a mem access is mainly the cost of the address mode.  */\n@@ -11703,13 +11707,15 @@ sh_is_nott_insn (const rtx_insn* i)\n rtx\n sh_movt_set_dest (const rtx_insn* i)\n {\n-  if (i == NULL)\n-    return NULL;\n+  return i == NULL ? NULL : sh_movt_set_dest (PATTERN (i));\n+}\n \n-  const_rtx p = PATTERN (i);\n-  return GET_CODE (p) == SET\n-\t && arith_reg_dest (XEXP (p, 0), SImode)\n-\t && t_reg_operand (XEXP (p, 1), VOIDmode) ? XEXP (p, 0) : NULL;\n+rtx\n+sh_movt_set_dest (const_rtx pat)\n+{\n+  return GET_CODE (pat) == SET\n+\t && arith_reg_dest (XEXP (pat, 0), SImode)\n+\t && t_reg_operand (XEXP (pat, 1), VOIDmode) ? XEXP (pat, 0) : NULL;\n }\n \n /* Given an insn, check whether it's a 'movrt' kind of insn, i.e. an insn\n@@ -11718,18 +11724,20 @@ sh_movt_set_dest (const rtx_insn* i)\n rtx\n sh_movrt_set_dest (const rtx_insn* i)\n {\n-  if (i == NULL)\n-    return NULL;\n-\n-  const_rtx p = PATTERN (i);\n+  return i == NULL ? NULL : sh_movrt_set_dest (PATTERN (i));\n+}\n \n+rtx\n+sh_movrt_set_dest (const_rtx pat)\n+{\n   /* The negc movrt replacement is inside a parallel.  */\n-  if (GET_CODE (p) == PARALLEL)\n-    p = XVECEXP (p, 0, 0);\n+  if (GET_CODE (pat) == PARALLEL)\n+    pat = XVECEXP (pat, 0, 0);\n+\n+  return GET_CODE (pat) == SET\n+\t && arith_reg_dest (XEXP (pat, 0), SImode)\n+\t && negt_reg_operand (XEXP (pat, 1), VOIDmode) ? XEXP (pat, 0) : NULL;\n \n-  return GET_CODE (p) == SET\n-\t && arith_reg_dest (XEXP (p, 0), SImode)\n-\t && negt_reg_operand (XEXP (p, 1), VOIDmode) ? XEXP (p, 0) : NULL;\n }\n \n /* Given an insn and a reg number, tell whether the reg dies or is unused"}, {"sha": "dcb31eb3a0944d55e0d8477666dac073b243955f", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -8524,6 +8524,24 @@\n   [(set_attr \"type\" \"arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n \n+(define_insn_and_split \"*cset_zero\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(if_then_else:SI (match_operand 1 \"treg_set_expr_not_const01\")\n+\t\t\t (match_dup 0) (const_int 0)))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1 && TARGET_ZDCBRANCH && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(if_then_else:SI (match_dup 1) (match_dup 0) (const_int 0)))]\n+{\n+  sh_treg_insns ti = sh_split_treg_set_expr (operands[1], curr_insn);\n+  if (ti.remove_trailing_nott ())\n+    operands[1] = gen_rtx_EQ (SImode, get_t_reg_rtx (), const0_rtx);\n+  else\n+    operands[1] = gen_rtx_EQ (SImode, get_t_reg_rtx (), const1_rtx);\n+})\n+\n (define_expand \"cstoresf4\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operator:SI 1 \"ordered_comparison_operator\""}, {"sha": "4fc22c4e65f1362f59a671da763d9a50053d9421", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -1,3 +1,8 @@\n+2016-09-25  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* gcc.target/sh/pr51244-11.c: Add more detailed expected insn matching.\n+\n 2016-09-24  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \t* gfortran.dg/coarray_lib_comm_1.f90: Really fix test"}, {"sha": "f0582692d8eb3cfa345a5c542c136fceb6e44f9e", "filename": "gcc/testsuite/gcc.target/sh/pr51244-11.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c6dd20ce5e777e96de24ea6a1a896cf8836931/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c?ref=50c6dd20ce5e777e96de24ea6a1a896cf8836931", "patch": "@@ -1,8 +1,11 @@\n /* Check that zero-displacement branches are used instead of branch-free\n-   execution patterns.  */\n+   execution patterns.\n+   This is usually handled by the *cset_zero patterns.  */\n /* { dg-do compile }  */\n-/* { dg-options \"-O1 -mzdcbranch\" } */\n-/* { dg-final { scan-assembler-not \"subc|and\" } } */\n+/* { dg-options \"-O1 -mzdcbranch\" }  */\n+/* { dg-final { scan-assembler-not \"subc|and|bra\" } }  */\n+/* { dg-final { scan-assembler-times \"bf\\t0f\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"bt\\t0f\" 1 } }  */\n \n int*\n test_00 (int* s)"}]}