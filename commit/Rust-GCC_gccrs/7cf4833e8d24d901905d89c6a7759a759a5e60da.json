{"sha": "7cf4833e8d24d901905d89c6a7759a759a5e60da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmNDgzM2U4ZDI0ZDkwMTkwNWQ4OWM2YTc3NTlhNzU5YTVlNjBkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-01T20:41:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-01T20:41:37Z"}, "message": "i386.c (expand_vec_perm_palignr): Handle 256-bit vectors for TARGET_AVX2.\n\n\t* config/i386/i386.c (expand_vec_perm_palignr): Handle\n\t256-bit vectors for TARGET_AVX2.\n\nFrom-SVN: r215778", "tree": {"sha": "cee589bc3960c149bbb149176a0a5b699fc4bf54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee589bc3960c149bbb149176a0a5b699fc4bf54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf4833e8d24d901905d89c6a7759a759a5e60da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf4833e8d24d901905d89c6a7759a759a5e60da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf4833e8d24d901905d89c6a7759a759a5e60da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf4833e8d24d901905d89c6a7759a759a5e60da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0aa789a7315d60c5b20b8caebd7717d4595f67cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa789a7315d60c5b20b8caebd7717d4595f67cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa789a7315d60c5b20b8caebd7717d4595f67cc"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "b87279f3c0f3d5c0173b9d5a016c7eaae1b75073", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4833e8d24d901905d89c6a7759a759a5e60da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4833e8d24d901905d89c6a7759a759a5e60da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cf4833e8d24d901905d89c6a7759a759a5e60da", "patch": "@@ -1,5 +1,8 @@\n 2014-10-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (expand_vec_perm_palignr): Handle\n+\t256-bit vectors for TARGET_AVX2.\n+\n \t* config/i386/i386.c (expand_vec_perm_vperm2f128): Canonicalize\n \tdfirst permutation.\n "}, {"sha": "8b70f6fa59c18565619a02f25ea12c4c06d6868c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4833e8d24d901905d89c6a7759a759a5e60da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4833e8d24d901905d89c6a7759a759a5e60da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7cf4833e8d24d901905d89c6a7759a759a5e60da", "patch": "@@ -43297,44 +43297,75 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n   rtx shift, target;\n   struct expand_vec_perm_d dcopy;\n \n-  /* Even with AVX, palignr only operates on 128-bit vectors.  */\n-  if (!TARGET_SSSE3 || GET_MODE_SIZE (d->vmode) != 16)\n+  /* Even with AVX, palignr only operates on 128-bit vectors,\n+     in AVX2 palignr operates on both 128-bit lanes.  */\n+  if ((!TARGET_SSSE3 || GET_MODE_SIZE (d->vmode) != 16)\n+      && (!TARGET_AVX2 || GET_MODE_SIZE (d->vmode) != 32))\n     return false;\n \n-  min = nelt, max = 0;\n+  min = 2 * nelt, max = 0;\n   for (i = 0; i < nelt; ++i)\n     {\n       unsigned e = d->perm[i];\n+      if (GET_MODE_SIZE (d->vmode) == 32)\n+\te = (e & ((nelt / 2) - 1)) | ((e & nelt) >> 1);\n       if (e < min)\n \tmin = e;\n       if (e > max)\n \tmax = e;\n     }\n-  if (min == 0 || max - min >= nelt)\n+  if (min == 0\n+      || max - min >= (GET_MODE_SIZE (d->vmode) == 32 ? nelt / 2 : nelt))\n     return false;\n \n   /* Given that we have SSSE3, we know we'll be able to implement the\n-     single operand permutation after the palignr with pshufb.  */\n-  if (d->testing_p)\n+     single operand permutation after the palignr with pshufb for\n+     128-bit vectors.  */\n+  if (d->testing_p && GET_MODE_SIZE (d->vmode) == 16)\n     return true;\n \n   dcopy = *d;\n-  shift = GEN_INT (min * GET_MODE_BITSIZE (GET_MODE_INNER (d->vmode)));\n-  target = gen_reg_rtx (TImode);\n-  emit_insn (gen_ssse3_palignrti (target, gen_lowpart (TImode, d->op1),\n-\t\t\t\t  gen_lowpart (TImode, d->op0), shift));\n-\n-  dcopy.op0 = dcopy.op1 = gen_lowpart (d->vmode, target);\n-  dcopy.one_operand_p = true;\n \n   in_order = true;\n   for (i = 0; i < nelt; ++i)\n     {\n-      unsigned e = dcopy.perm[i] - min;\n+      unsigned e = dcopy.perm[i];\n+      if (GET_MODE_SIZE (d->vmode) == 32\n+\t  && e >= nelt\n+\t  && (e & (nelt / 2 - 1)) < min)\n+\te = e - min - (nelt / 2);\n+      else\n+\te = e - min;\n       if (e != i)\n \tin_order = false;\n       dcopy.perm[i] = e;\n     }\n+  dcopy.one_operand_p = true;\n+\n+  /* For AVX2, test whether we can permute the result in one instruction.  */\n+  if (d->testing_p)\n+    {\n+      if (in_order)\n+\treturn true;\n+      dcopy.op1 = dcopy.op0;\n+      return expand_vec_perm_1 (&dcopy);\n+    }\n+\n+  shift = GEN_INT (min * GET_MODE_BITSIZE (GET_MODE_INNER (d->vmode)));\n+  if (GET_MODE_SIZE (d->vmode) == 16)\n+    {\n+      target = gen_reg_rtx (TImode);\n+      emit_insn (gen_ssse3_palignrti (target, gen_lowpart (TImode, d->op1),\n+\t\t\t\t      gen_lowpart (TImode, d->op0), shift));\n+    }\n+  else\n+    {\n+      target = gen_reg_rtx (V2TImode);\n+      emit_insn (gen_avx2_palignrv2ti (target, gen_lowpart (V2TImode, d->op1),\n+\t\t\t\t       gen_lowpart (V2TImode, d->op0), shift));\n+    }\n+\n+  dcopy.op0 = dcopy.op1 = gen_lowpart (d->vmode, target);\n \n   /* Test for the degenerate case where the alignment by itself\n      produces the desired permutation.  */\n@@ -43345,7 +43376,7 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n     }\n \n   ok = expand_vec_perm_1 (&dcopy);\n-  gcc_assert (ok);\n+  gcc_assert (ok || GET_MODE_SIZE (d->vmode) == 32);\n \n   return ok;\n }"}]}