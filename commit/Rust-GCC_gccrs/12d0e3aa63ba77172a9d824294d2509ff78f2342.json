{"sha": "12d0e3aa63ba77172a9d824294d2509ff78f2342", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkMGUzYWE2M2JhNzcxNzJhOWQ4MjQyOTRkMjUwOWZmNzhmMjM0Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-10-31T17:09:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-10-31T17:09:09Z"}, "message": "constexpr.c, pt.c: Adjust comments.\n\n\t* constexpr.c, pt.c: Adjust comments.\n\n\t* g++.dg/cpp1y/lambda-generic-69078-1.C: Remove #include.\n\nFrom-SVN: r254272", "tree": {"sha": "afd26591845ec5ed7f7913f8f4bacdab4958f7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afd26591845ec5ed7f7913f8f4bacdab4958f7db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d0e3aa63ba77172a9d824294d2509ff78f2342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d0e3aa63ba77172a9d824294d2509ff78f2342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d0e3aa63ba77172a9d824294d2509ff78f2342", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d0e3aa63ba77172a9d824294d2509ff78f2342/comments", "author": null, "committer": null, "parents": [{"sha": "f26881e300b648e46ae89e24575fe493d772802f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26881e300b648e46ae89e24575fe493d772802f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26881e300b648e46ae89e24575fe493d772802f"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "483f731a49ae33f21ab1c353fb008337ef1fe9ac", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=12d0e3aa63ba77172a9d824294d2509ff78f2342", "patch": "@@ -1269,8 +1269,7 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t{\n \t  x = ctx->object;\n \t  /* We don't use cp_build_addr_expr here because we don't want to\n-\t     capture the object argument until we've chosen a non-static member\n-\t     function.  */\n+\t     capture the object argument during constexpr evaluation.  */\n \t  x = build_address (x);\n \t}\n       bool lval = false;"}, {"sha": "326be334d3b4f79a3dbcccda89df9efd85fc0687", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=12d0e3aa63ba77172a9d824294d2509ff78f2342", "patch": "@@ -5564,7 +5564,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \t  (TI_ARGS (tinfo),\n \t   TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (tmpl)))))\n \t{\n-\t  error (\"template arguments to %qD do not match original\"\n+\t  error (\"template arguments to %qD do not match original \"\n \t\t \"template %qD\", decl, DECL_TEMPLATE_RESULT (tmpl));\n \t  if (!uses_template_parms (TI_ARGS (tinfo)))\n \t    inform (input_location, \"use %<template<>%> for\"\n@@ -12195,7 +12195,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t We also deal with the peculiar case:\n \n \t template <class T> struct S {\n-\t template <class U> friend void f();\n+\t   template <class U> friend void f();\n \t };\n \t template <class U> void f() {}\n \t template S<int>;"}, {"sha": "3f10f82672d2febce2f1881676e19f073a357afe", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-69078-1.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-69078-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0e3aa63ba77172a9d824294d2509ff78f2342/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-69078-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-69078-1.C?ref=12d0e3aa63ba77172a9d824294d2509ff78f2342", "patch": "@@ -2,8 +2,6 @@\n // { dg-do run { target c++14 } }\n // { dg-options \"-Wall\" }\n \n-#include <cassert>\n-\n struct Class {\n     Class(void (*_param)()) : data(_param) {}\n     void (*data)();\n@@ -15,7 +13,7 @@ void funUser(void (*test)(int)) {\n \n void user(Class& c, int i) {\n     (void)i;\n-    assert (c.data);\n+    if (!c.data) __builtin_abort();\n }\n \n void probe() {}"}]}