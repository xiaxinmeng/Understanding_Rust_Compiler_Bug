{"sha": "4b3874d803e7961f38b22fa798517a63171bb985", "node_id": "C_kwDOANBUbNoAKDRiMzg3NGQ4MDNlNzk2MWYzOGIyMmZhNzk4NTE3YTYzMTcxYmI5ODU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-26T09:52:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-11T14:04:53Z"}, "message": "tree-optimization/105142 - improve maybe_fold_comparisons_from_match_pd fix\n\nThe following improves on the fix for PR105142 which restricted the\nexpression lookup used for maybe_fold_comparisons_from_match_pd to\navoid picking up flow-sensitive info for use in places where guarding\nconditions do not hold.  Instead of not allowing to expand SSA\ndefinitions there the following temporarily clears flow-sensitive\ninfo on the SSA names and restores it when finished matching.\n\n\tPR tree-optimization/105142\n\t* gimple-fold.cc (fosa_unwind): New global.\n\t(follow_outer_ssa_edges): When the SSA definition to follow\n\tis does not dominate fosa_bb, temporarily clear flow-sensitive\n\tinfo.  Make sure to not expand stmts with not defined overflow.\n\t(maybe_fold_comparisons_from_match_pd): Set up unwind stack\n\tfor follow_outer_ssa_edges and unwind flow-sensitive info\n\tclearing after matching.", "tree": {"sha": "6ff6be0480daf66bd4865141212a859ded2b1e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff6be0480daf66bd4865141212a859ded2b1e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3874d803e7961f38b22fa798517a63171bb985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3874d803e7961f38b22fa798517a63171bb985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3874d803e7961f38b22fa798517a63171bb985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3874d803e7961f38b22fa798517a63171bb985/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "0a212e6d0d4237ada62bbb21497c3e244fd7035e", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3874d803e7961f38b22fa798517a63171bb985/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3874d803e7961f38b22fa798517a63171bb985/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=4b3874d803e7961f38b22fa798517a63171bb985", "patch": "@@ -6916,6 +6916,7 @@ and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n }\n \n static basic_block fosa_bb;\n+static vec<std::pair<tree, void *> > *fosa_unwind;\n static tree\n follow_outer_ssa_edges (tree val)\n {\n@@ -6929,7 +6930,21 @@ follow_outer_ssa_edges (tree val)\n \t      && (def_bb == fosa_bb\n \t\t  || dominated_by_p (CDI_DOMINATORS, fosa_bb, def_bb))))\n \treturn val;\n-      return NULL_TREE;\n+      /* We cannot temporarily rewrite stmts with undefined overflow\n+\t behavior, so avoid expanding them.  */\n+      if ((ANY_INTEGRAL_TYPE_P (TREE_TYPE (val))\n+\t   || POINTER_TYPE_P (TREE_TYPE (val)))\n+\t  && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (val)))\n+\treturn NULL_TREE;\n+      /* If the definition does not dominate fosa_bb temporarily reset\n+\t flow-sensitive info.  */\n+      if (val->ssa_name.info.range_info)\n+\t{\n+\t  fosa_unwind->safe_push (std::make_pair\n+\t\t\t\t    (val, val->ssa_name.info.range_info));\n+\t  val->ssa_name.info.range_info = NULL;\n+\t}\n+      return val;\n     }\n   return val;\n }\n@@ -6988,9 +7003,14 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n \t\t      type, gimple_assign_lhs (stmt1),\n \t\t      gimple_assign_lhs (stmt2));\n   fosa_bb = outer_cond_bb;\n+  auto_vec<std::pair<tree, void *>, 8> unwind_stack;\n+  fosa_unwind = &unwind_stack;\n   if (op.resimplify (NULL, (!outer_cond_bb\n \t\t\t    ? follow_all_ssa_edges : follow_outer_ssa_edges)))\n     {\n+      fosa_unwind = NULL;\n+      for (auto p : unwind_stack)\n+\tp.first->ssa_name.info.range_info = p.second;\n       if (gimple_simplified_result_is_gimple_val (&op))\n \t{\n \t  tree res = op.ops[0];\n@@ -7012,6 +7032,9 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n \t  return build2 ((enum tree_code)op.code, op.type, op0, op1);\n \t}\n     }\n+  fosa_unwind = NULL;\n+  for (auto p : unwind_stack)\n+    p.first->ssa_name.info.range_info = p.second;\n \n   return NULL_TREE;\n }"}]}