{"sha": "cb31b22751e66019c7a4f0d9d572cca795b78368", "node_id": "C_kwDOANBUbNoAKGNiMzFiMjI3NTFlNjYwMTljN2E0ZjBkOWQ1NzJjY2E3OTViNzgzNjg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-09T23:38:38Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T19:10:16Z"}, "message": "RISC-V: Add testcases for AVL=REG support\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-21.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-22.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-23.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-24.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-25.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-26.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-27.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-28.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-29.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-30.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-31.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-32.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-33.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-34.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-35.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-36.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-37.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-38.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-39.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-40.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-41.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-42.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-43.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-44.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-45.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-46.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-47.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-48.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-49.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-50.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-51.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-52.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-53.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-54.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-55.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-56.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-57.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-58.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-59.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-60.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-61.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-62.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-63.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-64.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-65.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-66.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-67.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-68.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-69.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-70.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-71.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-9.c: New test.", "tree": {"sha": "195c6c153f115fae5e9bb65cbdc928b6f4de8a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195c6c153f115fae5e9bb65cbdc928b6f4de8a21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb31b22751e66019c7a4f0d9d572cca795b78368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb31b22751e66019c7a4f0d9d572cca795b78368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb31b22751e66019c7a4f0d9d572cca795b78368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb31b22751e66019c7a4f0d9d572cca795b78368/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc31c2c7c038e328cea88f67bd93415054a3db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc31c2c7c038e328cea88f67bd93415054a3db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc31c2c7c038e328cea88f67bd93415054a3db6"}], "stats": {"total": 2105, "additions": 2105, "deletions": 0}, "files": [{"sha": "84225dbe7d27307b9122d730a4a88d550d080646", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-1.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int vl)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f64d1c3680fd1f0b14f654ff5d51d86a6667423a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-10.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  size_t vl = 39;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf2_t v2 = __riscv_vle8_v_i8mf2 (in + i + 100, vl);\n+      __riscv_vse8_v_i8mf2 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e1a8383e0db76f5197a2e6b74dc7265e109f9d3e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-11.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-11.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  size_t vl = 39;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "027bc387a5e55969f3f28fd9788c609ca59f0e01", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-12.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  if (cond == 2) {\n+    size_t vl = 101;\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900, vl);\n+    __riscv_vse8_v_i8mf8 (out + 900, v, vl);\n+    vl = 102;\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 1000, vl);\n+    __riscv_vse8_v_i8mf8 (out + 1000, v2, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "faf68950ad7508b3dca86038e5e457164478109f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-13.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-13.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = 101;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 200, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "501d14c6e2ddc418fcfc46e0d505d647aa88174a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-14.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = 101;\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "501e0766c228e24a175dc996d50aa55055c520e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-15.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-15.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = 101;\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "75bed40562dca1a89c5e4ec219f8cf4abfaa502a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-16.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+        \n+        vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in + i + j + 100, vl);\n+        __riscv_vse8_v_i8mf8_m (mask, out + i + j + 100, v2, vl);\n+      }\n+      \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ad2b34095ebaa52368eff0d996efb98519155d5a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-17.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-17.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+      \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3860c6d54ffe6422fb9129a9f45b841578419ef5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-18.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-18.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+        \n+        vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in + i + j + 100, vl);\n+        __riscv_vse8_v_i8mf8_m (mask, out + i + j + 100, v2, vl);\n+      }\n+      \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "350e1d081803d8e9ebbdc381a023336851f2f83c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-19.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-19.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+\n+    for (size_t i = 0; i < n * n; i++)\n+      out[i] = out[i] * out[i];\n+    for (size_t i = 0; i < n * n * n; i++)\n+      out[i] = out[i] + out[i];\n+    for (size_t i = 0; i < n * n * n * n; i++)\n+      out[i] = out[i] + 2;\n+    for (size_t i = 0; i < n * n * n * n * n; i++)\n+      out[i] = out[i] * 100;\n+    for (size_t i = 0; i < n * n * n * n * n * n; i++)\n+      out[i] = out[i] - 77;\n+  \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "aefb107d0e704ca22ce899f26661ee59bd4cd438", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-2.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, size_t vl)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl << 3);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl << 3);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "cda2e0ea2f44b62e4ab8f378487bcc919a621782", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-20.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-20.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    for (size_t i = 0; i < cond; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+\n+    for (size_t i = 0; i < n * n; i++)\n+      out[i] = out[i] * out[i];\n+    for (size_t i = 0; i < n * n * n; i++)\n+      out[i] = out[i] + out[i];\n+    for (size_t i = 0; i < n * n * n * n; i++)\n+      out[i] = out[i] + 2;\n+    for (size_t i = 0; i < n * n * n * n * n; i++)\n+      out[i] = out[i] * 100;\n+    for (size_t i = 0; i < n * n * n * n * n * n; i++)\n+      out[i] = out[i] - 77;\n+  \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d8f114c614dc0ed8d7ab394f3ddc647a26b53a5c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-21.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-21.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  size_t vl = 101;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+\n+    if (cond) {\n+      for (size_t i = 0; i < n; i++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+        }\n+    } else {\n+      for (size_t i = 0; i < n; i++)\n+        {\n+          vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+          __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+          \n+          vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+          __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d5e5f5a8dd538345d02c16cfe27262e065f61b16", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-22.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-22.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    \n+    size_t vl = 101;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+\n+    for (size_t i = 0; i < n * n; i++)\n+      out[i] = out[i] * out[i];\n+    for (size_t i = 0; i < n * n * n; i++)\n+      out[i] = out[i] + out[i];\n+    for (size_t i = 0; i < n * n * n * n; i++)\n+      out[i] = out[i] + 2;\n+    for (size_t i = 0; i < n * n * n * n * n; i++)\n+      out[i] = out[i] * 100;\n+    for (size_t i = 0; i < n * n * n * n * n * n; i++)\n+      out[i] = out[i] - 77;\n+    \n+    vl = 101;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "aa10b7724fee945f2a404b8eff7fe7272ba2df7e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-23.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    \n+    size_t vl = 101;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+\n+    vl = 102;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,101} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,102} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "2fd09649c0fc45c30524827fc0738dc9abb7fd5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-24.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-24.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  for (size_t j = 0; j < m; j++){\n+    \n+    size_t vl = 101;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+\n+    for (size_t i = 0; i < cond; i++)\n+      out[i] = out[i] * out[i];\n+    \n+    vl = 102;\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,101} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,102} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "cfb7d789758007454690fafc659c3caca509a035", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-25.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-25.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  size_t vl = 101;\n+  for (size_t j = 0; j < m; j++){\n+\n+    if (cond) {\n+      for (size_t i = 0; i < n; i++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+        }\n+    } else {\n+      for (size_t i = 0; i < n; i++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + 100, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 100, v, vl);\n+        }\n+    }\n+    \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "13eee2157e06a9b1fb7f8c3ae882897e93260df9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-26.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-26.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  size_t vl = 101;\n+  for (size_t j = 0; j < m; j++){\n+\n+    if (cond) {\n+      for (size_t i = 0; i < n; i++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+        }\n+    } else {\n+      for (size_t i = 0; i < cond; i++)\n+        out[i] = out[i] * 33;\n+    }\n+    \n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + j + 200), vl);\n+        __riscv_vse32_v_f32mf2 ((float *)(out + i + j + 200), v, vl);\n+        \n+        vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + j + 300), vl);\n+        __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + j + 300), v2, vl);\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "179fccd237c06eaaf877878dfc2f716a754b966a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-27.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-27.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  vl = 101;\n+  if (cond > 0) {\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+        __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      }\n+  } else {\n+    for (size_t i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 1000, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + 1000, v, vl);\n+      }\n+  }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b5b3fda1bab123de20773a3940c9673dbe346568", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-28.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-28.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  vl = 101;\n+  if (cond > 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 10000, vl);\n+    __riscv_vse8_v_i8mf8 (out + 10000, v, vl);\n+  }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f6296e0af9397c8927f9c8ad7713dc738c1ae952", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-29.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-29.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  vl = 101;\n+  if (cond > 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    vint16mf4_t v = __riscv_vle16_v_i16mf4 ((int16_t *)(in + 10000), vl);\n+    __riscv_vse16_v_i16mf4 ((int16_t *)(out + 10000), v, vl);\n+  }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "68505ca258cafcca0a1471311c42bd50e96ae6f9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-3.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, size_t vl)\n+{\n+  vl = vl << 3;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "be5986e00a176981a719fee726dd5dc0e5a1ab45", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-30.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  vl = 101;\n+  if (cond > 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    out[100] = out[100] + 300;\n+  }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "9afa5470b3c45f96ec7475f0e537fd85fe4c6482", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-31.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-31.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = *(size_t*)(in + 10000);\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "31363d2624d386686b1760cefc5c336df6d40a44", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-32.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-32.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = ((cond + 100) * cond) >> 3;\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f4f58cd2c3bc61a7d7b15ca217731bd199ec7e09", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-33.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-33.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+char fn3 (void);\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = fn3 ();\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d28c12bdd49db933550bd77efb1525b06e890faf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-34.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-34.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "28230914cf71f6754f9b1eeb63196f2cc23a1316", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-35.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-35.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+static int vl = 0x5545515;\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3c93675a32dfe766f5131041c60268c4f2977801", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-36.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-36.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300,555);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v,555);\n+    }\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i,555);\n+      __riscv_vse8_v_i8mf8 (out + i, v,555);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100,555);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2,555);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0c6a25170cd66fb6a5c661f2ba283173723a8751", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-37.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-37.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  if (cond > 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    out[100] = out[100] + 300;\n+  }\n+    \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+addi\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[0-9]00\\s+addi\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[0-9]00\\s+addi\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[0-9]00\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ba90e79fbf5ac8e425861682bf58fc5325d57b31", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-38.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-38.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int8_t * restrict out2, int n, int m, unsigned cond, size_t vl)\n+{\n+  vl = 22;\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  if (cond == 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    out2[100] = out2[100] + 300;\n+  }\n+\n+  for (size_t i = 0; i < n; i++)\n+    out[i + 200] = out[i + 500] + 22;\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), 22);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, 22);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), 22);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, 22);\n+    }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl)\n+{\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+  if (cond > 0) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, vl);\n+    __riscv_vse8_v_i8mf8 (out, v, vl);\n+  } else {\n+    out[100] = out[100] + 300;\n+  }\n+\n+  for (size_t i = 0; i < n; i++)\n+    out[i + 200] = out[i + 500] + 555;\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,22,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "06f57dc6e52d254683344b6e23c4c832f5694f8d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-39.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-39.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n+  int vl = 101;\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i, vl);\n+    if (n > 100) {\n+      __riscv_vse8_v_i8mf8(out + i + 100, v0, vl);\n+    } else {\n+      __riscv_vse8_v_i8mf8(out + i, v0, vl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4fd3ece0e16e4779a1c32c170ec2c63bcf15ad84", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-4.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "796b40fe494ef0969944360eb026892ced4b1d09", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-40.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-40.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n+  for (size_t i = 0; i < m; i++) {\n+    for (size_t j = 0; j < n; j += 1) {\n+      vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, j);\n+      v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, j);\n+      __riscv_vse8_v_i8mf8(out + i, v0, j);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0589ebabf6c99eaf7af7e9ff80dd291ae64859bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-41.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-41.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n+  int vl = 101;\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i, vl);\n+    if (n > 100) {\n+      __riscv_vse8_v_i8mf8(out + i + 100, v0, vl);\n+    } else {\n+      __riscv_vse8_v_i8mf8(out + i, v0, vl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b5ffcbe9172995db0f61e34ab929a48f4ad869fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-42.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-42.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t *base, int8_t *out, size_t m, size_t n) {\n+  for (size_t i = 0; i < m; i++) {\n+    for (size_t j = 0; j < n; j += 1) {\n+      vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, i);\n+      v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, i);\n+      __riscv_vse8_v_i8mf8(out + i, v0, i);\n+    }\n+  }\n+}\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "44488aab2db0f2483efbbf5852f90d2f79da58fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-43.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-43.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  vbool64_t mask = *(vbool64_t*) (base + 10000);\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8_mu(mask, v0, base + i, vl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),v0\\.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0f4d60e9adf140ca017999c2168d5039fec8ad90", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-44.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  vbool64_t mask = *(vbool64_t*) (base + 10000);\n+  vint8mf8_t v0;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      v0 = __riscv_vle8_v_i8mf8_tumu(mask, v0, base + i, vl);\n+    } else {\n+      __riscv_vse8_v_i8mf8(out + i, v0, vl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a2ee5ec41155665dba3057bf2f8f8b3084b56759", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-45.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-45.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo1_7(int8_t *base, int8_t *out, size_t vl, size_t m, size_t n, size_t o, size_t p) {\n+  size_t avl = vl;\n+  if (o > p) {\n+    for (size_t i = 0; i < m; i++) {\n+      vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+      v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, avl);\n+      __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1c5ee6a60cc479abe5506f0add32d1a56897ac3a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-46.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-46.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  int vl = 101;\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, vl);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, vl);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, vl);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, vl);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, vl);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "15ecb5d171aafa5f0e6f9c709df729d0c5581bfd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-47.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, cond);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, cond);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, cond);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, cond);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, cond);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, cond);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, cond);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "319db5442f35f60b30f89d06f1e4899ed85b695f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-48.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-48.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n+{\n+  size_t vl;\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  for (int i = 0 ; i < n2; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 800 + i, vl);\n+    v = __riscv_vle8_v_i8mf8_tu (v, in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 800 + i, v, vl);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4fa68627cc0dd144e3667a0e73e043233d4944e7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-49.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-49.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n+{\n+  size_t vl;\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+  for (int i = 0 ; i < n2; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 800 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 800 + i, v, vl);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  asm volatile (\"li %0, 102\" :\"=r\" (vl)::\"memory\");\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "9980242b591014f576e05c68e91dbae910ccf7fa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-5.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int vl)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      vl++;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d91d2e0005c293aab78891021890f92f7f0cbe59", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-50.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m) {\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  size_t vl = 105;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, vl);\n+      vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v1, vl);\n+    } else {\n+      vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i, vl);\n+      vint16mf4_t v1 = __riscv_vle16_v_i16mf4_mu(mask, v0, base + i + 100, vl);\n+      __riscv_vse16_v_i16mf4 (out + i, v1, vl);\n+    }\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "0cb55ba28c61d12227ec553c0f9297cce85acbbd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-51.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  size_t vl = 106;\n+  for (size_t i = 0; i < m; i++) {\n+    for (size_t j = 0; j < n; j++){\n+      if ((i + j) % 2 == 0) {\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j, vl);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 100, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + j, v1, vl);\n+      } else {\n+        vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j, vl);\n+        vint16mf4_t v1 = __riscv_vle16_v_i16mf4_mu(mask, v0, base + i + j + 100, vl);\n+        __riscv_vse16_v_i16mf4 (out + i + j, v1, vl);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "882576e30d4df383a21afbe8c49d321c8275e374", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-52.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-52.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+  \n+  size_t vl = 107;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 700, vl);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 700, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 700, v1, vl);\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 500, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 500, v0, vl);\n+        } else {\n+          vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j + 600, vl);\n+          __riscv_vse16_v_i16mf4 (out + i + j + 600, v0, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 200, vl);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 300, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, vl);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "dbdb025986e8a756cbea76a91112c6d1b0863491", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-53.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-53.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+\n+  size_t vl = 222;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 500, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 500, v0, vl);\n+        } else {\n+          vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j + 600, vl);\n+          __riscv_vse16_v_i16mf4 (out + i + j + 600, v0, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 200, vl);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 300, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, vl);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7b85cc7072f67a676a999c875d67984a27b0c0ce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-54.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-54.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+  \n+  size_t vl = 333;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200, vl);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 200, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v1, vl);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300, vl);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 300, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v1, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8(base + i + j + 300, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, vl);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6c7aeea5f34bf9b6dc512790a0262a8097d9fe37", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-55.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-55.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+  \n+  size_t vl = 444;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, vl);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j, vl);\n+            vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j, vl);\n+            __riscv_vse8_v_i8mf8 (out + i + 600, v1, vl);\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, vl);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5d0584e981feceaa4efbc83dc1e66ff44b011701", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-56.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-56.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n+  \n+  size_t vl = 555;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, vl);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, vl);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 300 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v1, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j, vl);\n+            __riscv_vse8_v_i8mf8 (out + i + 600, v0, vl);\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, vl);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a41065b57102a6bed1ef52de7a8aa28ed01bd6bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-57.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-57.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t m, size_t n, size_t a, size_t b) {\n+  \n+  size_t vl = 666;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, vl);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, vl);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, vl);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, vl);\n+              }\n+            }\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, vl);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "610b731aaba017ab12ed430b643f590bb4882d89", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-58.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-58.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t m, size_t n, size_t a, size_t b) {\n+  \n+  size_t vl = 345;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, vl);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, vl);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, vl);\n+              }\n+            }\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, vl);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, vl);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, vl);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "82b82aed983034822cb64cd0d5562a6156d780a7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-59.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-59.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t m, size_t n, size_t a, size_t b) {\n+\n+  size_t vl = 99;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, vl);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, vl);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, vl);\n+              }\n+            }\n+          }\n+        } else {\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "02f62b46b20bacc1d6f477bd82f26a1993476215", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n+{\n+  for (int i = 0; i < l; i++){\n+    vl++;\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:\\s+ble\\s+[a-x0-9]+,\\s*zero,\\.L[0-9]+\\s+\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "731184d5e4f011d7790f24556dafcf8bcfb4e9d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-60.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-60.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t m, size_t n, size_t a, size_t b) {\n+  \n+  size_t vl = 999;\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, vl);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, vl);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, vl);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5e7dabf45a3b78ef97d0743e9a8b4926c35413c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-61.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-61.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, size_t n, size_t cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        size_t vl = 55;\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 100, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + 100, v, vl);\n+      } else {\n+      size_t vl = 66;\n+        vint32m1_t v = __riscv_vle32_v_i32m1 (in + i + 200, vl);\n+        __riscv_vse32_v_i32m1 (out + i + 200, v, vl);\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fbc4d58881b5fe2e0c6bc24bcd66c1f81212d833", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-62.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-62.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, size_t n, size_t cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i == cond) {\n+        size_t vl = 55;\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 100, vl);\n+        __riscv_vse8_v_i8mf8 (out + i + 100, v, vl);\n+      } else {\n+      size_t vl = 66;\n+        vint32m1_t v = __riscv_vle32_v_i32m1 (in + i + 200, vl);\n+        __riscv_vse32_v_i32m1 (out + i + 200, v, vl);\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5433b18cfc2456b0ba834c8ac3855866dde8e86f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-63.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-63.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  size_t vl = 111;\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, vl);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, vl);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, vl);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, vl);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, vl);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 900 + i);\n+    *(vint8mf8_t*) (out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "093f67f6767ce8c0eecb55ffbd9e87c6fb10946a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-64.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-64.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl = 777;\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, vl);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, vl);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, vl);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, vl);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, vl);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 900 + i);\n+    *(vint8mf8_t*) (out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 1000 + i, vl);\n+    __riscv_vse32_v_i32m1 (out + 1000 + i, v, vl);\n+  }\n+  \n+  vl = 888;\n+  for (int i = 0 ; i < n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 1000 + i, vl);\n+    __riscv_vse32_v_i32m1 (out + 1000 + i, v, vl);\n+  }\n+  \n+  vl = 444;\n+  for (int i = 0 ; i < n * n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 2000 + i, vl);\n+    __riscv_vse32_v_i32m1 (out + 2000 + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 6 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "24d3300ccbf358da894ad3d174e809fc6f518bde", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-65.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n+{\n+  size_t vl;\n+  asm volatile (\"li %0, 101\" :\"=r\" (vl)::\"memory\");\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, vl);\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n2; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 800 + i, vl);\n+    v = __riscv_vle8_v_i8mf8_tu (v, in + 900 + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + 800 + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "866370f06184c374ed5ef3234007993a14606f5a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-66.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n+{\n+  size_t vl = 555;\n+  \n+  if (cond) {\n+    for (int i = 0; i < l; i++){\n+      for (int j = 0; j < m; j++){\n+        for (int k = 0; k < n; k++)\n+          {\n+            vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+            __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+          }\n+      }\n+    }\n+  } else {\n+    out[999] = out[999] * in[999];\n+  }\n+  \n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          out[i+j+k+10000000] = out[i+j+k+10000000] + in[i+j+k+10000000];\n+        }\n+    }\n+  }\n+\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 10000, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3828afa9de8bf5fe9320c8755701ac0e25217e2b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-67.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  size_t vl = 101;\n+  for (int i = 0; i < l; i++){\n+    size_t vl = i + vl + 44;\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, j);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 20000, v, vl);\n+        }\n+    }\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7107172904859354d3e1e11e6234e004212be62e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-68.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  size_t vl = 101;\n+  for (int i = 0; i < l; i++){\n+    size_t vl = i + vl + 44;\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 20000, v, vl);\n+        }\n+    }\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+    __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "81699d7123d8cac12002587ccd2123ef04e61147", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-69.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-69.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n+{\n+  size_t vl = 555;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+        }\n+    }\n+  }\n+  \n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          out[i+j+k+10000000] = out[i+j+k+10000000] + in[i+j+k+10000000];\n+        }\n+    }\n+  }\n+\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 10000, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "bd407b25d546e1f4f8b79d54a62500ed0883b31f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-7.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  register size_t vl asm (\"a5\");\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*a5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "89036abc9d806a9fa063bfdad2c0564584ae442c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-70.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n+{\n+  size_t vl = 555;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+        }\n+    }\n+  }\n+  \n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          out[i+j+k+10000000] = out[i+j+k+10000000] + in[i+j+k+10000000];\n+        }\n+    }\n+  }\n+\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 10000, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0f780a7cb55eba9b461daeb9a9abba8f69c2ff81", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-71.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n+{\n+  size_t vl = 555;\n+  \n+  if (cond) {\n+    for (int i = 0; i < l; i++){\n+      for (int j = 0; j < m; j++){\n+        for (int k = 0; k < n; k++)\n+          {\n+            vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+            __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+          }\n+      }\n+    }\n+  } else {\n+    for (int i = 0; i < l; i++){\n+      for (int j = 0; j < m; j++){\n+        for (int k = 0; k < n; k++)\n+          {\n+            vint32mf2_t v = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + j + k), vl);\n+            __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + j + k), v, vl);\n+          }\n+      }\n+    }\n+  }\n+  \n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          out[i+j+k+10000000] = out[i+j+k+10000000] + in[i+j+k+10000000];\n+        }\n+    }\n+  }\n+\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n+          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k + 10000, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0785af7f020979f25c254435517851155c14a3eb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-8.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  size_t vl = 32;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0ecfb96968504d6115ac16fb5dbc6fcf8bb41850", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-9.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb31b22751e66019c7a4f0d9d572cca795b78368/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c?ref=cb31b22751e66019c7a4f0d9d572cca795b78368", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  int vl = 32;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + i + 1, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 1, v1, vl);\n+\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8 (in + i + 2, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 2, v2, vl);\n+\n+      vint8mf8_t v3 = __riscv_vle8_v_i8mf8 (in + i + 3, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 3, v3, vl);\n+\n+      vint8mf8_t v4 = __riscv_vle8_v_i8mf8 (in + i + 4, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 4, v4, vl);\n+\n+      vint8mf8_t v5 = __riscv_vle8_v_i8mf8 (in + i + 5, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v5, vl);\n+\n+      vint8mf8_t v6 = __riscv_vle8_v_i8mf8 (in + i + 6, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 6, v6, vl);\n+\n+      vint8mf8_t v7 = __riscv_vle8_v_i8mf8 (in + i + 7, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 7, v7, vl);\n+\n+      vint8mf8_t v8 = __riscv_vle8_v_i8mf8 (in + i + 8, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 8, v8, vl);\n+\n+      vint8mf8_t v9 = __riscv_vle8_v_i8mf8 (in + i + 9, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 9, v9, vl);\n+\n+      vint8mf8_t v10 = __riscv_vle8_v_i8mf8 (in + i + 10, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 10, v10, vl);\n+\n+      vint8mf8_t v11 = __riscv_vle8_v_i8mf8 (in + i + 11, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 11, v11, vl);\n+\n+      vint8mf8_t v12 = __riscv_vle8_v_i8mf8 (in + i + 12, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 12, v12, vl);\n+\n+      vint8mf8_t v13 = __riscv_vle8_v_i8mf8 (in + i + 13, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 13, v13, vl);\n+\n+      vint8mf8_t v14 = __riscv_vle8_v_i8mf8 (in + i + 14, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 14, v14, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}]}