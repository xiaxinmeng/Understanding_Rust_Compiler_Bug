{"sha": "7588d8aae498ba0a9643858555ac44e97877d5cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4OGQ4YWFlNDk4YmEwYTk2NDM4NTg1NTVhYzQ0ZTk3ODc3ZDVjZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-11T20:21:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-11T20:21:55Z"}, "message": "re PR c/61136 (ice in tree_nop_conversion)\n\ngcc/\n\tPR tree-optimization/61136\n\t* wide-int.h (multiple_of_p): Define a version that doesn't return\n\tthe quotient.\n\t* fold-const.c (extract_muldiv_1): Use wi::multiple_of_p instead of an\n\tinteger_zerop/const_binop pair.\n\t(multiple_of_p): Likewise, converting both operands to widest_int\n\tprecision.\n\ngcc/testsuite/\n\t* gcc.dg/torture/pr61136.c: New test.\n\nFrom-SVN: r210312", "tree": {"sha": "f88d70058c21ad014fce2e4b84fb2175d6e96fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f88d70058c21ad014fce2e4b84fb2175d6e96fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7588d8aae498ba0a9643858555ac44e97877d5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7588d8aae498ba0a9643858555ac44e97877d5cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7588d8aae498ba0a9643858555ac44e97877d5cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7588d8aae498ba0a9643858555ac44e97877d5cf/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9fe68774e1d00071bb528d40f1bc2caf61c2e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fe68774e1d00071bb528d40f1bc2caf61c2e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fe68774e1d00071bb528d40f1bc2caf61c2e39"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "083aca3fe5c0fd82e68bf5c29445fae766c19866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7588d8aae498ba0a9643858555ac44e97877d5cf", "patch": "@@ -1,3 +1,13 @@\n+2014-05-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR tree-optimization/61136\n+\t* wide-int.h (multiple_of_p): Define a version that doesn't return\n+\tthe quotient.\n+\t* fold-const.c (extract_muldiv_1): Use wi::multiple_of_p instead of an\n+\tinteger_zerop/const_binop pair.\n+\t(multiple_of_p): Likewise, converting both operands to widest_int\n+\tprecision.\n+\n 2014-05-09  Teresa Johnson  <tejohnson@google.com>\n \n \t* cgraphunit.c (analyze_functions): Use correct dump file."}, {"sha": "0fcb87fc02554ac0ae2ba4e730a72735d4031fe1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7588d8aae498ba0a9643858555ac44e97877d5cf", "patch": "@@ -5708,7 +5708,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n       /* For a constant, we can always simplify if we are a multiply\n \t or (for divide and modulus) if it is a multiple of our constant.  */\n       if (code == MULT_EXPR\n-\t  || integer_zerop (const_binop (TRUNC_MOD_EXPR, t, c)))\n+\t  || wi::multiple_of_p (t, c, TYPE_SIGN (type)))\n \treturn const_binop (code, fold_convert (ctype, t),\n \t\t\t    fold_convert (ctype, c));\n       break;\n@@ -5888,7 +5888,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n       /* If it's a multiply or a division/modulus operation of a multiple\n          of our constant, do the operation and verify it doesn't overflow.  */\n       if (code == MULT_EXPR\n-\t  || integer_zerop (const_binop (TRUNC_MOD_EXPR, op1, c)))\n+\t  || wi::multiple_of_p (op1, c, TYPE_SIGN (type)))\n \t{\n \t  op1 = const_binop (code, fold_convert (ctype, op1),\n \t\t\t     fold_convert (ctype, c));\n@@ -5932,7 +5932,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t  /* If the multiplication can overflow we cannot optimize this.  */\n \t  && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (t))\n \t  && TREE_CODE (TREE_OPERAND (t, 1)) == INTEGER_CST\n-\t  && integer_zerop (const_binop (TRUNC_MOD_EXPR, op1, c)))\n+\t  && wi::multiple_of_p (op1, c, TYPE_SIGN (type)))\n \t{\n \t  *strict_overflow_p = true;\n \t  return omit_one_operand (type, integer_zero_node, op0);\n@@ -5989,7 +5989,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t\t  && code != FLOOR_MOD_EXPR && code != ROUND_MOD_EXPR\n \t\t  && code != MULT_EXPR)))\n \t{\n-\t  if (integer_zerop (const_binop (TRUNC_MOD_EXPR, op1, c)))\n+\t  if (wi::multiple_of_p (op1, c, TYPE_SIGN (type)))\n \t    {\n \t      if (TYPE_OVERFLOW_UNDEFINED (ctype))\n \t\t*strict_overflow_p = true;\n@@ -5998,7 +5998,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t\t\t\t\t\tconst_binop (TRUNC_DIV_EXPR,\n \t\t\t\t\t\t\t     op1, c)));\n \t    }\n-\t  else if (integer_zerop (const_binop (TRUNC_MOD_EXPR, c, op1)))\n+\t  else if (wi::multiple_of_p (c, op1, TYPE_SIGN (type)))\n \t    {\n \t      if (TYPE_OVERFLOW_UNDEFINED (ctype))\n \t\t*strict_overflow_p = true;\n@@ -15314,8 +15314,8 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n \t      && (tree_int_cst_sgn (top) < 0\n \t\t  || tree_int_cst_sgn (bottom) < 0)))\n \treturn 0;\n-      return integer_zerop (int_const_binop (TRUNC_MOD_EXPR,\n-\t\t\t\t\t     top, bottom));\n+      return wi::multiple_of_p (wi::to_widest (top), wi::to_widest (bottom),\n+\t\t\t\tSIGNED);\n \n     default:\n       return 0;"}, {"sha": "74597966bb7aa9c6f0a45d3e08daf78d8ee8b9f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7588d8aae498ba0a9643858555ac44e97877d5cf", "patch": "@@ -1,3 +1,7 @@\n+2014-05-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.dg/torture/pr61136.c: New test.\n+\n 2014-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59705"}, {"sha": "4fc908a25c96e602f030fe1c776f13ce2d7f34c9", "filename": "gcc/testsuite/gcc.dg/torture/pr61136.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61136.c?ref=7588d8aae498ba0a9643858555ac44e97877d5cf", "patch": "@@ -0,0 +1,5 @@\n+unsigned long long\n+foo (int a)\n+{\n+  return a * 7 & 1ULL << 63;\n+}"}, {"sha": "d5ab4281869f30196f9583433bf3e3b3dbaf7db4", "filename": "gcc/wide-int.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7588d8aae498ba0a9643858555ac44e97877d5cf/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=7588d8aae498ba0a9643858555ac44e97877d5cf", "patch": "@@ -529,6 +529,9 @@ namespace wi\n   BINARY_FUNCTION mod_ceil (const T1 &, const T2 &, signop, bool * = 0);\n   BINARY_FUNCTION mod_round (const T1 &, const T2 &, signop, bool * = 0);\n \n+  template <typename T1, typename T2>\n+  bool multiple_of_p (const T1 &, const T2 &, signop);\n+\n   template <typename T1, typename T2>\n   bool multiple_of_p (const T1 &, const T2 &, signop,\n \t\t      WI_BINARY_RESULT (T1, T2) *);\n@@ -2791,6 +2794,15 @@ wi::mod_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)\n   return remainder;\n }\n \n+/* Return true if X is a multiple of Y.  Treat X and Y as having the\n+   signedness given by SGN.  */\n+template <typename T1, typename T2>\n+inline bool\n+wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)\n+{\n+  return wi::mod_trunc (x, y, sgn) == 0;\n+}\n+\n /* Return true if X is a multiple of Y, storing X / Y in *RES if so.\n    Treat X and Y as having the signedness given by SGN.  */\n template <typename T1, typename T2>"}]}