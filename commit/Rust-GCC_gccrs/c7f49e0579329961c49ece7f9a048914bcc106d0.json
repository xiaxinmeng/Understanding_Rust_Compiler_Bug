{"sha": "c7f49e0579329961c49ece7f9a048914bcc106d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmNDllMDU3OTMyOTk2MWM0OWVjZTdmOWEwNDg5MTRiY2MxMDZkMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-02T14:39:52Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-02T14:39:52Z"}, "message": "arm: Call thumb1_gen_const_int from thumb1_movsi_insn\n\nthumb1_movsi_insn used the same algorithm to build a constant in asm\nthan thumb1_gen_const_int_1 does in RTL. Since the previous patch added\nsupport for asm generation in thumb1_gen_const_int_1, this patch calls\nit from thumb1_movsi_insn to avoid duplication.\n\nWe need to introduce a new proxy function, thumb1_gen_const_int_print\nto select the right template.\n\nThis patch also adds a new testcase as the updated alternative is only\nused by thumb-1 processors that also support movt/movw.\n\n2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/thumb1.md (thumb1_movsi_insn): Call\n\tthumb1_gen_const_int_print.\n\t* config/arm/arm-protos.h (thumb1_gen_const_int_print): Add\n\tprototype.\n\t* config/arm/arm.c (thumb1_gen_const_int_print): New.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/pure-code/no-literal-pool-m23.c: New.", "tree": {"sha": "24cc17cf9e7222b6bd55beef4a5a6f572539b986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24cc17cf9e7222b6bd55beef4a5a6f572539b986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f49e0579329961c49ece7f9a048914bcc106d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f49e0579329961c49ece7f9a048914bcc106d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f49e0579329961c49ece7f9a048914bcc106d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f49e0579329961c49ece7f9a048914bcc106d0/comments", "author": null, "committer": null, "parents": [{"sha": "011f5e92f8ff87f099ed0aae736e79be20a77c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011f5e92f8ff87f099ed0aae736e79be20a77c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011f5e92f8ff87f099ed0aae736e79be20a77c6c"}], "stats": {"total": 218, "additions": 184, "deletions": 34}, "files": [{"sha": "1ba318acdaf441e6934ba39a1ad9430fd4c51bc9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c7f49e0579329961c49ece7f9a048914bcc106d0", "patch": "@@ -75,6 +75,7 @@ extern int const_ok_for_arm (HOST_WIDE_INT);\n extern int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n extern int const_ok_for_dimode_op (HOST_WIDE_INT, enum rtx_code);\n extern void thumb1_gen_const_int_rtl (rtx, HOST_WIDE_INT);\n+extern void thumb1_gen_const_int_print (rtx, HOST_WIDE_INT);\n extern int arm_split_constant (RTX_CODE, machine_mode, rtx,\n \t\t\t       HOST_WIDE_INT, rtx, rtx, int);\n extern int legitimate_pic_operand_p (rtx);"}, {"sha": "bfc1249f94189c02097d1eaa047cbcae095e7c00", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c7f49e0579329961c49ece7f9a048914bcc106d0", "patch": "@@ -28414,7 +28414,7 @@ thumb1_gen_const_int_1 (T dst, HOST_WIDE_INT op1)\n     }\n }\n \n-/* Proxy for thumb1.md, since the thumb1_const_print and\n+/* Proxies for thumb1.md, since the thumb1_const_print and\n    thumb1_const_rtl classes are not exported.  */\n void\n thumb1_gen_const_int_rtl (rtx dst, HOST_WIDE_INT op1)\n@@ -28423,6 +28423,13 @@ thumb1_gen_const_int_rtl (rtx dst, HOST_WIDE_INT op1)\n   thumb1_gen_const_int_1 (t, op1);\n }\n \n+void\n+thumb1_gen_const_int_print (rtx dst, HOST_WIDE_INT op1)\n+{\n+  thumb1_const_print t (asm_out_file, REGNO (dst));\n+  thumb1_gen_const_int_1 (t, op1);\n+}\n+\n /* Output code to add DELTA to the first argument, and then jump\n    to FUNCTION.  Used for C++ multiple inheritance.  */\n "}, {"sha": "56705c9f1eb0e89002ebe98410b239a68d87ef92", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=c7f49e0579329961c49ece7f9a048914bcc106d0", "patch": "@@ -688,40 +688,11 @@\n \t  }\n \telse if (GET_CODE (operands[1]) == CONST_INT)\n \t  {\n-\t    int i;\n-\t    HOST_WIDE_INT op1 = INTVAL (operands[1]);\n-\t    bool mov_done_p = false;\n-\t    rtx ops[2];\n-\t    ops[0] = operands[0];\n-\n-\t    /* Emit upper 3 bytes if needed.  */\n-\t    for (i = 0; i < 3; i++)\n-\t      {\n-\t\tint byte = (op1 >> (8 * (3 - i))) & 0xff;\n-\n-\t\tif (byte)\n-\t\t  {\n-\t\t    ops[1] = GEN_INT (byte);\n-\t\t    if (mov_done_p)\n-\t\t      output_asm_insn (\"adds\\t%0, %1\", ops);\n-\t\t    else\n-\t\t      output_asm_insn (\"movs\\t%0, %1\", ops);\n-\t\t    mov_done_p = true;\n-\t\t  }\n-\n-\t\tif (mov_done_p)\n-\t\t  output_asm_insn (\"lsls\\t%0, #8\", ops);\n-\t      }\n-\n-\t    /* Emit lower byte if needed.  */\n-\t    ops[1] = GEN_INT (op1 & 0xff);\n-\t    if (!mov_done_p)\n-\t      output_asm_insn (\"movs\\t%0, %1\", ops);\n-\t    else if (op1 & 0xff)\n-\t      output_asm_insn (\"adds\\t%0, %1\", ops);\n-\t    return \"\";\n+\t    thumb1_gen_const_int_print (operands[0], INTVAL (operands[1]));\n+\t    return \\\"\\\";\n \t  }\n-\t  gcc_unreachable ();\n+\n+\tgcc_unreachable ();\n \n       case 8: return \"ldr\\t%0, %1\";\n       case 9: return \"str\\t%1, %0\";"}, {"sha": "67d63d26bb190f5e57e6ce4208a29840b68a6d17", "filename": "gcc/testsuite/gcc.target/arm/pure-code/no-literal-pool-m23.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool-m23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f49e0579329961c49ece7f9a048914bcc106d0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool-m23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool-m23.c?ref=c7f49e0579329961c49ece7f9a048914bcc106d0", "patch": "@@ -0,0 +1,171 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpure-code -mcpu=cortex-m23 -march=armv8-m.base -mthumb\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/*\n+** testi:\n+**\t...\n+**\tmovs\tr[0-3], #1\n+**\tlsls\tr[0-3], #13\n+**\trsbs\tr[0-3], #0\n+**\t...\n+*/\n+int\n+testi (int *p)\n+{\n+  if (*p > 0x12345678)\n+    return *p-8192;\n+  else\n+    return *p+8192;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_0:\n+**\t...\n+**\tmovs\tr[0-3], #0\n+**\t...\n+*/\n+int\n+test_0 ()\n+{\n+  return 0;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_128:\n+**\t...\n+**\tmovs\tr[0-3], #128\n+**\t...\n+*/\n+int\n+test_128 ()\n+{\n+  return 128;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_264:\n+**\t...\n+**\tmovw\tr[0-3], #264\n+**\t...\n+*/\n+int\n+test_264 ()\n+{\n+  return 264;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_510:\n+**\t...\n+**\tmovw\tr[0-3], #510\n+**\t...\n+*/\n+int\n+test_510 ()\n+{\n+  return 510;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_512:\n+**\t...\n+**\tmovw\tr[0-3], #512\n+**\t...\n+*/\n+int\n+test_512 ()\n+{\n+  return 512;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_764:\n+**\t...\n+**\tmovw\tr[0-3], #764\n+**\t...\n+*/\n+int\n+test_764 ()\n+{\n+  return 764;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_65536:\n+**\t...\n+**\tmovs\tr[0-3], #128\n+**\tlsls\tr[0-3], r[0-3], #9\n+**\t...\n+*/\n+int\n+test_65536 ()\n+{\n+  return 65536;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_0x123456:\n+**\t...\n+**\tmovw\tr[0-3], #13398\n+**\tmovt\tr[0-3], 18\n+**\t...\n+*/\n+int\n+test_0x123456 ()\n+{\n+  return 0x123456;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_0x1123456:\n+**\t...\n+**\tmovw\tr[0-3], #13398\n+**\tmovt\tr[0-3], 274\n+**\t...\n+*/\n+int\n+test_0x1123456 ()\n+{\n+  return 0x1123456;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_0x1000010:\n+**\t...\n+**\tmovs\tr[0-3], #16\n+**\tmovt\tr[0-3], 256\n+**\t...\n+*/\n+int\n+test_0x1000010 ()\n+{\n+  return 0x1000010;\n+}\n+\n+/* Does not use thumb1_gen_const_int.\n+** test_0x1000011:\n+**\t...\n+**\tmovs\tr[0-3], #17\n+**\tmovt\tr[0-3], 256\n+**\t...\n+*/\n+int\n+test_0x1000011 ()\n+{\n+  return 0x1000011;\n+}\n+\n+/*\n+** test_m8192:\n+**\t...\n+**\tmovs\tr[0-3], #1\n+**\tlsls\tr[0-3], #13\n+**\trsbs\tr[0-3], #0\n+**\t...\n+*/\n+int\n+test_m8192 ()\n+{\n+  return -8192;\n+}"}]}