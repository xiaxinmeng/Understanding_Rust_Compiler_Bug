{"sha": "d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "node_id": "C_kwDOANBUbNoAKGQwYzczYjZjODU2NzdlNjc1NWI2MGZhMDJkNzlhNWM1ZTFhOGVhY2Q", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-16T06:28:34Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-20T06:52:48Z"}, "message": "Support 64-bit vectorization for single-precision floating rounding operation.\n\nHere's list the patch supported.\nrint/nearbyint/ceil/floor/trunc/lrint/lceil/lfloor/round/lround.\n\ngcc/ChangeLog:\n\n\tPR target/106910\n\t* config/i386/mmx.md (nearbyintv2sf2): New expander.\n\t(rintv2sf2): Ditto.\n\t(ceilv2sf2): Ditto.\n\t(lceilv2sfv2si2): Ditto.\n\t(floorv2sf2): Ditto.\n\t(lfloorv2sfv2si2): Ditto.\n\t(btruncv2sf2): Ditto.\n\t(lrintv2sfv2si2): Ditto.\n\t(roundv2sf2): Ditto.\n\t(lroundv2sfv2si2): Ditto.\n\t(*mmx_roundv2sf2): New define_insn.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr106910-1.c: New test.", "tree": {"sha": "d4a94895d57deb8fc4de04f216bb90576906b334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a94895d57deb8fc4de04f216bb90576906b334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a035f1932eeb26f997cf28a5c752617dd09cb91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a035f1932eeb26f997cf28a5c752617dd09cb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a035f1932eeb26f997cf28a5c752617dd09cb91"}], "stats": {"total": 231, "additions": 231, "deletions": 0}, "files": [{"sha": "222a041de589eab1d15124fdfa7cb5e0cc52fc18", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "patch": "@@ -1627,6 +1627,160 @@\n   DONE;\n })\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point rounding operations.\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_expand \"nearbyintv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\")\n+\t   (match_dup 2)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"operands[2] = GEN_INT (ROUND_MXCSR | ROUND_NO_EXC);\")\n+\n+(define_expand \"rintv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\")\n+\t   (match_dup 2)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"operands[2] = GEN_INT (ROUND_MXCSR);\")\n+\n+(define_expand \"ceilv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\")\n+\t   (match_dup 2)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && !flag_trapping_math\n+   && TARGET_MMX_WITH_SSE\"\n+  \"operands[2] = GEN_INT (ROUND_CEIL | ROUND_NO_EXC);\")\n+\n+(define_expand \"lceilv2sfv2si2\"\n+  [(match_operand:V2SI 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"register_operand\")]\n+ \"TARGET_SSE4_1 && !flag_trapping_math\n+  && TARGET_MMX_WITH_SSE\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_ceilv2sf2 (tmp, operands[1]));\n+  emit_insn (gen_fix_truncv2sfv2si2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"floorv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"vector_operand\")\n+\t   (match_dup 2)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && !flag_trapping_math\n+  && TARGET_MMX_WITH_SSE\"\n+  \"operands[2] = GEN_INT (ROUND_FLOOR | ROUND_NO_EXC);\")\n+\n+(define_expand \"lfloorv2sfv2si2\"\n+  [(match_operand:V2SI 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"register_operand\")]\n+ \"TARGET_SSE4_1 && !flag_trapping_math\n+  && TARGET_MMX_WITH_SSE\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_floorv2sf2 (tmp, operands[1]));\n+  emit_insn (gen_fix_truncv2sfv2si2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_expand \"btruncv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\")\n+\t   (match_dup 2)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && !flag_trapping_math\"\n+  \"operands[2] = GEN_INT (ROUND_TRUNC | ROUND_NO_EXC);\")\n+\n+(define_insn \"*mmx_roundv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(unspec:V2SF\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"Yr,x,v\")\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"%vroundps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"lrintv2sfv2si2\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V2SI\n+\t  [(match_operand:V2SF 1 \"register_operand\" \"v\")]\n+\t  UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"%vcvtps2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"roundv2sf2\"\n+  [(set (match_dup 3)\n+\t(plus:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_dup 2)))\n+   (set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF\n+\t  [(match_dup 3) (match_dup 4)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1 && !flag_trapping_math\n+   && TARGET_MMX_WITH_SSE\"\n+{\n+  const struct real_format *fmt;\n+  REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+  rtx half, vec_half;\n+\n+  /* load nextafter (0.5, 0.0) */\n+  fmt = REAL_MODE_FORMAT (SFmode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, SFmode);\n+  real_arithmetic (&pred_half, MINUS_EXPR, &dconsthalf, &half_minus_pred_half);\n+  half = const_double_from_real_value (pred_half, SFmode);\n+\n+  vec_half = ix86_build_const_vector (V2SFmode, true, half);\n+  vec_half = force_reg (V2SFmode, vec_half);\n+\n+  operands[2] = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_copysignv2sf3 (operands[2], vec_half, operands[1]));\n+\n+  operands[3] = gen_reg_rtx (V2SFmode);\n+  operands[4] = GEN_INT (ROUND_TRUNC);\n+})\n+\n+(define_expand \"lroundv2sfv2si2\"\n+  [(match_operand:V2SI 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"register_operand\")]\n+ \"TARGET_SSE4_1 && !flag_trapping_math\n+  && TARGET_MMX_WITH_SSE\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  emit_insn (gen_roundv2sf2 (tmp, operands[1]));\n+  emit_insn (gen_fix_truncv2sfv2si2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel half-precision floating point arithmetic"}, {"sha": "c7685a3218332cff79c8d6a5ffa87e151f542451", "filename": "gcc/testsuite/gcc.target/i386/pr106910-1.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106910-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106910-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106910-1.c?ref=d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse4.1 -O2 -Ofast\" } */\n+/* { dg-final { scan-assembler-times \"roundps\" 9 } } */\n+/* { dg-final { scan-assembler-times \"cvtps2dq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cvttps2dq\" 3 } } */\n+\n+#include<math.h>\n+\n+void\n+foo (float* p, float* __restrict q)\n+{\n+  p[0] = truncf (q[0]);\n+  p[1] = truncf (q[1]);\n+}\n+\n+void\n+foo1 (float* p, float* __restrict q)\n+{\n+  p[0] = floorf (q[0]);\n+  p[1] = floorf (q[1]);\n+}\n+\n+void\n+foo1i (int* p, float* __restrict q)\n+{\n+  p[0] = (int) floorf (q[0]);\n+  p[1] = (int) floorf (q[1]);\n+}\n+\n+void\n+foo2 (float* p, float* __restrict q)\n+{\n+  p[0] = ceilf (q[0]);\n+  p[1] = ceilf (q[1]);\n+}\n+\n+void\n+foo2i (int* p, float* __restrict q)\n+{\n+  p[0] = (int) ceilf (q[0]);\n+  p[1] = (int) ceilf (q[1]);\n+}\n+\n+void\n+foo3 (float* p, float* __restrict q)\n+{\n+  p[0] = rintf (q[0]);\n+  p[1] = rintf (q[1]);\n+}\n+\n+void\n+foo3i (int* p, float* __restrict q)\n+{\n+  p[0] = (int) rintf (q[0]);\n+  p[1] = (int) rintf (q[1]);\n+}\n+\n+void\n+foo4 (float* p, float* __restrict q)\n+{\n+  p[0] = nearbyintf (q[0]);\n+  p[1] = nearbyintf (q[1]);\n+}\n+\n+void\n+foo5(float* p, float* __restrict q)\n+{\n+  p[0] = roundf (q[0]);\n+  p[1] = roundf (q[1]);\n+}\n+\n+void\n+foo5i(int* p, float* __restrict q)\n+{\n+  p[0] = (int) roundf (q[0]);\n+  p[1] = (int) roundf (q[1]);\n+}"}]}