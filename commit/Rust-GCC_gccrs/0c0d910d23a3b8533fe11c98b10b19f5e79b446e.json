{"sha": "0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwZDkxMGQyM2EzYjg1MzNmZTExYzk4YjEwYjE5ZjVlNzliNDQ2ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-02-20T13:33:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-20T13:33:51Z"}, "message": "optabs.h (enum optab_index): Add new OTI_scalb.\n\n\t* optabs.h (enum optab_index): Add new OTI_scalb.\n\t(scalb_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize scalb_optab.\n\t* genopinit.c (optabs): Implement scalb_optab using scalb?f3\n\tpatterns.\n\t* builtins.c (expand_builtin_mathfn_2, expand_builtin): Handle\n\tBUILT_IN_SCALB{,F,L}, BUILT_IN_SCALBN{,F,L} and BUILT_IN_SCALBLN{,F,L}.\n\t(expand_builtin): Expand BUILT_IN_SCALB{,F,L}, BUILT_IN_SCALBN{,F,L}\n\tand BUILT_IN_SCALBLN{,F,L} using expand_builtin_mathfn_2 if\n\tflag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (scalbxf3, scalb<mode>3): New expanders\n\tto implement scalbf, scalb and scalbl built-ins as inline x87\n\tintrinsics.\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/builtins-34.c: Add scalb/scalbn/scalbln cases.\n\nFrom-SVN: r122162", "tree": {"sha": "95fa0014104dcb6887115c27e24a726801ecd2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fa0014104dcb6887115c27e24a726801ecd2a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/comments", "author": null, "committer": null, "parents": [{"sha": "d9f646e4b9df9983fdedd151af4065008ef3bd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f646e4b9df9983fdedd151af4065008ef3bd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f646e4b9df9983fdedd151af4065008ef3bd51"}], "stats": {"total": 148, "additions": 140, "deletions": 8}, "files": [{"sha": "292bfbc15338a7f098a549d138e103728abf3ee7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -1,3 +1,21 @@\n+2007-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_scalb.\n+\t(scalb_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize scalb_optab.\n+\t* genopinit.c (optabs): Implement scalb_optab using scalb?f3\n+\tpatterns.\n+\t* builtins.c (expand_builtin_mathfn_2, expand_builtin): Handle\n+\tBUILT_IN_SCALB{,F,L}, BUILT_IN_SCALBN{,F,L} and BUILT_IN_SCALBLN{,F,L}.\n+\t(expand_builtin): Expand BUILT_IN_SCALB{,F,L}, BUILT_IN_SCALBN{,F,L}\n+\tand BUILT_IN_SCALBLN{,F,L} using expand_builtin_mathfn_2 if\n+\tflag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (scalbxf3, scalb<mode>3): New expanders\n+\tto implement scalbf, scalb and scalbl built-ins as inline x87\n+\tintrinsics.\n+\n 2007-02-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n             DJ Delorie <dj@redhat.com>\n "}, {"sha": "e1c2deef647b7c952909eb9cab5a9b21b159681c", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -1973,10 +1973,15 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   bool errno_set = true;\n   bool stable = true;\n \n-  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXP\n-      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXPF\n-      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LDEXPL)\n-    op1_type = INTEGER_TYPE;\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    CASE_FLT_FN (BUILT_IN_SCALBN):\n+    CASE_FLT_FN (BUILT_IN_SCALBLN):\n+    CASE_FLT_FN (BUILT_IN_LDEXP):\n+      op1_type = INTEGER_TYPE;\n+    default:\n+      break;\n+    }\n \n   if (!validate_arglist (exp, REAL_TYPE, op1_type, VOID_TYPE))\n     return NULL_RTX;\n@@ -1990,6 +1995,15 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n       builtin_optab = pow_optab; break;\n     CASE_FLT_FN (BUILT_IN_ATAN2):\n       builtin_optab = atan2_optab; break;\n+    CASE_FLT_FN (BUILT_IN_SCALB):\n+      if (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (exp)))->b != 2)\n+\treturn 0;\n+      builtin_optab = scalb_optab; break;\n+    CASE_FLT_FN (BUILT_IN_SCALBN):\n+    CASE_FLT_FN (BUILT_IN_SCALBLN):\n+      if (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (exp)))->b != 2)\n+\treturn 0;\n+    /* Fall through... */\n     CASE_FLT_FN (BUILT_IN_LDEXP):\n       builtin_optab = ldexp_optab; break;\n     CASE_FLT_FN (BUILT_IN_FMOD):\n@@ -5963,6 +5977,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n     CASE_FLT_FN (BUILT_IN_ATAN2):\n     CASE_FLT_FN (BUILT_IN_LDEXP):\n+    CASE_FLT_FN (BUILT_IN_SCALB):\n+    CASE_FLT_FN (BUILT_IN_SCALBN):\n+    CASE_FLT_FN (BUILT_IN_SCALBLN):\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n "}, {"sha": "920b9dde8a1843353178fe38a39f7658daa78f3f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -17228,6 +17228,40 @@\n   emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n   DONE;\n })\n+\n+(define_expand \"scalbxf3\"\n+  [(parallel [(set (match_operand:XF 0 \" register_operand\" \"\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_operand:XF 2 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 3)\n+\t\t   (unspec:XF [(match_dup 1) (match_dup 2)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations && !optimize_size\"\n+{\n+  operands[3] = gen_reg_rtx (XFmode);\n+})\n+\n+(define_expand \"scalb<mode>3\"\n+  [(use (match_operand:X87MODEF12 0 \"register_operand\" \"\"))\n+   (use (match_operand:X87MODEF12 1 \"general_operand\" \"\"))\n+   (use (match_operand:X87MODEF12 2 \"register_operand\" \"\"))]\n+ \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations && !optimize_size\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+  emit_insn (gen_extend<mode>xf2 (op2, operands[2]));\n+  emit_insn (gen_scalbxf3 (op0, op1, op2));\n+  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  DONE;\n+})\n \f\n \n (define_insn \"frndintxf2\""}, {"sha": "3c06639f075512e07f51840c8c1387fd0a17f9e8", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -140,6 +140,7 @@ static const char * const optabs[] =\n   \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\",\n   \"expm1_optab->handlers[$A].insn_code = CODE_FOR_$(expm1$a2$)\",\n   \"ldexp_optab->handlers[$A].insn_code = CODE_FOR_$(ldexp$a3$)\",\n+  \"scalb_optab->handlers[$A].insn_code = CODE_FOR_$(scalb$a3$)\",\n   \"logb_optab->handlers[$A].insn_code = CODE_FOR_$(logb$a2$)\",\n   \"ilogb_optab->handlers[$A].insn_code = CODE_FOR_$(ilogb$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\","}, {"sha": "51c84c823525f0b65273363c334db0418a01aa06", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -5449,6 +5449,7 @@ init_optabs (void)\n   exp2_optab = init_optab (UNKNOWN);\n   expm1_optab = init_optab (UNKNOWN);\n   ldexp_optab = init_optab (UNKNOWN);\n+  scalb_optab = init_optab (UNKNOWN);\n   logb_optab = init_optab (UNKNOWN);\n   ilogb_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);"}, {"sha": "0f8c796680946b3136c319ec49bac870fab3a55d", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -179,6 +179,8 @@ enum optab_index\n   OTI_expm1,\n   /* Load exponent of a floating point number */\n   OTI_ldexp,\n+  /* Multiply floating-point number by integral power of radix */\n+  OTI_scalb,\n   /* Radix-independent exponent */\n   OTI_logb,\n   OTI_ilogb,\n@@ -357,6 +359,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define exp2_optab (optab_table[OTI_exp2])\n #define expm1_optab (optab_table[OTI_expm1])\n #define ldexp_optab (optab_table[OTI_ldexp])\n+#define scalb_optab (optab_table[OTI_scalb])\n #define logb_optab (optab_table[OTI_logb])\n #define ilogb_optab (optab_table[OTI_ilogb])\n #define log_optab (optab_table[OTI_log])"}, {"sha": "80c712cb45486be0ca85d6b2d1edac3e8d3a28d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -1,3 +1,7 @@\n+2007-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-34.c: Add scalb/scalbn/scalbln cases.\n+\n 2007-02-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n             DJ Delorie <dj@redhat.com>\n \n@@ -76,7 +80,7 @@\n \n 2007-02-18  Roger Sayle  <roger@eyesopen.com>\n \n-        * gfortran.dg/forall_10.f90: New test case.\n+\t* gfortran.dg/forall_10.f90: New test case.\n \n 2007-02-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -1199,9 +1203,9 @@\n \n 2007-01-06  Lee Millward  <lee.millward@codesourcery.com>\n \n-       PR c++/19439\n-       * g++.dg/template/duplicate1.C: New test\n-       * g++.dg/template/memfriend6.C: Adjust error markers.\n+\tPR c++/19439\n+\t* g++.dg/template/duplicate1.C: New test\n+\t* g++.dg/template/memfriend6.C: Adjust error markers.\n \t\n 2007-01-05  Andrew Pinski  <Andrew_Pinski@playstation.sony.com>\n "}, {"sha": "ee8d7513f91eac21b3925daf14dad421387a5acf", "filename": "gcc/testsuite/gcc.dg/builtins-34.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d910d23a3b8533fe11c98b10b19f5e79b446e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c?ref=0c0d910d23a3b8533fe11c98b10b19f5e79b446e", "patch": "@@ -13,16 +13,25 @@ extern double exp2(double);\n extern double pow10(double);\n extern double expm1(double);\n extern double ldexp(double, int);\n+extern double scalb(double, double);\n+extern double scalbn(double, int);\n+extern double scalbln(double, long);\n extern float exp10f(float);\n extern float exp2f(float);\n extern float pow10f(float);\n extern float expm1f(float);\n extern float ldexpf(float, int);\n+extern float scalbf(float, float);\n+extern float scalbnf(float, int);\n+extern float scalblnf(float, long);\n extern long double exp10l(long double);\n extern long double exp2l(long double);\n extern long double pow10l(long double);\n extern long double expm1l(long double);\n extern long double ldexpl(long double, int);\n+extern long double scalbl(long double, long double);\n+extern long double scalbnl(long double, int);\n+extern long double scalblnl(long double, long);\n \n \n double test1(double x)\n@@ -50,6 +59,21 @@ double test5(double x, int exp)\n   return ldexp(x, exp);\n }\n \n+double test6(double x, double exp)\n+{\n+  return scalb(x, exp);\n+}\n+\n+double test7(double x, int exp)\n+{\n+  return scalbn(x, exp);\n+}\n+\n+double test8(double x, long exp)\n+{\n+  return scalbln(x, exp);\n+}\n+\n float test1f(float x)\n {\n   return exp10f(x);\n@@ -75,6 +99,21 @@ float test5f(float x, int exp)\n   return ldexpf(x, exp);\n }\n \n+float test6f(float x, float exp)\n+{\n+  return scalbf(x, exp);\n+}\n+\n+float test7f(float x, int exp)\n+{\n+  return scalbnf(x, exp);\n+}\n+\n+float test8f(float x, long exp)\n+{\n+  return scalblnf(x, exp);\n+}\n+\n long double test1l(long double x)\n {\n   return exp10l(x);\n@@ -99,3 +138,18 @@ long double test5l(long double x, int exp)\n {\n   return ldexpl(x, exp);\n }\n+\n+long double test6l(long double x, long double exp)\n+{\n+  return scalbl(x, exp);\n+}\n+\n+long double test7l(long double x, int exp)\n+{\n+  return scalbnl(x, exp);\n+}\n+\n+long double test8l(long double x, long exp)\n+{\n+  return scalblnl(x, exp);\n+}"}]}