{"sha": "14b846de5134c67084100ace478e353e93745f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiODQ2ZGU1MTM0YzY3MDg0MTAwYWNlNDc4ZTM1M2U5Mzc0NWY4Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-11-08T23:42:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-11-08T23:42:09Z"}, "message": "unique_ptr.h: Move misplaced static_assert and use tuple's constexpr constructor in constexpr...\n\n2010-11-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/unique_ptr.h: Move misplaced static_assert and use\n\ttuple's constexpr constructor in constexpr constructors.\n\t* testsuite/20_util/unique_ptr/cons/ptr_deleter.cc: New.\n\t* testsuite/20_util/unique_ptr/cons/ptr_deleter_neg.cc: New.\n\nFrom-SVN: r166460", "tree": {"sha": "1527e4153f3d6c0d7780f1c50dd87dc871cd5ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1527e4153f3d6c0d7780f1c50dd87dc871cd5ae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b846de5134c67084100ace478e353e93745f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b846de5134c67084100ace478e353e93745f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b846de5134c67084100ace478e353e93745f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b846de5134c67084100ace478e353e93745f83/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f38b3ff3f14da35e0baef1e20be0cd4d6d21d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f38b3ff3f14da35e0baef1e20be0cd4d6d21d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f38b3ff3f14da35e0baef1e20be0cd4d6d21d9"}], "stats": {"total": 140, "additions": 130, "deletions": 10}, "files": [{"sha": "ff1a9251dbcc48d8dbd44e980278f18b9151a8a2", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=14b846de5134c67084100ace478e353e93745f83", "patch": "@@ -106,9 +106,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef _Tp                       element_type;\n       typedef _Dp                       deleter_type;\n \n-      static_assert(!std::is_pointer<deleter_type>::value,\n-\t\t    \"constructed with null function pointer deleter\");\n-\n       // Constructors.\n       constexpr unique_ptr()\n       : _M_t()\n@@ -132,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t      \"rvalue deleter bound to reference\"); }\n \n       constexpr unique_ptr(nullptr_t)\n-      : _M_t(pointer(), deleter_type())\n+      : _M_t()\n       { }\n \n       // Move constructors.\n@@ -269,18 +266,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef _Tp\t\t \telement_type;\n       typedef _Dp                       deleter_type;\n \n-      static_assert(!std::is_pointer<deleter_type>::value,\n-\t\t    \"constructed with null function pointer deleter\");\n-\n       // Constructors.\n       constexpr unique_ptr()\n-      : _M_t(pointer(), deleter_type())\n+      : _M_t()\n       { }\n \n       explicit\n       unique_ptr(pointer __p)\n       : _M_t(__p, deleter_type())\n-      { }\n+      { static_assert(!std::is_pointer<deleter_type>::value,\n+\t\t     \"constructed with null function pointer deleter\"); }\n \n       unique_ptr(pointer __p,\n \t  typename std::conditional<std::is_reference<deleter_type>::value,\n@@ -295,7 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       /* TODO: use delegating constructor */\n       constexpr unique_ptr(nullptr_t)\n-      : _M_t(pointer(), deleter_type())\n+      : _M_t()\n       { }\n \n       // Move constructors."}, {"sha": "7e88eb94804e9f2f5c92b8c6e34b3c3be72c56ee", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/ptr_deleter.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter.cc?ref=14b846de5134c67084100ace478e353e93745f83", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+static int count;\n+\n+void del(int* p) { ++count; delete p; }\n+void vdel(int* p) { ++count; delete[] p; }\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  count = 0;\n+  {\n+    std::unique_ptr<int, void(*)(int*)> p(nullptr, del);\n+  }\n+  VERIFY( count == 0 );\n+  {\n+    std::unique_ptr<int, void(*)(int*)> p(new int, del);\n+  }\n+  VERIFY( count == 1 );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  count = 0;\n+  {\n+    std::unique_ptr<int[], void(*)(int*)> p(nullptr, vdel);\n+  }\n+  VERIFY( count == 0 );\n+  {\n+    std::unique_ptr<int[], void(*)(int*)> p(new int[1], vdel);\n+  }\n+  VERIFY( count == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "143578ed4b49e1fe71980e58a86d67b86e44ab89", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/ptr_deleter_neg.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b846de5134c67084100ace478e353e93745f83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc?ref=14b846de5134c67084100ace478e353e93745f83", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+using std::unique_ptr;\n+\n+// { dg-excess-errors \"static assertion failed\" }\n+\n+void\n+test01()\n+{\n+  unique_ptr<int, void(*)(int*)> p1; // { dg-error \"here\" \"\" { xfail *-*-* } }\n+\n+  unique_ptr<int, void(*)(int*)> p2(nullptr); // { dg-error \"here\" \"\" { xfail *-*-* } }\n+\n+  unique_ptr<int, void(*)(int*)> p3(new int); // { dg-error \"here\" }\n+}\n+\n+void\n+test02()\n+{\n+  unique_ptr<int[], void(*)(int*)> p1; // { dg-error \"here\" \"\" { xfail *-*-* } }\n+\n+  unique_ptr<int[], void(*)(int*)> p2(nullptr); // { dg-error \"here\" \"\" { xfail *-*-* } }\n+\n+  unique_ptr<int[], void(*)(int*)> p3(new int[1]); // { dg-error \"here\" }\n+}\n+\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}