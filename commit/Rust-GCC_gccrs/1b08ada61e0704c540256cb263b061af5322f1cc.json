{"sha": "1b08ada61e0704c540256cb263b061af5322f1cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIwOGFkYTYxZTA3MDRjNTQwMjU2Y2IyNjNiMDYxYWY1MzIyZjFjYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2018-04-25T17:34:00Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2018-04-25T17:34:00Z"}, "message": "DWARF sort longer dirs before shorter ones in directory table.\n\nWhen gcc dwarf2out generates the .debug_line table itself (for example\nwhen generating one for a split DWARF .dwo) it uses natural sorting for\nthe directory table. Shorter directory paths come before longer directory\npaths with the same prefix. This causes the files in the line table to\npick the shorter dir. Creating slightly ineffecient line tables because\nthe longer directory paths will never be used.\n\nFix this by changing file_info_cmp () to pick longer directory prefixes\nbefore shorter ones. We still sort files (the compilation unit) without\nany directory path before all entries with a directory path, so they\nwill still use dir entry 0 (the working directory).\n\nA hello.c program would get the following dir and line table before:\n\nDirectory table:\n /opt/local/install/gcc/lib/gcc/x86_64-pc-linux-gnu/8.0.1/include\n /usr/include\n /usr/include/bits\n\nFile name table:\n Entry Dir   Time      Size      Name\n 1     0     0         0         hello.c\n 2     1     0         0         stddef.h\n 3     2     0         0         bits/types.h\n 4     2     0         0         libio.h\n 5     2     0         0         stdio.h\n 6     2     0         0         bits/sys_errlist.h\n\nNote that the last directory table entry is never used.\nAfter this patch it looks as follows:\n\nDirectory table:\n /opt/local/install/gcc/lib/gcc/x86_64-pc-linux-gnu/8.0.1/include\n /usr/include/bits\n /usr/include\n\nFile name table:\n Entry Dir   Time      Size      Name\n 1     0     0         0         hello.c\n 2     1     0         0         stddef.h\n 3     2     0         0         types.h\n 4     3     0         0         libio.h\n 5     3     0         0         stdio.h\n 6     2     0         0         sys_errlist.h\n\nWhich is similar to what gas would output.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (file_info_cmp): Sort longer dir prefixes before\n\tshorter ones.\n\nFrom-SVN: r259655", "tree": {"sha": "138c6d732f419edb32dd61c4ad4289004fc94d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138c6d732f419edb32dd61c4ad4289004fc94d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b08ada61e0704c540256cb263b061af5322f1cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b08ada61e0704c540256cb263b061af5322f1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b08ada61e0704c540256cb263b061af5322f1cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b08ada61e0704c540256cb263b061af5322f1cc/comments", "author": null, "committer": null, "parents": [{"sha": "971424e418f4ab1272fa006c85dcf658d375463a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971424e418f4ab1272fa006c85dcf658d375463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971424e418f4ab1272fa006c85dcf658d375463a"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "f00fdd8c0a3cdea451d4b9e513f1e6c6ad56aecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b08ada61e0704c540256cb263b061af5322f1cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b08ada61e0704c540256cb263b061af5322f1cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b08ada61e0704c540256cb263b061af5322f1cc", "patch": "@@ -1,3 +1,8 @@\n+2018-04-25  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (file_info_cmp): Sort longer dir prefixes before\n+\tshorter ones.\n+\n 2018-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (*x86_mov<mode>cc_0_m1): Use type \"alu1\" rather"}, {"sha": "d3d925d5279d65e55f362b3f24cb0797d0d29412", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b08ada61e0704c540256cb263b061af5322f1cc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b08ada61e0704c540256cb263b061af5322f1cc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1b08ada61e0704c540256cb263b061af5322f1cc", "patch": "@@ -11955,7 +11955,9 @@ file_info_cmp (const void *p1, const void *p2)\n      we return consistent values to qsort since some will get confused if\n      we return the same value when identical operands are passed in opposite\n      orders.  So if neither has a directory, return 0 and otherwise return\n-     1 or -1 depending on which one has the directory.  */\n+     1 or -1 depending on which one has the directory.  We want the one with\n+     the directory to sort after the one without, so all no directory files\n+     are at the start (normally only the compilation unit file).  */\n   if ((s1->path == s1->fname || s2->path == s2->fname))\n     return (s2->path == s2->fname) - (s1->path == s1->fname);\n \n@@ -11966,11 +11968,12 @@ file_info_cmp (const void *p1, const void *p2)\n     {\n       ++cp1;\n       ++cp2;\n-      /* Reached the end of the first path?  If so, handle like above.  */\n+      /* Reached the end of the first path?  If so, handle like above,\n+\t but now we want longer directory prefixes before shorter ones.  */\n       if ((cp1 == (const unsigned char *) s1->fname)\n \t  || (cp2 == (const unsigned char *) s2->fname))\n-\treturn ((cp2 == (const unsigned char *) s2->fname)\n-\t\t- (cp1 == (const unsigned char *) s1->fname));\n+\treturn ((cp1 == (const unsigned char *) s1->fname)\n+\t\t- (cp2 == (const unsigned char *) s2->fname));\n \n       /* Character of current path component the same?  */\n       else if (*cp1 != *cp2)"}]}