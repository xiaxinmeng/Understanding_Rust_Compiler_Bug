{"sha": "b217d7febe66988b50d0dd41303dc332c0281acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxN2Q3ZmViZTY2OTg4YjUwZDBkZDQxMzAzZGMzMzJjMDI4MWFjYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:02:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:02:39Z"}, "message": "(build_complex): Add new argument, TYPE.\n\nFrom-SVN: r12863", "tree": {"sha": "e8047acb948312a724d16e4692c42d2624ba5a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8047acb948312a724d16e4692c42d2624ba5a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b217d7febe66988b50d0dd41303dc332c0281acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b217d7febe66988b50d0dd41303dc332c0281acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b217d7febe66988b50d0dd41303dc332c0281acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b217d7febe66988b50d0dd41303dc332c0281acc/comments", "author": null, "committer": null, "parents": [{"sha": "a5ee6e448487ac6c76cce0da796451a8c2c54ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ee6e448487ac6c76cce0da796451a8c2c54ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ee6e448487ac6c76cce0da796451a8c2c54ea4"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "a5b67dd7002cd55c405d3e139466e6af33b25387", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b217d7febe66988b50d0dd41303dc332c0281acc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b217d7febe66988b50d0dd41303dc332c0281acc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b217d7febe66988b50d0dd41303dc332c0281acc", "patch": "@@ -1444,18 +1444,19 @@ build_string (len, str)\n \n /* Return a newly constructed COMPLEX_CST node whose value is\n    specified by the real and imaginary parts REAL and IMAG.\n-   Both REAL and IMAG should be constant nodes.\n-   The TREE_TYPE is not initialized.  */\n+   Both REAL and IMAG should be constant nodes.  TYPE, if specified,\n+   will be the type of the COMPLEX_CST; otherwise a new type will be made.  */\n \n tree\n-build_complex (real, imag)\n+build_complex (type, real, imag)\n+     tree type;\n      tree real, imag;\n {\n   register tree t = make_node (COMPLEX_CST);\n \n   TREE_REALPART (t) = real;\n   TREE_IMAGPART (t) = imag;\n-  TREE_TYPE (t) = build_complex_type (TREE_TYPE (real));\n+  TREE_TYPE (t) = type ? type : build_complex_type (TREE_TYPE (real));\n   TREE_OVERFLOW (t) = TREE_OVERFLOW (real) | TREE_OVERFLOW (imag);\n   TREE_CONSTANT_OVERFLOW (t)\n     = TREE_CONSTANT_OVERFLOW (real) | TREE_CONSTANT_OVERFLOW (imag);\n@@ -3164,7 +3165,7 @@ build_type_variant (type, constp, volatilep)\n      like the one we need to have.  If so, use that existing one.  We must\n      preserve the TYPE_NAME, since there is code that depends on this.  */\n \n-  for (t = TYPE_MAIN_VARIANT(type); t; t = TYPE_NEXT_VARIANT (t))\n+  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n     if (constp == TYPE_READONLY (t) && volatilep == TYPE_VOLATILE (t)\n \t&& TYPE_NAME (t) == TYPE_NAME (type))\n       return t;"}, {"sha": "2d37be941e48ff6edd94b52c728189dcf8ee926d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b217d7febe66988b50d0dd41303dc332c0281acc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b217d7febe66988b50d0dd41303dc332c0281acc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b217d7febe66988b50d0dd41303dc332c0281acc", "patch": "@@ -1251,7 +1251,7 @@ extern tree build_parse_node\t\tPVPROTO((enum tree_code, ...));\n extern tree build_int_2_wide\t\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_real\t\t\tPROTO((tree, REAL_VALUE_TYPE));\n extern tree build_real_from_int_cst \tPROTO((tree, tree));\n-extern tree build_complex\t\tPROTO((tree, tree));\n+extern tree build_complex\t\tPROTO((tree, tree, tree));\n extern tree build_string\t\tPROTO((int, char *));\n extern tree build1\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_tree_list\t\tPROTO((tree, tree));"}]}