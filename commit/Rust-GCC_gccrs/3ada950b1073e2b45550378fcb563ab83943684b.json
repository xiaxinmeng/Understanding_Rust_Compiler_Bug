{"sha": "3ada950b1073e2b45550378fcb563ab83943684b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkYTk1MGIxMDczZTJiNDU1NTAzNzhmY2I1NjNhYjgzOTQzNjg0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-03T08:04:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-03T08:04:27Z"}, "message": "[multiple changes]\n\n2012-10-03  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb, sem_prag.adb, s-bignum.ads: Minor typo fixes.\n\n2012-10-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb (Connect_Socket, version with timeout): When the\n\tnewly-connected socket is reported as available for writing, check\n\twhether it has a pending asynchronous error prior to returning.\n\n2012-10-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Conformance): Additional info when subtype\n\tconformance fails, due to a missing null exclusion indicatar in\n\ta formal that must match a controlling access formal.\n\nFrom-SVN: r192026", "tree": {"sha": "7a65508dddfcf5173dca569b36d33f30549d1df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a65508dddfcf5173dca569b36d33f30549d1df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ada950b1073e2b45550378fcb563ab83943684b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ada950b1073e2b45550378fcb563ab83943684b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ada950b1073e2b45550378fcb563ab83943684b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ada950b1073e2b45550378fcb563ab83943684b/comments", "author": null, "committer": null, "parents": [{"sha": "bd2e46c8255fad4e75e589b3286ead560e910b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2e46c8255fad4e75e589b3286ead560e910b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2e46c8255fad4e75e589b3286ead560e910b39"}], "stats": {"total": 91, "additions": 77, "deletions": 14}, "files": [{"sha": "17220332173ce99bb2a482db4a197a531fc459cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -1,3 +1,19 @@\n+2012-10-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb, sem_prag.adb, s-bignum.ads: Minor typo fixes.\n+\n+2012-10-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb (Connect_Socket, version with timeout): When the\n+\tnewly-connected socket is reported as available for writing, check\n+\twhether it has a pending asynchronous error prior to returning.\n+\n+2012-10-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Conformance): Additional info when subtype\n+\tconformance fails, due to a missing null exclusion indicatar in\n+\ta formal that must match a controlling access formal.\n+\n 2012-10-02  Ben Brosgol  <brosgol@adacore.com>\n \n \t* gnat_rm.texi: Minor editing."}, {"sha": "a70deeb474a010b7b2c8a1cd9f681c74aca7d039", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -195,15 +195,15 @@ package body Checks is\n \n    procedure Apply_Arithmetic_Overflow_Checked_Suppressed (N : Node_Id);\n    --  Used to apply arithmetic overflow checks for all cases except operators\n-   --  on signed arithmetic types in Minimized/Eliminate case (for which we\n+   --  on signed arithmetic types in MINIMIZED/ELIMINATED case (for which we\n    --  call Apply_Arithmetic_Overflow_Minimized_Eliminated below). N is always\n    --  a signed integer arithmetic operator (if and case expressions are not\n    --  included for this case).\n \n    procedure Apply_Arithmetic_Overflow_Minimized_Eliminated (Op : Node_Id);\n    --  Used to apply arithmetic overflow checks for the case where the overflow\n-   --  checking mode is Minimized or Eliminated (and the Do_Overflow_Check flag\n-   --  is known to be set) and we have an signed integer arithmetic op (which\n+   --  checking mode is MINIMIZED or ELIMINATED (and the Do_Overflow_Check flag\n+   --  is known to be set) and we have a signed integer arithmetic op (which\n    --  includes the case of if and case expressions).\n \n    procedure Apply_Division_Check\n@@ -317,7 +317,7 @@ package body Checks is\n    --  integer operands. This includes unary and binary operators, and also\n    --  if and case expression nodes where the dependent expressions are of\n    --  a signed integer type. These are the kinds of nodes for which special\n-   --  handling applies in MINIMIZED or EXTENDED overflow checking mode.\n+   --  handling applies in MINIMIZED or ELIMINATED overflow checking mode.\n \n    function Range_Or_Validity_Checks_Suppressed\n      (Expr : Node_Id) return Boolean;\n@@ -774,7 +774,7 @@ package body Checks is\n       then\n          Apply_Arithmetic_Overflow_Checked_Suppressed (N);\n \n-      --  Otherwise use the new routine for Minimized/Eliminated modes for\n+      --  Otherwise use the new routine for MINIMIZED/ELIMINATED modes for\n       --  the case of a signed integer arithmetic op, with Do_Overflow_Check\n       --  set True, and the checking mode is Minimized_Or_Eliminated.\n \n@@ -4468,7 +4468,7 @@ package body Checks is\n       end if;\n \n       --  Remainder of processing is for Checked case, and is unchanged from\n-      --  earlier versions preceding the addition of Minimized/Eliminated.\n+      --  earlier versions preceding the addition of MINIMIZED/ELIMINATED.\n \n       --  Nothing to do if the range of the result is known OK. We skip this\n       --  for conversions, since the caller already did the check, and in any"}, {"sha": "731919be3ba496d670c09edb7048c76549a04d97", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -123,7 +123,7 @@ package body GNAT.Sockets is\n    function Resolve_Error\n      (Error_Value : Integer;\n       From_Errno  : Boolean := True) return Error_Type;\n-   --  Associate an enumeration value (error_type) to en error value (errno).\n+   --  Associate an enumeration value (error_type) to an error value (errno).\n    --  From_Errno prevents from mixing h_errno with errno.\n \n    function To_Name   (N  : String) return Name_Type;\n@@ -702,6 +702,13 @@ package body GNAT.Sockets is\n       Req : Request_Type;\n       --  Used to set Socket to non-blocking I/O\n \n+      Conn_Err : aliased Integer;\n+      --  Error status of the socket after completion of select(2)\n+\n+      Res           : C.int;\n+      Conn_Err_Size : aliased C.int := Conn_Err'Size / 8;\n+      --  For getsockopt(2) call\n+\n    begin\n       if Selector /= null and then not Is_Open (Selector.all) then\n          raise Program_Error with \"closed selector\";\n@@ -735,10 +742,32 @@ package body GNAT.Sockets is\n          Selector => Selector,\n          Status   => Status);\n \n+      --  Check error condition (the asynchronous connect may have terminated\n+      --  with an error, e.g. ECONNREFUSED) if select(2) completed.\n+\n+      if Status = Completed then\n+         Res := C_Getsockopt\n+           (C.int (Socket), SOSC.SOL_SOCKET, SOSC.SO_ERROR,\n+            Conn_Err'Address, Conn_Err_Size'Access);\n+\n+         if Res /= 0 then\n+            Conn_Err := Socket_Errno;\n+         end if;\n+\n+      else\n+         Conn_Err := 0;\n+      end if;\n+\n       --  Reset the socket to blocking I/O\n \n       Req := (Name => Non_Blocking_IO, Enabled => False);\n       Control_Socket (Socket, Request => Req);\n+\n+      --  Report error condition if any\n+\n+      if Conn_Err /= 0 then\n+         Raise_Socket_Error (Conn_Err);\n+      end if;\n    end Connect_Socket;\n \n    --------------------"}, {"sha": "7cc7526887e96d2715f6063dd0522c9fe0993368", "filename": "gcc/ada/s-bignum.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fs-bignum.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fs-bignum.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.ads?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -70,10 +70,11 @@ package System.Bignums is\n    end record;\n \n    type Bignum is access all Bignum_Data;\n-   --  This the type that is used externally. Possibly this could be a private\n-   --  type, but we leave the structure exposed for now. For one thing it helps\n-   --  with debugging. Note that this package never shares an allocated Bignum\n-   --  value, so for example for X + 0, a copy of X is returned, not X itself.\n+   --  This is the type that is used externally. Possibly this could be a\n+   --  private type, but we leave the structure exposed for now. For one\n+   --  thing it helps with debugging. Note that this package never shares\n+   --  an allocated Bignum value, so for example for X + 0, a copy of X is\n+   --  returned, not X itself.\n \n    --  Note: none of the subprograms in this package modify the Bignum_Data\n    --  records referenced by Bignum arguments of mode IN."}, {"sha": "4990f433fe5b0a18a2103f03704c2deb67626a51", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -5756,14 +5756,31 @@ package body Sem_Ch6 is\n \n                declare\n                   TSS_Name : constant TSS_Name_Type := Get_TSS_Name (New_Id);\n+\n                begin\n                   if TSS_Name /= TSS_Stream_Read\n                     and then TSS_Name /= TSS_Stream_Write\n                     and then TSS_Name /= TSS_Stream_Input\n                     and then TSS_Name /= TSS_Stream_Output\n                   then\n-                     Conformance_Error\n-                       (\"\\type of & does not match!\", New_Formal);\n+                     --  Here we have a definite conformance error. It is worth\n+                     --  special casesing the error message for the case of a\n+                     --  controlling formal (which excludes null).\n+\n+                     if Is_Controlling_Formal (New_Formal) then\n+                        Error_Msg_Node_2 := Scope (New_Formal);\n+                        Conformance_Error\n+                         (\"\\controlling formal& of& excludes null, \"\n+                           & \"declaration must exclude null as well\",\n+                            New_Formal);\n+\n+                     --  Normal case (couldn't we give more detail here???)\n+\n+                     else\n+                        Conformance_Error\n+                          (\"\\type of & does not match!\", New_Formal);\n+                     end if;\n+\n                      return;\n                   end if;\n                end;"}, {"sha": "029b94b124d09e114e0f941f9fd8d8218f9e5285", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada950b1073e2b45550378fcb563ab83943684b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3ada950b1073e2b45550378fcb563ab83943684b", "patch": "@@ -11773,7 +11773,7 @@ package body Sem_Prag is\n \n          --  MODE := SUPPRESSED | CHECKED | MINIMIZED | ELIMINATED\n \n-         --  Note: MINIMIZED is allowed only if Long_Long_Integer'Size is 64\n+         --  Note: ELIMINATED is allowed only if Long_Long_Integer'Size is 64\n          --  since System.Bignums makes this assumption.\n \n          when Pragma_Overflow_Checks => Overflow_Checks : declare"}]}