{"sha": "e52c093a9fd668cddc2397719e8a5449f8cf27de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyYzA5M2E5ZmQ2NjhjZGRjMjM5NzcxOWU4YTU0NDlmOGNmMjdkZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-04-03T17:53:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-04-03T17:53:05Z"}, "message": "re PR c++/84768 (ICE with failed class template argument deduction because of invalid template parameter)\n\n/cp\n2018-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84768\n\t* pt.c (rewrite_template_parm): If the first argument is\n\terror_mark_node return it immediately.\n\t(build_deduction_guide): Check the return value of the\n\tlatter for error_mark_node.\n\t(do_class_deduction): Check the return value of the latter.\n\n/testsuite\n2018-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84768\n\t* g++.dg/cpp1z/class-deduction52.C: New.\n\nFrom-SVN: r259049", "tree": {"sha": "66afd0fff1476271b4724b3c274dc15d0101b79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66afd0fff1476271b4724b3c274dc15d0101b79a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52c093a9fd668cddc2397719e8a5449f8cf27de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52c093a9fd668cddc2397719e8a5449f8cf27de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52c093a9fd668cddc2397719e8a5449f8cf27de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52c093a9fd668cddc2397719e8a5449f8cf27de/comments", "author": null, "committer": null, "parents": [{"sha": "83afe9b528896ba26d774839c930098f4833cb87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83afe9b528896ba26d774839c930098f4833cb87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83afe9b528896ba26d774839c930098f4833cb87"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "505b2257be294d1c87041081cdda3df25c2511c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e52c093a9fd668cddc2397719e8a5449f8cf27de", "patch": "@@ -1,3 +1,12 @@\n+2018-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84768\n+\t* pt.c (rewrite_template_parm): If the first argument is\n+\terror_mark_node return it immediately.\n+\t(build_deduction_guide): Check the return value of the\n+\tlatter for error_mark_node.\n+\t(do_class_deduction): Check the return value of the latter.\n+\n 2018-04-03  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (finish_if_stmt_cond): Use"}, {"sha": "80670a4826b6ebe73a03f4518e9162b04a16c791", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e52c093a9fd668cddc2397719e8a5449f8cf27de", "patch": "@@ -25834,6 +25834,9 @@ static tree\n rewrite_template_parm (tree olddecl, unsigned index, unsigned level,\n \t\t       tree tsubst_args, tsubst_flags_t complain)\n {\n+  if (olddecl == error_mark_node)\n+    return error_mark_node;\n+\n   tree oldidx = get_template_parm_index (olddecl);\n \n   tree newtype;\n@@ -25969,6 +25972,7 @@ build_deduction_guide (tree ctor, tree outer_args, tsubst_flags_t complain)\n   else\n     {\n       ++processing_template_decl;\n+      bool ok = true;\n \n       fn_tmpl\n \t= (TREE_CODE (ctor) == TEMPLATE_DECL ? ctor\n@@ -26039,6 +26043,8 @@ build_deduction_guide (tree ctor, tree outer_args, tsubst_flags_t complain)\n \t      tree olddecl = TREE_VALUE (oldelt);\n \t      tree newdecl = rewrite_template_parm (olddecl, index, level,\n \t\t\t\t\t\t    tsubst_args, complain);\n+\t      if (newdecl == error_mark_node)\n+\t\tok = false;\n \t      tree newdef = tsubst_template_arg (TREE_PURPOSE (oldelt),\n \t\t\t\t\t\t tsubst_args, complain, ctor);\n \t      tree list = build_tree_list (newdef, newdecl);\n@@ -26060,7 +26066,10 @@ build_deduction_guide (tree ctor, tree outer_args, tsubst_flags_t complain)\n \n \t  current_template_parms = save_parms;\n \t}\n+\n       --processing_template_decl;\n+      if (!ok)\n+\treturn error_mark_node;\n     }\n \n   if (!memtmpl)\n@@ -26187,6 +26196,8 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n   for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (type)); iter; ++iter)\n     {\n       tree guide = build_deduction_guide (*iter, outer_args, complain);\n+      if (guide == error_mark_node)\n+\treturn error_mark_node;\n       if ((flags & LOOKUP_ONLYCONVERTING)\n \t  && DECL_NONCONVERTING_P (STRIP_TEMPLATE (guide)))\n \telided = true;\n@@ -26238,6 +26249,8 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n       if (gtype)\n \t{\n \t  tree guide = build_deduction_guide (gtype, outer_args, complain);\n+\t  if (guide == error_mark_node)\n+\t    return error_mark_node;\n \t  cands = lookup_add (guide, cands);\n \t}\n     }"}, {"sha": "220fd8f3e8dbfa3ff3e3d171eaf627a7c0dc02c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e52c093a9fd668cddc2397719e8a5449f8cf27de", "patch": "@@ -1,3 +1,8 @@\n+2018-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84768\n+\t* g++.dg/cpp1z/class-deduction52.C: New.\n+\n 2018-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85147"}, {"sha": "db786ce7d626fa590f5f91c5fb5cca1503078b14", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction52.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52c093a9fd668cddc2397719e8a5449f8cf27de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction52.C?ref=e52c093a9fd668cddc2397719e8a5449f8cf27de", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/84768\n+// { dg-additional-options -std=c++17 }\n+\n+template<typename> struct A {};\n+\n+template<typename T> struct B\n+{\n+  template<X Y> B(A<T>);  // { dg-error \"declared\" }\n+};\n+\n+B b = A<void>();"}]}