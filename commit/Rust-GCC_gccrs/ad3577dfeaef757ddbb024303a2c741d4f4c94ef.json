{"sha": "ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQzNTc3ZGZlYWVmNzU3ZGRiYjAyNDMwM2EyYzc0MWQ0ZjRjOTRlZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-06-23T20:26:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-06-23T20:26:07Z"}, "message": "re PR middle-end/49465 (Revision 175114 miscompiled 403.gcc in SPEC CPU 2006)\n\n\n\tPR middle-end/49465\n\t* tree-ssa-threadupate.c (fix_duplicate_block_edges): Fix condition\n\tto detect threading through joiner block.  If there was already\n\tan edge to the new target, then do not change the PHI nodes.\n\n*************** fix_duplicate_block_edges (struct redire\n\nFrom-SVN: r175351", "tree": {"sha": "43f4cd72ef049b0245309c78f7bb9bb20fa57857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f4cd72ef049b0245309c78f7bb9bb20fa57857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3577dfeaef757ddbb024303a2c741d4f4c94ef/comments", "author": null, "committer": null, "parents": [{"sha": "ddc41bb43f12f366996ac4b4edf3248f1a666966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc41bb43f12f366996ac4b4edf3248f1a666966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc41bb43f12f366996ac4b4edf3248f1a666966"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "d5c6ee59b79dd77a6f4f42f9c497914fec2dc5d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3577dfeaef757ddbb024303a2c741d4f4c94ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3577dfeaef757ddbb024303a2c741d4f4c94ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "patch": "@@ -1,3 +1,10 @@\n+2011-06-16  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/49465\n+\t* tree-ssa-threadupate.c (fix_duplicate_block_edges): Fix condition\n+\tto detect threading through joiner block.  If there was already\n+\tan edge to the new target, then do not change the PHI nodes.\n+\n 2011-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Use"}, {"sha": "0cdf8466ddb0be9d8bcb5c4523a8dbcb759b76ab", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3577dfeaef757ddbb024303a2c741d4f4c94ef/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3577dfeaef757ddbb024303a2c741d4f4c94ef/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=ad3577dfeaef757ddbb024303a2c741d4f4c94ef", "patch": "@@ -385,7 +385,7 @@ fix_duplicate_block_edges (struct redirection_data *rd,\n      to keep its control statement and redirect an outgoing edge.\n      Else we want to remove the control statement & edges, then create\n      a new outgoing edge.  In both cases we may need to update PHIs.  */\n-  if (THREAD_TARGET2 (rd->incoming_edges->e) == rd->outgoing_edge)\n+  if (THREAD_TARGET2 (rd->incoming_edges->e))\n     {\n       edge victim;\n       edge e2;\n@@ -400,8 +400,11 @@ fix_duplicate_block_edges (struct redirection_data *rd,\n       victim = find_edge (rd->dup_block, THREAD_TARGET (e)->dest);\n       e2 = redirect_edge_and_branch (victim, THREAD_TARGET2 (e)->dest);\n \n-      /* This updates the PHI at the target of the threaded edge.  */\n-      copy_phi_args (e2->dest, THREAD_TARGET2 (e), e2);\n+      /* If we redirected the edge, then we need to copy PHI arguments\n+\t at the target.  If the edge already existed (e2 != victim case),\n+\t then the PHIs in the target already have the correct arguments.  */\n+      if (e2 == victim)\n+\tcopy_phi_args (e2->dest, THREAD_TARGET2 (e), e2);\n     }\n   else\n     {"}]}