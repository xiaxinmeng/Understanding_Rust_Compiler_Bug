{"sha": "56c0e996b8de532db95bbca19548ffb92e242a0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjMGU5OTZiOGRlNTMyZGI5NWJiY2ExOTU0OGZmYjkyZTI0MmEwYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-04-07T23:47:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-07T23:47:11Z"}, "message": "c-lex.c (is_class_name): Delete declaration.\n\n        * c-lex.c (is_class_name): Delete declaration.\n        (whitespace_cr): Make static and add prototype.\n        * c-lex.h (make_pointer_declarator, reinit_parse_for_function,\n        yylex, get_directive_line): Turn declarations into prototypes.\n        (position_after_whitespace, check_newline, yyerror,, is_class_name,\n        forget_protocol_qualifiers, remember_protocol_qualifiers): Add\n        prototypes.\n        * genattr.c (extend_range, write_upcase, gen_attr, write_units): Add\n        prototypes.\n        * gencodes.c (gen_insn): Add prototype.\n        * genconfig.c (walk_insn, gen_insn, gen_expand, gen_split,\n        gen_peephole): Add prototypes.\n        * genflags.c (num_operands, gen_proto, gen_nonproto, gen_insn): Add\n        prototypes.\n        * gengenrtl.c (type_from_format, accessor_from_format, special_rtx,\n        special_format, find_formats, gendecl, genmacro, gendef, genlegend,\n        genheader, gencode): Add prototypes.\n        * genopinit.c (gen_insn): Add prototype.\n        * genoutput.c (output_prologue, output_epilogue, scan_operands,\n        process_template, validate_insn_alternatives, gen_insn, gen_peephole,\n        gen_expand, gen_split, n_occurrences): Add prototypes.\n        * genpeep.c (gen_peephole): Add prototype.\n        * loop.c (find_and_verify_loops, mark_loop_jump, prescan_loop,\n        reg_in_basic_block_p, consec_sets_invariant_p, libcall_other_reg,\n        labels_in_range_p, count_loop_regs_set, note_addr_stored,\n        loop_reg_used_before_p, scan_loop, replace_call_address,\n        skip_consec_insns, libcall_benefit, ignore_some_movables,\n        force_movables, combine_movables, rtx_equal_for_loop_p, move_movables,\n        strength_reduce, valid_initial_value_p, find_mem_givs, record_biv,\n        check_final_value, record_giv, update_giv_derive, basic_induction_var,\n        simplify_giv_expr, general_induction_var, consec_sets_giv,\n        check_dbra_loop, express_from, combine_givs_p, combine_givs,\n        product_cheap_p, maybe_eliminate_biv, maybe_eliminate_biv_1,\n        last_use_this_basic_block, record_initial, update_reg_last_use,\n        iteration_info, analyze_loop_iterations, insert_bct,\n        instrument_loop_bct, indirect_jump_in_function_p): Turn declarations\n        into prototypes.\n\nFrom-SVN: r19038", "tree": {"sha": "07927d40dcf965c978d007db17fbcebbedeca47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07927d40dcf965c978d007db17fbcebbedeca47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c0e996b8de532db95bbca19548ffb92e242a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c0e996b8de532db95bbca19548ffb92e242a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c0e996b8de532db95bbca19548ffb92e242a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c0e996b8de532db95bbca19548ffb92e242a0b/comments", "author": null, "committer": null, "parents": [{"sha": "8a63cdfc100ba67b19a2fdd2b72185adcbc4c05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a63cdfc100ba67b19a2fdd2b72185adcbc4c05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a63cdfc100ba67b19a2fdd2b72185adcbc4c05f"}], "stats": {"total": 202, "additions": 147, "deletions": 55}, "files": [{"sha": "4e7744c0cfb1c78dddca3154c9a14fb0d06ac6d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -1,3 +1,43 @@\n+Wed Apr  8 00:44:18 1998  Bernd Schmidt (crux@pool.informatik.rwth-aachen.de>\n+\n+\t* c-lex.c (is_class_name): Delete declaration.\n+\t(whitespace_cr): Make static and add prototype.\n+\t* c-lex.h (make_pointer_declarator, reinit_parse_for_function,\n+\tyylex, get_directive_line): Turn declarations into prototypes.\n+\t(position_after_whitespace, check_newline, yyerror,, is_class_name,\n+\tforget_protocol_qualifiers, remember_protocol_qualifiers): Add\n+\tprototypes.\n+\t* genattr.c (extend_range, write_upcase, gen_attr, write_units): Add\n+\tprototypes.\n+\t* gencodes.c (gen_insn): Add prototype.\n+\t* genconfig.c (walk_insn, gen_insn, gen_expand, gen_split,\n+\tgen_peephole): Add prototypes.\n+\t* genflags.c (num_operands, gen_proto, gen_nonproto, gen_insn): Add\n+\tprototypes.\n+\t* gengenrtl.c (type_from_format, accessor_from_format, special_rtx,\n+\tspecial_format, find_formats, gendecl, genmacro, gendef, genlegend,\n+\tgenheader, gencode): Add prototypes.\n+\t* genopinit.c (gen_insn): Add prototype.\n+\t* genoutput.c (output_prologue, output_epilogue, scan_operands,\n+\tprocess_template, validate_insn_alternatives, gen_insn, gen_peephole,\n+\tgen_expand, gen_split, n_occurrences): Add prototypes.\n+\t* genpeep.c (gen_peephole): Add prototype.\n+\t* loop.c (find_and_verify_loops, mark_loop_jump, prescan_loop,\n+\treg_in_basic_block_p, consec_sets_invariant_p, libcall_other_reg,\n+\tlabels_in_range_p, count_loop_regs_set, note_addr_stored,\n+\tloop_reg_used_before_p, scan_loop, replace_call_address,\n+\tskip_consec_insns, libcall_benefit, ignore_some_movables,\n+\tforce_movables, combine_movables, rtx_equal_for_loop_p, move_movables,\n+\tstrength_reduce, valid_initial_value_p, find_mem_givs, record_biv,\n+\tcheck_final_value, record_giv, update_giv_derive, basic_induction_var,\n+\tsimplify_giv_expr, general_induction_var, consec_sets_giv,\n+\tcheck_dbra_loop, express_from, combine_givs_p, combine_givs,\n+\tproduct_cheap_p, maybe_eliminate_biv, maybe_eliminate_biv_1,\n+\tlast_use_this_basic_block, record_initial, update_reg_last_use,\n+\titeration_info, analyze_loop_iterations, insert_bct,\n+\tinstrument_loop_bct, indirect_jump_in_function_p): Turn declarations\n+\tinto prototypes.\n+\n Tue Apr  7 21:48:52 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.h (LEGITIMIZE_RELOAD_ADDRESS): Define."}, {"sha": "8e9e10c8fef157cf215d424a7ec4d201ec11ab6f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -93,8 +93,6 @@ tree lastiddecl;\n \n int doing_objc_thang;\n \n-extern tree is_class_name ();\n-\n extern int yydebug;\n \n /* File used for outputting assembler code.  */\n@@ -129,6 +127,7 @@ static int nextchar = -1;\n #ifdef HANDLE_SYSV_PRAGMA\n static int handle_sysv_pragma\t\tPROTO((int));\n #endif /* HANDLE_SYSV_PRAGMA */\n+static int whitespace_cr\t\tPROTO((int));\n static int skip_white_space\t\tPROTO((int));\n static char *extend_token_buffer\tPROTO((char *));\n static int readescape\t\t\tPROTO((int *));\n@@ -334,7 +333,7 @@ yyprint (file, yychar, yylval)\n \f\n /* Iff C is a carriage return, warn about it - if appropriate -\n    and return nonzero.  */\n-int\n+static int\n whitespace_cr (c)\n      int c;\n {"}, {"sha": "5515ce4191b611d9e15cfdb20fa5ddd8e879f25c", "filename": "gcc/c-lex.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -73,8 +73,16 @@ extern tree lastiddecl;\n \n extern char *token_buffer;\t/* Pointer to token buffer.  */\n \n-extern tree make_pointer_declarator ();\n-extern void reinit_parse_for_function ();\n-extern int yylex ();\n-\n-extern char *get_directive_line ();\n+extern tree make_pointer_declarator ((tree, tree));\n+extern void reinit_parse_for_function ((void));\n+extern void position_after_whitespace PROTO((void));\n+extern int check_newline PROTO((void));\n+\n+extern int yylex PROTO((void));\n+extern void yyerror PROTO((char *));\n+\n+extern char *get_directive_line PROTO((FILE *));\n+ \n+extern void forget_protocol_qualifiers PROTO((void));\n+extern void remember_protocol_qualifiers PROTO((void));\n+extern tree is_class_name PROTO((void));"}, {"sha": "fe3457c45ec9cd87510d86d177b5c81a089f438d", "filename": "gcc/genattr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -57,6 +57,12 @@ struct function_unit\n   struct range issue_delay;\t/* Range of issue delay values.  */\n };\n \n+static void extend_range PROTO((struct range *, int, int));\n+static void write_upcase PROTO((char *));\n+static void gen_attr PROTO((rtx));\n+static void write_units PROTO((int, struct range *, struct range *,\n+\t\t\t       struct range *, struct range *,\n+\t\t\t       struct range *));\n static void\n extend_range (range, min, max)\n      struct range *range;"}, {"sha": "677c3446aeaa3da74119164c3047eb9cef693aa5", "filename": "gcc/gencodes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -39,6 +39,8 @@ void fancy_abort PROTO((void));\n \n static int insn_code_number;\n \n+static void gen_insn PROTO((rtx));\n+\n static void\n gen_insn (insn)\n      rtx insn;"}, {"sha": "ffcb5c38b8864bbb220f36a783f2a339173ae26b", "filename": "gcc/genconfig.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -50,6 +50,12 @@ char *xmalloc PROTO((unsigned));\n static void fatal ();\n void fancy_abort PROTO((void));\n \n+static void walk_insn_part PROTO((rtx, int, int));\n+static void gen_insn PROTO((rtx));\n+static void gen_expand PROTO((rtx));\n+static void gen_split PROTO((rtx));\n+static void gen_peephole PROTO((rtx));\n+\n /* RECOG_P will be non-zero if this pattern was seen in a context where it will\n    be used to recognize, rather than just generate an insn. \n "}, {"sha": "9a21ef0c265cc9edf9a319e363ed9a9566c62c7c", "filename": "gcc/genflags.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -46,6 +46,12 @@ static struct obstack call_obstack, normal_obstack;\n /* Max size of names encountered.  */\n static int max_id_len;\n \n+static int num_operands PROTO((rtx));\n+static void gen_proto PROTO((rtx));\n+static void gen_nonproto PROTO((rtx));\n+static void gen_insn PROTO((rtx));\n+\n+\n /* Count the number of match_operand's found.  */\n \n static int"}, {"sha": "6a4b3a46051fe1bfa716dda36c66768ac440271a", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -48,6 +48,18 @@ struct rtx_definition defs[] =\n \n const char *formats[NUM_RTX_CODE];\n \n+static const char *type_from_format PROTO((char));\n+static const char *accessor_from_format PROTO((char));\n+static int special_format PROTO((const char *));\n+static int special_rtx PROTO((int));\n+static void find_formats PROTO((void));\n+static void gendecl PROTO((FILE *, const char *));\n+static void genmacro PROTO((FILE *, int));\n+static void gendef PROTO((FILE *, const char *));\n+static void genlegend PROTO((FILE *));\n+static void genheader PROTO((FILE *));\n+static void gencode PROTO((FILE *));\n+\n static const char *\n type_from_format (c)\n      char c;"}, {"sha": "fad369526a6ef9d9dbb6f1c73145911a6e5980d8", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -124,6 +124,8 @@ char *optabs[] =\n /* Allow linking with print-rtl.c.  */\n char **insn_name_ptr;\n \n+static void gen_insn PROTO((rtx));\n+\n static void\n gen_insn (insn)\n      rtx insn;"}, {"sha": "85cca69c540292c8bb7bc7453e2694335aa34a40", "filename": "gcc/genoutput.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -169,10 +169,20 @@ int have_constraints;\n \n static int have_error;\n \f\n+static void output_prologue PROTO((void));\n+static void output_epilogue PROTO((void));\n+static void scan_operands PROTO((rtx, int, int));\n+static void process_template PROTO((struct data *, char *));\n+static void validate_insn_alternatives PROTO((struct data *));\n+static void gen_insn PROTO((rtx));\n+static void gen_peephole PROTO((rtx));\n+static void gen_expand PROTO((rtx));\n+static void gen_split PROTO((rtx));\n+static int n_occurrences PROTO((int, char *));\n+\f\n static void\n output_prologue ()\n {\n-\n   printf (\"/* Generated automatically by the program `genoutput'\\n\\\n from the machine description file `md'.  */\\n\\n\");\n "}, {"sha": "ab21d401fa1ae0b083ea6098f8e95ebe45ecf7be", "filename": "gcc/genpeep.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -44,7 +44,6 @@ struct link\n };\n \n char *xmalloc PROTO((unsigned));\n-static void match_rtx PROTO((rtx, struct link *, int));\n static void fatal ();\n void fancy_abort PROTO((void));\n \n@@ -59,6 +58,8 @@ static int n_operands;\n \n static int insn_code_number = 0;\n \n+static void gen_peephole PROTO((rtx));\n+static void match_rtx PROTO((rtx, struct link *, int));\n static void print_path PROTO((struct link *));\n static void print_code PROTO((RTX_CODE));\n \f"}, {"sha": "4d2a6627dd83458c15c34db36132f9e595ccca2e", "filename": "gcc/loop.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c0e996b8de532db95bbca19548ffb92e242a0b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=56c0e996b8de532db95bbca19548ffb92e242a0b", "patch": "@@ -277,67 +277,67 @@ FILE *loop_dump_stream;\n \n /* Forward declarations.  */\n \n-static void find_and_verify_loops ();\n-static void mark_loop_jump ();\n-static void prescan_loop ();\n-static int reg_in_basic_block_p ();\n-static int consec_sets_invariant_p ();\n-static rtx libcall_other_reg ();\n-static int labels_in_range_p ();\n-static void count_loop_regs_set ();\n-static void note_addr_stored ();\n-static int loop_reg_used_before_p ();\n-static void scan_loop ();\n+static void find_and_verify_loops PROTO((rtx));\n+static void mark_loop_jump PROTO((rtx, int));\n+static void prescan_loop PROTO((rtx, rtx));\n+static int reg_in_basic_block_p PROTO((rtx, rtx));\n+static int consec_sets_invariant_p PROTO((rtx, int, rtx));\n+static rtx libcall_other_reg PROTO((rtx, rtx));\n+static int labels_in_range_p PROTO((rtx, int));\n+static void count_loop_regs_set PROTO((rtx, rtx, char *, rtx *, int *, int));\n+static void note_addr_stored PROTO((rtx));\n+static int loop_reg_used_before_p PROTO((rtx, rtx, rtx, rtx, rtx));\n+static void scan_loop PROTO((rtx, rtx, int, int));\n #if 0\n-static void replace_call_address ();\n+static void replace_call_address PROTO(());\n #endif\n-static rtx skip_consec_insns ();\n-static int libcall_benefit ();\n-static void ignore_some_movables ();\n-static void force_movables ();\n-static void combine_movables ();\n-static int rtx_equal_for_loop_p ();\n-static void move_movables ();\n-static void strength_reduce ();\n-static int valid_initial_value_p ();\n-static void find_mem_givs ();\n-static void record_biv ();\n-static void check_final_value ();\n-static void record_giv ();\n-static void update_giv_derive ();\n-static int basic_induction_var ();\n-static rtx simplify_giv_expr ();\n-static int general_induction_var ();\n-static int consec_sets_giv ();\n-static int check_dbra_loop ();\n-static rtx express_from ();\n-static int combine_givs_p ();\n-static void combine_givs ();\n-static int product_cheap_p ();\n-static int maybe_eliminate_biv ();\n-static int maybe_eliminate_biv_1 ();\n-static int last_use_this_basic_block ();\n-static void record_initial ();\n-static void update_reg_last_use ();\n+static rtx skip_consec_insns PROTO((rtx, int));\n+static int libcall_benefit PROTO((rtx));\n+static void ignore_some_movables PROTO((struct movable *));\n+static void force_movables PROTO((struct movable *));\n+static void combine_movables PROTO((struct movable *, int));\n+static int rtx_equal_for_loop_p PROTO((rtx, rtx, struct movable *));\n+static void move_movables PROTO((struct movable *, int, int, rtx, rtx, int));\n+static void strength_reduce PROTO((rtx, rtx, rtx, int, rtx, rtx, int));\n+static int valid_initial_value_p PROTO((rtx, rtx, int, rtx));\n+static void find_mem_givs PROTO((rtx, rtx, int, rtx, rtx));\n+static void record_biv PROTO((struct induction *, rtx, rtx, rtx, rtx, int, int));\n+static void check_final_value PROTO((struct induction *, rtx, rtx));\n+static void record_giv PROTO((struct induction *, rtx, rtx, rtx, rtx, rtx, int, enum g_types, int, rtx *, rtx, rtx));\n+static void update_giv_derive PROTO((rtx));\n+static int basic_induction_var PROTO((rtx, enum machine_mode, rtx, rtx, rtx *, rtx *));\n+static rtx simplify_giv_expr PROTO((rtx, int *));\n+static int general_induction_var PROTO((rtx, rtx *, rtx *, rtx *));\n+static int consec_sets_giv PROTO((int, rtx, rtx, rtx, rtx *, rtx *));\n+static int check_dbra_loop PROTO((rtx, int, rtx));\n+static rtx express_from PROTO((struct induction *, struct induction *));\n+static int combine_givs_p PROTO((struct induction *, struct induction *));\n+static void combine_givs PROTO((struct iv_class *));\n+static int product_cheap_p PROTO((rtx, rtx));\n+static int maybe_eliminate_biv PROTO((struct iv_class *, rtx, rtx, int, int, int));\n+static int maybe_eliminate_biv_1 PROTO((rtx, rtx, struct iv_class *, int, rtx));\n+static int last_use_this_basic_block PROTO((rtx, rtx));\n+static void record_initial PROTO((rtx, rtx));\n+static void update_reg_last_use PROTO((rtx, rtx));\n \n #ifdef HAIFA\n /* This is extern from unroll.c */\n-void iteration_info ();\n+extern void iteration_info PROTO((rtx, rtx *, rtx *, rtx, rtx));\n \n /* Two main functions for implementing bct:\n    first - to be called before loop unrolling, and the second - after */\n #ifdef HAVE_decrement_and_branch_on_count\n-static void analyze_loop_iterations ();\n-static void insert_bct ();\n+static void analyze_loop_iterations PROTO((rtx, rtx));\n+static void insert_bct PROTO((rtx, rtx));\n \n /* Auxiliary function that inserts the bct pattern into the loop */\n-static void instrument_loop_bct ();\n+static void instrument_loop_bct PROTO((rtx, rtx, rtx));\n #endif /* HAVE_decrement_and_branch_on_count */\n #endif  /* HAIFA */\n \n /* Indirect_jump_in_function is computed once per function.  */\n int indirect_jump_in_function = 0;\n-static int indirect_jump_in_function_p ();\n+static int indirect_jump_in_function_p PROTO((rtx));\n \n \f\n /* Relative gain of eliminating various kinds of operations.  */"}]}