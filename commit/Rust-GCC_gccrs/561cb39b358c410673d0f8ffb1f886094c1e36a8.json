{"sha": "561cb39b358c410673d0f8ffb1f886094c1e36a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxY2IzOWIzNThjNDEwNjczZDBmOGZmYjFmODg2MDk0YzFlMzZhOA==", "commit": {"author": {"name": "Jonathan Larmour", "email": "jlarmour@cygnus.co.uk", "date": "1999-02-07T15:40:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-07T15:40:17Z"}, "message": "new\n\nFrom-SVN: r25071", "tree": {"sha": "27c10242e71ecac2d1c8c44d95c3f65e823d44e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27c10242e71ecac2d1c8c44d95c3f65e823d44e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561cb39b358c410673d0f8ffb1f886094c1e36a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561cb39b358c410673d0f8ffb1f886094c1e36a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561cb39b358c410673d0f8ffb1f886094c1e36a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561cb39b358c410673d0f8ffb1f886094c1e36a8/comments", "author": null, "committer": null, "parents": [{"sha": "54281b2919bc5dd620e1d982f3f7f7873a76d3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54281b2919bc5dd620e1d982f3f7f7873a76d3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54281b2919bc5dd620e1d982f3f7f7873a76d3cc"}], "stats": {"total": 369, "additions": 366, "deletions": 3}, "files": [{"sha": "d51803cadb6f8daf5f9eb6436a241c99af3c85e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -1,3 +1,20 @@\n+1999-02-07  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n+\n+\t* g++.dg/special/ecos.exp: New driver for new tests with special\n+\trequirements\n+\t\n+\t* g++.dg/special/conpr-1.C: New test\n+\t* g++.dg/special/conpr-2.C: New test\n+\t* g++.dg/special/conpr-2a.C: New test\n+\t* g++.dg/special/conpr-3.C: New test\n+\t* g++.dg/special/conpr-3a.C: New test\n+\t* g++.dg/special/conpr-3b.C: New test\n+\t\n+\t* lib/g++-dg.exp: New driver file, based on lib/gcc-dg.exp to\n+\tallow g++ to use the dg driver\n+\n+\t* README: Add comment about g++.dg directory\n+\n Sat Feb  6 18:00:38 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* README: Update email addresses."}, {"sha": "2b336f5b29d2bfe24edabf4c559ca860249e2422", "filename": "gcc/testsuite/README", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -7,7 +7,7 @@ need a current DejaGnu snapshot, which is available from\n ftp://egcs.cygnus.com/pub/egcs/infrastructure, for example.\n \n Most of these tests were originally developed and/or collected by\n-Cygnus Support, but these days many are being added by the EGCS\n+Cygnus Solutions, but these days many are being added by the EGCS\n developers.\n \n These tests are included \"as is\". If any of them fails, do not report\n@@ -22,8 +22,8 @@ the EGCS tree. `make check-g++` runs the C++ testsuite only.\n \n STRUCTURE OF THE TESTSUITE\n \n-All C++ tests reside in subdirectories of g++.old-deja, based on the\n-following structure:\n+Almost all C++ tests reside in subdirectories of g++.old-deja, based on\n+the following structure:\n \n   g++.benjamin\tTests by Benjamin Koz\n   g++.bob\n@@ -43,3 +43,8 @@ following structure:\n   g++.rfg\n   g++.robertl\tTests from egcs-bugs@egcs.cygnus.com, gathered by Robert Lipe\n \t\n+g++.old-deja uses a fixed driver for all g++ tests based on the old\n+DejaGnu drivers. But just because its old, doesn't mean its redundant!\n+Tests that want to use the normal dg.exp driver can be put in g++.dg instead.\n+This may be required for platform-specific tests, or tests with other\n+special requirements."}, {"sha": "8ab6bfee2584186df550ee07248d7f8145ec5341", "filename": "gcc/testsuite/g++.dg/special/conpr-1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+public:\n+    foo_t(void) { x=1; }\n+    int get(void) { return x; }\n+};\n+\n+static foo_t foo __attribute__((init_priority(5000)));\n+\n+int main(void) {\n+\n+    if (foo.get())\n+        exit(0);\n+    else\n+        abort();\n+}"}, {"sha": "07ba8ab9e89b1a1e283091059422dcc3d93fa72d", "filename": "gcc/testsuite/g++.dg/special/conpr-2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+    static int count;\n+public:\n+    foo_t(void) { x=++count; }\n+    int get(void) { return x; }\n+};\n+\n+int foo_t::count;\n+\n+extern foo_t foo1, foo2;\n+\n+int main(void) {\n+\n+    if ( (foo1.get() != 2) || (foo2.get() != 1) )\n+        abort();\n+    exit(0);\n+}"}, {"sha": "69fb7d648319f5cd115e5c077d784750c10f08f0", "filename": "gcc/testsuite/g++.dg/special/conpr-2a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2a.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+    static int count;\n+public:\n+    foo_t(void) { x=++count; }\n+    int get(void) { return x; }\n+};\n+\n+foo_t foo1 __attribute__((init_priority(6000)));\n+foo_t foo2 __attribute__((init_priority(5000)));"}, {"sha": "07ba8ab9e89b1a1e283091059422dcc3d93fa72d", "filename": "gcc/testsuite/g++.dg/special/conpr-3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+    static int count;\n+public:\n+    foo_t(void) { x=++count; }\n+    int get(void) { return x; }\n+};\n+\n+int foo_t::count;\n+\n+extern foo_t foo1, foo2;\n+\n+int main(void) {\n+\n+    if ( (foo1.get() != 2) || (foo2.get() != 1) )\n+        abort();\n+    exit(0);\n+}"}, {"sha": "b237bb57f36e9fb27f53dda84af71df0551cf3ef", "filename": "gcc/testsuite/g++.dg/special/conpr-3a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3a.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+    static int count;\n+public:\n+    foo_t(void) { x=++count; }\n+    int get(void) { return x; }\n+};\n+\n+foo_t foo1 __attribute__((init_priority(6000)));"}, {"sha": "b5efa0c35f68997318b96df8de8aa8fad8ffbf98", "filename": "gcc/testsuite/g++.dg/special/conpr-3b.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3b.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+class foo_t {\n+    int x;\n+    static int count;\n+public:\n+    foo_t(void) { x=++count; }\n+    int get(void) { return x; }\n+};\n+\n+foo_t foo2 __attribute__((init_priority(5000)));"}, {"sha": "34a54b7f428a82ce22f12cf67c2cafde53f1e48b", "filename": "gcc/testsuite/g++.dg/special/ecos.exp", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,75 @@\n+# Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# jlarmour@cygnus.co.uk\n+\n+# This file was written by Jonathan Larmour (jlarmour@cygnus.co.uk).\n+\n+# G++ testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+###########\n+# conpr-1.C\n+###########\n+\n+dg-init\n+dg-runtest \"$srcdir/$subdir/conpr-1.C\" \"-finit-priority\" \"\"\n+dg-finish\n+\n+\n+###########\n+# conpr-2.C\n+###########\n+\n+dg-init\n+\n+set lines [g++_target_compile \"$srcdir/$subdir/conpr-2a.C\" \"conpr-2a.o\" object \"additional_flags=-finit-priority\"]\n+if ![string match \"\" $lines] then {\n+    fail \"conpr-2a.o\"\n+} else {\n+    dg-runtest \"$srcdir/$subdir/conpr-2.C\" \"conpr-2a.o\" \"-finit-priority\" \n+    file delete conpr-2a.o\n+}\n+dg-finish\n+\n+\n+###########\n+# conpr-3.C\n+###########\n+\n+dg-init\n+\n+set lines [g++_target_compile \"$srcdir/$subdir/conpr-3a.C\" \"conpr-3a.o\" object \"additional_flags=-finit-priority\"]\n+if ![string match \"\" $lines] then {\n+    fail \"conpr-3a.o\"\n+} else {\n+    set lines [g++_target_compile \"$srcdir/$subdir/conpr-3b.C\" \"conpr-3b.o\" object \"additional_flags=-finit-priority\"]\n+    if ![string match \"\" $lines] then {\n+        fail \"conpr-3b.o\"\n+    } else {\n+        # run it with objects both ways around!\n+        dg-runtest \"$srcdir/$subdir/conpr-3.C\" \"conpr-3a.o conpr-3b.o\" \"-finit-priority\"\n+        dg-runtest \"$srcdir/$subdir/conpr-3.C\" \"conpr-3b.o conpr-3a.o\" \"-finit-priority\"\n+        file delete conpr-3a.o conpr-3b.o\n+    }\n+}\n+dg-finish\n+\n+\n+### EOF ecos.exp"}, {"sha": "53b81669172e73abe645f62555f75c36f2bab4f2", "filename": "gcc/testsuite/g++.old-deja/g++.other/typedef6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef6.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,17 @@\n+// Submitted by Jason Merrill <jason@cygnus.com>.\n+// Bug: g++ fails to see through the T typedef in the C ctor.\n+// Build don't link:\n+\n+struct A {\n+  A (int) { }\n+};\n+\n+typedef A T;\n+\n+struct B: public virtual T {\n+  B (): T(1) { }\n+};\n+\n+struct C: public B {\n+  C (): T(1) { }\n+};"}, {"sha": "36b743848c4e83f6f3b7ce8c5050e58f13c61b62", "filename": "gcc/testsuite/g++.old-deja/g++.pt/nttp1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp1.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,21 @@\n+// Test for nested template template parameter feature\n+\n+template <template<template <class> class> class TTT> struct C\n+{\n+\tint f();\n+};\n+\n+template <template<template <class> class> class TTT> int C<TTT>::f()\n+{\n+\treturn 0;\n+}\n+\n+template <template <class> class TT> struct D\n+{\n+};\n+\n+int main()\n+{\n+\tC<D> c;\n+\tc.f();\n+}"}, {"sha": "08781daf5169d2c5f4f9cca179f539d25098a143", "filename": "gcc/testsuite/g++.old-deja/g++.pt/nttp2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnttp2.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,30 @@\n+// Test for nested template template parameter feature\n+\n+template <template<template <class> class> class TTT> struct C\n+{\n+\tint f() { return 0; }\n+};\n+\n+template <template <class> class TT> struct D\n+{\n+\tint\ta;\n+};\n+\n+template <template <class> class TT> struct E\n+{\n+\tint\ta;\n+\tint\tb;\n+};\n+\n+template <template <template <template<class> class> class> class TTT> \n+int g(TTT<E> t)\n+{\n+\tTTT<D> tt;\n+\treturn tt.f();\n+}\n+\n+int main()\n+{\n+\tC<E> c;\n+\tg(c);\n+}"}, {"sha": "10af608bcbab7b00793a21994fc5488bd5ee1832", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp55.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp55.C?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+\n+// Testing overloading of function argument involving template template\n+// parameters\n+\n+// Reported by Thomus Kunert <kunert@physik.tu-dresden.de>\n+\n+template<class A>\n+class H{};\n+\n+template <class T>\n+void f( const T& ){}                      // #1\n+\n+template< template<class, class> class X, \n+\tclass A, class B>\n+void f( const X<A,B> & x )                // #2\n+{}\n+\n+int main()\n+{\n+    H<int> h;\n+    f(h);                                 // #3\n+}"}, {"sha": "cad429e729e26375d9ee4ecf6ea04d311db63393", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561cb39b358c410673d0f8ffb1f886094c1e36a8/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=561cb39b358c410673d0f8ffb1f886094c1e36a8", "patch": "@@ -0,0 +1,83 @@\n+#   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-g++@prep.ai.mit.edu\n+\n+# Define g++ callbacks for dg.exp.\n+\n+load_lib dg.exp\n+\n+proc g++-dg-test { prog do_what extra_tool_flags } {\n+    # Set up the compiler flags, based on what we're going to do.\n+\n+    switch $do_what {\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"a.out\"\n+\t    # The following line is needed for targets like the i960 where\n+\t    # the default output file is b.out.  Sigh.\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./a.out\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    remote_file build delete $output_file;\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n+    }\n+    set options \"\"\n+    if { $extra_tool_flags != \"\" } {\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n+    }\n+\n+    set comp_output [g++_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+\n+proc g++-dg-prune { system text } {\n+\n+    # If we see \"region xxx is full\" then the testcase is too big for ram.\n+    # This is tricky to deal with in a large testsuite like c-torture so\n+    # deal with it here.  Just mark the testcase as unsupported.\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $text] {\n+\t# The format here is important.  See dg.exp.\n+\treturn \"::unsupported::memory full\"\n+    }\n+\n+    return $text\n+}"}]}