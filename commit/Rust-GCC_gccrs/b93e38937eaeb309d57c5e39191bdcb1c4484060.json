{"sha": "b93e38937eaeb309d57c5e39191bdcb1c4484060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzZTM4OTM3ZWFlYjMwOWQ1N2M1ZTM5MTkxYmRjYjFjNDQ4NDA2MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-06-13T02:09:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-06-13T02:09:18Z"}, "message": "extend.texi (Function Attributes): Document SH's sp_switch and trap_exit.\n\n* doc/extend.texi (Function Attributes): Document SH's sp_switch\nand trap_exit.\n\nFrom-SVN: r43293", "tree": {"sha": "b59d0afb62e473b8633d53e96bbf3a59f7f15e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59d0afb62e473b8633d53e96bbf3a59f7f15e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93e38937eaeb309d57c5e39191bdcb1c4484060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93e38937eaeb309d57c5e39191bdcb1c4484060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93e38937eaeb309d57c5e39191bdcb1c4484060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93e38937eaeb309d57c5e39191bdcb1c4484060/comments", "author": null, "committer": null, "parents": [{"sha": "9aaa9ee0262ab067d2a1c0ccb1726564df328cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aaa9ee0262ab067d2a1c0ccb1726564df328cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aaa9ee0262ab067d2a1c0ccb1726564df328cce"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "91162d51ee99a6392a26aa8935e09100878f02ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e38937eaeb309d57c5e39191bdcb1c4484060/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e38937eaeb309d57c5e39191bdcb1c4484060/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b93e38937eaeb309d57c5e39191bdcb1c4484060", "patch": "@@ -1,3 +1,8 @@\n+2001-06-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* doc/extend.texi (Function Attributes): Document SH's sp_switch\n+\tand trap_exit.\n+\n 2001-06-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/invoke.texi: Use more logical markup.  Use TeX quotes,"}, {"sha": "3b08a50d1a28a15cfdef952d6158b41e6e6cd71e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e38937eaeb309d57c5e39191bdcb1c4484060/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e38937eaeb309d57c5e39191bdcb1c4484060/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b93e38937eaeb309d57c5e39191bdcb1c4484060", "patch": "@@ -1935,22 +1935,15 @@ and 64 entries on the H8/300H) and shares space with the interrupt vector.\n You must use GAS and GLD from GNU binutils version 2.7 or later for\n this option to work correctly.\n \n-@item interrupt_handler\n-@cindex interrupt handler functions on the H8/300 processors\n-Use this option on the H8/300 and H8/300H to indicate that the specified\n-function is an interrupt handler.  The compiler will generate function\n-entry and exit sequences suitable for use in an interrupt handler when this\n-attribute is present.\n-\n @item interrupt\n @cindex interrupt handler functions\n Use this option on the ARM, AVR and M32R/D ports to indicate that the\n specified function is an interrupt handler.  The compiler will generate\n function entry and exit sequences suitable for use in an interrupt\n handler when this attribute is present.\n \n-Note, interrupt handlers for the H8/300 and H8/300H processors can be\n-specified via the @code{interrupt_handler} attribute.\n+Note, interrupt handlers for the H8/300, H8/300H and SH processors can\n+be specified via the @code{interrupt_handler} attribute.\n \n Note, on the AVR interrupts will be enabled inside the function.\n \n@@ -1963,6 +1956,29 @@ void f () __attribute__ ((interrupt (\"IRQ\")));\n \n Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF.\n \n+@item interrupt_handler\n+@cindex interrupt handler functions on the H8/300 and SH processors\n+Use this option on the H8/300, H8/300H and SH to indicate that the\n+specified function is an interrupt handler.  The compiler will generate\n+function entry and exit sequences suitable for use in an interrupt\n+handler when this attribute is present.\n+\n+@item sp_switch\n+Use this option on the SH to indicate an @code{interrupt_handler}\n+function should switch to an alternate stack.  It expects a string\n+argument that names a global variable holding the address of the\n+alternate stack.\n+\n+@smallexample\n+void *alt_stack;\n+void f () __attribute__ ((interrupt_handler, sp_switch (\"alt_stack\")));\n+@end smallexample\n+\n+@item trap_exit\n+Use this option on the SH for an @code{interrupt_handle} to return using\n+@code{trapa} instead of @code{rte}.  This attribute expects an integer\n+argument specifying the trap number to be used.\n+\n @item eightbit_data\n @cindex eight bit data on the H8/300 and H8/300H\n Use this option on the H8/300 and H8/300H to indicate that the specified"}]}