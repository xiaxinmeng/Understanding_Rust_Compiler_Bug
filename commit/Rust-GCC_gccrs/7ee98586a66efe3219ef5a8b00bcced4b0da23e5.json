{"sha": "7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlOTg1ODZhNjZlZmUzMjE5ZWY1YThiMDBiY2NlZDRiMGRhMjNlNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-20T09:10:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-20T09:10:53Z"}, "message": "re PR rtl-optimization/91347 (hppa: wrong code generated with tail call optimisation)\n\n\tPR rtl-optimization/91347\n\t* dse.c (scan_insn): Call add_wild_read for non-const/memset tail calls\n\tbefore reload if HARD_FRAME_POINTER_IS_ARG_POINTER.\n\nFrom-SVN: r274708", "tree": {"sha": "99b6fb388126ba631bb521fc0e6c659b39eedb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b6fb388126ba631bb521fc0e6c659b39eedb97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/comments", "author": null, "committer": null, "parents": [{"sha": "257caa552bf930e2770100de70a459a4ede837c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257caa552bf930e2770100de70a459a4ede837c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257caa552bf930e2770100de70a459a4ede837c0"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "7130cdab526dde9584a2907f6c38aa0dc35d321a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "patch": "@@ -1,3 +1,9 @@\n+2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/91347\n+\t* dse.c (scan_insn): Call add_wild_read for non-const/memset tail calls\n+\tbefore reload if HARD_FRAME_POINTER_IS_ARG_POINTER.\n+\n 2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* calls.h (function_arg_info): Add a pass_by_reference field,"}, {"sha": "5e270f9a5b477627a73e1f77e00fabbe3a315773", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "patch": "@@ -2539,10 +2539,13 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \t\tclear_rhs_from_active_local_stores ();\n \t    }\n \t}\n-      else if (SIBLING_CALL_P (insn) && reload_completed)\n+      else if (SIBLING_CALL_P (insn)\n+\t       && (reload_completed || HARD_FRAME_POINTER_IS_ARG_POINTER))\n \t/* Arguments for a sibling call that are pushed to memory are passed\n \t   using the incoming argument pointer of the current function.  After\n-\t   reload that might be (and likely is) frame pointer based.  */\n+\t   reload that might be (and likely is) frame pointer based.  And, if\n+\t   it is a frame pointer on the target, even before reload we need to\n+\t   kill frame pointer based stores.  */\n \tadd_wild_read (bb_info);\n       else\n \t/* Every other call, including pure functions, may read any memory"}, {"sha": "e4cc820f0f71a163d837ba8409f88b89b3bac96e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20190820-1.c: New test.\n+\n 2019-08-20  Richard Biener  <rguenther@suse.de>\n \n \tPR target/91498"}, {"sha": "6a06eff757143597189ebe1f0668d5673a382731", "filename": "gcc/testsuite/gcc.c-torture/execute/20190820-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190820-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee98586a66efe3219ef5a8b00bcced4b0da23e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190820-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190820-1.c?ref=7ee98586a66efe3219ef5a8b00bcced4b0da23e5", "patch": "@@ -0,0 +1,111 @@\n+/* PR rtl-optimization/91347 */\r\n+/* Reported by John David Anglin <danglin@gcc.gnu.org> */\r\n+\r\n+typedef unsigned short __u16;\r\n+typedef __signed__ int __s32;\r\n+typedef unsigned int __u32;\r\n+typedef __signed__ long long __s64;\r\n+typedef unsigned long long __u64;\r\n+typedef __u16 u16;\r\n+typedef __s32 s32;\r\n+typedef __u32 u32;\r\n+typedef __u64 u64;\r\n+typedef _Bool bool;\r\n+typedef s32 int32_t;\r\n+typedef u32 uint32_t;\r\n+typedef u64 uint64_t;\r\n+\r\n+char hex_asc_upper[16];\r\n+u16 decpair[100];\r\n+\r\n+static __attribute__ ((noipa)) void\r\n+put_dec_full4 (char *buf, unsigned r)\r\n+{\r\n+ unsigned q;\r\n+ q = (r * 0x147b) >> 19;\r\n+ *((u16 *)buf) = decpair[r - 100*q];\r\n+ buf += 2;\r\n+ *((u16 *)buf) = decpair[q];\r\n+}\r\n+\r\n+static __attribute__ ((noipa)) unsigned\r\n+put_dec_helper4 (char *buf, unsigned x)\r\n+{\r\n+  uint32_t q = (x * (uint64_t)0x346DC5D7) >> 43;\r\n+  put_dec_full4(buf, x - q * 10000);\r\n+  return q;\r\n+}\r\n+\r\n+static __attribute__ ((noipa)) char *\r\n+put_dec (char *buf, unsigned long long n)\r\n+{\r\n+ uint32_t d3, d2, d1, q, h;\r\n+ d1 = ((uint32_t)n >> 16);\r\n+ h = (n >> 32);\r\n+ d2 = (h ) & 0xffff;\r\n+ d3 = (h >> 16);\r\n+ q = 656 * d3 + 7296 * d2 + 5536 * d1 + ((uint32_t)n & 0xffff);\r\n+ q = put_dec_helper4(buf, q);\r\n+ q += 7671 * d3 + 9496 * d2 + 6 * d1;\r\n+ q = put_dec_helper4(buf+4, q);\r\n+ q += 4749 * d3 + 42 * d2;\r\n+ q = put_dec_helper4(buf+8, q);\r\n+ return buf;\r\n+}\r\n+\r\n+struct printf_spec {\r\n+ unsigned int type:8;\r\n+ signed int field_width:24;\r\n+ unsigned int flags:8;\r\n+ unsigned int base:8;\r\n+ signed int precision:16;\r\n+} __attribute__((__packed__));\r\n+\r\n+static __attribute__ ((noipa)) char *\r\n+number (char *buf, char *end, unsigned long long num, struct printf_spec spec)\r\n+{\r\n+\r\n+ char tmp[3 * sizeof(num)] __attribute__((__aligned__(2)));\r\n+ char sign;\r\n+ char locase;\r\n+ int need_pfx = ((spec.flags & 64) && spec.base != 10);\r\n+ int i;\r\n+ bool is_zero = num == 0LL;\r\n+ int field_width = spec.field_width;\r\n+ int precision = spec.precision;\r\n+\r\n+ i = 0;\r\n+ if (num < spec.base)\r\n+  tmp[i++] = hex_asc_upper[num] | locase;\r\n+ else if (spec.base != 10) {\r\n+  int mask = spec.base - 1;\r\n+  int shift = 3;\r\n+  if (spec.base == 16)\r\n+   shift = 4;\r\n+  else\r\n+    __builtin_abort ();\r\n+  do {\r\n+   tmp[i++] = (hex_asc_upper[((unsigned char)num) & mask] | locase);\r\n+   num >>= shift;\r\n+  } while (num);\r\n+ } else {\r\n+  i = put_dec(tmp, num) - tmp;\r\n+ }\r\n+ return buf;\r\n+}\r\n+\r\n+static __attribute__ ((noipa)) char *\r\n+pointer_string (char *buf, char *end, const void *ptr, struct printf_spec spec)\r\n+{\r\n+ spec.base = 16;\r\n+ spec.flags = 0;\r\n+ return number(buf, end, 100, spec);\r\n+}\r\n+\r\n+int\r\n+main (void)\r\n+{\r\n+  struct printf_spec spec;\r\n+  char *s = pointer_string (0, 0, 0, spec);\r\n+  return 0;\r\n+}\r"}]}