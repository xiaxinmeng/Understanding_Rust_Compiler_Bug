{"sha": "7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "node_id": "C_kwDOANBUbNoAKDdkN2UyMTQ5Y2RiNmIwYzM3ZTAxZGY3NzQ1Y2I1NTFmYmVkMzE3ZjY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T15:18:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T15:18:16Z"}, "message": "libstdc++: Implement ranges::slide_view from P2442R1\n\nThis also implements the LWG 3711 and 3712 changes to slide_view.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__detail::__slide_caches_nothing): Define.\n\t(__detail::__slide_caches_last): Define.\n\t(__detail::__slide_caches_first): Define.\n\t(slide_view): Define.\n\t(enable_borrowed_range<slide_view>): Define.\n\t(slide_view::_Iterator): Define.\n\t(slide_view::_Sentinel): Define.\n\t(views::__detail::__can_slide_view): Define.\n\t(views::_Slide, views::slide): Define.\n\t* testsuite/std/ranges/adaptors/slide/1.cc: New test.", "tree": {"sha": "e18fb21017c94e39e5d1a93e1dfe3042fd454074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e18fb21017c94e39e5d1a93e1dfe3042fd454074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e2149cdb6b0c37e01df7745cb551fbed317f6/comments", "author": null, "committer": null, "parents": [{"sha": "5d84a4418aa962a715dc74998fea2a7de9d4042c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d84a4418aa962a715dc74998fea2a7de9d4042c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d84a4418aa962a715dc74998fea2a7de9d4042c"}], "stats": {"total": 468, "additions": 468, "deletions": 0}, "files": [{"sha": "44a4df8b5d585a0db71541754793747b64824f10", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e2149cdb6b0c37e01df7745cb551fbed317f6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e2149cdb6b0c37e01df7745cb551fbed317f6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "patch": "@@ -6313,6 +6313,369 @@ namespace views::__adaptor\n \n     inline constexpr _Chunk chunk;\n   }\n+\n+  namespace __detail\n+  {\n+    template<typename _Vp>\n+      concept __slide_caches_nothing = random_access_range<_Vp> && sized_range<_Vp>;\n+\n+    template<typename _Vp>\n+      concept __slide_caches_last\n+      = !__slide_caches_nothing<_Vp> && bidirectional_range<_Vp> && common_range<_Vp>;\n+\n+    template<typename _Vp>\n+      concept __slide_caches_first\n+      = !__slide_caches_nothing<_Vp> && !__slide_caches_last<_Vp>;\n+  }\n+\n+  template<forward_range _Vp>\n+    requires view<_Vp>\n+  class slide_view : public view_interface<slide_view<_Vp>>\n+  {\n+    _Vp _M_base;\n+    range_difference_t<_Vp> _M_n;\n+    [[no_unique_address]]\n+      __detail::__maybe_present_t<__detail::__slide_caches_first<_Vp>,\n+\t\t\t\t  __detail::_CachedPosition<_Vp>> _M_cached_begin;\n+    [[no_unique_address]]\n+      __detail::__maybe_present_t<__detail::__slide_caches_last<_Vp>,\n+\t\t\t\t  __detail::_CachedPosition<_Vp>> _M_cached_end;\n+\n+    template<bool> class _Iterator;\n+    class _Sentinel;\n+\n+  public:\n+    constexpr explicit\n+    slide_view(_Vp __base, range_difference_t<_Vp> __n)\n+    : _M_base(std::move(__base)), _M_n(__n)\n+    { __glibcxx_assert(__n > 0); }\n+\n+    constexpr auto\n+    begin() requires (!(__detail::__simple_view<_Vp>\n+\t\t\t&& __detail::__slide_caches_nothing<const _Vp>))\n+    {\n+      if constexpr (__detail::__slide_caches_first<_Vp>)\n+\t{\n+\t  iterator_t<_Vp> __it;\n+\t  if (_M_cached_begin._M_has_value())\n+\t    __it = _M_cached_begin._M_get(_M_base);\n+\t  else\n+\t    {\n+\t      __it = ranges::next(ranges::begin(_M_base), _M_n - 1, ranges::end(_M_base));\n+\t      _M_cached_begin._M_set(_M_base, __it);\n+\t    }\n+\t  return _Iterator<false>(ranges::begin(_M_base), std::move(__it), _M_n);\n+\t}\n+      else\n+\treturn _Iterator<false>(ranges::begin(_M_base), _M_n);\n+    }\n+\n+    constexpr auto\n+    begin() const requires __detail::__slide_caches_nothing<const _Vp>\n+    { return _Iterator<true>(ranges::begin(_M_base), _M_n); }\n+\n+    constexpr auto\n+    end() requires (!(__detail::__simple_view<_Vp>\n+\t\t      && __detail::__slide_caches_nothing<const _Vp>))\n+    {\n+      if constexpr (__detail::__slide_caches_nothing<_Vp>)\n+\treturn _Iterator<false>(ranges::begin(_M_base) + range_difference_t<_Vp>(size()),\n+\t\t\t\t_M_n);\n+      else if constexpr (__detail::__slide_caches_last<_Vp>)\n+\t{\n+\t  iterator_t<_Vp> __it;\n+\t  if (_M_cached_end._M_has_value())\n+\t    __it = _M_cached_end._M_get(_M_base);\n+\t  else\n+\t    {\n+\t      __it = ranges::prev(ranges::end(_M_base), _M_n - 1, ranges::begin(_M_base));\n+\t      _M_cached_end._M_set(_M_base, __it);\n+\t    }\n+\t  return _Iterator<false>(std::move(__it), _M_n);\n+\t}\n+      else if constexpr (common_range<_Vp>)\n+\treturn _Iterator<false>(ranges::end(_M_base), ranges::end(_M_base), _M_n);\n+      else\n+\treturn _Sentinel(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    end() const requires __detail::__slide_caches_nothing<const _Vp>\n+    { return begin() + range_difference_t<const _Vp>(size()); }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    {\n+      auto __sz = ranges::distance(_M_base) - _M_n + 1;\n+      if (__sz < 0)\n+\t__sz = 0;\n+      return __detail::__to_unsigned_like(__sz);\n+    }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    {\n+      auto __sz = ranges::distance(_M_base) - _M_n + 1;\n+      if (__sz < 0)\n+\t__sz = 0;\n+      return __detail::__to_unsigned_like(__sz);\n+    }\n+  };\n+\n+  template<typename _Range>\n+    slide_view(_Range&&, range_difference_t<_Range>) -> slide_view<views::all_t<_Range>>;\n+\n+  template<typename _Vp>\n+    inline constexpr bool enable_borrowed_range<slide_view<_Vp>>\n+      = enable_borrowed_range<_Vp>;\n+\n+  template<forward_range _Vp>\n+    requires view<_Vp>\n+  template<bool _Const>\n+  class slide_view<_Vp>::_Iterator\n+  {\n+    using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n+    static constexpr bool _S_last_elt_present\n+      = __detail::__slide_caches_first<_Base>;\n+\n+    iterator_t<_Base> _M_current = iterator_t<_Base>();\n+    [[no_unique_address]]\n+      __detail::__maybe_present_t<_S_last_elt_present, iterator_t<_Base>>\n+\t_M_last_elt = decltype(_M_last_elt)();\n+    range_difference_t<_Base> _M_n = 0;\n+\n+    constexpr\n+    _Iterator(iterator_t<_Base> __current, range_difference_t<_Base> __n)\n+      requires (!_S_last_elt_present)\n+    : _M_current(__current), _M_n(__n)\n+    { }\n+\n+    constexpr\n+    _Iterator(iterator_t<_Base> __current, iterator_t<_Base> __last_elt,\n+\t      range_difference_t<_Base> __n)\n+      requires _S_last_elt_present\n+    : _M_current(__current), _M_last_elt(__last_elt), _M_n(__n)\n+    { }\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (random_access_range<_Base>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_range<_Base>)\n+\treturn bidirectional_iterator_tag{};\n+      else\n+\treturn forward_iterator_tag{};\n+    }\n+\n+    friend slide_view;\n+    friend slide_view::_Sentinel;\n+\n+  public:\n+    using iterator_category = input_iterator_tag;\n+    using iterator_concept = decltype(_S_iter_concept());\n+    using value_type = decltype(views::counted(_M_current, _M_n));\n+    using difference_type = range_difference_t<_Base>;\n+\n+    _Iterator() = default;\n+\n+    constexpr\n+    _Iterator(_Iterator<!_Const> __i)\n+      requires _Const && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n+    : _M_current(std::move(__i._M_current)), _M_n(__i._M_n)\n+    { }\n+\n+    constexpr auto\n+    operator*() const\n+    { return views::counted(_M_current, _M_n); }\n+\n+    constexpr _Iterator&\n+    operator++()\n+    {\n+      ++_M_current;\n+      if constexpr (_S_last_elt_present)\n+\t++_M_last_elt;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator++(int)\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator--() requires bidirectional_range<_Base>\n+    {\n+      --_M_current;\n+      if constexpr (_S_last_elt_present)\n+\t--_M_last_elt;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator--(int) requires bidirectional_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator+=(difference_type __x)\n+      requires random_access_range<_Base>\n+    {\n+      _M_current += __x;\n+      if constexpr (_S_last_elt_present)\n+\t_M_last_elt += __x;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator&\n+    operator-=(difference_type __x)\n+      requires random_access_range<_Base>\n+    {\n+      _M_current -= __x;\n+      if constexpr (_S_last_elt_present)\n+\t_M_last_elt -= __x;\n+      return *this;\n+    }\n+\n+    constexpr auto\n+    operator[](difference_type __n) const\n+      requires random_access_range<_Base>\n+    { return views::counted(_M_current + __n, _M_n); }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, const _Iterator& __y)\n+    {\n+      if constexpr (_S_last_elt_present)\n+\treturn __x._M_last_elt == __y._M_last_elt;\n+      else\n+\treturn __x._M_current == __y._M_current;\n+    }\n+\n+    friend constexpr bool\n+    operator<(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return __x._M_current < __y._M_current; }\n+\n+    friend constexpr bool\n+    operator>(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return __y < __x; }\n+\n+    friend constexpr bool\n+    operator<=(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return !(__y < __x); }\n+\n+    friend constexpr bool\n+    operator>=(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return !(__x < __y); }\n+\n+    friend constexpr auto\n+    operator<=>(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+\t&& three_way_comparable<iterator_t<_Base>>\n+     { return __x._M_current <=> __y._M_current; }\n+\n+    friend constexpr _Iterator\n+    operator+(const _Iterator& __i, difference_type __n)\n+      requires random_access_range<_Base>\n+    {\n+      auto __r = __i;\n+      __r += __n;\n+      return __r;\n+    }\n+\n+    friend constexpr _Iterator\n+    operator+(difference_type __n, const _Iterator& __i)\n+      requires random_access_range<_Base>\n+    {\n+      auto __r = __i;\n+      __r += __n;\n+      return __r;\n+    }\n+\n+    friend constexpr _Iterator\n+    operator-(const _Iterator& __i, difference_type __n)\n+      requires random_access_range<_Base>\n+    {\n+      auto __r = __i;\n+      __r -= __n;\n+      return __r;\n+    }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, const _Iterator& __y)\n+      requires sized_sentinel_for<iterator_t<_Base>, iterator_t<_Base>>\n+    {\n+      if constexpr (_S_last_elt_present)\n+\treturn __x._M_last_elt - __y._M_last_elt;\n+      else\n+\treturn __x._M_current - __y._M_current;\n+    }\n+  };\n+\n+  template<forward_range _Vp>\n+    requires view<_Vp>\n+  class slide_view<_Vp>::_Sentinel\n+  {\n+    sentinel_t<_Vp> _M_end = sentinel_t<_Vp>();\n+\n+    constexpr explicit\n+    _Sentinel(sentinel_t<_Vp> __end)\n+    : _M_end(__end)\n+    { }\n+\n+    friend slide_view;\n+\n+  public:\n+    _Sentinel() = default;\n+\n+    friend constexpr bool\n+    operator==(const _Iterator<false>& __x, const _Sentinel& __y)\n+    { return __x._M_last_elt == __y._M_end; }\n+\n+    friend constexpr range_difference_t<_Vp>\n+    operator-(const _Iterator<false>& __x, const _Sentinel& __y)\n+      requires sized_sentinel_for<sentinel_t<_Vp>, iterator_t<_Vp>>\n+    { return __x._M_last_elt - __y._M_end; }\n+\n+    friend constexpr range_difference_t<_Vp>\n+    operator-(const _Sentinel& __y, const _Iterator<false>& __x)\n+      requires sized_sentinel_for<sentinel_t<_Vp>, iterator_t<_Vp>>\n+    { return __y._M_end -__x._M_last_elt; }\n+  };\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Range, typename _Dp>\n+\tconcept __can_slide_view\n+\t  = requires { slide_view(std::declval<_Range>(), std::declval<_Dp>()); };\n+    }\n+\n+    struct _Slide : __adaptor::_RangeAdaptor<_Slide>\n+    {\n+      template<viewable_range _Range, typename _Dp = range_difference_t<_Range>>\n+\trequires __detail::__can_slide_view<_Range, _Dp>\n+\tconstexpr auto\n+\toperator() [[nodiscard]] (_Range&& __r, type_identity_t<_Dp> __n) const\n+\t{ return slide_view(std::forward<_Range>(__r), __n); }\n+\n+      using __adaptor::_RangeAdaptor<_Slide>::operator();\n+      static constexpr int _S_arity = 2;\n+      static constexpr bool _S_has_simple_extra_args = true;\n+    };\n+\n+    inline constexpr _Slide slide;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "98560420810537088cdf71fea0b9a4191ca18d7e", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/slide/1.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e2149cdb6b0c37e01df7745cb551fbed317f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fslide%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e2149cdb6b0c37e01df7745cb551fbed317f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fslide%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fslide%2F1.cc?ref=7d7e2149cdb6b0c37e01df7745cb551fbed317f6", "patch": "@@ -0,0 +1,105 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  auto v1 = std::array{1, 2} | views::slide(1);\n+  const auto i0 = v1.begin(), i1 = v1.begin() + 1;\n+  VERIFY( i0 + 1 - 1 == i0 );\n+  VERIFY( i0 < i1 );\n+  VERIFY( i1 < v1.end() );\n+  VERIFY( i1 - i0 == 1 );\n+  VERIFY( i0 - i1 == -1 );\n+  VERIFY( v1.end() - i1 == 1 );\n+  VERIFY( i1 - v1.end() == -1 );\n+  VERIFY( ranges::equal(std::move(v1) | views::join, (int[]){1, 2}) );\n+\n+  int x[] = {1, 2, 3, 4};\n+  auto v2 = x | views::slide(2);\n+  auto i2 = v2.begin();\n+  i2 += 2;\n+  i2 -= -1;\n+  VERIFY( i2 == v2.end() );\n+  VERIFY( ranges::size(v2) == 3 );\n+  VERIFY( ranges::size(std::as_const(v2)) == 3 );\n+  VERIFY( ranges::equal(v2, (std::initializer_list<int>[]){{1, 2}, {2, 3}, {3, 4}},\n+\t\t\tranges::equal) );\n+\n+  int y[] = {1, 2, 3, 4, 5};\n+  const auto v3 = y | views::slide(3);\n+  VERIFY( ranges::size(v3) == 3 );\n+  for (unsigned i = 0; i < ranges::size(x); i++)\n+    {\n+      VERIFY( &v3[i][0] == &y[i] + 0 );\n+      VERIFY( &v3[i][1] == &y[i] + 1 );\n+      VERIFY( &v3[i][2] == &y[i] + 2 );\n+    }\n+\n+  const auto v5 = y | views::slide(5);\n+  VERIFY( ranges::size(v5) == 1 );\n+  VERIFY( ranges::equal(v5 | views::join, y) );\n+\n+  const auto v6 = y | views::slide(6);\n+  VERIFY( ranges::empty(v6) );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  using __gnu_test::test_input_range;\n+  using __gnu_test::test_forward_range;\n+  using __gnu_test::test_random_access_range;\n+\n+  using ty1 = ranges::slide_view<views::all_t<test_forward_range<int>>>;\n+  static_assert(ranges::forward_range<ty1>);\n+  static_assert(!ranges::bidirectional_range<ty1>);\n+  static_assert(!ranges::sized_range<ty1>);\n+\n+  using ty2 = ranges::slide_view<views::all_t<test_random_access_range<int>>>;\n+  static_assert(ranges::random_access_range<ty2>);\n+  static_assert(ranges::sized_range<ty2>);\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test03()\n+{\n+  auto v = views::iota(0, 4) | views::filter([](auto) { return true; }) | views::slide(2);\n+  using ty = decltype(v);\n+  static_assert(ranges::forward_range<ty>);\n+  static_assert(ranges::common_range<ty>);\n+  static_assert(!ranges::sized_range<ty>);\n+  VERIFY( v.begin() == v.begin() );\n+  VERIFY( v.begin() != v.end() );\n+  VERIFY( ranges::next(v.begin(), 3) == v.end() );\n+  auto it = v.begin();\n+  ++it;\n+  it++;\n+  VERIFY( ranges::next(it) == v.end() );\n+  it--;\n+  --it;\n+  VERIFY( it == v.begin() );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  static_assert(test02());\n+  static_assert(test03());\n+}"}]}