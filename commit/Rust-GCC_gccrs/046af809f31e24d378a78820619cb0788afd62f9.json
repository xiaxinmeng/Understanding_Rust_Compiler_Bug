{"sha": "046af809f31e24d378a78820619cb0788afd62f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2YWY4MDlmMzFlMjRkMzc4YTc4ODIwNjE5Y2IwNzg4YWZkNjJmOQ==", "commit": {"author": {"name": "Nina Dinka Ranns", "email": "dinka.ranns@gmail.com", "date": "2019-05-30T19:48:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-30T19:48:48Z"}, "message": "LWG2788 basic_string spurious use of a default constructible allocator\n\nThis only change the cxx11 basic_string, because COW strings don't\ncorrectly propagate allocators anyway.\n\n2019-05-30  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n\n\tLWG2788 basic_string spurious use of a default constructible allocator\n\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::_M_replace_dispatch): Construct temporary string with\n\tthe current allocator.\n\t* testsuite/21_strings/basic_string/allocator/char/lwg2788.cc: New.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/lwg2788.cc: New.\n\nFrom-SVN: r271789", "tree": {"sha": "c88ec42e02542b860de151cb357fe16d33466a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88ec42e02542b860de151cb357fe16d33466a2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046af809f31e24d378a78820619cb0788afd62f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046af809f31e24d378a78820619cb0788afd62f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046af809f31e24d378a78820619cb0788afd62f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046af809f31e24d378a78820619cb0788afd62f9/comments", "author": {"login": "NinaRanns", "id": 57705710, "node_id": "MDQ6VXNlcjU3NzA1NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/57705710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NinaRanns", "html_url": "https://github.com/NinaRanns", "followers_url": "https://api.github.com/users/NinaRanns/followers", "following_url": "https://api.github.com/users/NinaRanns/following{/other_user}", "gists_url": "https://api.github.com/users/NinaRanns/gists{/gist_id}", "starred_url": "https://api.github.com/users/NinaRanns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NinaRanns/subscriptions", "organizations_url": "https://api.github.com/users/NinaRanns/orgs", "repos_url": "https://api.github.com/users/NinaRanns/repos", "events_url": "https://api.github.com/users/NinaRanns/events{/privacy}", "received_events_url": "https://api.github.com/users/NinaRanns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608f8e107d7953c5f1302c54e6301964f7168c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608f8e107d7953c5f1302c54e6301964f7168c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608f8e107d7953c5f1302c54e6301964f7168c97"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "cd535fe0887d46cc23487cf055f9af9101198a4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=046af809f31e24d378a78820619cb0788afd62f9", "patch": "@@ -1,3 +1,12 @@\n+2019-05-30  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+\n+\tLWG2788 basic_string spurious use of a default constructible allocator\n+\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::_M_replace_dispatch): Construct temporary string with\n+\tthe current allocator.\n+\t* testsuite/21_strings/basic_string/allocator/char/lwg2788.cc: New.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/lwg2788.cc: New.\n+\n 2019-05-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/diagnostics.xml: Update list of headers that define"}, {"sha": "ab986a6c82711b357d116fd54e681072a8d3fb4b", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=046af809f31e24d378a78820619cb0788afd62f9", "patch": "@@ -381,7 +381,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  _InputIterator __k1, _InputIterator __k2,\n \t\t\t  std::__false_type)\n       {\n-\tconst basic_string __s(__k1, __k2);\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 2788. unintentionally require a default constructible allocator\n+\tconst basic_string __s(__k1, __k2, this->get_allocator());\n \tconst size_type __n1 = __i2 - __i1;\n \treturn _M_replace(__i1 - begin(), __n1, __s._M_data(),\n \t\t\t  __s.size());"}, {"sha": "36dd414e88755f6e04ca2e7753cc215b1bf10664", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/lwg2788.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Flwg2788.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Flwg2788.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Flwg2788.cc?ref=046af809f31e24d378a78820619cb0788afd62f9", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+// 2019-05-27  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+//\n+// Copyright (C) 2015-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char;\n+using traits = std::char_traits<C>;\n+int constructCount = 0;\n+\n+static void resetCounter()\n+{\n+ constructCount = 0;\n+}\n+\n+template <class Tp>\n+struct TestAllocator\n+{\n+  typedef Tp value_type;\n+  using size_type = unsigned;\n+\n+  TestAllocator() noexcept { constructCount++; }\n+\n+  template <class T>\n+  TestAllocator(const TestAllocator<T>&) {}\n+\n+  Tp *allocate(std::size_t n)\n+  { return std::allocator<Tp>().allocate(n); }\n+\n+  void deallocate(Tp *p, std::size_t n)\n+  { std::allocator<Tp>().deallocate(p, n); }\n+\n+};\n+\n+template <class T, class U>\n+bool operator==(const TestAllocator<T>&, const TestAllocator<U>&)\n+{ return true; }\n+template <class T, class U>\n+bool operator!=(const TestAllocator<T>&, const TestAllocator<U>&)\n+{ return false; }\n+\n+void test01()\n+{\n+  typedef TestAllocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1{alloc_type()};\n+  std::string v2{\"some_content\"};\n+\n+  resetCounter();\n+  v1.assign(v2.begin(),v2.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.append(v2.begin(),v2.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.insert(v1.begin(),v1.begin(),v1.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.replace(v1.begin(),v1.end(),v1.begin(),v1.end());\n+  VERIFY( constructCount == 0);\n+}\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8e26dd7d4a92fb00983182b0ed8a0f46a194eef1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/lwg2788.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Flwg2788.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046af809f31e24d378a78820619cb0788afd62f9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Flwg2788.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Flwg2788.cc?ref=046af809f31e24d378a78820619cb0788afd62f9", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+// 2019-05-27  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+//\n+// Copyright (C) 2015-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = wchar_t;\n+using traits = std::char_traits<C>;\n+int constructCount = 0;\n+\n+static void resetCounter()\n+{\n+ constructCount = 0;\n+}\n+\n+template <class Tp>\n+struct TestAllocator\n+{\n+  typedef Tp value_type;\n+  using size_type = unsigned;\n+\n+  TestAllocator() noexcept { constructCount++; }\n+\n+  template <class T>\n+  TestAllocator(const TestAllocator<T>&) {}\n+\n+  Tp *allocate(std::size_t n)\n+  { return std::allocator<Tp>().allocate(n); }\n+\n+  void deallocate(Tp *p, std::size_t n)\n+  { std::allocator<Tp>().deallocate(p, n); }\n+\n+};\n+\n+template <class T, class U>\n+bool operator==(const TestAllocator<T>&, const TestAllocator<U>&)\n+{ return true; }\n+template <class T, class U>\n+bool operator!=(const TestAllocator<T>&, const TestAllocator<U>&)\n+{ return false; }\n+\n+void test01()\n+{\n+  typedef TestAllocator<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v1{alloc_type()};\n+  std::wstring v2{L\"some_content\"};\n+\n+  resetCounter();\n+  v1.assign(v2.begin(),v2.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.append(v2.begin(),v2.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.insert(v1.begin(),v1.begin(),v1.end());\n+  VERIFY( constructCount == 0);\n+\n+  v1.replace(v1.begin(),v1.end(),v1.begin(),v1.end());\n+  VERIFY( constructCount == 0);\n+}\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}