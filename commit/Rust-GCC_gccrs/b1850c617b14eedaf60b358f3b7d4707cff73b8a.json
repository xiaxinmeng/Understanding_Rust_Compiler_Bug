{"sha": "b1850c617b14eedaf60b358f3b7d4707cff73b8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4NTBjNjE3YjE0ZWVkYWY2MGIzNThmM2I3ZDQ3MDdjZmY3M2I4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-01T17:18:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-01T17:18:26Z"}, "message": "libstdc++: Constrain chrono::duration conversions [LWG 2094]\n\nThe chrono::duration constructor that converts from another duration\ntype is meant to be constrained so that it doesn't participate in\noverload resolution if the ratio of the periods cannot be represented as\na std::ratio.\n\nBecause our std::ratio_divide is not SFINAE-friendly the evaluation of\n__is_harmonic results in an error outside the immediate context when an\noverflow occurs. I intend to make ratio_divide (and ratio_multiply)\nSFINAE-friendly in a future patch, but for now this patch just\nintroduces a new SFINAE-friendly alias template for the division.\n\nThe standard doesn't require it, but it also seems right to constrain\nthe constructor with std::is_convertible_v<_Rep2, rep>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (duration::_S_gcd(intmax_t, intmax_t)):\n\tNew helper function for finding GCD of two positive intmax_t\n\tvalues.\n\t(duration::__divide): New helper alias for dividing one period\n\tby another.\n\t(duration::__is_harmonic): Use __divide not ratio_divide.\n\t(duration(const duration<R2, P2>&)): Require the duration rep\n\ttypes to be convertible.\n\t* testsuite/20_util/duration/cons/dr2094.cc: New test.\n\t* testsuite/20_util/duration/requirements/reduced_period.cc:\n\tFix definition of unused member functions in test type.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc:\n\tAdjust expected errors.", "tree": {"sha": "8c960987dcbd6e7fe0f0b3e060ec9bb3f1643de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c960987dcbd6e7fe0f0b3e060ec9bb3f1643de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1850c617b14eedaf60b358f3b7d4707cff73b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1850c617b14eedaf60b358f3b7d4707cff73b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1850c617b14eedaf60b358f3b7d4707cff73b8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1850c617b14eedaf60b358f3b7d4707cff73b8a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "1682263fd9f05f5b00593db844b873164b4a0792", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=b1850c617b14eedaf60b358f3b7d4707cff73b8a", "patch": "@@ -424,10 +424,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttemplate<typename _Rep2>\n \t  using __is_float = treat_as_floating_point<_Rep2>;\n \n+\tstatic constexpr intmax_t\n+\t_S_gcd(intmax_t __m, intmax_t __n) noexcept\n+\t{\n+\t  // Duration only allows positive periods so we don't need to\n+\t  // support negative values here (unlike __static_gcd and std::gcd).\n+\t  return (__m == 0) ? __n : (__n == 0) ? __m : _S_gcd(__n, __m % __n);\n+\t}\n+\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 2094. overflow shouldn't participate in overload resolution\n+\t// 3090. What is [2094] intended to mean?\n+\t// This only produces a valid type if no overflow occurs.\n+\ttemplate<typename _R1, typename _R2,\n+\t\t intmax_t __gcd1 = _S_gcd(_R1::num, _R2::num),\n+\t\t intmax_t __gcd2 = _S_gcd(_R1::den, _R2::den)>\n+\t  using __divide = ratio<(_R1::num / __gcd1) * (_R2::den / __gcd2),\n+\t\t\t\t (_R1::den / __gcd2) * (_R2::num / __gcd1)>;\n+\n \t// _Period2 is an exact multiple of _Period\n \ttemplate<typename _Period2>\n \t  using __is_harmonic\n-\t    = __bool_constant<ratio_divide<_Period2, _Period>::den == 1>;\n+\t    = __bool_constant<__divide<_Period2, _Period>::den == 1>;\n \n       public:\n \n@@ -453,6 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  : __r(static_cast<rep>(__rep)) { }\n \n \ttemplate<typename _Rep2, typename _Period2, typename = _Require<\n+\t\t is_convertible<const _Rep2&, rep>,\n \t\t __or_<__is_float<rep>,\n \t\t       __and_<__is_harmonic<_Period2>,\n \t\t\t      __not_<__is_float<_Rep2>>>>>>"}, {"sha": "859c14fe693ba1be340b9f410fb367f90abdffee", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/dr2094.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr2094.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr2094.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2Fdr2094.cc?ref=b1850c617b14eedaf60b358f3b7d4707cff73b8a", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <chrono>\n+\n+void\n+test01()\n+{\n+  using namespace std::chrono;\n+  using std::exa;\n+\n+  // LWG 2094\n+  // duration conversion overflow shouldn't participate in overload resolution\n+  bool f(milliseconds);\n+  void f(seconds);\n+  duration<int,exa> r(1);\n+  f(r);\n+}\n+\n+void\n+test02()\n+{\n+  struct Number\n+  {\n+    explicit\n+    Number(int t = 0) : i(t)\n+    { }\n+\n+    int i = 0;\n+\n+    Number& operator+=(Number n) { i += n.i; return *this; }\n+    Number& operator-=(Number n) { i -= n.i; return *this; }\n+    Number& operator*=(Number n) { i *= n.i; return *this; }\n+    Number& operator/=(Number n) { i /= n.i; return *this; }\n+    Number& operator%=(Number n) { i %= n.i; return *this; }\n+\n+    Number operator+(Number n) { return Number{ i + n.i }; }\n+    Number operator-(Number n) { return Number{ i - n.i }; }\n+    Number operator*(Number n) { return Number{ i * n.i }; }\n+    Number operator/(Number n) { return Number{ i / n.i }; }\n+    Number operator%(Number n) { return Number{ i % n.i }; }\n+  };\n+\n+  using std::chrono::duration;\n+\n+  static_assert( ! std::is_constructible<duration<int>, duration<Number>>(),\n+      \"duration(const duration<R2, P2>&) constrained on R2 -> R conversion\" );\n+}"}, {"sha": "87124e526b3511eb179000604bb1bada74dd9062", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/reduced_period.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc?ref=b1850c617b14eedaf60b358f3b7d4707cff73b8a", "patch": "@@ -151,11 +151,11 @@ struct Number\n   Number& operator/=(Number n) { i /= n.i; return *this; }\n   Number& operator%=(Number n) { i %= n.i; return *this; }\n \n-  Number operator+(Number n) { return { i + n.i }; }\n-  Number operator-(Number n) { return { i - n.i }; }\n-  Number operator*(Number n) { return { i * n.i }; }\n-  Number operator/(Number n) { return { i / n.i }; }\n-  Number operator%(Number n) { return { i % n.i }; }\n+  Number operator+(Number n) { return Number{ i + n.i }; }\n+  Number operator-(Number n) { return Number{ i - n.i }; }\n+  Number operator*(Number n) { return Number{ i * n.i }; }\n+  Number operator/(Number n) { return Number{ i / n.i }; }\n+  Number operator%(Number n) { return Number{ i % n.i }; }\n };\n \n namespace std"}, {"sha": "e44b01c4c8208cf230536b8892acf387dd2351bb", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1850c617b14eedaf60b358f3b7d4707cff73b8a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=b1850c617b14eedaf60b358f3b7d4707cff73b8a", "patch": "@@ -32,4 +32,5 @@ void test01()\n \n // { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"'num' is not a member of 'int'\" }\n+// { dg-prune-output \"'den' is not a member of 'int'\" }\n // { dg-prune-output \"'int' is not a class, struct, or union type\" }"}]}