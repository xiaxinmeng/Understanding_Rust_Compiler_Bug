{"sha": "635b0f2a72770f39f07df01048baec5271b5c44f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1YjBmMmE3Mjc3MGYzOWYwN2RmMDEwNDhiYWVjNTI3MWI1YzQ0Zg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2005-01-24T18:24:02Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2005-01-24T18:24:02Z"}, "message": "target-supports.exp (current_target_name): New.\n\n\t* lib/target-supports.exp (current_target_name): New.\n\t(check_effective_target_ilp32, check_effective_target_lp64):\n\tCache the result to use as long as the current target, with\n\tmultilib flags, remains the same.\n\nFrom-SVN: r94168", "tree": {"sha": "475c31465a1a78e7b6af47d935f2aa7d569a59c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/475c31465a1a78e7b6af47d935f2aa7d569a59c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/635b0f2a72770f39f07df01048baec5271b5c44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635b0f2a72770f39f07df01048baec5271b5c44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635b0f2a72770f39f07df01048baec5271b5c44f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635b0f2a72770f39f07df01048baec5271b5c44f/comments", "author": null, "committer": null, "parents": [{"sha": "544ea6b7a605b052336db05d97b5bd87adff5b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544ea6b7a605b052336db05d97b5bd87adff5b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544ea6b7a605b052336db05d97b5bd87adff5b51"}], "stats": {"total": 89, "additions": 76, "deletions": 13}, "files": [{"sha": "5b64d1461551d9b775cd47fc01c55379ab75139d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635b0f2a72770f39f07df01048baec5271b5c44f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635b0f2a72770f39f07df01048baec5271b5c44f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=635b0f2a72770f39f07df01048baec5271b5c44f", "patch": "@@ -1,5 +1,10 @@\n 2005-01-24  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* lib/target-supports.exp (current_target_name): New.\n+\t(check_effective_target_ilp32, check_effective_target_lp64):\n+\tCache the result to use as long as the current target, with\n+\tmultilib flags, remains the same.\n+\n \t* lib/gcc-dg.exp (skip_test_and_clear_xfail): Remove.\n \t(dg-require-weak, dg-require-visibility, dg-require-alias,\n \tdg-require-dg-sections, dg-require-profiling, dg-require-iconv,"}, {"sha": "4a91b943d6dc25cad91968e25b72bd6ea3621854", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 71, "deletions": 13, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635b0f2a72770f39f07df01048baec5271b5c44f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635b0f2a72770f39f07df01048baec5271b5c44f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=635b0f2a72770f39f07df01048baec5271b5c44f", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1999, 2001, 2003, 2004 Free Software Foundation, Inc.\n+#   Copyright (C) 1999, 2001, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -42,6 +42,16 @@ proc get_compiler_messages {basename type contents} {\n     return $lines\n }\n \n+proc current_target_name { } {\n+    global target_info\n+    if [info exists target_info(target,name)] {\n+\tset answer $target_info(target,name)\n+    } else {\n+\tset answer \"\"\n+    }\n+    return $answer\n+}\n+\n ###############################\n # proc check_weak_available { }\n ###############################\n@@ -418,26 +428,74 @@ proc check_alpha_max_hw_available { } {\n \n # Return 1 if we're generating 32-bit code using default options, 0\n # otherwise.\n+#\n+# When the target name changes, replace the cached result.\n \n proc check_effective_target_ilp32 { } {\n-    verbose \"check_effective_target_ilp32: compiling source\" 2\n-    set answer [string match \"\" [get_compiler_messages ilp32 object {\n-\tint dummy[(sizeof (int) == 4 && sizeof (void *) == 4 && sizeof (long) == 4 ) ? 1 : -1];\n-    }]]\n-    verbose \"check_effective_target_ilp32: returning $answer\" 2\n-    return $answer\n+    global et_ilp32_saved\n+    global et_ilp32_target_name\n+\n+    if { ![info exists et_ilp32_target_name] } {\n+\tset et_ilp32_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_ilp32_target_name } {\n+\tverbose \"check_effective_target_ilp32: `$et_ilp32_target_name' `$current_target'\" 2\n+\tset et_ilp32_target_name $current_target\n+\tif { [info exists et_ilp32_saved] } {\n+\t    verbose \"check_effective_target_ilp32: removing cached result\" 2\n+\t    unset et_ilp32_saved\n+\t}\n+    }\n+\n+    if [info exists et_ilp32_saved] {\n+\tverbose \"check-effective_target_ilp32: using cached result\" 2\n+    } else {\n+\tverbose \"check_effective_target_ilp32: compiling source\" 2\n+\tset et_ilp32_saved [string match \"\" [get_compiler_messages ilp32 object {\n+\t    int dummy[(sizeof (int) == 4 && sizeof (void *) == 4 && sizeof (long) == 4 ) ? 1 : -1];\n+\t}]]\n+    }\n+    verbose \"check_effective_target_ilp32: returning $et_ilp32_saved\" 2\n+    return $et_ilp32_saved\n }\n \n # Return 1 if we're generating 64-bit code using default options, 0\n # otherwise.\n+#\n+# When the target name changes, replace the cached result.\n \n proc check_effective_target_lp64 { } {\n-    verbose \"check_effective_target_lp64: compiling source\" 2\n-    set answer [string match \"\" [get_compiler_messages lp64 object {\n-\tint dummy[(sizeof (int) == 4 && sizeof (void *) == 8 && sizeof (long) == 8 ) ? 1 : -1];\n-    }]]\n-    verbose \"check_effective_target_lp64: returning $answer\" 2\n-    return $answer\n+    global et_lp64_saved\n+    global et_lp64_target_name\n+\n+    if { ![info exists et_lp64_target_name] } {\n+\tset et_lp64_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_lp64_target_name } {\n+\tverbose \"check_effective_target_lp64: `$et_lp64_target_name' `$current_target'\" 2\n+\tset et_lp64_target_name $current_target\n+\tif [info exists et_lp64_saved] {\n+\t    verbose \"check_effective_target_lp64: removing cached result\" 2\n+\t    unset et_lp64_saved\n+\t}\n+    }\n+\n+    if [info exists et_lp64_saved] {\n+\tverbose \"check_effective_target_lp64: using cached result\" 2\n+    } else {\n+\tverbose \"check_effective_target_lp64: compiling source\" 2\n+\tset et_lp64_saved [string match \"\" [get_compiler_messages lp64 object {\n+\t    int dummy[(sizeof (int) == 4 && sizeof (void *) == 8 && sizeof (long) == 8 ) ? 1 : -1];\n+\t}]]\n+    }\n+    verbose \"check_effective_target_lp64: returning $et_lp64_saved\" 2\n+    return $et_lp64_saved\n }\n \n # Return 1 if the target supports hardware vectors of int, 0 otherwise."}]}