{"sha": "46eb2860942a29b40822570cb6625620f69ed30e", "node_id": "C_kwDOANBUbNoAKDQ2ZWIyODYwOTQyYTI5YjQwODIyNTcwY2I2NjI1NjIwZjY5ZWQzMGU", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-09-30T14:53:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-03T14:43:49Z"}, "message": "libstdc++: Make some tests work on freestanding [PR103626]\n\nPR libstdc++/103626 - _GLIBCXX_HOSTED should respect -ffreestanding\n\nCo-authored-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103626\n\t* testsuite/17_intro/headers/c++1998/stdc++.cc [!__STDC_HOSTED__]:\n\tDo not include C headers that aren't valid for freestanding.\n\t* testsuite/17_intro/tag_type_explicit_ctor.cc [!__STDC_HOSTED__]:\n\tDo not test tag types that aren't defined for freestanding.\n\t* testsuite/18_support/headers/cstdlib/functions_std.cc: Do not\n\tcheck for std::getenv and std::system for freestanding.\n\t* testsuite/17_intro/using_namespace_std_exp_neg.cc [!__STDC_HOSTED__]:\n\tDo not test hosted parts of the standard library.\n\t* testsuite/17_intro/using_namespace_std_tr1_neg.cc [!__STDC_HOSTED__]:\n\tLikewise.\n\t* testsuite/20_util/allocator_traits/members/rebind_alloc.cc [!__STDC_HOSTED__]:\n\tLikewise.\n\t* testsuite/20_util/allocator_traits/requirements/explicit_instantiation.cc [!HOSTED]:\n\tLikewise.\n\t* testsuite/20_util/headers/bitset/synopsis.cc [!__STDC_HOSTED__]: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc [!__STDC_HOSTED__]:\n\tLikewise.\n\t* testsuite/20_util/pointer_traits/requirements/typedefs.cc [!__STDC_HOSTED__]:\n\tLikewise.\n\t* testsuite/20_util/tuple/cons/deduction.cc [!__STDC_HOSTED__]: Likewise.\n\t* testsuite/25_algorithms/move/93872.cc [!__STDC_HOSTED__]: Likewise.\n\t* testsuite/std/ranges/adaptors/100577.cc [!__STDC_HOSTED__]: Likewise.", "tree": {"sha": "0eb243fee18e7af09e446aff6588aa522f68e40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb243fee18e7af09e446aff6588aa522f68e40d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46eb2860942a29b40822570cb6625620f69ed30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb2860942a29b40822570cb6625620f69ed30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eb2860942a29b40822570cb6625620f69ed30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb2860942a29b40822570cb6625620f69ed30e/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6885e7e4eef65c657cd8baa0f5e7ebe7231ac984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6885e7e4eef65c657cd8baa0f5e7ebe7231ac984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6885e7e4eef65c657cd8baa0f5e7ebe7231ac984"}], "stats": {"total": 168, "additions": 104, "deletions": 64}, "files": [{"sha": "e362dfee32913e1d837719b38d628ed6ec9adec3", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/stdc++.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fstdc%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fstdc%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2Fstdc%2B%2B.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -24,6 +24,7 @@\n \n #include <bits/stdc++.h>\n \n+#if __STDC_HOSTED__\n // \"C\" compatibility headers\n #include <assert.h>\n #include <ctype.h>\n@@ -47,3 +48,4 @@\n #ifdef _GLIBCXX_HAVE_WCTYPE_H\n #include <wctype.h>\n #endif\n+#endif"}, {"sha": "410142d3974c7ba4cd828c0cc06f59a141bc6526", "filename": "libstdc++-v3/testsuite/17_intro/tag_type_explicit_ctor.cc", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ftag_type_explicit_ctor.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -20,40 +20,50 @@\n #include <new>\n #include <utility>\n #include <memory>\n-#include <mutex>\n+\n+#if __STDC_HOSTED__\n+#  include <mutex>\n+#endif\n \n void f1(std::nothrow_t);\n void f2(std::piecewise_construct_t);\n void f3(std::allocator_arg_t);\n+#if __STDC_HOSTED__\n void f4(std::defer_lock_t);\n void f5(std::try_to_lock_t);\n void f6(std::adopt_lock_t);\n-\n+#endif\n \n int main()\n {\n   std::nothrow_t v1;\n   std::piecewise_construct_t v2;\n   std::allocator_arg_t v3;\n+#if __STDC_HOSTED__\n   std::defer_lock_t v4;\n   std::try_to_lock_t v5;\n   std::try_to_lock_t v6;\n+#endif\n   std::nothrow_t v7 = {}; // { dg-error \"explicit\" }\n   std::piecewise_construct_t v8 = {}; // { dg-error \"explicit\" }\n   std::allocator_arg_t v9 = {}; // { dg-error \"explicit\" }\n-  std::defer_lock_t v10 = {}; // { dg-error \"explicit\" }\n-  std::try_to_lock_t v11 = {}; // { dg-error \"explicit\" }\n-  std::try_to_lock_t v12 = {}; // { dg-error \"explicit\" }\n+#if __STDC_HOSTED__\n+  std::defer_lock_t v10 = {};  // { dg-error \"explicit\" \"\" { target hosted } }\n+  std::try_to_lock_t v11 = {}; // { dg-error \"explicit\" \"\" { target hosted } }\n+  std::try_to_lock_t v12 = {}; // { dg-error \"explicit\" \"\" { target hosted } }\n+#endif\n   f1(std::nothrow_t{});\n   f2(std::piecewise_construct_t{});\n   f3(std::allocator_arg_t{});\n-  f4(std::defer_lock_t{});\n-  f5(std::try_to_lock_t{});\n-  f6(std::adopt_lock_t{});\n   f1({}); // { dg-error \"explicit\" }\n   f2({}); // { dg-error \"explicit\" }\n   f3({}); // { dg-error \"explicit\" }\n-  f4({}); // { dg-error \"explicit\" }\n-  f5({}); // { dg-error \"explicit\" }\n-  f6({}); // { dg-error \"explicit\" }\n+#if __STDC_HOSTED__\n+  f4(std::defer_lock_t{});\n+  f5(std::try_to_lock_t{});\n+  f6(std::adopt_lock_t{});\n+  f4({}); // { dg-error \"explicit\" \"\" { target hosted } }\n+  f5({}); // { dg-error \"explicit\" \"\" { target hosted } }\n+  f6({}); // { dg-error \"explicit\" \"\" { target hosted } }\n+#endif\n }"}, {"sha": "9fadafdbccf3c94e1c28a41ca7929cb0b50a1b09", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_exp_neg.cc", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -20,42 +20,45 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n-#include <complex>\n-#include <deque>\n #include <exception>\n-#include <fstream>\n #include <functional>\n-#include <iomanip>\n-#include <ios>\n-#include <iosfwd>\n-#include <iostream>\n-#include <istream>\n #include <iterator>\n #include <limits>\n-#include <list>\n-#include <locale>\n-#include <map>\n #include <memory>\n #include <new>\n #include <numeric>\n-#include <ostream>\n-#include <queue>\n-#include <random>\n-#include <regex>\n-#include <set>\n-#include <sstream>\n-#include <stack>\n-#include <stdexcept>\n-#include <streambuf>\n-#include <string>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>\n-#include <unordered_map>\n-#include <unordered_set>\n #include <utility>\n-#include <valarray>\n-#include <vector>\n+\n+#if __STDC_HOSTED__\n+#  include <complex>\n+#  include <deque>\n+#  include <fstream>\n+#  include <iomanip>\n+#  include <ios>\n+#  include <iosfwd>\n+#  include <iostream>\n+#  include <istream>\n+#  include <list>\n+#  include <locale>\n+#  include <map>\n+#  include <ostream>\n+#  include <queue>\n+#  include <random>\n+#  include <regex>\n+#  include <set>\n+#  include <sstream>\n+#  include <stack>\n+#  include <stdexcept>\n+#  include <streambuf>\n+#  include <string>\n+#  include <unordered_map>\n+#  include <unordered_set>\n+#  include <valarray>\n+#  include <vector>\n+#endif\n \n namespace gnu\n {"}, {"sha": "4d08cc5bc91d081874c7ca060e5c5f8df47c6be8", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_tr1_neg.cc", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -23,42 +23,45 @@\n #include <algorithm>\n #include <array>\n #include <bitset>\n-#include <complex>\n-#include <deque>\n #include <exception>\n-#include <fstream>\n #include <functional>\n-#include <iomanip>\n-#include <ios>\n-#include <iosfwd>\n-#include <iostream>\n-#include <istream>\n #include <iterator>\n #include <limits>\n-#include <list>\n-#include <locale>\n-#include <map>\n #include <memory>\n #include <new>\n #include <numeric>\n-#include <ostream>\n-#include <queue>\n-#include <random>\n-#include <regex>\n-#include <set>\n-#include <sstream>\n-#include <stack>\n-#include <stdexcept>\n-#include <streambuf>\n-#include <string>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>\n-#include <unordered_map>\n-#include <unordered_set>\n #include <utility>\n-#include <valarray>\n-#include <vector>\n+\n+#if __STDC_HOSTED__\n+#  include <complex>\n+#  include <deque>\n+#  include <fstream>\n+#  include <iomanip>\n+#  include <ios>\n+#  include <iosfwd>\n+#  include <iostream>\n+#  include <istream>\n+#  include <list>\n+#  include <locale>\n+#  include <map>\n+#  include <ostream>\n+#  include <queue>\n+#  include <random>\n+#  include <regex>\n+#  include <set>\n+#  include <sstream>\n+#  include <stack>\n+#  include <stdexcept>\n+#  include <streambuf>\n+#  include <string>\n+#  include <unordered_map>\n+#  include <unordered_set>\n+#  include <valarray>\n+#  include <vector>\n+#endif\n \n namespace gnu\n {"}, {"sha": "af1ed6a86528fe04a8dc2d0b3932ff765f4bf83b", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdlib/functions_std.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdlib%2Ffunctions_std.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -25,6 +25,8 @@ namespace gnu\n   using std::atexit;\n   using std::exit;\n \n+#if __STDC_HOSTED__\n   using std::getenv;\n   using std::system;\n+#endif\n }"}, {"sha": "ca2a8044665d3024d0e40a4eb50f81fe445d0b72", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/rebind_alloc.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -24,6 +24,7 @@ using std::is_same;\n template<typename T, typename U>\n   using Rebind = typename std::allocator_traits<T>::template rebind_alloc<U>;\n \n+#if __STDC_HOSTED__\n template<typename T>\n   struct HasRebind {\n     using value_type = T;\n@@ -33,6 +34,7 @@ template<typename T>\n static_assert(is_same<Rebind<HasRebind<int>, long>,\n \t\t      std::allocator<long>>::value,\n \t      \"nested alias template is used\");\n+#endif\n \n template<typename T>\n   struct NoRebind0 {"}, {"sha": "8f7c191e94a82a4a9ef50d3c3d8a816cb705d379", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/requirements/explicit_instantiation.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Fexplicit_instantiation.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -36,6 +36,8 @@ template<typename T>\n \n namespace std\n {\n+#if __STDC_HOSTED__\n   template struct allocator_traits<std::allocator<test_type>>;\n+#endif\n   template struct allocator_traits<minimal_allocator<test_type>>;\n }"}, {"sha": "094f0f268b3b22bd1f52b1239beb7cb701c60d3f", "filename": "libstdc++-v3/testsuite/20_util/headers/bitset/synopsis.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fbitset%2Fsynopsis.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -49,11 +49,13 @@ namespace std {\n     CONSTEXPR\n     bitset<N> operator^(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n+#if __STDC_HOSTED__\n   template <class charT, class traits, size_t N>\n     basic_istream<charT, traits>&\n     operator>>(basic_istream<charT, traits>& is, bitset<N>& x);\n \n   template <class charT, class traits, size_t N>\n     basic_ostream<charT, traits>&\n     operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);\n+#endif\n }"}, {"sha": "ff98cc42ef7b262f401a031d3eb26e98b0e8a4eb", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -20,9 +20,9 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_character.h>\n \n enum test_enum { first_selection };\n+struct pod_class { };\n \n void test01()\n {\n@@ -31,7 +31,7 @@ void test01()\n   // Negative tests.\n   typedef make_unsigned<bool>::type     \ttest1_type;\n \n-  typedef make_unsigned<__gnu_test::pod_uint>::type     \ttest2_type;\n+  typedef make_unsigned<pod_class>::type     \ttest2_type;\n \n   typedef make_unsigned<int[4]>::type     test3_type;\n "}, {"sha": "a88372c4d3a2e2d18d5233dda8b34003c89e9f3f", "filename": "libstdc++-v3/testsuite/20_util/pointer_traits/requirements/typedefs.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Ftypedefs.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -37,8 +37,10 @@ int main()\n {\n   test01<int*>();\n   test01<void*>();\n+#if __STDC_HOSTED__\n   test01<std::shared_ptr<int>>();\n   test01<std::shared_ptr<void>>();\n+#endif\n   test01<std::unique_ptr<int>>();\n   test01<std::unique_ptr<void>>();\n }"}, {"sha": "c4b5a5c1eaf39ce84dbe722ab7b68bd5b6918cc1", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/deduction.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -145,6 +145,7 @@ test04()\n void\n test05()\n {\n+#if __STDC_HOSTED__\n   std::allocator<double> a;\n   std::tuple x{std::allocator_arg, a, 1};\n   check_type<std::tuple<int>>(x);\n@@ -161,4 +162,5 @@ test05()\n   check_type<decltype(x)>(x5);\n   std::tuple x6{std::allocator_arg, a, std::move(x)};\n   check_type<decltype(x)>(x6);\n+#endif\n }"}, {"sha": "8496a22106362b59fd02c5e7d614007027228319", "filename": "libstdc++-v3/testsuite/25_algorithms/move/93872.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -18,6 +18,7 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n \n+#include <iterator>\n #include <algorithm>\n #include <functional>\n "}, {"sha": "c900553743b8034170a9521b2f25c3615ba9365a", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/100577.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46eb2860942a29b40822570cb6625620f69ed30e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc?ref=46eb2860942a29b40822570cb6625620f69ed30e", "patch": "@@ -22,6 +22,9 @@\n \n #include <ranges>\n #include <functional>\n+#if __STDC_HOSTED__\n+#include <string>\n+#endif\n \n namespace ranges = std::ranges;\n namespace views = std::ranges::views;\n@@ -38,9 +41,11 @@ test01()\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::take), int>);\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::take_while), identity>);\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::drop_while), identity>);\n-  static_assert(__adaptor_has_simple_extra_args<decltype(views::lazy_split), std::string_view>);\n   static_assert(__adaptor_has_simple_extra_args<decltype(views::lazy_split), char>);\n+#if __STDC_HOSTED__\n+  static_assert(__adaptor_has_simple_extra_args<decltype(views::lazy_split), std::string_view>);\n   static_assert(!__adaptor_has_simple_extra_args<decltype(views::lazy_split), std::string>);\n+#endif\n \n   using views::__adaptor::__closure_has_simple_call_op;\n   __closure_has_simple_call_op auto a00 = views::all;\n@@ -60,6 +65,7 @@ test01()\n   __closure_has_simple_call_op auto b\n     = (a00 | a01) | (a02 | a03) | (a04 | a05 | a06) | (a07 | a08 | a09 | a10) | a11;\n \n+#if __STDC_HOSTED__\n   // Verify views::lazy_split(non_view_range) is an exception.\n   extern std::string s;\n   auto a12 = views::lazy_split(s);\n@@ -72,6 +78,7 @@ test01()\n   static_assert(!__closure_has_simple_call_op<decltype(a12a)>);\n   static_assert(!__closure_has_simple_call_op<decltype(a12a | a00)>);\n   static_assert(!__closure_has_simple_call_op<decltype(a00 | a12a)>);\n+#endif\n }\n \n void\n@@ -129,6 +136,7 @@ test03()\n void\n test04()\n {\n+#if __STDC_HOSTED__\n   // Non-trivially-copyable extra arguments make a closure not simple.\n   using F = std::function<bool(bool)>;\n   static_assert(!std::is_trivially_copyable_v<F>);\n@@ -137,6 +145,7 @@ test04()\n   static_assert(!__closure_has_simple_call_op<decltype(views::drop_while(std::declval<F>()))>);\n   static_assert(!__closure_has_simple_call_op<decltype(views::filter(std::declval<F>()))>);\n   static_assert(!__closure_has_simple_call_op<decltype(views::transform(std::declval<F>()))>);\n+#endif\n }\n \n // { dg-prune-output \"in requirements\" }"}]}