{"sha": "34c8879087689377b44c833c752948fc496f4f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjODg3OTA4NzY4OTM3N2I0NGM4MzNjNzUyOTQ4ZmM0OTZmNGY1MA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:43:14Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:43:14Z"}, "message": "Fix va_start related location\n\nIn gcc/testsuite/gcc.dg/pr30457.c, the first warning was not being\nemitted because the relevant location was inside the var_start macro\ndefined in a system header.  It can even point to a token for a\nbuiltin macro there.  This patch unwinds to the first token in real\nsource code in that case.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\n\t* builtins.c (fold_builtin_next_arg): Unwinds to the first\n\tlocation in real source code.\n\nFrom-SVN: r186975", "tree": {"sha": "cab53a5bbcf101f0462b2c5d3119d48bcfc3bf6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab53a5bbcf101f0462b2c5d3119d48bcfc3bf6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34c8879087689377b44c833c752948fc496f4f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c8879087689377b44c833c752948fc496f4f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c8879087689377b44c833c752948fc496f4f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c8879087689377b44c833c752948fc496f4f50/comments", "author": null, "committer": null, "parents": [{"sha": "bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd93a72d259d4f372846f6f9ad6adbf4bb7f367"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "c47ba21dde5882a12a805c19e96d12c9c3e80161", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c8879087689377b44c833c752948fc496f4f50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c8879087689377b44c833c752948fc496f4f50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34c8879087689377b44c833c752948fc496f4f50", "patch": "@@ -1,5 +1,9 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tFix va_start related location\n+\t* builtins.c (fold_builtin_next_arg): Unwinds to the first\n+\tlocation in real source code.\n+\n \tMake conversion warnings work on NULL with -ftrack-macro-expansion\n \t* input.h (expansion_point_location_if_in_system_header): Declare\n \tnew function."}, {"sha": "5ddc47bd7ea651a7481a11888fc1553056aebaa9", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c8879087689377b44c833c752948fc496f4f50/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c8879087689377b44c833c752948fc496f4f50/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=34c8879087689377b44c833c752948fc496f4f50", "patch": "@@ -12095,6 +12095,13 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n   tree fntype = TREE_TYPE (current_function_decl);\n   int nargs = call_expr_nargs (exp);\n   tree arg;\n+  /* There is good chance the current input_location points inside the\n+     definition of the va_start macro (perhaps on the token for\n+     builtin) in a system header, so warnings will not be emitted.\n+     Use the location in real source code.  */\n+  source_location current_location =\n+    linemap_unwind_to_first_non_reserved_loc (line_table, input_location,\n+\t\t\t\t\t      NULL);\n \n   if (!stdarg_p (fntype))\n     {\n@@ -12119,7 +12126,9 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t{\n \t  /* Evidently an out of date version of <stdarg.h>; can't validate\n \t     va_start's second argument, but can still work as intended.  */\n-\t  warning (0, \"%<__builtin_next_arg%> called without an argument\");\n+\t  warning_at (current_location,\n+\t\t      0,\n+\t\t      \"%<__builtin_next_arg%> called without an argument\");\n \t  return true;\n \t}\n       else if (nargs > 1)\n@@ -12154,7 +12163,9 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t     argument.  We just warn and set the arg to be the last\n \t     argument so that we will get wrong-code because of\n \t     it.  */\n-\t  warning (0, \"second parameter of %<va_start%> not last named argument\");\n+\t  warning_at (current_location,\n+\t\t      0,\n+\t\t      \"second parameter of %<va_start%> not last named argument\");\n \t}\n \n       /* Undefined by C99 7.15.1.4p4 (va_start):\n@@ -12164,8 +12175,12 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n          the default argument promotions, the behavior is undefined.\"\n       */\n       else if (DECL_REGISTER (arg))\n-        warning (0, \"undefined behaviour when second parameter of \"\n-                 \"%<va_start%> is declared with %<register%> storage\");\n+\t{\n+\t  warning_at (current_location,\n+\t\t      0,\n+\t\t      \"undefined behaviour when second parameter of \"\n+\t\t      \"%<va_start%> is declared with %<register%> storage\");\n+\t}\n \n       /* We want to verify the second parameter just once before the tree\n \t optimizers are run and then avoid keeping it in the tree,"}]}