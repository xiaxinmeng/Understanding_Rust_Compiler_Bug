{"sha": "ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "node_id": "C_kwDOANBUbNoAKGVlMWNiNDNiYzc2ZGU4MDBlZmEwYWRlNjg3YjBjZDI4ZTYyYTVmODI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-26T14:34:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-05T12:41:27Z"}, "message": "tree-optimization/104162 - CSE of &MEM[ptr].a[i] and ptr + CST\n\nThis adds the capability to value-numbering of treating complex\naddress expressions where the offset becomes invariant as equal\nto a POINTER_PLUS_EXPR.  This restores CSE that is now prevented\nby early lowering of &MEM[ptr + CST] to a POINTER_PLUS_EXPR.\n\nUnfortunately this regresses gcc.dg/asan/pr99673.c again, so\nthe testcase is adjusted accordingly.\n\n2022-01-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104162\n\t* tree-ssa-sccvn.cc (vn_reference_lookup): Handle\n\t&MEM[_1 + 5].a[i] like a POINTER_PLUS_EXPR if the offset\n\tbecomes invariant.\n\t(vn_reference_insert): Likewise.\n\n\t* gcc.dg/tree-ssa/ssa-fre-99.c: New testcase.\n\t* gcc.dg/asan/pr99673.c: Adjust.", "tree": {"sha": "d65098810337ddcdeb91b4dfbfd31c103879810d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d65098810337ddcdeb91b4dfbfd31c103879810d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92fff39f06449f907d8781a5dcaad0e8b9743480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fff39f06449f907d8781a5dcaad0e8b9743480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fff39f06449f907d8781a5dcaad0e8b9743480"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "a1e9631af2e10ea31405b338857191dbce13e52d", "filename": "gcc/testsuite/gcc.dg/asan/pr99673.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr99673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr99673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr99673.c?ref=ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile } */\n+/* Skip XPASS cases.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-O1\" \"-O2 -flto\" } { \"\" } } */\n /* { dg-additional-options \"-Wstringop-overread\" } */\n \n struct B {\n@@ -22,6 +24,6 @@ void g (struct C *pc, struct D *pd, int i)\n   pd->i = pb->i;\n \n   const short *psa = pb->a[i].sa;\n-  if (f (psa))\n+  if (f (psa)) /* { dg-bogus \"from a region of size\" \"pr99673\" { xfail *-*-* } } */\n     return;\n }"}, {"sha": "101d0d63f7a13cd775b9356939390806512de1fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-99.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-99.c?ref=ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* Disable FRE1 because that for the sake of __builtin_object_size\n+   will not consider the equality but still valueize 'i', defeating\n+   the purpose of the check.  */\n+/* { dg-options \"-O -fdump-tree-fre3 -fdisable-tree-fre1\" } */\n+\n+struct S { int a[4]; };\n+\n+int i;\n+int bar (struct S *p)\n+{\n+  char *q = (char *)p + 4;\n+  i = 1;\n+  int *r = &((struct S *)p)->a[i];\n+  return q == (char *)r;\n+}\n+int baz (struct S *p)\n+{\n+  i = 1;\n+  int *r = &((struct S *)p)->a[i];\n+  char *q = (char *)p + 4;\n+  return q == (char *)r;\n+}\n+\n+/* Verify FRE can handle valueizing &p->a[i] and value-numbering it\n+   equal to a POINTER_PLUS_EXPR.  */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"fre3\" } } */"}, {"sha": "76587632312738fd77b636478880bf7a30be4611", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1cb43bc76de800efa0ade687b0cd28e62a5f82/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "patch": "@@ -3666,6 +3666,38 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n   vr1.vuse = vuse_ssa_val (vuse);\n   vr1.operands = operands\n     = valueize_shared_reference_ops_from_ref (op, &valueized_anything);\n+\n+  /* Handle &MEM[ptr + 5].b[1].c as POINTER_PLUS_EXPR.  Avoid doing\n+     this before the pass folding __builtin_object_size had a chance to run.  */\n+  if ((cfun->curr_properties & PROP_objsz)\n+      && operands[0].opcode == ADDR_EXPR\n+      && operands.last ().opcode == SSA_NAME)\n+    {\n+      poly_int64 off = 0;\n+      vn_reference_op_t vro;\n+      unsigned i;\n+      for (i = 1; operands.iterate (i, &vro); ++i)\n+\t{\n+\t  if (vro->opcode == SSA_NAME)\n+\t    break;\n+\t  else if (known_eq (vro->off, -1))\n+\t    break;\n+\t  off += vro->off;\n+\t}\n+      if (i == operands.length () - 1)\n+\t{\n+\t  gcc_assert (operands[i-1].opcode == MEM_REF);\n+\t  tree ops[2];\n+\t  ops[0] = operands[i].op0;\n+\t  ops[1] = wide_int_to_tree (sizetype, off);\n+\t  tree res = vn_nary_op_lookup_pieces (2, POINTER_PLUS_EXPR,\n+\t\t\t\t\t       TREE_TYPE (op), ops, NULL);\n+\t  if (res)\n+\t    return res;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n   vr1.type = TREE_TYPE (op);\n   ao_ref op_ref;\n   ao_ref_init (&op_ref, op);\n@@ -3757,13 +3789,45 @@ vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n   vn_reference_t vr1;\n   bool tem;\n \n+  vec<vn_reference_op_s> operands\n+    = valueize_shared_reference_ops_from_ref (op, &tem);\n+  /* Handle &MEM[ptr + 5].b[1].c as POINTER_PLUS_EXPR.  Avoid doing this\n+     before the pass folding __builtin_object_size had a chance to run.  */\n+  if ((cfun->curr_properties & PROP_objsz)\n+      && operands[0].opcode == ADDR_EXPR\n+      && operands.last ().opcode == SSA_NAME)\n+    {\n+      poly_int64 off = 0;\n+      vn_reference_op_t vro;\n+      unsigned i;\n+      for (i = 1; operands.iterate (i, &vro); ++i)\n+\t{\n+\t  if (vro->opcode == SSA_NAME)\n+\t    break;\n+\t  else if (known_eq (vro->off, -1))\n+\t    break;\n+\t  off += vro->off;\n+\t}\n+      if (i == operands.length () - 1)\n+\t{\n+\t  gcc_assert (operands[i-1].opcode == MEM_REF);\n+\t  tree ops[2];\n+\t  ops[0] = operands[i].op0;\n+\t  ops[1] = wide_int_to_tree (sizetype, off);\n+\t  vn_nary_op_insert_pieces (2, POINTER_PLUS_EXPR,\n+\t\t\t\t    TREE_TYPE (op), ops, result,\n+\t\t\t\t    VN_INFO (result)->value_id);\n+\t  return;\n+\t}\n+    }\n+\n   vr1 = XOBNEW (&vn_tables_obstack, vn_reference_s);\n   if (TREE_CODE (result) == SSA_NAME)\n     vr1->value_id = VN_INFO (result)->value_id;\n   else\n     vr1->value_id = get_or_alloc_constant_value_id (result);\n   vr1->vuse = vuse_ssa_val (vuse);\n-  vr1->operands = valueize_shared_reference_ops_from_ref (op, &tem).copy ();\n+  vr1->operands = operands.copy ();\n   vr1->type = TREE_TYPE (op);\n   vr1->punned = false;\n   ao_ref op_ref;"}]}