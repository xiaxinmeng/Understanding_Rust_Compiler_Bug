{"sha": "f24a153ab2b784ce27394592e4e58ee40645f476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0YTE1M2FiMmI3ODRjZTI3Mzk0NTkyZTRlNThlZTQwNjQ1ZjQ3Ng==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-18T00:43:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-18T00:43:13Z"}, "message": "cppinit.c (struct builtin): Remove unused fields.\n\n\t* cppinit.c (struct builtin): Remove unused fields.\n\t(CPLUS, BUILTIN, OPERATOR, O, builtin_array_end): Kill.\n\t(operator_array): New - was second half of builtin_array.\n\t(init_builtins): Simplify loop over builtin_array/operator_array.\n\nFrom-SVN: r53574", "tree": {"sha": "372c3e2dc79679b7eb923e4098b6d3906f14e38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/372c3e2dc79679b7eb923e4098b6d3906f14e38d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24a153ab2b784ce27394592e4e58ee40645f476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24a153ab2b784ce27394592e4e58ee40645f476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24a153ab2b784ce27394592e4e58ee40645f476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24a153ab2b784ce27394592e4e58ee40645f476/comments", "author": null, "committer": null, "parents": [{"sha": "124033357df74901f7bfce2d2c6e0483b19eddbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124033357df74901f7bfce2d2c6e0483b19eddbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124033357df74901f7bfce2d2c6e0483b19eddbd"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "590cf75b36d9675057a41149bea3c86aaaaec48d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24a153ab2b784ce27394592e4e58ee40645f476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24a153ab2b784ce27394592e4e58ee40645f476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f24a153ab2b784ce27394592e4e58ee40645f476", "patch": "@@ -1,3 +1,10 @@\n+2002-05-17  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cppinit.c (struct builtin): Remove unused fields.\n+\t(CPLUS, BUILTIN, OPERATOR, O, builtin_array_end): Kill.\n+\t(operator_array): New - was second half of builtin_array.\n+\t(init_builtins): Simplify loop over builtin_array/operator_array.\n+\n 2002-05-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* defaults.h (UNIQUE_SECTION): Remove."}, {"sha": "5d91005755c632dac2745b077ebfc1ac96045fe1", "filename": "gcc/cppinit.c", "status": "modified", "additions": 46, "deletions": 60, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24a153ab2b784ce27394592e4e58ee40645f476/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24a153ab2b784ce27394592e4e58ee40645f476/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=f24a153ab2b784ce27394592e4e58ee40645f476", "patch": "@@ -614,30 +614,28 @@ cpp_destroy (pfile)\n   return result;\n }\n \n-\n /* This structure defines one built-in identifier.  A node will be\n-   entered in the hash table under the name NAME, with value VALUE (if\n-   any).  If flags has OPERATOR, the node's operator field is used; if\n-   flags has BUILTIN the node's builtin field is used.  Macros that are\n-   known at build time should not be flagged BUILTIN, as then they do\n-   not appear in macro dumps with e.g. -dM or -dD.\n-\n-   Also, macros with CPLUS set in the flags field are entered only for C++.  */\n+   entered in the hash table under the name NAME, with value VALUE.\n+\n+   There are two tables of these.  builtin_array holds all the\n+   \"builtin\" macros: these are handled by builtin_macro() in\n+   cppmacro.c.  Builtin is somewhat of a misnomer -- the property of\n+   interest is that these macros require special code to compute their\n+   expansions.  The value is a \"builtin_type\" enumerator.\n+\n+   operator_array holds the C++ named operators.  These are keywords\n+   which act as aliases for punctuators.  In C++, they cannot be\n+   altered through #define, and #if recognizes them as operators.  In\n+   C, these are not entered into the hash table at all (but see\n+   <iso646.h>).  The value is a token-type enumerator.  */\n struct builtin\n {\n   const uchar *name;\n-  const char *value;\n-  unsigned char builtin;\n-  unsigned char operator;\n-  unsigned short flags;\n   unsigned short len;\n+  unsigned short value;\n };\n-#define CPLUS\t\t0x04\n-#define BUILTIN\t\t0x08\n-#define OPERATOR  \t0x10\n \n-#define B(n, t)       { U n, 0, t, 0, BUILTIN, sizeof n - 1 }\n-#define O(n, c, f)    { U n, 0, 0, c, OPERATOR | f, sizeof n - 1 }\n+#define B(n, t)    { DSC(n), t }\n static const struct builtin builtin_array[] =\n {\n   B(\"__TIME__\",\t\t BT_TIME),\n@@ -648,26 +646,23 @@ static const struct builtin builtin_array[] =\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL),\n   B(\"_Pragma\",\t\t BT_PRAGMA),\n   B(\"__STDC__\",\t\t BT_STDC),\n+};\n \n-  /* Named operators known to the preprocessor.  These cannot be #defined\n-     and always have their stated meaning.  They are treated like normal\n-     identifiers except for the type code and the meaning.  Most of them\n-     are only for C++ (but see iso646.h).  */\n-  O(\"and\",\tCPP_AND_AND, CPLUS),\n-  O(\"and_eq\",\tCPP_AND_EQ,  CPLUS),\n-  O(\"bitand\",\tCPP_AND,     CPLUS),\n-  O(\"bitor\",\tCPP_OR,      CPLUS),\n-  O(\"compl\",\tCPP_COMPL,   CPLUS),\n-  O(\"not\",\tCPP_NOT,     CPLUS),\n-  O(\"not_eq\",\tCPP_NOT_EQ,  CPLUS),\n-  O(\"or\",\tCPP_OR_OR,   CPLUS),\n-  O(\"or_eq\",\tCPP_OR_EQ,   CPLUS),\n-  O(\"xor\",\tCPP_XOR,     CPLUS),\n-  O(\"xor_eq\",\tCPP_XOR_EQ,  CPLUS)\n+static const struct builtin operator_array[] =\n+{\n+  B(\"and\",\tCPP_AND_AND),\n+  B(\"and_eq\",\tCPP_AND_EQ),\n+  B(\"bitand\",\tCPP_AND),\n+  B(\"bitor\",\tCPP_OR),\n+  B(\"compl\",\tCPP_COMPL),\n+  B(\"not\",\tCPP_NOT),\n+  B(\"not_eq\",\tCPP_NOT_EQ),\n+  B(\"or\",\tCPP_OR_OR),\n+  B(\"or_eq\",\tCPP_OR_EQ),\n+  B(\"xor\",\tCPP_XOR),\n+  B(\"xor_eq\",\tCPP_XOR_EQ)\n };\n #undef B\n-#undef O\n-#define builtin_array_end (builtin_array + ARRAY_SIZE (builtin_array))\n \n /* Subroutine of cpp_read_main_file; reads the builtins table above and\n    enters them, and language-specific macros, into the hash table.  */\n@@ -677,29 +672,26 @@ init_builtins (pfile)\n {\n   const struct builtin *b;\n \n-  for(b = builtin_array; b < builtin_array_end; b++)\n+  for(b = builtin_array;\n+      b < (builtin_array + ARRAY_SIZE (builtin_array));\n+      b++)\n     {\n-      cpp_hashnode *hp;\n-      if ((b->flags & CPLUS) && ! CPP_OPTION (pfile, cplusplus))\n-\tcontinue;\n-\n-      if ((b->flags & OPERATOR) && ! CPP_OPTION (pfile, operator_names))\n-\tcontinue;\n-\n-      hp = cpp_lookup (pfile, b->name, b->len);\n-      if (b->flags & OPERATOR)\n-\t{\n-\t  hp->flags |= NODE_OPERATOR;\n-\t  hp->value.operator = b->operator;\n-\t}\n-      else\n-\t{\n-\t  hp->type = NT_MACRO;\n-\t  hp->flags |= NODE_BUILTIN | NODE_WARN;\n-\t  hp->value.builtin = b->builtin;\n-\t}\n+      cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n+      hp->type = NT_MACRO;\n+      hp->flags |= NODE_BUILTIN | NODE_WARN;\n+      hp->value.builtin = b->value;\n     }\n \n+  if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n+    for (b = operator_array;\n+\t b < (operator_array + ARRAY_SIZE (operator_array));\n+\t b++)\n+      {\n+\tcpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n+\thp->flags |= NODE_OPERATOR;\n+\thp->value.operator = b->value;\n+      }\n+\n   if (CPP_OPTION (pfile, cplusplus))\n     _cpp_define_builtin (pfile, \"__cplusplus 1\");\n \n@@ -724,12 +716,6 @@ init_builtins (pfile)\n   if (pfile->cb.register_builtins)\n     (*pfile->cb.register_builtins) (pfile);\n }\n-#undef BUILTIN\n-#undef OPERATOR\n-#undef VERS\n-#undef ULP\n-#undef CPLUS\n-#undef builtin_array_end\n \n /* And another subroutine.  This one sets up the standard include path.  */\n static void"}]}