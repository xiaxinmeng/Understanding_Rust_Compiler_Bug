{"sha": "33d5e2dcdae9e0690146af0db0dac90698f53594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkNWUyZGNkYWU5ZTA2OTAxNDZhZjBkYjBkYWM5MDY5OGY1MzU5NA==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-12-23T19:58:17Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-12-23T19:58:17Z"}, "message": "avr.c (out_movqi_r_mr, [...]): Use %o instead of %4 in output templates...\n\n\t* config/avr/avr.c (out_movqi_r_mr, out_movhi_r_mr, out_movsi_r_mr,\n\tout_movsi_mr_r, out_movqi_mr_r, out_movhi_mr_r): Use %o instead of\n\t%4 in output templates, do not modify operands passed by the caller.\n\nFrom-SVN: r38480", "tree": {"sha": "bc28487be52d0775e5ff084578d0bd494bc4e98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc28487be52d0775e5ff084578d0bd494bc4e98d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33d5e2dcdae9e0690146af0db0dac90698f53594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d5e2dcdae9e0690146af0db0dac90698f53594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d5e2dcdae9e0690146af0db0dac90698f53594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d5e2dcdae9e0690146af0db0dac90698f53594/comments", "author": null, "committer": null, "parents": [{"sha": "dee75dd556ed454acdc85c27cdad754fce73a491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee75dd556ed454acdc85c27cdad754fce73a491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee75dd556ed454acdc85c27cdad754fce73a491"}], "stats": {"total": 276, "additions": 110, "deletions": 166}, "files": [{"sha": "776a258c7415966bbbcdd5703629bec5c46af1ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d5e2dcdae9e0690146af0db0dac90698f53594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d5e2dcdae9e0690146af0db0dac90698f53594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33d5e2dcdae9e0690146af0db0dac90698f53594", "patch": "@@ -1,3 +1,9 @@\n+2000-12-23  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (out_movqi_r_mr, out_movhi_r_mr, out_movsi_r_mr,\n+\tout_movsi_mr_r, out_movqi_mr_r, out_movhi_mr_r): Use %o instead of\n+\t%4 in output templates, do not modify operands passed by the caller.\n+\n 2000-12-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* builtins.def (BUILT_IN_LABS, BUILT_IN_LLABS, BUILT_IN_IMAXABS):"}, {"sha": "669c163f1a4acc1a10c24d5c1b39578ff0516b05", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 104, "deletions": 166, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d5e2dcdae9e0690146af0db0dac90698f53594/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d5e2dcdae9e0690146af0db0dac90698f53594/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=33d5e2dcdae9e0690146af0db0dac90698f53594", "patch": "@@ -1775,41 +1775,30 @@ out_movqi_r_mr (insn, op, l)\n \t  int disp = INTVAL (XEXP (x,1));\n \t  if (REGNO (XEXP (x,0)) != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n+\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n-\t    {\n-\t      *l = 3;\n-\t      op[4] = XEXP (x, 1);\n-\t      return (AS2 (adiw, r28, %4-63) CR_TAB\n-\t\t      AS2 (ldd, %0,Y+63)  CR_TAB\n-\t\t      AS2 (sbiw, r28, %4-63));\n-\t    }\n-\t  else\n-\t    {\n-\t      *l = 5;\n-\t      op[4] = XEXP (x,1);\n-\t      return (AS2 (subi, r28, lo8(-%4))  CR_TAB\n-\t\t      AS2 (sbci, r29, hi8(-%4)) CR_TAB\n-\t\t      AS2 (ld, %0,Y)              CR_TAB\n-\t\t      AS2 (subi, r28, lo8(%4))   CR_TAB\n-\t\t      AS2 (sbci, r29, hi8(%4)));\n-\t    }\n+\t    return *l = 3, (AS2 (adiw,r28,%o1-63) CR_TAB\n+\t\t\t    AS2 (ldd,%0,Y+63)     CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o1-63));\n+\n+\t  return *l = 5, (AS2 (subi,r28,lo8(-%o1)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o1)) CR_TAB\n+\t\t\t  AS2 (ld,%0,Y)            CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o1))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o1)));\n \t}\n       else if (REGNO (XEXP (x,0)) == REG_X)\n \t{\n-\t  op[4] = XEXP (x, 1);\n \t  /* This is a paranoid case LEGITIMIZE_RELOAD_ADDRESS must exclude\n \t     it but I have this situation with extremal optimizing options.  */\n \t  if (reg_overlap_mentioned_p (dest, XEXP (x,0))\n \t      || reg_unused_after (insn, XEXP (x,0)))\n-\t    {\n-\t      *l = 2;\n-\t      return (AS2 (adiw,r26,%4) CR_TAB\n-\t\t      AS2 (ld,%0,X));\n-\t    }\n-\t  *l = 3;\n-\t  return (AS2 (adiw,r26,%4) CR_TAB\n-\t\t  AS2 (ld,%0,X)     CR_TAB\n-\t\t  AS2 (sbiw,r26,%4));\n+\t    return *l = 2, (AS2 (adiw,r26,%o1) CR_TAB\n+\t\t\t    AS2 (ld,%0,X));\n+\n+\t  return *l = 3, (AS2 (adiw,r26,%o1) CR_TAB\n+\t\t\t  AS2 (ld,%0,X)      CR_TAB\n+\t\t\t  AS2 (sbiw,r26,%o1));\n \t}\n       *l = 1;\n       return AS2 (ldd,%0,%1);\n@@ -1870,61 +1859,39 @@ out_movhi_r_mr (insn, op, l)\n       \n       if (disp > MAX_LD_OFFSET (GET_MODE (src)))\n \t{\n-\t  op[4] = XEXP (base, 1);\n-\n \t  if (REGNO (XEXP (base, 0)) != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n \t  \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n-\t    {\n-\t      *l = 4;\n-\t      return (AS2 (adiw,r28,%4-62) CR_TAB\n-\t\t      AS2 (ldd,%A0,Y+62)   CR_TAB\n-\t\t      AS2 (ldd,%B0,Y+63)   CR_TAB\n-\t\t      AS2 (sbiw,r28,%4-62));\n-\t    }\n-\t  else\n-\t    {\n-\t      *l = 6;\n-\t      return (AS2 (subi,r28,lo8(-%4)) CR_TAB\n-\t\t      AS2 (sbci,r29,hi8(-%4)) CR_TAB\n-\t\t      AS2 (ld,%A0,Y)          CR_TAB\n-\t\t      AS2 (ldd,%B0,Y+1)       CR_TAB\n-\t\t      AS2 (subi,r28,lo8(%4))  CR_TAB\n-\t\t      AS2 (sbci,r29,hi8(%4)));\n-\t    }\n+\t    return *l = 4, (AS2 (adiw,r28,%o1-62) CR_TAB\n+\t\t\t    AS2 (ldd,%A0,Y+62)    CR_TAB\n+\t\t\t    AS2 (ldd,%B0,Y+63)    CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o1-62));\n+\n+\t  return *l = 6, (AS2 (subi,r28,lo8(-%o1)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o1)) CR_TAB\n+\t\t\t  AS2 (ld,%A0,Y)           CR_TAB\n+\t\t\t  AS2 (ldd,%B0,Y+1)        CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o1))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o1)));\n \t}\n       if (reg_base == REG_X)\n \t{\n \t  /* This is a paranoid case. LEGITIMIZE_RELOAD_ADDRESS must exclude\n \t     it but I have this situation with extremal\n \t     optimization options.  */\n \t  \n-\t  op[4] = XEXP (base, 1);\n-\t  \n+\t  *l = 4;\n \t  if (reg_base == reg_dest)\n-\t    {\n-\t      *l = 4;\n-\t      return (AS2 (adiw,r26,%4)       CR_TAB\n-\t\t      AS2 (ld,__tmp_reg__,X+) CR_TAB\n-\t\t      AS2 (ld,%B0,X)          CR_TAB\n-\t\t      AS2 (mov,%A0,__tmp_reg__));\n-\t    }\n+\t    return (AS2 (adiw,r26,%o1)      CR_TAB\n+\t\t    AS2 (ld,__tmp_reg__,X+) CR_TAB\n+\t\t    AS2 (ld,%B0,X)          CR_TAB\n+\t\t    AS2 (mov,%A0,__tmp_reg__));\n \n-\t  if (INTVAL (op[4]) == 63)\n-\t    {\n-\t      *l = 5;\n-\t      return (AS2 (adiw,r26,%4)   CR_TAB\n-\t\t      AS2 (ld,%A0,X+)     CR_TAB\n-\t\t      AS2 (ld,%B0,X)      CR_TAB\n-\t\t      AS2 (subi,r26,%4+1) CR_TAB\n-\t\t      AS2 (sbci,r27,0));\n-\t    }\n-\t  *l = 4;\n-\t  return (AS2 (adiw,r26,%4) CR_TAB\n-\t\t  AS2 (ld,%A0,X+)   CR_TAB\n-\t\t  AS2 (ld,%B0,X)    CR_TAB\n-\t\t  AS2 (sbiw,r26,%4+1));\n+\t  return (AS2 (adiw,r26,%o1) CR_TAB\n+\t\t  AS2 (ld,%A0,X+)    CR_TAB\n+\t\t  AS2 (ld,%B0,X)     CR_TAB\n+\t\t  AS2 (sbiw,r26,%o1+1));\n \t}\n \n       if (reg_base == reg_dest)\n@@ -2050,28 +2017,23 @@ out_movsi_r_mr (insn, op, l)\n \t{\n \t  if (REGNO (XEXP (base, 0)) != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n+\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n-\t    {\n-\t      op[4] = GEN_INT (disp - 60);\n-\t      return *l=6,(AS2 (adiw, r28, %4) CR_TAB\n-\t\t\t   AS2 (ldd, %A0,Y+60)       CR_TAB\n-\t\t\t   AS2 (ldd, %B0,Y+61)     CR_TAB\n-\t\t\t   AS2 (ldd, %C0,Y+62)     CR_TAB\n-\t\t\t   AS2 (ldd, %D0,Y+63)     CR_TAB\n-\t\t\t   AS2 (sbiw, r28, %4));\n-\t    }\n-\t  else\n-\t    {\n-\t      op[4] = XEXP (base, 1);\n-\t      return *l=8,(AS2 (subi, r28, lo8(-%4))  CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(-%4)) CR_TAB\n-\t\t\t   AS2 (ld, %A0,Y)             CR_TAB\n-\t\t\t   AS2 (ldd, %B0,Y+1)          CR_TAB\n-\t\t\t   AS2 (ldd, %C0,Y+2)          CR_TAB\n-\t\t\t   AS2 (ldd, %D0,Y+3)          CR_TAB\n-\t\t\t   AS2 (subi, r28, lo8(%4))   CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(%4)));\n-\t    }\n+\t    return *l = 6, (AS2 (adiw,r28,%o1-60) CR_TAB\n+\t\t\t    AS2 (ldd,%A0,Y+60)    CR_TAB\n+\t\t\t    AS2 (ldd,%B0,Y+61)    CR_TAB\n+\t\t\t    AS2 (ldd,%C0,Y+62)    CR_TAB\n+\t\t\t    AS2 (ldd,%D0,Y+63)    CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o1-60));\n+\n+\t  return *l = 8, (AS2 (subi,r28,lo8(-%o1)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o1)) CR_TAB\n+\t\t\t  AS2 (ld,%A0,Y)           CR_TAB\n+\t\t\t  AS2 (ldd,%B0,Y+1)        CR_TAB\n+\t\t\t  AS2 (ldd,%C0,Y+2)        CR_TAB\n+\t\t\t  AS2 (ldd,%D0,Y+3)        CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o1))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o1)));\n \t}\n \n       reg_base = true_regnum (XEXP (base, 0));\n@@ -2227,28 +2189,23 @@ out_movsi_mr_r (insn, op, l)\n \t{\n \t  if (reg_base != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n+\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n-\t    {\n-\t      op[4] = GEN_INT (disp - 60);\n-\t      return *l=6,(AS2 (adiw, r28, %4) CR_TAB\n-\t\t\t   AS2 (std, Y+60,%A1)       CR_TAB\n-\t\t\t   AS2 (std, Y+61,%B1)     CR_TAB\n-\t\t\t   AS2 (std, Y+62,%C1)     CR_TAB\n-\t\t\t   AS2 (std, Y+63,%D1)     CR_TAB\n-\t\t\t   AS2 (sbiw, r28, %4));\n-\t    }\n-\t  else\n-\t    {\n-\t      op[4] = XEXP (base, 1);\n-\t      return *l=8,(AS2 (subi, r28, lo8(-%4))  CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(-%4)) CR_TAB\n-\t\t\t   AS2 (st, Y,%A1)             CR_TAB\n-\t\t\t   AS2 (std, Y+1,%B1)          CR_TAB\n-\t\t\t   AS2 (std, Y+2,%C1)          CR_TAB\n-\t\t\t   AS2 (std, Y+3,%D1)          CR_TAB\n-\t\t\t   AS2 (subi, r28, lo8(%4))   CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(%4)));\n-\t    }\n+\t    return *l = 6, (AS2 (adiw,r28,%o0-60) CR_TAB\n+\t\t\t    AS2 (std,Y+60,%A1)    CR_TAB\n+\t\t\t    AS2 (std,Y+61,%B1)    CR_TAB\n+\t\t\t    AS2 (std,Y+62,%C1)    CR_TAB\n+\t\t\t    AS2 (std,Y+63,%D1)    CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o0-60));\n+\n+\t  return *l = 8, (AS2 (subi,r28,lo8(-%o0)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o0)) CR_TAB\n+\t\t\t  AS2 (st,Y,%A1)           CR_TAB\n+\t\t\t  AS2 (std,Y+1,%B1)        CR_TAB\n+\t\t\t  AS2 (std,Y+2,%C1)        CR_TAB\n+\t\t\t  AS2 (std,Y+3,%D1)        CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o0))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o0)));\n \t}\n       if (reg_base == REG_X)\n \t{\n@@ -2530,55 +2487,41 @@ out_movqi_mr_r (insn, op, l)\n \t  int disp = INTVAL (XEXP (x,1));\n \t  if (REGNO (XEXP (x,0)) != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n+\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n-\t    {\n-\t      *l = 3;\n-\t      op[4] = XEXP (x, 1);\n-\t      return (AS2 (adiw, r28, %4-63) CR_TAB\n-\t\t      AS2 (std, Y+63,%1)        CR_TAB\n-\t\t      AS2 (sbiw, r28, %4-63));\n-\t    }\n-\t  else\n-\t    {\n-\t      *l = 5;\n-\t      op[4] = XEXP (x,1);\n-\t      return (AS2 (subi, r28, lo8(-%4))  CR_TAB\n-\t\t      AS2 (sbci, r29, hi8(-%4)) CR_TAB\n-\t\t      AS2 (st, Y,%1)              CR_TAB\n-\t\t      AS2 (subi, r28, lo8(%4))   CR_TAB\n-\t\t      AS2 (sbci, r29, hi8(%4)));\n-\t    }\n+\t    return *l = 3, (AS2 (adiw,r28,%o0-63) CR_TAB\n+\t\t\t    AS2 (std,Y+63,%1)     CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o0-63));\n+\n+\t  return *l = 5, (AS2 (subi,r28,lo8(-%o0)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o0)) CR_TAB\n+\t\t\t  AS2 (st,Y,%1)            CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o0))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o0)));\n \t}\n       else if (REGNO (XEXP (x,0)) == REG_X)\n \t{\n-\t  op[4] = XEXP (x,1);\n \t  if (reg_overlap_mentioned_p (src, XEXP (x, 0)))\n \t    {\n \t      if (reg_unused_after (insn, XEXP (x,0)))\n-\t\t{\n-\t\t  *l = 3;\n-\t\t  return (AS2 (mov,__tmp_reg__,%1) CR_TAB\n-\t\t\t  AS2 (adiw,r26,%4)        CR_TAB\n-\t\t\t  AS2 (st,X,__tmp_reg__));\n-\t\t}\n-\t      *l = 4;\n-\t      return (AS2 (mov,__tmp_reg__,%1) CR_TAB\n-\t\t      AS2 (adiw,r26,%4)        CR_TAB\n-\t\t      AS2 (st,X,__tmp_reg__)   CR_TAB\n-\t\t      AS2 (sbiw,r26,%4));\n+\t\treturn *l = 3, (AS2 (mov,__tmp_reg__,%1) CR_TAB\n+\t\t\t\tAS2 (adiw,r26,%o0)       CR_TAB\n+\t\t\t\tAS2 (st,X,__tmp_reg__));\n+\n+\t      return *l = 4, (AS2 (mov,__tmp_reg__,%1) CR_TAB\n+\t\t\t      AS2 (adiw,r26,%o0)       CR_TAB\n+\t\t\t      AS2 (st,X,__tmp_reg__)   CR_TAB\n+\t\t\t      AS2 (sbiw,r26,%o0));\n \t    }\n \t  else\n \t    {\n \t      if (reg_unused_after (insn, XEXP (x,0)))\n-\t\t{\n-\t\t  *l = 2;\n-\t\t  return (AS2 (adiw,r26,%4) CR_TAB\n-\t\t\t  AS2 (st,X,%1));\n-\t\t}\n-\t      *l = 3;\n-\t      return (AS2 (adiw,r26,%4) CR_TAB\n-\t\t      AS2 (st,X,%1)      CR_TAB\n-\t\t      AS2 (sbiw,r26,%4));\n+\t\treturn *l = 2, (AS2 (adiw,r26,%o0) CR_TAB\n+\t\t\t\tAS2 (st,X,%1));\n+\n+\t      return *l = 3, (AS2 (adiw,r26,%o0) CR_TAB\n+\t\t\t      AS2 (st,X,%1)      CR_TAB\n+\t\t\t      AS2 (sbiw,r26,%o0));\n \t    }\n \t}\n       *l = 1;\n@@ -2655,24 +2598,19 @@ out_movhi_mr_r (insn, op, l)\n \t{\n \t  if (reg_base != REG_Y)\n \t    fatal_insn (\"Incorrect insn:\",insn);\n+\n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n-\t    {\n-\t      op[4] = GEN_INT (disp - 62);\n-\t      return *l=4,(AS2 (adiw, r28, %4) CR_TAB\n-\t\t\t   AS2 (std, Y+62,%A1) CR_TAB\n-\t\t\t   AS2 (std, Y+63,%B1) CR_TAB\n-\t\t\t   AS2 (sbiw, r28, %4));\n-\t    }\n-\t  else\n-\t    {\n-\t      op[4] = XEXP (base, 1);\n-\t      return *l=6,(AS2 (subi, r28, lo8(-%4))  CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(-%4)) CR_TAB\n-\t\t\t   AS2 (st, Y,%A1)           CR_TAB\n-\t\t\t   AS2 (std, Y+1,%B1)        CR_TAB\n-\t\t\t   AS2 (subi, r28, lo8(%4))  CR_TAB\n-\t\t\t   AS2 (sbci, r29, hi8(%4)));\n-\t    }\n+\t    return *l = 4, (AS2 (adiw,r28,%o0-62) CR_TAB\n+\t\t\t    AS2 (std,Y+62,%A1)    CR_TAB\n+\t\t\t    AS2 (std,Y+63,%B1)    CR_TAB\n+\t\t\t    AS2 (sbiw,r28,%o0-62));\n+\n+\t  return *l = 6, (AS2 (subi,r28,lo8(-%o0)) CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(-%o0)) CR_TAB\n+\t\t\t  AS2 (st,Y,%A1)           CR_TAB\n+\t\t\t  AS2 (std,Y+1,%B1)        CR_TAB\n+\t\t\t  AS2 (subi,r28,lo8(%o0))  CR_TAB\n+\t\t\t  AS2 (sbci,r29,hi8(%o0)));\n \t}\n       if (reg_base == REG_X)\n \t{"}]}