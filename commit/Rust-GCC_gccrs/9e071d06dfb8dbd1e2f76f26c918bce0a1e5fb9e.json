{"sha": "9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwNzFkMDZkZmI4ZGJkMWUyZjc2ZjI2YzkxOGJjZTBhMWU1ZmI5ZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-08-05T13:53:20Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-05T13:53:20Z"}, "message": "spu.h (CANNOT_CHANGE_MODE_CLASS): Allow (multi)word-sized SUBREG of multi-word hard register.\n\n\t* config/spu/spu.h (CANNOT_CHANGE_MODE_CLASS): Allow (multi)word-sized\n\tSUBREG of multi-word hard register.\n\t* config/spu/spu.c (valid_subreg): Likewise.\n\t(adjust_operand): Handle SUBREGs of multi-word hard registers.\n\nFrom-SVN: r138711", "tree": {"sha": "9408472c21f527ea51e2804155c844ded6a42836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9408472c21f527ea51e2804155c844ded6a42836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/comments", "author": null, "committer": null, "parents": [{"sha": "21f560ba8e287996eb0af332ba965e7d6e62a77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f560ba8e287996eb0af332ba965e7d6e62a77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f560ba8e287996eb0af332ba965e7d6e62a77e"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "10385d926f89327e51708f4195fea9842545f09f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "patch": "@@ -1,3 +1,10 @@\n+2008-08-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.h (CANNOT_CHANGE_MODE_CLASS): Allow (multi)word-sized\n+\tSUBREG of multi-word hard register.\n+\t* config/spu/spu.c (valid_subreg): Likewise.\n+\t(adjust_operand): Handle SUBREGs of multi-word hard registers.\n+\n 2008-08-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-ivopts.c (add_iv_value_candidates): Also add"}, {"sha": "b40d12c014966e30b3caaa3a8a8d2df2e4ef7b52", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "patch": "@@ -419,7 +419,8 @@ valid_subreg (rtx op)\n   enum machine_mode im = GET_MODE (SUBREG_REG (op));\n   return om != VOIDmode && im != VOIDmode\n     && (GET_MODE_SIZE (im) == GET_MODE_SIZE (om)\n-\t|| (GET_MODE_SIZE (im) <= 4 && GET_MODE_SIZE (om) <= 4));\n+\t|| (GET_MODE_SIZE (im) <= 4 && GET_MODE_SIZE (om) <= 4)\n+\t|| (GET_MODE_SIZE (im) >= 16 && GET_MODE_SIZE (om) >= 16));\n }\n \n /* When insv and ext[sz]v ar passed a TI SUBREG, we want to strip it off\n@@ -429,8 +430,10 @@ adjust_operand (rtx op, HOST_WIDE_INT * start)\n {\n   enum machine_mode mode;\n   int op_size;\n-  /* Strip any SUBREG */\n-  if (GET_CODE (op) == SUBREG)\n+  /* Strip any paradoxical SUBREG.  */\n+  if (GET_CODE (op) == SUBREG\n+      && (GET_MODE_BITSIZE (GET_MODE (op))\n+\t  > GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op)))))\n     {\n       if (start)\n \t*start -="}, {"sha": "4180c4e46384e63b184b5b2db29239fb64b20849", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=9e071d06dfb8dbd1e2f76f26c918bce0a1e5fb9e", "patch": "@@ -263,6 +263,7 @@ enum reg_class {\n    only true for SPU. */\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \\\n         ((GET_MODE_SIZE (FROM) > 4 || GET_MODE_SIZE (TO) > 4) \\\n+\t && (GET_MODE_SIZE (FROM) < 16 || GET_MODE_SIZE (TO) < 16) \\\n \t && GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n #define REGISTER_TARGET_PRAGMAS() do {\t\t\t\t\t\\"}]}