{"sha": "26f096f9e545b3f951ab850f06fad454613b0e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmMDk2ZjllNTQ1YjNmOTUxYWI4NTBmMDZmYWQ0NTQ2MTNiMGU0Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-27T10:24:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-27T10:24:06Z"}, "message": "Warning fixes:\n\n        * bad.c (_ffebad_message_, ffebad_string_, ffebad_message_,\n        ffebad_bufputs_, ffebad_bufputs_, ffebad_start_, ffebad_string,\n        ffebad_finish): Const-ify a char*.\n        * bld.c (ffebld_op_string_, ffebld_op_string): Likewise.\n        * bld.h (ffebld_op_string): Likewise.\n        * com.c (ffecom_arglist_expr_, ffecom_build_f2c_string_,\n        ffecom_debug_kludge_, ffecom_f2c_make_type_,\n        ffecom_get_appended_identifier_, ffecom_get_identifier_,\n        ffecom_gfrt_args_): Likewise.\n        (ffecom_convert_narrow_, ffecom_convert_widen_): Add prototype.\n        (builtin_function, ffecom_gfrt_name_, ffecom_gfrt_argstring_,\n        ffecom_arglist_expr_, ffecom_build_f2c_string_,\n        ffecom_debug_kludge_, ffecom_f2c_make_type_,\n        ffecom_get_appended_identifier_, ffecom_get_external_identifier_,\n        ffecom_get_identifier_, ffecom_decl_field,\n        ffecom_get_invented_identifier, lang_print_error_function,\n        skip_redundant_dir_prefix, read_name_map, print_containing_files):\n        Const-ify a char*.\n        (savestring): Remove, use `xstrdup' instead.\n        * com.h (ffecom_decl_field, ffecom_get_invented_identifier):\n        Const-ify a char*.\n        * data.c (ffebld, ffedata_gather_): Make explicitly static.\n        * expr.c (ffeexpr_isdigits_, ffeexpr_percent_,\n        ffeexpr_reduced_concatenate_, ffeexpr_nil_real_,\n        ffeexpr_nil_number_, ffeexpr_nil_number_period_,\n        ffeexpr_nil_number_real_, ffeexpr_token_real_,\n        ffeexpr_token_number_, ffeexpr_token_number_period_,\n        ffeexpr_token_number_real_): Const-ify a char*.\n        * fini.c (xspaces): Likewise.\n        * global.c (ffeglobal_type_string_): Likewise.\n        (ffeglobal_drive): Protoize.\n        (ffeglobal_proc_def_arg): Const-ify a char*.\n        * global.h (ffeglobal_drive): Protoize.\n        (ffeglobal_proc_def_arg): Const-ify a char*.\n        * implic.c (ffeimplic_none, ffeimplic_peek_symbol_type):\n        Likewise.\n        * implic.h (ffeimplic_peek_symbol_type): Likewise.\n        * info.c (ffeinfo_basictype_string_, ffeinfo_kind_message_,\n        ffeinfo_kind_string_, ffeinfo_kindtype_string_,\n        ffeinfo_where_string_, ffeinfo_basictype_string,\n        ffeinfo_kind_message, ffeinfo_kind_string,\n        ffeinfo_kindtype_string, ffeinfo_where_string): Likewise.\n        * info.h (ffeinfo_basictype_string, ffeinfo_kind_message,\n        ffeinfo_kind_string, ffeinfo_kindtype_string,\n        ffeinfo_where_string): Likewise.\n        * intrin.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n        _ffeintrin_imp_, ffeintrin_check_, ffeintrin_cmp_name_,\n        ffeintrin_fulfill_specific, ffeintrin_init_0,\n        ffeintrin_is_actualarg, ffeintrin_is_intrinsic,\n        ffeintrin_name_generic, ffeintrin_name_implementation,\n        ffeintrin_name_specific): Likewise.\n        * intrin.h (ffeintrin_is_intrinsic, ffeintrin_name_generic,\n        ffeintrin_name_implementation, ffeintrin_name_specific): Likewise.\n        * lex.c (ffelex_type_string_, ffelex_token_new_character,\n        ffelex_token_new_name, ffelex_token_new_names,\n        ffelex_token_new_number): Likewise.\n        * lex.h (ffelex_token_new_character, ffelex_token_new_name,\n        ffelex_token_new_names, ffelex_token_new_number): Likewise.\n        * malloc.c (malloc_types_, malloc_pool_new, malloc_new_inpool_,\n        malloc_new_zinpool_): Likewise.\n        * malloc.h (malloc_new_inpool_, malloc_new_zinpool_,\n        malloc_pool_new): Likewise.\n        * name.c (ffename_space_drive_global, ffename_space_drive_symbol):\n        Protoize.\n        * name.h (ffename_space_drive_global, ffename_space_drive_symbol):\n        Likewise.\n        * symbol.c (ffesymbol_state_name_, ffesymbol_attr_name_,\n        ffesymbol_attrs_string): Const-ify a char*.\n        (ffesymbol_drive, ffesymbol_drive_sfnames): Protoize.\n        (ffesymbol_state_string): Const-ify a char*.\n        * symbol.h (ffesymbol_attrs_string): Likewise.\n        (ffesymbol_drive, ffesymbol_drive_sfnames): Protoize.\n        (ffesymbol_state_string): Const-ify a char*.\n        * target.c (ffetarget_layout): Likewise.\n        * target.h (ffetarget_layout): Likewise.\n\nFrom-SVN: r26013", "tree": {"sha": "7e09ee2a6c2fe78d743d5fb05a2b79c2356f2880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e09ee2a6c2fe78d743d5fb05a2b79c2356f2880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f096f9e545b3f951ab850f06fad454613b0e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f096f9e545b3f951ab850f06fad454613b0e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f096f9e545b3f951ab850f06fad454613b0e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f096f9e545b3f951ab850f06fad454613b0e43/comments", "author": null, "committer": null, "parents": [{"sha": "90e734a8538d4d9c58275878171da5f6df2fcf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e734a8538d4d9c58275878171da5f6df2fcf45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e734a8538d4d9c58275878171da5f6df2fcf45"}], "stats": {"total": 428, "additions": 262, "deletions": 166}, "files": [{"sha": "6b3f09fb96aa1aeceef131f7ce4fd29ff59c5cca", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -1,3 +1,106 @@\n+Sat Mar 27 13:00:43 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (_ffebad_message_, ffebad_string_, ffebad_message_,\n+\tffebad_bufputs_, ffebad_bufputs_, ffebad_start_, ffebad_string,\n+\tffebad_finish): Const-ify a char*.\n+\n+\t* bld.c (ffebld_op_string_, ffebld_op_string): Likewise.\n+\n+\t* bld.h (ffebld_op_string): Likewise.\n+\n+\t* com.c (ffecom_arglist_expr_, ffecom_build_f2c_string_,\n+\tffecom_debug_kludge_, ffecom_f2c_make_type_,\n+\tffecom_get_appended_identifier_, ffecom_get_identifier_,\n+\tffecom_gfrt_args_): Likewise.\n+\t(ffecom_convert_narrow_, ffecom_convert_widen_): Add prototype.\n+\t(builtin_function, ffecom_gfrt_name_, ffecom_gfrt_argstring_,\n+\tffecom_arglist_expr_, ffecom_build_f2c_string_,\n+\tffecom_debug_kludge_, ffecom_f2c_make_type_,\n+\tffecom_get_appended_identifier_, ffecom_get_external_identifier_,\n+\tffecom_get_identifier_, ffecom_decl_field,\n+\tffecom_get_invented_identifier, lang_print_error_function,\n+\tskip_redundant_dir_prefix, read_name_map, print_containing_files):\n+\tConst-ify a char*. \n+\t(savestring): Remove, use `xstrdup' instead.\n+\n+\t* com.h (ffecom_decl_field, ffecom_get_invented_identifier):\n+\tConst-ify a char*.\n+\n+\t* data.c (ffebld, ffedata_gather_): Make explicitly static.\n+\n+\t* expr.c (ffeexpr_isdigits_, ffeexpr_percent_,\n+\tffeexpr_reduced_concatenate_, ffeexpr_nil_real_,\n+\tffeexpr_nil_number_, ffeexpr_nil_number_period_,\n+\tffeexpr_nil_number_real_, ffeexpr_token_real_,\n+\tffeexpr_token_number_, ffeexpr_token_number_period_,\n+\tffeexpr_token_number_real_): Const-ify a char*.\n+\n+\t* fini.c (xspaces): Likewise.\n+\n+\t* global.c (ffeglobal_type_string_): Likewise.\n+\t(ffeglobal_drive): Protoize.\n+\t(ffeglobal_proc_def_arg): Const-ify a char*.\n+\n+\t* global.h (ffeglobal_drive): Protoize.\n+\t(ffeglobal_proc_def_arg): Const-ify a char*.\n+\n+\t* implic.c (ffeimplic_none, ffeimplic_peek_symbol_type):\n+\tLikewise.\n+\n+\t* implic.h (ffeimplic_peek_symbol_type): Likewise.\n+\n+\t* info.c (ffeinfo_basictype_string_, ffeinfo_kind_message_,\n+\tffeinfo_kind_string_, ffeinfo_kindtype_string_,\n+\tffeinfo_where_string_, ffeinfo_basictype_string,\n+\tffeinfo_kind_message, ffeinfo_kind_string,\n+\tffeinfo_kindtype_string, ffeinfo_where_string): Likewise.\n+\n+\t* info.h (ffeinfo_basictype_string, ffeinfo_kind_message,\n+\tffeinfo_kind_string, ffeinfo_kindtype_string,\n+\tffeinfo_where_string): Likewise.\n+\n+\t* intrin.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n+\t_ffeintrin_imp_, ffeintrin_check_, ffeintrin_cmp_name_,\n+\tffeintrin_fulfill_specific, ffeintrin_init_0,\n+\tffeintrin_is_actualarg, ffeintrin_is_intrinsic,\n+\tffeintrin_name_generic, ffeintrin_name_implementation,\n+\tffeintrin_name_specific): Likewise.\n+\n+\t* intrin.h (ffeintrin_is_intrinsic, ffeintrin_name_generic,\n+\tffeintrin_name_implementation, ffeintrin_name_specific): Likewise.\n+\n+\t* lex.c (ffelex_type_string_, ffelex_token_new_character,\n+\tffelex_token_new_name, ffelex_token_new_names,\n+\tffelex_token_new_number): Likewise.\n+\n+\t* lex.h (ffelex_token_new_character, ffelex_token_new_name,\n+\tffelex_token_new_names, ffelex_token_new_number): Likewise.\n+\n+\t* malloc.c (malloc_types_, malloc_pool_new, malloc_new_inpool_,\n+\tmalloc_new_zinpool_): Likewise.\n+\n+\t* malloc.h (malloc_new_inpool_, malloc_new_zinpool_,\n+\tmalloc_pool_new): Likewise.\n+\n+\t* name.c (ffename_space_drive_global, ffename_space_drive_symbol):\n+\tProtoize.\n+\n+\t* name.h (ffename_space_drive_global, ffename_space_drive_symbol):\n+\tLikewise.\n+\n+\t* symbol.c (ffesymbol_state_name_, ffesymbol_attr_name_,\n+\tffesymbol_attrs_string): Const-ify a char*.\n+\t(ffesymbol_drive, ffesymbol_drive_sfnames): Protoize.\n+\t(ffesymbol_state_string): Const-ify a char*.\n+\n+\t* symbol.h (ffesymbol_attrs_string): Likewise.\n+\t(ffesymbol_drive, ffesymbol_drive_sfnames): Protoize.\n+\t(ffesymbol_state_string): Const-ify a char*.\n+\n+\t* target.c (ffetarget_layout): Likewise.\n+\n+\t* target.h (ffetarget_layout): Likewise.\n+\n 1999-03-25  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* Make-lang.in: Remove all references to g77.o/g77.c."}, {"sha": "704fa1243eac57560e09ecc28c2f8b826f1a7b52", "filename": "gcc/f/bad.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -62,7 +62,7 @@ bool ffebad_is_inhibited_ = FALSE;\n struct _ffebad_message_\n   {\n     ffebadSeverity severity;\n-    char *message;\n+    const char *message;\n   };\n \n /* Static objects accessed by functions in this module.\t */\n@@ -89,11 +89,11 @@ static struct\n   }\n \n ffebad_here_[FFEBAD_MAX_];\n-static char *ffebad_string_[FFEBAD_MAX_];\n+static const char *ffebad_string_[FFEBAD_MAX_];\n static ffebadIndex ffebad_order_[FFEBAD_MAX_];\n static ffebad ffebad_errnum_;\n static ffebadSeverity ffebad_severity_;\n-static char *ffebad_message_;\n+static const char *ffebad_message_;\n static unsigned char ffebad_index_;\n static ffebadIndex ffebad_places_;\n static bool ffebad_is_temp_inhibited_;\t/* Effective setting of\n@@ -102,7 +102,7 @@ static bool ffebad_is_temp_inhibited_;\t/* Effective setting of\n \n /* Static functions (internal). */\n \n-static int ffebad_bufputs_ (char buf[], int bufi, char *s);\n+static int ffebad_bufputs_ (char buf[], int bufi, const char *s);\n \n /* Internal macros. */\n \n@@ -115,7 +115,7 @@ static int ffebad_bufputs_ (char buf[], int bufi, char *s);\n \f\n \n static int\n-ffebad_bufputs_ (char buf[], int bufi, char *s)\n+ffebad_bufputs_ (char buf[], int bufi, const char *s)\n {\n   for (; *s != '\\0'; ++s)\n     bufi = ffebad_bufputc_ (buf, bufi, *s);\n@@ -161,7 +161,7 @@ ffebad_severity (ffebad errnum)\n \n bool\n ffebad_start_ (bool lex_override, ffebad errnum, ffebadSeverity sev,\n-\t       char *message)\n+\t       const char *message)\n {\n   unsigned char i;\n \n@@ -321,7 +321,7 @@ ffebad_here (ffebadIndex index, ffewhereLine line, ffewhereColumn col)\n \n /* Establish string for next index (always in order) of message\n \n-   ffebad_string(char *string);\n+   ffebad_string(const char *string);\n \n    Call ffebad_start to establish the message, ffebad_here and ffebad_string\n    to send run-time data to it as necessary, then ffebad_finish when through\n@@ -330,7 +330,7 @@ ffebad_here (ffebadIndex index, ffewhereLine line, ffewhereColumn col)\n    the argument passed in until then.  */\n \n void\n-ffebad_string (char *string)\n+ffebad_string (const char *string)\n {\n   if (ffebad_is_temp_inhibited_)\n     return;\n@@ -351,7 +351,7 @@ void\n ffebad_finish ()\n {\n #define MAX_SPACES 132\n-  static char *spaces\n+  static const char *spaces\n   = \"...>\\\n \\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\\n \\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\\n@@ -373,8 +373,8 @@ ffebad_finish ()\n   unsigned short i;\n   char pointer;\n   unsigned char c;\n-  unsigned char *s;\n-  char *fn;\n+  unsigned const char *s;\n+  const char *fn;\n   static char buf[1024];\n   int bufi;\n   int index;"}, {"sha": "734022370cd172069ef135f527b42503fbd2fe1d", "filename": "gcc/f/bad.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbad.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbad.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -82,8 +82,8 @@ void ffebad_init_0 (void);\n bool ffebad_is_fatal (ffebad errnum);\n ffebadSeverity ffebad_severity (ffebad errnum);\n bool ffebad_start_ (bool lex_override, ffebad errnum, ffebadSeverity sev,\n-\t\t    char *message);\n-void ffebad_string (char *string);\n+\t\t    const char *message);\n+void ffebad_string (const char *string);\n \n /* Define macros. */\n "}, {"sha": "6ef559e077a8d43356c356c6be4d8ac121cb2f74", "filename": "gcc/f/bld.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -203,7 +203,7 @@ static ffebldConstant ffebld_constant_hollerith_;\n static ffebldConstant ffebld_constant_typeless_[FFEBLD_constTYPELESS_LAST\n \t\t\t\t\t  - FFEBLD_constTYPELESS_FIRST + 1];\n \n-static char *ffebld_op_string_[]\n+static const char *ffebld_op_string_[]\n =\n {\n #define FFEBLD_OP(KWD,NAME,ARITY) NAME,\n@@ -5745,7 +5745,7 @@ ffebld_pool_push (mallocPool pool)\n \n    Returns a short string (uppercase) containing the name of the op.  */\n \n-char *\n+const char *\n ffebld_op_string (ffebldOp o)\n {\n   if (o >= ARRAY_SIZE (ffebld_op_string_))"}, {"sha": "96c8e5e05ef9aac11d0d696441d5c200e2328569", "filename": "gcc/f/bld.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -726,7 +726,7 @@ ffebld ffebld_new_symter (ffesymbol s, ffeintrinGen gen, ffeintrinSpec spec,\n \t\t\t  ffeintrinImp imp);\n ffebld ffebld_new_one (ffebldOp o, ffebld left);\n ffebld ffebld_new_two (ffebldOp o, ffebld left, ffebld right);\n-char *ffebld_op_string (ffebldOp o);\n+const char *ffebld_op_string (ffebldOp o);\n void ffebld_pool_pop (void);\n void ffebld_pool_push (mallocPool pool);\n ffetargetCharacterSize ffebld_size_max (ffebld b);"}, {"sha": "2c03fae27101c1c1c36fed2f234409b1f40e8069", "filename": "gcc/f/com.c", "status": "modified", "additions": 39, "deletions": 46, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -403,15 +403,15 @@ struct _ffecom_temp_\n /* Static functions (internal). */\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-static tree ffecom_arglist_expr_ (char *argstring, ffebld args);\n+static tree ffecom_arglist_expr_ (const char *argstring, ffebld args);\n static tree ffecom_widest_expr_type_ (ffebld list);\n static bool ffecom_overlap_ (tree dest_decl, tree dest_offset,\n \t\t\t     tree dest_size, tree source_tree,\n \t\t\t     ffebld source, bool scalar_arg);\n static bool ffecom_args_overlapping_ (tree dest_tree, ffebld dest,\n \t\t\t\t      tree args, tree callee_commons,\n \t\t\t\t      bool scalar_args);\n-static tree ffecom_build_f2c_string_ (int i, char *s);\n+static tree ffecom_build_f2c_string_ (int i, const char *s);\n static tree ffecom_call_ (tree fn, ffeinfoKindtype kt,\n \t\t\t  bool is_f2c_complex, tree type,\n \t\t\t  tree args, tree dest_tree,\n@@ -434,27 +434,28 @@ static ffecomConcatList_\n static void ffecom_concat_list_kill_ (ffecomConcatList_ catlist);\n static ffecomConcatList_ ffecom_concat_list_new_ (ffebld expr,\n \t\t\t\t\t\tffetargetCharacterSize max);\n-static void ffecom_debug_kludge_ (tree aggr, char *aggr_type, ffesymbol member,\n-\t\t\t\t  tree member_type, ffetargetOffset offset);\n+static void ffecom_debug_kludge_ (tree aggr, const char *aggr_type,\n+\t\t\t\t  ffesymbol member, tree member_type,\n+\t\t\t\t  ffetargetOffset offset);\n static void ffecom_do_entry_ (ffesymbol fn, int entrynum);\n static tree ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t\t\t  bool *dest_used, bool assignp, bool widenp);\n static tree ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t    ffebld dest, bool *dest_used);\n static tree ffecom_expr_power_integer_ (ffebld left, ffebld right);\n static void ffecom_expr_transform_ (ffebld expr);\n-static void ffecom_f2c_make_type_ (tree *type, int tcode, char *name);\n+static void ffecom_f2c_make_type_ (tree *type, int tcode, const char *name);\n static void ffecom_f2c_set_lio_code_ (ffeinfoBasictype bt, int size,\n \t\t\t\t      int code);\n static ffeglobal ffecom_finish_global_ (ffeglobal global);\n static ffesymbol ffecom_finish_symbol_transform_ (ffesymbol s);\n-static tree ffecom_get_appended_identifier_ (char us, char *text);\n+static tree ffecom_get_appended_identifier_ (char us, const char *text);\n static tree ffecom_get_external_identifier_ (ffesymbol s);\n-static tree ffecom_get_identifier_ (char *text);\n+static tree ffecom_get_identifier_ (const char *text);\n static tree ffecom_gen_sfuncdef_ (ffesymbol s,\n \t\t\t\t  ffeinfoBasictype bt,\n \t\t\t\t  ffeinfoKindtype kt);\n-static char *ffecom_gfrt_args_ (ffecomGfrt ix);\n+static const char *ffecom_gfrt_args_ (ffecomGfrt ix);\n static tree ffecom_gfrt_tree_ (ffecomGfrt ix);\n static tree ffecom_init_zero_ (tree decl);\n static tree ffecom_intrinsic_ichar_ (tree tree_type, ffebld arg,\n@@ -495,6 +496,8 @@ static tree ffecom_type_vardesc_ (void);\n static tree ffecom_vardesc_ (ffebld expr);\n static tree ffecom_vardesc_array_ (ffesymbol s);\n static tree ffecom_vardesc_dims_ (ffesymbol s);\n+static tree ffecom_convert_narrow_ (tree type, tree expr);\n+static tree ffecom_convert_widen_ (tree type, tree expr);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n \n /* These are static functions that parallel those found in the C front\n@@ -503,9 +506,9 @@ static tree ffecom_vardesc_dims_ (ffesymbol s);\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static void bison_rule_compstmt_ (void);\n static void bison_rule_pushlevel_ (void);\n-static tree builtin_function (char *name, tree type,\n+static tree builtin_function (const char *name, tree type,\n \t\t\t      enum built_in_function function_code,\n-\t\t\t      char *library_name);\n+\t\t\t      const char *library_name);\n static int duplicate_decls (tree newdecl, tree olddecl);\n static void finish_decl (tree decl, tree init, bool is_top_level);\n static void finish_function (int nested);\n@@ -577,7 +580,7 @@ static tree ffecom_gfrt_[FFECOM_gfrt]\n \n /* Holds the external names of the functions.  */\n \n-static char *ffecom_gfrt_name_[FFECOM_gfrt]\n+static const char *ffecom_gfrt_name_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX) NAME,\n@@ -617,7 +620,7 @@ static ffecomRttype_ ffecom_gfrt_type_[FFECOM_gfrt]\n \n /* String of codes for the function's arguments.  */\n \n-static char *ffecom_gfrt_argstring_[FFECOM_gfrt]\n+static const char *ffecom_gfrt_argstring_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX) ARGS,\n@@ -1097,7 +1100,7 @@ ffecom_build_complex_constant_ (tree type, tree realpart, tree imagpart)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_arglist_expr_ (char *c, ffebld expr)\n+ffecom_arglist_expr_ (const char *c, ffebld expr)\n {\n   tree list;\n   tree *plist = &list;\n@@ -1519,14 +1522,14 @@ ffecom_args_overlapping_ (tree dest_tree, ffebld dest UNUSED,\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_build_f2c_string_ (int i, char *s)\n+ffecom_build_f2c_string_ (int i, const char *s)\n {\n   if (!ffe_is_f2c_library ())\n     return build_string (i, s);\n \n   {\n     char *tmp;\n-    char *p;\n+    const char *p;\n     char *q;\n     char space[34];\n     tree t;\n@@ -2268,7 +2271,7 @@ ffecom_concat_list_new_ (ffebld expr, ffetargetCharacterSize max)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static void\n-ffecom_debug_kludge_ (tree aggr, char *aggr_type, ffesymbol member,\n+ffecom_debug_kludge_ (tree aggr, const char *aggr_type, ffesymbol member,\n \t\t      tree member_type UNUSED, ffetargetOffset offset)\n {\n   tree value;\n@@ -6562,7 +6565,7 @@ ffecom_expr_transform_ (ffebld expr)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static void\n-ffecom_f2c_make_type_ (tree *type, int tcode, char *name)\n+ffecom_f2c_make_type_ (tree *type, int tcode, const char *name)\n {\n   switch (tcode)\n     {\n@@ -6762,7 +6765,7 @@ ffecom_finish_symbol_transform_ (ffesymbol s)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_get_appended_identifier_ (char us, char *name)\n+ffecom_get_appended_identifier_ (char us, const char *name)\n {\n   int i;\n   char *newname;\n@@ -6791,7 +6794,7 @@ static tree\n ffecom_get_external_identifier_ (ffesymbol s)\n {\n   char us;\n-  char *name = ffesymbol_text (s);\n+  const char *name = ffesymbol_text (s);\n \n   /* If name is a built-in name, just return it as is.  */\n \n@@ -6830,7 +6833,7 @@ ffecom_get_external_identifier_ (ffesymbol s)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_get_identifier_ (char *name)\n+ffecom_get_identifier_ (const char *name)\n {\n   /* If name does not contain an underscore, just return it as is.  */\n \n@@ -6991,7 +6994,7 @@ ffecom_gen_sfuncdef_ (ffesymbol s, ffeinfoBasictype bt, ffeinfoKindtype kt)\n #endif\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-static char *\n+static const char *\n ffecom_gfrt_args_ (ffecomGfrt ix)\n {\n   return ffecom_gfrt_argstring_[ix];\n@@ -11478,7 +11481,7 @@ ffecom_constantunion (ffebldConstantUnion *cu, ffeinfoBasictype bt,\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n tree\n ffecom_decl_field (tree context, tree prevfield,\n-\t\t   char *name, tree type)\n+\t\t   const char *name, tree type)\n {\n   tree field;\n \n@@ -11788,7 +11791,7 @@ ffecom_finish_progunit ()\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n tree\n-ffecom_get_invented_identifier (char *pattern, char *text, int number)\n+ffecom_get_invented_identifier (const char *pattern, const char *text, int number)\n {\n   tree decl;\n   char *nam;\n@@ -13813,8 +13816,9 @@ bison_rule_pushlevel_ ()\n    the name to be called if we can't opencode the function.  */\n \n static tree\n-builtin_function (char *name, tree type,\n-\t\t  enum built_in_function function_code, char *library_name)\n+builtin_function (const char *name, tree type,\n+\t\t  enum built_in_function function_code,\n+\t\t  const char *library_name)\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -14418,7 +14422,7 @@ lang_print_error_function (file)\n   static ffesymbol last_s = NULL;\n   ffeglobal g;\n   ffesymbol s;\n-  char *kind;\n+  const char *kind;\n \n   if ((ffecom_primary_entry_ == NULL)\n       || (ffesymbol_global (ffecom_primary_entry_) == NULL))\n@@ -14472,7 +14476,7 @@ lang_print_error_function (file)\n \tfprintf (stderr, \"Outside of any program unit:\\n\");\n       else\n \t{\n-\t  char *name = ffesymbol_text (s);\n+\t  const char *name = ffesymbol_text (s);\n \n \t  fprintf (stderr, \"In %s `%s':\\n\", kind, name);\n \t}\n@@ -15824,8 +15828,8 @@ unsigned_type (type)\n /* Skip leading \"./\" from a directory name.\n    This may yield the empty string, which represents the current directory.  */\n \n-static char *\n-skip_redundant_dir_prefix (char *dir)\n+static const char *\n+skip_redundant_dir_prefix (const char *dir)\n {\n   while (dir[0] == '.' && dir[1] == '/')\n     for (dir += 2; *dir == '/'; dir++)\n@@ -15923,10 +15927,9 @@ static void append_include_chain (struct file_name_list *first,\n static FILE *open_include_file (char *filename,\n \t\t\t\tstruct file_name_list *searchptr);\n static void print_containing_files (ffebadSeverity sev);\n-static char *skip_redundant_dir_prefix (char *);\n+static const char *skip_redundant_dir_prefix (const char *);\n static char *read_filename_string (int ch, FILE *f);\n-static struct file_name_map *read_name_map (char *dirname);\n-static char *savestring (char *input);\n+static struct file_name_map *read_name_map (const char *dirname);\n \n /* Append a chain of `struct file_name_list's\n    to the end of the main include chain.\n@@ -16048,8 +16051,8 @@ print_containing_files (ffebadSeverity sev)\n   FILE_BUF *ip = NULL;\n   int i;\n   int first = 1;\n-  char *str1;\n-  char *str2;\n+  const char *str1;\n+  const char *str2;\n \n   /* If stack of files hasn't changed since we last printed\n      this info, don't repeat it.  */\n@@ -16134,7 +16137,7 @@ read_filename_string (ch, f)\n \n static struct file_name_map *\n read_name_map (dirname)\n-     char *dirname;\n+     const char *dirname;\n {\n   /* This structure holds a linked list of file name maps, one per\n      directory.  */\n@@ -16160,7 +16163,7 @@ read_name_map (dirname)\n \n   map_list_ptr = ((struct file_name_map_list *)\n \t\t  xmalloc (sizeof (struct file_name_map_list)));\n-  map_list_ptr->map_list_name = savestring (dirname);\n+  map_list_ptr->map_list_name = xstrdup (dirname);\n   map_list_ptr->map_list_map = NULL;\n \n   dirlen = strlen (dirname);\n@@ -16221,16 +16224,6 @@ read_name_map (dirname)\n   return map_list_ptr->map_list_map;\n }\n \n-static char *\n-savestring (input)\n-     char *input;\n-{\n-  unsigned size = strlen (input);\n-  char *output = xmalloc (size + 1);\n-  strcpy (output, input);\n-  return output;\n-}\n-\n static void\n ffecom_file_ (char *name)\n {"}, {"sha": "a438d0bdc86a7d136d51b48072d5794f9ed497b6", "filename": "gcc/f/com.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -283,7 +283,7 @@ tree ffecom_arg_ptr_to_expr (ffebld expr, tree *length);\n tree ffecom_call_gfrt (ffecomGfrt ix, tree args);\n tree ffecom_constantunion (ffebldConstantUnion *cu, ffeinfoBasictype bt,\n \t\t\t   ffeinfoKindtype kt, tree tree_type);\n-tree ffecom_decl_field (tree context, tree prevfield, char *name,\n+tree ffecom_decl_field (tree context, tree prevfield, const char *name,\n \t\t\ttree type);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n void ffecom_close_include (FILE *f);\n@@ -299,7 +299,7 @@ tree ffecom_expr_rw (ffebld expr);\n void ffecom_finish_compile (void);\n void ffecom_finish_decl (tree decl, tree init, bool is_top_level);\n void ffecom_finish_progunit (void);\n-tree ffecom_get_invented_identifier (char *pattern, char *text,\n+tree ffecom_get_invented_identifier (const char *pattern, const char *text,\n \t\t\t\t     int number);\n ffeinfoKindtype ffecom_gfrt_basictype (ffecomGfrt ix);\n ffeinfoKindtype ffecom_gfrt_kindtype (ffecomGfrt ix);"}, {"sha": "51eb2b7661b6ee5f71c547b11dca04f75c906dc4", "filename": "gcc/f/data.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fdata.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -668,7 +668,7 @@ ffedata_advance_ ()\n    expression doesn't already exist in the cache) and then puts the result\n    in the cache.  */\n \n-ffebld\n+static ffebld\n ffedata_convert_ (ffebld source, ffelexToken source_token,\n \t\t  ffelexToken dest_token, ffeinfoBasictype bt,\n \t\t  ffeinfoKindtype kt, ffeinfoRank rk,\n@@ -1119,7 +1119,7 @@ ffedata_eval_substr_end_ (ffebld expr, ffetargetCharacterSize min,\n    If st has any initialization info, transfer that info into mst and\n    clear st's info.  */\n \n-void\n+static void\n ffedata_gather_ (ffestorag mst, ffestorag st)\n {\n   ffesymbol s;"}, {"sha": "72a6264dbf4b223b4629bd642f22dae6424680b7", "filename": "gcc/f/expr.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -268,7 +268,7 @@ static void ffeexpr_update_impdo_sym_ (ffebld expr, ffesymbol dovar);\n static ffeexprContext ffeexpr_context_outer_ (ffeexprStack_ s);\n static ffeexprExpr_ ffeexpr_expr_new_ (void);\n static void ffeexpr_fulfill_call_ (ffebld *expr, ffelexToken t);\n-static bool ffeexpr_isdigits_ (char *p);\n+static bool ffeexpr_isdigits_ (const char *p);\n static ffelexHandler ffeexpr_token_first_lhs_ (ffelexToken t);\n static ffelexHandler ffeexpr_token_first_lhs_1_ (ffelexToken t);\n static ffelexHandler ffeexpr_token_first_rhs_ (ffelexToken t);\n@@ -8584,7 +8584,7 @@ ffeexpr_context_outer_ (ffeexprStack_ s)\n static ffeexprPercent_\n ffeexpr_percent_ (ffelexToken t)\n {\n-  char *p;\n+  const char *p;\n \n   switch (ffelex_token_length (t))\n     {\n@@ -9537,7 +9537,7 @@ ffeexpr_fulfill_call_ (ffebld *expr, ffelexToken t)\n /* Check whether rest of string is all decimal digits.  */\n \n static bool\n-ffeexpr_isdigits_ (char *p)\n+ffeexpr_isdigits_ (const char *p)\n {\n   for (; *p != '\\0'; ++p)\n     if (! ISDIGIT (*p))\n@@ -10378,7 +10378,7 @@ ffeexpr_reduced_concatenate_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n       if ((lkd != FFEINFO_kindANY)\n \t  && ffebad_start (FFEBAD_CONCAT_ARG_KIND))\n \t{\n-\t  char *what;\n+\t  const char *what;\n \n \t  if (lrk != 0)\n \t    what = \"an array\";\n@@ -10394,7 +10394,7 @@ ffeexpr_reduced_concatenate_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n     {\n       if (ffebad_start (FFEBAD_CONCAT_ARG_KIND))\n \t{\n-\t  char *what;\n+\t  const char *what;\n \n \t  if (rrk != 0)\n \t    what = \"an array\";\n@@ -11666,7 +11666,7 @@ static ffelexHandler\n ffeexpr_nil_real_ (ffelexToken t)\n {\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (((ffelex_token_type (t) != FFELEX_typeNAME)\n        && (ffelex_token_type (t) != FFELEX_typeNAMES))\n@@ -11704,7 +11704,7 @@ static ffelexHandler\n ffeexpr_nil_number_ (ffelexToken t)\n {\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (ffeexpr_hollerith_count_ > 0)\n     ffelex_set_expecting_hollerith (0, '\\0',\n@@ -11779,7 +11779,7 @@ ffeexpr_nil_number_period_ (ffelexToken t)\n {\n   ffelexHandler nexthandler;\n   char d;\n-  char *p;\n+  const char *p;\n \n   switch (ffelex_token_type (t))\n     {\n@@ -11836,7 +11836,7 @@ static ffelexHandler\n ffeexpr_nil_number_real_ (ffelexToken t)\n {\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (((ffelex_token_type (t) != FFELEX_typeNAME)\n        && (ffelex_token_type (t) != FFELEX_typeNAMES))\n@@ -13652,7 +13652,7 @@ static ffelexHandler\n ffeexpr_token_real_ (ffelexToken t)\n {\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (((ffelex_token_type (t) != FFELEX_typeNAME)\n        && (ffelex_token_type (t) != FFELEX_typeNAMES))\n@@ -13809,7 +13809,7 @@ ffeexpr_token_number_ (ffelexToken t)\n   ffeexprExpr_ e;\n   ffeinfo ni;\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (ffeexpr_hollerith_count_ > 0)\n     ffelex_set_expecting_hollerith (0, '\\0',\n@@ -13965,7 +13965,7 @@ ffeexpr_token_number_period_ (ffelexToken t)\n {\n   ffeexprExpr_ e;\n   ffelexHandler nexthandler;\n-  char *p;\n+  const char *p;\n   char d;\n \n   switch (ffelex_token_type (t))\n@@ -14083,7 +14083,7 @@ static ffelexHandler\n ffeexpr_token_number_real_ (ffelexToken t)\n {\n   char d;\n-  char *p;\n+  const char *p;\n \n   if (((ffelex_token_type (t) != FFELEX_typeNAME)\n        && (ffelex_token_type (t) != FFELEX_typeNAMES))"}, {"sha": "1b7c98194095ed71c96ccd48c7ea613841818d2f", "filename": "gcc/f/fini.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -62,7 +62,7 @@ static FILE *out;\n static char prefix[32];\n static char postfix[32];\n static char storage[32];\n-static char *xspaces[]\n+static const char *xspaces[]\n =\n {\n   \"\",\t\t\t\t/* 0 */"}, {"sha": "85311f1860178df6c820e05fbe7f764ffefc1770", "filename": "gcc/f/global.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -60,7 +60,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #if FFEGLOBAL_ENABLED\n static ffenameSpace ffeglobal_filewide_ = NULL;\n-static char *ffeglobal_type_string_[] =\n+static const char *ffeglobal_type_string_[] =\n {\n   [FFEGLOBAL_typeNONE] \"??\",\n   [FFEGLOBAL_typeMAIN] \"main program\",\n@@ -86,7 +86,7 @@ static char *ffeglobal_type_string_[] =\n \n #if FFEGLOBAL_ENABLED\n void\n-ffeglobal_drive (ffeglobal (*fn) ())\n+ffeglobal_drive (ffeglobal (*fn) (ffeglobal))\n {\n   if (ffeglobal_filewide_ != NULL)\n     ffename_space_drive_global (ffeglobal_filewide_, fn);\n@@ -514,7 +514,7 @@ ffeglobal_pad_common (ffesymbol s, ffetargetAlign pad, ffewhereLine wl,\n /* Collect info for a global's argument.  */\n \n void\n-ffeglobal_proc_def_arg (ffesymbol s, int argno, char *name, ffeglobalArgSummary as,\n+ffeglobal_proc_def_arg (ffesymbol s, int argno, const char *name, ffeglobalArgSummary as,\n \t\t\tffeinfoBasictype bt, ffeinfoKindtype kt,\n \t\t\tbool array)\n {\n@@ -538,8 +538,8 @@ ffeglobal_proc_def_arg (ffesymbol s, int argno, char *name, ffeglobalArgSummary\n   if ((ai->t != NULL)\n       && ffe_is_warn_globals ())\n     {\n-      char *refwhy = NULL;\n-      char *defwhy = NULL;\n+      const char *refwhy = NULL;\n+      const char *defwhy = NULL;\n       bool warn = FALSE;\n \n       switch (as)\n@@ -816,8 +816,8 @@ ffeglobal_proc_ref_arg (ffesymbol s, int argno, ffeglobalArgSummary as,\n \n   if (ai->t != NULL)\n     {\n-      char *refwhy = NULL;\n-      char *defwhy = NULL;\n+      const char *refwhy = NULL;\n+      const char *defwhy = NULL;\n       bool fail = FALSE;\n       bool warn = FALSE;\n "}, {"sha": "eaf99214b8c4597451bc319814b527a279311041", "filename": "gcc/f/global.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fglobal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fglobal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -128,14 +128,14 @@ struct _ffeglobal_\n \n /* Declare functions with prototypes. */\n \n-void ffeglobal_drive (ffeglobal (*fn) ());\n+void ffeglobal_drive (ffeglobal (*fn) (ffeglobal));\n void ffeglobal_init_1 (void);\n void ffeglobal_init_common (ffesymbol s, ffelexToken t);\n void ffeglobal_new_progunit_ (ffesymbol s, ffelexToken t, ffeglobalType type);\n void ffeglobal_new_common (ffesymbol s, ffelexToken t, bool blank);\n void ffeglobal_pad_common (ffesymbol s, ffetargetAlign pad, ffewhereLine wl,\n \t\t\t   ffewhereColumn wc);\n-void ffeglobal_proc_def_arg (ffesymbol s, int argno, char *name, ffeglobalArgSummary as,\n+void ffeglobal_proc_def_arg (ffesymbol s, int argno, const char *name, ffeglobalArgSummary as,\n \t\t\t     ffeinfoBasictype bt, ffeinfoKindtype kt,\n \t\t\t     bool array);\n void ffeglobal_proc_def_nargs (ffesymbol s, int n_args);"}, {"sha": "7e0c61b1605e3fcbe602e06fc1a8e904e8d1d485", "filename": "gcc/f/implic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fimplic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fimplic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fimplic.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -331,7 +331,7 @@ ffeimplic_none ()\n /* ffeimplic_peek_symbol_type -- Determine implicit type of a symbol\n \n    ffesymbol s;\n-   char *name;\t// name for s in case it is NULL, or NULL if s never NULL\n+   const char *name; // name for s in case it is NULL, or NULL if s never NULL\n    if (ffeimplic_peek_symbol_type(s,name) == FFEINFO_basictypeCHARACTER)\n        // is or will be a CHARACTER-typed name\n \n@@ -348,7 +348,7 @@ ffeimplic_none ()\n       needed anyway (as when ffecom calls it).\t*/\n \n ffeinfoBasictype\n-ffeimplic_peek_symbol_type (ffesymbol s, char *name)\n+ffeimplic_peek_symbol_type (ffesymbol s, const char *name)\n {\n   char c;\n   ffeimplic_ imp;"}, {"sha": "ae9665384918667b684cd4d7e5600d29144671da", "filename": "gcc/f/implic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fimplic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fimplic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fimplic.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -55,7 +55,7 @@ bool ffeimplic_establish_initial (char c, ffeinfoBasictype basic_type,\n bool ffeimplic_establish_symbol (ffesymbol s);\n void ffeimplic_init_2 (void);\n void ffeimplic_none (void);\n-ffeinfoBasictype ffeimplic_peek_symbol_type (ffesymbol s, char *name);\n+ffeinfoBasictype ffeimplic_peek_symbol_type (ffesymbol s, const char *name);\n void ffeimplic_terminate_2 (void);\n \n /* Define macros. */"}, {"sha": "784e699e08cb3133226257a2f9172cd23cb08208", "filename": "gcc/f/info.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Finfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Finfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finfo.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -55,29 +55,29 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Static objects accessed by functions in this module.\t */\n \n-static char *ffeinfo_basictype_string_[]\n+static const char *ffeinfo_basictype_string_[]\n =\n {\n #define FFEINFO_BASICTYPE(KWD,LNAM,SNAM) SNAM,\n #include \"info-b.def\"\n #undef FFEINFO_BASICTYPE\n };\n-static char *ffeinfo_kind_message_[]\n+static const char *ffeinfo_kind_message_[]\n =\n {\n #define FFEINFO_KIND(KWD,LNAM,SNAM) LNAM,\n #include \"info-k.def\"\n #undef FFEINFO_KIND\n };\n-static char *ffeinfo_kind_string_[]\n+static const char *ffeinfo_kind_string_[]\n =\n {\n #define FFEINFO_KIND(KWD,LNAM,SNAM) SNAM,\n #include \"info-k.def\"\n #undef FFEINFO_KIND\n };\n static ffeinfoBasictype ffeinfo_combine_[FFEINFO_basictype][FFEINFO_basictype];\n-static char *ffeinfo_kindtype_string_[]\n+static const char *ffeinfo_kindtype_string_[]\n =\n {\n   \"\",\n@@ -91,7 +91,7 @@ static char *ffeinfo_kindtype_string_[]\n   \"8\",\n   \"*\",\n };\n-static char *ffeinfo_where_string_[]\n+static const char *ffeinfo_where_string_[]\n =\n {\n #define FFEINFO_WHERE(KWD,LNAM,SNAM) SNAM,\n@@ -129,7 +129,7 @@ ffeinfo_basictype_combine (ffeinfoBasictype l, ffeinfoBasictype r)\n \n    Returns the string based on the basic type.\t*/\n \n-char *\n+const char *\n ffeinfo_basictype_string (ffeinfoBasictype basictype)\n {\n   if (basictype >= ARRAY_SIZE (ffeinfo_basictype_string_))\n@@ -186,7 +186,7 @@ ffeinfo_init_0 ()\n \n    Returns the string based on the kind.  */\n \n-char *\n+const char *\n ffeinfo_kind_message (ffeinfoKind kind)\n {\n   if (kind >= ARRAY_SIZE (ffeinfo_kind_message_))\n@@ -201,7 +201,7 @@ ffeinfo_kind_message (ffeinfoKind kind)\n \n    Returns the string based on the kind.  */\n \n-char *\n+const char *\n ffeinfo_kind_string (ffeinfoKind kind)\n {\n   if (kind >= ARRAY_SIZE (ffeinfo_kind_string_))\n@@ -232,7 +232,7 @@ ffeinfo_kindtype_max(ffeinfoBasictype bt,\n \n    Returns the string based on the kind type.  */\n \n-char *\n+const char *\n ffeinfo_kindtype_string (ffeinfoKindtype kind_type)\n {\n   if (kind_type >= ARRAY_SIZE (ffeinfo_kindtype_string_))\n@@ -267,7 +267,7 @@ ffeinfo_type (ffeinfoBasictype basictype, ffeinfoKindtype kindtype)\n \n    Returns the string based on the where.  */\n \n-char *\n+const char *\n ffeinfo_where_string (ffeinfoWhere where)\n {\n   if (where >= ARRAY_SIZE (ffeinfo_where_string_))"}, {"sha": "bbf4e94930dddd445688d094d3915225137068ee", "filename": "gcc/f/info.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Finfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Finfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finfo.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -127,15 +127,15 @@ struct _ffeinfo_\n \n ffeinfoBasictype ffeinfo_basictype_combine (ffeinfoBasictype l,\n \t\t\t\t\t    ffeinfoBasictype r);\n-char *ffeinfo_basictype_string (ffeinfoBasictype basictype);\n+const char *ffeinfo_basictype_string (ffeinfoBasictype basictype);\n void ffeinfo_init_0 (void);\n-char *ffeinfo_kind_message (ffeinfoKind kind);\n-char *ffeinfo_kind_string (ffeinfoKind kind);\n+const char *ffeinfo_kind_message (ffeinfoKind kind);\n+const char *ffeinfo_kind_string (ffeinfoKind kind);\n ffeinfoKindtype ffeinfo_kindtype_max(ffeinfoBasictype bt,\n \t\t\t\t     ffeinfoKindtype k1,\n \t\t\t\t     ffeinfoKindtype k2);\n-char *ffeinfo_kindtype_string (ffeinfoKindtype kind_type);\n-char *ffeinfo_where_string (ffeinfoWhere where);\n+const char *ffeinfo_kindtype_string (ffeinfoKindtype kind_type);\n+const char *ffeinfo_where_string (ffeinfoWhere where);\n ffeinfo ffeinfo_new (ffeinfoBasictype basictype, ffeinfoKindtype kindtype,\n \t\t     ffeinfoRank rank, ffeinfoKind kind, ffeinfoWhere where,\n \t\t     ffetargetCharacterSize size);"}, {"sha": "dbf375b849f9fa003b2c92f2f7a435972a07dd8d", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -32,22 +32,22 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct _ffeintrin_name_\n   {\n-    char *name_uc;\n-    char *name_lc;\n-    char *name_ic;\n+    const char *name_uc;\n+    const char *name_lc;\n+    const char *name_ic;\n     ffeintrinGen generic;\n     ffeintrinSpec specific;\n   };\n \n struct _ffeintrin_gen_\n   {\n-    char *name;\t\t\t/* Name as seen in program. */\n+    const char *name;\t\t\t/* Name as seen in program. */\n     ffeintrinSpec specs[2];\n   };\n \n struct _ffeintrin_spec_\n   {\n-    char *name;\t\t\t/* Uppercase name as seen in source code,\n+    const char *name;\t\t/* Uppercase name as seen in source code,\n \t\t\t\t   lowercase if no source name, \"none\" if no\n \t\t\t\t   name at all (NONE case). */\n     bool is_actualarg;\t\t/* Ok to pass as actual arg if -pedantic. */\n@@ -57,13 +57,13 @@ struct _ffeintrin_spec_\n \n struct _ffeintrin_imp_\n   {\n-    char *name;\t\t\t/* Name of implementation. */\n+    const char *name;\t\t/* Name of implementation. */\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n     ffecomGfrt gfrt_direct;\t/* library routine, direct-callable form. */\n     ffecomGfrt gfrt_f2c;\t/* library routine, f2c-callable form. */\n     ffecomGfrt gfrt_gnu;\t/* library routine, gnu-callable form. */\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n-    char *control;\n+    const char *control;\n     char y2kbad;\n   };\n \n@@ -166,9 +166,9 @@ ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n \t\t  ffelexToken t,\n \t\t  bool commit)\n {\n-  char *c = ffeintrin_imps_[imp].control;\n+  const char *c = ffeintrin_imps_[imp].control;\n   bool subr = (c[0] == '-');\n-  char *argc;\n+  const char *argc;\n   ffebld arg;\n   ffeinfoBasictype bt;\n   ffeinfoKindtype kt;\n@@ -1165,9 +1165,9 @@ ffeintrin_check_any_ (ffebld arglist)\n static int\n ffeintrin_cmp_name_ (const void *name, const void *intrinsic)\n {\n-  char *uc = (char *) ((struct _ffeintrin_name_ *) intrinsic)->name_uc;\n-  char *lc = (char *) ((struct _ffeintrin_name_ *) intrinsic)->name_lc;\n-  char *ic = (char *) ((struct _ffeintrin_name_ *) intrinsic)->name_ic;\n+  const char *uc = ((struct _ffeintrin_name_ *) intrinsic)->name_uc;\n+  const char *lc = ((struct _ffeintrin_name_ *) intrinsic)->name_lc;\n+  const char *ic = ((struct _ffeintrin_name_ *) intrinsic)->name_ic;\n \n   return ffesrc_strcmp_2c (ffe_case_intrin (), name, uc, lc, ic);\n }\n@@ -1429,7 +1429,7 @@ ffeintrin_fulfill_specific (ffebld *expr, ffeinfo *info,\n   ffeIntrinsicState state;\n   ffebad error;\n   bool any = FALSE;\n-  char *name;\n+  const char *name;\n \n   op = ffebld_op (*expr);\n   assert ((op == FFEBLD_opFUNCREF) || (op == FFEBLD_opSUBRREF));\n@@ -1551,9 +1551,9 @@ void\n ffeintrin_init_0 ()\n {\n   int i;\n-  char *p1;\n-  char *p2;\n-  char *p3;\n+  const char *p1;\n+  const char *p2;\n+  const char *p3;\n   int colon;\n \n   if (!ffe_is_do_internal_checks ())\n@@ -1597,7 +1597,7 @@ ffeintrin_init_0 ()\n \n   for (i = 0; ((size_t) i) < ARRAY_SIZE (ffeintrin_imps_); ++i)\n     {\n-      char *c = ffeintrin_imps_[i].control;\n+      const char *c = ffeintrin_imps_[i].control;\n \n       if (c[0] == '\\0')\n \tcontinue;\n@@ -1775,7 +1775,7 @@ ffeintrin_is_actualarg (ffeintrinSpec spec)\n \n /* Determine if name is intrinsic, return info.\n \n-   char *name;\t\t\t// C-string name of possible intrinsic.\n+   const char *name;\t\t// C-string name of possible intrinsic.\n    ffelexToken t;\t\t// NULL if no diagnostic to be given.\n    bool explicit;\t\t// TRUE if INTRINSIC name.\n    ffeintrinGen gen;\t\t// (TRUE only) Generic id of intrinsic.\n@@ -1787,7 +1787,7 @@ ffeintrin_is_actualarg (ffeintrinSpec spec)\n \t\t\t\t// kind accordingly.  */\n \n bool\n-ffeintrin_is_intrinsic (char *name, ffelexToken t, bool explicit,\n+ffeintrin_is_intrinsic (const char *name, ffelexToken t, bool explicit,\n \t\t\tffeintrinGen *xgen, ffeintrinSpec *xspec,\n \t\t\tffeintrinImp *ximp)\n {\n@@ -1998,7 +1998,7 @@ ffeintrin_kindtype (ffeintrinSpec spec)\n \n /* Return name of generic intrinsic.  */\n \n-char *\n+const char *\n ffeintrin_name_generic (ffeintrinGen gen)\n {\n   assert (gen < FFEINTRIN_gen);\n@@ -2007,7 +2007,7 @@ ffeintrin_name_generic (ffeintrinGen gen)\n \n /* Return name of intrinsic implementation.  */\n \n-char *\n+const char *\n ffeintrin_name_implementation (ffeintrinImp imp)\n {\n   assert (imp < FFEINTRIN_imp);\n@@ -2016,7 +2016,7 @@ ffeintrin_name_implementation (ffeintrinImp imp)\n \n /* Return external/internal name of specific intrinsic.\t */\n \n-char *\n+const char *\n ffeintrin_name_specific (ffeintrinSpec spec)\n {\n   assert (spec < FFEINTRIN_spec);"}, {"sha": "5b8d725da43c531e274b5482bea8080e0a97e27e", "filename": "gcc/f/intrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -115,14 +115,14 @@ void ffeintrin_init_0 (void);\n #define ffeintrin_init_3()\n #define ffeintrin_init_4()\n bool ffeintrin_is_actualarg (ffeintrinSpec spec);\n-bool ffeintrin_is_intrinsic (char *name, ffelexToken t, bool explicit,\n+bool ffeintrin_is_intrinsic (const char *name, ffelexToken t, bool explicit,\n \t\t\t     ffeintrinGen *gen, ffeintrinSpec *spec,\n \t\t\t     ffeintrinImp *imp);\n bool ffeintrin_is_standard (ffeintrinGen gen, ffeintrinSpec spec);\n ffeinfoKindtype ffeintrin_kindtype (ffeintrinSpec spec);\n-char *ffeintrin_name_generic (ffeintrinGen gen);\n-char *ffeintrin_name_implementation (ffeintrinImp imp);\n-char *ffeintrin_name_specific (ffeintrinSpec spec);\n+const char *ffeintrin_name_generic (ffeintrinGen gen);\n+const char *ffeintrin_name_implementation (ffeintrinImp imp);\n+const char *ffeintrin_name_specific (ffeintrinSpec spec);\n ffeIntrinsicState ffeintrin_state_family (ffeintrinFamily family);\n #define ffeintrin_terminate_0()\n #define ffeintrin_terminate_1()"}, {"sha": "3136d40252890f5ec959260588c8197505ef1e19", "filename": "gcc/f/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -1751,10 +1751,10 @@ ffelex_token_new_ ()\n   return t;\n }\n \n-static char *\n+static const char *\n ffelex_type_string_ (ffelexType type)\n {\n-  static char *types[] = {\n+  static const char *types[] = {\n     \"FFELEX_typeNONE\",\n     \"FFELEX_typeCOMMENT\",\n     \"FFELEX_typeEOS\",\n@@ -4546,7 +4546,7 @@ ffelex_token_names_from_names (ffelexToken t, ffeTokenLength start,\n /* Make a new CHARACTER token.  */\n \n ffelexToken\n-ffelex_token_new_character (char *s, ffewhereLine l, ffewhereColumn c)\n+ffelex_token_new_character (const char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n \n@@ -4581,7 +4581,7 @@ ffelex_token_new_eof ()\n /* Make a new NAME token.  */\n \n ffelexToken\n-ffelex_token_new_name (char *s, ffewhereLine l, ffewhereColumn c)\n+ffelex_token_new_name (const char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n \n@@ -4602,7 +4602,7 @@ ffelex_token_new_name (char *s, ffewhereLine l, ffewhereColumn c)\n /* Make a new NAMES token.  */\n \n ffelexToken\n-ffelex_token_new_names (char *s, ffewhereLine l, ffewhereColumn c)\n+ffelex_token_new_names (const char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n \n@@ -4631,7 +4631,7 @@ ffelex_token_new_names (char *s, ffewhereLine l, ffewhereColumn c)\n    in the original string.  */\n \n ffelexToken\n-ffelex_token_new_number (char *s, ffewhereLine l, ffewhereColumn c)\n+ffelex_token_new_number (const char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n   ffeTokenLength len;"}, {"sha": "c82a9c86b9486a088f522a2e82daaea7ac8382d1", "filename": "gcc/f/lex.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -148,14 +148,14 @@ ffelexToken ffelex_token_names_from_names (ffelexToken t,\n \t\t\t\t\t   ffeTokenLength start,\n \t\t\t\t\t   ffeTokenLength len);\n ffelexToken ffelex_token_new (void);\n-ffelexToken ffelex_token_new_character (char *s, ffewhereLine l,\n+ffelexToken ffelex_token_new_character (const char *s, ffewhereLine l,\n \t\t\t\t\tffewhereColumn c);\n ffelexToken ffelex_token_new_eof (void);\n-ffelexToken ffelex_token_new_name (char *s, ffewhereLine l,\n+ffelexToken ffelex_token_new_name (const char *s, ffewhereLine l,\n \t\t\t\t   ffewhereColumn c);\n-ffelexToken ffelex_token_new_names (char *s, ffewhereLine l,\n+ffelexToken ffelex_token_new_names (const char *s, ffewhereLine l,\n \t\t\t\t    ffewhereColumn c);\n-ffelexToken ffelex_token_new_number (char *s, ffewhereLine l,\n+ffelexToken ffelex_token_new_number (const char *s, ffewhereLine l,\n \t\t\t\t     ffewhereColumn c);\n ffelexToken ffelex_token_new_simple_ (ffelexType type, ffewhereLine l,\n \t\t\t\t      ffewhereColumn c);"}, {"sha": "b0d31af81ef0ae1206f38fd759cc92ad411c35dc", "filename": "gcc/f/malloc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fmalloc.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -70,7 +70,7 @@ struct _malloc_root_ malloc_root_\n \n static void *malloc_reserve_ = NULL;\t/* For crashes. */\n #if MALLOC_DEBUG\n-static char *malloc_types_[] =\n+static const char *malloc_types_[] =\n {\"KS\", \"KSR\", \"NF\", \"NFR\", \"US\", \"USR\"};\n #endif\n \n@@ -234,7 +234,7 @@ malloc_pool_kill (mallocPool p)\n    Makes a new pool with the given name and default new-chunk allocation.  */\n \n mallocPool\n-malloc_pool_new (char *name, mallocPool parent,\n+malloc_pool_new (const char *name, mallocPool parent,\n \t\t unsigned long chunks UNUSED)\n {\n   mallocPool p;\n@@ -384,7 +384,7 @@ malloc_new_ (mallocSize s)\n    add it to the list of mallocArea_s for the pool.  */\n \n void *\n-malloc_new_inpool_ (mallocPool pool, mallocType_ type, char *name, mallocSize s)\n+malloc_new_inpool_ (mallocPool pool, mallocType_ type, const char *name, mallocSize s)\n {\n   void *ptr;\n   mallocArea_ a;\n@@ -437,7 +437,7 @@ malloc_new_inpool_ (mallocPool pool, mallocType_ type, char *name, mallocSize s)\n    you pass it a 0).  */\n \n void *\n-malloc_new_zinpool_ (mallocPool pool, mallocType_ type, char *name, mallocSize s,\n+malloc_new_zinpool_ (mallocPool pool, mallocType_ type, const char *name, mallocSize s,\n \t\t     int z)\n {\n   void *ptr;"}, {"sha": "d9efdf281dabdd956854880a345699937f833962", "filename": "gcc/f/malloc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fmalloc.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -109,14 +109,14 @@ void malloc_init (void);\n void malloc_kill_inpool_ (mallocPool pool, mallocType_ type, void *ptr,\n \t\t\t  mallocSize size);\n void *malloc_new_ (mallocSize size);\n-void *malloc_new_inpool_ (mallocPool pool, mallocType_ type, char *name,\n+void *malloc_new_inpool_ (mallocPool pool, mallocType_ type, const char *name,\n \t\t\t  mallocSize size);\n-void *malloc_new_zinpool_ (mallocPool pool, mallocType_ type, char *name,\n+void *malloc_new_zinpool_ (mallocPool pool, mallocType_ type, const char *name,\n \t\t\t   mallocSize size, int z);\n void malloc_pool_display (mallocPool p);\n char malloc_pool_find_ (mallocPool p, mallocPool parent);\n void malloc_pool_kill (mallocPool p);\n-mallocPool malloc_pool_new (char *name, mallocPool parent, unsigned long chunks);\n+mallocPool malloc_pool_new (const char *name, mallocPool parent, unsigned long chunks);\n mallocPool malloc_pool_use (mallocPool p);\n void *malloc_resize_ (void *ptr, mallocSize new_size);\n void *malloc_resize_inpool_ (mallocPool pool, mallocType_ type, void *ptr,"}, {"sha": "360279b3151a45cf43f5ef12deb59ab2b2578c64", "filename": "gcc/f/name.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fname.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fname.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fname.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -167,7 +167,7 @@ ffename_lookup (ffenameSpace ns, ffelexToken t)\n    ffename_space_drive_global(ns,fn);  */\n \n void\n-ffename_space_drive_global (ffenameSpace ns, ffeglobal (*fn) ())\n+ffename_space_drive_global (ffenameSpace ns, ffeglobal (*fn) (ffeglobal))\n {\n   ffename n;\n \n@@ -188,7 +188,7 @@ ffename_space_drive_global (ffenameSpace ns, ffeglobal (*fn) ())\n    ffename_space_drive_symbol(ns,fn);  */\n \n void\n-ffename_space_drive_symbol (ffenameSpace ns, ffesymbol (*fn) ())\n+ffename_space_drive_symbol (ffenameSpace ns, ffesymbol (*fn) (ffesymbol))\n {\n   ffename n;\n "}, {"sha": "6c3499f07e0670a105f9a08c076c56ad951bd9db", "filename": "gcc/f/name.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fname.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fname.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fname.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -75,8 +75,8 @@ struct _ffename_space_\n ffename ffename_find (ffenameSpace ns, ffelexToken t);\n void ffename_kill (ffenameSpace ns, ffename n);\n ffename ffename_lookup (ffenameSpace ns, ffelexToken t);\n-void ffename_space_drive_global (ffenameSpace ns, ffeglobal (*fn) ());\n-void ffename_space_drive_symbol (ffenameSpace ns, ffesymbol (*fn) ());\n+void ffename_space_drive_global (ffenameSpace ns, ffeglobal (*fn) (ffeglobal));\n+void ffename_space_drive_symbol (ffenameSpace ns, ffesymbol (*fn) (ffesymbol));\n void ffename_space_kill (ffenameSpace ns);\n ffenameSpace ffename_space_new (mallocPool pool);\n "}, {"sha": "98b27fedbb3f4b5cc04bcf4a78ea4500563e2149", "filename": "gcc/f/symbol.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -117,7 +117,7 @@ static ffesymbolRetract_ *ffesymbol_retract_list_;\n \n /* List of state names. */\n \n-static char *ffesymbol_state_name_[] =\n+static const char *ffesymbol_state_name_[] =\n {\n   \"?\",\n   \"@\",\n@@ -127,7 +127,7 @@ static char *ffesymbol_state_name_[] =\n \n /* List of attribute names. */\n \n-static char *ffesymbol_attr_name_[] =\n+static const char *ffesymbol_attr_name_[] =\n {\n #define DEFATTR(ATTR,ATTRS,NAME) NAME,\n #include \"symbol.def\"\n@@ -316,7 +316,7 @@ ffesymbol_whine_state_ (ffebad bad, ffelexToken t, char c)\n \n /* Returns a string representing the attributes set.  */\n \n-char *\n+const char *\n ffesymbol_attrs_string (ffesymbolAttrs attrs)\n {\n   static char string[FFESYMBOL_attr * 12 + 20];\n@@ -773,7 +773,7 @@ ffesymbol_declare_subrunit (ffelexToken t)\n    ffesymbol_drive (fn);  */\n \n void\n-ffesymbol_drive (ffesymbol (*fn) ())\n+ffesymbol_drive (ffesymbol (*fn) (ffesymbol))\n {\n   assert (ffesymbol_sfunc_ == NULL);\t/* Might be ok, but not for current\n \t\t\t\t\t   uses. */\n@@ -787,7 +787,7 @@ ffesymbol_drive (ffesymbol (*fn) ())\n    ffesymbol_drive_sfnames (fn);  */\n \n void\n-ffesymbol_drive_sfnames (ffesymbol (*fn) ())\n+ffesymbol_drive_sfnames (ffesymbol (*fn) (ffesymbol))\n {\n   ffename_space_drive_symbol (ffesymbol_sfunc_, fn);\n }\n@@ -1348,7 +1348,7 @@ ffesymbol_signal_change (ffesymbol s)\n \n /* Returns the string based on the state.  */\n \n-char *\n+const char *\n ffesymbol_state_string (ffesymbolState state)\n {\n   if (state >= ARRAY_SIZE (ffesymbol_state_name_))"}, {"sha": "6082669ea95b90c3570be60033c6461f9612a217", "filename": "gcc/f/symbol.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Fsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -158,7 +158,7 @@ struct _ffesymbol_\n #define ffesymbol_arraysize(s) ((s)->array_size)\n #define ffesymbol_attr(s,a) ((s)->attrs & ((ffesymbolAttrs) 1 << (a)))\n #define ffesymbol_attrs(s) ((s)->attrs)\n-char *ffesymbol_attrs_string (ffesymbolAttrs attrs);\n+const char *ffesymbol_attrs_string (ffesymbolAttrs attrs);\n #define ffesymbol_basictype(s) ffeinfo_basictype((s)->info)\n void ffesymbol_check (ffesymbol s, ffelexToken t, bool maybe_intrin);\n #define ffesymbol_common(s) ((s)->common)\n@@ -177,8 +177,8 @@ ffesymbol ffesymbol_declare_sfdummy (ffelexToken t);\n ffesymbol ffesymbol_declare_subrunit (ffelexToken t);\n #define ffesymbol_dims(s) ((s)->dims)\n #define ffesymbol_dim_syms(s) ((s)->dim_syms)\n-void ffesymbol_drive (ffesymbol (*fn) ());\n-void ffesymbol_drive_sfnames (ffesymbol (*fn) ());\n+void ffesymbol_drive (ffesymbol (*fn) (ffesymbol));\n+void ffesymbol_drive_sfnames (ffesymbol (*fn) (ffesymbol));\n #define ffesymbol_dummyargs(s) ((s)->dummy_args)\n #if FFECOM_targetCURRENT == FFECOM_targetFFE\n void ffesymbol_dump (ffesymbol s);\n@@ -269,7 +269,7 @@ void ffesymbol_signal_change (ffesymbol s);\n #define ffesymbol_specific(s) ((s)->specific)\n #define ffesymbol_state(s) ((s)->state)\n #define ffesymbol_state_is_specable(s) ((s) <= FFESYMBOL_stateSEEN)\n-char *ffesymbol_state_string (ffesymbolState state);\n+const char *ffesymbol_state_string (ffesymbolState state);\n #define ffesymbol_storage(s) ((s)->storage)\n void ffesymbol_terminate_0 (void);\n void ffesymbol_terminate_1 (void);"}, {"sha": "5712bdd798abcda0aa3e219ca8a7976645b6cb82", "filename": "gcc/f/target.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -469,7 +469,7 @@ ffetarget_iszero_hollerith (ffetargetHollerith constant)\n    data type info and the number of elements an array (1 for a scalar).\t */\n \n void\n-ffetarget_layout (char *error_text UNUSED, ffetargetAlign *alignment,\n+ffetarget_layout (const char *error_text UNUSED, ffetargetAlign *alignment,\n \t\t  ffetargetAlign *modulo, ffetargetOffset *size,\n \t\t  ffeinfoBasictype bt, ffeinfoKindtype kt,\n \t\t  ffetargetCharacterSize charsize,"}, {"sha": "467f10298cff490d66e43432e05aef64f5e427c2", "filename": "gcc/f/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f096f9e545b3f951ab850f06fad454613b0e43/gcc%2Ff%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.h?ref=26f096f9e545b3f951ab850f06fad454613b0e43", "patch": "@@ -732,7 +732,7 @@ void ffetarget_integer_bad_magical_precedence_binary (ffelexToken integer,\n bool ffetarget_iszero_character1 (ffetargetCharacter1 constant);\n #endif\n bool ffetarget_iszero_hollerith (ffetargetHollerith constant);\n-void ffetarget_layout (char *error_text, ffetargetAlign *alignment,\n+void ffetarget_layout (const char *error_text, ffetargetAlign *alignment,\n \t\t       ffetargetAlign *modulo, ffetargetOffset *size,\n \t\t       ffeinfoBasictype bt, ffeinfoKindtype kt,\n \t\t       ffetargetCharacterSize charsize,"}]}