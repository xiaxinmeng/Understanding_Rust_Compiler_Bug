{"sha": "7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiMjZiYjAwMTczYWYxZjQxZDNkZjRiNWE3YTQzYmU5ZTNmMTJkYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-11T22:21:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-11T22:21:10Z"}, "message": "hooks.c (hook_int_size_t_constcharptr_int_0): New.\n\n\t* hooks.c (hook_int_size_t_constcharptr_int_0): New.\n\t* hooks.h (hook_int_size_t_constcharptr_int_0): New.\n\t* langhooks-def.h (lhd_decode_option, LANG_HOOKS_DECODE_OPTION): Die.\n\t(LANG_HOOKS_HANDLE_OPTION, LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.c (lhd_decode_option): Remove.\n\t* langhooks.h (struct lang_hooks): Remove decode_option.\n\t* opts.c (handle_option): No longer use decode_option.\njava:\n\t* Make-lang.in: Handle mostlyclean.\ntreelang:\n\t* Make-lang.in: Update for option handling.\n\t* lang.opt: New.\n\t* tree1.c: Include opts.h and t-options.h.\n\t(treelang_decode_option): Remove.\n\t(treelang_handle_option): New.\n\t* treetree.c (LANG_HOOKS_DECODE_OPTION): Remove.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\t* treetree.h (treelang_decode_option): Remove.\n\t(treelang_handle_option): New.\n\nFrom-SVN: r67799", "tree": {"sha": "2af8d6bf007345fd5e6e0ba2072ebff79f20b89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af8d6bf007345fd5e6e0ba2072ebff79f20b89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24386c5ec6a6f91d94bb14a65f5ec8a5c84235bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24386c5ec6a6f91d94bb14a65f5ec8a5c84235bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24386c5ec6a6f91d94bb14a65f5ec8a5c84235bc"}], "stats": {"total": 262, "additions": 147, "deletions": 115}, "files": [{"sha": "cf8050db53d2714d4b0ff793bec25b861d330a9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -1,3 +1,13 @@\n+2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* hooks.c (hook_int_size_t_constcharptr_int_0): New.\n+\t* hooks.h (hook_int_size_t_constcharptr_int_0): New.\n+\t* langhooks-def.h (lhd_decode_option, LANG_HOOKS_DECODE_OPTION): Die.\n+\t(LANG_HOOKS_HANDLE_OPTION, LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.c (lhd_decode_option): Remove.\n+\t* langhooks.h (struct lang_hooks): Remove decode_option.\n+\t* opts.c (handle_option): No longer use decode_option.\n+\n 2003-06-11  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfgloopanal.c (variable_initial_value): Update the set of altered"}, {"sha": "438af66f921c89b5f1122cbe2b5c12caa36617d3", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -110,6 +110,14 @@ hook_int_void_0 (void)\n   return 0;\n }\n \n+int\n+hook_int_size_t_constcharptr_int_0 (size_t a ATTRIBUTE_UNUSED,\n+\t\t\t\t    const char *b ATTRIBUTE_UNUSED,\n+\t\t\t\t    int c ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n void\n hook_void_tree (a)\n      tree a ATTRIBUTE_UNUSED;"}, {"sha": "15b742da178304fb81b766a1034c7853f4162b80", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -40,6 +40,7 @@ void hook_void_tree_treeptr PARAMS ((tree, tree *));\n int hook_int_tree_tree_1 PARAMS ((tree, tree));\n int hook_int_rtx_0 PARAMS ((rtx));\n int hook_int_void_0 (void);\n+int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n \n bool default_can_output_mi_thunk_no_vcall\n   PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));"}, {"sha": "fcd451d536246b245a0a42215bffce1cb46e1d7e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -1,3 +1,7 @@\n+2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Handle mostlyclean.\n+\n 2003-06-11  Tom Tromey  <tromey@redhat.com>\n \n \t* lang.c (java_handle_option): Update dependency_tracking for"}, {"sha": "7bac1872649134626e6664b8b94168154852560d", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -237,6 +237,7 @@ java.install-info: installdirs\n java.mostlyclean:\n \t-rm -f java/*$(objext) $(DEMANGLER_PROG)\n \t-rm -f java/*$(coverageexts)\n+\t-rm -f java/j-options.c java/j-options.h\n \t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext) s-java\n java.clean:\n java.distclean:"}, {"sha": "a7f0abcd39f8fc1b87115a242e8f5098f9ccb02d", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -35,17 +35,14 @@ extern HOST_WIDE_INT hook_get_alias_set_0\tPARAMS ((tree));\n    The macros in this file should NOT be surrounded by a\n    #ifdef...#endif pair, since this file declares the defaults.  Each\n    front end overrides any hooks it wishes to, in the file containing\n-   its struct lang_hooks, AFTER including this file.\n-\n-   Prefix all default hooks with \"lhd_\".  */\n+   its struct lang_hooks, AFTER including this file.  */\n \n /* See langhooks.h for the definition and documentation of each hook.  */\n \n extern void lhd_do_nothing PARAMS ((void));\n extern void lhd_do_nothing_t PARAMS ((tree));\n extern void lhd_do_nothing_i PARAMS ((int));\n extern void lhd_do_nothing_f PARAMS ((struct function *));\n-extern int lhd_decode_option PARAMS ((int, char **));\n extern bool lhd_post_options PARAMS ((const char **));\n extern HOST_WIDE_INT lhd_get_alias_set PARAMS ((tree));\n extern tree lhd_return_tree PARAMS ((tree));\n@@ -94,8 +91,7 @@ void write_global_declarations PARAMS ((void));\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n #define LANG_HOOKS_INIT_OPTIONS\t\thook_int_void_0\n-#define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n-#define LANG_HOOKS_HANDLE_OPTION\tNULL\n+#define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constharptr_int_0\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n@@ -246,7 +242,6 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_IDENTIFIER_SIZE, \\\n   LANG_HOOKS_TREE_SIZE, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n-  LANG_HOOKS_DECODE_OPTION, \\\n   LANG_HOOKS_HANDLE_OPTION, \\\n   LANG_HOOKS_POST_OPTIONS, \\\n   LANG_HOOKS_INIT, \\"}, {"sha": "423bb5f421b2c29b43fbff7bf379526ed2986f9e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -83,16 +83,6 @@ lhd_return_null_tree (t)\n   return NULL_TREE;\n }\n \n-/* Do nothing; the default hook to decode an option.  */\n-\n-int\n-lhd_decode_option (argc, argv)\n-     int argc ATTRIBUTE_UNUSED;\n-     char **argv ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* The default post options hook.  */\n \n bool"}, {"sha": "cfb26de599497e250d45f0f87c664e0c9dd443de", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -206,16 +206,6 @@ struct lang_hooks\n      the language mask to filter the switch array with.  */\n   int (*init_options) PARAMS ((void));\n \n-  /* Function called with an option vector as argument, to decode a\n-     single option (typically starting with -f or -W or +).  It should\n-     return the number of command-line arguments it uses if it handles\n-     the option, or 0 and not complain if it does not recognize the\n-     option.  If this function returns a negative number, then its\n-     absolute value is the number of command-line arguments used, but,\n-     in addition, no language-independent option processing should be\n-     done for this option.  Obsoleted by handle_option.  */\n-  int (*decode_option) PARAMS ((int, char **));\n-\n   /* Handle the switch CODE, which has real type enum opt_code from\n      options.h.  If the switch takes an argument, it is passed in ARG\n      which points to permanent storage.  The handler is resonsible for"}, {"sha": "25dacf2131d27f6abf7ac01430ba9bf358418f3b", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -118,7 +118,7 @@ find_opt (const char *input, int lang_mask)\n \n /* Handle the switch beginning at ARGV, with ARGC remaining.  */\n int\n-handle_option (int argc, char **argv, int lang_mask)\n+handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n {\n   size_t opt_index;\n   const char *opt, *arg = 0;\n@@ -127,10 +127,6 @@ handle_option (int argc, char **argv, int lang_mask)\n   int result = 0, temp;\n   const struct cl_option *option;\n \n-  /* If the front end isn't yet converted, use the old hook.  */\n-  if (!lang_hooks.handle_option)\n-    return (*lang_hooks.decode_option) (argc, argv);\n-\n   opt = argv[0];\n \n   /* Interpret \"-\" or a non-switch as a file name.  */"}, {"sha": "c5c063bff6c513057412a94a57e842f4545bd444", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -1,3 +1,15 @@\n+2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update for option handling.\n+\t* lang.opt: New.\n+\t* tree1.c: Include opts.h and t-options.h.\n+\t(treelang_decode_option): Remove.\n+\t(treelang_handle_option): New.\n+\t* treetree.c (LANG_HOOKS_DECODE_OPTION): Remove.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t* treetree.h (treelang_decode_option): Remove.\n+\t(treelang_handle_option): New.\n+\n 2003-06-08  Andreas Jaeger  <aj@suse.de>\n \n \t* Make-lang.in: Update."}, {"sha": "d5e96af4bcd4e10cbe8bf5a6704f938cdc87a752", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -85,11 +85,11 @@ treelang.done: tree1$(exeext)\n # core compiler\n tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/parse.o\\\n \t$(TREE_BE_LIBS) c-convert.o c-typeck.o c-common.o c-cppbuiltin.o \\\n-\tc-decl.o attribs.o\n+\tc-decl.o attribs.o treelang/t-options.o\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \ttreelang/tree1.o treelang/treetree.o treelang/lex.o treelang/parse.o \\\n \tc-convert.o c-typeck.o c-common.o c-cppbuiltin.o c-decl.o attribs.o \\\n-\t$(TREE_BE_LIBS)\n+\t$(TREE_BE_LIBS) treelang/t-options.o\n \n #\f\n # Compiling object files from source files.\n@@ -98,7 +98,7 @@ tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/par\n \n treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   flags.h toplev.h $(GGC_H) $(TREE_H) diagnostic.h treelang/treelang.h \\\n-  input.h treelang/treetree.h \\\n+  input.h treelang/treetree.h treelang/t-options.h \\\n   treelang/treetree.h gt-treelang-tree1.h gtype-treelang.h\n \n treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -112,6 +112,12 @@ treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n treelang/lex.o: treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) diagnostic.h $(TREE_H) treelang/treelang.h input.h treelang/parse.h\n \n+treelang/t-options.c: treelang/lang.opt opts.sh treelang/t-options.h\n+\n+treelang/t-options.h: treelang/lang.opt opts.sh\n+\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh treelang/t-options.c \\\n+\t\ttreelang/t-options.h $(srcdir)/treelang/lang.opt\n+\n # generated files the files from lex and yacc are put into the source\n # directory in case someone wants to build but does not have\n # lex/yacc\n@@ -122,6 +128,7 @@ $(srcdir)/treelang/lex.c: $(srcdir)/treelang/lex.l\n $(srcdir)/treelang/parse.c $(srcdir)/treelang/parse.h: $(srcdir)/treelang/parse.y\n \t$(BISON) $(BISONFLAGS) -v --defines \\\n \t--output=$(srcdir)/treelang/parse.c $(srcdir)/treelang/parse.y\n+\n # -v\n \n gt-treelang-tree1.h gtype-treelang.h : s-gtype; @true\n@@ -230,6 +237,7 @@ treelang.mostlyclean:\n \t    rm -f treelang/$$name$(exeext); \\\n \t  fi ; \\\n \tdone\n+\t-rm -f treelang/t-options.c treelang/t-options.h\n \t-rm -f treelang/*$(objext)\n \t-rm -f treelang/*$(coverageexts)\n \t-rm treelang.done"}, {"sha": "5d3a26686fc85e6d6678df1a15cd08d965d20cd7", "filename": "gcc/treelang/lang.opt", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flang.opt?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -0,0 +1,59 @@\n+; Options for the treelang front end.\n+; Copyright (C) 2003 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+; \n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+; \n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+\n+; This file is processed by the script opts.sh.  It is a database of\n+; command line options, with each record separated by a blank line,\n+; and each field appearing on its own line.  The first field is the\n+; command-line switch with the leading \"-\" removed.  All options\n+; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n+; form; this form should not be listed.  If you do not want this\n+; negative form and you want it to be automatically rejected, add\n+; RejectNegative to the second field.\n+\n+; The second field should contain \"Tree\".  If the switch takes an\n+; argument, then you should also specify \"Joined\" and/or \"Separate\" to\n+; indicate where the argument can appear.\n+\n+; Comments can appear on their own line anwhere in the file, preceded\n+; by a semicolon.  Whitespace is permitted before the semicolon.\n+\n+; For each switch XXX below, an enumeration constant is created by the\n+; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n+; characters replaced with an underscore.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+-help\n+Tree\n+\n+flexer-trace\n+Tree\n+\n+fparser-trace\n+Tree\n+\n+v\n+Tree\n+\n+y\n+Tree\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "f4e5fa84cb582dd5d1e3e3a17fcb3092d35f1669", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 35, "deletions": 77, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -44,6 +44,8 @@\n \n #include \"treelang.h\"\n #include \"treetree.h\"\n+#include \"opts.h\"\n+#include \"t-options.h\"\n \n extern int yyparse (void);\n \n@@ -86,98 +88,54 @@ static int version_done = 0;\n \n static unsigned int work_nesting_level = 0;\n \n-/* Process one switch - called by toplev.c.  */\n-\n+/* Process a switch - called by opts.c.  */\n int\n-treelang_decode_option (num_options_left, first_option_left)\n-     int num_options_left ATTRIBUTE_UNUSED; \n-     char** first_option_left;\n+treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n+\t\t\tint value)\n {\n-  \n-  /*\n-    Process options - bear in mind I may get options that are really\n-    meant for someone else (eg the main compiler) so I have to be very\n-    permissive. \n-    \n-  */\n-  \n-  if (first_option_left[0][0] != '-')\n-    return 0; \n-  \n-  switch (first_option_left[0][1]) \n-    {\n-    case '-':\n-      if (!strcmp (first_option_left[0],\"--help\"))\n-        {\n-          if (!version_done)\n-            {\n-              fputs (language_string, stdout);\n-              fputs (version_string, stdout);\n-              fputs (\"\\n\", stdout);\n-              version_done = 1;\n-            }\n-          fprintf (stdout, \"Usage: tree1 [switches] -o output input\\n\");\n-          return 1;\n-        }\n-      break;\n+  enum opt_code code = (enum opt_code) scode;\n \n-    case 'v':\n-      if (!strcmp (first_option_left[0],\"-v\"))\n-        {\n-          if (!version_done)\n-            {\n-              fputs (language_string, stdout);\n-              fputs (version_string, stdout);\n-              fputs (\"\\n\", stdout);\n-              version_done = 1;\n-            }\n-          return 1;\n-        }\n-      break;\n+  switch (code)\n+    {\n+    default:\n+      return 0;\n \n-    case 'y':\n-      if (!strcmp (first_option_left[0],\"-y\"))\n-        {\n-          option_lexer_trace = 1;\n-          option_parser_trace = 1;\n-          return 1;\n-        }\n+    case OPT__help:\n+      if (!version_done)\n+\t{\n+\t  fputs (language_string, stdout);\n+\t  fputs (version_string, stdout);\n+\t  fputs (\"\\n\", stdout);\n+\t  version_done = 1;\n+\t}\n+      fprintf (stdout, \"Usage: tree1 [switches] -o output input\\n\");\n       break;\n \n-    case 'f':\n-      if (!strcmp (first_option_left[0],\"-fparser-trace\"))\n-        {\n-          option_parser_trace = 1;\n-          return 1;\n-        }\n-      if (!strcmp (first_option_left[0],\"-flexer-trace\"))\n-        {\n-          option_lexer_trace = 1;\n-          return 1;\n-        }\n+    case OPT_v:\n+      if (!version_done)\n+\t{\n+\t  fputs (language_string, stdout);\n+\t  fputs (version_string, stdout);\n+\t  fputs (\"\\n\", stdout);\n+\t  version_done = 1;\n+\t}\n       break;\n \n-    case 'w':\n-      if (!strcmp (first_option_left[0],\"-w\"))\n-        {\n-          /* Tolerate this option but ignore it - we always put out\n-             all warnings.  */\n-          return 1;\n-        }\n+    case OPT_y:\n+      option_lexer_trace = 1;\n+      option_parser_trace = 1;\n       break;\n \n-    case 'W':\n-      if (!strcmp (first_option_left[0],\"-Wall\"))\n-        {\n-          return 1;\n-        }\n+    case OPT_fparser_trace:\n+      option_parser_trace = value;\n       break;\n \n-    default:\n+    case OPT_flexer_trace:\n+      option_lexer_trace = value;\n       break;\n     }\n \n-  return 0;\n+  return 1;\n }\n \n /* Language dependent parser setup.  */"}, {"sha": "904616dbcd2e49c0e2907d251244401617ecf7ed", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -114,8 +114,8 @@ extern char **file_names;\n #define LANG_HOOKS_NAME\t\"GNU treelang\"\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH\t\ttreelang_finish\n-#undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION treelang_decode_option\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION treelang_handle_option\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Tree code type/name/code tables.  */"}, {"sha": "c87b3af4da6a741f592ff6da27de5d15fbf367d9", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb26bb00173af1f41d3df4b5a7a43be9e3f12db/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=7fb26bb00173af1f41d3df4b5a7a43be9e3f12db", "patch": "@@ -63,7 +63,7 @@ tree tree_code_get_type (int type_num);\n void treelang_init_decl_processing (void);\n void treelang_finish (void);\n bool treelang_init (void);\n-int treelang_decode_option (int, char **);\n+int treelang_handle_option (size_t scode, const char *arg, int value);\n void treelang_parse_file (int debug_flag);\n void push_var_level (void);\n void pop_var_level (void);"}]}