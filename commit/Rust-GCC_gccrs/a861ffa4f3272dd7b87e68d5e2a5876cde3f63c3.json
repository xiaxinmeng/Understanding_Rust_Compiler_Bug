{"sha": "a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2MWZmYTRmMzI3MmRkN2I4N2U2OGQ1ZTJhNTg3NmNkZTNmNjNjMw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-24T13:27:11Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-24T13:27:11Z"}, "message": "avr.c (avr_out_fract): Make register numbers that might be outside of source operand signed.\n\n\t* config/avr/avr.c (avr_out_fract): Make register numbers that\n\tmight be outside of source operand signed.\n\nFrom-SVN: r195424", "tree": {"sha": "12152ee76d152c116268af019ae616f8fe397bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12152ee76d152c116268af019ae616f8fe397bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593c0dddb7f21185d46b6a01ebc0c4c86248c738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593c0dddb7f21185d46b6a01ebc0c4c86248c738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593c0dddb7f21185d46b6a01ebc0c4c86248c738"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "bf0a47ba3ca0061e131061e6d18d24dee6f8ce1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "patch": "@@ -1,3 +1,8 @@\n+2013-01-24  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (avr_out_fract): Make register numbers that\n+\tmight be outside of source operand signed.\n+\n 2013-01-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/constraints.md (Yf): New constraint."}, {"sha": "f0906fad43e4f58b557757aa9cade47e20545860", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a861ffa4f3272dd7b87e68d5e2a5876cde3f63c3", "patch": "@@ -7114,13 +7114,13 @@ avr_out_fract (rtx insn, rtx operands[], bool intsigned, int *plen)\n       unsigned d1 = d0 + step;\n \n       // Current and next regno of source\n-      unsigned s0 = d0 - offset;\n-      unsigned s1 = s0 + step;\n+      signed s0 = d0 - offset;\n+      signed s1 = s0 + step;\n \n       // Must current resp. next regno be CLRed?  This applies to the low\n       // bytes of the destination that have no associated source bytes.\n-      bool clr0 = s0 < src.regno;\n-      bool clr1 = s1 < src.regno && d1 >= dest.regno;\n+      bool clr0 = s0 < (signed) src.regno;\n+      bool clr1 = s1 < (signed) src.regno && d1 >= dest.regno;\n \n       // First gather what code to emit (if any) and additional step to\n       // apply if a MOVW is in use.  xop[2] is destination rtx and xop[3]\n@@ -7150,12 +7150,12 @@ avr_out_fract (rtx insn, rtx operands[], bool intsigned, int *plen)\n                 }\n             }\n         }\n-      else if (offset && s0 <= src.regno_msb)\n+      else if (offset && s0 <= (signed) src.regno_msb)\n         {\n           int movw = AVR_HAVE_MOVW && offset % 2 == 0\n             && d0 % 2 == (offset > 0)\n             && d1 <= dest.regno_msb && d1 >= dest.regno\n-            && s1 <= src.regno_msb  && s1 >= src.regno;\n+            && s1 <= (signed) src.regno_msb  && s1 >= (signed) src.regno;\n \n           xop[2] = all_regs_rtx[d0 & ~movw];\n           xop[3] = all_regs_rtx[s0 & ~movw];"}]}