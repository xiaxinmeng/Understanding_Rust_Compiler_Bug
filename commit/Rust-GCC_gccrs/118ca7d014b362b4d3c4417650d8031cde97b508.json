{"sha": "118ca7d014b362b4d3c4417650d8031cde97b508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE4Y2E3ZDAxNGIzNjJiNGQzYzQ0MTc2NTBkODAzMWNkZTk3YjUwOA==", "commit": {"author": {"name": "David Gilbert", "email": "david.gilbert@object-refinery.com", "date": "2005-02-22T19:07:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-22T19:07:40Z"}, "message": "2005-02-22  David Gilbert  <david.gilbert@object-refinery.com>\n\n\t* java/awt/font/TransformAttribute.java,\n\t(TransformAttribute(AffineTransform)): throw\n\tIllegalArgumentException for null transform.\n\t(getTransform): return a copy of transform.\n\tAdded doc comments to all.\n\nFrom-SVN: r95408", "tree": {"sha": "78632f35b07ac4cd2c9b28aaaf52fb6f59b19ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78632f35b07ac4cd2c9b28aaaf52fb6f59b19ba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/118ca7d014b362b4d3c4417650d8031cde97b508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118ca7d014b362b4d3c4417650d8031cde97b508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118ca7d014b362b4d3c4417650d8031cde97b508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118ca7d014b362b4d3c4417650d8031cde97b508/comments", "author": {"login": "jfree", "id": 1835893, "node_id": "MDQ6VXNlcjE4MzU4OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1835893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfree", "html_url": "https://github.com/jfree", "followers_url": "https://api.github.com/users/jfree/followers", "following_url": "https://api.github.com/users/jfree/following{/other_user}", "gists_url": "https://api.github.com/users/jfree/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfree/subscriptions", "organizations_url": "https://api.github.com/users/jfree/orgs", "repos_url": "https://api.github.com/users/jfree/repos", "events_url": "https://api.github.com/users/jfree/events{/privacy}", "received_events_url": "https://api.github.com/users/jfree/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b22dcb1f3071073b9521d72824eccad571c81613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22dcb1f3071073b9521d72824eccad571c81613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b22dcb1f3071073b9521d72824eccad571c81613"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "5c99a7834171d7a819d78ed520d5c68093debbdd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118ca7d014b362b4d3c4417650d8031cde97b508/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118ca7d014b362b4d3c4417650d8031cde97b508/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=118ca7d014b362b4d3c4417650d8031cde97b508", "patch": "@@ -1,3 +1,11 @@\n+2005-02-22  David Gilbert  <david.gilbert@object-refinery.com>\n+\n+\t* java/awt/font/TransformAttribute.java,\n+\t(TransformAttribute(AffineTransform)): throw\n+\tIllegalArgumentException for null transform.\n+\t(getTransform): return a copy of transform.\n+\tAdded doc comments to all.\n+\n 2005-02-22  Jeroen Frijters  <jeroen@frijters.net>\n \n \t* java/io/Externalizable.java,"}, {"sha": "3bb3c3cf1c33cf2684ec2bb6a292bb26628073eb", "filename": "libjava/java/awt/font/TransformAttribute.java", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118ca7d014b362b4d3c4417650d8031cde97b508/libjava%2Fjava%2Fawt%2Ffont%2FTransformAttribute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118ca7d014b362b4d3c4417650d8031cde97b508/libjava%2Fjava%2Fawt%2Ffont%2FTransformAttribute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Ffont%2FTransformAttribute.java?ref=118ca7d014b362b4d3c4417650d8031cde97b508", "patch": "@@ -1,5 +1,5 @@\n-/* TransformAttribute.java\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+/* TransformAttribute.java --\n+   Copyright (C) 2003, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -42,6 +42,13 @@\n import java.io.Serializable;\n \n /**\n+ * This class provides a mechanism for using an {@link AffineTransform} as\n+ * an <i>immutable</i> attribute (for example, in the \n+ * {@link java.text.AttributedString} class).  Any transform passed to \n+ * this class is copied before being stored, and any transform handed out\n+ * by this class is a copy of the stored transform.  In this way, it is \n+ * not possible to modify the stored transform.\n+ * \n  * @author Michael Koch\n  */\n public final class TransformAttribute implements Serializable\n@@ -50,20 +57,40 @@ public final class TransformAttribute implements Serializable\n \n   private AffineTransform affineTransform;\n   \n+  /**\n+   * Creates a new attribute that contains a copy of the given transform.\n+   * \n+   * @param transform  the transform (<code>null</code> not permitted).\n+   * \n+   * @throws IllegalArgumentException if <code>transform</code> is \n+   *         <code>null</code>.\n+   */\n   public TransformAttribute (AffineTransform transform) \n   {\n-    if (transform != null)\n+    if (transform == null)\n       {\n-        this.affineTransform = new AffineTransform (transform);\n+        throw new IllegalArgumentException(\"Null 'transform' not permitted.\");\n       }\n+    this.affineTransform = new AffineTransform (transform);\n   }\n \n+  /**\n+   * Returns a copy of the transform contained by this attribute.\n+   * \n+   * @return A copy of the transform.\n+   */\n   public AffineTransform getTransform ()\n   {\n-    return affineTransform;\n+    return (AffineTransform) affineTransform.clone();\n   }\n \n   /**\n+   * Returns <code>true</code> if the transform contained by this attribute is\n+   * an identity transform, and <code>false</code> otherwise.\n+   * \n+   * @return <code>true</code> if the transform contained by this attribute is\n+   * an identity transform, and <code>false</code> otherwise.\n+   * \n    * @since 1.4\n    */\n   public boolean isIdentity ()"}]}