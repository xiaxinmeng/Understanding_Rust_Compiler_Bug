{"sha": "16b53405ad2baba783cf7ecf34a623fd64db2dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiNTM0MDVhZDJiYWJhNzgzY2Y3ZWNmMzRhNjIzZmQ2NGRiMmRkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-07-13T23:10:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-13T23:10:24Z"}, "message": "re PR c++/57402 (ICE: in make_decl_rtl, at varasm.c:1147 when initializing variable-sized array)\n\n\tPR c++/57402\n\t* init.c (build_vec_init): Use {} for arrays of class type.\n\t(build_vec_delete): Don't take the address of the array.\n\nFrom-SVN: r200939", "tree": {"sha": "1dccabcb4f30ae988a32feff076c59c480009784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dccabcb4f30ae988a32feff076c59c480009784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b53405ad2baba783cf7ecf34a623fd64db2dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b53405ad2baba783cf7ecf34a623fd64db2dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b53405ad2baba783cf7ecf34a623fd64db2dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b53405ad2baba783cf7ecf34a623fd64db2dda/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26d40c3d4bd444bcd3dc2d44d1a405dfb8db07ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d40c3d4bd444bcd3dc2d44d1a405dfb8db07ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d40c3d4bd444bcd3dc2d44d1a405dfb8db07ec"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "4e4663058298dfdeb93225eb0c91ad6f0ef78991", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=16b53405ad2baba783cf7ecf34a623fd64db2dda", "patch": "@@ -1,5 +1,9 @@\n 2013-07-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/57402\n+\t* init.c (build_vec_init): Use {} for arrays of class type.\n+\t(build_vec_delete): Don't take the address of the array.\n+\n \tPR c++/57793\n \t* class.c (layout_class_type): Check for too-large class.\n "}, {"sha": "808803d6524abc33add8f47f0219933e890d8ed2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=16b53405ad2baba783cf7ecf34a623fd64db2dda", "patch": "@@ -3561,10 +3561,14 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t    vec_free (new_vec);\n \t}\n \n-      /* Clear out INIT so that we don't get confused below.  */\n-      init = NULL_TREE;\n       /* Any elements without explicit initializers get {}.  */\n-      explicit_value_init_p = true;\n+      if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n+\tinit = build_constructor (init_list_type_node, NULL);\n+      else\n+\t{\n+\t  init = NULL_TREE;\n+\t  explicit_value_init_p = true;\n+\t}\n     }\n   else if (from_array)\n     {\n@@ -3636,11 +3640,11 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  if (init != 0)\n+\t  if (init && !BRACE_ENCLOSED_INITIALIZER_P (init))\n \t    sorry\n \t      (\"cannot initialize multi-dimensional array with initializer\");\n \t  elt_init = build_vec_init (build1 (INDIRECT_REF, type, base),\n-\t\t\t\t     0, 0,\n+\t\t\t\t     0, init,\n \t\t\t\t     explicit_value_init_p,\n \t\t\t\t     0, complain);\n \t}\n@@ -4121,7 +4125,7 @@ build_vec_delete (tree base, tree maxindex,\n \t bad name.  */\n       maxindex = array_type_nelts_total (type);\n       type = strip_array_types (type);\n-      base = cp_build_addr_expr (base, complain);\n+      base = decay_conversion (base, complain);\n       if (base == error_mark_node)\n \treturn error_mark_node;\n       if (TREE_SIDE_EFFECTS (base))"}, {"sha": "e91b3a1827f895dfafbe9346f0c17e892b4e4f36", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted45.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted45.C?ref=16b53405ad2baba783cf7ecf34a623fd64db2dda", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// { dg-require-effective-target c++11 }\n+\n+struct A\n+{\n+  int i;\n+  A() = default;\n+  A(int i): i{i} { }\n+  ~A() {}\n+};\n+\n+int main(int argc, char **argv)\n+{\n+  { int i[4] = { 42, 42, 42, 42 }; }\n+  {\n+    A a[4] = { argc };\n+    if (a[1].i != 0)\n+      __builtin_abort ();\n+  }\n+}"}, {"sha": "1e93835665d1eaa44e70d1ad90d2287372a0a46c", "filename": "gcc/testsuite/g++.dg/cpp1y/vla-initlist1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b53405ad2baba783cf7ecf34a623fd64db2dda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C?ref=16b53405ad2baba783cf7ecf34a623fd64db2dda", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1y\" }\n+\n+#include <initializer_list>\n+\n+struct A\n+{\n+  int i;\n+  A(std::initializer_list<int>) { }\n+  A(int i): i{i} { }\n+  ~A() {}\n+};\n+\n+int x = 4;\n+int main(int argc, char **argv)\n+{\n+  { int i[x] = { 42, 42, 42, 42 }; }\n+  {\n+    A a[x] = { argc };\n+    if (a[1].i != 42)\n+      __builtin_abort ();\n+  }\n+}"}]}