{"sha": "701306112e8d1d108451bccd58f9ccd84ffe81c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxMzA2MTEyZThkMWQxMDg0NTFiY2NkNThmOWNjZDg0ZmZlODFjMQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-09-15T13:16:15Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-09-15T13:16:15Z"}, "message": "re PR fortran/29053 (Consecutive STREAM I/O file positions mixed up)\n\n2006-09-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/29053\n\t* io.h (gfc_unit): Add variable, strm_pos, to track\n\tSTREAM I/O file position.\n\t* file_pos.c (st_rewind): Set strm_pos to beginning.\n\t* open.c (new_unit): Initialize strm_pos.\n\t* read.c (read_x): Bump strm_pos.\n\t* inquire.c (inquire_via_unit): Return strm_pos value.\n\t* transfer.c (read_block),(read_block_direct),(write_block)\n\t(write_buf): Seek to strm_pos - 1.  Update strm_pos when done.\n\t(pre_position): Initialize strm_pos.\n\t(data_transfer_init): Set strm_pos if DT_HAS_REC.\n\t(finalize_transfer): Flush file, no need to update strm_pos.\n\nFrom-SVN: r116970", "tree": {"sha": "a336065f8c97480fad109a951d2c4da52142fd4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a336065f8c97480fad109a951d2c4da52142fd4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/701306112e8d1d108451bccd58f9ccd84ffe81c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701306112e8d1d108451bccd58f9ccd84ffe81c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701306112e8d1d108451bccd58f9ccd84ffe81c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701306112e8d1d108451bccd58f9ccd84ffe81c1/comments", "author": null, "committer": null, "parents": [{"sha": "5419bc7f3dbed760ececc639a7aff346da611c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5419bc7f3dbed760ececc639a7aff346da611c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5419bc7f3dbed760ececc639a7aff346da611c58"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "b399bbeed99d4a40716bc1eaa469f67222eb34fb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -1,3 +1,18 @@\n+2006-09-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/29053\n+\t* io.h (gfc_unit): Add variable, strm_pos, to track\n+\tSTREAM I/O file position.\n+\t* file_pos.c (st_rewind): Set strm_pos to beginning.\n+\t* open.c (new_unit): Initialize strm_pos.\n+\t* read.c (read_x): Bump strm_pos.\n+\t* inquire.c (inquire_via_unit): Return strm_pos value.\n+\t* transfer.c (read_block),(read_block_direct),(write_block)\n+\t(write_buf): Seek to strm_pos - 1.  Update strm_pos when done.\n+\t(pre_position): Initialize strm_pos.\n+\t(data_transfer_init): Set strm_pos if DT_HAS_REC.\n+\t(finalize_transfer): Flush file, no need to update strm_pos.\n+\n 2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR libfortran/28947"}, {"sha": "979dec55513b7395bbdc386a73919ea3839d56dc", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -312,6 +312,7 @@ st_rewind (st_parameter_filepos *fpp)\n \t  u->endfile = NO_ENDFILE;\n \t  u->current_record = 0;\n \t  u->bytes_left = 0;\n+\t  u->strm_pos = 1;\n \t  u->read_bad = 0;\n \t  test_endfile (u);\n \t}"}, {"sha": "36e43c29bdf76d2cca4f08e13bdd9e7d3756e252", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -149,7 +149,7 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n     *iqp->recl_out = (u != NULL) ? u->recl : 0;\n \n   if ((cf & IOPARM_INQUIRE_HAS_STRM_POS_OUT) != 0)\n-    *iqp->strm_pos_out = (u != NULL) ? u->last_record : 0;\n+    *iqp->strm_pos_out = (u != NULL) ? u->strm_pos : 0;\n \n   if ((cf & IOPARM_INQUIRE_HAS_NEXTREC) != 0)\n     *iqp->nextrec = (u != NULL) ? u->last_record + 1 : 0;"}, {"sha": "0bfc23d9e8c5e1e76d88e171570bd3314ceb86bc", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -498,8 +498,9 @@ typedef struct gfc_unit\n   /* recl           -- Record length of the file.\n      last_record    -- Last record number read or written\n      maxrec         -- Maximum record number in a direct access file\n-     bytes_left     -- Bytes left in current record.  */\n-  gfc_offset recl, last_record, maxrec, bytes_left;\n+     bytes_left     -- Bytes left in current record.\n+     strm_pos       -- Current position in file for STREAM I/O.  */\n+  gfc_offset recl, last_record, maxrec, bytes_left, strm_pos;\n \n   __gthread_mutex_t lock;\n   /* Number of threads waiting to acquire this unit's lock."}, {"sha": "c75ee1a5afa787529f4790dffd923701c6cb30e2", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -440,7 +440,7 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n     {\n       u->maxrec = max_offset;\n       u->recl = 1;\n-      u->last_record = 1;\n+      u->strm_pos = 1;\n     }\n \n   memmove (u->file, opp->file, opp->file_len);"}, {"sha": "9477425e659173320173f60ca03b67e2fbefedd0", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -853,5 +853,5 @@ read_x (st_parameter_dt *dtp, int n)\n       dtp->u.p.sf_read_comma = 1;\n     }\n   else\n-    dtp->rec += (GFC_IO_INT) n;\n+    dtp->u.p.current_unit->strm_pos += (gfc_offset) n;\n }"}, {"sha": "663a1bf008b47eca80dd07eb5d749210a96cd45f", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701306112e8d1d108451bccd58f9ccd84ffe81c1/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=701306112e8d1d108451bccd58f9ccd84ffe81c1", "patch": "@@ -318,7 +318,7 @@ read_block (st_parameter_dt *dtp, int *length)\n   else\n     {\n       if (sseek (dtp->u.p.current_unit->s,\n-\t\t (gfc_offset) (dtp->rec - 1)) == FAILURE)\n+\t\t dtp->u.p.current_unit->strm_pos - 1) == FAILURE)\n \t{\n \t  generate_error (&dtp->common, ERROR_END, NULL);\n \t  return NULL;\n@@ -341,7 +341,7 @@ read_block (st_parameter_dt *dtp, int *length)\n \t    }\n \t}\n \n-      dtp->rec += (GFC_IO_INT) nread;\n+      dtp->u.p.current_unit->strm_pos += (gfc_offset) nread;\n     }\n   return source;\n }\n@@ -400,7 +400,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n   else\n     {\n       if (sseek (dtp->u.p.current_unit->s,\n-\t  (gfc_offset) (dtp->rec - 1)) == FAILURE)\n+\t\t dtp->u.p.current_unit->strm_pos - 1) == FAILURE)\n \t{\n \t  generate_error (&dtp->common, ERROR_END, NULL);\n \t  return;\n@@ -420,7 +420,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \tdtp->u.p.size_used += (gfc_offset) nread;\n     }\n   else\n-    dtp->rec += (GFC_IO_INT) nread; \n+    dtp->u.p.current_unit->strm_pos += (gfc_offset) nread; \n \n   if (nread != *nbytes)  /* Short read, e.g. if we hit EOF.  */\n     {\n@@ -479,9 +479,9 @@ write_block (st_parameter_dt *dtp, int length)\n   else\n     {\n       if (sseek (dtp->u.p.current_unit->s,\n-\t  (gfc_offset) (dtp->rec - 1)) == FAILURE)\n+\t\t dtp->u.p.current_unit->strm_pos - 1) == FAILURE)\n \t{\n-\t  generate_error (&dtp->common, ERROR_END, NULL);\n+\t  generate_error (&dtp->common, ERROR_OS, NULL);\n \t  return NULL;\n \t}\n \n@@ -493,7 +493,7 @@ write_block (st_parameter_dt *dtp, int length)\n \t  return NULL;\n \t}\n \n-      dtp->rec += (GFC_IO_INT) length;\n+      dtp->u.p.current_unit->strm_pos += (gfc_offset) length;\n     }\n \n   return dest;\n@@ -531,7 +531,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n   else\n     {\n       if (sseek (dtp->u.p.current_unit->s,\n-\t\t (gfc_offset) (dtp->rec - 1)) == FAILURE)\n+\t\t dtp->u.p.current_unit->strm_pos - 1) == FAILURE)\n \t{\n \t  generate_error (&dtp->common, ERROR_OS, NULL);\n \t  return FAILURE;\n@@ -550,7 +550,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n \tdtp->u.p.size_used += (gfc_offset) nbytes;\n     }\n   else\n-    dtp->rec += (GFC_IO_INT) nbytes; \n+    dtp->u.p.current_unit->strm_pos += (gfc_offset) nbytes; \n \n   return SUCCESS;\n }\n@@ -1506,7 +1506,7 @@ pre_position (st_parameter_dt *dtp)\n       /* There are no records with stream I/O.  Set the default position\n \t to the beginning of the file if no position was specified.  */\n       if ((dtp->common.flags & IOPARM_DT_HAS_REC) == 0)\n-        dtp->rec = 1;\n+        dtp->u.p.current_unit->strm_pos = 1;\n       break;\n     \n     case UNFORMATTED_SEQUENTIAL:\n@@ -1766,12 +1766,18 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n \t}\n \n       /* Position the file.  */\n-      if (sseek (dtp->u.p.current_unit->s, (gfc_offset) (dtp->rec - 1)\n-\t\t  * dtp->u.p.current_unit->recl) == FAILURE)\n+      if (!is_stream_io (dtp))\n \t{\n-\t  generate_error (&dtp->common, ERROR_OS, NULL);\n-\t  return;\n+\t  if (sseek (dtp->u.p.current_unit->s, (gfc_offset) (dtp->rec - 1)\n+\t\t     * dtp->u.p.current_unit->recl) == FAILURE)\n+\t    {\n+\t      generate_error (&dtp->common, ERROR_OS, NULL);\n+\t      return;\n+\t    }\n \t}\n+      else\n+\tdtp->u.p.current_unit->strm_pos = dtp->rec;\n+\n     }\n \n   /* Overwriting an existing sequential file ?\n@@ -2367,10 +2373,7 @@ finalize_transfer (st_parameter_dt *dtp)\n       next_record (dtp, 1);\n     }\n   else\n-    {\n-      flush (dtp->u.p.current_unit->s);\n-      dtp->u.p.current_unit->last_record = dtp->rec;\n-    }\n+    flush (dtp->u.p.current_unit->s);\n \n   sfree (dtp->u.p.current_unit->s);\n }"}]}