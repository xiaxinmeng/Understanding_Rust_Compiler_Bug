{"sha": "a03670050f7aa17d56e3c2f873612343c883f980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzNjcwMDUwZjdhYTE3ZDU2ZTNjMmY4NzM2MTIzNDNjODgzZjk4MA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-02-19T11:01:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T11:01:01Z"}, "message": "sem_eval.ads, [...] (Subtypes_Statically_Match): Return False if Esize values do not match.\n\n2014-02-19  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.ads, sem_eval.adb (Subtypes_Statically_Match): Return False\n\tif Esize values do not match.\n\nFrom-SVN: r207889", "tree": {"sha": "6fceb44c65097d8c935ef1bcef41d5aa54ed7ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fceb44c65097d8c935ef1bcef41d5aa54ed7ca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03670050f7aa17d56e3c2f873612343c883f980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03670050f7aa17d56e3c2f873612343c883f980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03670050f7aa17d56e3c2f873612343c883f980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03670050f7aa17d56e3c2f873612343c883f980/comments", "author": null, "committer": null, "parents": [{"sha": "e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03f7ccf159e37e61fce037b5c0df59e047fa6b9"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "243878d9ff2116c80ecd8b89f6d9e9a248bd8112", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a03670050f7aa17d56e3c2f873612343c883f980", "patch": "@@ -1,3 +1,8 @@\n+2014-02-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.ads, sem_eval.adb (Subtypes_Statically_Match): Return False\n+\tif Esize values do not match.\n+\n 2014-02-19  Yannick Moy  <moy@adacore.com>\n \n \t* sinfo.ads: Minor comment update."}, {"sha": "c9f575e651c64b704bc15b836b5336349e3528df", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a03670050f7aa17d56e3c2f873612343c883f980", "patch": "@@ -3718,7 +3718,7 @@ This means that you can compile a program, and then without having to\n recompile the program, you can run it with different values being used\n for initializing otherwise uninitialized values, to test if your program\n behavior depends on the choice.  Of course the behavior should not change,\n-and if it does, then most likely you have an erroneous reference to an\n+and if it does, then most likely you have an incorrect reference to an\n uninitialized value.\n \n It is even possible to change the value at execution time eliminating even\n@@ -8714,6 +8714,45 @@ alignment will be 4, because of the\n integer field, and so the default size of record objects for this type\n will be 64 (8 bytes).\n \n+A consequence of this capability is that different object sizes can be\n+given to subtypes that would otherwise be considered in Ada to be\n+statically matching.  But it makes no sense to consider such subtypes\n+as statically matching.  Consequently, in @code{GNAT} we add a rule\n+to the static matching rules that requires object sizes to match.\n+Consider this example:\n+\n+@smallexample @c ada\n+ 1. procedure BadAVConvert is\n+ 2.    type R is new Integer;\n+ 3.    subtype R1 is R range 1 .. 10;\n+ 4.    subtype R2 is R range 1 .. 10;\n+ 5.    for R1'Object_Size use 8;\n+ 6.    for R2'Object_Size use 16;\n+ 7.    type R1P is access all R1;\n+ 8.    type R2P is access all R2;\n+ 9.    R1PV : R1P := new R1'(4);\n+10.    R2PV : R2P;\n+11. begin\n+12.    R2PV := R2P (R1PV);\n+               |\n+       >>> target designated subtype not compatible with\n+           type \"R1\" defined at line 3\n+\n+13. end;\n+@end smallexample\n+\n+@noindent\n+In the absence of lines 5 and 6,\n+types @code{R1} and @code{R2} statically match and\n+hence the conversion on line 12 is legal. But since lines 5 and 6\n+cause the object sizes to differ, @code{GNAT} considers that types\n+@code{R1} and @code{R2} are not statically matching, and line 12\n+generates the diagnostic shown above.\n+\n+@noindent\n+Similar additional checks are performed in other contexts requiring\n+statically matching subtypes.\n+\n @node Attribute Passed_By_Reference\n @unnumberedsec Attribute Passed_By_Reference\n @cindex Parameters, when passed by reference\n@@ -14185,7 +14224,9 @@ an attribute definition clause.  Note that the use of these attributes\n can cause the RM 13.1(14) rule to be violated.  If two access types\n reference aliased objects whose subtypes have differing @code{Object_Size}\n values as a result of explicit attribute definition clauses, then it\n-is erroneous to convert from one access subtype to the other.\n+is illegal to convert from one access subtype to the other. For a more\n+complete description of this additional legality rule, see the\n+description of the @code{Object_Size} attribute.\n \n At the implementation level, Esize stores the Object_Size and the\n RM_Size field stores the @code{Value_Size} (and hence the value of the"}, {"sha": "629ce45dcba24ede0b56b9b10289d81f66ab9665", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=a03670050f7aa17d56e3c2f873612343c883f980", "patch": "@@ -4834,6 +4834,10 @@ package body Sem_Eval is\n    --  they are the same identical constraint, or if they are static and the\n    --  values match (RM 4.9.1(1)).\n \n+   --  In addition, in GNAT, the object size (Esize) values of the types must\n+   --  match if they are set. The use of 'Object_Size can cause this to be\n+   --  false even if the types would otherwise match in the RM sense.\n+\n    function Subtypes_Statically_Match (T1, T2 : Entity_Id) return Boolean is\n \n       function Predicates_Match return Boolean;\n@@ -4852,9 +4856,13 @@ package body Sem_Eval is\n          if Ada_Version < Ada_2012 then\n             return True;\n \n+         --  Both types must have predicates or lack them\n+\n          elsif Has_Predicates (T1) /= Has_Predicates (T2) then\n             return False;\n \n+         --  Check matching predicates\n+\n          else\n             Pred1 :=\n               Get_Rep_Item\n@@ -4886,6 +4894,13 @@ package body Sem_Eval is\n       if T1 = T2 then\n          return True;\n \n+      --  No match if sizes different (from use of 'Object_Size)\n+\n+      elsif Known_Static_Esize (T1) and then Known_Static_Esize (T2)\n+        and then Esize (T1) /= Esize (T2)\n+      then\n+         return False;\n+\n       --  Scalar types\n \n       elsif Is_Scalar_Type (T1) then"}, {"sha": "312fac13cf7345a5092263b91f5cdda8df827814", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03670050f7aa17d56e3c2f873612343c883f980/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=a03670050f7aa17d56e3c2f873612343c883f980", "patch": "@@ -222,7 +222,9 @@ package Sem_Eval is\n \n    function Subtypes_Statically_Match (T1, T2 : Entity_Id) return Boolean;\n    --  Determine whether two types T1, T2, which have the same base type,\n-   --  are statically matching subtypes (RM 4.9.1(1-2)).\n+   --  are statically matching subtypes (RM 4.9.1(1-2)). Also includes the\n+   --  extra GNAT rule that object sizes must match (this can be false for\n+   --  types that match in the RM sense because of use of 'Object_Size).\n \n    function Compile_Time_Known_Value (Op : Node_Id) return Boolean;\n    --  Returns true if Op is an expression not raising Constraint_Error whose"}]}