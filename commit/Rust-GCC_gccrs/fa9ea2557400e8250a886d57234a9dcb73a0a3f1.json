{"sha": "fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5ZWEyNTU3NDAwZTgyNTBhODg2ZDU3MjM0YTlkY2I3M2EwYTNmMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-27T19:42:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-27T19:42:24Z"}, "message": "combine.c (force_to_mode): Replace the equality comparison of INTVALs with a pointer equality comparison.\n\n\t* combine.c (force_to_mode): Replace the equality comparison\n\tof INTVALs with a pointer equality comparison.\n\t(simplify_comparison): Likewise.\n\nFrom-SVN: r68603", "tree": {"sha": "3f85a42bfad26bc633cf8012895197833f21ab4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f85a42bfad26bc633cf8012895197833f21ab4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9ea2557400e8250a886d57234a9dcb73a0a3f1/comments", "author": null, "committer": null, "parents": [{"sha": "47c7b4d250323f816bc67b65bfc54730c2928781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c7b4d250323f816bc67b65bfc54730c2928781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c7b4d250323f816bc67b65bfc54730c2928781"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "240105dcba1887d177bb154c776780185f392a61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9ea2557400e8250a886d57234a9dcb73a0a3f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9ea2557400e8250a886d57234a9dcb73a0a3f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "patch": "@@ -1,3 +1,9 @@\n+2003-06-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (force_to_mode): Replace the equality comparison\n+\tof INTVALs with a pointer equality comparison.\n+\t(simplify_comparison): Likewise.\n+\n 2003-06-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* jump.c (rtx_renumbered_equal_p): Replace an expression that"}, {"sha": "7b8fc9c8eb38176b6f1e1aeb2a2659028db765c5", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9ea2557400e8250a886d57234a9dcb73a0a3f1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9ea2557400e8250a886d57234a9dcb73a0a3f1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fa9ea2557400e8250a886d57234a9dcb73a0a3f1", "patch": "@@ -7223,8 +7223,7 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t  && (INTVAL (XEXP (x, 1))\n \t      <= GET_MODE_BITSIZE (GET_MODE (x)) - (floor_log2 (mask) + 1))\n \t  && GET_CODE (XEXP (x, 0)) == ASHIFT\n-\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t  && INTVAL (XEXP (XEXP (x, 0), 1)) == INTVAL (XEXP (x, 1)))\n+\t  && XEXP (XEXP (x, 0), 1) == XEXP (x, 1))\n \treturn force_to_mode (XEXP (XEXP (x, 0), 0), mode, mask,\n \t\t\t      reg, next_select);\n \n@@ -10248,12 +10247,9 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  && (GET_MODE (SUBREG_REG (XEXP (XEXP (op0, 0), 0)))\n \t      == GET_MODE (SUBREG_REG (XEXP (XEXP (op1, 0), 0))))\n \t  && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t  && GET_CODE (XEXP (op1, 1)) == CONST_INT\n-\t  && GET_CODE (XEXP (XEXP (op0, 0), 1)) == CONST_INT\n-\t  && GET_CODE (XEXP (XEXP (op1, 0), 1)) == CONST_INT\n-\t  && INTVAL (XEXP (op0, 1)) == INTVAL (XEXP (op1, 1))\n-\t  && INTVAL (XEXP (op0, 1)) == INTVAL (XEXP (XEXP (op0, 0), 1))\n-\t  && INTVAL (XEXP (op0, 1)) == INTVAL (XEXP (XEXP (op1, 0), 1))\n+\t  && XEXP (op0, 1) == XEXP (op1, 1)\n+\t  && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)\n+\t  && XEXP (op0, 1) == XEXP (XEXP (op1, 0), 1)\n \t  && (INTVAL (XEXP (op0, 1))\n \t      == (GET_MODE_BITSIZE (GET_MODE (op0))\n \t\t  - (GET_MODE_BITSIZE"}]}