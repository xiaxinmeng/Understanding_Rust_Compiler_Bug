{"sha": "1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0M2I5Njc3M2I4MjExN2UzYTE5NDY0N2E5ZTJjYzNkOGEzYTZlMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-11-13T02:55:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-11-13T02:55:22Z"}, "message": "fold-const.c (negate_expr_p): Correct/refine condition for transformations.\n\n\n\t* fold-const.c (negate_expr_p) <PLUS_EXPR, MINUS_EXPR>: Correct/refine\n\tcondition for transformations.  Use !HONOR_SIGN_DEPENDENT_ROUNDING\n\t&& !HONOR_SIGNED_ZEROS instead of flag_unsafe_math_optimizations.\n\t(fold_negate_expr) <PLUS_EXPR, MINUS_EXPR>: Likewise.\n\nFrom-SVN: r118744", "tree": {"sha": "80381e45a819a560f58f1e183ef834d27176ae95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80381e45a819a560f58f1e183ef834d27176ae95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0/comments", "author": null, "committer": null, "parents": [{"sha": "163b8581869310a93a40d44711095674ba76ca77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163b8581869310a93a40d44711095674ba76ca77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163b8581869310a93a40d44711095674ba76ca77"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "2704ad3afc19b946ab6d200e738527e01aa8f628", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "patch": "@@ -1,3 +1,10 @@\n+2006-11-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (negate_expr_p) <PLUS_EXPR, MINUS_EXPR>: Correct/refine\n+\tcondition for transformations.  Use !HONOR_SIGN_DEPENDENT_ROUNDING\n+\t&& !HONOR_SIGNED_ZEROS instead of flag_unsafe_math_optimizations.\n+\t(fold_negate_expr) <PLUS_EXPR, MINUS_EXPR>: Likewise.\n+\n 2006-11-12  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/29587"}, {"sha": "c986503f10680dfd9c6720181496e41f5d2b661e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b43b96773b82117e3a194647a9e2cc3d8a3a6e0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1b43b96773b82117e3a194647a9e2cc3d8a3a6e0", "patch": "@@ -981,7 +981,8 @@ negate_expr_p (tree t)\n \t     && negate_expr_p (TREE_IMAGPART (t));\n \n     case PLUS_EXPR:\n-      if (FLOAT_TYPE_P (type) && !flag_unsafe_math_optimizations)\n+      if (HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (type))\n+\t  || HONOR_SIGNED_ZEROS (TYPE_MODE (type)))\n \treturn false;\n       /* -(A + B) -> (-B) - A.  */\n       if (negate_expr_p (TREE_OPERAND (t, 1))\n@@ -993,7 +994,8 @@ negate_expr_p (tree t)\n \n     case MINUS_EXPR:\n       /* We can't turn -(A-B) into B-A when we honor signed zeros.  */\n-      return (! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n+      return !HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (type))\n+\t     && !HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n \t     && reorder_operands_p (TREE_OPERAND (t, 0),\n \t\t\t\t    TREE_OPERAND (t, 1));\n \n@@ -1105,7 +1107,8 @@ fold_negate_expr (tree t)\n       return TREE_OPERAND (t, 0);\n \n     case PLUS_EXPR:\n-      if (! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n+      if (!HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (type))\n+\t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (type)))\n \t{\n \t  /* -(A + B) -> (-B) - A.  */\n \t  if (negate_expr_p (TREE_OPERAND (t, 1))\n@@ -1129,7 +1132,8 @@ fold_negate_expr (tree t)\n \n     case MINUS_EXPR:\n       /* - (A - B) -> B - A  */\n-      if ((! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n+      if (!HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (type))\n+\t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n \t  && reorder_operands_p (TREE_OPERAND (t, 0), TREE_OPERAND (t, 1)))\n \treturn fold_build2 (MINUS_EXPR, type,\n \t\t\t    TREE_OPERAND (t, 1), TREE_OPERAND (t, 0));"}]}