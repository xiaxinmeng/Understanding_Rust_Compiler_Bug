{"sha": "6f929985791a50401c5e53b90d6fffc54caab43a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5Mjk5ODU3OTFhNTA0MDFjNWU1M2I5MGQ2ZmZmYzU0Y2FhYjQzYQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2015-07-02T04:32:05Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2015-07-02T04:32:05Z"}, "message": "tree-ssa-loop-ivopts.c (struct ivopts_data): New field iv_obstack.\n\n\n\t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field iv_obstack.\n\t(tree_ssa_iv_optimize_init): Initialize iv_obstack.\n\t(alloc_iv): New parameter.  Allocate struct iv using obstack_alloc.\n\t(set_iv, find_interesting_uses_address, add_candidate_1): New\n\targument to alloc_iv.\n\t(find_interesting_uses_op, find_interesting_uses_cond): Don't\n\tduplicate struct iv.\n\t(free_loop_data): Don't free struct iv explicitly.\n\t(tree_ssa_iv_optimize_finalize): Free iv_obstack.\n\nFrom-SVN: r225293", "tree": {"sha": "041c998c5638f4f4169a7e50bcb93f120e5fbde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041c998c5638f4f4169a7e50bcb93f120e5fbde7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f929985791a50401c5e53b90d6fffc54caab43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f929985791a50401c5e53b90d6fffc54caab43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f929985791a50401c5e53b90d6fffc54caab43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f929985791a50401c5e53b90d6fffc54caab43a/comments", "author": null, "committer": null, "parents": [{"sha": "305ebd10fd6da29c2e064f03bae7098549eeb453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305ebd10fd6da29c2e064f03bae7098549eeb453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305ebd10fd6da29c2e064f03bae7098549eeb453"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "c9c3c209d92c55b1e96204a29204d942b7792232", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f929985791a50401c5e53b90d6fffc54caab43a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f929985791a50401c5e53b90d6fffc54caab43a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f929985791a50401c5e53b90d6fffc54caab43a", "patch": "@@ -1,3 +1,15 @@\n+2015-07-02  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field iv_obstack.\n+\t(tree_ssa_iv_optimize_init): Initialize iv_obstack.\n+\t(alloc_iv): New parameter.  Allocate struct iv using obstack_alloc.\n+\t(set_iv, find_interesting_uses_address, add_candidate_1): New\n+\targument to alloc_iv.\n+\t(find_interesting_uses_op, find_interesting_uses_cond): Don't\n+\tduplicate struct iv.\n+\t(free_loop_data): Don't free struct iv explicitly.\n+\t(tree_ssa_iv_optimize_finalize): Free iv_obstack.\n+\n 2015-07-01  DJ Delorie  <dj@redhat.com>\n \n \t* config/s390/tpf.h (LIBSTDCXX): Change to CPP1."}, {"sha": "a35ddabb2755250d5e8d4ebc4cfe8da44071777f", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f929985791a50401c5e53b90d6fffc54caab43a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f929985791a50401c5e53b90d6fffc54caab43a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=6f929985791a50401c5e53b90d6fffc54caab43a", "patch": "@@ -348,6 +348,9 @@ struct ivopts_data\n   /* The maximum invariant id.  */\n   unsigned max_inv_id;\n \n+  /* Obstack for iv structure.  */\n+  struct obstack iv_obstack;\n+\n   /* Whether to consider just related and important candidates when replacing a\n      use.  */\n   bool consider_all_candidates;\n@@ -908,6 +911,7 @@ tree_ssa_iv_optimize_init (struct ivopts_data *data)\n   data->inv_expr_id = 0;\n   data->name_expansion_cache = NULL;\n   decl_rtl_to_reset.create (20);\n+  gcc_obstack_init (&data->iv_obstack);\n }\n \n /* Returns a memory object to that EXPR points.  In case we are able to\n@@ -991,10 +995,12 @@ contain_complex_addr_expr (tree expr)\n    for loop LOOP.  NO_OVERFLOW implies the iv doesn't overflow.  */\n \n static struct iv *\n-alloc_iv (tree base, tree step, bool no_overflow = false)\n+alloc_iv (struct ivopts_data *data, tree base, tree step,\n+\t  bool no_overflow = false)\n {\n   tree expr = base;\n-  struct iv *iv = XCNEW (struct iv);\n+  struct iv *iv = (struct iv*) obstack_alloc (&data->iv_obstack,\n+\t\t\t\t\t      sizeof (struct iv));\n   gcc_assert (step != NULL_TREE);\n \n   /* Lower address expression in base except ones with DECL_P as operand.\n@@ -1035,7 +1041,7 @@ set_iv (struct ivopts_data *data, tree iv, tree base, tree step,\n   gcc_assert (!info->iv);\n \n   bitmap_set_bit (data->relevant, SSA_NAME_VERSION (iv));\n-  info->iv = alloc_iv (base, step, no_overflow);\n+  info->iv = alloc_iv (data, base, step, no_overflow);\n   info->iv->ssa_name = iv;\n }\n \n@@ -1422,7 +1428,6 @@ static struct iv_use *\n find_interesting_uses_op (struct ivopts_data *data, tree op)\n {\n   struct iv *iv;\n-  struct iv *civ;\n   gimple stmt;\n   struct iv_use *use;\n \n@@ -1448,14 +1453,11 @@ find_interesting_uses_op (struct ivopts_data *data, tree op)\n     }\n   iv->have_use_for = true;\n \n-  civ = XNEW (struct iv);\n-  *civ = *iv;\n-\n   stmt = SSA_NAME_DEF_STMT (op);\n   gcc_assert (gimple_code (stmt) == GIMPLE_PHI\n \t      || is_gimple_assign (stmt));\n \n-  use = record_use (data, NULL, civ, stmt, USE_NONLINEAR_EXPR);\n+  use = record_use (data, NULL, iv, stmt, USE_NONLINEAR_EXPR);\n   iv->use_id = use->id;\n \n   return use;\n@@ -1534,7 +1536,7 @@ static void\n find_interesting_uses_cond (struct ivopts_data *data, gimple stmt)\n {\n   tree *var_p, *bound_p;\n-  struct iv *var_iv, *civ;\n+  struct iv *var_iv;\n \n   if (!extract_cond_operands (data, stmt, &var_p, &bound_p, &var_iv, NULL))\n     {\n@@ -1543,9 +1545,7 @@ find_interesting_uses_cond (struct ivopts_data *data, gimple stmt)\n       return;\n     }\n \n-  civ = XNEW (struct iv);\n-  *civ = *var_iv;\n-  record_use (data, NULL, civ, stmt, USE_COMPARE);\n+  record_use (data, NULL, var_iv, stmt, USE_COMPARE);\n }\n \n /* Returns the outermost loop EXPR is obviously invariant in\n@@ -2030,7 +2030,7 @@ find_interesting_uses_address (struct ivopts_data *data, gimple stmt, tree *op_p\n \t}\n     }\n \n-  civ = alloc_iv (base, step);\n+  civ = alloc_iv (data, base, step);\n   record_group_use (data, op_p, civ, stmt, USE_ADDRESS);\n   return;\n \n@@ -2673,7 +2673,7 @@ add_candidate_1 (struct ivopts_data *data,\n       if (!base && !step)\n \tcand->iv = NULL;\n       else\n-\tcand->iv = alloc_iv (base, step);\n+\tcand->iv = alloc_iv (data, base, step);\n \n       cand->pos = pos;\n       if (pos != IP_ORIGINAL && cand->iv)\n@@ -7180,7 +7180,6 @@ free_loop_data (struct ivopts_data *data)\n       struct version_info *info;\n \n       info = ver_info (data, i);\n-      free (info->iv);\n       info->iv = NULL;\n       info->has_nonlin_use = false;\n       info->preserve_biv = false;\n@@ -7199,13 +7198,11 @@ free_loop_data (struct ivopts_data *data)\n \t  gcc_assert (sub->related_cands == NULL);\n \t  gcc_assert (sub->n_map_members == 0 && sub->cost_map == NULL);\n \n-\t  free (sub->iv);\n \t  pre = sub;\n \t  sub = sub->next;\n \t  free (pre);\n \t}\n \n-      free (use->iv);\n       BITMAP_FREE (use->related_cands);\n       for (j = 0; j < use->n_map_members; j++)\n \tif (use->cost_map[j].depends_on)\n@@ -7219,7 +7216,6 @@ free_loop_data (struct ivopts_data *data)\n     {\n       struct iv_cand *cand = iv_cand (data, i);\n \n-      free (cand->iv);\n       if (cand->depends_on)\n \tBITMAP_FREE (cand->depends_on);\n       free (cand);\n@@ -7261,6 +7257,7 @@ tree_ssa_iv_optimize_finalize (struct ivopts_data *data)\n   delete data->inv_expr_tab;\n   data->inv_expr_tab = NULL;\n   free_affine_expand_cache (&data->name_expansion_cache);\n+  obstack_free (&data->iv_obstack, NULL);\n }\n \n /* Returns true if the loop body BODY includes any function calls.  */"}]}