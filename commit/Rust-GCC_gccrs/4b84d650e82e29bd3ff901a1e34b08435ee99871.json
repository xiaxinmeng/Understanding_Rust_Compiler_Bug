{"sha": "4b84d650e82e29bd3ff901a1e34b08435ee99871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4NGQ2NTBlODJlMjliZDNmZjkwMWExZTM0YjA4NDM1ZWU5OTg3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-12T06:19:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-12T06:19:58Z"}, "message": "opts.c: Include diagnostic-color.h.\n\n\t* opts.c: Include diagnostic-color.h.\n\t(common_handle_option): Handle OPT_fdiagnostics_color_.\n\t* Makefile.in (OBJS-libcommon): Add diagnostic-color.o.\n\t(diagnostic.o, opts.o, pretty-print.o): Depend on diagnostic-color.h.\n\t(diagnostic-color.o): New.\n\t* common.opt (fdiagnostics-color, fdiagnostics-color=): New options.\n\t(diagnostic_color_rule): New enum.\n\t* dwarf2out.c (gen_producer_string): Don't print -fdiagnostics-color*.\n\t* langhooks.c (lhd_print_error_function): Add %r \"locus\" and %R around\n\tthe location string.\n\t* diagnostic.def: Add 3rd argument to DEFINE_DIAGNOSTIC_KIND macros,\n\teither NULL, or color kind.\n\t* diagnostic-color.c: New file.\n\t* diagnostic-color.h: New file.\n\t* diagnostic-core.h (DEFINE_DIAGNOSTIC_KIND): Adjust macro for 3\n\targuments.\n\t* doc/invoke.texi (-fdiagnostics-color): Document.\n\t* pretty-print.h (pp_show_color): Define.\n\t(struct pretty_print_info): Add show_color field.\n\t* diagnostic.c: Include diagnostic-color.h.\n\t(diagnostic_build_prefix): Adjust for 3 argument DEFINE_DIAGNOSTIC_KIND\n\tmacros.  Colorize error:, warning: etc. strings and also the location\n\tstring.\n\t(diagnostic_show_locus): Colorize the caret line.\n\t* pretty-print.c: Include diagnostic-color.h.\n\t(pp_base_format): Handle %r and %R format specifiers.  Colorize strings\n\tinside of %< %> quotes or quoted through q format modifier.\nc-family/\n\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n\tgcc_cdiag_char_table, gcc_cxxdiag_char_table): Add %r and %R format\n\tspecifiers.\ncp/\n\t* error.c (cp_print_error_function,\n\tprint_instantiation_partial_context_line,\n\tmaybe_print_constexpr_context): Colorize locus strings.\n\nFrom-SVN: r197841", "tree": {"sha": "6c0949bd9c81eb35e9a104c1b13c71602bef3a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c0949bd9c81eb35e9a104c1b13c71602bef3a0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b84d650e82e29bd3ff901a1e34b08435ee99871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b84d650e82e29bd3ff901a1e34b08435ee99871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b84d650e82e29bd3ff901a1e34b08435ee99871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b84d650e82e29bd3ff901a1e34b08435ee99871/comments", "author": null, "committer": null, "parents": [{"sha": "067a1e719b28b7a62d0a4c4a0732938fe45a812b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067a1e719b28b7a62d0a4c4a0732938fe45a812b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067a1e719b28b7a62d0a4c4a0732938fe45a812b"}], "stats": {"total": 341, "additions": 280, "deletions": 61}, "files": [{"sha": "9cc89e5dcdad810c3a877e42f22eb32bbee03786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -1,3 +1,34 @@\n+2013-04-12  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* opts.c: Include diagnostic-color.h.\n+\t(common_handle_option): Handle OPT_fdiagnostics_color_.\n+\t* Makefile.in (OBJS-libcommon): Add diagnostic-color.o.\n+\t(diagnostic.o, opts.o, pretty-print.o): Depend on diagnostic-color.h.\n+\t(diagnostic-color.o): New.\n+\t* common.opt (fdiagnostics-color, fdiagnostics-color=): New options.\n+\t(diagnostic_color_rule): New enum.\n+\t* dwarf2out.c (gen_producer_string): Don't print -fdiagnostics-color*.\n+\t* langhooks.c (lhd_print_error_function): Add %r \"locus\" and %R around\n+\tthe location string.\n+\t* diagnostic.def: Add 3rd argument to DEFINE_DIAGNOSTIC_KIND macros,\n+\teither NULL, or color kind.\n+\t* diagnostic-color.c: New file.\n+\t* diagnostic-color.h: New file.\n+\t* diagnostic-core.h (DEFINE_DIAGNOSTIC_KIND): Adjust macro for 3\n+\targuments.\n+\t* doc/invoke.texi (-fdiagnostics-color): Document.\n+\t* pretty-print.h (pp_show_color): Define.\n+\t(struct pretty_print_info): Add show_color field.\n+\t* diagnostic.c: Include diagnostic-color.h.\n+\t(diagnostic_build_prefix): Adjust for 3 argument DEFINE_DIAGNOSTIC_KIND\n+\tmacros.  Colorize error:, warning: etc. strings and also the location\n+\tstring.\n+\t(diagnostic_show_locus): Colorize the caret line.\n+\t* pretty-print.c: Include diagnostic-color.h.\n+\t(pp_base_format): Handle %r and %R format specifiers.  Colorize strings\n+\tinside of %< %> quotes or quoted through q format modifier.\n+\n 2013-04-12  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* ifcvt.c (end_ifcvt_sequence): Mark a and b for unsharing as"}, {"sha": "109f8654a0e31df40bac3c057b9ab5ecfd61a9e4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -1465,7 +1465,7 @@ OBJS = \\\n \n # Objects in libcommon.a, potentially used by all host binaries and with\n # no target dependencies.\n-OBJS-libcommon = diagnostic.o pretty-print.o intl.o input.o version.o\n+OBJS-libcommon = diagnostic.o diagnostic-color.o pretty-print.o intl.o input.o version.o\n \n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code.\n@@ -2668,11 +2668,12 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(DEMANGLE_H) $(INPUT_H) intl.h $(BACKTRACE_H) $(DIAGNOSTIC_H) \\\n-   diagnostic.def\n+   diagnostic.def diagnostic-color.h\n+diagnostic-color.o : diagnostic-color.c $(CONFIG_H) $(SYSTEM_H) diagnostic-color.h\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) $(TM_H) \\\n    $(DIAGNOSTIC_H) insn-attr-common.h intl.h $(COMMON_TARGET_H) \\\n-   $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n+   $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h diagnostic-color.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TREE_H) langhooks.h \\\n    $(TM_H) $(RTL_H) $(DBGCNT_H) debug.h $(LTO_STREAMER_H) output.h \\\n@@ -3434,7 +3435,8 @@ params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(COMMON_TARGET_H) \\\n    $(PARAMS_H) $(DIAGNOSTIC_CORE_H)\n pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n-pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H)\n+pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H) \\\n+   diagnostic-color.h\n errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n dbgcnt.o: dbgcnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n     $(DIAGNOSTIC_CORE_H) $(DBGCNT_H)"}, {"sha": "96cf7bd1de0aa575048bf44be34935e2310f7361", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -1,3 +1,9 @@\n+2013-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n+\tgcc_cdiag_char_table, gcc_cxxdiag_char_table): Add %r and %R format\n+\tspecifiers.\n+\n 2013-04-07  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-pragma.c (add_to_renaming_pragma_list): Fix leading comment."}, {"sha": "c11d93aa89d96c012a471606a53f156e868a03f8", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -654,9 +654,10 @@ static const format_char_info gcc_diag_char_table[] =\n   /* Custom conversion specifiers.  */\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"K\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",    \"\",   NULL },\n+  { \"K\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",    \"\",   NULL },\n \n-  { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n+  { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n@@ -676,9 +677,10 @@ static const format_char_info gcc_tdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"DFKTEV\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n-  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n+  { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n-  { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n+  { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n@@ -698,9 +700,10 @@ static const format_char_info gcc_cdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"DEFKTV\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n-  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n+  { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n-  { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n+  { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n@@ -725,7 +728,8 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n-  { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+  { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n+  { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };"}, {"sha": "f0cb9e8075e222565f49ddb937e08326218357ea", "filename": "gcc/common.opt", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -1028,6 +1028,30 @@ fdiagnostics-show-caret\n Common Var(flag_diagnostics_show_caret) Init(1)\n Show the source line with a caret indicating the column\n \n+fdiagnostics-color\n+Common Alias(fdiagnostics-color=,always,never)\n+;\n+\n+fdiagnostics-color=\n+Common Joined RejectNegative Enum(diagnostic_color_rule)\n+-fdiagnostics-color=[never|always|auto]\tColorize diagnostics\n+\n+; Required for these enum values.\n+SourceInclude\n+diagnostic-color.h\n+\n+Enum\n+Name(diagnostic_color_rule) Type(int)\n+\n+EnumValue\n+Enum(diagnostic_color_rule) String(never) Value(DIAGNOSTICS_COLOR_NO)\n+\n+EnumValue\n+Enum(diagnostic_color_rule) String(always) Value(DIAGNOSTICS_COLOR_YES)\n+\n+EnumValue\n+Enum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)\n+\n fdiagnostics-show-option\n Common Var(flag_diagnostics_show_option) Init(1)\n Amend appropriate diagnostic messages with the command line option that controls them"}, {"sha": "623760776b5599c159c840799f520aa149471021", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -1,3 +1,9 @@\n+2013-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* error.c (cp_print_error_function,\n+\tprint_instantiation_partial_context_line,\n+\tmaybe_print_constexpr_context): Colorize locus strings.\n+\n 2013-04-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52748"}, {"sha": "300fe0c1ffccf09bc1634277f8a2b1808286aa2e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -3022,14 +3022,14 @@ cp_print_error_function (diagnostic_context *context,\n \t\t    {\n \t\t      if (context->show_column && s.column != 0)\n \t\t\tpp_printf (context->printer,\n-\t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n+\t\t\t\t   _(\"    inlined from %qs at %r%s:%d:%d%R\"),\n \t\t\t\t   cxx_printable_name_translate (fndecl, 2),\n-\t\t\t\t   s.file, s.line, s.column);\n+\t\t\t\t   \"locus\", s.file, s.line, s.column);\n \t\t      else\n \t\t\tpp_printf (context->printer,\n-\t\t\t\t   _(\"    inlined from %qs at %s:%d\"),\n+\t\t\t\t   _(\"    inlined from %qs at %r%s:%d%R\"),\n \t\t\t\t   cxx_printable_name_translate (fndecl, 2),\n-\t\t\t\t   s.file, s.line);\n+\t\t\t\t   \"locus\", s.file, s.line);\n \n \t\t    }\n \t\t  else\n@@ -3111,11 +3111,11 @@ print_instantiation_partial_context_line (diagnostic_context *context,\n   xloc = expand_location (loc);\n \n   if (context->show_column)\n-    pp_verbatim (context->printer, _(\"%s:%d:%d:   \"),\n-\t\t xloc.file, xloc.line, xloc.column);\n+    pp_verbatim (context->printer, _(\"%r%s:%d:%d:%R   \"),\n+\t\t \"locus\", xloc.file, xloc.line, xloc.column);\n   else\n-    pp_verbatim (context->printer, _(\"%s:%d:   \"),\n-\t\t xloc.file, xloc.line);\n+    pp_verbatim (context->printer, _(\"%r%s:%d:%R   \"),\n+\t\t \"locus\", xloc.file, xloc.line);\n \n   if (t != NULL)\n     {\n@@ -3189,14 +3189,16 @@ print_instantiation_partial_context (diagnostic_context *context,\n \t  xloc = expand_location (loc);\n \t  if (context->show_column)\n \t    pp_verbatim (context->printer,\n-\t\t\t _(\"%s:%d:%d:   [ skipping %d instantiation contexts, \"\n-\t\t\t   \"use -ftemplate-backtrace-limit=0 to disable ]\\n\"),\n-\t\t\t xloc.file, xloc.line, xloc.column, skip);\n+\t\t\t _(\"%r%s:%d:%d:%R   [ skipping %d instantiation \"\n+\t\t\t   \"contexts, use -ftemplate-backtrace-limit=0 to \"\n+\t\t\t   \"disable ]\\n\"),\n+\t\t\t \"locus\", xloc.file, xloc.line, xloc.column, skip);\n \t  else\n \t    pp_verbatim (context->printer,\n-\t\t\t _(\"%s:%d:   [ skipping %d instantiation contexts, \"\n-\t\t\t   \"use -ftemplate-backtrace-limit=0 to disable ]\\n\"),\n-\t\t\t xloc.file, xloc.line, skip);\n+\t\t\t _(\"%r%s:%d:%R   [ skipping %d instantiation \"\n+\t\t\t   \"contexts, use -ftemplate-backtrace-limit=0 to \"\n+\t\t\t   \"disable ]\\n\"),\n+\t\t\t \"locus\", xloc.file, xloc.line, skip);\n \t  \n \t  do {\n \t    loc = t->locus;\n@@ -3258,12 +3260,12 @@ maybe_print_constexpr_context (diagnostic_context *context)\n       const char *s = expr_as_string (t, 0);\n       if (context->show_column)\n \tpp_verbatim (context->printer,\n-\t\t     _(\"%s:%d:%d:   in constexpr expansion of %qs\"),\n-\t\t     xloc.file, xloc.line, xloc.column, s);\n+\t\t     _(\"%r%s:%d:%d:%R   in constexpr expansion of %qs\"),\n+\t\t     \"locus\", xloc.file, xloc.line, xloc.column, s);\n       else\n \tpp_verbatim (context->printer,\n-\t\t     _(\"%s:%d:   in constexpr expansion of %qs\"),\n-\t\t     xloc.file, xloc.line, s);\n+\t\t     _(\"%r%s:%d:%R   in constexpr expansion of %qs\"),\n+\t\t     \"locus\", xloc.file, xloc.line, s);\n       pp_base_newline (context->printer);\n     }\n }"}, {"sha": "a2107820e6e044248d097959f14388b14bbdd8f5", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Constants used to discriminate diagnostics.  */\n typedef enum\n {\n-#define DEFINE_DIAGNOSTIC_KIND(K, msgid) K,\n+#define DEFINE_DIAGNOSTIC_KIND(K, msgid, C) K,\n #include \"diagnostic.def\"\n #undef DEFINE_DIAGNOSTIC_KIND\n   DK_LAST_DIAGNOSTIC_KIND,"}, {"sha": "e454cf31af2c33b581f2cbdbc3391344ad9067b2", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"backtrace.h\"\n #include \"diagnostic.h\"\n+#include \"diagnostic-color.h\"\n \n #define pedantic_warning_kind(DC)\t\t\t\\\n   ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n@@ -53,7 +54,6 @@ const char *progname;\n /* A diagnostic_context surrogate for stderr.  */\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n-\n \f\n /* Return a malloc'd string containing MSG formatted a la printf.  The\n    caller is responsible for freeing the memory.  */\n@@ -210,23 +210,45 @@ diagnostic_build_prefix (diagnostic_context *context,\n \t\t\t const diagnostic_info *diagnostic)\n {\n   static const char *const diagnostic_kind_text[] = {\n-#define DEFINE_DIAGNOSTIC_KIND(K, T) (T),\n+#define DEFINE_DIAGNOSTIC_KIND(K, T, C) (T),\n #include \"diagnostic.def\"\n #undef DEFINE_DIAGNOSTIC_KIND\n     \"must-not-happen\"\n   };\n+  static const char *const diagnostic_kind_color[] = {\n+#define DEFINE_DIAGNOSTIC_KIND(K, T, C) (C),\n+#include \"diagnostic.def\"\n+#undef DEFINE_DIAGNOSTIC_KIND\n+    NULL\n+  };\n   const char *text = _(diagnostic_kind_text[diagnostic->kind]);\n+  const char *text_cs = \"\", *text_ce = \"\";\n+  const char *locus_cs, *locus_ce;\n+  pretty_printer *pp = context->printer;\n+\n+  if (diagnostic_kind_color[diagnostic->kind])\n+    {\n+      text_cs = colorize_start (pp_show_color (pp),\n+\t\t\t\tdiagnostic_kind_color[diagnostic->kind]);\n+      text_ce = colorize_stop (pp_show_color (pp));\n+    }\n+  locus_cs = colorize_start (pp_show_color (pp), \"locus\");\n+  locus_ce = colorize_stop (pp_show_color (pp));\n+\n   expanded_location s = expand_location_to_spelling_point (diagnostic->location);\n   if (diagnostic->override_column)\n     s.column = diagnostic->override_column;\n   gcc_assert (diagnostic->kind < DK_LAST_DIAGNOSTIC_KIND);\n \n   return\n     (s.file == NULL\n-     ? build_message_string (\"%s: %s\", progname, text)\n+     ? build_message_string (\"%s%s:%s %s%s%s\", locus_cs, progname, locus_ce,\n+\t\t\t     text_cs, text, text_ce)\n      : context->show_column\n-     ? build_message_string (\"%s:%d:%d: %s\", s.file, s.line, s.column, text)\n-     : build_message_string (\"%s:%d: %s\", s.file, s.line, text));\n+     ? build_message_string (\"%s%s:%d:%d:%s %s%s%s\", locus_cs, s.file, s.line,\n+\t\t\t     s.column, locus_ce, text_cs, text, text_ce)\n+     : build_message_string (\"%s%s:%d:%s %s%s%s\", locus_cs, s.file, s.line, locus_ce,\n+\t\t\t     text_cs, text, text_ce));\n }\n \n /* If LINE is longer than MAX_WIDTH, and COLUMN is not smaller than\n@@ -262,7 +284,7 @@ diagnostic_show_locus (diagnostic_context * context,\n   expanded_location s;\n   int max_width;\n   const char *saved_prefix;\n-\n+  const char *caret_cs, *caret_ce;\n \n   if (!context->show_caret\n       || diagnostic->location <= BUILTINS_LOCATION\n@@ -290,9 +312,13 @@ diagnostic_show_locus (diagnostic_context * context,\n       line++;\n     }\n   pp_newline (context->printer);\n+  caret_cs = colorize_start (pp_show_color (context->printer), \"caret\");\n+  caret_ce = colorize_stop (pp_show_color (context->printer));\n+\n   /* pp_printf does not implement %*c.  */\n-  buffer = XALLOCAVEC (char, s.column + 3);\n-  snprintf (buffer, s.column + 3, \" %*c\", s.column, '^');\n+  size_t len = s.column + 3 + strlen (caret_cs) + strlen (caret_ce);\n+  buffer = XALLOCAVEC (char, len);\n+  snprintf (buffer, len, \"%s %*c%s\", caret_cs, s.column, '^', caret_ce);\n   pp_string (context->printer, buffer);\n   pp_set_prefix (context->printer, saved_prefix);\n }"}, {"sha": "2f1e36515ad7e6ac72756776fd869ccc34026e91", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -22,26 +22,26 @@ along with GCC; see the file COPYING3.  If not see\n    kind specified.  I.e. they're uninitialized.  Within the diagnostic\n    machinery, this kind also means \"don't change the existing kind\",\n    meaning \"no change is specified\".  */\n-DEFINE_DIAGNOSTIC_KIND (DK_UNSPECIFIED, \"\")\n+DEFINE_DIAGNOSTIC_KIND (DK_UNSPECIFIED, \"\", NULL)\n \n /* If a diagnostic is set to DK_IGNORED, it won't get reported at all.\n    This is used by the diagnostic machinery when it wants to disable a\n    diagnostic without disabling the option which causes it.  */\n-DEFINE_DIAGNOSTIC_KIND (DK_IGNORED, \"\")\n+DEFINE_DIAGNOSTIC_KIND (DK_IGNORED, \"\", NULL)\n \n /* The remainder are real diagnostic types.  */\n-DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"fatal error: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_ICE, \"internal compiler error: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"error: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"warning: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"fatal error: \", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ICE, \"internal compiler error: \", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"error: \", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented: \", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"warning: \", \"warning\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism: \", \"warning\")\n+DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note: \", \"note\")\n+DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug: \", \"note\")\n /* These two would be re-classified as DK_WARNING or DK_ERROR, so the\n prefix does not matter.  */\n-DEFINE_DIAGNOSTIC_KIND (DK_PEDWARN, \"pedwarn: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_PEDWARN, \"pedwarn: \", NULL)\n+DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror: \", NULL)\n /* This one is just for counting DK_WARNING promoted to DK_ERROR\n    due to -Werror and -Werror=warning.  */\n-DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error: \", NULL)"}, {"sha": "30445ec5e0b9bb015ab55dfc9f3180bd9408b5cd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -226,6 +226,7 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Language Independent Options,,Options to Control Diagnostic Messages Formatting}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n+-fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fno-diagnostics-show-option -fno-diagnostics-show-caret}\n \n @item Warning Options\n@@ -2956,6 +2957,76 @@ messages reporter to emit the same source location information (as\n prefix) for physical lines that result from the process of breaking\n a message which is too long to fit on a single line.\n \n+@item -fdiagnostics-color[=@var{WHEN}]\n+@itemx -fno-diagnostics-color\n+@opindex fdiagnostics-color\n+@cindex highlight, color, colour\n+@vindex GCC_COLORS @r{environment variable}\n+Use color in diagnostics.  @var{WHEN} is @samp{never}, @samp{always},\n+or @samp{auto}.  The default is @samp{never}, @samp{auto} means to use color\n+only when the standard error is a terminal. The forms\n+@option{-fdiagnostics-color} and @option{-fno-diagnostics-color} are\n+aliases for @option{-fdiagnostics-color=always} and\n+@option{-fdiagnostics-color=never}, respectively.\n+\n+The colors are defined by the environment variable @env{GCC_COLORS}.\n+Its value is a colon-separated list of capabilities and Select Graphic\n+Rendition (SGR) substrings. SGR commands are interpreted by the\n+terminal or terminal emulator.  (See the section in the documentation\n+of your text terminal for permitted values and their meanings as\n+character attributes.)  These substring values are integers in decimal\n+representation and can be concatenated with semicolons.\n+Common values to concatenate include\n+@samp{1} for bold,\n+@samp{4} for underline,\n+@samp{5} for blink,\n+@samp{7} for inverse,\n+@samp{39} for default foreground color,\n+@samp{30} to @samp{37} for foreground colors,\n+@samp{90} to @samp{97} for 16-color mode foreground colors,\n+@samp{38;5;0} to @samp{38;5;255}\n+for 88-color and 256-color modes foreground colors,\n+@samp{49} for default background color,\n+@samp{40} to @samp{47} for background colors,\n+@samp{100} to @samp{107} for 16-color mode background colors,\n+and @samp{48;5;0} to @samp{48;5;255}\n+for 88-color and 256-color modes background colors.\n+\n+The default @env{GCC_COLORS} is\n+@samp{error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01}\n+where @samp{01;31} is bold red, @samp{01;35} is bold magenta,\n+@samp{01;36} is bold cyan, @samp{01;32} is bold green and\n+@samp{01} is bold. Setting @env{GCC_COLORS} to the empty\n+string disables colors.\n+Supported capabilities are as follows.\n+\n+@table @code\n+@item error=\n+@vindex error GCC_COLORS @r{capability}\n+SGR substring for error: markers.\n+\n+@item warning=\n+@vindex warning GCC_COLORS @r{capability}\n+SGR substring for warning: markers.\n+\n+@item note=\n+@vindex note GCC_COLORS @r{capability}\n+SGR substring for note: markers.\n+\n+@item caret=\n+@vindex caret GCC_COLORS @r{capability}\n+SGR substring for caret line.\n+\n+@item locus=\n+@vindex locus GCC_COLORS @r{capability}\n+SGR substring for location information, @samp{file:line} or\n+@samp{file:line:column} etc.\n+\n+@item quote=\n+@vindex quote GCC_COLORS @r{capability}\n+SGR substring for information printed within quotes.\n+@end table\n+\n @item -fno-diagnostics-show-option\n @opindex fno-diagnostics-show-option\n @opindex fdiagnostics-show-option"}, {"sha": "2475adefc05750c155c8a467055ae074fa5b2002", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -18828,6 +18828,7 @@ gen_producer_string (void)\n       case OPT_fdiagnostics_show_location_:\n       case OPT_fdiagnostics_show_option:\n       case OPT_fdiagnostics_show_caret:\n+      case OPT_fdiagnostics_color_:\n       case OPT_fverbose_asm:\n       case OPT____:\n       case OPT__sysroot_:"}, {"sha": "70af8da4b30cb8e95dee94fb7742b4e24c71dc43", "filename": "gcc/langhooks.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -452,14 +452,14 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t    {\n \t\t      if (context->show_column)\n \t\t\tpp_printf (context->printer,\n-\t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n+\t\t\t\t   _(\"    inlined from %qs at %r%s:%d:%d%R\"),\n \t\t\t\t   identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)),\n-\t\t\t\t   s.file, s.line, s.column);\n+\t\t\t\t   \"locus\", s.file, s.line, s.column);\n \t\t      else\n \t\t\tpp_printf (context->printer,\n-\t\t\t\t   _(\"    inlined from %qs at %s:%d\"),\n+\t\t\t\t   _(\"    inlined from %qs at %r%s:%d%R\"),\n \t\t\t\t   identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)),\n-\t\t\t\t   s.file, s.line);\n+\t\t\t\t   \"locus\", s.file, s.line);\n \n \t\t    }\n \t\t  else"}, {"sha": "6856c3c8090a83ee148ad0da2e29c1f69e4467c8", "filename": "gcc/opts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n+#include \"diagnostic-color.h\"\n #include \"opts-diagnostic.h\"\n #include \"insn-attr-common.h\"\n #include \"common/common-target.h\"\n@@ -1497,6 +1498,11 @@ common_handle_option (struct gcc_options *opts,\n       dc->show_caret = value;\n       break;\n \n+    case OPT_fdiagnostics_color_:\n+      pp_show_color (dc->printer)\n+\t= colorize_init ((diagnostic_color_rule_t) value);\n+      break;\n+\n     case OPT_fdiagnostics_show_option:\n       dc->show_option_requested = value;\n       break;"}, {"sha": "fe46464538e6a41b274cfb821bae7dd7ee1c30a2", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"intl.h\"\n #include \"pretty-print.h\"\n+#include \"diagnostic-color.h\"\n \n #if HAVE_ICONV\n #include <iconv.h>\n@@ -226,6 +227,8 @@ pp_base_indent (pretty_printer *pp)\n    %c: character.\n    %s: string.\n    %p: pointer.\n+   %r: if pp_show_color(pp), switch to color identified by const char *.\n+   %R: if pp_show_color(pp), reset color.\n    %m: strerror(text->err_no) - does not consume a value from args_ptr.\n    %%: '%'.\n    %<: opening quote.\n@@ -300,18 +303,37 @@ pp_base_format (pretty_printer *pp, text_info *text)\n \t  continue;\n \n \tcase '<':\n-\t  obstack_grow (&buffer->chunk_obstack,\n-\t\t\topen_quote, strlen (open_quote));\n-\t  p++;\n-\t  continue;\n+\t  {\n+\t    obstack_grow (&buffer->chunk_obstack,\n+\t\t\t  open_quote, strlen (open_quote));\n+\t    const char *colorstr\n+\t      = colorize_start (pp_show_color (pp), \"quote\");\n+\t    obstack_grow (&buffer->chunk_obstack, colorstr, strlen (colorstr));\n+\t    p++;\n+\t    continue;\n+\t  }\n \n \tcase '>':\n+\t  {\n+\t    const char *colorstr = colorize_stop (pp_show_color (pp));\n+\t    obstack_grow (&buffer->chunk_obstack, colorstr, strlen (colorstr));\n+\t  }\n+\t  /* FALLTHRU */\n \tcase '\\'':\n \t  obstack_grow (&buffer->chunk_obstack,\n \t\t\tclose_quote, strlen (close_quote));\n \t  p++;\n \t  continue;\n \n+\tcase 'R':\n+\t  {\n+\t    const char *colorstr = colorize_stop (pp_show_color (pp));\n+\t    obstack_grow (&buffer->chunk_obstack, colorstr,\n+\t\t\t  strlen (colorstr));\n+\t    p++;\n+\t    continue;\n+\t  }\n+\n \tcase 'm':\n \t  {\n \t    const char *errstr = xstrerror (text->err_no);\n@@ -466,10 +488,19 @@ pp_base_format (pretty_printer *pp, text_info *text)\n       gcc_assert (!wide || precision == 0);\n \n       if (quote)\n-\tpp_string (pp, open_quote);\n+\t{\n+\t  pp_string (pp, open_quote);\n+\t  pp_string (pp, colorize_start (pp_show_color (pp), \"quote\"));\n+\t}\n \n       switch (*p)\n \t{\n+\tcase 'r':\n+\t  pp_string (pp, colorize_start (pp_show_color (pp),\n+\t\t\t\t\t va_arg (*text->args_ptr,\n+\t\t\t\t\t\t const char *)));\n+\t  break;\n+\n \tcase 'c':\n \t  pp_character (pp, va_arg (*text->args_ptr, int));\n \t  break;\n@@ -563,7 +594,10 @@ pp_base_format (pretty_printer *pp, text_info *text)\n \t}\n \n       if (quote)\n-\tpp_string (pp, close_quote);\n+\t{\n+\t  pp_string (pp, colorize_stop (pp_show_color (pp)));\n+\t  pp_string (pp, close_quote);\n+\t}\n \n       obstack_1grow (&buffer->chunk_obstack, '\\0');\n       *formatters[argno] = XOBFINISH (&buffer->chunk_obstack, const char *);"}, {"sha": "13bb2dede90e6e204357b34c62d8acd5e9be4f29", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b84d650e82e29bd3ff901a1e34b08435ee99871/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=4b84d650e82e29bd3ff901a1e34b08435ee99871", "patch": "@@ -151,6 +151,9 @@ typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,\n    output.  */\n #define pp_translate_identifiers(PP) pp_base (PP)->translate_identifiers\n \n+/* True if colors should be shown.  */\n+#define pp_show_color(PP) pp_base (PP)->show_color\n+\n /* The data structure that contains the bare minimum required to do\n    proper pretty-printing.  Clients may derived from this structure\n    and add additional fields they need.  */\n@@ -194,6 +197,9 @@ struct pretty_print_info\n   /* Nonzero means identifiers are translated to the locale character\n      set on output.  */\n   bool translate_identifiers;\n+\n+  /* Nonzero means that text should be colorized.  */\n+  bool show_color;\n };\n \n #define pp_set_line_maximum_length(PP, L) \\"}]}