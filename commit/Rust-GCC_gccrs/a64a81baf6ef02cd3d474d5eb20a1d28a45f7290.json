{"sha": "a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0YTgxYmFmNmVmMDJjZDNkNDc0ZDVlYjIwYTFkMjhhNDVmNzI5MA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-05-29T19:21:27Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-05-29T19:21:27Z"}, "message": "re PR fortran/19777 (-fbounds-check catches non-existent bounds violation)\n\n\tPR fortran/19777\n\n\t* trans-array.c (gfc_conv_array_ref): Perform out-of-bounds\n\tchecking for assumed-size arrrays for all but the last dimension.\n\n\t* gfortran.dg/bounds_check_2.f: Add new check for multidimensional\n\tarrays.\n\nFrom-SVN: r114210", "tree": {"sha": "72679f07b58b86bfa69a3e753279e179052931f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72679f07b58b86bfa69a3e753279e179052931f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944caafcb8dffa37c940620c23e75e381c574248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944caafcb8dffa37c940620c23e75e381c574248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944caafcb8dffa37c940620c23e75e381c574248"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "e559805544284f84ec2e21f703e777ab464c90db", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "patch": "@@ -1,3 +1,9 @@\n+2006-05-29  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/19777\n+\t* trans-array.c (gfc_conv_array_ref): Perform out-of-bounds\n+\tchecking for assumed-size arrrays for all but the last dimension.\n+\n 2006-05-29  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* invoke.texi: Change -fpackderived into -fpack-derived."}, {"sha": "7dfba2afd6c5be5f999e4cdd8e305f5b76a22265", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "patch": "@@ -1783,7 +1783,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n)\n   cond = fold_build2 (GT_EXPR, boolean_type_node, index, tmp);\n   fault = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, fault, cond);\n \n-  gfc_trans_runtime_check (fault, gfc_strconst_fault, &se->pre);\n+  gfc_trans_runtime_check (fault, gfc_msg_fault, &se->pre);\n \n   return index;\n }\n@@ -1948,7 +1948,8 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n       gfc_conv_expr_type (&indexse, ar->start[n], gfc_array_index_type);\n       gfc_add_block_to_block (&se->pre, &indexse.pre);\n \n-      if (flag_bounds_check && ar->as->type != AS_ASSUMED_SIZE)\n+      if (flag_bounds_check &&\n+\t  (ar->as->type != AS_ASSUMED_SIZE  || n < ar->dimen - 1))\n \t{\n \t  /* Check array bounds.  */\n \t  tree cond;\n@@ -1978,7 +1979,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar)\n     }\n \n   if (flag_bounds_check)\n-    gfc_trans_runtime_check (fault, gfc_strconst_fault, &se->pre);\n+    gfc_trans_runtime_check (fault, gfc_msg_fault, &se->pre);\n \n   tmp = gfc_conv_array_offset (se->expr);\n   if (!integer_zerop (tmp))\n@@ -2519,7 +2520,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\tsize[n] = gfc_evaluate_now (tmp, &block);\n \t    }\n \t}\n-      gfc_trans_runtime_check (fault, gfc_strconst_bounds, &block);\n+      gfc_trans_runtime_check (fault, gfc_msg_bounds, &block);\n \n       tmp = gfc_finish_block (&block);\n       gfc_add_expr_to_block (&loop->pre, tmp);\n@@ -3714,7 +3715,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n               stride2 = build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t       dubound, dlbound);\n               tmp = fold_build2 (NE_EXPR, gfc_array_index_type, tmp, stride2);\n-\t      gfc_trans_runtime_check (tmp, gfc_strconst_bounds, &block);\n+\t      gfc_trans_runtime_check (tmp, gfc_msg_bounds, &block);\n \t    }\n \t}\n       else"}, {"sha": "90818dd9e70d55519d02f4ad1590f92ce8024a26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "patch": "@@ -1,3 +1,9 @@\n+2006-05-29  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/19777\n+\t* gfortran.dg/bounds_check_2.f: Add new check for multidimensional\n+\tarrays.\n+\n 2006-05-29  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27713"}, {"sha": "671f7f2410360d1de03afe97abfb7847434dfc24", "filename": "gcc/testsuite/gfortran.dg/bounds_check_2.f", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a81baf6ef02cd3d474d5eb20a1d28a45f7290/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_2.f?ref=a64a81baf6ef02cd3d474d5eb20a1d28a45f7290", "patch": "@@ -5,9 +5,12 @@\n       integer          npts\n       parameter        (npts=10)\n       double precision v(npts)\n+      double precision w(npts,npts,npts)\n       external         init1\n+      external         init2\n \n       call init1 (npts, v)\n+      call init2 (npts, w)\n       end\n \n       subroutine init1 (npts, v)\n@@ -21,3 +24,16 @@ subroutine init1 (npts, v)\n          v(i) = 0\n  10   continue\n       end\n+\n+      subroutine init2 (npts, w)\n+      implicit none\n+      integer          npts\n+      double precision w(npts,npts,*)\n+\n+      integer          i\n+\n+      do 20 i = 1, npts\n+         w(i,1,1) = 0\n+         w(1,npts,i) = 0\n+ 20   continue\n+      end"}]}