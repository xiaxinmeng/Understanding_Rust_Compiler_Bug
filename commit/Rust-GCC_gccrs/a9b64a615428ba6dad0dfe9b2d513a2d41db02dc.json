{"sha": "a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliNjRhNjE1NDI4YmE2ZGFkMGRmZTliMmQ1MTNhMmQ0MWRiMDJkYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-10-27T15:00:54Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-10-27T15:00:54Z"}, "message": "re PR fortran/86248 (LEN_TRIM in specification expression causes link failure)\n\n2019-10-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/86248\n\t* resolve.c (flag_fn_result_spec): Correct a typo before the\n\tfunction declaration.\n\t* trans-decl.c (gfc_sym_identifier): Boost the length of 'name'\n\tto allow for all variants. Simplify the code by using a pointer\n\tto the symbol's proc_name and taking the return out of each of\n\tthe conditional branches. Allow symbols with fn_result_spec set\n\tthat do not come from a procedure namespace and have a module\n\tname to go through the non-fn_result_spec branch.\n\n2019-10-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/86248\n\t* gfortran.dg/char_result_19.f90 : New test.\n\t* gfortran.dg/char_result_mod_19.f90 : Module for the new test.\n\nFrom-SVN: r277487", "tree": {"sha": "f529983b606df8516f47036a249a070e14e67124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f529983b606df8516f47036a249a070e14e67124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/comments", "author": null, "committer": null, "parents": [{"sha": "051d8a5faa3b37b0dda84c8382174ee70d5b7992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051d8a5faa3b37b0dda84c8382174ee70d5b7992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051d8a5faa3b37b0dda84c8382174ee70d5b7992"}], "stats": {"total": 99, "additions": 76, "deletions": 23}, "files": [{"sha": "7e9531fed4b9d75d9eed0af627a601b06e1e80dc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -1,3 +1,15 @@\n+2019-10-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/86248\n+\t* resolve.c (flag_fn_result_spec): Correct a typo before the\n+\tfunction declaration.\n+\t* trans-decl.c (gfc_sym_identifier): Boost the length of 'name'\n+\tto allow for all variants. Simplify the code by using a pointer\n+\tto the symbol's proc_name and taking the return out of each of\n+\tthe conditional branches. Allow symbols with fn_result_spec set\n+\tthat do not come from a procedure namespace and have a module\n+\tname to go through the non-fn_result_spec branch.\n+\n 2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n \n@@ -23,7 +35,7 @@\n \n \tPR fortran/92174\n \t* decl.c (attr_decl1): Move check for F2018:C822 from here ...\n-\t* array.c (gfc_set_array_spec): ... to here. \n+\t* array.c (gfc_set_array_spec): ... to here.\n \n 2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "218c2edba57c23399e0d7b8259d8f2090f33c082", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -16777,8 +16777,8 @@ resolve_equivalence (gfc_equiv *eq)\n }\n \n \n-/* Function called by resolve_fntype to flag other symbol used in the\n-   length type parameter specification of function resuls.  */\n+/* Function called by resolve_fntype to flag other symbols used in the\n+   length type parameter specification of function results.  */\n \n static bool\n flag_fn_result_spec (gfc_expr *expr,"}, {"sha": "630682cbac7210e25b5254a3792f17712baec053", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -369,44 +369,37 @@ gfc_sym_identifier (gfc_symbol * sym)\n static const char *\n mangled_identifier (gfc_symbol *sym)\n {\n-  static char name[GFC_MAX_MANGLED_SYMBOL_LEN + 1];\n+  gfc_symbol *proc = sym->ns->proc_name;\n+  static char name[3*GFC_MAX_MANGLED_SYMBOL_LEN + 14];\n   /* Prevent the mangling of identifiers that have an assigned\n      binding label (mainly those that are bind(c)).  */\n \n   if (sym->attr.is_bind_c == 1 && sym->binding_label)\n     return sym->binding_label;\n \n-  if (!sym->fn_result_spec)\n+  if (!sym->fn_result_spec\n+      || (sym->module && !(proc && proc->attr.flavor == FL_PROCEDURE)))\n     {\n       if (sym->module == NULL)\n \treturn sym_identifier (sym);\n       else\n-\t{\n-\t  snprintf (name, sizeof name, \"__%s_MOD_%s\", sym->module, sym->name);\n-\t  return name;\n-\t}\n+\tsnprintf (name, sizeof name, \"__%s_MOD_%s\", sym->module, sym->name);\n     }\n   else\n     {\n       /* This is an entity that is actually local to a module procedure\n \t that appears in the result specification expression.  Since\n \t sym->module will be a zero length string, we use ns->proc_name\n-\t instead. */\n-      if (sym->ns->proc_name && sym->ns->proc_name->module)\n-\t{\n-\t  snprintf (name, sizeof name, \"__%s_MOD__%s_PROC_%s\",\n-\t\t    sym->ns->proc_name->module,\n-\t\t    sym->ns->proc_name->name,\n-\t\t    sym->name);\n-\t  return name;\n-\t}\n+\t to provide the module name instead. */\n+      if (proc && proc->module)\n+\tsnprintf (name, sizeof name, \"__%s_MOD__%s_PROC_%s\",\n+\t\t  proc->module, proc->name, sym->name);\n       else\n-\t{\n-\t  snprintf (name, sizeof name, \"__%s_PROC_%s\",\n-\t\t    sym->ns->proc_name->name, sym->name);\n-\t  return name;\n-\t}\n+\tsnprintf (name, sizeof name, \"__%s_PROC_%s\",\n+\t\t  proc->name, sym->name);\n     }\n+\n+  return name;\n }\n \n /* Get mangled identifier, adding the symbol to the global table if"}, {"sha": "70e24fd489ed888a300fe34ac0fd25b51f5180d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -1,3 +1,9 @@\n+2019-10-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/86248\n+\t* gfortran.dg/char_result_19.f90 : New test.\n+\t* gfortran.dg/char_result_mod_19.f90 : Module for the new test.\n+\n 2019-10-26  Hongtao Liu  <hongtao.liu@intel.com>\n \n \tPR target/89071"}, {"sha": "e66ebdcda5356e3e3cc23a7f78792d4cf0400903", "filename": "gcc/testsuite/gfortran.dg/char_result_19.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_19.f90?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do preprocess }\n+! { dg-additional-options \"-cpp\" }\n+!\n+! Test the fix for PR86248\n+!\n+! Contributed by Bill Long  <longb@cray.com>\n+!\n+program test\n+  use test_module\n+  implicit none\n+  integer :: i\n+  character(:), allocatable :: chr\n+  do i = 0, 2\n+    chr = func_1 (i)\n+    select case (i)\n+      case (0)\n+        if (chr .ne. 'el0') stop i\n+      case (1)\n+        if (chr .ne. 'el11') stop i\n+      case (2)\n+        if (chr .ne. 'el2') stop i\n+    end select\n+  end do\n+end program test"}, {"sha": "a2b5e94f1b62478d12ff9bc5e1919aa5d7dcae13", "filename": "gcc/testsuite/gfortran.dg/char_result_mod_19.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_mod_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b64a615428ba6dad0dfe9b2d513a2d41db02dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_mod_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_mod_19.f90?ref=a9b64a615428ba6dad0dfe9b2d513a2d41db02dc", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do  run }\n+! { dg-additional-sources char_result_19.f90 }\n+!\n+! Module for char_result_19.f90\n+! Tests fix for PR86248\n+!\n+module test_module\n+  implicit none\n+  public :: func_1\n+  private\n+  character(len=*),dimension(0:2),parameter :: darray = (/\"el0 \",\"el11\",\"el2 \"/)\n+contains\n+  function func_1 (func_1_input) result(f)\n+    integer, intent(in) :: func_1_input\n+    character(len = len_trim (darray(func_1_input))) :: f\n+    f = darray(func_1_input)\n+  end function func_1\n+end module test_module"}]}