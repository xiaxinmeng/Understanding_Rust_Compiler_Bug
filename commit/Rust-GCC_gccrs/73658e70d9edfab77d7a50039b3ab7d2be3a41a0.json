{"sha": "73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "node_id": "C_kwDOANBUbNoAKDczNjU4ZTcwZDllZGZhYjc3ZDdhNTAwMzliM2FiN2QyYmUzYTQxYTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T08:57:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T10:14:22Z"}, "message": "Make sbitmap bitmap_set_bit and bitmap_clear_bit return changed state\n\nThe following adjusts the sbitmap bitmap_set_bit and bitmap_clear_bit\nAPIs to match that of bitmap by returning a bool indicating whether\nthe bitmap was changed.  I've also changed bitmap_bit_p to return\na bool rather than an int and made use of the sbitmap bitmap_set_bit\nAPI change in one place.\n\n2021-11-03  Richard Biener  <rguenther@suse.de>\n\n\t* bitmap.h (bitmap_bit_p): Change the return type to bool.\n\t* bitmap.c (bitmap_bit_p): Likewise.\n\t* sbitmap.h (bitmap_bit_p): Likewise.\n\t(bitmap_set_bit): Return whether the bit changed.\n\t(bitmap_clear_bit): Likewise.\n\t* tree-ssa.c (verify_vssa): Make use of the changed state\n\tfrom bitmap_set_bit.", "tree": {"sha": "26611a8c718cb2a5f85dad791ec899723e4a294f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26611a8c718cb2a5f85dad791ec899723e4a294f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c081d0a3b0291297f04a05c833d2ffa8de3a7a1a"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "1aa8e4b3134376d70942f4d42b3b7fb88846b81d", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "patch": "@@ -983,7 +983,7 @@ bitmap_set_bit (bitmap head, int bit)\n \n /* Return whether a bit is set within a bitmap.  */\n \n-int\n+bool\n bitmap_bit_p (const_bitmap head, int bit)\n {\n   unsigned int indx = bit / BITMAP_ELEMENT_ALL_BITS;"}, {"sha": "fc33877c89db69d92fc05786e588c67e7cbe97c0", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "patch": "@@ -436,7 +436,7 @@ extern bool bitmap_clear_bit (bitmap, int);\n extern bool bitmap_set_bit (bitmap, int);\n \n /* Return true if a bit is set in a bitmap.  */\n-extern int bitmap_bit_p (const_bitmap, int);\n+extern bool bitmap_bit_p (const_bitmap, int);\n \n /* Set and get multiple bit values in a sparse bitmap.  This allows a bitmap to\n    function as a sparse array of bit patterns where the patterns are"}, {"sha": "5fb0e005957b3180ae2667f774f6d0141ece4577", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "patch": "@@ -114,7 +114,7 @@ bitmap_check_sizes (const_sbitmap a, const_sbitmap b)\n }\n \n /* Test if bit number bitno in the bitmap is set.  */\n-static inline SBITMAP_ELT_TYPE\n+static inline bool\n bitmap_bit_p (const_sbitmap map, int bitno)\n {\n   bitmap_check_index (map, bitno);\n@@ -124,26 +124,36 @@ bitmap_bit_p (const_sbitmap map, int bitno)\n   return (map->elms[i] >> s) & (SBITMAP_ELT_TYPE) 1;\n }\n \n-/* Set bit number BITNO in the sbitmap MAP.  */\n+/* Set bit number BITNO in the sbitmap MAP.\n+   Return true if the bit changed.  */\n \n-static inline void\n+static inline bool\n bitmap_set_bit (sbitmap map, int bitno)\n {\n   bitmap_check_index (map, bitno);\n \n-  map->elms[bitno / SBITMAP_ELT_BITS]\n-    |= (SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS;\n+  size_t i = bitno / SBITMAP_ELT_BITS;\n+  unsigned int s = bitno % SBITMAP_ELT_BITS;\n+  if (map->elms[i] & ((SBITMAP_ELT_TYPE) 1 << s))\n+    return false;\n+  map->elms[i] |= (SBITMAP_ELT_TYPE) 1 << s;\n+  return true;\n }\n \n-/* Reset bit number BITNO in the sbitmap MAP.  */\n+/* Reset bit number BITNO in the sbitmap MAP.\n+   Return true if the bit changed.  */\n \n-static inline void\n+static inline bool\n bitmap_clear_bit (sbitmap map, int bitno)\n {\n   bitmap_check_index (map, bitno);\n \n-  map->elms[bitno / SBITMAP_ELT_BITS]\n-    &= ~((SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS);\n+  size_t i = bitno / SBITMAP_ELT_BITS;\n+  unsigned int s = bitno % SBITMAP_ELT_BITS;\n+  if (!(map->elms[i] & ((SBITMAP_ELT_TYPE) 1 << s)))\n+    return false;\n+  map->elms[i] &= ~((SBITMAP_ELT_TYPE) 1 << s);\n+  return true;\n }\n \n /* The iterator for sbitmap.  */"}, {"sha": "3f25d654d3f2826594726e31fbcf8a580e07eab2", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73658e70d9edfab77d7a50039b3ab7d2be3a41a0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=73658e70d9edfab77d7a50039b3ab7d2be3a41a0", "patch": "@@ -649,11 +649,9 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n {\n   bool err = false;\n \n-  if (bitmap_bit_p (visited, bb->index))\n+  if (!bitmap_set_bit (visited, bb->index))\n     return false;\n \n-  bitmap_set_bit (visited, bb->index);\n-\n   /* Pick up the single virtual PHI def.  */\n   gphi *phi = NULL;\n   for (gphi_iterator si = gsi_start_phis (bb); !gsi_end_p (si);"}]}