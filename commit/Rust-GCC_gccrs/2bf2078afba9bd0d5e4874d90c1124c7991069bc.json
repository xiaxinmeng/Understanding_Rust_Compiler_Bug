{"sha": "2bf2078afba9bd0d5e4874d90c1124c7991069bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmMjA3OGFmYmE5YmQwZDVlNDg3NGQ5MGMxMTI0Yzc5OTEwNjliYw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-02-18T19:36:39Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-02-18T19:36:39Z"}, "message": "re PR bootstrap/68404 (PGO/LTO bootstrap failure on ppc64le)\n\n[gcc]\n2016-02-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68404\n\t* config/rs6000/predicates.md (fusion_gpr_addis): Revert\n\t2016-02-09 change.\n\n\t* config/rs6000/rs6000.md (fusion_gpr_load_<mode>): Remove\n\tearlyclobber from target.  Use wF constraint for fused memory\n\taddress.\n\t(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_load): Likewise.\n\n[gcc/testsuites]\n2016-02-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68404\n\t* gcc.target/powerpc/fusion.c: Revert the 2016-02-09 change.\n\t* gcc.target/powerpc/fusion3.c: Likewise.\n\nFrom-SVN: r233532", "tree": {"sha": "2c735bed397542fe34492919b23f86b13a02c208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c735bed397542fe34492919b23f86b13a02c208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf2078afba9bd0d5e4874d90c1124c7991069bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf2078afba9bd0d5e4874d90c1124c7991069bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf2078afba9bd0d5e4874d90c1124c7991069bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf2078afba9bd0d5e4874d90c1124c7991069bc/comments", "author": null, "committer": null, "parents": [{"sha": "c461d26383f5e7999b3e02c965d8289f2c22f7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c461d26383f5e7999b3e02c965d8289f2c22f7fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c461d26383f5e7999b3e02c965d8289f2c22f7fe"}], "stats": {"total": 92, "additions": 49, "deletions": 43}, "files": [{"sha": "69195f73b7a454eedbd1863e0446cb5aa40be704", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -1,3 +1,14 @@\n+2016-02-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68404\n+\t* config/rs6000/predicates.md (fusion_gpr_addis): Revert\n+\t2016-02-09 change.\n+\n+\t* config/rs6000/rs6000.md (fusion_gpr_load_<mode>): Remove\n+\tearlyclobber from target.  Use wF constraint for fused memory\n+\taddress.\n+\t(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_load): Likewise.\n+\n 2016-02-18  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "072291ef7d015c093347320446ce1a5f6ee07e5f", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -1708,14 +1708,23 @@\n   (match_code \"const_int,high,plus\")\n {\n   HOST_WIDE_INT value;\n+  rtx int_const;\n \n   if (GET_CODE (op) == HIGH)\n     return 1;\n \n-  if (!CONST_INT_P (op))\n+  if (CONST_INT_P (op))\n+    int_const = op;\n+\n+  else if (GET_CODE (op) == PLUS\n+\t   && base_reg_operand (XEXP (op, 0), Pmode)\n+\t   && CONST_INT_P (XEXP (op, 1)))\n+    int_const = XEXP (op, 1);\n+\n+  else\n     return 0;\n \n-  value = INTVAL (op);\n+  value = INTVAL (int_const);\n   if ((value & (HOST_WIDE_INT)0xffff) != 0)\n     return 0;\n "}, {"sha": "365bc5efe1010ce034ed21c1126d7ec119c062f0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -12906,8 +12906,8 @@\n ;; reload)\n \n (define_insn \"fusion_gpr_load_<mode>\"\n-  [(set (match_operand:INT1 0 \"base_reg_operand\" \"=&b\")\n-\t(unspec:INT1 [(match_operand:INT1 1 \"fusion_addis_mem_combo_load\" \"\")]\n+  [(set (match_operand:INT1 0 \"base_reg_operand\" \"=b\")\n+\t(unspec:INT1 [(match_operand:INT1 1 \"fusion_addis_mem_combo_load\" \"wF\")]\n \t\t     UNSPEC_FUSION_GPR))]\n   \"TARGET_P8_FUSION\"\n {\n@@ -12978,7 +12978,7 @@\n \t(unspec:GPR_FUSION\n \t [(match_operand:GPR_FUSION 1 \"fusion_addis_mem_combo_load\" \"wF\")]\n \t UNSPEC_FUSION_P9))\n-   (clobber (match_operand:P 2 \"base_reg_operand\" \"=&b\"))]\n+   (clobber (match_operand:P 2 \"base_reg_operand\" \"=b\"))]\n   \"TARGET_P9_FUSION\"\n {\n   /* This insn is a secondary reload insn, which cannot have alternatives."}, {"sha": "fb5f686aa1d94a5cac05cc968e60e9ecffcb23f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -1,3 +1,9 @@\n+2016-02-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68404\n+\t* gcc.target/powerpc/fusion.c: Revert the 2016-02-09 change.\n+\t* gcc.target/powerpc/fusion3.c: Likewise.\n+\n 2016-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69553"}, {"sha": "ed35006f4d87330a780a2e05577e9943929e6926", "filename": "gcc/testsuite/gcc.target/powerpc/fusion.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -1,28 +1,17 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -mtune=power8 -O3 -mcmodel=medium\" } */\n+/* { dg-options \"-mcpu=power7 -mtune=power8 -O3\" } */\n \n-#define SIZE 4\n-struct foo {\n-  unsigned char uc;\n-  signed char sc;\n-  unsigned short us;\n-  short ss;\n-  int i;\n-  unsigned u;\n-};\n+#define LARGE 0x12345\n \n-static struct foo st[SIZE];\n-struct foo *ptr_st = &st[0];\n-\n-int fusion_uchar (void){ return st[SIZE-1].uc; }\n-int fusion_schar (void){ return st[SIZE-1].sc; }\n-int fusion_ushort (void){ return st[SIZE-1].us; }\n-int fusion_short (void){ return st[SIZE-1].ss; }\n-int fusion_int (void){ return st[SIZE-1].i; }\n-unsigned fusion_uns (void){ return st[SIZE-1].u; }\n+int fusion_uchar (unsigned char *p){ return p[LARGE]; }\n+int fusion_schar (signed char *p){ return p[LARGE]; }\n+int fusion_ushort (unsigned short *p){ return p[LARGE]; }\n+int fusion_short (short *p){ return p[LARGE]; }\n+int fusion_int (int *p){ return p[LARGE]; }\n+unsigned fusion_uns (unsigned *p){ return p[LARGE]; }\n \n /* { dg-final { scan-assembler-times \"gpr load fusion\"    6 } } */\n /* { dg-final { scan-assembler-times \"lbz\"                2 } } */"}, {"sha": "8eca640d25747b0b8424326d1a8cfcad9aa7a34d", "filename": "gcc/testsuite/gcc.target/powerpc/fusion3.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf2078afba9bd0d5e4874d90c1124c7991069bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c?ref=2bf2078afba9bd0d5e4874d90c1124c7991069bc", "patch": "@@ -4,24 +4,15 @@\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n /* { dg-options \"-mcpu=power7 -mtune=power9 -O3\" } */\n \n-#define SIZE 4\n-struct foo {\n-  float f;\n-  double d;\n-};\n+#define LARGE 0x12345\n \n-static struct foo st[SIZE];\n-struct foo *ptr_st = &st[0];\n+int fusion_float_read (float *p){ return p[LARGE]; }\n+int fusion_double_read (double *p){ return p[LARGE]; }\n \n-float fusion_float_read (void){ return st[SIZE].f; }\n-double fusion_float_extend (void){ return (double)st[SIZE].f; }\n-double fusion_double_read (void){ return st[SIZE].d; }\n+void fusion_float_write (float *p, float f){ p[LARGE] = f; }\n+void fusion_double_write (double *p, double d){ p[LARGE] = d; }\n \n-void fusion_float_write (float f){ st[SIZE].f = f; }\n-void fusion_float_truncate (double d){ st[SIZE].f = (float)d; }\n-void fusion_double_write (double d){ st[SIZE].d = d; }\n-\n-/* { dg-final { scan-assembler-times \"load fusion, type SF\"  2 } } */\n-/* { dg-final { scan-assembler-times \"load fusion, type DF\"  1 } } */\n-/* { dg-final { scan-assembler-times \"store fusion, type SF\" 2 } } */\n-/* { dg-final { scan-assembler-times \"store fusion, type DF\" 1 } } */\n+/* { dg-final { scan-assembler \"load fusion, type SF\"  } } */\n+/* { dg-final { scan-assembler \"load fusion, type DF\"  } } */\n+/* { dg-final { scan-assembler \"store fusion, type SF\" } } */\n+/* { dg-final { scan-assembler \"store fusion, type DF\" } } */"}]}