{"sha": "630ba2fd94b7ceffa43d461020587750c47bf2aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwYmEyZmQ5NGI3Y2VmZmE0M2Q0NjEwMjA1ODc3NTBjNDdiZjJhYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-11-07T18:17:29Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-11-07T18:17:29Z"}, "message": "doc: Use @: where needed\n\nWhen an abbreviation ends with a dot followed by whitespace, Texinfo\nthinks the dot ends a sentence, and applies spacing rules etc. based\non that.  To prevent this, there is the @: macro.\n\nThis patch puts @: after every vs., e.g., and i.e. where it is needed.\nIn a few cases there was \"@ \" already, or \"@\\n\", but @: is slightly\nbetter, and more consistent.\n\n\n\t* target.def: Put @: after every vs., e.g., and i.e. where it is\n\tfollowed by whitespace.\n\t* doc/extend.texi: Ditto.\n\t* doc/fragments.texi: Ditto.\n\t* doc/gimple.texi: Ditto.\n\t* doc/implement-c.texi: Ditto.\n\t* doc/install.texi: Ditto.\n\t* doc/invoke.texi: Ditto.\n\t* doc/md.texi: Ditto.\n\t* doc/plugins.texi: Ditto.\n\t* doc/rtl.texi: Ditto.\n\t* doc/sourcebuild.texi: Ditto.\n\t* doc/tm.texi.in: Ditto.\n\t* doc/ux.texi: Ditto.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r265882", "tree": {"sha": "07184c4cea5ae1fe3e5ea5635eaa884a0805ff1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07184c4cea5ae1fe3e5ea5635eaa884a0805ff1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630ba2fd94b7ceffa43d461020587750c47bf2aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ba2fd94b7ceffa43d461020587750c47bf2aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630ba2fd94b7ceffa43d461020587750c47bf2aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ba2fd94b7ceffa43d461020587750c47bf2aa/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6279fcd66fa8dd5b6e8fc78845931bfe72593907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6279fcd66fa8dd5b6e8fc78845931bfe72593907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6279fcd66fa8dd5b6e8fc78845931bfe72593907"}], "stats": {"total": 167, "additions": 93, "deletions": 74}, "files": [{"sha": "5d30e600ec37edb3875bd8d4a5001b350ac3a385", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -1,3 +1,21 @@\n+2018-11-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* target.def: Put @: after every vs., e.g., and i.e. where it is\n+\tfollowed by whitespace.\n+\t* doc/extend.texi: Ditto.\n+\t* doc/fragments.texi: Ditto.\n+\t* doc/gimple.texi: Ditto.\n+\t* doc/implement-c.texi: Ditto.\n+\t* doc/install.texi: Ditto.\n+\t* doc/invoke.texi: Ditto.\n+\t* doc/md.texi: Ditto.\n+\t* doc/plugins.texi: Ditto.\n+\t* doc/rtl.texi: Ditto.\n+\t* doc/sourcebuild.texi: Ditto.\n+\t* doc/tm.texi.in: Ditto.\n+\t* doc/ux.texi: Ditto.\n+\t* doc/tm.texi: Regenerate.\n+\n 2018-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm-cpus.in (ares): New entry."}, {"sha": "8de92da93fb06e7a9894b1277950a72c17e04646", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -3232,7 +3232,7 @@ change the number of NOPs to any desired value.  The two-value syntax\n is the same as for the command-line switch\n @option{-fpatchable-function-entry=N,M}, generating @var{N} NOPs, with\n the function entry point before the @var{M}th NOP instruction.\n-@var{M} defaults to 0 if omitted e.g. function entry point is before\n+@var{M} defaults to 0 if omitted e.g.@: function entry point is before\n the first NOP.\n \n If patchable function entries are enabled globally using the command-line\n@@ -5329,7 +5329,7 @@ depended upon to work reliably and are not supported.\n @cindex @code{vector} function attribute, RX\n This RX attribute is similar to the @code{interrupt} attribute, including its\n parameters, but does not make the function an interrupt-handler type\n-function (i.e. it retains the normal C function calling ABI).  See the\n+function (i.e.@: it retains the normal C function calling ABI).  See the\n @code{interrupt} attribute for a description of its arguments.\n @end table\n \n@@ -7260,7 +7260,7 @@ possible for these fields to have a different scalar storage order than the\n enclosing type.\n \n This attribute is supported only for targets that use a uniform default\n-scalar storage order (fortunately, most of them), i.e. targets that store\n+scalar storage order (fortunately, most of them), i.e.@: targets that store\n the scalars either all in big-endian or all in little-endian.\n \n Additional restrictions are enforced for types with the reverse scalar\n@@ -8489,7 +8489,7 @@ This code copies @code{src} to @code{dst} and add 1 to @code{dst}.\n GCC's optimizers sometimes discard @code{asm} statements if they determine \n there is no need for the output variables. Also, the optimizers may move \n code out of loops if they believe that the code will always return the same \n-result (i.e. none of its input values change between calls). Using the \n+result (i.e.@: none of its input values change between calls). Using the \n @code{volatile} qualifier disables these optimizations. @code{asm} statements \n that have no output operands, including @code{asm goto} statements, \n are implicitly volatile.\n@@ -8754,7 +8754,7 @@ Operands are separated by commas.  Each operand has this format:\n Specifies a symbolic name for the operand.\n Reference the name in the assembler template \n by enclosing it in square brackets \n-(i.e. @samp{%[Value]}). The scope of the name is the @code{asm} statement \n+(i.e.@: @samp{%[Value]}). The scope of the name is the @code{asm} statement \n that contains the definition. Any valid C variable name is acceptable, \n including names already defined in the surrounding code. No two operands \n within the same @code{asm} statement can use the same symbolic name.\n@@ -8994,7 +8994,7 @@ Operands are separated by commas.  Each operand has this format:\n Specifies a symbolic name for the operand.\n Reference the name in the assembler template \n by enclosing it in square brackets \n-(i.e. @samp{%[Value]}). The scope of the name is the @code{asm} statement \n+(i.e.@: @samp{%[Value]}). The scope of the name is the @code{asm} statement \n that contains the definition. Any valid C variable name is acceptable, \n including names already defined in the surrounding code. No two operands \n within the same @code{asm} statement can use the same symbolic name."}, {"sha": "314942eacd2bf3c5f78026d6099b317cd76db549", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -212,7 +212,7 @@ the second it will not.\n For configurations that support both multilib and multiarch,\n @code{MULTILIB_OSDIRNAMES} also encodes the multiarch name, thus\n subsuming @code{MULTIARCH_DIRNAME}.  The multiarch name is appended to\n-each directory name, separated by a colon (e.g.\n+each directory name, separated by a colon (e.g.@:\n @samp{../lib32:i386-linux-gnu}).\n \n Each multiarch subdirectory will be searched before the corresponding OS"}, {"sha": "2fa3afb8bc03d3c0f7f0d6ef9755961b48c70213", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -793,7 +793,7 @@ the address of a function local variable).\n \n @deftypefn {GIMPLE function} bool is_gimple_ip_invariant (tree t)\n Return true if t is an interprocedural invariant.  This means that t\n-is a valid invariant in all functions (e.g. it can be an address of a\n+is a valid invariant in all functions (e.g.@: it can be an address of a\n global variable but not of a local one).\n @end deftypefn\n \n@@ -1627,7 +1627,7 @@ Build a @code{GIMPLE_DEBUG} statement with\n statement is to tell debug information generation machinery that the\n user statement at the given @code{location} and @code{block} starts at\n the point at which the statement is inserted.  The intent is that side\n-effects (e.g. variable bindings) of all prior user statements are\n+effects (e.g.@: variable bindings) of all prior user statements are\n observable, and that none of the side effects of subsequent user\n statements are.\n @end deftypefn"}, {"sha": "5ac98768a4ccdc13a4bbf40bd82a71008a06b3b9", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -565,7 +565,7 @@ volatile int *src = @var{somevalue};\n @end smallexample\n \n According to the C standard, such an expression is an rvalue whose type\n-is the unqualified version of its original type, i.e. @code{int}.  Whether\n+is the unqualified version of its original type, i.e.@: @code{int}.  Whether\n GCC interprets this as a read of the volatile object being pointed to or\n only as a request to evaluate the expression for its side effects depends\n on this type."}, {"sha": "be9b07b5d23b3f419dd38d75887fff0abe20b9ee", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -1904,7 +1904,7 @@ Specify whether @code{long double} uses the IBM extended double format\n or the IEEE 128-bit floating point format on PowerPC Linux systems.\n This configuration switch will only work on little endian PowerPC\n Linux systems and on big endian 64-bit systems where the default cpu\n-is at least power7 (i.e. @option{--with-cpu=power7},\n+is at least power7 (i.e.@: @option{--with-cpu=power7},\n @option{--with-cpu=power8}, or @option{--with-cpu=power9} is used).\n \n If you use the @option{--with-long-double-64} configuration option,\n@@ -2291,15 +2291,15 @@ continues.\n Specify search directories for the garbage collector header files and\n libraries. @var{list} is a comma separated list of key value pairs of the\n form @samp{@var{multilibdir}=@var{path}}, where the default multilib key\n-is named as @samp{.} (dot), or is omitted (e.g.\n+is named as @samp{.} (dot), or is omitted (e.g.@:\n @samp{--with-target-bdw-gc=/opt/bdw-gc,32=/opt-bdw-gc32}).\n \n The options @option{--with-target-bdw-gc-include} and\n @option{--with-target-bdw-gc-lib} must always be specified together\n for each multilib variant and they take precedence over\n @option{--with-target-bdw-gc}.  If @option{--with-target-bdw-gc-include}\n is missing values for a multilib, then the value for the default\n-multilib is used (e.g. @samp{--with-target-bdw-gc-include=/opt/bdw-gc/include}\n+multilib is used (e.g.@: @samp{--with-target-bdw-gc-include=/opt/bdw-gc/include}\n @samp{--with-target-bdw-gc-lib=/opt/bdw-gc/lib64,32=/opt-bdw-gc/lib32}).\n If none of these options are specified, the library is assumed in\n default locations.\n@@ -2480,7 +2480,7 @@ Analogous to @code{bootstrap-O1}.\n Enables Link-Time Optimization for host tools during bootstrapping.\n @samp{BUILD_CONFIG=bootstrap-lto} is equivalent to adding\n @option{-flto} to @samp{BOOT_CFLAGS}.  This option assumes that the host\n-supports the linker plugin (e.g. GNU ld version 2.21 or later or GNU gold\n+supports the linker plugin (e.g.@: GNU ld version 2.21 or later or GNU gold\n version 2.21 or later).\n \n @item @samp{bootstrap-lto-noplugin}\n@@ -2541,7 +2541,7 @@ must be used along with @code{bootstrap-debug-lean} and\n This option enables Intel CET for host tools during bootstrapping.\n @samp{BUILD_CONFIG=bootstrap-cet} is equivalent to adding\n @option{-fcf-protection} to @samp{BOOT_CFLAGS}.  This option\n-assumes that the host supports Intel CET (e.g. GNU assembler version\n+assumes that the host supports Intel CET (e.g.@: GNU assembler version\n 2.30 or later).\n \n @item @samp{bootstrap-time}"}, {"sha": "5f67982cb90da0541a046d7726b0ae9bb0c1585c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -2393,7 +2393,7 @@ Version 9, which first appeared in G++ 5.2, corrects the alignment of\n \n Version 10, which first appeared in G++ 6.1, adds mangling of\n attributes that affect type identity, such as ia32 calling convention\n-attributes (e.g. @samp{stdcall}).\n+attributes (e.g.@: @samp{stdcall}).\n \n Version 11, which first appeared in G++ 7, corrects the mangling of\n sizeof... expressions and operator names.  For multiple entities with\n@@ -2632,7 +2632,7 @@ nonconforming code to compile.\n When an error message refers to a specialization of a function\n template, the compiler normally prints the signature of the\n template followed by the template arguments and any typedefs or\n-typenames in the signature (e.g. @code{void f(T) [with T = int]}\n+typenames in the signature (e.g.@: @code{void f(T) [with T = int]}\n rather than @code{void f(int)}) so that it's clear which template is\n involved.  When an error message refers to a specialization of a class\n template, the compiler omits any template arguments that match\n@@ -2817,7 +2817,7 @@ more things if an older ABI version is selected (with\n \n @option{-Wabi} can also be used with an explicit version number to\n warn about compatibility with a particular @option{-fabi-version}\n-level, e.g. @option{-Wabi=2} to warn about changes relative to\n+level, e.g.@: @option{-Wabi=2} to warn about changes relative to\n @option{-fabi-version=2}.\n \n If an explicit version number is provided and\n@@ -5288,7 +5288,7 @@ void store (int *i)\n @item -Wmaybe-uninitialized\n @opindex Wmaybe-uninitialized\n @opindex Wno-maybe-uninitialized\n-For an automatic (i.e.@ local) variable, if there exists a path from the\n+For an automatic (i.e.@: local) variable, if there exists a path from the\n function entry to a use of the variable that is initialized, but there exist\n some other paths for which the variable is not initialized, the compiler\n emits a warning if it cannot prove the uninitialized paths are not\n@@ -6444,7 +6444,7 @@ Warn when a function pointer is cast to an incompatible function pointer.\n In a cast involving function types with a variable argument list only\n the types of initial arguments that are provided are considered.\n Any parameter of pointer-type matches any other pointer-type.  Any benign\n-differences in integral types are ignored, like @code{int} vs. @code{long}\n+differences in integral types are ignored, like @code{int} vs.@: @code{long}\n on ILP32 targets.  Likewise type qualifiers are ignored.  The function\n type @code{void (*) (void)} is special and matches everything, which can\n be used to suppress this warning.\n@@ -6733,7 +6733,7 @@ the element size.  This warning is enabled by @option{-Wall}.\n @opindex Wmemset-transposed-args\n @opindex Wno-memset-transposed-args\n Warn for suspicious calls to the @code{memset} built-in function, if the\n-second argument is not zero and the third argument is zero.  This warns e.g.@\n+second argument is not zero and the third argument is zero.  This warns e.g.@:\n about @code{memset (buf, sizeof buf, 0)} where most probably\n @code{memset (buf, 0, sizeof buf)} was meant instead.  The diagnostics\n is only emitted if the third argument is literal zero.  If it is some\n@@ -8067,7 +8067,7 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -foptimize-strlen\n @opindex foptimize-strlen\n-Optimize various standard C string functions (e.g. @code{strlen},\n+Optimize various standard C string functions (e.g.@: @code{strlen},\n @code{strchr} or @code{strcpy}) and\n their @code{_FORTIFY_SOURCE} counterparts into faster alternatives.\n \n@@ -8379,7 +8379,7 @@ This option is enabled by default.\n @item -funconstrained-commons\n @opindex funconstrained-commons\n This option tells the compiler that variables declared in common blocks\n-(e.g. Fortran) may later be overridden with longer trailing arrays. This\n+(e.g.@: Fortran) may later be overridden with longer trailing arrays. This\n prevents certain optimizations that depend on knowing the array bounds.\n \n @item -fcrossjumping\n@@ -8506,7 +8506,7 @@ the object is destroyed.  Normally dead store elimination will take\n advantage of this; if your code relies on the value of the object\n storage persisting beyond the lifetime of the object, you can use this\n flag to disable this optimization.  To preserve stores before the\n-constructor starts (e.g. because your operator new clears the object\n+constructor starts (e.g.@: because your operator new clears the object\n storage) but still treat the object as dead after the destructor you,\n can use @option{-flifetime-dse=1}.  The default behavior can be\n explicitly selected with @option{-flifetime-dse=2}.\n@@ -10832,7 +10832,7 @@ for analysis of the number of iterations of the loop tries to evaluate.\n \n @item hot-bb-count-ws-permille\n A basic block profile count is considered hot if it contributes to \n-the given permillage (i.e. 0...1000) of the entire profiled execution.\n+the given permillage (i.e.@: 0...1000) of the entire profiled execution.\n \n @item hot-bb-frequency-fraction\n Select fraction of the entry block frequency of executions of basic block in\n@@ -10848,7 +10848,7 @@ loop without bounds appears artificially cold relative to the other one.\n \n @item builtin-expect-probability\n Control the probability of the expression having the specified value. This\n-parameter takes a percentage (i.e. 0 ... 100) as input.\n+parameter takes a percentage (i.e.@: 0 ... 100) as input.\n \n @item builtin-string-cmp-inline-length\n The maximum length of a constant string for a builtin string cmp call \n@@ -11206,7 +11206,7 @@ enable the compiler to find more complex debug expressions, but compile\n time and memory use may grow.\n \n @item max-debug-marker-count\n-Sets a threshold on the number of debug markers (e.g. begin stmt\n+Sets a threshold on the number of debug markers (e.g.@: begin stmt\n markers) to avoid complexity explosion at inlining or expanding to RTL.\n If a function has more such gimple stmts than the set limit, such stmts\n will be dropped from the inlined copy of a function, and from its RTL\n@@ -12133,7 +12133,7 @@ call/jmp-oriented programming (COP/JOP).\n \n The value @code{branch} tells the compiler to implement checking of\n validity of control-flow transfer at the point of indirect branch\n-instructions, i.e. call/jmp instructions.  The value @code{return}\n+instructions, i.e.@: call/jmp instructions.  The value @code{return}\n implements checking of validity at the point of returning from a\n function.  The value @code{full} is an alias for specifying both\n @code{branch} and @code{return}. The value @code{none} turns off\n@@ -12560,7 +12560,7 @@ binary. In this case @option{-fpic} and @option{-fpie} are both disabled.\n If @var{type} is @samp{dyn} the code generation is configured to produce shared\n library. In this case @option{-fpic} or @option{-fPIC} is preserved, but not\n enabled automatically.  This makes it possible to build shared libraries without\n-position independent code on architectures this is possible, i.e. on x86.\n+position independent code on architectures this is possible, i.e.@: on x86.\n \n If @var{type} is @samp{pie} the code generation is configured to produce\n @option{-fpie} executable. This result in similar optimizations as @samp{exec}\n@@ -16056,7 +16056,7 @@ the case.\n @opindex mlra\n Enable Local Register Allocation.  This is still experimental for ARC,\n so by default the compiler uses standard reload\n-(i.e. @option{-mno-lra}).\n+(i.e.@: @option{-mno-lra}).\n \n @item -mlra-priority-none\n @opindex mlra-priority-none\n@@ -16853,7 +16853,7 @@ compiler to select the floating-point and Advanced SIMD instructions\n based on the settings of @option{-mcpu} and @option{-march}.\n \n If the selected floating-point hardware includes the NEON extension\n-(e.g. @option{-mfpu=neon}), note that floating-point\n+(e.g.@: @option{-mfpu=neon}), note that floating-point\n operations are not generated by GCC's auto-vectorization pass unless\n @option{-funsafe-math-optimizations} is also specified.  This is\n because NEON hardware does not fully implement the IEEE 754 standard for\n@@ -17039,7 +17039,7 @@ this option and always use the original scheme.\n \n @item -mword-relocations\n @opindex mword-relocations\n-Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32).\n+Only generate absolute relocations on word-sized values (i.e.@: R_ARM_ABS32).\n This is enabled by default on targets (uClinux, SymbianOS) where the runtime\n loader imposes this restriction, and when @option{-fpic} or @option{-fPIC}\n is specified. This option conflicts with @option{-mslow-flash-data}.\n@@ -17292,7 +17292,7 @@ resulting address space is not contained in the incoming address space.\n @item -Wmisspelled-isr\n @opindex Wmisspelled-isr\n @opindex Wno-misspelled-isr\n-Warn if the ISR is misspelled, i.e. without __vector prefix.\n+Warn if the ISR is misspelled, i.e.@: without __vector prefix.\n Enabled by default.\n @end table\n \n@@ -22656,7 +22656,7 @@ when linking.  This option is only useful in conjunction with @option{-mhal}.\n @opindex msys-lib\n @var{systemlib} is the library name of the library that provides\n low-level system calls required by the C library,\n-e.g. @code{read} and @code{write}.\n+e.g.@: @code{read} and @code{write}.\n This option is typically used to link with a library provided by a HAL BSP.\n \n @end table\n@@ -22678,7 +22678,7 @@ Generate code for 32-bit or 64-bit ABI.\n \n @item -misa=@var{ISA-string}\n @opindex march\n-Generate code for given the specified PTX ISA (e.g.@ @samp{sm_35}).  ISA\n+Generate code for given the specified PTX ISA (e.g.@: @samp{sm_35}).  ISA\n strings must be lower-case.  Valid ISA strings include @samp{sm_30} and\n @samp{sm_35}.  The default ISA is sm_30.\n \n@@ -23703,7 +23703,7 @@ these instructions.\n \n @item -march=@var{ISA-string}\n @opindex march\n-Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n+Generate code for given RISC-V ISA (e.g.@: @samp{rv64im}).  ISA strings must be\n lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, @samp{rv32e}, and\n @samp{rv32imaf}.\n \n@@ -25352,7 +25352,7 @@ facility introduced with the IBM z13 machine generation.\n This option adds support for @samp{vector} to be used as a keyword to\n define vector type variables and arguments.  @samp{vector} is only\n available when GNU extensions are enabled.  It will not be expanded\n-when requesting strict standard compliance e.g. with @option{-std=c99}.\n+when requesting strict standard compliance e.g.@: with @option{-std=c99}.\n In addition to the GCC low-level builtins @option{-mzvector} enables\n a set of builtins added for compatibility with AltiVec-style\n implementations like Power and Cell.  In order to make use of these\n@@ -25723,7 +25723,7 @@ can be overridden by specifying either @option{-mieee} or @option{-mno-ieee}.\n Inline code to invalidate instruction cache entries after setting up\n nested function trampolines.\n This option has no effect if @option{-musermode} is in effect and the selected\n-code generation option (e.g. @option{-m4}) does not allow the use of the @code{icbi}\n+code generation option (e.g.@: @option{-m4}) does not allow the use of the @code{icbi}\n instruction.\n If the selected code generation option does not allow the use of the @code{icbi}\n instruction, and @option{-musermode} is not in effect, the inlined code\n@@ -26983,7 +26983,7 @@ These @samp{-m} options are defined for the VMS implementations:\n @item -mvms-return-codes\n @opindex mvms-return-codes\n Return VMS condition codes from @code{main}. The default is to return POSIX-style\n-condition (e.g.@ error) codes.\n+condition (e.g.@: error) codes.\n \n @item -mdebug-main=@var{prefix}\n @opindex mdebug-main=@var{prefix}\n@@ -28092,7 +28092,7 @@ are generated only when @option{-funsafe-math-optimizations} is enabled\n together with @option{-ffinite-math-only} and @option{-fno-trapping-math}.\n Note that while the throughput of the sequence is higher than the throughput\n of the non-reciprocal instruction, the precision of the sequence can be\n-decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).\n+decreased by up to 2 ulp (i.e.@: the inverse of 1.0 equals 0.99999994).\n \n Note that GCC implements @code{1.0f/sqrtf(@var{x})} in terms of @code{RSQRTSS}\n (or @code{RSQRTPS}) already with @option{-ffast-math} (or the above option"}, {"sha": "4c7d65c5c7a927f8a27a631fb74aeec40fc84962", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -2021,7 +2021,7 @@ B register\n M register\n \n @item c\n-Registers used for circular buffering, i.e. I, B, or L registers.\n+Registers used for circular buffering, i.e.@: I, B, or L registers.\n \n @item C\n The CC register.\n@@ -4095,7 +4095,7 @@ Second from top of 80387 floating-point stack (@code{%st(1)}).\n \n @ifset INTERNALS\n @item Yk\n-Any mask register that can be used as a predicate, i.e. @code{k1-k7}.\n+Any mask register that can be used as a predicate, i.e.@: @code{k1-k7}.\n \n @item k\n Any mask register.\n@@ -5234,7 +5234,7 @@ calculations.  The expanded code is not allowed to clobber the\n condition code.  It only needs to be defined if @code{add@var{m}3}\n sets the condition code.  If adds used for address calculations and\n normal adds are not compatible it is required to expand a distinct\n-pattern (e.g. using an unspec).  The pattern is used by LRA to emit\n+pattern (e.g.@: using an unspec).  The pattern is used by LRA to emit\n address calculations.  @code{add@var{m}3} is used if\n @code{addptr@var{m}3} is not defined.\n \n@@ -5382,15 +5382,15 @@ of a wider mode.)\n \n @cindex @code{vec_shl_insert_@var{m}} instruction pattern\n @item @samp{vec_shl_insert_@var{m}}\n-Shift the elements in vector input operand 1 left one element (i.e.\n+Shift the elements in vector input operand 1 left one element (i.e.@:\n away from element 0) and fill the vacated element 0 with the scalar\n in operand 2.  Store the result in vector output operand 0.  Operands\n 0 and 1 have mode @var{m} and operand 2 has the mode appropriate for\n one element of @var{m}.\n \n @cindex @code{vec_shr_@var{m}} instruction pattern\n @item @samp{vec_shr_@var{m}}\n-Whole vector right shift in bits, i.e. towards element 0.\n+Whole vector right shift in bits, i.e.@: towards element 0.\n Operand 1 is a vector to be shifted.\n Operand 2 is an integer shift amount in bits.\n Operand 0 is where the resulting shifted vector is stored.\n@@ -6159,8 +6159,9 @@ all cases. This expected alignment is also in bytes, just like operand 4.\n Expected size, when unknown, is set to @code{(const_int -1)}.\n Operand 7 is the minimal size of the block and operand 8 is the\n maximal size of the block (NULL if it can not be represented as CONST_INT).\n-Operand 9 is the probable maximal size (i.e. we can not rely on it for correctness,\n-but it can be used for choosing proper code sequence for a given size).\n+Operand 9 is the probable maximal size (i.e.@: we can not rely on it for\n+correctness, but it can be used for choosing proper code sequence for a\n+given size).\n \n The use for multiple @code{setmem@var{m}} is as for @code{movmem@var{m}}.\n \n@@ -7543,8 +7544,8 @@ more flexible approach with one @code{define_expand} is used in GCC.\n The machine description becomes clearer for architectures that\n have compare-and-branch instructions but no condition code.  It also\n works better when different sets of comparison operators are supported\n-by different kinds of conditional branches (e.g. integer vs. floating-point),\n-or by conditional branches with respect to conditional stores.\n+by different kinds of conditional branches (e.g.@: integer vs.@:\n+floating-point), or by conditional branches with respect to conditional stores.\n \n Two separate insns are always used if the machine description represents\n a condition code register using the legacy RTL expression @code{(cc0)},\n@@ -8881,7 +8882,7 @@ generation. @xref{Disable Insn Alternatives}.\n \n @item mnemonic\n The @code{mnemonic} attribute can be defined to implement instruction\n-specific checks in e.g. the pipeline description.\n+specific checks in e.g.@: the pipeline description.\n @xref{Mnemonic Attribute}.\n @end table\n \n@@ -10214,7 +10215,7 @@ input-template of the @code{define_subst}.  In such case the copy is\n deleted.\n \n @code{define_subst} can be used only in @code{define_insn} and\n-@code{define_expand}, it cannot be used in other expressions (e.g. in\n+@code{define_expand}, it cannot be used in other expressions (e.g.@: in\n @code{define_insn_and_split}).\n \n @menu"}, {"sha": "51c88af5ac69728ab1460e0f647dac0f3ffbca93", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -331,7 +331,7 @@ used to tell if an object is marked, or is about to  be collected.  The\n @code{gt_clear_cache} overloads which some types define may also be of use in\n managing weak references.\n \n-Some plugins may need to add extra GGC root tables, e.g. to handle their own\n+Some plugins may need to add extra GGC root tables, e.g.@: to handle their own\n @code{GTY}-ed data. This can be done with the @code{PLUGIN_REGISTER_GGC_ROOTS}\n pseudo-event with a null callback and the extra root table (of type @code{struct\n ggc_root_tab*}) as @code{user_data}.  Running the\n@@ -471,7 +471,7 @@ When a pass is first added to one of the pass lists, the event\n @section Building GCC plugins\n \n If plugins are enabled, GCC installs the headers needed to build a\n-plugin (somewhere in the installation tree, e.g. under\n+plugin (somewhere in the installation tree, e.g.@: under\n @file{/usr/local}).  In particular a @file{plugin/include} directory\n is installed, containing all the header files needed to build plugins.\n "}, {"sha": "ac8062d3e93e32ecb9e3a008b6e4b7d37a2294c2", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -1806,7 +1806,7 @@ CONST_VECTOR_NELTS_PER_PATTERN (@var{v}) == 3\n Thus the first 6 elements (@samp{@{ 0, 1, 2, 6, 3, 8 @}}) are enough\n to determine the whole sequence; we refer to them as the ``encoded''\n elements.  They are the only elements present in the square brackets\n-for variable-length @code{const_vector}s (i.e. for\n+for variable-length @code{const_vector}s (i.e.@: for\n @code{const_vector}s whose mode @var{m} has a variable number of\n elements).  However, as a convenience to code that needs to handle\n both @code{const_vector}s and @code{parallel}s, all elements are\n@@ -3417,7 +3417,7 @@ side-effects.\n @item (sequence [@var{insns} @dots{}])\n Represents a sequence of insns.  If a @code{sequence} appears in the\n chain of insns, then each of the @var{insns} that appears in the sequence\n-must be suitable for appearing in the chain of insns, i.e. must satisfy\n+must be suitable for appearing in the chain of insns, i.e.@: must satisfy\n the @code{INSN_P} predicate.\n \n After delay-slot scheduling is completed, an insn and all the insns that"}, {"sha": "3fdf5e331c4ddd9caad8a17316af1fb988bd5f63", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -66,7 +66,7 @@ include it in @code{libc}.\n The Ada runtime library.\n \n @item libatomic\n-The runtime support library for atomic operations (e.g. for @code{__sync}\n+The runtime support library for atomic operations (e.g.@: for @code{__sync}\n and @code{__atomic}).\n \n @item libcpp\n@@ -2111,7 +2111,7 @@ Target uses a dummy @code{wcsftime} function that always returns zero.\n \n @item fd_truncate\n Target can truncate a file from a file descriptor, as used by\n-@file{libgfortran/io/unix.c:fd_truncate}; i.e. @code{ftruncate} or\n+@file{libgfortran/io/unix.c:fd_truncate}; i.e.@: @code{ftruncate} or\n @code{chsize}.\n \n @item freestanding\n@@ -2159,8 +2159,8 @@ time) should be run on this target.  This can be enabled by setting the\n @env{GCC_TEST_RUN_EXPENSIVE} environment variable to a non-empty string.\n \n @item simulator\n-Test system runs executables on a simulator (i.e. slowly) rather than\n-hardware (i.e. fast).\n+Test system runs executables on a simulator (i.e.@: slowly) rather than\n+hardware (i.e.@: fast).\n \n @item signal\n Target has @code{signal.h}.\n@@ -3221,7 +3221,7 @@ bb_5:\n \n The @code{startwith} argument indicates at which pass to begin.\n \n-Use the dump modifier @code{-gimple} (e.g. @option{-fdump-tree-all-gimple})\n+Use the dump modifier @code{-gimple} (e.g.@: @option{-fdump-tree-all-gimple})\n to make tree dumps more closely follow the format accepted by the GIMPLE\n parser.\n "}, {"sha": "54ca518349367df709e0eca8da75730b05294fdc", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -1086,7 +1086,7 @@ the default value is @code{BIGGEST_ALIGNMENT}.\n \n On systems that use ELF, the default (in @file{config/elfos.h}) is\n the largest supported 32-bit ELF section alignment representable on\n-a 32-bit host e.g. @samp{(((uint64_t) 1 << 28) * 8)}.\n+a 32-bit host e.g.@: @samp{(((uint64_t) 1 << 28) * 8)}.\n On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n@@ -5086,7 +5086,7 @@ The hook is used for options that have a non-trivial list of possible option val\n Set to true if each call that binds to a local definition explicitly\n clobbers or sets all non-fixed registers modified by performing the call.\n That is, by the call pattern itself, or by code that might be inserted by the\n-linker (e.g. stubs, veneers, branch islands), but not including those\n+linker (e.g.@: stubs, veneers, branch islands), but not including those\n modifiable by the callee.  The affected registers may be mentioned explicitly\n in the call pattern, or included as clobbers in CALL_INSN_FUNCTION_USAGE.\n The default version of this hook is set to false.  The purpose of this hook\n@@ -6319,7 +6319,7 @@ bit) are not set in the same way as a test instruction, so that a different\n branch instruction must be used for some conditional branches.  When\n this happens, use the machine mode of the condition code register to\n record different formats of the condition code register.  Modes can\n-also be used to record which compare instruction (e.g. a signed or an\n+also be used to record which compare instruction (e.g.@: a signed or an\n unsigned comparison) produced the condition codes.\n \n If other modes than @code{CCmode} are required, add them to\n@@ -6586,7 +6586,7 @@ other fields in the same word of the structure, but to different bytes.\n This hook returns true if memory accesses described by the\n @var{mode} and @var{alignment} parameters have a cost many times greater\n than aligned accesses, for example if they are emulated in a trap handler.\n-This hook is invoked only for unaligned accesses, i.e. when\n+This hook is invoked only for unaligned accesses, i.e.@: when\n @code{@var{alignment} < GET_MODE_ALIGNMENT (@var{mode})}.\n \n When this hook returns true, the compiler will act as if\n@@ -10075,7 +10075,7 @@ A C statement to issue assembly directives that create a difference\n \n @defmac ASM_OUTPUT_DWARF_VMS_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n A C statement to issue assembly directives that create a difference\n-between the two given labels in system defined units, e.g. instruction\n+between the two given labels in system defined units, e.g.@: instruction\n slots on IA64 VMS, using an integer of the given size.\n @end defmac\n \n@@ -11939,7 +11939,7 @@ memory model bits are allowed.\n @end deftypefn\n \n @deftypevr {Target Hook} {unsigned char} TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n-This value should be set if the result written by @code{atomic_test_and_set} is not exactly 1, i.e. the @code{bool} @code{true}.\n+This value should be set if the result written by @code{atomic_test_and_set} is not exactly 1, i.e.@: the @code{bool} @code{true}.\n @end deftypevr\n \n @deftypefn {Target Hook} bool TARGET_HAS_IFUNC_P (void)"}, {"sha": "e8af1bfa2c100f977da2ecd938304e42477d3ae3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -1032,7 +1032,7 @@ the default value is @code{BIGGEST_ALIGNMENT}.\n \n On systems that use ELF, the default (in @file{config/elfos.h}) is\n the largest supported 32-bit ELF section alignment representable on\n-a 32-bit host e.g. @samp{(((uint64_t) 1 << 28) * 8)}.\n+a 32-bit host e.g.@: @samp{(((uint64_t) 1 << 28) * 8)}.\n On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n@@ -4370,7 +4370,7 @@ bit) are not set in the same way as a test instruction, so that a different\n branch instruction must be used for some conditional branches.  When\n this happens, use the machine mode of the condition code register to\n record different formats of the condition code register.  Modes can\n-also be used to record which compare instruction (e.g. a signed or an\n+also be used to record which compare instruction (e.g.@: a signed or an\n unsigned comparison) produced the condition codes.\n \n If other modes than @code{CCmode} are required, add them to\n@@ -6989,7 +6989,7 @@ A C statement to issue assembly directives that create a difference\n \n @defmac ASM_OUTPUT_DWARF_VMS_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n A C statement to issue assembly directives that create a difference\n-between the two given labels in system defined units, e.g. instruction\n+between the two given labels in system defined units, e.g.@: instruction\n slots on IA64 VMS, using an integer of the given size.\n @end defmac\n "}, {"sha": "3b395f24df12409b3c743bad17c186911911a0ba", "filename": "gcc/doc/ux.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fux.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Fdoc%2Fux.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fux.texi?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -143,7 +143,7 @@ user's source code.  Examples include:\n   at the declaration\n \n   @item\n-  something is erroneously duplicated (e.g. an error, due to breaking a\n+  something is erroneously duplicated (e.g.@: an error, due to breaking a\n   uniqueness requirement, or a warning, if it's suggestive of a bug)\n \n   @item\n@@ -545,7 +545,7 @@ hints, rather than replacement fix-it hints.  For example, consider this:\n @end smallexample\n \n @noindent\n-which is intended to e.g. replace a @code{std::move} with the underlying\n+which is intended to e.g.@: replace a @code{std::move} with the underlying\n value:\n \n @smallexample"}, {"sha": "4b166d150ca5d9b5efdc31c5be342555a7f9215c", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ba2fd94b7ceffa43d461020587750c47bf2aa/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=630ba2fd94b7ceffa43d461020587750c47bf2aa", "patch": "@@ -3552,7 +3552,7 @@ DEFHOOK\n  \"This hook returns true if memory accesses described by the\\n\\\n @var{mode} and @var{alignment} parameters have a cost many times greater\\n\\\n than aligned accesses, for example if they are emulated in a trap handler.\\n\\\n-This hook is invoked only for unaligned accesses, i.e. when\\n\\\n+This hook is invoked only for unaligned accesses, i.e.@: when\\n\\\n @code{@var{alignment} < GET_MODE_ALIGNMENT (@var{mode})}.\\n\\\n \\n\\\n When this hook returns true, the compiler will act as if\\n\\\n@@ -6303,7 +6303,7 @@ DEFHOOKPOD\n  \"Set to true if each call that binds to a local definition explicitly\\n\\\n clobbers or sets all non-fixed registers modified by performing the call.\\n\\\n That is, by the call pattern itself, or by code that might be inserted by the\\n\\\n-linker (e.g. stubs, veneers, branch islands), but not including those\\n\\\n+linker (e.g.@: stubs, veneers, branch islands), but not including those\\n\\\n modifiable by the callee.  The affected registers may be mentioned explicitly\\n\\\n in the call pattern, or included as clobbers in CALL_INSN_FUNCTION_USAGE.\\n\\\n The default version of this hook is set to false.  The purpose of this hook\\n\\\n@@ -6465,7 +6465,7 @@ defined to 1.\",\n DEFHOOKPOD\n (atomic_test_and_set_trueval,\n  \"This value should be set if the result written by\\\n- @code{atomic_test_and_set} is not exactly 1, i.e. the\\\n+ @code{atomic_test_and_set} is not exactly 1, i.e.@: the\\\n  @code{bool} @code{true}.\",\n  unsigned char, 1)\n "}]}