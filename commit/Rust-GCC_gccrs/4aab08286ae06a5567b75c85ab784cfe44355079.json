{"sha": "4aab08286ae06a5567b75c85ab784cfe44355079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhYjA4Mjg2YWUwNmE1NTY3Yjc1Yzg1YWI3ODRjZmU0NDM1NTA3OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-23T17:25:42Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-23T17:25:42Z"}, "message": "PR c++/88757 - qualified name treated wrongly as type.\n\n\t* parser.c (cp_parser_direct_declarator): don't treat qualified-ids\n\tin parameter-list as types if name lookup for declarator-id didn't\n\tfind one or more function templates.\n\n\t* g++.dg/cpp0x/dependent2.c: new test.\n\t* g++.dg/cpp2a/typename10.c: remove dg-error.\n\t* g++.dg/cpp2a/typename12.c: new test.\n\t* g++.dg/template/static30.c: remove dg-error.\n\nFrom-SVN: r268192", "tree": {"sha": "def2b98b57824fb355185520514370b3485c6791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def2b98b57824fb355185520514370b3485c6791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aab08286ae06a5567b75c85ab784cfe44355079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab08286ae06a5567b75c85ab784cfe44355079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aab08286ae06a5567b75c85ab784cfe44355079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab08286ae06a5567b75c85ab784cfe44355079/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6770fa53f9debd0cced4b1016c8e388512859ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6770fa53f9debd0cced4b1016c8e388512859ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6770fa53f9debd0cced4b1016c8e388512859ee3"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "58acbf0a24148cbfc73cc4035b04ab1a3e8a8256", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -1,3 +1,10 @@\n+2019-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88757 - qualified name treated wrongly as type.\n+\t* parser.c (cp_parser_direct_declarator): Don't treat qualified-ids\n+\tin parameter-list as types if name lookup for declarator-id didn't\n+\tfind one or more function templates.\n+\n 2019-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/44715"}, {"sha": "dc9d651308a04313fb6ebc39c35481d5d891ab25", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -21098,6 +21098,33 @@ cp_parser_direct_declarator (cp_parser* parser,\n \n \t    if (pack_expansion_p)\n \t      maybe_warn_variadic_templates ();\n+\n+\t    /* We're looking for this case in [temp.res]:\n+\t       A qualified-id is assumed to name a type if [...]\n+\t       - it is a decl-specifier of the decl-specifier-seq of a\n+\t\t parameter-declaration in a declarator of a function or\n+\t\t function template declaration, ... */\n+\t    if (cxx_dialect >= cxx2a\n+\t\t&& (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL)\n+\t\t&& declarator->kind == cdk_id\n+\t\t/* ...whose declarator-id is qualified.  */\n+\t\t&& qualifying_scope != NULL_TREE\n+\t\t&& !at_class_scope_p ()\n+\t\t&& cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n+\t      {\n+\t\t/* Now we have something like\n+\t\t   template <typename T> int C::x(S::p);\n+\t\t   which can be a function template declaration or a\n+\t\t   variable template definition.  If name lookup for\n+\t\t   the declarator-id C::x finds one or more function\n+\t\t   templates, assume S::p to name a type.  Otherwise,\n+\t\t   don't.  */\n+\t\ttree decl\n+\t\t  = cp_parser_lookup_name_simple (parser, unqualified_name,\n+\t\t\t\t\t\t  token->location);\n+\t\tif (!is_overloaded_fn (decl))\n+\t\t  flags &= ~CP_PARSER_FLAGS_TYPENAME_OPTIONAL;\n+\t      }\n \t  }\n \n \thandle_declarator:;"}, {"sha": "b0b1afa9cf04fbb45cb2985bc7f44210877fa4ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -1,3 +1,11 @@\n+2019-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88757 - qualified name treated wrongly as type.\n+\t* g++.dg/cpp0x/dependent2.C: New test.\n+\t* g++.dg/cpp2a/typename10.C: Remove dg-error.\n+\t* g++.dg/cpp2a/typename12.C: New test.\n+\t* g++.dg/template/static30.C: Remove dg-error.\n+\n 2019-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/44715"}, {"sha": "a0740d404a3516b7c0703eee1af90e9d0184af0f", "filename": "gcc/testsuite/g++.dg/cpp0x/dependent2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent2.C?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/88757\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> struct C {\n+    static int x;\n+};\n+template <class U> struct S {\n+    static const int size = 1;\n+};\n+template <class T> int C<T>::x(S<T>::size);"}, {"sha": "1413268ba16f4c637a88ce8dbac56db46d565dcb", "filename": "gcc/testsuite/g++.dg/cpp2a/typename10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -11,7 +11,7 @@ namespace N2 {\n   template<typename T> extern T::type v; // #1a\n   //template<typename T> T::type v(typename T::value); // #1b\n }\n-template<typename T> T::type N2::v(T::value); // { dg-error \"\" }\n+template<typename T> T::type N2::v(T::value);\n \n namespace A {\n   inline namespace B { template<typename T> int f(typename T::foo); }"}, {"sha": "97962e53d65edb46b6388794c0ecbb017b650596", "filename": "gcc/testsuite/g++.dg/cpp2a/typename12.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename12.C?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -0,0 +1,20 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+struct W {\n+  template<typename T>\n+  static int fn1 (T::X);\n+  template<typename T>\n+  static int fn2 (T::X);\n+  template<typename T>\n+  static int fn2 (T::X, int);\n+};\n+\n+template<typename T>\n+int W::fn1 (T::X p) { return p; }\n+\n+template<typename T>\n+int W::fn2 (T::X p) { return p; }\n+\n+template<typename T>\n+int fn2 (typename T::X p) { return p; }"}, {"sha": "07dafe23ffaab29f8d84df3caebef01bcb6393f4", "filename": "gcc/testsuite/g++.dg/template/static30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab08286ae06a5567b75c85ab784cfe44355079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C?ref=4aab08286ae06a5567b75c85ab784cfe44355079", "patch": "@@ -6,5 +6,5 @@ template <int> struct A\n   static const int i2;\n };\n \n-template <int N> const int A<N>::i1(A<N>::i); // { dg-error \"no declaration matches\" \"\" { target c++2a } }\n+template <int N> const int A<N>::i1(A<N>::i);\n template <int N> const int A<N>::i2(3, A<N>::i); // { dg-error \"expression list\" }"}]}