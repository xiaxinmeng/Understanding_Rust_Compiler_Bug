{"sha": "176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2Y2I1NjhkYzZmZDc3MGNjZjMxYTk5YzE1YzBiMzE3ZDFlYzFjYg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-22T00:44:20Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-22T00:44:20Z"}, "message": "remove more ifdef HAVE_cc0\n\ngcc/ChangeLog:\n\n2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* combine.c (find_single_use): Remove HAVE_cc0 ifdef for code\n\tthat is trivially ded on non cc0 targets.\n\t(simplify_set): Likewise.\n\t(mark_used_regs_combine): Likewise.\n\t* cse.c (new_basic_block): Likewise.\n\t(fold_rtx): Likewise.\n\t(cse_insn): Likewise.\n\t(cse_extended_basic_block): Likewise.\n\t(set_live_p): Likewise.\n\t* rtlanal.c (canonicalize_condition): Likewise.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n\nFrom-SVN: r222295", "tree": {"sha": "5afe24eb4c7708ff27bd15ed8eebe837b174c982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5afe24eb4c7708ff27bd15ed8eebe837b174c982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/comments", "author": null, "committer": null, "parents": [{"sha": "8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a90eeb6a839e92d0ae6800cb4ba25ca864b0076"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "9d51cd6f6a2c2430f00d532ddbb9fab2d81ad85e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "patch": "@@ -1,3 +1,17 @@\n+2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* combine.c (find_single_use): Remove HAVE_cc0 ifdef for code\n+\tthat is trivially ded on non cc0 targets.\n+\t(simplify_set): Likewise.\n+\t(mark_used_regs_combine): Likewise.\n+\t* cse.c (new_basic_block): Likewise.\n+\t(fold_rtx): Likewise.\n+\t(cse_insn): Likewise.\n+\t(cse_extended_basic_block): Likewise.\n+\t(set_live_p): Likewise.\n+\t* rtlanal.c (canonicalize_condition): Likewise.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\n 2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* conditions.h: Define macros even if HAVE_cc0 is undefined."}, {"sha": "0a35b8f5300d5e354d3d7f1c027ce99c8277e6ed", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "patch": "@@ -686,7 +686,6 @@ find_single_use (rtx dest, rtx_insn *insn, rtx_insn **ploc)\n   rtx *result;\n   struct insn_link *link;\n \n-#ifdef HAVE_cc0\n   if (dest == cc0_rtx)\n     {\n       next = NEXT_INSN (insn);\n@@ -699,7 +698,6 @@ find_single_use (rtx dest, rtx_insn *insn, rtx_insn **ploc)\n \t*ploc = next;\n       return result;\n     }\n-#endif\n \n   if (!REG_P (dest))\n     return 0;\n@@ -6724,7 +6722,6 @@ simplify_set (rtx x)\n       src = SET_SRC (x), dest = SET_DEST (x);\n     }\n \n-#ifdef HAVE_cc0\n   /* If we have (set (cc0) (subreg ...)), we try to remove the subreg\n      in SRC.  */\n   if (dest == cc0_rtx\n@@ -6744,7 +6741,6 @@ simplify_set (rtx x)\n \t  src = SET_SRC (x);\n \t}\n     }\n-#endif\n \n #ifdef LOAD_EXTEND_OP\n   /* If we have (set FOO (subreg:M (mem:N BAR) 0)) with M wider than N, this\n@@ -13193,11 +13189,9 @@ mark_used_regs_combine (rtx x)\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n     case ASM_INPUT:\n-#ifdef HAVE_cc0\n     /* CC0 must die in the insn after it is set, so we don't need to take\n        special note of it here.  */\n     case CC0:\n-#endif\n       return;\n \n     case CLOBBER:"}, {"sha": "ef5eb8cebeff3ae1fa275509cfc2440c70401b8e", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "patch": "@@ -281,7 +281,6 @@ struct qty_table_elem\n /* The table of all qtys, indexed by qty number.  */\n static struct qty_table_elem *qty_table;\n \n-#ifdef HAVE_cc0\n /* For machines that have a CC0, we do not record its value in the hash\n    table since its use is guaranteed to be the insn immediately following\n    its definition and any other insn is presumed to invalidate it.\n@@ -293,7 +292,6 @@ static struct qty_table_elem *qty_table;\n \n static rtx this_insn_cc0, prev_insn_cc0;\n static machine_mode this_insn_cc0_mode, prev_insn_cc0_mode;\n-#endif\n \n /* Insn being scanned.  */\n \n@@ -884,9 +882,7 @@ new_basic_block (void)\n \t}\n     }\n \n-#ifdef HAVE_cc0\n   prev_insn_cc0 = 0;\n-#endif\n }\n \n /* Say that register REG contains a quantity in mode MODE not in any\n@@ -3175,10 +3171,8 @@ fold_rtx (rtx x, rtx_insn *insn)\n     case EXPR_LIST:\n       return x;\n \n-#ifdef HAVE_cc0\n     case CC0:\n       return prev_insn_cc0;\n-#endif\n \n     case ASM_OPERANDS:\n       if (insn)\n@@ -3232,7 +3226,6 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t    const_arg = folded_arg;\n \t    break;\n \n-#ifdef HAVE_cc0\n \t  case CC0:\n \t    /* The cc0-user and cc0-setter may be in different blocks if\n \t       the cc0-setter potentially traps.  In that case PREV_INSN_CC0\n@@ -3256,7 +3249,6 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t\tconst_arg = equiv_constant (folded_arg);\n \t      }\n \t    break;\n-#endif\n \n \t  default:\n \t    folded_arg = fold_rtx (folded_arg, insn);\n@@ -4531,11 +4523,9 @@ cse_insn (rtx_insn *insn)\n     sets = XALLOCAVEC (struct set, XVECLEN (x, 0));\n \n   this_insn = insn;\n-#ifdef HAVE_cc0\n   /* Records what this insn does to set CC0.  */\n   this_insn_cc0 = 0;\n   this_insn_cc0_mode = VOIDmode;\n-#endif\n \n   /* Find all regs explicitly clobbered in this insn,\n      to ensure they are not replaced with any other regs\n@@ -5550,7 +5540,6 @@ cse_insn (rtx_insn *insn)\n \t    }\n \t}\n \n-#ifdef HAVE_cc0\n       /* If setting CC0, record what it was set to, or a constant, if it\n \t is equivalent to a constant.  If it is being set to a floating-point\n \t value, make a COMPARE with the appropriate constant of 0.  If we\n@@ -5565,7 +5554,6 @@ cse_insn (rtx_insn *insn)\n \t    this_insn_cc0 = gen_rtx_COMPARE (VOIDmode, this_insn_cc0,\n \t\t\t\t\t     CONST0_RTX (mode));\n \t}\n-#endif\n     }\n \n   /* Now enter all non-volatile source expressions in the hash table\n@@ -6613,11 +6601,9 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n \t  record_jump_equiv (insn, taken);\n \t}\n \n-#ifdef HAVE_cc0\n       /* Clear the CC0-tracking related insns, they can't provide\n \t useful information across basic block boundaries.  */\n       prev_insn_cc0 = 0;\n-#endif\n     }\n \n   gcc_assert (next_qty <= max_qty);\n@@ -6868,21 +6854,17 @@ static bool\n set_live_p (rtx set, rtx_insn *insn ATTRIBUTE_UNUSED, /* Only used with HAVE_cc0.  */\n \t    int *counts)\n {\n-#ifdef HAVE_cc0\n   rtx tem;\n-#endif\n \n   if (set_noop_p (set))\n     ;\n \n-#ifdef HAVE_cc0\n   else if (GET_CODE (SET_DEST (set)) == CC0\n \t   && !side_effects_p (SET_SRC (set))\n \t   && ((tem = next_nonnote_nondebug_insn (insn)) == NULL_RTX\n \t       || !INSN_P (tem)\n \t       || !reg_referenced_p (cc0_rtx, PATTERN (tem))))\n     return false;\n-#endif\n   else if (!is_dead_reg (SET_DEST (set), counts)\n \t   || side_effects_p (SET_SRC (set)))\n     return true;"}, {"sha": "2377f25ac88714afed67c67b82517d587eac4dda", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "patch": "@@ -5035,7 +5035,6 @@ canonicalize_condition (rtx_insn *insn, rtx cond, int reverse,\n       /* Set nonzero when we find something of interest.  */\n       rtx x = 0;\n \n-#ifdef HAVE_cc0\n       /* If comparison with cc0, import actual comparison from compare\n \t insn.  */\n       if (op0 == cc0_rtx)\n@@ -5051,7 +5050,6 @@ canonicalize_condition (rtx_insn *insn, rtx cond, int reverse,\n \t  if (earliest)\n \t    *earliest = prev;\n \t}\n-#endif\n \n       /* If this is a COMPARE, pick up the two things being compared.  */\n       if (GET_CODE (op0) == COMPARE)"}, {"sha": "b85ef996e534dc2d3ee1a36e4a3288cac5d58aa8", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176cb568dc6fd770ccf31a99c15c0b317d1ec1cb/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=176cb568dc6fd770ccf31a99c15c0b317d1ec1cb", "patch": "@@ -2180,15 +2180,14 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  rtx xop00 = XEXP (op0, 0);\n \t  rtx xop10 = XEXP (op1, 0);\n \n-#ifdef HAVE_cc0\n \t  if (GET_CODE (xop00) == CC0 && GET_CODE (xop10) == CC0)\n-#else\n+\t      return xop00;\n+\n \t    if (REG_P (xop00) && REG_P (xop10)\n \t\t&& GET_MODE (xop00) == GET_MODE (xop10)\n \t\t&& REGNO (xop00) == REGNO (xop10)\n \t\t&& GET_MODE_CLASS (GET_MODE (xop00)) == MODE_CC\n \t\t&& GET_MODE_CLASS (GET_MODE (xop10)) == MODE_CC)\n-#endif\n \t      return xop00;\n \t}\n       break;"}]}