{"sha": "91a5b3943e8999959d65206ae75ae63d488ffa43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhNWIzOTQzZTg5OTk5NTlkNjUyMDZhZTc1YWU2M2Q0ODhmZmE0Mw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-05-15T16:59:21Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-05-15T16:59:21Z"}, "message": "libgomp.exp: Load torture-options.exp from gcc lib.\n\nlibgomp:\n\t* testsuite/lib/libgomp.exp: Load torture-options.exp from gcc lib.\n\ngcc/doc:\n\t* doc/sourcebuild.texi: Document support for torture tests.\n\ngcc/testsuite:\n\t* lib/torture-options.exp: New support for torture options.\n\t* lib/gfortran-dg.exp (gfortran-dg-runtest): Use new torture\n\tprocs.\n\t* lib/c-torture.exp: Define C_TORTURE_OPTIONS instead of\n\tTORTURE_OPTIONS; don't define torture_with_loops and\n\ttorture_without_loops.\n\t* lib/gcc-dg.exp: Define DG_TORTURE_OPTIONS instead of\n\tTORTURE_OPTIONS; don't define torture_with_loops and\n\ttorture_without_loops.\n\t(gcc-dg-runtest): Use new torture procs if no torture options\n\tdefined.\n\t* lib/fortran-torture.exp: Define FORTRAN_TORTURE_OPTIONS instead of\n\tTORTURE_OPTIONS.\n\t(fortran-torture-execute): Use torture_with_loops instead of\n\tTORTURE_OPTIONS.\n\t(fortran-torture): Ditto.\n\t* lib/objc-torture.exp: Define OBJC_TORTURE_OPTIONS instead of\n\tTORTURE_OPTIONS; don't define torture_with_loops and\n\ttorture_without_loops.\n\t* gcc.c-torture/execute/execute.exp: Use new torture procs.\n\t* gcc.c-torture/execute/builtins/builtins.exp: Ditto.\n\t* gcc.c-torture/execute/ieee/ieee.exp: Ditto.\n\t* gcc.c-torture/unsorted/unsorted.exp: Ditto.\n\t* gfortran.fortran-torture/execute/execute.exp: Ditto.\n\t* gfortran.fortran-torture/compile/compile.exp: Ditto.\n\t* gcc.target/x86_64/abi/abi-x86_64.exp: Ditto.\n\t* gcc.target/i386/math-torture/math-torture.exp: Define\n\tMATH_TORTURE_OPTIONS, use new torture procs.\n\t* gcc.dg/pch/pch.exp: Use new torture procs.\n\t* gcc.dg/format/format.exp: Ditto.\n\t* gcc.misc-tests/i386-prefetch.exp: Ditto.\n\t* gcc.misc-tests/dectest.exp: Ditto.\n\t* objc.dg/pch/pch.exp: Ditto.\n\t* objc/execute/execute.exp: Ditto.\n\t* objc/execute/exceptions/exceptions.exp: Ditto.\n\t* objc/compile/compile.exp: Ditto.\n\nFrom-SVN: r135381", "tree": {"sha": "2ffbd01efc340633337eba4c40af7b02847eb65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ffbd01efc340633337eba4c40af7b02847eb65f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a5b3943e8999959d65206ae75ae63d488ffa43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a5b3943e8999959d65206ae75ae63d488ffa43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a5b3943e8999959d65206ae75ae63d488ffa43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a5b3943e8999959d65206ae75ae63d488ffa43/comments", "author": null, "committer": null, "parents": [{"sha": "3044d369519284bc36ef3f1e15335e34f28c0860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3044d369519284bc36ef3f1e15335e34f28c0860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3044d369519284bc36ef3f1e15335e34f28c0860"}], "stats": {"total": 450, "additions": 341, "deletions": 109}, "files": [{"sha": "579a7c98ef9d465718a53ba53a3cd8b6e00dfe6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -1,3 +1,7 @@\n+2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi: Document support for torture tests.\n+\n 2008-05-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (*vec_concatv2sf_sse4_1): Add \"m\" constraint"}, {"sha": "6c551aa8156217a3adeab93b3c5c38fe63a5aacb", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -822,6 +822,7 @@ here; FIXME: document the others.\n * gcov Testing::    Support for testing gcov.\n * profopt Testing:: Support for testing profile-directed optimizations.\n * compat Testing::  Support for testing binary compatibility.\n+* Torture Tests::   Support for torture testing using multiple options.\n @end menu\n \n @node Test Idioms\n@@ -1531,3 +1532,43 @@ This command can be used in a secondary source file to specify that\n compilation is expected to fail for particular options on particular\n targets.\n @end table\n+\n+@node Torture Tests\n+@subsection Support for torture testing using multiple options\n+\n+Throughout the compiler testsuite there are several directories whose\n+tests are run multiple times, each with a different set of options.\n+These are known as torture tests.\n+@file{gcc/testsuite/lib/torture-options.exp} defines procedures to\n+set up these lists:\n+\n+@table @code\n+@item torture-init\n+Initialize use of torture lists.\n+@item set-torture-options\n+Set lists of torture options to use for tests with and without loops.\n+Optionally combine a set of torture options with a set of other\n+options, as is done with Objective-C runtime options.\n+@item torture-finish\n+Finalize use of torture lists.\n+@end table\n+\n+The @file{.exp} file for a set of tests that use torture options must\n+include calls to these three procecures if:\n+\n+@itemize bullet\n+@item It calls @code{gcc-dg-runtest} and overrides @var{DG_TORTURE_OPTIONS}.\n+\n+@item It calls @var{$@{tool@}}@code{-torture} or\n+@var{$@{tool@}}@code{-torture-execute}, where @var{tool} is @code{c},\n+@code{fortran}, or @code{objc}.\n+\n+@item It calls @code{dg-pch}.\n+@end itemize\n+\n+It is not necessary for a @file{.exp} file that calls @code{gcc-dg-runtest}\n+to call the torture procedures if the tests should use the list in\n+@var{DG_TORTURE_OPTIONS} defined in @file{gcc-dg.exp}.\n+\n+Most uses of torture options can override the default lists by defining\n+@var{TORTURE_OPTIONS} in a @file{.dejagnurc} file."}, {"sha": "0f3a4ea724f619175c3725fa45c500e296a65566", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -1,3 +1,42 @@\n+2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/torture-options.exp: New support for torture options.\n+\t* lib/gfortran-dg.exp (gfortran-dg-runtest): Use new torture\n+\tprocs.\n+\t* lib/c-torture.exp: Define C_TORTURE_OPTIONS instead of\n+\tTORTURE_OPTIONS; don't define torture_with_loops and\n+\ttorture_without_loops.\n+\t* lib/gcc-dg.exp: Define DG_TORTURE_OPTIONS instead of\n+\tTORTURE_OPTIONS; don't define torture_with_loops and\n+\ttorture_without_loops.\n+\t(gcc-dg-runtest): Use new torture procs if no torture options\n+\tdefined.\n+\t* lib/fortran-torture.exp: Define FORTRAN_TORTURE_OPTIONS instead of\n+\tTORTURE_OPTIONS.\n+\t(fortran-torture-execute): Use torture_with_loops instead of\n+\tTORTURE_OPTIONS.\n+\t(fortran-torture): Ditto.\n+\t* lib/objc-torture.exp: Define OBJC_TORTURE_OPTIONS instead of\n+\tTORTURE_OPTIONS; don't define torture_with_loops and\n+\ttorture_without_loops.\n+\t* gcc.c-torture/execute/execute.exp: Use new torture procs.\n+\t* gcc.c-torture/execute/builtins/builtins.exp: Ditto.\n+\t* gcc.c-torture/execute/ieee/ieee.exp: Ditto.\n+\t* gcc.c-torture/unsorted/unsorted.exp: Ditto.\n+\t* gfortran.fortran-torture/execute/execute.exp: Ditto.\n+\t* gfortran.fortran-torture/compile/compile.exp: Ditto.\n+\t* gcc.target/x86_64/abi/abi-x86_64.exp: Ditto.\n+\t* gcc.target/i386/math-torture/math-torture.exp: Define\n+\tMATH_TORTURE_OPTIONS, use new torture procs.\n+\t* gcc.dg/pch/pch.exp: Use new torture procs.\n+\t* gcc.dg/format/format.exp: Ditto.\n+\t* gcc.misc-tests/i386-prefetch.exp: Ditto.\n+\t* gcc.misc-tests/dectest.exp: Ditto.\n+\t* objc.dg/pch/pch.exp: Ditto.\n+\t* objc/execute/execute.exp: Ditto.\n+\t* objc/execute/exceptions/exceptions.exp: Ditto.\n+\t* objc/compile/compile.exp: Ditto.\n+\n 2008-05-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36245"}, {"sha": "e82d2fddfd0c26c2c71419c7e81986571684c933", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/builtins.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -13,8 +13,12 @@\n # that needs them.  They shouldn't call any external functions in case\n # those functions were overridden too.\n \n+load_lib torture-options.exp\n load_lib c-torture.exp\n \n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n+\n set additional_flags \"\"\n if [istarget \"powerpc-*-darwin*\"] {\n    lappend additional_flags \"-Wl,-multiply_defined,suppress\"\n@@ -28,3 +32,5 @@ foreach src [lsort [find $srcdir/$subdir *.c]] {\n \t\t\t\t$additional_flags\n     }\n }\n+\n+torture-finish"}, {"sha": "f0e379f3849fe20a6477147b9838e66a3049f32d", "filename": "gcc/testsuite/gcc.c-torture/execute/execute.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fexecute.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -28,8 +28,12 @@ if $tracelevel then {\n }\n \n # load support procs\n+load_lib torture-options.exp\n load_lib c-torture.exp\n \n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n+\n #\n # main test loop\n #\n@@ -42,3 +46,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \n     c-torture-execute $src\n }\n+\n+torture-finish"}, {"sha": "3d7e56c6b30fdb762a7a354d6fe35b27407b7245", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -21,6 +21,7 @@\n \n # Load support procs.\n load_lib gcc-dg.exp\n+load_lib torture-options.exp\n \n # These tests come from Torbjorn Granlund's (tege@cygnus.com)\n # C torture test suite, and other contributors.\n@@ -32,6 +33,9 @@ if $tracelevel then {\n     strace $tracelevel\n }\n \n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n+\n set additional_flags \"\"\n \n # We must use -ffloat-store/-mieee to ensure that excess precision on some\n@@ -70,4 +74,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n }\n \n # All done.\n+torture-finish\n gcc_finish"}, {"sha": "dbcea137a003868db08755ba780ecc292731078c", "filename": "gcc/testsuite/gcc.c-torture/unsorted/unsorted.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Funsorted.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Funsorted.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Funsorted.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -30,6 +30,10 @@ if $tracelevel then {\n \n # load support procs\n load_lib c-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n \n #\n # This loop will run c-torture on any *.c file found in this directory.\n@@ -52,3 +56,5 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \n     c-torture $testcase\n }\n+\n+torture-finish"}, {"sha": "352149850e35c16d04ce7062d272c5338ff76044", "filename": "gcc/testsuite/gcc.dg/format/format.exp", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fformat.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -17,47 +17,18 @@\n # Don't run this directory with any default CFLAGS, but run tests with\n # and without -DWIDE.\n \n-if [info exists TORTURE_OPTIONS] {\n-    set old_TORTURE_OPTIONS $TORTURE_OPTIONS\n-} elseif [info exists old_TORTURE_OPTIONS] {\n-    unset old_TORTURE_OPTIONS\n-}\n-if [info exists torture_with_loops] {\n-    set old_torture_with_loops $torture_with_loops\n-} elseif [info exists old_torture_with_loops] {\n-    unset old_torture_with_loops\n-}\n-if [info exists torture_without_loops] {\n-    set old_torture_without_loops $torture_without_loops\n-} elseif [info exists old_torture_without_loops] {\n-    unset old_torture_without_loops\n-}\n-set TORTURE_OPTIONS [list { } { -DWIDE } ]\n-set torture_with_loops [list { } { -DWIDE } ]\n-set torture_without_loops [list { } { -DWIDE } ]\n-\n # Need to copy the format.h header.\n if [is_remote host] {\n     remote_download host $srcdir/$subdir/format.h\n }\n \n load_lib gcc-dg.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options [list { } { -DWIDE } ]\n \n dg-init\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\"\n-if [info exists old_TORTURE_OPTIONS] {\n-    set TORTURE_OPTIONS $old_TORTURE_OPTIONS\n-} else {\n-    unset TORTURE_OPTIONS\n-}\n-if [info exists old_torture_with_loops] {\n-    set torture_with_loops $old_torture_with_loops\n-} else {\n-    unset torture_with_loops\n-}\n-if [info exists old_torture_without_loops] {\n-    set torture_without_loops $old_torture_without_loops\n-} else {\n-    unset torture_without_loops\n-}\n+torture-finish\n dg-finish"}, {"sha": "e2ec69fd7bde9ab121b701c779176ba040349494", "filename": "gcc/testsuite/gcc.dg/pch/pch.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -20,9 +20,12 @@\n # Load support procs.\n load_lib gcc-dg.exp\n load_lib dg-pch.exp\n+load_lib torture-options.exp\n \n # Initialize `dg'.\n dg-init\n+torture-init\n+set-torture-options $DG_TORTURE_OPTIONS\n \n set old_dg_do_what_default \"${dg-do-what-default}\"\n \n@@ -56,4 +59,5 @@ file delete $testh\n set dg-do-what-default \"$old_dg_do_what_default\"\n \n # All done.\n+torture-finish\n dg-finish"}, {"sha": "435276d8160b4ce3625b7dd3e901e18429515373", "filename": "gcc/testsuite/gcc.misc-tests/dectest.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fdectest.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -20,7 +20,7 @@\n #\n # Contributed by Ben Elliston <bje@au.ibm.com>.\n \n-set TORTURE_OPTIONS [list {} -O1 -O2 -O3 -Os -msoft-float]\n+set DEC_TORTURE_OPTIONS [list {} -O1 -O2 -O3 -Os -msoft-float]\n \n proc target-specific-flags {} {\n   set result \"-frounding-math \"\n@@ -30,6 +30,7 @@ proc target-specific-flags {} {\n # Load support procs (borrow these from c-torture).\n load_lib c-torture.exp\n load_lib target-supports.exp\n+load_lib torture-options.exp\n \n # Skip these tests for targets that don't support this extension.\n if { ![check_effective_target_dfp] } {\n@@ -516,6 +517,11 @@ if [catch {set testdir $env(DECTEST)}] {\n     return\n }\n \n+torture-init\n+set-torture-options $DEC_TORTURE_OPTIONS\n+\n note \"Using tests in $testdir\"\n dfp-run-tests [lsort [glob -nocomplain $testdir/*.decTest]]\n unset testdir\n+\n+torture-finish"}, {"sha": "c4c2bbccb04b86aaeeb58f5853f2612b3e0a5967", "filename": "gcc/testsuite/gcc.misc-tests/i386-prefetch.exp", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -84,32 +84,24 @@ if $tracelevel then {\n \n # Load support procs.\n load_lib gcc-dg.exp\n+load_lib torture-options.exp\n \n # Initialize harness.\n dg-init\n+torture-init\n \n-# Save these.  They are needed if testsuite loops over multiple ABIs\n-set saved_torture_with_loops $torture_with_loops\n-set saved_torture_without_loops $torture_without_loops\n-\n-set torture_with_loops $PREFETCH_NONE\n-set torture_without_loops $PREFETCH_NONE\n+set-torture-options $PREFETCH_NONE\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-none-*.c]] \"\"\n \n-set torture_with_loops $PREFETCH_SSE\n-set torture_without_loops $PREFETCH_SSE\n+set-torture-options $PREFETCH_SSE\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-sse-*.c]] \"\"\n \n-set torture_with_loops $PREFETCH_3DNOW\n-set torture_without_loops $PREFETCH_3DNOW\n+set-torture-options $PREFETCH_3DNOW\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-3dnow-*.c]] \"\"\n \n-set torture_with_loops $PREFETCH_ATHLON\n-set torture_without_loops $PREFETCH_ATHLON\n+set-torture-options $PREFETCH_ATHLON\n gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-athlon-*.c]] \"\"\n \n-set torture_with_loops $saved_torture_with_loops\n-set torture_without_loops $saved_torture_without_loops\n-\n+torture-finish\n dg-finish\n "}, {"sha": "43ea6ea2f7dc3a5391a116fcefefb62b58423453", "filename": "gcc/testsuite/gcc.target/i386/math-torture/math-torture.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fmath-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fmath-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Fmath-torture.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -5,7 +5,7 @@ if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n   return\n }\n \n-set TORTURE_OPTIONS [list \\\n+set MATH_TORTURE_OPTIONS [list \\\n         { -O0 } \\\n         { -O0 -mfpmath=387 } \\\n         { -O0 -msse -mno-sse2 -mfpmath=sse } \\\n@@ -29,8 +29,14 @@ set TORTURE_OPTIONS [list \\\n         { -O2 -msse -mno-sse2 -mfpmath=sse,387 -ffast-math } \\\n         { -O2 -msse -msse2 -mfpmath=sse,387 -ffast-math } \\\n ]\n+\n load_lib gcc-dg.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $MATH_TORTURE_OPTIONS\n \n dg-init\n gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \"\"\n+torture-finish\n dg-finish"}, {"sha": "4f9fd46441f45ec4a811d6473be6d6ce0889f13a", "filename": "gcc/testsuite/gcc.target/x86_64/abi/abi-x86_64.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fabi-x86_64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fabi-x86_64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fabi-x86_64.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -19,13 +19,16 @@\n \n load_lib c-torture.exp\n load_lib target-supports.exp\n+load_lib torture-options.exp\n \n if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n      || ![is-effective-target lp64] } then {\n   return\n }\n \n \n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n set additional_flags \"-W -Wall\"\n \n foreach src [lsort [find $srcdir/$subdir test_*.c]] {\n@@ -41,3 +44,5 @@ foreach src [lsort [find $srcdir/$subdir test_*.c]] {\n \t}\n     }\n }\n+\n+torture-finish"}, {"sha": "b18e25c5f6f37ab8d6e1511ada46a1f6081c33af", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/compile.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -23,6 +23,10 @@ if $tracelevel then {\n \n # load support procs\n load_lib fortran-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $FORTRAN_TORTURE_OPTIONS\n \n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -94,3 +98,5 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F08]] {\n     }\n     fortran-torture $testcase\n }\n+\n+torture-finish"}, {"sha": "157c2404601e8108e0d14b76fad172c7ddbaa834", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/execute.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -27,6 +27,10 @@ if $tracelevel then {\n \n # load support procs\n load_lib fortran-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $FORTRAN_TORTURE_OPTIONS\n \n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -98,3 +102,5 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F08]] {\n     }\n     fortran-torture-execute $testcase\n }\n+\n+torture-finish"}, {"sha": "6413b2d85ba99417f11171b1c20c81af3a051c79", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -22,15 +22,17 @@ load_lib target-libpath.exp\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n \n-if ![info exists TORTURE_OPTIONS] {\n+if [info exists TORTURE_OPTIONS] {\n+    set C_TORTURE_OPTIONS $TORTURE_OPTIONS\n+} else {\n     # It is theoretically beneficial to group all of the O2/O3 options together,\n     # as in many cases the compiler will generate identical executables for\n     # all of them--and the c-torture testsuite will skip testing identical\n     # executables multiple times.\n     # Also note that -finline-functions is explicitly included in one of the\n     # items below, even though -O3 is also specified, because some ports may\n     # choose to disable inlining functions by default, even when optimizing.\n-    set TORTURE_OPTIONS [list \\\n+    set C_TORTURE_OPTIONS [list \\\n \t{ -O0 } \\\n \t{ -O1 } \\\n \t{ -O2 } \\\n@@ -55,17 +57,6 @@ if { $orig_environment_saved == 0 } {\n     set_ld_library_path_env_vars\n }\n \n-# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n-# one for testcases without loops.\n-\n-set torture_with_loops $TORTURE_OPTIONS\n-set torture_without_loops \"\"\n-foreach option $TORTURE_OPTIONS {\n-    if ![string match \"*loop*\" $option] {\n-\tlappend torture_without_loops $option\n-    }\n-}\n-\n #\n # c-torture-compile -- runs the Tege C-torture test\n #"}, {"sha": "3286ad91e8a397ceeadbc22177a2690eb48ab53c", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -25,7 +25,9 @@ load_lib target-supports.exp\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n \n-if ![info exists TORTURE_OPTIONS] {\n+if [info exists TORTURE_OPTIONS] {\n+    set FORTRAN_TORTURE_OPTIONS $TORTURE_OPTIONS\n+} else {\n     # determine if host supports vectorization, and the necessary set\n     # of options, based on code from testsuite/vect/vect.exp\n \n@@ -59,7 +61,7 @@ if ![info exists TORTURE_OPTIONS] {\n \tset test_tree_vectorize 0\n     }\n \n-    set TORTURE_OPTIONS [list \\\n+    set FORTRAN_TORTURE_OPTIONS [list \\\n \t{ -O0 } { -O1 } { -O2 } \\\n \t{ -O2 -fomit-frame-pointer -finline-functions } \\\n \t{ -O2 -fomit-frame-pointer -finline-functions -funroll-loops } \\\n@@ -68,7 +70,7 @@ if ![info exists TORTURE_OPTIONS] {\n \t{ -Os }]\n \n     if { $test_tree_vectorize } {\n-\tlappend TORTURE_OPTIONS $vectorizer_options\n+\tlappend FORTRAN_TORTURE_OPTIONS $vectorizer_options\n     }\n }\n \n@@ -174,7 +176,7 @@ proc fortran-torture-execute { src } {\n     global srcdir tmpdir\n     global tool\n     global compiler_conditional_xfail_data\n-    global TORTURE_OPTIONS\n+    global torture_with_loops\n \n     # Check for alternate driver.\n     set additional_flags \"\"\n@@ -188,7 +190,7 @@ proc fortran-torture-execute { src } {\n     }\n \n     # Setup the options for the testcase run.\n-    set option_list $TORTURE_OPTIONS\n+    set option_list $torture_with_loops\n     set executable $tmpdir/[file tail [file rootname $src].x]\n     regsub \"(?q)$srcdir/\" $src \"\" testcase\n \n@@ -348,7 +350,7 @@ proc search_for_re { file pattern } {\n proc fortran-torture { args } {\n     global srcdir subdir\n     global compiler_conditional_xfail_data\n-    global TORTURE_OPTIONS\n+    global torture_with_loops\n \n     set src [lindex $args 0]\n     if { [llength $args] > 1 } {\n@@ -373,7 +375,7 @@ proc fortran-torture { args } {\n     }\n    \n     # loop through all the options\n-    set option_list $TORTURE_OPTIONS\n+    set option_list $torture_with_loops\n     foreach option $option_list {\n \n \t# torture_compile_xfail is set by the .x script (if present)"}, {"sha": "ad5fc26c73fdc0fcb3346496e5aa9a662f8b7d1d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -26,20 +26,23 @@ load_lib scanipa.exp\n load_lib prune.exp\n load_lib libgloss.exp\n load_lib target-libpath.exp\n+load_lib torture-options.exp\n \n # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n setenv LC_ALL C\n setenv LANG C\n \n-if ![info exists TORTURE_OPTIONS] {\n+if [info exists TORTURE_OPTIONS] {\n+    set DG_TORTURE_OPTIONS $TORTURE_OPTIONS\n+} else {\n     # It is theoretically beneficial to group all of the O2/O3 options together,\n     # as in many cases the compiler will generate identical executables for\n     # all of them--and the c-torture testsuite will skip testing identical\n     # executables multiple times.\n     # Also note that -finline-functions is explicitly included in one of the\n     # items below, even though -O3 is also specified, because some ports may\n     # choose to disable inlining functions by default, even when optimizing.\n-    set TORTURE_OPTIONS [list \\\n+    set DG_TORTURE_OPTIONS [list \\\n \t{ -O0 } \\\n \t{ -O1 } \\\n \t{ -O2 } \\\n@@ -64,17 +67,6 @@ if { $orig_environment_saved == 0 } {\n     set_ld_library_path_env_vars\n }\n \n-# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n-# one for testcases without loops.\n-\n-set torture_with_loops $TORTURE_OPTIONS\n-set torture_without_loops \"\"\n-foreach option $TORTURE_OPTIONS {\n-    if ![string match \"*loop*\" $option] {\n-\tlappend torture_without_loops $option\n-    }\n-}\n-\n # Define gcc callbacks for dg.exp.\n \n proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n@@ -239,7 +231,17 @@ proc search_for { file pattern } {\n proc gcc-dg-runtest { testcases default-extra-flags } {\n     global runtests\n \n+    # Some callers set torture options themselves; don't override those.\n+    set existing_torture_options [torture-options-exist]\n+    if { $existing_torture_options == 0 } {\n+\tglobal DG_TORTURE_OPTIONS\n+\ttorture-init\n+\tset-torture-options $DG_TORTURE_OPTIONS\n+    }\n+    dump-torture-options\n+\n     foreach test $testcases {\n+\tglobal torture_with_loops torture_without_loops\n \t# If we're only testing specific files and this isn't one of\n \t# them, skip it.\n \tif ![runtest_file_p $runtests $test] {\n@@ -248,7 +250,6 @@ proc gcc-dg-runtest { testcases default-extra-flags } {\n \n \t# Look for a loop within the source code - if we don't find one,\n \t# don't pass -funroll[-all]-loops.\n-\tglobal torture_with_loops torture_without_loops\n \tif [expr [search_for $test \"for*(\"]+[search_for $test \"while*(\"]] {\n \t    set option_list $torture_with_loops\n \t} else {\n@@ -262,6 +263,10 @@ proc gcc-dg-runtest { testcases default-extra-flags } {\n \t    dg-test $test $flags ${default-extra-flags}\n \t}\n     }\n+\n+    if { $existing_torture_options == 0 } {\n+\ttorture-finish\n+    }\n }\n \n proc gcc-dg-debug-runtest { target_compile trivial opt_opts testcases } {"}, {"sha": "d7b1f2d78249c53058c9686448a705553548bf25", "filename": "gcc/testsuite/lib/gfortran-dg.exp", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -15,6 +15,7 @@\n # <http://www.gnu.org/licenses/>.\n \n load_lib gcc-dg.exp\n+load_lib torture-options.exp\n \n # Define gfortran callbacks for dg.exp.\n \n@@ -82,7 +83,10 @@ proc gfortran-dg-prune { system text } {\n # as c-torture does.\n proc gfortran-dg-runtest { testcases default-extra-flags } {\n     global runtests\n-    global TORTURE_OPTIONS\n+    global DG_TORTURE_OPTIONS torture_with_loops\n+\n+    torture-init\n+    set-torture-options $DG_TORTURE_OPTIONS\n \n     foreach test $testcases {\n \t# If we're only testing specific files and this isn't one of\n@@ -94,7 +98,7 @@ proc gfortran-dg-runtest { testcases default-extra-flags } {\n \t# look if this is dg-do-run test, in which case\n \t# we cycle through the option list, otherwise we don't\n \tif [expr [search_for $test \"dg-do run\"]] {\n-\t    set option_list $TORTURE_OPTIONS\n+\t    set option_list $torture_with_loops\n \t} else {\n \t    set option_list [list { -O } ]\n \t}\n@@ -106,6 +110,8 @@ proc gfortran-dg-runtest { testcases default-extra-flags } {\n \t    dg-test $test $flags ${default-extra-flags}\n \t}\n     }\n+\n+    torture-finish\n }\n \n proc gfortran-dg-debug-runtest { target_compile trivial opt_opts testcases } {"}, {"sha": "31967f4eabcea5d664bc43c27daab25387ed3c1a", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -18,9 +18,6 @@\n \n load_lib file-format.exp\n \n-# The default option list can be overridden by\n-# TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n-\n if ![info exists OBJC_RUNTIME_OPTIONS] {\n   set OBJC_RUNTIME_OPTIONS \"\"\n   foreach type {-fgnu-runtime -fnext-runtime} {\n@@ -39,15 +36,20 @@ if ![info exists OBJC_RUNTIME_OPTIONS] {\n verbose -log \"Using the following runtimes: $OBJC_RUNTIME_OPTIONS\"\n \n \n-if ![info exists TORTURE_OPTIONS] {\n+# The default option list can be overridden by\n+# TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n+\n+if [info exists TORTURE_OPTIONS] {\n+    set OBJC_TORTURE_OPTIONS $TORTURE_OPTIONS\n+} else {\n     # It is theoretically beneficial to group all of the O2/O3 options together,\n     # as in many cases the compiler will generate identical executables for\n     # all of them--and the objc-torture testsuite will skip testing identical\n     # executables multiple times.\n     # Also note that -finline-functions is explicitly included in one of the\n     # items below, even though -O3 is also specified, because some ports may\n     # choose to disable inlining functions by default, even when optimizing.\n-    set TORTURE_OPTIONS [list \\\n+    set OBJC_TORTURE_OPTIONS [list \\\n \t\" -O0 \" \\\n \t\" -O1 \" \\\n \t\" -O2 \" \\\n@@ -58,23 +60,6 @@ if ![info exists TORTURE_OPTIONS] {\n \t\" -Os \" ]\n }\n \n-\n-# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n-# one for testcases without loops. Add in the objc runtime options also.\n-\n-set torture_with_loops \"\"\n-set torture_without_loops \"\"\n-foreach objc_option $OBJC_RUNTIME_OPTIONS {\n-  foreach option $TORTURE_OPTIONS {\n-  \n-    if ![string match \"*loop*\" $option] {\n-\tlappend torture_without_loops \"$option $objc_option\"\n-    }\n-    lappend torture_with_loops \"$option $objc_option\"\n-  }\n-}\n-\n-\n #\n # objc-torture-compile -- runs the Tege OBJC-torture test\n #"}, {"sha": "7721f901bfecf3b31962c27d048860c4db01b778", "filename": "gcc/testsuite/lib/torture-options.exp", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Ftorture-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Flib%2Ftorture-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftorture-options.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -0,0 +1,112 @@\n+# Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Prepare to use a new set of torture options. \n+#\n+# Letting options leak from one set of tests to another can be confusing.\n+# Make sure variables are not set at the time we're called, because that\n+# would mean they were set without being cleared.\n+proc torture-init { args } {\n+    global torture_without_loops global_with_loops\n+\n+    if [info exists torture_without_loops] {\n+\terror \"torture-init: torture_without_loops is not empty as expected\"\n+    }\n+    if [info exists torture_with_loops] {\n+\terror \"torture-init: torture_with_loops is not empty as expected\"\n+    }\n+}\n+\n+# Return 1 if torture options have already been set, 0 otherwise.\n+proc torture-options-exist { args } {\n+    global torture_with_loops\n+    return [info exists torture_with_loops]\n+}\n+\n+# Return 1 if compiler option ARG only affects loops, 0 otherwise.\n+proc contains-loop-option-p { arg } {\n+    switch -glob -- $arg {\n+      \"*loop*\"\t\t{ return 1 }\n+      default\t\t{ return 0 }\n+    }\n+}\n+\n+# Set torture options variables for tests with and without loops.\n+#\n+# Argument 0 is the list to use as torture options\n+# Argument 1 is the list to combine with the torture options.\n+proc set-torture-options { args } {\n+    global torture_with_loops torture_without_loops\n+\n+    set torture_list [lindex $args 0]\n+\n+    if { [llength $args] != 1 } {\n+\tset other_list [lindex $args 1]\n+    } else {\n+\tset other_list [list {}]\n+    }\n+\n+    set torture_with_loops \"\"\n+    set torture_without_loops \"\"\n+    foreach torture_opts $torture_list {\n+\tforeach other_opts $other_list {\n+\t    # Remove trailing space[s] to match previous output.\n+\t    set torture_opts [string trimright $torture_opts]\n+\t    if ![contains-loop-option-p $torture_opts] {\n+\t\tlappend torture_without_loops \"$torture_opts $other_opts\"\n+\t    }\n+\t    lappend torture_with_loops \"$torture_opts $other_opts\"\n+\t}\n+    }\n+}\n+\n+# Finish up after using a set of torture options.\n+#\n+# Letting options leak from one set of tests to another can be confusing.\n+# Make sure variables are set at the time we're called, and then unset\n+# them to prevent interference with other sets of tests.\n+proc torture-finish { args } {\n+    global torture_without_loops torture_with_loops\n+\n+    if [info exists torture_without_loops] {\n+\tunset torture_without_loops\n+    } else {\n+\terror \"torture-finish: torture_without_loops is not defined\"\n+    }\n+\n+    if [info exists torture_with_loops] {\n+\tunset torture_with_loops\n+    } else {\n+\terror \"torture-finish: torture_with_loops is not defined\"\n+    }\n+}\n+\n+# Useful for debugging .exp files.\n+proc dump-torture-options { args } {\n+    global torture_without_loops torture_with_loops\n+\n+    if [info exists torture_without_loops] {\n+\tverbose \"torture_without_loops = \\\"${torture_without_loops}\\\"\" 1\n+    } else {\n+\tverbose \"torture_without_loops is not defined\" 1\n+    }\n+\n+    if [info exists torture_with_loops] {\n+\tverbose \"torture_with_loops = \\\"${torture_with_loops}\\\"\" 1\n+    } else {\n+\tverbose \"torture_with_loops is not defined\" 1\n+    }\n+}"}, {"sha": "95af1656864c1125a8e52dcffd51c8075a4a0d78", "filename": "gcc/testsuite/objc.dg/pch/pch.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -20,10 +20,14 @@\n # Load support procs.\n load_lib objc-dg.exp\n load_lib dg-pch.exp\n+load_lib torture-options.exp\n \n # Initialize `dg'.\n dg-init\n \n+torture-init\n+set-torture-options $DG_TORTURE_OPTIONS\n+\n set old_dg_do_what_default \"${dg-do-what-default}\"\n \n # Main loop.\n@@ -40,4 +44,5 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n set dg-do-what-default \"$old_dg_do_what_default\"\n \n # All done.\n+torture-finish\n dg-finish"}, {"sha": "0f6a7e915c74c405ffea6a2740fdcab9c6b03251", "filename": "gcc/testsuite/objc/compile/compile.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -23,6 +23,10 @@ if $tracelevel then {\n \n # load support procs\n load_lib objc-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n \n #\n # main test loop\n@@ -36,3 +40,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n \n     objc-torture $src\n }\n+\n+torture-finish"}, {"sha": "d3a37385746ed0d1b285e4484252e1ea3a028758", "filename": "gcc/testsuite/objc/execute/exceptions/exceptions.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -27,6 +27,10 @@ lappend additional_flags \"-fobjc-exceptions\"\n \n # load support procs\n load_lib objc-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n \n #\n # main test loop\n@@ -40,3 +44,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n \n     objc-torture-execute $src $additional_flags\n }\n+\n+torture-finish"}, {"sha": "c69d9f4c70f7c8954bda55c09d45a0c33512012b", "filename": "gcc/testsuite/objc/execute/execute.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -24,6 +24,10 @@ if $tracelevel then {\n \n # load support procs\n load_lib objc-torture.exp\n+load_lib torture-options.exp\n+\n+torture-init\n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n \n #\n # main test loop\n@@ -37,3 +41,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n \n     objc-torture-execute $src\n }\n+\n+torture-finish"}, {"sha": "f1f5a8ea70c537697f216e82e52e3888b7d28b62", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -1,3 +1,7 @@\n+2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* testsuite/lib/libgomp.exp: Load torture-options.exp from gcc lib.\n+\n 2008-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36106"}, {"sha": "274ee17f0a7e3cacf70a430297fb9a1d58ad887a", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a5b3943e8999959d65206ae75ae63d488ffa43/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a5b3943e8999959d65206ae75ae63d488ffa43/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=91a5b3943e8999959d65206ae75ae63d488ffa43", "patch": "@@ -21,6 +21,7 @@ load_gcc_lib prune.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib wrapper.exp\n load_gcc_lib gcc-defs.exp\n+load_gcc_lib torture-options.exp\n load_gcc_lib gcc-dg.exp\n load_gcc_lib gfortran-dg.exp\n "}]}