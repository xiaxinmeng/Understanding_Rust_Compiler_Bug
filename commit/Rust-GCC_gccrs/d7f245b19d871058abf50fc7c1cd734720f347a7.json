{"sha": "d7f245b19d871058abf50fc7c1cd734720f347a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmMjQ1YjE5ZDg3MTA1OGFiZjUwZmM3YzFjZDczNDcyMGYzNDdhNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-20T13:49:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-20T13:49:46Z"}, "message": "typelist_assoc_container.hpp: Remove, unused.\n\n2006-09-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/\n\ttypelist_assoc_container.hpp: Remove, unused.\n\t* include/ext/pb_ds/detail/typelist/\n\ttypelist_assoc_container_find.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist: Remove.\t\n\t* include/ext/pb_ds/detail/typelist.hpp: Merge...\n\t* include/ext/pb_ds/detail/typelist/typelist_flatten.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_contains.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_typelist_append.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_apply.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_filter.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_append.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_at_index.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_transform.hpp: Same.\n\t* include/ext/typelist.h: ... into this.\n\t* include/Makefile.am: Subtractions.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/ext/pb_ds/assoc_container.hpp: Fixups for new includes,\n\tnamespaces, and names.\t\n\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_prime_size_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\tcc_hash_max_collision_check_resize_trigger_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\tsample_resize_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\tsample_resize_trigger.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_exponential_size_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_size_base.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_standard_resize_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/container_base_dispatch.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/text_find_timing.cc\n\t* testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc\n\t* testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc\n\t* testsuite/performance/ext/pb_ds/priority_queue_text_push_timing.cc\n\t* testsuite/performance/ext/pb_ds/random_int_subscript_find_timing.cc\n\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc\n\t* testsuite/performance/ext/pb_ds/random_int_find_timing.cc\n\t* testsuite/performance/ext/pb_ds/\n\tmultimap_text_insert_mem_usage.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_random_int_push_timing.cc\n\t* testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_modify_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_push_pop_timing.cc\n\t* testsuite/performance/ext/pb_ds/priority_queue_text_join_timing.cc\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_random_int_push_pop_timing.cc\n\t* testsuite/performance/ext/pb_ds/random_int_subscript_insert_timing.cc\n\t* testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc\n\t* testsuite/performance/ext/pb_ds/\n\tmultimap_text_insert_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/priority_queue_text_pop_mem_usage.cc\n\t* testsuite/performance/ext/pb_ds/hash_zlob_random_int_find_timing.cc\n\t* testsuite/performance/23_containers/find/map.cc\n\t* testsuite/performance/23_containers/create/map.cc\n\t* testsuite/performance/23_containers/insert_erase/associative.cc\n\t* testsuite/performance/23_containers/insert/sequence.cc\n\t* testsuite/performance/23_containers/insert/associative.cc\n\t* testsuite/performance/23_containers/create_from_sorted/set.cc\n\t* testsuite/performance/23_containers/index/map.cc\n\t* testsuite/performance/23_containers/insert_from_sorted/set.cc\n\t* testsuite/performance/23_containers/create_sort/list.cc\n\t* testsuite/performance/23_containers/sort_search/list.cc\n\t* testsuite/performance/23_containers/producer_consumer/sequence.cc\n\t* testsuite/performance/23_containers/producer_consumer/associative.cc\n\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\trand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_tree_tag.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_set.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_map.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_set.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Same.\n\t* testsuite/util/common_type/priority_queue/common_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n\t* testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp: \n\tSame.\n\t* testsuite/util/performance/priority_queue/timing/push_pop_test.hpp: \n\tSame.\n\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/push_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/modify_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/common_type.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/multimap_insert_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/timing/subscript_find_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/timing/find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/subscript_insert_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/timing/insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\ttree_order_statistics_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/tree_split_join_test.hpp: \n\tSame.\n\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n\n\t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Fixup line numbers.\n\nFrom-SVN: r117081", "tree": {"sha": "15f8c35008650f79d951be7a72aec0264ec1ceb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f8c35008650f79d951be7a72aec0264ec1ceb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f245b19d871058abf50fc7c1cd734720f347a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f245b19d871058abf50fc7c1cd734720f347a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f245b19d871058abf50fc7c1cd734720f347a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f245b19d871058abf50fc7c1cd734720f347a7/comments", "author": null, "committer": null, "parents": [{"sha": "a186e616b9605ef36a084db0a407551c04060dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a186e616b9605ef36a084db0a407551c04060dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a186e616b9605ef36a084db0a407551c04060dbd"}], "stats": {"total": 3273, "additions": 958, "deletions": 2315}, "files": [{"sha": "c4f2fe8ad5db33eb19fa0c442f80324fa3f9c2d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -1,3 +1,126 @@\n+2006-09-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/\n+\ttypelist_assoc_container.hpp: Remove, unused.\n+\t* include/ext/pb_ds/detail/typelist/\n+\ttypelist_assoc_container_find.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist: Remove.\t\n+\t* include/ext/pb_ds/detail/typelist.hpp: Merge...\n+\t* include/ext/pb_ds/detail/typelist/typelist_flatten.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_contains.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_typelist_append.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_apply.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_filter.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_append.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_at_index.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_transform.hpp: Same.\n+\t* include/ext/typelist.h: ... into this.\n+\t* include/Makefile.am: Subtractions.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* include/ext/pb_ds/assoc_container.hpp: Fixups for new includes,\n+\tnamespaces, and names.\t\n+\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_prime_size_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tcc_hash_max_collision_check_resize_trigger_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tsample_resize_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\tsample_resize_trigger.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_exponential_size_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_size_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_standard_resize_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/container_base_dispatch.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/text_find_timing.cc\n+\t* testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc\n+\t* testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc\n+\t* testsuite/performance/ext/pb_ds/priority_queue_text_push_timing.cc\n+\t* testsuite/performance/ext/pb_ds/random_int_subscript_find_timing.cc\n+\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc\n+\t* testsuite/performance/ext/pb_ds/random_int_find_timing.cc\n+\t* testsuite/performance/ext/pb_ds/\n+\tmultimap_text_insert_mem_usage.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_random_int_push_timing.cc\n+\t* testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_modify_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_push_pop_timing.cc\n+\t* testsuite/performance/ext/pb_ds/priority_queue_text_join_timing.cc\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_random_int_push_pop_timing.cc\n+\t* testsuite/performance/ext/pb_ds/random_int_subscript_insert_timing.cc\n+\t* testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc\n+\t* testsuite/performance/ext/pb_ds/\n+\tmultimap_text_insert_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/priority_queue_text_pop_mem_usage.cc\n+\t* testsuite/performance/ext/pb_ds/hash_zlob_random_int_find_timing.cc\n+\t* testsuite/performance/23_containers/find/map.cc\n+\t* testsuite/performance/23_containers/create/map.cc\n+\t* testsuite/performance/23_containers/insert_erase/associative.cc\n+\t* testsuite/performance/23_containers/insert/sequence.cc\n+\t* testsuite/performance/23_containers/insert/associative.cc\n+\t* testsuite/performance/23_containers/create_from_sorted/set.cc\n+\t* testsuite/performance/23_containers/index/map.cc\n+\t* testsuite/performance/23_containers/insert_from_sorted/set.cc\n+\t* testsuite/performance/23_containers/create_sort/list.cc\n+\t* testsuite/performance/23_containers/sort_search/list.cc\n+\t* testsuite/performance/23_containers/producer_consumer/sequence.cc\n+\t* testsuite/performance/23_containers/producer_consumer/associative.cc\n+\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\trand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_tree_tag.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_set.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_map.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_set.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Same.\n+\t* testsuite/util/common_type/priority_queue/common_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/priority_queue/timing/push_pop_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/push_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/modify_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/common_type.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/multimap_insert_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/timing/subscript_find_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/timing/find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/subscript_insert_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/timing/insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\ttree_order_statistics_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/tree_split_join_test.hpp: \n+\tSame.\n+\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n+\n+\t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Fixup line numbers.\n+\t\n 2006-09-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/hashtable_policy.h: Uglify all the names."}, {"sha": "04cd93041ba16b4594a742a57461068f9aeee234", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -204,7 +204,6 @@ pb_subdirs = \\\n \t${pb_builddir}/detail/pairing_heap_ \\\n \t${pb_builddir}/detail/splay_tree_ \\\n \t${pb_builddir}/detail/list_update_map_ \\\n-\t${pb_builddir}/detail/typelist \\\n \t${pb_builddir}/detail/basic_tree_policy \\\n \t${pb_builddir}/detail/trie_policy \\\n \t${pb_builddir}/detail/gp_hash_table_map_ \\\n@@ -503,17 +502,6 @@ pb_headers7 = \\\n \t${pb_srcdir}/detail/trie_policy/sample_trie_node_update.hpp \\\n \t${pb_srcdir}/detail/trie_policy/string_trie_e_access_traits_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/trie_policy_base.hpp \\\n-\t${pb_srcdir}/detail/typelist_assoc_container.hpp \\\n-\t${pb_srcdir}/detail/typelist.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_append.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_apply.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_assoc_container_find.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_at_index.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_contains.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_filter.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_flatten.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_transform.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_typelist_append.hpp \\\n \t${pb_srcdir}/detail/types_traits.hpp \\\n \t${pb_srcdir}/detail/type_utils.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/const_iterator.hpp \\"}, {"sha": "87eb188e3bff7ef942dd44acca45846310a56219", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -427,7 +427,6 @@ pb_subdirs = \\\n \t${pb_builddir}/detail/pairing_heap_ \\\n \t${pb_builddir}/detail/splay_tree_ \\\n \t${pb_builddir}/detail/list_update_map_ \\\n-\t${pb_builddir}/detail/typelist \\\n \t${pb_builddir}/detail/basic_tree_policy \\\n \t${pb_builddir}/detail/trie_policy \\\n \t${pb_builddir}/detail/gp_hash_table_map_ \\\n@@ -726,17 +725,6 @@ pb_headers7 = \\\n \t${pb_srcdir}/detail/trie_policy/sample_trie_node_update.hpp \\\n \t${pb_srcdir}/detail/trie_policy/string_trie_e_access_traits_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/trie_policy_base.hpp \\\n-\t${pb_srcdir}/detail/typelist_assoc_container.hpp \\\n-\t${pb_srcdir}/detail/typelist.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_append.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_apply.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_assoc_container_find.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_at_index.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_contains.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_filter.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_flatten.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_transform.hpp \\\n-\t${pb_srcdir}/detail/typelist/typelist_typelist_append.hpp \\\n \t${pb_srcdir}/detail/types_traits.hpp \\\n \t${pb_srcdir}/detail/type_utils.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/const_iterator.hpp \\"}, {"sha": "4491768cb477935bc170f356dae779d294b69da2", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,15 +47,15 @@\n #ifndef PB_DS_ASSOC_CNTNR_HPP\n #define PB_DS_ASSOC_CNTNR_HPP\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <ext/pb_ds/detail/container_base_dispatch.hpp>\n #include <ext/pb_ds/detail/basic_tree_policy/traits.hpp>\n \n namespace pb_ds\n {\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   detail::container_base_dispatch<Key, Mapped, Tag, Policy_Tl, Allocator>::type\n \n   // An abstract basic associative container.\n@@ -117,10 +117,9 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-  container_base<Key, Mapped, Tag, typename detail::typelist_append< \\\n-\t\t\t\t\t\t\t\t\t\t   typename detail::typelist4<Hash_Fn, Eq_Fn, Resize_Policy, detail::integral_constant<int,Store_Hash> >::type, \\\n-\t\t\t\t\t\t\t\t\t\t   Policy_TL>::type, Allocator>\n+#define PB_DS_BASE_C_DEC \\\n+  container_base<Key, Mapped, Tag, typename __gnu_cxx::typelist::append< \\\n+  typename __gnu_cxx::typelist::create4<Hash_Fn, Eq_Fn, Resize_Policy, detail::integral_constant<int, Store_Hash> >::type, Policy_TL>::type, Allocator>\n \n   // An abstract basic hash-based associative container.\n   template<typename Key,\n@@ -154,10 +153,10 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   basic_hash_table<Key, Mapped,\tHash_Fn, Eq_Fn, Resize_Policy, Store_Hash, \\\n-\t\t   cc_hash_tag,\t\t\t\t\t\t\\\n-\t\t   typename detail::typelist1<Comb_Hash_Fn>::type, Allocator>\n+\t\t   cc_hash_tag,\t\\\n+\t  typename __gnu_cxx::typelist::create1<Comb_Hash_Fn>::type, Allocator>\n \n   // A concrete collision-chaining hash-based associative container.\n   template<typename Key,\n@@ -291,10 +290,10 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   basic_hash_table<Key, Mapped,\tHash_Fn, Eq_Fn, Resize_Policy, Store_Hash, \\\n-\t\t   gp_hash_tag,\t\t\t\t\t\t\\\n-\t\t   typename detail::typelist2<Comb_Probe_Fn, Probe_Fn>::type, Allocator>\n+\t\t   gp_hash_tag, \\\n+\t\t   typename __gnu_cxx::typelist::create2<Comb_Probe_Fn, Probe_Fn>::type, Allocator>\n \n   // A concrete general-probing hash-based associative container.\n   template<typename Key,\n@@ -490,7 +489,7 @@ namespace pb_ds\n \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n   basic_tree<Key,Mapped,Tag,typename PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC::node_update, \\\n-\t     typename detail::typelist2<Cmp_Fn, PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC >::type, Allocator>\n+\t     typename __gnu_cxx::typelist::create2<Cmp_Fn, PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC >::type, Allocator>\n \n   // A concrete basic tree-based associative container.\n   template<typename Key, typename Mapped, typename Cmp_Fn = std::less<Key>,\n@@ -561,7 +560,7 @@ namespace pb_ds\n \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n   basic_tree<Key,Mapped,Tag, typename PB_DS_TRIE_NODE_AND_ITS_TRAITS::node_update, \\\n-\t     typename detail::typelist2<E_Access_Traits, PB_DS_TRIE_NODE_AND_ITS_TRAITS >::type, Allocator>\n+\t     typename __gnu_cxx::typelist::create2<E_Access_Traits, PB_DS_TRIE_NODE_AND_ITS_TRAITS >::type, Allocator>\n \n   // A concrete basic trie-based associative container.\n   template<typename Key,\n@@ -632,9 +631,9 @@ namespace pb_ds\n #undef PB_DS_TRIE_NODE_AND_ITS_TRAITS\n \n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-  container_base<Key, Mapped, list_update_tag,\t\t\t\\\n-\t\t\ttypename detail::typelist2<Eq_Fn, Update_Policy>::type, Allocator>\n+#define PB_DS_BASE_C_DEC \\\n+  container_base<Key, Mapped, list_update_tag, \\\n+\t\t typename __gnu_cxx::typelist::create2<Eq_Fn, Update_Policy>::type, Allocator>\n \n   // A list-update based associative container.\n   template<typename Key,"}, {"sha": "37db003fd751d8876c72c7fb81a879fbdd356097", "filename": "libstdc++-v3/include/ext/pb_ds/detail/container_base_dispatch.hpp", "status": "modified", "additions": 226, "deletions": 297, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,7 +47,7 @@\n #ifndef PB_DS_ASSOC_CNTNR_BASE_DS_DISPATCHER_HPP\n #define PB_DS_ASSOC_CNTNR_BASE_DS_DISPATCHER_HPP\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n \n #define PB_DS_DATA_TRUE_INDICATOR\n #include <ext/pb_ds/detail/list_update_map_/lu_map_.hpp>\n@@ -107,303 +107,232 @@\n \n namespace pb_ds\n {\n-  namespace detail\n+namespace detail\n+{\n+  // Primary template.\n+  template<typename Key, typename Mapped, typename Data_Structure_Taq,\n+\t   typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch;\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, list_update_tag, \n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+      \n+    public:\n+      typedef lu_map_data_<Key, Mapped, at0t, Alloc, at1t>\ttype;\n+    };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, list_update_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef lu_map_no_data_<Key, null_mapped_type, at0t, Alloc, at1t> type;\n+    };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, pat_trie_tag, Policy_Tl, Alloc>\n     {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n \n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Data_Structure_Taq,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch;\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tlist_update_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        lu_map_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  Allocator,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tlist_update_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        lu_map_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  Allocator,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tpat_trie_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        pat_trie_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tpat_trie_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        pat_trie_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\trb_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        rb_tree_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\trb_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        rb_tree_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tsplay_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-\n-      {\n-\ttypedef\n-        splay_tree_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tsplay_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        splay_tree_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tov_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        ov_tree_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tov_tree_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        ov_tree_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tcc_hash_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        cc_ht_map_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator,\n-\t  typelist_at_index<Policy_Tl, 3>::type::value,\n-\t  typename typelist_at_index<Policy_Tl, 4>::type,\n-\t  typename typelist_at_index<Policy_Tl, 2>::type>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tcc_hash_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        cc_ht_map_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator,\n-\t  typelist_at_index<Policy_Tl, 3>::type::value,\n-\t  typename typelist_at_index<Policy_Tl, 4>::type,\n-\t  typename typelist_at_index<Policy_Tl, 2>::type>\n-        type;\n-      };\n-\n-      template<typename Key,\n-\t       typename Mapped,\n-\t       class Policy_Tl,\n-\t       class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tMapped,\n-\tgp_hash_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        gp_ht_map_data_<\n-\t  Key,\n-\t  Mapped,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator,\n-\t  typelist_at_index<Policy_Tl, 3>::type::value,\n-\t  typename typelist_at_index<Policy_Tl, 4>::type,\n-\t  typename typelist_at_index<Policy_Tl, 5>::type,\n-\t  typename typelist_at_index<Policy_Tl, 2>::type>\n-        type;\n-      };\n-\n-      template<typename Key, class Policy_Tl, class Allocator>\n-      struct container_base_dispatch<\n-\tKey,\n-\tnull_mapped_type,\n-\tgp_hash_tag,\n-\tPolicy_Tl,\n-\tAllocator>\n-      {\n-\ttypedef\n-        gp_ht_map_no_data_<\n-\t  Key,\n-\t  null_mapped_type,\n-\t  typename typelist_at_index<Policy_Tl, 0>::type,\n-\t  typename typelist_at_index<Policy_Tl, 1>::type,\n-\t  Allocator,\n-\t  typelist_at_index<Policy_Tl, 3>::type::value,\n-\t  typename typelist_at_index<Policy_Tl, 4>::type,\n-\t  typename typelist_at_index<Policy_Tl, 5>::type,\n-\t  typename typelist_at_index<Policy_Tl, 2>::type>\n-        type;\n-      };\n-\n-    } // namespace detail\n+    public:\n+      typedef pat_trie_data_<Key, Mapped, at1t, Alloc> \t\ttype;\n+    };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, pat_trie_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef pat_trie_no_data_<Key, null_mapped_type, at1t, Alloc> type;\n+    };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, rb_tree_tag, Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef rb_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+    };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, rb_tree_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef rb_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+    };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, splay_tree_tag, \n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef splay_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+    };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, splay_tree_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef splay_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+  };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, ov_tree_tag, Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef ov_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+  };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, ov_tree_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+\n+    public:\n+      typedef ov_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+  };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, cc_hash_tag, Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 2>\tat2;\n+      typedef typename at2::type\t\t\t    \tat2t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 3>\tat3;\n+      typedef typename at3::type\t\t\t\tat3t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 4> \tat4;\n+      typedef typename at4::type\t\t\t    \tat4t;\n+\n+    public:\n+      typedef cc_ht_map_data_<Key, Mapped, at0t, at1t, Alloc, at3t::value, \n+\t\t\t      at4t, at2t> \t\t\ttype;\n+  };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, cc_hash_tag, \n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 2>\tat2;\n+      typedef typename at2::type\t\t\t    \tat2t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 3>\tat3;\n+      typedef typename at3::type\t\t\t\tat3t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 4> \tat4;\n+      typedef typename at4::type\t\t\t    \tat4t;\n+\n+    public:\n+      typedef cc_ht_map_no_data_<Key, null_mapped_type, at0t, at1t, Alloc, \n+\t\t\t\t at3t::value, at4t, at2t>    \ttype;\n+  };\n+\n+  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, Mapped, gp_hash_tag, Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 2>\tat2;\n+      typedef typename at2::type\t\t\t    \tat2t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 3>\tat3;\n+      typedef typename at3::type\t\t\t\tat3t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 4> \tat4;\n+      typedef typename at4::type\t\t\t    \tat4t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 5> \tat5;\n+      typedef typename at5::type\t\t\t    \tat5t;\n+\n+    public:\n+      typedef gp_ht_map_data_<Key, Mapped, at0t, at1t, Alloc, at3t::value, \n+\t\t\t      at4t, at5t, at2t> \t\ttype;\n+  };\n+\n+  template<typename Key, typename Policy_Tl, typename Alloc>\n+    struct container_base_dispatch<Key, null_mapped_type, gp_hash_tag,\n+\t\t\t\t   Policy_Tl, Alloc>\n+    {\n+    private:\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n+      typedef typename at0::type\t\t\t    \tat0t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n+      typedef typename at1::type\t\t\t    \tat1t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 2>\tat2;\n+      typedef typename at2::type\t\t\t    \tat2t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 3>\tat3;\n+      typedef typename at3::type\t\t\t\tat3t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 4> \tat4;\n+      typedef typename at4::type\t\t\t    \tat4t;\n+      typedef __gnu_cxx::typelist::at_index<Policy_Tl, 5> \tat5;\n+      typedef typename at5::type\t\t\t    \tat5t;\n+\n+    public:\n+      typedef gp_ht_map_no_data_<Key, null_mapped_type, at0t, at1t, Alloc,\n+\t\t\t\t at3t::value, at4t, at5t, at2t>\ttype;\n+  };\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_ASSOC_CNTNR_BASE_DS_DISPATCHER_HPP\n+#endif "}, {"sha": "c10f7b6cc59353b1f7e2269dc5be1d442ba33e27", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/cc_hash_max_collision_check_resize_trigger_imp.hpp", "status": "modified", "additions": 23, "deletions": 55, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fcc_hash_max_collision_check_resize_trigger_imp.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,9 +44,8 @@\n  * Contains a resize trigger implementation.\n  */\n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<(bool)(E)>)> \\\n-  UNIQUE##static_assert_type\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n+  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<(bool)(E)>)> UNIQUE##static_assert_type\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -80,25 +79,19 @@ PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_start()\n-{\n-  m_num_col = 0;\n-}\n+{ m_num_col = 0; }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_collision()\n-{\n-  ++m_num_col;\n-}\n+{ ++m_num_col; }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_end()\n-{\n-  calc_resize_needed();\n-}\n+{ calc_resize_needed(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -121,40 +114,32 @@ notify_erase_search_end()\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-notify_inserted(size_type /*num_e*/)\n+notify_inserted(size_type)\n { }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-notify_erased(size_type /*num_e*/)\n-{\n-  m_resize_needed = true;\n-}\n+notify_erased(size_type)\n+{ m_resize_needed = true; }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_cleared()\n-{\n-  m_resize_needed = false;\n-}\n+{ m_resize_needed = false; }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_resize_needed() const\n-{\n-  return (m_resize_needed);\n-}\n+{ return m_resize_needed; }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_grow_needed(size_type /*size*/, size_type /*num_used_e*/) const\n-{\n-  return (m_num_col >= m_max_col);\n-}\n+{ return m_num_col >= m_max_col; }\n \n PB_DS_CLASS_T_DEC\n void\n@@ -164,14 +149,12 @@ notify_resized(size_type new_size)\n   m_size = new_size;\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n-  std::cerr << \"chmccrt::notify_resized \" <<\n-    static_cast<unsigned long>(new_size) << std::endl;\n-#endif // #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n+  std::cerr << \"chmccrt::notify_resized \" \n+\t    << static_cast<unsigned long>(new_size) << std::endl;\n+#endif \n \n   calc_max_num_coll();\n-\n   calc_resize_needed();\n-\n   m_num_col = 0;\n }\n \n@@ -181,39 +164,31 @@ PB_DS_CLASS_C_DEC::\n calc_max_num_coll()\n {\n   // max_col <-- \\sqrt{2 load \\ln( 2 m \\ln( m ) ) }\n-\n-  const double ln_arg = 2*  m_size*  ::log( (double)m_size);\n-\n-  m_max_col =(size_type)::ceil(    ::sqrt(2*     m_load*  ::log(ln_arg) ) );\n+  const double ln_arg = 2 * m_size * ::log(double(m_size));\n+  m_max_col = size_type(::ceil(::sqrt(2 * m_load * ::log(ln_arg))));\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n-  std::cerr << \"chmccrt::calc_max_num_coll \" <<\n-    static_cast<unsigned long>(m_size) <<    \"    \" <<\n-    static_cast<unsigned long>(m_max_col) << std::endl;\n-#endif // #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n+  std::cerr << \"chmccrt::calc_max_num_coll \" \n+\t    << static_cast<unsigned long>(m_size) <<    \"    \" \n+\t    << static_cast<unsigned long>(m_max_col) << std::endl;\n+#endif \n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_externally_resized(size_type new_size)\n-{\n-  notify_resized(new_size);\n-}\n+{ notify_resized(new_size); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   std::swap(m_load, other.m_load);\n-\n   std::swap(m_size, other.m_size);\n-\n   std::swap(m_num_col, other.m_num_col);\n-\n   std::swap(m_max_col, other.m_max_col);\n-\n   std::swap(m_resize_needed, other.m_resize_needed);\n }\n \n@@ -223,30 +198,23 @@ PB_DS_CLASS_C_DEC::\n get_load() const\n {\n   PB_DS_STATIC_ASSERT(access, external_load_access);\n-\n-  return (m_load);\n+  return m_load;\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n calc_resize_needed()\n-{\n-  m_resize_needed =\n-    m_resize_needed || m_num_col >= m_max_col;\n-}\n+{ m_resize_needed = m_resize_needed || m_num_col >= m_max_col; }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n set_load(float load)\n {\n   PB_DS_STATIC_ASSERT(access, external_load_access);\n-\n   m_load = load;\n-\n   calc_max_num_coll();\n-\n   calc_resize_needed();\n }\n "}, {"sha": "ccd7221ebd5ad74240dddd89241762b3917b81e1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_exponential_size_policy_imp.hpp", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -57,7 +57,6 @@ PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   std::swap(m_start_size, other.m_start_size);\n-\n   std::swap(m_grow_factor, other.m_grow_factor);\n }\n \n@@ -67,18 +66,14 @@ PB_DS_CLASS_C_DEC::\n get_nearest_larger_size(size_type size) const\n {\n   size_type ret = m_start_size;\n-\n   while (ret <= size)\n     {\n       const size_type next_ret = ret*  m_grow_factor;\n-\n       if (next_ret < ret)\n \tthrow insert_error();\n-\n       ret = next_ret;\n     }\n-\n-  return (ret);\n+  return ret;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -87,20 +82,15 @@ PB_DS_CLASS_C_DEC::\n get_nearest_smaller_size(size_type size) const\n {\n   size_type ret = m_start_size;\n-\n   while (true)\n     {\n       const size_type next_ret = ret*  m_grow_factor;\n-\n       if (next_ret < ret)\n \tthrow resize_error();\n-\n       if (next_ret >= size)\n \treturn (ret);\n-\n       ret = next_ret;\n     }\n-\n-  return (ret);\n+  return ret;\n }\n "}, {"sha": "9d6795916bb82449aee8a1f59c19ceec657b05b6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,8 +44,8 @@\n  * Contains a resize trigger implementation.\n  */\n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n-  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<(bool)(E)>)> UNIQUE##static_assert_type\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E)  \\\n+  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<bool(E)>)> UNIQUE##static_assert_type\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::"}, {"sha": "436de797d6ff5055f8f6d0723350916b4e533401", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_size_base.hpp", "status": "modified", "additions": 15, "deletions": 87, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -49,124 +49,52 @@\n \n namespace pb_ds\n {\n-\n   namespace detail\n   {\n-\n+    // Primary template.\n     template<typename Size_Type, bool Hold_Size>\n     class hash_load_check_resize_trigger_size_base;\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n+    // Specializations.\n     template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    hash_load_check_resize_trigger_size_base<\t\t\t\t\\\n-\t\t\t\t\t\t\t\tSize_Type, \\\n-\t\t\t\t\t\t\t\ttrue>\n-\n-    template<typename Size_Type>\n-    class hash_load_check_resize_trigger_size_base<\n-      Size_Type,\n-      true>\n+    class hash_load_check_resize_trigger_size_base<Size_Type, true>\n     {\n     protected:\n       typedef Size_Type size_type;\n \n-    protected:\n-      inline\n-      hash_load_check_resize_trigger_size_base();\n+      hash_load_check_resize_trigger_size_base(): m_size(0)\n+      { }\n \n       inline void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(hash_load_check_resize_trigger_size_base& other)\n+      { std::swap(m_size, other.m_size); }\n \n       inline void\n-      set_size(size_type size);\n+      set_size(size_type size)\n+      { m_size = size; }\n \n       inline size_type\n-      get_size() const;\n+      get_size() const\n+      { return m_size; }\n \n     private:\n       size_type m_size;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    hash_load_check_resize_trigger_size_base() :\n-      m_size(0)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    set_size(size_type size)\n-    {\n-      m_size = size;\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    get_size() const\n-    {\n-      return (m_size);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      std::swap(m_size, other.m_size);\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    hash_load_check_resize_trigger_size_base<\t\t\t\t\\\n-\t\t\t\t\t\t\t\tSize_Type, \\\n-\t\t\t\t\t\t\t\tfalse>\n-\n     template<typename Size_Type>\n-    class hash_load_check_resize_trigger_size_base<\n-      Size_Type,\n-      false>\n+    class hash_load_check_resize_trigger_size_base<Size_Type, false>\n     {\n     protected:\n       typedef Size_Type size_type;\n \n     protected:\n       inline void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(hash_load_check_resize_trigger_size_base& other) { }\n \n       inline void\n-      set_size(size_type size);\n+      set_size(size_type size) { }\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& /*other*/)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    set_size(size_type /*size*/)\n-    {\n-      // Do nothing\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_HASH_LOAD_CHECK_RESIZE_TRIGGER_SIZE_BASE_HPP\n+#endif"}, {"sha": "8303c3fd3de601996009cfa2e802bc2e4b5e08ac", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_prime_size_policy_imp.hpp", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -46,7 +46,6 @@\n \n namespace detail\n {\n-\n   enum\n     {\n       num_distinct_sizes_32_bit = 30,\n@@ -57,7 +56,6 @@ namespace detail\n \n   // Originally taken from the SGI implementation; acknowledged in the docs.\n   // Further modified (for 64 bits) from tr1's hashtable.\n-\n   static const std::size_t g_a_sizes[num_distinct_sizes_64_bit] =\n     {\n       /* 0     */              5ul,\n@@ -129,47 +127,39 @@ namespace detail\n PB_DS_CLASS_T_DEC\n inline\n PB_DS_CLASS_C_DEC::\n-hash_prime_size_policy(size_type start_size) :\n-  m_start_size(start_size)\n-{\n-  m_start_size =\n-    get_nearest_larger_size(start_size);\n-}\n+hash_prime_size_policy(size_type start_size) : m_start_size(start_size)\n+{ m_start_size = get_nearest_larger_size(start_size); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n-{\n-  std::swap(m_start_size, other.m_start_size);\n-}\n+{ std::swap(m_start_size, other.m_start_size); }\n \n PB_DS_CLASS_T_DEC\n inline PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n get_nearest_larger_size(size_type size) const\n {\n-  const std::size_t* const p_upper =\n-    std::upper_bound(            detail::g_a_sizes, detail::g_a_sizes + detail::num_distinct_sizes, size);\n+  const std::size_t* const p_upper = std::upper_bound(detail::g_a_sizes, \n+\t\t     detail::g_a_sizes + detail::num_distinct_sizes, size);\n \n   if (p_upper == detail::g_a_sizes + detail::num_distinct_sizes)\n     throw resize_error();\n-\n-  return (*p_upper);\n+  return *p_upper;\n }\n \n PB_DS_CLASS_T_DEC\n inline PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n get_nearest_smaller_size(size_type size) const\n {\n-  const size_t* p_lower = std::lower_bound(        detail::g_a_sizes, detail::g_a_sizes + detail::num_distinct_sizes, size);\n+  const size_t* p_lower = std::lower_bound(detail::g_a_sizes, \n+\t\t       detail::g_a_sizes + detail::num_distinct_sizes, size);\n \n   if (*p_lower >= size&&  p_lower != detail::g_a_sizes)\n     --p_lower;\n-\n   if (*p_lower < m_start_size)\n-    return (m_start_size);\n-\n-  return (*p_lower);\n+    return m_start_size;\n+  return *p_lower;\n }"}, {"sha": "bbea0b2a364e9d62678d8a11a2628b9895902073", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_standard_resize_policy_imp.hpp", "status": "modified", "additions": 28, "deletions": 78, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,36 +44,30 @@\n  * Contains a resize policy implementation.\n  */\n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<(bool)(E)>)> \\\n-  UNIQUE##static_assert_type\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n+  typedef detail::static_assert_dumclass<sizeof(detail::static_assert<(bool)(E)>)> UNIQUE##static_assert_type\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n hash_standard_resize_policy() :\n   m_size(Size_Policy::get_nearest_larger_size(1))\n-{\n-  trigger_policy_base::notify_externally_resized(m_size);\n-}\n+{ trigger_policy_base::notify_externally_resized(m_size); }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n hash_standard_resize_policy(const Size_Policy& r_size_policy) :\n   Size_Policy(r_size_policy),\n   m_size(Size_Policy::get_nearest_larger_size(1))\n-{\n-  trigger_policy_base::notify_externally_resized(m_size);\n-}\n+{ trigger_policy_base::notify_externally_resized(m_size); }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-hash_standard_resize_policy(const Size_Policy& r_size_policy, const Trigger_Policy& r_trigger_policy) :\n+hash_standard_resize_policy(const Size_Policy& r_size_policy, \n+\t\t\t    const Trigger_Policy& r_trigger_policy) :\n   Size_Policy(r_size_policy),\n   Trigger_Policy(r_trigger_policy),\n   m_size(Size_Policy::get_nearest_larger_size(1))\n-{\n-  trigger_policy_base::notify_externally_resized(m_size);\n-}\n+{ trigger_policy_base::notify_externally_resized(m_size); }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -86,115 +80,87 @@ PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   trigger_policy_base::swap(other);\n-\n   size_policy_base::swap(other);\n-\n   std::swap(m_size, other.m_size);\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_start()\n-{\n-  trigger_policy_base::notify_find_search_start();\n-}\n+{ trigger_policy_base::notify_find_search_start(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_collision()\n-{\n-  trigger_policy_base::notify_find_search_collision();\n-}\n+{ trigger_policy_base::notify_find_search_collision(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_end()\n-{\n-  trigger_policy_base::notify_find_search_end();\n-}\n+{ trigger_policy_base::notify_find_search_end(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_start()\n-{\n-  trigger_policy_base::notify_insert_search_start();\n-}\n+{ trigger_policy_base::notify_insert_search_start(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_collision()\n-{\n-  trigger_policy_base::notify_insert_search_collision();\n-}\n+{ trigger_policy_base::notify_insert_search_collision(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_end()\n-{\n-  trigger_policy_base::notify_insert_search_end();\n-}\n+{ trigger_policy_base::notify_insert_search_end(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_start()\n-{\n-  trigger_policy_base::notify_erase_search_start();\n-}\n+{ trigger_policy_base::notify_erase_search_start(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_collision()\n-{\n-  trigger_policy_base::notify_erase_search_collision();\n-}\n+{ trigger_policy_base::notify_erase_search_collision(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_end()\n-{\n-  trigger_policy_base::notify_erase_search_end();\n-}\n+{ trigger_policy_base::notify_erase_search_end(); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_inserted(size_type num_e)\n-{\n-  trigger_policy_base::notify_inserted(num_e);\n-}\n+{ trigger_policy_base::notify_inserted(num_e); }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erased(size_type num_e)\n-{\n-  trigger_policy_base::notify_erased(num_e);\n-}\n+{ trigger_policy_base::notify_erased(num_e); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_cleared()\n-{\n-  trigger_policy_base::notify_cleared();\n-}\n+{ trigger_policy_base::notify_cleared(); }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_resize_needed() const\n-{\n-  return (trigger_policy_base::is_resize_needed());\n-}\n+{ return trigger_policy_base::is_resize_needed(); }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n@@ -203,9 +169,8 @@ get_new_size(size_type size, size_type num_used_e) const\n {\n   if (trigger_policy_base::\n       is_grow_needed(size, num_used_e))\n-    return (size_policy_base::get_nearest_larger_size(size));\n-\n-  return (size_policy_base::get_nearest_smaller_size(size));\n+    return size_policy_base::get_nearest_larger_size(size);\n+  return size_policy_base::get_nearest_smaller_size(size);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -214,7 +179,6 @@ PB_DS_CLASS_C_DEC::\n notify_resized(size_type new_size)\n {\n   trigger_policy_base::notify_resized(new_size);\n-\n   m_size = new_size;\n }\n \n@@ -224,8 +188,7 @@ PB_DS_CLASS_C_DEC::\n get_actual_size() const\n {\n   PB_DS_STATIC_ASSERT(access, external_size_access);\n-\n-  return (m_size);\n+  return m_size;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -234,7 +197,6 @@ PB_DS_CLASS_C_DEC::\n resize(size_type new_size)\n {\n   PB_DS_STATIC_ASSERT(access, external_size_access);\n-\n   size_type actual_new_size = size_policy_base::get_nearest_larger_size(1);\n   while (actual_new_size < new_size)\n     {\n@@ -243,37 +205,33 @@ resize(size_type new_size)\n \n       if (pot == actual_new_size&&  pot < new_size)\n \tthrow resize_error();\n-\n       actual_new_size = pot;\n     }\n \n   if (actual_new_size > 0)\n     --actual_new_size;\n \n   const size_type old_size = m_size;\n-\n   try\n     {\n       do_resize(actual_new_size - 1);\n     }\n   catch(insert_error& )\n     {\n       m_size = old_size;\n-\n       throw resize_error();\n     }\n   catch(...)\n     {\n       m_size = old_size;\n-\n       throw;\n     }\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-do_resize(size_type /*new_size*/)\n+do_resize(size_type)\n {\n   // Do nothing\n }\n@@ -282,33 +240,25 @@ PB_DS_CLASS_T_DEC\n Trigger_Policy& \n PB_DS_CLASS_C_DEC::\n get_trigger_policy()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Trigger_Policy& \n PB_DS_CLASS_C_DEC::\n get_trigger_policy() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n Size_Policy& \n PB_DS_CLASS_C_DEC::\n get_size_policy()\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n PB_DS_CLASS_T_DEC\n const Size_Policy& \n PB_DS_CLASS_C_DEC::\n get_size_policy() const\n-{\n-  return (*this);\n-}\n+{ return *this; }\n \n #undef PB_DS_STATIC_ASSERT\n "}, {"sha": "cf7b1fb727ceb4020caa41482d6c11df30f8513d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -50,14 +50,11 @@\n // A sample resize policy.\n class sample_resize_policy\n {\n-\n public:\n \n   // Size type.\n   typedef size_t size_type;\n \n-public:\n-\n   // Default constructor.\n   sample_resize_policy();\n \n@@ -129,7 +126,6 @@ class sample_resize_policy\n   // Queries what the new size should be.\n   size_type\n   get_new_size(size_type size, size_type num_used_e) const;\n-\n };\n \n-#endif // #ifndef PB_DS_SAMPLE_RESIZE_POLICY_HPP\n+#endif "}, {"sha": "db07fbbc7e0f25c3099cc86f7cd841a2348e76d3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_trigger.hpp", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -50,14 +50,11 @@\n // A sample resize trigger policy.\n class sample_resize_trigger\n {\n-\n public:\n \n   // Size type.\n   typedef size_t size_type;\n \n-public:\n-\n   // Default constructor.\n   sample_resize_trigger();\n \n@@ -106,7 +103,8 @@ class sample_resize_trigger\n   inline void\n   notify_erase_search_end();\n \n-  // Notifies an element was inserted. the total number of entries in the table is num_entries.\n+  // Notifies an element was inserted. the total number of entries in\n+  // the table is num_entries.\n   inline void\n   notify_inserted(size_type num_entries);\n \n@@ -118,7 +116,8 @@ class sample_resize_trigger\n   void\n   notify_cleared();\n \n-  // Notifies the table was resized as a result of this object's signifying that a resize is needed.\n+  // Notifies the table was resized as a result of this object's\n+  // signifying that a resize is needed.\n   void\n   notify_resized(size_type new_size);\n \n@@ -139,9 +138,8 @@ class sample_resize_trigger\n   // Resizes to new_size.\n   virtual void\n   do_resize(size_type new_size);\n-\n };\n \n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SAMPLE_RESIZE_TRIGGER_HPP\n+#endif "}, {"sha": "b88e70363874653cdb7c767335d54e67be1854cb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -50,14 +50,11 @@\n // A sample size policy.\n class sample_size_policy\n {\n-\n public:\n \n   // Size type.\n   typedef size_t size_type;\n \n-public:\n-\n   // Default constructor.\n   sample_size_policy();\n \n@@ -77,7 +74,6 @@ class sample_size_policy\n   // Given a __size size, returns a __size that is smaller.\n   inline size_type\n   get_nearest_smaller_size(size_type size) const;\n-\n };\n \n-#endif // #ifndef PB_DS_SAMPLE_SIZE_POLICY_HPP\n+#endif "}, {"sha": "267db809153b82fedbc0efa004152d2de878f502", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist.hpp", "status": "removed", "additions": 0, "deletions": 296, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,296 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist.hpp\n- * Contains typelist_chain definitions.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_HPP\n-#define PB_DS_TYPELIST_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace pb_ds\n-{\n-  namespace detail\n-  {\n-    struct null_type\n-    { };\n-\n-    template<typename Hd, typename Tl>\n-    struct typelist_chain\n-    {\n-      typedef Hd head;\n-      typedef Tl tail;\n-    };\n-\n-    template<typename Root>\n-    struct typelist\n-    {\n-      typedef Root root;\n-    };\n-\n-#define PB_DS_TYPELIST_CHAIN1(X0) typelist_chain<X0, null_type>\n-#define PB_DS_TYPELIST_CHAIN2(X0, X1) typelist_chain<X0, PB_DS_TYPELIST_CHAIN1(X1) >\n-#define PB_DS_TYPELIST_CHAIN3(X0, X1, X2) typelist_chain<X0, PB_DS_TYPELIST_CHAIN2(X1, X2) >\n-#define PB_DS_TYPELIST_CHAIN4(X0, X1, X2, X3) typelist_chain<X0, PB_DS_TYPELIST_CHAIN3(X1, X2, X3) >\n-#define PB_DS_TYPELIST_CHAIN5(X0, X1, X2, X3, X4) typelist_chain<X0, PB_DS_TYPELIST_CHAIN4(X1, X2, X3, X4) >\n-#define PB_DS_TYPELIST_CHAIN6(X0, X1, X2, X3, X4, X5) typelist_chain<X0, PB_DS_TYPELIST_CHAIN5(X1, X2, X3, X4, X5) >\n-#define PB_DS_TYPELIST_CHAIN7(X0, X1, X2, X3, X4, X5, X6) typelist_chain<X0, PB_DS_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6) >\n-#define PB_DS_TYPELIST_CHAIN8(X0, X1, X2, X3, X4, X5, X6, X7) typelist_chain<X0, PB_DS_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7) >\n-#define PB_DS_TYPELIST_CHAIN9(X0, X1, X2, X3, X4, X5, X6, X7, X8) typelist_chain<X0, PB_DS_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8) >\n-#define PB_DS_TYPELIST_CHAIN10(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) typelist_chain<X0, PB_DS_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9) >\n-#define PB_DS_TYPELIST_CHAIN11(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) typelist_chain<X0, PB_DS_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) >\n-#define PB_DS_TYPELIST_CHAIN12(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) typelist_chain<X0, PB_DS_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) >\n-#define PB_DS_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) typelist_chain<X0, PB_DS_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n-#define PB_DS_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) typelist_chain<X0, PB_DS_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n-#define PB_DS_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) typelist_chain<X0, PB_DS_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n-\n-#include <ext/pb_ds/detail/typelist/typelist_apply.hpp>\n-\n-    template<typename Fn, class Typelist>\n-    void\n-    typelist_apply(Fn& r_fn, Typelist)\n-    {\n-      detail::apply_<Fn, typename Typelist::root> a;\n-      a(r_fn);\n-    }\n-\n-#include <ext/pb_ds/detail/typelist/typelist_append.hpp>\n-\n-    template<typename Typelist0, class Typelist1>\n-    struct typelist_append\n-    {\n-    private:\n-      typedef\n-      typename detail::typelist_append_<\n-      typename Typelist0::root,\n-      typename Typelist1::root>::type\n-      res_hd;\n-\n-    public:\n-      typedef typelist< res_hd> type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_typelist_append.hpp>\n-\n-    template<typename Typelist_Typelist>\n-    struct typelist_typelist_append\n-    {\n-    private:\n-      typedef\n-      typename detail::typelist_typelist_append_<\n-      typename Typelist_Typelist::root>::type\n-      res_hd;\n-\n-    public:\n-      typedef typelist< res_hd> type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_contains.hpp>\n-\n-    template<typename Typelist, typename T>\n-    struct typelist_contains\n-    {\n-      enum\n-\t{\n-\t  value =\n-\t  detail::typelist_contains_<\n-\t  typename Typelist::root,\n-\t  T>::value\n-\t};\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_filter.hpp>\n-\n-    template<typename Typelist, template<typename T>\n-    class Pred>\n-    struct typelist_filter\n-    {\n-    private:\n-      typedef\n-      typename detail::typelist_chain_filter_<\n-      typename Typelist::root,\n-      Pred>::type\n-      root_type;\n-\n-    public:\n-      typedef typelist< root_type> type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_at_index.hpp>\n-\n-    template<typename Typelist, int i>\n-    struct typelist_at_index\n-    {\n-      typedef\n-      typename detail::typelist_chain_at_index_<\n-\ttypename Typelist::root,\n-\ti>::type\n-      type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_transform.hpp>\n-\n-    template<typename Typelist, template<typename T>\n-    class Transform>\n-    struct typelist_transform\n-    {\n-    private:\n-      typedef\n-      typename detail::typelist_chain_transform_<\n-      typename Typelist::root,\n-      Transform>::type\n-      root_type;\n-\n-    public:\n-      typedef typelist< root_type> type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_flatten.hpp>\n-\n-    template<typename Typelist_Typelist>\n-    struct typelist_flatten\n-    {\n-    private:\n-      typedef\n-      typename detail::typelist_chain_flatten_<\n-      typename Typelist_Typelist::root>::type\n-      root_type;\n-\n-    public:\n-      typedef typelist< root_type> type;\n-    };\n-\n-    template<typename Typelist>\n-    struct typelist_from_first\n-    {\n-    private:\n-      typedef typename typelist_at_index< Typelist, 0>::type first_type;\n-\n-    public:\n-      typedef typelist< typelist_chain< first_type, null_type> > type;\n-    };\n-\n-    template<typename T0>\n-    struct typelist1\n-    {\n-      typedef typelist< PB_DS_TYPELIST_CHAIN1( T0)> type;\n-    };\n-\n-    template<typename T0, typename T1>\n-    struct typelist2\n-    {\n-      typedef\n-      typelist<\n-\tPB_DS_TYPELIST_CHAIN2(                T0,  T1)>\n-      type;\n-    };\n-\n-    template<typename T0, typename T1, typename T2>\n-    struct typelist3\n-    {\n-      typedef\n-      typelist<\n-\tPB_DS_TYPELIST_CHAIN3(                T0,  T1,  T2)>\n-      type;\n-    };\n-\n-    template<typename T0, typename T1, typename T2, typename T3>\n-    struct typelist4\n-    {\n-      typedef\n-      typelist<\n-\tPB_DS_TYPELIST_CHAIN4(                T0,  T1,  T2,  T3)>\n-      type;\n-    };\n-\n-    template<typename T0,\n-\t     typename T1,\n-\t     typename T2,\n-\t     typename T3,\n-\t     typename T4>\n-    struct typelist5\n-    {\n-      typedef\n-      typelist<\n-\tPB_DS_TYPELIST_CHAIN5(                T0,  T1,  T2,  T3,  T4)>\n-      type;\n-    };\n-\n-    template<typename T0,\n-\t     typename T1,\n-\t     typename T2,\n-\t     typename T3,\n-\t     typename T4,\n-\t     typename T5>\n-    struct typelist6\n-    {\n-      typedef\n-      typelist<\n-\tPB_DS_TYPELIST_CHAIN6(                T0,  T1,  T2,  T3,  T4,  T5)>\n-      type;\n-    };\n-\n-#undef PB_DS_TYPELIST_CHAIN1\n-#undef PB_DS_TYPELIST_CHAIN2\n-#undef PB_DS_TYPELIST_CHAIN3\n-#undef PB_DS_TYPELIST_CHAIN4\n-#undef PB_DS_TYPELIST_CHAIN5\n-#undef PB_DS_TYPELIST_CHAIN6\n-#undef PB_DS_TYPELIST_CHAIN7\n-#undef PB_DS_TYPELIST_CHAIN8\n-#undef PB_DS_TYPELIST_CHAIN9\n-#undef PB_DS_TYPELIST_CHAIN10\n-#undef PB_DS_TYPELIST_CHAIN11\n-#undef PB_DS_TYPELIST_CHAIN12\n-#undef PB_DS_TYPELIST_CHAIN13\n-#undef PB_DS_TYPELIST_CHAIN14\n-#undef PB_DS_TYPELIST_CHAIN15\n-\n-  } // namespace detail\n-\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_TYPELIST_HPP\n-"}, {"sha": "2498628bd593589bbf7cc80ebe4f1f49e1ba6910", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_append.hpp", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_append.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_append.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_append.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,84 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_append.hpp\n- * Contains typelist_chain utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_APPEND_HPP\n-#define PB_DS_TYPELIST_APPEND_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Chain0, class Typelist_Chain1>\n-  struct typelist_append_;\n-\n-  template<typename Hd, typename Tl, class Typelist_Chain1>\n-  struct typelist_append_<typelist_chain<Hd, Tl>, Typelist_Chain1>\n-  {\n-    typedef typelist_chain<Hd, typename typelist_append_<Tl, Typelist_Chain1>::type> type;\n-  };\n-\n-  template<typename Typelist_Chain1>\n-  struct typelist_append_< null_type, Typelist_Chain1>\n-  {\n-    typedef Typelist_Chain1 type;\n-  };\n-\n-  template<typename Typelist_Chain0>\n-  struct typelist_append_<Typelist_Chain0, null_type>\n-  {\n-    typedef Typelist_Chain0 type;\n-  };\n-\n-  template<>\n-  struct typelist_append_<null_type, null_type>\n-  {\n-    typedef null_type type;\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_APPEND_HPP\n-"}, {"sha": "311301c94d62dfdee1e59ee847d5a66c0a983b9d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_apply.hpp", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_apply.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_apply.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_apply.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,79 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_apply.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_APPLY_HPP\n-#define PB_DS_TYPELIST_APPLY_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Fn, class Typelist_Chain>\n-  struct apply_;\n-\n-  template<typename Fn, class Hd, class Tl>\n-  struct apply_<Fn, typelist_chain<Hd, Tl> >\n-  {\n-    void\n-    operator()(Fn& r_fn)\n-    {\n-      r_fn(type_to_type<Hd>());\n-      apply_<Fn, Tl> next;\n-      next(r_fn);\n-    }\n-  };\n-\n-  template<typename Fn>\n-  struct apply_<Fn, null_type>\n-  {\n-    void\n-    operator()(Fn&) { }\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_APPLY_HPP\n-"}, {"sha": "68b7e8b8d35fa74ed289e321eb342f4194e34d6b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_assoc_container_find.hpp", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_assoc_container_find.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_assoc_container_find.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_assoc_container_find.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,74 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_assoc_container_find.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_ASSOC_CNTNR_FIND_HPP\n-#define PB_DS_TYPELIST_ASSOC_CNTNR_FIND_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Tl, typename Key>\n-  struct typelist_assoc_container_find_;\n-\n-  template<typename Now_Key, typename Now_Data, typename Rest_Tl, typename Key>\n-  struct typelist_assoc_container_find_<\n-    typelist_chain<std::pair<Now_Key, Now_Data>, Rest_Tl>, Key>\n-  {\n-    typedef typename typelist_assoc_container_find_< Rest_Tl, Key>::type type;\n-  };\n-\n-  template<typename Now_Key, typename Now_Data, typename Rest_Tl>\n-  struct typelist_assoc_container_find_<\n-    typelist_chain<std::pair<Now_Key, Now_Data>, Rest_Tl>, Now_Key>\n-  {\n-    typedef Now_Data type;\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_ASSOC_CNTNR_FIND_HPP\n-"}, {"sha": "a392d12edf178719d4ce2a64580080d0a89f9ffd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_at_index.hpp", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_at_index.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_at_index.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_at_index.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,72 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_at_index.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_AT_INDEX_HPP\n-#define PB_DS_TYPELIST_AT_INDEX_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Chain, int i>\n-  struct typelist_chain_at_index_;\n-\n-  template<typename Hd, class Tl>\n-  struct typelist_chain_at_index_<typelist_chain<Hd, Tl>, 0>\n-  {\n-    typedef Hd type;\n-  };\n-\n-  template<typename Hd, class Tl, int i>\n-  struct typelist_chain_at_index_<typelist_chain<Hd, Tl>, i>\n-  {\n-    typedef typename typelist_chain_at_index_< Tl, i - 1>::type type;\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_AT_INDEX_HPP\n-"}, {"sha": "dc8a347afa5e4e1a049c2a5714b186ad4855ae18", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_contains.hpp", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_contains.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_contains.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_contains.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,87 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_contains.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_CONTAINS_HPP\n-#define PB_DS_TYPELIST_CONTAINS_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Chain, class T>\n-  struct typelist_contains_;\n-\n-  template<typename T>\n-  struct typelist_contains_<null_type, T>\n-  {\n-    enum\n-      {\n-        value = false\n-      };\n-  };\n-\n-  template<typename Hd, class Tl, class T>\n-  struct typelist_contains_<typelist_chain<Hd, Tl>, T>\n-  {\n-    enum\n-      {\n-        value = typelist_contains_<Tl, T>::value\n-      };\n-  };\n-\n-  template<typename Tl, class T>\n-  struct typelist_contains_<typelist_chain<T, Tl>, T>\n-  {\n-    enum\n-      {\n-        value = true\n-      };\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_CONTAINS_HPP\n-"}, {"sha": "a29facb583b52179f6fd5bc58d19d14421451fcf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_filter.hpp", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,80 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_filter.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_FILTER_HPP\n-#define PB_DS_TYPELIST_FILTER_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Chain, template<typename T> class Pred>\n-  struct typelist_chain_filter_;\n-\n-  template<template<typename T>\n-  class Pred>\n-  struct typelist_chain_filter_<null_type, Pred>\n-  {\n-    typedef null_type type;\n-  };\n-\n-  template<typename Hd, class Tl, template<typename T> class Pred>\n-  struct typelist_chain_filter_< typelist_chain<Hd, Tl>, Pred>\n-  {\n-    typedef typename typelist_chain_filter_< Tl, Pred>::type rest;\n-\n-    enum\n-      {\n-        include_hd = Pred<Hd>::value\n-      };\n-\n-    typedef typename __conditional_type<include_hd, typelist_chain<Hd, rest>, rest>::__type type;\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_FILTER_HPP\n-"}, {"sha": "5d8e49899131935b065f41959cdb14bd26eabf5b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_flatten.hpp", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_flatten.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_flatten.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_flatten.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,73 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_flatten.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_FLATTEN_HPP\n-#define PB_DS_TYPELIST_FLATTEN_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Typelist_Chain>\n-  struct typelist_chain_flatten_;\n-\n-  template<typename Hd_Tl>\n-  struct typelist_chain_flatten_<typelist_chain<Hd_Tl, null_type> >\n-  {\n-    typedef typename Hd_Tl::root type;\n-  };\n-\n-  template<typename Hd_Typelist, class Tl_Typelist>\n-  struct typelist_chain_flatten_<typelist_chain<Hd_Typelist, Tl_Typelist> >\n-  {\n-    typedef typename typelist_chain_flatten_< Tl_Typelist>::type rest;\n-    typedef typename typelist_append<Hd_Typelist, typelist<rest> >::type::root type;\n-  };\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_FLATTEN_HPP\n-"}, {"sha": "e62de8d6e44c02b8f80182b4550d119bdcb2758a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_transform.hpp", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_transform.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_transform.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_transform.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,75 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_transform.hpp\n- * Contains typelist utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_TRANSFORM_HPP\n-#define PB_DS_TYPELIST_TRANSFORM_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-  template<typename Typelist_Chain, template<typename T> class Transform>\n-  struct typelist_chain_transform_;\n-\n-  template<template<typename T> class Transform>\n-  struct typelist_chain_transform_<null_type, Transform>\n-  {\n-    typedef null_type type;\n-  };\n-\n-  template<typename Hd, class Tl, template<typename T> class Transform>\n-  struct typelist_chain_transform_<typelist_chain<Hd, Tl>, Transform>\n-  {\n-    typedef typename typelist_chain_transform_< Tl, Transform>::type rest;\n-    typedef typename Transform<Hd>::type transform_type;\n-    typedef typelist_chain<transform_type, rest> type;\n-  };\n-\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_TRANSFORM_HPP\n-"}, {"sha": "92ede86e9d574058ade52b99bdc2da3058442614", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_typelist_append.hpp", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_typelist_append.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_typelist_append.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_typelist_append.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,87 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_typelist_append.hpp\n- * Contains typelist_chain utilities.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_TYPELIST_APPEND_HPP\n-#define PB_DS_TYPELIST_TYPELIST_APPEND_HPP\n-\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace detail\n-{\n-\n-  template<typename Typelist_Typelist_Chain>\n-  struct typelist_typelist_append_;\n-\n-  template<typename Hd>\n-  struct typelist_typelist_append_<\n-    typelist_chain<Hd, null_type> >\n-  {\n-    typedef typelist_chain< Hd, null_type> type;\n-  };\n-\n-  template<typename Hd, class Tl>\n-  struct typelist_typelist_append_<\n-    typelist_chain<\n-    Hd,\n-    Tl> >\n-  {\n-  private:\n-    typedef typename typelist_typelist_append_< Tl>::type rest;\n-\n-  public:\n-    typedef\n-    typename typelist_append<\n-    Hd,\n-    typelist<\n-    rest> >::type::root\n-    type;\n-  };\n-\n-} // namespace detail\n-\n-#endif // #ifndef PB_DS_TYPELIST_TYPELIST_APPEND_HPP\n-"}, {"sha": "19c703f9cb7f7acdce5d8eaf4ff830b7060a0d4c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist_assoc_container.hpp", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist_assoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186e616b9605ef36a084db0a407551c04060dbd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist_assoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist_assoc_container.hpp?ref=a186e616b9605ef36a084db0a407551c04060dbd", "patch": "@@ -1,91 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file typelist_assoc_container.hpp\n- * Contains an associative container based on typelists.\n- * Typelists are an idea by Andrei Alexandrescu.\n- */\n-\n-#ifndef PB_DS_TYPELIST_CHAIN_HPP\n-#define PB_DS_TYPELIST_CHAIN_HPP\n-\n-#include <utility>\n-#include <ext/pb_ds/detail/typelist.hpp>\n-\n-namespace pb_ds\n-{\n-  namespace detail\n-  {\n-    template<typename Typelist = typelist<null_type> >\n-    struct typelist_assoc_container\n-    {\n-      typedef Typelist tl;\n-    };\n-\n-    template<typename Typelist_Assoc_Cntnr, typename Key, typename Data>\n-    struct typelist_assoc_container_insert\n-    {\n-    private:\n-      typedef typename Typelist_Assoc_Cntnr::tl already_tl;\n-\n-      typedef typelist<typelist_chain<std::pair<Key, Data>, null_type> > new_tl;\n-\n-      typedef typename typelist_append< new_tl, already_tl>::type so_happy_together;\n-\n-    public:\n-      typedef typelist_assoc_container< so_happy_together> type;\n-    };\n-\n-#include <ext/pb_ds/detail/typelist/typelist_assoc_container_find.hpp>\n-\n-    template<typename Typelist_Assoc_Cntnr, typename Key>\n-    struct typelist_assoc_container_find\n-    {\n-    private:\n-      typedef typename Typelist_Assoc_Cntnr::tl already;\n-      typedef typename already::root already_root;\n-    };\n-  } // namespace detail\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_TYPELIST_CHAIN_HPP\n-"}, {"sha": "c17d97831f8d182a7b56373e6cb30a9595e12b2b", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -51,6 +51,7 @@\n #include <vector>\n #include <cmath>\n #include <ext/pb_ds/exception.hpp>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/hash_fn/mask_based_range_hashing.hpp>\n #include <ext/pb_ds/detail/hash_fn/mod_based_range_hashing.hpp>\n #include <ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_size_base.hpp>"}, {"sha": "9a4813fd5bba903836589a6e651d8a707b7ca438", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 183, "deletions": 59, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -43,8 +43,8 @@\n  * Typelists are an idea by Andrei Alexandrescu.\n  */\n \n-#ifndef TYPELIST_HPP\n-#define TYPELIST_HPP 1\n+#ifndef _TYPELIST_H\n+#define _TYPELIST_H 1\n \n #include <ext/type_traits.h>\n \n@@ -68,6 +68,10 @@ namespace typelist\n       typedef Typelist \ttail;\n     };\n \n+  template<typename Fn, class Typelist>\n+    void\n+    apply(Fn&, Typelist);\n+\n   template<typename Typelist0, typename Typelist1>\n     struct append;\n \n@@ -83,11 +87,33 @@ namespace typelist\n   template<typename Typelist, int i>\n     struct at_index;\n \n-  template<typename Fn, typename Typelist>\n-    struct apply;\n-\n   template<typename Typelist, template<typename T> class Transform>\n     struct transform;\n+\n+  template<typename Typelist_Typelist>\n+    struct flatten;\n+\n+  template<typename Typelist>\n+    struct from_first;\n+\n+  template<typename T1>\n+    struct create1;\n+\n+  template<typename T1, typename T2>\n+    struct create2;\n+\n+  template<typename T1, typename T2, typename T3>\n+    struct create3;\n+\n+  template<typename T1, typename T2, typename T3, typename T4>\n+    struct create4;\n+\n+  template<typename T1, typename T2, typename T3, typename T4, typename T5>\n+    struct create5;\n+\n+  template<typename T1, typename T2, typename T3, \n+\t   typename T4, typename T5, typename T6>\n+    struct create6;\n } // namespace typelist\n \n _GLIBCXX_END_NAMESPACE\n@@ -133,16 +159,50 @@ namespace detail\n   template<typename Hd, typename Tl, typename Typelist_Chain>\n     struct append_<chain<Hd, Tl>, Typelist_Chain>\n     {\n-      typedef append_<Tl, Typelist_Chain> \t\tappend_type;\n-      typedef chain<Hd, typename append_type::type> \ttype;\n+    private:\n+      typedef append_<Tl, Typelist_Chain> \t\t\tappend_type;\n+\n+    public:\n+      typedef chain<Hd, typename append_type::type> \t\ttype;\n     };\n \n   template<typename Typelist_Chain>\n     struct append_<null_type, Typelist_Chain>\n+    {\n+      typedef Typelist_Chain \t\t\t      \t\ttype;\n+    };\n+\n+  template<typename Typelist_Chain>\n+    struct append_<Typelist_Chain, null_type>\n     {\n       typedef Typelist_Chain \t\t\t\t\ttype;\n     };\n \n+  template<>\n+    struct append_<null_type, null_type>\n+    {\n+      typedef null_type \t\t\t\t\ttype;\n+    };\n+\n+  template<typename Typelist_Typelist_Chain>\n+    struct append_typelist_;\n+\n+  template<typename Hd>\n+    struct append_typelist_<chain<Hd, null_type> >\n+    {\n+      typedef chain<Hd, null_type> \t\t\t\ttype;\n+    };\n+\n+  template<typename Hd, typename Tl>\n+    struct append_typelist_<chain< Hd, Tl> >\n+    {\n+    private:\n+      typedef typename append_typelist_<Tl>::type \t\trest_type;\n+      \n+    public:\n+      typedef typename append<Hd, node<rest_type> >::type::root\ttype;\n+    };\n+\n   template<typename Typelist_Chain, typename T>\n     struct contains_;\n \n@@ -179,19 +239,22 @@ namespace detail\n   template<template<typename T> class Pred>\n     struct chain_filter_<null_type, Pred>\n     {\n-      typedef null_type type;\n+      typedef null_type \t\t\t\t\ttype;\n   };\n \n   template<typename Hd, typename Tl, template<typename T> class Pred>\n     struct chain_filter_<chain<Hd, Tl>, Pred>\n     {\n+    private:\n       enum\n \t{\n \t  include_hd = Pred<Hd>::value\n \t};\n       \n-      typedef typename chain_filter_<Tl, Pred>::type \trest_type;\n-      typedef chain<Hd, rest_type> \t\t\tchain_type;\n+      typedef typename chain_filter_<Tl, Pred>::type \t\trest_type;\n+      typedef chain<Hd, rest_type> \t\t\t\tchain_type;\n+\n+    public:\n       typedef typename __conditional_type<include_hd, chain_type, rest_type>::__type type;\n   };\n \n@@ -207,7 +270,7 @@ namespace detail\n   template<typename Hd, typename Tl, int i>\n     struct chain_at_index_<chain<Hd, Tl>, i>\n     {\n-      typedef typename chain_at_index_<Tl, i - 1>::type type;\n+      typedef typename chain_at_index_<Tl, i - 1>::type \ttype;\n     };\n \n   template<class Typelist_Chain, template<typename T> class Transform>\n@@ -216,56 +279,70 @@ namespace detail\n   template<template<typename T> class Transform>\n     struct chain_transform_<null_type, Transform>\n     {\n-      typedef null_type type;\n+      typedef null_type \t\t\t\t\ttype;\n     };\n   \n   template<class Hd, class Tl, template<typename T> class Transform>\n     struct chain_transform_<chain<Hd, Tl>, Transform>\n     {\n-      typedef typename chain_transform_<Tl, Transform>::type rest_type;\n-      typedef typename Transform<Hd>::type transform_type;\n-      typedef chain<transform_type, rest_type> type;\n+    private:\n+      typedef typename chain_transform_<Tl, Transform>::type \trest_type;\n+      typedef typename Transform<Hd>::type \t\t\ttransform_type;\n+\n+    public:\n+      typedef chain<transform_type, rest_type> \t\t\ttype;\n     };\n \n   template<typename Typelist_Typelist_Chain>\n-    struct append_typelist_;\n+    struct chain_flatten_;\n \n-  template<typename Hd>\n-    struct append_typelist_<chain<Hd, null_type> >\n-    {\n-      typedef chain<Hd, null_type> type;\n-    };\n+  template<typename Hd_Tl>\n+  struct chain_flatten_<chain<Hd_Tl, null_type> >\n+  {\n+    typedef typename Hd_Tl::root \t\t\t\ttype;\n+  };\n \n-  template<typename Hd, typename Tl>\n-    struct append_typelist_<chain< Hd, Tl> >\n-    {\n-    private:\n-      typedef typename append_typelist_<Tl>::type rest;\n-      \n-    public:\n-      typedef typename append<Hd, node<rest> >::type::root type;\n-    };\n+  template<typename Hd_Typelist, class Tl_Typelist>\n+  struct chain_flatten_<chain<Hd_Typelist, Tl_Typelist> >\n+  {\n+  private:\n+    typedef typename chain_flatten_<Tl_Typelist>::type \t\trest_type;\n+    typedef append<Hd_Typelist, node<rest_type> >\t\tappend_type;\n+  public:\n+    typedef typename append_type::type::root \t\t\ttype;\n+  };\n } // namespace detail\n } // namespace typelist\n \n _GLIBCXX_END_NAMESPACE\n \n+#define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>\n+#define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n+#define _GLIBCXX_TYPELIST_CHAIN3(X0, X1, X2) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN2(X1, X2) >\n+#define _GLIBCXX_TYPELIST_CHAIN4(X0, X1, X2, X3) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN3(X1, X2, X3) >\n+#define _GLIBCXX_TYPELIST_CHAIN5(X0, X1, X2, X3, X4) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN4(X1, X2, X3, X4) >\n+#define _GLIBCXX_TYPELIST_CHAIN6(X0, X1, X2, X3, X4, X5) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN5(X1, X2, X3, X4, X5) >\n+#define _GLIBCXX_TYPELIST_CHAIN7(X0, X1, X2, X3, X4, X5, X6) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6) >\n+#define _GLIBCXX_TYPELIST_CHAIN8(X0, X1, X2, X3, X4, X5, X6, X7) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7) >\n+#define _GLIBCXX_TYPELIST_CHAIN9(X0, X1, X2, X3, X4, X5, X6, X7, X8) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8) >\n+#define _GLIBCXX_TYPELIST_CHAIN10(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9) >\n+#define _GLIBCXX_TYPELIST_CHAIN11(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) >\n+#define _GLIBCXX_TYPELIST_CHAIN12(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) >\n+#define _GLIBCXX_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n+#define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n+#define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n namespace typelist\n {\n-  template<typename Fn, typename Typelist>\n-    struct apply\n+  template<typename Fn, class Typelist>\n+    void\n+    apply(Fn& fn, Typelist)\n     {\n-      void\n-      operator()(Fn& f)\n-      {\n-\ttypedef typename Typelist::root \t\t\troot_type;\n-\tdetail::apply_<Fn, root_type>  a;\t\n-\ta(f);\n-      }\n-    };\n+      detail::apply_<Fn, typename Typelist::root> a;\n+      a(fn);\n+    }\n \n   template<typename Typelist0, typename Typelist1>\n     struct append\n@@ -276,7 +353,7 @@ namespace typelist\n       typedef detail::append_<root0_type, root1_type> \t\tappend_type;\n \n     public:\n-      typedef node<typename append_type::type> \t\ttype;\n+      typedef node<typename append_type::type> \t\t\ttype;\n     };\n \n   template<typename Typelist_Typelist>\n@@ -287,14 +364,16 @@ namespace typelist\n       typedef detail::append_typelist_<root_type> \t\tappend_type;\n \n     public:\n-      typedef node<typename append_type::type> \t\ttype;\n+      typedef node<typename append_type::type> \t\t\ttype;\n     };\n \n   template<typename Typelist, typename T>\n     struct contains\n     {\n+    private:\n       typedef typename Typelist::root \t\t\t\troot_type;\n \n+    public:\n       enum\n \t{\n \t  value = detail::contains_<root_type, T>::value\n@@ -309,15 +388,17 @@ namespace typelist\n       typedef detail::chain_filter_<root_type, Pred> \t\tfilter_type;\n \n     public:\n-      typedef node<typename filter_type::type> \t       \ttype;\n+      typedef node<typename filter_type::type> \t       \t\ttype;\n     };\n \n   template<typename Typelist, int i>\n     struct at_index\n     {\n+    private:\n       typedef typename Typelist::root \t\t\t\troot_type;\n       typedef detail::chain_at_index_<root_type, i> \t\tindex_type;\n       \n+    public:\n       typedef typename index_type::type \t\t\ttype;\n     };\n \n@@ -331,25 +412,68 @@ namespace typelist\n     public:\n       typedef node<typename transform_type::type> \t\ttype;\n     };\n+\n+  template<typename Typelist_Typelist>\n+    struct flatten\n+    {\n+    private:\n+      typedef typename Typelist_Typelist::root \t\t      \troot_type;\n+      typedef typename detail::chain_flatten_<root_type>::type \tflatten_type;\n+\n+    public:\n+      typedef node<flatten_type> \t\t\t\ttype;\n+    };\n+\n+  template<typename Typelist>\n+    struct from_first\n+    {\n+    private:\n+      typedef typename at_index<Typelist, 0>::type \t\tfirst_type;\n+\n+    public:\n+      typedef node<chain<first_type, null_type> > \t\ttype;\n+    };\n+\n+  template<typename T1>\n+    struct create1\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN1(T1)> \t\ttype;\n+    };\n+\n+  template<typename T1, typename T2>\n+    struct create2\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN2(T1,T2)> \t\ttype;\n+    };\n+\n+  template<typename T1, typename T2, typename T3>\n+    struct create3\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN3(T1,T2,T3)>\t\ttype;\n+    };\n+\n+  template<typename T1, typename T2, typename T3, typename T4>\n+    struct create4\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN4(T1,T2,T3,T4)>\ttype;\n+    };\n+\n+  template<typename T1, typename T2, typename T3, \n+\t   typename T4, typename T5>\n+    struct create5\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN5(T1,T2,T3,T4,T5)>\ttype;\n+    };\n+\n+  template<typename T1, typename T2, typename T3, \n+\t   typename T4, typename T5, typename T6>\n+    struct create6\n+    {\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN6(T1,T2,T3,T4,T5,T6)>\ttype;\n+    };\n } // namespace typelist\n _GLIBCXX_END_NAMESPACE\n \n \n-#define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>\n-#define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n-#define _GLIBCXX_TYPELIST_CHAIN3(X0, X1, X2) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN2(X1, X2) >\n-#define _GLIBCXX_TYPELIST_CHAIN4(X0, X1, X2, X3) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN3(X1, X2, X3) >\n-#define _GLIBCXX_TYPELIST_CHAIN5(X0, X1, X2, X3, X4) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN4(X1, X2, X3, X4) >\n-#define _GLIBCXX_TYPELIST_CHAIN6(X0, X1, X2, X3, X4, X5) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN5(X1, X2, X3, X4, X5) >\n-#define _GLIBCXX_TYPELIST_CHAIN7(X0, X1, X2, X3, X4, X5, X6) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6) >\n-#define _GLIBCXX_TYPELIST_CHAIN8(X0, X1, X2, X3, X4, X5, X6, X7) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7) >\n-#define _GLIBCXX_TYPELIST_CHAIN9(X0, X1, X2, X3, X4, X5, X6, X7, X8) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8) >\n-#define _GLIBCXX_TYPELIST_CHAIN10(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9) >\n-#define _GLIBCXX_TYPELIST_CHAIN11(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) >\n-#define _GLIBCXX_TYPELIST_CHAIN12(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) >\n-#define _GLIBCXX_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n-#define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n-#define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n-\n #endif\n "}, {"sha": "cb13b9ada451e885a4acb24df3fd88a804e7b848", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_resize_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -70,5 +70,5 @@ int main()\n   h.resize(20); // { dg-error \"instantiated from\" }\n }\n \n-// { dg-error \"invalid\" \"\" { target *-*-* } 236 } \n+// { dg-error \"invalid\" \"\" { target *-*-* } 199 } \n // { dg-excess-errors \"member function\" } "}, {"sha": "5049e1a1ff5724b9de6fbcff17a2ee40f7b502bb", "filename": "libstdc++-v3/testsuite/performance/23_containers/create/map.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -51,11 +51,9 @@ main()\n #endif    \n \n   typedef __gnu_test::maps<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "97ea3af117a4b2587301939e6b54412318a52510", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_from_sorted/set.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -61,11 +61,9 @@ main()\n #endif    \n \n   typedef __gnu_test::sets<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create_from_sorted\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "7a47f32b2ec2d86179eaec04ced8dec0472ccd6e", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_sort/list.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -54,11 +54,9 @@ main()\n #endif    \n \n   typedef __gnu_test::lists<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create_sort\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "e6c2c79a7fc7ed5c978c45624300632727f7bbe0", "filename": "libstdc++-v3/testsuite/performance/23_containers/find/map.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -57,11 +57,9 @@ main()\n #endif    \n \n   typedef __gnu_test::maps<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"find\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "386890d90ea67ae6408f1a243aa87bbc481c16df", "filename": "libstdc++-v3/testsuite/performance/23_containers/index/map.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -58,13 +58,10 @@ main()\n #define thread_type true\n #endif    \n \n-  using __gnu_test::associative_containers;\n   typedef __gnu_test::maps<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"index_associative\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "b3f8f71327c5bf327b7d02b3d8afe96009028692", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/associative.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -65,8 +65,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_associative\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "7023332e5e97fc311c46fae97549323552820c05", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/sequence.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -61,8 +61,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_sequence\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "ee48ce2a708e2a56e218c45d7fc68045075df112", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_erase/associative.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -68,8 +68,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_erase_associative\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "72b1921e69758048572525a79a93f9962892d572", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_from_sorted/set.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -76,13 +76,10 @@ main()\n #define thread_type true\n #endif    \n \n-  using __gnu_test::associative_containers;\n   typedef __gnu_test::sets<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_from_sorted\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "841cdf0477ecc4004cd612cb2baae6bda6ebc5b7", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -250,8 +250,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"producer_consumer_associative\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "1590c974b474ec441f9aaba503d58182cf4d6ae7", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -249,8 +249,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"producer_consumer_sequence\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "14b42b4c0096da6184b79da2b991918f4b846ca2", "filename": "libstdc++-v3/testsuite/performance/23_containers/sort_search/list.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -71,13 +71,10 @@ main()\n #define thread_type true\n #endif    \n \n-  using __gnu_test::sequence_containers;\n   typedef __gnu_test::lists<int, thread_type>::type container_types;\n-\n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"sort_search\");\n-  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n-  applier(test);\n+  __gnu_cxx::typelist::apply(test, container_types());\n \n   return 0;\n }"}, {"sha": "48d0d8644e7075188f4db99977aed9d3ce668165", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for erasing random integers.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/mem_usage/erase_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <performance/mem/mem_track_allocator.hpp>\n #include <iostream>\n #include <vector>\n@@ -94,7 +93,7 @@ main(int argc, char* a_p_argv[])\n \t  tl_t;\n \n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n@@ -104,7 +103,7 @@ main(int argc, char* a_p_argv[])\n \t  std::less<int>, alloc_t>\n \t  native_t;\n \n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch (...)"}, {"sha": "7f27da93fa38125e23ab50733ad9dab8be330f3d", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/hash_zlob_random_int_find_timing.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,14 +44,13 @@\n  * Contains test for finding random integers.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_set.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/find_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -87,13 +86,13 @@ main(int argc, char* a_p_argv[])\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n \ttypedef native_hash_map< int, char> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef hash_common_types<int, char>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n     }\n   catch (...)"}, {"sha": "bd60c0fcc239178882490d4139ceb3578fb55679", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,7 +44,7 @@\n  * Contains test for inserting text words.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <io/text_populate.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_multimap.hpp>\n@@ -55,7 +55,6 @@\n #include <performance/assoc/timing/multimap_find_test.hpp>\n #include <performance/assoc/multimap_common_type.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -101,21 +100,21 @@ main(int argc, char* a_p_argv[])\n \n \ttypedef multimap_find_test<vec_t::const_iterator, false> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_hash_multimap<std::string, int, 8, string_hash_fn> native_t;\n \ttypedef multimap_find_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef native_multimap<std::string, int> native_t;\n \ttypedef multimap_find_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch (...)"}, {"sha": "e0b8afd609d3d264d4a030e1be1ddf5f75bc2707", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_insert_mem_usage.hpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,7 +44,7 @@\n  * Contains test for inserting text words.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <io/text_populate.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_multimap.hpp>\n@@ -54,7 +54,6 @@\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/mem_usage/multimap_insert_test.hpp>\n #include <performance/assoc/multimap_common_type.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <performance/mem/mem_track_allocator.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n #include <iostream>\n@@ -102,22 +101,22 @@ main(int argc, char* a_p_argv[])\n \ttl_t tl;\n \ttypedef multimap_insert_test<vec_t::const_iterator, false> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef mmap_tl_t< string_t, int, alloc_t>::type tl_t;\n \ttl_t tl;\n \ttypedef multimap_insert_test<vec_t::const_iterator, false> test_type;\n \ttest_type tst(b,  prm*  ratio_n, prm*  ratio_s, prm*  ratio_m);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       typedef multimap_insert_test<vec_t::const_iterator, true> test_type;\n       test_type tst(b,  prm* ratio_n, prm* ratio_s, prm* ratio_m);\n       {\n \ttypedef native_multimap<string_t, int, std::less<string_t>, alloc_t> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n@@ -131,7 +130,7 @@ main(int argc, char* a_p_argv[])\n \t  alloc_t>\n \t  native_t;\n \n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch (...)"}, {"sha": "694a5f2dbcf2f63d97c9c8ce6386bd612efc7d79", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_insert_timing.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,7 +44,7 @@\n  * Contains test for inserting text words.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <io/text_populate.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_multimap.hpp>\n@@ -54,7 +54,6 @@\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/multimap_insert_test.hpp>\n #include <performance/assoc/multimap_common_type.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n #include <iostream>\n #include <vector>\n@@ -99,21 +98,21 @@ main(int argc, char* a_p_argv[])\n \tmmap_tl_tl tl;\n \ttypedef multimap_insert_test<vec_t::const_iterator, false> test_type;\n \ttest_type tst(b, prm*  ratio_n, prm*  ratio_s, prm*  ratio_m);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_hash_multimap<std::string, int, 8, string_hash_fn> native_t;\n \ttypedef multimap_insert_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b,  prm*  ratio_n, prm*  ratio_s, prm*  ratio_m);\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef native_multimap<std::string, int> native_t;\n \ttypedef multimap_insert_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch (...)"}, {"sha": "4f0f1a4aa2450b8dac0cde457b5a2d2a4b7b1ada", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_random_int_push_pop_timing.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,12 +44,11 @@\n  * Contains test for finding random_int.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/timing/push_pop_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <iostream>\n@@ -84,17 +83,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<int>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<int, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<int, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch(...)"}, {"sha": "098378da1de280b72c89fbf7a5044bafe0bf2e97", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_random_int_push_timing.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,12 +44,11 @@\n  * Contains test for finding random_int.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/timing/push_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <iostream>\n@@ -82,17 +81,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<int>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<int, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<int, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch (...)"}, {"sha": "c5c24f7ef5c0d78aa31bc0ad856e1110bd425866", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_join_timing.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,7 +44,7 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n@@ -101,17 +101,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<std::string>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch(...)"}, {"sha": "ab0da1f41f5ffe5a05e3a731705875298de90fa9", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_modify_timing.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/timing/modify_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <iostream>\n #include <vector>\n@@ -88,17 +87,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<std::string>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch (...)"}, {"sha": "49ba5b501d3f3a6624d589d5e597da5e5ea59404", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_pop_mem_usage.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/mem_usage/pop_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <performance/mem/mem_track_allocator.hpp>\n #include <iostream>\n@@ -84,17 +83,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<string_t, std::less<string_t>, mem_track_allocator<char> >::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<string_t, true, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<string_t, false, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch (...)"}, {"sha": "e7e06bc32d0a008b3ff2987ab272e3ce3376b08f", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_push_pop_timing.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/timing/push_pop_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <iostream>\n #include <vector>\n@@ -81,17 +80,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<std::string>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch(...)"}, {"sha": "e723892f0ea15da9482415c1d567cefedf985d31", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_push_timing.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/timing/push_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n #include <iostream>\n #include <vector>\n@@ -81,17 +80,17 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef pq_common_types<std::string>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(pb_ds::detail::type_to_type<native_pq_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n       }\n     }\n   catch(...)"}, {"sha": "7ac42c8e02ba64f9e380c0b03d00bb132281d37e", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_find_timing.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,15 +44,14 @@\n  * Contains test for finding random integers.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_map.hpp>\n #include <native_type/assoc/native_map.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/find_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -83,24 +82,24 @@ main(int argc, char* a_p_argv[])\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n \ttypedef native_hash_map< int, char> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef native_map< int, char> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef hash_common_types<int, char>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef tree_common_types<int, char>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n     }\n   catch (...)"}, {"sha": "8fadbe1d192c30b632d4e85f5af7d1f6f731a737", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_subscript_find_timing.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,15 +44,14 @@\n  * Contains test for subscripting random integers.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_map.hpp>\n #include <native_type/assoc/native_map.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/subscript_find_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -84,23 +83,23 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef hash_common_types<int, size_t>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef tree_common_types<int, size_t>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_hash_map<int, size_t> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef native_map< int, size_t> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch (...)"}, {"sha": "fc83735f82c2a8d9e8518ae92efea76a71bce619", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_subscript_insert_timing.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,15 +44,14 @@\n  * Contains test for subscripting random integers.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_map.hpp>\n #include <native_type/assoc/native_map.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/subscript_insert_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -84,23 +83,23 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef hash_common_types<int, size_t>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef tree_common_types<int, size_t>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_hash_map< int, size_t> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n \n       {\n \ttypedef native_map< int, size_t> native_t;\n-\ttst(pb_ds::detail::type_to_type<native_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n       }\n     }\n   catch(...)"}, {"sha": "c0a2e96ddd47c0117a5807486230c45adc4db8b3", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/text_find_timing.cc", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/find_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n #include <native_type/assoc/native_hash_map.hpp>\n #include <native_type/assoc/native_map.hpp>\n@@ -86,22 +85,20 @@ main(int argc, char* a_p_argv[])\n \n \ttypedef hash_common_types<std::string, char, string_hash_fn>::performance_tl hash_tl_t;\n \n-\ttypedef pb_ds::detail::typelist_append<pat_trie_tl_t, pb_ds::detail::typelist_append<hash_tl_t, tree_tl_t>::type>::type tl_t;\n+\ttypedef __gnu_cxx::typelist::append<pat_trie_tl_t, __gnu_cxx::typelist::append<hash_tl_t, tree_tl_t>::type>::type tl_t;\n \n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_map<std::string, char> native_map_t;\n-\ttst(pb_ds::detail::type_to_type<native_map_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_map_t>());\n \n+#ifdef PB_DS_USE_TR1\n \ttypedef native_hash_map<std::string, char, 8, string_hash_fn> native_hash_map_t;\n-\ttst(pb_ds::detail::type_to_type<native_hash_map_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_hash_map_t>());\n \n-\t// XXX Unfortunately, this crashes\n-#if 0\n-#ifdef PB_DS_USE_TR1\n \ttypedef\n \t  native_hash_map<\n \t  std::string,\n@@ -117,9 +114,8 @@ main(int argc, char* a_p_argv[])\n \t  true>\n \t  sth_native_hash_map_t;\n \n-\ttst(pb_ds::detail::type_to_type<sth_native_hash_map_t>());\n-#endif // #ifdef PB_DS_USE_TR1\n-#endif // #if 0\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<sth_native_hash_map_t>());\n+#endif\n       }\n     }\n   catch(...)"}, {"sha": "3a67b63bff57d599f643dfcf4eacae225816c4e4", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -46,12 +46,11 @@\n \n #include <iostream>\n #include <vector>\n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <performance/assoc/timing/tree_order_statistics_test.hpp>\n \n void\n@@ -74,14 +73,14 @@ main(int argc, char* a_p_argv[])\n \ttest_t tst(vn, vs, vm);\n \ttypedef tree_common_types<int, pb_ds::null_mapped_type, std::less<int>, pb_ds::tree_order_statistics_node_update>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef tree_order_statistics_test<false> test_t;\n \ttest_t tst(vn, vs, vm);\n \ttypedef native_set<int> native_set_t;\n-\ttst(pb_ds::detail::type_to_type<native_set_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n       }\n     }\n   catch(...)"}, {"sha": "675309c63acd1629ea40728d7d160f5e5c060b8c", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_split_join_timing.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for joining trees.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/tree_split_join_test.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <iostream>\n #include <vector>\n \n@@ -75,14 +74,14 @@ main(int argc, char* a_p_argv[])\n \n \ttypedef tree_common_types<int, pb_ds::null_mapped_type>::performance_tl tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef tree_split_join_test<false> test_t;\n \ttest_t tst(vn, vs, vm);\n \ttypedef native_set<int> native_set_t;\n-\ttst(pb_ds::detail::type_to_type<native_set_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n       }\n     }\n   catch(...)"}, {"sha": "9436977fc9801dad08c64b5d44328da935ef00b1", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/insert_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n #include <native_type/assoc/native_hash_map.hpp>\n #include <native_type/assoc/native_map.hpp>\n@@ -83,14 +82,14 @@ main(int argc, char* a_p_argv[])\n       {\n \ttypedef trie_common_types<std::string, char>::performance_tl pat_trie_tl_t;\n \ttypedef tree_common_types<std::string, char>::performance_tl tree_tl_t;\n-\ttypedef pb_ds::detail::typelist_append<pat_trie_tl_t, tree_tl_t>::type tl_t;\n+\ttypedef __gnu_cxx::typelist::append<pat_trie_tl_t, tree_tl_t>::type tl_t;\n \ttl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n \ttypedef native_map<std::string, char> native_map_t;\n-\ttst(pb_ds::detail::type_to_type<native_map_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_map_t>());\n       }\n     }\n   catch (...)"}, {"sha": "3c1bc0c903718e170bfa16ff3a742b2d6d39445e", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -44,13 +44,12 @@\n  * Contains test for finding text with locality of reference.\n  */\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/timing/find_test.hpp>\n #include <io/text_populate.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n #include <native_type/assoc/native_map.hpp>\n #include <iostream>\n #include <vector>\n@@ -81,13 +80,13 @@ main(int argc, char* a_p_argv[])\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n \ttypedef native_map<std::string, char> native_set_t;\n-\ttst(pb_ds::detail::type_to_type<native_set_t>());\n+\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n       }\n \n       {\n \ttypedef tree_common_types<std::string, char>::performance_tl tree_tl_t;\n \ttree_tl_t tl;\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n     }\n   catch(...)"}, {"sha": "60ab0d802c9e1f39d8d45f329e37b2e779fa180c", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/common_type.hpp", "status": "modified", "additions": 71, "deletions": 94, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -65,7 +65,7 @@ namespace pb_ds\n \t     class Eq_Fn =\n \t     std::equal_to<Key>,\n \t     class Allocator =\n-\t     std::allocator< std::pair<const Key, Data> > >\n+\t     std::allocator<std::pair<const Key, Data> > >\n     struct hash_common_types\n     {\n     private:\n@@ -109,12 +109,12 @@ namespace pb_ds\n \ttrue>\n       access_half_max_col_check_check_resize_trigger_policy;\n \n-      typedef pb_ds::test::linear_probe_fn_t_< Key, Allocator> lin_p_t;\n+      typedef pb_ds::test::linear_probe_fn_t_<Key, Allocator> lin_p_t;\n \n-      typedef pb_ds::test::quadratic_probe_fn_t_< Key, Allocator> quad_p_t;\n+      typedef pb_ds::test::quadratic_probe_fn_t_<Key, Allocator> quad_p_t;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -124,7 +124,7 @@ namespace pb_ds\n       performance_cc_policy0;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mod_range_hashing_t_<\n \tAllocator>,\n@@ -133,7 +133,7 @@ namespace pb_ds\n       performance_cc_policy1;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -143,7 +143,7 @@ namespace pb_ds\n       performance_cc_policy2;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mod_range_hashing_t_<\n \tAllocator>,\n@@ -152,7 +152,7 @@ namespace pb_ds\n       performance_cc_policy3;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::true_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -162,7 +162,7 @@ namespace pb_ds\n       performance_cc_policy4;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -172,7 +172,7 @@ namespace pb_ds\n       performance_cc_policy5;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -182,7 +182,7 @@ namespace pb_ds\n       regression_cc_policy0;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::false_type,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n \tAllocator>,\n@@ -192,7 +192,7 @@ namespace pb_ds\n       regression_cc_policy1;\n \n       typedef\n-      typename pb_ds::detail::typelist4<\n+      typename __gnu_cxx::typelist::create4<\n \tpb_ds::detail::true_type,\n \tpb_ds::test::direct_mod_range_hashing_t_<\n \tAllocator>,\n@@ -201,7 +201,7 @@ namespace pb_ds\n       regression_cc_policy2;\n \n       typedef\n-      typename pb_ds::detail::typelist5<\n+      typename __gnu_cxx::typelist::create5<\n \tpb_ds::detail::false_type,\n \tlin_p_t,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n@@ -212,7 +212,7 @@ namespace pb_ds\n       performance_gp_policy0;\n \n       typedef\n-      typename pb_ds::detail::typelist5<\n+      typename __gnu_cxx::typelist::create5<\n \tpb_ds::detail::false_type,\n \tquad_p_t,\n \tpb_ds::test::direct_mod_range_hashing_t_<\n@@ -222,7 +222,7 @@ namespace pb_ds\n       performance_gp_policy1;\n \n       typedef\n-      typename pb_ds::detail::typelist5<\n+      typename __gnu_cxx::typelist::create5<\n \tpb_ds::detail::false_type,\n \tquad_p_t,\n \tpb_ds::test::direct_mod_range_hashing_t_<\n@@ -232,7 +232,7 @@ namespace pb_ds\n       regression_gp_policy0;\n \n       typedef\n-      typename pb_ds::detail::typelist5<\n+      typename __gnu_cxx::typelist::create5<\n \tpb_ds::detail::true_type,\n \tlin_p_t,\n \tpb_ds::test::direct_mask_range_hashing_t_<\n@@ -243,7 +243,7 @@ namespace pb_ds\n       regression_gp_policy1;\n \n       typedef\n-      typename pb_ds::detail::typelist6<\n+      typename __gnu_cxx::typelist::create6<\n \tperformance_cc_policy0,\n \tperformance_cc_policy1,\n \tperformance_cc_policy2,\n@@ -253,20 +253,20 @@ namespace pb_ds\n       performance_cc_range_hashing_policies;\n \n       typedef\n-      typename pb_ds::detail::typelist3<\n+      typename __gnu_cxx::typelist::create3<\n \tregression_cc_policy0,\n \tregression_cc_policy1,\n \tregression_cc_policy2>::type\n       regression_cc_range_hashing_policies;\n \n       typedef\n-      typename pb_ds::detail::typelist2<\n+      typename __gnu_cxx::typelist::create2<\n \tperformance_gp_policy0,\n \tperformance_gp_policy1>::type\n       performance_gp_range_hashing_policies;\n \n       typedef\n-      typename pb_ds::detail::typelist2<\n+      typename __gnu_cxx::typelist::create2<\n \tregression_gp_policy0,\n \tregression_gp_policy1>::type\n       regression_gp_range_hashing_policies;\n@@ -276,7 +276,7 @@ namespace pb_ds\n       {\n       private:\n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \tPolicy_Tl, 0>::type\n \tstore_hash_indicator;\n \n@@ -286,17 +286,17 @@ namespace pb_ds\n \t  };\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 1>::type\n \tcomb_hash_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 2>::type\n \ttrigger_policy;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 3>::type\n \tsize_policy;\n \n@@ -322,7 +322,7 @@ namespace pb_ds\n       {\n       private:\n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \tPolicy_Tl, 0>::type\n \tstore_hash_indicator;\n \n@@ -332,17 +332,17 @@ namespace pb_ds\n \t  };\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 1>::type\n \tcomb_hash_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 2>::type\n \ttrigger_policy;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 3>::type\n \tsize_policy;\n \n@@ -368,7 +368,7 @@ namespace pb_ds\n       {\n       private:\n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \tPolicy_Tl, 0>::type\n \tstore_hash_indicator;\n \n@@ -378,22 +378,22 @@ namespace pb_ds\n \t  };\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 1>::type\n \tprobe_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 2>::type\n \tcomb_probe_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 3>::type\n \ttrigger_policy;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 4>::type\n \tsize_policy;\n \n@@ -420,7 +420,7 @@ namespace pb_ds\n       {\n       private:\n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \tPolicy_Tl, 0>::type\n \tstore_hash_indicator;\n \n@@ -430,22 +430,22 @@ namespace pb_ds\n \t  };\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 1>::type\n \tprobe_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 2>::type\n \tcomb_probe_fn;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 3>::type\n \ttrigger_policy;\n \n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \t  Policy_Tl, 4>::type\n \tsize_policy;\n \n@@ -468,56 +468,56 @@ namespace pb_ds\n       };\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tperformance_cc_range_hashing_policies,\n \tno_access_generic_cc_hash_table_t>::type\n       performance_cc_types;\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tregression_cc_range_hashing_policies,\n \taccess_generic_cc_hash_table_t>::type\n       regression_cc_types;\n \n       typedef\n-      typename pb_ds::detail::typelist_at_index<\n+      typename __gnu_cxx::typelist::at_index<\n \tperformance_cc_types,\n \t0>::type\n       performance_min_cc_type;\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tperformance_gp_range_hashing_policies,\n \tno_access_generic_gp_hash_table_t>::type\n       performance_gp_types;\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tregression_gp_range_hashing_policies,\n \taccess_generic_gp_hash_table_t>::type\n       regression_gp_types;\n \n       typedef\n-      typename pb_ds::detail::typelist_at_index<\n+      typename __gnu_cxx::typelist::at_index<\n \tperformance_gp_types,\n \t0>::type\n       performance_min_gp_type;\n \n     public:\n       typedef\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n       performance_cc_types,\n       performance_gp_types>::type\n       performance_tl;\n \n       typedef\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n \tregression_gp_types,\n \tregression_cc_types>::type\n       regression_tl;\n \n       typedef\n-      typename pb_ds::detail::typelist1<\n+      typename __gnu_cxx::typelist::create1<\n \tperformance_min_cc_type>::type\n       performance_min_tl;\n     };\n@@ -636,7 +636,7 @@ namespace pb_ds\n       };\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tComb_Hash_Fn_TL,\n \tgeneric_cc_hash_table_t>::type\n       performance_cc_types;\n@@ -660,14 +660,14 @@ namespace pb_ds\n       };\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tComb_Probe_Fn_TL,\n \tno_access_generic_gp_hash_table_t>::type\n       performance_gp_types;\n \n     public:\n       typedef\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n       performance_cc_types,\n       performance_gp_types>::type\n       performance_tl;\n@@ -683,14 +683,14 @@ namespace pb_ds\n \n       typedef pb_ds::test::move_to_front_lu_policy_t_ mtf_u;\n \n-      typedef pb_ds::test::counter_lu_policy_t_< Allocator, 5> cnt_5_u;\n+      typedef pb_ds::test::counter_lu_policy_t_<Allocator, 5> cnt_5_u;\n \n-      typedef typename pb_ds::detail::typelist1< mtf_u>::type lu_policy0;\n+      typedef typename __gnu_cxx::typelist::create1<mtf_u>::type lu_policy0;\n \n-      typedef typename pb_ds::detail::typelist1< cnt_5_u>::type lu_policy1;\n+      typedef typename __gnu_cxx::typelist::create1<cnt_5_u>::type lu_policy1;\n \n       typedef\n-      typename pb_ds::detail::typelist2<\n+      typename __gnu_cxx::typelist::create2<\n \tlu_policy0,\n \tlu_policy1>::type\n       lu_policies;\n@@ -700,7 +700,7 @@ namespace pb_ds\n       {\n       private:\n         typedef\n-\ttypename pb_ds::detail::typelist_at_index<\n+\ttypename __gnu_cxx::typelist::at_index<\n \tPolicy_Tl, 0>::type\n \tupdate_policy_t;\n \n@@ -716,37 +716,31 @@ namespace pb_ds\n       };\n \n       typedef\n-      typename pb_ds::detail::typelist_transform<\n+      typename __gnu_cxx::typelist::transform<\n \tlu_policies,\n \tgeneric_list_update_t>::type\n       lu_types;\n \n       typedef\n-      typename pb_ds::detail::typelist_at_index<\n+      typename __gnu_cxx::typelist::at_index<\n \tlu_types,\n \t0>::type\n       min_lu_type;\n \n     public:\n       typedef lu_types performance_tl;\n-\n       typedef lu_types regression_tl;\n \n-      typedef\n-      typename pb_ds::detail::typelist1<\n-\tmin_lu_type>::type\n-      performance_min_tl;\n+      typedef typename __gnu_cxx::typelist::create1<min_lu_type>::type performance_min_tl;\n     };\n \n     template<typename Key, typename Data, class Cmp_Fn = std::less<Key>,\n \t     template<typename Const_Node_Iterator,\n \t\t      class Node_Iterator,\n \t\t      class Cmp_Fn_,\n \t\t      class Allocator_>\n-    class Node_Update =\n-\t     pb_ds::null_tree_node_update,\n-\t     class Allocator =\n-\t     std::allocator<std::pair<const Key, Data> > >\n+    class Node_Update = pb_ds::null_tree_node_update,\n+\t     class Allocator = std::allocator<std::pair<const Key, Data> > >\n     struct tree_common_types\n     {\n     private:\n@@ -782,62 +776,45 @@ namespace pb_ds\n \n     public:\n       typedef\n-      typename pb_ds::detail::typelist3<\n+      typename __gnu_cxx::typelist::create3<\n       splay_tree_assoc_container_t,\n       rb_tree_assoc_container_t,\n       ov_tree_assoc_container_t>::type\n       performance_tl;\n \n       typedef\n-      typename pb_ds::detail::typelist3<\n+      typename __gnu_cxx::typelist::create3<\n \tov_tree_assoc_container_t,\n \tsplay_tree_assoc_container_t,\n \trb_tree_assoc_container_t>::type\n       regression_tl;\n \n       typedef\n-      typename pb_ds::detail::typelist1<\n+      typename __gnu_cxx::typelist::create1<\n \trb_tree_assoc_container_t>::type\n       performance_min_tl;\n     };\n \n     template<typename Key,\n \t     typename Data,\n \t     class E_Access_Traits =\n-\t     typename pb_ds::detail::default_trie_e_access_traits<\n-      Key>::type,\n-\t     class Tag =\n-\t     pb_ds::pat_trie_tag,\n+\t     typename pb_ds::detail::default_trie_e_access_traits<Key>::type,\n+\t     class Tag = pb_ds::pat_trie_tag,\n \t     template<typename Const_Node_Iterator,\n \t\t      typename Node_Iterator,\n \t\t      class E_Access_Traits_,\n \t\t      typename Allocator_>\n-    class Node_Update =\n-\t     pb_ds::null_trie_node_update,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+    class Node_Update = pb_ds::null_trie_node_update,\n+\t     class Allocator = std::allocator<char> >\n     class trie_common_types\n     {\n     private:\n-      typedef\n-      pb_ds::trie<\n-      Key,\n-      Data,\n-      E_Access_Traits,\n-      Tag,\n-      Node_Update,\n-      Allocator>\n-      type;\n+      typedef pb_ds::trie<Key, Data, E_Access_Traits, Tag, Node_Update, Allocator> type;\n \n     public:\n-      typedef typename pb_ds::detail::typelist1< type>::type performance_tl;\n-\n-      typedef typename pb_ds::detail::typelist1< type>::type regression_tl;\n-\n-      typedef\n-      typename pb_ds::detail::typelist1<\n-\ttype>::type\n-      performance_min_tl;\n+      typedef typename __gnu_cxx::typelist::create1<type>::type performance_tl;\n+      typedef typename __gnu_cxx::typelist::create1<type>::type regression_tl;\n+      typedef typename __gnu_cxx::typelist::create1<type>::type performance_min_tl;\n     };\n \n   } // namespace test"}, {"sha": "f28cb83176b970ee1dce95850624876e1411488c", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/string_form.hpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -81,74 +81,74 @@ namespace pb_ds\n \tprivate:\n \t  template<typename D_Cntnr>\n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<D_Cntnr>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<D_Cntnr>)\n \t  {\n             return (\"mmap_\" + pb_ds_string_form<D_Cntnr>::name());\n \t  }\n \n \t  template<typename D_Cntnr>\n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<D_Cntnr>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<D_Cntnr>)\n \t  {\n             return (pb_ds_string_form<D_Cntnr>::desc());\n \t  }\n \n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<size_t>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<size_t>)\n \t  {\n             return (\"map\");\n \t  }\n \n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<size_t>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<size_t>)\n \t  {\n             return (\"\");\n \t  }\n \n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<basic_type>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<basic_type>)\n \t  {\n             return (\"map\");\n \t  }\n \n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<basic_type>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<basic_type>)\n \t  {\n             return (\"\");\n \t  }\n \n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<int>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<int>)\n \t  {\n             return (\"map\");\n \t  }\n \n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<int>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<int>)\n \t  {\n             return (\"\");\n \t  }\n \n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<char>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<char>)\n \t  {\n             return (\"map\");\n \t  }\n \n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<char>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<char>)\n \t  {\n             return (\"\");\n \t  }\n \n \t  static std::string\n-\t  name(pb_ds::detail::type_to_type<pb_ds::null_mapped_type>)\n+\t  name(__gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n \t  {\n             return (\"set\");\n \t  }\n \n \t  static std::string\n-\t  desc(pb_ds::detail::type_to_type<pb_ds::null_mapped_type>)\n+\t  desc(__gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n \t  {\n             return (\"\");\n \t  }\n@@ -157,13 +157,13 @@ namespace pb_ds\n \t  static std::string\n \t  name()\n \t  {\n-            return (name(pb_ds::detail::type_to_type<mapped_type>()));\n+            return (name(__gnu_cxx::typelist::detail::type_to_type<mapped_type>()));\n \t  }\n \n \t  static std::string\n \t  desc()\n \t  {\n-            return (desc(pb_ds::detail::type_to_type<mapped_type>()));\n+            return (desc(__gnu_cxx::typelist::detail::type_to_type<mapped_type>()));\n \t  }\n \t};\n "}, {"sha": "3df687c4354111ca0102654f80d741e9b136b9a5", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/template_policy.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,8 +47,7 @@\n #ifndef PB_DS_TEMPLATE_POLICY_HPP\n #define PB_DS_TEMPLATE_POLICY_HPP\n \n-#include <ext/pb_ds/detail/typelist.hpp>\n-\n+#include <ext/typelist.h>\n #include <ext/pb_ds/hash_policy.hpp>\n #include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/list_update_policy.hpp>"}, {"sha": "a99755784637799944fa4080408254b1b501753d", "filename": "libstdc++-v3/testsuite/util/common_type/priority_queue/common_type.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fpriority_queue%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fpriority_queue%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fpriority_queue%2Fcommon_type.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -49,7 +49,7 @@\n \n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/priority_queue.hpp>\n-#include <ext/pb_ds/detail/typelist.hpp>\n+#include <ext/typelist.h>\n \n namespace pb_ds\n {\n@@ -72,7 +72,7 @@ namespace pb_ds\n \n       typedef pb_ds::priority_queue<Value_Type, Cmp_Fn, pb_ds::thin_heap_tag, Allocator> thin_heap_t;\n \n-      typedef typename pb_ds::detail::typelist5<thin_heap_t, pairing_heap_t, binomial_heap_t, rc_binomial_heap_t, binary_heap_t>::type all_tl;\n+      typedef typename __gnu_cxx::typelist::create5<thin_heap_t, pairing_heap_t, binomial_heap_t, rc_binomial_heap_t, binary_heap_t>::type all_tl;\n \n     public:\n       typedef all_tl performance_tl;"}, {"sha": "889edf24e1becc83c4d9896154d06343a412f8aa", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_map.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,10 +47,11 @@\n #ifndef PB_DS_NATIVE_HASH_MAP_HPP\n #define PB_DS_NATIVE_HASH_MAP_HPP\n \n+#include <string>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_hash_tag.hpp>\n #include <io/xml.hpp>\n-#include <string>\n \n // Default to using tr1.\n #define PB_DS_USE_TR1 1"}, {"sha": "a525ef20759df27bbd2a4ca2c1832f11b2079c8d", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_multimap.hpp", "status": "modified", "additions": 25, "deletions": 96, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,57 +47,27 @@\n #ifndef PB_DS_NATIVE_HASH_MULTIMAP_HPP\n #define PB_DS_NATIVE_HASH_MULTIMAP_HPP\n \n+#include <string>\n+#include <ext/hash_map>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_hash_tag.hpp>\n #include <io/xml.hpp>\n-#include <string>\n-#include <ext/hash_map>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Data,\t\t\\\n-\t\t\t\t\t\tsize_t Init_Size,\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Eq_Fn,\t\t\\\n-\t\t\t\t\t\tclass Less_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    native_hash_multimap<\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tData,\t\t\\\n-\t\t\t\t\t\tInit_Size,\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tLess_Fn,\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\\\n-    __gnu_cxx::hash_multimap<\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tData,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_BASE_C_DEC \\\n+    __gnu_cxx::hash_multimap<Key, Data, Hash_Fn, Eq_Fn, Allocator>\n \n     template<typename Key,\n \t     typename Data,\n \t     size_t Init_Size = 8,\n-\t     class Hash_Fn =\n-\t     typename pb_ds::detail::default_hash_fn<Key>::type,\n-\t     class Eq_Fn =\n-\t     std::equal_to<Key>,\n-\t     class Less_Fn =\n-\t     std::less<Key>,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+\t     class Hash_Fn = typename pb_ds::detail::default_hash_fn<Key>::type,\n+\t     class Eq_Fn = std::equal_to<Key>,\n+\t     class Less_Fn = std::less<Key>,\n+\t     class Allocator = std::allocator<char> >\n     class native_hash_multimap : public PB_DS_BASE_C_DEC\n     {\n     private:\n@@ -114,119 +84,78 @@ namespace pb_ds\n \n       typedef\n       typename Allocator::template rebind<\n-\tstd::pair<\n-\tKey,\n-\tData> >::other::const_reference\n+\tstd::pair<Key, Data> >::other::const_reference\n       const_reference;\n \n-    public:\n-      native_hash_multimap();\n+      native_hash_multimap() : base_type(Init_Size)\n+      { }\n+\n+      template<typename It>\n+      native_hash_multimap(It f, It l) : base_type(f, l)\n+      { }\n \n       inline void\n       insert(typename base_type::const_reference r_val)\n       {\n-        typedef\n-\t  std::pair<\n-\t  typename base_type::iterator,\n-\t  typename base_type::iterator>\n-\t  eq_range_t;\n-\n+        typedef std::pair<iterator, iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::iterator it = f.first;\n-\n+        iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n \t      return;\n-\n             ++it;\n \t  }\n-\n         base_type::insert(r_val);\n       }\n \n       inline iterator\n       find(const_reference r_val)\n       {\n-        typedef\n-\tstd::pair<\n-\ttypename base_type::iterator,\n-\ttypename base_type::iterator>\n-\teq_range_t;\n-\n+        typedef std::pair<iterator, iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::iterator it = f.first;\n-\n+        iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n \t      return it;\n-\n             ++it;\n \t  }\n-\n         return base_type::end();\n       }\n \n       inline const_iterator\n       find(const_reference r_val) const\n       {\n-        typedef\n-\tstd::pair<\n-\ttypename base_type::const_iterator,\n-\ttypename base_type::const_iterator>\n-\teq_range_t;\n-\n+        typedef std::pair<const_iterator, const_iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::const_iterator it = f.first;\n-\n+        const_iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n \t      return it;\n-\n             ++it;\n \t  }\n-\n         return base_type::end();\n       }\n \n-      template<typename It>\n-      native_hash_multimap(It f, It l);\n-\n       static std::string\n       name()\n-      {\n-        return (\"n_hash_mmap\");\n-      }\n+      { return std::string(\"n_hash_mmap\"); }\n \n       static std::string\n       desc()\n       {\n-        return (make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_multimap\"));\n+        return make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_multimap\");\n       }\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    native_hash_multimap() : base_type(Init_Size)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename It>\n-    PB_DS_CLASS_C_DEC::\n-    native_hash_multimap(It f, It l) : base_type(f, l)\n-    { }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n #undef PB_DS_BASE_C_DEC\n \n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_HASH_MULTIMAP_HPP\n+#endif "}, {"sha": "7f89392629f92c860e5bfe21bee3f635db5f5527", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_set.hpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,10 +47,11 @@\n #ifndef PB_DS_NATIVE_HASH_SET_HPP\n #define PB_DS_NATIVE_HASH_SET_HPP\n \n+#include <string>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_hash_tag.hpp>\n #include <io/xml.hpp>\n-#include <string>\n \n // Default to using tr1.\n #define PB_DS_USE_TR1 1\n@@ -77,7 +78,7 @@ namespace pb_ds\n \n     template<typename Key,\n \t     size_t Init_Size = 8,\n-\t     typename Hash_Fn = typename pb_ds::detail::default_hash_fn<Key>::type,\n+         typename Hash_Fn = typename pb_ds::detail::default_hash_fn<Key>::type,\n \t     typename Eq_Fn = std::equal_to<Key>,\n \t     typename Less_Fn = std::less<Key>,\n \t     typename Allocator = std::allocator<char>"}, {"sha": "d32730c230bafa156d0ad3deb91cdf2cf0a4e66e", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_map.hpp", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -48,30 +48,22 @@\n #define PB_DS_NATIVE_MAP_HPP\n \n #include <map>\n+#include <string>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_tree_tag.hpp>\n #include <io/xml.hpp>\n-#include <string>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::map<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\tData, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstd::pair< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst Key, \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tData > >::other >\n+#define PB_DS_BASE_C_DEC \\\n+    std::map<Key, Data, Cmp_Fn,\t\\\n+typename Allocator::template rebind<std::pair<const Key, Data > >::other >\n \n     template<typename Key, typename Data, class Cmp_Fn = std::less<Key>,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+\t     class Allocator = std::allocator<char> >\n     class native_map : public PB_DS_BASE_C_DEC\n     {\n     private:\n@@ -80,7 +72,6 @@ namespace pb_ds\n     public:\n       typedef native_tree_tag container_category;\n \n-    public:\n       native_map() : base_type()\n       { }\n \n@@ -90,15 +81,11 @@ namespace pb_ds\n \n       static std::string\n       name()\n-      {\n-        return (\"n_map\");\n-      }\n+      { return std::string(\"n_map\"); }\n \n       static std::string\n       desc()\n-      {\n-        return (make_xml_tag(            \"type\", \"value\", \"std_map\"));\n-      }\n+      { return make_xml_tag(\"type\", \"value\", \"std_map\"); }\n     };\n \n #undef PB_DS_BASE_C_DEC"}, {"sha": "e2e1bafb3fb3f6f384fef5af39b006a9667fa8af", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_multimap.hpp", "status": "modified", "additions": 21, "deletions": 80, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -48,38 +48,20 @@\n #define PB_DS_NATIVE_MULTIMAP_HPP\n \n #include <map>\n-#include <native_type/assoc/native_tree_tag.hpp>\n #include <string>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n+#include <native_type/assoc/native_tree_tag.hpp>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<typename Key, typename Data, class Less_Fn, class Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    native_multimap<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tData,\t\t\\\n-\t\t\t\t\t\tLess_Fn,\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::multimap<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\tData, \\\n-\t\t\t\t\t\t\t\t\tLess_Fn, \\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstd::pair< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst Key, \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tData> >::other >\n+#define PB_DS_BASE_C_DEC \\\n+    std::multimap<Key, Data, Less_Fn, \\\n+      typename Allocator::template rebind<std::pair<const Key, Data> >::other>\n \n     template<typename Key, typename Data, class Less_Fn = std::less<Key>,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+\t     class Allocator = std::allocator<char> >\n     class native_multimap : public PB_DS_BASE_C_DEC\n     {\n     private:\n@@ -92,55 +74,41 @@ namespace pb_ds\n \n       typedef\n       typename Allocator::template rebind<\n-\tstd::pair<\n-\tKey,\n-\tData> >::other::const_reference\n+\tstd::pair<Key, Data> >::other::const_reference\n       const_reference;\n \n       typedef typename base_type::iterator iterator;\n-\n       typedef typename base_type::const_iterator const_iterator;\n \n-    public:\n-      native_multimap();\n+      native_multimap()  { }\n+\n+      template<typename It>\n+      native_multimap(It f, It l) : base_type(f, l)\n+      { }\n \n       inline void\n       insert(const_reference r_val)\n       {\n-        typedef\n-\t  std::pair<\n-\t  typename base_type::iterator,\n-\t  typename base_type::iterator>\n-\t  eq_range_t;\n-\n+        typedef std::pair<iterator, iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::iterator it = f.first;\n-\n+        iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n \t      return;\n-\n             ++it;\n \t  }\n-\n         base_type::insert(r_val);\n       }\n \n       inline iterator\n       find(const_reference r_val)\n       {\n-        typedef\n-\tstd::pair<\n-\ttypename base_type::iterator,\n-\ttypename base_type::iterator>\n-\teq_range_t;\n-\n+        typedef std::pair<iterator, iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::iterator it = f.first;\n-\n+        iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n@@ -154,55 +122,28 @@ namespace pb_ds\n       inline const_iterator\n       find(const_reference r_val) const\n       {\n-        typedef\n-\tstd::pair<\n-\ttypename base_type::const_iterator,\n-\ttypename base_type::const_iterator>\n-\teq_range_t;\n-\n+        typedef std::pair<const_iterator, const_iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n \n-        typename base_type::const_iterator it = f.first;\n-\n+        const_iterator it = f.first;\n         while (it != f.second)\n \t  {\n             if (it->second == r_val.second)\n \t      return it;\n             ++it;\n \t  }\n-\n         return base_type::end();\n       }\n-\n-      template<typename It>\n-      native_multimap(It f, It l);\n-\n+      \n       static std::string\n       name()\n-      {\n-        return (\"n_mmap\");\n-      }\n+      { return std::string(\"n_mmap\"); }\n \n       static std::string\n       desc()\n-      {\n-        return (make_xml_tag(\"type\", \"value\", \"std_multimap\"));\n-      }\n+      { return make_xml_tag(\"type\", \"value\", \"std_multimap\"); }\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    native_multimap()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename It>\n-    PB_DS_CLASS_C_DEC::\n-    native_multimap(It f, It l) : base_type(f, l)\n-    { }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n #undef PB_DS_BASE_C_DEC\n } // namespace test\n "}, {"sha": "9d03adce3fc0707d4ef305bff4d7954aad9b1440", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_set.hpp", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -47,38 +47,30 @@\n #ifndef PB_DS_NATIVE_SET_HPP\n #define PB_DS_NATIVE_SET_HPP\n \n+#include <string>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_tree_tag.hpp>\n #include <io/xml.hpp>\n-#include <string>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::set<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tKey,\t\\\n-\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tKey>::other>\n+#define PB_DS_BASE_C_DEC \\\n+    std::set<Key, Cmp_Fn, typename Allocator::template rebind<Key>::other>\n \n     template<typename Key, class Cmp_Fn = std::less<Key>,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+\t     class Allocator = std::allocator<char> >\n     class native_set : public PB_DS_BASE_C_DEC\n     {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef PB_DS_BASE_C_DEC \t\t\t base_type;\n \n     public:\n-      typedef native_tree_tag container_category;\n+      typedef native_tree_tag \t\t\t container_category;\n+      typedef typename base_type::const_iterator const_iterator;\n \n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n-\n-    public:\n       native_set() : base_type()\n       { }\n \n@@ -91,21 +83,15 @@ namespace pb_ds\n \n       static std::string\n       name()\n-      {\n-        return (\"n_set\");\n-      }\n+      { return std::string(\"n_set\"); }\n \n       static std::string\n       desc()\n-      {\n-        return (make_xml_tag(            \"type\", \"value\", \"std_set\"));\n-      }\n+      { return make_xml_tag(\"type\", \"value\", \"std_set\"); }\n     };\n \n #undef PB_DS_BASE_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_NATIVE_SET_HPP"}, {"sha": "079f1489bfa25d13e8c237205c140d74c943c64c", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_tree_tag.hpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -49,15 +49,11 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     struct native_tree_tag\n     { };\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_NATIVE_TREE_DS_TAG_HPP"}, {"sha": "83e5fda0e5ea275a71bd181f672c46968fd8e8e8", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/erase_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -74,7 +74,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       erase_test(const erase_test& );\n@@ -100,7 +100,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "c20aee3e8fbb26ab3d0fc74907764db8fcd8a4da", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -75,18 +75,18 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       multimap_insert_test(const multimap_insert_test& );\n \n       template<typename Cntnr>\n       size_t\n-      insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type);\n+      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type);\n \n       template<typename Cntnr>\n       size_t\n-      insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type);\n+      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type);\n \n     private:\n       const It m_ins_b;\n@@ -109,7 +109,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -123,7 +123,7 @@ namespace pb_ds\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n-\t  const size_t delta_mem = insert(pb_ds::detail::type_to_type<Cntnr>(),\n+\t  const size_t delta_mem = insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>(),\n \t\t\t\t\t  ins_it_b,\n \t\t\t\t\t  ins_it_e,\n \t\t\t\t\t  pb_ds::detail::integral_constant<int,Native>());\n@@ -136,7 +136,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     size_t\n     PB_DS_CLASS_C_DEC::\n-    insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type)\n+    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type)\n     {\n       mem_track_allocator<char> alloc;\n \n@@ -158,7 +158,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     size_t\n     PB_DS_CLASS_C_DEC::\n-    insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type)\n+    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type)\n     {\n       mem_track_allocator<char> alloc;\n "}, {"sha": "c26cf3de587056ce5334d03e9f8cec6795357210", "filename": "libstdc++-v3/testsuite/util/performance/assoc/multimap_common_type.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -129,8 +129,8 @@ namespace pb_ds\n \n       public:\n \ttypedef\n-        typename pb_ds::detail::typelist_flatten<\n-\ttypename pb_ds::detail::typelist_transform<\n+        typename __gnu_cxx::typelist::flatten<\n+\ttypename __gnu_cxx::typelist::transform<\n \tSec_Tl,\n \thash_mmap_transform>::type>::type\n         type;\n@@ -159,8 +159,8 @@ namespace pb_ds\n \n       public:\n \ttypedef\n-        typename pb_ds::detail::typelist_flatten<\n-\ttypename pb_ds::detail::typelist_transform<\n+        typename __gnu_cxx::typelist::flatten<\n+\ttypename __gnu_cxx::typelist::transform<\n \tSec_Tl,\n \ttree_mmap_transform>::type>::type\n         type;\n@@ -242,11 +242,11 @@ namespace pb_ds\n \n     public:\n       typedef\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n       hl_mmap_tl_t,\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n       hh_mmap_tl_t,\n-      typename pb_ds::detail::typelist_append<\n+      typename __gnu_cxx::typelist::append<\n       th_mmap_tl_t,\n       tl_mmap_tl_t>::type>::type>::type\n       type;"}, {"sha": "be4a31b3bdc18125c601ca3f62a5f9275e30fa4e", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/common_type.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fcommon_type.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -73,8 +73,8 @@ namespace pb_ds\n     };\n \n     typedef\n-    pb_ds::detail::typelist_flatten<\n-      pb_ds::detail::typelist_transform<\n+    __gnu_cxx::typelist::flatten<\n+      __gnu_cxx::typelist::transform<\n       hash_set_tl_t,\n       hash_mmap_transform>::type>::type\n     hash_mmap_tl_t;\n@@ -97,8 +97,8 @@ namespace pb_ds\n     };\n \n     typedef\n-    pb_ds::detail::typelist_flatten<\n-      pb_ds::detail::typelist_transform<\n+    __gnu_cxx::typelist::flatten<\n+      __gnu_cxx::typelist::transform<\n       tree_set_tl_t,\n       tree_mmap_transform>::type>::type\n     tree_mmap_tl_t;"}, {"sha": "1ef770adcdc55b4076a2831ffbb5ffffab223e06", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/find_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -140,7 +140,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       find_test(const find_test& );\n@@ -176,7 +176,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "ab74c7a0492628c6c7cf4d8aac812e1908cc9af1", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/insert_test.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -104,14 +104,14 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       insert_test(const insert_test& );\n \n       template<typename Cntnr>\n       void\n-      insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n \n     private:\n       const It m_ins_b;\n@@ -134,7 +134,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -162,7 +162,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    insert(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n "}, {"sha": "d8e5326afba89ae928ba6f737a1daebe6024c99f", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_find_test.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -155,18 +155,18 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       multimap_find_test(const multimap_find_test& );\n \n       template<typename Cntnr>\n       Cntnr\n-      init(It ins_b, It ins_e, pb_ds::detail::type_to_type<Cntnr>, pb_ds::detail::true_type);\n+      init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::true_type);\n \n       template<typename Cntnr>\n       Cntnr\n-      init(It ins_b, It ins_e, pb_ds::detail::type_to_type<Cntnr>, pb_ds::detail::false_type);\n+      init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::false_type);\n \n     private:\n       const It m_ins_b;\n@@ -189,7 +189,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -205,7 +205,7 @@ namespace pb_ds\n \n \t  Cntnr c = init(ins_it_b,\n \t\t\t ins_it_e,\n-\t\t\t pb_ds::detail::type_to_type<Cntnr>(),\n+\t\t\t __gnu_cxx::typelist::detail::type_to_type<Cntnr>(),\n \t\t\t pb_ds::detail::integral_constant<int,Native>());\n \n \t  pb_ds::test::detail::multimap_find_functor<It, Cntnr, Native>\n@@ -222,7 +222,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     Cntnr\n     PB_DS_CLASS_C_DEC::\n-    init(It ins_b, It ins_e, pb_ds::detail::type_to_type<Cntnr>, pb_ds::detail::true_type)\n+    init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::true_type)\n     {\n       return Cntnr(ins_b, ins_e);\n     }\n@@ -231,7 +231,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     Cntnr\n     PB_DS_CLASS_C_DEC::\n-    init(It ins_b, It ins_e, pb_ds::detail::type_to_type<Cntnr>, pb_ds::detail::false_type)\n+    init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::false_type)\n     {\n       Cntnr ret;\n "}, {"sha": "4b6885bec0293074efec8734b1904ebe7afab3b4", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_insert_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -132,7 +132,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       multimap_insert_test(const multimap_insert_test& );\n@@ -158,7 +158,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "96c08b5c4dbc4663b44f07f4b9f8ea7ac293d220", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/subscript_find_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -106,7 +106,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       subscript_find_test(const subscript_find_test& );\n@@ -142,7 +142,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "ad3d650f0c27584a1e8459a66ccd5de9315f0a93", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/subscript_insert_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -104,7 +104,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       subscript_insert_test(const subscript_insert_test& );\n@@ -140,7 +140,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "b169048883cc6ca22733477e852a73a57896eee9", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/tree_order_statistics_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -157,7 +157,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       tree_order_statistics_test(const tree_order_statistics_test& );\n@@ -188,7 +188,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "4309d5a5b08f803e4ff051fe6b342ced59674939", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/tree_split_join_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -134,7 +134,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       tree_split_join_test(const tree_split_join_test& );\n@@ -157,7 +157,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "a0db15ff299c39cd5c11a28886f3672bce2c4e8c", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -74,7 +74,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       pop_test(const pop_test& );\n@@ -100,7 +100,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),"}, {"sha": "cd8135dba55824274463ecaa63c1957fd30bd825", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/join_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -128,7 +128,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>)\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n       {\n \tusing pb_ds::test::detail::double_push_functor;\n \tusing pb_ds::test::detail::double_push_join_functor;\n@@ -159,7 +159,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      join(pb_ds::detail::type_to_type<Cntnr>, It b, It e)\n+      join(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It b, It e)\n       {\n \tCntnr cntnr;\n \ttypedef typename Cntnr::const_reference const_reference;"}, {"sha": "25fc4167c5fb3a749263d71c0855ae7cda120670", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/modify_test.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -283,14 +283,14 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       modify_test(const modify_test& );\n \n       template<typename Cntnr>\n       void\n-      modify(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      modify(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n \n     private:\n       const It m_ins_b;\n@@ -316,7 +316,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -367,7 +367,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    modify(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    modify(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n "}, {"sha": "21869517cb3afd16ed97f6a261e93ccd3a657204", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/push_pop_test.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -107,14 +107,14 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       push_pop_test(const push_pop_test& );\n \n       template<typename Cntnr>\n       void\n-      push(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n \n     private:\n       const It m_ins_b;\n@@ -137,7 +137,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -165,7 +165,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    push(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n "}, {"sha": "fbcc340fad309a3e96c154daf863acc5594c781e", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/push_test.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -104,14 +104,14 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(pb_ds::detail::type_to_type<Cntnr>);\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n \n     private:\n       push_test(const push_test& );\n \n       template<typename Cntnr>\n       void\n-      push(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n \n     private:\n       const It m_ins_b;\n@@ -134,7 +134,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       xml_result_set_performance_formatter res_set_fmt(\n \t\t\t\t\t\t       string_form<Cntnr>::name(),\n@@ -162,7 +162,7 @@ namespace pb_ds\n     template<typename Cntnr>\n     void\n     PB_DS_CLASS_C_DEC::\n-    push(pb_ds::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n "}, {"sha": "e62bf409c10124077d739d7f928c538d01b7bac5", "filename": "libstdc++-v3/testsuite/util/regression/assoc/common_type.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -82,7 +82,7 @@ namespace test\n     typedef typename tree_common_types<basic_type, Data_Type, std::less<basic_type>, pb_ds::tree_order_statistics_node_update, alloc_type>::regression_tl order_statistics_tl_t;\n \n   public:\n-    typedef typename pb_ds::detail::typelist_append<no_order_statistics_tl_t, order_statistics_tl_t>::type tl_t;\n+    typedef typename __gnu_cxx::typelist::append<no_order_statistics_tl_t, order_statistics_tl_t>::type tl_t;\n \n     typedef no_order_statistics_tl_t min_tl_t;\n   };\n@@ -98,7 +98,7 @@ namespace test\n     typedef typename trie_common_types<basic_type, Data_Type, e_access_traits_t, pb_ds::pat_trie_tag, pb_ds::trie_prefix_search_node_update, alloc_type>::regression_tl prefix_search_tl_t;\n \n   public:\n-    typedef typename pb_ds::detail::typelist_append<no_updates_tl_t, typename pb_ds::detail::typelist_append<prefix_search_tl_t, order_statistics_tl_t>::type>::type tl_t;\n+    typedef typename __gnu_cxx::typelist::append<no_updates_tl_t, typename __gnu_cxx::typelist::append<prefix_search_tl_t, order_statistics_tl_t>::type>::type tl_t;\n \n     typedef no_updates_tl_t min_tl_t;\n   };"}, {"sha": "219701c46cf75337d102e36909268520a7a8d564", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/rand_regression_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -76,7 +76,7 @@ namespace detail\n \n     template<typename Cntnr>\n     void\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       unsigned long ul = static_cast<unsigned long>(m_sd);\n       container_rand_regression_test<Cntnr> t(ul, m_n, m_n, m_tp, m_ip, \n@@ -143,7 +143,7 @@ namespace detail\n     try\n       {\n \tdetail::rand_reg_test tst(sd, n, m, tp, ip, ep, cp, mp, disp);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n     catch(...)\n       {"}, {"sha": "1390a075b868d3590b9f511e76cd99cea1464939", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/rand_regression_test.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -76,7 +76,7 @@ namespace detail\n \n     template<typename Cntnr>\n     void\n-    operator()(pb_ds::detail::type_to_type<Cntnr>)\n+    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n     {\n       unsigned long ul = static_cast<unsigned long>(m_sd);\n       container_rand_regression_test<Cntnr> t(ul, m_n, m_n, m_tp, m_ip, m_dp, \n@@ -145,7 +145,7 @@ namespace detail\n     try\n       {\n \tdetail::rand_reg_test tst(sd, n, m, tp, ip, dp, ep, cp, mp, disp);\n-\tpb_ds::detail::typelist_apply(tst, tl);\n+\t__gnu_cxx::typelist::apply(tst, tl);\n       }\n     catch(...)\n       {"}, {"sha": "16075f17e170f090617201ee64457957ce609414", "filename": "libstdc++-v3/testsuite/util/regression/trait/assoc/type_trait.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f245b19d871058abf50fc7c1cd734720f347a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp?ref=d7f245b19d871058abf50fc7c1cd734720f347a7", "patch": "@@ -93,7 +93,7 @@ namespace pb_ds\n         generate_value(Gen& r_gen, size_t max)\n \t{\n \t  return (generate_value(r_gen, max,\n-\t\t\t\t pb_ds::detail::type_to_type<value_type>()));\n+\t\t\t\t __gnu_cxx::typelist::detail::type_to_type<value_type>()));\n \t}\n \n \tstatic const_key_reference\n@@ -118,21 +118,21 @@ namespace pb_ds\n       private:\n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max,  pb_ds::detail::type_to_type<pb_ds::null_mapped_type>)\n+        generate_value(Gen& r_gen, size_t max,  __gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n \t{\n \t  return (basic_type(r_gen, max));\n \t}\n \n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max, pb_ds::detail::type_to_type<basic_type>)\n+        generate_value(Gen& r_gen, size_t max, __gnu_cxx::typelist::detail::type_to_type<basic_type>)\n \t{\n \t  return (basic_type(r_gen, max));\n \t}\n \n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max, pb_ds::detail::type_to_type<std::pair<const basic_type, basic_type> >)\n+        generate_value(Gen& r_gen, size_t max, __gnu_cxx::typelist::detail::type_to_type<std::pair<const basic_type, basic_type> >)\n \t{\n \t  return (std::make_pair(basic_type(r_gen, max), basic_type(r_gen, max)));\n \t}"}]}