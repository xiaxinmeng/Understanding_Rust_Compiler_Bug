{"sha": "c80c9e26dec56891897be0e468c004a588bedceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwYzllMjZkZWM1Njg5MTg5N2JlMGU0NjhjMDA0YTU4OGJlZGNlYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-18T16:51:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-18T16:51:08Z"}, "message": "PR 86416 \u2013 improve lto1 diagnostic if a mode does not exist\n\n        PR middle-end/86416\n        *  Makefile.in (CFLAGS-lto-streamer-in.o): Pass target_noncanonical on.\n        * lto-streamer-in.c (lto_input_mode_table): Improve unsupported-mode\n        diagnostic.\n\n        PR middle-end/86416\n        * testsuite/libgomp.c/pr86416-1.c: New.\n        * testsuite/libgomp.c/pr86416-2.c: New.\n\nFrom-SVN: r279528", "tree": {"sha": "b3a67265caa05e984ff61c5a166c5181175dba51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a67265caa05e984ff61c5a166c5181175dba51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80c9e26dec56891897be0e468c004a588bedceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80c9e26dec56891897be0e468c004a588bedceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80c9e26dec56891897be0e468c004a588bedceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80c9e26dec56891897be0e468c004a588bedceb/comments", "author": null, "committer": null, "parents": [{"sha": "6573d760cdfec1b4577b268ce1ff19cecc4c9cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6573d760cdfec1b4577b268ce1ff19cecc4c9cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6573d760cdfec1b4577b268ce1ff19cecc4c9cbd"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "642faea1e44f063e448f328cd7784531d7ddea41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -1,3 +1,10 @@\n+2019-12-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/86416\n+\t*  Makefile.in (CFLAGS-lto-streamer-in.o): Pass target_noncanonical on.\n+\t* lto-streamer-in.c (lto_input_mode_table): Improve unsupported-mode\n+\tdiagnostic.\n+\n 2019-12-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64-cores.def: \n@@ -11,7 +18,7 @@\n \n \tPR ipa/92971\n \t* ipa-cp.c (cgraph_edge_brings_all_agg_vals_for_node): Fix\n-          definition of values, release memory on exit.\n+\tdefinition of values, release memory on exit.\n \n 2019-12-17  Jan Hubicka  <hubicka@ucw.cz>\n \t    Martin Jambor  <mjambor@suse.cz>"}, {"sha": "657488d416b5a0b2f574d5c0cf6c4c2d99fdf29d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -2244,6 +2244,8 @@ version.o: $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n # lto-compress.o needs $(ZLIBINC) added to the include flags.\n CFLAGS-lto-compress.o += $(ZLIBINC)\n \n+CFLAGS-lto-streamer-in.o += -DTARGET_MACHINE=\\\"$(target_noncanonical)\\\"\n+\n bversion.h: s-bversion; @true\n s-bversion: BASE-VER\n \techo \"#define BUILDING_GCC_MAJOR `echo $(BASEVER_c) | sed -e 's/^\\([0-9]*\\).*$$/\\1/'`\" > bversion.h"}, {"sha": "f49f38df6472346211f630e5455f6ae69b75ddfd", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -1698,7 +1698,31 @@ lto_input_mode_table (struct lto_file_decl_data *file_data)\n \t\t}\n \t      /* FALLTHRU */\n \t    default:\n-\t      fatal_error (UNKNOWN_LOCATION, \"unsupported mode %qs\", mname);\n+\t      /* This is only used for offloading-target compilations and\n+\t\t is a user-facing error.  Give a better error message for\n+\t\t the common modes; see also mode-classes.def.   */\n+\t      if (mclass == MODE_FLOAT)\n+\t\tfatal_error (UNKNOWN_LOCATION,\n+\t\t\t     \"%s - %u-bit-precision floating-point numbers \"\n+\t\t\t     \"unsupported (mode %qs)\", TARGET_MACHINE,\n+\t\t\t     prec.to_constant (), mname);\n+\t      else if (mclass == MODE_DECIMAL_FLOAT)\n+\t\tfatal_error (UNKNOWN_LOCATION,\n+\t\t\t     \"%s - %u-bit-precision decimal floating-point \"\n+\t\t\t     \"numbers unsupported (mode %qs)\", TARGET_MACHINE,\n+\t\t\t     prec.to_constant (), mname);\n+\t      else if (mclass == MODE_COMPLEX_FLOAT)\n+\t\tfatal_error (UNKNOWN_LOCATION,\n+\t\t\t     \"%s - %u-bit-precision complex floating-point \"\n+\t\t\t     \"numbers unsupported (mode %qs)\", TARGET_MACHINE,\n+\t\t\t     prec.to_constant (), mname);\n+\t      else if (mclass == MODE_INT)\n+\t\tfatal_error (UNKNOWN_LOCATION,\n+\t\t\t     \"%s - %u-bit integer numbers unsupported (mode \"\n+\t\t\t     \"%qs)\", TARGET_MACHINE, prec.to_constant (), mname);\n+\t      else\n+\t\tfatal_error (UNKNOWN_LOCATION, \"%s - unsupported mode %qs\",\n+\t\t\t     TARGET_MACHINE, mname);\n \t      break;\n \t    }\n \t}"}, {"sha": "3c834175a294f847bdd31abc4b956069b607aace", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -1,3 +1,9 @@\n+2019-12-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/86416\n+\t* testsuite/libgomp.c/pr86416-1.c: New.\n+\t* testsuite/libgomp.c/pr86416-2.c: New.\n+\n 2019-12-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/accel/openacc.f90 (module openacc_kinds): Use 'PUBLIC' to mark"}, {"sha": "4ab523d23108a86dbd52270f0137264ce8065a1f", "filename": "libgomp/testsuite/libgomp.c/pr86416-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do link } */\n+/* { dg-require-effective-target large_long_double } */\n+\n+/* PR middle-end/86416  */\n+/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target offload_device } 0 }  */\n+/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target offload_device } }  */\n+\n+#include <stdlib.h>  /* For abort. */\n+\n+long double foo (long double x)\n+{\n+  #pragma omp target map(tofrom:x)\n+    x *= 2.0;\n+  return x;\n+}\n+\n+int main()\n+{\n+  long double v = foo (10.0q) - 20.0q;\n+  if (v > 1.0e-5 || v < -1.0e-5) abort();\n+  return 0;\n+}"}, {"sha": "f104da78029bd91d948dea4c006d2eef54e61865", "filename": "libgomp/testsuite/libgomp.c/pr86416-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80c9e26dec56891897be0e468c004a588bedceb/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c?ref=c80c9e26dec56891897be0e468c004a588bedceb", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do link { target __float128 } } */\n+/* { dg-add-options __float128 } */\n+\n+/* PR middle-end/86416  */\n+/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target offload_device } 0 }  */\n+/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target offload_device } }  */\n+\n+#include <stdlib.h>  /* For abort. */\n+\n+__float128 foo(__float128 y)\n+{\n+  #pragma omp target map(tofrom: y)\n+    y *= 4.0;\n+  return y;\n+}\n+\n+int main()\n+{\n+  __float128 v = foo (5.0L) - 20.0L;\n+  if (v > 1.0e-5 || v < -1.0e-5) abort();\n+  return 0;\n+}"}]}