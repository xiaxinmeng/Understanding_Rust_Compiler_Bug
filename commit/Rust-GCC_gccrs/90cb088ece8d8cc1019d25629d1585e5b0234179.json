{"sha": "90cb088ece8d8cc1019d25629d1585e5b0234179", "node_id": "C_kwDOANBUbNoAKDkwY2IwODhlY2U4ZDhjYzEwMTlkMjU2MjlkMTU4NWU1YjAyMzQxNzk", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-11-10T01:37:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-26T01:29:10Z"}, "message": "i386: vcvtph2ps and vcvtps2ph should be used to convert _Float16 to SFmode with -mf16c [PR 102811]\n\nAdd define_insn extendhfsf2 and truncsfhf2 for target_f16c.\n\ngcc/ChangeLog:\n\n\tPR target/102811\n\t* config/i386/i386.c (ix86_can_change_mode_class): Allow 16 bit data in XMM register\n\tfor TARGET_SSE2.\n\t* config/i386/i386.md (extendhfsf2): Add extenndhfsf2 for TARGET_F16C.\n\t(extendhfdf2): Restrict extendhfdf for TARGET_AVX512FP16 only.\n\t(*extendhf<mode>2): Rename from extendhf<mode>2.\n\t(truncsfhf2): Likewise.\n\t(truncdfhf2): Likewise.\n\t(*trunc<mode>2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102811\n\t* gcc.target/i386/pr90773-21.c: Allow pextrw instead of movw.\n\t* gcc.target/i386/pr90773-23.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c: New test.", "tree": {"sha": "ce1812f25dde7047424ece6eb586cca8478b1ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce1812f25dde7047424ece6eb586cca8478b1ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90cb088ece8d8cc1019d25629d1585e5b0234179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90cb088ece8d8cc1019d25629d1585e5b0234179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90cb088ece8d8cc1019d25629d1585e5b0234179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90cb088ece8d8cc1019d25629d1585e5b0234179/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379be00f45f65e0e8de72a50553dd9d2bab6cc08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379be00f45f65e0e8de72a50553dd9d2bab6cc08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379be00f45f65e0e8de72a50553dd9d2bab6cc08"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "3dedf522c42adc5071ec8a2aab51635b6d8f5cb2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=90cb088ece8d8cc1019d25629d1585e5b0234179", "patch": "@@ -19522,9 +19522,8 @@ ix86_can_change_mode_class (machine_mode from, machine_mode to,\n \t disallow a change to these modes, reload will assume it's ok to\n \t drop the subreg from (subreg:SI (reg:HI 100) 0).  This affects\n \t the vec_dupv4hi pattern.\n-\t NB: AVX512FP16 supports vmovw which can load 16bit data to sse\n-\t register.  */\n-      int mov_size = MAYBE_SSE_CLASS_P (regclass) && TARGET_AVX512FP16 ? 2 : 4;\n+\t NB: SSE2 can load 16bit data to sse register via pinsrw.  */\n+      int mov_size = MAYBE_SSE_CLASS_P (regclass) && TARGET_SSE2 ? 2 : 4;\n       if (GET_MODE_SIZE (from) < mov_size)\n \treturn false;\n     }"}, {"sha": "68606e57e6092079058048121ba8ad7f136eb15a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=90cb088ece8d8cc1019d25629d1585e5b0234179", "patch": "@@ -2525,6 +2525,16 @@\n     case TYPE_SSEMOV:\n       return ix86_output_ssemov (insn, operands);\n \n+    case TYPE_SSELOG:\n+      if (SSE_REG_P (operands[0]))\n+\treturn MEM_P (operands[1])\n+\t  ? \"pinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t  : \"pinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n+      else\n+\treturn MEM_P (operands[1])\n+\t  ? \"pextrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t  : \"pextrw\\t{$0, %1, %k0|%k0, %k1, 0}\";\n+\n     case TYPE_MSKLOG:\n       if (operands[1] == const0_rtx)\n \treturn \"kxorw\\t%0, %0, %0\";\n@@ -2540,13 +2550,17 @@\n     }\n }\n   [(set (attr \"isa\")\n-\t(cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n-\t\t  (const_string \"avx512fp16\")\n+\t(cond [(eq_attr \"alternative\" \"9,10,11,12\")\n+\t\t  (const_string \"sse2\")\n+\t       (eq_attr \"alternative\" \"13\")\n+\t\t  (const_string \"sse4\")\n \t       ]\n \t       (const_string \"*\")))\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n-\t      (const_string \"ssemov\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"ssemov\")\n+\t\t(const_string \"sselog\"))\n \t    (eq_attr \"alternative\" \"4,5,6,7\")\n \t      (const_string \"mskmov\")\n \t    (eq_attr \"alternative\" \"8\")\n@@ -4574,8 +4588,32 @@\n   emit_move_insn (operands[0], CONST0_RTX (V2DFmode));\n })\n \n-(define_insn \"extendhf<mode>2\"\n-  [(set (match_operand:MODEF 0 \"nonimm_ssenomem_operand\" \"=v\")\n+(define_expand \"extendhfsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(float_extend:SF\n+\t  (match_operand:HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 || TARGET_F16C || TARGET_AVX512VL\"\n+{\n+  if (!TARGET_AVX512FP16)\n+    {\n+      rtx res = gen_reg_rtx (V4SFmode);\n+      rtx tmp = force_reg (V8HFmode, CONST0_RTX (V8HFmode));\n+\n+      ix86_expand_vector_set (false, tmp, operands[1], 0);\n+      emit_insn (gen_vcvtph2ps (res, gen_lowpart (V8HImode, tmp)));\n+      emit_move_insn (operands[0], gen_lowpart (SFmode, res));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"extendhfdf2\"\n+  [(set (match_operand:DF 0 \"register_operand\")\n+\t(float_extend:DF\n+\t  (match_operand:HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n+(define_insn \"*extendhf<mode>2\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=v\")\n         (float_extend:MODEF\n \t  (match_operand:HF 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512FP16\"\n@@ -4766,7 +4804,31 @@\n \n ;; Conversion from {SF,DF}mode to HFmode.\n \n-(define_insn \"trunc<mode>hf2\"\n+(define_expand \"truncsfhf2\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(float_truncate:HF\n+\t  (match_operand:SF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 || TARGET_F16C || TARGET_AVX512VL\"\n+  {\n+    if (!TARGET_AVX512FP16)\n+    {\n+      rtx res = gen_reg_rtx (V8HFmode);\n+      rtx tmp = force_reg (V4SFmode, CONST0_RTX (V4SFmode));\n+\n+      ix86_expand_vector_set (false, tmp, operands[1], 0);\n+      emit_insn (gen_vcvtps2ph (gen_lowpart (V8HImode, res), tmp, GEN_INT (4)));\n+      emit_move_insn (operands[0], gen_lowpart (HFmode, res));\n+      DONE;\n+    }\n+  })\n+\n+(define_expand \"truncdfhf2\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(float_truncate:HF\n+\t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n+(define_insn \"*trunc<mode>hf2\"\n   [(set (match_operand:HF 0 \"register_operand\" \"=v\")\n        (float_truncate:HF\n          (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\")))]"}, {"sha": "dfbfb16795308b03dac3e54e8d34b6cbde344e9b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr102811.c?ref=90cb088ece8d8cc1019d25629d1585e5b0234179", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mf16c -mno-avx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vpxor\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2ps\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2ph\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__truncsfhf2\\[ \\\\t\\]\"} } */\n+/* { dg-final { scan-assembler-not \"__extendhfsf2\\[ \\\\t\\]\"} } */\n+_Float16 test (_Float16 a, _Float16 b)\n+{\n+  return a + b;\n+}"}, {"sha": "0d620fff83c3eaa8aac311f351b1218151a050f0", "filename": "gcc/testsuite/gcc.target/i386/pr90773-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-21.c?ref=90cb088ece8d8cc1019d25629d1585e5b0234179", "patch": "@@ -10,4 +10,4 @@ foo (int c)\n }\n \n /* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movw\\[\\\\t \\]%.*, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:movw|pextrw)\\[\\\\t \\].*, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "b7369e802e10ded1da60ba7c5048aaf95b485fe3", "filename": "gcc/testsuite/gcc.target/i386/pr90773-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90cb088ece8d8cc1019d25629d1585e5b0234179/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-23.c?ref=90cb088ece8d8cc1019d25629d1585e5b0234179", "patch": "@@ -10,4 +10,4 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movw\\[\\\\t \\]+.+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:movw|pextrw)\\[\\\\t \\]+.+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}]}