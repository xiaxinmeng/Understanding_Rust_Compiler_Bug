{"sha": "a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "node_id": "C_kwDOANBUbNoAKGE0NWI3YjE5ZTEzNjRkZDdiMDA2NmRmNDlkNDU4YjA1YmEzYzcyZDE", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-24T13:31:34Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-25T10:55:36Z"}, "message": "LoongArch: Avoid RTL flag check failure in loongarch_classify_symbol\n\nSYMBOL_REF_TLS_MODEL invokes SYMBOL_REF_FLAGS, and SYMBOL_REF_FLAGS\ninvokes RTL_FLAG_CHECK1 and aborts when RTL code is not SYMBOL_REF.\n\nr13-1833 removed \"gcc_assert (SYMBOL_REF_P (x))\" before invoking\n\"SYMBOL_REF_TLS_MODEL (x)\", indicating that it's now possible that \"x\"\nis not a SYMBOL_REF.  So we need to check if \"x\" is SYMBOL_REF first.\n\nThis fixes a test failure happening with r13-2173 with RTL flag\nchecking enabled:\n\n    pr106096.C:26:1: internal compiler error: RTL flag check:\n    SYMBOL_REF_FLAGS used with unexpected rtx code 'const' in\n    loongarch_classify_symbol\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_classify_symbol):\n\tReturn early if the rtx is not SYMBOL_REF.", "tree": {"sha": "6141d21f71c65999f041aa445c26d5f434686992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6141d21f71c65999f041aa445c26d5f434686992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYwdVXwAKCRCsqtIOGecQ\n4yEuAQDqGiJP7shv0Zkx3q0uVsNLvHq/l9lNc2S/ctFUxNqZsAEAwTVQQ1EH60G4\ncYIaybw3qBC9fXOgjfoCnDYKlo4rawI=\n=tqGh\n-----END PGP SIGNATURE-----", "payload": "tree 6141d21f71c65999f041aa445c26d5f434686992\nparent 818073fe9ddc384f0cf702306c672b935fa42325\nauthor Xi Ruoyao <xry111@xry111.site> 1661347894 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1661424936 +0800\n\nLoongArch: Avoid RTL flag check failure in loongarch_classify_symbol\n\nSYMBOL_REF_TLS_MODEL invokes SYMBOL_REF_FLAGS, and SYMBOL_REF_FLAGS\ninvokes RTL_FLAG_CHECK1 and aborts when RTL code is not SYMBOL_REF.\n\nr13-1833 removed \"gcc_assert (SYMBOL_REF_P (x))\" before invoking\n\"SYMBOL_REF_TLS_MODEL (x)\", indicating that it's now possible that \"x\"\nis not a SYMBOL_REF.  So we need to check if \"x\" is SYMBOL_REF first.\n\nThis fixes a test failure happening with r13-2173 with RTL flag\nchecking enabled:\n\n    pr106096.C:26:1: internal compiler error: RTL flag check:\n    SYMBOL_REF_FLAGS used with unexpected rtx code 'const' in\n    loongarch_classify_symbol\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_classify_symbol):\n\tReturn early if the rtx is not SYMBOL_REF.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45b7b19e1364dd7b0066df49d458b05ba3c72d1/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818073fe9ddc384f0cf702306c672b935fa42325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818073fe9ddc384f0cf702306c672b935fa42325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818073fe9ddc384f0cf702306c672b935fa42325"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "452aba9d42886e16efce235d5a3f42ded3989983", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45b7b19e1364dd7b0066df49d458b05ba3c72d1/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45b7b19e1364dd7b0066df49d458b05ba3c72d1/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "patch": "@@ -1633,14 +1633,13 @@ loongarch_rtx_constant_in_small_data_p (machine_mode mode)\n static enum loongarch_symbol_type\n loongarch_classify_symbol (const_rtx x)\n {\n-  if (LABEL_REF_P (x))\n+  if (!SYMBOL_REF_P (x))\n     return SYMBOL_PCREL;\n \n   if (SYMBOL_REF_TLS_MODEL (x))\n     return SYMBOL_TLS;\n \n-  if (SYMBOL_REF_P (x)\n-      && !loongarch_symbol_binds_local_p (x))\n+  if (!loongarch_symbol_binds_local_p (x))\n     return SYMBOL_GOT_DISP;\n \n   return SYMBOL_PCREL;"}]}