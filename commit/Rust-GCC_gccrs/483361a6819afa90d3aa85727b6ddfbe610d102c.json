{"sha": "483361a6819afa90d3aa85727b6ddfbe610d102c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzMzYxYTY4MTlhZmE5MGQzYWE4NTcyN2I2ZGRmYmU2MTBkMTAyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:26:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:26:25Z"}, "message": "[multiple changes]\n\n2011-08-04  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Update doc on gnatcheck.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Add_ALFA_Xrefs): correct definition of ranges of\n\txrefs in a scope.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Check): in ALFA mode, return without\n\tperforming expansion.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper,\n\tAnalyze_Generic_Subprogram_Body): protect call to Process_PCCs so that\n\tit is not called in ALFA mode.\n\nFrom-SVN: r177382", "tree": {"sha": "025fee850df8ab0e5bd9d9f0880a3027214a746d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025fee850df8ab0e5bd9d9f0880a3027214a746d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483361a6819afa90d3aa85727b6ddfbe610d102c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483361a6819afa90d3aa85727b6ddfbe610d102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483361a6819afa90d3aa85727b6ddfbe610d102c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483361a6819afa90d3aa85727b6ddfbe610d102c/comments", "author": null, "committer": null, "parents": [{"sha": "ef5569c64bdbf0cdce0d1bf8a91edb825e5e413f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5569c64bdbf0cdce0d1bf8a91edb825e5e413f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5569c64bdbf0cdce0d1bf8a91edb825e5e413f"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "48e9e5352ac1e17eecec50ed6cc2a64d67f6c59c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=483361a6819afa90d3aa85727b6ddfbe610d102c", "patch": "@@ -1,3 +1,20 @@\n+2011-08-04  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Update doc on gnatcheck.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Add_ALFA_Xrefs): correct definition of ranges of\n+\txrefs in a scope.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Check): in ALFA mode, return without\n+\tperforming expansion.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper,\n+\tAnalyze_Generic_Subprogram_Body): protect call to Process_PCCs so that\n+\tit is not called in ALFA mode.\n+\n 2011-08-04  Emmanuel Briot  <briot@adacore.com>\n \n \t* make.adb, osint.adb, osint.ads (Reset_Command_Line_Files): not used"}, {"sha": "b1900a9ad7d3c7ec5462f4e0f5559990ca062fbd", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=483361a6819afa90d3aa85727b6ddfbe610d102c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -321,6 +321,12 @@ package body Exp_Prag is\n       --  be an explicit conditional in the source, not an implicit if, so we\n       --  do not call Make_Implicit_If_Statement.\n \n+      --  In formal verification mode, we keep the pragma check in the code\n+\n+      if ALFA_Mode then\n+         return;\n+      end if;\n+\n       --  Case where we generate a direct raise\n \n       if ((Debug_Flag_Dot_G"}, {"sha": "d47d6eabd93c5feb99559a0644f7ef5a40630373", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=483361a6819afa90d3aa85727b6ddfbe610d102c", "patch": "@@ -17306,9 +17306,6 @@ outside the current directory, the source search path has to be provided when\n calling @command{gnatcheck}, either through a specified project file or\n through @command{gnatcheck} switches.\n \n-A number of rules are predefined in @command{gnatcheck} and are described\n-later in this chapter.\n-\n For full details, refer to @cite{GNATcheck Reference Manual} document.\n \n "}, {"sha": "26bd28e0f0371408b9eb225930f3ecb62f4b093f", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=483361a6819afa90d3aa85727b6ddfbe610d102c", "patch": "@@ -339,7 +339,6 @@ package body ALFA is\n    --------------------\n \n    procedure Add_ALFA_Xrefs is\n-      Prev_Scope_Idx  : Scope_Index;\n       Cur_Scope_Idx   : Scope_Index;\n       From_Xref_Idx   : Xref_Index;\n       Cur_Entity      : Entity_Id;\n@@ -613,13 +612,12 @@ package body ALFA is\n \n       --  Initialize loop\n \n-      Prev_Scope_Idx := 1;\n       Cur_Scope_Idx  := 1;\n       From_Xref_Idx  := 1;\n       Cur_Entity     := Empty;\n \n-      if ALFA_Scope_Table.Last /= 0 then\n-         ALFA_Scope_Table.Table (1).From_Xref := 1;\n+      if ALFA_Scope_Table.Last = 0 then\n+         return;\n       end if;\n \n       --  Loop to output references\n@@ -721,9 +719,15 @@ package body ALFA is\n \n             pragma Assert (Is_Future_Scope_Entity (XE.Ent_Scope));\n \n+            --  Update the range of cross references to which the current scope\n+            --  refers to. This may be the empty range only for the first scope\n+            --  considered.\n+\n             if XE.Ent_Scope /= Cur_Scope then\n                ALFA_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n                  From_Xref_Idx;\n+               ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n+                 ALFA_Xref_Table.Last;\n                From_Xref_Idx := ALFA_Xref_Table.Last + 1;\n             end if;\n \n@@ -732,14 +736,6 @@ package body ALFA is\n                pragma Assert (Cur_Scope_Idx <= ALFA_Scope_Table.Last);\n             end loop;\n \n-            if Prev_Scope_Idx /= Cur_Scope_Idx\n-              and then ALFA_Xref_Table.Last /= 0\n-            then\n-               ALFA_Scope_Table.Table (Prev_Scope_Idx).To_Xref :=\n-                 ALFA_Xref_Table.Last;\n-               Prev_Scope_Idx := Cur_Scope_Idx;\n-            end if;\n-\n             if XE.Ent /= Cur_Entity then\n                Cur_Entity_Name :=\n                  new String'(Exact_Source_Name (Sloc (XE.Ent)));\n@@ -758,6 +754,8 @@ package body ALFA is\n          end Add_One_Xref;\n       end loop;\n \n+      --  Update the range of cross references to which the scope refers to\n+\n       ALFA_Scope_Table.Table (Cur_Scope_Idx).From_Xref := From_Xref_Idx;\n       ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref   := ALFA_Xref_Table.Last;\n    end Add_ALFA_Xrefs;"}, {"sha": "d0e51e51870a5d8be805a2eb565ab50b991bdcda", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483361a6819afa90d3aa85727b6ddfbe610d102c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=483361a6819afa90d3aa85727b6ddfbe610d102c", "patch": "@@ -962,7 +962,15 @@ package body Sem_Ch6 is\n          end if;\n \n          Set_Actual_Subtypes (N, Current_Scope);\n-         Process_PPCs (N, Gen_Id, Body_Id);\n+\n+         --  Deal with preconditions and postconditions. In formal verification\n+         --  mode, we keep pre- and postconditions attached to entities rather\n+         --  than inserted in the code, in order to facilitate a distinct\n+         --  treatment for them.\n+\n+         if not ALFA_Mode then\n+            Process_PPCs (N, Gen_Id, Body_Id);\n+         end if;\n \n          --  If the generic unit carries pre- or post-conditions, copy them\n          --  to the original generic tree, so that they are properly added\n@@ -2663,9 +2671,14 @@ package body Sem_Ch6 is\n       HSS := Handled_Statement_Sequence (N);\n       Set_Actual_Subtypes (N, Current_Scope);\n \n-      --  Deal with preconditions and postconditions\n+      --  Deal with preconditions and postconditions. In formal verification\n+      --  mode, we keep pre- and postconditions attached to entities rather\n+      --  than inserted in the code, in order to facilitate a distinct\n+      --  treatment for them.\n \n-      Process_PPCs (N, Spec_Id, Body_Id);\n+      if not ALFA_Mode then\n+         Process_PPCs (N, Spec_Id, Body_Id);\n+      end if;\n \n       --  Add a declaration for the Protection object, renaming declarations\n       --  for discriminals and privals and finally a declaration for the entry"}]}