{"sha": "44835fdd5d38ae34088ca2304588382c61064558", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4MzVmZGQ1ZDM4YWUzNDA4OGNhMjMwNDU4ODM4MmM2MTA2NDU1OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-09-06T21:25:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-09-06T21:25:02Z"}, "message": "extend.texi: Mark named return value extension as deprecated.\n\n\t* extend.texi: Mark named return value extension as deprecated.\n\n\t* NEWS: Mention that the named return value extension has been\n\tdeprecated.\n\t* cp-tree.h (original_result_rtx): Define.\n\t(TREE_REFERENCE_EXPR): Remove.\n\t(DECL_VPARENT): Likewise.\n\t(pushdecl_nonclass_level): Likewise.\n\t(store_return_init): Likewise.\n\t(reinit_lang_specific): Likewise.\n\t(genrtl_named_return_value): Change prototype.\n\t* decl.c (original_result_rtx): Remove.\n\t(cp_finish_decl): Don't build DECL_STMTs for RESULT_DECLs.\n\tDo not generate RTL for local variables here.\n\t(store_return_init): Remove.\n\t* semantics.c (genrtl_named_return_value): Simplify.  Fold in\n\tstore_return_init.\n\t(finish_named_return_value): Adjust accordingly.  Warn that this\n\textension is deprecated.\n\t(lang_expand_stmt): Adjust call to genrtl_named_return_value.\n\nFrom-SVN: r36210", "tree": {"sha": "3849981f81993a14ff6789ad1a4f46090fae3c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3849981f81993a14ff6789ad1a4f46090fae3c2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44835fdd5d38ae34088ca2304588382c61064558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44835fdd5d38ae34088ca2304588382c61064558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44835fdd5d38ae34088ca2304588382c61064558", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44835fdd5d38ae34088ca2304588382c61064558/comments", "author": null, "committer": null, "parents": [{"sha": "bcf98e48ef4b9eeee82ca6505153216d4b55a22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf98e48ef4b9eeee82ca6505153216d4b55a22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf98e48ef4b9eeee82ca6505153216d4b55a22b"}], "stats": {"total": 324, "additions": 86, "deletions": 238}, "files": [{"sha": "ef138d72ea3d7ed82ccdf4dd4ee6e1d13df4bffc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,3 +1,7 @@\n+2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* extend.texi: Mark named return value extension as deprecated.\n+\n 2000-09-06  Geoff Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.c (rs6000_reverse_condition): Return"}, {"sha": "900b77c97e20e605012dc5956edbad1d880870a9", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -521,3 +521,5 @@ extern tree default_conversion                  PARAMS ((tree));\n    Given two compatible ANSI C types, returns the merged type.  */\n \n extern tree common_type                         PARAMS ((tree, tree));\n+\n+extern tree expand_tree_builtin                 PARAMS ((tree, tree, tree));"}, {"sha": "6dd4b9472ec3bb9d0385d0439dc645ef6a7da28e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,3 +1,24 @@\n+2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* NEWS: Mention that the named return value extension has been\n+\tdeprecated.\n+\t* cp-tree.h (original_result_rtx): Define.\n+\t(TREE_REFERENCE_EXPR): Remove.\n+\t(DECL_VPARENT): Likewise.\n+\t(pushdecl_nonclass_level): Likewise.\n+\t(store_return_init): Likewise.\n+\t(reinit_lang_specific): Likewise.\n+\t(genrtl_named_return_value): Change prototype.\n+\t* decl.c (original_result_rtx): Remove.\n+\t(cp_finish_decl): Don't build DECL_STMTs for RESULT_DECLs.\n+\tDo not generate RTL for local variables here.\n+\t(store_return_init): Remove.\n+\t* semantics.c (genrtl_named_return_value): Simplify.  Fold in\n+\tstore_return_init.\n+\t(finish_named_return_value): Adjust accordingly.  Warn that this\n+\textension is deprecated.\n+\t(lang_expand_stmt): Adjust call to genrtl_named_return_value.\n+\n 2000-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (type_unification_real): Replace switch with if."}, {"sha": "d2c483d289c68136a2524cef68a93f3702d2141d", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -36,6 +36,12 @@\n * G++ no longer allows you to overload the conditional operator (i.e., \n   the `?:' operator.)\n \n+* The \"named return value\" extension:\n+\t\n+    int f () return r { r = 3; }\n+\n+  has been deprecated, and will be removed in a future version of G++.\n+\n *** Changes in GCC 2.95:\n \n * Messages about non-conformant code that we can still handle (\"pedwarns\")"}, {"sha": "f54891ccd0294eaecdf9143a93725af6e71afe7e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1009,6 +1009,13 @@ struct language_function\n \n #define doing_semantic_analysis_p() (!expanding_p)\n \n+/* If original DECL_RESULT of current function was a register,\n+   but due to being an addressable named return value, would up\n+   on the stack, this variable holds the named return value's\n+   original location.  */\n+\n+#define original_result_rtx cp_function_chain->x_result_rtx\n+\n #define in_function_try_handler cp_function_chain->in_function_try_handler\n \n extern tree current_function_return_value;\n@@ -2588,13 +2595,6 @@ extern int flag_new_for_scope;\n \t\t\t\t   && CONSTRUCTOR_ELTS (NODE) == NULL_TREE \\\n \t\t\t\t   && ! TREE_HAS_CONSTRUCTOR (NODE))\n \n-#if 0\n-/* Indicates that a NON_LVALUE_EXPR came from a C++ reference.\n-   Used to generate more helpful error message in case somebody\n-   tries to take its address.  */\n-#define TREE_REFERENCE_EXPR(NODE) (TREE_LANG_FLAG_3(NODE))\n-#endif\n-\n /* Nonzero for _TYPE means that the _TYPE defines a destructor.  */\n #define TYPE_HAS_DESTRUCTOR(NODE) (TYPE_LANG_FLAG_2(NODE))\n \n@@ -2804,18 +2804,6 @@ extern int flag_new_for_scope;\n \n /* Define fields and accessors for nodes representing declared names.  */\n \n-#if 0\n-/* C++: A derived class may be able to directly use the virtual\n-   function table of a base class.  When it does so, it may\n-   still have a decl node used to access the virtual function\n-   table (so that variables of this type can initialize their\n-   virtual function table pointers by name).  When such thievery\n-   is committed, know exactly which base class's virtual function\n-   table is the one being stolen.  This effectively computes the\n-   transitive closure.  */\n-#define DECL_VPARENT(NODE) ((NODE)->decl.arguments)\n-#endif\n-\n #define TYPE_WAS_ANONYMOUS(NODE) (TYPE_LANG_SPECIFIC (NODE)->was_anonymous)\n \n /* C++: all of these are overloaded!  These apply only to TYPE_DECLs.  */\n@@ -3903,9 +3891,6 @@ extern int duplicate_decls\t\t\tPARAMS ((tree, tree));\n extern tree pushdecl\t\t\t\tPARAMS ((tree));\n extern tree pushdecl_top_level\t\t\tPARAMS ((tree));\n extern void pushdecl_class_level\t\tPARAMS ((tree));\n-#if 0\n-extern void pushdecl_nonclass_level\t\tPARAMS ((tree));\n-#endif\n extern tree pushdecl_namespace_level            PARAMS ((tree));\n extern tree push_using_decl                     PARAMS ((tree, tree));\n extern tree push_using_directive                PARAMS ((tree));\n@@ -3918,9 +3903,6 @@ extern void check_goto\t\t\t\tPARAMS ((tree));\n extern void define_case_label\t\t\tPARAMS ((void));\n extern tree getdecls\t\t\t\tPARAMS ((void));\n extern tree gettags\t\t\t\tPARAMS ((void));\n-#if 0\n-extern void set_current_level_tags_transparency\tPARAMS ((int));\n-#endif\n extern tree binding_for_name                    PARAMS ((tree, tree));\n extern tree namespace_binding                   PARAMS ((tree, tree));\n extern void set_namespace_binding               PARAMS ((tree, tree, tree));\n@@ -3974,7 +3956,6 @@ extern void build_enumerator\t\t\tPARAMS ((tree, tree, tree));\n extern int start_function\t\t\tPARAMS ((tree, tree, tree, int));\n extern void expand_start_early_try_stmts\tPARAMS ((void));\n extern void store_parm_decls\t\t\tPARAMS ((void));\n-extern void store_return_init\t\t\tPARAMS ((tree));\n extern tree finish_function\t\t\tPARAMS ((int));\n extern tree start_method\t\t\tPARAMS ((tree, tree, tree));\n extern tree finish_method\t\t\tPARAMS ((tree));\n@@ -4166,9 +4147,6 @@ extern tree make_call_declarator\t\tPARAMS ((tree, tree, tree, tree));\n extern void set_quals_and_spec\t\t\tPARAMS ((tree, tree, tree));\n extern void lang_init\t\t\t\tPARAMS ((void));\n extern void lang_finish\t\t\t\tPARAMS ((void));\n-#if 0\n-extern void reinit_lang_specific\t\tPARAMS ((void));\n-#endif\n extern void print_parse_statistics\t\tPARAMS ((void));\n extern void extract_interface_info\t\tPARAMS ((void));\n extern void do_pending_inlines\t\t\tPARAMS ((void));\n@@ -4464,8 +4442,7 @@ extern void genrtl_ctor_stmt                    PARAMS ((tree));\n extern void genrtl_subobject                    PARAMS ((tree));\n extern tree genrtl_do_poplevel                  PARAMS ((void));\n extern void clear_out_block                     PARAMS ((void));\n-extern void genrtl_named_return_value           PARAMS ((tree,\n-\t\t\t\t\t\t\t tree));\n+extern void genrtl_named_return_value           PARAMS ((void));\n extern tree begin_global_stmt_expr              PARAMS ((void));\n extern tree finish_global_stmt_expr             PARAMS ((tree));\n "}, {"sha": "b363266b22f7bd0d4da2ca5e9e07b32129d007e8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -269,13 +269,6 @@ int in_std;\n /* Expect only namespace names now. */\n static int only_namespace_names;\n \n-/* If original DECL_RESULT of current function was a register,\n-   but due to being an addressable named return value, would up\n-   on the stack, this variable holds the named return value's\n-   original location.  */\n-\n-#define original_result_rtx cp_function_chain->x_result_rtx\n-\n /* Used only for jumps to as-yet undefined labels, since jumps to\n    defined labels can have their validity checked immediately.  */\n \n@@ -8092,7 +8085,9 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n     return;\n   \n   /* Add this declaration to the statement-tree.  */\n-  if (building_stmt_tree () && at_function_scope_p ())\n+  if (building_stmt_tree () \n+      && at_function_scope_p ()\n+      && TREE_CODE (decl) != RESULT_DECL)\n     add_decl_stmt (decl);\n \n   if (TYPE_HAS_MUTABLE_P (type))\n@@ -8215,8 +8210,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n \t    {\n \t      /* If we're not building RTL, then we need to do so\n \t\t now.  */\n-\t      if (!building_stmt_tree ())\n-\t\temit_local_var (decl);\n+\t      my_friendly_assert (building_stmt_tree (), 20000906);\n \t      /* Initialize the variable.  */\n \t      initialize_local_var (decl, init, flags);\n \t      /* Clean up the variable.  */\n@@ -14034,31 +14028,6 @@ store_parm_decls ()\n     current_eh_spec_try_block = expand_start_eh_spec ();\n }\n \n-/* Bind a name and initialization to the return value of\n-   the current function.  */\n-\n-void\n-store_return_init (decl)\n-     tree decl;\n-{\n-  /* If this named return value comes in a register, put it in a\n-     pseudo-register.  */\n-  if (DECL_REGISTER (decl))\n-    {\n-      original_result_rtx = DECL_RTL (decl);\n-      /* Note that the mode of the old DECL_RTL may be wider than the\n-\t mode of DECL_RESULT, depending on the calling conventions for\n-\t the processor.  For example, on the Alpha, a 32-bit integer\n-\t is returned in a DImode register -- the DECL_RESULT has\n-\t SImode but the DECL_RTL for the DECL_RESULT has DImode.  So,\n-\t here, we use the mode the back-end has already assigned for\n-\t the return value.  */\n-      DECL_RTL (decl) = gen_reg_rtx (GET_MODE (original_result_rtx));\n-      if (TREE_ADDRESSABLE (decl))\n-\tput_var_into_stack (decl);\n-    }\n-}\n-\n \f\n /* We have finished doing semantic analysis on DECL, but have not yet\n    generated RTL for its body.  Save away our current state, so that"}, {"sha": "6c9a5a656108843be43d663982fc27136847a881", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 47, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1030,55 +1030,30 @@ finish_decl_cleanup (decl, cleanup)\n /* Generate the RTL for a RETURN_INIT. */\n \n void\n-genrtl_named_return_value (return_id, init)\n-     tree return_id, init;\n+genrtl_named_return_value ()\n {\n   tree decl;\n-  /* Clear this out so that finish_named_return_value can set it\n-     again.  */\n-  DECL_NAME (DECL_RESULT (current_function_decl)) = NULL_TREE;\n \n   decl = DECL_RESULT (current_function_decl);\n-  if (pedantic)\n-    /* Give this error as many times as there are occurrences,\n-       so that users can use Emacs compilation buffers to find\n-       and fix all such places.  */\n-    pedwarn (\"ISO C++ does not permit named return values\");\n \n-  if (return_id != NULL_TREE)\n-    {\n-      if (DECL_NAME (decl) == NULL_TREE)\n-\t{\n-\t  DECL_NAME (decl) = return_id;\n-\t  DECL_ASSEMBLER_NAME (decl) = return_id;\n-\t}\n-      else\n-\t{\n-\t  cp_error (\"return identifier `%D' already in place\", return_id);\n-\t  return;\n-\t}\n-    }\n+  emit_local_var (decl);\n \n-  /* Can't let this happen for constructors.  */\n-  if (DECL_CONSTRUCTOR_P (current_function_decl))\n+  /* If this named return value comes in a register, put it in a\n+     pseudo-register.  */\n+  if (DECL_REGISTER (decl))\n     {\n-      error (\"can't redefine default return value for constructors\");\n-      return;\n-    }\n-\n-  /* If we have a named return value, put that in our scope as well.  */\n-  if (DECL_NAME (decl) != NULL_TREE)\n-    {\n-      /* Let `cp_finish_decl' know that this initializer is ok.  */\n-      DECL_INITIAL (decl) = init;\n-      cp_finish_decl (decl, init, NULL_TREE, 0);\n-      store_return_init (decl);\n+      original_result_rtx = DECL_RTL (decl);\n+      /* Note that the mode of the old DECL_RTL may be wider than the\n+\t mode of DECL_RESULT, depending on the calling conventions for\n+\t the processor.  For example, on the Alpha, a 32-bit integer\n+\t is returned in a DImode register -- the DECL_RESULT has\n+\t SImode but the DECL_RTL for the DECL_RESULT has DImode.  So,\n+\t here, we use the mode the back-end has already assigned for\n+\t the return value.  */\n+      DECL_RTL (decl) = gen_reg_rtx (GET_MODE (original_result_rtx));\n+      if (TREE_ADDRESSABLE (decl))\n+\tput_var_into_stack (decl);\n     }\n-\n-  /* Don't use tree-inlining for functions with named return values.\n-     That doesn't work properly because we don't do any translation of\n-     the RETURN_INITs when they are copied.  */\n-  DECL_UNINLINABLE (current_function_decl) = 1;\n }\n \n /* Bind a name and initialization to the return value of\n@@ -1090,11 +1065,12 @@ finish_named_return_value (return_id, init)\n {\n   tree decl = DECL_RESULT (current_function_decl);\n \n+  /* Give this error as many times as there are occurrences, so that\n+     users can use Emacs compilation buffers to find and fix all such\n+     places.  */\n   if (pedantic)\n-    /* Give this error as many times as there are occurrences,\n-       so that users can use Emacs compilation buffers to find\n-       and fix all such places.  */\n     pedwarn (\"ISO C++ does not permit named return values\");\n+  cp_deprecated (\"the named return value extension\");\n \n   if (return_id != NULL_TREE)\n     {\n@@ -1124,7 +1100,13 @@ finish_named_return_value (return_id, init)\n       DECL_INITIAL (decl) = init;\n       if (doing_semantic_analysis_p ())\n \tpushdecl (decl);\n-      add_tree (build_stmt (RETURN_INIT, return_id, init));\n+      if (!processing_template_decl) \n+\t{\n+\t  cp_finish_decl (decl, init, NULL_TREE, 0);\n+\t  add_tree (build_stmt (RETURN_INIT, NULL_TREE, NULL_TREE));\n+\t}\n+      else\n+\tadd_tree (build_stmt (RETURN_INIT, return_id, init));\n     }\n \n   /* Don't use tree-inlining for functions with named return values.\n@@ -2463,8 +2445,7 @@ lang_expand_stmt (t)\n \t  break;\n \n \tcase RETURN_INIT:\n-\t  genrtl_named_return_value (TREE_OPERAND (t, 0), \n-\t\t\t\t     TREE_OPERAND (t, 1));\n+\t  genrtl_named_return_value ();\n \t  break;\n \n \tdefault:"}, {"sha": "4fc1a535b07b1056a78515d311515551a41b3861", "filename": "gcc/extend.texi", "status": "modified", "additions": 3, "deletions": 115, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -3333,9 +3333,11 @@ Previously it was possible to use an empty prototype parameter list to\n indicate an unspecified number of parameters (like C), rather than no\n parameters, as C++ demands. This feature has been removed, except where\n it is required for backwards compatibility @xref{Backwards Compatibility}.\n-\n @end table\n \n+The named return value extension has been deprecated, and will be\n+removed from g++ at some point.\n+\n @node Backwards Compatibility\n @section Backwards Compatibility\n @cindex Backwards Compatibility\n@@ -3379,7 +3381,6 @@ test specifically for GNU C++ (@pxref{Standard Predefined,,Standard\n Predefined Macros,cpp.info,The C Preprocessor}).\n \n @menu\n-* Naming Results::      Giving a name to C++ function return values.\n * Min and Max::\t\tC++ Minimum and maximum operators.\n * Volatiles::\t\tWhat constitutes an access to a volatile object.\n * Restricted Pointers:: C99 restricted pointers and references.\n@@ -3391,119 +3392,6 @@ Predefined Macros,cpp.info,The C Preprocessor}).\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n @end menu\n \n-@node Naming Results\n-@section Named Return Values in C++\n-\n-@cindex @code{return}, in C++ function header\n-@cindex return value, named, in C++\n-@cindex named return value in C++\n-@cindex C++ named return value\n-GNU C++ extends the function-definition syntax to allow you to specify a\n-name for the result of a function outside the body of the definition, in\n-C++ programs:\n-\n-@example\n-@group\n-@var{type}\n-@var{functionname} (@var{args}) return @var{resultname};\n-@{\n-  @dots{}\n-  @var{body}\n-  @dots{}\n-@}\n-@end group\n-@end example\n-\n-You can use this feature to avoid an extra constructor call when\n-a function result has a class type.  For example, consider a function\n-@code{m}, declared as @w{@samp{X v = m ();}}, whose result is of class\n-@code{X}:\n-\n-@example\n-X\n-m ()\n-@{\n-  X b;\n-  b.a = 23;\n-  return b;\n-@}\n-@end example\n-\n-@cindex implicit argument: return value\n-Although @code{m} appears to have no arguments, in fact it has one implicit\n-argument: the address of the return value.  At invocation, the address\n-of enough space to hold @code{v} is sent in as the implicit argument.\n-Then @code{b} is constructed and its @code{a} field is set to the value\n-23.  Finally, a copy constructor (a constructor of the form @samp{X(X&)})\n-is applied to @code{b}, with the (implicit) return value location as the\n-target, so that @code{v} is now bound to the return value.\n-\n-But this is wasteful.  The local @code{b} is declared just to hold\n-something that will be copied right out.  While a compiler that\n-combined an ``elision'' algorithm with interprocedural data flow\n-analysis could conceivably eliminate all of this, it is much more\n-practical to allow you to assist the compiler in generating\n-efficient code by manipulating the return value explicitly,\n-thus avoiding the local variable and copy constructor altogether.\n-\n-Using the extended GNU C++ function-definition syntax, you can avoid the\n-temporary allocation and copying by naming @code{r} as your return value\n-at the outset, and assigning to its @code{a} field directly:\n-\n-@example\n-X\n-m () return r;\n-@{\n-  r.a = 23;\n-@}\n-@end example\n-\n-@noindent\n-The declaration of @code{r} is a standard, proper declaration, whose effects\n-are executed @strong{before} any of the body of @code{m}.\n-\n-Functions of this type impose no additional restrictions; in particular,\n-you can execute @code{return} statements, or return implicitly by\n-reaching the end of the function body (``falling off the edge'').\n-Cases like\n-\n-@example\n-X\n-m () return r (23);\n-@{\n-  return;\n-@}\n-@end example\n-\n-@noindent\n-(or even @w{@samp{X m () return r (23); @{ @}}}) are unambiguous, since\n-the return value @code{r} has been initialized in either case.  The\n-following code may be hard to read, but also works predictably:\n-\n-@example\n-X\n-m () return r;\n-@{\n-  X b;\n-  return b;\n-@}\n-@end example\n-\n-The return value slot denoted by @code{r} is initialized at the outset,\n-but the statement @samp{return b;} overrides this value.  The compiler\n-deals with this by destroying @code{r} (calling the destructor if there\n-is one, or doing nothing if there is not), and then reinitializing\n-@code{r} with @code{b}.\n-\n-This extension is provided primarily to help people who use overloaded\n-operators, where there is a great need to control not just the\n-arguments, but the return values of functions.  For classes where the\n-copy constructor incurs a heavy performance penalty (especially in the\n-common case where there is a quick default constructor), this is a major\n-savings.  The disadvantage of this extension is that you do not control\n-when the default constructor for the return value is called: it is\n-always called at the beginning.\n-\n @node Min and Max\n @section Minimum and Maximum Operators in C++\n "}, {"sha": "ddf02f5004fe600cdf52691e4c31641068f057e2", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p13417.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options:  \n+// Special g++ Options: -Wno-deprecated\n // prms-id: 13417\n \n class   Foo {"}, {"sha": "29e1fc31f4c1763e95dad7a078334bd9a0ecdea6", "filename": "gcc/testsuite/g++.old-deja/g++.ext/return1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Freturn1.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,6 +1,6 @@\n // Test that the named return value extension works when passed as a reference.\n // Origin: Jason Merrill <jason@redhat.com>\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n void f (int &i)\n {"}, {"sha": "c1a9622de16f01cbffd45a074f3eda484afd70aa", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p646.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -6,7 +6,7 @@\n */\n \n \n-// Special g++ Options: \n+// Special g++ Options: -Wno-deprecated\n \n extern \"C\"\n {"}, {"sha": "eabc42db300014de1045387db4f7144521301fe5", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p700.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,4 +1,4 @@\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n // prms-id: 700\n \n //# 1 \"../../../../libg++/etc/benchmarks/dhrystone.cc\""}, {"sha": "6cb5c9ec38572757d5be5fe8b9be553fc9aea592", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/nameret1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret1.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,11 +1,11 @@\n // Build don't link:\n-// Copyright (C) 1999 Free Software Foundation\n+// Copyright (C) 1999, 2000 Free Software Foundation\n \n // by Alexandre Oliva <oliva@lsd.ic.unicamp.br>\n \n // distilled from libg++'s Rational.cc\n \n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n inline int bar () return r {}\n "}, {"sha": "f54d55c7255da96642b4e1803256e37190b76bb2", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/nameret2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fnameret2.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,11 +1,11 @@\n // Build don't link:\n-// Copyright (C) 1999 Free Software Foundation\n+// Copyright (C) 1999, 2000 Free Software Foundation\n \n // by Alexandre Oliva <oliva@lsd.ic.unicamp.br>\n \n // distilled from libg++'s Integer.cc\n \n-// Special g++ Options: -O1\n+// Special g++ Options: -O1 -Wno-deprecated\n \n inline int bar () return r {}\n "}, {"sha": "f605d931ad227b263932aea96faca6c1315386fb", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb101.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -1,4 +1,4 @@\n-// Special g++ Options: -fcheck-memory-usage\n+// Special g++ Options: -fcheck-memory-usage -Wno-deprecated\n // Build don't link: \n \n  "}, {"sha": "31012bee0d8c232ff14520dec1d203456c64e614", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44835fdd5d38ae34088ca2304588382c61064558/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C?ref=44835fdd5d38ae34088ca2304588382c61064558", "patch": "@@ -2,7 +2,7 @@\n /* simple program to demonstrate the bug with named return values in gcc\n */\n /* (w) 4.9.97 by Kurt Garloff <K.Garloff@ping.de> */\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n // 8/28/1998 - This dies in add_conversions from dfs_walk, null CLASSTYPE_METHOD_VEC\n // for the test<T> record_type.  This is marked as an expected failure for now,\n // until we actually fix it."}]}