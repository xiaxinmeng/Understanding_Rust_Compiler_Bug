{"sha": "619519c89aa6f32d2e39648d6674b0f667bf3de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5NTE5Yzg5YWE2ZjMyZDJlMzk2NDhkNjY3NGIwZjY2N2JmM2RlNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-07-03T16:11:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-07-03T16:11:42Z"}, "message": "c-decl.c, [...]: Fix comment typos.\n\n\t* c-decl.c, tree-object-size.c, tree-vectorizer.c,\n\tconfig/arm/unwind-arm.c, config/arm/unwind-arm.h: Fix comment\n\ttypos.\n\nFrom-SVN: r101558", "tree": {"sha": "3d8bcc090396e90be83ec96849c078c48ff34fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d8bcc090396e90be83ec96849c078c48ff34fe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619519c89aa6f32d2e39648d6674b0f667bf3de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619519c89aa6f32d2e39648d6674b0f667bf3de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619519c89aa6f32d2e39648d6674b0f667bf3de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619519c89aa6f32d2e39648d6674b0f667bf3de6/comments", "author": null, "committer": null, "parents": [{"sha": "6cbfa10eb5cc91e373681e2957d5b3f0b79ae57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbfa10eb5cc91e373681e2957d5b3f0b79ae57f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbfa10eb5cc91e373681e2957d5b3f0b79ae57f"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "00e98f5d380a7ebf78f71e993c5f098282feb09e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -1,3 +1,9 @@\n+2005-07-03  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* c-decl.c, tree-object-size.c, tree-vectorizer.c,\n+\tconfig/arm/unwind-arm.c, config/arm/unwind-arm.h: Fix comment\n+\ttypos.\n+\n 2005-07-03  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (fix_range): Fix typo in comment."}, {"sha": "3c241fe6af943e044ef76eef9d51bddfa1d51dbb", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -1308,7 +1308,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  if (DECL_INITIAL (olddecl))\n \t    {\n \t      /* If both decls are in the same TU and the new declaration\n-\t\t isn't overridding an extern inline reject the new decl.\n+\t\t isn't overriding an extern inline reject the new decl.\n \t\t When we handle c99 style inline rules we'll want to reject\n \t\t the following:\n "}, {"sha": "e436f7c2659c377dcef5af07ee67047ac63f6196", "filename": "gcc/config/arm/unwind-arm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.c?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -28,7 +28,7 @@\n #include \"unwind.h\"\n \n /* Definitions for C++ runtime support routines.  We make these weak\n-   declarations to avoid pulling in libsupc++ unneccesarily.  */\n+   declarations to avoid pulling in libsupc++ unnecessarily.  */\n typedef unsigned char bool;\n \n typedef struct _ZSt9type_info type_info; /* This names C++ type_info type */\n@@ -119,7 +119,7 @@ typedef struct\n } phase2_vrs;\n \n \n-/* An exeption index table entry.  */\n+/* An exception index table entry.  */\n \n typedef struct __EIT_entry\n {\n@@ -375,7 +375,7 @@ search_EIT_table (const __EIT_entry * table, int nrec, _uw return_address)\n \n /* Find the exception index table eintry for the given address.\n    Fill in the relevant fields of the UCB.\n-   Returns _URC_FAILURE if an error occured, _URC_OK on success*/\n+   Returns _URC_FAILURE if an error occurred, _URC_OK on success.  */\n \n static _Unwind_Reason_Code\n get_eit_entry (_Unwind_Control_Block *ucbp, _uw return_address)\n@@ -676,7 +676,7 @@ __gnu_unwind_pr_common (_Unwind_State state,\n \t\t  /* Cleanup in range, and we are running cleanups.  */\n \t\t  _uw lp;\n \n-\t\t  /* Landing pad address is 31-bit pc-relatvie offset.  */\n+\t\t  /* Landing pad address is 31-bit pc-relative offset.  */\n \t\t  lp = selfrel_offset31 (data);\n \t\t  data++;\n \t\t  /* Save the exception data pointer.  */\n@@ -705,7 +705,7 @@ __gnu_unwind_pr_common (_Unwind_State state,\n \t\t      if (data[1] == (_uw) -2)\n \t\t\treturn _URC_FAILURE;\n \n-\t\t      /* The thrown object immediately folows the ECB.  */\n+\t\t      /* The thrown object immediately follows the ECB.  */\n \t\t      matched = (void *)(ucbp + 1);\n \t\t      if (data[1] != (_uw) -1)\n \t\t\t{\n@@ -739,7 +739,7 @@ __gnu_unwind_pr_common (_Unwind_State state,\n \t\t  _Unwind_SetGR (context, 0, (_uw) ucbp);\n \t\t  return _URC_INSTALL_CONTEXT;\n \t\t}\n-\t      /* Catch handler not mached.  Advance to the next descriptor.  */\n+\t      /* Catch handler not matched.  Advance to the next descriptor.  */\n \t      data += 2;\n \t      break;\n \n@@ -818,7 +818,7 @@ __gnu_unwind_pr_common (_Unwind_State state,\n \n   if (phase2_call_unexpected_after_unwind)\n     {\n-      /* Enter __cxa_unexpected as if called from the callsite.  */\n+      /* Enter __cxa_unexpected as if called from the call site.  */\n       _Unwind_SetGR (context, R_LR, _Unwind_GetGR (context, R_PC));\n       _Unwind_SetGR (context, R_PC, (_uw) &__cxa_call_unexpected);\n       return _URC_INSTALL_CONTEXT;"}, {"sha": "4d86407c73e3f95f4f1dd65c42588d9eaab44105", "filename": "gcc/config/arm/unwind-arm.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.h?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -26,8 +26,8 @@\n    the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n    Boston, MA 02110-1301, USA.  */\n \n-/* Language-independent unwinder header public defines.  This contins both\n-   ABI defined objects, and GNU support routines.*/\n+/* Language-independent unwinder header public defines.  This contains both\n+   ABI defined objects, and GNU support routines.  */\n \n #ifndef UNWIND_ARM_H\n #define UNWIND_ARM_H\n@@ -223,7 +223,7 @@ extern \"C\" {\n       tmp += ptr;\n       tmp = *(_Unwind_Word *) tmp;\n #elif defined(__symbian__)\n-      /* Absoute pointer.  Nothing more to do.  */\n+      /* Absolute pointer.  Nothing more to do.  */\n #else\n       /* Pc-relative pointer.  */\n       tmp += ptr;\n@@ -250,7 +250,7 @@ extern \"C\" {\n     }\n \n   /* The dwarf unwinder doesn't understand arm/thumb state.  We assume the\n-     landing pad uses the same instruction set as the callsite.  */\n+     landing pad uses the same instruction set as the call site.  */\n #define _Unwind_SetIP(context, val) \\\n   _Unwind_SetGR (context, 15, val | (_Unwind_GetGR (context, 15) & 1))\n "}, {"sha": "178dc98d6278805e7b0daa566fedff581f229378", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -623,7 +623,7 @@ plus_expr_object_size (struct object_size_info *osi, tree var, tree value)\n \n /* Compute object sizes for VAR.\n    For ADDR_EXPR an object size is the number of remaining bytes\n-   to the end of the object (where what is consindered an object depends on\n+   to the end of the object (where what is considered an object depends on\n    OSI->object_size_type).\n    For allocation CALL_EXPR like malloc or calloc object size is the size\n    of the allocation."}, {"sha": "4b5b56fdf8af31c86295b9d6aa4a7141317d36aa", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619519c89aa6f32d2e39648d6674b0f667bf3de6/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=619519c89aa6f32d2e39648d6674b0f667bf3de6", "patch": "@@ -1747,7 +1747,7 @@ vect_is_simple_use (tree operand, loop_vec_info loop_vinfo, tree *def_stmt,\n    CODE - tree_code of a reduction operations.\n \n    Output:\n-   REDUC_CODE - the correponding tree-code to be used to reduce the\n+   REDUC_CODE - the corresponding tree-code to be used to reduce the\n       vector of partial results into a single scalar result (which\n       will also reside in a vector).\n "}]}