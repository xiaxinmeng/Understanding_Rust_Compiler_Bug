{"sha": "0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "node_id": "C_kwDOANBUbNoAKDBmM2I0ZDM4ZDRiYWQ4OTk0MTUwZmU3YTFlNTQyODA1NWQyOWE0YmY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-12T17:24:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-12T17:24:37Z"}, "message": "libstdc++: Implement ranges::enumerate_view from P2164R9\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__cpp_lib_ranges_enumerate): Define\n\tfor C++23.\n\t(__detail::__range_with_movable_reference): Likewise.\n\t(enumerate_view): Likewise.\n\t(enumerate_view::_Iterator): Likewise.\n\t(enumerate_view::_Sentinel): Likewise.\n\t(views::__detail::__can_enumerate_view): Likewise.\n\t(views::_Enumerate, views::enumerate): Likewise.\n\t* include/std/version (__cpp_lib_ranges_enumerate): Likewise.\n\t* testsuite/std/ranges/version_c++23.cc: Verify value of\n\t__cpp_lib_ranges_enumerate.\n\t* testsuite/std/ranges/adaptors/enumerate/1.cc: New test.", "tree": {"sha": "3617ed7b115d8ca283428528a00f0340af71b447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3617ed7b115d8ca283428528a00f0340af71b447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/comments", "author": null, "committer": null, "parents": [{"sha": "aa65771427d32299cffecea64cbb766411aa8faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa65771427d32299cffecea64cbb766411aa8faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa65771427d32299cffecea64cbb766411aa8faf"}], "stats": {"total": 410, "additions": 410, "deletions": 0}, "files": [{"sha": "3f6ff505617d8b1636ab58360c95432bf81ad51d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "patch": "@@ -8626,6 +8626,309 @@ namespace views::__adaptor\n \n     inline constexpr _AsRvalue as_rvalue;\n   }\n+\n+#define __cpp_lib_ranges_enumerate 202302L\n+\n+  namespace __detail\n+  {\n+    template<typename _Range>\n+      concept __range_with_movable_reference = input_range<_Range>\n+\t&& move_constructible<range_reference_t<_Range>>\n+\t&& move_constructible<range_rvalue_reference_t<_Range>>;\n+  }\n+\n+  template<view _Vp>\n+    requires __detail::__range_with_movable_reference<_Vp>\n+  class enumerate_view : public view_interface<enumerate_view<_Vp>>\n+  {\n+    _Vp _M_base = _Vp();\n+\n+    template<bool _Const> class _Iterator;\n+    template<bool _Const> class _Sentinel;\n+\n+  public:\n+    enumerate_view() requires default_initializable<_Vp> = default;\n+\n+    constexpr explicit\n+    enumerate_view(_Vp __base)\n+    : _M_base(std::move(__base))\n+    { }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return _Iterator<false>(ranges::begin(_M_base), 0); }\n+\n+    constexpr auto\n+    begin() const requires __detail::__range_with_movable_reference<const _Vp>\n+    { return _Iterator<true>(ranges::begin(_M_base), 0); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    {\n+      if constexpr (common_range<_Vp> && sized_range<_Vp>)\n+\treturn _Iterator<false>(ranges::end(_M_base), ranges::distance(_M_base));\n+      else\n+\treturn _Sentinel<false>(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    end() const requires __detail::__range_with_movable_reference<const _Vp>\n+    {\n+      if constexpr (common_range<const _Vp> && sized_range<const _Vp>)\n+\treturn _Iterator<true>(ranges::end(_M_base), ranges::distance(_M_base));\n+      else\n+\treturn _Sentinel<true>(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr _Vp\n+    base() const & requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    { return std::move(_M_base); }\n+  };\n+\n+  template<typename _Range>\n+    enumerate_view(_Range&&) -> enumerate_view<views::all_t<_Range>>;\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<enumerate_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n+  template<view _Vp>\n+  requires __detail::__range_with_movable_reference<_Vp>\n+  template<bool _Const>\n+  class enumerate_view<_Vp>::_Iterator\n+  {\n+    using _Base = __maybe_const_t<_Const, _Vp>;\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (random_access_range<_Base>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_range<_Base>)\n+\treturn bidirectional_iterator_tag{};\n+      else if constexpr (forward_range<_Base>)\n+\treturn forward_iterator_tag{};\n+      else\n+\treturn input_iterator_tag{};\n+    }\n+\n+    friend enumerate_view;\n+\n+  public:\n+    using iterator_category = input_iterator_tag;\n+    using iterator_concept = decltype(_S_iter_concept());\n+    using difference_type = range_difference_t<_Base>;\n+    using value_type = tuple<difference_type, range_value_t<_Base>>;\n+\n+  private:\n+    using __reference_type = tuple<difference_type, range_reference_t<_Base>>;\n+\n+    iterator_t<_Base> _M_current = iterator_t<_Base>();\n+    difference_type _M_pos = 0;\n+\n+    constexpr explicit\n+    _Iterator(iterator_t<_Base> __current, difference_type __pos)\n+    : _M_current(std::move(__current)), _M_pos(__pos)\n+    { }\n+\n+  public:\n+    _Iterator() requires default_initializable<iterator_t<_Base>> = default;\n+\n+    constexpr\n+    _Iterator(_Iterator<!_Const> __i)\n+    requires _Const && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n+    : _M_current(std::move(__i._M_current)), _M_pos(__i._M_pos)\n+    { }\n+\n+    constexpr const iterator_t<_Base> &\n+    base() const & noexcept\n+    { return _M_current; }\n+\n+    constexpr iterator_t<_Base>\n+    base() &&\n+    { return std::move(_M_current); }\n+\n+    constexpr difference_type\n+    index() const noexcept\n+    { return _M_pos; }\n+\n+    constexpr auto\n+    operator*() const\n+    { return __reference_type(_M_pos, *_M_current); }\n+\n+    constexpr _Iterator&\n+    operator++()\n+    {\n+      ++_M_current;\n+      ++_M_pos;\n+      return *this;\n+    }\n+\n+    constexpr void\n+    operator++(int)\n+    { ++*this; }\n+\n+    constexpr _Iterator\n+    operator++(int) requires forward_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator--() requires bidirectional_range<_Base>\n+    {\n+      --_M_current;\n+      --_M_pos;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator--(int) requires bidirectional_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator+=(difference_type __n) requires random_access_range<_Base>\n+    {\n+      _M_current += __n;\n+      _M_pos += __n;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator&\n+    operator-=(difference_type __n) requires random_access_range<_Base>\n+    {\n+      _M_current -= __n;\n+      _M_pos -= __n;\n+      return *this;\n+    }\n+\n+    constexpr auto\n+    operator[](difference_type __n) const requires random_access_range<_Base>\n+    { return __reference_type(_M_pos + __n, _M_current[__n]); }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, const _Iterator& __y) noexcept\n+    { return __x._M_pos == __y._M_pos; }\n+\n+    friend constexpr strong_ordering\n+    operator<=>(const _Iterator& __x, const _Iterator& __y) noexcept\n+    { return __x._M_pos <=> __y._M_pos; }\n+\n+    friend constexpr _Iterator\n+    operator+(const _Iterator& __x, difference_type __y)\n+    requires random_access_range<_Base>\n+    { return (auto(__x) += __y); }\n+\n+    friend constexpr _Iterator\n+    operator+(difference_type __x, const _Iterator& __y)\n+    requires random_access_range<_Base>\n+    { return auto(__y) += __x; }\n+\n+    friend constexpr _Iterator\n+    operator-(const _Iterator& __x, difference_type __y)\n+    requires random_access_range<_Base>\n+    { return auto(__x) -= __y; }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, const _Iterator& __y)\n+    { return __x._M_pos - __y._M_pos; }\n+\n+    friend constexpr auto\n+    iter_move(const _Iterator& __i)\n+    noexcept(noexcept(ranges::iter_move(__i._M_current))\n+\t     && is_nothrow_move_constructible_v<range_rvalue_reference_t<_Base>>)\n+    {\n+      return tuple<difference_type, range_rvalue_reference_t<_Base>>\n+\t(__i._M_pos, ranges::iter_move(__i._M_current));\n+    }\n+  };\n+\n+  template<view _Vp>\n+  requires __detail::__range_with_movable_reference<_Vp>\n+  template<bool _Const>\n+  class enumerate_view<_Vp>::_Sentinel\n+  {\n+    using _Base = __maybe_const_t<_Const, _Vp>;\n+\n+    sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n+\n+    constexpr explicit\n+    _Sentinel(sentinel_t<_Base> __end)\n+    : _M_end(std::move(__end))\n+    { }\n+\n+    friend enumerate_view;\n+\n+  public:\n+    _Sentinel() = default;\n+\n+    constexpr\n+    _Sentinel(_Sentinel<!_Const> __other)\n+    requires _Const && convertible_to<sentinel_t<_Vp>, sentinel_t<_Base>>\n+    : _M_end(std::move(__other._M_end))\n+    { }\n+\n+    constexpr sentinel_t<_Base>\n+    base() const\n+    { return _M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr bool\n+    operator==(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n+    { return __x._M_current == __y._M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr range_difference_t<__maybe_const_t<_OtherConst, _Vp>>\n+    operator-(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n+    { return __x._M_current - __y._M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr range_difference_t<__maybe_const_t<_OtherConst, _Vp>>\n+    operator-(const _Sentinel& __x, const _Iterator<_OtherConst>& __y)\n+    { return __x._M_end - __y._M_current; }\n+  };\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tconcept __can_enumerate_view\n+\t  = requires { enumerate_view<all_t<_Tp>>(std::declval<_Tp>()); };\n+    }\n+\n+    struct _Enumerate : __adaptor::_RangeAdaptorClosure\n+    {\n+      template<viewable_range _Range>\n+\trequires __detail::__can_enumerate_view<_Range>\n+\tconstexpr auto\n+\toperator() [[nodiscard]] (_Range&& __r) const\n+\t{ return enumerate_view<all_t<_Range>>(std::forward<_Range>(__r)); }\n+    };\n+\n+    inline constexpr _Enumerate enumerate;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "b35435c2669f2326016778ee5ddd1451a015f14b", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "patch": "@@ -339,6 +339,7 @@\n #define __cpp_lib_ranges_stride 202207L\n #define __cpp_lib_ranges_cartesian_product 202207L\n #define __cpp_lib_ranges_as_rvalue 202207L\n+#define __cpp_lib_ranges_enumerate 202302L\n #if __cpp_constexpr_dynamic_alloc\n # if _GLIBCXX_HOSTED\n #  define __cpp_lib_constexpr_bitset 202202L"}, {"sha": "445d9854c8cbdfe88d74c1f17e99dde5fa65928a", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/enumerate/1.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc?ref=0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "patch": "@@ -0,0 +1,102 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+#if __cpp_lib_ranges_enumerate != 202302L\n+# error \"Feature-test macro __cpp_lib_ranges_enumerate has wrong value in <ranges>\"\n+#endif\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+using __gnu_test::test_input_range;\n+using __gnu_test::test_forward_range;\n+using __gnu_test::test_bidirectional_range;\n+using __gnu_test::test_random_access_range;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3};\n+  auto v = x | views::enumerate;\n+\n+  VERIFY( ranges::equal(v | views::keys, (int[]){0, 1, 2}) );\n+  VERIFY( ranges::equal(v | views::values, (int[]){1, 2, 3}) );\n+\n+  auto it = v.begin();\n+  VERIFY( it == it );\n+  VERIFY( it != it + 1 );\n+  VERIFY( it != v.end() );\n+\n+  VERIFY( it.index() == 0 );\n+  VERIFY( (++it).index() == 1 );\n+  VERIFY( (++it).index() == 2 );\n+\n+  return true;\n+}\n+\n+template<template<class> class Container>\n+void\n+test02()\n+{\n+  int x[] = {1, 2, 3};\n+  Container<int> rx (x);\n+  auto v = rx | views::enumerate;\n+\n+  int j = 0;\n+  for (auto [i, y] : v)\n+    {\n+      VERIFY (&y == &x[j]);\n+      VERIFY (j == i);\n+      ++j;\n+    }\n+  VERIFY (j == ranges::size(x));\n+\n+  if constexpr (ranges::bidirectional_range<decltype(rx)>)\n+    {\n+      static_assert(ranges::bidirectional_range<decltype(v)>);\n+      for (auto [i, y] : v | views::reverse)\n+\t{\n+\t  --j;\n+\t  VERIFY (&y == &x[j]);\n+\t  VERIFY (j == i);\n+\t}\n+      VERIFY (j == 0);\n+    }\n+\n+  if constexpr (ranges::random_access_range<decltype(rx)>)\n+    {\n+      static_assert(ranges::random_access_range<decltype(v)>);\n+      for (j = 0; j < ranges::ssize(x); ++j)\n+\t{\n+\t  VERIFY (std::get<0>(v[j]) == j);\n+\t  VERIFY (&std::get<1>(v[j]) == &x[j]);\n+\t  VERIFY (*(v.begin() + j) == v[j]);\n+\t  VERIFY (*(v.begin() + (ranges::size(x) - 1) - j) == v[ranges::size(x) - 1 - j]);\n+\t  VERIFY (v.begin() + j + 1 > v.begin() + j );\n+\t  VERIFY (v.begin() + j < v.begin() + j + 1 );\n+\t  VERIFY (v.begin() + j >= v.begin() );\n+\t  VERIFY (v.begin() <= v.begin() + j );\n+\t  VERIFY( v.begin() + j != v.end() );\n+\t  VERIFY( v.begin() + j - v.begin() == j );\n+\t  VERIFY( v.end() - (v.begin() + j) == ranges::ssize(x) - j );\n+\t}\n+      VERIFY( v.begin() + j == v.end() );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+\n+  test02<test_input_range>();\n+  test02<test_forward_range>();\n+  test02<test_bidirectional_range>();\n+  test02<test_random_access_range>();\n+}"}, {"sha": "fa010bf166bfbf30aec0029efbad786836a9078f", "filename": "libstdc++-v3/testsuite/std/ranges/version_c++23.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b4d38d4bad8994150fe7a1e5428055d29a4bf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc?ref=0f3b4d38d4bad8994150fe7a1e5428055d29a4bf", "patch": "@@ -44,3 +44,7 @@\n #if __cpp_lib_ranges_as_rvalue != 202207L\n # error \"Feature-test macro __cpp_lib_ranges_as_rvalue has wrong value in <version>\"\n #endif\n+\n+#if __cpp_lib_ranges_enumerate != 202302L\n+# error \"Feature-test macro __cpp_lib_ranges_enumerate has wrong value in <version>\"\n+#endif"}]}