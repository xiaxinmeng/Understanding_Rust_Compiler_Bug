{"sha": "a53b8229e64c78256449005929e599b2eab83fbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzYjgyMjllNjRjNzgyNTY0NDkwMDU5MjllNTk5YjJlYWI4M2ZiZA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-08T11:37:29Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:10:41Z"}, "message": "aarch64: Use RTL builtins for vq[r]dmulh[q]_n intrinsics\n\nRewrite vq[r]dmulh[q]_n Neon intrinsics to use RTL builtins rather\nthan inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add sq[r]dmulh_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_n<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vqdmulh_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vqdmulh_n_s32): Likewise.\n\t(vqdmulhq_n_s16): Likewise.\n\t(vqdmulhq_n_s32): Likewise.\n\t(vqrdmulh_n_s16): Likewise.\n\t(vqrdmulh_n_s32): Likewise.\n\t(vqrdmulhq_n_s16): Likewise.\n\t(vqrdmulhq_n_s32): Likewise.", "tree": {"sha": "76ed038c5329b8147816cef9b095caac5ac50ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76ed038c5329b8147816cef9b095caac5ac50ac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53b8229e64c78256449005929e599b2eab83fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53b8229e64c78256449005929e599b2eab83fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53b8229e64c78256449005929e599b2eab83fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53b8229e64c78256449005929e599b2eab83fbd/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cb8b6c1ff34c65f60cf745ae9967a9dfd8f195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9cb8b6c1ff34c65f60cf745ae9967a9dfd8f195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9cb8b6c1ff34c65f60cf745ae9967a9dfd8f195"}], "stats": {"total": 71, "additions": 23, "deletions": 48}, "files": [{"sha": "f79e71682934cb7fa28e01ae7645a083078482f8", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a53b8229e64c78256449005929e599b2eab83fbd", "patch": "@@ -348,6 +348,9 @@\n   /* Implemented by aarch64_sq<r>dmulh<mode>.  */\n   BUILTIN_VSDQ_HSI (BINOP, sqdmulh, 0, NONE)\n   BUILTIN_VSDQ_HSI (BINOP, sqrdmulh, 0, NONE)\n+  /* Implemented by aarch64_sq<r>dmulh_n<mode>.  */\n+  BUILTIN_VDQHS (BINOP, sqdmulh_n, 0, NONE)\n+  BUILTIN_VDQHS (BINOP, sqrdmulh_n, 0, NONE)\n   /* Implemented by aarch64_sq<r>dmulh_lane<q><mode>.  */\n   BUILTIN_VSDQ_HSI (TERNOP_LANE, sqdmulh_lane, 0, NONE)\n   BUILTIN_VSDQ_HSI (TERNOP_LANE, sqdmulh_laneq, 0, NONE)"}, {"sha": "5245cf01ba3418437583994265bbbd66e89b19d5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a53b8229e64c78256449005929e599b2eab83fbd", "patch": "@@ -4639,6 +4639,18 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype><q>\")]\n )\n \n+(define_insn \"aarch64_sq<r>dmulh_n<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQHS\n+\t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n+\t   (vec_duplicate:VDQHS\n+\t     (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\"))]\n+\t VQDMULH))]\n+  \"TARGET_SIMD\"\n+  \"sq<r>dmulh\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n+)\n+\n ;; sq<r>dmulh_lane\n \n (define_insn \"aarch64_sq<r>dmulh_lane<mode>\""}, {"sha": "5fb2b3d0d456357cc03445b3a1be75866aae1e29", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53b8229e64c78256449005929e599b2eab83fbd/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a53b8229e64c78256449005929e599b2eab83fbd", "patch": "@@ -8769,48 +8769,28 @@ __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqdmulh_n_s16 (int16x4_t __a, int16_t __b)\n {\n-  int16x4_t __result;\n-  __asm__ (\"sqdmulh %0.4h,%1.4h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqdmulh_nv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqdmulh_n_s32 (int32x2_t __a, int32_t __b)\n {\n-  int32x2_t __result;\n-  __asm__ (\"sqdmulh %0.2s,%1.2s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqdmulh_nv2si (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqdmulhq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sqdmulh %0.8h,%1.8h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqdmulh_nv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqdmulhq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sqdmulh %0.4s,%1.4s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqdmulh_nv4si (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -8880,48 +8860,28 @@ __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqrdmulh_n_s16 (int16x4_t __a, int16_t __b)\n {\n-  int16x4_t __result;\n-  __asm__ (\"sqrdmulh %0.4h,%1.4h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqrdmulh_nv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqrdmulh_n_s32 (int32x2_t __a, int32_t __b)\n {\n-  int32x2_t __result;\n-  __asm__ (\"sqrdmulh %0.2s,%1.2s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqrdmulh_nv2si (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqrdmulhq_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sqrdmulh %0.8h,%1.8h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqrdmulh_nv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqrdmulhq_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sqrdmulh %0.4s,%1.4s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqrdmulh_nv4si (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t"}]}