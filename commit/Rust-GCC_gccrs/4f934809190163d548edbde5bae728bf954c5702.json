{"sha": "4f934809190163d548edbde5bae728bf954c5702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5MzQ4MDkxOTAxNjNkNTQ4ZWRiZGU1YmFlNzI4YmY5NTRjNTcwMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-07-17T10:40:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-07-17T10:40:09Z"}, "message": "re PR c++/40780 (ICE in gimplify_conversion)\n\n\tPR c++/40780\n\t* gimplify.c (gimplify_conversion): Don't change non-conversions into\n\tVIEW_CONVERT_EXPR.\n\n\t* g++.dg/template/ptrmem19.C: New test.\n\nFrom-SVN: r149740", "tree": {"sha": "a75510c3c3a02ad99a11e7939bdd46869d42a290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75510c3c3a02ad99a11e7939bdd46869d42a290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f934809190163d548edbde5bae728bf954c5702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f934809190163d548edbde5bae728bf954c5702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f934809190163d548edbde5bae728bf954c5702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f934809190163d548edbde5bae728bf954c5702/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e59be1b11960eb9b2a2fbb0b80b482508b704d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59be1b11960eb9b2a2fbb0b80b482508b704d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59be1b11960eb9b2a2fbb0b80b482508b704d3d"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "2d926260394dc069c7151472e35cf7149cc8452c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f934809190163d548edbde5bae728bf954c5702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f934809190163d548edbde5bae728bf954c5702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f934809190163d548edbde5bae728bf954c5702", "patch": "@@ -1,3 +1,9 @@\n+2009-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/40780\n+\t* gimplify.c (gimplify_conversion): Don't change non-conversions into\n+\tVIEW_CONVERT_EXPR.\n+\n 2009-07-16  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (Nested Functions): Replace broken link with"}, {"sha": "db7de3b573b6baca91733fde39326a2bb3af76b3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f934809190163d548edbde5bae728bf954c5702/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f934809190163d548edbde5bae728bf954c5702/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4f934809190163d548edbde5bae728bf954c5702", "patch": "@@ -1827,9 +1827,9 @@ gimplify_conversion (tree *expr_p)\n \n   /* If we have a conversion to a non-register type force the\n      use of a VIEW_CONVERT_EXPR instead.  */\n-  if (!is_gimple_reg_type (TREE_TYPE (*expr_p)))\n+  if (CONVERT_EXPR_P (*expr_p) && !is_gimple_reg_type (TREE_TYPE (*expr_p)))\n     *expr_p = fold_build1_loc (loc, VIEW_CONVERT_EXPR, TREE_TYPE (*expr_p),\n-\t\t\t   TREE_OPERAND (*expr_p, 0));\n+\t\t\t       TREE_OPERAND (*expr_p, 0));\n \n   return GS_OK;\n }"}, {"sha": "fdd4d18d5b3a685920d4e8dd2615e9ca78caaf05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f934809190163d548edbde5bae728bf954c5702/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f934809190163d548edbde5bae728bf954c5702/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f934809190163d548edbde5bae728bf954c5702", "patch": "@@ -1,3 +1,8 @@\n+2009-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/40780\n+\t* g++.dg/template/ptrmem19.C: New test.\n+\n 2009-07-17  Aldy Hernandez  <aldyh@redhat.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "52711c6cb688cbd75aa44b2a0156a195fa7ddc3f", "filename": "gcc/testsuite/g++.dg/template/ptrmem19.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f934809190163d548edbde5bae728bf954c5702/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f934809190163d548edbde5bae728bf954c5702/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem19.C?ref=4f934809190163d548edbde5bae728bf954c5702", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/40780\n+// { dg-do compile }\n+\n+template <class T1, typename T2, typename T3>\n+struct A\n+{\n+  typedef T2 (T1::*m) (T3);\n+  A (m) {}\n+};\n+struct B;\n+struct C\n+{\n+  void foo (B *);\n+};\n+typedef A <C, void, B *> D;\n+typedef void (C::*E) (B *);\n+struct F;\n+typedef void (C::*G) (F);\n+D d ((E) (G) & C::foo);"}]}