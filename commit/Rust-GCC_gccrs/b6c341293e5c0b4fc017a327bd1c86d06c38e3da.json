{"sha": "b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjMzQxMjkzZTVjMGI0ZmMwMTdhMzI3YmQxYzg2ZDA2YzM4ZTNkYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-05-13T17:08:29Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-05-13T17:08:29Z"}, "message": "Replace calls to abort in CRIS port.\n\n\t* config/cris/cris.h (CRIS_ASSERT): New macro.\n\t* config/cris/cris.md (\"*movsi_internal\"): Use CRIS_ASSERT and\n\tinternal_error instead of abort.\n\t(\"movsi\"): Ditto.  Unquote preparation statement section.\n\t* config/cris/cris.c (ASSERT_PLT_UNSPEC): Define in terms of\n\tCRIS_ASSERT.\n\t(\"call\", \"call_value\"): Ditto, but use gcc_assert where\n\tappropriate.  Tweak comments.\n\t(cris_op_str): Call internal_error, not abort.\n\t(cris_print_operand): Tweak \"abort\" reference to \"die\" in comment.\n\t(cris_initial_elimination_offset): Call gcc_unreachable, not abort.\n\t(cris_notice_update_cc): Call internal_error, not abort.\n\t(cris_expand_return, cris_expand_prologue, cris_gen_movem_load)\n\t(cris_emit_movem_store, cris_asm_output_symbol_ref)\n\t(cris_output_addr_const_extra): Use CRIS_ASSERT, don't call abort.\n\t(cris_symbol, cris_got_symbol): Use CRIS_ASSERT instead of\n\tENABLE_CHECKING-guarded abort call.\n\t(cris_split_movdx): Use CRIS_ASSERT instead of abort with test.\n\tUse internal_error at end of test-chain.\n\nFrom-SVN: r99669", "tree": {"sha": "64f2ad21d29bb47757ded03f599a3727d97e1a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f2ad21d29bb47757ded03f599a3727d97e1a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d6c85d31464e0e26c381728795d959b14facf36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6c85d31464e0e26c381728795d959b14facf36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6c85d31464e0e26c381728795d959b14facf36"}], "stats": {"total": 131, "additions": 65, "deletions": 66}, "files": [{"sha": "d02adcd40bd888a827ebcde028f3c48eacbe442c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "patch": "@@ -1,3 +1,26 @@\n+2005-05-13  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tReplace calls to abort in CRIS port.\n+\t* config/cris/cris.h (CRIS_ASSERT): New macro.\n+\t* config/cris/cris.md (\"*movsi_internal\"): Use CRIS_ASSERT and\n+\tinternal_error instead of abort.\n+\t(\"movsi\"): Ditto.  Unquote preparation statement section.\n+\t* config/cris/cris.c (ASSERT_PLT_UNSPEC): Define in terms of\n+\tCRIS_ASSERT.\n+\t(\"call\", \"call_value\"): Ditto, but use gcc_assert where\n+\tappropriate.  Tweak comments.\n+\t(cris_op_str): Call internal_error, not abort.\n+\t(cris_print_operand): Tweak \"abort\" reference to \"die\" in comment.\n+\t(cris_initial_elimination_offset): Call gcc_unreachable, not abort.\n+\t(cris_notice_update_cc): Call internal_error, not abort.\n+\t(cris_expand_return, cris_expand_prologue, cris_gen_movem_load)\n+\t(cris_emit_movem_store, cris_asm_output_symbol_ref)\n+\t(cris_output_addr_const_extra): Use CRIS_ASSERT, don't call abort.\n+\t(cris_symbol, cris_got_symbol): Use CRIS_ASSERT instead of\n+\tENABLE_CHECKING-guarded abort call.\n+\t(cris_split_movdx): Use CRIS_ASSERT instead of abort with test.\n+\tUse internal_error at end of test-chain.\n+\n 2005-05-13  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR rtl-optimization/20769:"}, {"sha": "81e3ce6fb3961b5fd07910023350aee85256800a", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "patch": "@@ -51,14 +51,10 @@ Boston, MA 02111-1307, USA.  */\n #define ADDITIVE_SIZE_MODIFIER(size) \\\n  ((size) <= 63 ? \"q\" : (size) <= 255 ? \"u.b\" : (size) <= 65535 ? \"u.w\" : \".d\")\n \n-#define ASSERT_PLT_UNSPEC(x)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (XINT (x, 1) != CRIS_UNSPEC_PLT\t\t\t\\\n-\t  || (GET_CODE (XVECEXP (x, 0, 0)) != SYMBOL_REF\t\\\n-\t      && GET_CODE (XVECEXP (x, 0, 0)) != LABEL_REF))\t\\\n-\tabort ();\t\t\t\t\t\t\\\n-    } while (0)\n+#define ASSERT_PLT_UNSPEC(x)\t\t\t\t\t\t\\\n+  CRIS_ASSERT (XINT (x, 1) == CRIS_UNSPEC_PLT\t\t\t\t\\\n+\t       && ((GET_CODE (XVECEXP (x, 0, 0)) == SYMBOL_REF)\t\t\\\n+\t\t   || GET_CODE (XVECEXP (x, 0, 0)) == LABEL_REF))\n \n #define LOSE_AND_RETURN(msgid, x)\t\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -448,7 +444,7 @@ cris_op_str (rtx x)\n \t an operator, for immediate output.  If that ever happens for\n \t MULT, we need to apply TARGET_MUL_BUG in the caller.  Make sure\n \t we notice.  */\n-      abort ();\n+      internal_error (\"MULT case in cris_op_str\");\n       break;\n \n     case DIV:\n@@ -809,7 +805,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n \n     case 'z':\n       /* Const_int: print b for -127 <= x <= 255,\n-\t w for -32768 <= x <= 65535, else abort.  */\n+\t w for -32768 <= x <= 65535, else die.  */\n       if (GET_CODE (x) != CONST_INT\n \t  || INTVAL (x) < -32768 || INTVAL (x) > 65535)\n \tLOSE_AND_RETURN (\"invalid operand for 'z' modifier\", x);\n@@ -1216,7 +1212,7 @@ cris_initial_elimination_offset (int fromreg, int toreg)\n       && toreg == STACK_POINTER_REGNUM)\n     return ap_fp_offset + fp_sp_offset - 4;\n \n-  abort ();\n+  gcc_unreachable ();\n }\n \n /*  This function looks into the pattern to see how this insn affects\n@@ -1480,8 +1476,7 @@ cris_notice_update_cc (rtx exp, rtx insn)\n       break;\n \n     default:\n-      /* Unknown cc_attr value.  */\n-      abort ();\n+      internal_error (\"Unknown cc_attr value\");\n     }\n \n   CC_STATUS_INIT;\n@@ -1533,9 +1528,8 @@ cris_expand_return (bool on_stack)\n      to check that it doesn't change half-way through.  */\n   emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n \n-  if ((cfun->machine->return_type == CRIS_RETINSN_RET && on_stack)\n-      || (cfun->machine->return_type == CRIS_RETINSN_JUMP && !on_stack))\n-    abort ();\n+  CRIS_ASSERT (cfun->machine->return_type != CRIS_RETINSN_RET || !on_stack);\n+  CRIS_ASSERT (cfun->machine->return_type != CRIS_RETINSN_JUMP || on_stack);\n \n   cfun->machine->return_type\n     = on_stack ? CRIS_RETINSN_JUMP : CRIS_RETINSN_RET;\n@@ -1933,10 +1927,7 @@ cris_symbol (rtx x)\n int\n cris_gotless_symbol (rtx x)\n {\n-#ifdef ENABLE_CHECKING\n-  if (!flag_pic)\n-    abort ();\n-#endif\n+  CRIS_ASSERT (flag_pic);\n \n   switch (GET_CODE (x))\n     {\n@@ -1996,10 +1987,7 @@ cris_gotless_symbol (rtx x)\n int\n cris_got_symbol (rtx x)\n {\n-#ifdef ENABLE_CHECKING\n-  if (!flag_pic)\n-    abort ();\n-#endif\n+  CRIS_ASSERT (flag_pic);\n \n   switch (GET_CODE (x))\n     {\n@@ -2320,8 +2308,7 @@ cris_split_movdx (rtx *operands)\n   /* We used to have to handle (SUBREG (MEM)) here, but that should no\n      longer happen; after reload there are no SUBREGs any more, and we're\n      only called after reload.  */\n-  if (GET_CODE (dest) == SUBREG || GET_CODE (src) == SUBREG)\n-    abort ();\n+  CRIS_ASSERT (GET_CODE (dest) != SUBREG && GET_CODE (src) != SUBREG);\n \n   start_sequence ();\n   if (GET_CODE (dest) == REG)\n@@ -2412,7 +2399,7 @@ cris_split_movdx (rtx *operands)\n \t    }\n \t}\n       else\n-\tabort ();\n+\tinternal_error (\"Unknown src\");\n     }\n   /* Reg-to-mem copy or clear mem.  */\n   else if (GET_CODE (dest) == MEM\n@@ -2454,7 +2441,7 @@ cris_split_movdx (rtx *operands)\n     }\n \n   else\n-    abort ();\n+    internal_error (\"Unknown dest\");\n \n   val = get_insns ();\n   end_sequence ();\n@@ -2482,8 +2469,7 @@ cris_expand_prologue (void)\n   if (!TARGET_PROLOGUE_EPILOGUE)\n     return;\n \n-  if (size < 0)\n-    abort ();\n+  CRIS_ASSERT (size >= 0);\n \n   /* Align the size to what's best for the CPU model.  */\n   if (TARGET_STACK_ALIGN)\n@@ -2930,8 +2916,7 @@ cris_gen_movem_load (rtx src, rtx nregs_rtx, int nprefix)\n   if (GET_CODE (srcreg) == POST_INC)\n     srcreg = XEXP (srcreg, 0);\n \n-  if (!REG_P (srcreg))\n-    abort ();\n+  CRIS_ASSERT (REG_P (srcreg));\n \n   /* Don't use movem for just one insn.  The insns are equivalent except\n      for the pipeline hazard (on v32); movem does not forward the loaded\n@@ -2987,8 +2972,7 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n   if (GET_CODE (destreg) == POST_INC || GET_CODE (destreg) == PLUS)\n     destreg = XEXP (destreg, 0);\n \n-  if (!REG_P (destreg))\n-    abort ();\n+  CRIS_ASSERT (REG_P (destreg));\n \n   /* Don't use movem for just one insn.  The insns are equivalent except\n      for the pipeline hazard (on v32); movem does not forward the loaded\n@@ -3129,8 +3113,8 @@ cris_asm_output_symbol_ref (FILE *file, rtx x)\n \t}\n       else if (cris_got_symbol (x))\n \t{\n-\t  if (cris_pic_sympart_only)\n-\t    abort ();\n+\t  CRIS_ASSERT (!cris_pic_sympart_only);\n+\n \t  fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n \t  assemble_name (file, XSTR (x, 0));\n \n@@ -3193,9 +3177,7 @@ cris_output_addr_const_extra (FILE *file, rtx x)\n \t}\n       else\n \t{\n-\t  if (TARGET_AVOID_GOTPLT)\n-\t    /* We shouldn't get here.  */\n-\t    abort ();\n+\t  CRIS_ASSERT (!TARGET_AVOID_GOTPLT);\n \n \t  fprintf (file, \"[$%s+\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n \t  assemble_name (file, XSTR (x, 0));"}, {"sha": "797d42fff1fccbbd0ddc088a1e51be7d86de9e7c", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "patch": "@@ -38,6 +38,11 @@ Boston, MA 02111-1307, USA.  */\n    settings not repeated below.  This file contains general CRIS\n    definitions and definitions for the cris-*-elf subtarget.  */\n \n+/* We don't want to use gcc_assert for everything, as that can be\n+   compiled out.  */\n+#define CRIS_ASSERT(x) \\\n+ do { if (!(x)) internal_error (\"CRIS-port assertion failed: \" #x); } while (0)\n+\n /* Replacement for REG_P since it does not match SUBREGs.  Happens for\n    testcase Axis-20000320 with gcc-2.9x.  */\n #define REG_S_P(x) \\"}, {"sha": "9e6818b5d4b76ab7a76f8059fafc9f046a2b8cc7", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c341293e5c0b4fc017a327bd1c86d06c38e3da/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=b6c341293e5c0b4fc017a327bd1c86d06c38e3da", "patch": "@@ -962,7 +962,6 @@\n     (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n     (match_operand:SI 1 \"cris_general_operand_or_symbol\" \"\"))]\n   \"\"\n-  \"\n {\n   /* If the output goes to a MEM, make sure we have zero or a register as\n      input.  */\n@@ -986,8 +985,7 @@\n \t do, and for the patterns we generate.  */\n       if (! REG_S_P (operands[0]))\n \t{\n-\t  if (no_new_pseudos)\n-\t    abort ();\n+\t  CRIS_ASSERT (!no_new_pseudos);\n \t  operands[1] = force_reg (SImode, operands[1]);\n \t}\n       else\n@@ -1017,18 +1015,18 @@\n \t      rtx sym = get_related_value (operands[1]);\n \t      HOST_WIDE_INT offs = get_integer_term (operands[1]);\n \n-\t      if (sym == NULL_RTX || offs == 0)\n-\t\tabort ();\n+\t      CRIS_ASSERT (sym != NULL_RTX && offs != 0);\n+\n \t      emit_move_insn (operands[0], sym);\n \t      if (expand_binop (SImode, add_optab, operands[0],\n \t\t\t\tGEN_INT (offs), operands[0], 0,\n \t\t\t\tOPTAB_LIB_WIDEN) != operands[0])\n-\t\tabort ();\n+\t        internal_error (\"expand_binop failed in movsi\");\n \t      DONE;\n \t    }\n \t}\n     }\n-}\")\n+})\n \n (define_insn \"*movsi_internal\"\n   [(set\n@@ -1103,8 +1101,7 @@\n \t  /* We clobber cc0 rather than set it to GOT.  Should not\n              matter, though.  */\n \t  CC_STATUS_INIT;\n-\t  if (REGNO (operands[0]) != PIC_OFFSET_TABLE_REGNUM)\n-\t    abort ();\n+\t  CRIS_ASSERT (REGNO (operands[0]) == PIC_OFFSET_TABLE_REGNUM);\n \n \t  return \\\"move.d $pc,%0\\;sub.d .:GOTOFF,%0\\\";\n \t}\n@@ -3931,24 +3928,20 @@\n \t\t    (match_operand 1 \"general_operand\" \"\"))\n \t      (clobber (reg:SI CRIS_SRP_REGNUM))])]\n   \"\"\n-  \"\n {\n   rtx op0;\n \n-  if (GET_CODE (operands[0]) != MEM)\n-    abort ();\n+  gcc_assert (GET_CODE (operands[0]) == MEM);\n \n   if (flag_pic)\n     {\n       op0 = XEXP (operands[0], 0);\n \n       /* It might be that code can be generated that jumps to 0 (or to a\n-\t specific address).  Don't abort on that.  At least there's a\n-\t testcase.  */\n+\t specific address).  Don't die on that.  (There is a testcase.)  */\n       if (CONSTANT_ADDRESS_P (op0) && GET_CODE (op0) != CONST_INT)\n \t{\n-\t  if (no_new_pseudos)\n-\t    abort ();\n+\t  CRIS_ASSERT (!no_new_pseudos);\n \n \t  /* For local symbols (non-PLT), get the plain symbol reference\n \t     into a register.  For symbols that can be PLT, make them PLT.  */\n@@ -3964,12 +3957,12 @@\n \t\t\t\t\t      gen_rtvec (1, op0),\n \t\t\t\t\t      CRIS_UNSPEC_PLT)));\n \t  else\n-\t    abort ();\n+\t    internal_error (\"Unidentifiable op0\");\n \n \t  operands[0] = replace_equiv_address (operands[0], op0);\n \t}\n     }\n-}\")\n+})\n \n ;; Accept *anything* as operand 1.  Accept operands for operand 0 in\n ;; order of preference.\n@@ -3998,24 +3991,20 @@\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:SI CRIS_SRP_REGNUM))])]\n   \"\"\n-  \"\n {\n   rtx op1;\n \n-  if (GET_CODE (operands[1]) != MEM)\n-    abort ();\n+  gcc_assert (GET_CODE (operands[1]) == MEM);\n \n   if (flag_pic)\n     {\n       op1 = XEXP (operands[1], 0);\n \n       /* It might be that code can be generated that jumps to 0 (or to a\n-\t specific address).  Don't abort on that.  At least there's a\n-\t testcase.  */\n+\t specific address).  Don't die on that.  (There is a testcase.)  */\n       if (CONSTANT_ADDRESS_P (op1) && GET_CODE (op1) != CONST_INT)\n \t{\n-\t  if (no_new_pseudos)\n-\t    abort ();\n+\t  CRIS_ASSERT (!no_new_pseudos);\n \n \t  if (cris_gotless_symbol (op1))\n \t    op1 = force_reg (Pmode, op1);\n@@ -4029,12 +4018,12 @@\n \t\t\t\t\t      gen_rtvec (1, op1),\n \t\t\t\t\t      CRIS_UNSPEC_PLT)));\n \t  else\n-\t    abort ();\n+\t    internal_error (\"Unidentifiable op0\");\n \n \t  operands[1] = replace_equiv_address (operands[1], op1);\n \t}\n     }\n-}\")\n+})\n \n ;; Accept *anything* as operand 2.  The validity other than \"general\" of\n ;; operand 0 will be checked elsewhere.  Accept operands for operand 1 in"}]}