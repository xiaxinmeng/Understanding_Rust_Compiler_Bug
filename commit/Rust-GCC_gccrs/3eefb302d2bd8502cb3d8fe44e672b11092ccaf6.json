{"sha": "3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlZmIzMDJkMmJkODUwMmNiM2Q4ZmU0NGU2NzJiMTEwOTJjY2FmNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T13:47:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T13:48:49Z"}, "message": "libstdc++: Enable assertions in constexpr string_view members [PR 71960]\n\nSince GCC 6.1 there is no reason we can't just use __glibcxx_assert in\nconstexpr functions in string_view. As long as the condition is true,\nthere will be no call to std::__replacement_assert that would make the\nfunction ineligible for constant evaluation.\n\n\tPR libstdc++/71960\n\t* include/experimental/string_view (basic_string_view):\n\tEnable debug assertions.\n\t* include/std/string_view (basic_string_view):\n\tLikewise.", "tree": {"sha": "b1aae404bb43060f6de08d52a4cb59b1a4d7e678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1aae404bb43060f6de08d52a4cb59b1a4d7e678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2236c45479e4c01a6ac68547bcdfe3065481df0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2236c45479e4c01a6ac68547bcdfe3065481df0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2236c45479e4c01a6ac68547bcdfe3065481df0f"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "5567184cf0eb86312fe4c47336afdf0f42f1bee8", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "patch": "@@ -179,8 +179,7 @@ inline namespace fundamentals_v1\n       constexpr const _CharT&\n       operator[](size_type __pos) const\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(__pos < this->_M_len);\n+\t__glibcxx_assert(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n@@ -199,16 +198,14 @@ inline namespace fundamentals_v1\n       constexpr const _CharT&\n       front() const\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(this->_M_len > 0);\n+\t__glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n       constexpr const _CharT&\n       back() const\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(this->_M_len > 0);\n+\t__glibcxx_assert(this->_M_len > 0);\n \treturn *(this->_M_str + this->_M_len - 1);\n       }\n "}, {"sha": "f05ff32d9e5f3792c95d31e87a8b088c46cbc103", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefb302d2bd8502cb3d8fe44e672b11092ccaf6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=3eefb302d2bd8502cb3d8fe44e672b11092ccaf6", "patch": "@@ -207,8 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr const_reference\n       operator[](size_type __pos) const noexcept\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(__pos < this->_M_len);\n+\t__glibcxx_assert(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n@@ -225,16 +224,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr const_reference\n       front() const noexcept\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(this->_M_len > 0);\n+\t__glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n       constexpr const_reference\n       back() const noexcept\n       {\n-\t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// __glibcxx_assert(this->_M_len > 0);\n+\t__glibcxx_assert(this->_M_len > 0);\n \treturn *(this->_M_str + this->_M_len - 1);\n       }\n "}]}