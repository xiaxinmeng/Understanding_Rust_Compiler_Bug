{"sha": "b11382213a2e25a0b0ccd70783641b33b6dc51f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExMzgyMjEzYTJlMjVhMGIwY2NkNzA3ODM2NDFiMzNiNmRjNTFmMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-05-05T00:59:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-05-05T00:59:48Z"}, "message": "java-tree.h (uses_jv_markobj_p): Declare.\n\n\t* java-tree.h (uses_jv_markobj_p): Declare.\n\t* class.c (uses_jv_markobj_p): Removed.\n\t* boehm.c (PROCEDURE_OBJECT_DESCRIPTOR): New define.\n\t(get_boehm_type_descriptor): Use it.\n\t(uses_jv_markobj_p): Moved from class.c.  Return bool.\n\nFrom-SVN: r113549", "tree": {"sha": "6ce8f1048cd1d8cac9e29552ec52889a47da2919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce8f1048cd1d8cac9e29552ec52889a47da2919"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b11382213a2e25a0b0ccd70783641b33b6dc51f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11382213a2e25a0b0ccd70783641b33b6dc51f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11382213a2e25a0b0ccd70783641b33b6dc51f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11382213a2e25a0b0ccd70783641b33b6dc51f1/comments", "author": null, "committer": null, "parents": [{"sha": "d31f43306b18932fa4e007dcc45ae4b88165a194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31f43306b18932fa4e007dcc45ae4b88165a194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31f43306b18932fa4e007dcc45ae4b88165a194"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "95a6730b5703f1b09c2f50095a9535abbf51c084", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b11382213a2e25a0b0ccd70783641b33b6dc51f1", "patch": "@@ -1,3 +1,11 @@\n+2006-05-04  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java-tree.h (uses_jv_markobj_p): Declare.\n+\t* class.c (uses_jv_markobj_p): Removed.\n+\t* boehm.c (PROCEDURE_OBJECT_DESCRIPTOR): New define.\n+\t(get_boehm_type_descriptor): Use it.\n+\t(uses_jv_markobj_p): Moved from class.c.  Return bool.\n+\n 2006-05-04  Tom Tromey  <tromey@redhat.com>\n \n \t* java-tree.def (THIS_EXPR): Now a tcc_expression."}, {"sha": "cc6e69e45dd77bdd4729efa078354cbf75ce57c2", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=b11382213a2e25a0b0ccd70783641b33b6dc51f1", "patch": "@@ -40,6 +40,14 @@ static void mark_reference_fields (tree, unsigned HOST_WIDE_INT *,\n static void set_bit (unsigned HOST_WIDE_INT *, unsigned HOST_WIDE_INT *,\n \t\t     unsigned int);\n \n+/* A procedure-based object descriptor.  We know that our\n+   `kind' is 0, and `env' is likewise 0, so we have a simple\n+   computation.  From the GC sources:\n+   (((((env) << LOG_MAX_MARK_PROCS) | (proc_index)) << DS_TAG_BITS)\t\\\n+   | DS_PROC)\n+   Here DS_PROC == 2.  */\n+#define PROCEDURE_OBJECT_DESCRIPTOR 2\n+\n /* Treat two HOST_WIDE_INT's as a contiguous bitmap, with bit 0 being\n    the least significant.  This function sets bit N in the bitmap.  */\n static void\n@@ -220,15 +228,25 @@ get_boehm_type_descriptor (tree type)\n     }\n   else\n     {\n-      /* Compute a procedure-based object descriptor.  We know that our\n-\t `kind' is 0, and `env' is likewise 0, so we have a simple\n-\t computation.  From the GC sources:\n-\t    (((((env) << LOG_MAX_MARK_PROCS) | (proc_index)) << DS_TAG_BITS) \\\n-\t    | DS_PROC)\n-\t Here DS_PROC == 2.  */\n     procedure_object_descriptor:\n-      value = build_int_cst (value_type, 2);\n+      value = build_int_cst (value_type, PROCEDURE_OBJECT_DESCRIPTOR);\n     }\n \n   return value;\n }\n+\n+/* The fourth (index of 3) element in the vtable is the GC descriptor.\n+   A value of 2 indicates that the class uses _Jv_MarkObj. */\n+bool\n+uses_jv_markobj_p (tree dtable)\n+{\n+  tree v;\n+  /* FIXME: what do we return if !flag_use_boehm_gc ? */\n+  gcc_assert (flag_use_boehm_gc);\n+  /* FIXME: this is wrong if TARGET_VTABLE_USES_DESCRIPTORS.  However,\n+     this function is only used with flag_reduced_reflection.  No\n+     point in asserting unless we hit the bad case.  */\n+  gcc_assert (!flag_reduced_reflection || TARGET_VTABLE_USES_DESCRIPTORS == 0);\n+  v = VEC_index (constructor_elt, CONSTRUCTOR_ELTS (dtable), 3)->value;\n+  return (PROCEDURE_OBJECT_DESCRIPTOR == TREE_INT_CST_LOW (v));\n+}"}, {"sha": "05c9944257a8d5b1934d2a399fbcb86ff6610e16", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=b11382213a2e25a0b0ccd70783641b33b6dc51f1", "patch": "@@ -1611,16 +1611,6 @@ supers_all_compiled (tree type)\n   return 1;\n }\n \n-/* The forth (index of 3) element in the vtable is the GC descriptor.\n-   A value of 2 indicates that the class uses _Jv_MarkObj. */\n-static int\n-uses_jv_markobj_p(tree dtable)\n-{\n-  tree v;\n-  v = VEC_index (constructor_elt, CONSTRUCTOR_ELTS (dtable), 3)->value;\n-  return (2 == TREE_INT_CST_LOW (v));\n-}\n-\n void\n make_class_data (tree type)\n {\n@@ -1659,7 +1649,7 @@ make_class_data (tree type)\n       && !flag_indirect_dispatch)\n     {\n       tree dtable = get_dispatch_table (type, this_class_addr);\n-      uses_jv_markobj = uses_jv_markobj_p(dtable);\n+      uses_jv_markobj = uses_jv_markobj_p (dtable);\n       dtable_decl = build_dtable_decl (type);\n       DECL_INITIAL (dtable_decl) = dtable;\n       TREE_STATIC (dtable_decl) = 1;"}, {"sha": "c26e1e7c97eb3d3b3e71990f2ea85aba5b30fdcd", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11382213a2e25a0b0ccd70783641b33b6dc51f1/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b11382213a2e25a0b0ccd70783641b33b6dc51f1", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for parsing and type checking for the GNU compiler for\n    the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1358,6 +1358,7 @@ extern void java_debug_context (void);\n extern void safe_layout_class (tree);\n \n extern tree get_boehm_type_descriptor (tree);\n+extern bool uses_jv_markobj_p (tree);\n extern bool class_has_finalize_method (tree);\n extern void java_check_methods (tree);\n extern void init_jcf_parse (void);"}]}