{"sha": "cd48e550d1dc58307ab1c0ab490745673f748ccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0OGU1NTBkMWRjNTgzMDdhYjFjMGFiNDkwNzQ1NjczZjc0OGNjYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-11T20:21:34Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-05T19:44:14Z"}, "message": "Allow match-and-simplified phiopt to run in early phiopt\n\nTo move a few things more to match-and-simplify from phiopt,\nwe need to allow match_simplify_replacement to run in early\nphiopt. To do this we add a replacement for gimple_simplify\nthat is explictly for phiopt.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no\nregressions.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.c (match_simplify_replacement):\n\tAdd early_p argument. Call gimple_simplify_phiopt\n\tinstead of gimple_simplify.\n\t(tree_ssa_phiopt_worker): Update call to\n\tmatch_simplify_replacement and allow unconditionally.\n\t(phiopt_early_allow): New function.\n\t(gimple_simplify_phiopt): New function.", "tree": {"sha": "3cc79c19b9c2703ad8557d38a66c53d010fe6e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc79c19b9c2703ad8557d38a66c53d010fe6e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd48e550d1dc58307ab1c0ab490745673f748ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd48e550d1dc58307ab1c0ab490745673f748ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd48e550d1dc58307ab1c0ab490745673f748ccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd48e550d1dc58307ab1c0ab490745673f748ccc/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c44b412fec8d5ab7fc064065414314a8ae05c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c44b412fec8d5ab7fc064065414314a8ae05c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c44b412fec8d5ab7fc064065414314a8ae05c87"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "17bc597851be267d00a494d6c7c3507368a2c460", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd48e550d1dc58307ab1c0ab490745673f748ccc/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd48e550d1dc58307ab1c0ab490745673f748ccc/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=cd48e550d1dc58307ab1c0ab490745673f748ccc", "patch": "@@ -50,12 +50,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"internal-fn.h\"\n #include \"gimple-range.h\"\n+#include \"gimple-match.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n \t\t\t\t   tree, tree);\n static bool match_simplify_replacement (basic_block, basic_block,\n-\t\t\t\t\tedge, edge, gphi *, tree, tree);\n+\t\t\t\t\tedge, edge, gphi *, tree, tree, bool);\n static gphi *factor_out_conditional_conversion (edge, edge, gphi *, tree, tree,\n \t\t\t\t\t\tgimple *);\n static int value_replacement (basic_block, basic_block,\n@@ -345,9 +346,9 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \t  /* Do the replacement of conditional if it can be done.  */\n \t  if (!early_p && two_value_replacement (bb, bb1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n-\t  else if (!early_p\n-\t\t   && match_simplify_replacement (bb, bb1, e1, e2, phi,\n-\t\t\t\t\t\t  arg0, arg1))\n+\t  else if (match_simplify_replacement (bb, bb1, e1, e2, phi,\n+\t\t\t\t\t       arg0, arg1,\n+\t\t\t\t\t       early_p))\n \t    cfgchanged = true;\n \t  else if (abs_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n@@ -811,6 +812,67 @@ two_value_replacement (basic_block cond_bb, basic_block middle_bb,\n   return true;\n }\n \n+/* Return TRUE if CODE should be allowed during early phiopt.\n+   Currently this is to allow MIN/MAX and ABS/NEGATE.  */\n+static bool\n+phiopt_early_allow (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+      case MIN_EXPR:\n+      case MAX_EXPR:\n+      case ABS_EXPR:\n+      case ABSU_EXPR:\n+      case NEGATE_EXPR:\n+      case SSA_NAME:\n+\treturn true;\n+      default:\n+\treturn false;\n+    }\n+}\n+\n+/* gimple_simplify_phiopt is like gimple_simplify but designed for PHIOPT.\n+   Return NULL if nothing can be simplified or the resulting simplified value\n+   with parts pushed if EARLY_P was true. Also rejects non allowed tree code\n+   if EARLY_P is set.\n+   Takes the comparison from COMP_STMT and two args, ARG0 and ARG1 and tries\n+   to simplify CMP ? ARG0 : ARG1.  */\n+static tree\n+gimple_simplify_phiopt (bool early_p, tree type, gimple *comp_stmt,\n+\t\t\ttree arg0, tree arg1,\n+\t\t\tgimple_seq *seq)\n+{\n+  tree result;\n+  enum tree_code comp_code = gimple_cond_code (comp_stmt);\n+  location_t loc = gimple_location (comp_stmt);\n+  tree cmp0 = gimple_cond_lhs (comp_stmt);\n+  tree cmp1 = gimple_cond_rhs (comp_stmt);\n+  /* To handle special cases like floating point comparison, it is easier and\n+     less error-prone to build a tree and gimplify it on the fly though it is\n+     less efficient.\n+     Don't use fold_build2 here as that might create (bool)a instead of just\n+     \"a != 0\".  */\n+  tree cond = build2_loc (loc, comp_code, boolean_type_node,\n+\t\t\t  cmp0, cmp1);\n+  gimple_match_op op (gimple_match_cond::UNCOND,\n+\t\t      COND_EXPR, type, cond, arg0, arg1);\n+\n+  if (op.resimplify (early_p ? NULL : seq, follow_all_ssa_edges))\n+    {\n+      /* Early we want only to allow some generated tree codes. */\n+      if (!early_p\n+\t  || op.code.is_tree_code ()\n+\t  || phiopt_early_allow ((tree_code)op.code))\n+\t{\n+\t  result = maybe_push_res_to_seq (&op, seq);\n+\t  if (result)\n+\t    return result;\n+\t}\n+    }\n+\n+  return NULL;\n+}\n+\n /*  The function match_simplify_replacement does the main work of doing the\n     replacement using match and simplify.  Return true if the replacement is done.\n     Otherwise return false.\n@@ -820,10 +882,9 @@ two_value_replacement (basic_block cond_bb, basic_block middle_bb,\n static bool\n match_simplify_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t\t    edge e0, edge e1, gphi *phi,\n-\t\t\t    tree arg0, tree arg1)\n+\t\t\t    tree arg0, tree arg1, bool early_p)\n {\n   gimple *stmt;\n-  tree cond;\n   gimple_stmt_iterator gsi;\n   edge true_edge, false_edge;\n   gimple_seq seq = NULL;\n@@ -884,26 +945,16 @@ match_simplify_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   stmt = last_stmt (cond_bb);\n \n-  /* To handle special cases like floating point comparison, it is easier and\n-     less error-prone to build a tree and gimplify it on the fly though it is\n-     less efficient.\n-     Don't use fold_build2 here as that might create (bool)a instead of just\n-     \"a != 0\".  */\n-  cond = build2_loc (gimple_location (stmt),\n-\t\t     gimple_cond_code (stmt), boolean_type_node,\n-\t\t     gimple_cond_lhs (stmt), gimple_cond_rhs (stmt));\n-\n   /* We need to know which is the true edge and which is the false\n      edge so that we know when to invert the condition below.  */\n   extract_true_false_edges_from_block (cond_bb, &true_edge, &false_edge);\n   if (e1 == true_edge || e0 == false_edge)\n     std::swap (arg0, arg1);\n \n   tree type = TREE_TYPE (gimple_phi_result (phi));\n-  result = gimple_simplify (COND_EXPR, type,\n-\t\t\t    cond,\n-\t\t\t    arg0, arg1,\n-\t\t\t    &seq, NULL);\n+  result = gimple_simplify_phiopt (early_p, type, stmt,\n+\t\t\t\t   arg0, arg1,\n+\t\t\t\t   &seq);\n   if (!result)\n     return false;\n "}]}