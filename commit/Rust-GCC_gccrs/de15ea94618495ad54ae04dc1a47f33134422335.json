{"sha": "de15ea94618495ad54ae04dc1a47f33134422335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxNWVhOTQ2MTg0OTVhZDU0YWUwNGRjMWE0N2YzMzEzNDQyMjMzNQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-03-16T17:43:41Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-03-16T17:43:41Z"}, "message": "re PR libfortran/47883 (libgfortran configuration should use AC_LINK_IFELSE instead of AC_TRY_LINK)\n\n\tPR libfortran/47883\n\t* acinclude.m4: Don't use AC_TRY_ macros.\n\t* configure.ac: Likewise.\n\t* configure: Regenerate.\n\nFrom-SVN: r171056", "tree": {"sha": "8c0b98e69bbab7e8194a9de3a259a31660aa7d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c0b98e69bbab7e8194a9de3a259a31660aa7d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de15ea94618495ad54ae04dc1a47f33134422335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de15ea94618495ad54ae04dc1a47f33134422335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de15ea94618495ad54ae04dc1a47f33134422335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de15ea94618495ad54ae04dc1a47f33134422335/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6261ab0ee61da61460b541fd877d741f3b8dbd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6261ab0ee61da61460b541fd877d741f3b8dbd05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6261ab0ee61da61460b541fd877d741f3b8dbd05"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "9723efe21ee45cf9e29185dfdb04a3067cc61f94", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=de15ea94618495ad54ae04dc1a47f33134422335", "patch": "@@ -1,3 +1,10 @@\n+2011-03-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47883\n+\t* acinclude.m4: Don't use AC_TRY_ macros.\n+\t* configure.ac: Likewise.\n+\t* configure: Regenerate.\n+\n 2011-03-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/48066"}, {"sha": "acd1d4dc81e605072bbe72c73a14cc75fedac43a", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=de15ea94618495ad54ae04dc1a47f33134422335", "patch": "@@ -33,9 +33,9 @@ AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY], [\n \t\t libgfor_cv_have_attribute_visibility, [\n   save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -Werror\"\n-  AC_TRY_COMPILE([void __attribute__((visibility(\"hidden\"))) foo(void) { }],\n-\t\t [], libgfor_cv_have_attribute_visibility=yes,\n-\t\t libgfor_cv_have_attribute_visibility=no)\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[void __attribute__((visibility(\"hidden\"))) foo(void) { }]], [])],\n+\t\t    libgfor_cv_have_attribute_visibility=yes,\n+\t\t    libgfor_cv_have_attribute_visibility=no)\n   CFLAGS=\"$save_CFLAGS\"])\n   if test $libgfor_cv_have_attribute_visibility = yes; then\n     AC_DEFINE(HAVE_ATTRIBUTE_VISIBILITY, 1,\n@@ -48,9 +48,9 @@ AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_DLLEXPORT], [\n \t\t libgfor_cv_have_attribute_dllexport, [\n   save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -Werror\"\n-  AC_TRY_COMPILE([void __attribute__((dllexport)) foo(void) { }],\n-\t\t [], libgfor_cv_have_attribute_dllexport=yes,\n-\t\t libgfor_cv_have_attribute_dllexport=no)\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[void __attribute__((dllexport)) foo(void) { }]], [])],\n+\t\t    libgfor_cv_have_attribute_dllexport=yes,\n+\t\t    libgfor_cv_have_attribute_dllexport=no)\n   CFLAGS=\"$save_CFLAGS\"])\n   if test $libgfor_cv_have_attribute_dllexport = yes; then\n     AC_DEFINE(HAVE_ATTRIBUTE_DLLEXPORT, 1,\n@@ -61,10 +61,10 @@ dnl Check whether the target supports symbol aliases.\n AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_ALIAS], [\n   AC_CACHE_CHECK([whether the target supports symbol aliases],\n \t\t libgfor_cv_have_attribute_alias, [\n-  AC_TRY_LINK([\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n void foo(void) { }\n-extern void bar(void) __attribute__((alias(\"foo\")));],\n-    [bar();], libgfor_cv_have_attribute_alias=yes, libgfor_cv_have_attribute_alias=no)])\n+extern void bar(void) __attribute__((alias(\"foo\")));]],\n+    [[bar();]])], libgfor_cv_have_attribute_alias=yes, libgfor_cv_have_attribute_alias=no)])\n   if test $libgfor_cv_have_attribute_alias = yes; then\n     AC_DEFINE(HAVE_ATTRIBUTE_ALIAS, 1,\n       [Define to 1 if the target supports __attribute__((alias(...))).])\n@@ -74,9 +74,9 @@ dnl Check whether the target supports __sync_fetch_and_add.\n AC_DEFUN([LIBGFOR_CHECK_SYNC_FETCH_AND_ADD], [\n   AC_CACHE_CHECK([whether the target supports __sync_fetch_and_add],\n \t\t libgfor_cv_have_sync_fetch_and_add, [\n-  AC_TRY_LINK([int foovar = 0;], [\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[int foovar = 0;]], [[\n if (foovar <= 0) return __sync_fetch_and_add (&foovar, 1);\n-if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);],\n+if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);]])],\n \t      libgfor_cv_have_sync_fetch_and_add=yes, libgfor_cv_have_sync_fetch_and_add=no)])\n   if test $libgfor_cv_have_sync_fetch_and_add = yes; then\n     AC_DEFINE(HAVE_SYNC_FETCH_AND_ADD, 1,\n@@ -100,9 +100,11 @@ AC_DEFUN([LIBGFOR_GTHREAD_WEAK], [\n \t\t libgfor_cv_have_pragma_weak, [\n   gfor_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n-  AC_TRY_COMPILE([void foo (void);\n-#pragma weak foo], [if (foo) foo ();],\n-\t\t libgfor_cv_have_pragma_weak=yes, libgfor_cv_have_pragma_weak=no)])\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+void foo (void);\n+#pragma weak foo\n+]], [[if (foo) foo ();]])],\n+\t\t    libgfor_cv_have_pragma_weak=yes, libgfor_cv_have_pragma_weak=no)])\n   if test $libgfor_cv_have_pragma_weak = yes; then\n     AC_DEFINE(SUPPORTS_WEAK, 1,\n \t      [Define to 1 if the target supports #pragma weak])\n@@ -118,7 +120,7 @@ dnl Check whether target can unlink a file still open.\n AC_DEFUN([LIBGFOR_CHECK_UNLINK_OPEN_FILE], [\n   AC_CACHE_CHECK([whether the target can unlink an open file],\n                   libgfor_cv_have_unlink_open_file, [\n-  AC_TRY_RUN([\n+  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n #include <errno.h>\n #include <fcntl.h>\n #include <unistd.h>\n@@ -140,7 +142,7 @@ int main ()\n     return 0;\n   else\n     return 1;\n-}], libgfor_cv_have_unlink_open_file=yes, libgfor_cv_have_unlink_open_file=no, [\n+}]])], libgfor_cv_have_unlink_open_file=yes, libgfor_cv_have_unlink_open_file=no, [\n case \"${target}\" in\n   *mingw*) libgfor_cv_have_unlink_open_file=no ;;\n   *) libgfor_cv_have_unlink_open_file=yes;;\n@@ -153,7 +155,7 @@ dnl Check whether CRLF is the line terminator\n AC_DEFUN([LIBGFOR_CHECK_CRLF], [\n   AC_CACHE_CHECK([whether the target has CRLF as line terminator],\n                   libgfor_cv_have_crlf, [\n-  AC_TRY_RUN([\n+  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n /* This test program should exit with status 0 if system uses a CRLF as\n    line terminator, and status 1 otherwise.  \n    Since it is used to check for mingw systems, and should return 0 in any\n@@ -187,7 +189,7 @@ int main ()\n   else\n     exit(1);\n #endif\n-}], libgfor_cv_have_crlf=yes, libgfor_cv_have_crlf=no, [\n+}]])], libgfor_cv_have_crlf=yes, libgfor_cv_have_crlf=no, [\n case \"${target}\" in\n   *mingw*) libgfor_cv_have_crlf=yes ;;\n   *) libgfor_cv_have_crlf=no;;\n@@ -202,7 +204,7 @@ dnl systems; it is known to be false on mingw32.\n AC_DEFUN([LIBGFOR_CHECK_WORKING_STAT], [\n   AC_CACHE_CHECK([whether the target stat is reliable],\n                   libgfor_cv_have_working_stat, [\n-  AC_TRY_RUN([\n+  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n #include <stdio.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n@@ -222,7 +224,7 @@ int main ()\n   fclose(f);\n   fclose(g);\n   return 0;\n-}], libgfor_cv_have_working_stat=yes, libgfor_cv_have_working_stat=no, [\n+}]])], libgfor_cv_have_working_stat=yes, libgfor_cv_have_working_stat=no, [\n case \"${target}\" in\n   *mingw*) libgfor_cv_have_working_stat=no ;;\n   *) libgfor_cv_have_working_stat=yes;;\n@@ -234,13 +236,13 @@ fi])\n dnl Checks for fpsetmask function.\n AC_DEFUN([LIBGFOR_CHECK_FPSETMASK], [\n   AC_CACHE_CHECK([whether fpsetmask is present], libgfor_cv_have_fpsetmask, [\n-    AC_TRY_LINK([\n+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n #if HAVE_FLOATINGPOINT_H\n # include <floatingpoint.h>\n #endif /* HAVE_FLOATINGPOINT_H */\n #if HAVE_IEEEFP_H\n # include <ieeefp.h>\n-#endif /* HAVE_IEEEFP_H */],[fpsetmask(0);],\n+#endif /* HAVE_IEEEFP_H */]],[[fpsetmask(0);]])],\n     eval \"libgfor_cv_have_fpsetmask=yes\", eval \"libgfor_cv_have_fpsetmask=no\")\n   ])\n   if test x\"$libgfor_cv_have_fpsetmask\" = xyes; then\n@@ -252,12 +254,12 @@ AC_DEFUN([LIBGFOR_CHECK_FPSETMASK], [\n dnl Check whether we have a mingw that provides a __mingw_snprintf function\n AC_DEFUN([LIBGFOR_CHECK_MINGW_SNPRINTF], [\n   AC_CACHE_CHECK([whether __mingw_snprintf is present], libgfor_cv_have_mingw_snprintf, [\n-    AC_TRY_LINK([\n+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n #include <stdio.h>\n extern int __mingw_snprintf (char *, size_t, const char *, ...);\n-],[\n+]],[[\n __mingw_snprintf (NULL, 0, \"%d\\n\", 1);\n-],\n+]])],\n     eval \"libgfor_cv_have_mingw_snprintf=yes\", eval \"libgfor_cv_have_mingw_snprintf=no\")\n   ])\n   if test x\"$libgfor_cv_have_mingw_snprintf\" = xyes; then"}, {"sha": "6c20f5e0953b34f580bc8c3914f93951c5945375", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=de15ea94618495ad54ae04dc1a47f33134422335", "patch": "@@ -25662,8 +25662,10 @@ else\n   CFLAGS=\"$CFLAGS -Wunknown-pragmas\"\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n+\n void foo (void);\n #pragma weak foo\n+\n int\n main ()\n {"}, {"sha": "522d5ac3821c0d35ef0bd8a32bfc6f16a2dba1a5", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de15ea94618495ad54ae04dc1a47f33134422335/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=de15ea94618495ad54ae04dc1a47f33134422335", "patch": "@@ -151,7 +151,7 @@ FOO_1.0 {\n   global: *foo*; bar; local: *;\n };\n EOF\n-AC_TRY_LINK([int foo;],[],[gfortran_use_symver=gnu],[gfortran_use_symver=no])\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[int foo;]],[[]])],[gfortran_use_symver=gnu],[gfortran_use_symver=no])\n if test x$gfortran_use_symver = xno; then\n   case \"$target_os\" in\n     solaris2*)\n@@ -163,7 +163,7 @@ FOO_1.0 {\n   global: foo; local: *;\n };\n EOF\n-      AC_TRY_LINK([int foo;],[],[gfortran_use_symver=sun],[gfortran_use_symver=no])\n+      AC_LINK_IFELSE([AC_LANG_PROGRAM([[int foo;]],[[]])],[gfortran_use_symver=sun],[gfortran_use_symver=no])\n       ;;\n   esac\n fi\n@@ -181,7 +181,7 @@ ac_save_CFLAGS=\"$CFLAGS\"\n # Check for -ffunction-sections -fdata-sections\n AC_MSG_CHECKING([for gcc that supports -ffunction-sections -fdata-sections])\n CFLAGS='-Werror -ffunction-sections -fdata-sections'\n-AC_TRY_COMPILE(, [int foo;], [ac_fdsections=yes], [ac_fdsections=no])\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[int foo;]])], [ac_fdsections=yes], [ac_fdsections=no])\n if test \"$ac_test_CFLAGS\" = set; then\n   CFLAGS=\"$ac_save_CFLAGS\"\n else"}]}