{"sha": "bf419747e917f86ff61845ed136d5ec2386b4a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MTk3NDdlOTE3Zjg2ZmY2MTg0NWVkMTM2ZDVlYzIzODZiNGE4Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-23T18:40:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-23T18:40:20Z"}, "message": "cp-tree.h (register_dtor_fn): New function.\n\n\t* cp-tree.h (register_dtor_fn): New function.\n\t* decl.c (destroy_local_static): Rename to ...\n\t(register_dtor_fn): ... this.  Give it external linkage.\n\t(expand_static_init): Use it.\n\t* decl2.c (do_static_initialization): Likewise, if using\n\t__cxa_atexit.\n\t(do_static_destruction): Check that __cxa_atexit is not in use.\n\t(finish_file): Don't call do_static_destruction if using\n\t__cxa_atexit.\n\n\t* typeck.c (convert_arguments): Restore two-message error\n\treporting.\n\nFrom-SVN: r31570", "tree": {"sha": "90d64c7e911431e3eb2ef805a502b9b6dff47c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90d64c7e911431e3eb2ef805a502b9b6dff47c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf419747e917f86ff61845ed136d5ec2386b4a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf419747e917f86ff61845ed136d5ec2386b4a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf419747e917f86ff61845ed136d5ec2386b4a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf419747e917f86ff61845ed136d5ec2386b4a8f/comments", "author": null, "committer": null, "parents": [{"sha": "5c75f60e28199fbd26221017d83b6a7750403089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c75f60e28199fbd26221017d83b6a7750403089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c75f60e28199fbd26221017d83b6a7750403089"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "88a7a2c038a67caa64c064a50e17bcaae8fdfe35", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf419747e917f86ff61845ed136d5ec2386b4a8f", "patch": "@@ -1,3 +1,18 @@\n+2000-01-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (register_dtor_fn): New function.\n+\t* decl.c (destroy_local_static): Rename to ...\n+\t(register_dtor_fn): ... this.  Give it external linkage.\n+\t(expand_static_init): Use it.\n+\t* decl2.c (do_static_initialization): Likewise, if using\n+\t__cxa_atexit.\n+\t(do_static_destruction): Check that __cxa_atexit is not in use.\n+\t(finish_file): Don't call do_static_destruction if using\n+\t__cxa_atexit.\n+\n+\t* typeck.c (convert_arguments): Restore two-message error\n+\treporting.\n+\t\n 2000-01-20  Nathan Sidwell  <sidwell@codesourcery.com>\n \n \tRemap dynamic cast hint values to be consistent across ABIs."}, {"sha": "a2e7aca1a25edebbdb0c53fc3fb5d232570aca26", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bf419747e917f86ff61845ed136d5ec2386b4a8f", "patch": "@@ -3680,6 +3680,7 @@ extern void make_rtl_for_local_static           PROTO((tree));\n extern int local_variable_p                     PROTO((tree));\n extern int nonstatic_local_decl_p               PROTO((tree));\n extern tree declare_global_var                  PROTO((tree, tree));\n+extern void register_dtor_fn                    PROTO((tree));\n \n /* in decl2.c */\n extern void init_decl2\t\t\t\tPROTO((void));"}, {"sha": "2471090b30fbf01a0c2e17425587126b3aba5bb6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bf419747e917f86ff61845ed136d5ec2386b4a8f", "patch": "@@ -173,7 +173,6 @@ static void mark_lang_function PROTO((struct language_function *));\n static void mark_stmt_tree PROTO((struct stmt_tree *));\n static void save_function_data PROTO((tree));\n static void check_function_type PROTO((tree));\n-static void destroy_local_static PROTO((tree));\n static void destroy_local_var PROTO((tree));\n static void finish_constructor_body PROTO((void));\n static void finish_destructor_body PROTO((void));\n@@ -8054,11 +8053,11 @@ end_cleanup_fn ()\n   pop_from_top_level ();\n }\n \n-/* Generate code to handle the destruction of the function-scoped\n-   static variable DECL.  */\n+/* Generate code to handle the destruction of DECL, an object with\n+   static storage duration.  */\n \n-static void\n-destroy_local_static (decl)\n+void\n+register_dtor_fn (decl)\n      tree decl;\n {\n   tree cleanup;\n@@ -8068,6 +8067,9 @@ destroy_local_static (decl)\n \n   int saved_flag_access_control;\n \n+  if (!TYPE_NEEDS_DESTRUCTOR (TREE_TYPE (decl)))\n+    return;\n+\n   /* Call build_cleanup before we enter the anonymous function so that\n      any access checks will be done relative to the current scope,\n      rather than the scope of the anonymous function.  */\n@@ -8193,8 +8195,7 @@ expand_static_init (decl, init)\n \n       /* Use atexit to register a function for destroying this static\n \t variable.  */\n-      if (TYPE_NEEDS_DESTRUCTOR (TREE_TYPE (decl)))\n-\tdestroy_local_static (decl);\n+      register_dtor_fn (decl);\n \n       finish_compound_stmt (/*has_no_scope=*/0, then_clause);\n       finish_then_clause (if_stmt);"}, {"sha": "bf0f07e07aed1704064ca55b84f8453995228f9f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=bf419747e917f86ff61845ed136d5ec2386b4a8f", "patch": "@@ -3204,6 +3204,11 @@ do_static_initialization (decl, init)\n     }\n   finish_expr_stmt (expr);\n \n+  /* If we're using __cxa_atexit, register a a function that calls the\n+     destructor for the object.  */\n+  if (flag_use_cxa_atexit)\n+    register_dtor_fn (decl);\n+\n   /* Finsh up.  */\n   finish_static_initialization_or_destruction (sentry_if_stmt);\n }\n@@ -3219,10 +3224,14 @@ do_static_destruction (decl)\n {\n   tree sentry_if_stmt;\n \n+  /* If we're using __cxa_atexit, then destructors are registered\n+     immediately after objects are initialized.  */\n+  my_friendly_assert (!flag_use_cxa_atexit, 20000121);\n+\n   /* If we don't need a destructor, there's nothing to do.  */\n   if (!TYPE_NEEDS_DESTRUCTOR (TREE_TYPE (decl)))\n     return;\n-    \n+\n   /* Actually do the destruction.  */\n   sentry_if_stmt = start_static_initialization_or_destruction (decl,\n \t\t\t\t\t\t\t       /*initp=*/0);\n@@ -3468,10 +3477,18 @@ finish_file ()\n \n \t  /* Then, generate code to do all the destructions.  Do these\n \t     in reverse order so that the most recently constructed\n-\t     variable is the first destroyed.  */\n-\t  vars = nreverse (vars);\n-\t  for (v = vars; v; v = TREE_CHAIN (v))\n-\t    do_static_destruction (TREE_VALUE (v));\n+\t     variable is the first destroyed.  If we're using\n+\t     __cxa_atexit, then we don't need to do this; functions\n+\t     we're registered at initialization time to destroy the\n+\t     local statics.  */\n+\t  if (!flag_use_cxa_atexit)\n+\t    {\n+\t      vars = nreverse (vars);\n+\t      for (v = vars; v; v = TREE_CHAIN (v))\n+\t\tdo_static_destruction (TREE_VALUE (v));\n+\t    }\n+\t  else\n+\t    vars = NULL_TREE;\n \n \t  /* Finish up the static storage duration function for this\n \t     round.  */"}, {"sha": "2a4a668b906056463940b137e398cf0fe40ce755", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf419747e917f86ff61845ed136d5ec2386b4a8f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bf419747e917f86ff61845ed136d5ec2386b4a8f", "patch": "@@ -3120,8 +3120,11 @@ convert_arguments (typelist, values, fndecl, flags)\n       if (type == void_type_node)\n \t{\n \t  if (fndecl)\n-            cp_error_at (\"too many arguments to %s `%+#D' at this point\",\n-                         called_thing, fndecl);\n+\t    {\n+\t      cp_error_at (\"too many arguments to %s `%+#D'\", called_thing,\n+\t\t\t   fndecl);\n+\t      error (\"at this point in file\");\n+\t    }\n \t  else\n \t    error (\"too many arguments to function\");\n \t  /* In case anybody wants to know if this argument\n@@ -3219,8 +3222,11 @@ convert_arguments (typelist, values, fndecl, flags)\n       else\n \t{\n \t  if (fndecl)\n-            cp_error_at (\"too few arguments to %s `%+#D' at this point\",\n-                         called_thing, fndecl);\n+\t    {\n+\t      cp_error_at (\"too few arguments to %s `%+#D'\",\n+\t                   called_thing, fndecl);\n+\t      error (\"at this point in file\");\n+\t    }\n \t  else\n \t    error (\"too few arguments to function\");\n \t  return error_mark_list;"}]}