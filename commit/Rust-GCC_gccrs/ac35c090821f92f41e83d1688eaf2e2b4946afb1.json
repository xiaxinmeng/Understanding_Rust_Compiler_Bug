{"sha": "ac35c090821f92f41e83d1688eaf2e2b4946afb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzNWMwOTA4MjFmOTJmNDFlODNkMTY4OGVhZjJlMmI0OTQ2YWZiMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-12T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-12T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "7caa9814f802f22049b5a5289db9af58747c09bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7caa9814f802f22049b5a5289db9af58747c09bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac35c090821f92f41e83d1688eaf2e2b4946afb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac35c090821f92f41e83d1688eaf2e2b4946afb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac35c090821f92f41e83d1688eaf2e2b4946afb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac35c090821f92f41e83d1688eaf2e2b4946afb1/comments", "author": null, "committer": null, "parents": [{"sha": "e73f586c93b219eac15b29c9536c18fac634790b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73f586c93b219eac15b29c9536c18fac634790b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73f586c93b219eac15b29c9536c18fac634790b"}], "stats": {"total": 398, "additions": 397, "deletions": 1}, "files": [{"sha": "1120143fa76ef6882b21784dab4b269210cdbfdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,86 @@\n+2020-09-11  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_maybe_emit_maxc_minc): Rename\n+\tfrom rs6000_emit_p9_fp_minmax.  Change return type to bool.  Add\n+\tcomments to document NaN/signed zero behavior.\n+\t(rs6000_maybe_emit_fp_cmove): Rename from rs6000_emit_p9_fp_cmove.\n+\t(have_compare_and_set_mask): New helper function.\n+\t(rs6000_emit_cmove): Update calls to new names and the new helper\n+\tfunction.\n+\n+2020-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/i386/sse.md (mov<mode>): Fix operand indices.\n+\n+2020-09-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96903\n+\t* builtins.c (compute_objsize): Remove incorrect offset adjustment.\n+\t(compute_objsize): Adjust offset range here instead.\n+\n+2020-09-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97020\n+\t* tree-vect-slp.c (vect_slp_analyze_operations): Apply\n+\tSLP costs when doing loop vectorization.\n+\n+2020-09-11  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96964\n+\t* config/nvptx/nvptx.md (define_expand \"atomic_test_and_set\"): New\n+\texpansion.\n+\n+2020-09-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_hard_regno_mode_ok): Align TImode registers.\n+\t* config/gcn/gcn.md: Assert that TImode registers do not early clobber.\n+\n+2020-09-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_slp_instance::location): New method.\n+\t(vect_schedule_slp): Adjust prototype.\n+\t* tree-vectorizer.c (vec_info::remove_stmt): Adjust\n+\tthe BB region begin if we removed the stmt it points to.\n+\t* tree-vect-loop.c (vect_transform_loop): Adjust.\n+\t* tree-vect-slp.c (_slp_instance::location): Implement.\n+\t(vect_analyze_slp_instance): For BB vectorization set\n+\tvect_location to that of the instance.\n+\t(vect_slp_analyze_operations): Likewise.\n+\t(vect_bb_vectorization_profitable_p): Remove wrapper.\n+\t(vect_slp_analyze_bb_1): Remove cost check here.\n+\t(vect_slp_region): Cost check and code generate subgraphs separately,\n+\treport optimized locations and missed optimizations due to\n+\tprofitability for each of them.\n+\t(vect_schedule_slp): Get the vector of SLP graph entries to\n+\tvectorize as argument.\n+\n+2020-09-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97013\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Remove duplicate dumping.\n+\n+2020-09-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Check vector\n+\ttypes for all lanes are compatible.\n+\t(vect_analyze_slp_instance): Appropriately check for stores.\n+\t(vect_schedule_slp): Likewise.\n+\n+2020-09-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_assemble_value): Fix undefined\n+\tbehaviour.\n+\n+2020-09-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_assemble_value): Handle negative\n+\t__int128.\n+\n+2020-09-11  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tChange default.\n+\n 2020-09-10  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_emit_cmove): Change return"}, {"sha": "c977cef8bc2bb560c23bb5ee53113e172ef847ff", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1 +1 @@\n-20200911\n+20200912"}, {"sha": "d30d1e72e021e34c8ed29cbaede187d785f80135", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,25 @@\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (type_has_variable_size): New function.\n+\t(create_field_decl): In the packed case, also force byte alignment\n+\twhen the type of the field has variable size.\n+\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (get_array_bit_stride): Return TYPE_ADA_SIZE\n+\tfor record and union types.\n+\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_get_fixed_point_type): Bail out only\n+\twhen the GNAT encodings are specifically used.\n+\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Only\n+\tcreate extra subtypes for discriminants if the RM size of the base\n+\ttype of the index type is lower than that of the index type.\n+\n 2020-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (set_rm_size): Do not take into account the"}, {"sha": "90ecac8b753dc7d839840478ebfff1bab0ca57d7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,22 @@\n+2020-09-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96798\n+\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n+\tNew.\n+\t(region_model::impl_call_strcpy): New.\n+\t* region-model.cc (region_model::on_call_pre): Flag unhandled\n+\tbuiltins that are non-pure as having unknown side-effects.\n+\tImplement BUILT_IN_MEMCPY, BUILT_IN_MEMCPY_CHK, BUILT_IN_STRCPY,\n+\tBUILT_IN_STRCPY_CHK, BUILT_IN_FPRINTF, BUILT_IN_FPRINTF_UNLOCKED,\n+\tBUILT_IN_PUTC, BUILT_IN_PUTC_UNLOCKED, BUILT_IN_FPUTC,\n+\tBUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS, BUILT_IN_FPUTS_UNLOCKED,\n+\tBUILT_IN_FWRITE, BUILT_IN_FWRITE_UNLOCKED, BUILT_IN_PRINTF,\n+\tBUILT_IN_PRINTF_UNLOCKED, BUILT_IN_PUTCHAR,\n+\tBUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTS, BUILT_IN_PUTS_UNLOCKED,\n+\tBUILT_IN_VFPRINTF, BUILT_IN_VPRINTF.\n+\t* region-model.h (region_model::impl_call_memcpy): New decl.\n+\t(region_model::impl_call_strcpy): New decl.\n+\n 2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94355"}, {"sha": "d11d92f1ce4c0b3a914b142792a5f43817250ad3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,31 @@\n+2020-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (grokfndecl): Don't attach to local extern.\n+\n+2020-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_objc_method_definition_list): Reimplement\n+\tloop, make sure we pop scope.\n+\n+2020-09-11  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (LOOKUP_CONSTINIT): Remove.\n+\t(LOOKUP_REWRITTEN): Adjust.\n+\t* decl.c (duplicate_decls): Set DECL_DECLARED_CONSTINIT_P.\n+\t(check_initializer): Use DECL_DECLARED_CONSTINIT_P instead of\n+\tLOOKUP_CONSTINIT.\n+\t(cp_finish_decl): Don't set DECL_DECLARED_CONSTINIT_P.  Use\n+\tDECL_DECLARED_CONSTINIT_P instead of LOOKUP_CONSTINIT.\n+\t(grokdeclarator): Set DECL_DECLARED_CONSTINIT_P.\n+\t* decl2.c (grokfield): Don't handle LOOKUP_CONSTINIT.\n+\t* parser.c (cp_parser_decomposition_declaration): Remove\n+\tLOOKUP_CONSTINIT handling.\n+\t(cp_parser_init_declarator): Likewise.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t(instantiate_decl): Likewise.\n+\t* typeck2.c (store_init_value): Use DECL_DECLARED_CONSTINIT_P instead\n+\tof LOOKUP_CONSTINIT.\n+\n 2020-09-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (TINFO_VAR_DECLARED_CONSTINIT): Replace with ..."}, {"sha": "5b321c8311a84aa38598fba31dd711ca6fdcefec", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,39 @@\n+2020-09-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_14): New ABI tag.\n+\t* docs/topics/expressions.rst (gcc_jit_global_set_initializer):\n+\tDocument new entry point in section 'Global variables'.\n+\t* jit-playback.c (global_new_decl, global_finalize_lvalue): New\n+\tmethod.\n+\t(playback::context::new_global): Make use of global_new_decl,\n+\tglobal_finalize_lvalue.\n+\t(load_blob_in_ctor): New template function in use by the\n+\tfollowing.\n+\t(playback::context::new_global_initialized): New method.\n+\t* jit-playback.h (class context): Decl 'new_global_initialized',\n+\t'global_new_decl', 'global_finalize_lvalue'.\n+\t(lvalue::set_initializer): Add implementation.\n+\t* jit-recording.c (recording::memento_of_get_pointer::get_size)\n+\t(recording::memento_of_get_type::get_size): Add implementation.\n+\t(recording::global::write_initializer_reproducer): New function in\n+\tuse by 'recording::global::write_reproducer'.\n+\t(recording::global::replay_into)\n+\t(recording::global::write_to_dump)\n+\t(recording::global::write_reproducer): Handle\n+\tinitialized case.\n+\t* jit-recording.h (class type): Decl 'get_size' and\n+\t'num_elements'.\n+\t* libgccjit++.h (class lvalue): Declare new 'set_initializer'\n+\tmethod.\n+\t(class lvalue): Decl 'is_global' and 'set_initializer'.\n+\t(class global) Decl 'write_initializer_reproducer'. Add\n+\t'm_initializer', 'm_initializer_num_bytes' fields.  Implement\n+\t'set_initializer'. Add a destructor to free 'm_initializer'.\n+\t* libgccjit.c (gcc_jit_global_set_initializer): New function.\n+\t* libgccjit.h (gcc_jit_global_set_initializer): New function\n+\tdeclaration.\n+\t* libgccjit.map (LIBGCCJIT_ABI_14): New ABI tag.\n+\n 2020-08-28  Martin Sebor  <msebor@redhat.com>\n \n \t* jit-recording.c (recording::switch_::make_debug_string): Add argument"}, {"sha": "4c94847a7d45e59c8273ed51de9dcccee94ad60a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,69 @@\n+2020-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/concepts/local-extern.C: New file.\n+\n+2020-09-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr96139-a.c: Specify -mvsx option and update the\n+\tdg-require stanza to match.\n+\t* gcc.target/powerpc/pr96139-b.c: Same.\n+\t* gcc.target/powerpc/pr96139-c.c: Specify -maltivec option and update\n+\tthe dg-require stanza to match.\n+\n+2020-09-11  Sunil K Pandey  <skpgkp2@gmail.com>\n+\n+\tPR target/97018\n+\t* gcc.target/i386/l_fma_double_1.c: Add option -mno-avx512f.\n+\t* gcc.target/i386/l_fma_double_2.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_3.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_4.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_5.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_6.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_1.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_2.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_3.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_4.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_5.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_6.c: Likewise.\n+\n+2020-09-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96903\n+\t* gcc.dg/Wstringop-overflow-42.c:: Add comment.\n+\t* gcc.dg/Wstringop-overflow-43.c: New test.\n+\n+2020-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* obj-c++.dg/syntax-error-9.mm: Adjust expected errors.\n+\n+2020-09-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.dg/gimplefe-44.c: Require exceptions.\n+\n+2020-09-11  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add test-blob.c.\n+\t* jit.dg/test-global-set-initializer.c: New testcase.\n+\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack27.adb: New test.\n+\t* gnat.dg/pack27_pkg.ads: New helper.\n+\n+2020-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/discr7.ads: New test.\n+\n+2020-09-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/int128.c: New test.\n+\n+2020-09-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96798\n+\t* gcc.dg/analyzer/memcpy-1.c: New test.\n+\t* gcc.dg/analyzer/strcpy-1.c: New test.\n+\n 2020-09-10  Alex Coplan  <alex.coplan@arm.com>\n \n \t* gcc.target/aarch64/acle/armv8-r.c: New test."}, {"sha": "d2955679ad552cfad6f32dec807c849e5e89c217", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,11 @@\n+2020-09-11  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96898\n+\t* configure.tgt: Add nvptx.\n+\t* libatomic_i.h (MASK_8, INVERT_MASK_8): New macro definition.\n+\t* config/nvptx/host-config.h: New file.\n+\t* config/nvptx/lock.c: New file.\n+\n 2020-09-07  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libatomic.c/atomic-generic.c: Include string.h."}, {"sha": "0878f31562e02b46f0d01199ea8ba0e32d07db2a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac35c090821f92f41e83d1688eaf2e2b4946afb1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac35c090821f92f41e83d1688eaf2e2b4946afb1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac35c090821f92f41e83d1688eaf2e2b4946afb1", "patch": "@@ -1,3 +1,137 @@\n+2020-09-11  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/std/memory: Move #include <bits/align.h> inside C++11\n+\tconditional includes.\n+\n+2020-09-11  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/Makefile.am (bits_headers): Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/align.h: New file.\n+\t* include/std/memory (align): Move definition to bits/align.h.\n+\t(assume_aligned): Likewise.\n+\n+2020-09-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono [C++17] (chrono::__detail::ceil): Add\n+\tusing declaration to make chrono::ceil available for internal\n+\tuse with a consistent name.\n+\t(chrono::__detail::__ceil_impl): New function template.\n+\t(chrono::__detail::ceil): Use __ceil_impl to compare and\n+\tincrement the value. Remove SFINAE constraint.\n+\n+2020-09-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_error.h (__throw_regex_error): Fix\n+\tparameter declaration and use reserved attribute names.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* include/std/condition_variable (condition_variable::wait_until):\n+\tConvert delta to steady_clock duration before adding to current\n+\tsteady_clock time to avoid rounding errors described in PR68519.\n+\t(condition_variable::wait_for): Simplify calculation of absolute\n+\ttime by using chrono::__detail::ceil in both overloads.\n+\t* testsuite/30_threads/condition_variable/members/68519.cc:\n+\t(test_wait_for): Renamed from test01. Replace unassigned val\n+\tvariable with constant false. Reduce scope of mx and cv\n+\tvariables to just test_wait_for function.\n+\t(test_wait_until): Add new test case.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\tPR libstdc++/91486\n+\t* include/bits/atomic_futex.h\n+\t(__atomic_futex_unsigned::_M_load_when_equal_for)\n+\t(__atomic_futex_unsigned::_M_load_when_equal_until): Use\n+\t__detail::ceil to convert delta to the reference clock\n+\tduration type to avoid resolution problems.\n+\t* include/std/chrono (__detail::ceil): Move implementation\n+\tof std::chrono::ceil into private namespace so that it's\n+\tavailable to pre-C++17 code.\n+\t* testsuite/30_threads/async/async.cc (test_pr91486):\n+\tTest __atomic_futex_unsigned::_M_load_when_equal_for.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* include/bits/atomic_futex.h\n+\t(__atomic_futex_unsigned::_M_load_when_equal_until): Add\n+\tloop on generic _Clock to check the timeout against _Clock\n+\tagain after _M_load_when_equal_until returns indicating a\n+\ttimeout.\n+\t* testsuite/30_threads/async/async.cc: Invent slow_clock\n+\tthat runs at an eleventh of steady_clock's speed. Use it\n+\tto test the user-supplied-clock variant of\n+\t__atomic_futex_unsigned::_M_load_when_equal_until works\n+\tgenerally with test03 and loops correctly when the timeout\n+\ttime hasn't been reached in test04.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* include/bits/atomic_futex.h (__atomic_futex_unsigned): Change\n+\t__clock_t typedef to use steady_clock so that unknown clocks are\n+\tsynced to it rather than system_clock. Change existing __clock_t\n+\toverloads of _M_load_and_text_until_impl and\n+\t_M_load_when_equal_until to use system_clock explicitly. Remove\n+\tcomment about DR 887 since these changes address that problem as\n+\tbest as we currently able.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* config/abi/pre/gnu.ver: Update for addition of\n+\t__atomic_futex_unsigned_base::_M_futex_wait_until_steady.\n+\t* include/bits/atomic_futex.h (__atomic_futex_unsigned_base):\n+\tAdd comments to clarify that _M_futex_wait_until and\n+\t_M_load_and_test_until use CLOCK_REALTIME.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady)\n+\t(__atomic_futex_unsigned_base::_M_load_and_text_until_steady):\n+\tNew member functions that use CLOCK_MONOTONIC.\n+\t(__atomic_futex_unsigned_base::_M_load_and_test_until_impl)\n+\t(__atomic_futex_unsigned_base::_M_load_when_equal_until): Add\n+\toverloads that accept a steady_clock time_point and use the\n+\tnew member functions.\n+\t* src/c++11/futex.cc: Include headers required for\n+\tclock_gettime.\n+\t(futex_clock_monotonic_flag): New constant to tell futex to\n+\tuse CLOCK_MONOTONIC to match existing futex_clock_realtime_flag.\n+\t(futex_clock_monotonic_unavailable): New global to store the\n+\tresult of trying to use CLOCK_MONOTONIC.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady): Add\n+\tnew variant of _M_futex_wait_until that uses CLOCK_MONOTONIC to\n+\tsupport waiting using steady_clock.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* src/c++11/futex.cc: Add new constants for required futex\n+\tflags.  Add futex_clock_realtime_unavailable flag to store\n+\tresult of trying to use FUTEX_CLOCK_REALTIME.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until): Try to\n+\tuse FUTEX_WAIT_BITSET with FUTEX_CLOCK_REALTIME and only\n+\tfall back to using gettimeofday and FUTEX_WAIT if that's not\n+\tsupported.\n+\n+2020-09-11  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* testsuite/30_threads/async/async.cc (test02): Test steady_clock\n+\twith std::future::wait_until.\n+\t(test03): Add new test templated on clock type waiting for future\n+\tassociated with async to resolve.\n+\t(main): Call test03 to test both system_clock and steady_clock.\n+\n+2020-09-11  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@st.com>\n+\t    Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* libsupc++/eh_call.cc: Avoid warning with -fno-exceptions.\n+\n+2020-09-11  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@st.com>\n+\t    Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* libsupc++/eh_call.cc: Avoid warning with -fno-exceptions.\n+\n+2020-09-11  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* include/bits/regex_error.h: Avoid warning with -fno-exceptions.\n+\n 2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/locale_conv.h (__do_str_codecvt, __str_codecvt_in_all):"}]}