{"sha": "3d203d01760ed8e5a81a9406fee67c139d116ad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyMDNkMDE3NjBlZDhlNWE4MWE5NDA2ZmVlNjdjMTM5ZDExNmFkMA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-10-04T07:08:56Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-10-04T07:08:56Z"}, "message": "Adjust various comments and rename some functions in range-op.cc to\nimprove readability.\n\nFrom-SVN: r276564", "tree": {"sha": "4b4c4032499a97a6bc36f8d6d19941a8101c4fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b4c4032499a97a6bc36f8d6d19941a8101c4fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d203d01760ed8e5a81a9406fee67c139d116ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d203d01760ed8e5a81a9406fee67c139d116ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d203d01760ed8e5a81a9406fee67c139d116ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d203d01760ed8e5a81a9406fee67c139d116ad0/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fe2ae2902e9e65a4ce6cf56b3c34c02677d33a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe2ae2902e9e65a4ce6cf56b3c34c02677d33a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe2ae2902e9e65a4ce6cf56b3c34c02677d33a4"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "6e4f145af4658f26967a1f43b5bd9339af76f0f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d203d01760ed8e5a81a9406fee67c139d116ad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d203d01760ed8e5a81a9406fee67c139d116ad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d203d01760ed8e5a81a9406fee67c139d116ad0", "patch": "@@ -1,3 +1,13 @@\n+2019-10-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t(value_range_from_overflowed_bounds): Rename from\n+\tadjust_overflow_bound.\n+\t(value_range_with_overflow): Rename from\n+\tcreate_range_with_overflow.\n+\t(create_possibly_reversed_range): Adjusted for above renames.\n+\t(operator_*::wi_fold): Same.\n+\t(cross_product_operator::wi_cross_productor): Same.\n+\n 2019-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* doc/invoke.texi (-Wshadow=global, -Wshadow=local,"}, {"sha": "fff4a55f88d520353b9c54974f863158a2ca375f", "filename": "gcc/range-op.cc", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d203d01760ed8e5a81a9406fee67c139d116ad0/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d203d01760ed8e5a81a9406fee67c139d116ad0/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=3d203d01760ed8e5a81a9406fee67c139d116ad0", "patch": "@@ -185,12 +185,13 @@ range_operator::op2_range (value_range_base &r ATTRIBUTE_UNUSED,\n }\n \n \n-// Called when there is either an overflow OR an underflow... which\n-// means an anti range must be created to compensate.  This does not\n-// cover the case where there are 2 possible overflows, or none.\n+// Create and return a range from a pair of wide-ints that are known\n+// to have overflowed (or underflowed).\n \n static value_range_base\n-adjust_overflow_bound (tree type, const wide_int &wmin, const wide_int &wmax)\n+value_range_from_overflowed_bounds (tree type,\n+\t\t\t\t    const wide_int &wmin,\n+\t\t\t\t    const wide_int &wmax)\n {\n   const signop sgn = TYPE_SIGN (type);\n   const unsigned int prec = TYPE_PRECISION (type);\n@@ -216,15 +217,15 @@ adjust_overflow_bound (tree type, const wide_int &wmin, const wide_int &wmax)\n   return value_range_base (VR_ANTI_RANGE, type, tmin, tmax);\n }\n \n-// Given a newly calculated lbound and ubound, examine their\n-// respective overflow bits to determine how to create a range.\n-// Return said range.\n+// Create and return a range from a pair of wide-ints.  MIN_OVF and\n+// MAX_OVF describe any overflow that might have occurred while\n+// calculating WMIN and WMAX respectively.\n \n static value_range_base\n-create_range_with_overflow (tree type,\n-\t\t\t    const wide_int &wmin, const wide_int &wmax,\n-\t\t\t    wi::overflow_type min_ovf = wi::OVF_NONE,\n-\t\t\t    wi::overflow_type max_ovf = wi::OVF_NONE)\n+value_range_with_overflow (tree type,\n+\t\t\t   const wide_int &wmin, const wide_int &wmax,\n+\t\t\t   wi::overflow_type min_ovf = wi::OVF_NONE,\n+\t\t\t   wi::overflow_type max_ovf = wi::OVF_NONE)\n {\n   const signop sgn = TYPE_SIGN (type);\n   const unsigned int prec = TYPE_PRECISION (type);\n@@ -255,7 +256,7 @@ create_range_with_overflow (tree type,\n \n       if ((min_ovf == wi::OVF_UNDERFLOW && max_ovf == wi::OVF_NONE)\n \t  || (max_ovf == wi::OVF_OVERFLOW && min_ovf == wi::OVF_NONE))\n-\treturn adjust_overflow_bound (type, wmin, wmax);\n+\treturn value_range_from_overflowed_bounds (type, wmin, wmax);\n \n       // Other underflow and/or overflow, drop to VR_VARYING.\n       return value_range_base (type);\n@@ -282,9 +283,9 @@ create_range_with_overflow (tree type,\n     }\n }\n \n-// Like above, but canonicalize the case where the bounds are swapped\n-// and overflow may wrap.  In which case, we transform [10,5] into\n-// [MIN,5][10,MAX].\n+// Create and return a range from a pair of wide-ints.  Canonicalize\n+// the case where the bounds are swapped.  In which case, we transform\n+// [10,5] into [MIN,5][10,MAX].\n \n static inline value_range_base\n create_possibly_reversed_range (tree type,\n@@ -293,7 +294,7 @@ create_possibly_reversed_range (tree type,\n   signop s = TYPE_SIGN (type);\n   // If the bounds are swapped, treat the result as if an overflow occured.\n   if (wi::gt_p (new_lb, new_ub, s))\n-    return adjust_overflow_bound (type, new_lb, new_ub);\n+    return value_range_from_overflowed_bounds (type, new_lb, new_ub);\n \n   // Otherwise its just a normal range.\n   return value_range_base (type, new_lb, new_ub);\n@@ -907,7 +908,7 @@ operator_plus::wi_fold (tree type,\n   signop s = TYPE_SIGN (type);\n   wide_int new_lb = wi::add (lh_lb, rh_lb, s, &ov_lb);\n   wide_int new_ub = wi::add (lh_ub, rh_ub, s, &ov_ub);\n-  return create_range_with_overflow (type, new_lb, new_ub, ov_lb, ov_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub, ov_lb, ov_ub);\n }\n \n bool\n@@ -954,7 +955,7 @@ operator_minus::wi_fold (tree type,\n   signop s = TYPE_SIGN (type);\n   wide_int new_lb = wi::sub (lh_lb, rh_ub, s, &ov_lb);\n   wide_int new_ub = wi::sub (lh_ub, rh_lb, s, &ov_ub);\n-  return create_range_with_overflow (type, new_lb, new_ub, ov_lb, ov_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub, ov_lb, ov_ub);\n }\n \n bool\n@@ -994,7 +995,7 @@ operator_min::wi_fold (tree type,\n   signop s = TYPE_SIGN (type);\n   wide_int new_lb = wi::min (lh_lb, rh_lb, s);\n   wide_int new_ub = wi::min (lh_ub, rh_ub, s);\n-  return create_range_with_overflow (type, new_lb, new_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub);\n }\n \n \n@@ -1016,7 +1017,7 @@ operator_max::wi_fold (tree type,\n   signop s = TYPE_SIGN (type);\n   wide_int new_lb = wi::max (lh_lb, rh_lb, s);\n   wide_int new_ub = wi::max (lh_ub, rh_ub, s);\n-  return create_range_with_overflow (type, new_lb, new_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub);\n }\n \n \n@@ -1087,7 +1088,7 @@ cross_product_operator::wi_cross_product (tree type,\n   // Choose min and max from the ordered pairs.\n   wide_int res_lb = wi::min (cp1, cp3, sign);\n   wide_int res_ub = wi::max (cp2, cp4, sign);\n-  return create_range_with_overflow (type, res_lb, res_ub);\n+  return value_range_with_overflow (type, res_lb, res_ub);\n }\n \n \n@@ -1832,7 +1833,7 @@ wi_optimize_and_or (value_range_base &r,\n     }\n   else\n     gcc_unreachable ();\n-  r = create_range_with_overflow (type, res_lb, res_ub);\n+  r = value_range_with_overflow (type, res_lb, res_ub);\n   return true;\n }\n \n@@ -1932,7 +1933,7 @@ operator_bitwise_and::wi_fold (tree type,\n   if (wi::gt_p (new_lb, new_ub,sign))\n     return value_range_base (type);\n \n-  return create_range_with_overflow (type, new_lb, new_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub);\n }\n \n bool\n@@ -2070,7 +2071,7 @@ operator_bitwise_or::wi_fold (tree type,\n   if (wi::gt_p (new_lb, new_ub,sign))\n     return value_range_base (type);\n \n-  return create_range_with_overflow (type, new_lb, new_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub);\n }\n \n bool\n@@ -2132,7 +2133,7 @@ operator_bitwise_xor::wi_fold (tree type,\n   // If the range has all positive or all negative values, the result\n   // is better than VARYING.\n   if (wi::lt_p (new_lb, 0, sign) || wi::ge_p (new_ub, 0, sign))\n-    return create_range_with_overflow (type, new_lb, new_ub);\n+    return value_range_with_overflow (type, new_lb, new_ub);\n \n   return value_range_base (type);\n }\n@@ -2186,7 +2187,7 @@ operator_trunc_mod::wi_fold (tree type,\n     tmp = wi::zero (prec);\n   new_ub = wi::min (new_ub, tmp, sign);\n \n-  return create_range_with_overflow (type, new_lb, new_ub);\n+  return value_range_with_overflow (type, new_lb, new_ub);\n }\n \n "}]}