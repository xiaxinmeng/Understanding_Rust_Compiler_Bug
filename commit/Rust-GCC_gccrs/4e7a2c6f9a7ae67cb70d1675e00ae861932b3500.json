{"sha": "4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3YTJjNmY5YTdhZTY3Y2I3MGQxNjc1ZTAwYWU4NjE5MzJiMzUwMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-03-05T06:02:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-05T06:02:15Z"}, "message": "globals.cc: Clarify comments, remove c_locale_imp_compat.\n\n\n2003-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/globals.cc: Clarify comments, remove c_locale_imp_compat.\n\n\t* config/linker-map.gnu: Filter typeinfo and vtable info.\n\nFrom-SVN: r63826", "tree": {"sha": "98f8d6ad73d604f308894b76b75c6bc7d11f49bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f8d6ad73d604f308894b76b75c6bc7d11f49bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/comments", "author": null, "committer": null, "parents": [{"sha": "c524ed5dc901a48ddc5a0dd7a0b859d2d44e635e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c524ed5dc901a48ddc5a0dd7a0b859d2d44e635e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c524ed5dc901a48ddc5a0dd7a0b859d2d44e635e"}], "stats": {"total": 165, "additions": 103, "deletions": 62}, "files": [{"sha": "a16e62ce002e0e17d512f60831a6ee566c99ee25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "patch": "@@ -1,3 +1,9 @@\n+2003-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/globals.cc: Clarify comments, remove c_locale_imp_compat.\n+\n+\t* config/linker-map.gnu: Filter typeinfo and vtable info.\n+\n 2003-03-04  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* src/ios.cc (ios_base::_M_grow_words): Don't delete _M_word on"}, {"sha": "5011619c53a1fef0c4c0f78767c870b778a2248b", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "patch": "@@ -130,12 +130,48 @@ GLIBCPP_3.4 {\n     _ZdaPvRKSt9nothrow_t;\n \n     # vtable\n-    _ZTV*;\n-    _ZTT*;\n+    _ZTVN9__gnu_cxx*;\n+    _ZTVNSt8ios_base7failureE;\n+    _ZTVNSt6locale5facetE;\n+    _ZTVS[a-z];\n+    _ZTVSt[0-9][A-Za-z]*;\n+    _ZTVSt[0-9][0-9][A-Za-z]*;\n+    _ZTVSt11__timepunctI[cw]E;\n+    _ZTVSt23__codecvt_abstract_baseI[cw]c11__mbstate_tE;\n+    _ZTVSt21__ctype_abstract_baseI[cw]E;\n+\n+    _ZTTS[a-z];\n+    _ZTTSt[0-9][A-Za-z]*;\n+    _ZTTSt[0-9][0-9][A-Za-z]*;\n \n     # typeinfo\n-    _ZTI*;\n-    _ZTS*;\n+    _ZTI[a-z];\n+    _ZTINSt8ios_base7failureE;\n+    _ZTINSt6locale5facetE;\n+    _ZTIN9__gnu_cxx*;\n+    _ZTIP[a-z];\n+    _ZTIPK[a-z];\n+    _ZTIS[a-z];\n+    _ZTISt[0-9][A-Za-z]*;\n+    _ZTISt[0-9][0-9][A-Za-z]*;\n+    _ZTISt11__timepunctI[cw]E;\n+    _ZTISt10__num_base;\n+    _ZTISt21__ctype_abstract_baseI[cw]E;\n+    _ZTISt23__codecvt_abstract_baseI[cw]c11__mbstate_tE;\n+\n+    _ZTS[a-z];\n+    _ZTSNSt8ios_base7failureE;\n+    _ZTSNSt6locale5facetE;\n+    _ZTSN9__gnu_cxx*;\n+    _ZTSP[a-z];\n+    _ZTSPK[a-z];\n+    _ZTSS[a-z];\n+    _ZTSSt[0-9][A-Za-z]*;\n+    _ZTSSt[0-9][0-9][A-Za-z]*;\n+    _ZTSSt11__timepunctI[cw]E;\n+    _ZTSSt10__num_base;\n+    _ZTSSt21__ctype_abstract_baseI[cw]E;\n+    _ZTSSt23__codecvt_abstract_baseI[cw]c11__mbstate_tE;\n \n     # function-scope static objects requires a guard variable.\n     _ZGV*;\n@@ -225,6 +261,13 @@ CXXABI_1.3 {\n     # __gnu_cxx::_verbose_terminate_handler()\n     _ZN9__gnu_cxx27__verbose_terminate_handlerEv;\n \n+    # typeinfo\n+    _ZTIN10__cxxabi*;\n+    _ZTSN10__cxxabi*;\n+\n+    # vtable\n+    _ZTVN10__cxxabi*;\n+\n   local:\n     *;\n };"}, {"sha": "0f8dfefbd0b409260ad2485603b5ad42d1cb1767", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 50, "deletions": 58, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a2c6f9a7ae67cb70d1675e00ae861932b3500/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=4e7a2c6f9a7ae67cb70d1675e00ae861932b3500", "patch": "@@ -41,13 +41,60 @@\n // time.  This file contains definitions of all global variables that\n // require initialization as arrays of characters.\n \n-// Because <iostream> declares the standard streams to be [io]stream\n-// types instead of say [io]fstream types, it is also necessary to\n-// allocate the actual file buffers in this file.\n+// NB: asm directives can rename these non-exported, namespace\n+// __gnu_cxx symbols into exported, namespace std symbols with the\n+// appropriate symbol version name.\n+// The rename syntax is \n+//   asm (\".symver currentname,oldname@@GLIBCPP_3.2\")\n+// In macro form:\n+// _GLIBCPP_ASM_SYMVER(currentname, oldname, GLIBCPP_3.2)\n+\n+namespace std\n+{\n+  // Standard stream objects.\n+  // NB: Iff <iostream> is included, these definitions become wonky.\n+  typedef char fake_istream[sizeof(istream)]\n+  __attribute__ ((aligned(__alignof__(istream))));\n+  typedef char fake_ostream[sizeof(ostream)] \n+  __attribute__ ((aligned(__alignof__(ostream))));\n+  fake_istream cin;\n+  fake_ostream cout;\n+  fake_ostream cerr;\n+  fake_ostream clog;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wistream[sizeof(wistream)] \n+  __attribute__ ((aligned(__alignof__(wistream))));\n+  typedef char fake_wostream[sizeof(wostream)] \n+  __attribute__ ((aligned(__alignof__(wostream))));\n+  fake_wistream wcin;\n+  fake_wostream wcout;\n+  fake_wostream wcerr;\n+  fake_wostream wclog;\n+#endif\n+} // namespace std\n+\n namespace __gnu_cxx\n {\n   using namespace std;\n \n+  // Because <iostream> declares the standard streams to be [io]stream\n+  // types instead of say [io]fstream types, it is also necessary to\n+  // allocate the actual file buffers in this file.\n+  typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n+  __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n+  fake_filebuf buf_cout;\n+  fake_filebuf buf_cin;\n+  fake_filebuf buf_cerr;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n+  fake_wfilebuf buf_wcout;\n+  fake_wfilebuf buf_wcin;\n+  fake_wfilebuf buf_wcerr;\n+#endif\n+\n   typedef char fake_facet_name[sizeof(char*)]\n   __attribute__ ((aligned(__alignof__(char*))));\n   fake_facet_name facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n@@ -56,27 +103,10 @@ namespace __gnu_cxx\n   __attribute__ ((aligned(__alignof__(locale::_Impl))));\n   fake_locale_Impl c_locale_impl;\n \n-\n-  // NB: The asm directives renames these non-exported, namespace\n-  // __gnu_cxx symbols into the mistakenly exported, namespace std\n-  // symbols in GLIBCPP_3.2.\n-  // The rename syntax is \n-  //   asm (\".symver currentname,oldname@@GLIBCPP_3.2\")\n-  // At the same time, these new __gnu_cxx symbols are not exported.\n-  // In the future, GLIBCXX_ABI > 5 should remove all uses of\n-  // _GLIBCPP_ASM_SYMVER in this file.\n   typedef char fake_locale[sizeof(locale)]\n   __attribute__ ((aligned(__alignof__(locale))));\n   fake_locale c_locale;\n \n-  // GLIBCXX_ABI > 5 will not need this symbol at all.\n-  // It's here just as a placeholder, as the size of this exported\n-  // object changed. The new symbol is not exported.\n-  const int o = sizeof(locale::_Impl) - sizeof(char*[_GLIBCPP_NUM_CATEGORIES]);\n-  typedef char fake_locale_Impl_compat[o]\n-  __attribute__ ((aligned(__alignof__(o))));\n-  fake_locale_Impl_compat  c_locale_impl_compat;\n-\n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n@@ -189,20 +219,6 @@ namespace __gnu_cxx\n   fake_messages_w messages_w;\n #endif\n \n-  typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n-  __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n-  fake_filebuf buf_cout;\n-  fake_filebuf buf_cin;\n-  fake_filebuf buf_cerr;\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n-  __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n-  fake_wfilebuf buf_wcout;\n-  fake_wfilebuf buf_wcin;\n-  fake_wfilebuf buf_wcerr;\n-#endif\n-\n   // Globals for once-only runtime initialization of mutex objects.  This\n   // allows static initialization of these objects on systems that need a\n   // function call to initialize a mutex.  For example, see stl_threads.h.\n@@ -226,27 +242,3 @@ namespace __gnu_cxx\n   { __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCPP_mutex_address); }\n #endif\n } // namespace __gnu_cxx\n-\n-namespace std\n-{\n-  // Standard stream objects.\n-  typedef char fake_istream[sizeof(istream)]\n-  __attribute__ ((aligned(__alignof__(istream))));\n-  typedef char fake_ostream[sizeof(ostream)] \n-  __attribute__ ((aligned(__alignof__(ostream))));\n-  fake_istream cin;\n-  fake_ostream cout;\n-  fake_ostream cerr;\n-  fake_ostream clog;\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef char fake_wistream[sizeof(wistream)] \n-  __attribute__ ((aligned(__alignof__(wistream))));\n-  typedef char fake_wostream[sizeof(wostream)] \n-  __attribute__ ((aligned(__alignof__(wostream))));\n-  fake_wistream wcin;\n-  fake_wostream wcout;\n-  fake_wostream wcerr;\n-  fake_wostream wclog;\n-#endif\n-} // namespace std"}]}