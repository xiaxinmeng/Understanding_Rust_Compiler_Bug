{"sha": "66e5825973556c8db6fc2cf19179397506b0b101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlNTgyNTk3MzU1NmM4ZGI2ZmMyY2YxOTE3OTM5NzUwNmIwYjEwMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-29T13:52:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-29T13:52:22Z"}, "message": "C++: underline param in print_conversion_rejection (more PR c++/85110)\n\nConsider this bogus code (from g++.dg/diagnostic/param-type-mismatch-2.C):\n\nstruct s4 { static int member_1 (int one, const char **two, float three); };\n\nint test_4 (int first, const char *second, float third)\n{\n  return s4::member_1 (first, second, third);\n}\n\nBefore this patch, g++ emits:\n\ndemo.cc: In function 'int test_4(int, const char*, float)':\ndemo.cc:5:44: error: no matching function for call to 's4::member_1(int&, const char*&, float&)'\n5 |   return s4::member_1 (first, second, third);\n  |                                            ^\ndemo.cc:1:24: note: candidate: 'static int s4::member_1(int, const char**, float)'\n1 | struct s4 { static int member_1 (int one, const char **two, float three); };\n  |                        ^~~~~~~~\ndemo.cc:1:24: note:   no known conversion for argument 2 from 'const char*' to 'const char**'\n\nWith this patch, it highlights the pertinent parameter in the\n\"no known conversion\" note:\n\ndemo.cc: In function 'int test_4(int, const char*, float)':\ndemo.cc:5:44: error: no matching function for call to 's4::member_1(int&, const char*&, float&)'\n5 |   return s4::member_1 (first, second, third);\n  |                                            ^\ndemo.cc:1:24: note: candidate: 'static int s4::member_1(int, const char**, float)'\n1 | struct s4 { static int member_1 (int one, const char **two, float three); };\n  |                        ^~~~~~~~\ndemo.cc:1:56: note:   no known conversion for argument 2 from 'const char*' to 'const char**'\n1 | struct s4 { static int member_1 (int one, const char **two, float three); };\n  |                                           ~~~~~~~~~~~~~^~~\n\ngcc/cp/ChangeLog:\n\tPR c++/85110\n\t* call.c (print_conversion_rejection): Add \"fn\" param and use it\n\tfor \"no known conversion\" messages to underline the pertinent\n\tparam.\n\t(print_z_candidate): Supply \"fn\" to the new param above.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85110\n\t* g++.dg/diagnostic/param-type-mismatch-2.C: Update expected\n\toutput to reflect underlining of pertinent parameter in decl\n\tfor \"no known conversion\" messages.\n\nFrom-SVN: r263957", "tree": {"sha": "7f847135e0fc41b9b41c03c8fb0ba341eaa03b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f847135e0fc41b9b41c03c8fb0ba341eaa03b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e5825973556c8db6fc2cf19179397506b0b101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e5825973556c8db6fc2cf19179397506b0b101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e5825973556c8db6fc2cf19179397506b0b101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e5825973556c8db6fc2cf19179397506b0b101/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ca7a4d457a6d4769f3e6fa9f880e58a7a2eb8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca7a4d457a6d4769f3e6fa9f880e58a7a2eb8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca7a4d457a6d4769f3e6fa9f880e58a7a2eb8c8"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "0719186f800e8a826bb0929dd4d719cda82dfce2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66e5825973556c8db6fc2cf19179397506b0b101", "patch": "@@ -1,3 +1,11 @@\n+2018-08-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* call.c (print_conversion_rejection): Add \"fn\" param and use it\n+\tfor \"no known conversion\" messages to underline the pertinent\n+\tparam.\n+\t(print_z_candidate): Supply \"fn\" to the new param above.\n+\n 2018-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87122"}, {"sha": "a1567026975f6ef75f2ed9d82a063e1e66f5172d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=66e5825973556c8db6fc2cf19179397506b0b101", "patch": "@@ -3432,10 +3432,11 @@ equal_functions (tree fn1, tree fn2)\n   return fn1 == fn2;\n }\n \n-/* Print information about a candidate being rejected due to INFO.  */\n+/* Print information about a candidate FN being rejected due to INFO.  */\n \n static void\n-print_conversion_rejection (location_t loc, struct conversion_info *info)\n+print_conversion_rejection (location_t loc, struct conversion_info *info,\n+\t\t\t    tree fn)\n {\n   tree from = info->from;\n   if (!TYPE_P (from))\n@@ -3466,8 +3467,12 @@ print_conversion_rejection (location_t loc, struct conversion_info *info)\n     inform (loc, \"  no known conversion from %qH to %qI\",\n \t    from, info->to_type);\n   else\n-    inform (loc, \"  no known conversion for argument %d from %qH to %qI\",\n-\t    info->n_arg + 1, from, info->to_type);\n+    {\n+      if (TREE_CODE (fn) == FUNCTION_DECL)\n+\tloc = get_fndecl_argument_location (fn, info->n_arg);\n+      inform (loc, \"  no known conversion for argument %d from %qH to %qI\",\n+\t      info->n_arg + 1, from, info->to_type);\n+    }\n }\n \n /* Print information about a candidate with WANT parameters and we found\n@@ -3542,10 +3547,10 @@ print_z_candidate (location_t loc, const char *msgstr,\n \t\t\t\t   r->u.arity.expected);\n \t  break;\n \tcase rr_arg_conversion:\n-\t  print_conversion_rejection (cloc, &r->u.conversion);\n+\t  print_conversion_rejection (cloc, &r->u.conversion, fn);\n \t  break;\n \tcase rr_bad_arg_conversion:\n-\t  print_conversion_rejection (cloc, &r->u.bad_conversion);\n+\t  print_conversion_rejection (cloc, &r->u.bad_conversion, fn);\n \t  break;\n \tcase rr_explicit_conversion:\n \t  inform (cloc, \"  return type %qT of explicit conversion function \""}, {"sha": "ebdfcf5904a4dc4cb1d60ab0f9cc93f4643a17c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66e5825973556c8db6fc2cf19179397506b0b101", "patch": "@@ -1,3 +1,10 @@\n+2018-08-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* g++.dg/diagnostic/param-type-mismatch-2.C: Update expected\n+\toutput to reflect underlining of pertinent parameter in decl\n+\tfor \"no known conversion\" messages.\n+\n 2018-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87122"}, {"sha": "4957f61878e1f116db6cda4b7aaa454d25ba1f50", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch-2.C", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5825973556c8db6fc2cf19179397506b0b101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C?ref=66e5825973556c8db6fc2cf19179397506b0b101", "patch": "@@ -82,7 +82,10 @@ int test_4 (int first, const char *second, float third)\n                         ^~~~~~~~\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s4_member_1 }\n-  // TODO: underline the pertinent param\n+  /* { dg-begin-multiline-output \"\" } \n+ struct s4 { static int member_1 (int one, const char **two, float three); };\n+                                           ~~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* non-static member, with argname.  */\n@@ -103,7 +106,10 @@ int test_5 (int first, const char *second, float third)\n                  ^~~~~~~~\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s5_member_1 }\n-  // TODO: underline the pertinent param\n+  /* { dg-begin-multiline-output \"\" } \n+ struct s5 { int member_1 (int one, const char **two, float three); };\n+                                    ~~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* non-static member, with argname, via a ptr.  */\n@@ -123,7 +129,10 @@ int test_6 (int first, const char *second, float third, s6 *ptr)\n                  ^~~~~~~~\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s6_member_1 }\n-  // TODO: underline the pertinent param\n+  /* { dg-begin-multiline-output \"\" } \n+ struct s6 { int member_1 (int one, const char **two, float three); };\n+                                    ~~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* Template function.  */\n@@ -170,7 +179,10 @@ int test_8 (int first, const char *second, float third)\n                         ^~~~~~~~\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s8_member_1 }\n-  // TODO: underline the pertinent param\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s8 { static int member_1 (int one, T two, float three); };\n+                                           ~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* Template class, non-static function.  */\n@@ -192,5 +204,8 @@ int test_9 (int first, const char *second, float third)\n                  ^~~~~~~~\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s9_member_1 }\n-  // TODO: underline the pertinent param\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s9 { int member_1 (int one, T two, float three); };\n+                                    ~~^~~\n+     { dg-end-multiline-output \"\" } */\n }"}]}