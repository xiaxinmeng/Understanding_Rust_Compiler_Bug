{"sha": "3d65ea07b472e70ac02e7c948c91d5422aa53534", "node_id": "C_kwDOANBUbNoAKDNkNjVlYTA3YjQ3MmU3MGFjMDJlN2M5NDhjOTFkNTQyMmFhNTM1MzQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:57:30Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:44Z"}, "message": "RISC-V: Add vasub.vx C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tum_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-3.C: New test.", "tree": {"sha": "21952a6c9611c0cd05704a5a022a653e219a335b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21952a6c9611c0cd05704a5a022a653e219a335b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d65ea07b472e70ac02e7c948c91d5422aa53534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d65ea07b472e70ac02e7c948c91d5422aa53534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d65ea07b472e70ac02e7c948c91d5422aa53534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d65ea07b472e70ac02e7c948c91d5422aa53534/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a8c69e7ea6df4f1bdc2d453b364f1e6434184dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c69e7ea6df4f1bdc2d453b364f1e6434184dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8c69e7ea6df4f1bdc2d453b364f1e6434184dc"}], "stats": {"total": 5670, "additions": 5670, "deletions": 0}, "files": [{"sha": "25872bd58dc807c8b25b425a13b9fe4cfa0cd35b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "1e9eb73ff9fd07db75521a8e029854f17e2d5da2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "31169efd66e45cbc33c88391074eb4719a5ca44f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv32-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "be307bdbda60abee9f12620e394ca6de5aecf60a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d31f5dfb459e15e0f93294a4a3f03bce92252cb0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2506722628cf2b4f600ca2ed3a6b1cc744729c61", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_mu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_mu_rv64-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c1b83a4881b5d7430cb0e3c0848eb9c430fdd340", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv32-1.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "86536aab664160163748bf17ed5370c7ac2d9071", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv32-2.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "1b07de06197870a9122f4e06070bb419c9eba3d2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv32-3.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv32-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "bb4e59cce997909f1a268998e8d0040439358153", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv64-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "28ecc232ef348c6dcbc4f89eff2587e967c0bb6e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv64-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f896e3ec52728cfaa4cc994f7612b44da3734137", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_rv64-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_rv64-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(op1,op2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vasub(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b2f01b079d5689a679beed0f01418fd7ea85010d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "8754a0a8213c22c4130e0aed7e7cad06e45b5888", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "2b57624687ca6047d0fd76eb3a9cf11f00fd52d6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv32-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "d838aae8378e6d83a1cb2373d92ae4000e8ed6a9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "edfd6ad6219f2abb1b5b1049e4b617af1b56fc64", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "84293f8bfc46ef9cb87587902c4ef8aa07b8b77b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tu_rv64-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "c42e662da7d24f93bb6d12e69c60b12cc1f638b9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "357b91a76b46f39650e4ed08892f4526fb8e7829", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "565522d3ba0e84873d95cd318016228105742d27", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv32-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "2c3fdc9b5699010190b0d172a6f3e3fec5c34187", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "140f3304f1e15f46ccb6c11c2bf8cec2bc677b65", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "059ca0fa3f53fd544c4718f4279fc74b56f06e79", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tum_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tum_rv64-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "cbeb17e85678eb9799d70d56cd8020b7aca1e601", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "ac3cc209f4cceba758bbc031f6830285d1f51232", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "b674cec2b23c474fbb8efa9619489ea40f50a72d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv32-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vasub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "36216c603e52813e8772cb87fdc5c9f0ef76b37a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-1.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3002d4e00896f51209f16cdeb5cb1158ca2c711e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-2.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c4d5f42ddc721ad108f3e6cd7193c265fb54aa73", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vasub_vx_tumu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d65ea07b472e70ac02e7c948c91d5422aa53534/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvasub_vx_tumu_rv64-3.C?ref=3d65ea07b472e70ac02e7c948c91d5422aa53534", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vasub_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vasub_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vasub_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vasub_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vasub_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vasub_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vasub_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vasub_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vasub_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vasub_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vasub_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vasub_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vasub_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vasub_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vasub_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vasub_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vasub_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vasub_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vasub_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vasub_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vasub_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vasub_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vasub_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vasub\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}