{"sha": "dc70e81d6e03635053815aba4360da3356ae5b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3MGU4MWQ2ZTAzNjM1MDUzODE1YWJhNDM2MGRhMzM1NmFlNWIyNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2003-10-22T22:28:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2003-10-22T22:28:39Z"}, "message": "obstack.h: Merge the following change from gnulib...\n\ninclude:\n\t* obstack.h: Merge the following change from gnulib:\n\t2003-10-21  Paul Eggert  <eggert@twinsun.com>\n\t* obstack.h (obstack_1grow_fast): Properly parenthesize arg.\n\t(obstack_ptr_grow_fast, obstack_int_grow_fast):\n\tDon't use lvalue casts, as GCC plans to remove support for them\n\tin GCC 3.5.  Reported by Joseph S. Myers.  This bug\n\twas also present in the non-GCC version, indicating that this\n\tcode had always been buggy and had never been widely used.\n\t(obstack_1grow, obstack_ptr_grow, obstack_int_grow, obstack_blank):\n\tUse the fast variant of each macro, rather than copying the\n\tdefiniens of the fast variant; that way, we'll be more likely to\n\tcatch future bugs in the fast variants.\n\ngcc:\n\t* c-typeck.c (pedantic_lvalue_warning): Unconditionally warn of\n\tdeprecation of casts as lvalues.\n\t* fixinc/inclhack.def (obstack_lvalue_cast): New fix.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/obstack.h: New test.\n\ngcc/testsuite:\n\t* gcc.dg/cast-lvalue-1.c: New test.\n\nFrom-SVN: r72826", "tree": {"sha": "28a0768008d74d4ffb87685f8213007c87501bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28a0768008d74d4ffb87685f8213007c87501bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc70e81d6e03635053815aba4360da3356ae5b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc70e81d6e03635053815aba4360da3356ae5b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc70e81d6e03635053815aba4360da3356ae5b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc70e81d6e03635053815aba4360da3356ae5b24/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c21d6e0f7c7b6d02686e24d0967ffffe85b61ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c21d6e0f7c7b6d02686e24d0967ffffe85b61ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c21d6e0f7c7b6d02686e24d0967ffffe85b61ad"}], "stats": {"total": 192, "additions": 162, "deletions": 30}, "files": [{"sha": "5cf4a4bc2bcb21afdc50d63014286f3078d922a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -1,3 +1,11 @@\n+2003-10-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-typeck.c (pedantic_lvalue_warning): Unconditionally warn of\n+\tdeprecation of casts as lvalues.\n+\t* fixinc/inclhack.def (obstack_lvalue_cast): New fix.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/obstack.h: New test.\n+\n 2003-10-22  Andreas Schwab  <schwab@suse.de>\n \n \tPR target/12676"}, {"sha": "598e249d94762b507a11dfa6d1ab25706ff4053a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -2585,19 +2585,20 @@ unary_complex_lvalue (enum tree_code code, tree arg, int flag)\n static void\n pedantic_lvalue_warning (enum tree_code code)\n {\n-  if (pedantic)\n-    switch (code)\n-      {\n-      case COND_EXPR:\n+  switch (code)\n+    {\n+    case COND_EXPR:\n+      if (pedantic)\n \tpedwarn (\"ISO C forbids use of conditional expressions as lvalues\");\n-\tbreak;\n-      case COMPOUND_EXPR:\n+      break;\n+    case COMPOUND_EXPR:\n+      if (pedantic)\n \tpedwarn (\"ISO C forbids use of compound expressions as lvalues\");\n-\tbreak;\n-      default:\n-\tpedwarn (\"ISO C forbids use of cast expressions as lvalues\");\n-\tbreak;\n-      }\n+      break;\n+    default:\n+      pedwarn (\"use of cast expressions as lvalues is deprecated\");\n+      break;\n+    }\n }\n \f\n /* Warn about storing in something that is `const'.  */"}, {"sha": "5aa85b2a310d4160b6977703372dd4ef12eadd21", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Monday October 20, 2003 at 01:29:54 PM PDT\n+ * It has been AutoGen-ed  Wednesday October 22, 2003 at 10:23:00 PM UTC\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Mon Oct 20 13:29:54 PDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Wed Oct 22 22:23:00 UTC 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 160 fixup descriptions.\n+ * This file contains 161 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -3569,6 +3569,41 @@ static const char* apzNodeent_SyntaxPatch[] = {\n     \"%0;\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Obstack_Lvalue_Cast fix\n+ */\n+tSCC zObstack_Lvalue_CastName[] =\n+     \"obstack_lvalue_cast\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zObstack_Lvalue_CastList[] =\n+  \"|obstack.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzObstack_Lvalue_CastMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zObstack_Lvalue_CastSelect0[] =\n+       \"\\\\*\\\\(\\\\(([^()]*)\\\\*\\\\)(.*)\\\\)\\\\+\\\\+ = \\\\(([^()]*)\\\\)\";\n+\n+#define    OBSTACK_LVALUE_CAST_TEST_CT  1\n+static tTestDesc aObstack_Lvalue_CastTests[] = {\n+  { TT_EGREP,    zObstack_Lvalue_CastSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Obstack_Lvalue_Cast\n+ */\n+static const char* apzObstack_Lvalue_CastPatch[] = {\n+    \"format\",\n+    \"((*((%1*)%2) = (%3)), (%2 += sizeof (%1)))\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Osf_Namespace_A fix\n@@ -6344,9 +6379,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          180\n+#define REGEX_COUNT          181\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            160\n+#define FIX_COUNT            161\n \n /*\n  *  Enumerate the fixes\n@@ -6440,6 +6475,7 @@ typedef enum {\n     NEXT_VOLITILE_FIXIDX,\n     NEXT_WAIT_UNION_FIXIDX,\n     NODEENT_SYNTAX_FIXIDX,\n+    OBSTACK_LVALUE_CAST_FIXIDX,\n     OSF_NAMESPACE_A_FIXIDX,\n     OSF_NAMESPACE_C_FIXIDX,\n     PTHREAD_PAGE_SIZE_FIXIDX,\n@@ -6955,6 +6991,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      NODEENT_SYNTAX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aNodeent_SyntaxTests,   apzNodeent_SyntaxPatch, 0 },\n \n+  {  zObstack_Lvalue_CastName,    zObstack_Lvalue_CastList,\n+     apzObstack_Lvalue_CastMachs,\n+     OBSTACK_LVALUE_CAST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aObstack_Lvalue_CastTests,   apzObstack_Lvalue_CastPatch, 0 },\n+\n   {  zOsf_Namespace_AName,    zOsf_Namespace_AList,\n      apzOsf_Namespace_AMachs,\n      OSF_NAMESPACE_A_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "2f285f5205e235b17b6294b86138e12e5b80edbe", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -1996,6 +1996,31 @@ fix = {\n };\n \n \n+/*\n+ *  obstack.h used casts as lvalues.\n+ *\n+ *  We need to change postincrements of casted pointers (which are\n+ *  then dereferenced and assigned into) of the form\n+ *\n+ *    *((TYPE*)PTRVAR)++ = (VALUE)\n+ *\n+ *  into expressions like\n+ *\n+ *    ((*((TYPE*)PTRVAR) = (VALUE)), (PTRVAR += sizeof (TYPE)))\n+ *\n+ *  which is correct for the cases used in obstack.h since PTRVAR is\n+ *  of type char * and the value of the expression is not used.\n+ */\n+fix = {\n+    hackname  = obstack_lvalue_cast;\n+    files     = obstack.h;\n+    select    = '\\*\\(\\(([^()]*)\\*\\)(.*)\\)\\+\\+ = \\(([^()]*)\\)';\n+    c_fix     = format;\n+    c_fix_arg = \"((*((%1*)%2) = (%3)), (%2 += sizeof (%1)))\";\n+    test_text = \"*((void **) (h)->next_free)++ = (aptr)\";\n+};\n+\n+\n /*\n  *  sys/lc_core.h on some versions of OSF1/4.x pollutes the namespace by\n  *  defining regex.h related types.  This causes libg++ build and usage"}, {"sha": "ea8e8dd1e329575bd15379feb180d3acd1e1aa92", "filename": "gcc/fixinc/tests/base/obstack.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Ftests%2Fbase%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ffixinc%2Ftests%2Fbase%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fobstack.h?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/obstack.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( OBSTACK_LVALUE_CAST_CHECK )\n+((*((void **) (h)->next_free) = (aptr)), ( (h)->next_free += sizeof (void *)))\n+#endif  /* OBSTACK_LVALUE_CAST_CHECK */"}, {"sha": "d50d0fbddaba525a554267a3d911a9a97d9b8eab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -1,3 +1,7 @@\n+2003-10-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/cast-lvalue-1.c: New test.\n+\n 2003-10-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11962"}, {"sha": "1e0f04a63d437fbe8f0aaaafb2a38cd484410c4b", "filename": "gcc/testsuite/gcc.dg/cast-lvalue-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -0,0 +1,12 @@\n+/* Test for deprecation of casts as lvalues.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int x;\n+\n+void\n+foo (void)\n+{\n+  (char) x = 1; /* { dg-warning \"lvalue\" \"cast as lvalue deprecated\" } */\n+}"}, {"sha": "049942f4ee37291dad9c16e1bbff99f213e919a8", "filename": "include/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -1,3 +1,18 @@\n+2003-10-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* obstack.h: Merge the following change from gnulib:\n+\t2003-10-21  Paul Eggert  <eggert@twinsun.com>\n+\t* obstack.h (obstack_1grow_fast): Properly parenthesize arg.\n+\t(obstack_ptr_grow_fast, obstack_int_grow_fast):\n+\tDon't use lvalue casts, as GCC plans to remove support for them\n+\tin GCC 3.5.  Reported by Joseph S. Myers.  This bug\n+\twas also present in the non-GCC version, indicating that this\n+\tcode had always been buggy and had never been widely used.\n+\t(obstack_1grow, obstack_ptr_grow, obstack_int_grow, obstack_blank):\n+\tUse the fast variant of each macro, rather than copying the\n+\tdefiniens of the fast variant; that way, we'll be more likely to\n+\tcatch future bugs in the fast variants.\n+\n 2003-09-22  Andrew Cagney  <cagney@redhat.com>\n \n \t* floatformat.h (struct floatformat): Add field \"is_valid\"."}, {"sha": "5496ff24071a6ccf87eaaf319eb8cf08387d8a49", "filename": "include/obstack.h", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc70e81d6e03635053815aba4360da3356ae5b24/include%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc70e81d6e03635053815aba4360da3356ae5b24/include%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobstack.h?ref=dc70e81d6e03635053815aba4360da3356ae5b24", "patch": "@@ -343,7 +343,7 @@ extern int obstack_exit_failure;\n \n #endif\n \n-#define obstack_1grow_fast(h,achar) (*((h)->next_free)++ = achar)\n+#define obstack_1grow_fast(h,achar) (*((h)->next_free)++ = (achar))\n \n #define obstack_blank_fast(h,n) ((h)->next_free += (n))\n \n@@ -411,7 +411,7 @@ __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + 1 > __o->chunk_limit)\t\t\t\t\\\n      _obstack_newchunk (__o, 1);\t\t\t\t\t\\\n-   *(__o->next_free)++ = (datum);\t\t\t\t\t\\\n+   obstack_1grow_fast (__o, datum);\t\t\t\t\t\\\n    (void) 0; })\n \n /* These assume that the obstack alignment is good enough for pointers or ints,\n@@ -423,27 +423,36 @@ __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + sizeof (void *) > __o->chunk_limit)\t\t\\\n      _obstack_newchunk (__o, sizeof (void *));\t\t\t\t\\\n-   *((void **)__o->next_free)++ = ((void *)datum);\t\t\t\\\n-   (void) 0; })\n+   obstack_ptr_grow_fast (__o, datum); })\n \n # define obstack_int_grow(OBSTACK,datum)\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    if (__o->next_free + sizeof (int) > __o->chunk_limit)\t\t\\\n      _obstack_newchunk (__o, sizeof (int));\t\t\t\t\\\n-   *((int *)__o->next_free)++ = ((int)datum);\t\t\t\t\\\n+   obstack_int_grow_fast (__o, datum); })\n+\n+# define obstack_ptr_grow_fast(OBSTACK,aptr)\t\t\t\t\\\n+__extension__\t\t\t\t\t\t\t\t\\\n+({ struct obstack *__o1 = (OBSTACK);\t\t\t\t\t\\\n+   *(const void **) __o1->next_free = (aptr);\t\t\t\t\\\n+   __o1->next_free += sizeof (const void *);\t\t\t\t\\\n    (void) 0; })\n \n-# define obstack_ptr_grow_fast(h,aptr) (*((void **) (h)->next_free)++ = (void *)aptr)\n-# define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n+# define obstack_int_grow_fast(OBSTACK,aint)\t\t\t\t\\\n+__extension__\t\t\t\t\t\t\t\t\\\n+({ struct obstack *__o1 = (OBSTACK);\t\t\t\t\t\\\n+   *(int *) __o1->next_free = (aint);\t\t\t\t\t\\\n+   __o1->next_free += sizeof (int);\t\t\t\t\t\\\n+   (void) 0; })\n \n # define obstack_blank(OBSTACK,length)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({ struct obstack *__o = (OBSTACK);\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->chunk_limit - __o->next_free < __len)\t\t\t\\\n      _obstack_newchunk (__o, __len);\t\t\t\t\t\\\n-   __o->next_free += __len;\t\t\t\t\t\t\\\n+   obstack_blank_fast (__o, __len);\t\t\t\t\t\\\n    (void) 0; })\n \n # define obstack_alloc(OBSTACK,length)\t\t\t\t\t\\\n@@ -530,26 +539,29 @@ __extension__\t\t\t\t\t\t\t\t\\\n # define obstack_1grow(h,datum)\t\t\t\t\t\t\\\n ( (((h)->next_free + 1 > (h)->chunk_limit)\t\t\t\t\\\n    ? (_obstack_newchunk ((h), 1), 0) : 0),\t\t\t\t\\\n-  (*((h)->next_free)++ = (datum)))\n+  obstack_1grow_fast (h, datum))\n \n # define obstack_ptr_grow(h,datum)\t\t\t\t\t\\\n ( (((h)->next_free + sizeof (char *) > (h)->chunk_limit)\t\t\\\n    ? (_obstack_newchunk ((h), sizeof (char *)), 0) : 0),\t\t\\\n-  (*((char **) (((h)->next_free+=sizeof(char *))-sizeof(char *))) = ((char *) datum)))\n+  obstack_ptr_grow_fast (h, datum))\n \n # define obstack_int_grow(h,datum)\t\t\t\t\t\\\n ( (((h)->next_free + sizeof (int) > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), sizeof (int)), 0) : 0),\t\t\t\\\n-  (*((int *) (((h)->next_free+=sizeof(int))-sizeof(int))) = ((int) datum)))\n+  obstack_int_grow_fast (h, datum))\n+\n+# define obstack_ptr_grow_fast(h,aptr)\t\t\t\t\t\\\n+  (((const void **) ((h)->next_free += sizeof (void *)))[-1] = (aptr))\n \n-# define obstack_ptr_grow_fast(h,aptr) (*((char **) (h)->next_free)++ = (char *) aptr)\n-# define obstack_int_grow_fast(h,aint) (*((int *) (h)->next_free)++ = (int) aint)\n+# define obstack_int_grow_fast(h,aint)\t\t\t\t\t\\\n+  (((int *) ((h)->next_free += sizeof (int)))[-1] = (aptr))\n \n # define obstack_blank(h,length)\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->chunk_limit - (h)->next_free < (h)->temp)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),\t\t\t\\\n-  ((h)->next_free += (h)->temp))\n+  obstack_blank_fast (h, (h)->temp))\n \n # define obstack_alloc(h,length)\t\t\t\t\t\\\n  (obstack_blank ((h), (length)), obstack_finish ((h)))"}]}