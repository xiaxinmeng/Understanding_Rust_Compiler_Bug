{"sha": "3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjMTA0YmRiNGI1YWE5OWZmNmRjZWIyNDZiZWFhNjViMDEyYzVhYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-06T12:43:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-06T12:43:30Z"}, "message": "re PR tree-optimization/88828 (Inefficient update of the first element of vector registers)\n\n2019-05-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88828\n\t* tree-ssa-forwprop.c (get_bit_field_ref_def): Split out from...\n\t(simplify_vector_constructor): ...here.  Handle constants in\n\tthe constructor.\n\n\t* gcc.target/i386/pr88828-0.c: New testcase.\n\nFrom-SVN: r270908", "tree": {"sha": "39d90f77cf71421e0b2a609962fafac564d85c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d90f77cf71421e0b2a609962fafac564d85c84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d0b81c64c05f40b94bd221558d0339c732d8cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0b81c64c05f40b94bd221558d0339c732d8cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0b81c64c05f40b94bd221558d0339c732d8cc4"}], "stats": {"total": 198, "additions": 143, "deletions": 55}, "files": [{"sha": "3e9b69be2f075cef449e373c1a75fa0635414853", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "patch": "@@ -1,3 +1,10 @@\n+2019-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88828\n+\t* tree-ssa-forwprop.c (get_bit_field_ref_def): Split out from...\n+\t(simplify_vector_constructor): ...here.  Handle constants in\n+\tthe constructor.\n+\n 2019-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90328"}, {"sha": "37887397d747267bf4366058e6f5b8e09660dc14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "patch": "@@ -1,3 +1,8 @@\n+2019-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88828\n+\t* gcc.target/i386/pr88828-0.c: New testcase.\n+\n 2019-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90328"}, {"sha": "3ddb2d135260e92686fcae19bd17efe3adedeb11", "filename": "gcc/testsuite/gcc.target/i386/pr88828-0.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-0.c?ref=3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.2\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef float v4sf __attribute__((vector_size(16)));\n+\n+v4si foo (v4si x)\n+{\n+  return (v4si){ x[0], 1, x[2], 3 };\n+}\n+\n+/* { dg-final { scan-assembler \"pblendw\" } } */\n+\n+v4si bar (v4sf x)\n+{\n+  return (v4si){ 1, x[1], x[2], 3 };\n+}\n+\n+/* { dg-final { scan-assembler \"cvttps2dq\" } } */\n+/* { dg-final { scan-assembler \"pblendw\" } } */\n+\n+v4si baz (v4si x)\n+{\n+  return (v4si) { x[1], x[2], x[3], 0 };\n+}\n+\n+/* { dg-final { scan-assembler \"psrldq\" } } */"}, {"sha": "7dd1e64335ac65d8442e11f95af22e760cb77956", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 104, "deletions": 55, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac", "patch": "@@ -1997,17 +1997,54 @@ simplify_permutation (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n+/* Get the BIT_FIELD_REF definition of VAL, if any, looking through\n+   conversions with code CONV_CODE or update it if still ERROR_MARK.\n+   Return NULL_TREE if no such matching def was found.  */\n+\n+static tree\n+get_bit_field_ref_def (tree val, enum tree_code &conv_code)\n+{\n+  if (TREE_CODE (val) != SSA_NAME)\n+    return NULL_TREE ;\n+  gimple *def_stmt = get_prop_source_stmt (val, false, NULL);\n+  if (!def_stmt)\n+    return NULL_TREE;\n+  enum tree_code code = gimple_assign_rhs_code (def_stmt);\n+  if (code == FLOAT_EXPR\n+      || code == FIX_TRUNC_EXPR)\n+    {\n+      tree op1 = gimple_assign_rhs1 (def_stmt);\n+      if (conv_code == ERROR_MARK)\n+\t{\n+\t  if (maybe_ne (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (val))),\n+\t\t\tGET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op1)))))\n+\t    return NULL_TREE;\n+\t  conv_code = code;\n+\t}\n+      else if (conv_code != code)\n+\treturn NULL_TREE;\n+      if (TREE_CODE (op1) != SSA_NAME)\n+\treturn NULL_TREE;\n+      def_stmt = SSA_NAME_DEF_STMT (op1);\n+      if (! is_gimple_assign (def_stmt))\n+\treturn NULL_TREE;\n+      code = gimple_assign_rhs_code (def_stmt);\n+    }\n+  if (code != BIT_FIELD_REF)\n+    return NULL_TREE;\n+  return gimple_assign_rhs1 (def_stmt);\n+}\n+\n /* Recognize a VEC_PERM_EXPR.  Returns true if there were any changes.  */\n \n static bool\n simplify_vector_constructor (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n-  gimple *def_stmt;\n   tree op, op2, orig[2], type, elem_type;\n   unsigned elem_size, i;\n   unsigned HOST_WIDE_INT nelts;\n-  enum tree_code code, conv_code;\n+  enum tree_code conv_code;\n   constructor_elt *elt;\n   bool maybe_ident;\n \n@@ -2027,75 +2064,67 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   orig[1] = NULL;\n   conv_code = ERROR_MARK;\n   maybe_ident = true;\n+  tree one_constant = NULL_TREE;\n+  auto_vec<tree> constants;\n+  constants.safe_grow_cleared (nelts);\n   FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (op), i, elt)\n     {\n       tree ref, op1;\n \n       if (i >= nelts)\n \treturn false;\n \n-      if (TREE_CODE (elt->value) != SSA_NAME)\n-\treturn false;\n-      def_stmt = get_prop_source_stmt (elt->value, false, NULL);\n-      if (!def_stmt)\n-\treturn false;\n-      code = gimple_assign_rhs_code (def_stmt);\n-      if (code == FLOAT_EXPR\n-\t  || code == FIX_TRUNC_EXPR)\n+      op1 = get_bit_field_ref_def (elt->value, conv_code);\n+      if (op1)\n \t{\n-\t  op1 = gimple_assign_rhs1 (def_stmt);\n-\t  if (conv_code == ERROR_MARK)\n+\t  ref = TREE_OPERAND (op1, 0);\n+\t  unsigned int j;\n+\t  for (j = 0; j < 2; ++j)\n \t    {\n-\t      if (maybe_ne (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (elt->value))),\n-\t\t\t    GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op1)))))\n-\t\treturn false;\n-\t      conv_code = code;\n+\t      if (!orig[j])\n+\t\t{\n+\t\t  if (TREE_CODE (ref) != SSA_NAME)\n+\t\t    return false;\n+\t\t  if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n+\t\t      || ! useless_type_conversion_p (TREE_TYPE (op1),\n+\t\t\t\t\t\t      TREE_TYPE (TREE_TYPE (ref))))\n+\t\t    return false;\n+\t\t  if (j && !useless_type_conversion_p (TREE_TYPE (orig[0]),\n+\t\t\t\t\t\t       TREE_TYPE (ref)))\n+\t\t    return false;\n+\t\t  orig[j] = ref;\n+\t\t  break;\n+\t\t}\n+\t      else if (ref == orig[j])\n+\t\tbreak;\n \t    }\n-\t  else if (conv_code != code)\n-\t    return false;\n-\t  if (TREE_CODE (op1) != SSA_NAME)\n+\t  if (j == 2)\n \t    return false;\n-\t  def_stmt = SSA_NAME_DEF_STMT (op1);\n-\t  if (! is_gimple_assign (def_stmt))\n+\n+\t  unsigned int elt;\n+\t  if (maybe_ne (bit_field_size (op1), elem_size)\n+\t      || !constant_multiple_p (bit_field_offset (op1), elem_size, &elt))\n \t    return false;\n-\t  code = gimple_assign_rhs_code (def_stmt);\n+\t  if (j)\n+\t    elt += nelts;\n+\t  if (elt != i)\n+\t    maybe_ident = false;\n+\t  sel.quick_push (elt);\n \t}\n-      if (code != BIT_FIELD_REF)\n-\treturn false;\n-      op1 = gimple_assign_rhs1 (def_stmt);\n-      ref = TREE_OPERAND (op1, 0);\n-      unsigned int j;\n-      for (j = 0; j < 2; ++j)\n+      else if (CONSTANT_CLASS_P (elt->value))\n \t{\n-\t  if (!orig[j])\n-\t    {\n-\t      if (TREE_CODE (ref) != SSA_NAME)\n-\t\treturn false;\n-\t      if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n-\t\t  || ! useless_type_conversion_p (TREE_TYPE (op1),\n-\t\t\t\t\t\t  TREE_TYPE (TREE_TYPE (ref))))\n-\t\treturn false;\n-\t      if (j && !useless_type_conversion_p (TREE_TYPE (orig[0]),\n-\t\t\t\t\t\t   TREE_TYPE (ref)))\n-\t\treturn false;\n-\t      orig[j] = ref;\n-\t      break;\n-\t    }\n-\t  else if (ref == orig[j])\n-\t    break;\n+\t  if (orig[1]\n+\t      && orig[1] != error_mark_node)\n+\t    return false;\n+\t  orig[1] = error_mark_node;\n+\t  if (!one_constant)\n+\t    one_constant = elt->value;\n+\t  constants[i] = elt->value;\n+\t  sel.quick_push (i + nelts);\n+\t  maybe_ident = false;\n \t}\n-      if (j == 2)\n-\treturn false;\n-\n-      unsigned int elt;\n-      if (maybe_ne (bit_field_size (op1), elem_size)\n-\t  || !constant_multiple_p (bit_field_offset (op1), elem_size, &elt))\n+      else\n \treturn false;\n-      if (j)\n-\telt += nelts;\n-      if (elt != i)\n-\tmaybe_ident = false;\n-      sel.quick_push (elt);\n     }\n   if (i < nelts)\n     return false;\n@@ -2138,9 +2167,29 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       op2 = vec_perm_indices_to_tree (mask_type, indices);\n       if (!orig[1])\n \torig[1] = orig[0];\n+      if (orig[1] == error_mark_node)\n+\t{\n+\t  tree_vector_builder vec (type, nelts, 1);\n+\t  for (unsigned i = 0; i < nelts; ++i)\n+\t    if (constants[i])\n+\t      vec.quick_push (constants[i]);\n+\t    else\n+\t      /* ??? Push a don't-care value.  */\n+\t      vec.quick_push (one_constant);\n+\t  orig[1] = vec.build ();\n+\t}\n       if (conv_code == ERROR_MARK)\n \tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig[0],\n \t\t\t\t\torig[1], op2);\n+      else if (TREE_CODE (orig[1]) == VECTOR_CST)\n+\t{\n+\t  gimple *conv\n+\t    = gimple_build_assign (make_ssa_name (type), conv_code, orig[0]);\n+\t  orig[0] = gimple_assign_lhs (conv);\n+\t  gsi_insert_before (gsi, conv, GSI_SAME_STMT);\n+\t  gimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR,\n+\t\t\t\t\t  orig[0], orig[1], op2);\n+\t}\n       else\n \t{\n \t  gimple *perm"}]}