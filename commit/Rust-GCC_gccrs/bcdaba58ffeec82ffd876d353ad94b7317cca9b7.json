{"sha": "bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkYWJhNThmZmVlYzgyZmZkODc2ZDM1M2FkOTRiNzMxN2NjYTliNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-14T03:43:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-14T03:43:49Z"}, "message": "rtl.c (dump_and_abort): Remove.\n\n        * rtl.c (dump_and_abort): Remove.\n        (fatal_with_file_and_line): New.\n        (fatal_expected_char): New.\n        (read_rtx_lineno, read_rtx_filename): New.\n        (read_skip_spaces): Track line number.\n        (read_name): Use fatal_with_file_and_line.\n        (read_rtx): Use fatal_expected_char.  Track line number.\n        * rtl.h (read_rtx_filename, read_rtx_lineno): Declare.\n\n        * print-rtl.c (print_rtx): Don't special case LABEL_REF argument\n        if it isn't a CODE_LABEL.\n\n        * genattr.c (main): Set read_rtx_filename.\n        * genattrtab.c (main): Likewise.\n        * gencodes.c (main): Likewise.\n        * genconfig.c (main): Likewise.\n        * genemit.c (main): Likewise.\n        * genextract.c (main): Likewise.\n        * genflags.c (main): Likewise.\n        * genopinit.c (main): Likewise.\n        * genoutput.c (main): Likewise.\n        * genpeep.c (main): Likewise.\n\n        * genrecog.c (decision_test.u.insn): Add `lineno'.\n        (pattern_lineno, error_count): New variables.\n        (message_with_line): New.\n        (add_to_sequence): Break out checking code to ...\n        (validate_pattern): ... here.  Detect SET_DEST matching CONST_INT.\n        (merge_insn): Use message_with_line.\n        (make_insn_sequence): Use validate_pattern.  Record insn lineno.\n        (main): Set read_rtx_filename, pattern_lineno.  Exit early on error.\n\nFrom-SVN: r29957", "tree": {"sha": "fe06a5500da62a2f74458666d1bd2734e008e04b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe06a5500da62a2f74458666d1bd2734e008e04b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/comments", "author": null, "committer": null, "parents": [{"sha": "a59f86402f8ffb904e9dccb10568371a890e1f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59f86402f8ffb904e9dccb10568371a890e1f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59f86402f8ffb904e9dccb10568371a890e1f30"}], "stats": {"total": 443, "additions": 343, "deletions": 100}, "files": [{"sha": "96088ddcf029a33e611816f55ea63525f5dae966", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -1,3 +1,37 @@\n+Wed Oct 13 20:35:16 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtl.c (dump_and_abort): Remove.\n+\t(fatal_with_file_and_line): New.\n+\t(fatal_expected_char): New.\n+\t(read_rtx_lineno, read_rtx_filename): New.\n+\t(read_skip_spaces): Track line number.\n+\t(read_name): Use fatal_with_file_and_line.\n+\t(read_rtx): Use fatal_expected_char.  Track line number.\n+\t* rtl.h (read_rtx_filename, read_rtx_lineno): Declare.\n+\n+\t* print-rtl.c (print_rtx): Don't special case LABEL_REF argument\n+\tif it isn't a CODE_LABEL.\n+\n+\t* genattr.c (main): Set read_rtx_filename.\n+\t* genattrtab.c (main): Likewise.\n+\t* gencodes.c (main): Likewise.\n+\t* genconfig.c (main): Likewise.\n+\t* genemit.c (main): Likewise.\n+\t* genextract.c (main): Likewise.\n+\t* genflags.c (main): Likewise.\n+\t* genopinit.c (main): Likewise.\n+\t* genoutput.c (main): Likewise.\n+\t* genpeep.c (main): Likewise.\n+\n+\t* genrecog.c (decision_test.u.insn): Add `lineno'.\n+\t(pattern_lineno, error_count): New variables.\n+\t(message_with_line): New.\n+\t(add_to_sequence): Break out checking code to ...\n+\t(validate_pattern): ... here.  Detect SET_DEST matching CONST_INT.\n+\t(merge_insn): Use message_with_line.\n+\t(make_insn_sequence): Use validate_pattern.  Record insn lineno.\n+\t(main): Set read_rtx_filename, pattern_lineno.  Exit early on error.\n+\n Wed Oct 13 22:01:35 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* expr.c (store_constructor): Clear union if constructor is empty."}, {"sha": "c5611ffa285e53ff734f9d7a7bd60c5b04e6dbec", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -251,6 +251,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `genattr'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "3494ad202ba080d5bdf996c244a17b0d9f772ab2", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -6000,6 +6000,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   /* Set up true and false rtx's */\n   true_rtx = rtx_alloc (CONST_INT);"}, {"sha": "2dccfe56ebcd662d3f73b698ce82d164cc62b21f", "filename": "gcc/gencodes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -98,6 +98,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `gencodes'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "574e28623d0dd835a8f20b330e72dfdf13e15279", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -297,6 +297,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `genconfig'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "0bec2093fa7d878a01222c373c58be2a8c5f772c", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -787,6 +787,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   /* Assign sequential codes to all entries in the machine description\n      in parallel with the tables in insn-output.c.  */"}, {"sha": "a2ac8721c3932c13622122cc941a357c813c0aa5", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -400,6 +400,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   /* Assign sequential codes to all entries in the machine description\n      in parallel with the tables in insn-output.c.  */"}, {"sha": "45cf4febbc52c15ed303f8404c6e7a37c0f4de25", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -224,6 +224,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `genflags'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "4f950e5daa838ef7c9d62d117564a0d6f5d7f2f8", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -327,6 +327,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `genopinit'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "4cb9c00b6490672057d29485033fbe8e210e6be5", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -907,6 +907,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   output_prologue ();\n   next_code_number = 0;"}, {"sha": "992381dfb8b9710ef1219e15875e90951403c2a4", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -424,6 +424,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return (FATAL_EXIT_CODE);\n     }\n+  read_rtx_filename = argv[1];\n \n   printf (\"/* Generated automatically by the program `genpeep'\\n\\\n from the machine description file `md'.  */\\n\\n\");"}, {"sha": "0be55586df3b2c1eef532ac8f20fc534a9fcf125", "filename": "gcc/genrecog.c", "status": "modified", "additions": 184, "deletions": 40, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -115,6 +115,7 @@ struct decision_test\n \n     struct {\n       int code_number;\t\t/* Insn number matched.  */\n+      int lineno;\t\t/* Line number of the insn.  */\n       int num_clobbers_to_add;\t/* Number of CLOBBERs to be added.  */\n     } insn;\n   } u;\n@@ -170,6 +171,12 @@ static int next_index;\n    allocate in each subroutine we make.  */\n \n static int max_depth;\n+\n+/* The line number of the start of the pattern currently being processed.  */\n+static int pattern_lineno;\n+\n+/* Count of errors.  */\n+static int error_count;\n \f\n /* This table contains a list of the rtl codes that can possibly match a\n    predicate defined in recog.c.  The function `maybe_both_true' uses it to\n@@ -213,6 +220,8 @@ static struct decision *new_decision\n   PROTO((const char *, struct decision_head *));\n static struct decision_test *new_decision_test\n   PROTO((enum decision_type, struct decision_test ***));\n+static void validate_pattern\n+  PROTO((rtx, int));\n static struct decision *add_to_sequence\n   PROTO((rtx, struct decision_head *, const char *, enum routine_type, int));\n \n@@ -284,6 +293,29 @@ static void debug_decision_2\n extern void debug_decision\n   PROTO((struct decision *));\n \f\n+static void\n+message_with_line VPROTO ((int lineno, const char *msg, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  int lineno;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, msg);\n+\n+#ifndef ANSI_PROTOTYPES\n+  lineno = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  fprintf (stderr, \"%s:%d: \", read_rtx_filename, lineno);\n+  vfprintf (stderr, msg, ap);\n+  fputc ('\\n', stderr);\n+\n+  va_end (ap);\n+}\n+\f\n /* Create a new node in sequence after LAST.  */\n \n static struct decision *\n@@ -324,6 +356,142 @@ new_decision_test (type, pplace)\n   return test;\n }\n \n+/* Check for various errors in patterns.  */\n+\n+static void\n+validate_pattern (pattern, set_dest)\n+     rtx pattern;\n+     int set_dest;\n+{\n+  const char *fmt;\n+  RTX_CODE code;\n+  int i, j, len;\n+\n+  code = GET_CODE (pattern);\n+  switch (code)\n+    {\n+    case MATCH_SCRATCH:\n+    case MATCH_INSN:\n+      return;\n+\n+    case MATCH_OPERAND:\n+      {\n+\tconst char *pred_name = XSTR (pattern, 1);\n+\n+\tif (pred_name[0] != 0)\n+\t  {\n+\t    /* See if we know about this predicate and save its number.  If\n+\t       we do, and it only accepts one code, note that fact.  The\n+\t       predicate `const_int_operand' only tests for a CONST_INT, so\n+\t       if we do so we can avoid calling it at all.\n+\n+\t       Finally, if we know that the predicate does not allow\n+\t       CONST_INT, we know that the only way the predicate can match\n+\t       is if the modes match (here we use the kludge of relying on\n+\t       the fact that \"address_operand\" accepts CONST_INT; otherwise,\n+\t       it would have to be a special case), so we can test the mode\n+\t       (but we need not).  This fact should considerably simplify the\n+\t       generated code.  */\n+\n+\t    for (i = 0; i < (int) NUM_KNOWN_PREDS; i++)\n+\t      if (! strcmp (preds[i].name, pred_name))\n+\t\tbreak;\n+\n+\t    if (i < (int) NUM_KNOWN_PREDS)\n+\t      {\n+\t\tint j, allows_const_int;\n+\n+\t\tallows_const_int = 0;\n+\t\tfor (j = 0; preds[i].codes[j] != 0; j++)\n+\t\t  if (preds[i].codes[j] == CONST_INT)\n+\t\t    {\n+\t\t      allows_const_int = 1;\n+\t\t      break;\n+\t\t    }\n+\n+\t\tif (allows_const_int && set_dest)\n+\t\t  {\n+\t\t    message_with_line (pattern_lineno,\n+\t\t\t\t       \"warning: `%s' accepts const_int,\",\n+\t\t\t\t       pred_name);\n+\t\t    message_with_line (pattern_lineno,\n+\t\t\t\t       \"  and used as destination of a set\");\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+#ifdef PREDICATE_CODES\n+\t\t/* If the port has a list of the predicates it uses but\n+\t\t   omits one, warn.  */\n+\t\tmessage_with_line (pattern_lineno, \"warning: `%s' not in PREDICATE_CODES\", pred_name);\n+#endif\n+\t      }\n+\t  }\n+\n+\treturn;\n+      }\n+\n+    case SET:\n+      /* The operands of a SET must have the same mode unless one\n+\t is VOIDmode.  */\n+      if (GET_MODE (SET_SRC (pattern)) != VOIDmode\n+\t  && GET_MODE (SET_DEST (pattern)) != VOIDmode\n+\t  && GET_MODE (SET_SRC (pattern)) != GET_MODE (SET_DEST (pattern))\n+\t  /* The mode of an ADDRESS_OPERAND is the mode of the memory\n+\t     reference, not the mode of the address.  */\n+\t  && ! (GET_CODE (SET_SRC (pattern)) == MATCH_OPERAND\n+\t\t&& ! strcmp (XSTR (SET_SRC (pattern), 1), \"address_operand\")))\n+\t{\n+\t  message_with_line (pattern_lineno,\n+\t\t\t     \"mode mismatch in set: %smode vs %smode\",\n+\t\t\t     GET_MODE_NAME (GET_MODE (SET_DEST (pattern))),\n+\t\t\t     GET_MODE_NAME (GET_MODE (SET_SRC (pattern))));\n+\t  error_count++;\n+\t}\n+\n+      validate_pattern (SET_DEST (pattern), 1);\n+      validate_pattern (SET_SRC (pattern), 0);\n+      return;\n+      \n+    case LABEL_REF:\n+      if (GET_MODE (XEXP (pattern, 0)) != VOIDmode)\n+\t{\n+\t  message_with_line (pattern_lineno,\n+\t\t\t     \"operand to label_ref %smode not VOIDmode\",\n+\t\t\t     GET_MODE_NAME (GET_MODE (XEXP (pattern, 0))));\n+\t  error_count++;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  len = GET_RTX_LENGTH (code);\n+  for (i = 0; i < len; i++)\n+    {\n+      switch (fmt[i])\n+\t{\n+\tcase 'e': case 'u':\n+\t  validate_pattern (XEXP (pattern, i), 0);\n+\t  break;\n+\n+\tcase 'E':\n+\t  for (j = 0; j < XVECLEN (pattern, i); j++)\n+\t    validate_pattern (XVECEXP (pattern, i, j), 0);\n+\t  break;\n+\n+\tcase 'i': case 'w': case '0': case 's':\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+\n+}\n+\n /* Create a chain of nodes to verify that an rtl expression matches\n    PATTERN.\n \n@@ -465,15 +633,7 @@ add_to_sequence (pattern, last, position, insn_type, top)\n \t\t    }\n \t      }\n \t    else\n-\t      {\n-\t\ttest->u.pred.index = -1;\n-#ifdef PREDICATE_CODES\n-\t\t/* If the port has a list of the predicates it uses but\n-\t\t   omits one, warn.  */\n-\t\tfprintf (stderr, \"Warning: `%s' not in PREDICATE_CODES\\n\",\n-\t\t\t pred_name);\n-#endif\n-\t      }\n+\t      test->u.pred.index = -1;\n \t  }\n \n \t/* Can't enforce a mode if we allow const_int.  */\n@@ -526,32 +686,6 @@ add_to_sequence (pattern, last, position, insn_type, top)\n       pattern = XEXP (pattern, 0);\n       goto restart;\n \n-    case SET:\n-      /* The operands of a SET must have the same mode unless one\n-\t is VOIDmode.  */\n-      if (GET_MODE (SET_SRC (pattern)) != VOIDmode\n-\t  && GET_MODE (SET_DEST (pattern)) != VOIDmode\n-\t  && GET_MODE (SET_SRC (pattern)) != GET_MODE (SET_DEST (pattern))\n-\t  /* The mode of an ADDRESS_OPERAND is the mode of the memory\n-\t     reference, not the mode of the address.  */\n-\t  && ! (GET_CODE (SET_SRC (pattern)) == MATCH_OPERAND\n-\t\t&& ! strcmp (XSTR (SET_SRC (pattern), 1), \"address_operand\")))\n-\t{\n-\t  print_rtl (stderr, pattern);\n-\t  fputc ('\\n', stderr);\n-\t  fatal (\"mode mismatch in SET\");\n-\t}\n-      break;\n-      \n-    case LABEL_REF:\n-      if (GET_MODE (XEXP (pattern, 0)) != VOIDmode)\n-\t{\n-\t  print_rtl (stderr, pattern);\n-\t  fputc ('\\n', stderr);\n-\t  fatal (\"operand to LABEL_REF not VOIDmode\");\n-\t}\n-      break;\n-\n     default:\n       break;\n     }\n@@ -966,11 +1100,12 @@ merge_accept_insn (oldd, addd)\n     }\n   else\n     {\n-      fatal (\"Two actions at one point in tree for insns \\\"%s\\\" (%d) and \\\"%s\\\" (%d)\",\n-\t     get_insn_name (old->u.insn.code_number),\n-\t     old->u.insn.code_number,\n-\t     get_insn_name (add->u.insn.code_number),\n-\t     add->u.insn.code_number);\n+      message_with_line (add->u.insn.lineno, \"`%s' matches `%s'\",\n+\t\t\t get_insn_name (add->u.insn.code_number),\n+\t\t\t get_insn_name (old->u.insn.code_number));\n+      message_with_line (old->u.insn.lineno, \"previous definition of `%s'\",\n+\t\t\t get_insn_name (old->u.insn.code_number));\n+      error_count++;\n     }\n }\n \n@@ -2015,6 +2150,8 @@ make_insn_sequence (insn, type)\n       PUT_MODE (x, VOIDmode);\n     }\n \n+  validate_pattern (x, 0);\n+\n   memset(&head, 0, sizeof(head));\n   last = add_to_sequence (x, &head, \"\", type, 1);\n \n@@ -2037,6 +2174,7 @@ make_insn_sequence (insn, type)\n \n   test = new_decision_test (DT_accept_insn, &place);\n   test->u.insn.code_number = next_insn_code;\n+  test->u.insn.lineno = pattern_lineno;\n   test->u.insn.num_clobbers_to_add = 0;\n \n   switch (type)\n@@ -2103,6 +2241,7 @@ make_insn_sequence (insn, type)\n \n \t      test = new_decision_test (DT_accept_insn, &place);\n \t      test->u.insn.code_number = next_insn_code;\n+\t      test->u.insn.lineno = pattern_lineno;\n \t      test->u.insn.num_clobbers_to_add = XVECLEN (x, 0) - i;\n \n \t      merge_trees (&head, &clobber_head);\n@@ -2171,6 +2310,7 @@ main (argc, argv)\n       perror (argv[1]);\n       return FATAL_EXIT_CODE;\n     }\n+  read_rtx_filename = argv[1];\n \n   next_insn_code = 0;\n   next_index = 0;\n@@ -2185,6 +2325,7 @@ main (argc, argv)\n       if (c == EOF)\n \tbreak;\n       ungetc (c, infile);\n+      pattern_lineno = read_rtx_lineno;\n \n       desc = read_rtx (infile);\n       if (GET_CODE (desc) == DEFINE_INSN)\n@@ -2209,6 +2350,9 @@ main (argc, argv)\n       next_index++;\n     }\n \n+  if (error_count)\n+    return FATAL_EXIT_CODE;\n+\n   puts (\"\\n\\n\");\n \n   process_tree (&recog_tree, RECOG);"}, {"sha": "1c503c103ea3a4ba3a59bafbc2947a6fc4986f47", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -200,6 +200,7 @@ print_rtx (in_rtx)\n \tbreak;\n \n       case 'e':\n+      do_e:\n \tindent += 2;\n \tif (!sawclose)\n \t  fprintf (outfile, \" \");\n@@ -298,6 +299,9 @@ print_rtx (in_rtx)\n       case 'u':\n \tif (XEXP (in_rtx, i) != NULL)\n \t  {\n+\t    if (GET_CODE (XEXP (in_rtx, i)) != CODE_LABEL)\n+\t      goto do_e;\n+\n \t    if (flag_dump_unnumbered)\n \t      fputc ('#', outfile);\n \t    else"}, {"sha": "55687c8196328d8567bf15dc2f4e23f4060cf2af", "filename": "gcc/rtl.c", "status": "modified", "additions": 103, "deletions": 51, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -259,7 +259,9 @@ const char * const reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"\n \t\t\t  \"REG_FRAME_RELATED_EXPR\", \"REG_EH_REGION\",\n \t\t\t  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\" };\n \n-static void dump_and_abort\tPROTO((int, int, FILE *)) ATTRIBUTE_NORETURN;\n+static void fatal_with_file_and_line PVPROTO((FILE *, const char *, ...))\n+  ATTRIBUTE_NORETURN;\n+static void fatal_expected_char PROTO((FILE *, int, int)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPROTO((char *, FILE *));\n static const char *trim_filename PROTO((const char *));\n \f\n@@ -582,30 +584,64 @@ shallow_copy_rtx (orig)\n \f\n /* Subroutines of read_rtx.  */\n \n-/* Dump code after printing a message.  Used when read_rtx finds\n-   invalid data.  */\n+/* The current line number for the file.  */\n+int read_rtx_lineno = 1;\n+\n+/* The filename for aborting with file and line.  */\n+const char *read_rtx_filename = \"<unknown>\";\n \n static void\n-dump_and_abort (expected_c, actual_c, infile)\n-     int expected_c, actual_c;\n-     FILE *infile;\n+fatal_with_file_and_line VPROTO((FILE *infile, const char *msg, ...))\n {\n-  int c, i;\n-\n-  if (expected_c >= 0)\n-    fprintf (stderr,\n-\t     \"Expected character %c.  Found character %c.\",\n-\t     expected_c, actual_c);\n-  fprintf (stderr, \"  At file position: %ld\\n\", ftell (infile));\n-  fprintf (stderr, \"Following characters are:\\n\\t\");\n-  for (i = 0; i < 200; i++)\n+#ifndef ANSI_PROTOTYPES\n+  FILE *infile;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  char context[64];\n+  size_t i;\n+  int c;\n+\n+  VA_START (ap, msg);\n+\n+#ifndef ANSI_PROTOTYPES\n+  infile = va_arg (ap, FILE *);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  fprintf (stderr, \"%s:%d: \", read_rtx_filename, read_rtx_lineno);\n+  vfprintf (stderr, msg, ap);\n+  putc ('\\n', stderr);\n+\n+  /* Gather some following context.  */\n+  for (i = 0; i < sizeof(context)-1; ++i)\n     {\n       c = getc (infile);\n-      if (EOF == c) break;\n-      putc (c, stderr);\n+      if (c == EOF)\n+\tbreak;\n+      if (c == '\\r' || c == '\\n')\n+\tbreak;\n+      context[i] = c;\n     }\n-  fprintf (stderr, \"Aborting.\\n\");\n-  abort ();\n+  context[i] = '\\0';\n+\n+  fprintf (stderr, \"%s:%d: following context is `%s'\\n\",\n+\t   read_rtx_filename, read_rtx_lineno, context);\n+\n+  va_end (ap);\n+  exit (1);\n+}\n+\n+/* Dump code after printing a message.  Used when read_rtx finds\n+   invalid data.  */\n+\n+static void\n+fatal_expected_char (infile, expected_c, actual_c)\n+     FILE *infile;\n+     int expected_c, actual_c;\n+{\n+  fatal_with_file_and_line (infile, \"expected character `%c', found `%c'\",\n+\t\t\t    expected_c, actual_c);\n }\n \n /* Read chars from INFILE until a non-whitespace char\n@@ -618,33 +654,48 @@ read_skip_spaces (infile)\n      FILE *infile;\n {\n   register int c;\n-  while ((c = getc (infile)))\n+  while (1)\n     {\n-      if (c == ' ' || c == '\\n' || c == '\\t' || c == '\\f')\n-\t;\n-      else if (c == ';')\n-\t{\n-\t  while ((c = getc (infile)) && c != '\\n' && c != EOF)\n-\t    ;\n-\t}\n-      else if (c == '/')\n+      c = getc (infile);\n+      switch (c)\n \t{\n-\t  register int prevc;\n-\t  c = getc (infile);\n-\t  if (c != '*')\n-\t    dump_and_abort ('*', c, infile);\n+\tcase '\\n':\n+\t  read_rtx_lineno++;\n+\t  break;\n+\n+\tcase ' ': case '\\t': case '\\f': case '\\r':\n+\t  break;\n+\n+\tcase ';':\n+\t  do \n+\t    c = getc (infile);\n+\t  while (c != '\\n' && c != EOF);\n+\t  read_rtx_lineno++;\n+\t  break;\n+\n+\tcase '/':\n+\t  {\n+\t    register int prevc;\n+\t    c = getc (infile);\n+\t    if (c != '*')\n+\t      fatal_expected_char (infile, '*', c);\n \t  \n-\t  prevc = 0;\n-\t  while ((c = getc (infile)) && c != EOF)\n-\t    {\n-\t      if (prevc == '*' && c == '/')\n-\t\tbreak;\n-\t      prevc = c;\n-\t    }\n+\t    prevc = 0;\n+\t    while ((c = getc (infile)) && c != EOF)\n+\t      {\n+\t\tif (c == '\\n')\n+\t\t   read_rtx_lineno++;\n+\t        else if (prevc == '*' && c == '/')\n+\t\t  break;\n+\t        prevc = c;\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  return c;\n \t}\n-      else break;\n     }\n-  return c;\n }\n \n /* Read an rtx code name into the buffer STR[].\n@@ -675,10 +726,9 @@ read_name (str, infile)\n       c = getc (infile);\n     }\n   if (p == str)\n-    {\n-      fprintf (stderr, \"missing name or number\");\n-      dump_and_abort (-1, -1, infile);\n-    }\n+    fatal_with_file_and_line (infile, \"missing name or number\");\n+  if (c == '\\n')\n+    read_rtx_lineno++;\n \n   *p = 0;\n }\n@@ -745,12 +795,12 @@ read_rtx (infile)\n   struct rtx_list\n     {\n       struct rtx_list *next;\n-      rtx value;\t\t/* Value of this node...\t\t*/\n+      rtx value;\t\t/* Value of this node.  */\n     };\n \n   c = read_skip_spaces (infile); /* Should be open paren.  */\n   if (c != '(')\n-    dump_and_abort ('(', c, infile);\n+    fatal_expected_char (infile, '(', c);\n \n   read_name (tmp_char, infile);\n \n@@ -831,7 +881,7 @@ read_rtx (infile)\n \n \t  c = read_skip_spaces (infile);\n \t  if (c != '[')\n-\t    dump_and_abort ('[', c, infile);\n+\t    fatal_expected_char (infile, '[', c);\n \n \t  /* add expressions to a list, while keeping a count */\n \t  next_rtx = NULL;\n@@ -887,11 +937,13 @@ read_rtx (infile)\n \t      c = read_skip_spaces (infile);\n \t    }\n \t  if (c != '\"')\n-\t    dump_and_abort ('\"', c, infile);\n+\t    fatal_expected_char (infile, '\"', c);\n \n \t  while (1)\n \t    {\n \t      c = getc (infile); /* Read the string  */\n+\t      if (c == '\\n')\n+\t\tread_rtx_lineno++;\n \t      if (c == '\\\\')\n \t\t{\n \t\t  c = getc (infile);\t/* Read the string  */\n@@ -916,7 +968,7 @@ read_rtx (infile)\n \t    {\n \t      c = read_skip_spaces (infile);\n \t      if (c != ')')\n-\t\tdump_and_abort (')', c, infile);\n+\t\tfatal_expected_char (infile, ')', c);\n \t    }\n \t  XSTR (return_rtx, i) = stringbuf;\n \t}\n@@ -959,7 +1011,7 @@ read_rtx (infile)\n \n   c = read_skip_spaces (infile);\n   if (c != ')')\n-    dump_and_abort (')', c, infile);\n+    fatal_expected_char (infile, ')', c);\n \n   return return_rtx;\n }"}, {"sha": "575c01a3f46374b675daa4de552ebe338f1dba19", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaba58ffeec82ffd876d353ad94b7317cca9b7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bcdaba58ffeec82ffd876d353ad94b7317cca9b7", "patch": "@@ -963,10 +963,6 @@ extern rtx gen_rtx\t\t\tPVPROTO((enum rtx_code,\n \t\t\t\t\t\t enum machine_mode, ...));\n extern rtvec gen_rtvec\t\t\tPVPROTO((int, ...));\n \n-#ifdef BUFSIZ\n-extern rtx read_rtx\t\t\tPROTO((FILE *));\n-#endif\n-\n extern char *oballoc\t\t\tPROTO((int));\n extern char *permalloc\t\t\tPROTO((int));\n extern rtx rtx_alloc\t\t\tPROTO((RTX_CODE));\n@@ -1379,10 +1375,6 @@ extern void gcc_obstack_init\t\tPROTO ((struct obstack *));\n extern void pop_obstacks\t\tPROTO ((void));\n extern void push_obstacks\t\tPROTO ((struct obstack *,\n \t\t\t\t\t\tstruct obstack *));\n-#ifdef BUFSIZ\n-extern int read_skip_spaces\t\tPROTO ((FILE *));\n-#endif\n-\n /* In cse.c */\n struct cse_basic_block_data;\n extern int rtx_cost\t\t\tPROTO ((rtx, enum rtx_code));\n@@ -1642,7 +1634,6 @@ extern void rrotate_double\tPROTO ((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t\tHOST_WIDE_INT *));\n \n /* In calls.c */\n-/* Emit library call.  */                                           \n extern void emit_library_call\t\tPVPROTO ((rtx, int, enum machine_mode,\n \t\t\t\t\t\t  int, ...));\n extern rtx emit_library_call_value\tPVPROTO((rtx, rtx, int,\n@@ -1662,6 +1653,14 @@ extern void init_varasm_once\t\tPROTO ((void));\n extern void init_rtl\t\t\tPROTO ((void));\n extern void rtx_free\t\t\tPROTO ((rtx));\n \n+#ifdef BUFSIZ\n+extern int read_skip_spaces\t\tPROTO ((FILE *));\n+extern rtx read_rtx\t\t\tPROTO ((FILE *));\n+#endif\n+\n+extern const char *read_rtx_filename;\n+extern int read_rtx_lineno;\n+\n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic\n    is duplicated in rtl.h and tree.h because every file that needs the"}]}