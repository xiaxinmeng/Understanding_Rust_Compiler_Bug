{"sha": "2098e43871b59e4b5da754392df2af416e4e899d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5OGU0Mzg3MWI1OWU0YjVkYTc1NDM5MmRmMmFmNDE2ZTRlODk5ZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-06-15T16:23:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-06-15T16:23:28Z"}, "message": "df-problems.c (df_lr_local_compute): Manually CSE PIC_OFFSET_TABLE_REGNUM.\n\n\t* df-problems.c (df_lr_local_compute): Manually CSE\n\tPIC_OFFSET_TABLE_REGNUM.\n\t* df-scan.c (df_get_regular_block_artificial_uses): Likewise.\n\t(df_get_entry_block_def_set, df_get_exit_block_use_set): Likewise.\n\nFrom-SVN: r175081", "tree": {"sha": "3b1416171706f88657f5e6d513ae9c2185cbfc7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b1416171706f88657f5e6d513ae9c2185cbfc7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2098e43871b59e4b5da754392df2af416e4e899d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098e43871b59e4b5da754392df2af416e4e899d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2098e43871b59e4b5da754392df2af416e4e899d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098e43871b59e4b5da754392df2af416e4e899d/comments", "author": null, "committer": null, "parents": [{"sha": "6beec6813aa23a06f56ba73b7fbfafe2e2662c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6beec6813aa23a06f56ba73b7fbfafe2e2662c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6beec6813aa23a06f56ba73b7fbfafe2e2662c26"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "6ce868bf82bb6953ce0a2978823e06944431876a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2098e43871b59e4b5da754392df2af416e4e899d", "patch": "@@ -1,3 +1,10 @@\n+2011-05-06  Jeff Law  <law@redhat.com>\n+\n+\t* df-problems.c (df_lr_local_compute): Manually CSE\n+\tPIC_OFFSET_TABLE_REGNUM.\n+\t* df-scan.c (df_get_regular_block_artificial_uses): Likewise.\n+\t(df_get_entry_block_def_set, df_get_exit_block_use_set): Likewise.\n+\n 2011-06-13  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (handle_alias_pairs): New function."}, {"sha": "59bed8bd66791a2bb08f68872ea49f217b1dfef6", "filename": "gcc/df-problems.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=2098e43871b59e4b5da754392df2af416e4e899d", "patch": "@@ -906,6 +906,7 @@ df_lr_local_compute (bitmap all_blocks ATTRIBUTE_UNUSED)\n      blocks within infinite loops.  */\n   if (!reload_completed)\n     {\n+      unsigned int pic_offset_table_regnum = PIC_OFFSET_TABLE_REGNUM;\n       /* Any reference to any pseudo before reload is a potential\n \t reference of the frame pointer.  */\n       bitmap_set_bit (&df->hardware_regs_used, FRAME_POINTER_REGNUM);\n@@ -919,9 +920,9 @@ df_lr_local_compute (bitmap all_blocks ATTRIBUTE_UNUSED)\n \n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */\n-      if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n-\t  && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n-\tbitmap_set_bit (&df->hardware_regs_used, PIC_OFFSET_TABLE_REGNUM);\n+      if (pic_offset_table_regnum != INVALID_REGNUM\n+\t  && fixed_regs[pic_offset_table_regnum])\n+\tbitmap_set_bit (&df->hardware_regs_used, pic_offset_table_regnum);\n     }\n \n   EXECUTE_IF_SET_IN_BITMAP (df_lr->out_of_date_transfer_functions, 0, bb_index, bi)"}, {"sha": "7179051f0b85684aa4973749e46d3a45257166a0", "filename": "gcc/df-scan.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098e43871b59e4b5da754392df2af416e4e899d/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=2098e43871b59e4b5da754392df2af416e4e899d", "patch": "@@ -3625,6 +3625,8 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n        live everywhere -- which might not already be the case for\n        blocks within infinite loops.  */\n     {\n+      unsigned int picreg = PIC_OFFSET_TABLE_REGNUM;\n+\n       /* Any reference to any pseudo before reload is a potential\n \t reference of the frame pointer.  */\n       bitmap_set_bit (regular_block_artificial_uses, FRAME_POINTER_REGNUM);\n@@ -3642,9 +3644,9 @@ df_get_regular_block_artificial_uses (bitmap regular_block_artificial_uses)\n \n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */\n-      if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n-\t  && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n-\tbitmap_set_bit (regular_block_artificial_uses, PIC_OFFSET_TABLE_REGNUM);\n+      if (picreg != INVALID_REGNUM\n+\t  && fixed_regs[picreg])\n+\tbitmap_set_bit (regular_block_artificial_uses, picreg);\n     }\n   /* The all-important stack pointer must always be live.  */\n   bitmap_set_bit (regular_block_artificial_uses, STACK_POINTER_REGNUM);\n@@ -3779,6 +3781,10 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n   /* These registers are live everywhere.  */\n   if (!reload_completed)\n     {\n+#ifdef PIC_OFFSET_TABLE_REGNUM\n+      unsigned int picreg = PIC_OFFSET_TABLE_REGNUM;\n+#endif\n+\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       /* Pseudos with argument area equivalences may require\n \t reloading via the argument pointer.  */\n@@ -3789,9 +3795,9 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n #ifdef PIC_OFFSET_TABLE_REGNUM\n       /* Any constant, or pseudo with constant equivalences, may\n \t require reloading from memory using the pic register.  */\n-      if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n-\t  && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n-\tbitmap_set_bit (entry_block_defs, PIC_OFFSET_TABLE_REGNUM);\n+      if (picreg != INVALID_REGNUM\n+\t  && fixed_regs[picreg])\n+\tbitmap_set_bit (entry_block_defs, picreg);\n #endif\n     }\n \n@@ -3889,6 +3895,7 @@ static void\n df_get_exit_block_use_set (bitmap exit_block_uses)\n {\n   unsigned int i;\n+  unsigned int picreg = PIC_OFFSET_TABLE_REGNUM;\n \n   bitmap_clear (exit_block_uses);\n \n@@ -3913,9 +3920,9 @@ df_get_exit_block_use_set (bitmap exit_block_uses)\n      Assume the pic register is not in use, or will be handled by\n      other means, if it is not fixed.  */\n   if (!PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n-      && (unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n-      && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n-    bitmap_set_bit (exit_block_uses, PIC_OFFSET_TABLE_REGNUM);\n+      && picreg != INVALID_REGNUM\n+      && fixed_regs[picreg])\n+    bitmap_set_bit (exit_block_uses, picreg);\n \n   /* Mark all global registers, and all registers used by the\n      epilogue as being live at the end of the function since they"}]}