{"sha": "2b5f08952775ead634c0020b2dcf9523414c8752", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1ZjA4OTUyNzc1ZWFkNjM0YzAwMjBiMmRjZjk1MjM0MTRjODc1Mg==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2014-05-20T20:12:22Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2014-05-20T20:12:22Z"}, "message": "add dbgcnt support for devirt\n\nFrom-SVN: r210657", "tree": {"sha": "01587269ffd956843f503c973e2d46f9e33e8016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01587269ffd956843f503c973e2d46f9e33e8016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b5f08952775ead634c0020b2dcf9523414c8752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5f08952775ead634c0020b2dcf9523414c8752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5f08952775ead634c0020b2dcf9523414c8752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5f08952775ead634c0020b2dcf9523414c8752/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c5f620306f1a53d0d0c5d75e77bd9c6af1e6cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5f620306f1a53d0d0c5d75e77bd9c6af1e6cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5f620306f1a53d0d0c5d75e77bd9c6af1e6cd1"}], "stats": {"total": 127, "additions": 100, "deletions": 27}, "files": [{"sha": "a3ba9adc4cd149b22151f56c19a8fca0f5dea69c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -1,3 +1,16 @@\n+2014-05-20  Xinliang David Li  <davidxl@google.com>\n+\n+\t* cgraphunit.c (walk_polymorphic_call_targets): Add\n+\tdbgcnt and fopt-info support.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Ditto.\n+\t* ipa-devirt.c (ipa_devirt): Ditto.\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tDitto.\n+\t* ipa.c (walk_polymorphic_call_targets): Ditto.\n+\t* gimple-fold.c (fold_gimple_assign): Ditto.\n+\t(gimple_fold_call): Ditto.\n+\t* dbgcnt.def: New counter.\n+\n 2014-05-20  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/msp430.md (split): Don't allow subregs when"}, {"sha": "4084cc4ec1e5d237ac31a74119cb4a37a66f11b0", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -210,6 +210,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"tree-nested.h\"\n #include \"gimplify.h\"\n+#include \"dbgcnt.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that\n@@ -886,7 +887,7 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n      make the edge direct.  */\n   if (final)\n     {\n-      if (targets.length () <= 1)\n+      if (targets.length () <= 1 && dbg_cnt (devirt))\n \t{\n \t  cgraph_node *target;\n \t  if (targets.length () == 1)\n@@ -903,6 +904,14 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n \t\t\t\t edge->call_stmt, 0,\n \t\t\t\t TDF_SLIM);\n \t    }\n+          if (dump_enabled_p ())\n+            {\n+\t      location_t locus = gimple_location (edge->call_stmt);\n+\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n+\t\t\t       \"devirtualizing call in %s to %s\\n\",\n+\t\t\t       edge->caller->name (), target->name ());\n+\t    }\n+\n \t  cgraph_make_edge_direct (edge, target);\n \t  cgraph_redirect_edge_call_stmt_to_callee (edge);\n \t  if (cgraph_dump_file)"}, {"sha": "0edc72a89417bb78f24791bca9baa7d1ca126cd6", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -150,6 +150,7 @@ DEBUG_COUNTER (dce)\n DEBUG_COUNTER (dce_fast)\n DEBUG_COUNTER (dce_ud)\n DEBUG_COUNTER (delete_trivial_dead)\n+DEBUG_COUNTER (devirt)\n DEBUG_COUNTER (df_byte_scan)\n DEBUG_COUNTER (dse)\n DEBUG_COUNTER (dse1)"}, {"sha": "1c2eed5dd1ff009e5d3aa8ebed0e004a994532bd", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"langhooks.h\"\n #include \"gimplify-me.h\"\n+#include \"dbgcnt.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -386,13 +387,24 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t\tbool final;\n \t\tvec <cgraph_node *>targets\n \t\t  = possible_polymorphic_call_targets (val, &final);\n-\t\tif (final && targets.length () <= 1)\n+\t\tif (final && targets.length () <= 1 && dbg_cnt (devirt))\n \t\t  {\n \t\t    tree fndecl;\n+\n \t\t    if (targets.length () == 1)\n \t\t      fndecl = targets[0]->decl;\n \t\t    else\n \t\t      fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t\t    if (dump_enabled_p ())\n+\t\t      {\n+\t\t\tlocation_t loc = gimple_location (stmt);\n+\t\t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t\t\t\t \"resolving virtual function address \"\n+\t\t\t\t\t \"reference to function %s\\n\",\n+\t\t\t\t\t targets.length () == 1\n+\t\t\t\t\t ? targets[0]->name ()\n+\t\t\t\t\t : \"__builtin_unreachable\");\n+\t\t      }\n \t\t    val = fold_convert (TREE_TYPE (val), fndecl);\n \t\t    STRIP_USELESS_TYPE_CONVERSION (val);\n \t\t    return val;\n@@ -1124,9 +1136,18 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  bool final;\n \t  vec <cgraph_node *>targets\n \t    = possible_polymorphic_call_targets (callee, &final);\n-\t  if (final && targets.length () <= 1)\n+\t  if (final && targets.length () <= 1 && dbg_cnt (devirt))\n \t    {\n \t      tree lhs = gimple_call_lhs (stmt);\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  location_t loc = gimple_location (stmt);\n+\t\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t\t\t   \"folding virtual function call to %s\\n\",\n+\t\t \t\t   targets.length () == 1\n+\t\t  \t\t   ? targets[0]->name ()\n+\t\t  \t\t   : \"__builtin_unreachable\");\n+\t\t}\n \t      if (targets.length () == 1)\n \t\t{\n \t\t  gimple_call_set_fndecl (stmt, targets[0]->decl);"}, {"sha": "d733461f34a10b00fb3a7496ed76f2447f244dd3", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -129,6 +129,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree-dfa.h\"\n #include \"demangle.h\"\n+#include \"dbgcnt.h\"\n \n static bool odr_violation_reported = false;\n \n@@ -2067,14 +2068,17 @@ ipa_devirt (void)\n \t\tnoverwritable++;\n \t\tcontinue;\n \t      }\n-\t    else\n+\t    else if (dbg_cnt (devirt))\n \t      {\n-\t\tif (dump_file)\n-\t\t  fprintf (dump_file,\n-\t\t\t   \"Speculatively devirtualizing call in %s/%i to %s/%i\\n\\n\",\n-\t\t\t   n->name (), n->order,\n-\t\t\t   likely_target->name (),\n-\t\t\t   likely_target->order);\n+\t\tif (dump_enabled_p ())\n+                  {\n+                    location_t locus = gimple_location (e->call_stmt);\n+                    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n+                                     \"speculatively devirtualizing call in %s/%i to %s/%i\\n\",\n+                                     n->name (), n->order,\n+                                     likely_target->name (),\n+                                     likely_target->order);\n+                  }\n \t\tif (!symtab_can_be_discarded (likely_target))\n \t\t  {\n \t\t    cgraph_node *alias;"}, {"sha": "5df3f029dc4fee561c39e92415be7e2431f8f1a9", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"stringpool.h\"\n #include \"tree-ssanames.h\"\n+#include \"dbgcnt.h\"\n \n /* Intermediate information about a parameter that is only useful during the\n    run of ipa_analyze_node and is not kept afterwards.  */\n@@ -2490,10 +2491,15 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n \t    /* Member pointer call that goes through a VMT lookup.  */\n \t    return NULL;\n \n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"ipa-prop: Discovered direct call to non-function\"\n-\t\t\t\t\" in %s/%i, making it unreachable.\\n\",\n-\t\t     ie->caller->name (), ie->caller->order);\n+          if (dump_enabled_p ())\n+\t    {\n+\t      location_t loc = gimple_location (ie->call_stmt);\n+\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t\t       \"discovered direct call to non-function in %s/%i, \"\n+\t\t\t       \"making it __builtin_unreachable\\n\",\n+                               ie->caller->name (),\n+                               ie->caller->order);\n+\t    }\n \t  target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n \t  callee = cgraph_get_create_node (target);\n \t  unreachable = true;\n@@ -2527,6 +2533,10 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n \t}\n       callee = cgraph_get_create_node (target);\n     }\n+\n+  if (!dbg_cnt (devirt))\n+    return NULL;\n+\n   ipa_check_create_node_params ();\n \n   /* We can not make edges to inline clones.  It is bug that someone removed\n@@ -2547,6 +2557,13 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n       else\n \tfprintf (dump_file, \"with uid %i\\n\", ie->lto_stmt_uid);\n      }\n+  if (dump_enabled_p ())\n+    {\n+      location_t loc = gimple_location (ie->call_stmt);\n+      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t       \"converting indirect call in %s to direct call to %s\\n\",\n+\t\t       ie->caller->name (), callee->name ());\n+    }\n   ie = cgraph_make_edge_direct (ie, callee);\n   es = inline_edge_summary (ie);\n   es->call_stmt_size -= (eni_size_weights.indirect_call_cost"}, {"sha": "a4e9b2273301e3b655cfd6cbbf9ed21885d5a458", "filename": "gcc/ipa.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -37,6 +37,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"profile.h\"\n #include \"params.h\"\n+#include \"internal-fn.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"gimple.h\"\n+#include \"dbgcnt.h\"\n \n /* Return true when NODE can not be local. Worker for cgraph_local_node_p.  */\n \n@@ -213,7 +217,7 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n      make the edge direct.  */\n   if (final)\n     {\n-      if (targets.length () <= 1)\n+      if (targets.length () <= 1 && dbg_cnt (devirt))\n \t{\n \t  cgraph_node *target, *node = edge->caller;\n \t  if (targets.length () == 1)\n@@ -222,12 +226,15 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n \t    target = cgraph_get_create_node\n \t\t       (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n \n-\t  if (dump_file)\n-\t    fprintf (dump_file,\n-\t\t     \"Devirtualizing call in %s/%i to %s/%i\\n\",\n-\t\t     edge->caller->name (),\n-\t\t     edge->caller->order,\n-\t\t     target->name (), target->order);\n+\t  if (dump_enabled_p ())\n+            {\n+              location_t locus = gimple_location (edge->call_stmt);\n+              dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, locus,\n+                               \"devirtualizing call in %s/%i to %s/%i\\n\",\n+                               edge->caller->name (), edge->caller->order,\n+                               target->name (),\n+                               target->order);\n+\t    }\n \t  edge = cgraph_make_edge_direct (edge, target);\n \t  if (inline_summary_vec)\n \t    inline_update_overall_summary (node);"}, {"sha": "f497f9079067233d9e4e89f5c659fa9926643790", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b5f08952775ead634c0020b2dcf9523414c8752/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=2b5f08952775ead634c0020b2dcf9523414c8752", "patch": "@@ -4365,18 +4365,19 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t    continue;\n \t  if (gimple_call_addr_fndecl (fn) != NULL_TREE\n \t      && useless_type_conversion_p (TREE_TYPE (orig_fn),\n-\t\t\t\t\t    TREE_TYPE (fn)))\n+\t\t\t\t\t    TREE_TYPE (fn))\n+              && dbg_cnt (devirt))\n \t    {\n \t      bool can_make_abnormal_goto\n \t\t  = stmt_can_make_abnormal_goto (stmt);\n \t      bool was_noreturn = gimple_call_noreturn_p (stmt);\n \n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t      if (dump_enabled_p ())\n \t\t{\n-\t\t  fprintf (dump_file, \"Replacing call target with \");\n-\t\t  print_generic_expr (dump_file, fn, 0);\n-\t\t  fprintf (dump_file, \" in \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+                  location_t loc = gimple_location (stmt);\n+                  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+                                   \"converting indirect call to function %s\\n\",\n+                                   cgraph_get_node (gimple_call_addr_fndecl (fn))->name ());\n \t\t}\n \n \t      gimple_call_set_fn (stmt, fn);"}]}