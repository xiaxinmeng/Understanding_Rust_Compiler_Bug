{"sha": "5248c9618c10842a86f0d9b8bb990590435898e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0OGM5NjE4YzEwODQyYTg2ZjBkOWI4YmI5OTA1OTA0MzU4OThlNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-08T14:49:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-08T14:49:49Z"}, "message": "(rs6000_cpu, rs6000_cpu_string): New variables.\n\n(rs6000_override_options): New function.\n\nFrom-SVN: r5283", "tree": {"sha": "bef98be96548414422a9ee990165b7add7de1096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef98be96548414422a9ee990165b7add7de1096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5248c9618c10842a86f0d9b8bb990590435898e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5248c9618c10842a86f0d9b8bb990590435898e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5248c9618c10842a86f0d9b8bb990590435898e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5248c9618c10842a86f0d9b8bb990590435898e5/comments", "author": null, "committer": null, "parents": [{"sha": "fb623df5013441f0486591bb9c811d30946608c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb623df5013441f0486591bb9c811d30946608c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb623df5013441f0486591bb9c811d30946608c4"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "568a2256920d22ccd0b97a6660d730aae05f7e0d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5248c9618c10842a86f0d9b8bb990590435898e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5248c9618c10842a86f0d9b8bb990590435898e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5248c9618c10842a86f0d9b8bb990590435898e5", "patch": "@@ -36,10 +36,16 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n \n extern char *language_string;\n+extern int profile_block_flag;\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n #define max(A,B)\t((A) > (B) ? (A) : (B))\n \n+/* Target cpu type */\n+\n+enum processor_type rs6000_cpu;\n+char *rs6000_cpu_string;\n+\n /* Set to non-zero by \"fix\" operation to indicate that itrunc and\n    uitrunc must be defined.  */\n \n@@ -55,6 +61,63 @@ static int trunc_defined;\n rtx rs6000_compare_op0, rs6000_compare_op1;\n int rs6000_compare_fp_p;\n \f\n+/* Override command line options.  Mostly we process the processor\n+   type and sometimes adjust other TARGET_ options.  */\n+\n+void\n+rs6000_override_options ()\n+{\n+  int i;\n+\n+  static struct ptt\n+    {\n+      char *name;\t\t/* Canonical processor name.  */\n+      enum processor_type processor; /* Processor type enum value.  */\n+      int target_enable;\t/* Target flags to enable.  */\n+      int target_disable;\t/* Target flags to disable.  */\n+    } processor_target_table[]\n+      = {{\"all\", PROCESSOR_DEFAULT,\n+\t    0, MASK_POWER | MASK_POWERPC | MASK_POWERPC64},\n+\t {\"rios\", PROCESSOR_RIOS,\n+\t    MASK_POWER, MASK_POWERPC | MASK_POWERPC64},\n+\t {\"rios2\", PROCESSOR_RIOS2,\n+\t    MASK_POWER, MASK_POWERPC | MASK_POWERPC64},\n+\t {\"601\", PROCESSOR_PPC601,\n+\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS, MASK_POWERPC64},\n+\t {\"603\", PROCESSOR_PPC603,\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS, MASK_POWER | MASK_POWERPC64},\n+\t {\"604\", PROCESSOR_PPC604,\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS, MASK_POWER | MASK_POWERPC64},\n+\t {\"620\", PROCESSOR_PPC620,\n+\t    MASK_POWERPC | MASK_POWERPC64 | MASK_NEW_MNEMONICS, MASK_POWER}};\n+\n+  int ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n+\n+  profile_block_flag = 0;\n+\n+  /* Identify the processor type */\n+  if (rs6000_cpu_string == 0)\n+    rs6000_cpu = PROCESSOR_DEFAULT;\n+  else\n+    {\n+      for (i = 0; i < ptt_size; i++)\n+\tif (! strcmp (rs6000_cpu_string, processor_target_table[i].name))\n+\t  {\n+\t    rs6000_cpu = processor_target_table[i].processor;\n+\t    target_flags |= processor_target_table[i].target_enable;\n+\t    target_flags &= ~processor_target_table[i].target_disable;\n+\t    break;\n+\t  }\n+\n+      if (i == ptt_size)\n+\t{\n+\t  error (\"bad value (%s) for -mcpu= switch\", rs6000_cpu_string);\n+\t  rs6000_cpu_string = \"default\";\n+\t  rs6000_cpu = PROCESSOR_DEFAULT;\n+\t}\n+    }\n+}\n+\f\n /* Return non-zero if this function is known to have a null epilogue.  */\n \n int"}]}