{"sha": "723ef5a937dbab5e7a35761fd7f0ff0c76849340", "node_id": "C_kwDOANBUbNoAKDcyM2VmNWE5MzdkYmFiNWU3YTM1NzYxZmQ3ZjBmZjBjNzY4NDkzNDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-12T09:31:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-12T09:36:58Z"}, "message": "libstdc++: Outline the overlapping case of string _M_replace into a separate function [PR105329]\n\nThe following patch is partially a workaround for bogus warnings\nwhen the compiler isn't able to fold _M_disjunct call into constant\nfalse, but also an optimization attempt - assuming _M_disjunct (__s)\nis rare, the patch should shrink code size for the common case and\nuse library or for non-standard instantiations an out of line\nfunction to handle the rare case.\n\n2022-09-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105329\n\t* acinclude.m4 (libtool_VERSION): Change to 6:31:0.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Don't export\n\tstd::basic_string methods with name length of 15.\n\t(GLIBCXX_3.4.31): Export std::basic_string::_M_replace_cold.\n\t* testsuite/util/testsuite_abi.cc (check_version): Handle\n\tGLIBCXX_3.4.31.\n\t* include/bits/basic_string.h (std::basic_string::_M_replace_cold):\n\tDeclare.\n\t* include/bits/basic_string.tcc (std::basic_string::_M_replace_cold):\n\tDefine and export even for C++20.\n\t(std::basic_string::_M_replace): Use __builtin_expect, outline\n\tthe overlapping case to _M_replace_cold.\n\t* configure: Regenerated.", "tree": {"sha": "622b7ac694b7254a40656c7f87a6a2b352d4eca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622b7ac694b7254a40656c7f87a6a2b352d4eca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/723ef5a937dbab5e7a35761fd7f0ff0c76849340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723ef5a937dbab5e7a35761fd7f0ff0c76849340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723ef5a937dbab5e7a35761fd7f0ff0c76849340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723ef5a937dbab5e7a35761fd7f0ff0c76849340/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994ea892bd02dd8a1c04875ad3553c57939c3abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994ea892bd02dd8a1c04875ad3553c57939c3abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994ea892bd02dd8a1c04875ad3553c57939c3abf"}], "stats": {"total": 87, "additions": 56, "deletions": 31}, "files": [{"sha": "9aa81e1ac13a34355591cb22a46bb5e6f70c38d0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -3821,7 +3821,7 @@ changequote([,])dnl\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:30:0\n+libtool_VERSION=6:31:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "7f303771b041682eb1d0163b957a8b813df6b89c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -1736,7 +1736,7 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_M*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE13*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE14_M_replace_aux*;\n-    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[568-9]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[68-9]*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE2at*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE3end*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4back*;\n@@ -2444,6 +2444,10 @@ GLIBCXX_3.4.30 {\n \n } GLIBCXX_3.4.29;\n \n+GLIBCXX_3.4.31 {\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE15_M_replace_cold*;\n+} GLIBCXX_3.4.30;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "07916d14d93dc48d514dff3db1377df00ae80982", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -69034,7 +69034,7 @@ $as_echo \"$as_me: WARNING: === Symbol versioning will be disabled.\" >&2;}\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:30:0\n+libtool_VERSION=6:31:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "cd244191df41692b57e9ccc820060b057d74c500", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -2504,6 +2504,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n \t\t     _CharT __c);\n \n+      __attribute__((__noinline__, __noclone__, __cold__)) void\n+      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,\n+\t\t      const size_type __len2, const size_type __how_much);\n+\n       _GLIBCXX20_CONSTEXPR\n       basic_string&\n       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,"}, {"sha": "710c2dfe0308918c6cf18ac18c0e28b54af9badd", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -470,6 +470,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __attribute__((__noinline__, __noclone__, __cold__)) void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,\n+\t\t    const size_type __len2, const size_type __how_much)\n+    {\n+      // Work in-place.\n+      if (__len2 && __len2 <= __len1)\n+\tthis->_S_move(__p, __s, __len2);\n+      if (__how_much && __len1 != __len2)\n+\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n+      if (__len2 > __len1)\n+\t{\n+\t  if (__s + __len2 <= __p + __len1)\n+\t    this->_S_move(__p, __s, __len2);\n+\t  else if (__s >= __p + __len1)\n+\t    {\n+\t      // Hint to middle end that __p and __s overlap\n+\t      // (PR 98465).\n+\t      const size_type __poff = (__s - __p) + (__len2 - __len1);\n+\t      this->_S_copy(__p, __p + __poff, __len2);\n+\t    }\n+\t  else\n+\t    {\n+\t      const size_type __nleft = (__p + __len1) - __s;\n+\t      this->_S_move(__p, __s, __nleft);\n+\t      this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft);\n+\t    }\n+\t}\n+    }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>&\n@@ -500,40 +531,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  else\n #endif\n-\t  if (_M_disjunct(__s))\n+\t  if (__builtin_expect(_M_disjunct(__s), true))\n \t    {\n \t      if (__how_much && __len1 != __len2)\n \t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n \t      if (__len2)\n \t\tthis->_S_copy(__p, __s, __len2);\n \t    }\n \t  else\n-\t    {\n-\t      // Work in-place.\n-\t      if (__len2 && __len2 <= __len1)\n-\t\tthis->_S_move(__p, __s, __len2);\n-\t      if (__how_much && __len1 != __len2)\n-\t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n-\t      if (__len2 > __len1)\n-\t\t{\n-\t\t  if (__s + __len2 <= __p + __len1)\n-\t\t    this->_S_move(__p, __s, __len2);\n-\t\t  else if (__s >= __p + __len1)\n-\t\t    {\n-\t\t      // Hint to middle end that __p and __s overlap\n-\t\t      // (PR 98465).\n-\t\t      const size_type __poff = (__s - __p) + (__len2 - __len1);\n-\t\t      this->_S_copy(__p, __p + __poff, __len2);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      const size_type __nleft = (__p + __len1) - __s;\n-\t\t      this->_S_move(__p, __s, __nleft);\n-\t\t      this->_S_copy(__p + __nleft, __p + __len2,\n-\t\t\t\t    __len2 - __nleft);\n-\t\t    }\n-\t\t}\n-\t    }\n+\t    _M_replace_cold(__p, __len1, __s, __len2, __how_much);\n \t}\n       else\n \tthis->_M_mutate(__pos, __len1, __s, __len2);\n@@ -1000,6 +1006,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // to ensure the definition in libstdc++.so is unique (PR 86138).\n   extern template basic_string<char>::size_type\n     basic_string<char>::_Rep::_S_empty_rep_storage[];\n+# elif _GLIBCXX_EXTERN_TEMPLATE > 0\n+  // Export _M_replace_cold even for C++20.\n+  extern template void\n+    basic_string<char>::_M_replace_cold(char *, size_type, const char*,\n+\t\t\t\t\tconst size_type, const size_type);\n # endif\n \n   extern template\n@@ -1021,6 +1032,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # elif ! _GLIBCXX_USE_CXX11_ABI\n   extern template basic_string<wchar_t>::size_type\n     basic_string<wchar_t>::_Rep::_S_empty_rep_storage[];\n+# elif _GLIBCXX_EXTERN_TEMPLATE > 0\n+  // Export _M_replace_cold even for C++20.\n+  extern template void\n+    basic_string<wchar_t>::_M_replace_cold(wchar_t*, size_type, const wchar_t*,\n+\t\t\t\t\t   const size_type, const size_type);\n # endif\n \n   extern template"}, {"sha": "09bd00ecc73815c17967ee08eae11ee81c8344ab", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723ef5a937dbab5e7a35761fd7f0ff0c76849340/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=723ef5a937dbab5e7a35761fd7f0ff0c76849340", "patch": "@@ -211,6 +211,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.28\");\n       known_versions.push_back(\"GLIBCXX_3.4.29\");\n       known_versions.push_back(\"GLIBCXX_3.4.30\");\n+      known_versions.push_back(\"GLIBCXX_3.4.31\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.29\");\n       known_versions.push_back(\"GLIBCXX_IEEE128_3.4.29\");\n       known_versions.push_back(\"GLIBCXX_IEEE128_3.4.30\");\n@@ -247,7 +248,7 @@ check_version(symbol& test, bool added)\n \ttest.version_status = symbol::incompatible;\n \n       // Check that added symbols are added in the latest pre-release version.\n-      bool latestp = (test.version_name == \"GLIBCXX_3.4.30\"\n+      bool latestp = (test.version_name == \"GLIBCXX_3.4.31\"\n \t  // XXX remove next line when baselines have been regenerated.\n \t\t     || test.version_name == \"GLIBCXX_IEEE128_3.4.30\"\n \t\t     || test.version_name == \"CXXABI_1.3.13\""}]}