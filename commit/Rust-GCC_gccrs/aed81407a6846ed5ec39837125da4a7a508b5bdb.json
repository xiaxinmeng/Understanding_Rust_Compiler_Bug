{"sha": "aed81407a6846ed5ec39837125da4a7a508b5bdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkODE0MDdhNjg0NmVkNWVjMzk4MzcxMjVkYTRhN2E1MDhiNWJkYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-03-30T13:18:18Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-03-30T13:18:18Z"}, "message": "name-lookup.c: New file.\n\n\t* name-lookup.c: New file.\n\t* name-lookup.h: Likewise..\n\t* decl.c (push_binding): Adjust use cxx_binding_make.\n\t(free_bindings): Move to name-lookup.c\n\t(pop_binding): Use cxx_binding_free.\n\t(binding_for_name): Tidy.\n\t* cp-tree.h: Include \"name-lookup.h\"\n\t(cxx_binding_make): Move to name-lookup.h\n\t(cxx_binding_clear): Likewise.\n\t(struct cxx_binding): Likewise.\n\t(LOCAL_BINDING_P): Likewise.\n\t(INHERITED_VALUE_BINDING_P): Likewise.\n\t(BINDING_SCOPE): Likewise.\n\t(BINDING_HAS_LEVEL_P): Likewise.\n\t(BINDING_VALUE): Likewise.\n\t(BINDING_TYPE): Likewise.\n\t* config-lang.in (gtfiles): Add cp/name-lookup.h\n\t* Make-lang.in (cp/name-lookup.o): New rule.\n\t(CXX_OBJS): Add cp/name-lookup.o\n\t(CXX_TREE_H): Add cp/name-lookup.h\n\nFrom-SVN: r65040", "tree": {"sha": "77166001501020e6fe1d5e06685528945d95903b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77166001501020e6fe1d5e06685528945d95903b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed81407a6846ed5ec39837125da4a7a508b5bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed81407a6846ed5ec39837125da4a7a508b5bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed81407a6846ed5ec39837125da4a7a508b5bdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed81407a6846ed5ec39837125da4a7a508b5bdb/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3926c48ee7655ff6bfef597458f9f1ebcdbbbf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3926c48ee7655ff6bfef597458f9f1ebcdbbbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3926c48ee7655ff6bfef597458f9f1ebcdbbbf7"}], "stats": {"total": 257, "additions": 176, "deletions": 81}, "files": [{"sha": "ac6cc4adae019e9d79743d7e819a124c9c89ee18", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -1,3 +1,26 @@\n+2003-03-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* name-lookup.c: New file.\n+\t* name-lookup.h: Likewise..\n+\t* decl.c (push_binding): Adjust use cxx_binding_make.\n+\t(free_bindings): Move to name-lookup.c\n+\t(pop_binding): Use cxx_binding_free.\n+\t(binding_for_name): Tidy.\n+\t* cp-tree.h: Include \"name-lookup.h\"\n+\t(cxx_binding_make): Move to name-lookup.h\n+\t(cxx_binding_clear): Likewise.\n+\t(struct cxx_binding): Likewise.\n+\t(LOCAL_BINDING_P): Likewise.\n+\t(INHERITED_VALUE_BINDING_P): Likewise.\n+\t(BINDING_SCOPE): Likewise.\n+\t(BINDING_HAS_LEVEL_P): Likewise.\n+\t(BINDING_VALUE): Likewise.\n+\t(BINDING_TYPE): Likewise.\n+\t* config-lang.in (gtfiles): Add cp/name-lookup.h\n+\t* Make-lang.in (cp/name-lookup.o): New rule.\n+\t(CXX_OBJS): Add cp/name-lookup.o\n+\t(CXX_TREE_H): Add cp/name-lookup.h\n+\n 2003-03-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/10245"}, {"sha": "128c893c395a50250883ea3ad4862d4d9cce56d0", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -87,7 +87,7 @@ CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/class.o cp/decl2.o cp/error.o cp/lex.o cp/parser.o cp/ptree.o cp/rtti.o \\\n  cp/typeck.o cp/cvt.o cp/except.o cp/friend.o cp/init.o cp/method.o \\\n  cp/search.o cp/semantics.o cp/tree.o cp/repo.o cp/dump.o \\\n- cp/optimize.o cp/mangle.o cp/cp-lang.o\n+ cp/optimize.o cp/mangle.o cp/cp-lang.o cp/name-lookup.o\n \n # Use loose warnings for this front end.\n cp-warn = $(WERROR)\n@@ -221,7 +221,8 @@ c++.stage4: stage4-start\n \n #\f\n # .o: .h dependencies.\n-CXX_TREE_H = $(TREE_H) cp/cp-tree.h c-common.h cp/cp-tree.def c-common.def \\\n+CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h c-common.h \\\n+\tcp/cp-tree.def c-common.def \\\n \tfunction.h varray.h $(SYSTEM_H) coretypes.h $(CONFIG_H) $(TARGET_H) \\\n \t$(GGC_H) \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n@@ -274,3 +275,5 @@ cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h integrate.h insn-config\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h\n \n cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h output.h\n+\n+cp/name-lookup.o: cp/name-lookup.c $(CXX_TREE_H)"}, {"sha": "8bac8dcd2342d00d6c9f5f5cce7ed41ee318eeb4", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3 target-gperf\"\n \n-gtfiles=\"\\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c\"\n+gtfiles=\"\\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c\""}, {"sha": "88becd6a23acf10ad15d6500eef5b958f8c05285", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #include \"c-common.h\"\n+#include \"name-lookup.h\"\n \n struct diagnostic_context;\n \n@@ -217,38 +218,6 @@ struct diagnostic_context;\n \n #define abi_version_at_least(N) \\\n   (flag_abi_version == 0 || flag_abi_version >= (N))\n-\n-\f\n-/* Datatype used to temporarily save C++ bindings (for implicit\n-   instantiations purposes and like).  Implemented in decl.c.  */\n-typedef struct cxx_saved_binding cxx_saved_binding;\n-\n-/* Datatype that represents binding established by a declaration between\n-   a name and a C++ entity.  */\n-typedef struct cxx_binding cxx_binding;\n-\n-/* (GC-)allocate a cxx_binding object.  */\n-#define cxx_binding_make() (ggc_alloc (sizeof (cxx_binding)))\n-\n-/* Zero out a cxx_binding pointed to by B.  */\n-#define cxx_binding_clear(B) memset ((B), 0, sizeof (cxx_binding))\n-\n-struct cxx_binding GTY(())\n-{\n-  /* Link to chain together various bindings for this name.  */\n-  cxx_binding *previous;\n-  /* The non-type entity this name is bound to.  */\n-  tree value;\n-  /* The type entity this name is bound to.  */\n-  tree type;\n-  union tree_binding_u {\n-    tree GTY ((tag (\"0\"))) scope;\n-    struct cp_binding_level * GTY ((tag (\"1\"))) level;\n-  } GTY ((desc (\"%0.has_level\"))) scope;\n-  unsigned has_level : 1;\n-  unsigned value_is_inherited : 1;\n-  unsigned is_local : 1;\n-};\n \f\n /* Language-dependent contents of an identifier.  */\n \n@@ -297,31 +266,6 @@ struct ptrmem_cst GTY(())\n };\n typedef struct ptrmem_cst * ptrmem_cst_t;\n \n-/* Nonzero if this binding is for a local scope, as opposed to a class\n-   or namespace scope.  */\n-#define LOCAL_BINDING_P(NODE) ((NODE)->is_local)\n-\n-/* Nonzero if BINDING_VALUE is from a base class of the class which is\n-   currently being defined.  */\n-#define INHERITED_VALUE_BINDING_P(NODE) ((NODE)->value_is_inherited)\n-\n-/* For a binding between a name and an entity at a non-local scope,\n-   defines the scope where the binding is declared.  (Either a class\n-   _TYPE node, or a NAMESPACE_DECL.)  This macro should be used only\n-   for namespace-level bindings; on the IDENTIFIER_BINDING list\n-   BINDING_LEVEL is used instead.  */\n-#define BINDING_SCOPE(NODE) ((NODE)->scope.scope)\n-\n-/* Nonzero if NODE has BINDING_LEVEL, rather than BINDING_SCOPE.  */\n-#define BINDING_HAS_LEVEL_P(NODE) ((NODE)->has_level)\n-\n-/* This is the declaration bound to the name. Possible values:\n-   variable, overloaded function, namespace, template, enumerator.  */\n-#define BINDING_VALUE(NODE) ((NODE)->value)\n-\n-/* If name is bound to a type, this is the type (struct, union, enum).  */\n-#define BINDING_TYPE(NODE)     ((NODE)->type)\n-\n #define IDENTIFIER_GLOBAL_VALUE(NODE) \\\n   namespace_binding ((NODE), global_namespace)\n #define SET_IDENTIFIER_GLOBAL_VALUE(NODE, VAL) \\"}, {"sha": "492fc370b1b313adbde89ebda29ad77ac597ae4b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -889,31 +889,16 @@ finish_scope (void)\n    this is the `struct cp_binding_level' for the block.  */\n #define BINDING_LEVEL(NODE) ((NODE)->scope.level)\n \n-/* A free list of cxx_binding nodes, connected by their\n-   TREE_CHAINs.  */\n-\n-static GTY((deletable (\"\"))) cxx_binding *free_bindings;\n-\n /* Make DECL the innermost binding for ID.  The LEVEL is the binding\n    level at which this declaration is being bound.  */\n \n static void\n push_binding (tree id, tree decl, struct cp_binding_level* level)\n {\n-  cxx_binding *binding;\n-\n-  if (free_bindings)\n-    {\n-      binding = free_bindings;\n-      free_bindings = binding->previous;\n-    }\n-  else\n-    binding = cxx_binding_make ();\n+   cxx_binding *binding = cxx_binding_make (decl, NULL);\n \n   /* Now, fill in the binding information.  */\n   binding->previous = IDENTIFIER_BINDING (id);\n-  BINDING_VALUE (binding) = decl;\n-  BINDING_TYPE (binding) = NULL_TREE;\n   BINDING_LEVEL (binding) = level;\n   INHERITED_VALUE_BINDING_P (binding) = 0;\n   LOCAL_BINDING_P (binding) = (level != class_binding_level);\n@@ -1161,8 +1146,7 @@ pop_binding (tree id, tree decl)\n       IDENTIFIER_BINDING (id) = binding->previous;\n \n       /* Add it to the free list.  */\n-      binding->previous = free_bindings;\n-      free_bindings = binding;\n+      cxx_binding_free (binding);\n \n       /* Clear the BINDING_LEVEL so the garbage collector doesn't walk\n \t it.  */\n@@ -2084,10 +2068,8 @@ binding_for_name (tree name, tree scope)\n   if (result)\n     return result;\n   /* Not found, make a new one.  */\n-  result = cxx_binding_make ();\n+  result = cxx_binding_make (NULL, NULL);\n   result->previous = IDENTIFIER_NAMESPACE_BINDINGS (name);\n-  BINDING_TYPE (result) = NULL_TREE;\n-  BINDING_VALUE (result) = NULL_TREE;\n   BINDING_SCOPE (result) = scope;\n   result->is_local = false;\n   result->value_is_inherited = false;"}, {"sha": "9153823c02f51c9e0bef01341e49da3fe6ce79d7", "filename": "gcc/cp/name-lookup.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -0,0 +1,58 @@\n+/* Definitions for C++ name lookup routines.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"cp-tree.h\"\n+#include \"name-lookup.h\"\n+\n+/* A free list of \"cxx_binding\"s, connected by their PREVIOUS.  */\n+static GTY((deletable (\"\"))) cxx_binding *free_bindings;\n+\n+/* (GC)-allocate a binding object with VALUE and TYPE member initialized.  */\n+cxx_binding *\n+cxx_binding_make (tree value, tree type)\n+{\n+  cxx_binding *binding;\n+  if (free_bindings)\n+    {\n+      binding = free_bindings;\n+      free_bindings = binding->previous;\n+    }\n+  else\n+    binding = ggc_alloc (sizeof (cxx_binding));\n+\n+  binding->value = value;\n+  binding->type = type;\n+\n+  return binding;\n+}\n+\n+/* Put BINDING back on the free list.  */\n+void\n+cxx_binding_free (cxx_binding *binding)\n+{\n+  binding->previous = free_bindings;\n+  free_bindings = binding;\n+}"}, {"sha": "aaba6e13775f5aa9a55f6663c583f3853ffad72d", "filename": "gcc/cp/name-lookup.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed81407a6846ed5ec39837125da4a7a508b5bdb/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=aed81407a6846ed5ec39837125da4a7a508b5bdb", "patch": "@@ -0,0 +1,85 @@\n+/* Declarations for C++ name lookup routines.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_CP_NAME_LOOKUP_H\n+#define GCC_CP_NAME_LOOKUP_H\n+\n+#include \"c-common.h\"\n+\n+/* Datatype used to temporarily save C++ bindings (for implicit\n+   instantiations purposes and like).  Implemented in decl.c.  */\n+typedef struct cxx_saved_binding cxx_saved_binding;\n+\n+/* Datatype that represents binding established by a declaration between\n+   a name and a C++ entity.  */\n+typedef struct cxx_binding cxx_binding;\n+\n+/* Nonzero if this binding is for a local scope, as opposed to a class\n+   or namespace scope.  */\n+#define LOCAL_BINDING_P(NODE) ((NODE)->is_local)\n+\n+/* Nonzero if BINDING_VALUE is from a base class of the class which is\n+   currently being defined.  */\n+#define INHERITED_VALUE_BINDING_P(NODE) ((NODE)->value_is_inherited)\n+\n+/* For a binding between a name and an entity at a non-local scope,\n+   defines the scope where the binding is declared.  (Either a class\n+   _TYPE node, or a NAMESPACE_DECL.)  This macro should be used only\n+   for namespace-level bindings; on the IDENTIFIER_BINDING list\n+   BINDING_LEVEL is used instead.  */\n+#define BINDING_SCOPE(NODE) ((NODE)->scope.scope)\n+\n+/* Nonzero if NODE has BINDING_LEVEL, rather than BINDING_SCOPE.  */\n+#define BINDING_HAS_LEVEL_P(NODE) ((NODE)->has_level)\n+\n+/* This is the declaration bound to the name. Possible values:\n+   variable, overloaded function, namespace, template, enumerator.  */\n+#define BINDING_VALUE(NODE) ((NODE)->value)\n+\n+/* If name is bound to a type, this is the type (struct, union, enum).  */\n+#define BINDING_TYPE(NODE)   ((NODE)->type)\n+\n+/* Zero out a cxx_binding pointed to by B.  */\n+#define cxx_binding_clear(B) memset ((B), 0, sizeof (cxx_binding))\n+\n+struct cxx_binding GTY(())\n+{\n+  /* Link to chain together various bindings for this name.  */\n+  cxx_binding *previous;\n+  /* The non-type entity this name is bound to.  */\n+  tree value;\n+  /* The type entity this name is bound to.  */\n+  tree type;\n+  union tree_binding_u {\n+    tree GTY ((tag (\"0\"))) scope;\n+    struct cp_binding_level * GTY ((tag (\"1\"))) level;\n+  } GTY ((desc (\"%0.has_level\"))) scope;\n+  unsigned has_level : 1;\n+  unsigned value_is_inherited : 1;\n+  unsigned is_local : 1;\n+};\n+\n+extern cxx_binding *cxx_binding_make (tree, tree);\n+extern void cxx_binding_free (cxx_binding *);\n+\f\n+\n+\n+#endif /* GCC_CP_NAME_LOOKUP_H */"}]}