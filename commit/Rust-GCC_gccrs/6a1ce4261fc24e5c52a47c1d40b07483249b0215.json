{"sha": "6a1ce4261fc24e5c52a47c1d40b07483249b0215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExY2U0MjYxZmMyNGU1YzUyYTQ3YzFkNDBiMDc0ODMyNDliMDIxNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:40:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:40:49Z"}, "message": "(PRINT_OPERAND): Turned off: use default.\n\n(ASM_OUTPUT_{FLOAT,DOUBLE,LONG_DOUBLE}_OPERAND): Defined.\n\nFrom-SVN: r13645", "tree": {"sha": "903a85228fe7db24d546a63e65f3a143ac0e6eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903a85228fe7db24d546a63e65f3a143ac0e6eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a1ce4261fc24e5c52a47c1d40b07483249b0215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1ce4261fc24e5c52a47c1d40b07483249b0215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1ce4261fc24e5c52a47c1d40b07483249b0215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1ce4261fc24e5c52a47c1d40b07483249b0215/comments", "author": null, "committer": null, "parents": [{"sha": "6339db3f4a9f2a7965f9622637589039481140a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6339db3f4a9f2a7965f9622637589039481140a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6339db3f4a9f2a7965f9622637589039481140a5"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "f83524cc0cf1ea44d8d7cba59575ed62d6585fde", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ce4261fc24e5c52a47c1d40b07483249b0215/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ce4261fc24e5c52a47c1d40b07483249b0215/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=6a1ce4261fc24e5c52a47c1d40b07483249b0215", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  SONY NEWS-OS 4 version.\n-   Copyright (C) 1987, 1989, 1993, 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 93, 94, 96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -105,8 +105,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_DOUBLE\n #undef ASM_OUTPUT_SKIP\n #undef ASM_FORMAT_PRIVATE_NAME\n-#undef PRINT_OPERAND\n-#undef PRINT_OPERAND_ADDRESS\n #endif  \n \n #undef ASM_OUTPUT_ALIGN\n@@ -299,6 +297,66 @@ do { char dstr[30];\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 13),\t\\\n   sprintf ((OUTPUT), \"%s$$$%d\", (NAME), (LABELNO)))\n \n+/* Output a float value (represented as a C double) as an immediate operand.\n+   This macro is a 68k-specific macro.  */\n+\n+#undef ASM_OUTPUT_FLOAT_OPERAND\n+#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\t\\\n+ do {\t\t\t\t\t\t\t\t\t\\\n+      if (CODE == 'f')\t\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL (VALUE, \"%.9e\", dstr);\t\t\t\\\n+          if (REAL_VALUE_ISINF (VALUE) || REAL_VALUE_ISNAN (VALUE))\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+\t\tfprintf (FILE, \"#0f-99e999\");\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\t\\\n+\t\tfprintf (FILE, \"#0f99e999\");\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+          else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\\\n+            fprintf (FILE, \"#0f-0.0\");\t\t\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"#0f%s\", dstr); \t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          long l;\t\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\\\n+          fprintf (FILE, \"#0x%lx\", l);\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+     } while (0)\n+\n+/* Output a double value (represented as a C double) as an immediate operand.\n+   This macro is a 68k-specific macro.  */\n+#undef ASM_OUTPUT_DOUBLE_OPERAND\n+#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n+ do { char dstr[30];\t\t\t\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr );\t\t\t\\\n+      if (REAL_VALUE_ISINF (VALUE) || REAL_VALUE_ISNAN (VALUE))\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+        if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+          fprintf (FILE, \"#0d-99e999\");\t\t\t\t\t\\\n+        else\t\t\t\t\t\t\t\t\\\n+          fprintf (FILE, \"#0d99e999\");\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n+          fprintf (FILE, \"#0d-0.0\");\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+          fprintf (FILE, \"#0d%s\", dstr);\t\t\t\t\\\n+    } while (0)\n+\n+/* Note, long double immediate operands are not actually\n+   generated by m68k.md.  */\n+#undef ASM_OUTPUT_LONG_DOUBLE_OPERAND\n+#define ASM_OUTPUT_LONG_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\\\n+ do { char dstr[30];\t\t\t\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n+      asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n+    } while (0)\n+\n+#if 0\n+#undef PRINT_OPERAND\n #define PRINT_OPERAND(FILE, X, CODE)  \\\n { if (CODE == '.') fprintf (FILE, \".\");\t\t\t\t\t\\\n   else if (CODE == '#') fprintf (FILE, \"#\");\t\t\t\t\\\n@@ -354,7 +412,9 @@ do { char dstr[30];\t\t\t\t\t\\\n           fprintf (FILE, \"#0d%s\", dstr); }\t\t\t\t\\\n   else if (CODE == 'b') output_addr_const (FILE, X);\t\t\t\\\n   else { putc ('#', FILE); output_addr_const (FILE, X); }}\n+#endif\n \n+#undef PRINT_OPERAND_ADDRESS\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n { register rtx reg1, reg2, breg, ireg;\t\t\t\t\t\\\n   register rtx addr = ADDR;\t\t\t\t\t\t\\"}]}