{"sha": "9c1179c339e050e2ce7c545f648b684d38dec69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxMTc5YzMzOWUwNTBlMmNlN2M1NDVmNjQ4YjY4NGQzOGRlYzY5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-24T19:58:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-25T06:07:51Z"}, "message": "c++: Fix ICE with constrained friend (PR93400).\n\nHere, the problem was that tsubst_friend_function was modifying the\nCONSTRAINT_INFO for the friend template to have the constraints for one\ninstantiation, which fell down when we went to adjust it for another\ninstantiation.  Fixed by deferring substitution of trailing requirements\nuntil we try to check declaration matching.\n\n\tPR c++/93400 - ICE with constrained friend.\n\t* constraint.cc (maybe_substitute_reqs_for): New.\n\t* decl.c (function_requirements_equivalent_p): Call it.\n\t* pt.c (tsubst_friend_function): Only substitute\n\tTEMPLATE_PARMS_CONSTRAINTS.\n\t(tsubst_template_parms): Copy constraints.", "tree": {"sha": "fef82e21680ee056351348a5cc251447eb17b822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef82e21680ee056351348a5cc251447eb17b822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1179c339e050e2ce7c545f648b684d38dec69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1179c339e050e2ce7c545f648b684d38dec69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1179c339e050e2ce7c545f648b684d38dec69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1179c339e050e2ce7c545f648b684d38dec69d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b91e848130e45b427599ad30e99f96e447ea9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b91e848130e45b427599ad30e99f96e447ea9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b91e848130e45b427599ad30e99f96e447ea9aa"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "ca5676631ad845814f9b2dee14222ef552bb1d86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -1,3 +1,12 @@\n+2020-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93400 - ICE with constrained friend.\n+\t* constraint.cc (maybe_substitute_reqs_for): New.\n+\t* decl.c (function_requirements_equivalent_p): Call it.\n+\t* pt.c (tsubst_friend_function): Only substitute\n+\tTEMPLATE_PARMS_CONSTRAINTS.\n+\t(tsubst_template_parms): Copy constraints.\n+\n 2020-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93279 - ICE with lambda in member operator."}, {"sha": "cda644eabe272f742d98858c6faf1e50bd264a0e", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -1189,6 +1189,29 @@ remove_constraints (tree t)\n     decl_constraints->remove (t);\n }\n \n+/* If DECL is a friend, substitute into REQS to produce requirements suitable\n+   for declaration matching.  */\n+\n+tree\n+maybe_substitute_reqs_for (tree reqs, const_tree decl_)\n+{\n+  if (reqs == NULL_TREE)\n+    return NULL_TREE;\n+  tree decl = CONST_CAST_TREE (decl_);\n+  tree result = STRIP_TEMPLATE (decl);\n+  if (DECL_FRIEND_P (result))\n+    {\n+      tree tmpl = decl == result ? DECL_TI_TEMPLATE (result) : decl;\n+      tree gargs = generic_targs_for (tmpl);\n+      processing_template_decl_sentinel s;\n+      if (uses_template_parms (gargs))\n+\t++processing_template_decl;\n+      reqs = tsubst_constraint (reqs, gargs,\n+\t\t\t\ttf_warning_or_error, NULL_TREE);\n+    }\n+  return reqs;\n+}\n+\n /* Returns the template-head requires clause for the template\n    declaration T or NULL_TREE if none.  */\n "}, {"sha": "b8035b4360d9aee18864a89610ffad3f5172af96", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -7832,6 +7832,7 @@ extern void remove_constraints                  (tree);\n extern tree current_template_constraints\t(void);\n extern tree associate_classtype_constraints     (tree);\n extern tree build_constraints                   (tree, tree);\n+extern tree maybe_substitute_reqs_for\t\t(tree, const_tree);\n extern tree get_template_head_requirements\t(tree);\n extern tree get_trailing_function_requirements\t(tree);\n extern tree get_shorthand_constraints           (tree);"}, {"sha": "e55de5dd53df6f122dbbf9e5fd3a755c0c112631", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -942,6 +942,8 @@ function_requirements_equivalent_p (tree newfn, tree oldfn)\n   tree reqs2 = get_trailing_function_requirements (oldfn);\n   if ((reqs1 != NULL_TREE) != (reqs2 != NULL_TREE))\n     return false;\n+  reqs1 = maybe_substitute_reqs_for (reqs1, newfn);\n+  reqs2 = maybe_substitute_reqs_for (reqs2, oldfn);\n   return cp_tree_equal (reqs1, reqs2);\n }\n "}, {"sha": "45c204e426930a4f5d23d96ed473d636891244c6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -10834,29 +10834,12 @@ tsubst_friend_function (tree decl, tree args)\n       DECL_SAVED_TREE (DECL_TEMPLATE_RESULT (new_friend))\n \t= DECL_SAVED_TREE (DECL_TEMPLATE_RESULT (decl));\n \n-      /* Attach the template requirements to the new declaration\n-         for declaration matching. We need to rebuild the requirements\n-         so that parameter levels match.  */\n-      if (tree ci = get_constraints (decl))\n-\t{\n-\t  tree parms = DECL_TEMPLATE_PARMS (new_friend);\n-\t  tree args = generic_targs_for (new_friend);\n-\t  tree treqs = tsubst_constraint (CI_TEMPLATE_REQS (ci), args,\n-\t\t\t\t\t  tf_warning_or_error, NULL_TREE);\n-\t  tree freqs = tsubst_constraint (CI_DECLARATOR_REQS (ci), args,\n-\t\t\t\t\t  tf_warning_or_error, NULL_TREE);\n-\n-\t  /* Update the constraints -- these won't really be valid for\n-\t     checking, but that's not what we need them for. These ensure\n-\t     that the declared function can find the friend during\n-\t     declaration matching.  */\n-\t  tree new_ci = get_constraints (new_friend);\n-\t  CI_TEMPLATE_REQS (new_ci) = treqs;\n-\t  CI_DECLARATOR_REQS (new_ci) = freqs;\n-\n-\t  /* Also update the template parameter list.  */\n-\t  TEMPLATE_PARMS_CONSTRAINTS (parms) = treqs;\n-\t}\n+      /* Substitute TEMPLATE_PARMS_CONSTRAINTS so that parameter levels will\n+\t match in decls_match.  */\n+      tree parms = DECL_TEMPLATE_PARMS (new_friend);\n+      tree treqs = TEMPLATE_PARMS_CONSTRAINTS (parms);\n+      treqs = maybe_substitute_reqs_for (treqs, new_friend);\n+      TEMPLATE_PARMS_CONSTRAINTS (parms) = treqs;\n     }\n \n   /* The mangled name for the NEW_FRIEND is incorrect.  The function\n@@ -13225,6 +13208,8 @@ tsubst_template_parms (tree parms, tree args, tsubst_flags_t complain)\n \ttree_cons (size_int (TMPL_PARMS_DEPTH (parms)\n \t\t\t     - TMPL_ARGS_DEPTH (args)),\n \t\t   new_vec, NULL_TREE);\n+      TEMPLATE_PARMS_CONSTRAINTS (*new_parms)\n+\t= TEMPLATE_PARMS_CONSTRAINTS (parms);\n     }\n \n   --processing_template_decl;"}, {"sha": "4278278b9dfc383503bf84247f6ded588ea237a3", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend3.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend3.C?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -4,17 +4,20 @@ template <class T> concept True = true;\n \n template <True U> struct B { int i = ++U::x; };\n template <True U> void f() { ++U::x; }\n+template <class U> void g() requires True<U> { ++U::x; }\n \n template <class V> class C\n {\n   static int x;\n \n   template <True U> friend struct B;\n   template <True U> friend void f();\n+  template <class U> friend void g() requires True<U>;\n };\n \n int main()\n {\n   f<C<int>>();\n+  g<C<int>>();\n   B<C<int>>();\n }"}, {"sha": "394f141bf17bf00a2d70d4d09654ba05e65d825e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend5.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend5.C?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/93400\n+// { dg-do compile { target concepts } }\n+\n+template <typename> bool a = true;\n+template <typename i> concept b = a<i>;\n+template <int> struct f { template <b c> friend auto g(c, f); };\n+auto d = f<1>{};\n+auto e = f<0>{};"}, {"sha": "83a9083cf17642022b43b0c869c2496069b3448f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84140.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1179c339e050e2ce7c545f648b684d38dec69d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C?ref=9c1179c339e050e2ce7c545f648b684d38dec69d", "patch": "@@ -1,14 +1,13 @@\n // { dg-do run { target c++2a } }\n-// { dg-additional-options \"-fconcepts-ts\" }\n \n template<class, class> constexpr bool is_same_v = false;\n template<class T> constexpr bool is_same_v<T, T> = true;\n \n template<class T, class U>\n-concept bool Same = is_same_v<T, U>;\n+concept Same = is_same_v<T, U>;\n \n template<class T, class U>\n-concept bool Diff = requires(T& t, U& u) { u - t; };\n+concept Diff = requires(T& t, U& u) { u - t; };\n \n template<class I, class S>\n int distance(I, S) { return 0; }"}]}