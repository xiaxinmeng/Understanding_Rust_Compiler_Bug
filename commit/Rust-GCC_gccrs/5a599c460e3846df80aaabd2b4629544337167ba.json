{"sha": "5a599c460e3846df80aaabd2b4629544337167ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1OTljNDYwZTM4NDZkZjgwYWFhYmQyYjQ2Mjk1NDQzMzcxNjdiYQ==", "commit": {"author": {"name": "Allan Sandfeld Jensen", "email": "allan.jensen@qt.io", "date": "2018-05-11T07:38:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-11T07:38:49Z"}, "message": "re PR tree-optimization/85692 (Two source permute not used for vector initialization)\n\n\tPR tree-optimization/85692\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Try two\n\tsource permute as well.\n\n\t* gcc.target/i386/pr85692.c: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r260155", "tree": {"sha": "6e1b0fef494b7c8af393089dd92554f917016e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e1b0fef494b7c8af393089dd92554f917016e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a599c460e3846df80aaabd2b4629544337167ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a599c460e3846df80aaabd2b4629544337167ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a599c460e3846df80aaabd2b4629544337167ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a599c460e3846df80aaabd2b4629544337167ba/comments", "author": null, "committer": null, "parents": [{"sha": "19916065b7fb26bbb36f7bbe5688ae2c1661dec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19916065b7fb26bbb36f7bbe5688ae2c1661dec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19916065b7fb26bbb36f7bbe5688ae2c1661dec3"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "01d3b18ab446b5e0925ec0b04d6bc9530fd0434e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a599c460e3846df80aaabd2b4629544337167ba", "patch": "@@ -1,3 +1,10 @@\n+2018-05-11  Allan Sandfeld Jensen  <allan.jensen@qt.io>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85692\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Try two\n+\tsource permute as well.\n+\n 2018-05-11  Martin Liska  <mliska@suse.cz>\n \n         PR sanitizer/85556"}, {"sha": "1591122913dbfe99a1e99e4ff5b98d9144aede8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a599c460e3846df80aaabd2b4629544337167ba", "patch": "@@ -1,3 +1,9 @@\n+2018-05-11  Allan Sandfeld Jensen  <allan.jensen@qt.io>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85692\n+\t* gcc.target/i386/pr85692.c: New test.\n+\n 2018-05-11  Martin Liska  <mliska@suse.cz>\n \n         PR sanitizer/85556"}, {"sha": "45594ff00f4799a8b87259b245ea31e18befa76e", "filename": "gcc/testsuite/gcc.target/i386/pr85692.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85692.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85692.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85692.c?ref=5a599c460e3846df80aaabd2b4629544337167ba", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+/* { dg-final { scan-assembler \"unpcklps\" } } */\n+/* { dg-final { scan-assembler \"blendps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+\n+v4sf unpcklps(v4sf a, v4sf b)\n+{\n+    return (v4sf){a[0],b[0],a[1],b[1]};\n+}\n+\n+v4sf blendps(v4sf a, v4sf b)\n+{\n+    return (v4sf){a[0],b[1],a[2],b[3]};\n+}"}, {"sha": "2efb5acae8fd5f0b6c69992b69b05c619754798e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a599c460e3846df80aaabd2b4629544337167ba/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=5a599c460e3846df80aaabd2b4629544337167ba", "patch": "@@ -2004,7 +2004,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n   gimple *def_stmt;\n-  tree op, op2, orig, type, elem_type;\n+  tree op, op2, orig[2], type, elem_type;\n   unsigned elem_size, i;\n   unsigned HOST_WIDE_INT nelts;\n   enum tree_code code, conv_code;\n@@ -2023,7 +2023,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   elem_size = TREE_INT_CST_LOW (TYPE_SIZE (elem_type));\n \n   vec_perm_builder sel (nelts, nelts, 1);\n-  orig = NULL;\n+  orig[0] = NULL;\n+  orig[1] = NULL;\n   conv_code = ERROR_MARK;\n   maybe_ident = true;\n   FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (op), i, elt)\n@@ -2063,57 +2064,68 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \treturn false;\n       op1 = gimple_assign_rhs1 (def_stmt);\n       ref = TREE_OPERAND (op1, 0);\n-      if (orig)\n+      unsigned int j;\n+      for (j = 0; j < 2; ++j)\n \t{\n-\t  if (ref != orig)\n-\t    return false;\n-\t}\n-      else\n-\t{\n-\t  if (TREE_CODE (ref) != SSA_NAME)\n-\t    return false;\n-\t  if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n-\t      || ! useless_type_conversion_p (TREE_TYPE (op1),\n-\t\t\t\t\t      TREE_TYPE (TREE_TYPE (ref))))\n-\t    return false;\n-\t  orig = ref;\n+\t  if (!orig[j])\n+\t    {\n+\t      if (TREE_CODE (ref) != SSA_NAME)\n+\t\treturn false;\n+\t      if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n+\t\t  || ! useless_type_conversion_p (TREE_TYPE (op1),\n+\t\t\t\t\t\t  TREE_TYPE (TREE_TYPE (ref))))\n+\t\treturn false;\n+\t      if (j && !useless_type_conversion_p (TREE_TYPE (orig[0]),\n+\t\t\t\t\t\t   TREE_TYPE (ref)))\n+\t\treturn false;\n+\t      orig[j] = ref;\n+\t      break;\n+\t    }\n+\t  else if (ref == orig[j])\n+\t    break;\n \t}\n+      if (j == 2)\n+\treturn false;\n+\n       unsigned int elt;\n       if (maybe_ne (bit_field_size (op1), elem_size)\n \t  || !constant_multiple_p (bit_field_offset (op1), elem_size, &elt))\n \treturn false;\n+      if (j)\n+\telt += nelts;\n       if (elt != i)\n \tmaybe_ident = false;\n       sel.quick_push (elt);\n     }\n   if (i < nelts)\n     return false;\n \n-  if (! VECTOR_TYPE_P (TREE_TYPE (orig))\n+  if (! VECTOR_TYPE_P (TREE_TYPE (orig[0]))\n       || maybe_ne (TYPE_VECTOR_SUBPARTS (type),\n-\t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (orig))))\n+\t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (orig[0]))))\n     return false;\n \n   tree tem;\n   if (conv_code != ERROR_MARK\n-      && (! supportable_convert_operation (conv_code, type, TREE_TYPE (orig),\n+      && (! supportable_convert_operation (conv_code, type,\n+\t\t\t\t\t   TREE_TYPE (orig[0]),\n \t\t\t\t\t   &tem, &conv_code)\n \t  || conv_code == CALL_EXPR))\n     return false;\n \n   if (maybe_ident)\n     {\n       if (conv_code == ERROR_MARK)\n-\tgimple_assign_set_rhs_from_tree (gsi, orig);\n+\tgimple_assign_set_rhs_from_tree (gsi, orig[0]);\n       else\n-\tgimple_assign_set_rhs_with_ops (gsi, conv_code, orig,\n+\tgimple_assign_set_rhs_with_ops (gsi, conv_code, orig[0],\n \t\t\t\t\tNULL_TREE, NULL_TREE);\n     }\n   else\n     {\n       tree mask_type;\n \n-      vec_perm_indices indices (sel, 1, nelts);\n+      vec_perm_indices indices (sel, orig[1] ? 2 : 1, nelts);\n       if (!can_vec_perm_const_p (TYPE_MODE (type), indices))\n \treturn false;\n       mask_type\n@@ -2124,16 +2136,19 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t       GET_MODE_SIZE (TYPE_MODE (type))))\n \treturn false;\n       op2 = vec_perm_indices_to_tree (mask_type, indices);\n+      if (!orig[1])\n+\torig[1] = orig[0];\n       if (conv_code == ERROR_MARK)\n-\tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig, orig, op2);\n+\tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig[0],\n+\t\t\t\t\torig[1], op2);\n       else\n \t{\n \t  gimple *perm\n-\t    = gimple_build_assign (make_ssa_name (TREE_TYPE (orig)),\n-\t\t\t\t   VEC_PERM_EXPR, orig, orig, op2);\n-\t  orig = gimple_assign_lhs (perm);\n+\t    = gimple_build_assign (make_ssa_name (TREE_TYPE (orig[0])),\n+\t\t\t\t   VEC_PERM_EXPR, orig[0], orig[1], op2);\n+\t  orig[0] = gimple_assign_lhs (perm);\n \t  gsi_insert_before (gsi, perm, GSI_SAME_STMT);\n-\t  gimple_assign_set_rhs_with_ops (gsi, conv_code, orig,\n+\t  gimple_assign_set_rhs_with_ops (gsi, conv_code, orig[0],\n \t\t\t\t\t  NULL_TREE, NULL_TREE);\n \t}\n     }"}]}