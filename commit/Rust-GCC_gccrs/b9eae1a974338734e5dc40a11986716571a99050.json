{"sha": "b9eae1a974338734e5dc40a11986716571a99050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllYWUxYTk3NDMzODczNGU1ZGM0MGExMTk4NjcxNjU3MWE5OTA1MA==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2006-11-16T22:07:30Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2006-11-16T22:07:30Z"}, "message": "tree-vrp.c (get_value_range): Use XCNEW instead of XNEW and memset.\n\n2006-11-16  Dirk Mueller  <dmueller@suse.de>\n\n       * tree-vrp.c (get_value_range): Use XCNEW instead\n       of XNEW and memset.\n       (insert_range_assertions): Use XCNEWVEC instead\n       of XNEWVEC and memset.\n       (vrp_initialize): Same.\n       (vrp_finalize): Same.\n       * tree-ssa-ccp.c (ccp_initialize): Same.\n       * predict.c (tree_bb_level_predictions): Same.\n       * calls.c (expand_call): Same.\n       * tree-ssa-copy.c (init_copy_prop): Same.\n       (fini_copy_prop): Same.\n       * tree-ssa-alias.c (get_ptr_info): Use GGC_CNEW instead\n       of GGC_NEW and memset.\n\n       * name-lookup.c (begin_scope): Use GGC_CNEW instead of\n       GGC_NEW and memset.\n\nFrom-SVN: r118903", "tree": {"sha": "20a6800e6ec0f98f64180f37d80e0cf6783b98b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a6800e6ec0f98f64180f37d80e0cf6783b98b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9eae1a974338734e5dc40a11986716571a99050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9eae1a974338734e5dc40a11986716571a99050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9eae1a974338734e5dc40a11986716571a99050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9eae1a974338734e5dc40a11986716571a99050/comments", "author": null, "committer": null, "parents": [{"sha": "a9e64c639ef604bfc2d734b3973dfc0953875877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e64c639ef604bfc2d734b3973dfc0953875877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e64c639ef604bfc2d734b3973dfc0953875877"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "f8e398dcc61788c94e324a1fbd6f4a88422d91c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -1,3 +1,19 @@\n+2006-11-16  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* tree-vrp.c (get_value_range): Use XCNEW instead\n+\tof XNEW and memset.\n+\t(insert_range_assertions): Use XCNEWVEC instead\n+\tof XNEWVEC and memset.\n+\t(vrp_initialize): Same.\n+\t(vrp_finalize): Same.\n+\t* tree-ssa-ccp.c (ccp_initialize): Same.\n+\t* predict.c (tree_bb_level_predictions): Same.\n+\t* calls.c (expand_call): Same.\n+\t* tree-ssa-copy.c (init_copy_prop): Same.\n+\t(fini_copy_prop): Same.\n+\t* tree-ssa-alias.c (get_ptr_info): Use GGC_CNEW instead\n+\tof GGC_NEW and memset.\n+\n 2006-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/26306"}, {"sha": "bdb8167adeff7029004601a458ba8fc666fcbc01", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -2477,9 +2477,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  /* Make a new map for the new argument list.  */\n \t\t  if (stack_usage_map_buf)\n \t\t    free (stack_usage_map_buf);\n-\t\t  stack_usage_map_buf = XNEWVEC (char, highest_outgoing_arg_in_use);\n+\t\t  stack_usage_map_buf = XCNEWVEC (char, highest_outgoing_arg_in_use);\n \t\t  stack_usage_map = stack_usage_map_buf;\n-\t\t  memset (stack_usage_map, 0, highest_outgoing_arg_in_use);\n \t\t  highest_outgoing_arg_in_use = 0;\n \t\t}\n \t      allocate_dynamic_stack_space (push_size, NULL_RTX,"}, {"sha": "97844589bab44591be0a118510c94b61d43450d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -1,3 +1,8 @@\n+2006-11-16  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* name-lookup.c (begin_scope): Use GGC_CNEW instead of\n+\tGGC_NEW and memset.\n+\n 2006-11-13  Roger Sayle  <roger@eyesopen.com>\n \n \t* rtti.c (get_pseudo_ti_init): Ensure that the offset field of the"}, {"sha": "1eb8f5d90b21159fd4896b43013a6a3cc85e0309", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -1289,11 +1289,11 @@ begin_scope (scope_kind kind, tree entity)\n   if (!ENABLE_SCOPE_CHECKING && free_binding_level)\n     {\n       scope = free_binding_level;\n+      memset (scope, 0, sizeof (cxx_scope));\n       free_binding_level = scope->level_chain;\n     }\n   else\n-    scope = GGC_NEW (cxx_scope);\n-  memset (scope, 0, sizeof (cxx_scope));\n+    scope = GGC_CNEW (cxx_scope);\n \n   scope->this_entity = entity;\n   scope->more_cleanups_ok = true;"}, {"sha": "6b493e264f2454818ac5f42a7fc6ac503ca8ab64", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -1211,8 +1211,7 @@ tree_bb_level_predictions (void)\n   basic_block bb;\n   int *heads;\n \n-  heads = XNEWVEC (int, last_basic_block);\n-  memset (heads, ENTRY_BLOCK, sizeof (int) * last_basic_block);\n+  heads = XCNEWVEC (int, last_basic_block);\n   heads[ENTRY_BLOCK_PTR->next_bb->index] = last_basic_block;\n \n   apply_return_prediction (heads);"}, {"sha": "18db998ec665f170cd53ff266d89acabbad18725", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -2465,8 +2465,7 @@ get_ptr_info (tree t)\n   pi = SSA_NAME_PTR_INFO (t);\n   if (pi == NULL)\n     {\n-      pi = GGC_NEW (struct ptr_info_def);\n-      memset ((void *)pi, 0, sizeof (*pi));\n+      pi = GGC_CNEW (struct ptr_info_def);\n       SSA_NAME_PTR_INFO (t) = pi;\n     }\n "}, {"sha": "9dd63fe3fd2709f65971c2c730b6758612c37d90", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -551,8 +551,7 @@ ccp_initialize (void)\n {\n   basic_block bb;\n \n-  const_val = XNEWVEC (prop_value_t, num_ssa_names);\n-  memset (const_val, 0, num_ssa_names * sizeof (*const_val));\n+  const_val = XCNEWVEC (prop_value_t, num_ssa_names);\n \n   /* Initialize simulation flags for PHI nodes and statements.  */\n   FOR_EACH_BB (bb)"}, {"sha": "43172d78e4e27a2f8227943d2605cb9f6cd508ad", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -882,11 +882,9 @@ init_copy_prop (void)\n {\n   basic_block bb;\n \n-  copy_of = XNEWVEC (prop_value_t, num_ssa_names);\n-  memset (copy_of, 0, num_ssa_names * sizeof (*copy_of));\n+  copy_of = XCNEWVEC (prop_value_t, num_ssa_names);\n \n-  cached_last_copy_of = XNEWVEC (tree, num_ssa_names);\n-  memset (cached_last_copy_of, 0, num_ssa_names * sizeof (*cached_last_copy_of));\n+  cached_last_copy_of = XCNEWVEC (tree, num_ssa_names);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -954,8 +952,7 @@ fini_copy_prop (void)\n   \n   /* Set the final copy-of value for each variable by traversing the\n      copy-of chains.  */\n-  tmp = XNEWVEC (prop_value_t, num_ssa_names);\n-  memset (tmp, 0, num_ssa_names * sizeof (*tmp));\n+  tmp = XCNEWVEC (prop_value_t, num_ssa_names);\n   for (i = 1; i < num_ssa_names; i++)\n     {\n       tree var = ssa_name (i);"}, {"sha": "8b43770413088f2fb97b7821cd8c89702d71e139", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9eae1a974338734e5dc40a11986716571a99050/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b9eae1a974338734e5dc40a11986716571a99050", "patch": "@@ -265,8 +265,7 @@ get_value_range (tree var)\n     return vr;\n \n   /* Create a default value range.  */\n-  vr_value[ver] = vr = XNEW (value_range_t);\n-  memset (vr, 0, sizeof (*vr));\n+  vr_value[ver] = vr = XCNEW (value_range_t);\n \n   /* Allocate an equivalence set.  */\n   vr->equiv = BITMAP_ALLOC (NULL);\n@@ -3347,8 +3346,7 @@ insert_range_assertions (void)\n   sbitmap_zero (blocks_visited);\n \n   need_assert_for = BITMAP_ALLOC (NULL);\n-  asserts_for = XNEWVEC (assert_locus_t, num_ssa_names);\n-  memset (asserts_for, 0, num_ssa_names * sizeof (assert_locus_t));\n+  asserts_for = XCNEWVEC (assert_locus_t, num_ssa_names);\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -3486,8 +3484,7 @@ vrp_initialize (void)\n {\n   basic_block bb;\n \n-  vr_value = XNEWVEC (value_range_t *, num_ssa_names);\n-  memset (vr_value, 0, num_ssa_names * sizeof (value_range_t *));\n+  vr_value = XCNEWVEC (value_range_t *, num_ssa_names);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -4683,8 +4680,7 @@ vrp_finalize (void)\n   /* We may have ended with ranges that have exactly one value.  Those\n      values can be substituted as any other copy/const propagated\n      value using substitute_and_fold.  */\n-  single_val_range = XNEWVEC (prop_value_t, num_ssa_names);\n-  memset (single_val_range, 0, num_ssa_names * sizeof (*single_val_range));\n+  single_val_range = XCNEWVEC (prop_value_t, num_ssa_names);\n \n   do_value_subst_p = false;\n   for (i = 0; i < num_ssa_names; i++)"}]}