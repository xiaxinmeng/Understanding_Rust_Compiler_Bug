{"sha": "3069a2e599700a40ae03569b54b9a562dc919510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2OWEyZTU5OTcwMGE0MGFlMDM1NjliNTRiOWE1NjJkYzkxOTUxMA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-11T21:51:49Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:28Z"}, "message": "AVX512FP16: Add vcvtsh2si/vcvtsh2usi/vcvtsi2sh/vcvtusi2sh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_cvtsh_i32): New intrinsic.\n\t(_mm_cvtsh_u32): Likewise.\n\t(_mm_cvt_roundsh_i32): Likewise.\n\t(_mm_cvt_roundsh_u32): Likewise.\n\t(_mm_cvtsh_i64): Likewise.\n\t(_mm_cvtsh_u64): Likewise.\n\t(_mm_cvt_roundsh_i64): Likewise.\n\t(_mm_cvt_roundsh_u64): Likewise.\n\t(_mm_cvti32_sh): Likewise.\n\t(_mm_cvtu32_sh): Likewise.\n\t(_mm_cvt_roundi32_sh): Likewise.\n\t(_mm_cvt_roundu32_sh): Likewise.\n\t(_mm_cvti64_sh): Likewise.\n\t(_mm_cvtu64_sh): Likewise.\n\t(_mm_cvt_roundi64_sh): Likewise.\n\t(_mm_cvt_roundu64_sh): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c (ix86_expand_round_builtin):\n\tHandle new builtin types.\n\t* config/i386/sse.md\n\t(avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix><round_name>):\n\tNew define_insn.\n\t(avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix>_2): Likewise.\n\t(avx512fp16_vcvt<floatsuffix>si2sh<rex64namesuffix><round_name>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "3ab3e07eee5fd77fa68a65ea9730ec63da824737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ab3e07eee5fd77fa68a65ea9730ec63da824737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3069a2e599700a40ae03569b54b9a562dc919510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3069a2e599700a40ae03569b54b9a562dc919510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3069a2e599700a40ae03569b54b9a562dc919510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3069a2e599700a40ae03569b54b9a562dc919510/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19570d38fbe382c412bf68ad591e669d6f7f245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19570d38fbe382c412bf68ad591e669d6f7f245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19570d38fbe382c412bf68ad591e669d6f7f245"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "1b8a9f340ade4a954d44e4f2e0d04ebc140bff53", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -3529,6 +3529,164 @@ _mm512_maskz_cvt_roundepu16_ph (__mmask32 __A, __m512i __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvtsh2si, vcvtsh2us.  */\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_i32 (__m128h __A)\n+{\n+  return (int) __builtin_ia32_vcvtsh2si32_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline unsigned\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_u32 (__m128h __A)\n+{\n+  return (int) __builtin_ia32_vcvtsh2usi32_round (__A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_i32 (__m128h __A, const int __R)\n+{\n+  return (int) __builtin_ia32_vcvtsh2si32_round (__A, __R);\n+}\n+\n+extern __inline unsigned\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_u32 (__m128h __A, const int __R)\n+{\n+  return (int) __builtin_ia32_vcvtsh2usi32_round (__A, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundsh_i32(A, B)\t\t\\\n+  ((int)__builtin_ia32_vcvtsh2si32_round ((A), (B)))\n+#define _mm_cvt_roundsh_u32(A, B)\t\t\\\n+  ((int)__builtin_ia32_vcvtsh2usi32_round ((A), (B)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+#ifdef __x86_64__\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_i64 (__m128h __A)\n+{\n+  return (long long)\n+    __builtin_ia32_vcvtsh2si64_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_u64 (__m128h __A)\n+{\n+  return (long long)\n+    __builtin_ia32_vcvtsh2usi64_round (__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_i64 (__m128h __A, const int __R)\n+{\n+  return (long long) __builtin_ia32_vcvtsh2si64_round (__A, __R);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsh_u64 (__m128h __A, const int __R)\n+{\n+  return (long long) __builtin_ia32_vcvtsh2usi64_round (__A, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundsh_i64(A, B)\t\t\t\\\n+  ((long long)__builtin_ia32_vcvtsh2si64_round ((A), (B)))\n+#define _mm_cvt_roundsh_u64(A, B)\t\t\t\\\n+  ((long long)__builtin_ia32_vcvtsh2usi64_round ((A), (B)))\n+\n+#endif /* __OPTIMIZE__ */\n+#endif /* __x86_64__ */\n+\n+/* Intrinsics vcvtsi2sh, vcvtusi2sh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti32_sh (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vcvtsi2sh32_round (__A, __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtu32_sh (__m128h __A, unsigned int __B)\n+{\n+  return __builtin_ia32_vcvtusi2sh32_round (__A, __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundi32_sh (__m128h __A, int __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtsi2sh32_round (__A, __B, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundu32_sh (__m128h __A, unsigned int __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtusi2sh32_round (__A, __B, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundi32_sh(A, B, C)\t\t\\\n+  (__builtin_ia32_vcvtsi2sh32_round ((A), (B), (C)))\n+#define _mm_cvt_roundu32_sh(A, B, C)\t\t\\\n+  (__builtin_ia32_vcvtusi2sh32_round ((A), (B), (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+#ifdef __x86_64__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti64_sh (__m128h __A, long long __B)\n+{\n+  return __builtin_ia32_vcvtsi2sh64_round (__A, __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtu64_sh (__m128h __A, unsigned long long __B)\n+{\n+  return __builtin_ia32_vcvtusi2sh64_round (__A, __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundi64_sh (__m128h __A, long long __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtsi2sh64_round (__A, __B, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundu64_sh (__m128h __A, unsigned long long __B, const int __R)\n+{\n+  return __builtin_ia32_vcvtusi2sh64_round (__A, __B, __R);\n+}\n+\n+#else\n+#define _mm_cvt_roundi64_sh(A, B, C)\t\t\\\n+  (__builtin_ia32_vcvtsi2sh64_round ((A), (B), (C)))\n+#define _mm_cvt_roundu64_sh(A, B, C)\t\t\\\n+  (__builtin_ia32_vcvtusi2sh64_round ((A), (B), (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+#endif /* __x86_64__ */\n+\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "ffb67e2844555a68b2d8955f6a0f0a80f4ffa7ea", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -1308,9 +1308,17 @@ DEF_FUNCTION_TYPE (V8HF, V8HI)\n DEF_FUNCTION_TYPE (QI, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (HI, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (SI, V32HF, INT, USI)\n+DEF_FUNCTION_TYPE (INT, V8HF, INT)\n+DEF_FUNCTION_TYPE (INT64, V8HF, INT)\n+DEF_FUNCTION_TYPE (UINT, V8HF, INT)\n+DEF_FUNCTION_TYPE (UINT64, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (VOID, PCFLOAT16, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, PCFLOAT16, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, INT, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, INT64, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, UINT, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, UINT64, INT)\n DEF_FUNCTION_TYPE (V2DI, V8HF, V2DI, UQI)\n DEF_FUNCTION_TYPE (V4DI, V8HF, V4DI, UQI)\n DEF_FUNCTION_TYPE (V4SI, V8HF, V4SI, UQI)"}, {"sha": "cc3efa35b741241366c5018797fd6b63304dbc65", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -3094,6 +3094,14 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtdq2ph_v16si_mask_\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtudq2ph_v16si_mask_round, \"__builtin_ia32_vcvtudq2ph512_mask_round\", IX86_BUILTIN_VCVTUDQ2PH512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SI_V16HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtqq2ph_v8di_mask_round, \"__builtin_ia32_vcvtqq2ph512_mask_round\", IX86_BUILTIN_VCVTQQ2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DI_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v8di_mask_round, \"__builtin_ia32_vcvtuqq2ph512_mask_round\", IX86_BUILTIN_VCVTUQQ2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DI_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2si_round, \"__builtin_ia32_vcvtsh2si32_round\", IX86_BUILTIN_VCVTSH2SI32_ROUND, UNKNOWN, (int) INT_FTYPE_V8HF_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2siq_round, \"__builtin_ia32_vcvtsh2si64_round\", IX86_BUILTIN_VCVTSH2SI64_ROUND, UNKNOWN, (int) INT64_FTYPE_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2usi_round, \"__builtin_ia32_vcvtsh2usi32_round\", IX86_BUILTIN_VCVTSH2USI32_ROUND, UNKNOWN, (int) UINT_FTYPE_V8HF_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsh2usiq_round, \"__builtin_ia32_vcvtsh2usi64_round\", IX86_BUILTIN_VCVTSH2USI64_ROUND, UNKNOWN, (int) UINT64_FTYPE_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2sh_round, \"__builtin_ia32_vcvtsi2sh32_round\", IX86_BUILTIN_VCVTSI2SH32_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtsi2shq_round, \"__builtin_ia32_vcvtsi2sh64_round\", IX86_BUILTIN_VCVTSI2SH64_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT64_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtusi2sh_round, \"__builtin_ia32_vcvtusi2sh32_round\", IX86_BUILTIN_VCVTUSI2SH32_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_UINT_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtusi2shq_round, \"__builtin_ia32_vcvtusi2sh64_round\", IX86_BUILTIN_VCVTUSI2SH64_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_UINT64_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "9058d11e0e7d82edddbfe2a5cd64a7004d474296", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -10667,16 +10667,24 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     {\n     case UINT64_FTYPE_V2DF_INT:\n     case UINT64_FTYPE_V4SF_INT:\n+    case UINT64_FTYPE_V8HF_INT:\n     case UINT_FTYPE_V2DF_INT:\n     case UINT_FTYPE_V4SF_INT:\n+    case UINT_FTYPE_V8HF_INT:\n     case INT64_FTYPE_V2DF_INT:\n     case INT64_FTYPE_V4SF_INT:\n+    case INT64_FTYPE_V8HF_INT:\n     case INT_FTYPE_V2DF_INT:\n     case INT_FTYPE_V4SF_INT:\n+    case INT_FTYPE_V8HF_INT:\n       nargs = 2;\n       break;\n     case V32HF_FTYPE_V32HF_V32HF_INT:\n     case V8HF_FTYPE_V8HF_V8HF_INT:\n+    case V8HF_FTYPE_V8HF_INT_INT:\n+    case V8HF_FTYPE_V8HF_UINT_INT:\n+    case V8HF_FTYPE_V8HF_INT64_INT:\n+    case V8HF_FTYPE_V8HF_UINT64_INT:\n     case V4SF_FTYPE_V4SF_UINT_INT:\n     case V4SF_FTYPE_V4SF_UINT64_INT:\n     case V2DF_FTYPE_V2DF_UINT64_INT:"}, {"sha": "e78cc8420571f5029b2d0c91fbac15f6916197d4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -5894,6 +5894,45 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix><round_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n+\t  [(vec_select:HF\n+\t     (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t     (parallel [(const_int 0)]))]\n+\t  UNSPEC_US_FIX_NOTRUNC))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtsh2<sseintconvertsignprefix>si\\t{<round_op2>%1, %0|%0, %1<round_op2>}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512fp16_vcvtsh2<sseintconvertsignprefix>si<rex64namesuffix>_2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SWI48\n+\t  [(match_operand:HF 1 \"nonimmediate_operand\" \"v,m\")]\n+\t  UNSPEC_US_FIX_NOTRUNC))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtsh2<sseintconvertsignprefix>si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_mode_attr sseicvtsuffix\n+  [(SI \"l\") (DI \"q\")])\n+(define_insn \"avx512fp16_vcvt<floatsuffix>si2sh<rex64namesuffix><round_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (any_float:HF\n+\t      (match_operand:SWI48 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint3>\")))\n+\t  (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<floatsuffix>si2sh{<sseicvtsuffix>}\\t{%2, <round_op3>%1, %0|%0, %1<round_op3>, %2}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;"}, {"sha": "fbefac793a021b5d376f5ae00e21f9bf26fddf5c", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -731,6 +731,14 @@\n #define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2si32_round(A, B) __builtin_ia32_vcvtsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "5db9e355ae210963c5f611be851a16d5f28bd6ad", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -748,6 +748,14 @@\n #define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2si32_round(A, B) __builtin_ia32_vcvtsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "89a589e0d80a31e0b40632e55cd116f466f53b45", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -690,6 +690,14 @@ test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n+test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n+test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n+#ifdef __x86_64__\n+test_1 (_mm_cvt_roundsh_i64, long long, __m128h, 8)\n+test_1 (_mm_cvt_roundsh_u64, unsigned long long, __m128h, 8)\n+test_2 (_mm_cvt_roundi64_sh, __m128h, __m128h, long long, 8)\n+test_2 (_mm_cvt_roundu64_sh, __m128h, __m128h, unsigned long long, 8)\n+#endif\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n@@ -734,6 +742,8 @@ test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n+test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)"}, {"sha": "fed12744c6c1dd1ee73c03109b80b368de3466ee", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -795,6 +795,14 @@ test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n+test_1 (_mm_cvt_roundsh_i32, int, __m128h, 8)\n+test_1 (_mm_cvt_roundsh_u32, unsigned, __m128h, 8)\n+#ifdef __x86_64__\n+test_1 (_mm_cvt_roundsh_i64, long long, __m128h, 8)\n+test_1 (_mm_cvt_roundsh_u64, unsigned long long, __m128h, 8)\n+test_2 (_mm_cvt_roundi64_sh, __m128h, __m128h, long long, 8)\n+test_2 (_mm_cvt_roundu64_sh, __m128h, __m128h, unsigned long long, 8)\n+#endif\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n@@ -838,6 +846,8 @@ test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n+test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)"}, {"sha": "354178a7c01ac8b2d4913a8c8edead8cfb75ab5c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3069a2e599700a40ae03569b54b9a562dc919510/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=3069a2e599700a40ae03569b54b9a562dc919510", "patch": "@@ -749,6 +749,14 @@\n #define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtsh2si32_round(A, B) __builtin_ia32_vcvtsh2si32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2si64_round(A, B) __builtin_ia32_vcvtsh2si64_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi32_round(A, B) __builtin_ia32_vcvtsh2usi32_round(A, 8)\n+#define __builtin_ia32_vcvtsh2usi64_round(A, B) __builtin_ia32_vcvtsh2usi64_round(A, 8)\n+#define __builtin_ia32_vcvtsi2sh32_round(A, B, C) __builtin_ia32_vcvtsi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtsi2sh64_round(A, B, C) __builtin_ia32_vcvtsi2sh64_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh32_round(A, B, C) __builtin_ia32_vcvtusi2sh32_round(A, B, 8)\n+#define __builtin_ia32_vcvtusi2sh64_round(A, B, C) __builtin_ia32_vcvtusi2sh64_round(A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}