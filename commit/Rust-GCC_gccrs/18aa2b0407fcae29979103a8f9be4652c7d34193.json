{"sha": "18aa2b0407fcae29979103a8f9be4652c7d34193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhYTJiMDQwN2ZjYWUyOTk3OTEwM2E4ZjliZTQ2NTJjN2QzNDE5Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-10-24T02:10:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-10-24T02:10:10Z"}, "message": "gengtype: parse base classes for some GTY-marked types\n\n2013-10-23  David Malcolm  <dmalcolm@redhat.com>\n\n\t* gengtype-parse.c (require_without_advance): New.\n\t(type): For GTY-marked types that are not GTY((user)), parse any\n\tbase classes, requiring them to be single-inheritance, and not\n\tbe templates.  For non-GTY-marked types and GTY((user)),\n\tcontinue to skip over any C++ inheritance specification.\n\t* gengtype-state.c (state_writer::write_state_struct_type):\n\tWrite base class of type (if any).\n\t(read_state_struct_type): Read base class of type (if any).\n\t* gengtype.c (new_structure): Add a \"base_class\" parameter.\n\t(create_optional_field_): Update for new parameter to\n\tnew_structure.\n\t(adjust_field_rtx_def): Likewise.\n\t(adjust_field_tree_exp): Likewise.\n\t* gengtype.h (struct type): Add \"base_class\" field to the s\n\tunion field.\n\t(new_structure): Add \"base\" parameter.\n\nFrom-SVN: r204003", "tree": {"sha": "47f303b7d339aeffeb3949f863c13b6533cf2f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f303b7d339aeffeb3949f863c13b6533cf2f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18aa2b0407fcae29979103a8f9be4652c7d34193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aa2b0407fcae29979103a8f9be4652c7d34193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18aa2b0407fcae29979103a8f9be4652c7d34193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aa2b0407fcae29979103a8f9be4652c7d34193/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f3097a3e288ba16caa19a66e1a48f2f2ffc7a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3097a3e288ba16caa19a66e1a48f2f2ffc7a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3097a3e288ba16caa19a66e1a48f2f2ffc7a6c"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "f5c2d8b20b32deabcb051303ce33b9e56be537a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18aa2b0407fcae29979103a8f9be4652c7d34193", "patch": "@@ -1,3 +1,22 @@\n+2013-10-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gengtype-parse.c (require_without_advance): New.\n+\t(type): For GTY-marked types that are not GTY((user)), parse any\n+\tbase classes, requiring them to be single-inheritance, and not\n+\tbe templates.  For non-GTY-marked types and GTY((user)),\n+\tcontinue to skip over any C++ inheritance specification.\n+\t* gengtype-state.c (state_writer::write_state_struct_type):\n+\tWrite base class of type (if any).\n+\t(read_state_struct_type): Read base class of type (if any).\n+\t* gengtype.c (new_structure): Add a \"base_class\" parameter.\n+\t(create_optional_field_): Update for new parameter to\n+\tnew_structure.\n+\t(adjust_field_rtx_def): Likewise.\n+\t(adjust_field_tree_exp): Likewise.\n+\t* gengtype.h (struct type): Add \"base_class\" field to the s\n+\tunion field.\n+\t(new_structure): Add \"base\" parameter.\n+\n 2013-10-23  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/57756"}, {"sha": "31d493a46f52b1133b5fc221d0b215ecf64f63c5", "filename": "gcc/gengtype-parse.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-parse.c?ref=18aa2b0407fcae29979103a8f9be4652c7d34193", "patch": "@@ -165,6 +165,21 @@ require (int t)\n   return v;\n }\n \n+/* As per require, but do not advance.  */\n+static const char *\n+require_without_advance (int t)\n+{\n+  int u = token ();\n+  const char *v = T.value;\n+  if (u != t)\n+    {\n+      parse_error (\"expected %s, have %s\",\n+\t\t   print_token (t, 0), print_token (u, v));\n+      return 0;\n+    }\n+  return v;\n+}\n+\n /* If the next token does not have one of the codes T1 or T2, report a\n    parse error; otherwise return the token's value.  */\n static const char *\n@@ -829,6 +844,7 @@ type (options_p *optsp, bool nested)\n     case STRUCT:\n     case UNION:\n       {\n+\ttype_p base_class = NULL;\n \toptions_p opts = 0;\n \t/* GTY annotations follow attribute syntax\n \t   GTY_BEFORE_ID is for union/struct declarations\n@@ -868,16 +884,39 @@ type (options_p *optsp, bool nested)\n \t    opts = gtymarker_opt ();\n \t  }\n \n+\tbool is_user_gty = opts_have (opts, \"user\");\n+\n \tif (token () == ':')\n \t  {\n-\t    /* Skip over C++ inheritance specification.  */\n-\t    while (token () != '{')\n-\t      advance ();\n+\t    if (is_gty && !is_user_gty)\n+\t      {\n+\t\t/* For GTY-marked types that are not \"user\", parse some C++\n+\t\t   inheritance specifications.\n+\t\t   We require single-inheritance from a non-template type.  */\n+\t\tadvance ();\n+\t\tconst char *basename = require (ID);\n+\t\t/* This may be either an access specifier, or the base name.  */\n+\t\tif (0 == strcmp (basename, \"public\")\n+\t\t    || 0 == strcmp (basename, \"protected\")\n+\t\t    || 0 == strcmp (basename, \"private\"))\n+\t\t  basename = require (ID);\n+\t\tbase_class = find_structure (basename, TYPE_STRUCT);\n+\t\tif (!base_class)\n+\t\t  parse_error (\"unrecognized base class: %s\", basename);\n+\t\trequire_without_advance ('{');\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* For types lacking GTY-markings, skip over C++ inheritance\n+\t\t   specification (and thus avoid having to parse e.g. template\n+\t\t   types).  */\n+\t\twhile (token () != '{')\n+\t\t  advance ();\n+\t      }\n \t  }\n \n \tif (is_gty)\n \t  {\n-\t    bool is_user_gty = opts_have (opts, \"user\");\n \t    if (token () == '{')\n \t      {\n \t\tpair_p fields;\n@@ -900,7 +939,8 @@ type (options_p *optsp, bool nested)\n \t\t    return create_user_defined_type (s, &lexer_line);\n \t\t  }\n \n-\t\treturn new_structure (s, kind, &lexer_line, fields, opts);\n+\t\treturn new_structure (s, kind, &lexer_line, fields, opts,\n+\t\t\t\t      base_class);\n \t      }\n \t  }\n \telse if (token () == '{')"}, {"sha": "1e9fadeb006b492d68a801ff825b2586bb0c6193", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=18aa2b0407fcae29979103a8f9be4652c7d34193", "patch": "@@ -957,6 +957,7 @@ state_writer::write_state_struct_type (type_p current)\n {\n   write_state_struct_union_type (current, \"struct\");\n   write_state_type (current->u.s.lang_struct);\n+  write_state_type (current->u.s.base_class);\n }\n \n /* Write a GTY user-defined struct type.  */\n@@ -1613,6 +1614,7 @@ read_state_struct_type (type_p type)\n       read_state_options (&(type->u.s.opt));\n       read_state_lang_bitmap (&(type->u.s.bitmap));\n       read_state_type (&(type->u.s.lang_struct));\n+      read_state_type (&(type->u.s.base_class));\n     }\n   else\n     {"}, {"sha": "a66f835a2f254dc1e8b909526cc058db4f3bbd69", "filename": "gcc/gengtype.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=18aa2b0407fcae29979103a8f9be4652c7d34193", "patch": "@@ -674,7 +674,7 @@ resolve_typedef (const char *s, struct fileloc *pos)\n \n type_p\n new_structure (const char *name, enum typekind kind, struct fileloc *pos,\n-\t       pair_p fields, options_p o)\n+\t       pair_p fields, options_p o, type_p base_class)\n {\n   type_p si;\n   type_p s = NULL;\n@@ -748,6 +748,7 @@ new_structure (const char *name, enum typekind kind, struct fileloc *pos,\n   s->u.s.bitmap = bitmap;\n   if (s->u.s.lang_struct)\n     s->u.s.lang_struct->u.s.bitmap |= bitmap;\n+  s->u.s.base_class = base_class;\n \n   return s;\n }\n@@ -976,7 +977,7 @@ create_optional_field_ (pair_p next, type_p type, const char *name,\n     create_string_option (union_fields->opt, \"tag\", \"1\");\n   union_type = \n     new_structure (xasprintf (\"%s_%d\", \"fake_union\", id++), TYPE_UNION,\n-                   &lexer_line, union_fields, NULL);\n+                   &lexer_line, union_fields, NULL, NULL);\n \n   /* Create the field and give it the new fake union type.  Add a \"desc\"\n      tag that specifies the condition under which the field is valid.  */\n@@ -1167,7 +1168,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t    create_string_option (nodot, \"tag\", note_insn_name[c]);\n       }\n     note_union_tp = new_structure (\"rtx_def_note_subunion\", TYPE_UNION,\n-\t\t\t\t   &lexer_line, note_flds, NULL);\n+\t\t\t\t   &lexer_line, note_flds, NULL, NULL);\n   }\n   /* Create a type to represent the various forms of SYMBOL_REF_DATA.  */\n   {\n@@ -1177,7 +1178,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n     sym_flds = create_field (sym_flds, constant_tp, \"rt_constant\");\n     sym_flds->opt = create_string_option (nodot, \"tag\", \"1\");\n     symbol_union_tp = new_structure (\"rtx_def_symbol_subunion\", TYPE_UNION,\n-\t\t\t\t     &lexer_line, sym_flds, NULL);\n+\t\t\t\t     &lexer_line, sym_flds, NULL, NULL);\n   }\n   for (i = 0; i < NUM_RTX_CODE; i++)\n     {\n@@ -1319,7 +1320,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \n       sname = xasprintf (\"rtx_def_%s\", rtx_name[i]);\n       substruct = new_structure (sname, TYPE_STRUCT, &lexer_line, subfields,\n-\t\t\t\t NULL);\n+\t\t\t\t NULL, NULL);\n \n       ftag = xstrdup (rtx_name[i]);\n       for (nmindex = 0; nmindex < strlen (ftag); nmindex++)\n@@ -1328,7 +1329,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n       flds->opt = create_string_option (nodot, \"tag\", ftag);\n     }\n   return new_structure (\"rtx_def_subunion\", TYPE_UNION, &lexer_line, flds,\n-\t\t\tnodot);\n+\t\t\tnodot, NULL);\n }\n \n /* Handle `special(\"tree_exp\")'.  This is a special case for\n@@ -1358,7 +1359,7 @@ adjust_field_tree_exp (type_p t, options_p opt ATTRIBUTE_UNUSED)\n   flds->opt = create_string_option (flds->opt, \"default\", \"\");\n \n   return new_structure (\"tree_exp_subunion\", TYPE_UNION, &lexer_line, flds,\n-\t\t\tnodot);\n+\t\t\tnodot, NULL);\n }\n \n /* Perform any special processing on a type T, about to become the type"}, {"sha": "06ebbed55a824d168b2d87dec11d0fbbde86b3fc", "filename": "gcc/gengtype.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aa2b0407fcae29979103a8f9be4652c7d34193/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=18aa2b0407fcae29979103a8f9be4652c7d34193", "patch": "@@ -291,6 +291,8 @@ struct type {\n          field the original TYPE_LANG_STRUCT type.  This is a dirty\n          trick, see the new_structure function for details.  */\n       type_p lang_struct;\n+\n+      type_p base_class; /* the parent class, if any.  */\n     } s;\n \n     /* when TYPE_SCALAR: */\n@@ -424,7 +426,7 @@ extern void do_scalar_typedef (const char *s, struct fileloc *pos);\n extern type_p resolve_typedef (const char *s, struct fileloc *pos);\n extern type_p new_structure (const char *name, enum typekind kind,\n \t\t\t     struct fileloc *pos, pair_p fields,\n-\t\t\t     options_p o);\n+\t\t\t     options_p o, type_p base);\n type_p create_user_defined_type (const char *, struct fileloc *);\n extern type_p find_structure (const char *s, enum typekind kind);\n extern type_p create_scalar_type (const char *name);"}]}