{"sha": "ce6eec392647046167e7dfecd3dfdd07012b8931", "node_id": "C_kwDOANBUbNoAKGNlNmVlYzM5MjY0NzA0NjE2N2U3ZGZlY2QzZGZkZDA3MDEyYjg5MzE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-09T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-09T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "227371ac205d59c28d78d23eb9b4cf05e537172b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227371ac205d59c28d78d23eb9b4cf05e537172b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce6eec392647046167e7dfecd3dfdd07012b8931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6eec392647046167e7dfecd3dfdd07012b8931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6eec392647046167e7dfecd3dfdd07012b8931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6eec392647046167e7dfecd3dfdd07012b8931/comments", "author": null, "committer": null, "parents": [{"sha": "fec283b63d7f24f4c37792dd07ab1055186ba88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec283b63d7f24f4c37792dd07ab1055186ba88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec283b63d7f24f4c37792dd07ab1055186ba88f"}], "stats": {"total": 587, "additions": 586, "deletions": 1}, "files": [{"sha": "fe1b154f73a6e48b5c961f3815f343142d27f6a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,119 @@\n+2021-10-08  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/102627\n+\t* lra-constraints.c (split_reg): Use at least natural mode of hard reg.\n+\n+2021-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::non_null_deref_p): Grow\n+\tbitmap if needed.\n+\n+2021-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::debug): New.\n+\t* value-range.h (irange::debug): New.\n+\n+2021-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/102385\n+\t* predict.h (change_edge_frequency): Declare.\n+\t* predict.c (change_edge_frequency): New function.\n+\t* tree-ssa-loop-manip.h (tree_transform_and_unroll_loop): Remove\n+\tedge argument.\n+\t(tree_unroll_loop): Likewise.\n+\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): Update accordingly.\n+\t* tree-predcom.c (pcom_worker::tree_predictive_commoning_loop):\n+\tLikewise.\n+\t* tree-ssa-loop-prefetch.c (loop_prefetch_arrays): Likewise.\n+\t* tree-ssa-loop-manip.c (tree_unroll_loop): Likewise.\n+\t(tree_transform_and_unroll_loop): Likewise.  Use single_dom_exit\n+\tto retrieve the exit edges.  Make all the old profile update code\n+\tconditional on !single_loop_p -- the case it was written for --\n+\tand use a different approach for the single-loop case.\n+\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/alpha/alpha.c (alpha_option_override): Use new macro\n+\tOPTION_SET_P.\n+\t* config/arc/arc.c (arc_override_options): Likewise.\n+\t* config/arm/arm.c (arm_option_override): Likewise.\n+\t* config/bfin/bfin.c (bfin_load_pic_reg): Likewise.\n+\t* config/c6x/c6x.c (c6x_option_override): Likewise.\n+\t* config/csky/csky.c: Likewise.\n+\t* config/darwin.c (darwin_override_options): Likewise.\n+\t* config/frv/frv.c (frv_option_override): Likewise.\n+\t* config/i386/djgpp.h: Likewise.\n+\t* config/i386/i386.c (ix86_stack_protect_guard): Likewise.\n+\t(ix86_max_noce_ifcvt_seq_cost): Likewise.\n+\t* config/ia64/ia64.c (ia64_option_override): Likewise.\n+\t(ia64_override_options_after_change): Likewise.\n+\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n+\t* config/m32r/m32r.c (m32r_init): Likewise.\n+\t* config/m68k/m68k.c (m68k_option_override): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_option_override): Likewise.\n+\t* config/mips/mips.c (mips_option_override): Likewise.\n+\t* config/nios2/nios2.c (nios2_option_override): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_option_override): Likewise.\n+\t* config/pa/pa.c (pa_option_override): Likewise.\n+\t* config/riscv/riscv.c (riscv_option_override): Likewise.\n+\t* config/rs6000/aix71.h: Likewise.\n+\t* config/rs6000/aix72.h: Likewise.\n+\t* config/rs6000/aix73.h: Likewise.\n+\t* config/rs6000/rs6000.c (darwin_rs6000_override_options): Likewise.\n+\t(rs6000_override_options_after_change): Likewise.\n+\t(rs6000_linux64_override_options): Likewise.\n+\t(glibc_supports_ieee_128bit): Likewise.\n+\t(rs6000_option_override_internal): Likewise.\n+\t(rs6000_file_start): Likewise.\n+\t(rs6000_darwin_file_start): Likewise.\n+\t* config/rs6000/rtems.h: Likewise.\n+\t* config/rs6000/sysv4.h: Likewise.\n+\t* config/rs6000/vxworks.h (SUB3TARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* config/s390/s390.c (s390_option_override): Likewise.\n+\t* config/sh/linux.h: Likewise.\n+\t* config/sh/netbsd-elf.h (while): Likewise.\n+\t* config/sh/sh.c (sh_option_override): Likewise.\n+\t* config/sol2.c (solaris_override_options): Likewise.\n+\t* config/sparc/sparc.c (sparc_option_override): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_option_override): Likewise.\n+\t* config/visium/visium.c (visium_option_override): Likewise.\n+\t* config/vxworks.c (vxworks_override_options): Likewise.\n+\t* lto-opts.c (lto_write_options): Likewise.\n+\t* omp-expand.c (expand_omp_simd): Likewise.\n+\t* omp-general.c (omp_max_vf): Likewise.\n+\t* omp-offload.c (oacc_xform_loop): Likewise.\n+\t* opts.h (OPTION_SET_P): Likewise.\n+\t* targhooks.c (default_max_noce_ifcvt_seq_cost): Likewise.\n+\t* toplev.c (process_options): Likewise.\n+\t* tree-predcom.c: Likewise.\n+\t* tree-sra.c (analyze_all_variable_accesses): Likewise.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* config/i386/i386.c (ix86_optab_supported_p):\n+\tReturn true for HFmode.\n+\t* match.pd: Simplify (_Float16) ceil ((double) x) to\n+\t__builtin_ceilf16 (a) when a is _Float16 type and\n+\tdirect_internal_fn_supported_p.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102494\n+\t* config/i386/i386-expand.c (emit_reduc_half): Hanlde V4HImode.\n+\t* config/i386/mmx.md (reduc_plus_scal_v4hi): New.\n+\t(reduc_<code>_scal_v4hi): New.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* common.opt (ftree-vectorize): Add Var(flag_tree_vectorize).\n+\t* doc/invoke.texi (Options That Control Optimization): Update\n+\tdocuments.\n+\t* opts.c (default_options_table): Enable auto-vectorization at\n+\tO2 with very-cheap cost model.\n+\t(finish_options): Use cheap cost model for\n+\texplicit -ftree{,-loop}-vectorize.\n+\n 2021-10-07  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* ctfc.c (ctfc_delete_container): Free hash table contents."}, {"sha": "352475cf0bb6b994e5b4dd259f590d3d66583cce", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1 +1 @@\n-20211008\n+20211009"}, {"sha": "d712fb7fa95931dcddc918f026e795545fc4d778", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,10 @@\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/misc.c (gnat_post_options): Use new macro\n+\tOPTION_SET_P.\n+\t(gnat_init_gcc_eh): Likewise.\n+\t(gnat_init_gcc_fp): Likewise.\n+\n 2021-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Do not wrap boolean values"}, {"sha": "3dc19e114bc48d951c5a896c93d13e2073e24bf3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,8 @@\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-opts.c (c_common_post_options): Use new macro\n+\tOPTION_SET_P.\n+\n 2021-10-07  Martin Liska  <mliska@suse.cz>\n \n \t* c-common.c (parse_optimize_options): Make"}, {"sha": "3dfe67f975501e0868efcfa2924f058cc6f8ee5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,16 @@\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* constexpr.c (maybe_warn_about_constant_value): Use new macro\n+\tOPTION_SET_P.\n+\t* decl.c (redeclaration_error_message): Likewise.\n+\t(cxx_init_decl_processing): Likewise.\n+\n+2021-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102640\n+\t* parser.c (handle_omp_declare_target_clause): New function.\n+\t(cp_parser_omp_declare_target): Use it.\n+\n 2021-10-07  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/61355"}, {"sha": "c045cc9ddd221d33d40be44c85bd8f42ec834852", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,8 @@\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* d-lang.cc (d_post_options): Use new macro\n+\tOPTION_SET_P.\n+\n 2021-10-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* d-spec.cc (lang_specific_driver): Push the -static-libstdc++"}, {"sha": "0d0ebed25bb818244cef221f0a76b479c404b4ea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,16 @@\n+2021-10-08  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/54753\n+\t* interface.c (gfc_compare_actual_formal): Add diagnostic\n+\tfor F2018:C839.  Refactor shared code and fix bugs with class\n+\tarray info lookup, and extend similar diagnostic from PR94110\n+\tto also cover class types.\n+\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* options.c (gfc_post_options): Use new macro\n+\tOPTION_SET_P.\n+\n 2021-10-06  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* resolve.c (resolve_values): Only show"}, {"sha": "853ce09f4bf7c8ad1952044925dd4a18cc139cdc", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,14 @@\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* objc-next-runtime-abi-01.c: Add missing include.\n+\t* objc-next-runtime-abi-02.c: Likewise.\n+\n+2021-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* objc-next-runtime-abi-01.c: Use new macro\n+\tOPTION_SET_P.\n+\t* objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init): Likewise.\n+\n 2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR objc/101718"}, {"sha": "70a13e4b34da703c43c7dc94052423e84fe34004", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,97 @@\n+2021-10-08  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/54753\n+\t* gfortran.dg/c-interop/c535c-1.f90: Rewrite and expand.\n+\t* gfortran.dg/c-interop/c535c-2.f90: Remove xfails.\n+\t* gfortran.dg/c-interop/c535c-3.f90: Likewise.\n+\t* gfortran.dg/c-interop/c535c-4.f90: Likewise.\n+\t* gfortran.dg/PR94110.f90: Extend to cover class types.\n+\n+2021-10-08  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/102627\n+\t* gcc.target/i386/pr102627.c: New test.\n+\n+2021-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/pr102385.c: New test.\n+\n+2021-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102640\n+\t* c-c++-common/gomp/pr102640.c: New test.\n+\n+2021-10-08  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse2-mmx-paddsb-2.c: Test for -128 or 128.\n+\t* gcc.target/i386/sse2-mmx-paddusb-2.c: Test for -1 or 255.\n+\t* gcc.target/i386/sse2-mmx-psubsb-2.c: Test for -128 or 128.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102464.c: New test.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/mmx-reduce-op-1.c: New test.\n+\t* gcc.target/i386/mmx-reduce-op-2.c: New test.\n+\n+2021-10-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* c-c++-common/Wstringop-overflow-2.c: Adjust testcase.\n+\t* g++.dg/tree-ssa/pr81408.C: Ditto.\n+\t* g++.dg/warn/Wuninitialized-13.C: Ditto.\n+\t* gcc.dg/Warray-bounds-51.c: Ditto.\n+\t* gcc.dg/Warray-parameter-3.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-14.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-21.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-68.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-76.c: Ditto.\n+\t* gcc.dg/gomp/pr46032-2.c: Ditto.\n+\t* gcc.dg/gomp/pr46032-3.c: Ditto.\n+\t* gcc.dg/gomp/simd-2.c: Ditto.\n+\t* gcc.dg/gomp/simd-3.c: Ditto.\n+\t* gcc.dg/graphite/fuse-1.c: Ditto.\n+\t* gcc.dg/pr67089-6.c: Ditto.\n+\t* gcc.dg/pr82929-2.c: Ditto.\n+\t* gcc.dg/pr82929.c: Ditto.\n+\t* gcc.dg/store_merging_1.c: Ditto.\n+\t* gcc.dg/store_merging_11.c: Ditto.\n+\t* gcc.dg/store_merging_13.c: Ditto.\n+\t* gcc.dg/store_merging_15.c: Ditto.\n+\t* gcc.dg/store_merging_16.c: Ditto.\n+\t* gcc.dg/store_merging_19.c: Ditto.\n+\t* gcc.dg/store_merging_24.c: Ditto.\n+\t* gcc.dg/store_merging_25.c: Ditto.\n+\t* gcc.dg/store_merging_28.c: Ditto.\n+\t* gcc.dg/store_merging_30.c: Ditto.\n+\t* gcc.dg/store_merging_5.c: Ditto.\n+\t* gcc.dg/store_merging_7.c: Ditto.\n+\t* gcc.dg/store_merging_8.c: Ditto.\n+\t* gcc.dg/strlenopt-85.c: Ditto.\n+\t* gcc.dg/tree-ssa/dump-6.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr19210-1.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr47059.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr86017.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr91482.c: Ditto.\n+\t* gcc.dg/tree-ssa/predcom-1.c: Ditto.\n+\t* gcc.dg/tree-ssa/predcom-dse-3.c: Ditto.\n+\t* gcc.dg/tree-ssa/prefetch-3.c: Ditto.\n+\t* gcc.dg/tree-ssa/prefetch-6.c: Ditto.\n+\t* gcc.dg/tree-ssa/prefetch-8.c: Ditto.\n+\t* gcc.dg/tree-ssa/prefetch-9.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-dse-18.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-dse-19.c: Ditto.\n+\t* gcc.dg/uninit-40.c: Ditto.\n+\t* gcc.dg/unroll-7.c: Ditto.\n+\t* gcc.misc-tests/help.exp: Ditto.\n+\t* gcc.target/i386/avx512vpopcntdqvl-vpopcntd-1.c: Ditto.\n+\t* gcc.target/i386/pr34012.c: Ditto.\n+\t* gcc.target/i386/pr49781-1.c: Ditto.\n+\t* gcc.target/i386/pr95798-1.c: Ditto.\n+\t* gcc.target/i386/pr95798-2.c: Ditto.\n+\t* gfortran.dg/pr77498.f: Ditto.\n+\n 2021-10-07  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/61355"}, {"sha": "e1532922a728d6740c24300bdd48a077ac5dc079", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,10 @@\n+2021-10-08  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* config/i386/morestack.S: Use .init_array for constructor if\n+\tavailable.\n+\t* config/rs6000/morestack.S: Likewise.\n+\t* config/s390/morestack.S: Likewise.\n+\n 2021-10-03  Patrick McGehearty  <patrick.mcgehearty@oracle.com>\n \n \tPR target/101104"}, {"sha": "2b83bef03146f01c59c553be7dccf2f2fea22660", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,19 @@\n+2021-10-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR sanitizer/102632\n+\t* asan/Makefile.am (AM_CCASFLAGS): New.  Set to $(EXTRA_ASFLAGS).\n+\t* hwasan/Makefile.am (AM_CCASFLAGS): Likewise.\n+\t* interception/Makefile.am (AM_CCASFLAGS): Likewise.\n+\t* lsan/Makefile.am (AM_CCASFLAGS): Likewise.\n+\t* tsan/Makefile.am (AM_CCASFLAGS): Likewise.\n+\t* ubsan/Makefile.am (AM_CCASFLAGS): Likewise.\n+\t* asan/Makefile.in: Regenerate.\n+\t* hwasan/Makefile.in: Likewise.\n+\t* interception/Makefile.in: Likewise.\n+\t* lsan/Makefile.in: Likewise.\n+\t* tsan/Makefile.in: Likewise.\n+\t* ubsan/Makefile.in: Likewise.\n+\n 2021-10-06  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Update to the corresponding revision."}, {"sha": "5178f6a2c044bd80080d21ce8d222b2948dcaf09", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce6eec392647046167e7dfecd3dfdd07012b8931/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce6eec392647046167e7dfecd3dfdd07012b8931/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce6eec392647046167e7dfecd3dfdd07012b8931", "patch": "@@ -1,3 +1,301 @@\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Remove use of\n+\t_GLIBCXX_USE_WCHAR_T.\n+\t* testsuite/18_support/numeric_limits/min_max.cc: Replace use of\n+\t_GLIBCXX_USE_WCHAR_T with checks for WCHAR_MIN and WCHAR_MAX.\n+\t* testsuite/20_util/from_chars/1_neg.cc: Remove use of\n+\t_GLIBCXX_USE_WCHAR_T.\n+\t* testsuite/20_util/function_objects/searchers.cc: Likewise. Use\n+\tchar_traits<wchar_t>::length instead of wcslen.\n+\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_arithmetic/value.cc: Likewise.\n+\t* testsuite/20_util/is_compound/value.cc: Likewise.\n+\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n+\t* testsuite/20_util/is_fundamental/value.cc: Likewise.\n+\t* testsuite/20_util/is_integral/value.cc: Likewise.\n+\t* testsuite/20_util/is_signed/value.cc: Likewise.\n+\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n+\t* testsuite/20_util/is_void/value.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-4.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc:\n+\tLikewise.\n+\t* testsuite/20_util/to_chars/3.cc: Likewise.\n+\t* testsuite/20_util/type_identity/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/hash/debug.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/hash/hash.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/literals/types-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/literals/types.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/literals/values-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/literals/values.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/64422.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/types-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/types.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/values-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/values.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/typedefs.cc: Likewise.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n+\tLikewise.\n+\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/4.cc: Likewise.\n+\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n+\t* testsuite/experimental/functional/searchers.cc: Likewise. Use\n+\tchar_traits<wchar_t>::length instead of wcslen.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/literals/types-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/literals/types.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/literals/values-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/literals/values.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/typedefs.cc: Likewise.\n+\t* testsuite/ext/vstring/range_access.cc: Likewise.\n+\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/integral.cc:\n+\tLikewise.\n+\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/signed_integral.cc:\n+\tLikewise.\n+\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/unsigned_integral.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_arithmetic/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_compound/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_floating_point/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_fundamental/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_integral/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_signed/value.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/is_unsigned/value.cc:\n+\tLikewise.\n+\t* testsuite/tr1/4_metaprogramming/is_void/value.cc: Likewise.\n+\t* testsuite/tr1/6_containers/hash/24799.cc: Likewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* include/std/ostream (operator<<(basic_ostream<char, Tr>&, wchar_t))\n+\t(operator<<(basic_ostream<char, Tr>&, const wchar_t*)): Always\n+\tdefine as deleted. Do not check _GLIBCXX_USE_WCHAR_T.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* include/bits/locale_conv.h (wstring_convert, wbuffer_convert):\n+\tDefine unconditionally. Do not check _GLIBCXX_USE_WCHAR_T.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* include/c_global/cstddef [!_GLIBCXX_USE_WCHAR_T]\n+\t(__byte_operand<wchar_t>): Define specialization.\n+\t* include/std/type_traits (__make_signed<wchar_t>)\n+\t(__make_unsigned<wchar_t>): Remove redundant check for\n+\t__WCHAR_TYPE__ being defined.\n+\t* include/tr1/type_traits [!_GLIBCXX_USE_WCHAR_T]\n+\t(__is_integral_helper<wchar_t>): Likewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* include/ext/rc_string_base.h [!_GLIBCXX_USE_WCHAR_T]\n+\t(__rc_string_base<wchar_t>): Define member function.\n+\t* include/ext/vstring.h [!_GLIBCXX_USE_WCHAR_T]\n+\t(hash<__gnu_cxx::__wvstring>): Define specialization.\n+\t* include/ext/vstring_fwd.h [!_GLIBCXX_USE_WCHAR_T] (__wvstring)\n+\t(__wsso_string, __wrc_string): Declare typedefs.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* include/bits/char_traits.h (char_traits<wchar_t>): Define\n+\texplicit specialization unconditionally.\n+\t* include/bits/basic_string.h (hash<wstring>): Define\n+\tunconditionally. Do not check _GLIBCXX_USE_WCHAR_T.\n+\t* include/bits/stringfwd.h (wstring): Likewise.\n+\t* include/debug/string (wstring): Likewise.\n+\t* include/experimental/string_view (experimental::wstring_view)\n+\t(hash<experimental::wstring_view>): Likewise.\n+\t* include/std/string (pmr::wstring, hash<pmr::wstring>):\n+\tLikewise.\n+\t* include/std/string_view (wstring_view, hash<wstring_view>):\n+\tLikewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_filebuf/close/81256.cc: Moved to...\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/81256.cc: ...here.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/22_locale/conversions/buffer/1.cc: Check\n+\t_GLIBCXX_USE_WCHAR_T.\n+\t* testsuite/22_locale/conversions/buffer/3.cc: Likewise. Add\n+\ttest using char16_t.\n+\t* testsuite/22_locale/conversions/string/1.cc: Check\n+\t_GLIBCXX_USE_WCHAR_T.\n+\t* testsuite/27_io/filesystem/path/generic/generic_string.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/modifiers/make_preferred.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/native/alloc.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/native/string-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/native/string.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/generic/generic_string.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/native/alloc.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/native/string-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/native/string.cc:\n+\tLikewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc:\n+\t* testsuite/util/testsuite_common_types.h:\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/numeric_limits/40856.cc: Replace use of\n+\t_GLIBCXX_USE_INT128.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n+\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n+\t* testsuite/20_util/is_integral/value.cc: Likewise.\n+\t* testsuite/20_util/is_signed/value.cc: Likewise.\n+\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/type_identity/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/bit/bit.count/countl_one.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/countl_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/countr_one.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/countr_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/popcount.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/bit_ceil.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/bit_floor.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/bit_width.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/has_single_bit.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Likewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable_policy.h (_Select1st): Replace use of\n+\tstd::get.\n+\t(_Select2nd): Remove.\n+\t(_NodeBuilder::_S_build): Use _NodeGenerator::__node_type\n+\ttypedef instead of deducing it. Remove unnecessary piecewise\n+\tconstruction.\n+\t(_ReuseOrAllocNode): Make __node_type public.\n+\t(_Map_base): Adjust partial specialization to be able to extract\n+\tthe mapped_type without using tuple_element.\n+\t(_Map_base::at): Define inline\n+\t* testsuite/23_containers/unordered_map/requirements/53339.cc:\n+\tRemove XFAIL.\n+\t* testsuite/23_containers/unordered_multimap/requirements/53339.cc:\n+\tLikewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable.h: Move static assertion to destructor.\n+\t* include/bits/hashtable_policy.h: Deduce value type from node\n+\ttype without instantiating it.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* src/c++11/limits.cc: Fail if __cpp_inline_variables is\n+\tdefined.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92546\n+\t* include/bits/ranges_algobase.h: Replace <iterator> with a\n+\tsubset of the headers it includes.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/deque (erase, erase_if): Revert changes\n+\tto avoid debug mode overhead.\n+\t* include/experimental/map (erase, erase_if): Likewise.\n+\t* include/experimental/set (erase, erase_if): Likewise.\n+\t* include/experimental/unordered_map (erase, erase_if):\n+\tLikewise.\n+\t* include/experimental/unordered_set (erase, erase_if):\n+\tLikewise.\n+\t* include/experimental/vector (erase, erase_if): Likewise.\n+\t* include/std/deque (erase, erase_if): Likewise.\n+\t* include/std/map (erase, erase_if): Likewise.\n+\t* include/std/set (erase, erase_if): Likewise.\n+\t* include/std/unordered_map (erase, erase_if): Likewise.\n+\t* include/std/unordered_set (erase, erase_if): Likewise.\n+\t* include/std/vector (erase, erase_if): Likewise.\n+\n+2021-10-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (__detail::__units_suffix_misc): New\n+\thelper function.\n+\t(__detail::__units_suffix): Likewise.\n+\t(chrono::operator<<(basic_ostream&, const duration&)): Define.\n+\t* testsuite/20_util/duration/io.cc: New test.\n+\n 2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/Makefile.am: Add new header."}]}