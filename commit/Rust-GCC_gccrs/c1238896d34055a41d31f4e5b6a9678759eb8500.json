{"sha": "c1238896d34055a41d31f4e5b6a9678759eb8500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyMzg4OTZkMzQwNTVhNDFkMzFmNGU1YjZhOTY3ODc1OWViODUwMA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-22T22:58:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-22T22:58:05Z"}, "message": "alpha.c (alpha_expand_prologue [OPEN_VMS_ABI]): Don't set FRP on stack adjustment for outgoing args if frame_pointer_needed.\n\n\t* config/alpha/alpha.c (alpha_expand_prologue [OPEN_VMS_ABI]): Don't\n\tset FRP on stack adjustment for outgoing args if frame_pointer_needed.\n\nFrom-SVN: r65965", "tree": {"sha": "ceb1bd779a607612eb6c58b28a3cb82aef47d5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb1bd779a607612eb6c58b28a3cb82aef47d5ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1238896d34055a41d31f4e5b6a9678759eb8500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1238896d34055a41d31f4e5b6a9678759eb8500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1238896d34055a41d31f4e5b6a9678759eb8500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1238896d34055a41d31f4e5b6a9678759eb8500/comments", "author": null, "committer": null, "parents": [{"sha": "ae2196c28e9fe2cd9291f4d8e7a040da04a72085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2196c28e9fe2cd9291f4d8e7a040da04a72085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2196c28e9fe2cd9291f4d8e7a040da04a72085"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "c5cbb7485e72ab556d59f01a8b8f28283aae9ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1238896d34055a41d31f4e5b6a9678759eb8500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1238896d34055a41d31f4e5b6a9678759eb8500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1238896d34055a41d31f4e5b6a9678759eb8500", "patch": "@@ -1,3 +1,8 @@\n+2003-04-22  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* config/alpha/alpha.c (alpha_expand_prologue [OPEN_VMS_ABI]): Don't\n+\tset FRP on stack adjustment for outgoing args if frame_pointer_needed.\n+\n 2003-04-22  Vincent Celier <celier@gnat.com>\n \n         * gthr-gnat.h, gthr-gnat.c: new sources for implementation of"}, {"sha": "81d8c206a8ba1fff4f00d7beecfbb7fd1a2cfdb4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1238896d34055a41d31f4e5b6a9678759eb8500/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1238896d34055a41d31f4e5b6a9678759eb8500/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c1238896d34055a41d31f4e5b6a9678759eb8500", "patch": "@@ -7503,11 +7503,31 @@ alpha_expand_prologue ()\n \n       /* If we have to allocate space for outgoing args, do it now.  */\n       if (current_function_outgoing_args_size != 0)\n-\tFRP (emit_move_insn\n-\t     (stack_pointer_rtx, \n-\t      plus_constant (hard_frame_pointer_rtx,\n-\t\t\t     - (ALPHA_ROUND\n-\t\t\t\t(current_function_outgoing_args_size)))));\n+\t{\n+\t  rtx seq\n+\t    = emit_move_insn (stack_pointer_rtx, \n+\t\t\t      plus_constant\n+\t\t\t      (hard_frame_pointer_rtx,\n+\t\t\t       - (ALPHA_ROUND\n+\t\t\t\t  (current_function_outgoing_args_size))));\n+\t  \n+\t  /* Only set FRAME_RELATED_P on the stack adjustment we just emitted\n+\t     if ! frame_pointer_needed. Setting the bit will change the CFA\n+\t     computation rule to use sp again, which would be wrong if we had\n+\t     frame_pointer_needed, as this means sp might move unpredictably\n+\t     later on.\n+\n+\t     Also, note that\n+\t       frame_pointer_needed\n+\t       => vms_unwind_regno == HARD_FRAME_POINTER_REGNUM\n+\t     and\n+\t       current_function_outgoing_args_size != 0\n+\t       => alpha_procedure_type != PT_NULL,\n+\n+\t     so when we are not setting the bit here, we are guaranteed to\n+\t     have emited an FRP frame pointer update just before.  */\n+\t  RTX_FRAME_RELATED_P (seq) = ! frame_pointer_needed;\n+\t}\n     }\n   else if (!TARGET_ABI_UNICOSMK)\n     {"}]}