{"sha": "7a83b391c734e5e64487ddd8813470a5814b4868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4M2IzOTFjNzM0ZTVlNjQ0ODdkZGQ4ODEzNDcwYTU4MTRiNDg2OA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-10-26T20:19:39Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-10-26T20:19:39Z"}, "message": "re PR target/78056 (build failure on Power7)\n\ngcc/ChangeLog:\n\n2016-10-26  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/78056\n\t* config/rs6000/rs6000.c (spe_init_builtins): Modify loops to not\n\tdefine builtin functions from the bdesc_spe_predicates or\n\tbdesc_spe_evsel arrays if the builtin mask is not compatible with\n\tthe current compiler configuration.\n\t(paired_init_builtins): Modify loop to not define define builtin\n\tfunctions from the bdesc_paried_preds array if the builtin mask is\n\tnot compatible with the current compiler configuration.\n\t(altivec_init_builtins): Modify loops to not define the\n\t__builtin_altivec_stxvl function nor the builtin functions from\n\tthe bdesc_dst or bdesc_altivec_preds, or bdesc_abs arrays if the\n\tbuiltin mask is not compatible with the current compiler\n\tconfiguration.\n\ngcc/testsuite/ChangeLog:\n\n2016-10-26  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/78056\n\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c (test_any_equal): Change\n\texpected error message.\n\t* gcc.target/powerpc/vsu/vec-xst-len-12.c (store_data): Change\n\texpected error message.\n\t* gcc.target/powerpc/vsu/vec-all-nez-7.c\n\t(test_all_not_equal_and_not_zero): Change expected error message.\n\nFrom-SVN: r241599", "tree": {"sha": "460fcaf0cda67f48b77f7eaea1eee4bc3d77d403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/460fcaf0cda67f48b77f7eaea1eee4bc3d77d403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a83b391c734e5e64487ddd8813470a5814b4868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a83b391c734e5e64487ddd8813470a5814b4868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a83b391c734e5e64487ddd8813470a5814b4868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a83b391c734e5e64487ddd8813470a5814b4868/comments", "author": null, "committer": null, "parents": [{"sha": "d47e6b8225e7627df766d5026c6b722ae441ca6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47e6b8225e7627df766d5026c6b722ae441ca6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47e6b8225e7627df766d5026c6b722ae441ca6f"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "bc87d16783200c7024e27ac735463984baeb4875", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -1,3 +1,19 @@\n+2016-10-26  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/78056\n+\t* config/rs6000/rs6000.c (spe_init_builtins): Modify loops to not\n+\tdefine builtin functions from the bdesc_spe_predicates or\n+\tbdesc_spe_evsel arrays if the builtin mask is not compatible with\n+\tthe current compiler configuration.\n+\t(paired_init_builtins): Modify loop to not define define builtin\n+\tfunctions from the bdesc_paried_preds array if the builtin mask is\n+\tnot compatible with the current compiler configuration.\n+\t(altivec_init_builtins): Modify loops to not define the\n+\t__builtin_altivec_stxvl function nor the builtin functions from\n+\tthe bdesc_dst or bdesc_altivec_preds, or bdesc_abs arrays if the\n+\tbuiltin mask is not compatible with the current compiler\n+\tconfiguration.\n+\n 2016-10-26  Jeff Law  <law@redhat.com>\n \n \t* config/mips/mips.c (mips16_constant_cost): Add missing"}, {"sha": "5e35e3342a3dfb102465047e8aa11fbe8c059032", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -16923,6 +16923,7 @@ spe_init_builtins (void)\n   tree pushort_type_node = build_pointer_type (short_unsigned_type_node);\n   const struct builtin_description *d;\n   size_t i;\n+  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n   tree v2si_ftype_4_v2si\n     = build_function_type_list (opaque_V2SI_type_node,\n@@ -17063,6 +17064,15 @@ spe_init_builtins (void)\n   for (i = 0; i < ARRAY_SIZE (bdesc_spe_predicates); ++i, d++)\n     {\n       tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"spe_init_builtins, skip predicate %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n \n       switch (insn_data[d->icode].operand[1].mode)\n \t{\n@@ -17084,6 +17094,15 @@ spe_init_builtins (void)\n   for (i = 0; i < ARRAY_SIZE (bdesc_spe_evsel); ++i, d++)\n     {\n       tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"spe_init_builtins, skip evsel %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n \n       switch (insn_data[d->icode].operand[1].mode)\n \t{\n@@ -17106,6 +17125,7 @@ paired_init_builtins (void)\n {\n   const struct builtin_description *d;\n   size_t i;\n+  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n    tree int_ftype_int_v2sf_v2sf\n     = build_function_type_list (integer_type_node,\n@@ -17141,6 +17161,15 @@ paired_init_builtins (void)\n   for (i = 0; i < ARRAY_SIZE (bdesc_paired_preds); ++i, d++)\n     {\n       tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"paired_init_builtins, skip predicate %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n \n       if (TARGET_DEBUG_BUILTIN)\n \tfprintf (stderr, \"paired pred #%d, insn = %s [%d], mode = %s\\n\",\n@@ -17167,6 +17196,7 @@ altivec_init_builtins (void)\n   size_t i;\n   tree ftype;\n   tree decl;\n+  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n   tree pvoid_type_node = build_pointer_type (void_type_node);\n \n@@ -17500,20 +17530,41 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_vec_stvrx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRX);\n   def_builtin (\"__builtin_vec_stvrxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRXL);\n \n-  def_builtin (\"__builtin_altivec_stxvl\", void_ftype_v16qi_pvoid_long,\n-\t       P9V_BUILTIN_STXVL);\n+  if (TARGET_P9_VECTOR)\n+    def_builtin (\"__builtin_altivec_stxvl\", void_ftype_v16qi_pvoid_long,\n+\t\t P9V_BUILTIN_STXVL);\n \n   /* Add the DST variants.  */\n   d = bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n-    def_builtin (d->name, void_ftype_pcvoid_int_int, d->code);\n+    {\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"altivec_init_builtins, skip dst %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n+      def_builtin (d->name, void_ftype_pcvoid_int_int, d->code);\n+    }\n \n   /* Initialize the predicates.  */\n   d = bdesc_altivec_preds;\n   for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, d++)\n     {\n       machine_mode mode1;\n       tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"altivec_init_builtins, skip predicate %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n \n       if (rs6000_overloaded_builtin_p (d->code))\n \tmode1 = VOIDmode;\n@@ -17556,6 +17607,15 @@ altivec_init_builtins (void)\n     {\n       machine_mode mode0;\n       tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"altivec_init_builtins, skip abs %s\\n\",\n+\t\t     d->name);\n+\t  continue;\n+\t}\n \n       mode0 = insn_data[d->icode].operand[0].mode;\n "}, {"sha": "8e3e49f3cbb4cbca2ec8f17f2f129d3c59603afa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -1,3 +1,13 @@\n+2016-10-26  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/78056\n+\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c (test_any_equal): Change\n+\texpected error message.\n+\t* gcc.target/powerpc/vsu/vec-xst-len-12.c (store_data): Change\n+\texpected error message.\n+\t* gcc.target/powerpc/vsu/vec-all-nez-7.c\n+\t(test_all_not_equal_and_not_zero): Change expected error message.\n+\n 2016-10-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/77973"}, {"sha": "8f8271f8f1cc48bc8f5764b3a3ac0214a226c1b8", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -12,5 +12,5 @@ test_all_not_equal_and_not_zero (vector unsigned short *arg1_p,\n   vector unsigned short arg_1 = *arg1_p;\n   vector unsigned short arg_2 = *arg2_p;\n \n-  return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_altivec_vcmpnezh_p requires\" } */\n+  return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_vec_vcmpnez_p not supported in this compiler configuration\" } */\n }"}, {"sha": "7b2d4ddf49b7a4cf77968d6e2e10e325be8fdf36", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -11,5 +11,5 @@ test_any_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n   vector unsigned int arg_1 = *arg1_p;\n   vector unsigned int arg_2 = *arg2_p;\n \n-  return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_altivec_vcmpnezw_p requires\" } */\n+  return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\t/* { dg-error \"Builtin function __builtin_vec_vcmpnez_p not supported in this compiler configuration\" } */\n }"}, {"sha": "42fe2c638ed68143c775ca471f17996177948709", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a83b391c734e5e64487ddd8813470a5814b4868/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c?ref=7a83b391c734e5e64487ddd8813470a5814b4868", "patch": "@@ -14,5 +14,5 @@ store_data (vector double *datap, double *address, size_t length)\n {\n   vector double data = *datap;\n \n-  __builtin_vec_stxvl (data, address, length); /* { dg-error \"Builtin function __builtin_altivec_stxvl requires\" } */\n+  __builtin_vec_stxvl (data, address, length); /* { dg-error \"Builtin function __builtin_vec_stxvl not supported in this compiler configuration\" } */\n }"}]}