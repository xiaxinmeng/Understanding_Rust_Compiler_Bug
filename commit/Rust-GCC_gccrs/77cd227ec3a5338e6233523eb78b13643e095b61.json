{"sha": "77cd227ec3a5338e6233523eb78b13643e095b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjZDIyN2VjM2E1MzM4ZTYyMzM1MjNlYjc4YjEzNjQzZTA5NWI2MQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-25T23:51:17Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-25T23:51:17Z"}, "message": "howto.html: Add anchor name.\n\n2001-09-25  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/20_util/howto.html:  Add anchor name.\n\t* docs/html/23_containers/howto.html:  Line wrapping, another link.\n\t* docs/html/25_algorithms/howto.html:  Another note.\n\n\t* docs/html/ext/howto.html:  Link to SGI extensions.  List DRs and\n\tlink to them...\n\t* docs/html/ext/lwg-active.html:  ...in this new file (from R19),\n\t* docs/html/ext/lwg-defects.html:  and this new file (from R19).\n\t* docs/html/ext/sgiexts.html:  New file.  Mention SGI extensions\n\tcarried over to libstdc++-v3.\n\t* docs/html/faq/index.html:  Link to SGI extensions.  Mention the\n\t\"missing ..\" pseudobug.\n\t* docs/html/faq/index.txt:  Regenerate.\n\n\t* include/bits/ios_base.h:  DR-related comment cleanup.\n\t* include/bits/istream.tcc:  Likewise.\n\t* include/bits/locale_facets.h:  Likewise.\n\t* include/bits/locale_facets.tcc:  Likewise.\n\t* include/bits/ostream.tcc:  Likewise.\n\t* include/bits/std_bitset.h:  Likewise.\n\t* include/bits/std_iosfwd.h:  Likewise.\n\t* include/bits/std_istream.h:  Likewise.\n\t* include/bits/std_ostream.h:  Likewise.\n\t* include/bits/std_streambuf.h:  Likewise.\n\t* include/bits/stl_pair.h:  Likewise.\n\t* include/bits/streambuf_iterator.h:  Likewise.\n\n\t* include/bits/std_map.h:  Remove unused header inclusion guard\n\t_CPP_BITS_STL_TREE_H from around bits/stl_tree.h.\n\t* include/bits/std_set.h:  Likewise.\n\n\t* include/bits/stl_function.h:  Doxygen markup.\n\t* docs/doxygen/doxygroups.cc:  New file, specifying module grouping.\n\t* libsupc++/typeinfo:  Doxygen markup tweak.\n\nFrom-SVN: r45816", "tree": {"sha": "32c7ec2d3784a56111795e6e0326bdb210835190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32c7ec2d3784a56111795e6e0326bdb210835190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77cd227ec3a5338e6233523eb78b13643e095b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cd227ec3a5338e6233523eb78b13643e095b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cd227ec3a5338e6233523eb78b13643e095b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cd227ec3a5338e6233523eb78b13643e095b61/comments", "author": null, "committer": null, "parents": [{"sha": "c176688132f1f85ad9d612a142e488ed436d0464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c176688132f1f85ad9d612a142e488ed436d0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c176688132f1f85ad9d612a142e488ed436d0464"}], "stats": {"total": 12380, "additions": 12234, "deletions": 146}, "files": [{"sha": "daf1b7bec4540ebc634f9433687cfcf5fec750a5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -1,3 +1,40 @@\n+2001-09-25  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/20_util/howto.html:  Add anchor name.\n+\t* docs/html/23_containers/howto.html:  Line wrapping, another link.\n+\t* docs/html/25_algorithms/howto.html:  Another note.\n+\n+\t* docs/html/ext/howto.html:  Link to SGI extensions.  List DRs and\n+\tlink to them...\n+\t* docs/html/ext/lwg-active.html:  ...in this new file (from R19),\n+\t* docs/html/ext/lwg-defects.html:  and this new file (from R19).\n+\t* docs/html/ext/sgiexts.html:  New file.  Mention SGI extensions\n+\tcarried over to libstdc++-v3.\n+\t* docs/html/faq/index.html:  Link to SGI extensions.  Mention the\n+\t\"missing ..\" pseudobug.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n+\t* include/bits/ios_base.h:  DR-related comment cleanup.\n+\t* include/bits/istream.tcc:  Likewise.\n+\t* include/bits/locale_facets.h:  Likewise.\n+\t* include/bits/locale_facets.tcc:  Likewise.\n+\t* include/bits/ostream.tcc:  Likewise.\n+\t* include/bits/std_bitset.h:  Likewise.\n+\t* include/bits/std_iosfwd.h:  Likewise.\n+\t* include/bits/std_istream.h:  Likewise.\n+\t* include/bits/std_ostream.h:  Likewise.\n+\t* include/bits/std_streambuf.h:  Likewise.\n+\t* include/bits/stl_pair.h:  Likewise.\n+\t* include/bits/streambuf_iterator.h:  Likewise.\n+\n+\t* include/bits/std_map.h:  Remove unused header inclusion guard\n+\t_CPP_BITS_STL_TREE_H from around bits/stl_tree.h.\n+\t* include/bits/std_set.h:  Likewise.\n+\n+\t* include/bits/stl_function.h:  Doxygen markup.\n+\t* docs/doxygen/doxygroups.cc:  New file, specifying module grouping.\n+\t* libsupc++/typeinfo:  Doxygen markup tweak.\n+\n 2001-09-20  Scott Johnston <scott@accom.com>\n \t    Peter Schmid <schmid@snake.iap.physik.tu-darmstadt.de>\n "}, {"sha": "b74bab118631bd4356fa075461474f6d4fb45089", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -0,0 +1,24 @@\n+\n+// This just provides documentation for stuff that doesn't need to be in the\n+// source headers themselves.  It is a \".cc\" file for the sole cheesy reason\n+// that it triggers many different text editors into doing Nice Things when\n+// typing comments.  However, it is mentioned nowhere except the *cfg.in files.\n+\n+/** @addtogroup SGIextensions\n+ *\n+ *  Because libstdc++-v3 based its implementation of the STL subsections of\n+ *  the library on the SGI 3.3 implementation, we inherited their extensions\n+ *  as well.\n+ *\n+ *  They are additionally documented in the\n+ *  <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html\">\n+ *  online documentation</a>, a copy of which is also shipped with the\n+ *  library source code (in .../docs/html/documentation.html).  You can also\n+ *  read the documentation <a href=\"http://www.sgi.com/tech/stl/\">on SGI's\n+ *  site</a>, which is still running even though the code is not maintained.\n+ *\n+ *  <strong>NB</strong> that the following notes are pulled from various\n+ *  comments all over the place, so they may seem stilted.\n+ *  <hr>\n+*/\n+"}, {"sha": "b07f195772f42e9aab542aef57f66cc708a6c1b6", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -8,7 +8,7 @@\n    <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <title>libstdc++-v3 HOWTO:  Chapter 20</title>\n <link REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/05/30 21:55:00 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.5 2001/09/17 23:24:39 pme Exp $ -->\n </head>\n <body>\n \n@@ -171,6 +171,7 @@ <h2><a name=\"4\">Pairs</a></h2>\n       <code>operator==</code> functions (for types like MyClass) or builtin\n       comparisons (for types like int, char, etc).\n    </p>\n+   <a name=\"pairlt\">\n    <p>The less-than operator is a bit odd the first time you see it.  It\n       is defined as evaluating to:\n       <PRE>\n@@ -180,6 +181,7 @@ <h2><a name=\"4\">Pairs</a></h2>\n       The other operators are not defined using the <code>rel_ops</code>\n       functions above, but their semantics are the same.\n    </p>\n+   </a>\n    <p>Finally, there is a template function called <code>make_pair</code>\n       that takes two references-to-const objects and returns an\n       instance of a pair instantiated on their respective types:\n@@ -200,7 +202,7 @@ <h2><a name=\"4\">Pairs</a></h2>\n <P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n-<br> $Id: howto.html,v 1.4 2001/05/30 21:55:00 pme Exp $\n+<br> $Id: howto.html,v 1.5 2001/09/17 23:24:39 pme Exp $\n </em></p>\n \n "}, {"sha": "0d1454cdf9d6a45664f1e83c64114bf0a5d50538", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -8,7 +8,7 @@\n    <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <title>libstdc++-v3 HOWTO:  Chapter 23</title>\n <link REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.8 2001/09/15 00:41:11 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.9 2001/09/17 23:24:39 pme Exp $ -->\n </head>\n <body>\n \n@@ -140,7 +140,8 @@ <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n    <p><B>A container&lt;bool&gt;.&nbsp;&nbsp;</B>  The Committee made provision\n       for the space savings possible with that (N/8) usage previously mentioned,\n       so that you don't have to do wasteful things like\n-      <code>Container&lt;char&gt;</code> or <code>Container&lt;short int&gt;</code>.\n+      <code>Container&lt;char&gt;</code> or\n+      <code>Container&lt;short int&gt;</code>.\n       Specifically, <code>vector&lt;bool&gt;</code> is required to be\n       specialized for that space savings.\n    </p>\n@@ -158,12 +159,14 @@ <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n    <p><B>Extremely weird solutions.&nbsp;&nbsp;</B>  If you have access to\n       the compiler and linker at runtime, you can do something insane, like\n       figuring out just how many bits you need, then writing a temporary \n-      source code file.  That file contains an instantiation of <code>bitset</code>\n+      source code file.  That file contains an instantiation of\n+      <code>bitset</code>\n       for the required number of bits, inside some wrapper functions with\n       unchanging signatures.  Have your program then call the\n       compiler on that file using Position Independant Code, then open the\n       newly-created object file and load those wrapper functions.  You'll have\n-      an instantiation of <code>bitset&lt;N&gt;</code> for the exact <code>N</code>\n+      an instantiation of <code>bitset&lt;N&gt;</code> for the exact\n+      <code>N</code>\n       that you need at the time.  Don't forget to delete the temporary files.\n       (Yes, this <em>can</em> be, and <em>has been</em>, done.)\n    </p>\n@@ -178,6 +181,9 @@ <h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n       along the lines of the third category, the author would love to hear\n       from you...\n    </p>\n+   <p>Also note that the implementation of bitset used in libstdc++-v3 has\n+      <a href=\"../ext/sgiexts.html#ch23\">some extensions</a>.\n+   </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n@@ -363,7 +369,7 @@ <h2><a name=\"5\">Bitmasks and string arguments</a></h2>\n <P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n-<br> $Id: howto.html,v 1.8 2001/09/15 00:41:11 pme Exp $\n+<br> $Id: howto.html,v 1.9 2001/09/17 23:24:39 pme Exp $\n </em></p>\n \n "}, {"sha": "6676eb423a8335721e2aaed68670aa22a83bb815", "filename": "libstdc++-v3/docs/html/25_algorithms/howto.html", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -8,7 +8,7 @@\n    <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <title>libstdc++-v3 HOWTO:  Chapter 25</title>\n <link REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.5 2001/09/17 23:24:39 pme Exp $ -->\n </head>\n <body>\n \n@@ -24,7 +24,7 @@ <h1 CLASS=\"centered\"><a name=\"top\">Chapter 25:  Algorithms</a></h1>\n <h1>Contents</h1>\n <ul>\n    <li><a href=\"#1\">Prerequisites</a>\n-   <li><a href=\"#2\">Topic</a>\n+   <li><a href=\"#2\">Special <code>swap</code>s</a>\n </ul>\n \n <hr>\n@@ -71,8 +71,18 @@ <h2><a name=\"1\">Prerequisites</a></h2>\n    </p>\n \n <hr>\n-<h2><a name=\"2\">Topic</a></h2>\n-   <p>Blah.\n+<h2><a name=\"2\">Special <code>swap</code>s</a></h2>\n+   <p>If you call <code> std::swap(x,y); </code> where x and y are standard\n+      containers, then the call will automatically be replaced by a call to\n+      <code> x.swap(y); </code> instead.\n+   </p>\n+   <p>This allows member functions of each container class to take over, and\n+      containers' swap functions should have O(1) complexity according to\n+      the standard.  (And while &quot;should&quot; allows implementations to\n+      behave otherwise and remain compliant, this implementation does in\n+      fact use constant-time swaps.)  This should not be surprising, since\n+      for two containers of the same type to swap contents, only some\n+      internal pointers to storage need to be exchanged.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -87,7 +97,7 @@ <h2><a name=\"2\">Topic</a></h2>\n <P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n-<br> $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $\n+<br> $Id: howto.html,v 1.5 2001/09/17 23:24:39 pme Exp $\n </em></p>\n \n "}, {"sha": "df730c05305b55ddec0b2e6526d0c1651cbf93bf", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 155, "deletions": 8, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -8,7 +8,7 @@\n    <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <title>libstdc++-v3 HOWTO:  Extensions</title>\n <link REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.5 2001/05/30 21:55:04 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.6 2001/09/17 23:24:40 pme Exp $ -->\n </head>\n <body>\n \n@@ -37,9 +37,10 @@ <h1 CLASS=\"centered\"><a name=\"top\">Extensions</a></h1>\n <h1>Contents</h1>\n <ul>\n    <li><a href=\"#1\">Ropes and trees and hashes, oh my!</a>\n-   <li><a href=\"#2\">Added members</a>\n+   <li><a href=\"#2\">Added members and types</a>\n    <li><a href=\"#3\">Allocators</a>\n    <li><a href=\"#4\">Compile-time checks</a>\n+   <li><a href=\"#5\">LWG Issues</a>\n </ul>\n \n <hr>\n@@ -106,15 +107,19 @@ <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n    </p>\n \n <hr>\n-<h2><a name=\"2\">Added members</a></h2>\n+<h2><a name=\"2\">Added members and types</a></h2>\n    <p>Some of the classes in the Standard Library have additional\n-      publicly-available members.  Of those, some are intended purely for\n-      the implementors, for example, additional typedefs.  Those won't be\n-      described here (or anywhere else).  This list will grow slowly, since\n-      we expect it to be rare -- most extensions will be self-contained.\n+      publicly-available members, and some classes are themselves not in\n+      the standard.  Of those, some are intended purely for the implementors,\n+      for example, additional typedefs.  Those won't be described here\n+      (or anywhere else).\n    </p>\n    <p>\n     <ul>\n+     <li>The extensions added by SGI are so numerous that they have\n+         <a href=\"sgiexts.html\">their own page</a>.  Since the SGI STL is no\n+         longer actively maintained, we will try and keep this code working\n+         ourselves.\n      <li><code>filebuf</code>s have another ctor with this signature:<br>\n <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n          <br>This comes in very handy in a number of places, such as\n@@ -157,7 +162,149 @@ <h2><a name=\"4\">Compile-time checks</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n+<hr>\n+<h2><a name=\"5\">LWG Issues</a></h2>\n+   <p>Everybody's got issues.  Even the C++ Standard Library.\n+   </p>\n+   <p>The Library Working Group, or LWG, is the ISO subcommittee responsible\n+      for making changes to the library.  They periodically publish an\n+      Issues List containing problems and possible solutions.  As they reach\n+      a consensus on proposed solutions, we often incorporate the solution\n+      into libstdc++-v3.\n+   </p>\n+   <p>Here are the issues which have resulted in code changes to the library.\n+      The links are to the specific defect reports from a <strong>partial\n+      copy </strong> of the\n+      Issues List.  You can read the full version online at the ISO C++\n+      Committee homepage, linked to on the GCC &quot;Readings&quot; page.  If\n+      you spend a lot of time reading the issues, we recommend downloading\n+      the ZIP file and reading them locally.\n+   </p>\n+   <p>(NB:  <strong>partial copy</strong> means that not all links within\n+      the lwg-*.html pages will work.\n+      Specifically, links to defect reports that have not been accorded full\n+      DR status will probably break.  Rather than trying to mirror the\n+      entire issues list on our overworked web server, we recommend you go\n+      to the LWG homepage instead.)\n+   </p>\n+   <p>\n+      If a DR is not listed here, we may simply not have gotten to it yet;\n+      feel free to submit a patch.  Search the include/bits and src\n+      directories for appearances of _GLIBCPP_RESOLVE_LIB_DEFECTS for\n+      examples of style.  Note that we usually do not make changes to the code\n+      until an issue has reached <a href=\"lwg-active.html#DR\">DR</a> status.\n+   </p>\n+   <p><dl>\n+<!-- FIXME:  locale_facets.h/tcc has a fix for get/num_get which I can't ID. -->\n+\n+    <dt><a href=\"lwg-defects.html#5\">5</a>:\n+        <em>string::compare specification questionable</em>\n+    <dd>This should be two overloaded functions rather than a single function.\n+\n+    <dt><a href=\"lwg-defects.html#17\">17</a>:\n+        <em>Bad bool parsing</em>\n+    <dd>Apparently extracting Boolean values was messed up...\n+\n+    <dt><a href=\"lwg-defects.html#25\">25</a>:\n+        <em>String operator&lt;&lt; uses width() value wrong</em>\n+    <dd>Padding issues.\n+\n+    <dt><a href=\"lwg-defects.html#48\">48</a>:\n+        <em>Use of non-existent exception constructor</em>\n+    <dd>An instance of <code>ios_base::failure</code> is constructed instead.\n+\n+    <dt><a href=\"lwg-defects.html#49\">49</a>:\n+        <em>Underspecification of ios_base::sync_with_stdio</em>\n+    <dd>The return type is the <em>previous</em> state of synchronization.\n+\n+    <dt><a href=\"lwg-defects.html#50\">50</a>:\n+        <em>Copy constructor and assignment operator of ios_base</em>\n+    <dd>These members functions are declared <code>private</code> and are\n+        thus inaccessible.  Specifying the correct semantics of\n+        &quot;copying stream state&quot; was deemed too complicated.\n+\n+    <dt><a href=\"lwg-defects.html#68\">68</a>:\n+        <em>Extractors for char* should store null at end</em>\n+    <dd>And they do now.  An editing glitch in the last item in the list of\n+        [27.6.1.2.3]/7.\n+\n+    <dt><a href=\"lwg-defects.html#74\">74</a>:\n+        <em>Garbled text for codecvt::do_max_length</em>\n+    <dd>The text of the standard was gibberish.  Typos gone rampant.\n+\n+    <dt><a href=\"lwg-defects.html#83\">83</a>:\n+        <em>string::npos vs. string::max_size()</em>\n+    <dd>Safety checks on the size of the string should test against\n+        <code>max_size()</code> rather than <code>npos</code>.\n \n+    <dt><a href=\"lwg-defects.html#109\">109</a>:\n+        <em>Missing binders for non-const sequence elements</em>\n+    <dd>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n+        <code>operator()</code> taking a non-const parameter.\n+\n+    <dt><a href=\"lwg-defects.html#110\">110</a>:\n+        <em>istreambuf_iterator::equal not const</em>\n+    <dd>This was not a const member function.  Note that the DR says to\n+        replace the function with a const one; we have instead provided an\n+        overloaded version with identical contents.\n+\n+    <dt><a href=\"lwg-defects.html#129\">129</a>:\n+        <em>Need error indication from seekp() and seekg()</em>\n+    <dd>These functions set <code>failbit</code> on error now.\n+\n+    <dt><a href=\"lwg-defects.html#136\">136</a>:\n+        <em>seekp, seekg setting wrong streams?</em>\n+    <dd><code>seekp</code> should only set the output stream, and\n+        <code>seekg</code> should only set the input stream.\n+\n+<!--<dt><a href=\"lwg-defects.html#159\">159</a>:\n+        <em>Strange use of underflow()</em>\n+    <dd>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n+        should probably not be calling <code>underflow()</code>.-->\n+\n+    <dt><a href=\"lwg-active.html#167\">167</a>:\n+        <em>Improper use of traits_type::length()</em>\n+    <dd><code>op&lt;&lt;</code> with a <code>const char*</code> was\n+        calculating an incorrect number of characters to write.\n+\n+    <dt><a href=\"lwg-defects.html#181\">181</a>:\n+        <em>make_pair() unintended behavior</em>\n+    <dd>This function used to take its arguments as reference-to-const, now\n+        it copies them (pass by value).\n+\n+    <dt><a href=\"lwg-defects.html#195\">195</a>:\n+        <em>Should basic_istream::sentry's constructor ever set eofbit?</em>\n+    <dd>Yes, it can, specifically if EOF is reached while skipping whitespace.\n+\n+    <dt><a href=\"lwg-defects.html#211\">211</a>:\n+        <em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em>\n+    <dd>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n+        sets <code>failbit</code> (which can cause an exception, etc, etc).\n+\n+    <dt><a href=\"lwg-defects.html#214\">214</a>:\n+        <em>set::find() missing const overload</em>\n+    <dd>Both <code>set</code> and <code>multiset</code> were missing\n+        overloaded find, lower_bound, upper_bound, and equal_range functions\n+        for const instances.\n+\n+    <dt><a href=\"lwg-defects.html#251\">251</a>:\n+        <em>basic_stringbuf missing allocator_type</em>\n+    <dd>This nested typdef was originally not specified.\n+\n+    <dt><a href=\"lwg-defects.html#265\">265</a>:\n+        <em>std::pair::pair() effects overly restrictive</em>\n+    <dd>The default ctor would build its members from copies of temporaries;\n+        now it simply uses their respective default ctors.\n+\n+<!--\n+    <dt><a href=\"lwg-defects.html#\"></a>:\n+        <em></em>\n+    <dd>\n+\n+-->\n+   </dl></p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n \n \n <!-- ####################################################### -->\n@@ -166,7 +313,7 @@ <h2><a name=\"4\">Compile-time checks</a></h2>\n <P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n-<br> $Id: howto.html,v 1.5 2001/05/30 21:55:04 pme Exp $\n+<br> $Id: howto.html,v 1.6 2001/09/17 23:24:40 pme Exp $\n </em></p>\n \n "}, {"sha": "958eb07e96fb64b1ae6936c5679e5a7778cf49f0", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "added", "additions": 6442, "deletions": 0, "changes": 6442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61"}, {"sha": "1870ef3d9f5602aa1545aaf99fb7d04944c8ca34", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "added", "additions": 4866, "deletions": 0, "changes": 4866, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61"}, {"sha": "e1b019656c11b7cf74f80497eb4b03f9df31cdc3", "filename": "libstdc++-v3/docs/html/ext/sgiexts.html", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -0,0 +1,233 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n+<html>\n+<head>\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++, STL, SGI\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"SGI extensions preserved in libstdc++-v3.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>SGI extensions to the library in libstdc++-v3</title>\n+<link REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: explanations.html,v 1.2 2001/09/17 23:24:38 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">SGI extensions to the library in\n+libstdc++-v3</a></h1>\n+\n+<p>This page describes the extensions that SGI made to their version of the\n+   STL subset of the Standard C++ Library.  For a time we\n+   <a href=\"../faq/index.html#5_3\">tracked and imported changes and updates\n+   from most of the SGI STL</a>, up through their (apparently) final release.\n+   Their extensions were mostly preserved.\n+</p>\n+\n+<p>They are listed according to the chapters of the library that they\n+   extend (see <a href=\"../documentation.html#3\">the chapter-specific notes</a>\n+   for a description).  Not every chapter may have extensions, and the\n+   extensions may come and go.  Also, this page is incomplete because the\n+   author is pressed for time.  Check back often; the latest change was on\n+   $Date$ (UTC).\n+</p>\n+\n+<p>Descriptions range from the scanty to the verbose.  You should also check\n+   the <a href=\"../documentation.html#4\">generated documentation</a> for notes\n+   and comments, especially for entries marked with '*'.  For more complete\n+   doumentation, see the SGI website.  For <em>really</em> complete\n+   documentation, buy a copy of Matt Austern's book.  *grin*\n+</p>\n+\n+<p>Back to the <a href=\"howto.html\">libstdc++-v3 extensions</a>.\n+\n+\n+<!-- ####################################################### -->\n+<hr>\n+<a name=\"ch20\"><h3>Chapter 20</h3></a>\n+<p>The &lt;functional&gt; header contains many additional functors and\n+   helper functions, extending section 20.3.  They are implemented in the\n+   file stl_function.h:\n+ <ul>\n+  <li><code>identity_element</code> for addition and multiplication. *\n+  <li>The functor <code>identity</code>, whose op() returns the argument\n+      unchanged. *\n+  <li>Composition functors <code>unary_function</code> and\n+      <code>binary_function</code>, and their helpers <code>compose1</code>\n+      and <code>compose2</code>. *\n+  <li><code>select1st</code> and <code>select2nd</code>, to strip pairs. *\n+  <li><code>project1st</code> and <code>project2nd</code>. *\n+  <li>A set of functors/functions which always return the same result.  They\n+      are <code>constant_void_fun, constant_binary_fun, constant_unary_fun,\n+      constant0, constant1, and constant2. *\n+  <li>The class <code>subtractive_rng</code>. *\n+  <li>mem_fun adaptor helpers mem_fun1 and mem_fun1_ref are provided for\n+      backwards compatibility.\n+</ul></p>\n+<p>20.4.3 is extended with a special version of\n+   <code>get_temporary_buffer</code> taking a second argument.  The argument\n+   is a pointer, which is ignored, but can be used to specify the template\n+   type (instead of using explicit function template arguments like the\n+   standard version does).  That is, in addition to\n+   <pre>\n+   get_temporary_buffer&lt;int&gt;(5);</pre>\n+   you can also use\n+   <pre>\n+   get_temporary_buffer(5, (int*)0);</pre>\n+</p>\n+<p>A class <code>temporary_buffer</code> is given in stl_tempbuf.h. *\n+</p>\n+<p>The specialized algorithms of section 20.4.4 are extended with\n+   <code>uninitialized_copy_n</code>. *\n+</p>\n+<p>Return <a href=\"howto.html\">to the main extensions page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n+\n+\n+<hr>\n+<a name=\"ch23\"><h3>Chapter 23</h3></a>\n+<p>A few extensions and nods to backwards-compatability have been made with\n+   containers.  Those dealing with older SGI-style allocators are dealt with\n+   elsewhere.  The remaining ones all deal with bits:\n+</p>\n+<p>The old pre-standard <code>bit_vector</code> class is present for\n+   backwards compatibility.  It is simply a typedef for the\n+   <code>vector&lt;bool&gt;</code> specialization.\n+</p>\n+<p>The <code>bitset</code> class has a number of extensions, described in the\n+   rest of this item.  First, we'll mention that this implementation of\n+   <code>bitset&lt;N&gt;</code> is specialized for cases where N number of\n+   bits will fit into a single word of storage.  If your choice of N is\n+   within that range (&lt;=32 on i686-pc-linux-gnu, for example), then all\n+   of the operations will be faster.\n+</p>\n+<p>There are\n+   versions of single-bit test, set, reset, and flip member functions which\n+   do no range-checking.  If we call them member functions of an instantiation\n+   of &quot;bitset&lt;N&gt;,&quot; then their names and signatures are:\n+   <pre>\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos, int val);\n+   bitset&lt;N&gt;&amp;   _Unchecked_reset (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_flip  (size_t pos);\n+   bool         _Unchecked_test  (size_t pos);</pre>\n+   Note that these may in fact be removed in the future, although we have\n+   no present plans to do so (and there doesn't seem to be any immediate\n+   reason to).\n+</p>\n+<p>\n+   The semantics of member function <code>operator[]</code> are not specified \n+   in the C++ standard.  A long-standing defect report calls for sensible\n+   obvious semantics, which are already implemented here:  <code>op[]</code>\n+   on a const bitset returns a bool, and for a non-const bitset returns a\n+   <code>reference</code> (a nested type).  However, this implementation does\n+   no range-checking on the index argument, which is in keeping with other\n+   containers' <code>op[]</code> requirements.  The defect report's proposed\n+   resolution calls for range-checking to be done.  We'll just wait and see...\n+</p>\n+<p>Finally, two additional searching functions have been added.  They return\n+   the index of the first &quot;on&quot; bit, and the index of the first\n+   &quot;on&quot; bit that is after <code>prev</code>, respectively:\n+   <pre>\n+   size_t _Find_first() const;\n+   size_t _Find_next (size_t prev) const;</pre>\n+   The same caveat given for the _Unchecked_* functions applies here also.\n+</p>\n+<p>Return <a href=\"howto.html\">to the main extensions page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n+\n+\n+<hr>\n+<a name=\"ch24\"><h3>Chapter 24</h3></a>\n+<p>24.3.2 describes <code>struct iterator</code>, which didn't exist in the\n+   original HP STL implementation (the language wasn't rich enough at the\n+   time).  For backwards compatibility, base classes are provided which\n+   declare the same nested typedefs:\n+   <ul>\n+    <li>input_iterator\n+    <li>output_iterator\n+    <li>forward_iterator\n+    <li>bidirectional_iterator\n+    <li>random_access_iterator\n+   </ul>\n+</p>\n+<p>24.3.4 describes iterator operation <code>distance</code>, which takes\n+   two iterators and returns a result.  It is extended by another signature\n+   which takes two iterators and a reference to a result.  The result is\n+   modified, and the function returns nothing.\n+</p>\n+<p>Return <a href=\"howto.html\">to the main extensions page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n+\n+\n+<hr>\n+<a name=\"ch25\"><h3>Chapter 25</h3></a>\n+<p>25.1.6 (count, count_if) is extended with two more versions of count\n+   and count_if.  The standard versions return their results.  The\n+   additional signatures return void, but take a final parameter by\n+   reference to which they assign their results, e.g.,\n+   <pre>\n+   void count (first, last, value, n);</pre>\n+</p>\n+<p>25.2 (mutating algorithms) is extended with two families of signatures,\n+   random_sample and random_sample_n.\n+</p>\n+<p>25.2.1 (copy) is extended with\n+   <pre>\n+   copy_n (_InputIter first, _Size count, _OutputIter result);</pre>\n+   which copies the first 'count' elements at 'first' into 'result'.\n+</p>\n+<p>25.3 (sorting 'n' heaps 'n' stuff) is extended with some helper\n+   predicates.  Look in the doxygen-generated pages for notes on these.\n+   <ul>\n+    <li><code>is_heap</code> tests whether or not a range is a heap.\n+    <li><code>is_sorted</code> tests whether or not a range is sorted in\n+        nondescending order.\n+   </ul>\n+</p>\n+<p>25.3.8 (lexigraphical_compare) is extended with\n+   <pre>\n+   lexicographical_compare_3way(_InputIter1 first1, _InputIter1 last1,\n+                                 _InputIter2 first2, _InputIter2 last2)</pre>\n+   which does... what?\n+</p>\n+<p>Return <a href=\"howto.html\">to the main extensions page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n+\n+\n+<hr>\n+<a name=\"ch26\"><h3>Chapter 26</h3></a>\n+<p>26.4, the generalized numeric operations such as accumulate, are extended\n+   with the following functions:\n+   <pre>\n+   power (x, n);\n+   power (x, n, moniod_operation);</pre>\n+   Returns, in FORTRAN syntax, &quot;x ** n&quot; where n&gt;=0.  In the\n+   case of n == 0, returns the <a href=\"#ch20\">identity element</a> for the\n+   monoid operation.  The two-argument signature uses multiplication (for\n+   a true &quot;power&quot; implementation), but addition is supported as well.\n+   The operation functor must be associative.\n+</p>\n+<p>The <code>iota</code> function wins the award for Extension With the\n+   Coolest Name.  It &quot;assigns sequentially increasing values to a range.\n+   That is, it assigns value to *first, value + 1 to *(first + 1) and so\n+   on.&quot;  Quoted from SGI documentation.\n+   <pre>\n+   void iota(_ForwardIter first, _ForwardIter last, _Tp value);</pre>\n+</p>\n+<p>Return <a href=\"howto.html\">to the main extensions page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n+\n+\n+<!-- ####################################################### -->\n+\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n+$Id: explanations.html,v 1.2 2001/09/17 23:24:38 pme Exp $\n+</em></p>\n+\n+\n+</body>\n+</html>"}, {"sha": "503490ddf0feb55ac9f79442ba20a8c68dd6adcd", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -9,7 +9,7 @@\n   ** Locations of \"the most recent snapshot is the Nth\" text are \n   ** answers 1_1, 1_4, 4_1, 5_6.\n -->\n-<!-- $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $ -->\n+<!-- $Id: index.html,v 1.11 2001/09/17 23:24:40 pme Exp $ -->\n </head>\n <body>\n \n@@ -368,6 +368,25 @@ <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n    the mailing list or look through recent archives.   The RELEASE-\n    NOTES and BUGS files are generally kept up-to-date.</em> \n \n+   <p>For 3.0.1, the most common &quot;bug&quot; is an apparently missing\n+      &quot;<code>../</code>&quot; in include/Makefile, resulting in files\n+      like gthr.h and gthr-single.h not being found.\n+   </p>\n+   <p>Please read\n+      <a href=\"http://gcc.gnu.org/install/configure.html\">the configuration\n+      instructions for GCC</a>,\n+      specifically the part about configuring in a seperate build directory,\n+      and how strongly recommended it is.  Building in the source directory\n+      is fragile, is rarely tested, and tends to break, as in this case.\n+      Work has already gone into the source tree to make this less painful\n+      for the next release.\n+   </p>\n+   <p><strong>Please do not report this as a bug.  We know about it.</strong>\n+      Reporting this -- or any other problem that's already been fixed --\n+      hinders the development of GCC, because we have to take time to\n+      respond to your report.  Thank you.\n+   </p>\n+\n    <h2><a name=\"4_1\">4.1 What works already?</a></h2>\n       <p>This is a verbatim clip from the &quot;Status&quot; section\n           of the RELEASE-NOTES for the latest snapshot.\n@@ -572,7 +591,8 @@ <h2><a name=\"5_2\">5.2 What's next after libstdc++-v3?</a></h2>\n          libstdc++.  Some of that is already happening, see 4.2.  Some of\n          those changes are being predicted by the library maintainers, and\n          we add code to the library based on what the current proposed\n-         resolution specifies.\n+         resolution specifies.  Those additions are listed in\n+\t <a href=\"../ext/howto.html#5\">the extensions page</a>.\n       </p>\n       <li><p>Performance tuning.  Lots of performance tuning.  This too is\n          already underway for post-3.0 releases, starting with memory\n@@ -678,7 +698,7 @@ <h2><a name=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</a></h2>\n <P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n <a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n-<br> $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $\n+<br> $Id: index.html,v 1.11 2001/09/17 23:24:40 pme Exp $\n </em></p>\n \n "}, {"sha": "bf9656d58938b4c56597c351e125ed266fc4ccac", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -286,6 +286,22 @@\n    mailing  list  or look through recent archives. The RELEASE- NOTES and\n    BUGS files are generally kept up-to-date.\n \n+   For  3.0.1,  the  most  common \"bug\" is an apparently missing \"../\" in\n+   include/Makefile, resulting in files like gthr.h and gthr-single.h not\n+   being found.\n+\n+   Please  read  [58]the configuration instructions for GCC, specifically\n+   the  part  about  configuring  in  a seperate build directory, and how\n+   strongly  recommended  it  is.  Building  in  the  source directory is\n+   fragile,  is  rarely tested, and tends to break, as in this case. Work\n+   has  already  gone  into the source tree to make this less painful for\n+   the next release.\n+\n+   Please  do  not report this as a bug. We know about it. Reporting this\n+   --  or  any  other  problem  that's  already been fixed -- hinders the\n+   development  of  GCC,  because we have to take time to respond to your\n+   report. Thank you.\n+\n 4.1 What works already?\n \n    This is a verbatim clip from the \"Status\" section of the RELEASE-NOTES\n@@ -327,16 +343,16 @@ New:\n \n 4.3 Bugs in the C++ language/lib specification\n \n-   Yes,  unfortunately,  there  are  some.  In a [58]message to the list,\n+   Yes,  unfortunately,  there  are  some.  In a [59]message to the list,\n    Nathan  Myers  announced that he has started a list of problems in the\n    ISO  C++  Standard itself, especially with regard to the chapters that\n-   concern  the  library.  The  list itself is [59]posted on his website.\n+   concern  the  library.  The  list itself is [60]posted on his website.\n    Developers  who are having problems interpreting the Standard may wish\n    to consult his notes.\n \n    For  those  people  who  are  not part of the ISO Library Group (i.e.,\n    nearly  all  of us needing to read this page in the first place :-), a\n-   public list of the library defects is occasionally published [60]here.\n+   public list of the library defects is occasionally published [61]here.\n      _________________________________________________________________\n \n 4.4 Things in libstdc++ that look like bugs\n@@ -357,22 +373,22 @@ New:\n    same  namespace  as other comparison functions (e.g., 'using' them and\n    the  <iterator>  header),  then  you  will suddenly be faced with huge\n    numbers  of  ambiguity  errors.  This  was  discussed on the -v3 list;\n-   Nathan Myers [61]sums things up here.\n+   Nathan Myers [62]sums things up here.\n \n   The g++-3 headers are not ours\n \n    If  you  have  found  an extremely broken header file which is causing\n    problems  for  you, look carefully before submitting a \"high\" priority\n    bug  report  (which  you  probably  shouldn't  do anyhow; see the last\n-   paragraph of the page describing [62]the GCC bug database).\n+   paragraph of the page describing [63]the GCC bug database).\n \n    If  the headers are in ${prefix}/include/g++-3, then you are using the\n    old  libstdc++-v2  library,  which is nonstandard and unmaintained. Do\n    not report problems with -v2 to the -v3 mailing list.\n \n    Currently  our  header files are installed in ${prefix}/include/g++-v3\n    (see  the  'v'?).  This may change with the next release of GCC, as it\n-   may be too confusing, but [63]the question has not yet been decided.\n+   may be too confusing, but [64]the question has not yet been decided.\n \n    glibc  If you're on a GNU/Linux system and have just upgraded to glibc\n    2.2,  but  are  still  using gcc 2.95.2, then you should have read the\n@@ -385,7 +401,7 @@ type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n \n-   Note  that  2.95.x  shipped  with  the  [64]old v2 library which is no\n+   Note  that  2.95.x  shipped  with  the  [65]old v2 library which is no\n    longer  maintained.  Also note that gcc 2.95.3 fixes this problem, but\n    requires a separate patch for libstdc++-v3.\n \n@@ -398,23 +414,23 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    visibility, or you just plain forgot, etc).\n \n    More  information,  including  how  to  optionally  enable/disable the\n-   checks, is available [65]here.\n+   checks, is available [66]here.\n      _________________________________________________________________\n \n 4.5 Aw, that's easy to fix!\n \n    If  you  have  found  a  bug  in  the library and you think you have a\n    working  fix,  then  send  it  in!  The  main  GCC  site has a page on\n-   [66]submitting  patches  that  covers the procedure, but for libstdc++\n+   [67]submitting  patches  that  covers the procedure, but for libstdc++\n    you  should also send the patch to our mailing list in addition to the\n-   GCC  patches  mailing  list. The libstdc++ [67]contributors' page also\n+   GCC  patches  mailing  list. The libstdc++ [68]contributors' page also\n    talks about how to submit patches.\n \n    In addition to the description, the patch, and the ChangeLog entry, it\n    is a Good Thing if you can additionally create a small test program to\n    test  for  the  presence of the bug that your patch fixes. Bugs have a\n    way  of  being  reintroduced; if an old bug creeps back in, it will be\n-   caught  immediately  by  the  [68]testsuite -- but only if such a test\n+   caught  immediately  by  the  [69]testsuite -- but only if such a test\n    exists.\n      _________________________________________________________________\n \n@@ -448,7 +464,8 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n        libstdc++.  Some  of  that  is already happening, see 4.2. Some of\n        those  changes are being predicted by the library maintainers, and\n        we  add  code  to  the  library based on what the current proposed\n-       resolution specifies.\n+       resolution  specifies.  Those  additions  are  listed  in  [70]the\n+       extensions page.\n     2. Performance  tuning.  Lots  of  performance  tuning.  This  too is\n        already  underway  for  post-3.0  releases,  starting  with memory\n        expansion  in  container  classes and buffer usage in synchronized\n@@ -463,13 +480,13 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n        type  from  C99.)  Bugfixes and rewrites (to improve or fix thread\n        safety, for instance) will of course be a continuing task.\n \n-   [69]This  question  about  the  next libstdc++ prompted some brief but\n-   interesting [70]speculation.\n+   [71]This  question  about  the  next libstdc++ prompted some brief but\n+   interesting [72]speculation.\n      _________________________________________________________________\n \n 5.3 What about the STL from SGI?\n \n-   The  [71]STL  from  SGI, version 3.3, was the most recent merge of the\n+   The  [73]STL  from  SGI, version 3.3, was the most recent merge of the\n    STL  codebase.  The code in libstdc++ contains many fixes and changes,\n    and  it  is  very  likely  that the SGI code is no longer under active\n    development. We expect that no future merges will take place.\n@@ -490,7 +507,7 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n        #include <ext/hash_map>\n \n \n-   Extensions to the library have [72]their own page.\n+   Extensions to the library have [74]their own page.\n      _________________________________________________________________\n \n 5.5 [removed]\n@@ -506,8 +523,8 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n    This  is  assuming  that  your  idea of \"multithreaded\" is the same as\n    ours...  The  general  question  of multithreading and libstdc++-v3 is\n-   addressed in the chapter-specific advice for [73]Library Introduction.\n-   Threadsafe  containers  are covered in more detail in [74]the Received\n+   addressed in the chapter-specific advice for [75]Library Introduction.\n+   Threadsafe  containers  are covered in more detail in [76]the Received\n    Wisdom section on containers.\n      _________________________________________________________________\n \n@@ -519,17 +536,17 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    their  two-meeting commitment for voting rights, may get a copy of the\n    standard from their respective national standards organization. In the\n    USA, this national standards organization is ANSI and their website is\n-   right  [75]here. (And if you've already registered with them, clicking\n-   this link will take you to directly to the place where you can [76]buy\n+   right  [77]here. (And if you've already registered with them, clicking\n+   this link will take you to directly to the place where you can [78]buy\n    the standard on-line.\n \n-   Who is your country's member body? Visit the [77]ISO homepage and find\n+   Who is your country's member body? Visit the [79]ISO homepage and find\n    out!\n      _________________________________________________________________\n \n-   Comments  and  suggestions  are  welcome,  and  may be sent to [78]the\n+   Comments  and  suggestions  are  welcome,  and  may be sent to [80]the\n    mailing list.\n-   $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $ \n+   $Id: index.html,v 1.11 2001/09/17 23:24:40 pme Exp $ \n \n References\n \n@@ -590,24 +607,26 @@ References\n   55. http://www.gnu.org/software/cvs/cvs.html\n   56. http://www.cvshome.org/\n   57. http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\n-  58. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n-  59. http://www.cantrip.org/draft-bugs.txt\n-  60. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n-  61. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n-  62. http://gcc.gnu.org/gnatswrite.html\n-  63. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n-  64. ../faq/index.html#4_4_interface\n-  65. ../19_diagnostics/howto.html#3\n-  66. http://gcc.gnu.org/contribute.html\n-  67. ../17_intro/contribute.html\n-  68. ../faq/index.html#2_4\n-  69. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n-  70. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n-  71. http://www.sgi.com/Technology/STL/\n-  72. ../ext/howto.html\n-  73. http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#3\n-  74. http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html\n-  75. http://www.ansi.org/\n-  76. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n-  77. http://www.iso.ch/\n-  78. mailto:libstdc++@gcc.gnu.org\n+  58. http://gcc.gnu.org/install/configure.html\n+  59. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n+  60. http://www.cantrip.org/draft-bugs.txt\n+  61. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n+  62. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n+  63. http://gcc.gnu.org/gnatswrite.html\n+  64. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\n+  65. ../faq/index.html#4_4_interface\n+  66. ../19_diagnostics/howto.html#3\n+  67. http://gcc.gnu.org/contribute.html\n+  68. ../17_intro/contribute.html\n+  69. ../faq/index.html#2_4\n+  70. ../ext/howto.html#5\n+  71. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n+  72. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n+  73. http://www.sgi.com/Technology/STL/\n+  74. ../ext/howto.html\n+  75. http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#3\n+  76. http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html\n+  77. http://www.ansi.org/\n+  78. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n+  79. http://www.iso.ch/\n+  80. mailto:libstdc++@gcc.gnu.org"}, {"sha": "b2b8da060e571186ab5915f27ea0cb694e067c8d", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -146,7 +146,7 @@ namespace std\n     {\n     public:\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Can't do exception(_msg) as defined in 27.4.2.1.1\n+      //48.  Use of non-existent exception constructor\n       explicit \n       failure(const string& __str) throw();\n \n@@ -397,6 +397,7 @@ namespace std\n     ios_base();\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  //50.  Copy constructor and assignment operator of ios_base\n   private:\n     ios_base(const ios_base&);\n "}, {"sha": "e0014ea7e1cb8955539d92ba94eb29c21817a18e", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -1176,7 +1176,7 @@ namespace std\n \t  __in.width(0);\n \t}\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 2000-02-01 Number to be determined\n+//211.  operator>>(istream&, string&) doesn't set failbit\n       if (!__extracted)\n \t__in.setstate (ios_base::failbit);\n #endif"}, {"sha": "9a59d818fc0e6a81519c3351b4c73ff523887f59", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -580,6 +580,7 @@ namespace std\n       { return do_get(__in, __end, __io, __err, __v); }\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      //XXX.  What number?\n       iter_type \n       get(iter_type __in, iter_type __end, ios_base& __io,\n \t  ios_base::iostate& __err, short& __v) const\n@@ -661,6 +662,7 @@ namespace std\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      //XXX.  What number?\n       virtual iter_type \n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, short&) const;\n       virtual iter_type "}, {"sha": "ec0cf11eba843382f692ecf25f57bcc8d2905702", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -663,6 +663,7 @@ namespace std\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n   // NB: This is an unresolved library defect #17\n+  //17.  Bad bool parsing\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -734,6 +735,7 @@ namespace std\n #endif\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  //XXX.  Which number?  Presumably same as in locale_facets.h...\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::"}, {"sha": "33182261e2c425c9d5ce350752453c2ebb4e5f48", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -644,6 +644,7 @@ namespace std\n       typedef basic_ostream<_CharT, _Traits> __ostream_type;\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 167.  Improper use of traits_type::length()\n+// Note that this is only in 'Review' status.\n       typedef char_traits<char>\t\t     __ctraits_type;\n #endif\n       typename __ostream_type::sentry __cerb(__out);"}, {"sha": "e70373f0ffcad40e64be1403e5dd664c9ac66fd5", "filename": "libstdc++-v3/include/bits/std_bitset.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -55,11 +55,6 @@\n // individual bits.  This allows us to specialize _Base_bitset for the\n // important special case where the bitset is only a single word.\n \n-// The C++ standard does not define the precise semantics of operator[].\n-// In this implementation the const version of operator[] is equivalent\n-// to test(), except that it does no range checking.  The non-const version\n-// returns a reference to a bit, again without doing any range checking.\n-\n \n #include <bits/std_cstddef.h>     // for size_t\n #include <bits/std_cstring.h>     // for memset\n@@ -618,6 +613,9 @@ class bitset : private _Base_bitset<__BITSET_WORDS(_Nb)>\n \n   // element access:\n   //for b[i];\n+  // _GLIBCPP_RESOLVE_LIB_DEFECTS Note that this implementation already\n+  // resolves DR 11 (items 1 and 2), but does not do the range-checking\n+  // required by that DR's resolution.  -pme\n   reference operator[](size_t __pos) { return reference(*this,__pos); }\n   bool operator[](size_t __pos) const { return _Unchecked_test(__pos); }\n "}, {"sha": "03ce3d588397aa06d7a04bad4d5e227d16e9a68d", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -93,7 +93,7 @@ namespace std\n     class ostreambuf_iterator;\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-  // Not included.\n+  // Not included.   (??? Apparently no LWG number?)\n   class ios_base; \n #endif\n "}, {"sha": "66dabde3a8f54a1715e8f13d232d02a5cb65bacf", "filename": "libstdc++-v3/include/bits/std_istream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -202,7 +202,7 @@ namespace std\n \n     private:\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.\n+      // Not defined.  (Side effect of DR 50.)\n       __istream_type& \n       operator=(const __istream_type&);\n "}, {"sha": "5239bd078f5d41f09cbd8cdc654025ed37910707", "filename": "libstdc++-v3/include/bits/std_map.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -58,9 +58,7 @@\n \n #pragma GCC system_header\n \n-#ifndef _CPP_BITS_STL_TREE_H  \n #include <bits/stl_tree.h>\n-#endif\n #include <bits/stl_map.h>\n #include <bits/stl_multimap.h>\n "}, {"sha": "0d00e557d70a26b9ec1cb725e12a97e24fa69489", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -170,7 +170,7 @@ namespace std\n \n     private:\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.\n+      // Not defined.  (Side effect of DR 50.)\n       __ostream_type& \n       operator=(const __ostream_type&);\n "}, {"sha": "9f3f006f65fbf0e8b4a527fe5f7a1b9d08dee341", "filename": "libstdc++-v3/include/bits/std_set.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -58,9 +58,7 @@\n \n #pragma GCC system_header\n \n-#ifndef _CPP_BITS_STL_TREE_H  /* XXX is this guard needed? */\n #include <bits/stl_tree.h>\n-#endif\n #include <bits/stl_set.h>\n #include <bits/stl_multiset.h>\n "}, {"sha": "8975f174849ded480187992a855769789d13590c", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -513,6 +513,7 @@ namespace std\n #endif\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+    // Side effect of DR 50.\n     private:\n       basic_streambuf(const __streambuf_type&);\n "}, {"sha": "51a939a3dcb1d5f87417d2a02290d3848dcf9881", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 340, "deletions": 60, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -53,124 +53,240 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_function.h\n+ *  This is an internal header file, included by other STL headers.  You\n+ *  should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_FUNCTION_H\n #define __SGI_STL_INTERNAL_FUNCTION_H\n \n namespace std\n {\n-\n+// 20.3.1 base classes\n+/** @defgroup s20_3_1_base Functor Base Classes\n+ *  Function objects, or @e functors, are objects with an @c operator()\n+ *  defined and accessible.  They can be passed as arguments to algorithm\n+ *  templates and used in place of a function pointer.  Not only is the\n+ *  resulting expressiveness of the library increased, but the generated\n+ *  code can be more efficient than what you might write by hand.  When we\n+ *  refer to \"functors,\" then, generally we include function pointers in\n+ *  the description as well.\n+ *\n+ *  Often, functors are only created as temporaries passed to algorithm\n+ *  calls, rather than being created as named variables.\n+ *\n+ *  Two examples taken from the standard itself follow.  To perform a\n+ *  by-element addition of two vectors @c a and @c b containing @c double,\n+ *  and put the result in @c a, use\n+ *  \\code\n+ *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());\n+ *  \\endcode\n+ *  To negate every element in @c a, use\n+ *  \\code\n+ *  transform(a.begin(), a.end(), a.begin(), negate<double>());\n+ *  \\endcode\n+ *  The addition and negation functions will be inlined directly.\n+ *\n+ *  The standard functiors are derived from structs named @c unary_function\n+ *  and @c binary_function.  These two classes contain nothing but typedefs,\n+ *  to aid in generic (template) programming.  If you write your own\n+ *  functors, you might consider doing the same.\n+ *\n+ *  @{\n+*/\n+/**\n+ *  This is one of the @link s20_3_1_base functor base classes @endlink.\n+*/\n template <class _Arg, class _Result>\n struct unary_function {\n-  typedef _Arg argument_type;\n-  typedef _Result result_type;\n+  typedef _Arg argument_type;   ///< @c argument_type is the type of the argument (no surprises here)\n+  typedef _Result result_type;  ///< @c result_type is the return type\n };\n \n+/**\n+ *  This is one of the @link s20_3_1_base functor base classes @endlink.\n+*/\n template <class _Arg1, class _Arg2, class _Result>\n struct binary_function {\n-  typedef _Arg1 first_argument_type;\n-  typedef _Arg2 second_argument_type;\n-  typedef _Result result_type;\n+  typedef _Arg1 first_argument_type;   ///< the type of the first argument (no surprises here)\n+  typedef _Arg2 second_argument_type;  ///< the type of the second argument\n+  typedef _Result result_type;         ///< type of the return type\n };      \n+/** @}  */\n \n+// 20.3.2 arithmetic\n+/** @defgroup s20_3_2_arithmetic Arithmetic Classes\n+ *  Because basic math often needs to be done during an algorithm, the library\n+ *  provides functors for those operations.  See the documentation for\n+ *  @link s20_3_1_base the base classes @endlink for examples of their use.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct plus : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }\n };\n \n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct minus : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }\n };\n \n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct multiplies : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }\n };\n \n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct divides : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }\n };\n \n-// identity_element (not part of the C++ standard).\n-\n-template <class _Tp> inline _Tp identity_element(plus<_Tp>) {\n-  return _Tp(0);\n-}\n-template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {\n-  return _Tp(1);\n-}\n-\n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct modulus : public binary_function<_Tp,_Tp,_Tp> \n {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }\n };\n \n+/// One of the @link s20_3_2_arithmetic math functors @endlink.\n template <class _Tp>\n struct negate : public unary_function<_Tp,_Tp> \n {\n   _Tp operator()(const _Tp& __x) const { return -__x; }\n };\n+/** @}  */\n \n+/** The @c identity_element functions are not part of the C++ standard; SGI\n+ *  provided them as an extension.  Its argument is an operation, and its\n+ *  return value is the identity element for that operation.  It is overloaded\n+ *  for addition and multiplication, and you can overload it for your own\n+ *  nefarious operations.\n+ *\n+ *  @addtogroup SGIextensions\n+ *  @{\n+*/\n+/// An \\link SGIextensions SGI extension \\endlink.\n+template <class _Tp> inline _Tp identity_element(plus<_Tp>) {\n+  return _Tp(0);\n+}\n+/// An \\link SGIextensions SGI extension \\endlink.\n+template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {\n+  return _Tp(1);\n+}\n+/** @}  */\n+\n+// 20.3.3 comparisons\n+/** @defgroup s20_3_3_comparisons Comparison Classes\n+ *  The library provides six wrapper functors for all the basic comparisons\n+ *  in C++, like @c <.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct equal_to : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }\n };\n \n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct not_equal_to : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }\n };\n \n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct greater : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }\n };\n \n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct less : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }\n };\n \n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct greater_equal : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }\n };\n \n+/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n template <class _Tp>\n struct less_equal : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }\n };\n+/** @}  */\n \n+// 20.3.4 logical operations\n+/** @defgroup s20_3_4_logical Boolean Operations Classes\n+ *  Here are wrapper functors for Boolean operations:  @c &&, @c ||, and @c !.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n template <class _Tp>\n struct logical_and : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }\n };\n \n+/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n template <class _Tp>\n struct logical_or : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }\n };\n \n+/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n template <class _Tp>\n struct logical_not : public unary_function<_Tp,bool>\n {\n   bool operator()(const _Tp& __x) const { return !__x; }\n };\n-\n+/** @}  */\n+\n+// 20.3.5 negators\n+/** @defgroup s20_3_5_negators Negators\n+ *  The functions @c not1 and @c not2 each take a predicate functor\n+ *  and return an instance of @c unary_negate or\n+ *  @c binary_negate, respectively.  These classes are functors whose\n+ *  @c operator() performs the stored predicate function and then returns\n+ *  the negation of the result.\n+ *\n+ *  For example, given a vector of integers and a trivial predicate,\n+ *  \\code\n+ *  struct IntGreaterThanThree\n+ *    : public std::unary_function<int, bool>\n+ *  {\n+ *      bool operator() (int x) { return x > 3; }\n+ *  };\n+ *  \n+ *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));\n+ *  \\endcode\n+ *  The call to @c find_if will locate the first index (i) of @c v for which\n+ *  \"!(v[i] > 3)\" is true.\n+ *\n+ *  The not1/unary_negate combination works on predicates taking a single\n+ *  argument.  The not2/binary_negate combination works on predicates which\n+ *  take two arguments.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_5_negators negation functors @endlink.\n template <class _Predicate>\n class unary_negate\n   : public unary_function<typename _Predicate::argument_type, bool> {\n@@ -183,13 +299,15 @@ class unary_negate\n   }\n };\n \n+/// One of the @link s20_3_5_negators negation functors @endlink.\n template <class _Predicate>\n inline unary_negate<_Predicate> \n not1(const _Predicate& __pred)\n {\n   return unary_negate<_Predicate>(__pred);\n }\n \n+/// One of the @link s20_3_5_negators negation functors @endlink.\n template <class _Predicate> \n class binary_negate \n   : public binary_function<typename _Predicate::first_argument_type,\n@@ -206,13 +324,47 @@ class binary_negate\n   }\n };\n \n+/// One of the @link s20_3_5_negators negation functors @endlink.\n template <class _Predicate>\n inline binary_negate<_Predicate> \n not2(const _Predicate& __pred)\n {\n   return binary_negate<_Predicate>(__pred);\n }\n-\n+/** @}  */\n+\n+// 20.3.6 binders\n+/** @defgroup s20_3_6_binder Binder Classes\n+ *  Binders turn functions/functors with two arguments into functors with\n+ *  a single argument, storing an argument to be applied later.  For\n+ *  example, an variable @c B of type @c binder1st is constructed from a functor\n+ *  @c f and an argument @c x.  Later, B's @c operator() is called with a\n+ *  single argument @c y.  The return value is the value of @c f(x,y).\n+ *  @c B can be \"called\" with various arguments (y1, y2, ...) and will in\n+ *  turn call @c f(x,y1), @c f(x,y2), ...\n+ *\n+ *  The function @c bind1st is provided to save some typing.  It takes the\n+ *  function and an argument as parameters, and returns an instance of\n+ *  @c binder1st.\n+ *\n+ *  The type @c binder2nd and its creator function @c bind2nd do the same\n+ *  thing, but the stored argument is passed as the second parameter instead\n+ *  of the first, e.g., @c bind2nd(std::minus<float>,1.3) will create a\n+ *  functor whose @c operator() accepts a floating-point number, subtracts\n+ *  1.3 from it, and returns the result.  (If @c bind1st had been used,\n+ *  the functor would perform \"1.3 - x\" instead.\n+ *\n+ *  Creator-wrapper functions like @c bind1st are intended to be used in\n+ *  calling algorithms.  Their return values will be temporary objects.\n+ *  (The goal is to not require you to type names like\n+ *  @c std::binder1st<std::plus<int>> for declaring a variable to hold the\n+ *  return value from @c bind1st(std::plus<int>,5).\n+ *\n+ *  These become more useful when combined with the composition functions.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_6_binder binder functors @endlink.\n template <class _Operation> \n class binder1st\n   : public unary_function<typename _Operation::second_argument_type,\n@@ -229,14 +381,15 @@ class binder1st\n     return op(value, __x); \n   }\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-  // 109. Missing binders for non-const sequence elements\n+  //109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::second_argument_type& __x) const {\n     return op(value, __x); \n   }\n #endif\n };\n \n+/// One of the @link s20_3_6_binder binder functors @endlink.\n template <class _Operation, class _Tp>\n inline binder1st<_Operation> \n bind1st(const _Operation& __fn, const _Tp& __x) \n@@ -245,6 +398,7 @@ bind1st(const _Operation& __fn, const _Tp& __x)\n   return binder1st<_Operation>(__fn, _Arg1_type(__x));\n }\n \n+/// One of the @link s20_3_6_binder binder functors @endlink.\n template <class _Operation> \n class binder2nd\n   : public unary_function<typename _Operation::first_argument_type,\n@@ -261,24 +415,51 @@ class binder2nd\n     return op(__x, value); \n   }\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-  // 109. Missing binders for non-const sequence elements\n+  //109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::first_argument_type& __x) const {\n     return op(__x, value); \n   }\n #endif\n };\n \n+/// One of the @link s20_3_6_binder binder functors @endlink.\n template <class _Operation, class _Tp>\n inline binder2nd<_Operation> \n bind2nd(const _Operation& __fn, const _Tp& __x) \n {\n   typedef typename _Operation::second_argument_type _Arg2_type;\n   return binder2nd<_Operation>(__fn, _Arg2_type(__x));\n }\n-\n-// unary_compose and binary_compose (extensions, not part of the standard).\n-\n+/** @}  */\n+\n+/** As an extension to the binders, SGI provided composition functors and\n+ *  wrapper functions to aid in their creation.  The @c unary_compose\n+ *  functor is constructed from two functions/functors, @c f and @c g.\n+ *  Calling @c operator() with a single argument @c x returns @c f(g(x)).\n+ *  The function @c compose1 takes the two functions and constructs a\n+ *  @c unary_compose variable for you.\n+ *  \n+ *  @c binary_compose is constructed from three functors, @c f, @c g1,\n+ *  and @c g2.  Its @c operator() returns @c f(g1(x),g2(x)).  The function\n+ *  @compose2 takes f, g1, and g2, and constructs the @c binary_compose\n+ *  instance for you.  For example, if @c f returns an int, then\n+ *  \\code\n+ *  int answer = (compose2(f,g1,g2))(x);\n+ *  \\endcode\n+ *  is equivalent to\n+ *  \\code\n+ *  int temp1 = g1(x);\n+ *  int temp2 = g2(x);\n+ *  int answer = f(temp1,temp2);\n+ *  \\endcode\n+ *  But the first form is more compact, and can be passed around as a\n+ *  functor to other algorithms.\n+ *\n+ *  @addtogroup SGIextensions\n+ *  @{\n+*/\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Operation1, class _Operation2>\n class unary_compose\n   : public unary_function<typename _Operation2::argument_type,\n@@ -296,13 +477,15 @@ class unary_compose\n   }\n };\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Operation1, class _Operation2>\n inline unary_compose<_Operation1,_Operation2> \n compose1(const _Operation1& __fn1, const _Operation2& __fn2)\n {\n   return unary_compose<_Operation1,_Operation2>(__fn1, __fn2);\n }\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Operation1, class _Operation2, class _Operation3>\n class binary_compose\n   : public unary_function<typename _Operation2::argument_type,\n@@ -321,6 +504,7 @@ class binary_compose\n   }\n };\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Operation1, class _Operation2, class _Operation3>\n inline binary_compose<_Operation1, _Operation2, _Operation3> \n compose2(const _Operation1& __fn1, const _Operation2& __fn2, \n@@ -329,7 +513,29 @@ compose2(const _Operation1& __fn1, const _Operation2& __fn2,\n   return binary_compose<_Operation1,_Operation2,_Operation3>\n     (__fn1, __fn2, __fn3);\n }\n-\n+/** @}  */\n+\n+// 20.3.7 adaptors pointers functions\n+/** @defgroup s20_3_7_adaptors Adaptors for pointers to functions\n+ *  The advantage of function objects over pointers to functions is that\n+ *  the objects in the standard library declare nested typedefs describing\n+ *  their argument and result types with uniform names (e.g., @c result_type\n+ *  from the base classes @c unary_function and @c binary_function).\n+ *  Sometimes those typedefs are required, not just optional.\n+ *\n+ *  Adaptors are provided to turn pointers to unary (single-argument) and\n+ *  binary (double-argument) functions into function objects.  The long-winded\n+ *  functor @c pointer_to_unary_function is constructed with a function\n+ *  pointer @c f, and its @c operator() called with argument @c x returns\n+ *  @c f(x).  The functor @c pointer_to_binary_function does the same thing,\n+ *  but with a double-argument @c f and @c operator().\n+ *\n+ *  The function @c ptr_fun takes a pointer-to-function @c f and constructs\n+ *  an instance of the appropriate functor.\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n template <class _Arg, class _Result>\n class pointer_to_unary_function : public unary_function<_Arg, _Result> {\n protected:\n@@ -340,12 +546,14 @@ class pointer_to_unary_function : public unary_function<_Arg, _Result> {\n   _Result operator()(_Arg __x) const { return _M_ptr(__x); }\n };\n \n+/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n template <class _Arg, class _Result>\n inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))\n {\n   return pointer_to_unary_function<_Arg, _Result>(__x);\n }\n \n+/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n template <class _Arg1, class _Arg2, class _Result>\n class pointer_to_binary_function : \n   public binary_function<_Arg1,_Arg2,_Result> {\n@@ -360,22 +568,31 @@ class pointer_to_binary_function :\n     }\n };\n \n+/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n template <class _Arg1, class _Arg2, class _Result>\n inline pointer_to_binary_function<_Arg1,_Arg2,_Result> \n ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {\n   return pointer_to_binary_function<_Arg1,_Arg2,_Result>(__x);\n }\n+/** @}  */\n \n-// identity is an extensions: it is not part of the standard.\n+\n+// extension documented next\n template <class _Tp>\n struct _Identity : public unary_function<_Tp,_Tp> {\n   _Tp& operator()(_Tp& __x) const { return __x; }\n   const _Tp& operator()(const _Tp& __x) const { return __x; }\n };\n \n+/** As an extension, SGI provided a functor called @c identity.  When a\n+ *  functor is required but no operations are desired, this can be used as a\n+ *  pass-through.  Its @c operator() returns its argument unchanged.\n+ *\n+ *  @addtogroup SGIextensions\n+*/\n template <class _Tp> struct identity : public _Identity<_Tp> {};\n \n-// select1st and select2nd are extensions: they are not part of the standard.\n+// extension documented next\n template <class _Pair>\n struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {\n   typename _Pair::first_type& operator()(_Pair& __x) const {\n@@ -397,10 +614,23 @@ struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>\n   }\n };\n \n+/** @c select1st and @c select2nd are extensions provided by SGI.  Their\n+ *  @c operator()s\n+ *  take a @c std::pair as an argument, and return either the first member\n+ *  or the second member, respectively.  They can be used (especially with\n+ *  the composition functors) to \"strip\" data from a sequence before\n+ *  performing the remainder of an algorithm.\n+ *\n+ *  @addtogroup SGIextensions\n+ *  @{\n+*/\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Pair> struct select1st : public _Select1st<_Pair> {};\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};\n+/** @}  */\n \n-// project1st and project2nd are extensions: they are not part of the standard\n+// extension documented next\n template <class _Arg1, class _Arg2>\n struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {\n   _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }\n@@ -411,16 +641,23 @@ struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {\n   _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }\n };\n \n+/** The @c operator() of the @c project1st functor takes two arbitrary\n+ *  arguments and returns the first one, while @c project2nd returns the\n+ *  second one.  They are extensions provided by SGI.\n+ *\n+ *  @addtogroup SGIextensions\n+ *  @{\n+*/\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Arg1, class _Arg2> \n struct project1st : public _Project1st<_Arg1, _Arg2> {};\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Arg1, class _Arg2>\n struct project2nd : public _Project2nd<_Arg1, _Arg2> {};\n+/** @}  */\n \n-// constant_void_fun, constant_unary_fun, and constant_binary_fun are\n-// extensions: they are not part of the standard.  (The same, of course,\n-// is true of the helper functions constant0, constant1, and constant2.)\n-\n+// extension documented next\n template <class _Result>\n struct _Constant_void_fun {\n   typedef _Result result_type;\n@@ -453,12 +690,27 @@ struct _Constant_binary_fun {\n   }\n };\n \n+/** These three functors are each constructed from a single arbitrary\n+ *  variable/value.  Later, their @c operator()s completely ignore any\n+ *  arguments passed, and return the stored value.\n+ *  - @c constant_void_fun's @c operator() takes no arguments\n+ *  - @c constant_unary_fun's @c operator() takes one argument (ignored)\n+ *  - @c constant_binary_fun's @c operator() takes two arguments (ignored)\n+ *\n+ *  The helper creator functions @c constant0, @c constant1, and\n+ *  @c constant2 each take a \"result\" argument and construct variables of\n+ *  the appropriate functor type.\n+ *\n+ *  @addtogroup SGIextensions\n+ *  @{\n+*/\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result>\n struct constant_void_fun : public _Constant_void_fun<_Result> {\n   constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}\n };  \n \n-\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result,\n           class _Argument = _Result>\n struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>\n@@ -467,7 +719,7 @@ struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>\n     : _Constant_unary_fun<_Result, _Argument>(__v) {}\n };\n \n-\n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result,\n           class _Arg1 = _Result,\n           class _Arg2 = _Arg1>\n@@ -478,33 +730,42 @@ struct constant_binary_fun\n     : _Constant_binary_fun<_Result, _Arg1, _Arg2>(__v) {}\n };\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result>\n inline constant_void_fun<_Result> constant0(const _Result& __val)\n {\n   return constant_void_fun<_Result>(__val);\n }\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result>\n inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)\n {\n   return constant_unary_fun<_Result,_Result>(__val);\n }\n \n+/// An \\link SGIextensions SGI extension \\endlink.\n template <class _Result>\n inline constant_binary_fun<_Result,_Result,_Result> \n constant2(const _Result& __val)\n {\n   return constant_binary_fun<_Result,_Result,_Result>(__val);\n }\n+/** @}  */\n \n-// subtractive_rng is an extension: it is not part of the standard.\n-// Note: this code assumes that int is 32 bits.\n+/** The @c subtractive_rng class is documented on\n+ *  <a href=\"http://www.sgi.com/tech/stl/\">SGI's site</a>.\n+ *  Note that this code assumes that @c int is 32 bits.\n+ *\n+ *  @ingroup SGIextensions\n+*/\n class subtractive_rng : public unary_function<unsigned int, unsigned int> {\n private:\n   unsigned int _M_table[55];\n   size_t _M_index1;\n   size_t _M_index2;\n public:\n+  /// Returns a number less than the argument.\n   unsigned int operator()(unsigned int __limit) {\n     _M_index1 = (_M_index1 + 1) % 55;\n     _M_index2 = (_M_index2 + 1) % 55;\n@@ -531,34 +792,38 @@ class subtractive_rng : public unary_function<unsigned int, unsigned int> {\n     _M_index2 = 31;\n   }\n \n+  /// Ctor allowing you to initialize the seed.\n   subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }\n+  /// Default ctor; initializes its state with some number you don't see.\n   subtractive_rng() { _M_initialize(161803398u); }\n };\n \n \n-// Adaptor function objects: pointers to member functions.\n-\n-// There are a total of 16 = 2^4 function objects in this family.\n-//  (1) Member functions taking no arguments vs member functions taking\n-//       one argument.\n-//  (2) Call through pointer vs call through reference.\n-//  (3) Member function with void return type vs member function with\n-//      non-void return type.\n-//  (4) Const vs non-const member function.\n-\n-// Note that choice (3) is nothing more than a workaround: according\n-//  to the draft, compilers should handle void and non-void the same way.\n-//  This feature is not yet widely implemented, though.  You can only use\n-//  member functions returning void if your compiler supports partial\n-//  specialization.\n-\n-// All of this complexity is in the function objects themselves.  You can\n-//  ignore it by using the helper function mem_fun and mem_fun_ref,\n-//  which create whichever type of adaptor is appropriate.\n-//  (mem_fun1 and mem_fun1_ref are no longer part of the C++ standard,\n-//  but they are provided for backward compatibility.)\n-\n-\n+// 20.3.8 adaptors pointers members\n+/** @defgroup s20_3_8_memadaptors Adaptors for pointers to members\n+ *  There are a total of 16 = 2^4 function objects in this family.\n+ *   (1) Member functions taking no arguments vs member functions taking\n+ *        one argument.\n+ *   (2) Call through pointer vs call through reference.\n+ *   (3) Member function with void return type vs member function with\n+ *       non-void return type.\n+ *   (4) Const vs non-const member function.\n+ *\n+ *  Note that choice (3) is nothing more than a workaround: according\n+ *   to the draft, compilers should handle void and non-void the same way.\n+ *   This feature is not yet widely implemented, though.  You can only use\n+ *   member functions returning void if your compiler supports partial\n+ *   specialization.\n+ *\n+ *  All of this complexity is in the function objects themselves.  You can\n+ *   ignore it by using the helper function mem_fun and mem_fun_ref,\n+ *   which create whichever type of adaptor is appropriate.\n+ *   (mem_fun1 and mem_fun1_ref are no longer part of the C++ standard,\n+ *   but they are provided for backward compatibility.)\n+ *\n+ *  @{\n+*/\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp>\n class mem_fun_t : public unary_function<_Tp*,_Ret> {\n public:\n@@ -568,6 +833,7 @@ class mem_fun_t : public unary_function<_Tp*,_Ret> {\n   _Ret (_Tp::*_M_f)();\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp>\n class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {\n public:\n@@ -577,7 +843,7 @@ class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {\n   _Ret (_Tp::*_M_f)() const;\n };\n \n-\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp>\n class mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n public:\n@@ -587,6 +853,7 @@ class mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n   _Ret (_Tp::*_M_f)();\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp>\n class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n public:\n@@ -596,6 +863,7 @@ class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n   _Ret (_Tp::*_M_f)() const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp, class _Arg>\n class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {\n public:\n@@ -605,6 +873,7 @@ class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg);\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp, class _Arg>\n class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {\n public:\n@@ -615,6 +884,7 @@ class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg) const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp, class _Arg>\n class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n public:\n@@ -624,6 +894,7 @@ class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg);\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Ret, class _Tp, class _Arg>\n class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n public:\n@@ -633,6 +904,7 @@ class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg) const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp>\n class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {\n public:\n@@ -642,6 +914,7 @@ class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {\n   void (_Tp::*_M_f)();\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp>\n class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {\n public:\n@@ -651,6 +924,7 @@ class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {\n   void (_Tp::*_M_f)() const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp>\n class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n public:\n@@ -660,6 +934,7 @@ class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n   void (_Tp::*_M_f)();\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp>\n class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n public:\n@@ -669,6 +944,7 @@ class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n   void (_Tp::*_M_f)() const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp, class _Arg>\n class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {\n public:\n@@ -678,6 +954,7 @@ class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {\n   void (_Tp::*_M_f)(_Arg);\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp, class _Arg>\n class const_mem_fun1_t<void, _Tp, _Arg> \n   : public binary_function<const _Tp*,_Arg,void> {\n@@ -688,6 +965,7 @@ class const_mem_fun1_t<void, _Tp, _Arg>\n   void (_Tp::*_M_f)(_Arg) const;\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp, class _Arg>\n class mem_fun1_ref_t<void, _Tp, _Arg>\n   : public binary_function<_Tp,_Arg,void> {\n@@ -698,6 +976,7 @@ class mem_fun1_ref_t<void, _Tp, _Arg>\n   void (_Tp::*_M_f)(_Arg);\n };\n \n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n template <class _Tp, class _Arg>\n class const_mem_fun1_ref_t<void, _Tp, _Arg>\n   : public binary_function<_Tp,_Arg,void> {\n@@ -763,6 +1042,7 @@ template <class _Ret, class _Tp, class _Arg>\n inline const_mem_fun1_ref_t<_Ret,_Tp,_Arg>\n mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n   { return const_mem_fun1_ref_t<_Ret,_Tp,_Arg>(__f); }\n+/** @}  */\n \n } // namespace std\n "}, {"sha": "7bb1dfdff03ac5e223ff70366fd6277ba5e54a50", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -95,7 +95,7 @@ inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n   return __x.first == __y.first && __x.second == __y.second; \n }\n \n-/// ...put link to onlinedocs here...\n+/// http://gcc.gnu.org/onlinedocs/libstdc++/20_util/howto.html#pairlt\n template <class _T1, class _T2>\n inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n { \n@@ -134,8 +134,9 @@ inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n  *  @return   A newly-constructed pair<> object of the appropriate type.\n  *\n  *  The standard requires that the objects be passed by reference-to-const,\n- *  but LWG issue #181 says they should be passed by const value.\n- */\n+ *  but LWG issue #181 says they should be passed by const value.  We follow\n+ *  the LWG by default.\n+*/\n template <class _T1, class _T2>\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //181.  make_pair() unintended behavior"}, {"sha": "3f946dabe7f518214f0b513d8bfa26154f93eedf", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -173,7 +173,7 @@ namespace std\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n       // 110 istreambuf_iterator::equal not const\n-      // NB: there is also number 111 pending on this function.\n+      // NB: there is also number 111 (NAD, Future) pending on this function.\n       bool \n       equal(const istreambuf_iterator& __b) const\n       {"}, {"sha": "a1d62c3d79143e55495f917bb1d26845489a85c5", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cd227ec3a5338e6233523eb78b13643e095b61/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=77cd227ec3a5338e6233523eb78b13643e095b61", "patch": "@@ -78,7 +78,7 @@ namespace std\n     \n   public:\n     // the public interface\n-    /** Returns an \\e implementation-defined byte string; this is not\n+    /** Returns an @e implementation-defined byte string; this is not\n      *  portable between compilers!  */\n     const char* name() const\n     { return __name; }"}]}