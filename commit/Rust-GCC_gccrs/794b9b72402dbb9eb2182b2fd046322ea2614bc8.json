{"sha": "794b9b72402dbb9eb2182b2fd046322ea2614bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0YjliNzI0MDJkYmI5ZWIyMTgyYjJmZDA0NjMyMmVhMjYxNGJjOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T14:15:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T14:15:46Z"}, "message": "[multiple changes]\n\n2012-02-17  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi: Minor shuffling.\n\n2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.adb: Expression functions can carry pre/postconditions.\n\t* par-ch6.adb (P_Subprogram): look for optional pre/postconditions\n\tin an expression function.\n\t* sem_prag (Check_Precondition_Postcondition): legal on expression\n\tfunctions.\n\n2012-02-17  Vincent Pucci  <pucci@adacore.com>\n\n\t* a-cdlili.adb, a-cidlli.adb, a-cihama.adb, a-cimutr.adb,\n\t* a-ciorma.adb, a-cohama.adb, a-coinve.adb, a-comutr.adb,\n\t* a-convec.adb, a-coorma.adb (Adjust): New routine.\n\t(Constant_Reference): Increment Busy and Lock counters.\n\t(Reference): Increase Busy and Lock counters.\n\t(Finalize): New routine.\n\t* a-cihase.adb, a-ciorse.adb, a-cohase.adb, a-coorse.adb:\n\t(Adjust): New routine.\t(Constant_Reference): Increment Busy\n\tand Lock counters.\n\t(Finalize): New routine.\n\t* a-cdlili.ads, a-cidlli.ads, a-cihama.ads, a-cihase.ads,\n\t* a-cimutr.ads, a-ciorma.ads, a-ciorse.ads, a-cohama.ads,\n\t* a-cohase.ads, a-coinve.ads, a-comutr.ads, a-convec.ads,\n\t* a-coorma.ads, a-coorse: Controlled component added to the\n\treference types.\n\n2012-02-17  Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.adb (Check_Restriction): Add special handling for\n\tNo_Obsolescent_Features.\n\n2012-02-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Find_Finalize_Address): When dealing with an\n\tinternally built full view for a type with unknown discriminants,\n\tuse the original record type.\n\nFrom-SVN: r184341", "tree": {"sha": "77a974bfd56acb90a49b1624bbb40fb6174a16b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77a974bfd56acb90a49b1624bbb40fb6174a16b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794b9b72402dbb9eb2182b2fd046322ea2614bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794b9b72402dbb9eb2182b2fd046322ea2614bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794b9b72402dbb9eb2182b2fd046322ea2614bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794b9b72402dbb9eb2182b2fd046322ea2614bc8/comments", "author": null, "committer": null, "parents": [{"sha": "51f894e62c6e712338e070825ac07db1b034912d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f894e62c6e712338e070825ac07db1b034912d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f894e62c6e712338e070825ac07db1b034912d"}], "stats": {"total": 1439, "additions": 1350, "deletions": 89}, "files": [{"sha": "a7e3dee1d92d2854f8ff0243768b610d5c676f81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -1,3 +1,44 @@\n+2012-02-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi: Minor shuffling.\n+\n+2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.adb: Expression functions can carry pre/postconditions.\n+\t* par-ch6.adb (P_Subprogram): look for optional pre/postconditions\n+\tin an expression function.\n+\t* sem_prag (Check_Precondition_Postcondition): legal on expression\n+\tfunctions.\n+\n+2012-02-17  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* a-cdlili.adb, a-cidlli.adb, a-cihama.adb, a-cimutr.adb,\n+\t* a-ciorma.adb, a-cohama.adb, a-coinve.adb, a-comutr.adb,\n+\t* a-convec.adb, a-coorma.adb (Adjust): New routine.\n+\t(Constant_Reference): Increment Busy and Lock counters.\n+\t(Reference): Increase Busy and Lock counters.\n+\t(Finalize): New routine.\n+\t* a-cihase.adb, a-ciorse.adb, a-cohase.adb, a-coorse.adb:\n+\t(Adjust): New routine.\t(Constant_Reference): Increment Busy\n+\tand Lock counters.\n+\t(Finalize): New routine.\n+\t* a-cdlili.ads, a-cidlli.ads, a-cihama.ads, a-cihase.ads,\n+\t* a-cimutr.ads, a-ciorma.ads, a-ciorse.ads, a-cohama.ads,\n+\t* a-cohase.ads, a-coinve.ads, a-comutr.ads, a-convec.ads,\n+\t* a-coorma.ads, a-coorse: Controlled component added to the\n+\treference types.\n+\n+2012-02-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.adb (Check_Restriction): Add special handling for\n+\tNo_Obsolescent_Features.\n+\n+2012-02-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Find_Finalize_Address): When dealing with an\n+\tinternally built full view for a type with unknown discriminants,\n+\tuse the original record type.\n+\n 2012-02-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_dim.adb: Minor reformatting."}, {"sha": "a04afb0bd8f144836cc253f8f406fda8479eb230", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -142,6 +142,20 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       end loop;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Append --\n    ------------\n@@ -244,7 +258,20 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       pragma Assert (Vet (Position), \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         C : List renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -442,6 +469,22 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1336,7 +1379,19 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       pragma Assert (Vet (Position), \"bad cursor in function Reference\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         C : List renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    ---------------------"}, {"sha": "d1707c757a2dc3f490baca647812f0f32a1fd020", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -104,10 +104,12 @@ package Ada.Containers.Doubly_Linked_Lists is\n    function Constant_Reference\n      (Container : aliased List;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out List;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out List; Source : List);\n \n@@ -305,8 +307,22 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : List_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -321,7 +337,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "cc93b4c2fc042a5a860b4a161b48eab8b2d1180d", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -166,6 +166,20 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       end loop;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Append --\n    ------------\n@@ -271,7 +285,19 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       pragma Assert (Vet (Position), \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         C : List renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -479,6 +505,22 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1372,7 +1414,19 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       pragma Assert (Vet (Position), \"bad cursor in function Reference\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         C : List renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    ---------------------"}, {"sha": "af57af11ae9046d05dfb8013199e145043434bf4", "filename": "gcc/ada/a-cidlli.ads", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -103,10 +103,12 @@ package Ada.Containers.Indefinite_Doubly_Linked_Lists is\n    function Constant_Reference\n      (Container : aliased List;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out List;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out List; Source : List);\n \n@@ -299,8 +301,22 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : List_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -315,7 +331,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "1d30d0443e4e12e89d09ee2e5fb7ba0fbd0ec892", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -136,6 +136,21 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            M : Map renames Control.Container.all;\n+            HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -217,7 +232,21 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n         (Vet (Position),\n          \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         M : Map renames Position.Container.all;\n+         HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -235,7 +264,21 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          raise Program_Error with \"key has no element\";\n       end if;\n \n-      return (Element => Node.Element.all'Access);\n+      declare\n+         M : Map renames Container'Unrestricted_Access.all;\n+         HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -484,6 +527,23 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            M : Map renames Control.Container.all;\n+            HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1028,7 +1088,20 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n         (Vet (Position),\n          \"Position cursor in function Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         M : Map renames Position.Container.all;\n+         HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -1046,7 +1119,21 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          raise Program_Error with \"key has no element\";\n       end if;\n \n-      return (Element => Node.Element.all'Access);\n+      declare\n+         M : Map renames Container'Unrestricted_Access.all;\n+         HT : Hash_Table_Type renames M.HT'Unrestricted_Access.all;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    -------------"}, {"sha": "feef181b65b805fc0fffed5727b8067dee0e8ecf", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -147,18 +147,22 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Map;\n       Key       : Key_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Key       : Key_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Map; Source : Map);\n \n@@ -363,8 +367,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Map_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -379,7 +397,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "735179415c1e450589b01ab34d4a12fc7f05f2e0", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -165,6 +165,20 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -228,7 +242,20 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       pragma Assert (Vet (Position), \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         HT : Hash_Table_Type renames Position.Container.all.HT;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -610,6 +637,22 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1926,7 +1969,20 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n             raise Program_Error with \"Node has no element\";\n          end if;\n \n-         return (Element => Node.Element.all'Access);\n+         declare\n+            HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            return R : constant Constant_Reference_Type :=\n+                         (Element => Node.Element.all'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Constant_Reference;\n \n       --------------"}, {"sha": "b300186f6db0b0f0a774ced6277a67668f58caeb", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -152,6 +152,7 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n    function Constant_Reference\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    procedure Assign (Target : in out Set; Source : Set);\n \n@@ -507,8 +508,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Set_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "050c0395deeb23b0186a5251cd9a756d7c567432", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -204,6 +204,20 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       Container.Count := Source_Count;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Tree renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    -------------------\n    -- Ancestor_Find --\n    -------------------\n@@ -472,7 +486,20 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       --  pragma Assert (Vet (Position),\n       --                 \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         C : Tree renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -985,6 +1012,22 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       B := B - 1;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Tree renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -2041,7 +2084,19 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       --  pragma Assert (Vet (Position),\n       --                 \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         C : Tree renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    --------------------"}, {"sha": "6c3411f1314b34eb7269d341cc036a710c10f706", "filename": "gcc/ada/a-cimutr.ads", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -112,10 +112,12 @@ package Ada.Containers.Indefinite_Multiway_Trees is\n    function Constant_Reference\n      (Container : aliased Tree;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Tree;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Tree; Source : Tree);\n \n@@ -378,8 +380,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Tree_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -394,7 +410,10 @@ private\n    for Constant_Reference_Type'Write use Write;\n \n    type Reference_Type\n-     (Element : not null access Element_Type) is null record;\n+     (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "b62b87b3a397727fb93ca996d62615fff06f17d2", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 86, "deletions": 5, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -291,6 +291,20 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            T : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames T.Busy;\n+            L : Natural renames T.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -379,7 +393,20 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       pragma Assert (Vet (Container.Tree, Position.Node),\n                      \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -397,7 +424,20 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          raise Program_Error with \"Node has no element\";\n       end if;\n \n-      return (Element => Node.Element.all'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -586,6 +626,22 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            T : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames T.Busy;\n+            L : Natural renames T.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1360,7 +1416,19 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       pragma Assert (Vet (Container.Tree, Position.Node),\n                      \"Position cursor in function Reference is bad\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -1378,7 +1446,20 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          raise Program_Error with \"Node has no element\";\n       end if;\n \n-      return (Element => Node.Element.all'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    -------------"}, {"sha": "5c3a776c4aa46ed5512bf2f8cd8176bc663fd702", "filename": "gcc/ada/a-ciorma.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -109,18 +109,22 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Map;\n       Key       : Key_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Key       : Key_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Map; Source : Map);\n \n@@ -292,8 +296,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Map_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -308,7 +326,10 @@ private\n    for Constant_Reference_Type'Write use Write;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "7b919494a171393fe5e9b28edf8f1307598a4aee", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -325,6 +325,20 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            Tree : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -398,7 +412,20 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n         (Vet (Container.Tree, Position.Node),\n          \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element.all'Access);\n+      declare\n+         Tree : Tree_Type renames Position.Container.all.Tree;\n+         B : Natural renames Tree.Busy;\n+         L : Natural renames Tree.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -617,6 +644,22 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            Tree : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -782,7 +825,20 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n             raise Program_Error with \"Node has no element\";\n          end if;\n \n-         return (Element => Node.Element.all'Access);\n+         declare\n+            Tree : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            return R : constant Constant_Reference_Type :=\n+                         (Element => Node.Element.all'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Constant_Reference;\n \n       --------------"}, {"sha": "87ba353e9e8d45ad99c1cc7a197cee0f50d4807c", "filename": "gcc/ada/a-ciorse.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -99,6 +99,7 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n    function Constant_Reference\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    procedure Assign (Target : in out Set; Source : Set);\n \n@@ -376,8 +377,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Set_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "00553d0eeffec92523959b827aedc730efefaaa9", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -135,6 +135,20 @@ package body Ada.Containers.Hashed_Maps is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B  : Natural renames HT.Busy;\n+            L  : Natural renames HT.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -211,7 +225,19 @@ package body Ada.Containers.Hashed_Maps is\n         (Vet (Position),\n          \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+         B  : Natural renames HT.Busy;\n+         L  : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -225,7 +251,20 @@ package body Ada.Containers.Hashed_Maps is\n          raise Constraint_Error with \"key not in map\";\n       end if;\n \n-      return (Element => Node.Element'Access);\n+      declare\n+         HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+         B  : Natural renames HT.Busy;\n+         L  : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -439,6 +478,22 @@ package body Ada.Containers.Hashed_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B  : Natural renames HT.Busy;\n+            L  : Natural renames HT.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -920,7 +975,19 @@ package body Ada.Containers.Hashed_Maps is\n         (Vet (Position),\n          \"Position cursor in function Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+         B  : Natural renames HT.Busy;\n+         L  : Natural renames HT.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -934,7 +1001,20 @@ package body Ada.Containers.Hashed_Maps is\n          raise Constraint_Error with \"key not in map\";\n       end if;\n \n-      return (Element => Node.Element'Access);\n+      declare\n+         HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+         B  : Natural renames HT.Busy;\n+         L  : Natural renames HT.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    ---------------"}, {"sha": "98b2cb3c5a865a64e782ac25c70b0fd8be10c441", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -148,18 +148,22 @@ package Ada.Containers.Hashed_Maps is\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Map;\n       Key       : Key_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Key       : Key_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Map; Source : Map);\n \n@@ -369,8 +373,22 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Map_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -385,7 +403,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "11940ee7a57e5ab63792ec75ab1ff538c13f1572", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -161,6 +161,20 @@ package body Ada.Containers.Hashed_Sets is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -218,7 +232,20 @@ package body Ada.Containers.Hashed_Sets is\n \n       pragma Assert (Vet (Position), \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         HT : Hash_Table_Type renames Position.Container.all.HT;\n+         B : Natural renames HT.Busy;\n+         L : Natural renames HT.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -548,6 +575,22 @@ package body Ada.Containers.Hashed_Sets is\n       HT_Ops.Finalize (Container.HT);\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            HT : Hash_Table_Type renames Control.Container.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1746,7 +1789,20 @@ package body Ada.Containers.Hashed_Sets is\n             raise Constraint_Error with \"Key not in set\";\n          end if;\n \n-         return (Element => Node.Element'Access);\n+         declare\n+            HT : Hash_Table_Type renames Container'Unrestricted_Access.all.HT;\n+            B : Natural renames HT.Busy;\n+            L : Natural renames HT.Lock;\n+         begin\n+            return R : constant Constant_Reference_Type :=\n+                         (Element => Node.Element'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Constant_Reference;\n \n       --------------"}, {"sha": "de62cd96a5f37ec2fd8219d10b2afaaaca9ade13", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -153,6 +153,7 @@ package Ada.Containers.Hashed_Sets is\n    function Constant_Reference\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    procedure Assign (Target : in out Set; Source : Set);\n \n@@ -509,8 +510,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Set_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "0627af1b94e017bf21e274f9be7c505d2f58120b", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -578,6 +578,20 @@ package body Ada.Containers.Indefinite_Vectors is\n       end;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Append --\n    ------------\n@@ -697,7 +711,20 @@ package body Ada.Containers.Indefinite_Vectors is\n          raise Constraint_Error with \"element at Position is empty\";\n       end if;\n \n-      return (Element => E.all'Access);\n+      declare\n+         C : Vector renames Container'Unrestricted_Access.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => E.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -717,7 +744,20 @@ package body Ada.Containers.Indefinite_Vectors is\n          raise Constraint_Error with \"element at Index is empty\";\n       end if;\n \n-      return (Element => E.all'Access);\n+      declare\n+         C : Vector renames Container'Unrestricted_Access.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => E.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -1131,6 +1171,22 @@ package body Ada.Containers.Indefinite_Vectors is\n       B := B - 1;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1402,6 +1458,8 @@ package body Ada.Containers.Indefinite_Vectors is\n             Array_Type   => Elements_Array,\n             \"<\"          => Is_Less);\n \n+      --  Start of processing for Sort\n+\n       begin\n          if Container.Last <= Index_Type'First then\n             return;\n@@ -3047,7 +3105,19 @@ package body Ada.Containers.Indefinite_Vectors is\n          raise Constraint_Error with \"element at Position is empty\";\n       end if;\n \n-      return (Element => E.all'Access);\n+      declare\n+         C : Vector renames Container'Unrestricted_Access.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => E.all'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -3067,7 +3137,20 @@ package body Ada.Containers.Indefinite_Vectors is\n          raise Constraint_Error with \"element at Index is empty\";\n       end if;\n \n-      return (Element => E.all'Access);\n+      declare\n+         C : Vector renames Container'Unrestricted_Access.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => E.all'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    ---------------------\n@@ -3430,9 +3513,9 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  catch more things) instead of for element tampering (which will catch\n       --  fewer things). It's true that the elements of this vector container\n       --  could be safely moved around while (say) an iteration is taking place\n-      --  (iteration only increments the busy counter), and so technically\n-      --  all we would need here is a test for element tampering (indicated\n-      --  by the lock counter), that's simply an artifact of our array-based\n+      --  (iteration only increments the busy counter), and so technically all\n+      --  we would need here is a test for element tampering (indicated by the\n+      --  lock counter), that's simply an artifact of our array-based\n       --  implementation. Logically Reverse_Elements requires a check for\n       --  cursor tampering.\n "}, {"sha": "c9a64989be5525a3aaa21b9db657e53a12a4a277", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -117,18 +117,22 @@ package Ada.Containers.Indefinite_Vectors is\n    function Constant_Reference\n      (Container : aliased Vector;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Vector;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Vector;\n       Index     : Index_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Vector;\n       Index     : Index_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function To_Cursor\n      (Container : Vector;\n@@ -408,8 +412,22 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Vector_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -424,7 +442,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-     (Element : not null access Element_Type) is null record;\n+     (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "4933bcf54a9d23698dcb51a466828bf1da3ed309", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -206,6 +206,20 @@ package body Ada.Containers.Multiway_Trees is\n       Container.Count := Source_Count;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Tree renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    -------------------\n    -- Ancestor_Find --\n    -------------------\n@@ -464,7 +478,20 @@ package body Ada.Containers.Multiway_Trees is\n       --  pragma Assert (Vet (Position),\n       --                 \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         C : Tree renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -957,6 +984,22 @@ package body Ada.Containers.Multiway_Trees is\n       B := B - 1;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Tree renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -2053,7 +2096,19 @@ package body Ada.Containers.Multiway_Trees is\n       --  pragma Assert (Vet (Position),\n       --                 \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         C : Tree renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    --------------------"}, {"sha": "6e0aa9a12036984264b9ad1023aabc00b586732f", "filename": "gcc/ada/a-comutr.ads", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -111,10 +111,12 @@ package Ada.Containers.Multiway_Trees is\n    function Constant_Reference\n      (Container : aliased Tree;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Tree;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Tree; Source : Tree);\n \n@@ -423,8 +425,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Tree_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -439,7 +455,10 @@ private\n    for Constant_Reference_Type'Write use Write;\n \n    type Reference_Type\n-     (Element : not null access Element_Type) is null record;\n+     (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "709e1fe7e90074fe92e9fc86dac2a310d426ee6a", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -396,6 +396,20 @@ package body Ada.Containers.Vectors is\n       end;\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Append --\n    ------------\n@@ -499,7 +513,21 @@ package body Ada.Containers.Vectors is\n          raise Constraint_Error with \"Position cursor is out of range\";\n       end if;\n \n-      return (Element => Container.Elements.EA (Position.Index)'Access);\n+      declare\n+         C : Vector renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element =>\n+                         Container.Elements.EA (Position.Index)'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -510,7 +538,20 @@ package body Ada.Containers.Vectors is\n       if Index > Container.Last then\n          raise Constraint_Error with \"Index is out of range\";\n       else\n-         return (Element => Container.Elements.EA (Index)'Access);\n+         declare\n+            C : Vector renames Container'Unrestricted_Access.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            return R : constant Constant_Reference_Type :=\n+                         (Element => Container.Elements.EA (Index)'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end if;\n    end Constant_Reference;\n \n@@ -825,6 +866,22 @@ package body Ada.Containers.Vectors is\n       B := B - 1;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -2601,7 +2658,20 @@ package body Ada.Containers.Vectors is\n          raise Constraint_Error with \"Position cursor is out of range\";\n       end if;\n \n-      return (Element => Container.Elements.EA (Position.Index)'Access);\n+      declare\n+         C : Vector renames Position.Container.all;\n+         B : Natural renames C.Busy;\n+         L : Natural renames C.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element =>\n+                         Container.Elements.EA (Position.Index)'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -2612,7 +2682,20 @@ package body Ada.Containers.Vectors is\n       if Index > Container.Last then\n          raise Constraint_Error with \"Index is out of range\";\n       else\n-         return (Element => Container.Elements.EA (Index)'Access);\n+         declare\n+            C : Vector renames Container'Unrestricted_Access.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            return R : constant Reference_Type :=\n+                         (Element => Container.Elements.EA (Index)'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end if;\n    end Reference;\n "}, {"sha": "81d1a18d06284dd6247b5329336c15b02bbc4a3d", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -158,18 +158,22 @@ package Ada.Containers.Vectors is\n    function Constant_Reference\n      (Container : aliased Vector;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Vector;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Vector;\n       Index     : Index_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Vector;\n       Index     : Index_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Vector; Source : Vector);\n \n@@ -416,8 +420,22 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Vector_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -432,7 +450,10 @@ private\n    for Constant_Reference_Type'Read use Read;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "0e72d69e315f1e5b6db952824e55f3c388c58504", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -252,6 +252,20 @@ package body Ada.Containers.Ordered_Maps is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            T : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames T.Busy;\n+            L : Natural renames T.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -340,7 +354,19 @@ package body Ada.Containers.Ordered_Maps is\n       pragma Assert (Vet (Container.Tree, Position.Node),\n                      \"Position cursor in Constant_Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         T : Tree_Type renames Position.Container.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    function Constant_Reference\n@@ -354,7 +380,20 @@ package body Ada.Containers.Ordered_Maps is\n          raise Constraint_Error with \"key not in map\";\n       end if;\n \n-      return (Element => Node.Element'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -532,6 +571,22 @@ package body Ada.Containers.Ordered_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            T : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames T.Busy;\n+            L : Natural renames T.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1294,7 +1349,19 @@ package body Ada.Containers.Ordered_Maps is\n       pragma Assert (Vet (Container.Tree, Position.Node),\n                      \"Position cursor in function Reference is bad\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         T : Tree_Type renames Position.Container.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control => (Controlled with Position.Container))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    function Reference\n@@ -1308,7 +1375,20 @@ package body Ada.Containers.Ordered_Maps is\n          raise Constraint_Error with \"key not in map\";\n       end if;\n \n-      return (Element => Node.Element'Access);\n+      declare\n+         T : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+         B : Natural renames T.Busy;\n+         L : Natural renames T.Lock;\n+      begin\n+         return R : constant Reference_Type :=\n+                      (Element => Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Reference;\n \n    -------------"}, {"sha": "d9281faccc334f6a74abbee789e5f3c57c1e2d79", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -108,18 +108,22 @@ package Ada.Containers.Ordered_Maps is\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Position  : Cursor) return Reference_Type;\n+   pragma Inline (Reference);\n \n    function Constant_Reference\n      (Container : aliased Map;\n       Key       : Key_Type) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    function Reference\n      (Container : aliased in out Map;\n       Key       : Key_Type) return Reference_Type;\n+   pragma Inline (Reference);\n \n    procedure Assign (Target : in out Map; Source : Map);\n \n@@ -293,8 +297,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Map_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -309,7 +327,10 @@ private\n    for Constant_Reference_Type'Write use Write;\n \n    type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+      (Element : not null access Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "600403b1e4d2ac7df1696cb57875480cf29f6aac", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -285,6 +285,20 @@ package body Ada.Containers.Ordered_Sets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            Tree : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -353,7 +367,20 @@ package body Ada.Containers.Ordered_Sets is\n         (Vet (Container.Tree, Position.Node),\n          \"bad cursor in Constant_Reference\");\n \n-      return (Element => Position.Node.Element'Access);\n+      declare\n+         Tree : Tree_Type renames Position.Container.all.Tree;\n+         B : Natural renames Tree.Busy;\n+         L : Natural renames Tree.Lock;\n+      begin\n+         return R : constant Constant_Reference_Type :=\n+                      (Element => Position.Node.Element'Access,\n+                       Control =>\n+                         (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n+      end;\n    end Constant_Reference;\n \n    --------------\n@@ -554,6 +581,22 @@ package body Ada.Containers.Ordered_Sets is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            Tree : Tree_Type renames Control.Container.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -699,7 +742,20 @@ package body Ada.Containers.Ordered_Sets is\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         return (Element => Node.Element'Access);\n+         declare\n+            Tree : Tree_Type renames Container'Unrestricted_Access.all.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n+         begin\n+            return R : constant Constant_Reference_Type :=\n+                         (Element => Node.Element'Access,\n+                          Control =>\n+                            (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Constant_Reference;\n \n       --------------"}, {"sha": "e28a71bc29991875ad4393d58d0ce3e9524eafd0", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -100,6 +100,7 @@ package Ada.Containers.Ordered_Sets is\n    function Constant_Reference\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n \n    procedure Assign (Target : in out Set; Source : Set);\n \n@@ -359,8 +360,22 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is\n+      new Controlled with record\n+         Container : Set_Access;\n+      end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+      record\n+         Control : Reference_Control_Type;\n+      end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "89af1d975f3fc8947b5923ac4e1ac7d95ce0459a", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -193,6 +193,7 @@ package body Aspects is\n       N_Entry_Declaration                      => True,\n       N_Exception_Declaration                  => True,\n       N_Exception_Renaming_Declaration         => True,\n+      N_Expression_Function                    => True,\n       N_Formal_Abstract_Subprogram_Declaration => True,\n       N_Formal_Concrete_Subprogram_Declaration => True,\n       N_Formal_Object_Declaration              => True,"}, {"sha": "98bd2f3b491db17aa1e64a3f0ad82aa00699e506", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -483,6 +483,13 @@ package body Exp_Util is\n             Utyp := Base_Type (Utyp);\n          end if;\n \n+         --  When dealing with an internally built full view for a type with\n+         --  unknown discriminants, use the original record type.\n+\n+         if Is_Underlying_Record_View (Utyp) then\n+            Utyp := Etype (Utyp);\n+         end if;\n+\n          return TSS (Utyp, TSS_Finalize_Address);\n       end Find_Finalize_Address;\n "}, {"sha": "9b10794e5c9de1c18e8b5704288deeb8d4fe4435", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -355,6 +355,7 @@ Partition-Wide Restrictions\n * No_Task_Allocators::\n * No_Task_Attributes_Package::\n * No_Task_Hierarchy::\n+* No_Task_Termination::\n * No_Tasking::\n * No_Terminate_Alternatives::\n * No_Unchecked_Access::\n@@ -376,7 +377,6 @@ Program Unit Level Restrictions\n * No_Obsolescent_Features::\n * No_Wide_Characters::\n * SPARK::\n-* No_Task_Termination::\n \n The Implementation of Standard I/O\n \n@@ -6993,6 +6993,7 @@ then all compilation units in the partition must obey the restriction).\n * No_Task_Allocators::\n * No_Task_Attributes_Package::\n * No_Task_Hierarchy::\n+* No_Task_Termination::\n * No_Tasking::\n * No_Terminate_Alternatives::\n * No_Unchecked_Access::\n@@ -7541,6 +7542,11 @@ explicit dependencies on the package @code{Ada.Task_Attributes}.\n [RM D.7] All (non-environment) tasks depend\n directly on the environment task of the partition.\n \n+@node No_Task_Termination\n+@unnumberedsubsec No_Task_Termination\n+@findex No_Task_Termination\n+[RM D.7] Tasks which terminate are erroneous.\n+\n @node No_Tasking\n @unnumberedsubsec No_Tasking\n @findex No_Tasking\n@@ -7605,7 +7611,6 @@ other compilation units in the partition.\n * No_Obsolescent_Features::\n * No_Wide_Characters::\n * SPARK::\n-* No_Task_Termination::\n @end menu\n \n @node No_Elaboration_Code\n@@ -7764,11 +7769,6 @@ This restriction can be useful in providing an initial filter for\n code developed using SPARK, or in examining legacy code to see how far\n it is from meeting SPARK restrictions.\n \n-@node No_Task_Termination\n-@unnumberedsubsec No_Task_Termination\n-@findex No_Task_Termination\n-[RM D.7] Tasks which terminate are erroneous.\n-\n @c ------------------------\n @node Implementation Advice\n @chapter Implementation Advice"}, {"sha": "56e64c28390d80678420d68ee8720f1368f441e9", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -772,7 +772,10 @@ package body Ch6 is\n                       (N_Expression_Function, Sloc (Specification_Node));\n                   Set_Specification (Body_Node, Specification_Node);\n                   Set_Expression (Body_Node, P_Expression);\n-                  T_Semicolon;\n+\n+                  --  Expression functions can carry pre/postconditions\n+\n+                  P_Aspect_Specifications (Body_Node);\n                   Pop_Scope_Stack;\n \n                --  Subprogram body case"}, {"sha": "ee45e05473dd52443629be75818cc4c3625dc276", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -532,6 +532,15 @@ package body Restrict is\n       elsif not Restrictions.Set (R) then\n          null;\n \n+      --  Don't complain about No_Obsolescent_Features in an instance, since we\n+      --  will complain on the template, which is much better. Are there other\n+      --  cases like this ??? Do we need a more general mechanism ???\n+\n+      elsif R = No_Obsolescent_Features\n+        and then Instantiation_Location (Sloc (N)) /= No_Location\n+      then\n+         null;\n+\n       --  Here if restriction set, check for violation (either this is a\n       --  Boolean restriction, or a parameter restriction with a value of\n       --  zero and an unknown count, or a parameter restriction with a"}, {"sha": "9098d538fe04168b5883a61d51977062bfdf0fae", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794b9b72402dbb9eb2182b2fd046322ea2614bc8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=794b9b72402dbb9eb2182b2fd046322ea2614bc8", "patch": "@@ -1818,6 +1818,7 @@ package body Sem_Prag is\n                  (\"aspect % requires ''Class for null procedure\");\n \n             elsif not Nkind_In (PO, N_Subprogram_Declaration,\n+                                    N_Expression_Function,\n                                     N_Generic_Subprogram_Declaration,\n                                     N_Entry_Declaration)\n             then"}]}