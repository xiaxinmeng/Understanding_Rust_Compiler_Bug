{"sha": "97a78e3396d4b901800f43f1075058f876a86058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhNzhlMzM5NmQ0YjkwMTgwMGY0M2YxMDc1MDU4Zjg3NmE4NjA1OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-15T19:35:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-15T19:35:44Z"}, "message": "compiler: reclaim memory of escape analysis Nodes\n    \n    Reclaim the memory of escape analysis Nodes before kicking off\n    the backend, as they are not needed in get_backend.\n    \n    Reviewed-on: https://go-review.googlesource.com/86243\n\nFrom-SVN: r256707", "tree": {"sha": "38c936ef4e9d04a5974a6eb58e93797839a700a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c936ef4e9d04a5974a6eb58e93797839a700a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97a78e3396d4b901800f43f1075058f876a86058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a78e3396d4b901800f43f1075058f876a86058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a78e3396d4b901800f43f1075058f876a86058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a78e3396d4b901800f43f1075058f876a86058/comments", "author": null, "committer": null, "parents": [{"sha": "7c3bc15e4a2aba3eb43d59624d646bbdbff60a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3bc15e4a2aba3eb43d59624d646bbdbff60a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3bc15e4a2aba3eb43d59624d646bbdbff60a83"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "e948fed73219708e47454b92994f01e88626b45d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=97a78e3396d4b901800f43f1075058f876a86058", "patch": "@@ -1,4 +1,4 @@\n-afac7d7bed07ebe3add1784aaa9547c4d660d0ed\n+ff851e1190923f8612004c6c214a7c202471b0ba\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "01329e10eb13a5a54a436ee6b39b943f190c0be6", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=97a78e3396d4b901800f43f1075058f876a86058", "patch": "@@ -445,6 +445,17 @@ Node::state(Escape_context* context, Named_object* fn)\n   return this->state_;\n }\n \n+Node::~Node()\n+{\n+  if (this->state_ != NULL)\n+    {\n+      if (this->expr() == NULL || this->expr()->var_expression() == NULL)\n+        // Var expression Node is excluded since it shares state with the\n+        // underlying var Node.\n+        delete this->state_;\n+    }\n+}\n+\n int\n Node::encoding()\n {\n@@ -552,6 +563,7 @@ Node::is_sink() const\n std::map<Named_object*, Node*> Node::objects;\n std::map<Expression*, Node*> Node::expressions;\n std::map<Statement*, Node*> Node::statements;\n+std::vector<Node*> Node::indirects;\n \n // Make a object node or return a cached node for this object.\n \n@@ -601,6 +613,7 @@ Node*\n Node::make_indirect_node(Node* child)\n {\n   Node* n = new Node(child);\n+  Node::indirects.push_back(n);\n   return n;\n }\n \n@@ -3335,3 +3348,39 @@ Gogo::tag_function(Escape_context* context, Named_object* fn)\n   Escape_analysis_tag eat(context);\n   eat.tag(fn);\n }\n+\n+// Reclaim memory of escape analysis Nodes.\n+\n+void\n+Gogo::reclaim_escape_nodes()\n+{\n+  Node::reclaim_nodes();\n+}\n+\n+void\n+Node::reclaim_nodes()\n+{\n+  for (std::map<Named_object*, Node*>::iterator p = Node::objects.begin();\n+       p != Node::objects.end();\n+       ++p)\n+    delete p->second;\n+  Node::objects.clear();\n+\n+  for (std::map<Expression*, Node*>::iterator p = Node::expressions.begin();\n+       p != Node::expressions.end();\n+       ++p)\n+    delete p->second;\n+  Node::expressions.clear();\n+\n+  for (std::map<Statement*, Node*>::iterator p = Node::statements.begin();\n+       p != Node::statements.end();\n+       ++p)\n+    delete p->second;\n+  Node::statements.clear();\n+\n+  for (std::vector<Node*>::iterator p = Node::indirects.begin();\n+       p != Node::indirects.end();\n+       ++p)\n+    delete *p;\n+  Node::indirects.clear();\n+}"}, {"sha": "88e23ce204dab1eb8359436af33e1efb3f46a4ce", "filename": "gcc/go/gofrontend/escape.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fescape.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fescape.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.h?ref=97a78e3396d4b901800f43f1075058f876a86058", "patch": "@@ -191,6 +191,8 @@ class Node\n       child_(n)\n   {}\n \n+  ~Node();\n+\n   // Return this node's type.\n   Type*\n   type() const;\n@@ -296,6 +298,10 @@ class Node\n   static int\n   note_inout_flows(int e, int index, Level level);\n \n+  // Reclaim nodes.\n+  static void\n+  reclaim_nodes();\n+\n  private:\n   // The classification of this Node.\n   Node_classification classification_;\n@@ -326,6 +332,10 @@ class Node\n   static std::map<Named_object*, Node*> objects;\n   static std::map<Expression*, Node*> expressions;\n   static std::map<Statement*, Node*> statements;\n+\n+  // Collection of all NODE_INDIRECT Nodes, used for reclaiming memory. This\n+  // is not a cache -- each make_indirect_node will make a fresh Node.\n+  static std::vector<Node*> indirects;\n };\n \n // The amount of bits used for the escapement encoding."}, {"sha": "5f08eea3fe354a3d6d81abb521ed73098bb0e715", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=97a78e3396d4b901800f43f1075058f876a86058", "patch": "@@ -167,6 +167,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Flatten the parse tree.\n   ::gogo->flatten();\n \n+  // Reclaim memory of escape analysis Nodes.\n+  ::gogo->reclaim_escape_nodes();\n+\n   // Dump ast, use filename[0] as the base name\n   ::gogo->dump_ast(filenames[0]);\n }"}, {"sha": "f7f8d602bd169dc262861cb9a4bf7dab0cd70b7a", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a78e3396d4b901800f43f1075058f876a86058/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=97a78e3396d4b901800f43f1075058f876a86058", "patch": "@@ -682,6 +682,10 @@ class Gogo\n   void\n   tag_function(Escape_context*, Named_object*);\n \n+  // Reclaim memory of escape analysis Nodes.\n+  void\n+  reclaim_escape_nodes();\n+\n   // Do all exports.\n   void\n   do_exports();"}]}