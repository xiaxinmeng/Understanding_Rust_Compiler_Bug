{"sha": "9ededfc5d0d49306e9f9a98007374c06ace6fc74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkZWRmYzVkMGQ0OTMwNmU5ZjlhOTgwMDczNzRjMDZhY2U2ZmM3NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-03-31T11:15:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-03-31T11:15:46Z"}, "message": "decl2.c (collect_candidates_for_java_method_aliases): Use DECL_CLASS_SCOPE_P.\n\n2013-03-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl2.c (collect_candidates_for_java_method_aliases): Use\n\tDECL_CLASS_SCOPE_P.\n\t* name-lookup.c (pushtag_1) Use TYPE_FUNCTION_SCOPE_P.\n\t(pushdecl_maybe_friend_1): Use DECL_DECLARES_FUNCTION_P.\n\t* decl.c (duplicate_decls): Likewise.\n\t* parser.c (cp_parser_template_declaration_after_export): Likewise,\n\talso DECL_DECLARES_TYPE_P.\n\t* pt.c (instantiate_class_template_1): Likewise.\n\t* search.c (lookup_field_1): Use DECL_DECLARES_TYPE_P.\n\t(lookup_field_r): Likewise.\n\t(friend_accessible_p): Use DECL_DECLARES_FUNCTION_P.\n\t(lookup_fnfields_slot_nolazy): Likewise.\n\t* semantics.c (finish_member_declaration): Likewise.\n\t* typeck.c (convert_for_initialization): Use TYPE_REFFN_P.\n\nFrom-SVN: r197283", "tree": {"sha": "5ad67559d56d4a15cb8a9a36539b90eadff292d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad67559d56d4a15cb8a9a36539b90eadff292d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ededfc5d0d49306e9f9a98007374c06ace6fc74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ededfc5d0d49306e9f9a98007374c06ace6fc74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ededfc5d0d49306e9f9a98007374c06ace6fc74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ededfc5d0d49306e9f9a98007374c06ace6fc74/comments", "author": null, "committer": null, "parents": [{"sha": "cbde6c0f8a7e66e7ab07fd5514350237af0b27da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbde6c0f8a7e66e7ab07fd5514350237af0b27da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbde6c0f8a7e66e7ab07fd5514350237af0b27da"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "df25c097b963abac459939b54259db98e519d032", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -1,3 +1,20 @@\n+2013-03-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl2.c (collect_candidates_for_java_method_aliases): Use\n+\tDECL_CLASS_SCOPE_P.\n+\t* name-lookup.c (pushtag_1) Use TYPE_FUNCTION_SCOPE_P.\n+\t(pushdecl_maybe_friend_1): Use DECL_DECLARES_FUNCTION_P.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t* parser.c (cp_parser_template_declaration_after_export): Likewise,\n+\talso DECL_DECLARES_TYPE_P.\n+\t* pt.c (instantiate_class_template_1): Likewise.\n+\t* search.c (lookup_field_1): Use DECL_DECLARES_TYPE_P.\n+\t(lookup_field_r): Likewise.\n+\t(friend_accessible_p): Use DECL_DECLARES_FUNCTION_P.\n+\t(lookup_fnfields_slot_nolazy): Likewise.\n+\t* semantics.c (finish_member_declaration): Likewise.\n+\t* typeck.c (convert_for_initialization): Use TYPE_REFFN_P.\n+\n 2013-03-29  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* pt.c (template_parms_to_args): Fix typo in comment."}, {"sha": "98d30dd99ebd64525d7a0d70b0575ea49755d261", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -2063,8 +2063,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n \t}\n       /* Only functions have these fields.  */\n-      if (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t  || DECL_FUNCTION_TEMPLATE_P (newdecl))\n+      if (DECL_DECLARES_FUNCTION_P (newdecl))\n \t{\n \t  DECL_NONCONVERTING_P (newdecl) = DECL_NONCONVERTING_P (olddecl);\n \t  olddecl_friend = DECL_FRIEND_P (olddecl);"}, {"sha": "2b2171039d78e2b02be5159d21e9d84805605d54", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -3665,8 +3665,7 @@ collect_candidates_for_java_method_aliases (void)\n     {\n       tree fndecl = node->symbol.decl;\n \n-      if (DECL_CONTEXT (fndecl)\n-\t  && TYPE_P (DECL_CONTEXT (fndecl))\n+      if (DECL_CLASS_SCOPE_P (fndecl)\n \t  && TYPE_FOR_JAVA (DECL_CONTEXT (fndecl))\n \t  && TARGET_USE_LOCAL_THUNK_ALIAS_P (fndecl))\n \t{"}, {"sha": "e09eca174b6c6dc3de62b3b3e086536eaf548f83", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -887,7 +887,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t    add_decl_to_level (x, NAMESPACE_LEVEL (CP_DECL_CONTEXT (t)));\n \t}\n \n-      if (TREE_CODE (t) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (t))\n+      if (DECL_DECLARES_FUNCTION_P (t))\n \tcheck_default_args (t);\n \n       if (t != x || DECL_FUNCTION_TEMPLATE_P (t))\n@@ -5823,8 +5823,7 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \t convenient way.  (It's otherwise tricky to find a member\n \t function definition it's only pointed to from within a local\n \t class.)  */\n-      if (TYPE_CONTEXT (type)\n-\t  && TREE_CODE (TYPE_CONTEXT (type)) == FUNCTION_DECL)\n+      if (TYPE_FUNCTION_SCOPE_P (type))\n \t{\n \t  if (processing_template_decl)\n \t    {"}, {"sha": "44ef9adf02e29eb268eff69a4be28da380364072", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -21983,8 +21983,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \t  decl = finish_member_template_decl (decl);\n \t}\n       else if (friend_p && decl\n-\t       && (TREE_CODE (decl) == TYPE_DECL\n-\t\t   || DECL_TYPE_TEMPLATE_P (decl)))\n+\t       && DECL_DECLARES_TYPE_P (decl))\n \tmake_friend_class (current_class_type, TREE_TYPE (decl),\n \t\t\t   /*complain=*/true);\n     }\n@@ -21998,7 +21997,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \n   /* Check the template arguments for a literal operator template.  */\n   if (decl\n-      && (TREE_CODE (decl) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (decl))\n+      && DECL_DECLARES_FUNCTION_P (decl)\n       && UDLIT_OPER_P (DECL_NAME (decl)))\n     {\n       bool ok = true;\n@@ -22034,8 +22033,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n      (Even though there is no definition, there might be default\n      arguments that need handling.)  */\n   if (member_p && decl\n-      && (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || DECL_FUNCTION_TEMPLATE_P (decl)))\n+      && DECL_DECLARES_FUNCTION_P (decl))\n     vec_safe_push (unparsed_funs_with_definitions, decl);\n }\n "}, {"sha": "68da2c80133d3535bd5f34dfd32622136041ced6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -8786,8 +8786,7 @@ instantiate_class_template_1 (tree type)\n \t\t  pushtag (name, newtag, /*tag_scope=*/ts_current);\n \t\t}\n \t    }\n-\t  else if (TREE_CODE (t) == FUNCTION_DECL\n-\t\t   || DECL_FUNCTION_TEMPLATE_P (t))\n+\t  else if (DECL_DECLARES_FUNCTION_P (t))\n \t    {\n \t      /* Build new TYPE_METHODS.  */\n \t      tree r;"}, {"sha": "b64398fac6d0c890eeb5906e186a96e0f2ba1ffe", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -424,8 +424,7 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \t\t  do\n \t\t    field = fields[i--];\n \t\t  while (i >= lo && DECL_NAME (fields[i]) == name);\n-\t\t  if (TREE_CODE (field) != TYPE_DECL\n-\t\t      && !DECL_TYPE_TEMPLATE_P (field))\n+\t\t  if (!DECL_DECLARES_TYPE_P (field))\n \t\t    field = NULL_TREE;\n \t\t}\n \t      else\n@@ -478,9 +477,7 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \t}\n \n       if (DECL_NAME (decl) == name\n-\t  && (!want_type\n-\t      || TREE_CODE (decl) == TYPE_DECL\n-\t      || DECL_TYPE_TEMPLATE_P (decl)))\n+\t  && (!want_type || DECL_DECLARES_TYPE_P (decl)))\n \treturn decl;\n     }\n   /* Not found.  */\n@@ -777,8 +774,7 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n   if (!scope)\n     return 0;\n \n-  if (TREE_CODE (scope) == FUNCTION_DECL\n-      || DECL_FUNCTION_TEMPLATE_P (scope))\n+  if (DECL_DECLARES_FUNCTION_P (scope))\n     befriending_classes = DECL_BEFRIENDING_CLASSES (scope);\n   else if (TYPE_P (scope))\n     befriending_classes = CLASSTYPE_BEFRIENDING_CLASSES (scope);\n@@ -796,8 +792,7 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n       if (protected_accessible_p (decl, t, binfo))\n \treturn 1;\n \n-  if (TREE_CODE (scope) == FUNCTION_DECL\n-      || DECL_FUNCTION_TEMPLATE_P (scope))\n+  if (DECL_DECLARES_FUNCTION_P (scope))\n     {\n       /* Perhaps this SCOPE is a member of a class which is a\n \t friend.  */\n@@ -1059,8 +1054,7 @@ lookup_field_r (tree binfo, void *data)\n \n   /* If we're looking up a type (as with an elaborated type specifier)\n      we ignore all non-types we find.  */\n-  if (lfi->want_type && TREE_CODE (nval) != TYPE_DECL\n-      && !DECL_TYPE_TEMPLATE_P (nval))\n+  if (lfi->want_type && !DECL_DECLARES_TYPE_P (nval))\n     {\n       if (lfi->name == TYPE_IDENTIFIER (type))\n \t{\n@@ -1509,8 +1503,7 @@ lookup_fnfields_slot_nolazy (tree type, tree name)\n int\n class_method_index_for_fn (tree class_type, tree function)\n {\n-  gcc_assert (TREE_CODE (function) == FUNCTION_DECL\n-\t      || DECL_FUNCTION_TEMPLATE_P (function));\n+  gcc_assert (DECL_DECLARES_FUNCTION_P (function));\n \n   return lookup_fnfields_1 (class_type,\n \t\t\t    DECL_CONSTRUCTOR_P (function) ? ctor_identifier :"}, {"sha": "281ba75949aef6940a4b3b8c4cf28c87c35a62fb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -2741,8 +2741,7 @@ finish_member_declaration (tree decl)\n   /* Put functions on the TYPE_METHODS list and everything else on the\n      TYPE_FIELDS list.  Note that these are built up in reverse order.\n      We reverse them (to obtain declaration order) in finish_struct.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      || DECL_FUNCTION_TEMPLATE_P (decl))\n+  if (DECL_DECLARES_FUNCTION_P (decl))\n     {\n       /* We also need to add this function to the\n \t CLASSTYPE_METHOD_VEC.  */"}, {"sha": "ae9267509b649555fd0b63a79aedc8897696a364", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ededfc5d0d49306e9f9a98007374c06ace6fc74/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9ededfc5d0d49306e9f9a98007374c06ace6fc74", "patch": "@@ -7963,8 +7963,7 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n        && (TREE_CODE (type) != REFERENCE_TYPE\n \t   || TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n       || (TREE_CODE (TREE_TYPE (rhs)) == FUNCTION_TYPE\n-\t  && (TREE_CODE (type) != REFERENCE_TYPE\n-\t      || TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE))\n+\t  && !TYPE_REFFN_P (type))\n       || TREE_CODE (TREE_TYPE (rhs)) == METHOD_TYPE)\n     rhs = decay_conversion (rhs, complain);\n "}]}