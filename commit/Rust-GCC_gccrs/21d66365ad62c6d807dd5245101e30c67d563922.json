{"sha": "21d66365ad62c6d807dd5245101e30c67d563922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkNjYzNjVhZDYyYzZkODA3ZGQ1MjQ1MTAxZTMwYzY3ZDU2MzkyMg==", "commit": {"author": {"name": "Joffrey Huguet", "email": "huguet@adacore.com", "date": "2020-10-09T09:48:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-26T08:39:41Z"}, "message": "[Ada] Add contracts to Ada.Strings.Maps\n\ngcc/ada/\n\n\t* libgnat/a-strmap.ads: Add preconditions and postconditions to\n\tall subprograms.", "tree": {"sha": "4e1e8cbeaa5e699cb9deac3851a612abf0259c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1e8cbeaa5e699cb9deac3851a612abf0259c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d66365ad62c6d807dd5245101e30c67d563922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d66365ad62c6d807dd5245101e30c67d563922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d66365ad62c6d807dd5245101e30c67d563922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d66365ad62c6d807dd5245101e30c67d563922/comments", "author": {"login": "joffreyhuguet", "id": 36951399, "node_id": "MDQ6VXNlcjM2OTUxMzk5", "avatar_url": "https://avatars.githubusercontent.com/u/36951399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joffreyhuguet", "html_url": "https://github.com/joffreyhuguet", "followers_url": "https://api.github.com/users/joffreyhuguet/followers", "following_url": "https://api.github.com/users/joffreyhuguet/following{/other_user}", "gists_url": "https://api.github.com/users/joffreyhuguet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joffreyhuguet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joffreyhuguet/subscriptions", "organizations_url": "https://api.github.com/users/joffreyhuguet/orgs", "repos_url": "https://api.github.com/users/joffreyhuguet/repos", "events_url": "https://api.github.com/users/joffreyhuguet/events{/privacy}", "received_events_url": "https://api.github.com/users/joffreyhuguet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd6aab195175ca58b58e05d23acfd42c378f51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd6aab195175ca58b58e05d23acfd42c378f51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd6aab195175ca58b58e05d23acfd42c378f51b"}], "stats": {"total": 179, "additions": 158, "deletions": 21}, "files": [{"sha": "c922f4e178097eacd47b005608bc9dc004adbddc", "filename": "gcc/ada/libgnat/a-strmap.ads", "status": "modified", "additions": 158, "deletions": 21, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d66365ad62c6d807dd5245101e30c67d563922/gcc%2Fada%2Flibgnat%2Fa-strmap.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d66365ad62c6d807dd5245101e30c67d563922/gcc%2Fada%2Flibgnat%2Fa-strmap.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strmap.ads?ref=21d66365ad62c6d807dd5245101e30c67d563922", "patch": "@@ -33,6 +33,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore.\n+\n+pragma Assertion_Policy (Pre => Ignore);\n+\n with Ada.Characters.Latin_1;\n \n package Ada.Strings.Maps is\n@@ -61,44 +67,140 @@ package Ada.Strings.Maps is\n \n    type Character_Ranges is array (Positive range <>) of Character_Range;\n \n-   function To_Set    (Ranges : Character_Ranges) return Character_Set;\n-\n-   function To_Set    (Span   : Character_Range)  return Character_Set;\n-\n-   function To_Ranges (Set    : Character_Set)    return Character_Ranges;\n+   function To_Set    (Ranges : Character_Ranges) return Character_Set with\n+     Post =>\n+       (if Ranges'Length = 0 then To_Set'Result = Null_Set)\n+          and then\n+       (for all Char in Character =>\n+          (if Is_In (Char, To_Set'Result)\n+           then (for some Span of Ranges => Char in Span.Low .. Span.High)))\n+          and then\n+       (for all Span of Ranges =>\n+          (for all Char in Span.Low .. Span.High =>\n+             Is_In (Char, To_Set'Result)));\n+\n+   function To_Set    (Span   : Character_Range)  return Character_Set with\n+     Post =>\n+       (if Span.High < Span.Low then To_Set'Result = Null_Set)\n+          and then\n+       (for all Char in Character =>\n+          (if Is_In (Char, To_Set'Result) then Char in Span.Low .. Span.High))\n+          and then\n+       (for all Char in Span.Low .. Span.High => Is_In (Char, To_Set'Result));\n+\n+   function To_Ranges (Set    : Character_Set)    return Character_Ranges with\n+     Post =>\n+       (if Set = Null_Set then To_Ranges'Result'Length = 0)\n+          and then\n+       (for all Char in Character =>\n+          (if Is_In (Char, Set)\n+           then\n+             (for some Span of To_Ranges'Result =>\n+                Char in Span.Low .. Span.High)))\n+          and then\n+       (for all Span of To_Ranges'Result =>\n+          (for all Char in Span.Low .. Span.High => Is_In (Char, Set)));\n \n    ----------------------------------\n    -- Operations on Character Sets --\n    ----------------------------------\n \n-   function \"=\"   (Left, Right : Character_Set) return Boolean;\n-\n-   function \"not\" (Right       : Character_Set) return Character_Set;\n-   function \"and\" (Left, Right : Character_Set) return Character_Set;\n-   function \"or\"  (Left, Right : Character_Set) return Character_Set;\n-   function \"xor\" (Left, Right : Character_Set) return Character_Set;\n-   function \"-\"   (Left, Right : Character_Set) return Character_Set;\n+   function \"=\"   (Left, Right : Character_Set) return Boolean with\n+     Post =>\n+       \"=\"'Result\n+         =\n+       (for all Char in Character =>\n+          (Is_In (Char, Left) = Is_In (Char, Right)));\n+\n+   function \"not\" (Right       : Character_Set) return Character_Set with\n+     Post =>\n+       (for all Char in Character =>\n+          (Is_In (Char, \"not\"'Result)\n+             =\n+           not Is_In (Char, Right)));\n+\n+   function \"and\" (Left, Right : Character_Set) return Character_Set with\n+     Post =>\n+       (for all Char in Character =>\n+          (Is_In (Char, \"and\"'Result)\n+             =\n+           (Is_In (Char, Left) and Is_In (Char, Right))));\n+\n+   function \"or\"  (Left, Right : Character_Set) return Character_Set with\n+     Post =>\n+       (for all Char in Character =>\n+          (Is_In (Char, \"or\"'Result)\n+             =\n+           (Is_In (Char, Left) or Is_In (Char, Right))));\n+\n+   function \"xor\" (Left, Right : Character_Set) return Character_Set with\n+     Post =>\n+       (for all Char in Character =>\n+          (Is_In (Char, \"xor\"'Result)\n+             =\n+           (Is_In (Char, Left) xor Is_In (Char, Right))));\n+\n+   function \"-\"   (Left, Right : Character_Set) return Character_Set with\n+     Post =>\n+       (for all Char in Character =>\n+          (Is_In (Char, \"-\"'Result)\n+             =\n+           (Is_In (Char, Left) and not Is_In (Char, Right))));\n \n    function Is_In\n      (Element : Character;\n       Set     : Character_Set) return Boolean;\n \n    function Is_Subset\n      (Elements : Character_Set;\n-      Set      : Character_Set) return     Boolean;\n+      Set      : Character_Set) return Boolean\n+   with\n+     Post =>\n+         Is_Subset'Result\n+           =\n+         (for all Char in Character =>\n+            (if Is_In (Char, Elements) then Is_In (Char, Set)));\n \n    function \"<=\"\n      (Left  : Character_Set;\n-      Right : Character_Set) return  Boolean\n+      Right : Character_Set) return Boolean\n    renames Is_Subset;\n \n    subtype Character_Sequence is String;\n    --  Alternative representation for a set of character values\n \n-   function To_Set (Sequence  : Character_Sequence) return Character_Set;\n-   function To_Set (Singleton : Character)          return Character_Set;\n-\n-   function To_Sequence (Set : Character_Set) return Character_Sequence;\n+   function To_Set (Sequence  : Character_Sequence) return Character_Set with\n+     Post =>\n+       (if Sequence'Length = 0 then To_Set'Result = Null_Set)\n+          and then\n+       (for all Char in Character =>\n+          (if Is_In (Char, To_Set'Result)\n+           then (for some X of Sequence => Char = X)))\n+          and then\n+       (for all Char of Sequence => Is_In (Char, To_Set'Result));\n+\n+   function To_Set (Singleton : Character)          return Character_Set with\n+     Post =>\n+       Is_In (Singleton, To_Set'Result)\n+         and then\n+       (for all Char in Character =>\n+          (if Char /= Singleton\n+           then not Is_In (Char, To_Set'Result)));\n+\n+   function To_Sequence (Set : Character_Set) return Character_Sequence with\n+     Post =>\n+       (if Set = Null_Set then To_Sequence'Result'Length = 0)\n+          and then\n+       (for all Char in Character =>\n+          (if Is_In (Char, Set)\n+           then (for some X of To_Sequence'Result => Char = X)))\n+          and then\n+       (for all Char of To_Sequence'Result => Is_In (Char, Set))\n+          and then\n+       (for all J in To_Sequence'Result'Range =>\n+          (for all K in To_Sequence'Result'Range =>\n+             (if J /= K\n+              then To_Sequence'Result (J) /= To_Sequence'Result (K))));\n \n    ------------------------------------\n    -- Character Mapping Declarations --\n@@ -119,13 +221,48 @@ package Ada.Strings.Maps is\n    ----------------------------\n \n    function To_Mapping\n-     (From, To : Character_Sequence) return Character_Mapping;\n+     (From, To : Character_Sequence) return Character_Mapping\n+   with\n+     Pre  =>\n+       From'Length = To'Length\n+         and then\n+       (for all J in From'Range =>\n+          (for all K in From'Range =>\n+             (if J /= K then From (J) /= From (K)))),\n+     Post =>\n+       (if From = To then To_Mapping'Result = Identity)\n+          and then\n+       (for all Char in Character =>\n+          ((for all J in From'Range =>\n+             (if From (J) = Char\n+              then Value (To_Mapping'Result, Char)\n+                   = To (J - From'First + To'First)))\n+             and then\n+           (if (for all X of From => Char /= X)\n+            then Value (To_Mapping'Result, Char) = Char)));\n \n    function To_Domain\n-     (Map : Character_Mapping) return Character_Sequence;\n+     (Map : Character_Mapping) return Character_Sequence with\n+     Post =>\n+       (if Map = Identity then To_Domain'Result'Length = 0)\n+          and then\n+       To_Domain'Result'First = 1\n+          and then\n+       (for all Char in Character =>\n+          (if (for all X of To_Domain'Result => X /= Char)\n+           then Value (Map, Char) = Char))\n+          and then\n+       (for all Char of To_Domain'Result => Value (Map, Char) /= Char);\n \n    function To_Range\n-     (Map : Character_Mapping) return Character_Sequence;\n+     (Map : Character_Mapping) return Character_Sequence with\n+     Post =>\n+       To_Range'Result'First = 1\n+         and then\n+       To_Range'Result'Last = To_Domain (Map)'Last\n+         and then\n+       (for all J in To_Range'Result'Range =>\n+          To_Range'Result (J) = Value (Map, To_Domain (Map) (J)));\n \n    type Character_Mapping_Function is\n       access function (From : Character) return Character;"}]}