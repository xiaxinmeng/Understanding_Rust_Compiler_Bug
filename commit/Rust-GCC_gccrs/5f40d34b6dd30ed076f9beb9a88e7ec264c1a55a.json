{"sha": "5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "node_id": "C_kwDOANBUbNoAKDVmNDBkMzRiNmRkMzBlZDA3NmY5YmViOWE4OGU3ZWMyNjRjMWE1NWE", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-16T20:51:11Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-20T15:11:22Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Reduce performance impact on std::erase_if\n\nBypass the _GLIBCXX_DEBUG additional checks in std::__detail::__erase_node_if used\nby all implementations of std::erase_if for node based containers.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/erase_if.h (__erase_nodes_if): Add _UnsafeContainer template\n\tparameter. Use it to get iterators to work with.\n\t* include/debug/macros.h (__glibcxx_check_erase2): New.\n\t* include/debug/map.h (map<>::erase(_Base_const_iterator)): New.\n\t(map<>::erase(const_iterator)): Use latter.\n\t* include/debug/multimap.h (multimap<>::erase(_Base_const_iterator)): New.\n\t(multimap<>::erase(const_iterator)): Use latter.\n\t* include/debug/multiset.h (multiset<>::erase(_Base_const_iterator)): New.\n\t(multiset<>::erase(const_iterator)): Use latter.\n\t* include/debug/set.h (set<>::erase(_Base_const_iterator)): New.\n\t(set<>::erase(const_iterator)): Use latter.\n\t* include/debug/unordered_map (unordered_map<>::erase(_Base_const_iterator)): New.\n\t(unordered_multimap<>::erase(const_iterator)): New.\n\t* include/debug/unordered_set (unordered_set<>::erase(_Base_const_iterator)): New.\n\t(unordered_multiset<>::erase(const_iterator)): New.\n\t* include/experimental/map (erase_if): Adapt.\n\t* include/experimental/set (erase_if): Adapt.\n\t* include/experimental/unordered_map (erase_if): Adapt.\n\t* include/experimental/unordered_set (erase_if): Adapt.\n\t* include/std/map (erase_if): Adapt.\n\t* include/std/set (erase_if): Adapt.\n\t* include/std/unordered_map (erase_if): Adapt.\n\t* include/std/unordered_set (erase_if): Adapt.", "tree": {"sha": "f4359d8c697c5d3c1d1faf66a87891ccbac03fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4359d8c697c5d3c1d1faf66a87891ccbac03fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/comments", "author": null, "committer": null, "parents": [{"sha": "74faa9834a9ad208e34f67b08c854c20b0fcfe92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74faa9834a9ad208e34f67b08c854c20b0fcfe92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74faa9834a9ad208e34f67b08c854c20b0fcfe92"}], "stats": {"total": 214, "additions": 170, "deletions": 44}, "files": [{"sha": "61f88e3cca302a54f808855f61bea5d9763bde0a", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -46,12 +46,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace __detail\n   {\n-    template<typename _Container, typename _Predicate>\n+    template<typename _Container, typename _UnsafeContainer,\n+\t     typename _Predicate>\n       typename _Container::size_type\n-      __erase_nodes_if(_Container& __cont, _Predicate __pred)\n+      __erase_nodes_if(_Container& __cont, const _UnsafeContainer& __ucont,\n+\t\t       _Predicate __pred)\n       {\n \ttypename _Container::size_type __num = 0;\n-\tfor (auto __iter = __cont.begin(), __last = __cont.end();\n+\tfor (auto __iter = __ucont.begin(), __last = __ucont.end();\n \t     __iter != __last;)\n \t  {\n \t    if (__pred(*__iter))"}, {"sha": "0183d2a8223f9a83a0cbe36549be0d628a571951", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -211,14 +211,22 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First,_Last),\\\n */\n #define __glibcxx_check_erase(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_dereferenceable(),\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_erase_bad)\t        \\\n-                      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      _M_message(__gnu_debug::__msg_erase_bad)\t\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_erase_different)    \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n+#if __cplusplus >= 201103L\n+# define __glibcxx_check_erase2(_CPosition)\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(_CPosition != _M_base().cend(),\t\t\t\\\n+\t\t      _M_message(__gnu_debug::__msg_erase_bad)\t\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      ._M_iterator(_CPosition, #_CPosition));\n+#endif\n+\n /** Verify that we can erase the element after the iterator\n  * _Position. We can erase the element if the _Position iterator is\n  * before a dereferenceable one and references this sequence.\n@@ -241,7 +249,7 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_First._M_attached_to(this),\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_erase_different)    \\\n-                      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -284,23 +292,23 @@ _GLIBCXX_DEBUG_VERIFY(!_Last._M_is_before_begin(),\t\t\t\\\n #define __glibcxx_check_subscript(_N)\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_N < this->size(),\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_subscript_oob)\t\\\n-                      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_integer(_N, #_N)\t\t\t\t\\\n \t\t      ._M_integer(this->size(), \"size\"))\n \n // Verify that the bucket _N is less than the container's buckets count.\n #define __glibcxx_check_bucket_index(_N)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_N < this->bucket_count(),\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_bucket_index_oob)\t\\\n-                      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_integer(_N, #_N)\t\t\t\t\\\n \t\t      ._M_integer(this->bucket_count(), \"size\"))\n \n // Verify that the container is nonempty\n #define __glibcxx_check_nonempty()\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_empty)\t        \\\n-                      ._M_sequence(*this, \"this\"))\n+\t\t      _M_message(__gnu_debug::__msg_empty)\t\t\\\n+\t\t      ._M_sequence(*this, \"this\"))\n \n // Verify that a predicate is irreflexive\n #define __glibcxx_check_irreflexive(_First,_Last)\t\t\t\\\n@@ -342,8 +350,8 @@ __glibcxx_check_irreflexive(_First,_Last);\t\t\t\t\\\n  _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n \t\t\t__gnu_debug::__base(_First),\t\t\t\\\n \t\t\t__gnu_debug::__base(_Last)),\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_unsorted)\t        \\\n-                      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      _M_message(__gnu_debug::__msg_unsorted)\t\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n /** Verify that the iterator range [_First, _Last) is sorted by the\n@@ -355,14 +363,14 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n \t\t\t__gnu_debug::__base(_First),\t\t\t\\\n \t\t\t__gnu_debug::__base(_Last), _Pred),\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_unsorted_pred)      \\\n-                      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n \n // Special variant for std::merge, std::includes, std::set_*\n #define __glibcxx_check_sorted_set(_First1,_Last1,_First2)\t\t\\\n __glibcxx_check_valid_range(_First1,_Last1);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(                                                  \\\n+_GLIBCXX_DEBUG_VERIFY(\t\t\t\t\t\t\t\\\n   __gnu_debug::__check_sorted_set(__gnu_debug::__base(_First1),\t\t\\\n \t\t\t\t  __gnu_debug::__base(_Last1), _First2),\\\n   _M_message(__gnu_debug::__msg_unsorted)\t\t\t\t\\\n@@ -371,7 +379,7 @@ _GLIBCXX_DEBUG_VERIFY(                                                  \\\n \n // Likewise with a _Pred.\n #define __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\t\\\n-__glibcxx_check_valid_range(_First1,_Last1);        \t\t\t\\\n+__glibcxx_check_valid_range(_First1,_Last1);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(\t\t\t\t\t\t\t\\\n   __gnu_debug::__check_sorted_set(__gnu_debug::__base(_First1),\t\t\\\n \t\t\t\t  __gnu_debug::__base(_Last1),\t\t\\\n@@ -414,7 +422,7 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred)\t\t\t\t\\\n-                      ._M_string(#_Value))\n+\t\t      ._M_string(#_Value))\n \n /** Verify that the iterator range [_First, _Last) is partitioned\n     w.r.t. the value _Value and predicate _Pred. */\n@@ -427,13 +435,13 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred)\t\t\t\t\\\n-                      ._M_string(#_Value))\n+\t\t      ._M_string(#_Value))\n \n // Verify that the iterator range [_First, _Last) is a heap\n #define __glibcxx_check_heap(_First,_Last)\t\t\t\t\\\n   _GLIBCXX_DEBUG_VERIFY(std::__is_heap(__gnu_debug::__base(_First),\t\\\n \t\t\t\t       __gnu_debug::__base(_Last)),\t\\\n-\t\t      _M_message(__gnu_debug::__msg_not_heap)\t        \\\n+\t\t      _M_message(__gnu_debug::__msg_not_heap)\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -444,15 +452,15 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(\t\t\\\n \t\t\t\t       __gnu_debug::__base(_Last),\t\\\n \t\t\t\t       _Pred),\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_not_heap_pred)      \\\n-                      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n \n // Verify that load factor is positive\n #define __glibcxx_check_max_load_factor(_F)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_F > 0.0f,\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_valid_load_factor)\t\\\n-                      ._M_sequence(*this, \"this\"))\n+\t\t      ._M_sequence(*this, \"this\"))\n \n #define __glibcxx_check_equal_allocs(_This, _Other)\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\"}, {"sha": "f13a25d4701fcf34a09e5254e2f66217dadb5a61", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -480,8 +480,15 @@ namespace __debug\n       erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n-\tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn { _Base::erase(__position.base()), this };\n+\treturn { erase(__position.base()), this };\n+      }\n+\n+      _Base_iterator\n+      erase(_Base_const_iterator __position)\n+      {\n+\t__glibcxx_check_erase2(__position);\n+\tthis->_M_invalidate_if(_Equal(__position));\n+\treturn _Base::erase(__position);\n       }\n \n       _GLIBCXX_ABI_TAG_CXX11"}, {"sha": "b7c2388082b569ea068d17821d8c6bd6371d2d90", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -360,8 +360,15 @@ namespace __debug\n       erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n-\tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn { _Base::erase(__position.base()), this };\n+\treturn { erase(__position.base()), this };\n+      }\n+\n+      _Base_iterator\n+      erase(_Base_const_iterator __position)\n+      {\n+\t__glibcxx_check_erase2(__position);\n+\tthis->_M_invalidate_if(_Equal(__position));\n+\treturn _Base::erase(__position);\n       }\n \n       _GLIBCXX_ABI_TAG_CXX11"}, {"sha": "30e93e4f0387d2ea0ab9c9b9964620aee316f43d", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -332,8 +332,15 @@ namespace __debug\n       erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n-\tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn { _Base::erase(__position.base()), this };\n+\treturn { erase(__position.base()), this };\n+      }\n+\n+      _Base_iterator\n+      erase(_Base_const_iterator __position)\n+      {\n+\t__glibcxx_check_erase2(__position);\n+\tthis->_M_invalidate_if(_Equal(__position));\n+\treturn _Base::erase(__position);\n       }\n #else\n       void"}, {"sha": "0eaabf47d343cffcedd687921a1c05fed6a69785", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -345,8 +345,15 @@ namespace __debug\n       erase(const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n-\tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn { _Base::erase(__position.base()), this };\n+\treturn { erase(__position.base()), this };\n+      }\n+\n+      _Base_iterator\n+      erase(_Base_const_iterator __position)\n+      {\n+\t__glibcxx_check_erase2(__position);\n+\tthis->_M_invalidate_if(_Equal(__position));\n+\treturn _Base::erase(__position);\n       }\n #else\n       void"}, {"sha": "8ccb60c17dbeaf035044b5370ea01baaaf17eaa5", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -679,6 +679,13 @@ namespace __debug\n \treturn { _M_erase(__it.base()), this };\n       }\n \n+      _Base_iterator\n+      erase(_Base_const_iterator __it)\n+      {\n+\t__glibcxx_check_erase2(__it);\n+\treturn _M_erase(__it);\n+      }\n+\n       iterator\n       erase(iterator __it)\n       {\n@@ -1389,6 +1396,13 @@ namespace __debug\n \treturn { _M_erase(__it.base()), this };\n       }\n \n+      _Base_iterator\n+      erase(_Base_const_iterator __it)\n+      {\n+\t__glibcxx_check_erase2(__it);\n+\treturn _M_erase(__it);\n+      }\n+\n       iterator\n       erase(iterator __it)\n       {"}, {"sha": "716635fc20ceb31731cd66d8764c829650d108d7", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -564,6 +564,13 @@ namespace __debug\n \treturn { _M_erase(__it.base()), this };\n       }\n \n+      _Base_iterator\n+      erase(_Base_const_iterator __it)\n+      {\n+\t__glibcxx_check_erase2(__it);\n+\treturn _M_erase(__it);\n+      }\n+\n       iterator\n       erase(iterator __it)\n       {\n@@ -1234,6 +1241,13 @@ namespace __debug\n \treturn { _M_erase(__it.base()), this };\n       }\n \n+      _Base_iterator\n+      erase(_Base_const_iterator __it)\n+      {\n+\t__glibcxx_check_erase2(__it);\n+\treturn _M_erase(__it);\n+      }\n+\n       iterator\n       erase(iterator __it)\n       {"}, {"sha": "133043202322a877051e8e31ec15c0a0693a03ae", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -50,13 +50,21 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Compare = less<_Key>>"}, {"sha": "2a56ede5cf1834b5d673e70602d79282adedf934", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -50,13 +50,19 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Compare = less<_Key>>"}, {"sha": "69f209d83e7cd79c55ab39e3641805baba9206fa", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -51,14 +51,22 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline void\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,"}, {"sha": "fbab7e7ddb583db8fc87b792826a634f6522121b", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -51,14 +51,22 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Hash = hash<_Key>,"}, {"sha": "9278a1b18ce75b2d6c17d4f9750f532f5011969b", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -95,13 +95,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename map<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multimap<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "10178b657852e8be22a0e08ccf53d1dbeb06bb0e", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -91,13 +91,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename set<_Key, _Compare, _Alloc>::size_type\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multiset<_Key, _Compare, _Alloc>::size_type\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "0c8b076a1ebea9a1f836ab6a258aab53246afd7e", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -83,15 +83,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline typename unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>::\n \t\t    size_type\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "3a33f57349983586145580040dff4f4e761951ea", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=5f40d34b6dd30ed076f9beb9a88e7ec264c1a55a", "patch": "@@ -83,14 +83,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_set<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline typename unordered_multiset<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      const _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n+\t__ucont = __cont;\n+      return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}]}