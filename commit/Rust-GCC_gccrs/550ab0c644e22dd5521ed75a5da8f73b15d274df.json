{"sha": "550ab0c644e22dd5521ed75a5da8f73b15d274df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwYWIwYzY0NGUyMmRkNTUyMWVkNzVhNWRhOGY3M2IxNWQyNzRkZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-05-23T18:54:37Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-05-23T18:54:37Z"}, "message": "expr.c (undefined_operand_subword_p): New.\n\n\t* expr.c (undefined_operand_subword_p): New.\n\t(emit_move_multi_word): Do not generate move from undefined bits\n\tof a paradoxical subreg.\n\nFrom-SVN: r114021", "tree": {"sha": "05e8cc0a327ace7c6d12591051e952ef38b0d69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e8cc0a327ace7c6d12591051e952ef38b0d69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/550ab0c644e22dd5521ed75a5da8f73b15d274df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550ab0c644e22dd5521ed75a5da8f73b15d274df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550ab0c644e22dd5521ed75a5da8f73b15d274df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550ab0c644e22dd5521ed75a5da8f73b15d274df/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d7a5205e0d8d6483fa3deee424267624c683bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d7a5205e0d8d6483fa3deee424267624c683bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d7a5205e0d8d6483fa3deee424267624c683bb"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "d7c58a1d3f4a55a35e3ef059b8c71c6071199d3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550ab0c644e22dd5521ed75a5da8f73b15d274df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550ab0c644e22dd5521ed75a5da8f73b15d274df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=550ab0c644e22dd5521ed75a5da8f73b15d274df", "patch": "@@ -1,3 +1,9 @@\n+2006-05-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* expr.c (undefined_operand_subword_p): New.\n+\t(emit_move_multi_word): Do not generate move from undefined bits\n+\tof a paradoxical subreg.\n+\n 2006-05-23  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR rtl-optimization/27736"}, {"sha": "94e8586dc35e68ca34c93bf0fe4afbc148c102ff", "filename": "gcc/expr.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/550ab0c644e22dd5521ed75a5da8f73b15d274df/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/550ab0c644e22dd5521ed75a5da8f73b15d274df/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=550ab0c644e22dd5521ed75a5da8f73b15d274df", "patch": "@@ -3096,6 +3096,38 @@ emit_move_ccmode (enum machine_mode mode, rtx x, rtx y)\n   return ret;\n }\n \n+/* Return true if word I of OP lies entirely in the\n+   undefined bits of a paradoxical subreg.  */\n+\n+static bool\n+undefined_operand_subword_p (rtx op, int i)\n+{\n+  enum machine_mode innermode, innermostmode;\n+  int offset;\n+  if (GET_CODE (op) != SUBREG)\n+    return false;\n+  innermode = GET_MODE (op);\n+  innermostmode = GET_MODE (SUBREG_REG (op));\n+  offset = i * UNITS_PER_WORD + SUBREG_BYTE (op);\n+  /* The SUBREG_BYTE represents offset, as if the value were stored in\n+     memory, except for a paradoxical subreg where we define\n+     SUBREG_BYTE to be 0; undo this exception as in\n+     simplify_subreg.  */\n+  if (SUBREG_BYTE (op) == 0\n+      && GET_MODE_SIZE (innermostmode) < GET_MODE_SIZE (innermode))\n+    {\n+      int difference = (GET_MODE_SIZE (innermostmode) - GET_MODE_SIZE (innermode));\n+      if (WORDS_BIG_ENDIAN)\n+\toffset += (difference / UNITS_PER_WORD) * UNITS_PER_WORD;\n+      if (BYTES_BIG_ENDIAN)\n+\toffset += difference % UNITS_PER_WORD;\n+    }\n+  if (offset >= GET_MODE_SIZE (innermostmode)\n+      || offset <= -GET_MODE_SIZE (word_mode))\n+    return true;\n+  return false;\n+}\n+\n /* A subroutine of emit_move_insn_1.  Generate a move from Y into X.\n    MODE is any multi-word or full-word mode that lacks a move_insn\n    pattern.  Note that you will get better code if you define such\n@@ -3133,7 +3165,14 @@ emit_move_multi_word (enum machine_mode mode, rtx x, rtx y)\n        i++)\n     {\n       rtx xpart = operand_subword (x, i, 1, mode);\n-      rtx ypart = operand_subword (y, i, 1, mode);\n+      rtx ypart;\n+\n+      /* Do not generate code for a move if it would come entirely\n+\t from the undefined bits of a paradoxical subreg.  */\n+      if (undefined_operand_subword_p (y, i))\n+\tcontinue;\n+\n+      ypart = operand_subword (y, i, 1, mode);\n \n       /* If we can't get a part of Y, put Y into memory if it is a\n \t constant.  Otherwise, force it into a register.  Then we must"}]}