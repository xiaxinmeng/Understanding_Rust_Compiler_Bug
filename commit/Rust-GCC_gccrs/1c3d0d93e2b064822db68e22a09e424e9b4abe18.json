{"sha": "1c3d0d93e2b064822db68e22a09e424e9b4abe18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzZDBkOTNlMmIwNjQ4MjJkYjY4ZTIyYTA5ZTQyNGU5YjRhYmUxOA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2007-08-22T15:07:10Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2007-08-22T15:07:10Z"}, "message": "target.h (struct gcc_target.sched: dfa_pre_advance_cycle, [...]): New scheduler hooks.\n\n\t* target.h (struct gcc_target.sched: dfa_pre_advance_cycle,\n\tdfa_post_advance_cycle): New scheduler hooks.\n\t* target-def.h (TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE,\n\tTARGET_SCHED_DFA_POST_ADVANCE_CYCLE): New macros to initialize\n\tnew hooks.\n\t(TARGET_SCHED): Use them.\n\t* doc/tm.texi (TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE,\n\tTARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Document new hooks.\n\t* haifa-sched.c (advance_one_cycle): Invoke new hooks.\n\n\t* genautomata.c (insn_has_dfa_reservation_p): New DFA interface\n\tfunction to facilitate debugging.\n\t(INSN_HAS_DFA_RESERVATION_P_FUNC_NAME): New macro.\n\t(output_insn_has_dfa_reservation_p): New static function to output\n\tinsn_has_dfa_reservation_p ().\n\t(write_automata): Use it.\n\t* genattr.c (main): Output declaration for\n\tinsn_has_dfa_reservation_p ().\n\nFrom-SVN: r127707", "tree": {"sha": "04fd8eda25f1831c163b4516b1d3c64f6b57fc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04fd8eda25f1831c163b4516b1d3c64f6b57fc22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c3d0d93e2b064822db68e22a09e424e9b4abe18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3d0d93e2b064822db68e22a09e424e9b4abe18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3d0d93e2b064822db68e22a09e424e9b4abe18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3d0d93e2b064822db68e22a09e424e9b4abe18/comments", "author": null, "committer": null, "parents": [{"sha": "f37dc59727f9ef6704c2063e2eef017ae3517cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37dc59727f9ef6704c2063e2eef017ae3517cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37dc59727f9ef6704c2063e2eef017ae3517cc6"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "d63047c74ba9cf68b0480d2112549660efc8b3e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -1,3 +1,24 @@\n+2007-08-22  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* target.h (struct gcc_target.sched: dfa_pre_advance_cycle,\n+\tdfa_post_advance_cycle): New scheduler hooks.\n+\t* target-def.h (TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE,\n+\tTARGET_SCHED_DFA_POST_ADVANCE_CYCLE): New macros to initialize\n+\tnew hooks.\n+\t(TARGET_SCHED): Use them.\n+\t* doc/tm.texi (TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE,\n+\tTARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Document new hooks.\n+\t* haifa-sched.c (advance_one_cycle): Invoke new hooks.\n+\n+\t* genautomata.c (insn_has_dfa_reservation_p): New DFA interface\n+\tfunction to facilitate debugging.\n+\t(INSN_HAS_DFA_RESERVATION_P_FUNC_NAME): New macro.\n+\t(output_insn_has_dfa_reservation_p): New static function to output\n+\tinsn_has_dfa_reservation_p ().\n+\t(write_automata): Use it.\n+\t* genattr.c (main): Output declaration for\n+\tinsn_has_dfa_reservation_p ().\n+\n 2007-08-22  Christian Bruel  <christian.bruel@st.com>\t\n             Richard Guenther <rguenther@suse.de>\n \t"}, {"sha": "0ec10c5949dd77c6a04dac2a67ab0d35520e0b35", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -6180,6 +6180,20 @@ The hook is analogous to @samp{TARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN} but\n used to initialize data used by the previous hook.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_SCHED_DFA_PRE_CYCLE_ADVANCE (void)\n+The hook to notify target that the current simulated cycle is about to finish.\n+The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\n+to change the state in more complicated situations - e.g. when advancing\n+state on a single insn is not enough.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_SCHED_DFA_POST_CYCLE_ADVANCE (void)\n+The hook to notify target that new simulated cycle has just started.\n+The hook is analogous to @samp{TARGET_SCHED_DFA_POST_CYCLE_INSN} but used\n+to change the state in more complicated situations - e.g. when advancing\n+state on a single insn is not enough.\n+@end deftypefn\n+\n @deftypefn {Target Hook} int TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD (void)\n This hook controls better choosing an insn from the ready insn queue\n for the @acronym{DFA}-based insn scheduler.  Usually the scheduler"}, {"sha": "8ff3cd383246b886414a0ee751bd4bcae7e6aa97", "filename": "gcc/genattr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -244,6 +244,9 @@ main (int argc, char **argv)\n       printf (\"   DFA state.  */\\n\");\n       printf (\"extern int cpu_unit_reservation_p (state_t, int);\\n\");\n       printf (\"#endif\\n\\n\");\n+      printf (\"/* The following function returns true if insn\\n\");\n+      printf (\"   has a dfa reservation.  */\\n\");\n+      printf (\"extern bool insn_has_dfa_reservation_p (rtx);\\n\\n\");\n       printf (\"/* Clean insn code cache.  It should be called if there\\n\");\n       printf (\"   is a chance that condition value in a\\n\");\n       printf (\"   define_insn_reservation will be changed after\\n\");"}, {"sha": "96737bcf6544d2ff7743ac9d26f573fa4fba77fb", "filename": "gcc/genautomata.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -6859,6 +6859,8 @@ output_reserved_units_table_name (FILE *f, automaton_t automaton)\n \n #define CPU_UNIT_RESERVATION_P_FUNC_NAME \"cpu_unit_reservation_p\"\n \n+#define INSN_HAS_DFA_RESERVATION_P_FUNC_NAME \"insn_has_dfa_reservation_p\"\n+\n #define DFA_CLEAN_INSN_CACHE_FUNC_NAME  \"dfa_clean_insn_cache\"\n \n #define DFA_CLEAR_SINGLE_INSN_CACHE_FUNC_NAME \"dfa_clear_single_insn_cache\"\n@@ -8346,6 +8348,42 @@ output_cpu_unit_reservation_p (void)\n   fprintf (output_file, \"  return 0;\\n}\\n\\n\");\n }\n \n+/* The following function outputs a function to check if insn\n+   has a dfa reservation.  */\n+static void\n+output_insn_has_dfa_reservation_p (void)\n+{\n+  fprintf (output_file,\n+\t   \"bool\\n%s (rtx %s ATTRIBUTE_UNUSED)\\n{\\n\",\n+           INSN_HAS_DFA_RESERVATION_P_FUNC_NAME,\n+           INSN_PARAMETER_NAME);\n+\n+  if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n+    {\n+      fprintf (output_file, \"  return false;\\n}\\n\\n\");\n+      return;\n+    }\n+\n+  fprintf (output_file, \"  int %s;\\n\\n\", INTERNAL_INSN_CODE_NAME);\n+\n+  fprintf (output_file, \"  if (%s == 0)\\n    %s = %s;\\n\",\n+\t   INSN_PARAMETER_NAME,\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n+  fprintf (output_file, \"  else\\n\\\n+    {\\n\\\n+      %s = %s (%s);\\n\\\n+      if (%s > %s)\\n\\\n+        %s = %s;\\n\\\n+    }\\n\\n\",\n+\t   INTERNAL_INSN_CODE_NAME, DFA_INSN_CODE_FUNC_NAME,\n+\t       INSN_PARAMETER_NAME,\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME,\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n+\n+  fprintf (output_file, \"  return %s != %s;\\n}\\n\\n\",\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n+}\n+\n /* The function outputs PHR interface functions `dfa_clean_insn_cache'\n    and 'dfa_clear_single_insn_cache'.  */\n static void\n@@ -9138,6 +9176,7 @@ write_automata (void)\n   fprintf (output_file, \"\\n#if %s\\n\\n\", CPU_UNITS_QUERY_MACRO_NAME);\n   output_get_cpu_unit_code_func ();\n   output_cpu_unit_reservation_p ();\n+  output_insn_has_dfa_reservation_p ();\n   fprintf (output_file, \"\\n#endif /* #if %s */\\n\\n\",\n \t   CPU_UNITS_QUERY_MACRO_NAME);\n   output_dfa_clean_insn_cache_func ();"}, {"sha": "27b040fa112b7d648f85bbc3cc73c238b14e1b04", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -1142,6 +1142,9 @@ adjust_priority (rtx prev)\n HAIFA_INLINE static void\n advance_one_cycle (void)\n {\n+  if (targetm.sched.dfa_pre_advance_cycle)\n+    targetm.sched.dfa_pre_advance_cycle ();\n+\n   if (targetm.sched.dfa_pre_cycle_insn)\n     state_transition (curr_state,\n \t\t      targetm.sched.dfa_pre_cycle_insn ());\n@@ -1151,6 +1154,9 @@ advance_one_cycle (void)\n   if (targetm.sched.dfa_post_cycle_insn)\n     state_transition (curr_state,\n \t\t      targetm.sched.dfa_post_cycle_insn ());\n+\n+  if (targetm.sched.dfa_post_advance_cycle)\n+    targetm.sched.dfa_post_advance_cycle ();\n }\n \n /* Clock at which the previous instruction was issued.  */"}, {"sha": "bdaf9f475a82d208038ef66ea9d237e339a8b4a3", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -310,6 +310,8 @@\n #define TARGET_SCHED_DFA_PRE_CYCLE_INSN 0\n #define TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN 0\n #define TARGET_SCHED_DFA_POST_CYCLE_INSN 0\n+#define TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE 0\n+#define TARGET_SCHED_DFA_POST_ADVANCE_CYCLE 0\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD 0\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD 0\n #define TARGET_SCHED_DFA_NEW_CYCLE 0\n@@ -337,7 +339,9 @@\n    TARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN,\t\t\t\\\n    TARGET_SCHED_DFA_PRE_CYCLE_INSN,\t\t\t\t\\\n    TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN,\t\t\t\\\n-   TARGET_SCHED_DFA_POST_CYCLE_INSN,\t\t\t\t\\\n+   TARGET_SCHED_DFA_POST_CYCLE_INSN,\t\t\t        \\\n+   TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE,                          \\\n+   TARGET_SCHED_DFA_POST_ADVANCE_CYCLE,                         \\\n    TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD,\t\t\\\n    TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD,\t\\\n    TARGET_SCHED_DFA_NEW_CYCLE,\t\t\t\t\t\\"}, {"sha": "d1af44335ac5f68ae2ef21be5d869a6e73e54af7", "filename": "gcc/target.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3d0d93e2b064822db68e22a09e424e9b4abe18/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1c3d0d93e2b064822db68e22a09e424e9b4abe18", "patch": "@@ -303,6 +303,13 @@ struct gcc_target\n     void (* init_dfa_post_cycle_insn) (void);\n     rtx (* dfa_post_cycle_insn) (void);\n \n+    /* The values of the following two members are pointers to\n+       functions used to simplify the automaton descriptions.\n+       dfa_pre_advance_cycle and dfa_post_advance_cycle are getting called\n+       immediatelly before and after cycle is advanced.  */\n+    void (* dfa_pre_advance_cycle) (void);\n+    void (* dfa_post_advance_cycle) (void);\n+\n     /* The following member value is a pointer to a function returning value\n        which defines how many insns in queue `ready' will we try for\n        multi-pass scheduling.  If the member value is nonzero and the"}]}