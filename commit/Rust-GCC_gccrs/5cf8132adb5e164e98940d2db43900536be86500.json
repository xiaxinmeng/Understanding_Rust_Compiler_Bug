{"sha": "5cf8132adb5e164e98940d2db43900536be86500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmODEzMmFkYjVlMTY0ZTk4OTQwZDJkYjQzOTAwNTM2YmU4NjUwMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-23T18:43:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-23T18:43:32Z"}, "message": "re PR fortran/54884 (Externally used PRIVATE module procedure wrongly marked as TREE_PUBLIC()=0)\n\n2012-12-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54884\n        * module.c (write_symbol1_recursion): Set attr.public_use.\n        * interface.c (check_sym_interfaces, check_uop_interfaces,\n        gfc_check_interfaces): Remove attr.public_use code.\n        * resolve.c (resolve_function, resolve_variable,\n        resolve_typebound_procedure): Ditto.\n\n2012-12-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54884\n        * gfortran.dg/public_private_module_8.f90: New.\n\nFrom-SVN: r194706", "tree": {"sha": "a5d2e6e483f0bfb9abd032ece1e7ab797cddb3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d2e6e483f0bfb9abd032ece1e7ab797cddb3c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf8132adb5e164e98940d2db43900536be86500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf8132adb5e164e98940d2db43900536be86500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf8132adb5e164e98940d2db43900536be86500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf8132adb5e164e98940d2db43900536be86500/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f842aa5b66d19ecdbfa00315b48377abb005ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f842aa5b66d19ecdbfa00315b48377abb005ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f842aa5b66d19ecdbfa00315b48377abb005ba6"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "b3dab05db1303e846a9c7c91c813c2a33a070ab4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -1,3 +1,12 @@\n+2012-12-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54884\n+\t* module.c (write_symbol1_recursion): Set attr.public_use.\n+\t* interface.c (check_sym_interfaces, check_uop_interfaces,\n+\tgfc_check_interfaces): Remove attr.public_use code.\n+\t* resolve.c (resolve_function, resolve_variable,\n+\tresolve_typebound_procedure): Ditto.\n+\n 2012-12-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "b587d4ad069477e5ef6ce82fdde896156462be4c", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -1582,9 +1582,6 @@ check_sym_interfaces (gfc_symbol *sym)\n \n       for (p = sym->generic; p; p = p->next)\n \t{\n-\t  if (sym->attr.access != ACCESS_PRIVATE)\n-\t    p->sym->attr.public_used = 1;\n-\n \t  if (p->sym->attr.mod_proc\n \t      && (p->sym->attr.if_source != IFSRC_DECL\n \t\t  || p->sym->attr.procedure))\n@@ -1610,16 +1607,11 @@ check_uop_interfaces (gfc_user_op *uop)\n   char interface_name[100];\n   gfc_user_op *uop2;\n   gfc_namespace *ns;\n-  gfc_interface *p;\n \n   sprintf (interface_name, \"operator interface '%s'\", uop->name);\n   if (check_interface0 (uop->op, interface_name))\n     return;\n \n-  if (uop->access != ACCESS_PRIVATE)\n-    for (p = uop->op; p; p = p->next)\n-      p->sym->attr.public_used = 1;\n-\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n     {\n       uop2 = gfc_find_uop (uop->name, ns);\n@@ -1689,7 +1681,6 @@ void\n gfc_check_interfaces (gfc_namespace *ns)\n {\n   gfc_namespace *old_ns, *ns2;\n-  gfc_interface *p;\n   char interface_name[100];\n   int i;\n \n@@ -1714,10 +1705,6 @@ gfc_check_interfaces (gfc_namespace *ns)\n       if (check_interface0 (ns->op[i], interface_name))\n \tcontinue;\n \n-      for (p = ns->op[i]; p; p = p->next)\n-\tp->sym->attr.public_used = 1;\n-\n-\n       if (ns->op[i])\n \tgfc_check_operator_interface (ns->op[i]->sym, (gfc_intrinsic_op) i,\n \t\t\t\t      ns->op[i]->where);"}, {"sha": "e19c6d9d71f8db80ed95de3578d7731ba4a64482", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -5238,6 +5238,7 @@ write_symbol1_recursion (sorted_pointer_info *sp)\n \n   p1->u.wsym.state = WRITTEN;\n   write_symbol (p1->integer, p1->u.wsym.sym);\n+  p1->u.wsym.sym->attr.public_used = 1;\n  \n   write_symbol1_recursion (sp->right);\n }"}, {"sha": "873400abb39464a1148f8b21f2cc5e7ab68d234c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -3129,12 +3129,6 @@ resolve_function (gfc_expr *expr)\n       return FAILURE;\n     }\n \n-  if (sym && specification_expr && sym->attr.function\n-      && gfc_current_ns->proc_name\n-      && gfc_current_ns->proc_name->attr.flavor == FL_MODULE)\n-    sym->attr.public_used = 1;\n-\n-\n   /* Switch off assumed size checking and do this again for certain kinds\n      of procedure, once the procedure itself is resolved.  */\n   need_full_assumed_size++;\n@@ -5360,19 +5354,6 @@ resolve_variable (gfc_expr *e)\n   if (check_assumed_size_reference (sym, e))\n     return FAILURE;\n \n-  /* If a PRIVATE variable is used in the specification expression of the\n-     result variable, it might be accessed from outside the module and can\n-     thus not be TREE_PUBLIC() = 0.\n-     TODO: sym->attr.public_used only has to be set for the result variable's\n-     type-parameter expression and not for dummies or automatic variables.\n-     Additionally, it only has to be set if the function is either PUBLIC or\n-     used in a generic interface or TBP; unfortunately,\n-     proc_name->attr.public_used can get set at a later stage.  */\n-  if (specification_expr && sym->attr.access == ACCESS_PRIVATE\n-      && !sym->attr.function && !sym->attr.use_assoc\n-      && gfc_current_ns->proc_name && gfc_current_ns->proc_name->attr.function)\n-    sym->attr.public_used = 1;\n-\n   /* Deal with forward references to entries during resolve_code, to\n      satisfy, at least partially, 12.5.2.5.  */\n   if (gfc_current_ns->entries\n@@ -12146,7 +12127,6 @@ resolve_typebound_procedure (gfc_symtree* stree)\n   gcc_assert (stree->n.tb->u.specific);\n   proc = stree->n.tb->u.specific->n.sym;\n   where = stree->n.tb->where;\n-  proc->attr.public_used = 1;\n \n   /* Default access should already be resolved from the parser.  */\n   gcc_assert (stree->n.tb->access != ACCESS_UNKNOWN);"}, {"sha": "8a99e06a5448368d933cf6a9937b001683e2f0c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -1,3 +1,8 @@\n+2012-12-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54884\n+\t* gfortran.dg/public_private_module_8.f90: New.\n+\n 2012-12-23  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/r10k-cache-barrier-10.c: Make a branch-likely"}, {"sha": "bfc1b368f46ba0b8ea4a12b9358d38bddfe4a8c0", "filename": "gcc/testsuite/gfortran.dg/public_private_module_8.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf8132adb5e164e98940d2db43900536be86500/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module_8.f90?ref=5cf8132adb5e164e98940d2db43900536be86500", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! { dg-options \"-O2\" }\n+!\n+! PR fortran/54884\n+!\n+! Check that get_key_len is not optimized away as it\n+! is used in a publicly visible specification expression.\n+!\n+\n+module m\n+  private\n+  public :: foo\n+  interface foo\n+    module procedure bar\n+  end interface foo\n+contains\n+  pure function mylen()\n+    integer :: mylen\n+    mylen = 42\n+  end function mylen\n+  pure function myotherlen()\n+    integer :: myotherlen\n+    myotherlen = 99\n+  end function myotherlen\n+  subroutine bar(x)\n+    character(len=mylen()) :: x\n+    character :: z2(myotherlen())\n+    call internal(x)\n+    block\n+       character(len=myotherlen()) :: z\n+       z = \"abc\"\n+       x(1:5) = z\n+    end block\n+    x(6:10) = intern_func()\n+  contains\n+    function intern_func()\n+      character(len=myotherlen()) :: intern_func\n+      intern_func = \"zuzu\"\n+    end function intern_func\n+   subroutine internal(y)\n+      character(len=myotherlen()) :: y\n+      y = \"abc\"\n+    end subroutine internal\n+  end subroutine bar\n+end module m\n+\n+! { dg-final { scan-assembler-not \"__m_MOD_myotherlen\" } }\n+! { dg-final { scan-assembler \"__m_MOD_bar\" } }\n+! { dg-final { scan-assembler \"__m_MOD_mylen\" } }"}]}