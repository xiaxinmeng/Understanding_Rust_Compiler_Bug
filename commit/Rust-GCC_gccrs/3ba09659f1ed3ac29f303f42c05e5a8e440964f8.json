{"sha": "3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JhMDk2NTlmMWVkM2FjMjlmMzAzZjQyYzA1ZTVhOGU0NDA5NjRmOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-24T20:00:43Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-24T20:00:43Z"}, "message": "c-common.c (fname_decl): New location argument.\n\n        * c-common.c (fname_decl): New location argument.\n        * c-common.h (fname_decl): Same.\n        * c-parser.c (c_lex_one_token): Use {warning,error}_at instead of\n        {warning,error}.\n        (c_parser_typeof_specifier): Same.\n        (c_parser_parms_list_declarator): Same.\n        (c_parser_asm_string_literal): Same.\n        (c_parser_compound_statement_nostart): Same.\n        (c_parser_label): Same.\n        (c_parser_do_statement): Same.\n        (c_parser_asm_statement): Same.\n        (c_parser_unary_expression): Same.\n        (c_parser_sizeof_expression): Same.\n        (c_parser_postfix_expression): Same.\n        (c_parser_pragma): Same.\n        (c_parser_omp_clause_collapse): Same.\n        (c_parser_omp_clause_num_threads): Same.\n        (c_parser_omp_clause_schedule): Same.\n        (c_parser_omp_all_clauses): Same.\n        (c_parser_omp_sections_scope): Same.\n        (c_parser_omp_for_loop): Same.  Pass condition's location to\n        c_objc_common_truthvalue_conversion.\n        (c_parser_enum_specifier): Remove comment.\ntestsuite/\n        * gcc.dg/gomp/for-1.c: Test for columns.\n        * gcc.dg/func-outside-1.c: Same.\n        * gcc.dg/bitfld-7.c: Same.\ncp/\n        * semantics.c (finish_fname): Pass location to fname_decl.\n\nFrom-SVN: r140642", "tree": {"sha": "fd30076c827ad20ea189e2530913b88ff10a6a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd30076c827ad20ea189e2530913b88ff10a6a2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/comments", "author": null, "committer": null, "parents": [{"sha": "19a6a2ea61ebf09360277ba6c0a633dfeead003d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a6a2ea61ebf09360277ba6c0a633dfeead003d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a6a2ea61ebf09360277ba6c0a633dfeead003d"}], "stats": {"total": 173, "additions": 109, "deletions": 64}, "files": [{"sha": "606c6d44564243b86a4d5dca57c37881fb1cf066", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -1,3 +1,29 @@\n+2008-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* c-common.c (fname_decl): New location argument.\n+\t* c-common.h (fname_decl): Same.\n+\t* c-parser.c (c_lex_one_token): Use {warning,error}_at instead of\n+\t{warning,error}.\n+\t(c_parser_typeof_specifier): Same.\n+\t(c_parser_parms_list_declarator): Same.\n+\t(c_parser_asm_string_literal): Same.\n+\t(c_parser_compound_statement_nostart): Same.\n+\t(c_parser_label): Same.\n+\t(c_parser_do_statement): Same.\n+\t(c_parser_asm_statement): Same.\n+\t(c_parser_unary_expression): Same.\n+\t(c_parser_sizeof_expression): Same.\n+\t(c_parser_postfix_expression): Same.\n+\t(c_parser_pragma): Same.\n+\t(c_parser_omp_clause_collapse): Same.\n+\t(c_parser_omp_clause_num_threads): Same.\n+\t(c_parser_omp_clause_schedule): Same.\n+\t(c_parser_omp_all_clauses): Same.\n+\t(c_parser_omp_sections_scope): Same.\n+\t(c_parser_omp_for_loop): Same.  Pass condition's location to\n+\tc_objc_common_truthvalue_conversion.\n+\t(c_parser_enum_specifier): Remove comment.\n+\n 2008-09-24  Michael J. Eager  <eager@eagercon.com>\n \n \t* config/rs6000/predicates.md (easy_fp_constant): Single FP consts\n@@ -115,6 +141,7 @@\n \n \t* c-ppoutput.c (cb_used_define): Do nothing for a builtin node.\n \n+>>>>>>> .r140641\n 2008-09-23  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-tree.h: Add argument to c_objc_common_truthvalue_conversion,"}, {"sha": "680b9b56651b6e844dc131ec954d427081b4d4d7", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -988,10 +988,11 @@ fname_as_string (int pretty_p)\n    now. RID indicates how it should be formatted and IDENTIFIER_NODE\n    ID is its name (unfortunately C and C++ hold the RID values of\n    keywords in different places, so we can't derive RID from ID in\n-   this language independent code.  */\n+   this language independent code. LOC is the location of the\n+   function.  */\n \n tree\n-fname_decl (unsigned int rid, tree id)\n+fname_decl (location_t loc, unsigned int rid, tree id)\n {\n   unsigned ix;\n   tree decl = NULL_TREE;\n@@ -1022,7 +1023,7 @@ fname_decl (unsigned int rid, tree id)\n       input_location = saved_location;\n     }\n   if (!ix && !current_function_decl)\n-    pedwarn (input_location, 0, \"%qD is not defined outside of function scope\", decl);\n+    pedwarn (loc, 0, \"%qD is not defined outside of function scope\", decl);\n \n   return decl;\n }"}, {"sha": "15ea5731de13ba19377415e8e72114357a9acb67", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -690,7 +690,7 @@ extern tree build_void_list_node (void);\n extern void start_fname_decls (void);\n extern void finish_fname_decls (void);\n extern const char *fname_as_string (int);\n-extern tree fname_decl (unsigned, tree);\n+extern tree fname_decl (location_t, unsigned, tree);\n \n extern void check_function_arguments (tree, int, tree *, tree);\n extern void check_function_arguments_recurse (void (*)"}, {"sha": "2b64c86953adcfc2c56efeba71e7f5638eb822ba", "filename": "gcc/c-parser.c", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -221,10 +221,10 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \n \t    if (rid_code == RID_CXX_COMPAT_WARN)\n \t      {\n-\t\twarning (OPT_Wc___compat,\n-\t\t\t \"%Hidentifier %qs conflicts with C++ keyword\",\n-\t\t\t &token->location,\n-\t\t\t IDENTIFIER_POINTER (token->value));\n+\t\twarning_at (token->location,\n+\t\t\t    OPT_Wc___compat,\n+\t\t\t    \"identifier %qs conflicts with C++ keyword\",\n+\t\t\t    IDENTIFIER_POINTER (token->value));\n \t      }\n \t    else if (c_dialect_objc ())\n \t      {\n@@ -1653,7 +1653,6 @@ c_parser_enum_specifier (c_parser *parser)\n \t    {\n \t      c_parser_consume_token (parser);\n \t      value_loc = c_parser_peek_token (parser)->location;\n-\t      /* This may call cb_line_change and alter the input_location.  */\n \t      enum_value = c_parser_expr_no_commas (parser, NULL).value;\n \t    }\n \t  else\n@@ -2084,7 +2083,7 @@ c_parser_typeof_specifier (c_parser *parser)\n       in_typeof--;\n       if (TREE_CODE (expr.value) == COMPONENT_REF\n \t  && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n-\terror (\"%H%<typeof%> applied to a bit-field\", &here);\n+\terror_at (here, \"%<typeof%> applied to a bit-field\");\n       ret.spec = TREE_TYPE (expr.value);\n       was_vm = variably_modified_type_p (ret.spec, NULL_TREE);\n       /* This should be returned with the type so that when the type\n@@ -2100,7 +2099,7 @@ c_parser_typeof_specifier (c_parser *parser)\n \t    e = build1 (NOP_EXPR, void_type_node, e);\n \n \t  if (CAN_HAVE_LOCATION_P (e))\n-\t    SET_EXPR_LOCATION (e, input_location);\n+\t    SET_EXPR_LOCATION (e, here);\n \n \t  add_stmt (e);\n \t}\n@@ -2522,8 +2521,8 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n       ret->had_vla_unspec = 0;\n       /* Suppress -Wold-style-definition for this case.  */\n       ret->types = error_mark_node;\n-      error (\"%HISO C requires a named argument before %<...%>\",\n-\t     &c_parser_peek_token (parser)->location);\n+      error_at (c_parser_peek_token (parser)->location,\n+\t\t\"ISO C requires a named argument before %<...%>\");\n       c_parser_consume_token (parser);\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t{\n@@ -2679,8 +2678,8 @@ c_parser_asm_string_literal (c_parser *parser)\n     }\n   else if (c_parser_next_token_is (parser, CPP_WSTRING))\n     {\n-      error (\"%Hwide string literal in %<asm%>\",\n-\t     &c_parser_peek_token (parser)->location);\n+      error_at (c_parser_peek_token (parser)->location,\n+\t\t\"wide string literal in %<asm%>\");\n       str = build_string (1, \"\");\n       c_parser_consume_token (parser);\n     }\n@@ -3321,7 +3320,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n {\n   bool last_stmt = false;\n   bool last_label = false;\n-  location_t label_loc;\n+  location_t label_loc = UNKNOWN_LOCATION;  /* Quiet warning.  */\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n       c_parser_consume_token (parser);\n@@ -3445,12 +3444,12 @@ c_parser_compound_statement_nostart (c_parser *parser)\n         {\n           if (parser->in_if_block) \n             {\n-              error (\"%H\"\"expected %<}%> before %<else%>\", &loc);\n+              error_at (loc, \"\"\"expected %<}%> before %<else%>\");\n               return;\n             }\n           else \n             {\n-              error (\"%H%<else%> without a previous %<if%>\", &loc);\n+              error_at (loc, \"%<else%> without a previous %<if%>\");\n               c_parser_consume_token (parser);\n               continue;\n             }\n@@ -3466,7 +3465,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n       parser->error = false;\n     }\n   if (last_label)\n-    error (\"%Hlabel at end of compound statement\", &label_loc);\n+    error_at (label_loc, \"label at end of compound statement\");\n   c_parser_consume_token (parser);\n }\n \n@@ -3542,9 +3541,9 @@ c_parser_label (c_parser *parser)\n \t  && !(c_parser_next_token_is (parser, CPP_NAME)\n \t       && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n \t{\n-\t  error (\"%Ha label can only be part of a statement and \"\n-\t\t \"a declaration is not a statement\",\n-\t\t &c_parser_peek_token (parser)->location);\n+\t  error_at (c_parser_peek_token (parser)->location,\n+\t\t    \"a label can only be part of a statement and \"\n+\t\t    \"a declaration is not a statement\");\n \t  c_parser_declaration_or_fndef (parser, /*fndef_ok*/ false, \n \t\t\t\t\t /*nested*/ true, /*empty_ok*/ false,\n \t\t\t\t\t /*start_attr_ok*/ true);\n@@ -4001,9 +4000,9 @@ c_parser_do_statement (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_DO));\n   c_parser_consume_token (parser);\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n-    warning (OPT_Wempty_body,\n-             \"%Hsuggest braces around empty body in %<do%> statement\",\n-\t     &c_parser_peek_token (parser)->location);\n+    warning_at (c_parser_peek_token (parser)->location,\n+\t\tOPT_Wempty_body,\n+\t\t\"suggest braces around empty body in %<do%> statement\");\n   block = c_begin_compound_stmt (flag_isoc99);\n   loc = c_parser_peek_token (parser)->location;\n   save_break = c_break_label;\n@@ -4154,9 +4153,10 @@ c_parser_asm_statement (c_parser *parser)\n   else if (c_parser_next_token_is_keyword (parser, RID_CONST)\n \t   || c_parser_next_token_is_keyword (parser, RID_RESTRICT))\n     {\n-      warning (0, \"%H%E qualifier ignored on asm\",\n-\t       &c_parser_peek_token (parser)->location,\n-\t       c_parser_peek_token (parser)->value);\n+      warning_at (c_parser_peek_token (parser)->location,\n+\t\t  0,\n+\t\t  \"%E qualifier ignored on asm\",\n+\t\t  c_parser_peek_token (parser)->value);\n       quals = NULL_TREE;\n       c_parser_consume_token (parser);\n     }\n@@ -4834,9 +4834,9 @@ c_parser_unary_expression (c_parser *parser)\n       return ret;\n     case CPP_PLUS:\n       if (!c_dialect_objc () && !in_system_header)\n-\twarning (OPT_Wtraditional,\n-\t\t \"%Htraditional C rejects the unary plus operator\",\n-\t\t &c_parser_peek_token (parser)->location);\n+\twarning_at (c_parser_peek_token (parser)->location,\n+\t\t    OPT_Wtraditional,\n+\t\t    \"traditional C rejects the unary plus operator\");\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n@@ -4946,8 +4946,8 @@ c_parser_sizeof_expression (c_parser *parser)\n \t  && type_name->declarator->u.array.vla_unspec_p)\n \t{\n \t  /* C99 6.7.5.2p4 */\n-\t  error (\"%H%<[*]%> not allowed in other than a declaration\",\n-\t\t &expr_loc);\n+\t  error_at (expr_loc,\n+\t\t    \"%<[*]%> not allowed in other than a declaration\");\n \t}\n       return c_expr_sizeof_type (type_name);\n     }\n@@ -4960,7 +4960,7 @@ c_parser_sizeof_expression (c_parser *parser)\n       in_sizeof--;\n       if (TREE_CODE (expr.value) == COMPONENT_REF\n \t  && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n-\terror (\"%H%<sizeof%> applied to a bit-field\", &expr_loc);\n+\terror_at (expr_loc, \"%<sizeof%> applied to a bit-field\");\n       return c_expr_sizeof_expr (expr);\n     }\n }\n@@ -5135,8 +5135,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (cur_stmt_list == NULL)\n \t    {\n-\t      error (\"%Hbraced-group within expression allowed \"\n-\t\t     \"only inside a function\", &here);\n+\t      error_at (here, \"braced-group within expression allowed \"\n+\t\t\t\"only inside a function\");\n \t      parser->error = true;\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_BRACE, NULL);\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n@@ -5191,7 +5191,8 @@ c_parser_postfix_expression (c_parser *parser)\n \tcase RID_FUNCTION_NAME:\n \tcase RID_PRETTY_FUNCTION_NAME:\n \tcase RID_C99_FUNCTION_NAME:\n-\t  expr.value = fname_decl (c_parser_peek_token (parser)->keyword,\n+\t  expr.value = fname_decl (c_parser_peek_token (parser)->location,\n+\t\t\t\t   c_parser_peek_token (parser)->keyword,\n \t\t\t\t   c_parser_peek_token (parser)->value);\n \t  expr.original_code = ERROR_MARK;\n \t  c_parser_consume_token (parser);\n@@ -5334,8 +5335,9 @@ c_parser_postfix_expression (c_parser *parser)\n \n \t    c = fold (e1.value);\n \t    if (TREE_CODE (c) != INTEGER_CST)\n-\t      error (\"%Hfirst argument to %<__builtin_choose_expr%> not\"\n-\t\t     \" a constant\", &loc);\n+\t      error_at (loc,\n+\t\t\t\"first argument to %<__builtin_choose_expr%> not\"\n+\t\t\t\" a constant\");\n \t    expr = integer_zerop (c) ? e3 : e2;\n \t  }\n \t  break;\n@@ -5503,7 +5505,7 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n   start_loc = c_parser_peek_token (parser)->location;\n   if (type != error_mark_node && C_TYPE_VARIABLE_SIZE (type))\n     {\n-      error (\"%Hcompound literal has variable size\", &start_loc);\n+      error_at (start_loc, \"compound literal has variable size\");\n       type = error_mark_node;\n     }\n   init = c_parser_braced_init (parser, type, false);\n@@ -6611,9 +6613,9 @@ c_parser_pragma (c_parser *parser, enum pragma_context context)\n       return false;\n \n     case PRAGMA_OMP_SECTION:\n-      error (\"%H%<#pragma omp section%> may only be used in \"\n-\t     \"%<#pragma omp sections%> construct\",\n-\t     &c_parser_peek_token (parser)->location);\n+      error_at (c_parser_peek_token (parser)->location,\n+\t\t\"%<#pragma omp section%> may only be used in \"\n+\t\t\"%<#pragma omp sections%> construct\");\n       c_parser_skip_until_found (parser, CPP_PRAGMA_EOL, NULL);\n       return false;\n \n@@ -6871,8 +6873,8 @@ c_parser_omp_clause_collapse (c_parser *parser, tree list)\n       || (n = tree_low_cst (num, 0)) <= 0\n       || (int) n != n)\n     {\n-      error (\"%Hcollapse argument needs positive constant integer expression\",\n-\t     &loc);\n+      error_at (loc,\n+\t\t\"collapse argument needs positive constant integer expression\");\n       return list;\n     }\n   c = build_omp_clause (OMP_CLAUSE_COLLAPSE);\n@@ -7033,7 +7035,8 @@ c_parser_omp_clause_num_threads (c_parser *parser, tree list)\n \t\t       build_int_cst (TREE_TYPE (t), 0));\n       if (c == boolean_true_node)\n \t{\n-\t  warning (0, \"%H%<num_threads%> value must be positive\", &expr_loc);\n+\t  warning_at (expr_loc, 0,\n+\t\t      \"%<num_threads%> value must be positive\");\n \t  t = integer_one_node;\n \t}\n \n@@ -7198,11 +7201,12 @@ c_parser_omp_clause_schedule (c_parser *parser, tree list)\n       t = c_parser_expr_no_commas (parser, NULL).value;\n \n       if (OMP_CLAUSE_SCHEDULE_KIND (c) == OMP_CLAUSE_SCHEDULE_RUNTIME)\n-\terror (\"%Hschedule %<runtime%> does not take \"\n-\t       \"a %<chunk_size%> parameter\", &here);\n+\terror_at (here, \"schedule %<runtime%> does not take \"\n+\t\t  \"a %<chunk_size%> parameter\");\n       else if (OMP_CLAUSE_SCHEDULE_KIND (c) == OMP_CLAUSE_SCHEDULE_AUTO)\n-\terror (\"%Hschedule %<auto%> does not take \"\n-\t       \"a %<chunk_size%> parameter\", &here);\n+\terror_at (here,\n+\t\t  \"schedule %<auto%> does not take \"\n+\t\t  \"a %<chunk_size%> parameter\");\n       else if (TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE)\n \tOMP_CLAUSE_SCHEDULE_CHUNK_EXPR (c) = t;\n       else\n@@ -7346,7 +7350,7 @@ c_parser_omp_all_clauses (c_parser *parser, unsigned int mask,\n \t  /* Remove the invalid clause(s) from the list to avoid\n \t     confusing the rest of the compiler.  */\n \t  clauses = prev;\n-\t  error (\"%H%qs is not valid for %qs\", &here, c_name, where);\n+\t  error_at (here, \"%qs is not valid for %qs\", c_name, where);\n \t}\n     }\n \n@@ -7610,10 +7614,12 @@ c_parser_omp_for_loop (c_parser *parser, tree clauses, tree *par_clauses)\n       cond = NULL_TREE;\n       if (c_parser_next_token_is_not (parser, CPP_SEMICOLON))\n \t{\n+\t  location_t cond_loc = c_parser_peek_token (parser)->location;\n+\n \t  cond = c_parser_expression_conv (parser).value;\n-\t  cond = c_objc_common_truthvalue_conversion (input_location, cond);\n+\t  cond = c_objc_common_truthvalue_conversion (cond_loc, cond);\n \t  if (CAN_HAVE_LOCATION_P (cond))\n-\t    SET_EXPR_LOCATION (cond, input_location);\n+\t    SET_EXPR_LOCATION (cond, cond_loc);\n \t}\n       c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n \n@@ -7742,8 +7748,9 @@ c_parser_omp_for_loop (c_parser *parser, tree clauses, tree *par_clauses)\n \t\t      c = &OMP_CLAUSE_CHAIN (*c);\n \t\t    else if (OMP_CLAUSE_CODE (*c) == OMP_CLAUSE_FIRSTPRIVATE)\n \t\t      {\n-\t\t\terror (\"%Hiteration variable %qD should not be firstprivate\",\n-\t\t\t       &loc, OMP_CLAUSE_DECL (*c));\n+\t\t\terror_at (loc,\n+\t\t\t\t  \"iteration variable %qD should not be firstprivate\",\n+\t\t\t\t  OMP_CLAUSE_DECL (*c));\n \t\t\t*c = OMP_CLAUSE_CHAIN (*c);\n \t\t      }\n \t\t    else\n@@ -7892,8 +7899,7 @@ c_parser_omp_sections_scope (c_parser *parser)\n \t}\n       else if (!error_suppress)\n \t{\n-\t  error (\"%Hexpected %<#pragma omp section%> or %<}%>\",\n-\t\t &loc);\n+\t  error_at (loc, \"expected %<#pragma omp section%> or %<}%>\");\n \t  error_suppress = true;\n \t}\n "}, {"sha": "88f8686517dc61fc5c1c3a48b8768e54c34bab70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -1,3 +1,7 @@\n+2008-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* semantics.c (finish_fname): Pass location to fname_decl.\n+\n 2008-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37533"}, {"sha": "176a7fdd98a4037349d1b9f9e3781aa391e5bbb4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -2165,7 +2165,7 @@ finish_fname (tree id)\n {\n   tree decl;\n \n-  decl = fname_decl (C_RID_CODE (id), id);\n+  decl = fname_decl (input_location, C_RID_CODE (id), id);\n   if (processing_template_decl)\n     decl = DECL_NAME (decl);\n   return decl;"}, {"sha": "6bc7581aca09e06d44f771df14fcb3fe9e0e8bb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -1,3 +1,9 @@\n+2008-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/gomp/for-1.c: Test for columns.\n+\t* gcc.dg/func-outside-1.c: Same.\n+\t* gcc.dg/bitfld-7.c: Same.\n+\n 2008-09-24  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc.dg/utf-array.c: Fix syntax of dg-error stmts."}, {"sha": "fdaa93f261a29869363e29fe9c5507522c26c32e", "filename": "gcc/testsuite/gcc.dg/bitfld-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-7.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -1,8 +1,8 @@\n /* Test for rejection of typeof on bit-fields.  PR c/10333.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-fshow-column\" } */\n \n struct { int a:1; } x;\n \n-typeof (x.a) z; /* { dg-error \"applied to a bit-field\" \"typeof\" } */\n+typeof (x.a) z; /* { dg-error \"9:applied to a bit-field\" \"typeof\" } */"}, {"sha": "25c19c6f642199e6b41ab0bf6d34d74a75355809", "filename": "gcc/testsuite/gcc.dg/func-outside-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-outside-1.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -2,8 +2,8 @@\n    are OK there).  Test with no special options.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-fshow-column\" } */\n \n-const char *a = __func__; /* { dg-warning \"'__func__' is not defined outside of function scope\" \"undef\" } */\n+const char *a = __func__; /* { dg-warning \"17:'__func__' is not defined outside of function scope\" \"undef\" } */\n const char *b = __FUNCTION__;\n const char *c = __PRETTY_FUNCTION__;"}, {"sha": "bf50f25f458a84fccd8c8cc29ea1d99f75c81350", "filename": "gcc/testsuite/gcc.dg/gomp/for-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ffor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ba09659f1ed3ac29f303f42c05e5a8e440964f8/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ffor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ffor-1.c?ref=3ba09659f1ed3ac29f303f42c05e5a8e440964f8", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fshow-column\" } */\n \n void foo (int j, int k)\n {\n@@ -23,7 +24,7 @@ void foo (int j, int k)\n \n   /* Malformed parallel loops.  */\n   #pragma omp for\n-  i = 0;\t\t/* { dg-error \"for statement expected\" } */\n+  i = 0;\t\t/* { dg-error \"3:for statement expected\" } */\n   for ( ; i < 10; )\n     {\n       baz (i);\n@@ -39,7 +40,7 @@ void foo (int j, int k)\n     }\n \n   #pragma omp for\n-  for (i = 0; i < 10 && j > 4; i-=3)\t/* { dg-error \"invalid controlling predicate\" } */\n+  for (i = 0; i < 10 && j > 4; i-=3)\t/* { dg-error \"15:invalid controlling predicate\" } */\n     baz (i);\n \n   #pragma omp for"}]}