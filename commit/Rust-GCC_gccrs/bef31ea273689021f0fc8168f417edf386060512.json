{"sha": "bef31ea273689021f0fc8168f417edf386060512", "node_id": "C_kwDOANBUbNoAKGJlZjMxZWEyNzM2ODkwMjFmMGZjODE2OGY0MTdlZGYzODYwNjA1MTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-07T11:03:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-07T11:03:59Z"}, "message": "Merge #1543\n\n1543: Reintroduce targetrustm hooks without the maze of macro definitions in target headers r=CohenArthur a=ibuclaw\n\n- Adds skeleton support and documentation for targetrustm hooks.\r\n- Re-adds previously reverted `TARGET_RUST_CPU_INFO` target hook.\r\n- Re-adds the previously reverted `TARGET_RUST_OS_INFO` target hook.\r\n- Implements `TARGET_RUST_CPU_INFO` hook for x86 (only a subset of the original i386-rust.cc was re-added)\r\n- Implements `TARGET_RUST_OS_INFO` hook for darwin (covers both x86 and powerpc).\r\n\r\nThere's quite a bit to unpick from what was removed, but I hope this shows how firstly `rust-target.h` and `tm_rust.h` should be kept as empty as possible for the `default-rust.cc` source file that pulls in these headers; secondly all rust macros and declarations be put in rust-specific headers, then pulled into tm_rust.h as-needed. From every other `${target}-rust.cc` file, you can include as much as you like in order to pry out the information you need to get at.\r\n\r\nI've verified this does work as expected with the `-frust-dump-target_options` switch, e.g with `-mavx2`\r\n```\r\ntarget_endian: \"little\"\r\ntarget_pointer_width: \"64\"\r\ntarget_feature: \"fxsr\"\r\ntarget_feature: \"popcnt\"\r\ntarget_feature: \"avx2\"\r\ntarget_feature: \"ssse3\"\r\ntarget_feature: \"sse4.1\"\r\ntarget_feature: \"sse3\"\r\ntarget_feature: \"avx\"\r\ntarget_feature: \"sse\"\r\ntarget_feature: \"xsave\"\r\ntarget_feature: \"sse4.2\"\r\ntarget_feature: \"sse2\"\r\ntarget_feature: \"mmx\"\r\ntarget_arch: \"x86_64\"\r\n```\r\n\r\nI've also built a few darwin cross compilers with the following results on i686-darwin\r\n```\r\ntarget_pointer_width: \"32\"\r\ntarget_env: \"\"\r\ntarget_vendor: \"apple\"\r\ntarget_endian: \"little\"\r\ntarget_os: \"macos\"\r\ntarget_family: \"unix\"\r\ntarget_feature: \"sse3\"\r\ntarget_feature: \"sse\"\r\ntarget_feature: \"sse2\"\r\ntarget_feature: \"mmx\"\r\ntarget_arch: \"x86\"\r\n```\r\nand on powerpc64-darwin\r\n```\r\ntarget_pointer_width: \"64\"\r\ntarget_env: \"\"\r\ntarget_vendor: \"apple\"\r\ntarget_endian: \"big\"\r\ntarget_os: \"macos\"\r\ntarget_family: \"unix\"\r\n```\n\nCo-authored-by: Iain Buclaw <ibuclaw@gdcproject.org>", "tree": {"sha": "fab6e519636bbfa69207b7b5faff4bbfe61eaef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab6e519636bbfa69207b7b5faff4bbfe61eaef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef31ea273689021f0fc8168f417edf386060512", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQAefCRBK7hj4Ov3rIwAAqEkIAItb/oyGLy0OBZ1Y9bnmsg0q\nkM7ixinhNqJT7XMuOn5U+21OeY4lXtS0xVub5FooDEvmDovS8fwr0O5cZvPxkY4h\nksMpPNO5Gbz7KfNP+CmF7bqgUCZDGWNBv2kqBlJlboG2OxSj8V90qrgP7+SblRPD\nLzgG7JjwbUt6FoAtFSBWnGFJgcXhF1zXixYtkiAdT5FkBZHYcQNyyl9ptQ6wqNzf\nIFpm3cpY939TST1Mcl1LBpurcS5jbEbqXC2XXf/ocr2G/HaMMQfkCZZiKsc3UliN\nqyD/1+T8D37hMWzeaVEF5ylDEri7dCgZ4KqdBKtZte1Pth/jDvcZtmkkYDwQ4lk=\n=mNvG\n-----END PGP SIGNATURE-----\n", "payload": "tree fab6e519636bbfa69207b7b5faff4bbfe61eaef7\nparent e623ee314fbc9503067bbb379a4055dd4d5d245b\nparent bb5efc657ae66a96cf83604efa069ca76b5dd8e4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1665140639 +0000\ncommitter GitHub <noreply@github.com> 1665140639 +0000\n\nMerge #1543\n\n1543: Reintroduce targetrustm hooks without the maze of macro definitions in target headers r=CohenArthur a=ibuclaw\n\n- Adds skeleton support and documentation for targetrustm hooks.\r\n- Re-adds previously reverted `TARGET_RUST_CPU_INFO` target hook.\r\n- Re-adds the previously reverted `TARGET_RUST_OS_INFO` target hook.\r\n- Implements `TARGET_RUST_CPU_INFO` hook for x86 (only a subset of the original i386-rust.cc was re-added)\r\n- Implements `TARGET_RUST_OS_INFO` hook for darwin (covers both x86 and powerpc).\r\n\r\nThere's quite a bit to unpick from what was removed, but I hope this shows how firstly `rust-target.h` and `tm_rust.h` should be kept as empty as possible for the `default-rust.cc` source file that pulls in these headers; secondly all rust macros and declarations be put in rust-specific headers, then pulled into tm_rust.h as-needed. From every other `${target}-rust.cc` file, you can include as much as you like in order to pry out the information you need to get at.\r\n\r\nI've verified this does work as expected with the `-frust-dump-target_options` switch, e.g with `-mavx2`\r\n```\r\ntarget_endian: \"little\"\r\ntarget_pointer_width: \"64\"\r\ntarget_feature: \"fxsr\"\r\ntarget_feature: \"popcnt\"\r\ntarget_feature: \"avx2\"\r\ntarget_feature: \"ssse3\"\r\ntarget_feature: \"sse4.1\"\r\ntarget_feature: \"sse3\"\r\ntarget_feature: \"avx\"\r\ntarget_feature: \"sse\"\r\ntarget_feature: \"xsave\"\r\ntarget_feature: \"sse4.2\"\r\ntarget_feature: \"sse2\"\r\ntarget_feature: \"mmx\"\r\ntarget_arch: \"x86_64\"\r\n```\r\n\r\nI've also built a few darwin cross compilers with the following results on i686-darwin\r\n```\r\ntarget_pointer_width: \"32\"\r\ntarget_env: \"\"\r\ntarget_vendor: \"apple\"\r\ntarget_endian: \"little\"\r\ntarget_os: \"macos\"\r\ntarget_family: \"unix\"\r\ntarget_feature: \"sse3\"\r\ntarget_feature: \"sse\"\r\ntarget_feature: \"sse2\"\r\ntarget_feature: \"mmx\"\r\ntarget_arch: \"x86\"\r\n```\r\nand on powerpc64-darwin\r\n```\r\ntarget_pointer_width: \"64\"\r\ntarget_env: \"\"\r\ntarget_vendor: \"apple\"\r\ntarget_endian: \"big\"\r\ntarget_os: \"macos\"\r\ntarget_family: \"unix\"\r\n```\n\nCo-authored-by: Iain Buclaw <ibuclaw@gdcproject.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef31ea273689021f0fc8168f417edf386060512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef31ea273689021f0fc8168f417edf386060512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef31ea273689021f0fc8168f417edf386060512/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e623ee314fbc9503067bbb379a4055dd4d5d245b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e623ee314fbc9503067bbb379a4055dd4d5d245b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e623ee314fbc9503067bbb379a4055dd4d5d245b"}, {"sha": "bb5efc657ae66a96cf83604efa069ca76b5dd8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5efc657ae66a96cf83604efa069ca76b5dd8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5efc657ae66a96cf83604efa069ca76b5dd8e4"}], "stats": {"total": 497, "additions": 487, "deletions": 10}, "files": [{"sha": "f25351fd672b1237963482f928dacecbb16e19f0", "filename": ".github/bors_log_expected_warnings", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/.github%2Fbors_log_expected_warnings", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/.github%2Fbors_log_expected_warnings", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2Fbors_log_expected_warnings?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -89,10 +89,10 @@\n ../../gcc/gcc.cc:7711:13: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/gcc.cc:7712:13: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/gcc.cc:7714:9: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:111:17: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:120:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:173:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:179:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n+../../gcc/genhooks.cc:112:17: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n+../../gcc/genhooks.cc:121:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n+../../gcc/genhooks.cc:174:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n+../../gcc/genhooks.cc:180:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/gimple-range-gori.cc:318:22: warning: format not a string literal and no format arguments [-Wformat-security]\n ../../gcc/ipa-devirt.cc:965:47: warning: format not a string literal and no format arguments [-Wformat-security]\n ../../gcc/lto-wrapper.cc:1147:8: warning: ignoring return value of \u2018ssize_t read(int, void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]"}, {"sha": "27ae592338f05270bcac3cdf16983c8bfa5970b2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -573,6 +573,8 @@ tm_p_file_list=@tm_p_file_list@\n tm_p_include_list=@tm_p_include_list@\n tm_d_file_list=@tm_d_file_list@\n tm_d_include_list=@tm_d_include_list@\n+tm_rust_file_list=@tm_rust_file_list@\n+tm_rust_include_list=@tm_rust_include_list@\n build_xm_file_list=@build_xm_file_list@\n build_xm_include_list=@build_xm_include_list@\n build_xm_defines=@build_xm_defines@\n@@ -866,6 +868,7 @@ CONFIG_H  = config.h  $(host_xm_file_list)\n TCONFIG_H = tconfig.h $(xm_file_list)\n TM_P_H    = tm_p.h    $(tm_p_file_list)\n TM_D_H    = tm_d.h    $(tm_d_file_list)\n+TM_RUST_H = tm_rust.h $(tm_rust_file_list)\n GTM_H     = tm.h      $(tm_file_list) insn-constants.h\n TM_H      = $(GTM_H) insn-flags.h $(OPTIONS_H)\n \n@@ -924,10 +927,12 @@ TARGET_DEF = target.def target-hooks-macros.h target-insns.def\n C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h\n COMMON_TARGET_DEF = common/common-target.def target-hooks-macros.h\n D_TARGET_DEF = d/d-target.def target-hooks-macros.h\n+RUST_TARGET_DEF = rust/rust-target.def target-hooks-macros.h\n TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h insn-codes.h\n C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n COMMON_TARGET_H = common/common-target.h $(INPUT_H) $(COMMON_TARGET_DEF)\n D_TARGET_H = d/d-target.h $(D_TARGET_DEF)\n+RUST_TARGET_H = rust/rust-target.h $(RUST_TARGET_DEF)\n MACHMODE_H = machmode.h mode-classes.def\n HOOKS_H = hooks.h\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n@@ -1231,6 +1236,9 @@ D_TARGET_OBJS=@d_target_objs@\n # Target specific, Fortran specific object file\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n+# Target specific, Rust specific object file\n+RUST_TARGET_OBJS=@rust_target_objs@\n+\n # Object files for gcc many-languages driver.\n GCC_OBJS = gcc.o gcc-main.o ggc-none.o\n \n@@ -1938,6 +1946,7 @@ tconfig.h: cs-tconfig.h ; @true\n tm.h: cs-tm.h ; @true\n tm_p.h: cs-tm_p.h ; @true\n tm_d.h: cs-tm_d.h ; @true\n+tm_rust.h: cs-tm_rust.h ; @true\n \n cs-config.h: Makefile\n \tTARGET_CPU_DEFAULT=\"\" \\\n@@ -1969,6 +1978,11 @@ cs-tm_d.h: Makefile\n \tHEADERS=\"$(tm_d_include_list)\" DEFINES=\"\" \\\n \t$(SHELL) $(srcdir)/mkconfig.sh tm_d.h\n \n+cs-tm_rust.h: Makefile\n+\tTARGET_CPU_DEFAULT=\"\" \\\n+\tHEADERS=\"$(tm_rust_include_list)\" DEFINES=\"\" \\\n+\t$(SHELL) $(srcdir)/mkconfig.sh tm_rust.h\n+\n # Don't automatically run autoconf, since configure.ac might be accidentally\n # newer than configure.  Also, this writes into the source directory which\n # might be on a read-only file system.  If configured for maintainer mode\n@@ -2305,6 +2319,12 @@ default-d.o: config/default-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+# Files used by the Rust language front end.\n+\n+default-rust.o: config/default-rust.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n # Language-independent files.\n \n DRIVER_DEFINES = \\\n@@ -2610,6 +2630,15 @@ s-d-target-hooks-def-h: build/genhooks$(build_exeext)\n \t\t\t\t\t     d/d-target-hooks-def.h\n \t$(STAMP) s-d-target-hooks-def-h\n \n+rust/rust-target-hooks-def.h: s-rust-target-hooks-def-h; @true\n+\n+s-rust-target-hooks-def-h: build/genhooks$(build_exeext)\n+\t$(RUN_GEN) build/genhooks$(build_exeext) \"Rust Target Hook\" \\\n+\t\t\t\t\t     > tmp-rust-target-hooks-def.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-rust-target-hooks-def.h \\\n+\t\t\t\t\t     rust/rust-target-hooks-def.h\n+\t$(STAMP) s-rust-target-hooks-def-h\n+\n # check if someone mistakenly only changed tm.texi.\n # We use a different pathname here to avoid a circular dependency.\n s-tm-texi: $(srcdir)/doc/../doc/tm.texi\n@@ -2634,6 +2663,7 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/c-family/c-target.def \\\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/common/common-target.def \\\n \t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/d/d-target.def \\\n+\t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/rust/rust-target.def \\\n \t  ); then \\\n \t  echo >&2 ; \\\n \t  echo You should edit $(srcdir)/doc/tm.texi.in rather than $(srcdir)/doc/tm.texi . >&2 ; \\\n@@ -2792,6 +2822,7 @@ generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_H) multilib.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n        gimple-match.cc generic-match.cc \\\n        c-family/c-target-hooks-def.h d/d-target-hooks-def.h \\\n+       $(TM_RUST_H) rust/rust-target-hooks-def.h \\\n        case-cfn-macros.h \\\n        cfn-operators.pd omp-device-properties.h\n \n@@ -2926,7 +2957,8 @@ build/genrecog.o : genrecog.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\t\t\\\n   $(HASH_TABLE_H) inchash.h\n build/genhooks.o : genhooks.cc $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n-  $(COMMON_TARGET_DEF) $(D_TARGET_DEF) $(BCONFIG_H) $(SYSTEM_H) errors.h\n+  $(COMMON_TARGET_DEF) $(D_TARGET_DEF) $(RUST_TARGET_DEF) $(BCONFIG_H) \\\n+  $(SYSTEM_H) errors.h\n build/genmddump.o : genmddump.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genmatch.o : genmatch.cc $(BCONFIG_H) $(SYSTEM_H) \\"}, {"sha": "4cd81c85caf9dbcc869e660fc0eda64f55c50625", "filename": "gcc/config.gcc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -90,6 +90,9 @@\n #  tm_d_file\t\tA list of headers with definitions of target hook\n #\t\t\tmacros for the D compiler.\n #\n+#  tm_rust_file\t\tlist of headers with definitions of target hook\n+#\t\t\tmacros for the Rust compiler.\n+#\n #  out_file\t\tThe name of the machine description C support\n #\t\t\tfile, if different from \"$cpu_type/$cpu_type.c\".\n #\n@@ -149,6 +152,9 @@\n #  fortran_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the fortran compiler only.\n #\n+#  rust_target_objs\tList of extra target-dependent objects that be\n+#\t\t\tlinked into the Rust compiler only.\n+#\n #  target_gtfiles       List of extra source files with type information.\n #\n #  xm_defines\t\tList of macros to define when compiling for the\n@@ -201,6 +207,9 @@\n #\n #  target_has_targetdm\tSet to yes or no depending on whether the target\n #\t\t\thas its own definition of targetdm.\n+#\n+#  target_has_targetrustm\tSet to yes or no depending on whether the target\n+#\t\t\thas its own definition of targetrustm.\n \n out_file=\n common_out_file=\n@@ -218,9 +227,11 @@ c_target_objs=\n cxx_target_objs=\n d_target_objs=\n fortran_target_objs=\n+rust_target_objs=\n target_has_targetcm=no\n target_has_targetm_common=yes\n target_has_targetdm=no\n+target_has_targetrustm=no\n tm_defines=\n xm_defines=\n # Set this to force installation and use of collect2.\n@@ -569,6 +580,16 @@ then\n \ttm_d_file=\"${tm_d_file} ${cpu_type}/${cpu_type}-d.h\"\n fi\n \n+tm_rust_file=\n+if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-rust.h\n+then\n+\ttm_rust_file=\"${cpu_type}/${cpu_type}-rust.h\"\n+fi\n+if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-rust.cc\n+then\n+\trust_target_objs=\"${rust_target_objs} ${cpu_type}-rust.o\"\n+fi\n+\n extra_modes=\n if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-modes.def\n then\n@@ -735,8 +756,10 @@ case ${target} in\n   cxx_target_objs=\"${cxx_target_objs} darwin-c.o\"\n   d_target_objs=\"${d_target_objs} darwin-d.o\"\n   fortran_target_objs=\"darwin-f.o\"\n+  rust_target_objs=\"${rust_target_objs} darwin-rust.o\"\n   target_has_targetcm=yes\n   target_has_targetdm=yes\n+  target_has_targetrustm=yes\n   extra_objs=\"${extra_objs} darwin.o\"\n   extra_gcc_objs=\"darwin-driver.o\"\n   default_use_cxa_atexit=yes\n@@ -3544,6 +3567,10 @@ if [ \"$target_has_targetdm\" = \"no\" ]; then\n   d_target_objs=\"$d_target_objs default-d.o\"\n fi\n \n+if [ \"$target_has_targetrustm\" = \"no\" ]; then\n+  rust_target_objs=\"$rust_target_objs default-rust.o\"\n+fi\n+\n # Support for --with-cpu and related options (and a few unrelated options,\n # too).\n case ${with_cpu} in"}, {"sha": "4b014b88c5217770dee1230ad7395e9c0d95d5d5", "filename": "gcc/config/darwin-rust.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fdarwin-rust.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fdarwin-rust.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-rust.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,44 @@\n+/* Darwin support needed only by Rust front-end.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_rust.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_OS_INFO for Darwin targets.  */\n+\n+static void\n+darwin_rust_target_os_info (void)\n+{\n+  rust_add_target_info (\"target_family\", \"unix\");\n+\n+  /* TODO: rust actually has \"macos\", \"ios\", and \"tvos\" for darwin targets, but\n+     gcc seems to have no current support for them, so assuming that target_os\n+     is always macos for now.  */\n+  rust_add_target_info (\"target_os\", \"macos\");\n+  rust_add_target_info (\"target_vendor\", \"apple\");\n+  rust_add_target_info (\"target_env\", \"\");\n+}\n+\n+#undef TARGET_RUST_OS_INFO\n+#define TARGET_RUST_OS_INFO darwin_rust_target_os_info\n+\n+struct gcc_targetrustm targetrustm = TARGETRUSTM_INITIALIZER;"}, {"sha": "aa098cbb806d1efd9182d657fd6b50ebcd5ab4b6", "filename": "gcc/config/default-rust.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fdefault-rust.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fdefault-rust.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdefault-rust.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,29 @@\n+/* Default Rust language target hooks initializer.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm_rust.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Do not include tm.h or tm_p.h here; definitions needed by the target\n+   architecture to initialize targetrustm should instead be added to tm_rust.h.\n+ */\n+\n+struct gcc_targetrustm targetrustm = TARGETRUSTM_INITIALIZER;"}, {"sha": "a00c4f8cee1efe4e8302802ab83fe5ddfd8fc19c", "filename": "gcc/config/i386/i386-rust.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Fi386-rust.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Fi386-rust.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,129 @@\n+/* Subroutines for the Rust front end on the x86 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_rust.h\"\n+#include \"rust/rust-target.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for x86 targets.  */\n+\n+void\n+ix86_rust_target_cpu_info (void)\n+{\n+  if (TARGET_64BIT)\n+    rust_add_target_info (\"target_arch\", \"x86_64\");\n+  else\n+    rust_add_target_info (\"target_arch\", \"x86\");\n+\n+  // features officially \"stabilised\" in rustc\n+  if (TARGET_MMX)\n+    rust_add_target_info (\"target_feature\", \"mmx\");\n+  if (TARGET_SSE)\n+    rust_add_target_info (\"target_feature\", \"sse\");\n+  if (TARGET_SSE2)\n+    rust_add_target_info (\"target_feature\", \"sse2\");\n+  if (TARGET_SSE3)\n+    rust_add_target_info (\"target_feature\", \"sse3\");\n+  if (TARGET_SSSE3)\n+    rust_add_target_info (\"target_feature\", \"ssse3\");\n+  if (TARGET_SSE4_1)\n+    rust_add_target_info (\"target_feature\", \"sse4.1\");\n+  if (TARGET_SSE4_2)\n+    rust_add_target_info (\"target_feature\", \"sse4.2\");\n+  if (TARGET_AES)\n+    rust_add_target_info (\"target_feature\", \"aes\");\n+  if (TARGET_SHA)\n+    rust_add_target_info (\"target_feature\", \"sha\");\n+  if (TARGET_AVX)\n+    rust_add_target_info (\"target_feature\", \"avx\");\n+  if (TARGET_AVX2)\n+    rust_add_target_info (\"target_feature\", \"avx2\");\n+  if (TARGET_AVX512F)\n+    rust_add_target_info (\"target_feature\", \"avx512f\");\n+  if (TARGET_AVX512ER)\n+    rust_add_target_info (\"target_feature\", \"avx512er\");\n+  if (TARGET_AVX512CD)\n+    rust_add_target_info (\"target_feature\", \"avx512cd\");\n+  if (TARGET_AVX512PF)\n+    rust_add_target_info (\"target_feature\", \"avx512pf\");\n+  if (TARGET_AVX512DQ)\n+    rust_add_target_info (\"target_feature\", \"avx512dq\");\n+  if (TARGET_AVX512BW)\n+    rust_add_target_info (\"target_feature\", \"avx512bw\");\n+  if (TARGET_AVX512VL)\n+    rust_add_target_info (\"target_feature\", \"avx512vl\");\n+  if (TARGET_AVX512VBMI)\n+    rust_add_target_info (\"target_feature\", \"avx512vbmi\");\n+  if (TARGET_AVX512IFMA)\n+    rust_add_target_info (\"target_feature\", \"avx512ifma\");\n+  if (TARGET_AVX512VPOPCNTDQ)\n+    rust_add_target_info (\"target_feature\", \"avx512vpopcntdq\");\n+  if (TARGET_FMA)\n+    rust_add_target_info (\"target_feature\", \"fma\");\n+  if (TARGET_RTM)\n+    rust_add_target_info (\"target_feature\", \"rtm\");\n+  if (TARGET_SSE4A)\n+    rust_add_target_info (\"target_feature\", \"sse4a\");\n+  if (TARGET_BMI)\n+    {\n+      rust_add_target_info (\"target_feature\", \"bmi1\");\n+      rust_add_target_info (\"target_feature\", \"bmi\");\n+    }\n+  if (TARGET_BMI2)\n+    rust_add_target_info (\"target_feature\", \"bmi2\");\n+  if (TARGET_LZCNT)\n+    rust_add_target_info (\"target_feature\", \"lzcnt\");\n+  if (TARGET_TBM)\n+    rust_add_target_info (\"target_feature\", \"tbm\");\n+  if (TARGET_POPCNT)\n+    rust_add_target_info (\"target_feature\", \"popcnt\");\n+  if (TARGET_RDRND)\n+    {\n+      rust_add_target_info (\"target_feature\", \"rdrand\");\n+      rust_add_target_info (\"target_feature\", \"rdrnd\");\n+    }\n+  if (TARGET_F16C)\n+    rust_add_target_info (\"target_feature\", \"f16c\");\n+  if (TARGET_RDSEED)\n+    rust_add_target_info (\"target_feature\", \"rdseed\");\n+  if (TARGET_ADX)\n+    rust_add_target_info (\"target_feature\", \"adx\");\n+  if (TARGET_FXSR)\n+    rust_add_target_info (\"target_feature\", \"fxsr\");\n+  if (TARGET_XSAVE)\n+    rust_add_target_info (\"target_feature\", \"xsave\");\n+  if (TARGET_XSAVEOPT)\n+    rust_add_target_info (\"target_feature\", \"xsaveopt\");\n+  if (TARGET_XSAVEC)\n+    rust_add_target_info (\"target_feature\", \"xsavec\");\n+  if (TARGET_XSAVES)\n+    rust_add_target_info (\"target_feature\", \"xsaves\");\n+  if (TARGET_VPCLMULQDQ)\n+    {\n+      rust_add_target_info (\"target_feature\", \"pclmulqdq\");\n+      rust_add_target_info (\"target_feature\", \"vpclmulqdq\");\n+    }\n+  if (TARGET_CMPXCHG16B)\n+    rust_add_target_info (\"target_feature\", \"cmpxchg16b\");\n+  if (TARGET_MOVBE)\n+    rust_add_target_info (\"target_feature\", \"movbe\");\n+}"}, {"sha": "a837e2f1c740d34822f2f5350cbda91dc54a62e8", "filename": "gcc/config/i386/i386-rust.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Fi386-rust.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Fi386-rust.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.h?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,22 @@\n+/* Definitions for the Rust front end on the x86 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* In i386-rust.cc  */\n+extern void ix86_rust_target_cpu_info (void);\n+\n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO ix86_rust_target_cpu_info"}, {"sha": "61ddfcab6baa4518f313ac51d23cc4309479ed44", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -46,6 +46,10 @@ i386-d.o: $(srcdir)/config/i386/i386-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+i386-rust.o: $(srcdir)/config/i386/i386-rust.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n i386-options.o: $(srcdir)/config/i386/i386-options.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "6862e5a7fa5ec94a91b0bded4230812f4a420ef8", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -34,6 +34,10 @@ darwin-f.o: $(srcdir)/config/darwin-f.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+darwin-rust.o: $(srcdir)/config/darwin-rust.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n darwin-driver.o: $(srcdir)/config/darwin-driver.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "66271fc6c7ce5d87776e52220b89807f092ecb9a", "filename": "gcc/configure", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -644,6 +644,7 @@ ISLLIBS\n GMPINC\n GMPLIBS\n target_cpu_default\n+rust_target_objs\n d_target_objs\n fortran_target_objs\n cxx_target_objs\n@@ -652,6 +653,8 @@ use_gcc_stdint\n xm_defines\n xm_include_list\n xm_file_list\n+tm_rust_include_list\n+tm_rust_file_list\n tm_d_include_list\n tm_d_file_list\n tm_p_include_list\n@@ -13427,6 +13430,17 @@ for f in $tm_d_file; do\n   esac\n done\n \n+tm_rust_file_list=\n+tm_rust_include_list=\n+for f in $tm_rust_file; do\n+  case $f in\n+    * )\n+       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/config/$f\"\n+       tm_rust_include_list=\"${tm_rust_include_list} config/$f\"\n+       ;;\n+  esac\n+done\n+\n xm_file_list=\n xm_include_list=\n for f in $xm_file; do\n@@ -19689,7 +19703,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19692 \"configure\"\n+#line 19706 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19795,7 +19809,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19798 \"configure\"\n+#line 19812 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -31644,6 +31658,9 @@ fi\n \n \n \n+\n+\n+\n \n \n "}, {"sha": "c8998aafb8c825ff0542e7319b093c178cdce6f7", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -2362,6 +2362,17 @@ for f in $tm_d_file; do\n   esac\n done\n \n+tm_rust_file_list=\n+tm_rust_include_list=\n+for f in $tm_rust_file; do\n+  case $f in\n+    * )\n+       tm_rust_file_list=\"${tm_rust_file_list} \\$(srcdir)/config/$f\"\n+       tm_rust_include_list=\"${tm_rust_include_list} config/$f\"\n+       ;;\n+  esac\n+done\n+\n xm_file_list=\n xm_include_list=\n for f in $xm_file; do\n@@ -7310,6 +7321,8 @@ AC_SUBST(tm_p_file_list)\n AC_SUBST(tm_p_include_list)\n AC_SUBST(tm_d_file_list)\n AC_SUBST(tm_d_include_list)\n+AC_SUBST(tm_rust_file_list)\n+AC_SUBST(tm_rust_include_list)\n AC_SUBST(xm_file_list)\n AC_SUBST(xm_include_list)\n AC_SUBST(xm_defines)\n@@ -7318,6 +7331,7 @@ AC_SUBST(c_target_objs)\n AC_SUBST(cxx_target_objs)\n AC_SUBST(fortran_target_objs)\n AC_SUBST(d_target_objs)\n+AC_SUBST(rust_target_objs)\n AC_SUBST(target_cpu_default)\n \n AC_SUBST_FILE(language_hooks)"}, {"sha": "75ae4b2aebe66d6f794811e8a9a1fbb0f88dede1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -53,6 +53,7 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n+* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -115,6 +116,14 @@ initialize @code{targetdm} themselves, they should set\n @code{target_has_targetdm=yes} in @file{config.gcc}; otherwise a default\n definition is used.\n \n+Similarly, there is a @code{targetrustm} variable for hooks that are\n+specific to the Rust language front end, documented as ``Rust Target\n+Hook''.  This is declared in @file{rust/rust-target.h}, the initializer\n+@code{TARGETRUSTM_INITIALIZER} in @file{rust/rust-target-def.h}.\n+If targets initialize @code{targetrustm} themselves, they should set\n+@code{target_has_targetrustm=yes} in @file{config.gcc}; otherwise a\n+default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -10874,6 +10883,23 @@ if they have external linkage.  If this flag is false, then instantiated\n decls will be emitted as weak symbols.  The default is @code{false}.\n @end deftypevr\n \n+@node Rust Language and ABI\n+@section Rust ABI parameters\n+@cindex parameters, rust abi\n+\n+@deftypefn {Rust Target Hook} void TARGET_RUST_CPU_INFO (void)\n+Declare all environmental CPU info and features relating to the target CPU\n+using the function @code{rust_add_target_info}, which takes a string\n+representing the feature key and a string representing the feature value.\n+Configuration pairs predefined by this hook apply to all files that are being\n+compiled.\n+@end deftypefn\n+\n+@deftypefn {Rust Target Hook} void TARGET_RUST_OS_INFO (void)\n+Similar to @code{TARGET_RUST_CPU_INFO}, but is used for configuration info\n+relating to the target operating system.\n+@end deftypefn\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "c8c2b8bd83ccb314e37f93cd27ea5f32f673174e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -53,6 +53,7 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n+* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -115,6 +116,14 @@ initialize @code{targetdm} themselves, they should set\n @code{target_has_targetdm=yes} in @file{config.gcc}; otherwise a default\n definition is used.\n \n+Similarly, there is a @code{targetrustm} variable for hooks that are\n+specific to the Rust language front end, documented as ``Rust Target\n+Hook''.  This is declared in @file{rust/rust-target.h}, the initializer\n+@code{TARGETRUSTM_INITIALIZER} in @file{rust/rust-target-def.h}.\n+If targets initialize @code{targetrustm} themselves, they should set\n+@code{target_has_targetrustm=yes} in @file{config.gcc}; otherwise a\n+default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -7119,6 +7128,14 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_TEMPLATES_ALWAYS_COMDAT\n \n+@node Rust Language and ABI\n+@section Rust ABI parameters\n+@cindex parameters, rust abi\n+\n+@hook TARGET_RUST_CPU_INFO\n+\n+@hook TARGET_RUST_OS_INFO\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "4e1338d21b7f229b3eb9ac357437a893f3ce8cd5", "filename": "gcc/genhooks.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fgenhooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Fgenhooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -35,6 +35,7 @@ static struct hook_desc hook_array[] = {\n #include \"c-family/c-target.def\"\n #include \"common/common-target.def\"\n #include \"d/d-target.def\"\n+#include \"rust/rust-target.def\"\n #undef DEFHOOK\n };\n "}, {"sha": "ed822cc4f139fdac00d4e32d233a35c253f3f933", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -104,8 +104,6 @@ struct GTY (()) language_function\n void\n rust_add_target_info (const char *key, const char *value)\n {\n-  sorry (\"TODO\");\n-\n   Rust::Session::get_instance ().options.target_data.insert_key_value_pair (\n     key, value);\n }"}, {"sha": "ef1a85d9a5667ec9d08bcdb2d9368d77ffa26325", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -42,7 +42,8 @@\n #include \"diagnostic.h\"\n #include \"input.h\"\n #include \"selftest.h\"\n-#include \"target.h\"\n+#include \"tm.h\"\n+#include \"rust-target.h\"\n \n extern bool\n saw_errors (void);\n@@ -135,6 +136,11 @@ validate_crate_name (const std::string &crate_name, Error &error)\n void\n Session::init ()\n {\n+  // initialize target hooks\n+  targetrustm.rust_cpu_info ();\n+  targetrustm.rust_os_info ();\n+\n+  // target-independent values that should exist in all targets\n   options.target_data.insert_key_value_pair (\"target_pointer_width\",\n \t\t\t\t\t     std::to_string (POINTER_SIZE));\n   options.target_data.insert_key_value_pair (\"target_endian\", BYTES_BIG_ENDIAN"}, {"sha": "8534c4b68c302d486864e83d9ea87ec36144e7ff", "filename": "gcc/rust/rust-target-def.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target-def.h?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,20 @@\n+/* Default initializers for Rust target hooks.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"rust/rust-target-hooks-def.h\"\n+#include \"tree.h\"\n+#include \"hooks.h\""}, {"sha": "9c72c1c86d3a89714ce26fc01f09610a796fa644", "filename": "gcc/rust/rust-target.def", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.def?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,52 @@\n+/* Target hook definitions for the Rust front end.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* See target-hooks-macros.h for details of macros that should be\n+   provided by the including file, and how to use them here.  */\n+\n+#include \"target-hooks-macros.h\"\n+\n+#undef HOOK_TYPE\n+#define HOOK_TYPE \"Rust Target Hook\"\n+\n+HOOK_VECTOR (TARGETRUSTM_INITIALIZER, gcc_targetrustm)\n+\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_\"\n+\n+/* Environmental CPU info and features (e.g. endianness, pointer size) relating\n+   to the target CPU.  */\n+DEFHOOK\n+(rust_cpu_info,\n+ \"Declare all environmental CPU info and features relating to the target CPU\\n\\\n+using the function @code{rust_add_target_info}, which takes a string\\n\\\n+representing the feature key and a string representing the feature value.\\n\\\n+Configuration pairs predefined by this hook apply to all files that are being\\n\\\n+compiled.\",\n+ void, (void),\n+ hook_void_void)\n+\n+/* Environmental OS info relating to the target OS.  */\n+DEFHOOK\n+(rust_os_info,\n+ \"Similar to @code{TARGET_RUST_CPU_INFO}, but is used for configuration info\\n\\\n+relating to the target operating system.\",\n+ void, (void),\n+ hook_void_void)\n+\n+/* Close the 'struct gcc_targetrustm' definition.  */\n+HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "7fcdfc99b81e23be06f514d5045ddbf8e20a3ad0", "filename": "gcc/rust/rust-target.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef31ea273689021f0fc8168f417edf386060512/gcc%2Frust%2Frust-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.h?ref=bef31ea273689021f0fc8168f417edf386060512", "patch": "@@ -0,0 +1,35 @@\n+/* Data structure definitions for target-specific Rust behavior.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RUST_TARGET_H\n+#define GCC_RUST_TARGET_H\n+\n+#define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n+#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (*NAME) PARAMS;\n+#define DEFHOOK_UNDOC DEFHOOK\n+#define HOOKSTRUCT(FRAGMENT) FRAGMENT\n+\n+#include \"rust-target.def\"\n+\n+/* Used by target to add target-related info.  */\n+extern void\n+rust_add_target_info (const char *, const char *);\n+\n+/* Each target can provide their own.  */\n+extern struct gcc_targetrustm targetrustm;\n+\n+#endif /* GCC_RUST_TARGET_H  */"}]}