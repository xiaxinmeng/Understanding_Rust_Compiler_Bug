{"sha": "3916902930769d5172c0feaa5f535ca7b2bafdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxNjkwMjkzMDc2OWQ1MTcyYzBmZWFhNWY1MzVjYTdiMmJhZmRmNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-29T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-29T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "45d625de626c23c586d9d982e0c51737d68b59dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d625de626c23c586d9d982e0c51737d68b59dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3916902930769d5172c0feaa5f535ca7b2bafdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3916902930769d5172c0feaa5f535ca7b2bafdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3916902930769d5172c0feaa5f535ca7b2bafdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3916902930769d5172c0feaa5f535ca7b2bafdf7/comments", "author": null, "committer": null, "parents": [{"sha": "1121e495b70105deeb82295f8210e30f2080bc37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1121e495b70105deeb82295f8210e30f2080bc37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1121e495b70105deeb82295f8210e30f2080bc37"}], "stats": {"total": 489, "additions": 488, "deletions": 1}, "files": [{"sha": "98eef36c1987fb31f99562dbec60a311906c807b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,197 @@\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101494\n+\t* tree-ssa-uninit.c (maybe_warn_operand): Correct object offset\n+\tand size computation.\n+\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101601\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_mem_ref): Remove\n+\ta pointless test.\n+\tHandle pointers to functions.\n+\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-ssa-warn-access.o and pointer-query.o.\n+\t* attribs.h (fndecl_dealloc_argno): Move fndecl_dealloc_argno to tree.h.\n+\t* builtins.c (compute_objsize_r): Move to pointer-query.cc.\n+\t(access_ref::access_ref): Same.\n+\t(access_ref::phi): Same.\n+\t(access_ref::get_ref): Same.\n+\t(access_ref::size_remaining): Same.\n+\t(access_ref::offset_in_range): Same.\n+\t(access_ref::add_offset): Same.\n+\t(access_ref::inform_access): Same.\n+\t(ssa_name_limit_t::visit_phi): Same.\n+\t(ssa_name_limit_t::leave_phi): Same.\n+\t(ssa_name_limit_t::next): Same.\n+\t(ssa_name_limit_t::next_phi): Same.\n+\t(ssa_name_limit_t::~ssa_name_limit_t): Same.\n+\t(pointer_query::pointer_query): Same.\n+\t(pointer_query::get_ref): Same.\n+\t(pointer_query::put_ref): Same.\n+\t(pointer_query::flush_cache): Same.\n+\t(warn_string_no_nul): Move to gimple-ssa-warn-access.cc.\n+\t(check_nul_terminated_array): Same.\n+\t(unterminated_array): Same.\n+\t(maybe_warn_for_bound): Same.\n+\t(check_read_access): Same.\n+\t(warn_for_access): Same.\n+\t(get_size_range): Same.\n+\t(check_access): Same.\n+\t(gimple_call_alloc_size): Move to tree.c.\n+\t(gimple_parm_array_size): Move to pointer-query.cc.\n+\t(get_offset_range): Same.\n+\t(gimple_call_return_array): Same.\n+\t(handle_min_max_size): Same.\n+\t(handle_array_ref): Same.\n+\t(handle_mem_ref): Same.\n+\t(compute_objsize): Same.\n+\t(gimple_call_alloc_p): Move to gimple-ssa-warn-access.cc.\n+\t(call_dealloc_argno): Same.\n+\t(fndecl_dealloc_argno): Same.\n+\t(new_delete_mismatch_p): Same.\n+\t(matching_alloc_calls_p): Same.\n+\t(warn_dealloc_offset): Same.\n+\t(maybe_emit_free_warning): Same.\n+\t* builtins.h (check_nul_terminated_array): Move to\n+\tgimple-ssa-warn-access.h.\n+\t(check_nul_terminated_array): Same.\n+\t(warn_string_no_nul): Same.\n+\t(unterminated_array): Same.\n+\t(class ssa_name_limit_t): Same.\n+\t(class pointer_query): Same.\n+\t(struct access_ref): Same.\n+\t(class range_query): Same.\n+\t(struct access_data): Same.\n+\t(gimple_call_alloc_size): Same.\n+\t(gimple_parm_array_size): Same.\n+\t(compute_objsize): Same.\n+\t(class access_data): Same.\n+\t(maybe_emit_free_warning): Same.\n+\t* calls.c (initialize_argument_information): Remove call to\n+\tmaybe_emit_free_warning.\n+\t* gimple-array-bounds.cc: Include new header..\n+\t* gimple-fold.c: Same.\n+\t* gimple-ssa-sprintf.c: Same.\n+\t* gimple-ssa-warn-restrict.c: Same.\n+\t* passes.def: Add pass_warn_access.\n+\t* tree-pass.h (make_pass_warn_access): Declare.\n+\t* tree-ssa-strlen.c: Include new headers.\n+\t* tree.c (fndecl_dealloc_argno): Move here from builtins.c.\n+\t* tree.h (fndecl_dealloc_argno): Move here from attribs.h.\n+\t* gimple-ssa-warn-access.cc: New file.\n+\t* gimple-ssa-warn-access.h: New file.\n+\t* pointer-query.cc: New file.\n+\t* pointer-query.h: New file.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101624\n+\t* ubsan.c (maybe_instrument_pointer_overflow,\n+\tinstrument_object_size): Only test DECL_REGISTER on VAR_DECLs,\n+\tPARM_DECLs or RESULT_DECLs.\n+\t* sanopt.c (maybe_optimize_ubsan_ptr_ifn): Likewise.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101642\n+\t* match.pd (bswap16 (x) == bswap16 (y)): Cast both operands\n+\tto type of bswap16 for comparison.\n+\t(bswap16 (x) == cst): Cast bswap16 operand to type of cst.\n+\n+2021-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101615\n+\t* tree-vect-slp.c (vect_optimize_slp): Materialize permutes\n+\tat CTOR SLP graph entries.\n+\n+2021-07-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*extend<SHORT:mode><GPI:mode>2_aarch64):\n+\tAdd \"r,w\" alternative.\n+\n+2021-07-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101456\n+\t* config/i386/i386.c (ix86_avx_u128_mode_needed): Don't set\n+\tAVX_U128_DIRTY when all bits are zero.\n+\n+2021-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101615\n+\t* tree-vect-slp.c (vect_optimize_slp): Pre-existing vector\n+\texternal nodes cannot be permuted so make them perm_out 0.\n+\n+2021-07-28  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/100208\n+\t* config.in: Regenerate.\n+\t* config/gcn/gcn-hsa.h (A_FIJI): New define.\n+\t(A_900): New define.\n+\t(A_906): New define.\n+\t(A_908): New define.\n+\t(ASM_SPEC): Use A_FIJI, A_900, A_906 and A_908.\n+\t* config/gcn/gcn.c (output_file_start): Adjust attributes according\n+\tto the assembler capabilities.\n+\t* config/gcn/mkoffload.c (main): Likewise.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add tests for LLVM assembler attribute features.\n+\n+2021-07-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::outgoing_edge_range_p): Check for\n+\tcond_false and cond_true on branches.\n+\n+2021-07-28  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): use\n+\tgcc_stablesort.\n+\n+2021-07-28  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* alias.c (init_alias_analysis): Don't skip prologue/epilogue.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101611\n+\t* config/i386/sse.md (vashr<mode>3): Split into vashrv8di3 expander\n+\tand vashrv4di3 expander, where the latter requires just TARGET_AVX2\n+\tand has special !TARGET_AVX512VL expansion.\n+\t(vashrv2di3<mask_name>): Rename to ...\n+\t(vashrv2di3): ... this.  Change condition to TARGET_XOP || TARGET_AVX2\n+\tand add special !TARGET_XOP && !TARGET_AVX512VL expansion.\n+\n+2021-07-28  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* calls.c (maybe_warn_rdwr_sizes): Correct argument\n+\tnumbers in warning that were switched.\n+\n+2021-07-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/101596\n+\t* tree-vect-patterns.c (vect_recog_mulhs_pattern): Fix wrong check\n+\tby using new_type's precision instead.\n+\n+2021-07-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/99881\n+\t* config/i386/i386.h (processor_costs): Add new member\n+\tinteger_to_sse.\n+\t* config/i386/x86-tune-costs.h (ix86_size_cost, i386_cost,\n+\ti486_cost, pentium_cost, lakemont_cost, pentiumpro_cost,\n+\tgeode_cost, k6_cost, athlon_cost, k8_cost, amdfam10_cost,\n+\tbdver_cost, znver1_cost, znver2_cost, znver3_cost,\n+\tbtver1_cost, btver2_cost, btver3_cost, pentium4_cost,\n+\tnocona_cost, atom_cost, atom_cost, slm_cost, intel_cost,\n+\tgeneric_cost, core_cost): Initialize integer_to_sse same value\n+\tas sse_op.\n+\t(skylake_cost): Initialize integer_to_sse twice as much as sse_op.\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost):\n+\tUse integer_to_sse instead of sse_op to calculate the cost of\n+\tvec_construct.\n+\n 2021-07-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000-gen-builtins.c (write_ovld_static_init): New"}, {"sha": "15aac4430a7d2710302c091bd679ea8e367a29fd", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1 +1 @@\n-20210728\n+20210729"}, {"sha": "bc0f4bd92e8bb2901c0b9419de37d97355c4f9c3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,46 @@\n+2021-07-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::on_call_pre): Treat\n+\tIFN_UBSAN_BOUNDS, BUILT_IN_STACK_SAVE, and BUILT_IN_STACK_RESTORE\n+\tas no-ops, rather than handling them as unknown functions.\n+\n+2021-07-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-impl-calls.cc (region_model::impl_call_alloca):\n+\tDrop redundant return value.\n+\t(region_model::impl_call_builtin_expect): Likewise.\n+\t(region_model::impl_call_calloc): Likewise.\n+\t(region_model::impl_call_malloc): Likewise.\n+\t(region_model::impl_call_memset): Likewise.\n+\t(region_model::impl_call_operator_new): Likewise.\n+\t(region_model::impl_call_operator_delete): Likewise.\n+\t(region_model::impl_call_strlen): Likewise.\n+\t* region-model.cc (region_model::on_call_pre): Fix return value of\n+\tknown functions that don't have unknown side-effects.\n+\t* region-model.h (region_model::impl_call_alloca): Drop redundant\n+\treturn value.\n+\t(region_model::impl_call_builtin_expect): Likewise.\n+\t(region_model::impl_call_calloc): Likewise.\n+\t(region_model::impl_call_malloc): Likewise.\n+\t(region_model::impl_call_memset): Likewise.\n+\t(region_model::impl_call_strlen): Likewise.\n+\t(region_model::impl_call_operator_new): Likewise.\n+\t(region_model::impl_call_operator_delete): Likewise.\n+\n+2021-07-28  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* analyzer.cc (is_named_call_p, is_std_named_call_p): Make\n+\tfirst argument a const_tree.\n+\t* analyzer.h (is_named_call_p, -s_std_named_call_p): Likewise.\n+\t* sm-malloc.cc (known_allocator_p): New function.\n+\t(malloc_state_machine::on_stmt): Use it.\n+\n+2021-07-28  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* sm-malloc.cc\n+\t(malloc_state_machine::get_or_create_deallocator): Recognize\n+\t__builtin_free.\n+\n 2021-07-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (region_model::on_call_pre): Always set conjured"}, {"sha": "27323bb0151fed0933707a3dce7b9a10019f710b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,7 @@\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* init.c: Include new header.\n+\n 2021-07-27  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1512"}, {"sha": "6bf4b8fd48907706cb172512df29f2c126348ad6", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,32 @@\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101640\n+\t* expr.cc (binary_op): Use build2 instead of fold_build2.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101490\n+\t* dmd/MERGE: Merge upstream dmd 27e388b4c.\n+\t* d-codegen.cc (build_array_index): Handle void arrays same as byte.\n+\t* d-convert.cc (convert_expr): Handle converting to zero-sized arrays.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101441\n+\t* dmd/MERGE: Merge upstream dmd f8c1ca928.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101127\n+\t* d-builtins.cc (d_builtin_function_ext_scope): New function.\n+\t* d-lang.cc (LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE): Define.\n+\t* d-tree.h (d_builtin_function_ext_scope): Declare.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101619\n+\t* dmd/MERGE: Merge upstream dmd 1d8386a63.\n+\n 2021-07-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/101273"}, {"sha": "c757bf0ff74212041a4517529516b0eebb47bc6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,16 @@\n+2021-07-28  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101564\n+\t* expr.c (gfc_check_vardef_context): Add check for KIND and LEN\n+\tparameter inquiries.\n+\t* match.c (gfc_match): Fix comment for %v code.\n+\t(gfc_match_allocate, gfc_match_deallocate): Replace use of %v code\n+\tby %e in gfc_match to allow for function references as STAT and\n+\tERRMSG arguments.\n+\t* resolve.c (resolve_allocate_deallocate): Avoid NULL pointer\n+\tdereferences and shortcut for bad STAT and ERRMSG argument to\n+\t(DE)ALLOCATE.  Remove bogus parts of checks for STAT and ERRMSG.\n+\n 2021-07-26  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "d770de1e069bb77bfb6e4e809e0f26f36cd62f0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,159 @@\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101494\n+\t* gcc.dg/uninit-pr101494.c: New test.\n+\n+2021-07-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101601\n+\t* g++.dg/warn/Warray-bounds-25.C: New test.\n+\t* gcc.dg/Warray-bounds-85.c: New test.\n+\n+2021-07-28  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR testsuite/100168\n+\t* gcc.dg/pr56727-2.c: Add support for PC-relative calls.\n+\n+2021-07-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/torture/ubsan-1.c: New test.\n+\n+2021-07-28  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101564\n+\t* gfortran.dg/allocate_stat_3.f90: New test.\n+\t* gfortran.dg/allocate_stat.f90: Adjust error messages.\n+\t* gfortran.dg/implicit_11.f90: Likewise.\n+\t* gfortran.dg/inquiry_type_ref_3.f90: Likewise.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101624\n+\t* gfortran.dg/ubsan/ubsan.exp: New file.\n+\t* gfortran.dg/ubsan/pr101624.f90: New test.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101642\n+\t* gcc.c-torture/compile/pr101642.c: New test.\n+\n+2021-07-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/global-array-element-pic2.c: Add -mzarch, add\n+\tan expectation for 31-bit mode.\n+\t* gcc.target/s390/load-imm64-1.c: Use unsigned long long.\n+\t* gcc.target/s390/load-imm64-2.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-vx-macro-off-on.c: Use\n+\t-mzarch.\n+\t* gcc.target/s390/vector/long-double-vx-macro-on-off.c:\n+\tLikewise.\n+\n+2021-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101615\n+\t* gcc.dg/vect/bb-slp-pr101615-2.c: New testcase.\n+\n+2021-07-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/smov_1.c: New test.\n+\t* gcc.target/aarch64/sve/clastb_4.c: Adjust clast scan-assembler.\n+\n+2021-07-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101456\n+\t* gcc.target/i386/pr101456-1.c: New test.\n+\t* gcc.target/i386/pr101456-2.c: Likewise.\n+\n+2021-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101615\n+\t* gcc.dg/vect/bb-slp-pr101615-1.c: New testcase.\n+\n+2021-07-28  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/analyzer/strdup-1.c (test_4, test_5, test_6): New\n+\ttests.\n+\n+2021-07-28  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* gcc.dg/analyzer/attr-malloc-1.c (compatible_alloc,\n+\tcompatible_alloc2): New extern allocator declarations.\n+\t(test_9, test_10): New tests.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101640\n+\t* gdc.dg/pr96429.d: Update test.\n+\t* gdc.dg/pr101640.d: New test.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101490\n+\t* gdc.dg/pr101490.d: New test.\n+\n+2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101127\n+\t* gdc.dg/pr101127a.d: New test.\n+\t* gdc.dg/pr101127b.d: New test.\n+\n+2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101611\n+\t* gcc.target/i386/avx2-pr101611-1.c: New test.\n+\t* gcc.target/i386/avx2-pr101611-2.c: New test.\n+\n+2021-07-28  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* gcc.dg/Wnonnull-4.c: Correct argument numbers in warnings.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101317\n+\t* gfortran.dg/ISO_Fortran_binding_17.f90: Fix typo in error\n+\tmessage patterns.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101310\n+\t* gfortran.dg/ISO_Fortran_binding_1.c (section_c): Remove\n+\tincorrect assertions.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\t* gfortran.dg/ISO_Fortran_binding_1.c: Adjust include path.\n+\t* gfortran.dg/ISO_Fortran_binding_10.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_11.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_12.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_15.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_16.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_17.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_18.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_3.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_5.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_6.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_7.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_8.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_9.c: Likewise.\n+\t* gfortran.dg/PR94327.c: Likewise.\n+\t* gfortran.dg/PR94331.c: Likewise.\n+\t* gfortran.dg/bind_c_array_params_3_aux.c: Likewise.\n+\t* gfortran.dg/iso_fortran_binding_uint8_array_driver.c: Likewise.\n+\t* gfortran.dg/pr93524.c: Likewise.\n+\n+2021-07-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/101596\n+\t* gcc.target/powerpc/pr101596-1.c: New test.\n+\t* gcc.target/powerpc/pr101596-2.c: Likewise.\n+\t* gcc.target/powerpc/pr101596-3.c: Likewise.\n+\n+2021-07-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/99881\n+\t* gcc.target/i386/pr99881.c: New test.\n+\n 2021-07-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/101584"}, {"sha": "437431424439ea8fe7eaa279a1ef9bc1a377cb41", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,46 @@\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101317\n+\t* runtime/ISO_Fortran_binding.c: Include <inttypes.h>.\n+\t(CFI_address): Tidy error messages and comments.\n+\t(CFI_allocate): Likewise.\n+\t(CFI_deallocate): Likewise.\n+\t(CFI_establish): Likewise.  Add new checks for validity of\n+\telem_len when it's used, plus type argument and extents.\n+\t(CFI_is_contiguous): Tidy error messages and comments.\n+\t(CFI_section): Likewise.  Refactor some repetitive code to\n+\tmake it more understandable.\n+\t(CFI_select_part): Likewise.\n+\t(CFI_setpointer): Likewise.  Check that source is not an\n+\tunallocated allocatable array or an assumed-size array.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101310\n+\t* runtime/ISO_Fortran_binding.c (CFI_section): Fix the base\n+\taddress computation and simplify the code.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\t* runtime/ISO_Fortran_binding.c (CFI_establish): Special-case\n+\tCFI_type_cptr and CFI_type_cfunptr.  Correct size of long double\n+\ton targets where it has kind 10.\n+\n+2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\t* ISO_Fortran_binding.h: Fix hard-coded sizes and split into...\n+\t* ISO_Fortran_binding-1-tmpl.h: New file.\n+\t* ISO_Fortran_binding-2-tmpl.h: New file.\n+\t* ISO_Fortran_binding-3-tmpl.h: New file.\n+\t* Makefile.am: Add rule for generating ISO_Fortran_binding.h.\n+\tAdjust pathnames to that file.\n+\t* Makefile.in: Regenerated.\n+\t* mk-kinds-h.sh: New file.\n+\t* runtime/ISO_Fortran_binding.c: Fix include path.\n+\n 2021-07-26  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "765b7d4f82047d17a2a943b793a51e6116a5ac76", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3916902930769d5172c0feaa5f535ca7b2bafdf7/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3916902930769d5172c0feaa5f535ca7b2bafdf7/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=3916902930769d5172c0feaa5f535ca7b2bafdf7", "patch": "@@ -1,3 +1,8 @@\n+2021-07-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* configure.tgt (s390*-*-linux*): Enable LSan and TSan for\n+\ts390x.\n+\n 2021-07-20  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* asan/libtool-version: Bump version."}]}