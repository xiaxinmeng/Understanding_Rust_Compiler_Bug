{"sha": "b651af860eb127e88774d6b4add0a560944f2cd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1MWFmODYwZWIxMjdlODg3NzRkNmI0YWRkMGE1NjA5NDRmMmNkNw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2002-05-02T19:12:37Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2002-05-02T19:12:37Z"}, "message": "libjava.exp (libjava_find_spec): New function.\n\n\t* testsuite/lib/libjava.exp (libjava_find_spec): New function.\n\t(libjava_init): Use it to find libgcj.spec.\n\t(libjava_arguments): Likewise.\n\nFrom-SVN: r53057", "tree": {"sha": "7b7ae3471a2acc7161bbbf2091ad21de425561ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7ae3471a2acc7161bbbf2091ad21de425561ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b651af860eb127e88774d6b4add0a560944f2cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b651af860eb127e88774d6b4add0a560944f2cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b651af860eb127e88774d6b4add0a560944f2cd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b651af860eb127e88774d6b4add0a560944f2cd7/comments", "author": null, "committer": null, "parents": [{"sha": "fd84ba84a7a765e06352a4637f9adba55a343b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd84ba84a7a765e06352a4637f9adba55a343b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd84ba84a7a765e06352a4637f9adba55a343b2e"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "26f4b0beb42fc8b408ae3342df0c29784a8e13ab", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b651af860eb127e88774d6b4add0a560944f2cd7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b651af860eb127e88774d6b4add0a560944f2cd7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b651af860eb127e88774d6b4add0a560944f2cd7", "patch": "@@ -1,3 +1,9 @@\n+2002-05-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* testsuite/lib/libjava.exp (libjava_find_spec): New function.\n+\t(libjava_init): Use it to find libgcj.spec.\n+\t(libjava_arguments): Likewise.\n+\n 2002-05-02  David S. Miller  <davem@redhat.com>\n \n \tPR bootstrap/6525"}, {"sha": "46b0e6ab6bfbab67bd38ea448d148c57a11f0b2b", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b651af860eb127e88774d6b4add0a560944f2cd7/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b651af860eb127e88774d6b4add0a560944f2cd7/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=b651af860eb127e88774d6b4add0a560944f2cd7", "patch": "@@ -133,8 +133,13 @@ proc libjava_init { args } {\n     regexp -- \"gcj \\[^ \\]+ (\\[^ \\]+) .*\" $text ignore gcc_version\n     verbose \"jar file is libgcj-$gcc_version.jar\"\n \n+    # FIXME: This finds libgcj.spec for the default multilib.\n+    # If thread models differ between multilibs, this has to be moved\n+    # to libjava_arguments\n+    set specdir [libjava_find_spec]\n+\n     # The -B is so we find libgcj.spec.\n-    set text [eval exec \"$GCJ_UNDER_TEST -B$objdir/../ -v 2>@ stdout\"]\n+    set text [eval exec \"$GCJ_UNDER_TEST -B$specdir -v 2>@ stdout\"]\n     regexp -- \"Thread model: (\\[^\\n\\]+)\\n\" $text ignore model\n     set libjava_uses_threads [expr {! ($model == \"no\"\n \t\t\t\t       || $model == \"none\"\n@@ -175,6 +180,11 @@ proc libjava_init { args } {\n # find the appropriate libraries so we must add -L options for their\n # paths.  However we can't simply use those libraries; we still need\n # libtool for linking.\n+# Don't return the the lib${name}.la files here, since this causes the\n+# libraries to be linked twice: once as lib${name}.so and another time\n+# via gcj's implicit -l${name}.  This is both unnecessary and causes the\n+# Solaris ld to warn: attempted multiple inclusion of file.  This warning\n+# is not ignored by the dejagnu framework and cannot be disabled.\n proc libjava_find_lib {dir name} {\n     global base_dir\n     set gp [get_multilibs]\n@@ -198,6 +208,19 @@ proc libjava_find_lib {dir name} {\n     return \"\"\n }\n \n+# Find libgcj.spec.  We need to use the file corresponding to the multilib\n+# under test since they might differ.  Append a trailing slash since this\n+# is used with -B.\n+proc libjava_find_spec {} {\n+    global objdir\n+    set gp [get_multilibs]\n+\n+    if {[file exists $gp/libjava/libgcj.spec]} then {\n+\treturn \"$gp/libjava/\"\n+    }\n+    return \"$objdir/../\"\n+}\n+\n # Remove a bunch of files.\n proc gcj_cleanup {args} {\n     foreach file $args {\n@@ -323,22 +346,25 @@ proc libjava_arguments {{mode compile}} {\n \tlappend args \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n+    # Determine libgcj.spec corresponding to multilib under test.\n+    set specdir [libjava_find_spec]\n+\n     # Search for libtool.  We need it to link.\n     set found_compiler 0\n     set d [absolute $objdir]\n     foreach x {. .. ../.. ../../..} {\n \tif {[file exists $d/$x/libtool]} then {\n \t    # We have to run silently to avoid DejaGNU lossage.\n \t    lappend args \\\n-\t      \"compiler=$d/$x/libtool --silent --tag=GCJ --mode=$mode $GCJ_UNDER_TEST -B$objdir/../\"\n+\t      \"compiler=$d/$x/libtool --silent --tag=GCJ --mode=$mode $GCJ_UNDER_TEST -B$specdir\"\n \t    set found_compiler 1\n \t    break\n \t}\n     }\n     if {! $found_compiler} {\n-\t# Append -B$objdir/../ so that we find libgcj.spec before it\n+\t# Append -B$specdir so that we find libgcj.spec before it\n \t# is installed.\n-\tlappend args \"compiler=$GCJ_UNDER_TEST -B$objdir/../\"\n+\tlappend args \"compiler=$GCJ_UNDER_TEST -B$specdir\"\n     }\n \n     # Avoid libtool wrapper scripts when possible."}]}