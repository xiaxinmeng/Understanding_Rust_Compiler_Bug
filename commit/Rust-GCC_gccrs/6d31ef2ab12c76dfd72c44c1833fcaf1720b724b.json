{"sha": "6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQzMWVmMmFiMTJjNzZkZmQ3MmM0NGMxODMzZmNhZjE3MjBiNzI0Yg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-04-07T11:30:35Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-04-07T11:30:35Z"}, "message": "Regenerate libiberty/functions.texi\n\nThis patch just picks up changes made in r231983 (git 2afaef0360)\nand r268793 (git 0f7c25df5f).\n\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r270189", "tree": {"sha": "c29f650d02f50e033063a82b24bb063931cc9cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29f650d02f50e033063a82b24bb063931cc9cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22be58735992f08020817687378d0004ac1ab680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22be58735992f08020817687378d0004ac1ab680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22be58735992f08020817687378d0004ac1ab680"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "031be3a974a2dcc656d34e5bf36ca2ed63cdf857", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "patch": "@@ -1,3 +1,7 @@\n+2019-04-07  Alan Modra  <amodra@gmail.com>\n+\n+\t* functions.texi: Regenerate.\n+\n 2019-03-14  Jason Merrill  <jason@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "1784ae720a1b935378b52b74e3f20ce407364e50", "filename": "libiberty/functions.texi", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d31ef2ab12c76dfd72c44c1833fcaf1720b724b/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=6d31ef2ab12c76dfd72c44c1833fcaf1720b724b", "patch": "@@ -84,7 +84,7 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n-@c argv.c:135\n+@c argv.c:138\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n Given a pointer to a string, parse the string extracting fields\n@@ -148,7 +148,7 @@ not recommended.\n \n @end deftypefn\n \n-@c make-temp-file.c:96\n+@c make-temp-file.c:95\n @deftypefn Replacement const char* choose_tmpdir ()\n \n Returns a pointer to a directory path suitable for creating temporary\n@@ -175,15 +175,15 @@ Concatenate zero or more of strings and return the result in freshly\n \n @end deftypefn\n \n-@c argv.c:470\n+@c argv.c:487\n @deftypefn Extension int countargv (char * const *@var{argv})\n \n Return the number of elements in @var{argv}.\n Returns zero if @var{argv} is NULL.\n \n @end deftypefn\n \n-@c crc32.c:141\n+@c crc32.c:140\n @deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @\n   int @var{len}, unsigned int @var{init})\n \n@@ -192,10 +192,9 @@ starting value is @var{init}; this may be used to compute the CRC of\n data split across multiple buffers by passing the return value of each\n call as the @var{init} parameter of the next.\n \n-This is intended to match the CRC used by the @command{gdb} remote\n-protocol for the @samp{qCRC} command.  In order to get the same\n-results as gdb for a block of data, you must pass the first CRC\n-parameter as @code{0xffffffff}.\n+This is used by the @command{gdb} remote protocol for the @samp{qCRC}\n+command.  In order to get the same results as gdb for a block of data,\n+you must pass the first CRC parameter as @code{0xffffffff}.\n \n This CRC can be specified as:\n \n@@ -212,7 +211,7 @@ make it easy to compose the values of multiple blocks.\n \n @end deftypefn\n \n-@c argv.c:52\n+@c argv.c:59\n @deftypefn Extension char** dupargv (char * const *@var{vector})\n \n Duplicate an argument vector.  Simply scans through @var{vector},\n@@ -223,7 +222,7 @@ argument vector.\n \n @end deftypefn\n \n-@c strerror.c:567\n+@c strerror.c:572\n @deftypefn Extension int errno_max (void)\n \n Returns the maximum @code{errno} value for which a corresponding\n@@ -241,7 +240,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:341\n+@c argv.c:344\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual\n@@ -410,7 +409,7 @@ unchanged.\n \n @end deftypefn\n \n-@c argv.c:90\n+@c argv.c:93\n @deftypefn Extension void freeargv (char **@var{vector})\n \n Free an argument vector that was built using @code{buildargv}.  Simply\n@@ -431,7 +430,7 @@ unchanged.\n \n @end deftypefn\n \n-@c getruntime.c:82\n+@c getruntime.c:86\n @deftypefn Replacement long get_run_time (void)\n \n Returns the time used so far, in microseconds.  If possible, this is\n@@ -515,7 +514,7 @@ systems.\n \n @end deftypefn\n \n-@c safe-ctype.c:25\n+@c safe-ctype.c:24\n @defvr Extension HOST_CHARSET\n This macro indicates the basic character set and encoding used by the\n host: more precisely, the encoding used for character constants in\n@@ -537,7 +536,7 @@ nineteen EBCDIC varying characters is tested; exercise caution.)\n @end ftable\n @end defvr\n \n-@c hashtab.c:328\n+@c hashtab.c:327\n @deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size}, @\n htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f}, @\n htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f}, @\n@@ -586,7 +585,7 @@ struct qelem @{\n \n @end deftypefn\n \n-@c safe-ctype.c:46\n+@c safe-ctype.c:45\n @deffn  Extension ISALPHA  (@var{c})\n @deffnx Extension ISALNUM  (@var{c})\n @deffnx Extension ISBLANK  (@var{c})\n@@ -636,7 +635,7 @@ false for characters with numeric values from 128 to 255.\n @end itemize\n @end deffn\n \n-@c safe-ctype.c:95\n+@c safe-ctype.c:94\n @deffn  Extension ISIDNUM         (@var{c})\n @deffnx Extension ISIDST          (@var{c})\n @deffnx Extension IS_VSPACE       (@var{c})\n@@ -684,7 +683,7 @@ components will be simplified.  The returned value will be allocated using\n \n @end deftypefn\n \n-@c make-relative-prefix.c:24\n+@c make-relative-prefix.c:23\n @deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, @\n   const char *@var{bin_prefix}, const char *@var{prefix})\n \n@@ -710,7 +709,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:174\n+@c make-temp-file.c:173\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -791,7 +790,7 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n \n @end deftypefn\n \n-@c mkstemps.c:58\n+@c mkstemps.c:60\n @deftypefn Replacement int mkstemps (char *@var{pattern}, int @var{suffix_len})\n \n Generate a unique temporary file name from @var{pattern}.\n@@ -1204,7 +1203,7 @@ deprecated in new programs in favor of @code{strrchr}.\n \n @end deftypefn\n \n-@c setenv.c:23\n+@c setenv.c:22\n @deftypefn Supplemental int setenv (const char *@var{name}, @\n   const char *@var{value}, int @var{overwrite})\n @deftypefnx Supplemental void unsetenv (const char *@var{name})\n@@ -1478,7 +1477,7 @@ valid until at least the next call.\n \n @end deftypefn\n \n-@c splay-tree.c:303\n+@c splay-tree.c:305\n @deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @\n (splay_tree_compare_fn @var{compare_fn}, @\n splay_tree_delete_key_fn @var{delete_key_fn}, @\n@@ -1495,7 +1494,11 @@ different types need to be allocated with different allocators.\n \n The splay tree will use @var{compare_fn} to compare nodes,\n @var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} to\n-deallocate values.\n+deallocate values.  Keys and values will be deallocated when the\n+tree is deleted using splay_tree_delete or when a node is removed\n+using splay_tree_remove.  splay_tree_insert will release the previously\n+inserted key and value using @var{delete_key_fn} and @var{delete_value_fn}\n+if the inserted key is already found in the tree.\n \n @end deftypefn\n \n@@ -1549,7 +1552,7 @@ Returns a pointer to a copy of @var{s} in memory obtained from\n \n @end deftypefn\n \n-@c strerror.c:670\n+@c strerror.c:675\n @deftypefn Replacement {const char*} strerrno (int @var{errnum})\n \n Given an error number returned from a system call (typically returned\n@@ -1569,7 +1572,7 @@ valid until the next call to @code{strerrno}.\n \n @end deftypefn\n \n-@c strerror.c:603\n+@c strerror.c:608\n @deftypefn Supplemental char* strerror (int @var{errnoval})\n \n Maps an @code{errno} number to an error message string, the contents\n@@ -1698,7 +1701,7 @@ the location referenced by @var{endptr}.\n \n @end deftypefn\n \n-@c strerror.c:729\n+@c strerror.c:734\n @deftypefn Extension int strtoerrno (const char *@var{name})\n \n Given the symbolic name of a error number (e.g., @code{EACCES}), map it\n@@ -1914,7 +1917,7 @@ does the return value.  The third argument is unused in @libib{}.\n \n @end deftypefn\n \n-@c argv.c:286\n+@c argv.c:289\n @deftypefn Extension int writeargv (char * const *@var{argv}, FILE *@var{file})\n \n Write each member of ARGV, handling all necessary quoting, to the file"}]}