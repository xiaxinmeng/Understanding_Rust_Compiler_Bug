{"sha": "ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxMDMyZmQ5MmU5Njk2MGVjZjJlZmQwY2EyNmY3YzE4OTlhMmJkOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-04-20T18:02:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-04-20T18:02:40Z"}, "message": "reload1.c (reload): Ignore equivalences between pseudos and read only memory.\n\n\n\t* reload1.c (reload): Ignore equivalences between pseudos and\n\tread only memory.\n\nFrom-SVN: r98466", "tree": {"sha": "c23d3cf2e1d3a9964cbe98f26ed40c908b4fafc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23d3cf2e1d3a9964cbe98f26ed40c908b4fafc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9/comments", "author": null, "committer": null, "parents": [{"sha": "187230a795716fc0d98cb066402fe9d71639996c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187230a795716fc0d98cb066402fe9d71639996c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187230a795716fc0d98cb066402fe9d71639996c"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "b0863f3a633aa8c37f866cf4f68a7b0d7dd357bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "patch": "@@ -1,3 +1,8 @@\n+2005-04-20  Jeff Law  <law@redhat.com>\n+\n+\t* reload1.c (reload): Ignore equivalences between pseudos and\n+\tread only memory.\n+\n 2005-04-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/12913"}, {"sha": "b2200a8d3b39853f7f85b6b7fbd7dfcbcc2f190d", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ad1032fd92e96960ecf2efd0ca26f7c1899a2bd9", "patch": "@@ -740,8 +740,20 @@ reload (rtx first, int global)\n \t\t     that is not a legitimate memory operand.  As later\n \t\t     stages of reload assume that all addresses found\n \t\t     in the reg_equiv_* arrays were originally legitimate,\n-\t\t     we ignore such REG_EQUIV notes.  */\n-\t\t  if (memory_operand (x, VOIDmode))\n+\n+\t\t     It can also happen that a REG_EQUIV note contains a\n+\t\t     readonly memory location.  If the destination pseudo\n+\t\t     is set from some other value (typically a different\n+\t\t     pseudo), and the destination pseudo does not get a\n+\t\t     hard reg, then reload will replace the destination\n+\t\t     pseudo with its equivalent memory location.  This\n+\t\t     is horribly bad as it creates a store to a readonly\n+\t\t     memory location and a runtime segfault.  To avoid\n+\t\t     this problem we reject readonly memory locations\n+\t\t     for equivalences.  This is overly conservative as\n+\t\t     we could find all sets of the destination pseudo\n+\t\t     and remove them as they should be redundant.  */\n+\t\t  if (memory_operand (x, VOIDmode) && ! MEM_READONLY_P (x))\n \t\t    {\n \t\t      /* Always unshare the equivalence, so we can\n \t\t\t substitute into this insn without touching the"}]}