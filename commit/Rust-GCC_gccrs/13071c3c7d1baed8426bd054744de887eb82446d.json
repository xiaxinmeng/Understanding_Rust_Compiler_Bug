{"sha": "13071c3c7d1baed8426bd054744de887eb82446d", "node_id": "C_kwDOANBUbNoAKDEzMDcxYzNjN2QxYmFlZDg0MjZiZDA1NDc0NGRlODg3ZWI4MjQ0NmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-12T23:12:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-12T23:16:45Z"}, "message": "aarch64: Add bfloat16_t support for aarch64\n\nx86_64/i686 has for a few months working std::bfloat16_t support, __bf16\nthere is no longer a storage only type, but can be used for arithmetics\nand is supported in libgcc and libstdc++.\n\nThe following patch adds similar support for AArch64.\n\nUnlike the x86 changes, this one keeps the old __bf16 mangling of\nu6__bf16 rather than DF16b (so an exception from Itanium ABI), but\notherwise __bf16 and decltype (0.0bf16) are the same type and both\nin C++ act as extended floating-point type.\n\n2023-03-13  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* config/aarch64/aarch64.h (aarch64_bf16_type_node): Remove.\n\t(aarch64_bf16_ptr_type_node): Adjust comment.\n\t* config/aarch64/aarch64.cc (aarch64_gimplify_va_arg_expr): Use\n\tbfloat16_type_node rather than aarch64_bf16_type_node.\n\t(aarch64_libgcc_floating_mode_supported_p,\n\taarch64_scalar_mode_supported_p): Also support BFmode.\n\t(aarch64_invalid_conversion, aarch64_invalid_unary_op): Remove.\n\t(aarch64_invalid_binary_op): Remove BFmode related rejections.\n\t(TARGET_INVALID_CONVERSION, TARGET_INVALID_UNARY_OP): Don't redefine.\n\t* config/aarch64/aarch64-builtins.cc (aarch64_bf16_type_node): Remove.\n\t(aarch64_int_or_fp_type): Use bfloat16_type_node rather than\n\taarch64_bf16_type_node.\n\t(aarch64_init_simd_builtin_types): Likewise.\n\t(aarch64_init_bf16_types): Likewise.  Don't create bfloat16_type_node,\n\twhich is created in tree.cc already.\n\t* config/aarch64/aarch64-sve-builtins.def (svbfloat16_t): Likewise.\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c:\n\tDon't expect one __bf16 related error.\n\t* gcc.target/aarch64/bfloat16_vector_typecheck_1.c: Adjust or remove\n\tdg-error directives for __bf16 being an extended arithmetic type.\n\t* gcc.target/aarch64/bfloat16_vector_typecheck_2.c: Likewise.\n\t* gcc.target/aarch64/bfloat16_scalar_typecheck.c: Likewise.\n\t* g++.target/aarch64/bfloat_cpp_typecheck.C: Don't expect two __bf16\n\trelated errors.\nlibgcc/\n\t* config/aarch64/t-softfp (softfp_extensions): Add bfsf.\n\t(softfp_truncations): Add tfbf dfbf sfbf hfbf.\n\t(softfp_extras): Add floatdibf floatundibf floattibf floatuntibf.\n\t* config/aarch64/libgcc-softfp.ver (GCC_13.0.0): Export\n\t__extendbfsf2 and __trunc{s,d,t,h}fbf2.\n\t* config/aarch64/sfp-machine.h (_FP_NANFRAC_B, _FP_NANSIGN_B): Define.\n\t* soft-fp/floatundibf.c: New file.\n\t* soft-fp/floatdibf.c: New file.\nlibstdc++-v3/\n\t* config/abi/pre/gnu.ver (CXXABI_1.3.14): Also export __bf16 tinfos\n\tif it isn't mangled as DF16b but u6__bf16.", "tree": {"sha": "01041aa1a78e1bf88f6e1506939d85d8cdaf1e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01041aa1a78e1bf88f6e1506939d85d8cdaf1e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13071c3c7d1baed8426bd054744de887eb82446d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13071c3c7d1baed8426bd054744de887eb82446d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13071c3c7d1baed8426bd054744de887eb82446d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13071c3c7d1baed8426bd054744de887eb82446d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1d8df792f990574cbb695b55c92ee2684fc96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1d8df792f990574cbb695b55c92ee2684fc96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1d8df792f990574cbb695b55c92ee2684fc96b"}], "stats": {"total": 596, "additions": 327, "deletions": 269}, "files": [{"sha": "eaefbf6774b5cebcc0ff0895d287bd59d66d2cc6", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -918,7 +918,6 @@ tree aarch64_fp16_type_node = NULL_TREE;\n tree aarch64_fp16_ptr_type_node = NULL_TREE;\n \n /* Back-end node type for brain float (bfloat) types.  */\n-tree aarch64_bf16_type_node = NULL_TREE;\n tree aarch64_bf16_ptr_type_node = NULL_TREE;\n \n /* Wrapper around add_builtin_function.  NAME is the name of the built-in\n@@ -1010,7 +1009,7 @@ aarch64_int_or_fp_type (machine_mode mode,\n     case E_DFmode:\n       return double_type_node;\n     case E_BFmode:\n-      return aarch64_bf16_type_node;\n+      return bfloat16_type_node;\n     default:\n       gcc_unreachable ();\n     }\n@@ -1124,8 +1123,8 @@ aarch64_init_simd_builtin_types (void)\n   aarch64_simd_types[Float64x2_t].eltype = double_type_node;\n \n   /* Init Bfloat vector types with underlying __bf16 type.  */\n-  aarch64_simd_types[Bfloat16x4_t].eltype = aarch64_bf16_type_node;\n-  aarch64_simd_types[Bfloat16x8_t].eltype = aarch64_bf16_type_node;\n+  aarch64_simd_types[Bfloat16x4_t].eltype = bfloat16_type_node;\n+  aarch64_simd_types[Bfloat16x8_t].eltype = bfloat16_type_node;\n \n   for (i = 0; i < nelts; i++)\n     {\n@@ -1197,7 +1196,7 @@ aarch64_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_aarch64_simd_poly128\");\n   (*lang_hooks.types.register_builtin_type) (intTI_type_node,\n \t\t\t\t\t     \"__builtin_aarch64_simd_ti\");\n-  (*lang_hooks.types.register_builtin_type) (aarch64_bf16_type_node,\n+  (*lang_hooks.types.register_builtin_type) (bfloat16_type_node,\n \t\t\t\t\t     \"__builtin_aarch64_simd_bf\");\n   /* Unsigned integer types for various mode sizes.  */\n   (*lang_hooks.types.register_builtin_type) (unsigned_intQI_type_node,\n@@ -1682,13 +1681,8 @@ aarch64_init_fp16_types (void)\n static void\n aarch64_init_bf16_types (void)\n {\n-  aarch64_bf16_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (aarch64_bf16_type_node) = 16;\n-  SET_TYPE_MODE (aarch64_bf16_type_node, BFmode);\n-  layout_type (aarch64_bf16_type_node);\n-\n-  lang_hooks.types.register_builtin_type (aarch64_bf16_type_node, \"__bf16\");\n-  aarch64_bf16_ptr_type_node = build_pointer_type (aarch64_bf16_type_node);\n+  lang_hooks.types.register_builtin_type (bfloat16_type_node, \"__bf16\");\n+  aarch64_bf16_ptr_type_node = build_pointer_type (bfloat16_type_node);\n }\n \n /* Pointer authentication builtins that will become NOP on legacy platform."}, {"sha": "534f6e69d72342fdcfcc00bd330585db1eae32e1", "filename": "gcc/config/aarch64/aarch64-sve-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -61,7 +61,7 @@ DEF_SVE_MODE (u64offset, none, svuint64_t, bytes)\n DEF_SVE_MODE (vnum, none, none, vectors)\n \n DEF_SVE_TYPE (svbool_t, 10, __SVBool_t, boolean_type_node)\n-DEF_SVE_TYPE (svbfloat16_t, 14, __SVBfloat16_t, aarch64_bf16_type_node)\n+DEF_SVE_TYPE (svbfloat16_t, 14, __SVBfloat16_t, bfloat16_type_node)\n DEF_SVE_TYPE (svfloat16_t, 13, __SVFloat16_t, aarch64_fp16_type_node)\n DEF_SVE_TYPE (svfloat32_t, 13, __SVFloat32_t, float_type_node)\n DEF_SVE_TYPE (svfloat64_t, 13, __SVFloat64_t, double_type_node)"}, {"sha": "b27f4354031f9f6f2b56e218cb9624a115b516b0", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -19871,7 +19871,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t  field_ptr_t = aarch64_fp16_ptr_type_node;\n \t  break;\n \tcase E_BFmode:\n-\t  field_t = aarch64_bf16_type_node;\n+\t  field_t = bfloat16_type_node;\n \t  field_ptr_t = aarch64_bf16_ptr_type_node;\n \t  break;\n \tcase E_V2SImode:\n@@ -26561,26 +26561,26 @@ aarch64_dwarf_poly_indeterminate_value (unsigned int i, unsigned int *factor,\n }\n \n /* Implement TARGET_LIBGCC_FLOATING_POINT_MODE_SUPPORTED_P - return TRUE\n-   if MODE is HFmode, and punt to the generic implementation otherwise.  */\n+   if MODE is [BH]Fmode, and punt to the generic implementation otherwise.  */\n \n static bool\n aarch64_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n {\n-  return (mode == HFmode\n+  return ((mode == HFmode || mode == BFmode)\n \t  ? true\n \t  : default_libgcc_floating_mode_supported_p (mode));\n }\n \n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P - return TRUE\n-   if MODE is HFmode, and punt to the generic implementation otherwise.  */\n+   if MODE is [BH]Fmode, and punt to the generic implementation otherwise.  */\n \n static bool\n aarch64_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (DECIMAL_FLOAT_MODE_P (mode))\n     return default_decimal_float_supported_p ();\n \n-  return (mode == HFmode\n+  return ((mode == HFmode || mode == BFmode)\n \t  ? true\n \t  : default_scalar_mode_supported_p (mode));\n }\n@@ -27048,51 +27048,13 @@ aarch64_stack_protect_guard (void)\n   return NULL_TREE;\n }\n \n-/* Return the diagnostic message string if conversion from FROMTYPE to\n-   TOTYPE is not allowed, NULL otherwise.  */\n-\n-static const char *\n-aarch64_invalid_conversion (const_tree fromtype, const_tree totype)\n-{\n-  if (element_mode (fromtype) != element_mode (totype))\n-    {\n-      /* Do no allow conversions to/from BFmode scalar types.  */\n-      if (TYPE_MODE (fromtype) == BFmode)\n-\treturn N_(\"invalid conversion from type %<bfloat16_t%>\");\n-      if (TYPE_MODE (totype) == BFmode)\n-\treturn N_(\"invalid conversion to type %<bfloat16_t%>\");\n-    }\n-\n-  /* Conversion allowed.  */\n-  return NULL;\n-}\n-\n-/* Return the diagnostic message string if the unary operation OP is\n-   not permitted on TYPE, NULL otherwise.  */\n-\n-static const char *\n-aarch64_invalid_unary_op (int op, const_tree type)\n-{\n-  /* Reject all single-operand operations on BFmode except for &.  */\n-  if (element_mode (type) == BFmode && op != ADDR_EXPR)\n-    return N_(\"operation not permitted on type %<bfloat16_t%>\");\n-\n-  /* Operation allowed.  */\n-  return NULL;\n-}\n-\n /* Return the diagnostic message string if the binary operation OP is\n    not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n \n static const char *\n aarch64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1,\n \t\t\t   const_tree type2)\n {\n-  /* Reject all 2-operand operations on BFmode.  */\n-  if (element_mode (type1) == BFmode\n-      || element_mode (type2) == BFmode)\n-    return N_(\"operation not permitted on type %<bfloat16_t%>\");\n-\n   if (VECTOR_TYPE_P (type1)\n       && VECTOR_TYPE_P (type2)\n       && !TYPE_INDIVISIBLE_P (type1)\n@@ -27689,12 +27651,6 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE aarch64_mangle_type\n \n-#undef TARGET_INVALID_CONVERSION\n-#define TARGET_INVALID_CONVERSION aarch64_invalid_conversion\n-\n-#undef TARGET_INVALID_UNARY_OP\n-#define TARGET_INVALID_UNARY_OP aarch64_invalid_unary_op\n-\n #undef TARGET_INVALID_BINARY_OP\n #define TARGET_INVALID_BINARY_OP aarch64_invalid_binary_op\n "}, {"sha": "2403795e83675e64fa80952de4777eee77dfdfd2", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -1237,9 +1237,8 @@ extern const char *aarch64_rewrite_mcpu (int argc, const char **argv);\n extern GTY(()) tree aarch64_fp16_type_node;\n extern GTY(()) tree aarch64_fp16_ptr_type_node;\n \n-/* This type is the user-visible __bf16, and a pointer to that type.  Defined\n-   in aarch64-builtins.cc.  */\n-extern GTY(()) tree aarch64_bf16_type_node;\n+/* Pointer to the user-visible __bf16 type.  __bf16 itself is generic\n+   bfloat16_type_node.  Defined in aarch64-builtins.cc.  */\n extern GTY(()) tree aarch64_bf16_ptr_type_node;\n \n /* The generic unwind code in libgcc does not initialize the frame pointer."}, {"sha": "b76ea39600955ef6c13d6afb6104d7bc5488ce27", "filename": "gcc/testsuite/g++.target/aarch64/bfloat_cpp_typecheck.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -9,6 +9,6 @@ void foo (void)\n {\n   bfloat16_t (); /* { dg-bogus {invalid conversion to type 'bfloat16_t'} \"\" } */\n   bfloat16_t a = bfloat16_t(); /* { dg-bogus {invalid conversion to type 'bfloat16_t'} \"\" } */\n-  bfloat16_t (0x1234); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t (0.1); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t (0x1234);\n+  bfloat16_t (0.1);\n }"}, {"sha": "99876e47ce9a6d04f328bc413f11538ad56459d3", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_scalar_typecheck.c", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -16,8 +16,8 @@ double is_a_double;\n \n float *float_ptr;\n \n-bfloat16_t foo1 (void) { return (bfloat16_t) 0x1234; } /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-bfloat16_t foo2 (void) { return (bfloat16_t) (short) 0x1234; } /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+bfloat16_t foo1 (void) { return (bfloat16_t) 0x1234; }\n+bfloat16_t foo2 (void) { return (bfloat16_t) (short) 0x1234; }\n \n bfloat16_t footest (bfloat16_t scalar0)\n {\n@@ -26,87 +26,87 @@ bfloat16_t footest (bfloat16_t scalar0)\n \n   bfloat16_t scalar1_1;\n   bfloat16_t scalar1_2 = glob_bfloat;\n-  bfloat16_t scalar1_3 = 0;   /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_4 = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_5 = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_6 = is_an_int;  /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_7 = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_8 = is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar1_9 = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-\n-  int initi_1_1 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float initi_1_2 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float16_t initi_1_3 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  short initi_1_4 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  double initi_1_5 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_3 = 0;\n+  bfloat16_t scalar1_4 = 0.1;\n+  bfloat16_t scalar1_5 = is_a_float;\n+  bfloat16_t scalar1_6 = is_an_int;\n+  bfloat16_t scalar1_7 = is_a_float16;\n+  bfloat16_t scalar1_8 = is_a_double;\n+  bfloat16_t scalar1_9 = is_a_short_int;\n+\n+  int initi_1_1 = glob_bfloat;\n+  float initi_1_2 = glob_bfloat;\n+  float16_t initi_1_3 = glob_bfloat;\n+  short initi_1_4 = glob_bfloat;\n+  double initi_1_5 = glob_bfloat;\n \n   bfloat16_t scalar2_1 = {};\n   bfloat16_t scalar2_2 = { glob_bfloat };\n-  bfloat16_t scalar2_3 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_4 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_5 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_6 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_7 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_8 = { is_a_double }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16_t scalar2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-\n-  int initi_2_1 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float16_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  short initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  double initi_2_5 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_3 = { 0 };\n+  bfloat16_t scalar2_4 = { 0.1 };\n+  bfloat16_t scalar2_5 = { is_a_float };\n+  bfloat16_t scalar2_6 = { is_an_int };\n+  bfloat16_t scalar2_7 = { is_a_float16 };\n+  bfloat16_t scalar2_8 = { is_a_double };\n+  bfloat16_t scalar2_9 = { is_a_short_int };\n+\n+  int initi_2_1 = { glob_bfloat };\n+  float initi_2_2 = { glob_bfloat };\n+  float16_t initi_2_3 = { glob_bfloat };\n+  short initi_2_4 = { glob_bfloat };\n+  double initi_2_5 = { glob_bfloat };\n \n   /* Assignments.  */\n \n   glob_bfloat = glob_bfloat;\n-  glob_bfloat = 0;   /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  glob_bfloat = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-\n-  is_an_int = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float16 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_double = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_short_int = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  glob_bfloat = 0;\n+  glob_bfloat = 0.1;\n+  glob_bfloat = is_a_float;\n+  glob_bfloat = is_an_int;\n+  glob_bfloat = is_a_float16;\n+  glob_bfloat = is_a_double;\n+  glob_bfloat = is_a_short_int;\n+\n+  is_an_int = glob_bfloat;\n+  is_a_float = glob_bfloat;\n+  is_a_float16 = glob_bfloat;\n+  is_a_double = glob_bfloat;\n+  is_a_short_int = glob_bfloat;\n \n   /* Casting.  */\n \n   (void) glob_bfloat;\n   (bfloat16_t) glob_bfloat;\n \n-  (int) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (float) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (float16_t) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (double) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (short) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (int) glob_bfloat;\n+  (float) glob_bfloat;\n+  (float16_t) glob_bfloat;\n+  (double) glob_bfloat;\n+  (short) glob_bfloat;\n \n-  (bfloat16_t) is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) is_an_int;\n+  (bfloat16_t) is_a_float;\n+  (bfloat16_t) is_a_float16;\n+  (bfloat16_t) is_a_double;\n+  (bfloat16_t) is_a_short_int;\n \n   /* Compound literals.  */\n \n   (bfloat16_t) {};\n   (bfloat16_t) { glob_bfloat };\n-  (bfloat16_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { is_a_double }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16_t) { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-\n-  (int) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (float) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (float16_t) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (double) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  (short) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (bfloat16_t) { 0 };\n+  (bfloat16_t) { 0.1 };\n+  (bfloat16_t) { is_a_float };\n+  (bfloat16_t) { is_an_int };\n+  (bfloat16_t) { is_a_float16 };\n+  (bfloat16_t) { is_a_double };\n+  (bfloat16_t) { is_a_short_int };\n+\n+  (int) { glob_bfloat };\n+  (float) { glob_bfloat };\n+  (float16_t) { glob_bfloat };\n+  (double) { glob_bfloat };\n+  (short) { glob_bfloat };\n \n   /* Arrays and Structs.  */\n \n@@ -149,16 +149,16 @@ bfloat16_t footest (bfloat16_t scalar0)\n   bfloat_ptr = &bfloat_ptr3[1];\n \n   /* Simple comparison.  */\n-  scalar0 > glob_bfloat; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  glob_bfloat == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 > is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_a_float == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0 == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0.1 == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 > is_an_int; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_an_int == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 > glob_bfloat;\n+  glob_bfloat == scalar0;\n+  scalar0 > is_a_float;\n+  is_a_float == scalar0;\n+  scalar0 > 0;\n+  0 == scalar0;\n+  scalar0 > 0.1;\n+  0.1 == scalar0;\n+  scalar0 > is_an_int;\n+  is_an_int == scalar0;\n \n   /* Pointer comparison.  */\n \n@@ -178,41 +178,41 @@ bfloat16_t footest (bfloat16_t scalar0)\n   /* Conditional expressions.  */\n \n   0 ? scalar0 : scalar0;\n-  0 ? scalar0 : is_a_float; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  0 ? is_a_float : scalar0; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  0 ? scalar0 : 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  0 ? 0 : scalar0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  0 ? 0.1 : scalar0; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  0 ? scalar0 : 0.1; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  0 ? scalar0 : is_a_float;\n+  0 ? is_a_float : scalar0;\n+  0 ? scalar0 : 0;\n+  0 ? 0 : scalar0;\n+  0 ? 0.1 : scalar0;\n+  0 ? scalar0 : 0.1;\n   0 ? bfloat_ptr : bfloat_ptr2;\n   0 ? bfloat_ptr : float_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n   0 ? float_ptr : bfloat_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n \n-  scalar0 ? scalar0 : scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 ? is_a_float : scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 ? scalar0 : is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 ? is_a_float : is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 ? scalar0 : scalar0;\n+  scalar0 ? is_a_float : scalar0;\n+  scalar0 ? scalar0 : is_a_float;\n+  scalar0 ? is_a_float : is_a_float;\n \n   /* Unary operators.  */\n \n-  +scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  -scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ~scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  !scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  +scalar0;\n+  -scalar0;\n+  ~scalar0; /* { dg-error {wrong type argument to bit-complement} } */\n+  !scalar0;\n   *scalar0; /* { dg-error {invalid type argument of unary '\\*'} } */\n-  __real scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  __imag scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ++scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  --scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __real scalar0;\n+  __imag scalar0;\n+  ++scalar0;\n+  --scalar0;\n+  scalar0++;\n+  scalar0--;\n \n   /* Binary arithmetic operations.  */\n \n-  scalar0 = glob_bfloat + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 = glob_bfloat + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 = glob_bfloat + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  scalar0 = glob_bfloat + is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 = glob_bfloat + *bfloat_ptr;\n+  scalar0 = glob_bfloat + 0.1;\n+  scalar0 = glob_bfloat + 0;\n+  scalar0 = glob_bfloat + is_a_float;\n \n   return scalar0;\n }"}, {"sha": "b746dafe15adbb2c5437a1ea24e2800f278b54bb", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_vector_typecheck_1.c", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -52,20 +52,20 @@ bfloat16x4_t footest (bfloat16x4_t vector0)\n   bfloat16x4_t vector2_1 = {};\n   bfloat16x4_t vector2_2 = { glob_bfloat };\n   bfloat16x4_t vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n-  bfloat16x4_t vector2_4 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x4_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-\n-  int32x4_t initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float32x4_t initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float16x4_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float32x2_t initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  int32x2_t initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  int16x4_t initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_4 = { 0 };\n+  bfloat16x4_t vector2_5 = { 0.1 };\n+  bfloat16x4_t vector2_6 = { is_a_float16 };\n+  bfloat16x4_t vector2_7 = { is_a_float };\n+  bfloat16x4_t vector2_8 = { is_an_int };\n+  bfloat16x4_t vector2_9 = { is_a_short_int };\n+  bfloat16x4_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float };\n+\n+  int32x4_t initi_2_1 = { glob_bfloat };\n+  float32x4_t initi_2_2 = { glob_bfloat };\n+  float16x4_t initi_2_3 = { glob_bfloat };\n+  float32x2_t initi_2_4 = { glob_bfloat };\n+  int32x2_t initi_2_5 = { glob_bfloat };\n+  int16x4_t initi_2_6 = { glob_bfloat };\n \n   /* Assignments to/from vectors.  */\n \n@@ -89,25 +89,25 @@ bfloat16x4_t footest (bfloat16x4_t vector0)\n   /* Assignments to/from elements.  */\n \n   vector2_3[0] = glob_bfloat;\n-  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_an_int;\n+  vector2_3[0] = is_a_short_int;\n+  vector2_3[0] = is_a_float;\n+  vector2_3[0] = is_a_float16;\n+  vector2_3[0] = 0;\n+  vector2_3[0] = 0.1;\n \n   glob_bfloat = vector2_3[0];\n-  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_an_int = vector2_3[0];\n+  is_a_short_int = vector2_3[0];\n+  is_a_float = vector2_3[0];\n+  is_a_float16 = vector2_3[0];\n \n   /* Compound literals.  */\n \n   (bfloat16x4_t) {};\n \n-  (bfloat16x4_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16x4_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x4_t) { 0 };\n+  (bfloat16x4_t) { 0.1 };\n   (bfloat16x4_t) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x4_t'} } */\n   (bfloat16x4_t) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int32x4_t'} } */\n   (bfloat16x4_t) { is_a_float_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x2_t'} } */\n@@ -190,16 +190,16 @@ bfloat16x4_t footest (bfloat16x4_t vector0)\n   bfloat_ptr = &bfloat_ptr3[1];\n \n   /* Simple comparison.  */\n-  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0.1 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > glob_bfloat_vec;\n+  glob_bfloat_vec == vector0;\n+  vector0 > is_a_float_vec; /* { dg-error {comparing vectors with different element types} } */\n+  is_a_float_vec == vector0; /* { dg-error {comparing vectors with different element types} } */\n+  vector0 > 0;\n+  0 == vector0;\n+  vector0 > 0.1; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x4_t' involves truncation} } */\n+  0.1 == vector0; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x4_t' involves truncation} } */\n+  vector0 > is_an_int_vec; /* { dg-error {comparing vectors with different element types} } */\n+  is_an_int_vec == vector0; /* { dg-error {comparing vectors with different element types} } */\n \n   /* Pointer comparison.  */\n \n@@ -238,24 +238,24 @@ bfloat16x4_t footest (bfloat16x4_t vector0)\n \n   /* Unary operators.  */\n \n-  +vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  -vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ~vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  !vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  +vector0;\n+  -vector0;\n+  ~vector0; /* { dg-error {wrong type argument to bit-complement} } */\n+  !vector0; /* { dg-error {wrong type argument to unary exclamation mark} } */\n   *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n-  __real vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  __imag vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ++vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  --vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __real vector0; /* { dg-error {wrong type argument to __real} } */\n+  __imag vector0; /* { dg-error {wrong type argument to __imag} } */\n+  ++vector0;\n+  --vector0;\n+  vector0++;\n+  vector0--;\n \n   /* Binary arithmetic operations.  */\n \n-  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + *bfloat_ptr;\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x4_t' involves truncation} } */\n+  vector0 = glob_bfloat_vec + 0;\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {invalid operands to binary \\+} } */\n \n   return vector0;\n }"}, {"sha": "779bb528e4180f8b730a7241cbef8386249be16d", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_vector_typecheck_2.c", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -51,20 +51,20 @@ bfloat16x8_t footest (bfloat16x8_t vector0)\n   bfloat16x8_t vector2_1 = {};\n   bfloat16x8_t vector2_2 = { glob_bfloat };\n   bfloat16x8_t vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n-  bfloat16x8_t vector2_4 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  bfloat16x8_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error \"invalid conversion to type 'bfloat16_t'\" } */\n-\n-  int32x4_t initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float32x4_t initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float16x8_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  float64x2_t initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  int64x2_t initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  int16x8_t initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_4 = { 0 };\n+  bfloat16x8_t vector2_5 = { 0.1 };\n+  bfloat16x8_t vector2_6 = { is_a_float16 };\n+  bfloat16x8_t vector2_7 = { is_a_float };\n+  bfloat16x8_t vector2_8 = { is_an_int };\n+  bfloat16x8_t vector2_9 = { is_a_short_int };\n+  bfloat16x8_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float };\n+\n+  int32x4_t initi_2_1 = { glob_bfloat };\n+  float32x4_t initi_2_2 = { glob_bfloat };\n+  float16x8_t initi_2_3 = { glob_bfloat };\n+  float64x2_t initi_2_4 = { glob_bfloat };\n+  int64x2_t initi_2_5 = { glob_bfloat };\n+  int16x8_t initi_2_6 = { glob_bfloat };\n \n   /* Assignments to/from vectors.  */\n \n@@ -88,25 +88,25 @@ bfloat16x8_t footest (bfloat16x8_t vector0)\n   /* Assignments to/from elements.  */\n \n   vector2_3[0] = glob_bfloat;\n-  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_an_int;\n+  vector2_3[0] = is_a_short_int;\n+  vector2_3[0] = is_a_float;\n+  vector2_3[0] = is_a_float16;\n+  vector2_3[0] = 0;\n+  vector2_3[0] = 0.1;\n \n   glob_bfloat = vector2_3[0];\n-  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n-  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_an_int = vector2_3[0];\n+  is_a_short_int = vector2_3[0];\n+  is_a_float = vector2_3[0];\n+  is_a_float16 = vector2_3[0];\n \n   /* Compound literals.  */\n \n   (bfloat16x8_t) {};\n \n-  (bfloat16x8_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n-  (bfloat16x8_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x8_t) { 0 };\n+  (bfloat16x8_t) { 0.1 };\n   (bfloat16x8_t) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x4_t'} } */\n   (bfloat16x8_t) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int32x4_t'} } */\n   (bfloat16x8_t) { is_a_double_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float64x2_t'} } */\n@@ -188,16 +188,16 @@ bfloat16x8_t footest (bfloat16x8_t vector0)\n   bfloat_ptr = &bfloat_ptr3[1];\n \n   /* Simple comparison.  */\n-  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  0.1 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > glob_bfloat_vec;\n+  glob_bfloat_vec == vector0;\n+  vector0 > is_a_float_vec; /* { dg-error {comparing vectors with different element types} } */\n+  is_a_float_vec == vector0; /* { dg-error {comparing vectors with different element types} } */\n+  vector0 > 0;\n+  0 == vector0;\n+  vector0 > 0.1; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x8_t' involves truncation} } */\n+  0.1 == vector0; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x8_t' involves truncation} } */\n+  vector0 > is_an_int_vec; /* { dg-error {comparing vectors with different element types} } */\n+  is_an_int_vec == vector0; /* { dg-error {comparing vectors with different element types} } */\n \n   /* Pointer comparison.  */\n \n@@ -236,24 +236,24 @@ bfloat16x8_t footest (bfloat16x8_t vector0)\n \n   /* Unary operators.  */\n \n-  +vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  -vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ~vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  !vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  +vector0;\n+  -vector0;\n+  ~vector0; /* { dg-error {wrong type argument to bit-complement} } */\n+  !vector0; /* { dg-error {wrong type argument to unary exclamation mark} } */\n   *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n-  __real vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  __imag vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  ++vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  --vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __real vector0; /* { dg-error {wrong type argument to __real} } */\n+  __imag vector0; /* { dg-error {wrong type argument to __imag} } */\n+  ++vector0;\n+  --vector0;\n+  vector0++;\n+  vector0--;\n \n   /* Binary arithmetic operations.  */\n \n-  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n-  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + *bfloat_ptr;\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {conversion of scalar 'double' to vector 'bfloat16x8_t' involves truncation} } */\n+  vector0 = glob_bfloat_vec + 0;\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {invalid operands to binary \\+} } */\n \n   return vector0;\n }"}, {"sha": "cb0605b9a0fc6cbda3067235fd16353b2793765e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, svuint8_t u8, svuint16_t u16, svint32_t s32,\n   svbfdot (f32, bf16, bf16);\n   svbfdot (f32, 0, bf16); /* { dg-error {passing 'int' to argument 2 of 'svbfdot', which expects 'svbfloat16_t'} } */\n   svbfdot (f32, f32, bf16); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svbfdot', which expects 'svbfloat16_t'} } */\n-  svbfdot (f32, bf16, 0); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  svbfdot (f32, bf16, 0);\n   svbfdot (f32, bf16, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svbfdot', which expects 'svbfloat16_t'} } */\n   svbfdot (f32, bf16, bf);\n }"}, {"sha": "0af769135ca973ff56189cc4c399588039ef950c", "filename": "libgcc/config/aarch64/libgcc-softfp.ver", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Flibgcc-softfp.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Flibgcc-softfp.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flibgcc-softfp.ver?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -26,3 +26,16 @@ GCC_11.0 {\n   __mulhc3\n   __trunctfhf2\n }\n+\n+%inherit GCC_13.0.0 GCC_11.0.0\n+GCC_13.0.0 {\n+  __extendbfsf2\n+  __floatdibf\n+  __floattibf\n+  __floatundibf\n+  __floatuntibf\n+  __truncdfbf2\n+  __truncsfbf2\n+  __trunctfbf2\n+  __trunchfbf2\n+}"}, {"sha": "97c38a34c867fe5fa07b31707901ae73c7cc8f56", "filename": "libgcc/config/aarch64/sfp-machine.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -43,10 +43,12 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n \n #define _FP_NANFRAC_H\t\t((_FP_QNANBIT_H << 1) - 1)\n+#define _FP_NANFRAC_B\t\t((_FP_QNANBIT_B << 1) - 1)\n #define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n #define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1)\n #define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1\n #define _FP_NANSIGN_H\t\t0\n+#define _FP_NANSIGN_B\t\t0\n #define _FP_NANSIGN_S\t\t0\n #define _FP_NANSIGN_D\t\t0\n #define _FP_NANSIGN_Q\t\t0"}, {"sha": "0ff6102359d429d7c96d8699d10a105aa2db0d93", "filename": "libgcc/config/aarch64/t-softfp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ft-softfp?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -1,9 +1,10 @@\n softfp_float_modes := tf\n softfp_int_modes := si di ti\n-softfp_extensions := sftf dftf hftf\n-softfp_truncations := tfsf tfdf tfhf\n+softfp_extensions := sftf dftf hftf bfsf\n+softfp_truncations := tfsf tfdf tfhf tfbf dfbf sfbf hfbf\n softfp_exclude_libgcc2 := n\n-softfp_extras := fixhfti fixunshfti floattihf floatuntihf\n+softfp_extras := fixhfti fixunshfti floattihf floatuntihf \\\n+\t\t floatdibf floatundibf floattibf floatuntibf\n \n TARGET_LIBGCC2_CFLAGS += -Wno-missing-prototypes\n "}, {"sha": "9cdeba1262503b61b4679d40d1a69fefd5a1a678", "filename": "libgcc/soft-fp/floatdibf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fsoft-fp%2Ffloatdibf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fsoft-fp%2Ffloatdibf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatdibf.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 64bit signed integer to bfloat16\n+   Copyright (C) 2007-2023 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <https://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"brain.h\"\n+\n+BFtype\n+__floatdibf (DItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_B (A);\n+  BFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_B (A, i, DI_BITS, UDItype);\n+  FP_PACK_RAW_B (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "11e43d6df75956748d714e08d22a6072706d229f", "filename": "libgcc/soft-fp/floatundibf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fsoft-fp%2Ffloatundibf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libgcc%2Fsoft-fp%2Ffloatundibf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatundibf.c?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 64bit unsigned integer to bfloat16\n+   Copyright (C) 2007-2023 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <https://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"brain.h\"\n+\n+BFtype\n+__floatundibf (UDItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_B (A);\n+  BFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_B (A, i, DI_BITS, UDItype);\n+  FP_PACK_RAW_B (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "4ae63094eb7d70b48da287461f0c3029c4e1d3bb", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13071c3c7d1baed8426bd054744de887eb82446d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13071c3c7d1baed8426bd054744de887eb82446d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=13071c3c7d1baed8426bd054744de887eb82446d", "patch": "@@ -2828,6 +2828,9 @@ CXXABI_1.3.14 {\n     _ZTIDF[0-9]*[_bx];\n     _ZTIPDF[0-9]*[_bx];\n     _ZTIPKDF[0-9]*[_bx];\n+    _ZTIu6__bf16;\n+    _ZTIPu6__bf16;\n+    _ZTIPKu6__bf16;\n \n } CXXABI_1.3.13;\n "}]}