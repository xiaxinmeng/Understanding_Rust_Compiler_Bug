{"sha": "fe3ed885cda5ab920d361b694ee539242052022f", "node_id": "C_kwDOANBUbNoAKGZlM2VkODg1Y2RhNWFiOTIwZDM2MWI2OTRlZTUzOTI0MjA1MjAyMmY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T16:26:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T20:41:46Z"}, "message": "libstdc++: Limit new basic_string(nullptr_t) constructor to C++23 [PR104099]\n\nThe new deleted constructors added by P2166R1 are a breaking change,\nmaking previously valid code ill-formed in C++23. As a result, they\nshould only be defined for C++23 and not for C++11 and up.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104099\n\t* include/bits/basic_string.h (basic_string(nullptr_t)): Only\n\tdefine for C++23.\n\t(operator=(nullptr_t)): Likewise.\n\t* include/bits/cow_string.h: Likewise.\n\t* include/std/string_view (basic_string_view(nullptr_t)):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/cons/char/nullptr.cc: Adjust\n\texpected error. Add examples that become ill-formed in C++23.\n\t* testsuite/21_strings/basic_string_view/cons/char/nonnull.cc:\n\tAdjust expected errors.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/nonnull.cc:\n\tLikewise.", "tree": {"sha": "a63b3cabe4968a46b161824b30fa700c8bea1feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63b3cabe4968a46b161824b30fa700c8bea1feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe3ed885cda5ab920d361b694ee539242052022f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3ed885cda5ab920d361b694ee539242052022f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3ed885cda5ab920d361b694ee539242052022f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3ed885cda5ab920d361b694ee539242052022f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4a54adb2164315d18fd8980c0fc37eb3d22252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4a54adb2164315d18fd8980c0fc37eb3d22252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4a54adb2164315d18fd8980c0fc37eb3d22252"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "fc6a303a95787ecd9db7a9b69c48c24c52366d5d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -728,10 +728,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \telse\n \t  _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());\n       }\n+#endif // C++11\n \n+#if __cplusplus >= 202100L\n       basic_string(nullptr_t) = delete;\n       basic_string& operator=(nullptr_t) = delete;\n-#endif // C++11\n+#endif // C++23\n \n       /**\n        *  @brief  Construct string as copy of a range."}, {"sha": "a49a5b04f2f242a132e58ef093010c0af2ce59ac", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -665,10 +665,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \telse\n \t  _M_dataplus._M_p = _S_construct(__str.begin(), __str.end(), __a);\n       }\n+#endif // C++11\n \n+#if __cplusplus >= 202100L\n       basic_string(nullptr_t) = delete;\n       basic_string& operator=(nullptr_t) = delete;\n-#endif // C++11\n+#endif // C++23\n \n       /**\n        *  @brief  Construct string as copy of a range."}, {"sha": "bccf4d1847fccb7c84c739be9232ac6c4cc25fbf", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -167,10 +167,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tnoexcept(noexcept(ranges::size(__r)) && noexcept(ranges::data(__r)))\n \t: _M_len(ranges::size(__r)), _M_str(ranges::data(__r))\n \t{ }\n+\n+      basic_string_view(nullptr_t) = delete;\n #endif // C++23\n #endif // C++20\n \n-      basic_string_view(nullptr_t) = delete;\n \n       constexpr basic_string_view&\n       operator=(const basic_string_view&) noexcept = default;"}, {"sha": "a69fa614ba38685a5451c50fa203263a444de642", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/nullptr.cc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnullptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnullptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnullptr.cc?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -1,4 +1,28 @@\n // { dg-do compile { target c++11 } }\n #include <string>\n \n-std::string s = nullptr; // { dg-error \"deleted\" \"P2166R1\" }\n+std::string s = nullptr; // { dg-error \"deleted\" \"P2166R1\" { target c++23 } }\n+\n+struct S\n+{\n+  operator const char*() const { return \"\"; }\n+  operator std::nullptr_t() const { return {}; }\n+};\n+\n+std::string s2{ S{} }; // { dg-error \"deleted\" \"PR 104099\" { target c++23 } }\n+\n+#if __cpp_concepts\n+struct J\n+{\n+  // In C++20 this selects basic_string(const char*),\n+  // in C++23 it's ambiguous due to basic_string(nullptr_t).\n+  template<typename T>\n+    requires (!std::is_same_v<std::allocator<char>, T>)\n+    && (!std::is_same_v<std::string, T>)\n+    && (!std::is_same_v<char, T>)\n+    && (!std::is_same_v<std::string_view, T>)\n+    operator T() const { return {}; }\n+};\n+\n+std::string s3{ J{} }; // { dg-error \"ambiguous\" \"PR 104099\" { target c++23 } }\n+#endif"}, {"sha": "2e43788e4f5b4a8c1556a3846b1eb3a0caff2cea", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/nonnull.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Fnonnull.cc?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -25,5 +25,6 @@ test01()\n {\n   std::string_view s((const char*)nullptr); // { dg-warning \"\\\\\\[-Wnonnull\" }\n   std::string_view t((char*)nullptr);\t    // { dg-warning \"\\\\\\[-Wnonnull\" }\n-  std::string_view u(nullptr);\t\t    // { dg-error \"deleted\" }\n+  std::string_view u(nullptr);\t\t    // { dg-warning \"\\\\\\[-Wnonnull\" \"\" { target c++20_down } }\n+// { dg-error \"deleted\" \"P2166R1\" { target c++23 } 0 }\n }"}, {"sha": "a146d383324463d729c408606d7f56739b4c19f9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/nonnull.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe3ed885cda5ab920d361b694ee539242052022f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Fnonnull.cc?ref=fe3ed885cda5ab920d361b694ee539242052022f", "patch": "@@ -25,5 +25,6 @@ test01()\n {\n   std::wstring_view s((const wchar_t*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n   std::wstring_view t((wchar_t*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n-  std::wstring_view u(nullptr);\t\t\t// { dg-error \"deleted\" }\n+  std::wstring_view u(nullptr);\t\t\t// { dg-warning \"\\\\\\[-Wnonnull\" \"\" { target c++20_down } }\n+// { dg-error \"deleted\" \"P2166R1\" { target c++23 } 0 }\n }"}]}