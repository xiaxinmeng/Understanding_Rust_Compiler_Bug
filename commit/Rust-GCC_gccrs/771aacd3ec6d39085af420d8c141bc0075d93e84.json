{"sha": "771aacd3ec6d39085af420d8c141bc0075d93e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxYWFjZDNlYzZkMzkwODVhZjQyMGQ4YzE0MWJjMDA3NWQ5M2U4NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-07-09T15:43:01Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-09T15:43:01Z"}, "message": "AccessControlContext.java, [...]: Fixed javadocs.\n\n2004-07-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/security/AccessControlContext.java,\n\tjava/security/SecureClassLoader.java:\n\tFixed javadocs.\n\nFrom-SVN: r84383", "tree": {"sha": "f74a95cb42e7071d6e10ab379810c15967c6a30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74a95cb42e7071d6e10ab379810c15967c6a30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/771aacd3ec6d39085af420d8c141bc0075d93e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771aacd3ec6d39085af420d8c141bc0075d93e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771aacd3ec6d39085af420d8c141bc0075d93e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771aacd3ec6d39085af420d8c141bc0075d93e84/comments", "author": null, "committer": null, "parents": [{"sha": "3d5f053c02458ada47230963765efe2e09032f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5f053c02458ada47230963765efe2e09032f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5f053c02458ada47230963765efe2e09032f53"}], "stats": {"total": 147, "additions": 75, "deletions": 72}, "files": [{"sha": "fc3524fa67ac591cf3a1e0a1e28927fce95cff6f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=771aacd3ec6d39085af420d8c141bc0075d93e84", "patch": "@@ -1,3 +1,9 @@\n+2004-07-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/security/AccessControlContext.java,\n+\tjava/security/SecureClassLoader.java:\n+\tFixed javadocs.\n+\n 2004-07-09  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/ObjectInputStream.java (readFields): Use long datatype"}, {"sha": "62370224d119813ce97038e32ff884b6e045e2cc", "filename": "libjava/java/security/AccessControlContext.java", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java?ref=771aacd3ec6d39085af420d8c141bc0075d93e84", "patch": "@@ -1,5 +1,5 @@\n /* AccessControlContext.java --- Access Control Context Class\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,30 +38,30 @@\n package java.security;\n \n /**\n-   AccessControlContext makes system resource access decsion \n-   based on permission rights.  \n-\n-   It is used for a specific context and has only one method\n-   checkPermission. It is similar to AccessController except\n-   that it makes decsions based on the current context instead\n-   of the the current thread.\n-\n-   It is created by call AccessController.getContext method.\n-\n-   @author Mark Benvenuto\n-   @since JDK 1.2\n+ * AccessControlContext makes system resource access decsion \n+ * based on permission rights.  \n+ *\n+ * It is used for a specific context and has only one method\n+ * checkPermission. It is similar to AccessController except\n+ * that it makes decsions based on the current context instead\n+ * of the the current thread.\n+ *\n+ * It is created by call AccessController.getContext method.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n  */\n public final class AccessControlContext\n {\n   private ProtectionDomain protectionDomain[];\n   private DomainCombiner combiner;\n \n   /**\n-     Construct a new AccessControlContext with the specified\n-     ProtectionDomains. <code>context</code> must not be \n-     null and duplicates will be removed.\n-\n-     @param context The ProtectionDomains to use\n+   * Construct a new AccessControlContext with the specified\n+   * ProtectionDomains. <code>context</code> must not be \n+   * null and duplicates will be removed.\n+   *\n+   * @param context The ProtectionDomains to use\n    */\n   public AccessControlContext(ProtectionDomain[]context)\n   {\n@@ -91,12 +91,10 @@ public AccessControlContext(ProtectionDomain[]context)\n   }\n \n   /**\n-     Construct a new AccessControlContext with the specified\n-     ProtectionDomains and DomainCombiner\n-\n-     @param context The ProtectionDomains to use\n-\n-     @since JDK 1.3\n+   * Construct a new AccessControlContext with the specified\n+   * ProtectionDomains and DomainCombiner\n+   *\n+   * @since 1.3\n    */\n   public AccessControlContext(AccessControlContext acc,\n \t\t\t      DomainCombiner combiner)\n@@ -106,22 +104,22 @@ public AccessControlContext(AccessControlContext acc,\n   }\n \n   /**\n-     Returns the Domain Combiner associated with the AccessControlContext\n-\n-     @returns the DomainCombiner\n+   * Returns the Domain Combiner associated with the AccessControlContext\n+   *\n+   * @return the DomainCombiner\n    */\n   public DomainCombiner getDomainCombiner()\n   {\n     return combiner;\n   }\n \n   /**\n-     Determines whether or not the specific permission is granted\n-     depending on the context it is within. \n-\n-     @param perm a permission to check\n-\n-     @throws AccessControlException if the permssion is not permitted\n+   * Determines whether or not the specific permission is granted\n+   * depending on the context it is within. \n+   *\n+   * @param perm a permission to check\n+   *\n+   * @throws AccessControlException if the permssion is not permitted\n    */\n   public void checkPermission(Permission perm) throws AccessControlException\n   {\n@@ -133,14 +131,14 @@ public void checkPermission(Permission perm) throws AccessControlException\n   }\n \n   /**\n-     Checks if two AccessControlContexts are equal.\n-\n-     It first checks if obj is an AccessControlContext class, and\n-     then checks if each ProtectionDomain matches.\n-\n-     @param obj The object to compare this class to\n-\n-     @return true if equal, false otherwise\n+   * Checks if two AccessControlContexts are equal.\n+   *\n+   * It first checks if obj is an AccessControlContext class, and\n+   * then checks if each ProtectionDomain matches.\n+   *\n+   * @param obj The object to compare this class to\n+   *\n+   * @return true if equal, false otherwise\n    */\n   public boolean equals(Object obj)\n   {\n@@ -160,9 +158,9 @@ public boolean equals(Object obj)\n   }\n \n   /**\n-     Computes a hash code of this class\n-\n-     @return a hash code representing this class\n+   * Computes a hash code of this class\n+   *\n+   * @return a hash code representing this class\n    */\n   public int hashCode()\n   {"}, {"sha": "1f67a33dc2c0650dda209f757faa986808d84c0c", "filename": "libjava/java/security/SecureClassLoader.java", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771aacd3ec6d39085af420d8c141bc0075d93e84/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java?ref=771aacd3ec6d39085af420d8c141bc0075d93e84", "patch": "@@ -1,5 +1,5 @@\n /* SecureClassLoader.java --- A Secure Class Loader\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,13 +38,13 @@\n package java.security;\n \n /**\n-   A Secure Class Loader for loading classes with additional \n-   support for specifying code source and permissions when\n-   they are retrieved by the system policy handler.\n-\n-   @since JDK 1.2\n-\n-   @author Mark Benvenuto\n+ * A Secure Class Loader for loading classes with additional \n+ * support for specifying code source and permissions when\n+ * they are retrieved by the system policy handler.\n+ *\n+ * @since 1.2\n+ *\n+ * @author Mark Benvenuto\n  */\n public class SecureClassLoader extends ClassLoader\n {\n@@ -64,18 +64,18 @@ protected SecureClassLoader()\n   }\n \n   /** \n-     Creates a class using an array of bytes and a \n-     CodeSource.\n-\n-     @param name the name to give the class.  null if unknown.\n-     @param b the data representing the classfile, in classfile format.\n-     @param off the offset into the data where the classfile starts.\n-     @param len the length of the classfile data in the array.\n-     @param cs the CodeSource for the class or null when unknown.\n-\n-     @return the class that was defined and optional CodeSource.\n-\n-     @exception ClassFormatError if the byte array is not in proper classfile format.\n+   * Creates a class using an array of bytes and a \n+   * CodeSource.\n+   *\n+   * @param name the name to give the class.  null if unknown.\n+   * @param b the data representing the classfile, in classfile format.\n+   * @param off the offset into the data where the classfile starts.\n+   * @param len the length of the classfile data in the array.\n+   * @param cs the CodeSource for the class or null when unknown.\n+   *\n+   * @return the class that was defined and optional CodeSource.\n+   *\n+   * @exception ClassFormatError if the byte array is not in proper classfile format.\n    */\n   protected final Class defineClass(String name, byte[] b, int off, int len,\n \t\t\t\t    CodeSource cs)\n@@ -92,14 +92,13 @@ protected final Class defineClass(String name, byte[] b, int off, int len,\n   }\n \n   /**\n-     Returns a PermissionCollection for the specified CodeSource.\n-     The default implementation invokes \n-     java.security.Policy.getPermissions.\n-\n-     This method is called by defineClass that takes a CodeSource\n-     arguement to build a proper ProtectionDomain for the class\n-     being defined.\n-\n+   * Returns a PermissionCollection for the specified CodeSource.\n+   * The default implementation invokes \n+   * java.security.Policy.getPermissions.\n+   *\n+   * This method is called by defineClass that takes a CodeSource\n+   * arguement to build a proper ProtectionDomain for the class\n+   * being defined.\n    */\n   protected PermissionCollection getPermissions(CodeSource cs)\n   {"}]}