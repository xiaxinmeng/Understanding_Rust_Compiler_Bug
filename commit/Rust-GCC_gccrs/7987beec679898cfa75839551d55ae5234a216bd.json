{"sha": "7987beec679898cfa75839551d55ae5234a216bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4N2JlZWM2Nzk4OThjZmE3NTgzOTU1MWQ1NWFlNTIzNGEyMTZiZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-03-13T11:39:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-03-13T11:39:57Z"}, "message": "Fortran: Fix for class defined operators [PR99125].\n\n2021-03-13  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/99125\n\t* trans-array.c (gfc_conv_expr_descriptor): For deferred length\n\tlength components use the ss_info string length instead of\n\tgfc_get_expr_charlen. Make sure that the deferred string length\n\tis a variable before assigning to it. Otherwise use the expr.\n\t* trans-expr.c (gfc_conv_string_length): Make sure that the\n\tdeferred string length is a variable before assigning to it.\n\ngcc/testsuite/\n\tPR fortran/99125\n\t* gfortran.dg/alloc_deferred_comp_1.f90: New test.", "tree": {"sha": "a22adf3ab5449404f386e1d1a8fe256253e945ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22adf3ab5449404f386e1d1a8fe256253e945ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7987beec679898cfa75839551d55ae5234a216bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7987beec679898cfa75839551d55ae5234a216bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7987beec679898cfa75839551d55ae5234a216bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7987beec679898cfa75839551d55ae5234a216bd/comments", "author": null, "committer": null, "parents": [{"sha": "bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "be5eb89350f46bb0ab719c7609650f4508cbdf5f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7987beec679898cfa75839551d55ae5234a216bd", "patch": "@@ -7670,15 +7670,21 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n       /* Set the string_length for a character array.  */\n       if (expr->ts.type == BT_CHARACTER)\n \t{\n-\t  se->string_length =  gfc_get_expr_charlen (expr);\n+\t  if (deferred_array_component)\n+\t    se->string_length = ss_info->string_length;\n+\t  else\n+\t    se->string_length =  gfc_get_expr_charlen (expr);\n+\n \t  if (VAR_P (se->string_length)\n \t      && expr->ts.u.cl->backend_decl == se->string_length)\n \t    tmp = ss_info->string_length;\n \t  else\n \t    tmp = se->string_length;\n \n-\t  if (expr->ts.deferred)\n+\t  if (expr->ts.deferred && VAR_P (expr->ts.u.cl->backend_decl))\n \t    gfc_add_modify (&se->pre, expr->ts.u.cl->backend_decl, tmp);\n+\t  else\n+\t    expr->ts.u.cl->backend_decl = tmp;\n \t}\n \n       /* If we have an array section, are assigning  or passing an array"}, {"sha": "f6ef5c023bf08670c54ee589b40edcfb96a7a3d5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7987beec679898cfa75839551d55ae5234a216bd", "patch": "@@ -2485,7 +2485,7 @@ gfc_conv_string_length (gfc_charlen * cl, gfc_expr * expr, stmtblock_t * pblock)\n \t\t\t     se.expr, build_zero_cst (TREE_TYPE (se.expr)));\n   gfc_add_block_to_block (pblock, &se.pre);\n \n-  if (cl->backend_decl)\n+  if (cl->backend_decl && VAR_P (cl->backend_decl))\n     gfc_add_modify (pblock, cl->backend_decl, se.expr);\n   else\n     cl->backend_decl = gfc_evaluate_now (se.expr, pblock);"}, {"sha": "0fc54d5331cf7d552d3bf0674c50af13dd3d85f2", "filename": "gcc/testsuite/gfortran.dg/alloc_deferred_comp_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_deferred_comp_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7987beec679898cfa75839551d55ae5234a216bd/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_deferred_comp_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_deferred_comp_1.f90?ref=7987beec679898cfa75839551d55ae5234a216bd", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR99125, where the array reference in the print\n+! statement caused an ICE because the gimplifier complained about '0'\n+! being used as an lvalue.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t\n+      character(:), allocatable :: a(:)\n+   end type\n+   type(t) :: x\n+   character(8) :: c(3) = ['12 45 78','23 56 89','34 67 90']\n+   x%a = c\n+   if (any (x%a(2:3) .ne. ['23 56 89','34 67 90'])) stop 1\n+   if (any (x%a(2:3)(4:5) .ne. ['56','67'])) stop 2 ! Bizarrely this worked.\n+end"}]}