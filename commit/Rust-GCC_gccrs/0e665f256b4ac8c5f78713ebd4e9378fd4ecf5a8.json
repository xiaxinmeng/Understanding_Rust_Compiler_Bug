{"sha": "0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2NjVmMjU2YjRhYzhjNWY3ODcxM2ViZDRlOTM3OGZkNGVjZjVhOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-21T22:41:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-21T22:41:02Z"}, "message": "c++: Constrained inherited constructor template [PR94549]\n\nA comment in satisfy_declaration_constraints says\n\n  /* For inherited constructors, consider the original declaration;\n     it has the correct template information attached. */\n  d = strip_inheriting_ctors (d);\n\nbut it looks like this comment is wrong when the inherited constructor is for an\ninstantiation of a constructor template.  In that case, DECL_TEMPLATE_INFO is\ncorrect and DECL_INHERITED_CTOR points to the constructor template of the base\nclass rather than to the particular instantiation of the constructor template\n(and so the DECL_TI_ARGS of the DECL_INHERITED_CTOR are in their dependent\nform).\n\nSo doing strip_inheriting_ctors in this case then eventually leads to\nsatisfy_associated_constraints returning true regardless of the constraints\nthemselves, due to the passed in 'args' being dependent.\n\nAn inherited constructor seems to have a non-empty DECL_TEMPLATE_INFO only when\nit's for an instantiation of a constructor template, so this patch fixes this\nissue by checking for empty DECL_TEMPLATE_INFO before calling\nstrip_inheriting_ctors.\n\nThere is another unguarded call to strip_inheriting_ctors in\nget_normalized_constraints_from_decl, but this one seems to be safe to do\nunconditionally because the rest of that function doesn't need/look at the\nDECL_TI_ARGS of the decl.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94549\n\t* constraint.cc (satisfy_declaration_constraints): Don't strip the\n\tinherited constructor if it already has template information.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94549\n\t* g++.dg/concepts/inherit-ctor3.C: Adjust expected diagnostics.\n\t* g++.dg/cpp2a/concepts-inherit-ctor4.C: New test.\n\t* g++.dg/cpp2a/concepts-inherit-ctor8.C: New test.", "tree": {"sha": "62ef8f7c90b6b9c30ddcedef2cfe428c51b40641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ef8f7c90b6b9c30ddcedef2cfe428c51b40641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/comments", "author": null, "committer": null, "parents": [{"sha": "e76100ced607218a3bf26344fd57d7384a7c18b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76100ced607218a3bf26344fd57d7384a7c18b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76100ced607218a3bf26344fd57d7384a7c18b5"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "67b571c4408d37f0eee61ad24a0d1666c0ac52a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -1,5 +1,9 @@\n 2020-04-21  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94549\n+\t* constraint.cc (satisfy_declaration_constraints): Don't strip the\n+\tinherited constructor if it already has template information.\n+\n \tPR c++/94597\n \t* pt.c (any_template_parm_r) <case IDENTIFIER_NODE>: New case.  If this\n \tis a conversion operator, visit its TREE_TYPE."}, {"sha": "d56ec101cd99d64acc9e97600f22579c376a107a", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -2737,9 +2737,10 @@ satisfy_declaration_constraints (tree t, subst_info info)\n {\n   gcc_assert (DECL_P (t));\n \n-  /* For inherited constructors, consider the original declaration;\n-     it has the correct template information attached. */\n-  if (flag_new_inheriting_ctors)\n+  if (!DECL_TEMPLATE_INFO (t))\n+    /* For inherited constructors without template information, consider\n+       the original declaration; it has the correct template information\n+       attached.  */\n     t = strip_inheriting_ctors (t);\n \n   /* Update the declaration for diagnostics.  */"}, {"sha": "87d99b1e22b7e0e34afdf568a403999b4da54df2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -1,3 +1,10 @@\n+2020-04-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94549\n+\t* g++.dg/concepts/inherit-ctor3.C: Adjust expected diagnostics.\n+\t* g++.dg/cpp2a/concepts-inherit-ctor4.C: New test.\n+\t* g++.dg/cpp2a/concepts-inherit-ctor8.C: New test.\n+\n 2020-04-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/94149"}, {"sha": "6b7a7a439109aa5df607175636c9767e81ce4df3", "filename": "gcc/testsuite/g++.dg/concepts/inherit-ctor3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -12,12 +12,12 @@ template<typename T>\n \n template<typename T>\n   struct S2 : S1<T> { // { dg-error \"no matching function\" }\n-    using S1<T>::S1; // { dg-error \"no matching function\" }\n+    using S1<T>::S1;\n   };\n \n struct X { } x;\n \n int main() {\n-  S2<X> s1(0); // { dg-error \"use of deleted function\" }\n+  S2<X> s1(0); // { dg-error \"no matching function\" }\n   S2<X> s2; // { dg-error \"use of deleted function\" }\n }"}, {"sha": "34eaf22c26c54d98f50ec62da836824d07c1b76f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -10,9 +10,9 @@ template<typename T>\n \n template<typename T>\n   struct S2 : S1<T> {\n-    using S1<T>::S1; // { dg-error \"no matching function\" }\n+    using S1<T>::S1;\n   };\n \n int main() {\n-  S2<int> s(0); // { dg-error \"use of deleted function\" }\n+  S2<int> s(0); // { dg-error \"no matching function\" }\n }"}, {"sha": "5b571e3231866fb7c9926365cf781f2416e9d89c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor8.C?ref=0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/94549\n+// { dg-do compile { target concepts } }\n+\n+struct base {\n+  template <typename type>\n+    requires false\n+  base(type);\n+\n+  template <typename type>\n+    requires true\n+  base(type);\n+};\n+\n+struct derived : base {\n+  using base::base;\n+};\n+\n+void foo() {\n+  derived{'G'};\n+}"}]}