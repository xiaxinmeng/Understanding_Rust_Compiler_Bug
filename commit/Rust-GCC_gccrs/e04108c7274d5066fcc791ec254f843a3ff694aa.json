{"sha": "e04108c7274d5066fcc791ec254f843a3ff694aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0MTA4YzcyNzRkNTA2NmZjYzc5MWVjMjU0Zjg0M2EzZmY2OTRhYQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-10-01T09:37:46Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-10-01T09:37:46Z"}, "message": "[ARC] Avoid specific constants to end in limm field.\n\nAvoid constants to end up in the limm field for particular\ninstructions when compiling for size.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (*add_n): Clean up pattern, update instruction\n\tconstraints.\n\t(ashlsi3_insn): Update instruction constraints.\n\t(ashrsi3_insn): Likewise.\n\t(rotrsi3): Likewise.\n\t(add_shift): Likewise.\n\t* config/arc/constraints.md (Csz): New 32 bit constraint. It\n\tavoids placing in the limm field small constants which, otherwise,\n\tcould end into a small instruction.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/tph_addx.c: New test.\n\nFrom-SVN: r264737", "tree": {"sha": "f9952dbead7a8869cd70d50645a0ae67c3b3e270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9952dbead7a8869cd70d50645a0ae67c3b3e270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e04108c7274d5066fcc791ec254f843a3ff694aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04108c7274d5066fcc791ec254f843a3ff694aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04108c7274d5066fcc791ec254f843a3ff694aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04108c7274d5066fcc791ec254f843a3ff694aa/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97e1d32c5e6efdfac3a9d6c56e8127b958fff88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e1d32c5e6efdfac3a9d6c56e8127b958fff88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e1d32c5e6efdfac3a9d6c56e8127b958fff88f"}], "stats": {"total": 124, "additions": 93, "deletions": 31}, "files": [{"sha": "5214064bd1400ddf638e8c30a0cd97b0aff864bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e04108c7274d5066fcc791ec254f843a3ff694aa", "patch": "@@ -1,3 +1,15 @@\n+2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (*add_n): Clean up pattern, update instruction\n+\tconstraints.\n+\t(ashlsi3_insn): Update instruction constraints.\n+\t(ashrsi3_insn): Likewise.\n+\t(rotrsi3): Likewise.\n+\t(add_shift): Likewise.\n+\t* config/arc/constraints.md (Csz): New 32 bit constraint. It\n+\tavoids placing in the limm field small constants which, otherwise,\n+\tcould end into a small instruction.\n+\n 2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (maddsidi4_split): Don't use dmac if the"}, {"sha": "33804d7224ac404cb2cffbd45f409acd3f5cf995", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=e04108c7274d5066fcc791ec254f843a3ff694aa", "patch": "@@ -3173,30 +3173,17 @@ archs4x, archs4xd, archs4xd_slow\"\n    (set (match_dup 3) (match_dup 4))])\n \n (define_insn \"*add_n\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,Rcw,W,W,w,w\")\n-\t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c,c,c,c,c\")\n-\t                    (match_operand:SI 2 \"_1_2_3_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"nonmemory_operand\" \"0,0,c,?Cal,?c,??Cal\")))]\n-  \"\"\n-  \"add%c2%? %0,%3,%1%&\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"length\" \"*,4,4,8,4,8\")\n-   (set_attr \"predicable\" \"yes,yes,no,no,no,no\")\n-   (set_attr \"cond\" \"canuse,canuse,nocond,nocond,nocond,nocond\")\n-   (set_attr \"iscompact\" \"maybe,false,false,false,false,false\")])\n-\n-(define_insn \"*add_n\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,Rcw,W,W,w,w\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c,c,c,c,c\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,r,r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")\n \t\t\t  (match_operand:SI 2 \"_2_4_8_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"nonmemory_operand\" \"0,0,c,?Cal,?c,??Cal\")))]\n+\t\t (match_operand:SI 3 \"nonmemory_operand\" \"0,r,Csz\")))]\n   \"\"\n-  \"add%z2%? %0,%3,%1%&\"\n+  \"add%z2%?\\\\t%0,%3,%1%&\"\n   [(set_attr \"type\" \"shift\")\n-   (set_attr \"length\" \"*,4,4,8,4,8\")\n-   (set_attr \"predicable\" \"yes,yes,no,no,no,no\")\n-   (set_attr \"cond\" \"canuse,canuse,nocond,nocond,nocond,nocond\")\n-   (set_attr \"iscompact\" \"maybe,false,false,false,false,false\")])\n+   (set_attr \"length\" \"*,4,8\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")\n+   (set_attr \"iscompact\" \"maybe,false,false\")])\n \n ;; N.B. sub[123] has the operands of the MINUS in the opposite order from\n ;; what synth_mult likes.\n@@ -3613,7 +3600,7 @@ archs4x, archs4xd, archs4xd_slow\"\n ; provide one alternatice for this, without condexec support.\n (define_insn \"*ashlsi3_insn\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=Rcq,Rcqq,Rcqq,Rcw, w,   w\")\n-\t(ashift:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCal\")\n+\t(ashift:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCsz\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\"  \"K,  K,RcqqM, cL,cL,cCal\")))]\n   \"TARGET_BARREL_SHIFTER\n    && (register_operand (operands[1], SImode)\n@@ -3626,7 +3613,7 @@ archs4x, archs4xd, archs4xd_slow\"\n \n (define_insn \"*ashrsi3_insn\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcq,Rcqq,Rcqq,Rcw, w,   w\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCal\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCsz\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\"  \"K,  K,RcqqM, cL,cL,cCal\")))]\n   \"TARGET_BARREL_SHIFTER\n    && (register_operand (operands[1], SImode)\n@@ -3653,7 +3640,7 @@ archs4x, archs4xd, archs4xd_slow\"\n \n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcw, w,   w\")\n-\t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \" 0,cL,cCal\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \" 0,cL,cCsz\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"cL,cL,cCal\")))]\n   \"TARGET_BARREL_SHIFTER\"\n   \"ror%? %0,%1,%2\"\n@@ -4494,16 +4481,16 @@ archs4x, archs4xd, archs4xd_slow\"\n (define_peephole2\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))\n+\t\t   (match_operand:SI 2 \"_1_2_3_operand\" \"\")))\n   (set (match_operand:SI 3 \"dest_reg_operand\" \"\")\n        (plus:SI (match_operand:SI 4 \"nonmemory_operand\" \"\")\n \t\t(match_operand:SI 5 \"nonmemory_operand\" \"\")))]\n-  \"(INTVAL (operands[2]) == 1\n-    || INTVAL (operands[2]) == 2\n-    || INTVAL (operands[2]) == 3)\n-   && (true_regnum (operands[4]) == true_regnum (operands[0])\n+  \"(true_regnum (operands[4]) == true_regnum (operands[0])\n        || true_regnum (operands[5]) == true_regnum (operands[0]))\n-   && (peep2_reg_dead_p (2, operands[0]) || (true_regnum (operands[3]) == true_regnum (operands[0])))\"\n+   && (peep2_reg_dead_p (2, operands[0])\n+       || (true_regnum (operands[3]) == true_regnum (operands[0])))\n+   && !(optimize_size && satisfies_constraint_I (operands[4]))\n+   && !(optimize_size && satisfies_constraint_I (operands[5]))\"\n  ;; the preparation statements take care to put proper operand in operands[4]\n  ;; operands[4] will always contain the correct operand. This is added to satisfy commutativity\n   [(set (match_dup 3)\n@@ -6560,7 +6547,7 @@ archs4x, archs4xd, archs4xd_slow\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=q,r,r\")\n \t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")\n \t\t\t    (match_operand:SI 2 \"_1_2_3_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"nonmemory_operand\"  \"0,r,Cal\")))]\n+\t\t (match_operand:SI 3 \"nonmemory_operand\"  \"0,r,Csz\")))]\n   \"\"\n   \"add%2%?\\\\t%0,%3,%1\"\n   [(set_attr \"length\" \"*,4,8\")"}, {"sha": "cbb31249240875804e2658faae1d9a41aa537bb0", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=e04108c7274d5066fcc791ec254f843a3ff694aa", "patch": "@@ -435,6 +435,12 @@\n \t       && !arc_legitimate_pic_addr_p (op)\n \t       && !satisfies_constraint_I (op)\"))\n \n+(define_constraint \"Csz\"\n+  \"a 32 bit constant avoided when compiling for size.\"\n+  (match_test \"immediate_operand (op, VOIDmode)\n+\t       && !arc_legitimate_pic_addr_p (op)\n+\t       && !(satisfies_constraint_I (op) && optimize_size)\"))\n+\n ; Note that the 'cryptic' register constraints will not make reload use the\n ; associated class to reload into, but this will not penalize reloading of any\n ; other operands, or using an alternate part of the same alternative."}, {"sha": "7e73af73e754cd07e1b68d3623176e526d7fe603", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e04108c7274d5066fcc791ec254f843a3ff694aa", "patch": "@@ -1,3 +1,7 @@\n+2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/tph_addx.c: New test.\n+\n 2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/tmac-3.c: New file."}, {"sha": "f942ab19eb14ea0a37418b50b2f924d87bc0bc81", "filename": "gcc/testsuite/gcc.target/arc/tph_addx.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftph_addx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04108c7274d5066fcc791ec254f843a3ff694aa/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftph_addx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftph_addx.c?ref=e04108c7274d5066fcc791ec254f843a3ff694aa", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* when compiling for size avoid the following peephole\n+-------------------------------------------------------------\n+Pattern 1 : r0 = r1 << {i}\n+            r3 = r4/INT + r0     ;;and commutative\n+                ||\n+                \\/\n+            add{i} r3,r4/INT,r1\n+-------------------------------------------------------------\n+*/\n+\n+typedef int a;\n+typedef int b                                                    ;\n+struct c\n+{\n+  b d;\n+};\n+\n+struct e\n+{\n+  a f;\n+};\n+\n+int g(int family)\n+{\n+  switch (family)\n+  case 2:\n+    return sizeof(struct e);\n+  return 0;\n+}\n+\n+int h(int family)\n+{\n+  return 1 + g(family) - 1 ;\n+}\n+\n+extern void m (void);\n+\n+int i(int j)\n+{\n+  struct c *hdr;\n+  int k;\n+  int l;\n+  k = h(j);\n+  l = sizeof(struct c) +   k * 2;\n+  hdr->d = l ;\n+  if (j)\n+    m();\n+}\n+\n+/* { dg-final { scan-assembler-not \"add\\d\" } } */"}]}