{"sha": "df118d7ba138cacb17203d4a1b5f27730347cc77", "node_id": "C_kwDOANBUbNoAKGRmMTE4ZDdiYTEzOGNhY2IxNzIwM2Q0YTFiNWYyNzczMDM0N2NjNzc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-07-20T22:15:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-07-21T21:21:17Z"}, "message": "c++: defaulted ctor with DMI in union [PR94823]\n\nCWG2084 clarifies that a variant member with a non-trivial constructor does\nnot make the union's defaulted default constructor deleted if another\nvariant member has a default member initializer.\n\n\tDR 2084\n\tPR c++/94823\n\ngcc/cp/ChangeLog:\n\n\t* method.cc (walk_field_subobs): Fix DMI in union case.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-union7.C: New test.", "tree": {"sha": "2bc6c1de497c59f06d877c77656ee3973c7266e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc6c1de497c59f06d877c77656ee3973c7266e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df118d7ba138cacb17203d4a1b5f27730347cc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df118d7ba138cacb17203d4a1b5f27730347cc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df118d7ba138cacb17203d4a1b5f27730347cc77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df118d7ba138cacb17203d4a1b5f27730347cc77/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142e6af6959cba0d4dfd5cba6c4f16e15d154156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142e6af6959cba0d4dfd5cba6c4f16e15d154156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/142e6af6959cba0d4dfd5cba6c4f16e15d154156"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "573ef016f826ba6c9e6c577a75c5137c26e3d0bf", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df118d7ba138cacb17203d4a1b5f27730347cc77/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df118d7ba138cacb17203d4a1b5f27730347cc77/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=df118d7ba138cacb17203d4a1b5f27730347cc77", "patch": "@@ -2315,8 +2315,19 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t\t   bool diag, int flags, tsubst_flags_t complain,\n \t\t   bool dtor_from_ctor)\n {\n-  tree field;\n-  for (field = fields; field; field = DECL_CHAIN (field))\n+  if (!fields)\n+    return;\n+\n+  tree ctx = DECL_CONTEXT (fields);\n+\n+  /* CWG2084: A defaulted default ctor for a union with a DMI only initializes\n+     that member, so don't check other members.  */\n+  enum { unknown, no, yes }\n+  only_dmi_mem = (sfk == sfk_constructor && TREE_CODE (ctx) == UNION_TYPE\n+\t\t  ? unknown : no);\n+\n+ again:\n+  for (tree field = fields; field; field = DECL_CHAIN (field))\n     {\n       tree mem_type, argtype, rval;\n \n@@ -2331,9 +2342,18 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t asking if this is deleted, don't even look up the function; we don't\n \t want an error about a deleted function we aren't actually calling.  */\n       if (sfk == sfk_destructor && deleted_p == NULL\n-\t  && TREE_CODE (DECL_CONTEXT (field)) == UNION_TYPE)\n+\t  && TREE_CODE (ctx) == UNION_TYPE)\n \tbreak;\n \n+      if (only_dmi_mem != no)\n+\t{\n+\t  if (DECL_INITIAL (field))\n+\t    only_dmi_mem = yes;\n+\t  else\n+\t    /* Don't check this until we know there's no DMI.  */\n+\t    continue;\n+\t}\n+\n       mem_type = strip_array_types (TREE_TYPE (field));\n       if (SFK_ASSIGN_P (sfk))\n \t{\n@@ -2416,7 +2436,7 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t  if (constexpr_p\n \t      && cxx_dialect < cxx20\n \t      && !CLASS_TYPE_P (mem_type)\n-\t      && TREE_CODE (DECL_CONTEXT (field)) != UNION_TYPE)\n+\t      && TREE_CODE (ctx) != UNION_TYPE)\n \t    {\n \t      *constexpr_p = false;\n \t      if (diag)\n@@ -2465,6 +2485,13 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n       process_subob_fn (rval, sfk, spec_p, trivial_p, deleted_p,\n \t\t\tconstexpr_p, diag, field, dtor_from_ctor);\n     }\n+\n+  /* We didn't find a DMI in this union, now check all the members.  */\n+  if (only_dmi_mem == unknown)\n+    {\n+      only_dmi_mem = no;\n+      goto again;\n+    }\n }\n \n /* Base walker helper for synthesized_method_walk.  Inspect a direct"}, {"sha": "c840ddf5fbc5b964ccf3d235630379f40f1ada95", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-union7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df118d7ba138cacb17203d4a1b5f27730347cc77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df118d7ba138cacb17203d4a1b5f27730347cc77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union7.C?ref=df118d7ba138cacb17203d4a1b5f27730347cc77", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/94823\n+// { dg-do compile { target c++11 } }\n+\n+struct A{\n+  A(){}\n+};\n+union C{\n+  A a;\n+  int b = 0;\n+};\n+int main(){\n+  C c;\n+}"}]}