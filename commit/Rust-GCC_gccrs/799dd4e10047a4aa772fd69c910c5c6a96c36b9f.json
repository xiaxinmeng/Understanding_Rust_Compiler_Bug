{"sha": "799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5ZGQ0ZTEwMDQ3YTRhYTc3MmZkNjljOTEwYzVjNmE5NmMzNmI5Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-11T01:23:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-14T16:28:21Z"}, "message": "analyzer: fix constraint explosion on many-cased switch [PR96653]\n\nPR analyzer/96653 reports a CPU-time and memory explosion in -fanalyzer\nseen in Linux 5.9-rc1:drivers/media/v4l2-core/v4l2-ctrls.c on a switch\nstatement with many cases.\n\nThe issue is some old code in constraint_manager::get_or_add_equiv_class\nfor ensuring that comparisons between equivalence classes containing\nconstants work correctly.  The old code added constraints for every\npair of ECs containing constants, leading to O(N^2) constraints (for\nN constants).  Given that get_or_add_equiv_class also involves O(N)\ncomparisons, this led to at least O(N^3) CPU time, and O(N^2) memory\nconsumption when handling the \"default\" case, where N is the number of\nother cases in the switch statement.\n\nThe state rewrite of r11-2694-g808f4dfeb3a95f50f15e71148e5c1067f90a126d\nadded checking for comparisons between constants, making these explicit\nconstraints redundant, but failed to remove the code mentioned above.\n\nThis patch removes it, fixing the blow-up of constraints in the default\ncase.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96653\n\t* constraint-manager.cc\n\t(constraint_manager::get_or_add_equiv_class): Don't accumulate\n\ttransitive closure of all constraints on constants.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96653\n\t* gcc.dg/analyzer/pr96653.c: New test.", "tree": {"sha": "ff83864f925ce7906eb8df33a30899114a2593d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff83864f925ce7906eb8df33a30899114a2593d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799dd4e10047a4aa772fd69c910c5c6a96c36b9f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00adddd65689d995d8bdf306d0850c852ff0fd25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00adddd65689d995d8bdf306d0850c852ff0fd25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00adddd65689d995d8bdf306d0850c852ff0fd25"}], "stats": {"total": 1138, "additions": 1105, "deletions": 33}, "files": [{"sha": "c10b770f29465762294dc5fe9182d8339b96ab22", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799dd4e10047a4aa772fd69c910c5c6a96c36b9f/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799dd4e10047a4aa772fd69c910c5c6a96c36b9f/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "patch": "@@ -1160,39 +1160,6 @@ constraint_manager::get_or_add_equiv_class (const svalue *sval)\n \n   equiv_class_id new_id (m_equiv_classes.length () - 1);\n \n-  if (sval->maybe_get_constant ())\n-    {\n-      /* If we have a new EC for a constant, add constraints comparing this\n-\t to other constants we may have (so that we accumulate the transitive\n-\t closure of all constraints on constants as the constants are\n-\t added).  */\n-      for (equiv_class_id other_id (0); other_id.m_idx < new_id.m_idx;\n-\t   other_id.m_idx++)\n-\t{\n-\t  const equiv_class &other_ec = other_id.get_obj (*this);\n-\t  if (other_ec.m_constant\n-\t      && types_compatible_p (TREE_TYPE (new_ec->m_constant),\n-\t\t\t\t     TREE_TYPE (other_ec.m_constant)))\n-\t    {\n-\t      /* If we have two ECs, both with constants, the constants must be\n-\t\t non-equal (or they would be in the same EC).\n-\t\t Determine the direction of the inequality, and record that\n-\t\t fact.  */\n-\t      tree lt\n-\t\t= fold_binary (LT_EXPR, boolean_type_node,\n-\t\t\t       new_ec->m_constant, other_ec.m_constant);\n-\t      if (lt == boolean_true_node)\n-\t\tadd_constraint_internal (new_id, CONSTRAINT_LT, other_id);\n-\t      else if (lt == boolean_false_node)\n-\t\tadd_constraint_internal (other_id, CONSTRAINT_LT, new_id);\n-\t      /* Refresh new_id, in case ECs were merged.  SVAL should always\n-\t\t be present by now, so this should never lead to a\n-\t\t recursion.  */\n-\t      new_id = get_or_add_equiv_class (sval);\n-\t    }\n-\t}\n-    }\n-\n   return new_id;\n }\n "}, {"sha": "494c5312c6b4c2adcf933c3cef19e87986ebecf1", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96653.c", "status": "added", "additions": 1105, "deletions": 0, "changes": 1105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799dd4e10047a4aa772fd69c910c5c6a96c36b9f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799dd4e10047a4aa772fd69c910c5c6a96c36b9f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96653.c?ref=799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "patch": "@@ -0,0 +1,1105 @@\n+/* Examples of switch statements with many cases (with default values).\n+   Adapted from Linux 5.9-rc1:drivers/media/v4l2-core/v4l2-ctrls.c.  */\n+\n+/* { dg-additional-options \"-O1 -Wno-analyzer-too-complex\" } */\n+// TODO: remove need for -Wno-analyzer-too-complex\n+\n+typedef unsigned int u32;\n+typedef long long s64;\n+typedef unsigned long long u64;\n+\n+enum v4l2_ctrl_type {\n+  V4L2_CTRL_TYPE_INTEGER = 1,\n+  V4L2_CTRL_TYPE_BOOLEAN = 2,\n+  V4L2_CTRL_TYPE_MENU = 3,\n+  V4L2_CTRL_TYPE_BUTTON = 4,\n+  V4L2_CTRL_TYPE_INTEGER64 = 5,\n+  V4L2_CTRL_TYPE_CTRL_CLASS = 6,\n+  V4L2_CTRL_TYPE_STRING = 7,\n+  V4L2_CTRL_TYPE_BITMASK = 8,\n+  V4L2_CTRL_TYPE_INTEGER_MENU = 9,\n+\n+  V4L2_CTRL_COMPOUND_TYPES = 0x0100,\n+  V4L2_CTRL_TYPE_U8 = 0x0100,\n+  V4L2_CTRL_TYPE_U16 = 0x0101,\n+  V4L2_CTRL_TYPE_U32 = 0x0102,\n+  V4L2_CTRL_TYPE_AREA = 0x0106,\n+};\n+\n+const char *v4l2_ctrl_get_name(u32 id) {\n+  switch (id) {\n+  case (0x00980000 | 1):\n+    return \"User Controls\";\n+  case ((0x00980000 | 0x900) + 0):\n+    return \"Brightness\";\n+  case ((0x00980000 | 0x900) + 1):\n+    return \"Contrast\";\n+  case ((0x00980000 | 0x900) + 2):\n+    return \"Saturation\";\n+  case ((0x00980000 | 0x900) + 3):\n+    return \"Hue\";\n+  case ((0x00980000 | 0x900) + 5):\n+    return \"Volume\";\n+  case ((0x00980000 | 0x900) + 6):\n+    return \"Balance\";\n+  case ((0x00980000 | 0x900) + 7):\n+    return \"Bass\";\n+  case ((0x00980000 | 0x900) + 8):\n+    return \"Treble\";\n+  case ((0x00980000 | 0x900) + 9):\n+    return \"Mute\";\n+  case ((0x00980000 | 0x900) + 10):\n+    return \"Loudness\";\n+  case ((0x00980000 | 0x900) + 11):\n+    return \"Black Level\";\n+  case ((0x00980000 | 0x900) + 12):\n+    return \"White Balance, Automatic\";\n+  case ((0x00980000 | 0x900) + 13):\n+    return \"Do White Balance\";\n+  case ((0x00980000 | 0x900) + 14):\n+    return \"Red Balance\";\n+  case ((0x00980000 | 0x900) + 15):\n+    return \"Blue Balance\";\n+  case ((0x00980000 | 0x900) + 16):\n+    return \"Gamma\";\n+  case ((0x00980000 | 0x900) + 17):\n+    return \"Exposure\";\n+  case ((0x00980000 | 0x900) + 18):\n+    return \"Gain, Automatic\";\n+  case ((0x00980000 | 0x900) + 19):\n+    return \"Gain\";\n+  case ((0x00980000 | 0x900) + 20):\n+    return \"Horizontal Flip\";\n+  case ((0x00980000 | 0x900) + 21):\n+    return \"Vertical Flip\";\n+  case ((0x00980000 | 0x900) + 24):\n+    return \"Power Line Frequency\";\n+  case ((0x00980000 | 0x900) + 25):\n+    return \"Hue, Automatic\";\n+  case ((0x00980000 | 0x900) + 26):\n+    return \"White Balance Temperature\";\n+  case ((0x00980000 | 0x900) + 27):\n+    return \"Sharpness\";\n+  case ((0x00980000 | 0x900) + 28):\n+    return \"Backlight Compensation\";\n+  case ((0x00980000 | 0x900) + 29):\n+    return \"Chroma AGC\";\n+  case ((0x00980000 | 0x900) + 30):\n+    return \"Color Killer\";\n+  case ((0x00980000 | 0x900) + 31):\n+    return \"Color Effects\";\n+  case ((0x00980000 | 0x900) + 32):\n+    return \"Brightness, Automatic\";\n+  case ((0x00980000 | 0x900) + 33):\n+    return \"Band-Stop Filter\";\n+  case ((0x00980000 | 0x900) + 34):\n+    return \"Rotate\";\n+  case ((0x00980000 | 0x900) + 35):\n+    return \"Background Color\";\n+  case ((0x00980000 | 0x900) + 36):\n+    return \"Chroma Gain\";\n+  case ((0x00980000 | 0x900) + 37):\n+    return \"Illuminator 1\";\n+  case ((0x00980000 | 0x900) + 38):\n+    return \"Illuminator 2\";\n+  case ((0x00980000 | 0x900) + 39):\n+    return \"Min Number of Capture Buffers\";\n+  case ((0x00980000 | 0x900) + 40):\n+    return \"Min Number of Output Buffers\";\n+  case ((0x00980000 | 0x900) + 41):\n+    return \"Alpha Component\";\n+  case ((0x00980000 | 0x900) + 42):\n+    return \"Color Effects, CbCr\";\n+  case (0x00990000 | 1):\n+    return \"Codec Controls\";\n+  case ((0x00990000 | 0x900) + 0):\n+    return \"Stream Type\";\n+  case ((0x00990000 | 0x900) + 1):\n+    return \"Stream PMT Program ID\";\n+  case ((0x00990000 | 0x900) + 2):\n+    return \"Stream Audio Program ID\";\n+  case ((0x00990000 | 0x900) + 3):\n+    return \"Stream Video Program ID\";\n+  case ((0x00990000 | 0x900) + 4):\n+    return \"Stream PCR Program ID\";\n+  case ((0x00990000 | 0x900) + 5):\n+    return \"Stream PES Audio ID\";\n+  case ((0x00990000 | 0x900) + 6):\n+    return \"Stream PES Video ID\";\n+  case ((0x00990000 | 0x900) + 7):\n+    return \"Stream VBI Format\";\n+  case ((0x00990000 | 0x900) + 100):\n+    return \"Audio Sampling Frequency\";\n+  case ((0x00990000 | 0x900) + 101):\n+    return \"Audio Encoding\";\n+  case ((0x00990000 | 0x900) + 102):\n+    return \"Audio Layer I Bitrate\";\n+  case ((0x00990000 | 0x900) + 103):\n+    return \"Audio Layer II Bitrate\";\n+  case ((0x00990000 | 0x900) + 104):\n+    return \"Audio Layer III Bitrate\";\n+  case ((0x00990000 | 0x900) + 105):\n+    return \"Audio Stereo Mode\";\n+  case ((0x00990000 | 0x900) + 106):\n+    return \"Audio Stereo Mode Extension\";\n+  case ((0x00990000 | 0x900) + 107):\n+    return \"Audio Emphasis\";\n+  case ((0x00990000 | 0x900) + 108):\n+    return \"Audio CRC\";\n+  case ((0x00990000 | 0x900) + 109):\n+    return \"Audio Mute\";\n+  case ((0x00990000 | 0x900) + 110):\n+    return \"Audio AAC Bitrate\";\n+  case ((0x00990000 | 0x900) + 111):\n+    return \"Audio AC-3 Bitrate\";\n+  case ((0x00990000 | 0x900) + 112):\n+    return \"Audio Playback\";\n+  case ((0x00990000 | 0x900) + 113):\n+    return \"Audio Multilingual Playback\";\n+  case ((0x00990000 | 0x900) + 200):\n+    return \"Video Encoding\";\n+  case ((0x00990000 | 0x900) + 201):\n+    return \"Video Aspect\";\n+  case ((0x00990000 | 0x900) + 202):\n+    return \"Video B Frames\";\n+  case ((0x00990000 | 0x900) + 203):\n+    return \"Video GOP Size\";\n+  case ((0x00990000 | 0x900) + 204):\n+    return \"Video GOP Closure\";\n+  case ((0x00990000 | 0x900) + 205):\n+    return \"Video Pulldown\";\n+  case ((0x00990000 | 0x900) + 206):\n+    return \"Video Bitrate Mode\";\n+  case ((0x00990000 | 0x900) + 207):\n+    return \"Video Bitrate\";\n+  case ((0x00990000 | 0x900) + 208):\n+    return \"Video Peak Bitrate\";\n+  case ((0x00990000 | 0x900) + 209):\n+    return \"Video Temporal Decimation\";\n+  case ((0x00990000 | 0x900) + 210):\n+    return \"Video Mute\";\n+  case ((0x00990000 | 0x900) + 211):\n+    return \"Video Mute YUV\";\n+  case ((0x00990000 | 0x900) + 212):\n+    return \"Decoder Slice Interface\";\n+  case ((0x00990000 | 0x900) + 213):\n+    return \"MPEG4 Loop Filter Enable\";\n+  case ((0x00990000 | 0x900) + 214):\n+    return \"Number of Intra Refresh MBs\";\n+  case ((0x00990000 | 0x900) + 215):\n+    return \"Frame Level Rate Control Enable\";\n+  case ((0x00990000 | 0x900) + 218):\n+    return \"H264 MB Level Rate Control\";\n+  case ((0x00990000 | 0x900) + 216):\n+    return \"Sequence Header Mode\";\n+  case ((0x00990000 | 0x900) + 217):\n+    return \"Max Number of Reference Pics\";\n+  case ((0x00990000 | 0x900) + 300):\n+    return \"H263 I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 301):\n+    return \"H263 P-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 302):\n+    return \"H263 B-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 303):\n+    return \"H263 Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 304):\n+    return \"H263 Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 350):\n+    return \"H264 I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 351):\n+    return \"H264 P-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 352):\n+    return \"H264 B-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 354):\n+    return \"H264 Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 353):\n+    return \"H264 Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 355):\n+    return \"H264 8x8 Transform Enable\";\n+  case ((0x00990000 | 0x900) + 356):\n+    return \"H264 CPB Buffer Size\";\n+  case ((0x00990000 | 0x900) + 357):\n+    return \"H264 Entropy Mode\";\n+  case ((0x00990000 | 0x900) + 358):\n+    return \"H264 I-Frame Period\";\n+  case ((0x00990000 | 0x900) + 359):\n+    return \"H264 Level\";\n+  case ((0x00990000 | 0x900) + 360):\n+    return \"H264 Loop Filter Alpha Offset\";\n+  case ((0x00990000 | 0x900) + 361):\n+    return \"H264 Loop Filter Beta Offset\";\n+  case ((0x00990000 | 0x900) + 362):\n+    return \"H264 Loop Filter Mode\";\n+  case ((0x00990000 | 0x900) + 363):\n+    return \"H264 Profile\";\n+  case ((0x00990000 | 0x900) + 364):\n+    return \"Vertical Size of SAR\";\n+  case ((0x00990000 | 0x900) + 365):\n+    return \"Horizontal Size of SAR\";\n+  case ((0x00990000 | 0x900) + 366):\n+    return \"Aspect Ratio VUI Enable\";\n+  case ((0x00990000 | 0x900) + 367):\n+    return \"VUI Aspect Ratio IDC\";\n+  case ((0x00990000 | 0x900) + 368):\n+    return \"H264 Enable Frame Packing SEI\";\n+  case ((0x00990000 | 0x900) + 369):\n+    return \"H264 Set Curr. Frame as Frame0\";\n+  case ((0x00990000 | 0x900) + 370):\n+    return \"H264 FP Arrangement Type\";\n+  case ((0x00990000 | 0x900) + 371):\n+    return \"H264 Flexible MB Ordering\";\n+  case ((0x00990000 | 0x900) + 372):\n+    return \"H264 Map Type for FMO\";\n+  case ((0x00990000 | 0x900) + 373):\n+    return \"H264 FMO Number of Slice Groups\";\n+  case ((0x00990000 | 0x900) + 374):\n+    return \"H264 FMO Direction of Change\";\n+  case ((0x00990000 | 0x900) + 375):\n+    return \"H264 FMO Size of 1st Slice Grp\";\n+  case ((0x00990000 | 0x900) + 376):\n+    return \"H264 FMO No. of Consecutive MBs\";\n+  case ((0x00990000 | 0x900) + 377):\n+    return \"H264 Arbitrary Slice Ordering\";\n+  case ((0x00990000 | 0x900) + 378):\n+    return \"H264 ASO Slice Order\";\n+  case ((0x00990000 | 0x900) + 379):\n+    return \"Enable H264 Hierarchical Coding\";\n+  case ((0x00990000 | 0x900) + 380):\n+    return \"H264 Hierarchical Coding Type\";\n+  case ((0x00990000 | 0x900) + 381):\n+    return \"H264 Number of HC Layers\";\n+  case ((0x00990000 | 0x900) + 382):\n+    return \"H264 Set QP Value for HC Layers\";\n+  case ((0x00990000 | 0x900) + 383):\n+    return \"H264 Constrained Intra Pred\";\n+  case ((0x00990000 | 0x900) + 384):\n+    return \"H264 Chroma QP Index Offset\";\n+  case ((0x00990000 | 0x900) + 385):\n+    return \"H264 I-Frame Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 386):\n+    return \"H264 I-Frame Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 387):\n+    return \"H264 P-Frame Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 388):\n+    return \"H264 P-Frame Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 1000):\n+    return \"H264 Sequence Parameter Set\";\n+  case ((0x00990000 | 0x900) + 1001):\n+    return \"H264 Picture Parameter Set\";\n+  case ((0x00990000 | 0x900) + 1002):\n+    return \"H264 Scaling Matrix\";\n+  case ((0x00990000 | 0x900) + 1003):\n+    return \"H264 Slice Parameters\";\n+  case ((0x00990000 | 0x900) + 1004):\n+    return \"H264 Decode Parameters\";\n+  case ((0x00990000 | 0x900) + 1005):\n+    return \"H264 Decode Mode\";\n+  case ((0x00990000 | 0x900) + 1006):\n+    return \"H264 Start Code\";\n+  case ((0x00990000 | 0x900) + 270):\n+    return \"MPEG2 Level\";\n+  case ((0x00990000 | 0x900) + 271):\n+    return \"MPEG2 Profile\";\n+  case ((0x00990000 | 0x900) + 400):\n+    return \"MPEG4 I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 401):\n+    return \"MPEG4 P-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 402):\n+    return \"MPEG4 B-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 403):\n+    return \"MPEG4 Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 404):\n+    return \"MPEG4 Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 405):\n+    return \"MPEG4 Level\";\n+  case ((0x00990000 | 0x900) + 406):\n+    return \"MPEG4 Profile\";\n+  case ((0x00990000 | 0x900) + 407):\n+    return \"Quarter Pixel Search Enable\";\n+  case ((0x00990000 | 0x900) + 219):\n+    return \"Maximum Bytes in a Slice\";\n+  case ((0x00990000 | 0x900) + 220):\n+    return \"Number of MBs in a Slice\";\n+  case ((0x00990000 | 0x900) + 221):\n+    return \"Slice Partitioning Method\";\n+  case ((0x00990000 | 0x900) + 222):\n+    return \"VBV Buffer Size\";\n+  case ((0x00990000 | 0x900) + 223):\n+    return \"Video Decoder PTS\";\n+  case ((0x00990000 | 0x900) + 224):\n+    return \"Video Decoder Frame Count\";\n+  case ((0x00990000 | 0x900) + 225):\n+    return \"Initial Delay for VBV Control\";\n+  case ((0x00990000 | 0x900) + 227):\n+    return \"Horizontal MV Search Range\";\n+  case ((0x00990000 | 0x900) + 228):\n+    return \"Vertical MV Search Range\";\n+  case ((0x00990000 | 0x900) + 226):\n+    return \"Repeat Sequence Header\";\n+  case ((0x00990000 | 0x900) + 229):\n+    return \"Force Key Frame\";\n+  case ((0x00990000 | 0x900) + 250):\n+    return \"MPEG-2 Slice Parameters\";\n+  case ((0x00990000 | 0x900) + 251):\n+    return \"MPEG-2 Quantization Matrices\";\n+  case ((0x00990000 | 0x900) + 292):\n+    return \"FWHT Stateless Parameters\";\n+  case ((0x00990000 | 0x900) + 290):\n+    return \"FWHT I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 291):\n+    return \"FWHT P-Frame QP Value\";\n+\n+  case ((0x00990000 | 0x900) + 500):\n+    return \"VPX Number of Partitions\";\n+  case ((0x00990000 | 0x900) + 501):\n+    return \"VPX Intra Mode Decision Disable\";\n+  case ((0x00990000 | 0x900) + 502):\n+    return \"VPX No. of Refs for P Frame\";\n+  case ((0x00990000 | 0x900) + 503):\n+    return \"VPX Loop Filter Level Range\";\n+  case ((0x00990000 | 0x900) + 504):\n+    return \"VPX Deblocking Effect Control\";\n+  case ((0x00990000 | 0x900) + 505):\n+    return \"VPX Golden Frame Refresh Period\";\n+  case ((0x00990000 | 0x900) + 506):\n+    return \"VPX Golden Frame Indicator\";\n+  case ((0x00990000 | 0x900) + 507):\n+    return \"VPX Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 508):\n+    return \"VPX Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 509):\n+    return \"VPX I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 510):\n+    return \"VPX P-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 511):\n+    return \"VP8 Profile\";\n+  case ((0x00990000 | 0x900) + 512):\n+    return \"VP9 Profile\";\n+  case ((0x00990000 | 0x900) + 2000):\n+    return \"VP8 Frame Header\";\n+\n+  case ((0x00990000 | 0x900) + 602):\n+    return \"HEVC I-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 603):\n+    return \"HEVC P-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 604):\n+    return \"HEVC B-Frame QP Value\";\n+  case ((0x00990000 | 0x900) + 600):\n+    return \"HEVC Minimum QP Value\";\n+  case ((0x00990000 | 0x900) + 601):\n+    return \"HEVC Maximum QP Value\";\n+  case ((0x00990000 | 0x900) + 615):\n+    return \"HEVC Profile\";\n+  case ((0x00990000 | 0x900) + 616):\n+    return \"HEVC Level\";\n+  case ((0x00990000 | 0x900) + 618):\n+    return \"HEVC Tier\";\n+  case ((0x00990000 | 0x900) + 617):\n+    return \"HEVC Frame Rate Resolution\";\n+  case ((0x00990000 | 0x900) + 619):\n+    return \"HEVC Maximum Coding Unit Depth\";\n+  case ((0x00990000 | 0x900) + 623):\n+    return \"HEVC Refresh Type\";\n+  case ((0x00990000 | 0x900) + 626):\n+    return \"HEVC Constant Intra Prediction\";\n+  case ((0x00990000 | 0x900) + 625):\n+    return \"HEVC Lossless Encoding\";\n+  case ((0x00990000 | 0x900) + 627):\n+    return \"HEVC Wavefront\";\n+  case ((0x00990000 | 0x900) + 620):\n+    return \"HEVC Loop Filter\";\n+  case ((0x00990000 | 0x900) + 605):\n+    return \"HEVC QP Values\";\n+  case ((0x00990000 | 0x900) + 606):\n+    return \"HEVC Hierarchical Coding Type\";\n+  case ((0x00990000 | 0x900) + 607):\n+    return \"HEVC Hierarchical Coding Layer\";\n+  case ((0x00990000 | 0x900) + 608):\n+    return \"HEVC Hierarchical Layer 0 QP\";\n+  case ((0x00990000 | 0x900) + 609):\n+    return \"HEVC Hierarchical Layer 1 QP\";\n+  case ((0x00990000 | 0x900) + 610):\n+    return \"HEVC Hierarchical Layer 2 QP\";\n+  case ((0x00990000 | 0x900) + 611):\n+    return \"HEVC Hierarchical Layer 3 QP\";\n+  case ((0x00990000 | 0x900) + 612):\n+    return \"HEVC Hierarchical Layer 4 QP\";\n+  case ((0x00990000 | 0x900) + 613):\n+    return \"HEVC Hierarchical Layer 5 QP\";\n+  case ((0x00990000 | 0x900) + 614):\n+    return \"HEVC Hierarchical Layer 6 QP\";\n+  case ((0x00990000 | 0x900) + 636):\n+    return \"HEVC Hierarchical Lay 0 BitRate\";\n+  case ((0x00990000 | 0x900) + 637):\n+    return \"HEVC Hierarchical Lay 1 BitRate\";\n+  case ((0x00990000 | 0x900) + 638):\n+    return \"HEVC Hierarchical Lay 2 BitRate\";\n+  case ((0x00990000 | 0x900) + 639):\n+    return \"HEVC Hierarchical Lay 3 BitRate\";\n+  case ((0x00990000 | 0x900) + 640):\n+    return \"HEVC Hierarchical Lay 4 BitRate\";\n+  case ((0x00990000 | 0x900) + 641):\n+    return \"HEVC Hierarchical Lay 5 BitRate\";\n+  case ((0x00990000 | 0x900) + 642):\n+    return \"HEVC Hierarchical Lay 6 BitRate\";\n+  case ((0x00990000 | 0x900) + 628):\n+    return \"HEVC General PB\";\n+  case ((0x00990000 | 0x900) + 629):\n+    return \"HEVC Temporal ID\";\n+  case ((0x00990000 | 0x900) + 630):\n+    return \"HEVC Strong Intra Smoothing\";\n+  case ((0x00990000 | 0x900) + 632):\n+    return \"HEVC Intra PU Split\";\n+  case ((0x00990000 | 0x900) + 633):\n+    return \"HEVC TMV Prediction\";\n+  case ((0x00990000 | 0x900) + 631):\n+    return \"HEVC Max Num of Candidate MVs\";\n+  case ((0x00990000 | 0x900) + 634):\n+    return \"HEVC ENC Without Startcode\";\n+  case ((0x00990000 | 0x900) + 624):\n+    return \"HEVC Num of I-Frame b/w 2 IDR\";\n+  case ((0x00990000 | 0x900) + 621):\n+    return \"HEVC Loop Filter Beta Offset\";\n+  case ((0x00990000 | 0x900) + 622):\n+    return \"HEVC Loop Filter TC Offset\";\n+  case ((0x00990000 | 0x900) + 635):\n+    return \"HEVC Size of Length Field\";\n+  case ((0x00990000 | 0x900) + 643):\n+    return \"Reference Frames for a P-Frame\";\n+  case ((0x00990000 | 0x900) + 644):\n+    return \"Prepend SPS and PPS to IDR\";\n+  case ((0x00990000 | 0x900) + 1008):\n+    return \"HEVC Sequence Parameter Set\";\n+  case ((0x00990000 | 0x900) + 1009):\n+    return \"HEVC Picture Parameter Set\";\n+  case ((0x00990000 | 0x900) + 1010):\n+    return \"HEVC Slice Parameters\";\n+  case ((0x00990000 | 0x900) + 1015):\n+    return \"HEVC Decode Mode\";\n+  case ((0x00990000 | 0x900) + 1016):\n+    return \"HEVC Start Code\";\n+\n+  case (0x009a0000 | 1):\n+    return \"Camera Controls\";\n+  case ((0x009a0000 | 0x900) + 1):\n+    return \"Auto Exposure\";\n+  case ((0x009a0000 | 0x900) + 2):\n+    return \"Exposure Time, Absolute\";\n+  case ((0x009a0000 | 0x900) + 3):\n+    return \"Exposure, Dynamic Framerate\";\n+  case ((0x009a0000 | 0x900) + 4):\n+    return \"Pan, Relative\";\n+  case ((0x009a0000 | 0x900) + 5):\n+    return \"Tilt, Relative\";\n+  case ((0x009a0000 | 0x900) + 6):\n+    return \"Pan, Reset\";\n+  case ((0x009a0000 | 0x900) + 7):\n+    return \"Tilt, Reset\";\n+  case ((0x009a0000 | 0x900) + 8):\n+    return \"Pan, Absolute\";\n+  case ((0x009a0000 | 0x900) + 9):\n+    return \"Tilt, Absolute\";\n+  case ((0x009a0000 | 0x900) + 10):\n+    return \"Focus, Absolute\";\n+  case ((0x009a0000 | 0x900) + 11):\n+    return \"Focus, Relative\";\n+  case ((0x009a0000 | 0x900) + 12):\n+    return \"Focus, Automatic Continuous\";\n+  case ((0x009a0000 | 0x900) + 13):\n+    return \"Zoom, Absolute\";\n+  case ((0x009a0000 | 0x900) + 14):\n+    return \"Zoom, Relative\";\n+  case ((0x009a0000 | 0x900) + 15):\n+    return \"Zoom, Continuous\";\n+  case ((0x009a0000 | 0x900) + 16):\n+    return \"Privacy\";\n+  case ((0x009a0000 | 0x900) + 17):\n+    return \"Iris, Absolute\";\n+  case ((0x009a0000 | 0x900) + 18):\n+    return \"Iris, Relative\";\n+  case ((0x009a0000 | 0x900) + 19):\n+    return \"Auto Exposure, Bias\";\n+  case ((0x009a0000 | 0x900) + 20):\n+    return \"White Balance, Auto & Preset\";\n+  case ((0x009a0000 | 0x900) + 21):\n+    return \"Wide Dynamic Range\";\n+  case ((0x009a0000 | 0x900) + 22):\n+    return \"Image Stabilization\";\n+  case ((0x009a0000 | 0x900) + 23):\n+    return \"ISO Sensitivity\";\n+  case ((0x009a0000 | 0x900) + 24):\n+    return \"ISO Sensitivity, Auto\";\n+  case ((0x009a0000 | 0x900) + 25):\n+    return \"Exposure, Metering Mode\";\n+  case ((0x009a0000 | 0x900) + 26):\n+    return \"Scene Mode\";\n+  case ((0x009a0000 | 0x900) + 27):\n+    return \"3A Lock\";\n+  case ((0x009a0000 | 0x900) + 28):\n+    return \"Auto Focus, Start\";\n+  case ((0x009a0000 | 0x900) + 29):\n+    return \"Auto Focus, Stop\";\n+  case ((0x009a0000 | 0x900) + 30):\n+    return \"Auto Focus, Status\";\n+  case ((0x009a0000 | 0x900) + 31):\n+    return \"Auto Focus, Range\";\n+  case ((0x009a0000 | 0x900) + 32):\n+    return \"Pan, Speed\";\n+  case ((0x009a0000 | 0x900) + 33):\n+    return \"Tilt, Speed\";\n+  case ((0x009e0000 | 0x900) + 8):\n+    return \"Unit Cell Size\";\n+  case ((0x009a0000 | 0x900) + 34):\n+    return \"Camera Orientation\";\n+  case ((0x009a0000 | 0x900) + 35):\n+    return \"Camera Sensor Rotation\";\n+\n+  case (0x009b0000 | 1):\n+    return \"FM Radio Modulator Controls\";\n+  case ((0x009b0000 | 0x900) + 1):\n+    return \"RDS Signal Deviation\";\n+  case ((0x009b0000 | 0x900) + 2):\n+    return \"RDS Program ID\";\n+  case ((0x009b0000 | 0x900) + 3):\n+    return \"RDS Program Type\";\n+  case ((0x009b0000 | 0x900) + 5):\n+    return \"RDS PS Name\";\n+  case ((0x009b0000 | 0x900) + 6):\n+    return \"RDS Radio Text\";\n+  case ((0x009b0000 | 0x900) + 7):\n+    return \"RDS Stereo\";\n+  case ((0x009b0000 | 0x900) + 8):\n+    return \"RDS Artificial Head\";\n+  case ((0x009b0000 | 0x900) + 9):\n+    return \"RDS Compressed\";\n+  case ((0x009b0000 | 0x900) + 10):\n+    return \"RDS Dynamic PTY\";\n+  case ((0x009b0000 | 0x900) + 11):\n+    return \"RDS Traffic Announcement\";\n+  case ((0x009b0000 | 0x900) + 12):\n+    return \"RDS Traffic Program\";\n+  case ((0x009b0000 | 0x900) + 13):\n+    return \"RDS Music\";\n+  case ((0x009b0000 | 0x900) + 14):\n+    return \"RDS Enable Alt Frequencies\";\n+  case ((0x009b0000 | 0x900) + 15):\n+    return \"RDS Alternate Frequencies\";\n+  case ((0x009b0000 | 0x900) + 64):\n+    return \"Audio Limiter Feature Enabled\";\n+  case ((0x009b0000 | 0x900) + 65):\n+    return \"Audio Limiter Release Time\";\n+  case ((0x009b0000 | 0x900) + 66):\n+    return \"Audio Limiter Deviation\";\n+  case ((0x009b0000 | 0x900) + 80):\n+    return \"Audio Compression Enabled\";\n+  case ((0x009b0000 | 0x900) + 81):\n+    return \"Audio Compression Gain\";\n+  case ((0x009b0000 | 0x900) + 82):\n+    return \"Audio Compression Threshold\";\n+  case ((0x009b0000 | 0x900) + 83):\n+    return \"Audio Compression Attack Time\";\n+  case ((0x009b0000 | 0x900) + 84):\n+    return \"Audio Compression Release Time\";\n+  case ((0x009b0000 | 0x900) + 96):\n+    return \"Pilot Tone Feature Enabled\";\n+  case ((0x009b0000 | 0x900) + 97):\n+    return \"Pilot Tone Deviation\";\n+  case ((0x009b0000 | 0x900) + 98):\n+    return \"Pilot Tone Frequency\";\n+  case ((0x009b0000 | 0x900) + 112):\n+    return \"Pre-Emphasis\";\n+  case ((0x009b0000 | 0x900) + 113):\n+    return \"Tune Power Level\";\n+  case ((0x009b0000 | 0x900) + 114):\n+    return \"Tune Antenna Capacitor\";\n+\n+  case (0x009c0000 | 1):\n+    return \"Flash Controls\";\n+  case ((0x009c0000 | 0x900) + 1):\n+    return \"LED Mode\";\n+  case ((0x009c0000 | 0x900) + 2):\n+    return \"Strobe Source\";\n+  case ((0x009c0000 | 0x900) + 3):\n+    return \"Strobe\";\n+  case ((0x009c0000 | 0x900) + 4):\n+    return \"Stop Strobe\";\n+  case ((0x009c0000 | 0x900) + 5):\n+    return \"Strobe Status\";\n+  case ((0x009c0000 | 0x900) + 6):\n+    return \"Strobe Timeout\";\n+  case ((0x009c0000 | 0x900) + 7):\n+    return \"Intensity, Flash Mode\";\n+  case ((0x009c0000 | 0x900) + 8):\n+    return \"Intensity, Torch Mode\";\n+  case ((0x009c0000 | 0x900) + 9):\n+    return \"Intensity, Indicator\";\n+  case ((0x009c0000 | 0x900) + 10):\n+    return \"Faults\";\n+  case ((0x009c0000 | 0x900) + 11):\n+    return \"Charge\";\n+  case ((0x009c0000 | 0x900) + 12):\n+    return \"Ready to Strobe\";\n+\n+  case (0x009d0000 | 1):\n+    return \"JPEG Compression Controls\";\n+  case ((0x009d0000 | 0x900) + 1):\n+    return \"Chroma Subsampling\";\n+  case ((0x009d0000 | 0x900) + 2):\n+    return \"Restart Interval\";\n+  case ((0x009d0000 | 0x900) + 3):\n+    return \"Compression Quality\";\n+  case ((0x009d0000 | 0x900) + 4):\n+    return \"Active Markers\";\n+\n+  case (0x009e0000 | 1):\n+    return \"Image Source Controls\";\n+  case ((0x009e0000 | 0x900) + 1):\n+    return \"Vertical Blanking\";\n+  case ((0x009e0000 | 0x900) + 2):\n+    return \"Horizontal Blanking\";\n+  case ((0x009e0000 | 0x900) + 3):\n+    return \"Analogue Gain\";\n+  case ((0x009e0000 | 0x900) + 4):\n+    return \"Red Pixel Value\";\n+  case ((0x009e0000 | 0x900) + 5):\n+    return \"Green (Red) Pixel Value\";\n+  case ((0x009e0000 | 0x900) + 6):\n+    return \"Blue Pixel Value\";\n+  case ((0x009e0000 | 0x900) + 7):\n+    return \"Green (Blue) Pixel Value\";\n+\n+  case (0x009f0000 | 1):\n+    return \"Image Processing Controls\";\n+  case ((0x009f0000 | 0x900) + 1):\n+    return \"Link Frequency\";\n+  case ((0x009f0000 | 0x900) + 2):\n+    return \"Pixel Rate\";\n+  case ((0x009f0000 | 0x900) + 3):\n+    return \"Test Pattern\";\n+  case ((0x009f0000 | 0x900) + 4):\n+    return \"Deinterlacing Mode\";\n+  case ((0x009f0000 | 0x900) + 5):\n+    return \"Digital Gain\";\n+\n+  case (0x00a00000 | 1):\n+    return \"Digital Video Controls\";\n+  case ((0x00a00000 | 0x900) + 1):\n+    return \"Hotplug Present\";\n+  case ((0x00a00000 | 0x900) + 2):\n+    return \"RxSense Present\";\n+  case ((0x00a00000 | 0x900) + 3):\n+    return \"EDID Present\";\n+  case ((0x00a00000 | 0x900) + 4):\n+    return \"Transmit Mode\";\n+  case ((0x00a00000 | 0x900) + 5):\n+    return \"Tx RGB Quantization Range\";\n+  case ((0x00a00000 | 0x900) + 6):\n+    return \"Tx IT Content Type\";\n+  case ((0x00a00000 | 0x900) + 100):\n+    return \"Power Present\";\n+  case ((0x00a00000 | 0x900) + 101):\n+    return \"Rx RGB Quantization Range\";\n+  case ((0x00a00000 | 0x900) + 102):\n+    return \"Rx IT Content Type\";\n+\n+  case (0x00a10000 | 1):\n+    return \"FM Radio Receiver Controls\";\n+  case ((0x00a10000 | 0x900) + 1):\n+    return \"De-Emphasis\";\n+  case ((0x00a10000 | 0x900) + 2):\n+    return \"RDS Reception\";\n+  case (0x00a20000 | 1):\n+    return \"RF Tuner Controls\";\n+  case ((0x00a20000 | 0x900) + 32):\n+    return \"RF Gain\";\n+  case ((0x00a20000 | 0x900) + 41):\n+    return \"LNA Gain, Auto\";\n+  case ((0x00a20000 | 0x900) + 42):\n+    return \"LNA Gain\";\n+  case ((0x00a20000 | 0x900) + 51):\n+    return \"Mixer Gain, Auto\";\n+  case ((0x00a20000 | 0x900) + 52):\n+    return \"Mixer Gain\";\n+  case ((0x00a20000 | 0x900) + 61):\n+    return \"IF Gain, Auto\";\n+  case ((0x00a20000 | 0x900) + 62):\n+    return \"IF Gain\";\n+  case ((0x00a20000 | 0x900) + 11):\n+    return \"Bandwidth, Auto\";\n+  case ((0x00a20000 | 0x900) + 12):\n+    return \"Bandwidth\";\n+  case ((0x00a20000 | 0x900) + 91):\n+    return \"PLL Lock\";\n+  case ((0x00a10000 | 0x900) + 3):\n+    return \"RDS Program Type\";\n+  case ((0x00a10000 | 0x900) + 4):\n+    return \"RDS PS Name\";\n+  case ((0x00a10000 | 0x900) + 5):\n+    return \"RDS Radio Text\";\n+  case ((0x00a10000 | 0x900) + 6):\n+    return \"RDS Traffic Announcement\";\n+  case ((0x00a10000 | 0x900) + 7):\n+    return \"RDS Traffic Program\";\n+  case ((0x00a10000 | 0x900) + 8):\n+    return \"RDS Music\";\n+\n+  case (0x00a30000 | 1):\n+    return \"Detection Controls\";\n+  case ((0x00a30000 | 0x900) + 1):\n+    return \"Motion Detection Mode\";\n+  case ((0x00a30000 | 0x900) + 2):\n+    return \"MD Global Threshold\";\n+  case ((0x00a30000 | 0x900) + 3):\n+    return \"MD Threshold Grid\";\n+  case ((0x00a30000 | 0x900) + 4):\n+    return \"MD Region Grid\";\n+  default:\n+    return ((void *)0);\n+  }\n+}\n+\n+void v4l2_ctrl_fill(u32 id, const char **name, enum v4l2_ctrl_type *type,\n+                    s64 *min, s64 *max, u64 *step, s64 *def, u32 *flags) {\n+  *name = v4l2_ctrl_get_name(id);\n+  *flags = 0;\n+\n+  switch (id) {\n+  case ((0x00980000 | 0x900) + 9):\n+  case ((0x00980000 | 0x900) + 10):\n+  case ((0x00980000 | 0x900) + 12):\n+  case ((0x00980000 | 0x900) + 18):\n+  case ((0x00980000 | 0x900) + 20):\n+  case ((0x00980000 | 0x900) + 21):\n+  case ((0x00980000 | 0x900) + 25):\n+  case ((0x00980000 | 0x900) + 29):\n+  case ((0x00980000 | 0x900) + 30):\n+  case ((0x00980000 | 0x900) + 32):\n+  case ((0x00990000 | 0x900) + 109):\n+  case ((0x00990000 | 0x900) + 210):\n+  case ((0x00990000 | 0x900) + 204):\n+  case ((0x00990000 | 0x900) + 205):\n+  case ((0x009a0000 | 0x900) + 3):\n+  case ((0x009a0000 | 0x900) + 12):\n+  case ((0x009a0000 | 0x900) + 16):\n+  case ((0x009b0000 | 0x900) + 64):\n+  case ((0x009b0000 | 0x900) + 80):\n+  case ((0x009b0000 | 0x900) + 96):\n+  case ((0x00980000 | 0x900) + 37):\n+  case ((0x00980000 | 0x900) + 38):\n+  case ((0x009c0000 | 0x900) + 5):\n+  case ((0x009c0000 | 0x900) + 11):\n+  case ((0x009c0000 | 0x900) + 12):\n+  case ((0x00990000 | 0x900) + 213):\n+  case ((0x00990000 | 0x900) + 212):\n+  case ((0x00990000 | 0x900) + 215):\n+  case ((0x00990000 | 0x900) + 218):\n+  case ((0x00990000 | 0x900) + 355):\n+  case ((0x00990000 | 0x900) + 366):\n+  case ((0x00990000 | 0x900) + 407):\n+  case ((0x00990000 | 0x900) + 226):\n+  case ((0x009a0000 | 0x900) + 21):\n+  case ((0x009a0000 | 0x900) + 22):\n+  case ((0x00a10000 | 0x900) + 2):\n+  case ((0x00a20000 | 0x900) + 41):\n+  case ((0x00a20000 | 0x900) + 51):\n+  case ((0x00a20000 | 0x900) + 61):\n+  case ((0x00a20000 | 0x900) + 11):\n+  case ((0x00a20000 | 0x900) + 91):\n+  case ((0x009b0000 | 0x900) + 7):\n+  case ((0x009b0000 | 0x900) + 8):\n+  case ((0x009b0000 | 0x900) + 9):\n+  case ((0x009b0000 | 0x900) + 10):\n+  case ((0x009b0000 | 0x900) + 11):\n+  case ((0x009b0000 | 0x900) + 12):\n+  case ((0x009b0000 | 0x900) + 13):\n+  case ((0x009b0000 | 0x900) + 14):\n+  case ((0x00a10000 | 0x900) + 6):\n+  case ((0x00a10000 | 0x900) + 7):\n+  case ((0x00a10000 | 0x900) + 8):\n+    *type = V4L2_CTRL_TYPE_BOOLEAN;\n+    *min = 0;\n+    *max = *step = 1;\n+    break;\n+  case ((0x00980000 | 0x900) + 34):\n+    *type = V4L2_CTRL_TYPE_INTEGER;\n+    *flags |= 0x0400;\n+    break;\n+  case ((0x00990000 | 0x900) + 227):\n+  case ((0x00990000 | 0x900) + 228):\n+    *type = V4L2_CTRL_TYPE_INTEGER;\n+    break;\n+  case ((0x00990000 | 0x900) + 229):\n+  case ((0x009a0000 | 0x900) + 6):\n+  case ((0x009a0000 | 0x900) + 7):\n+  case ((0x009c0000 | 0x900) + 3):\n+  case ((0x009c0000 | 0x900) + 4):\n+  case ((0x009a0000 | 0x900) + 28):\n+  case ((0x009a0000 | 0x900) + 29):\n+  case ((0x00980000 | 0x900) + 13):\n+    *type = V4L2_CTRL_TYPE_BUTTON;\n+    *flags |= 0x0040 | 0x0200;\n+    *min = *max = *step = *def = 0;\n+    break;\n+  case ((0x00980000 | 0x900) + 24):\n+  case ((0x00990000 | 0x900) + 100):\n+  case ((0x00990000 | 0x900) + 101):\n+  case ((0x00990000 | 0x900) + 102):\n+  case ((0x00990000 | 0x900) + 103):\n+  case ((0x00990000 | 0x900) + 104):\n+  case ((0x00990000 | 0x900) + 111):\n+  case ((0x00990000 | 0x900) + 105):\n+  case ((0x00990000 | 0x900) + 106):\n+  case ((0x00990000 | 0x900) + 107):\n+  case ((0x00990000 | 0x900) + 108):\n+  case ((0x00990000 | 0x900) + 112):\n+  case ((0x00990000 | 0x900) + 113):\n+  case ((0x00990000 | 0x900) + 200):\n+  case ((0x00990000 | 0x900) + 201):\n+  case ((0x00990000 | 0x900) + 206):\n+  case ((0x00990000 | 0x900) + 0):\n+  case ((0x00990000 | 0x900) + 7):\n+  case ((0x009a0000 | 0x900) + 1):\n+  case ((0x009a0000 | 0x900) + 31):\n+  case ((0x00980000 | 0x900) + 31):\n+  case ((0x009a0000 | 0x900) + 20):\n+  case ((0x009b0000 | 0x900) + 112):\n+  case ((0x009c0000 | 0x900) + 1):\n+  case ((0x009c0000 | 0x900) + 2):\n+  case ((0x00990000 | 0x900) + 216):\n+  case ((0x00990000 | 0x900) + 221):\n+  case ((0x00990000 | 0x900) + 357):\n+  case ((0x00990000 | 0x900) + 359):\n+  case ((0x00990000 | 0x900) + 362):\n+  case ((0x00990000 | 0x900) + 363):\n+  case ((0x00990000 | 0x900) + 367):\n+  case ((0x00990000 | 0x900) + 370):\n+  case ((0x00990000 | 0x900) + 372):\n+  case ((0x00990000 | 0x900) + 1005):\n+  case ((0x00990000 | 0x900) + 1006):\n+  case ((0x00990000 | 0x900) + 270):\n+  case ((0x00990000 | 0x900) + 271):\n+  case ((0x00990000 | 0x900) + 405):\n+  case ((0x00990000 | 0x900) + 406):\n+  case ((0x009d0000 | 0x900) + 1):\n+  case ((0x009a0000 | 0x900) + 24):\n+  case ((0x009a0000 | 0x900) + 25):\n+  case ((0x009a0000 | 0x900) + 26):\n+  case ((0x00a00000 | 0x900) + 4):\n+  case ((0x00a00000 | 0x900) + 5):\n+  case ((0x00a00000 | 0x900) + 6):\n+  case ((0x00a00000 | 0x900) + 101):\n+  case ((0x00a00000 | 0x900) + 102):\n+  case ((0x009f0000 | 0x900) + 3):\n+  case ((0x009f0000 | 0x900) + 4):\n+  case ((0x00a10000 | 0x900) + 1):\n+  case ((0x00990000 | 0x900) + 506):\n+  case ((0x00990000 | 0x900) + 511):\n+  case ((0x00990000 | 0x900) + 512):\n+  case ((0x00a30000 | 0x900) + 1):\n+  case ((0x00990000 | 0x900) + 615):\n+  case ((0x00990000 | 0x900) + 616):\n+  case ((0x00990000 | 0x900) + 606):\n+  case ((0x00990000 | 0x900) + 623):\n+  case ((0x00990000 | 0x900) + 635):\n+  case ((0x00990000 | 0x900) + 618):\n+  case ((0x00990000 | 0x900) + 620):\n+  case ((0x00990000 | 0x900) + 1015):\n+  case ((0x00990000 | 0x900) + 1016):\n+  case ((0x009a0000 | 0x900) + 34):\n+    *type = V4L2_CTRL_TYPE_MENU;\n+    break;\n+  case ((0x009f0000 | 0x900) + 1):\n+    *type = V4L2_CTRL_TYPE_INTEGER_MENU;\n+    break;\n+  case ((0x009b0000 | 0x900) + 5):\n+  case ((0x009b0000 | 0x900) + 6):\n+  case ((0x00a10000 | 0x900) + 4):\n+  case ((0x00a10000 | 0x900) + 5):\n+    *type = V4L2_CTRL_TYPE_STRING;\n+    break;\n+  case ((0x009a0000 | 0x900) + 23):\n+  case ((0x009a0000 | 0x900) + 19):\n+  case ((0x00990000 | 0x900) + 500):\n+  case ((0x00990000 | 0x900) + 502):\n+    *type = V4L2_CTRL_TYPE_INTEGER_MENU;\n+    break;\n+  case (0x00980000 | 1):\n+  case (0x009a0000 | 1):\n+  case (0x00990000 | 1):\n+  case (0x009b0000 | 1):\n+  case (0x009c0000 | 1):\n+  case (0x009d0000 | 1):\n+  case (0x009e0000 | 1):\n+  case (0x009f0000 | 1):\n+  case (0x00a00000 | 1):\n+  case (0x00a10000 | 1):\n+  case (0x00a20000 | 1):\n+  case (0x00a30000 | 1):\n+    *type = V4L2_CTRL_TYPE_CTRL_CLASS;\n+\n+    *flags |= 0x0004 | 0x0040;\n+    *min = *max = *step = *def = 0;\n+    break;\n+  case ((0x00980000 | 0x900) + 35):\n+    *type = V4L2_CTRL_TYPE_INTEGER;\n+    *step = 1;\n+    *min = 0;\n+\n+    *max = 0xFFFFFF;\n+    break;\n+  case ((0x009c0000 | 0x900) + 10):\n+  case ((0x009d0000 | 0x900) + 4):\n+  case ((0x009a0000 | 0x900) + 27):\n+  case ((0x009a0000 | 0x900) + 30):\n+  case ((0x00a00000 | 0x900) + 1):\n+  case ((0x00a00000 | 0x900) + 2):\n+  case ((0x00a00000 | 0x900) + 3):\n+  case ((0x00a00000 | 0x900) + 100):\n+    *type = V4L2_CTRL_TYPE_BITMASK;\n+    break;\n+  case ((0x00980000 | 0x900) + 39):\n+  case ((0x00980000 | 0x900) + 40):\n+    *type = V4L2_CTRL_TYPE_INTEGER;\n+    *flags |= 0x0004;\n+    break;\n+  case ((0x00990000 | 0x900) + 223):\n+    *type = V4L2_CTRL_TYPE_INTEGER64;\n+    *flags |= 0x0080 | 0x0004;\n+    *min = *def = 0;\n+    *max = 0x1ffffffffLL;\n+    *step = 1;\n+    break;\n+  case ((0x00990000 | 0x900) + 224):\n+    *type = V4L2_CTRL_TYPE_INTEGER64;\n+    *flags |= 0x0080 | 0x0004;\n+    *min = *def = 0;\n+    *max = 0x7fffffffffffffffLL;\n+    *step = 1;\n+    break;\n+  case ((0x009f0000 | 0x900) + 2):\n+    *type = V4L2_CTRL_TYPE_INTEGER64;\n+    *flags |= 0x0004;\n+    break;\n+  case ((0x00a30000 | 0x900) + 4):\n+    *type = V4L2_CTRL_TYPE_U8;\n+    break;\n+  case ((0x00a30000 | 0x900) + 3):\n+    *type = V4L2_CTRL_TYPE_U16;\n+    break;\n+  case ((0x009b0000 | 0x900) + 15):\n+    *type = V4L2_CTRL_TYPE_U32;\n+    break;\n+  case ((0x00990000 | 0x900) + 250):\n+    *type = 0x0103;\n+    break;\n+  case ((0x00990000 | 0x900) + 251):\n+    *type = 0x0104;\n+    break;\n+  case ((0x00990000 | 0x900) + 292):\n+    *type = 0x0105;\n+    break;\n+  case ((0x00990000 | 0x900) + 1000):\n+    *type = 0x0110;\n+    break;\n+  case ((0x00990000 | 0x900) + 1001):\n+    *type = 0x0111;\n+    break;\n+  case ((0x00990000 | 0x900) + 1002):\n+    *type = 0x0112;\n+    break;\n+  case ((0x00990000 | 0x900) + 1003):\n+    *type = 0x0113;\n+    break;\n+  case ((0x00990000 | 0x900) + 1004):\n+    *type = 0x0114;\n+    break;\n+  case ((0x00990000 | 0x900) + 2000):\n+    *type = 0x301;\n+    break;\n+  case ((0x00990000 | 0x900) + 1008):\n+    *type = 0x0120;\n+    break;\n+  case ((0x00990000 | 0x900) + 1009):\n+    *type = 0x0121;\n+    break;\n+  case ((0x00990000 | 0x900) + 1010):\n+    *type = 0x0122;\n+    break;\n+  case ((0x009e0000 | 0x900) + 8):\n+    *type = V4L2_CTRL_TYPE_AREA;\n+    *flags |= 0x0004;\n+    break;\n+  default:\n+    *type = V4L2_CTRL_TYPE_INTEGER;\n+    break;\n+  }\n+  switch (id) {\n+  case ((0x00990000 | 0x900) + 101):\n+  case ((0x00990000 | 0x900) + 105):\n+  case ((0x00990000 | 0x900) + 206):\n+  case ((0x00990000 | 0x900) + 202):\n+  case ((0x00990000 | 0x900) + 0):\n+    *flags |= 0x0008;\n+    break;\n+  case ((0x00980000 | 0x900) + 5):\n+  case ((0x00980000 | 0x900) + 6):\n+  case ((0x00980000 | 0x900) + 7):\n+  case ((0x00980000 | 0x900) + 8):\n+  case ((0x00980000 | 0x900) + 0):\n+  case ((0x00980000 | 0x900) + 1):\n+  case ((0x00980000 | 0x900) + 2):\n+  case ((0x00980000 | 0x900) + 3):\n+  case ((0x00980000 | 0x900) + 14):\n+  case ((0x00980000 | 0x900) + 15):\n+  case ((0x00980000 | 0x900) + 16):\n+  case ((0x00980000 | 0x900) + 27):\n+  case ((0x00980000 | 0x900) + 36):\n+  case ((0x009b0000 | 0x900) + 1):\n+  case ((0x009b0000 | 0x900) + 65):\n+  case ((0x009b0000 | 0x900) + 66):\n+  case ((0x009b0000 | 0x900) + 81):\n+  case ((0x009b0000 | 0x900) + 82):\n+  case ((0x009b0000 | 0x900) + 83):\n+  case ((0x009b0000 | 0x900) + 84):\n+  case ((0x009b0000 | 0x900) + 97):\n+  case ((0x009b0000 | 0x900) + 98):\n+  case ((0x009b0000 | 0x900) + 113):\n+  case ((0x009b0000 | 0x900) + 114):\n+  case ((0x00a20000 | 0x900) + 32):\n+  case ((0x00a20000 | 0x900) + 42):\n+  case ((0x00a20000 | 0x900) + 52):\n+  case ((0x00a20000 | 0x900) + 62):\n+  case ((0x00a20000 | 0x900) + 12):\n+  case ((0x00a30000 | 0x900) + 2):\n+    *flags |= 0x0020;\n+    break;\n+  case ((0x009a0000 | 0x900) + 4):\n+  case ((0x009a0000 | 0x900) + 5):\n+  case ((0x009a0000 | 0x900) + 11):\n+  case ((0x009a0000 | 0x900) + 18):\n+  case ((0x009a0000 | 0x900) + 14):\n+    *flags |= 0x0040 | 0x0200;\n+    break;\n+  case ((0x009c0000 | 0x900) + 5):\n+  case ((0x009a0000 | 0x900) + 30):\n+  case ((0x009c0000 | 0x900) + 12):\n+  case ((0x00a00000 | 0x900) + 1):\n+  case ((0x00a00000 | 0x900) + 2):\n+  case ((0x00a00000 | 0x900) + 3):\n+  case ((0x00a00000 | 0x900) + 100):\n+  case ((0x00a00000 | 0x900) + 102):\n+  case ((0x00a10000 | 0x900) + 3):\n+  case ((0x00a10000 | 0x900) + 4):\n+  case ((0x00a10000 | 0x900) + 5):\n+  case ((0x00a10000 | 0x900) + 6):\n+  case ((0x00a10000 | 0x900) + 7):\n+  case ((0x00a10000 | 0x900) + 8):\n+  case ((0x009a0000 | 0x900) + 34):\n+  case ((0x009a0000 | 0x900) + 35):\n+    *flags |= 0x0004;\n+    break;\n+  case ((0x00a20000 | 0x900) + 91):\n+    *flags |= 0x0080;\n+    break;\n+  }\n+}"}]}