{"sha": "747e2d0e5fdde755e67b659a23d8f62ce3927839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3ZTJkMGU1ZmRkZTc1NWU2N2I2NTlhMjNkOGY2MmNlMzkyNzgzOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-07-13T22:17:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-07-13T22:17:11Z"}, "message": "pa-64.h (ARG_POINTER_REGNUM, [...]): Delete.\n\n\t* pa-64.h (ARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Delete.\n\t* pa.h (ARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Modify for hppa64.\n\t* pa32-regs.h (REG_ALLOC_ORDER): Reorder caller-saved registers.\n\t* pa64-regs.h (REG_ALLOC_ORDER): Likewise.\n\nFrom-SVN: r84649", "tree": {"sha": "7d04efdeee04f477592c3afb801d9bbcc8f3970f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d04efdeee04f477592c3afb801d9bbcc8f3970f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747e2d0e5fdde755e67b659a23d8f62ce3927839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747e2d0e5fdde755e67b659a23d8f62ce3927839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747e2d0e5fdde755e67b659a23d8f62ce3927839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747e2d0e5fdde755e67b659a23d8f62ce3927839/comments", "author": null, "committer": null, "parents": [{"sha": "c1b4f64d3344ab27b60754d40b5313a8947c49d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b4f64d3344ab27b60754d40b5313a8947c49d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b4f64d3344ab27b60754d40b5313a8947c49d3"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "cf390c0cb5870500ceb82e8e3b5289f84f7636bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=747e2d0e5fdde755e67b659a23d8f62ce3927839", "patch": "@@ -1,3 +1,10 @@\n+2004-07-13  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa-64.h (ARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Delete.\n+\t* pa.h (ARG_POINTER_REGNUM, STATIC_CHAIN_REGNUM): Modify for hppa64.\n+\t* pa32-regs.h (REG_ALLOC_ORDER): Reorder caller-saved registers.\n+\t* pa64-regs.h (REG_ALLOC_ORDER): Likewise.\n+\n 2004-07-13  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/16443"}, {"sha": "18e8f2a92b2000713bba74e131456edc008fe90c", "filename": "gcc/config/pa/pa-64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-64.h?ref=747e2d0e5fdde755e67b659a23d8f62ce3927839", "patch": "@@ -74,17 +74,12 @@ Boston, MA 02111-1307, USA.  */\n    ?!? This may not work reliably.  Keep an eye out for problems.  */\n #undef SECONDARY_MEMORY_NEEDED_RTX\n \n-\n /* ?!? This needs to be made compile-time selectable.\n \n    The PA64 runtime model has arguments that grow to higher addresses\n    (like most other targets).  The older runtime model has arguments\n    that grow to lower addresses.  What fun.  */\n #undef ARGS_GROW_DOWNWARD\n-#undef ARG_POINTER_REGNUM\n-#define ARG_POINTER_REGNUM 29\n-#undef STATIC_CHAIN_REGNUM\n-#define STATIC_CHAIN_REGNUM 31\n \n /* If defined, a C expression which determines whether the default\n    implementation of va_arg will attempt to pad down before reading the"}, {"sha": "2d60573de58a17cf04b4a2e514828f0b3d3e7c77", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=747e2d0e5fdde755e67b659a23d8f62ce3927839", "patch": "@@ -533,10 +533,10 @@ do {\t\t\t\t\t\t\t\t\\\n   do {(VAR) = - compute_frame_size (get_frame_size (), 0);} while (0)\n \n /* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM 3\n+#define ARG_POINTER_REGNUM (TARGET_64BIT ? 29 : 3)\n \n /* Register in which static-chain is passed to a function.  */\n-#define STATIC_CHAIN_REGNUM 29\n+#define STATIC_CHAIN_REGNUM (TARGET_64BIT ? 31 : 29)\n \n /* Register used to address the offset table for position-independent\n    data references.  */"}, {"sha": "d2ba2f68377b9820c97229d0fd07a5a7a58e5449", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=747e2d0e5fdde755e67b659a23d8f62ce3927839", "patch": "@@ -119,7 +119,8 @@\n    registers will generally not be allocated across a call).\n \n    Experimentation has shown slightly better results by allocating\n-   FP registers first.  \n+   FP registers first.  We allocate the caller-saved registers more\n+   or less in reverse order to their allocation as arguments.\n \n    FP registers are ordered so that all L registers are selected before\n    R registers.  This works around a false dependency interlock on the\n@@ -130,14 +131,14 @@\n  {\t\t\t\t\t\\\n   /* caller-saved fp regs.  */\t\t\\\n   68, 70, 72, 74, 76, 78, 80, 82,\t\\\n-  84, 86, 40, 42, 44, 46, 32, 34,\t\\\n-  36, 38,\t\t\t\t\\\n+  84, 86, 40, 42, 44, 46, 38, 36,\t\\\n+  34, 32,\t\t\t\t\\\n   69, 71, 73, 75, 77, 79, 81, 83,\t\\\n-  85, 87, 41, 43, 45, 47, 33, 35,\t\\\n-  37, 39,\t\t\t\t\\\n+  85, 87, 41, 43, 45, 47, 39, 37,\t\\\n+  35, 33,\t\t\t\t\\\n   /* caller-saved general regs.  */\t\\\n-  19, 20, 21, 22, 23, 24, 25, 26,\t\\\n-  27, 28, 29, 31,  2,\t\t\t\\\n+  28, 19, 20, 21, 22, 31, 27, 29,\t\\\n+  23, 24, 25, 26,  2,\t\t\t\\\n   /* callee-saved fp regs.  */\t\t\\\n   48, 50, 52, 54, 56, 58, 60, 62,\t\\\n   64, 66,\t\t\t\t\\"}, {"sha": "75226960d3e675cb20f87abda97226127b4a1c68", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747e2d0e5fdde755e67b659a23d8f62ce3927839/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=747e2d0e5fdde755e67b659a23d8f62ce3927839", "patch": "@@ -118,30 +118,26 @@ Boston, MA 02111-1307, USA.  */\n    registers will generally not be allocated across a call).\n \n    Experimentation has shown slightly better results by allocating\n-   FP registers first.  \n-\n-   FP registers are ordered so that all L registers are selected before\n-   R registers.  This works around a false dependency interlock on the\n-   PA8000 when accessing the high and low parts of an FP register\n-   independently.  */\n+   FP registers first.  We allocate the caller-saved registers more\n+   or less in reverse order to their allocation as arguments.  */\n \n #define REG_ALLOC_ORDER \\\n  {\t\t\t\t\t\\\n   /* caller-saved fp regs.  */\t\t\\\n   50, 51, 52, 53, 54, 55, 56, 57,\t\\\n-  58, 59, 36, 37, 38, 39, 32, 33,\t\\\n-  34, 35,\t\t\t\t\\\n+  58, 59, 39, 38, 37, 36, 35, 34,\t\\\n+  33, 32,\t\t\t\t\\\n   /* caller-saved general regs.  */\t\\\n-  19, 20, 21, 22, 23, 24, 25, 26,\t\\\n-  27, 28, 29, 31,  2,\t\t\t\\\n+  28, 31, 19, 20, 21, 22, 23, 24,\t\\\n+  25, 26, 29,  2,\t\t\t\\\n   /* callee-saved fp regs.  */\t\t\\\n   40, 41, 42, 43, 44, 45, 46, 47,\t\\\n   48, 49,\t\t\t\t\\\n   /* callee-saved general regs.  */\t\\\n    3,  4,  5,  6,  7,  8,  9, 10, \t\\\n   11, 12, 13, 14, 15, 16, 17, 18,\t\\\n   /* special registers.  */\t\t\\\n-   1, 30,  0, 60}\n+   1, 27, 30,  0, 60}\n \n \n /* Return number of consecutive hard regs needed starting at reg REGNO"}]}