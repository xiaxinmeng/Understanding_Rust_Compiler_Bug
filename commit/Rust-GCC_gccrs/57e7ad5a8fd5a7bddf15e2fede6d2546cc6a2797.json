{"sha": "57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlN2FkNWE4ZmQ1YTdiZGRmMTVlMmZlZGU2ZDI1NDZjYzZhMjc5Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-17T01:16:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-17T03:46:08Z"}, "message": "c++: Add test for PR 93901.", "tree": {"sha": "180a42fa94c254ccccd3a4667a5d6ae8d3d33805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180a42fa94c254ccccd3a4667a5d6ae8d3d33805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "950183c774134410399a5ceeeec153f7d64ebe91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950183c774134410399a5ceeeec153f7d64ebe91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950183c774134410399a5ceeeec153f7d64ebe91"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "aca989127015394380bee6a0059e243f22062842", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept57.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept57.C?ref=57e7ad5a8fd5a7bddf15e2fede6d2546cc6a2797", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/93901\n+// { dg-do compile { target c++11 } }\n+\n+void *operator new (__SIZE_TYPE__, void *p) noexcept { return p; }\n+\n+extern void *mem;\n+\n+constexpr bool YES = true;\n+\n+struct NoexceptTrueCtor {\n+\tNoexceptTrueCtor() noexcept(true);\n+};\n+void NoexceptTrueFun() noexcept(true);\n+\n+struct NoexceptYesCtor {\n+\tNoexceptYesCtor() noexcept(YES);\n+};\n+void NoexceptYesFun() noexcept(YES);\n+\n+struct NoexceptOneEqOneCtor {\n+\tNoexceptOneEqOneCtor() noexcept(1 == 1);\n+};\n+void NoexceptOneEqOneFun() noexcept(1 == 1);\n+\n+struct NoNoexceptCtor {\n+\tNoNoexceptCtor();\n+};\n+void NoNoexceptFun();\n+\n+static_assert(noexcept(new(mem) NoexceptTrueCtor), \"2\"); // OK\n+static_assert(noexcept(NoexceptTrueFun()), \"3\"); // OK\n+\n+static_assert(noexcept(new(mem) NoexceptYesCtor), \"5\"); // fail\n+static_assert(noexcept(NoexceptYesFun()), \"6\"); // OK\n+\n+static_assert(noexcept(new(mem) NoexceptOneEqOneCtor), \"8\"); // fail\n+static_assert(noexcept(NoexceptOneEqOneFun()), \"9\"); // OK\n+\n+static_assert(!noexcept(new(mem) NoNoexceptCtor), \"11\"); // OK\n+static_assert(!noexcept(NoNoexceptFun()), \"12\"); // OK"}]}