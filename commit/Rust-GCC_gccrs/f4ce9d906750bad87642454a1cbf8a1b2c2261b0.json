{"sha": "f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjZTlkOTA2NzUwYmFkODc2NDI0NTRhMWNiZjhhMWIyYzIyNjFiMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-10T04:20:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-10T04:20:03Z"}, "message": "server.c (load_data, run_shell): Use xmalloc, xrealloc & xcalloc in lieu of malloc, realloc & calloc.\n\n\t* fixinc/server.c (load_data, run_shell): Use xmalloc, xrealloc &\n\txcalloc in lieu of malloc, realloc & calloc.\n\n\t* gencheck.c (xmalloc): Use really_call_malloc, not malloc.\n\n\t* gengenrtl.c (xmalloc): Likewise.\n\n\t* gensupport.c (xcalloc, xrealloc, xmalloc): Use the\n\treally_call_* memory allocation routines.\n\n\t* stmt.c (check_for_full_enumeration_handling): Use\n\treally_call_calloc, not calloc.\n\n\t* system.h (really_call_malloc, really_call_calloc,\n\treally_call_realloc): Define.\n\t(malloc, realloc, calloc, strdup, bzero, bcmp, rindex): Poison.\n\nf:\n\t* fini.c (main): Use really_call_malloc, not malloc.\n\nFrom-SVN: r40360", "tree": {"sha": "9c3fac38ed4b4a8e389d091650ec0193e59385b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3fac38ed4b4a8e389d091650ec0193e59385b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/comments", "author": null, "committer": null, "parents": [{"sha": "0eac29848b3a5bee12b6f8ae6c64c82a9c0f61b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eac29848b3a5bee12b6f8ae6c64c82a9c0f61b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eac29848b3a5bee12b6f8ae6c64c82a9c0f61b1"}], "stats": {"total": 97, "additions": 63, "deletions": 34}, "files": [{"sha": "e8a825d247f72d58d766276f5be886b974e681b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -1,3 +1,22 @@\n+2001-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fixinc/server.c (load_data, run_shell): Use xmalloc, xrealloc &\n+\txcalloc in lieu of malloc, realloc & calloc.\n+\t\n+\t* gencheck.c (xmalloc): Use really_call_malloc, not malloc.\n+\n+\t* gengenrtl.c (xmalloc): Likewise.\n+\n+\t* gensupport.c (xcalloc, xrealloc, xmalloc): Use the\n+\treally_call_* memory allocation routines.\n+\n+\t* stmt.c (check_for_full_enumeration_handling): Use\n+\treally_call_calloc, not calloc.\n+\n+\t* system.h (really_call_malloc, really_call_calloc,\n+\treally_call_realloc): Define.\n+\t(malloc, realloc, calloc, strdup, bzero, bcmp, rindex): Poison.\n+\n Fri Mar  9 18:39:19 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (builtin_longjmp): Rework slightly to work for PA64 too."}, {"sha": "edb7bb01b103d4a8e4981e3539187cf5464da1b8", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -1,3 +1,7 @@\n+Fri Mar  9 22:52:55 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fini.c (main): Use really_call_malloc, not malloc.\n+\n Thu Mar  8 13:27:47 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c: Don't rely on the POSIX macro to define autoconf stuff."}, {"sha": "362c0b627f987aea9a3d18d708ff1a3f84eabff7", "filename": "gcc/f/fini.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -367,7 +367,7 @@ main (int argc, char **argv)\n \n       /* Make new name object to store name and its keyword. */\n \n-      newname = (name) malloc (sizeof (*newname));\n+      newname = (name) really_call_malloc (sizeof (*newname));\n       newname->namelen = strlen (buf);\n       newname->kwlen = strlen (kwname);\n       total_length = newname->kwlen + fixlengths;"}, {"sha": "de4d203ab6e53e262587160b4d4a9d35ac569a13", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -93,10 +93,7 @@ load_data (fp)\n   t_bool got_done = BOOL_FALSE;\n \n   text_size = sizeof (z_line) * 2;\n-  pz_scan = pz_text = malloc (text_size);\n-\n-  if (pz_text == (char *) NULL)\n-    return (char *) NULL;\n+  pz_scan = pz_text = xmalloc (text_size);\n \n   for (;;)\n     {\n@@ -120,18 +117,9 @@ load_data (fp)\n       if (text_size - used_ct < sizeof (z_line))\n         {\n           size_t off = (size_t) (pz_scan - pz_text);\n-          void *p;\n \t  \n           text_size += 4096;\n-          p = realloc ((void *) pz_text, text_size);\n-          if (p == (void *) NULL)\n-            {\n-              fprintf (stderr, \"Failed to get 0x%08lX bytes\\n\",\n-                      (long) text_size);\n-              free ((void *) pz_text);\n-              return (char *) NULL;\n-            }\n-          pz_text = (char *) p;\n+          pz_text = xrealloc ((void *) pz_text, text_size);\n           pz_scan = pz_text + off;\n         }\n     }\n@@ -146,7 +134,7 @@ load_data (fp)\n   while ((pz_scan > pz_text) && ISSPACE (pz_scan[-1]))\n     pz_scan--;\n   *pz_scan = NUL;\n-  return realloc ((void *) pz_text, strlen (pz_text) + 1);\n+  return xrealloc ((void *) pz_text, strlen (pz_text) + 1);\n }\n \n \n@@ -284,11 +272,8 @@ run_shell (pz_cmd)\n   /*  IF it is still not running, THEN return the nil string.  */\n   if (server_id <= 0)\n     {\n-      char *pz = (char *) malloc (1);\n       fprintf (stderr, zNoServer, pz_cmd);\n-      if (pz != (char *) NULL)\n-        *pz = '\\0';\n-      return pz;\n+      return xcalloc (1, 1);\n     }\n \n   /*  Make sure the process will pay attention to us, send the\n@@ -302,11 +287,8 @@ run_shell (pz_cmd)\n       THEN return an empty string.  */\n   if (server_id == NULLPROCESS)\n     {\n-      char *pz = (char *) malloc (1);\n       fprintf (stderr, zNoServer, pz_cmd);\n-      if (pz != (char *) NULL)\n-        *pz = '\\0';\n-      return pz;\n+      return xcalloc (1, 1);\n     }\n \n   /*  Now try to read back all the data.  If we fail due to either a\n@@ -326,9 +308,7 @@ run_shell (pz_cmd)\n \n         fprintf (stderr, \"CLOSING SHELL SERVER - command failure:\\n\\t%s\\n\",\n                  pz_cmd);\n-        pz = (char *) malloc (1);\n-        if (pz != (char *) NULL)\n-          *pz = '\\0';\n+        pz = xcalloc (1, 1);\n       }\n #ifdef DEBUG\n     fprintf( stderr, \"run_shell command success:  %s\\n\", pz );"}, {"sha": "df6238bcf9656b4dba2b51c11065c5b5d8b9ae64", "filename": "gcc/gencheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -75,7 +75,7 @@ PTR\n xmalloc (nbytes)\n   size_t nbytes;\n {\n-  register PTR tmp = (PTR) malloc (nbytes);\n+  register PTR tmp = (PTR) really_call_malloc (nbytes);\n \n   if (!tmp)\n     {"}, {"sha": "b04d08118e75af2af77f2e768af7975fcc9b39a3", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -389,7 +389,7 @@ PTR\n xmalloc (nbytes)\n   size_t nbytes;\n {\n-  register PTR tmp = (PTR) malloc (nbytes);\n+  register PTR tmp = (PTR) really_call_malloc (nbytes);\n \n   if (!tmp)\n     {"}, {"sha": "6bad18e051e4f4c3d58d0005460e31b9803334af", "filename": "gcc/gensupport.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -871,7 +871,7 @@ xcalloc (nelem, elsize)\n   if (nelem == 0 || elsize == 0)\n     nelem = elsize = 1;\n \n-  newmem = calloc (nelem, elsize);\n+  newmem = really_call_calloc (nelem, elsize);\n   if (!newmem)\n     fatal (\"virtual memory exhausted\");\n   return (newmem);\n@@ -884,9 +884,9 @@ xrealloc (old, size)\n {\n   register PTR ptr;\n   if (old)\n-    ptr = (PTR) realloc (old, size);\n+    ptr = (PTR) really_call_realloc (old, size);\n   else\n-    ptr = (PTR) malloc (size);\n+    ptr = (PTR) really_call_malloc (size);\n   if (!ptr)\n     fatal (\"virtual memory exhausted\");\n   return ptr;\n@@ -896,7 +896,7 @@ PTR\n xmalloc (size)\n   size_t size;\n {\n-  register PTR val = (PTR) malloc (size);\n+  register PTR val = (PTR) really_call_malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");"}, {"sha": "4ca2c9711eea21faade26ba8d1889ff4e410381d", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -5193,7 +5193,8 @@ check_for_full_enumeration_handling (type)\n       /* We deliberately use calloc here, not cmalloc, so that we can suppress\n \t this optimization if we don't have enough memory rather than\n \t aborting, as xmalloc would do.  */\n-      && (cases_seen = (unsigned char *) calloc (bytes_needed, 1)) != NULL)\n+      && (cases_seen =\n+\t  (unsigned char *) really_call_calloc (bytes_needed, 1)) != NULL)\n     {\n       HOST_WIDE_INT i;\n       tree v = TYPE_VALUES (type);"}, {"sha": "0ea6c3fc67eed5fd31eeec4d35b60132e3a46faa", "filename": "gcc/system.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce9d906750bad87642454a1cbf8a1b2c2261b0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f4ce9d906750bad87642454a1cbf8a1b2c2261b0", "patch": "@@ -577,4 +577,29 @@ typedef char _Bool;\n #define TRUE true\n #define FALSE false\n \n+/* As the last action in this file, we poison the identifiers that\n+   shouldn't be used.  Note, luckily gcc-3.0's token-based integrated\n+   preprocessor won't trip on poisoned identifiers that arrive from\n+   the expansion of macros.  E.g. #define strrchr rindex, won't error\n+   if rindex is poisoned after this directive is issued and later on\n+   strrchr is called.\n+\n+   Note: We define bypass macros for the few cases where we really\n+   want to use the libc memory allocation routines.  Otherwise we\n+   insist you use the \"x\" versions from libiberty.  */\n+\n+#define really_call_malloc malloc\n+#define really_call_calloc calloc\n+#define really_call_realloc realloc\n+\n+#if (GCC_VERSION >= 3000)\n+\n+ #pragma GCC poison malloc realloc calloc strdup\n+\n+/* Note: not all uses of `bcopy' and `index' (esp. variable names)\n+   have been eliminated.  */\n+ #pragma GCC poison bzero bcmp rindex\n+\n+#endif /* GCC >= 3.0 */\n+\n #endif /* __GCC_SYSTEM_H__ */"}]}