{"sha": "520c47e803fb8c94b864d4a1dd0f79153eae7835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwYzQ3ZTgwM2ZiOGM5NGI4NjRkNGExZGQwZjc5MTUzZWFlNzgzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-31T16:32:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-31T16:32:20Z"}, "message": "dwarf2out.c (dwarf2out_define, [...]): Replace DW_MACRO_GNU_* constants with corresponding DW_MACRO_* constants.\n\n\t* dwarf2out.c (dwarf2out_define, dwarf2out_undef, output_macinfo_op,\n\toptimize_macinfo_range, save_macinfo_strings): Replace\n\tDW_MACRO_GNU_* constants with corresponding DW_MACRO_* constants.\n\t(output_macinfo): Likewise.  Emit .debug_macro* rather than\n\t.debug_macinfo* even for -gstrict-dwarf -gdwarf-5.\n\t(init_sections_and_labels): Use .debug_macro* labels rather than\n\t.debug_macinfo* labels even for -gstrict-dwarf -gdwarf-5.\n\t(dwarf2out_finish): Use DW_AT_macros instead of DW_AT_macro_info\n\tor DW_AT_GNU_macros for -gdwarf-5.\n\nFrom-SVN: r241705", "tree": {"sha": "513f7737c07ca0e41573caf182f755399406aae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513f7737c07ca0e41573caf182f755399406aae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/520c47e803fb8c94b864d4a1dd0f79153eae7835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c47e803fb8c94b864d4a1dd0f79153eae7835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520c47e803fb8c94b864d4a1dd0f79153eae7835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c47e803fb8c94b864d4a1dd0f79153eae7835/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c667cdd7366858a9654a47fd4c5ae28160af0494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c667cdd7366858a9654a47fd4c5ae28160af0494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c667cdd7366858a9654a47fd4c5ae28160af0494"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "d462d7312123c0f58ca2b018b8859aaa9f0cb6b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c47e803fb8c94b864d4a1dd0f79153eae7835/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c47e803fb8c94b864d4a1dd0f79153eae7835/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=520c47e803fb8c94b864d4a1dd0f79153eae7835", "patch": "@@ -1,3 +1,15 @@\n+2016-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_define, dwarf2out_undef, output_macinfo_op,\n+\toptimize_macinfo_range, save_macinfo_strings): Replace\n+\tDW_MACRO_GNU_* constants with corresponding DW_MACRO_* constants.\n+\t(output_macinfo): Likewise.  Emit .debug_macro* rather than\n+\t.debug_macinfo* even for -gstrict-dwarf -gdwarf-5.\n+\t(init_sections_and_labels): Use .debug_macro* labels rather than\n+\t.debug_macinfo* labels even for -gstrict-dwarf -gdwarf-5.\n+\t(dwarf2out_finish): Use DW_AT_macros instead of DW_AT_macro_info\n+\tor DW_AT_GNU_macros for -gdwarf-5.\n+\n 2016-10-31  Waldemar Brodkorb  <wbx@openadk.org>\n \n \t* config/microblaze/linux.h (UCLIBC_DYNAMIC_LINKER): Define.\n@@ -504,7 +516,7 @@\n \n 2016-10-26  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* gen-pass-instances.awk (adjust_linenos): INcrement pass_lines[p]\n+\t* gen-pass-instances.awk (adjust_linenos): Increment pass_lines[p]\n \tby increment rather than double it.\n \t(insert_remove_pass): Strip leading whitespace from args[3].  Don't\n \temit a space before args[4]."}, {"sha": "615eca871526e94f0651356555b87c35fbd0f67c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c47e803fb8c94b864d4a1dd0f79153eae7835/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c47e803fb8c94b864d4a1dd0f79153eae7835/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=520c47e803fb8c94b864d4a1dd0f79153eae7835", "patch": "@@ -25165,7 +25165,7 @@ dwarf2out_define (unsigned int lineno ATTRIBUTE_UNUSED,\n     {\n       macinfo_entry e;\n       /* Insert a dummy first entry to be able to optimize the whole\n-\t predefined macro block using DW_MACRO_GNU_transparent_include.  */\n+\t predefined macro block using DW_MACRO_import.  */\n       if (macinfo_table->is_empty () && lineno <= 1)\n \t{\n \t  e.code = 0;\n@@ -25192,7 +25192,7 @@ dwarf2out_undef (unsigned int lineno ATTRIBUTE_UNUSED,\n     {\n       macinfo_entry e;\n       /* Insert a dummy first entry to be able to optimize the whole\n-\t predefined macro block using DW_MACRO_GNU_transparent_include.  */\n+\t predefined macro block using DW_MACRO_import.  */\n       if (macinfo_table->is_empty () && lineno <= 1)\n \t{\n \t  e.code = 0;\n@@ -25264,8 +25264,7 @@ output_macinfo_op (macinfo_entry *ref)\n \t  && (debug_str_section->common.flags & SECTION_MERGE) != 0)\n \t{\n \t  ref->code = ref->code == DW_MACINFO_define\n-\t\t      ? DW_MACRO_GNU_define_indirect\n-\t\t      : DW_MACRO_GNU_undef_indirect;\n+\t\t      ? DW_MACRO_define_strp : DW_MACRO_undef_strp;\n \t  output_macinfo_op (ref);\n \t  return;\n \t}\n@@ -25276,16 +25275,16 @@ output_macinfo_op (macinfo_entry *ref)\n \t\t\t\t   (unsigned long) ref->lineno);\n       dw2_asm_output_nstring (ref->info, -1, \"The macro\");\n       break;\n-    case DW_MACRO_GNU_define_indirect:\n-    case DW_MACRO_GNU_undef_indirect:\n+    case DW_MACRO_define_strp:\n+    case DW_MACRO_undef_strp:\n       node = find_AT_string (ref->info);\n       gcc_assert (node\n-                  && ((node->form == DW_FORM_strp)\n-                      || (node->form == DW_FORM_GNU_str_index)));\n+\t\t  && (node->form == DW_FORM_strp\n+\t\t      || node->form == DW_FORM_GNU_str_index));\n       dw2_asm_output_data (1, ref->code,\n-\t\t\t   ref->code == DW_MACRO_GNU_define_indirect\n-\t\t\t   ? \"Define macro indirect\"\n-\t\t\t   : \"Undefine macro indirect\");\n+\t\t\t   ref->code == DW_MACRO_define_strp\n+\t\t\t   ? \"Define macro strp\"\n+\t\t\t   : \"Undefine macro strp\");\n       dw2_asm_output_data_uleb128 (ref->lineno, \"At line number %lu\",\n \t\t\t\t   (unsigned long) ref->lineno);\n       if (node->form == DW_FORM_strp)\n@@ -25296,8 +25295,8 @@ output_macinfo_op (macinfo_entry *ref)\n         dw2_asm_output_data_uleb128 (node->index, \"The macro: \\\"%s\\\"\",\n                                      ref->info);\n       break;\n-    case DW_MACRO_GNU_transparent_include:\n-      dw2_asm_output_data (1, ref->code, \"Transparent include\");\n+    case DW_MACRO_import:\n+      dw2_asm_output_data (1, ref->code, \"Import\");\n       ASM_GENERATE_INTERNAL_LABEL (label,\n \t\t\t\t   DEBUG_MACRO_SECTION_LABEL, ref->lineno);\n       dw2_asm_output_offset (DWARF_OFFSET_SIZE, label, NULL, NULL);\n@@ -25313,7 +25312,7 @@ output_macinfo_op (macinfo_entry *ref)\n    other compilation unit .debug_macinfo sections.  IDX is the first\n    index of a define/undef, return the number of ops that should be\n    emitted in a comdat .debug_macinfo section and emit\n-   a DW_MACRO_GNU_transparent_include entry referencing it.\n+   a DW_MACRO_import entry referencing it.\n    If the define/undef entry should be emitted normally, return 0.  */\n \n static unsigned\n@@ -25399,10 +25398,10 @@ optimize_macinfo_range (unsigned int idx, vec<macinfo_entry, va_gc> *files,\n   for (i = 0; i < 16; i++)\n     sprintf (tail + i * 2, \"%02x\", checksum[i] & 0xff);\n \n-  /* Construct a macinfo_entry for DW_MACRO_GNU_transparent_include\n+  /* Construct a macinfo_entry for DW_MACRO_import\n      in the empty vector entry before the first define/undef.  */\n   inc = &(*macinfo_table)[idx - 1];\n-  inc->code = DW_MACRO_GNU_transparent_include;\n+  inc->code = DW_MACRO_import;\n   inc->lineno = 0;\n   inc->info = ggc_strdup (grp_name);\n   if (!*macinfo_htab)\n@@ -25414,7 +25413,7 @@ optimize_macinfo_range (unsigned int idx, vec<macinfo_entry, va_gc> *files,\n       inc->code = 0;\n       inc->info = NULL;\n       /* If such an entry has been used before, just emit\n-\t a DW_MACRO_GNU_transparent_include op.  */\n+\t a DW_MACRO_import op.  */\n       inc = *slot;\n       output_macinfo_op (inc);\n       /* And clear all macinfo_entry in the range to avoid emitting them\n@@ -25460,8 +25459,8 @@ save_macinfo_strings (void)\n                 && (debug_str_section->common.flags & SECTION_MERGE) != 0)\n               set_indirect_string (find_AT_string (ref->info));\n             break;\n-          case DW_MACRO_GNU_define_indirect:\n-          case DW_MACRO_GNU_undef_indirect:\n+\t  case DW_MACRO_define_strp:\n+\t  case DW_MACRO_undef_strp:\n             set_indirect_string (find_AT_string (ref->info));\n             break;\n           default:\n@@ -25485,15 +25484,16 @@ output_macinfo (void)\n     return;\n \n   /* output_macinfo* uses these interchangeably.  */\n-  gcc_assert ((int) DW_MACINFO_define == (int) DW_MACRO_GNU_define\n-\t      && (int) DW_MACINFO_undef == (int) DW_MACRO_GNU_undef\n-\t      && (int) DW_MACINFO_start_file == (int) DW_MACRO_GNU_start_file\n-\t      && (int) DW_MACINFO_end_file == (int) DW_MACRO_GNU_end_file);\n+  gcc_assert ((int) DW_MACINFO_define == (int) DW_MACRO_define\n+\t      && (int) DW_MACINFO_undef == (int) DW_MACRO_undef\n+\t      && (int) DW_MACINFO_start_file == (int) DW_MACRO_start_file\n+\t      && (int) DW_MACINFO_end_file == (int) DW_MACRO_end_file);\n \n   /* For .debug_macro emit the section header.  */\n-  if (!dwarf_strict)\n+  if (!dwarf_strict || dwarf_version >= 5)\n     {\n-      dw2_asm_output_data (2, 4, \"DWARF macro version number\");\n+      dw2_asm_output_data (2, dwarf_version >= 5 ? 5 : 4,\n+\t\t\t   \"DWARF macro version number\");\n       if (DWARF_OFFSET_SIZE == 8)\n \tdw2_asm_output_data (1, 3, \"Flags: 64-bit, lineptr present\");\n       else\n@@ -25507,8 +25507,7 @@ output_macinfo (void)\n   /* In the first loop, it emits the primary .debug_macinfo section\n      and after each emitted op the macinfo_entry is cleared.\n      If a longer range of define/undef ops can be optimized using\n-     DW_MACRO_GNU_transparent_include, the\n-     DW_MACRO_GNU_transparent_include op is emitted and kept in\n+     DW_MACRO_import, the DW_MACRO_import op is emitted and kept in\n      the vector before the first define/undef in the range and the\n      whole range of define/undef ops is not emitted and kept.  */\n   for (i = 0; macinfo_table->iterate (i, &ref); i++)\n@@ -25524,7 +25523,7 @@ output_macinfo (void)\n \t  break;\n \tcase DW_MACINFO_define:\n \tcase DW_MACINFO_undef:\n-\t  if (!dwarf_strict\n+\t  if ((!dwarf_strict || dwarf_version >= 5)\n \t      && HAVE_COMDAT_GROUP\n \t      && vec_safe_length (files) != 1\n \t      && i > 0\n@@ -25558,16 +25557,15 @@ output_macinfo (void)\n   delete macinfo_htab;\n   macinfo_htab = NULL;\n \n-  /* If any DW_MACRO_GNU_transparent_include were used, on those\n-     DW_MACRO_GNU_transparent_include entries terminate the\n-     current chain and switch to a new comdat .debug_macinfo\n+  /* If any DW_MACRO_import were used, on those DW_MACRO_import entries\n+     terminate the current chain and switch to a new comdat .debug_macinfo\n      section and emit the define/undef entries within it.  */\n   for (i = 0; macinfo_table->iterate (i, &ref); i++)\n     switch (ref->code)\n       {\n       case 0:\n \tcontinue;\n-      case DW_MACRO_GNU_transparent_include:\n+      case DW_MACRO_import:\n \t{\n \t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \t  tree comdat_key = get_identifier (ref->info);\n@@ -25583,7 +25581,8 @@ output_macinfo (void)\n \t  ASM_OUTPUT_LABEL (asm_out_file, label);\n \t  ref->code = 0;\n \t  ref->info = NULL;\n-\t  dw2_asm_output_data (2, 4, \"DWARF macro version number\");\n+\t  dw2_asm_output_data (2, dwarf_version >= 5 ? 5 : 4,\n+\t\t\t       \"DWARF macro version number\");\n \t  if (DWARF_OFFSET_SIZE == 8)\n \t    dw2_asm_output_data (1, 1, \"Flags: 64-bit\");\n \t  else\n@@ -25615,7 +25614,8 @@ init_sections_and_labels (void)\n       debug_loc_section = get_section (DEBUG_LOC_SECTION,\n                                        SECTION_DEBUG, NULL);\n       debug_macinfo_section_name\n-\t= dwarf_strict ? DEBUG_MACINFO_SECTION : DEBUG_MACRO_SECTION;\n+\t= (dwarf_strict && dwarf_version < 5)\n+\t  ? DEBUG_MACINFO_SECTION : DEBUG_MACRO_SECTION;\n       debug_macinfo_section = get_section (debug_macinfo_section_name,\n \t\t\t\t\t   SECTION_DEBUG, NULL);\n     }\n@@ -25652,7 +25652,8 @@ init_sections_and_labels (void)\n       debug_str_dwo_section = get_section (DEBUG_STR_DWO_SECTION,\n                                            DEBUG_STR_DWO_SECTION_FLAGS, NULL);\n       debug_macinfo_section_name\n-\t= dwarf_strict ? DEBUG_DWO_MACINFO_SECTION : DEBUG_DWO_MACRO_SECTION;\n+\t= (dwarf_strict && dwarf_version < 5)\n+\t  ? DEBUG_DWO_MACINFO_SECTION : DEBUG_DWO_MACRO_SECTION;\n       debug_macinfo_section = get_section (debug_macinfo_section_name,\n \t\t\t\t\t   SECTION_DEBUG | SECTION_EXCLUDE,\n \t\t\t\t\t   NULL);\n@@ -25683,7 +25684,7 @@ init_sections_and_labels (void)\n   ASM_GENERATE_INTERNAL_LABEL (debug_addr_section_label,\n                                DEBUG_ADDR_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,\n-\t\t\t       dwarf_strict\n+\t\t\t       (dwarf_strict && dwarf_version < 5)\n \t\t\t       ? DEBUG_MACINFO_SECTION_LABEL\n \t\t\t       : DEBUG_MACRO_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL, 0);\n@@ -27999,7 +28000,8 @@ dwarf2out_finish (const char *)\n \n   if (have_macinfo)\n     add_AT_macptr (comp_unit_die (),\n-\t\t   dwarf_strict ? DW_AT_macro_info : DW_AT_GNU_macros,\n+\t\t   dwarf_version >= 5 ? DW_AT_macros\n+\t\t   : dwarf_strict ? DW_AT_macro_info : DW_AT_GNU_macros,\n \t\t   macinfo_section_label);\n \n   if (dwarf_split_debug_info)"}]}