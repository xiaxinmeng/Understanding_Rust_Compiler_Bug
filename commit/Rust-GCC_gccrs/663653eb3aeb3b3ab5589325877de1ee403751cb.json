{"sha": "663653eb3aeb3b3ab5589325877de1ee403751cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzNjUzZWIzYWViM2IzYWI1NTg5MzI1ODc3ZGUxZWU0MDM3NTFjYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-01T18:39:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-01T18:39:37Z"}, "message": "basic_ios.h (basic_ios::_M_exception): Move.\n\n\n2002-04-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/3129\n\t* include/bits/basic_ios.h (basic_ios::_M_exception): Move.\n\t(basic_ios::_M_streambuf_state): Move.\n\t* include/bits/ios_base (ios_base): To here.\n\t* include/bits/ios_base.h (ios_base::_S_local_words): To\n\t_S_local_word_size.\n\t(ios_base::_M_word_array): To _M_local_word.\n\t(ios_base::_M_words_limit): To _M_word_size.\n\t(ios_base::_M_words): To _M_word.\n\tComment.\n\t* include/bits/basic_ios.tcc: Adjust.\n\t* src/ios.cc (ios_base::_M_grow_words): Tweak.\n\t* testsuite/27_io/ios_base_storage.cc: Add tests.\n\n\tlibstdc++/5207\n\tKenny Simpson <theonetruekenny@yahoo.com>\n\t* include/bits/ios_base.h: Fix.\n\n\tRichard Henderson  <rth@redhat.com>\n\t* include/bits/ostream.tcc (ostream::operator<<(_CharT)): Correct\n\tlast change.\n\n\t* include/bits/basic_string.h: Tweak formatting.\n\nFrom-SVN: r51695", "tree": {"sha": "50843acdc54c7a33677e005b6fdf98d20440b06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50843acdc54c7a33677e005b6fdf98d20440b06e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/663653eb3aeb3b3ab5589325877de1ee403751cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663653eb3aeb3b3ab5589325877de1ee403751cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663653eb3aeb3b3ab5589325877de1ee403751cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663653eb3aeb3b3ab5589325877de1ee403751cb/comments", "author": null, "committer": null, "parents": [{"sha": "55173836049269ad006391cabc41f7fe4562f2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55173836049269ad006391cabc41f7fe4562f2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55173836049269ad006391cabc41f7fe4562f2f9"}], "stats": {"total": 215, "additions": 152, "deletions": 63}, "files": [{"sha": "c6af9eca645baf1091434b8c60abbf45f7d89dc1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -1,3 +1,29 @@\n+2002-04-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\tlibstdc++/3129\n+\t* include/bits/basic_ios.h (basic_ios::_M_exception): Move.\n+\t(basic_ios::_M_streambuf_state): Move.\t\n+\t* include/bits/ios_base (ios_base): To here.\n+\t* include/bits/ios_base.h (ios_base::_S_local_words): To\n+\t_S_local_word_size.\n+\t(ios_base::_M_word_array): To _M_local_word.\n+\t(ios_base::_M_words_limit): To _M_word_size.\t\n+\t(ios_base::_M_words): To _M_word.\t\t\n+\tComment.\n+\t* include/bits/basic_ios.tcc: Adjust.\t\n+\t* src/ios.cc (ios_base::_M_grow_words): Tweak.\n+\t* testsuite/27_io/ios_base_storage.cc: Add tests.\n+\n+\tlibstdc++/5207\n+\tKenny Simpson <theonetruekenny@yahoo.com>\n+\t* include/bits/ios_base.h: Fix.\n+\t\n+\tRichard Henderson  <rth@redhat.com>\n+\t* include/bits/ostream.tcc (ostream::operator<<(_CharT)): Correct\n+\tlast change.\n+\n+\t* include/bits/basic_string.h: Tweak formatting.\n+\t\n 2002-04-01  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* config/locale/ieee_1003.1-2001/codecvt_specializations.h\n@@ -14,7 +40,7 @@\n \t* libsupc++/eh_personality.cc (__cxa_call_unexpected): Copy handler\n \tdata out of the exception struct before calling unexpectedHandler.\n \n-2002-03-27  Roger Sayle  <roger@eyesopen.com>\n+2002-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \t* include/c_std/std_cmath.h:  To prevent problems overloading\n \tg++ builtins, use the double variants from the global namespace"}, {"sha": "cc8617f986f15ba94fd1d665416bd1679ee71d98", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -66,10 +66,7 @@ namespace std\n       basic_ostream<_CharT, _Traits>* \t_M_tie;\n       mutable char_type \t\t_M_fill;\n       mutable bool\t\t\t_M_fill_init;\n-      iostate \t\t\t\t_M_exception;\n-\n       basic_streambuf<_CharT, _Traits>* _M_streambuf;\n-      iostate \t\t\t\t_M_streambuf_state;\n \n       // Cached use_facet<ctype>, which is based on the current locale info.\n       const __ctype_type*\t\t_M_ios_fctype;      "}, {"sha": "7dba1222cfb03b04708beeff47506965b4a5b3b3", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -64,8 +64,8 @@ namespace std\n       // associated with imbue()\n \n       // Alloc any new word array first, so if it fails we have \"rollback\".\n-      _Words* __words = (__rhs._M_word_limit <= _S_local_words) ?\n-\t_M_word_array : new _Words[__rhs._M_word_limit];\n+      _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n+\t_M_local_word : new _Words[__rhs._M_word_size];\n \n       // XXX This is the only reason _Callback_list was defined\n       // inline. The suspicion is that this increased compilation\n@@ -78,17 +78,23 @@ namespace std\n       if (__cb) \n \t__cb->_M_add_reference();\n       _M_call_callbacks(erase_event);\n-      if (_M_words != _M_word_array) \n-\tdelete [] _M_words;\n+      if (_M_word != _M_local_word) \n+\t{\n+\t  delete [] _M_word;\n+\t  _M_word = 0;\n+\t}\n       _M_dispose_callbacks();\n \n       _M_callbacks = __cb;  // NB: Don't want any added during above.\n-      for (int __i = 0; __i < __rhs._M_word_limit; ++__i)\n-\t__words[__i] = __rhs._M_words[__i];\n-      if (_M_words != _M_word_array) \n-\tdelete [] _M_words;\n-      _M_words = __words;\n-      _M_word_limit = __rhs._M_word_limit;\n+      for (int __i = 0; __i < __rhs._M_word_size; ++__i)\n+\t__words[__i] = __rhs._M_word[__i];\n+      if (_M_word != _M_local_word) \n+\t{\n+\t  delete [] _M_word;\n+\t  _M_word = 0;\n+\t}\n+      _M_word = __words;\n+      _M_word_size = __rhs._M_word_size;\n \n       this->flags(__rhs.flags());\n       this->width(__rhs.width());"}, {"sha": "f276d8976d4b59bdad33f6eb044449cad79e3fd4", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -162,16 +162,18 @@ namespace std\n \n \t_CharT* \n \t_M_refdata() throw()\n-\t{ return reinterpret_cast<_CharT*> (this + 1); }\n+\t{ return reinterpret_cast<_CharT*>(this + 1); }\n \n \t_CharT& \n \toperator[](size_t __s) throw()\n \t{ return _M_refdata() [__s]; }\n \n \t_CharT* \n \t_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)\n-\t{ return (!_M_is_leaked() && __alloc1 == __alloc2) ?\n-\t    _M_refcopy() : _M_clone(__alloc1);  }\n+\t{ \n+\t  return (!_M_is_leaked() && __alloc1 == __alloc2) \n+\t          ? _M_refcopy() : _M_clone(__alloc1);  \n+\t}\n \n \t// Create & Destroy\n \tstatic _Rep* "}, {"sha": "f5b026900f60636829bef8ace3332a5cbc1c29ad", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -158,6 +158,8 @@ namespace std\n       explicit \n       failure(const string& __str) throw();\n \n+      // This declaration is not useless:\n+      // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n       virtual \n       ~failure() throw();\n \n@@ -238,6 +240,8 @@ namespace std\n     streamsize \t\t_M_precision;\n     streamsize \t\t_M_width;\n     fmtflags \t\t_M_flags;\n+    iostate \t\t_M_exception;\n+    iostate \t       \t_M_streambuf_state;\n \n     // 27.4.2.6  Members for callbacks\n     // 27.4.2.6  ios_base callbacks\n@@ -256,9 +260,9 @@ namespace std\n       void \n       _M_add_reference() { __atomic_add(&_M_refcount, 1); }\n \n+      // 0 => OK to delete.\n       int \n       _M_remove_reference() { return __exchange_and_add(&_M_refcount, -1); }\n-      // 0 => OK to delete\n     };\n \n      _Callback_list*  \t_M_callbacks;\n@@ -274,13 +278,19 @@ namespace std\n     { \n       void* \t_M_pword; \n       long \t_M_iword; \n+      _Words() : _M_pword(0), _M_iword(0) { }\n     };\n \n-    static const int \t_S_local_words = 8;\n-    _Words  \t\t_M_word_array[_S_local_words];  // Guaranteed storage.\n-    _Words  \t\t_M_dummy;    // Only for failed iword/pword calls.\n-    _Words* \t\t_M_words;\n-    int     \t\t_M_word_limit;\n+    // Only for failed iword/pword calls.\n+    _Words  \t\t_M_word_zero;    \n+\n+    // Guaranteed storage.\n+    static const int \t_S_local_word_size = 8;\n+    _Words  \t\t_M_local_word[_S_local_word_size];  \n+\n+    // Allocated storage.\n+    int     \t\t_M_word_size;\n+    _Words* \t\t_M_word;\n  \n     _Words& \n     _M_grow_words(int __index);\n@@ -386,16 +396,16 @@ namespace std\n     inline long& \n     iword(int __ix)\n     {\n-      _Words& __word = (__ix < _M_word_limit) \n-\t\t\t? _M_words[__ix] : _M_grow_words(__ix);\n+      _Words& __word = (__ix < _M_word_size) \n+\t\t\t? _M_word[__ix] : _M_grow_words(__ix);\n       return __word._M_iword;\n     }\n \n     inline void*& \n     pword(int __ix)\n     {\n-      _Words& __word = (__ix < _M_word_limit) \n-\t\t\t? _M_words[__ix] : _M_grow_words(__ix);\n+      _Words& __word = (__ix < _M_word_size) \n+\t\t\t? _M_word[__ix] : _M_grow_words(__ix);\n       return __word._M_pword;\n     }\n "}, {"sha": "785df851ec114e4288628b9245d3dfadff5086a9", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -481,7 +481,7 @@ namespace std\n \t  try \n \t    {\n \t      streamsize __w = __out.width();\n-\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca((sizeof(_CharT) * __w) + 1));\n+\t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__w + 1)));\n \t      __pads[0] = __c;\n \t      streamsize __len = 1;\n \t      if (__w > __len)"}, {"sha": "d13ff0e73cf5856d2de0e69cd3cf404bb37509af", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -127,7 +127,7 @@ namespace std\n   const ios_base::seekdir ios_base::cur;\n   const ios_base::seekdir ios_base::end;\n \n-  const int ios_base::_S_local_words;\n+  const int ios_base::_S_local_word_size;\n   int ios_base::Init::_S_ios_base_init = 0;\n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n@@ -227,44 +227,50 @@ namespace std\n   int \n   ios_base::xalloc() throw()\n   {\n-    // XXX should be a symbol. (Reserve 0..3 for builtins.)\n-    static _Atomic_word top = 0; \n-    return __exchange_and_add(&top, 1) + 4;\n     // Implementation note: Initialize top to zero to ensure that\n     // initialization occurs before main() is started.\n+    static _Atomic_word _S_top = 0; \n+    return __exchange_and_add(&_S_top, 1) + 4;\n   }\n \n   // 27.4.2.5  iword/pword storage\n   ios_base::_Words&\n   ios_base::_M_grow_words(int ix)\n   {\n-    // Precondition: _M_word_limit <= ix\n-    _Words zero = { 0, 0 };\n-    int newlimit = _S_local_words;\n-    _Words* words = _M_word_array;\n+    // Precondition: _M_word_size <= ix\n+    int newsize = _S_local_word_size;\n+    _Words* words = _M_local_word;\n     int i = 0;\n-    if (_S_local_words <= ix)\n+    if (ix > _S_local_word_size - 1)\n       {\n-\tnewlimit = ix+1;\n+\tconst int max = numeric_limits<int>::max();\n+\tif (ix < max)\n+\t  newsize = ix + 1;\n+\telse\n+\t  newsize = max;\n+\n \ttry\n-\t  { words = new _Words[ix+1]; }\n+\t  { words = new _Words[newsize]; }\n \tcatch (...)\n \t  {\n-\t    _M_dummy = zero;  // XXX MT? Not on \"normal\" machines.\n-\t    // XXX now in basic_ios\n-\t    // _M_clear(_M_rdstate() | badbit);  // may throw\n-\t    return _M_dummy;\n+\t    delete [] _M_word;\n+\t    _M_word = 0;\n+\t    _M_streambuf_state |= badbit;\n+\t    if (_M_streambuf_state & _M_exception)\n+\t      __throw_ios_failure(\"ios_base::_M_grow_words caused exception\");\n+\t    return _M_word_zero;\n+\t  }\n+\tfor (; i < _M_word_size; i++) \n+\t  words[i] = _M_word[i];\n+\tif (_M_word && _M_word != _M_local_word) \n+\t  {\n+\t    delete [] _M_word;\n+\t    _M_word = 0;\n \t  }\n-\tfor (; i < _M_word_limit; i++) \n-\t  words[i] = _M_words[i];\n-\tif (_M_words && _M_words != _M_word_array) \n-\t  delete [] _M_words;\n       }\n-    \n-    do { words[i] = zero; } while (++i < newlimit);\n-    _M_words = words;\n-    _M_word_limit = newlimit;\n-    return words[ix];\n+    _M_word = words;\n+    _M_word_size = newsize;\n+    return _M_word[ix];\n   }\n   \n   // Called only by basic_ios<>::init.\n@@ -276,10 +282,8 @@ namespace std\n     _M_width = 0;\n     _M_flags = skipws | dec;\n     _M_callbacks = 0;\n-    _M_words = 0;\n-    _M_word_limit = 0;\n+    _M_word_size = 0;\n     _M_ios_locale = locale();\n-    // No init needed for _M_word_array or _M_dummy.\n   }  \n   \n   // 27.4.2.3  ios_base locale functions\n@@ -292,22 +296,23 @@ namespace std\n     return __old;\n   }\n \n-  ios_base::ios_base()\n+  ios_base::ios_base() : _M_callbacks(0), _M_word(0)\n   {\n     // Do nothing: basic_ios::init() does it.  \n-    // NB: _M_callbacks and _M_words must be zero for non-initialized\n+    // NB: _M_callbacks and _M_word must be zero for non-initialized\n     // ios_base to go through ~ios_base gracefully.\n-    _M_callbacks = 0;\n-    _M_words = 0;\n   }\n   \n   // 27.4.2.7  ios_base constructors/destructors\n   ios_base::~ios_base()\n   {\n     _M_call_callbacks(erase_event);\n     _M_dispose_callbacks();\n-    if (_M_words && _M_words != _M_word_array) \n-      delete [] _M_words;\n+    if (_M_word && _M_word != _M_local_word) \n+      {\n+\tdelete [] _M_word;\n+\t_M_word = 0;\n+      }\n   }\n \n   void "}, {"sha": "560e69695128eec4c418c85ab7f194f1bae0d7ba", "filename": "libstdc++-v3/testsuite/27_io/ios_base_storage.cc", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663653eb3aeb3b3ab5589325877de1ee403751cb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc?ref=663653eb3aeb3b3ab5589325877de1ee403751cb", "patch": "@@ -1,6 +1,6 @@\n // 2000-12-19 bkoz\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,10 +41,53 @@ void test01()\n   out.pword(++x4); // should not crash\n }\n \n+// libstdc++/3129\n+void test02()\n+{\n+  bool test = true;\n+  int max = std::numeric_limits<int>::max();\n+  std::stringbuf        strbuf;\n+  std::ios              ios(&strbuf);\n+\n+  long l = 0;\n+  void* v = 0;\n+\n+  // pword\n+  try \n+    {\n+      v = ios.pword(max);\n+    }\n+  catch(std::ios_base::failure& obj)\n+    {\n+      // Ok.\n+      VERIFY( ios.bad() );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( test = false );\n+    }\n+  VERIFY( v == 0 );\n+\n+  // iword\n+  try \n+    {\n+      l = ios.iword(max);\n+    }\n+  catch(std::ios_base::failure& obj)\n+    {\n+      // Ok.\n+      VERIFY( ios.bad() );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( test = false );\n+    }\n+  VERIFY( l == 0 );\n+}\n \n int main(void)\n {\n   test01();\n-\n+  test02();\n   return 0;\n }"}]}