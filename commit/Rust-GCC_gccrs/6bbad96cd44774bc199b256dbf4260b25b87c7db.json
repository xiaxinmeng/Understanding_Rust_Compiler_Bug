{"sha": "6bbad96cd44774bc199b256dbf4260b25b87c7db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiYWQ5NmNkNDQ3NzRiYzE5OWIyNTZkYmY0MjYwYjI1Yjg3YzdkYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-21T21:22:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-21T21:22:45Z"}, "message": "analyzer: fixes to -fdump-analyzer-state-purge for phi nodes\n\ngcc/analyzer/ChangeLog:\n\t* state-purge.cc (state_purge_annotator::add_node_annotations):\n\tRather than erroneously always using the NULL in-edge, determine\n\teach relevant in-edge, and print the appropriate data for each\n\tin-edge.  Use print_needed to print the data as comma-separated\n\tlists of SSA names.\n\t(print_vec_of_names): Add \"within_table\" param and use it.\n\t(state_purge_annotator::add_stmt_annotations): Factor out\n\tcollation and printing code into...\n\t(state_purge_annotator::print_needed): ...this new function.\n\t* state-purge.h (state_purge_annotator::print_needed): New decl.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2b749a05d209844f0f591f3338277db089a27db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b749a05d209844f0f591f3338277db089a27db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbad96cd44774bc199b256dbf4260b25b87c7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbad96cd44774bc199b256dbf4260b25b87c7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbad96cd44774bc199b256dbf4260b25b87c7db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbad96cd44774bc199b256dbf4260b25b87c7db/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81703584769707c34533e78c7a2bc229b0e14b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81703584769707c34533e78c7a2bc229b0e14b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81703584769707c34533e78c7a2bc229b0e14b2d"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "3c3b77500a68d96dbe05508aff5496b65971ada4", "filename": "gcc/analyzer/state-purge.cc", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbad96cd44774bc199b256dbf4260b25b87c7db/gcc%2Fanalyzer%2Fstate-purge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbad96cd44774bc199b256dbf4260b25b87c7db/gcc%2Fanalyzer%2Fstate-purge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.cc?ref=6bbad96cd44774bc199b256dbf4260b25b87c7db", "patch": "@@ -477,23 +477,20 @@ state_purge_annotator::add_node_annotations (graphviz_out *gv,\n \t      \"lightblue\");\n    pp_write_text_to_stream (pp);\n \n-   // FIXME: passing in a NULL in-edge means we get no hits\n-   function_point before_supernode\n-     (function_point::before_supernode (&n, NULL));\n-\n-   for (state_purge_map::iterator iter = m_map->begin ();\n-\titer != m_map->end ();\n-\t++iter)\n+   /* Different in-edges mean different names need purging.\n+      Determine which points to dump.  */\n+   auto_vec<function_point> points;\n+   if (n.entry_p ())\n+     points.safe_push (function_point::before_supernode (&n, NULL));\n+   else\n+     for (auto inedge : n.m_preds)\n+       points.safe_push (function_point::before_supernode (&n, inedge));\n+\n+   for (auto & point : points)\n      {\n-       tree name = (*iter).first;\n-       state_purge_per_ssa_name *per_name_data = (*iter).second;\n-       if (per_name_data->get_function () == n.m_fun)\n-\t {\n-\t   if (per_name_data->needed_at_point_p (before_supernode))\n-\t     pp_printf (pp, \"%qE needed here\", name);\n-\t   else\n-\t     pp_printf (pp, \"%qE not needed here\", name);\n-\t }\n+       point.print (pp, format (true));\n+       pp_newline (pp);\n+       print_needed (gv, point, false);\n        pp_newline (pp);\n      }\n \n@@ -502,19 +499,20 @@ state_purge_annotator::add_node_annotations (graphviz_out *gv,\n    return false;\n }\n \n-/* Print V to GV as a comma-separated list in braces within a <TR>,\n-   titling it with TITLE.\n+/* Print V to GV as a comma-separated list in braces, titling it with TITLE.\n+   If WITHIN_TABLE is true, print it within a <TR>\n \n-   Subroutine of state_purge_annotator::add_stmt_annotations.  */\n+   Subroutine of state_purge_annotator::print_needed.  */\n \n static void\n print_vec_of_names (graphviz_out *gv, const char *title,\n-\t\t    const auto_vec<tree> &v)\n+\t\t    const auto_vec<tree> &v, bool within_table)\n {\n   pretty_printer *pp = gv->get_pp ();\n   tree name;\n   unsigned i;\n-  gv->begin_trtd ();\n+  if (within_table)\n+    gv->begin_trtd ();\n   pp_printf (pp, \"%s: {\", title);\n   FOR_EACH_VEC_ELT (v, i, name)\n     {\n@@ -523,8 +521,11 @@ print_vec_of_names (graphviz_out *gv, const char *title,\n       pp_printf (pp, \"%qE\", name);\n     }\n   pp_printf (pp, \"}\");\n-  pp_write_text_as_html_like_dot_to_stream (pp);\n-  gv->end_tdtr ();\n+  if (within_table)\n+    {\n+      pp_write_text_as_html_like_dot_to_stream (pp);\n+      gv->end_tdtr ();\n+    }\n   pp_newline (pp);\n }\n \n@@ -556,6 +557,17 @@ state_purge_annotator::add_stmt_annotations (graphviz_out *gv,\n   function_point before_stmt\n     (function_point::before_stmt (supernode, stmt_idx));\n \n+  print_needed (gv, before_stmt, true);\n+}\n+\n+/* Get the ssa names needed and not-needed at POINT, and print them to GV.\n+   If WITHIN_TABLE is true, print them within <TR> elements.  */\n+\n+void\n+state_purge_annotator::print_needed (graphviz_out *gv,\n+\t\t\t\t     const function_point &point,\n+\t\t\t\t     bool within_table) const\n+{\n   auto_vec<tree> needed;\n   auto_vec<tree> not_needed;\n   for (state_purge_map::iterator iter = m_map->begin ();\n@@ -564,17 +576,17 @@ state_purge_annotator::add_stmt_annotations (graphviz_out *gv,\n     {\n       tree name = (*iter).first;\n       state_purge_per_ssa_name *per_name_data = (*iter).second;\n-      if (per_name_data->get_function () == supernode->m_fun)\n+      if (per_name_data->get_function () == point.get_function ())\n \t{\n-\t  if (per_name_data->needed_at_point_p (before_stmt))\n+\t  if (per_name_data->needed_at_point_p (point))\n \t    needed.safe_push (name);\n \t  else\n \t    not_needed.safe_push (name);\n \t}\n     }\n \n-  print_vec_of_names (gv, \"needed here\", needed);\n-  print_vec_of_names (gv, \"not needed here\", not_needed);\n+  print_vec_of_names (gv, \"needed here\", needed, within_table);\n+  print_vec_of_names (gv, \"not needed here\", not_needed, within_table);\n }\n \n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "409490e67618e843f52c9db56052b5d8f801aff4", "filename": "gcc/analyzer/state-purge.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbad96cd44774bc199b256dbf4260b25b87c7db/gcc%2Fanalyzer%2Fstate-purge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbad96cd44774bc199b256dbf4260b25b87c7db/gcc%2Fanalyzer%2Fstate-purge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.h?ref=6bbad96cd44774bc199b256dbf4260b25b87c7db", "patch": "@@ -159,6 +159,10 @@ class state_purge_annotator : public dot_annotator\n     const FINAL OVERRIDE;\n \n private:\n+  void print_needed (graphviz_out *gv,\n+\t\t     const function_point &point,\n+\t\t     bool within_table) const;\n+\n   const state_purge_map *m_map;\n };\n "}]}