{"sha": "f11c3043051e421744ea3d5d3b32c9149fbacf4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExYzMwNDMwNTFlNDIxNzQ0ZWEzZDVkM2IzMmM5MTQ5ZmJhY2Y0ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-29T20:56:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-29T20:56:08Z"}, "message": "dwarf2out.c (compute_section_prefix): Avoid cast warning.\n\n\t* dwarf2out.c (compute_section_prefix): Avoid cast warning.\n\t(gen_decl_die): Only check DECL_IGNORED_P on decls.\n\t(dwarf2out_decl): Check for DECL_IGNORED_P only when needed.\n\nFrom-SVN: r48382", "tree": {"sha": "2863a92a357d684cc072f6ff56105689b82d3beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2863a92a357d684cc072f6ff56105689b82d3beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11c3043051e421744ea3d5d3b32c9149fbacf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c3043051e421744ea3d5d3b32c9149fbacf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c3043051e421744ea3d5d3b32c9149fbacf4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c3043051e421744ea3d5d3b32c9149fbacf4e/comments", "author": null, "committer": null, "parents": [{"sha": "545614570cb5ee234331fc93c562eb146dbba579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545614570cb5ee234331fc93c562eb146dbba579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545614570cb5ee234331fc93c562eb146dbba579"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "e4f8b813a9ca371a1d1ed9d7fda519a2a3ce2d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c3043051e421744ea3d5d3b32c9149fbacf4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c3043051e421744ea3d5d3b32c9149fbacf4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f11c3043051e421744ea3d5d3b32c9149fbacf4e", "patch": "@@ -1,3 +1,9 @@\n+Sat Dec 29 15:48:54 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* dwarf2out.c (compute_section_prefix): Avoid cast warning.\n+\t(gen_decl_die): Only check DECL_IGNORED_P on decls.\n+\t(dwarf2out_decl): Check for DECL_IGNORED_P only when needed.\n+\n 2001-12-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cfglayout.c (insert_intra_before_1): New."}, {"sha": "671e9c1d24cacbaaf64e327acd7970de5817932a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c3043051e421744ea3d5d3b32c9149fbacf4e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c3043051e421744ea3d5d3b32c9149fbacf4e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f11c3043051e421744ea3d5d3b32c9149fbacf4e", "patch": "@@ -5494,19 +5494,21 @@ static void\n compute_section_prefix (unit_die)\n      dw_die_ref unit_die;\n {\n-  char *name, *p;\n+  const char *base = lbasename (get_AT_string (unit_die, DW_AT_name));\n+  char *name = (char *) alloca (strlen (base) + 64);\n+  char *p;\n   int i;\n   unsigned char checksum[16];\n   struct md5_ctx ctx;\n \n+  /* Compute the checksum of the DIE, then append part of it as hex digits to\n+     the name filename of the unit.  */\n+\n   md5_init_ctx (&ctx);\n   die_checksum (unit_die, &ctx);\n   md5_finish_ctx (&ctx, checksum);\n \n-  p = (char *) lbasename (get_AT_string (unit_die, DW_AT_name));\n-  name = (char *) alloca (strlen (p) + 64);\n   sprintf (name, \"%s.\", p);\n-\n   clean_symbol_name (name);\n \n   p = name + strlen (name);\n@@ -5520,7 +5522,7 @@ compute_section_prefix (unit_die)\n   comdat_symbol_number = 0;\n }\n \n-/* Returns nonzero iff DIE represents a type, in the sense of TYPE_P.  */\n+/* Returns nonzero if DIE represents a type, in the sense of TYPE_P.  */\n \n static int\n is_type_die (die)\n@@ -11233,7 +11235,7 @@ gen_decl_die (decl, context_die)\n {\n   tree origin;\n \n-  if (DECL_IGNORED_P (decl))\n+  if (DECL_P (decl) && DECL_IGNORED_P (decl))\n     return;\n \n   switch (TREE_CODE (decl))\n@@ -11419,9 +11421,6 @@ dwarf2out_decl (decl)\n {\n   dw_die_ref context_die = comp_unit_die;\n \n-  if (DECL_IGNORED_P (decl))\n-    return;\n-\n   switch (TREE_CODE (decl))\n     {\n     case ERROR_MARK:\n@@ -11502,7 +11501,8 @@ dwarf2out_decl (decl)\n              comparisons have.  */\n \t  if ((get_AT_unsigned (comp_unit_die, DW_AT_language)\n \t       == DW_LANG_C_plus_plus)\n-\t      && TREE_CODE (TREE_TYPE (decl)) == BOOLEAN_TYPE)\n+\t      && TREE_CODE (TREE_TYPE (decl)) == BOOLEAN_TYPE\n+\t      && ! DECL_IGNORED_P (decl))\n \t    modified_type_die (TREE_TYPE (decl), 0, 0, NULL);\n \n \t  return;"}]}