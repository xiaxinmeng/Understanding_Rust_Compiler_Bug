{"sha": "54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "node_id": "C_kwDOANBUbNoAKDU0YzVlMDY0Y2MzZGMzYzliM2RmZjEyYjZkNDhkYzNlZmQ0ODJiMDc", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-04-06T20:24:21Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-04-10T18:20:53Z"}, "message": "Fortran: fix checking of coshape specification in ALLOCATE statement\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/105184\n\t* array.cc (match_subscript): Reject assumed size coarray\n\tspecification with missing lower bound.\n\t* resolve.cc (resolve_allocate_expr): Fix logic for checking\n\tallocate-coshape-spec in ALLOCATE statement.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/105184\n\t* gfortran.dg/coarray_44.f90: Adjust expected output.\n\t* gfortran.dg/coarray_allocate_11.f90: Likewise.\n\t* gfortran.dg/coarray_allocate_12.f90: New test.", "tree": {"sha": "6633aa668db2ca970144b7d217ffc6f045b1aac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6633aa668db2ca970144b7d217ffc6f045b1aac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71cac7de8f1285307f921908a43fd864baa543f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cac7de8f1285307f921908a43fd864baa543f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cac7de8f1285307f921908a43fd864baa543f9"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "90ea812d69972cc15f865cb7f8984dd03bfdbc39", "filename": "gcc/fortran/array.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ffortran%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ffortran%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.cc?ref=54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "patch": "@@ -134,6 +134,13 @@ match_subscript (gfc_array_ref *ar, int init, bool match_star)\n   if (m == MATCH_ERROR)\n     return MATCH_ERROR;\n \n+  if (star && ar->start[i] == NULL)\n+    {\n+      gfc_error (\"Missing lower bound in assumed size \"\n+\t\t \"coarray specification at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n   /* See if we have an optional stride.  */\n   if (gfc_match_char (':') == MATCH_YES)\n     {"}, {"sha": "05f8f1bf6c242996f4494a205d37a007bfbd256d", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "patch": "@@ -8108,12 +8108,13 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \t    goto failure;\n \n \t  case  DIMEN_RANGE:\n-\t    if (ar->start[i] == 0 || ar->end[i] == 0)\n+\t    /* F2018:R937:\n+\t     * allocate-coshape-spec is [ lower-bound-expr : ] upper-bound-expr\n+\t     */\n+\t    if (ar->start[i] == 0 || ar->end[i] == 0 || ar->stride[i] != NULL)\n \t      {\n-\t\t/* If ar->stride[i] is NULL, we issued a previous error.  */\n-\t\tif (ar->stride[i] == NULL)\n-\t\t  gfc_error (\"Bad array specification in ALLOCATE statement \"\n-\t\t\t     \"at %L\", &e->where);\n+\t\tgfc_error (\"Bad coarray specification in ALLOCATE statement \"\n+\t\t\t   \"at %L\", &e->where);\n \t\tgoto failure;\n \t      }\n \t    else if (gfc_dep_compare_expr (ar->start[i], ar->end[i]) == 1)"}, {"sha": "545b5462251edcf883dab5a072715890527ba025", "filename": "gcc/testsuite/gfortran.dg/coarray_44.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_44.f90?ref=54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "patch": "@@ -10,3 +10,5 @@ program pr70071\n   allocate (z(2)[1::2,*])  ! { dg-error \"Bad array dimension\" }\n   allocate (z(1::2)[2,*])  ! { dg-error \"Bad array specification in ALLOCATE\" }\n end program pr70071\n+\n+! { dg-prune-output \"Bad coarray specification in ALLOCATE statement\" }"}, {"sha": "0e4f64e1e3d41f437c7c361f8d787c0c1b8f60cc", "filename": "gcc/testsuite/gfortran.dg/coarray_allocate_11.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90?ref=54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "patch": "@@ -3,10 +3,10 @@\n program p\n    integer, allocatable :: z[:,:]\n    integer :: i\n-   allocate (z[1:,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n-   allocate (z[:2,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n+   allocate (z[1:,*]) ! { dg-error \"Bad coarray specification in ALLOCATE statement\" }\n+   allocate (z[:2,*]) ! { dg-error \"Bad coarray specification in ALLOCATE statement\" }\n    allocate (z[2:1,*]) ! { dg-error \"Upper cobound is less than lower cobound\" }\n-   allocate (z[:0,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n+   allocate (z[:0,*]) ! { dg-error \"Bad coarray specification in ALLOCATE statement\" }\n    allocate (z[0,*]) ! { dg-error \"Upper cobound is less than lower cobound\" }\n    allocate (z[1,*]) ! This is OK\n    allocate (z[1:1,*]) ! This is OK"}, {"sha": "2169aa199988bdda3f8e60c2f0191a9d28b87c96", "filename": "gcc/testsuite/gfortran.dg/coarray_allocate_12.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_12.f90?ref=54c5e064cc3dc3c9b3dff12b6d48dc3efd482b07", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/105184\n+! Based on testcases by Gerhard Steinmetz\n+\n+program p\n+  real, allocatable :: x[:,:]\n+  integer :: n = 2\n+  allocate (x[  n, *])\n+  allocate (x[1:n, *])\n+  allocate (x[n:n, *])\n+  allocate (x[n, 5:*])\n+  allocate (x[ :n,   *]) ! { dg-error \"Bad coarray specification\" }\n+  allocate (x[::n,   *]) ! { dg-error \"Bad coarray specification\" }\n+  allocate (x[ :1:1, *]) ! { dg-error \"Bad coarray specification\" }\n+  allocate (x[1:n:n, *]) ! { dg-error \"Bad coarray specification\" }\n+  allocate (x[1,   : *]) ! { dg-error \"Missing lower bound\" }\n+end"}]}