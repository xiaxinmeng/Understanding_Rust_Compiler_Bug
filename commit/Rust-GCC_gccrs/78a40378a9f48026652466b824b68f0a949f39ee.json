{"sha": "78a40378a9f48026652466b824b68f0a949f39ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhNDAzNzhhOWY0ODAyNjY1MjQ2NmI4MjRiNjhmMGE5NDlmMzllZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-11-20T05:09:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-11-20T05:09:34Z"}, "message": "re PR c++/4629 (non-constant `sizeof (void*)' cannot be used as template argument)\n\n\t* dump.c (dump_op): New function.\n\t(cp_dump_tree): Dump CLASSTYPE_TEMPLATE_SPECIALIZATION.  Use\n\tdump_op.  Dump DECL_MUTABLE, access and staticness for VAR_DECLs.\n\tDECL_PURE_VIRTUAL_P, DECL_VIRTUAL_P,\n\n\tPR4629\n\t* semantics.c (finish_sizeof): Make sure that expression created\n\twhile processing a template do not have a type.\n\t(finish_alignof): Likewise.\n\t* typeck.c (c_sizeof): Likewise.\n\t(expr_sizeof): Likewise.\n\nFrom-SVN: r47201", "tree": {"sha": "2669e6486e7ce424050fd284519d6fa62f1413da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2669e6486e7ce424050fd284519d6fa62f1413da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a40378a9f48026652466b824b68f0a949f39ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a40378a9f48026652466b824b68f0a949f39ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a40378a9f48026652466b824b68f0a949f39ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a40378a9f48026652466b824b68f0a949f39ee/comments", "author": null, "committer": null, "parents": [{"sha": "34f62c3635821b9a5501031de5e3af0ef93d4189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f62c3635821b9a5501031de5e3af0ef93d4189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f62c3635821b9a5501031de5e3af0ef93d4189"}], "stats": {"total": 223, "additions": 217, "deletions": 6}, "files": [{"sha": "df495199dadd54a3fb50912b557a0d4957b37baf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=78a40378a9f48026652466b824b68f0a949f39ee", "patch": "@@ -1,3 +1,19 @@\n+2001-11-19  John Wilkinson <johnw@research.att.com>\n+\n+\t* dump.c (dump_op): New function.\n+\t(cp_dump_tree): Dump CLASSTYPE_TEMPLATE_SPECIALIZATION.  Use\n+\tdump_op.  Dump DECL_MUTABLE, access and staticness for VAR_DECLs.\n+\tDECL_PURE_VIRTUAL_P, DECL_VIRTUAL_P,\n+\t\n+2001-11-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR4629\n+\t* semantics.c (finish_sizeof): Make sure that expression created\n+\twhile processing a template do not have a type.\n+\t(finish_alignof): Likewise.\n+\t* typeck.c (c_sizeof): Likewise.\n+\t(expr_sizeof): Likewise.\n+\n 2001-11-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* lex.c (cxx_finish): Call c_common_finish."}, {"sha": "dea990aa4c2256795a14b7b19a165da775afd9cb", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 182, "deletions": 2, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=78a40378a9f48026652466b824b68f0a949f39ee", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n static void dump_access\n   PARAMS ((dump_info_p, tree));\n \n+static void dump_op\n+  PARAMS ((dump_info_p, tree));\n+\n /* Dump a representation of the accessibility information associated\n    with T.  */\n \n@@ -44,6 +47,166 @@ dump_access (di, t)\n     dump_string (di, \"public\");\n }\n \n+/* Dump a representation of the specific operator for an overloaded\n+   operator associated with node t.\n+*/\n+\n+static void\n+dump_op (di, t)\n+     dump_info_p di;\n+     tree t;\n+{\n+  switch (DECL_OVERLOADED_OPERATOR_P (t)) {\n+    case NEW_EXPR:\n+      dump_string (di, \"new\");\n+      break;\n+    case VEC_NEW_EXPR:\n+      dump_string (di, \"vecnew\");\n+      break;\n+    case DELETE_EXPR:\n+      dump_string (di, \"delete\");\n+      break;\n+    case VEC_DELETE_EXPR:\n+      dump_string (di, \"vecdelete\");\n+      break;\n+    case CONVERT_EXPR:\n+      dump_string (di, \"pos\");\n+      break;\n+    case NEGATE_EXPR:\n+      dump_string (di, \"neg\");\n+      break;\n+    case ADDR_EXPR:\n+      dump_string (di, \"addr\");\n+      break;\n+    case INDIRECT_REF:\n+      dump_string(di, \"deref\");\n+      break;\n+    case BIT_NOT_EXPR:\n+      dump_string(di, \"not\");\n+      break;\n+    case TRUTH_NOT_EXPR:\n+      dump_string(di, \"lnot\");\n+      break;\n+    case PREINCREMENT_EXPR:\n+      dump_string(di, \"preinc\");\n+      break;\n+    case PREDECREMENT_EXPR:\n+      dump_string(di, \"predec\");\n+      break;\n+    case PLUS_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"plusassign\");\n+      else\n+        dump_string(di, \"plus\");\n+      break;\n+    case MINUS_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"minusassign\");\n+      else\n+        dump_string(di, \"minus\");\n+      break;\n+    case MULT_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"multassign\");\n+      else\n+        dump_string (di, \"mult\");\n+      break;\n+    case TRUNC_DIV_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"divassign\");\n+      else\n+        dump_string (di, \"div\");\n+      break;\n+    case TRUNC_MOD_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+         dump_string (di, \"modassign\");\n+      else\n+        dump_string (di, \"mod\");\n+      break;\n+    case BIT_AND_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"andassign\");\n+      else\n+        dump_string (di, \"and\");\n+      break;\n+    case BIT_IOR_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"orassign\");\n+      else\n+        dump_string (di, \"or\");\n+      break;\n+    case BIT_XOR_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"xorassign\");\n+      else\n+        dump_string (di, \"xor\");\n+      break;\n+    case LSHIFT_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"lshiftassign\");\n+      else\n+        dump_string (di, \"lshift\");\n+      break;\n+    case RSHIFT_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"rshiftassign\");\n+      else\n+        dump_string (di, \"rshift\");\n+      break;\n+    case EQ_EXPR:\n+      dump_string (di, \"eq\");\n+      break;\n+    case NE_EXPR:\n+      dump_string (di, \"ne\");\n+      break;\n+    case LT_EXPR:\n+      dump_string (di, \"lt\");\n+      break;\n+    case GT_EXPR:\n+      dump_string (di, \"gt\");\n+      break;\n+    case LE_EXPR:\n+      dump_string (di, \"le\");\n+      break;\n+    case GE_EXPR:\n+      dump_string (di, \"ge\");\n+      break;\n+    case TRUTH_ANDIF_EXPR:\n+      dump_string (di, \"land\");\n+      break;\n+    case TRUTH_ORIF_EXPR:\n+      dump_string (di, \"lor\");\n+      break;\n+    case COMPOUND_EXPR:\n+      dump_string (di, \"compound\");\n+      break;\n+    case MEMBER_REF:\n+      dump_string (di, \"memref\");\n+      break;\n+    case COMPONENT_REF:\n+      dump_string (di, \"ref\");\n+      break;\n+    case ARRAY_REF:\n+      dump_string (di, \"subs\");\n+      break;\n+    case POSTINCREMENT_EXPR:\n+      dump_string (di, \"postinc\");     \n+      break;\n+    case POSTDECREMENT_EXPR:\n+      dump_string (di, \"postdec\");\n+      break;\n+    case CALL_EXPR:\n+      dump_string (di, \"call\");\n+      break;\n+    case NOP_EXPR:\n+      if (DECL_ASSIGNMENT_OPERATOR_P (t))\n+        dump_string (di, \"assign\");\n+      break;\n+    default:\n+      break;\n+  }\n+}\n+\n int\n cp_dump_tree (di, t)\n      dump_info_p di;\n@@ -101,6 +264,8 @@ cp_dump_tree (di, t)\n \t}\n \n       dump_child (\"vfld\", TYPE_VFIELD (t));\n+      if (CLASSTYPE_TEMPLATE_SPECIALIZATION(t))\n+        dump_string(di, \"spec\");\n \n       if (!dump_flag (di, TDF_SLIM, t))\n \t{\n@@ -119,22 +284,37 @@ cp_dump_tree (di, t)\n \n     case FIELD_DECL:\n       dump_access (di, t);\n+      if (DECL_MUTABLE_P (t))\n+        dump_string(di, \"mutable\");\n       break;\n \n+    case VAR_DECL:\n+      if (TREE_CODE (CP_DECL_CONTEXT (t)) == RECORD_TYPE)\n+        dump_access (di, t);\n+      if (TREE_STATIC (t) && !TREE_PUBLIC (t))\n+        dump_string (di, \"static\");\n+      break; \n+\n     case FUNCTION_DECL:\n       if (!DECL_THUNK_P (t))\n \t{\n+          if (DECL_OVERLOADED_OPERATOR_P (t)) {\n+\t    dump_string (di, \"operator\");\n+            dump_op (di, t);\n+          }\n \t  if (DECL_FUNCTION_MEMBER_P (t)) \n \t    {\n \t      dump_string (di, \"member\");\n \t      dump_access (di, t);\n \t    }\n+          if (DECL_PURE_VIRTUAL_P (t))\n+            dump_string (di, \"pure\");\n+          if (DECL_VIRTUAL_P (t))\n+            dump_string (di, \"virtual\");\n \t  if (DECL_CONSTRUCTOR_P (t))\n \t    dump_string (di, \"constructor\");\n \t  if (DECL_DESTRUCTOR_P (t))\n \t    dump_string (di, \"destructor\");\n-\t  if (DECL_OVERLOADED_OPERATOR_P (t))\n-\t    dump_string (di, \"operator\");\n \t  if (DECL_CONV_FN_P (t))\n \t    dump_string (di, \"conversion\");\n \t  if (DECL_GLOBAL_CTOR_P (t) || DECL_GLOBAL_DTOR_P (t))"}, {"sha": "ae1e59758188a97ed2a38bcb1a907fc2371fced8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=78a40378a9f48026652466b824b68f0a949f39ee", "patch": "@@ -2196,7 +2196,7 @@ finish_sizeof (t)\n      tree t;\n {\n   if (processing_template_decl)\n-    return build_min (SIZEOF_EXPR, sizetype, t);\n+    return build_min_nt (SIZEOF_EXPR, t);\n \n   return TYPE_P (t) ? c_sizeof (t) : expr_sizeof (t);\n }\n@@ -2209,7 +2209,7 @@ finish_alignof (t)\n      tree t;\n {\n   if (processing_template_decl)\n-    return build_min (ALIGNOF_EXPR, sizetype, t);\n+    return build_min_nt (ALIGNOF_EXPR, t);\n \n   return TYPE_P (t) ? c_alignof (t) : c_alignof_expr (t);\n }"}, {"sha": "e57dd1cc18d77cb0368e374763554c2010ead673", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=78a40378a9f48026652466b824b68f0a949f39ee", "patch": "@@ -1552,7 +1552,7 @@ c_sizeof (type)\n   tree size;\n \n   if (processing_template_decl)\n-    return build_min (SIZEOF_EXPR, sizetype, type);\n+    return build_min_nt (SIZEOF_EXPR, type);\n \n   if (code == FUNCTION_TYPE)\n     {\n@@ -1614,7 +1614,7 @@ expr_sizeof (e)\n      tree e;\n {\n   if (processing_template_decl)\n-    return build_min (SIZEOF_EXPR, sizetype, e);\n+    return build_min_nt (SIZEOF_EXPR, e);\n \n   if (TREE_CODE (e) == COMPONENT_REF\n       && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))"}, {"sha": "328d647473cdc5f27caef9df0de49c4e2bd30fc3", "filename": "gcc/testsuite/g++.dg/sizeof1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsizeof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a40378a9f48026652466b824b68f0a949f39ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsizeof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsizeof1.C?ref=78a40378a9f48026652466b824b68f0a949f39ee", "patch": "@@ -0,0 +1,15 @@\n+// Test use of `sizeof' as a template parameter.\n+// Origin: smacdonald@seimac.com\n+\n+// { dg-do compile }\n+\n+template <unsigned I> struct A {};\n+\n+template <typename SizeType>\n+struct B\n+{\n+char * f() const\n+{\n+return (A<sizeof(void *)>::value);\n+}\n+};"}]}