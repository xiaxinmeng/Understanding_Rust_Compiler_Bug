{"sha": "04e23a4051fb3c049f85b9e6e2fc58f937337aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlMjNhNDA1MWZiM2MwNDlmODViOWU2ZTJmYzU4ZjkzNzMzN2FmZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-20T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-20T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "01cb32abfa54ca64c7345e482d7e957e50007fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01cb32abfa54ca64c7345e482d7e957e50007fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e23a4051fb3c049f85b9e6e2fc58f937337aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e23a4051fb3c049f85b9e6e2fc58f937337aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e23a4051fb3c049f85b9e6e2fc58f937337aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e23a4051fb3c049f85b9e6e2fc58f937337aff/comments", "author": null, "committer": null, "parents": [{"sha": "f1612b8ae8a60f62cf5456b3357a341550534a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1612b8ae8a60f62cf5456b3357a341550534a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1612b8ae8a60f62cf5456b3357a341550534a7e"}], "stats": {"total": 400, "additions": 399, "deletions": 1}, "files": [{"sha": "fbe0f179431feed6eee8e87bde43a99240b16e78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1,3 +1,168 @@\n+2020-08-19  2020-08-19  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_P10V_0, BU_P10V_1,\n+\tBU_P10V_2, BU_P10V_3): Rename BU_P10V_VSX_0, BU_P10V_VSX_1,\n+\tBU_P10V_VSX_2, BU_P10V_VSX_3 respectively.\n+\t(BU_P10V_4): Remove.\n+\t(BU_P10V_AV_0, BU_P10V_AV_1, BU_P10V_AV_2, BU_P10V_AV_3, BU_P10V_AV_4):\n+\tNew definitions for Power 10 Altivec macros.\n+\t(VSTRIBR, VSTRIHR, VSTRIBL, VSTRIHL, VSTRIBR_P, VSTRIHR_P,\n+\tVSTRIBL_P, VSTRIHL_P, MTVSRBM, MTVSRHM, MTVSRWM, MTVSRDM, MTVSRQM,\n+\tVEXPANDMB, VEXPANDMH, VEXPANDMW, VEXPANDMD, VEXPANDMQ, VEXTRACTMB,\n+\tVEXTRACTMH, VEXTRACTMW, VEXTRACTMD, VEXTRACTMQ): Replace macro\n+\texpansion BU_P10V_1 with BU_P10V_AV_1.\n+\t(VCLRLB, VCLRRB, VCFUGED, VCLZDM, VCTZDM, VPDEPD, VPEXTD, VGNB,\n+\tVCNTMBB, VCNTMBH, VCNTMBW, VCNTMBD): Replace macro expansion\n+\tBU_P10V_2 with\tBU_P10V_AV_2.\n+\t(VEXTRACTBL, VEXTRACTHL, VEXTRACTWL, VEXTRACTDL, VEXTRACTBR, VEXTRACTHR,\n+\tVEXTRACTWR, VEXTRACTDR, VINSERTGPRBL, VINSERTGPRHL, VINSERTGPRWL,\n+\tVINSERTGPRDL, VINSERTVPRBL, VINSERTVPRHL, VINSERTVPRWL, VINSERTGPRBR,\n+\tVINSERTGPRHR, VINSERTGPRWR, VINSERTGPRDR, VINSERTVPRBR, VINSERTVPRHR,\n+\tVINSERTVPRWR, VREPLACE_ELT_V4SI, VREPLACE_ELT_UV4SI, VREPLACE_ELT_V2DF,\n+\tVREPLACE_ELT_V4SF, VREPLACE_ELT_V2DI, VREPLACE_ELT_UV2DI, VREPLACE_UN_V4SI,\n+\tVREPLACE_UN_UV4SI, VREPLACE_UN_V4SF, VREPLACE_UN_V2DI, VREPLACE_UN_UV2DI,\n+\tVREPLACE_UN_V2DF, VSLDB_V16QI, VSLDB_V8HI, VSLDB_V4SI, VSLDB_V2DI,\n+\tVSRDB_V16QI, VSRDB_V8HI, VSRDB_V4SI, VSRDB_V2DI): Replace macro expansion\n+\tBU_P10V_3 with BU_P10V_AV_3.\n+\t(VXXSPLTIW_V4SI, VXXSPLTIW_V4SF, VXXSPLTID): Replace macro expansion\n+\tBU_P10V_1 with BU_P10V_AV_1.\n+\t(XXGENPCVM_V16QI, XXGENPCVM_V8HI, XXGENPCVM_V4SI, XXGENPCVM_V2DI):\n+\tReplace macro expansion BU_P10V_2 with BU_P10V_VSX_2.\n+\t(VXXSPLTI32DX_V4SI, VXXSPLTI32DX_V4SF, VXXBLEND_V16QI, VXXBLEND_V8HI,\n+\tVXXBLEND_V4SI, VXXBLEND_V2DI, VXXBLEND_V4SF, VXXBLEND_V2DF): Replace macor\n+\texpansion BU_P10V_3 with BU_P10V_VSX_3.\n+\t(XXEVAL, VXXPERMX): Replace macro expansion BU_P10V_4 with BU_P10V_VSX_4.\n+\t(XVCVBF16SP, XVCVSPBF16): Replace macro expansion BU_VSX_1 with\n+\tBU_P10V_VSX_1. Also change MISC to CONST.\n+\t* config/rs6000/rs6000-c.c: (P10_BUILTIN_VXXPERMX): Replace with\n+\tP10V_BUILTIN_VXXPERMX.\n+\t(P10_BUILTIN_VCLRLB, P10_BUILTIN_VCLRLB, P10_BUILTIN_VCLRRB,\n+\tP10_BUILTIN_VGNB, P10_BUILTIN_XXEVAL, P10_BUILTIN_VXXPERMX,\n+\tP10_BUILTIN_VEXTRACTBL, P10_BUILTIN_VEXTRACTHL, P10_BUILTIN_VEXTRACTWL,\n+\tP10_BUILTIN_VEXTRACTDL, P10_BUILTIN_VINSERTGPRHL,\n+\tP10_BUILTIN_VINSERTGPRWL, P10_BUILTIN_VINSERTGPRDL,\n+\tP10_BUILTIN_VINSERTVPRBL, P10_BUILTIN_VINSERTVPRHL,\n+\tP10_BUILTIN_VEXTRACTBR, P10_BUILTIN_VEXTRACTHR,\n+\tP10_BUILTIN_VEXTRACTWR, P10_BUILTIN_VEXTRACTDR,\n+\tP10_BUILTIN_VINSERTGPRBR, P10_BUILTIN_VINSERTGPRHR,\n+\tP10_BUILTIN_VINSERTGPRWR, P10_BUILTIN_VINSERTGPRDR,\n+\tP10_BUILTIN_VINSERTVPRBR, P10_BUILTIN_VINSERTVPRHR,\n+\tP10_BUILTIN_VINSERTVPRWR, P10_BUILTIN_VREPLACE_ELT_UV4SI,\n+\tP10_BUILTIN_VREPLACE_ELT_V4SI, P10_BUILTIN_VREPLACE_ELT_UV2DI,\n+\tP10_BUILTIN_VREPLACE_ELT_V2DI, P10_BUILTIN_VREPLACE_ELT_V2DF,\n+\tP10_BUILTIN_VREPLACE_UN_UV4SI, P10_BUILTIN_VREPLACE_UN_V4SI,\n+\tP10_BUILTIN_VREPLACE_UN_V4SF, P10_BUILTIN_VREPLACE_UN_UV2DI,\n+\tP10_BUILTIN_VREPLACE_UN_V2DI, P10_BUILTIN_VREPLACE_UN_V2DF,\n+\tP10_BUILTIN_VSLDB_V16QI, P10_BUILTIN_VSLDB_V16QI,\n+\tP10_BUILTIN_VSLDB_V8HI, P10_BUILTIN_VSLDB_V4SI,\n+\tP10_BUILTIN_VSLDB_V2DI, P10_BUILTIN_VXXSPLTIW_V4SI,\n+\tP10_BUILTIN_VXXSPLTIW_V4SF, P10_BUILTIN_VXXSPLTID,\n+\tP10_BUILTIN_VXXSPLTI32DX_V4SI, P10_BUILTIN_VXXSPLTI32DX_V4SF,\n+\tP10_BUILTIN_VXXBLEND_V16QI, P10_BUILTIN_VXXBLEND_V8HI,\n+\tP10_BUILTIN_VXXBLEND_V4SI, P10_BUILTIN_VXXBLEND_V2DI,\n+\tP10_BUILTIN_VXXBLEND_V4SF, P10_BUILTIN_VXXBLEND_V2DF,\n+\tP10_BUILTIN_VSRDB_V16QI, P10_BUILTIN_VSRDB_V8HI,\n+\tP10_BUILTIN_VSRDB_V4SI, P10_BUILTIN_VSRDB_V2DI,\n+\tP10_BUILTIN_VSTRIBL, P10_BUILTIN_VSTRIHL,\n+\tP10_BUILTIN_VSTRIBL_P, P10_BUILTIN_VSTRIHL_P,\n+\tP10_BUILTIN_VSTRIBR, P10_BUILTIN_VSTRIHR,\n+\tP10_BUILTIN_VSTRIBR_P, P10_BUILTIN_VSTRIHR_P,\n+\tP10_BUILTIN_MTVSRBM, P10_BUILTIN_MTVSRHM,\n+\tP10_BUILTIN_MTVSRWM, P10_BUILTIN_MTVSRDM,\n+\tP10_BUILTIN_MTVSRQM, P10_BUILTIN_VCNTMBB,\n+\tP10_BUILTIN_VCNTMBH, P10_BUILTIN_VCNTMBW,\n+\tP10_BUILTIN_VCNTMBD, P10_BUILTIN_VEXPANDMB,\n+\tP10_BUILTIN_VEXPANDMH, P10_BUILTIN_VEXPANDMW,\n+\tP10_BUILTIN_VEXPANDMD, P10_BUILTIN_VEXPANDMQ,\n+\tP10_BUILTIN_VEXTRACTMB, P10_BUILTIN_VEXTRACTMH,\n+\tP10_BUILTIN_VEXTRACTMW, P10_BUILTIN_VEXTRACTMD,\n+\tP10_BUILTIN_VEXTRACTMQ, P10_BUILTIN_XVTLSBB_ZEROS,\n+\tP10_BUILTIN_XVTLSBB_ONES): Replace with\n+\tP10V_BUILTIN_VCLRLB, P10V_BUILTIN_VCLRLB, P10V_BUILTIN_VCLRRB,\n+\tP10V_BUILTIN_VGNB, P10V_BUILTIN_XXEVAL, P10V_BUILTIN_VXXPERMX,\n+\tP10V_BUILTIN_VEXTRACTBL, P10V_BUILTIN_VEXTRACTHL, P10V_BUILTIN_VEXTRACTWL,\n+\tP10V_BUILTIN_VEXTRACTDL, P10V_BUILTIN_VINSERTGPRHL,\n+\tP10V_BUILTIN_VINSERTGPRWL, P10V_BUILTIN_VINSERTGPRDL,\n+\tP10V_BUILTIN_VINSERTVPRBL,P10V_BUILTIN_VINSERTVPRHL,\n+\tP10V_BUILTIN_VEXTRACTBR, P10V_BUILTIN_VEXTRACTHR\n+\tP10V_BUILTIN_VEXTRACTWR, P10V_BUILTIN_VEXTRACTDR,\n+\tP10V_BUILTIN_VINSERTGPRBR, P10V_BUILTIN_VINSERTGPRHR,\n+\tP10V_BUILTIN_VINSERTGPRWR, P10V_BUILTIN_VINSERTGPRDR,\n+\tP10V_BUILTIN_VINSERTVPRBR, P10V_BUILTIN_VINSERTVPRHR,\n+\tP10V_BUILTIN_VINSERTVPRWR, P10V_BUILTIN_VREPLACE_ELT_UV4SI,\n+\tP10V_BUILTIN_VREPLACE_ELT_V4SI, P10V_BUILTIN_VREPLACE_ELT_UV2DI,\n+\tP10V_BUILTIN_VREPLACE_ELT_V2DI, P10V_BUILTIN_VREPLACE_ELT_V2DF,\n+\tP10V_BUILTIN_VREPLACE_UN_UV4SI, P10V_BUILTIN_VREPLACE_UN_V4SI,\n+\tP10V_BUILTIN_VREPLACE_UN_V4SF, P10V_BUILTIN_VREPLACE_UN_UV2DI,\n+\tP10V_BUILTIN_VREPLACE_UN_V2DI, P10V_BUILTIN_VREPLACE_UN_V2DF,\n+\tP10V_BUILTIN_VSLDB_V16QI, P10V_BUILTIN_VSLDB_V16QI,\n+\tP10V_BUILTIN_VSLDB_V8HI, P10V_BUILTIN_VSLDB_V4SI,\n+\tP10V_BUILTIN_VSLDB_V2DI, P10V_BUILTIN_VXXSPLTIW_V4SI,\n+\tP10V_BUILTIN_VXXSPLTIW_V4SF, P10V_BUILTIN_VXXSPLTID,\n+\tP10V_BUILTIN_VXXSPLTI32DX_V4SI, P10V_BUILTIN_VXXSPLTI32DX_V4SF,\n+\tP10V_BUILTIN_VXXBLEND_V16QI, P10V_BUILTIN_VXXBLEND_V8HI,\n+\tP10V_BUILTIN_VXXBLEND_V4SI, P10V_BUILTIN_VXXBLEND_V2DI,\n+\tP10V_BUILTIN_VXXBLEND_V4SF, P10V_BUILTIN_VXXBLEND_V2DF,\n+\tP10V_BUILTIN_VSRDB_V16QI, P10V_BUILTIN_VSRDB_V8HI,\n+\tP10V_BUILTIN_VSRDB_V4SI, P10V_BUILTIN_VSRDB_V2DI,\n+\tP10V_BUILTIN_VSTRIBL, P10V_BUILTIN_VSTRIHL,\n+\tP10V_BUILTIN_VSTRIBL_P, P10V_BUILTIN_VSTRIHL_P,\n+\tP10V_BUILTIN_VSTRIBR, P10V_BUILTIN_VSTRIHR,\n+\tP10V_BUILTIN_VSTRIBR_P, P10V_BUILTIN_VSTRIHR_P,\n+\tP10V_BUILTIN_MTVSRBM, P10V_BUILTIN_MTVSRHM,\n+\tP10V_BUILTIN_MTVSRWM, P10V_BUILTIN_MTVSRDM,\n+\tP10V_BUILTIN_MTVSRQM, P10V_BUILTIN_VCNTMBB,\n+\tP10V_BUILTIN_VCNTMBH, P10V_BUILTIN_VCNTMBW,\n+\tP10V_BUILTIN_VCNTMBD, P10V_BUILTIN_VEXPANDMB,\n+\tP10V_BUILTIN_VEXPANDMH, P10V_BUILTIN_VEXPANDMW,\n+\tP10V_BUILTIN_VEXPANDMD, P10V_BUILTIN_VEXPANDMQ,\n+\tP10V_BUILTIN_VEXTRACTMB, P10V_BUILTIN_VEXTRACTMH,\n+\tP10V_BUILTIN_VEXTRACTMW, P10V_BUILTIN_VEXTRACTMD,\n+\tP10V_BUILTIN_VEXTRACTMQ, P10V_BUILTIN_XVTLSBB_ZEROS,\n+\tP10V_BUILTIN_XVTLSBB_ONES respectively.\n+\t* config/rs6000/rs6000-call.c: Ditto above, change P10_BUILTIN_name to\n+\tP10V_BUILTIN_name.\n+\t(P10_BUILTIN_XVCVSPBF16, P10_BUILTIN_XVCVBF16SP): Change to\n+\tP10V_BUILTIN_XVCVSPBF16, P10V_BUILTIN_XVCVBF16SP respectively.\n+\n+2020-08-19  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-logue.c (rs6000_decl_ok_for_sibcall):\n+\tSibcalls are always legal when the caller doesn't preserve r2.\n+\n+2020-08-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_builtin)\n+\t[case IX86_BUILTIN_ENQCMD, case IX86_BUILTIN_ENQCMDS]:\n+\tRewrite expansion to use code_for_enqcmd.\n+\t[case IX86_BUILTIN_WRSSD, case IX86_BUILTIN_WRSSQ]:\n+\tRewrite expansion to use code_for_wrss.\n+\t[case IX86_BUILTIN_WRUSSD, case IX86_BUILTIN_WRUSSD]:\n+\tRewrite expansion to use code_for_wrss.\n+\n+2020-08-19  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/94234\n+\t* match.pd ((PTR_A + OFF) - (PTR_B + OFF)) -> (PTR_A - PTR_B): New\n+\tsimplification.\n+\n+2020-08-19  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_intel_cpu): Detect Rocket\n+\tLake and Alder Lake.\n+\n+2020-08-19  Peixin Qiao  <qiaopeixin@huawei.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_init_cumulative_args): Remove\n+\t\"fndecl && TREE_PUBLIC (fndecl)\" check since it prevents the funtion\n+\ttype check when calling via a function pointer or when calling a static\n+\tfunction.\n+\n+2020-08-19  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* opts-global.c (decode_options): Call target_option_override_hook\n+\tbefore it prints for --help=*.\n+\n 2020-08-18  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def (BU_VSX_1): Rename xvcvbf16sp to"}, {"sha": "7829179094cd70c853ac93a8d5a200f8cddac151", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1 +1 @@\n-20200819\n+20200820"}, {"sha": "cfb6a6e50b51294e96c696a55a92862415dc88a7", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1,3 +1,52 @@\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96643\n+\t* region-model.cc (region_model::deref_rvalue): Rather than\n+\tattempting to handle all svalue kinds in the switch, only cover\n+\tthe special cases, and move symbolic-region handling to after\n+\tthe switch, thus implicitly handling the missing case SK_COMPOUND.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96705\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_binop): Check that we have an\n+\tintegral type before calling build_int_cst.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96699\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_cast): Use FIX_TRUNC_EXPR for\n+\tcasting from REAL_TYPE to INTEGER_TYPE.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96651\n+\t* region-model.cc (region_model::called_from_main_p): New.\n+\t(region_model::get_store_value): Move handling for globals into...\n+\t(region_model::get_initial_value_for_global): ...this new\n+\tfunction, and add logic for extracting values from decl\n+\tinitializers.\n+\t* region-model.h (decl_region::get_svalue_for_constructor): New\n+\tdecl.\n+\t(decl_region::get_svalue_for_initializer): New decl.\n+\t(region_model::called_from_main_p): New decl.\n+\t(region_model::get_initial_value_for_global): New.\n+\t* region.cc (decl_region::maybe_get_constant_value): Move logic\n+\tfor getting an svalue from a CONSTRUCTOR node to...\n+\t(decl_region::get_svalue_for_constructor): ...this new function.\n+\t(decl_region::get_svalue_for_initializer): New.\n+\t* store.cc (get_svalue_for_ctor_val): Rewrite in terms of\n+\tregion_model::get_rvalue.\n+\t* store.h (binding_cluster::get_map): New accessor.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96648\n+\t* region.cc (get_field_at_bit_offset): Gracefully handle negative\n+\tvalues for bit_offset.\n+\n 2020-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (region_model::get_rvalue_1): Fix name of local."}, {"sha": "459a98eae150d914c9546a88715b6116ac302ef5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1,3 +1,15 @@\n+2020-08-19  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 2369\n+\t* cp-tree.h (push_tinst_level, push_tinst_level_loc): Declare.\n+\t* constraint.cc (satisfy_declaration_constraints):\n+\tUse add_outermost_template_args and push_tinst_level.\n+\t* pt.c (add_outermost_template_args): Handle getting\n+\ta TEMPLATE_DECL as the first argument.\n+\t(push_tinst_level, push_tinst_level_loc): No longer static.\n+\t(fn_type_unification): Check satisfaction before non-dependent\n+\tconversions.\n+\n 2020-08-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (SET_TYPE_TEMPLTE_INFO): Do not deal with ALIAS templates."}, {"sha": "ed39ca9e8f7e3b95f9acfce874bde60386d1c49c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1,3 +1,79 @@\n+2020-08-19  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 2369\n+\t* g++.dg/concepts/diagnostic10.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic13.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic2.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic3.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic4.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic5.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/diagnostic9.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/expression2.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/fn5.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/placeholder5.C: Adjust expexcted errors.\n+\t* g++.dg/concepts/pr67595.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-pr78752-2.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-pr84140.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-recursive-sat3.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-requires18.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-requires19.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts3.C: Adjust expexcted errors.\n+\t* g++.dg/cpp2a/concepts-nondep1.C: New test.\n+\t* g++.dg/cpp2a/concepts-nondep1a.C: New test.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96643\n+\t* g++.dg/analyzer/pr96643.C: New test.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96705\n+\t* gcc.dg/analyzer/pr96705.c: New test.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96699\n+\t* gcc.dg/analyzer/pr96699.c: New test.\n+\n+2020-08-19  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pcrel-sibcall-1.c: Adjust.\n+\n+2020-08-19  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR tree-optimization/94234\n+\t* gcc.dg/pr94234-1.c: New test.\n+\n+2020-08-19  Peixin Qiao  <qiaopeixin@huawei.com>\n+\n+\t* gcc.target/aarch64/mgeneral-regs_7.c: New test.\n+\n+2020-08-19  Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* gcc.dg/sinatan-2.c: Add dg-require-effective-target c99_runtime.\n+\t* gcc.dg/sinhovercosh-1.c: Likewise.\n+\t* gcc.dg/tanhbysinh.c: Likewise.\n+\n+2020-08-19  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96494\n+\t* lib/target-supports.exp (check_effective_target_sync_int_long):\n+\tReturn 1 for nvptx.\n+\t(check_effective_target_sync_int_long_stack): New proc.\n+\t* gcc.dg/pr86314.c: Require effective target sync_int_long_stack.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96651\n+\t* gcc.dg/analyzer/pr96651-1.c: New test.\n+\t* gcc.dg/analyzer/pr96651-2.c: New test.\n+\n+2020-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96648\n+\t* gcc.dg/analyzer/pr96648.c: New test.\n+\n 2020-08-18  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* gcc.target/powerpc/mma-builtin-3.c: Rename xvcvbf16sp to xvcvbf16spn."}, {"sha": "9e67d4dac2a1e5582f1ce95f607708c92c7934a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e23a4051fb3c049f85b9e6e2fc58f937337aff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e23a4051fb3c049f85b9e6e2fc58f937337aff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=04e23a4051fb3c049f85b9e6e2fc58f937337aff", "patch": "@@ -1,3 +1,99 @@\n+2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/96042\n+\t* include/bits/range_access.h (__detail::__to_unsigned_like):\n+\tDo not use make_unsigned_t<T> in the return type, as it can\n+\tresult in an error before the integral<T> constraint is checked.\n+\t[__STRICT_ANSI__]: Add overloads for 128-bit integer types.\n+\t(__detail::__make_unsigned_like_t): Define as the return type\n+\tof __to_unsigned_like.\n+\t* testsuite/std/ranges/subrange/96042.cc: New test.\n+\n+2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_tree.h (operator!=, operator>, operator<=)\n+\t(operator>=): Remove deprecated functions.\n+\n+2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96042\n+\t* include/ext/numeric_traits.h (__is_integer_nonstrict): New\n+\ttrait which is true for 128-bit integers even in strict modes.\n+\t(__numeric_traits_integer, __numeric_traits): Use\n+\t__is_integer_nonstrict instead of __is_integer.\n+\t* include/std/limits [__STRICT_ANSI__ && __SIZEOF_INT128__]\n+\t(numeric_limits<__int128>, (numeric_limits<unsigned __int128>):\n+\tDefine.\n+\t* testsuite/std/ranges/iota/96042.cc: New test.\n+\n+2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_DEPRECATED_SUGGEST)\n+\t(_GLIBCXX11_DEPRECATED, _GLIBCXX11_DEPRECATED_SUGGEST)\n+\t(_GLIBCXX17_DEPRECATED_SUGGEST, _GLIBCXX20_DEPRECATED_SUGGEST):\n+\tAdd new macros to comment.\n+\n+2020-08-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/Makefile.am (bits_headers): Add new header\n+\t<bits/max_size_type.h>.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/iterator_concepts.h\n+\t(ranges::__detail::__max_diff_type): Remove definition, replace\n+\twith forward declaration of class __max_diff_type.\n+\t(__detail::__max_size_type): Remove definition, replace with\n+\tforward declaration of class __max_size_type.\n+\t(__detail::__is_unsigned_int128, __is_signed_int128)\n+\t(__is_int128): New concepts.\n+\t(__detail::__is_integer_like): Accept __int128 and unsigned\n+\t__int128.\n+\t(__detail::__is_signed_integer_like): Accept __int128.\n+\t* include/bits/max_size_type.h: New header.\n+\t* include/bits/range_access.h: Include <bits/max_size_type.h>.\n+\t(__detail::__to_unsigned_like): Two new overloads.\n+\t* testsuite/std/ranges/iota/difference_type.cc: New test.\n+\t* testsuite/std/ranges/iota/max_size_type.cc: New test.\n+\n+2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_DEPRECATED): Define for all\n+\tstandard modes.\n+\t(_GLIBCXX_DEPRECATED_SUGGEST): New macro for \"use 'foo' instead\"\n+\tmessage in deprecated warnings.\n+\t(_GLIBCXX11_DEPRECATED, _GLIBCXX11_DEPRECATED_SUGGEST): New\n+\tmacros for marking features derpecated in C++11.\n+\t(_GLIBCXX17_DEPRECATED_SUGGEST, _GLIBCXX20_DEPRECATED_SUGGEST):\n+\tNew macros.\n+\t* include/backward/auto_ptr.h (auto_ptr_ref, auto_ptr<void>):\n+\tUse _GLIBCXX11_DEPRECATED instead of _GLIBCXX_DEPRECATED.\n+\t(auto_ptr): Use _GLIBCXX11_DEPRECATED_SUGGEST.\n+\t* include/backward/binders.h (binder1st, binder2nd): Likewise.\n+\t* include/bits/ios_base.h (io_state, open_mode, seek_dir)\n+\t(streampos, streamoff): Use _GLIBCXX_DEPRECATED_SUGGEST.\n+\t* include/std/streambuf (stossc): Replace C++11 attribute\n+\twith _GLIBCXX_DEPRECATED_SUGGEST.\n+\t* include/std/type_traits (__is_nullptr_t): Use\n+\t_GLIBCXX_DEPRECATED_SUGGEST instead of _GLIBCXX_DEPRECATED.\n+\t* testsuite/27_io/types/1.cc: Check for deprecated warnings.\n+\tAlso check for io_state, open_mode and seek_dir typedefs.\n+\n+2020-08-19  Antony Polukhin  <antoshkka@gmail.com>\n+\n+\tPR libstdc++/71579\n+\t* include/std/type_traits (invoke_result, is_nothrow_invocable_r)\n+\tAdd static_asserts to make sure that the argument of the type\n+\ttrait is not misused with incomplete types.\n+\t(is_swappable_with, is_nothrow_swappable_with): Add static_asserts\n+\tto make sure that the first and second arguments of the type trait\n+\tare not misused with incomplete types.\n+\t* testsuite/20_util/invoke_result/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_nothrow_swappable/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_nothrow_swappable_with/incomplete_neg.cc: New\n+\ttest.\n+\t* testsuite/20_util/is_swappable_with/incomplete_neg.cc: New test.\n+\n 2020-08-18  David Edelsohn  <dje.gcc@gmail.com>\n \t    Clement Chigot  <clement.chigot@atos.net>\n "}]}