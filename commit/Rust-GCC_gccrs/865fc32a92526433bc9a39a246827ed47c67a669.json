{"sha": "865fc32a92526433bc9a39a246827ed47c67a669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY1ZmMzMmE5MjUyNjQzM2JjOWEzOWEyNDY4MjdlZDQ3YzY3YTY2OQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-02-18T08:17:32Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-02-18T08:17:32Z"}, "message": "nvptx mkoffload: For non-installed testing, look in all COMPILER_PATHs for GCC_INSTALL_NAME.\n\n\tgcc/\n\t* config/nvptx/mkoffload.c (parse_env_var, free_array_of_ptrs)\n\t(access_check): New functions, copied from\n\tconfig/i386/intelmic-mkoffload.c.\n\t(main): For non-installed testing, look in all COMPILER_PATHs for\n\tGCC_INSTALL_NAME.\n\nFrom-SVN: r220782", "tree": {"sha": "b6d84ea31cfec04f2353c92b62916db5970b252c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d84ea31cfec04f2353c92b62916db5970b252c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865fc32a92526433bc9a39a246827ed47c67a669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865fc32a92526433bc9a39a246827ed47c67a669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865fc32a92526433bc9a39a246827ed47c67a669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865fc32a92526433bc9a39a246827ed47c67a669/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ae12d71c49023e565ccd0112718cf146c3e871d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae12d71c49023e565ccd0112718cf146c3e871d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae12d71c49023e565ccd0112718cf146c3e871d"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "0f144f5b3f6b97d1f0a7939049cce67b815f4dcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865fc32a92526433bc9a39a246827ed47c67a669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865fc32a92526433bc9a39a246827ed47c67a669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=865fc32a92526433bc9a39a246827ed47c67a669", "patch": "@@ -1,5 +1,11 @@\n 2015-02-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* config/nvptx/mkoffload.c (parse_env_var, free_array_of_ptrs)\n+\t(access_check): New functions, copied from\n+\tconfig/i386/intelmic-mkoffload.c.\n+\t(main): For non-installed testing, look in all COMPILER_PATHs for\n+\tGCC_INSTALL_NAME.\n+\n \t* config/nvptx/nvptx.h (GOMP_SELF_SPECS): Define macro.\n \n 2015-02-18  Andrew Pinski  <apinski@cavium.com>"}, {"sha": "02c44b6f3e929106f9f4fb49fde48f0e45135a44", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865fc32a92526433bc9a39a246827ed47c67a669/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865fc32a92526433bc9a39a246827ed47c67a669/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=865fc32a92526433bc9a39a246827ed47c67a669", "patch": "@@ -762,6 +762,78 @@ parse_file (Token *tok)\n   return tok;\n }\n \n+/* Parse STR, saving found tokens into PVALUES and return their number.\n+   Tokens are assumed to be delimited by ':'.  */\n+static unsigned\n+parse_env_var (const char *str, char ***pvalues)\n+{\n+  const char *curval, *nextval;\n+  char **values;\n+  unsigned num = 1, i;\n+\n+  curval = strchr (str, ':');\n+  while (curval)\n+    {\n+      num++;\n+      curval = strchr (curval + 1, ':');\n+    }\n+\n+  values = (char **) xmalloc (num * sizeof (char *));\n+  curval = str;\n+  nextval = strchr (curval, ':');\n+  if (nextval == NULL)\n+    nextval = strchr (curval, '\\0');\n+\n+  for (i = 0; i < num; i++)\n+    {\n+      int l = nextval - curval;\n+      values[i] = (char *) xmalloc (l + 1);\n+      memcpy (values[i], curval, l);\n+      values[i][l] = 0;\n+      curval = nextval + 1;\n+      nextval = strchr (curval, ':');\n+      if (nextval == NULL)\n+\tnextval = strchr (curval, '\\0');\n+    }\n+  *pvalues = values;\n+  return num;\n+}\n+\n+/* Auxiliary function that frees elements of PTR and PTR itself.\n+   N is number of elements to be freed.  If PTR is NULL, nothing is freed.\n+   If an element is NULL, subsequent elements are not freed.  */\n+static void\n+free_array_of_ptrs (void **ptr, unsigned n)\n+{\n+  unsigned i;\n+  if (!ptr)\n+    return;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (!ptr[i])\n+\tbreak;\n+      free (ptr[i]);\n+    }\n+  free (ptr);\n+  return;\n+}\n+\n+/* Check whether NAME can be accessed in MODE.  This is like access,\n+   except that it never considers directories to be executable.  */\n+static int\n+access_check (const char *name, int mode)\n+{\n+  if (mode == X_OK)\n+    {\n+      struct stat st;\n+\n+      if (stat (name, &st) < 0 || S_ISDIR (st.st_mode))\n+\treturn -1;\n+    }\n+\n+  return access (name, mode);\n+}\n+\n static void\n process (FILE *in, FILE *out)\n {\n@@ -853,6 +925,37 @@ main (int argc, char **argv)\n     driver_used = sprintf (driver, \"%s/\", gcc_path);\n   sprintf (driver + driver_used, \"%s\", GCC_INSTALL_NAME);\n \n+  bool found = false;\n+  if (gcc_path == NULL)\n+    found = true;\n+  else if (access_check (driver, X_OK) == 0)\n+    found = true;\n+  else\n+    {\n+      /* Don't use alloca pointer with XRESIZEVEC.  */\n+      driver = NULL;\n+      /* Look in all COMPILER_PATHs for GCC_INSTALL_NAME.  */\n+      char **paths = NULL;\n+      unsigned n_paths;\n+      n_paths = parse_env_var (getenv (\"COMPILER_PATH\"), &paths);\n+      for (unsigned i = 0; i < n_paths; i++)\n+\t{\n+\t  len = strlen (paths[i]) + 1 + strlen (GCC_INSTALL_NAME) + 1;\n+\t  driver = XRESIZEVEC (char, driver, len);\n+\t  sprintf (driver, \"%s/%s\", paths[i], GCC_INSTALL_NAME);\n+\t  if (access_check (driver, X_OK) == 0)\n+\t    {\n+\t      found = true;\n+\t      break;\n+\t    }\n+\t}\n+      free_array_of_ptrs ((void **) paths, n_paths);\n+    }\n+\n+  if (!found)\n+    fatal_error (input_location,\n+\t\t \"offload compiler %s not found\", GCC_INSTALL_NAME);\n+\n   /* We may be called with all the arguments stored in some file and\n      passed with @file.  Expand them into argv before processing.  */\n   expandargv (&argc, &argv);"}]}