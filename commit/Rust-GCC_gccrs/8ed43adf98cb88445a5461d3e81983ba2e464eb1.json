{"sha": "8ed43adf98cb88445a5461d3e81983ba2e464eb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkNDNhZGY5OGNiODg0NDVhNTQ2MWQzZTgxOTgzYmEyZTQ2NGViMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-27T21:50:10Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-27T21:50:10Z"}, "message": "h8300.md: Replace dead bit extraction patterns with ones that work.\n\n\t* config/h8300/h8300.md: Replace dead bit extraction patterns\n\twith ones that work.\n\nFrom-SVN: r49269", "tree": {"sha": "cee133eff9d0a3de9de564bac754981f9688ecb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee133eff9d0a3de9de564bac754981f9688ecb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed43adf98cb88445a5461d3e81983ba2e464eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed43adf98cb88445a5461d3e81983ba2e464eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed43adf98cb88445a5461d3e81983ba2e464eb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed43adf98cb88445a5461d3e81983ba2e464eb1/comments", "author": null, "committer": null, "parents": [{"sha": "917afb0c3fa15b32383bdfbc13a481012c42fcb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917afb0c3fa15b32383bdfbc13a481012c42fcb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917afb0c3fa15b32383bdfbc13a481012c42fcb4"}], "stats": {"total": 136, "additions": 32, "deletions": 104}, "files": [{"sha": "84e356bad6982f8d9081c3a21b64d09e41db6736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed43adf98cb88445a5461d3e81983ba2e464eb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed43adf98cb88445a5461d3e81983ba2e464eb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ed43adf98cb88445a5461d3e81983ba2e464eb1", "patch": "@@ -1,3 +1,8 @@\n+2002-01-27  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.md: Replace dead bit extraction patterns\n+\twith ones that work.\n+\n Sun Jan 27 13:23:40 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* emit-rtl.c (get_mem_attrs): Don't default alignment for non-BLKmode"}, {"sha": "bdb91834c4065d03afbb566fc7fa2ad7ea04b670", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 27, "deletions": 104, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed43adf98cb88445a5461d3e81983ba2e464eb1/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed43adf98cb88445a5461d3e81983ba2e464eb1/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=8ed43adf98cb88445a5461d3e81983ba2e464eb1", "patch": "@@ -2010,135 +2010,58 @@\n ;;\n ;; Normal loads with a 32bit destination.\n ;;\n-;; Yes, all three cases are needed.\n-;;\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(zero_extract:SI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))]\n-  \"\"\n-  \"* return output_simode_bld (0, 0, operands);\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (zero_extend:SI\n-\t\t   (lshiftrt:QI\n-\t\t     (match_operand:QI 1 \"bit_operand\" \"Ur\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"n\")))\n-\t\t(const_int 1)))]\n-  \"\"\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_H8300\n+   && INTVAL (operands[2]) < 16\"\n   \"* return output_simode_bld (0, 0, operands);\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (zero_extend:SI\n-\t\t   (lshiftrt:HI\n-\t\t      (match_operand:HI 1 \"bit_operand\" \"Ur\")\n-\t\t      (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-\t\t(const_int 1)))]\n-  \"\"\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && INTVAL (operands[2]) < 16\"\n   \"* return output_simode_bld (0, 0, operands);\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n+   (set_attr \"length\" \"6\")])\n \n ;;\n ;; Inverted loads with a 32bit destination.\n ;;\n-;; Yes, all five cases are needed.\n-;;\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (not:SI\n-\t\t  (zero_extend:SI\n-\t\t    (lshiftrt:HI (match_operand:HI 1 \"bit_operand\" \"Ur\")\n-\t\t\t\t (match_operand:HI 2 \"const_int_operand\" \"n\"))))\n-\t\t(const_int 1)))]\n-  \"\"\n-  \"* return output_simode_bld (1, 0, operands);\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (not:SI\n-\t\t  (zero_extend:SI\n-\t\t    (lshiftrt:QI (match_operand:QI 1 \"bit_operand\" \"Ur\")\n-\t\t\t\t (match_operand:QI 2 \"const_int_operand\" \"n\"))))\n-\t\t(const_int 1)))]\n-  \"\"\n-  \"* return output_simode_bld (1, 0, operands);\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (not:SI\n-\t\t  (subreg:SI\n-\t\t     (lshiftrt:HI\n-\t\t\t(match_operand:HI 1 \"bit_operand\" \"Ur\")\n-\t\t\t(match_operand:HI 2 \"const_int_operand\" \"n\")) 0))\n-\t\t(const_int 1)))]\n-  \"1\"\n-  \"* return output_simode_bld (1, 0, operands);\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(and:SI (not:SI\n-\t\t  (subreg:SI\n-\t\t     (lshiftrt:QI\n-\t\t\t(match_operand:QI 1 \"bit_operand\" \"Ur\")\n-\t\t\t(match_operand:QI 2 \"const_int_operand\" \"n\")) 0))\n-\t\t(const_int 1)))]\n-  \"1\"\n+\t(zero_extract:SI (xor:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:HI 3 \"const_int_operand\" \"n\"))\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_H8300\n+   && INTVAL (operands[2]) < 16\n+   && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n   \"* return output_simode_bld (1, 0, operands);\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq (symbol_ref \"TARGET_H8300H || TARGET_H8300S\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 10)\n-\t\t      (const_int 8)))])\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(zero_extract:SI (xor:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t\t\t (match_operand:HI 3 \"p_operand\" \"P\"))\n+\t(zero_extract:SI (xor:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand 3 \"const_int_operand\" \"n\"))\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))]\n-  \"(1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n-  \"sub.w\t%0,%0\\;bild\t%Z2,%Y1\\;bst\t#0,%X0\"\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && INTVAL (operands[2]) < 16\n+   && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n+  \"* return output_simode_bld (1, 0, operands);\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"6\")])\n \n (define_expand \"insv\"\n   [(set (zero_extract:HI (match_operand:HI 0 \"general_operand\" \"\")"}]}