{"sha": "96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhNGVmOWQ2YTQwYWYxZGY4MWIzYTJlYzE1NzRjMzFiZGJhMjIxMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-23T18:23:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-23T18:23:04Z"}, "message": "re PR c++/70344 (ICE on invalid code at -O1 and above on x86_64-linux-gnu in record_reference, at cgraphbuild.c:64)\n\n\tPR c++/70344\n\n\t* constexpr.c (cxx_eval_call_expression): Catch invalid recursion.\n\nFrom-SVN: r234434", "tree": {"sha": "84e28f8b34041b9790f900f67ee25377a1a2a6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e28f8b34041b9790f900f67ee25377a1a2a6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbdb6bafe2be0f4e12b85dcb92641bb55078bf72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdb6bafe2be0f4e12b85dcb92641bb55078bf72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdb6bafe2be0f4e12b85dcb92641bb55078bf72"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "01fc2bd7657499e404b0814a43c1f39107ead240", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "patch": "@@ -1,3 +1,8 @@\n+2016-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70344\n+\t* constexpr.c (cxx_eval_call_expression): Catch invalid recursion.\n+\n 2016-03-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/69884"}, {"sha": "d71e488d5e09c23d646c0721771ab35e4dc1cc5e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "patch": "@@ -1239,6 +1239,21 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n \n+  if (fun == current_function_decl)\n+    {\n+      /* A call to the current function, i.e.\n+\t constexpr int f (int i) {\n+\t   constexpr int j = f(i-1);\n+\t   return j;\n+\t }\n+\t This would be OK without the constexpr on the declaration of j.  */\n+      if (!ctx->quiet)\n+\terror_at (loc, \"%qD called in a constant expression before its \"\n+\t\t  \"definition is complete\", fun);\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n   constexpr_ctx new_ctx = *ctx;\n   if (DECL_CONSTRUCTOR_P (fun) && !ctx->object\n       && TREE_CODE (t) == AGGR_INIT_EXPR)"}, {"sha": "978b998afebc258d8f5a298df4b2d194db9795c8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-recursion2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a4ef9d6a40af1df81b3a2ec1574c31bdba2213/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion2.C?ref=96a4ef9d6a40af1df81b3a2ec1574c31bdba2213", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/70344\n+// { dg-do compile { target c++11 } }\n+\n+struct Z\n+{\n+  Z () = default;\n+  Z (Z const &) = default;\n+  constexpr Z (Z &&) {}\n+};\n+\n+constexpr int\n+fn (Z v)\n+{\n+  return fn (v);\n+}\n+\n+auto t = fn (Z ());"}]}