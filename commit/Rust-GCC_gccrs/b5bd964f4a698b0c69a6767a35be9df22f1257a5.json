{"sha": "b5bd964f4a698b0c69a6767a35be9df22f1257a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViZDk2NGY0YTY5OGIwYzY5YTY3NjdhMzViZTlkZjIyZjEyNTdhNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-12-09T17:21:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:21:06Z"}, "message": "sem_ch12.adb (Subtypes_Match): Handle properly Ada05 arrays of anonymous access types.\n\n2005-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Subtypes_Match): Handle properly Ada05 arrays of\n\tanonymous access types.\n\n\t* sem_eval.adb (Subtypes_Statically_Match): Implement new rules for\n\tmatching of anonymous access types and anonymous access to subprogram\n\ttypes. 'R'M 4.9.1 (2/2).\n\nFrom-SVN: r108301", "tree": {"sha": "0f3db1ac48ad611dcc8fdb4f16c60724161fc62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f3db1ac48ad611dcc8fdb4f16c60724161fc62a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5bd964f4a698b0c69a6767a35be9df22f1257a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bd964f4a698b0c69a6767a35be9df22f1257a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bd964f4a698b0c69a6767a35be9df22f1257a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bd964f4a698b0c69a6767a35be9df22f1257a5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f5b7ff963eec025fd52acc80a543d85b5af5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7f5b7ff963eec025fd52acc80a543d85b5af5b"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "5e8e6dc1d9d3a4e16cfddcabe1960d9c98d1bdce", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bd964f4a698b0c69a6767a35be9df22f1257a5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bd964f4a698b0c69a6767a35be9df22f1257a5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b5bd964f4a698b0c69a6767a35be9df22f1257a5", "patch": "@@ -8090,16 +8090,22 @@ package body Sem_Ch12 is\n \n       begin\n          return (Base_Type (T) = Base_Type (Act_T)\n---  why is the and then commented out here???\n---                  and then Is_Constrained (T) = Is_Constrained (Act_T)\n                   and then Subtypes_Statically_Match (T, Act_T))\n \n            or else (Is_Class_Wide_Type (Gen_T)\n                      and then Is_Class_Wide_Type (Act_T)\n                      and then\n-                       Subtypes_Match (\n-                         Get_Instance_Of (Root_Type (Gen_T)),\n-                         Root_Type (Act_T)));\n+                       Subtypes_Match\n+                        (Get_Instance_Of (Root_Type (Gen_T)),\n+                         Root_Type (Act_T)))\n+\n+           or else\n+             ((Ekind (Gen_T) = E_Anonymous_Access_Subprogram_Type\n+                 or else Ekind (Gen_T) = E_Anonymous_Access_Type)\n+               and then Ekind (Act_T) = Ekind (Gen_T)\n+               and then\n+                 Subtypes_Statically_Match\n+                   (Designated_Type (Gen_T), Designated_Type (Act_T)));\n       end Subtypes_Match;\n \n       -----------------------------------------"}, {"sha": "3e354ec1b4d2e5757bd31f290361c74f8ac0a880", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bd964f4a698b0c69a6767a35be9df22f1257a5/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bd964f4a698b0c69a6767a35be9df22f1257a5/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=b5bd964f4a698b0c69a6767a35be9df22f1257a5", "patch": "@@ -38,6 +38,7 @@ with Nlists;   use Nlists;\n with Opt;      use Opt;\n with Sem;      use Sem;\n with Sem_Cat;  use Sem_Cat;\n+with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -4056,9 +4057,21 @@ package body Sem_Eval is\n          end;\n \n       elsif Is_Access_Type (T1) then\n-         return Subtypes_Statically_Match\n-                  (Designated_Type (T1),\n-                   Designated_Type (T2));\n+         if Can_Never_Be_Null (T1) /= Can_Never_Be_Null (T2) then\n+            return False;\n+\n+         elsif Ekind (T1) = E_Access_Subprogram_Type then\n+            return\n+              Subtype_Conformant\n+                (Designated_Type (T1),\n+                 Designated_Type (T1));\n+         else\n+            return\n+              Subtypes_Statically_Match\n+                (Designated_Type (T1),\n+                 Designated_Type (T2))\n+              and then Is_Access_Constant (T1) = Is_Access_Constant (T2);\n+         end if;\n \n       --  All other types definitely match\n "}]}