{"sha": "e9e008859c047465491bc3bb336503dba10caf18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllMDA4ODU5YzA0NzQ2NTQ5MWJjM2JiMzM2NTAzZGJhMTBjYWYxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-30T20:17:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-30T20:17:39Z"}, "message": "var-tracking.c (use_narrower_mode_test, [...]): New functions.\n\n\t* var-tracking.c (use_narrower_mode_test, use_narrower_mode): New\n\tfunctions.\n\t(adjust_mems): Replace narrowing SUBREG of expression containing\n\tjust PLUS, MINUS, MULT and ASHIFT of registers and constants\n\twith operations in the narrower mode.\n\nFrom-SVN: r157835", "tree": {"sha": "6e2102623b5a93d3d04a248f8f1c27ad8c80de7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e2102623b5a93d3d04a248f8f1c27ad8c80de7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e008859c047465491bc3bb336503dba10caf18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e008859c047465491bc3bb336503dba10caf18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e008859c047465491bc3bb336503dba10caf18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e008859c047465491bc3bb336503dba10caf18/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03a5f060b9bdcf4520645cb4e6c15297e3eea060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a5f060b9bdcf4520645cb4e6c15297e3eea060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a5f060b9bdcf4520645cb4e6c15297e3eea060"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "681333ae3aaaa54428cf2fdb65626d2dce4b63b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e008859c047465491bc3bb336503dba10caf18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e008859c047465491bc3bb336503dba10caf18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9e008859c047465491bc3bb336503dba10caf18", "patch": "@@ -1,5 +1,11 @@\n 2010-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* var-tracking.c (use_narrower_mode_test, use_narrower_mode): New\n+\tfunctions.\n+\t(adjust_mems): Replace narrowing SUBREG of expression containing\n+\tjust PLUS, MINUS, MULT and ASHIFT of registers and constants\n+\twith operations in the narrower mode.\n+\n \tPR debug/43593\n \t* var-tracking.c (dataflow_set_clear_at_call): Invalidate\n \tjust regs_invalidated_by_call instead all call_used_reg_set"}, {"sha": "261d47a7cffbd7003e1a3d2deb0dae233e902d2f", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e008859c047465491bc3bb336503dba10caf18/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e008859c047465491bc3bb336503dba10caf18/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=e9e008859c047465491bc3bb336503dba10caf18", "patch": "@@ -729,6 +729,65 @@ struct adjust_mem_data\n   rtx side_effects;\n };\n \n+/* Helper for adjust_mems.  Return 1 if *loc is unsuitable for\n+   transformation of wider mode arithmetics to narrower mode,\n+   -1 if it is suitable and subexpressions shouldn't be\n+   traversed and 0 if it is suitable and subexpressions should\n+   be traversed.  Called through for_each_rtx.  */\n+\n+static int\n+use_narrower_mode_test (rtx *loc, void *data)\n+{\n+  rtx subreg = (rtx) data;\n+\n+  if (CONSTANT_P (*loc))\n+    return -1;\n+  switch (GET_CODE (*loc))\n+    {\n+    case REG:\n+      if (cselib_lookup (*loc, GET_MODE (SUBREG_REG (subreg)), 0))\n+\treturn 1;\n+      return -1;\n+    case PLUS:\n+    case MINUS:\n+    case MULT:\n+      return 0;\n+    case ASHIFT:\n+      if (for_each_rtx (&XEXP (*loc, 0), use_narrower_mode_test, data))\n+\treturn 1;\n+      else\n+\treturn -1;\n+    default:\n+      return 1;\n+    }\n+}\n+\n+/* Transform X into narrower mode MODE from wider mode WMODE.  */\n+\n+static rtx\n+use_narrower_mode (rtx x, enum machine_mode mode, enum machine_mode wmode)\n+{\n+  rtx op0, op1;\n+  if (CONSTANT_P (x))\n+    return lowpart_subreg (mode, x, wmode);\n+  switch (GET_CODE (x))\n+    {\n+    case REG:\n+      return lowpart_subreg (mode, x, wmode);\n+    case PLUS:\n+    case MINUS:\n+    case MULT:\n+      op0 = use_narrower_mode (XEXP (x, 0), mode, wmode);\n+      op1 = use_narrower_mode (XEXP (x, 1), mode, wmode);\n+      return simplify_gen_binary (GET_CODE (x), mode, op0, op1);\n+    case ASHIFT:\n+      op0 = use_narrower_mode (XEXP (x, 0), mode, wmode);\n+      return simplify_gen_binary (ASHIFT, mode, op0, XEXP (x, 1));\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Helper function for adjusting used MEMs.  */\n \n static rtx\n@@ -822,18 +881,36 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       amd->store = store_save;\n       mem = simplify_replace_fn_rtx (addr, old_rtx, adjust_mems, data);\n       if (mem == SUBREG_REG (loc))\n-\treturn loc;\n+\t{\n+\t  tem = loc;\n+\t  goto finish_subreg;\n+\t}\n       tem = simplify_gen_subreg (GET_MODE (loc), mem,\n \t\t\t\t GET_MODE (SUBREG_REG (loc)),\n \t\t\t\t SUBREG_BYTE (loc));\n       if (tem)\n-\treturn tem;\n+\tgoto finish_subreg;\n       tem = simplify_gen_subreg (GET_MODE (loc), addr,\n \t\t\t\t GET_MODE (SUBREG_REG (loc)),\n \t\t\t\t SUBREG_BYTE (loc));\n-      if (tem)\n-\treturn tem;\n-      return gen_rtx_raw_SUBREG (GET_MODE (loc), addr, SUBREG_BYTE (loc));\n+      if (tem == NULL_RTX)\n+\ttem = gen_rtx_raw_SUBREG (GET_MODE (loc), addr, SUBREG_BYTE (loc));\n+    finish_subreg:\n+      if (MAY_HAVE_DEBUG_INSNS\n+\t  && GET_CODE (tem) == SUBREG\n+\t  && (GET_CODE (SUBREG_REG (tem)) == PLUS\n+\t      || GET_CODE (SUBREG_REG (tem)) == MINUS\n+\t      || GET_CODE (SUBREG_REG (tem)) == MULT\n+\t      || GET_CODE (SUBREG_REG (tem)) == ASHIFT)\n+\t  && GET_MODE_CLASS (GET_MODE (tem)) == MODE_INT\n+\t  && GET_MODE_CLASS (GET_MODE (SUBREG_REG (tem))) == MODE_INT\n+\t  && GET_MODE_SIZE (GET_MODE (tem))\n+\t     < GET_MODE_SIZE (GET_MODE (SUBREG_REG (tem)))\n+\t  && subreg_lowpart_p (tem)\n+\t  && !for_each_rtx (&SUBREG_REG (tem), use_narrower_mode_test, tem))\n+\treturn use_narrower_mode (SUBREG_REG (tem), GET_MODE (tem),\n+\t\t\t\t  GET_MODE (SUBREG_REG (tem)));\n+      return tem;\n     default:\n       break;\n     }"}]}