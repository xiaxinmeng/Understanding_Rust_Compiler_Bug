{"sha": "33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "node_id": "C_kwDOANBUbNoAKDMzY2E1YzkyZGZhN2UyZjU5MWE4MzhiYjc2OGQ5ZDZlZWE1Njc5M2I", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-01T09:01:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-03T07:26:58Z"}, "message": "debug/108772 - ICE with late debug generated with -flto\n\nWhen combining -g1 with -flto we run into the DIE location annotation\nmachinery for globals calling dwarf2out_late_global_decl but not\nhaving any early generated DIE for function scope statics.  In\nthis process we'd generate a limbo DIE since also the function scope\ndoesn't have any early generated DIE.  The limbo handling then tries\nto force a DIE for the context chain which ultimatively fails and\nICEs at the std namespace decl because at -g1 we don't represent that.\n\nThe following avoids this situation by making sure to never generate\nany DIEs from dwarf2out_late_global_decl in the in_lto_p path\nfor function scope globals but rely on DIE generation for\nthe function to output a DIE for the local static (which doesn't\nhappen for -g1).\n\nI explored a lot of other options to fix this but in the end this\nseems to be the most spot-on fix with the least risk of unwanted\neffects.\n\n\tPR debug/108772\n\t* dwarf2out.cc (dwarf2out_late_global_decl): Do not\n\tgenerate a DIE for a function scope static.\n\n\t* g++.dg/lto/pr108772_0.C: New testcase.", "tree": {"sha": "2bba54a8e803c6d866524e0db0d9a3904c610ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bba54a8e803c6d866524e0db0d9a3904c610ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca5c92dfa7e2f591a838bb768d9d6eea56793b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4122f1159ace52c114c011013adce25172d77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4122f1159ace52c114c011013adce25172d77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4122f1159ace52c114c011013adce25172d77b"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "1711ad2c2da319e1917bfb256c35802f7a10e894", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ca5c92dfa7e2f591a838bb768d9d6eea56793b/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ca5c92dfa7e2f591a838bb768d9d6eea56793b/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "patch": "@@ -27282,7 +27282,10 @@ dwarf2out_late_global_decl (tree decl)\n       /* We may have to generate full debug late for LTO in case debug\n          was not enabled at compile-time or the target doesn't support\n \t the LTO early debug scheme.  */\n-      if (! die && in_lto_p)\n+      if (! die && in_lto_p\n+\t  /* Function scope variables are emitted when emitting the\n+\t     DIE for the function.  */\n+\t  && ! local_function_static (decl))\n \tdwarf2out_decl (decl);\n       else if (die)\n \t{"}, {"sha": "81f15a90a3e62336846a1f6c6258a2461602facc", "filename": "gcc/testsuite/g++.dg/lto/pr108772_0.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ca5c92dfa7e2f591a838bb768d9d6eea56793b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr108772_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ca5c92dfa7e2f591a838bb768d9d6eea56793b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr108772_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr108772_0.C?ref=33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "patch": "@@ -0,0 +1,46 @@\n+// { dg-lto-do link }\n+// { dg-require-effective-target shared }\n+// { dg-require-effective-target fpic }\n+// { dg-lto-options { \"-flto -fPIC -shared -O1 -fimplicit-constexpr -g1\" } }\n+// { dg-extra-ld-options \"-shared\" }\n+\n+namespace std {\n+struct _Sp_counted_base {\n+  virtual void *_M_get_deleter(const int &);\n+};\n+bool _S_eq(int);\n+struct _Sp_make_shared_tag {\n+  static const int &_S_ti() {\n+    static constexpr char __tag{};\n+    return reinterpret_cast<const int &>(__tag);\n+  }\n+};\n+struct _Impl {\n+  _Impl(int);\n+};\n+int _Sp_counted_ptr_inplace___a;\n+struct _Sp_counted_ptr_inplace : _Sp_counted_base {\n+  _Sp_counted_ptr_inplace() : _M_impl(_Sp_counted_ptr_inplace___a) {}\n+  void *_M_get_deleter(const int &__ti) {\n+    auto __ptr(_M_ptr());\n+    &__ti == &_Sp_make_shared_tag::_S_ti() || _S_eq(__ti);\n+    return __ptr;\n+  }\n+  int *_M_ptr();\n+  _Impl _M_impl;\n+};\n+struct __shared_count {\n+  __shared_count(int, int) { _Sp_counted_ptr_inplace(); }\n+};\n+int _M_ptr;\n+struct __shared_ptr {\n+  template <typename _Alloc>\n+  __shared_ptr(_Alloc __tag) : _M_refcount(_M_ptr, __tag) {}\n+  __shared_count _M_refcount;\n+};\n+int shared_ptr___tag;\n+struct shared_ptr : __shared_ptr {\n+  shared_ptr() : __shared_ptr(shared_ptr___tag) {}\n+};\n+void ArgEq() { shared_ptr(); }\n+} // namespace std"}]}