{"sha": "18724e30aca828678b4f0a788e26b90dc8c44c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3MjRlMzBhY2E4Mjg2NzhiNGYwYTc4OGUyNmI5MGRjOGM0NGMzNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2008-04-30T16:10:21Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2008-04-30T16:10:21Z"}, "message": "t-ppccomm: Add build rules for new files.\n\nlibgcc/\n\t* config/rs6000/t-ppccomm: Add build rules for new files.\n\t(LIB2ADD_ST): New variable.\n\ngcc/\n        * config/rs6000/crtresgpr.asm, config/rs6000/crtresxgpr.asm,\n        config/rs6000/crtsavgpr.asm, config/rs6000/crtresfpr.asm,\n        config/rs6000/crtresxfpr.asm, config/rs6000/crtsavfpr.asm: Break out\n        from...\n        * config/rs6000/crtsavres.asm: ...here.  Remove unneeded file.\n        * config/rs6000/e500crtres32gpr.asm,\n\tconfig/rs6000/e500crtres64gpr.asm\n        config/rs6000/e500crtres64gprctr.asm,\n\tconfig/rs6000/e500crtrest32gpr.asm\n        config/rs6000/e500crtrest64gpr.asm,\n\tconfig/rs6000/e500crtresx32gpr.asm\n        config/rs6000/e500crtresx64gpr.asm,\n\tconfig/rs6000/e500crtsav32gpr.asm\n        config/rs6000/e500crtsav64gpr.asm,\n\tconfig/rs6000/e500crtsav64gprctr.asm\n        config/rs6000/e500crtsavg32gpr.asm,\n\tconfig/rs6000/e500crtsavg64gpr.asm\n        config/rs6000/e500crtsavg64gprctr.asm: New files.\n        * config/rs6000/t-ppccomm: Add build rules for new files.\n        (LIB2FUNCS_STATIC_EXTRA): Add new files.\n        * config/rs6000/t-netbsd: Add build rules for new files.\n        (LIB2FUNCS_STATIC_EXTRA): New variable.\n        * config/rs6000/sysv4.h (ENDFILE_SPEC): Don't include crtsavres.o\n        (CRTSAVRES_DEFAULT_SPEC): Likewise.\n        * config/rs6000/netbsd.h (ENDFILE_SPEC): Likewise.\n\nFrom-SVN: r134828", "tree": {"sha": "4b038ae8b890e09e051042092467b7621c5f7e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b038ae8b890e09e051042092467b7621c5f7e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18724e30aca828678b4f0a788e26b90dc8c44c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18724e30aca828678b4f0a788e26b90dc8c44c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18724e30aca828678b4f0a788e26b90dc8c44c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18724e30aca828678b4f0a788e26b90dc8c44c36/comments", "author": null, "committer": null, "parents": [{"sha": "1b667c8276cf37815a08149a801473d3c084bc0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b667c8276cf37815a08149a801473d3c084bc0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b667c8276cf37815a08149a801473d3c084bc0e"}], "stats": {"total": 2057, "additions": 2025, "deletions": 32}, "files": [{"sha": "e02823bee78a7a4f73bfebb4164e2d08b19c55ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -1,3 +1,31 @@\n+2008-04-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+        * config/rs6000/crtresgpr.asm, config/rs6000/crtresxgpr.asm,\n+        config/rs6000/crtsavgpr.asm, config/rs6000/crtresfpr.asm,\n+        config/rs6000/crtresxfpr.asm, config/rs6000/crtsavfpr.asm: Break out\n+        from...\n+        * config/rs6000/crtsavres.asm: ...here.  Remove unneeded file.\n+        * config/rs6000/e500crtres32gpr.asm,\n+\tconfig/rs6000/e500crtres64gpr.asm\n+        config/rs6000/e500crtres64gprctr.asm,\n+\tconfig/rs6000/e500crtrest32gpr.asm\n+        config/rs6000/e500crtrest64gpr.asm,\n+\tconfig/rs6000/e500crtresx32gpr.asm\n+        config/rs6000/e500crtresx64gpr.asm,\n+\tconfig/rs6000/e500crtsav32gpr.asm\n+        config/rs6000/e500crtsav64gpr.asm,\n+\tconfig/rs6000/e500crtsav64gprctr.asm\n+        config/rs6000/e500crtsavg32gpr.asm,\n+\tconfig/rs6000/e500crtsavg64gpr.asm\n+        config/rs6000/e500crtsavg64gprctr.asm: New files.\n+        * config/rs6000/t-ppccomm: Add build rules for new files.\n+        (LIB2FUNCS_STATIC_EXTRA): Add new files.\n+        * config/rs6000/t-netbsd: Add build rules for new files.\n+        (LIB2FUNCS_STATIC_EXTRA): New variable.\n+        * config/rs6000/sysv4.h (ENDFILE_SPEC): Don't include crtsavres.o\n+        (CRTSAVRES_DEFAULT_SPEC): Likewise.\n+        * config/rs6000/netbsd.h (ENDFILE_SPEC): Likewise.\n+\n 2008-04-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_builtin_type): Add"}, {"sha": "aaa4b9680497f1e8909945219d220752312e13f6", "filename": "gcc/config/rs6000/crtresfpr.asm", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtresfpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for restoring floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+\n+FUNC_START(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n+FUNC_START(_restfpr_15)\tlfd\t15,-136(11)\n+FUNC_START(_restfpr_16)\tlfd\t16,-128(11)\n+FUNC_START(_restfpr_17)\tlfd\t17,-120(11)\n+FUNC_START(_restfpr_18)\tlfd\t18,-112(11)\n+FUNC_START(_restfpr_19)\tlfd\t19,-104(11)\n+FUNC_START(_restfpr_20)\tlfd\t20,-96(11)\n+FUNC_START(_restfpr_21)\tlfd\t21,-88(11)\n+FUNC_START(_restfpr_22)\tlfd\t22,-80(11)\n+FUNC_START(_restfpr_23)\tlfd\t23,-72(11)\n+FUNC_START(_restfpr_24)\tlfd\t24,-64(11)\n+FUNC_START(_restfpr_25)\tlfd\t25,-56(11)\n+FUNC_START(_restfpr_26)\tlfd\t26,-48(11)\n+FUNC_START(_restfpr_27)\tlfd\t27,-40(11)\n+FUNC_START(_restfpr_28)\tlfd\t28,-32(11)\n+FUNC_START(_restfpr_29)\tlfd\t29,-24(11)\n+FUNC_START(_restfpr_30)\tlfd\t30,-16(11)\n+FUNC_START(_restfpr_31)\tlfd\t31,-8(11)\n+\t\t\tblr\n+FUNC_END(_restfpr_31)\n+FUNC_END(_restfpr_30)\n+FUNC_END(_restfpr_29)\n+FUNC_END(_restfpr_28)\n+FUNC_END(_restfpr_27)\n+FUNC_END(_restfpr_26)\n+FUNC_END(_restfpr_25)\n+FUNC_END(_restfpr_24)\n+FUNC_END(_restfpr_23)\n+FUNC_END(_restfpr_22)\n+FUNC_END(_restfpr_21)\n+FUNC_END(_restfpr_20)\n+FUNC_END(_restfpr_19)\n+FUNC_END(_restfpr_18)\n+FUNC_END(_restfpr_17)\n+FUNC_END(_restfpr_16)\n+FUNC_END(_restfpr_15)\n+FUNC_END(_restfpr_14)\n+\n+#endif"}, {"sha": "928341d7624bca547f8c5d01da775b27f9bf683c", "filename": "gcc/config/rs6000/crtresgpr.asm", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtresgpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for restoring integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer restore area.  */\n+\n+FUNC_START(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n+FUNC_START(_restgpr_15)\tlwz\t15,-68(11)\n+FUNC_START(_restgpr_16)\tlwz\t16,-64(11)\n+FUNC_START(_restgpr_17)\tlwz\t17,-60(11)\n+FUNC_START(_restgpr_18)\tlwz\t18,-56(11)\n+FUNC_START(_restgpr_19)\tlwz\t19,-52(11)\n+FUNC_START(_restgpr_20)\tlwz\t20,-48(11)\n+FUNC_START(_restgpr_21)\tlwz\t21,-44(11)\n+FUNC_START(_restgpr_22)\tlwz\t22,-40(11)\n+FUNC_START(_restgpr_23)\tlwz\t23,-36(11)\n+FUNC_START(_restgpr_24)\tlwz\t24,-32(11)\n+FUNC_START(_restgpr_25)\tlwz\t25,-28(11)\n+FUNC_START(_restgpr_26)\tlwz\t26,-24(11)\n+FUNC_START(_restgpr_27)\tlwz\t27,-20(11)\n+FUNC_START(_restgpr_28)\tlwz\t28,-16(11)\n+FUNC_START(_restgpr_29)\tlwz\t29,-12(11)\n+FUNC_START(_restgpr_30)\tlwz\t30,-8(11)\n+FUNC_START(_restgpr_31)\tlwz\t31,-4(11)\n+\t\t\tblr\n+FUNC_END(_restgpr_31)\n+FUNC_END(_restgpr_30)\n+FUNC_END(_restgpr_29)\n+FUNC_END(_restgpr_28)\n+FUNC_END(_restgpr_27)\n+FUNC_END(_restgpr_26)\n+FUNC_END(_restgpr_25)\n+FUNC_END(_restgpr_24)\n+FUNC_END(_restgpr_23)\n+FUNC_END(_restgpr_22)\n+FUNC_END(_restgpr_21)\n+FUNC_END(_restgpr_20)\n+FUNC_END(_restgpr_19)\n+FUNC_END(_restgpr_18)\n+FUNC_END(_restgpr_17)\n+FUNC_END(_restgpr_16)\n+FUNC_END(_restgpr_15)\n+FUNC_END(_restgpr_14)\n+\n+#endif"}, {"sha": "2a734866f0742f2b8a1e69ca57a57411b895a44a", "filename": "gcc/config/rs6000/crtresxfpr.asm", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtresxfpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for restoring floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+/* In addition to restoring the fp registers, it will return to the caller's */\n+/* caller */\n+\n+FUNC_START(_restfpr_14_x)\tlfd\t14,-144(11)\t/* restore fp registers */\n+FUNC_START(_restfpr_15_x)\tlfd\t15,-136(11)\n+FUNC_START(_restfpr_16_x)\tlfd\t16,-128(11)\n+FUNC_START(_restfpr_17_x)\tlfd\t17,-120(11)\n+FUNC_START(_restfpr_18_x)\tlfd\t18,-112(11)\n+FUNC_START(_restfpr_19_x)\tlfd\t19,-104(11)\n+FUNC_START(_restfpr_20_x)\tlfd\t20,-96(11)\n+FUNC_START(_restfpr_21_x)\tlfd\t21,-88(11)\n+FUNC_START(_restfpr_22_x)\tlfd\t22,-80(11)\n+FUNC_START(_restfpr_23_x)\tlfd\t23,-72(11)\n+FUNC_START(_restfpr_24_x)\tlfd\t24,-64(11)\n+FUNC_START(_restfpr_25_x)\tlfd\t25,-56(11)\n+FUNC_START(_restfpr_26_x)\tlfd\t26,-48(11)\n+FUNC_START(_restfpr_27_x)\tlfd\t27,-40(11)\n+FUNC_START(_restfpr_28_x)\tlfd\t28,-32(11)\n+FUNC_START(_restfpr_29_x)\tlfd\t29,-24(11)\n+FUNC_START(_restfpr_30_x)\tlfd\t30,-16(11)\n+FUNC_START(_restfpr_31_x)\tlwz\t0,4(11)\n+\t\t\t\tlfd\t31,-8(11)\n+\t\t\t\tmtlr\t0\n+\t\t\t\tmr\t1,11\n+\t\t\t\tblr\n+FUNC_END(_restfpr_31_x)\n+FUNC_END(_restfpr_30_x)\n+FUNC_END(_restfpr_29_x)\n+FUNC_END(_restfpr_28_x)\n+FUNC_END(_restfpr_27_x)\n+FUNC_END(_restfpr_26_x)\n+FUNC_END(_restfpr_25_x)\n+FUNC_END(_restfpr_24_x)\n+FUNC_END(_restfpr_23_x)\n+FUNC_END(_restfpr_22_x)\n+FUNC_END(_restfpr_21_x)\n+FUNC_END(_restfpr_20_x)\n+FUNC_END(_restfpr_19_x)\n+FUNC_END(_restfpr_18_x)\n+FUNC_END(_restfpr_17_x)\n+FUNC_END(_restfpr_16_x)\n+FUNC_END(_restfpr_15_x)\n+FUNC_END(_restfpr_14_x)\n+\n+#endif"}, {"sha": "1bab865c452dbf7032da43c10845f0077508f9b5", "filename": "gcc/config/rs6000/crtresxgpr.asm", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtresxgpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for restoring integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer restore area.  */\n+\n+FUNC_START(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n+FUNC_START(_restgpr_15_x)\tlwz\t15,-68(11)\n+FUNC_START(_restgpr_16_x)\tlwz\t16,-64(11)\n+FUNC_START(_restgpr_17_x)\tlwz\t17,-60(11)\n+FUNC_START(_restgpr_18_x)\tlwz\t18,-56(11)\n+FUNC_START(_restgpr_19_x)\tlwz\t19,-52(11)\n+FUNC_START(_restgpr_20_x)\tlwz\t20,-48(11)\n+FUNC_START(_restgpr_21_x)\tlwz\t21,-44(11)\n+FUNC_START(_restgpr_22_x)\tlwz\t22,-40(11)\n+FUNC_START(_restgpr_23_x)\tlwz\t23,-36(11)\n+FUNC_START(_restgpr_24_x)\tlwz\t24,-32(11)\n+FUNC_START(_restgpr_25_x)\tlwz\t25,-28(11)\n+FUNC_START(_restgpr_26_x)\tlwz\t26,-24(11)\n+FUNC_START(_restgpr_27_x)\tlwz\t27,-20(11)\n+FUNC_START(_restgpr_28_x)\tlwz\t28,-16(11)\n+FUNC_START(_restgpr_29_x)\tlwz\t29,-12(11)\n+FUNC_START(_restgpr_30_x)\tlwz\t30,-8(11)\n+FUNC_START(_restgpr_31_x)\tlwz\t0,4(11)\n+\t\t\t\tlwz\t31,-4(11)\n+\t\t\t\tmtlr\t0\n+\t\t\t\tmr\t1,11\n+\t\t\t\tblr\n+FUNC_END(_restgpr_31_x)\n+FUNC_END(_restgpr_30_x)\n+FUNC_END(_restgpr_29_x)\n+FUNC_END(_restgpr_28_x)\n+FUNC_END(_restgpr_27_x)\n+FUNC_END(_restgpr_26_x)\n+FUNC_END(_restgpr_25_x)\n+FUNC_END(_restgpr_24_x)\n+FUNC_END(_restgpr_23_x)\n+FUNC_END(_restgpr_22_x)\n+FUNC_END(_restgpr_21_x)\n+FUNC_END(_restgpr_20_x)\n+FUNC_END(_restgpr_19_x)\n+FUNC_END(_restgpr_18_x)\n+FUNC_END(_restgpr_17_x)\n+FUNC_END(_restgpr_16_x)\n+FUNC_END(_restgpr_15_x)\n+FUNC_END(_restgpr_14_x)\n+\n+#endif"}, {"sha": "f3d708f62008f8bc0c171655563eefddd7a0337c", "filename": "gcc/config/rs6000/crtsavfpr.asm", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtsavfpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for saving floating point registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the floating point save area.  */\n+\n+FUNC_START(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n+FUNC_START(_savefpr_15)\tstfd\t15,-136(11)\n+FUNC_START(_savefpr_16)\tstfd\t16,-128(11)\n+FUNC_START(_savefpr_17)\tstfd\t17,-120(11)\n+FUNC_START(_savefpr_18)\tstfd\t18,-112(11)\n+FUNC_START(_savefpr_19)\tstfd\t19,-104(11)\n+FUNC_START(_savefpr_20)\tstfd\t20,-96(11)\n+FUNC_START(_savefpr_21)\tstfd\t21,-88(11)\n+FUNC_START(_savefpr_22)\tstfd\t22,-80(11)\n+FUNC_START(_savefpr_23)\tstfd\t23,-72(11)\n+FUNC_START(_savefpr_24)\tstfd\t24,-64(11)\n+FUNC_START(_savefpr_25)\tstfd\t25,-56(11)\n+FUNC_START(_savefpr_26)\tstfd\t26,-48(11)\n+FUNC_START(_savefpr_27)\tstfd\t27,-40(11)\n+FUNC_START(_savefpr_28)\tstfd\t28,-32(11)\n+FUNC_START(_savefpr_29)\tstfd\t29,-24(11)\n+FUNC_START(_savefpr_30)\tstfd\t30,-16(11)\n+FUNC_START(_savefpr_31)\tstfd\t31,-8(11)\n+\t\t\tblr\n+FUNC_END(_savefpr_31)\n+FUNC_END(_savefpr_30)\n+FUNC_END(_savefpr_29)\n+FUNC_END(_savefpr_28)\n+FUNC_END(_savefpr_27)\n+FUNC_END(_savefpr_26)\n+FUNC_END(_savefpr_25)\n+FUNC_END(_savefpr_24)\n+FUNC_END(_savefpr_23)\n+FUNC_END(_savefpr_22)\n+FUNC_END(_savefpr_21)\n+FUNC_END(_savefpr_20)\n+FUNC_END(_savefpr_19)\n+FUNC_END(_savefpr_18)\n+FUNC_END(_savefpr_17)\n+FUNC_END(_savefpr_16)\n+FUNC_END(_savefpr_15)\n+FUNC_END(_savefpr_14)\n+\n+#endif"}, {"sha": "0e244316fa6ca6714a87d47b6a3729bc27824d92", "filename": "gcc/config/rs6000/crtsavgpr.asm", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Special support for eabi and SVR4\n+ *\n+ *   Copyright (C) 1995, 1996, 1998, 2000, 2001, 2008\n+ *   Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ *   64-bit support written by David Edelsohn\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Do any initializations needed for the eabi environment */\n+\n+\t.file\t\"crtsavgpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+/* On PowerPC64 Linux, these functions are provided by the linker.  */\n+#ifndef __powerpc64__\n+\n+/* Routines for saving integer registers, called by the compiler.  */\n+/* Called with r11 pointing to the stack header word of the caller of the */\n+/* function, just beyond the end of the integer save area.  */\n+\n+FUNC_START(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n+FUNC_START(_savegpr_15)\tstw\t15,-68(11)\n+FUNC_START(_savegpr_16)\tstw\t16,-64(11)\n+FUNC_START(_savegpr_17)\tstw\t17,-60(11)\n+FUNC_START(_savegpr_18)\tstw\t18,-56(11)\n+FUNC_START(_savegpr_19)\tstw\t19,-52(11)\n+FUNC_START(_savegpr_20)\tstw\t20,-48(11)\n+FUNC_START(_savegpr_21)\tstw\t21,-44(11)\n+FUNC_START(_savegpr_22)\tstw\t22,-40(11)\n+FUNC_START(_savegpr_23)\tstw\t23,-36(11)\n+FUNC_START(_savegpr_24)\tstw\t24,-32(11)\n+FUNC_START(_savegpr_25)\tstw\t25,-28(11)\n+FUNC_START(_savegpr_26)\tstw\t26,-24(11)\n+FUNC_START(_savegpr_27)\tstw\t27,-20(11)\n+FUNC_START(_savegpr_28)\tstw\t28,-16(11)\n+FUNC_START(_savegpr_29)\tstw\t29,-12(11)\n+FUNC_START(_savegpr_30)\tstw\t30,-8(11)\n+FUNC_START(_savegpr_31)\tstw\t31,-4(11)\n+\t\t\tblr\n+FUNC_END(_savegpr_31)\n+FUNC_END(_savegpr_30)\n+FUNC_END(_savegpr_29)\n+FUNC_END(_savegpr_28)\n+FUNC_END(_savegpr_27)\n+FUNC_END(_savegpr_26)\n+FUNC_END(_savegpr_25)\n+FUNC_END(_savegpr_24)\n+FUNC_END(_savegpr_23)\n+FUNC_END(_savegpr_22)\n+FUNC_END(_savegpr_21)\n+FUNC_END(_savegpr_20)\n+FUNC_END(_savegpr_19)\n+FUNC_END(_savegpr_18)\n+FUNC_END(_savegpr_17)\n+FUNC_END(_savegpr_16)\n+FUNC_END(_savegpr_15)\n+FUNC_END(_savegpr_14)\n+\n+#endif"}, {"sha": "bd5f825447faeb2f13fd0143021951097815b8dd", "filename": "gcc/config/rs6000/e500crtres32gpr.asm", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres32gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres32gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtres32gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtres32gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for restoring 32-bit integer registers, called by the compiler.  */\n+/* \"Bare\" versions that simply return to their caller.  */\n+\n+FUNC_START(_rest32gpr_14)\tlwz 14,-72(11)\n+FUNC_START(_rest32gpr_15)\tlwz 15,-68(11)\n+FUNC_START(_rest32gpr_16)\tlwz 16,-64(11)\n+FUNC_START(_rest32gpr_17)\tlwz 17,-60(11)\n+FUNC_START(_rest32gpr_18)\tlwz 18,-56(11)\n+FUNC_START(_rest32gpr_19)\tlwz 19,-52(11)\n+FUNC_START(_rest32gpr_20)\tlwz 20,-48(11)\n+FUNC_START(_rest32gpr_21)\tlwz 21,-44(11)\n+FUNC_START(_rest32gpr_22)\tlwz 22,-40(11)\n+FUNC_START(_rest32gpr_23)\tlwz 23,-36(11)\n+FUNC_START(_rest32gpr_24)\tlwz 24,-32(11)\n+FUNC_START(_rest32gpr_25)\tlwz 25,-28(11)\n+FUNC_START(_rest32gpr_26)\tlwz 26,-24(11)\n+FUNC_START(_rest32gpr_27)\tlwz 27,-20(11)\n+FUNC_START(_rest32gpr_28)\tlwz 28,-16(11)\n+FUNC_START(_rest32gpr_29)\tlwz 29,-12(11)\n+FUNC_START(_rest32gpr_30)\tlwz 30,-8(11)\n+FUNC_START(_rest32gpr_31)\tlwz 31,-4(11)\n+\t\t\t\tblr\n+FUNC_END(_rest32gpr_31)\n+FUNC_END(_rest32gpr_30)\n+FUNC_END(_rest32gpr_29)\n+FUNC_END(_rest32gpr_28)\n+FUNC_END(_rest32gpr_27)\n+FUNC_END(_rest32gpr_26)\n+FUNC_END(_rest32gpr_25)\n+FUNC_END(_rest32gpr_24)\n+FUNC_END(_rest32gpr_23)\n+FUNC_END(_rest32gpr_22)\n+FUNC_END(_rest32gpr_21)\n+FUNC_END(_rest32gpr_20)\n+FUNC_END(_rest32gpr_19)\n+FUNC_END(_rest32gpr_18)\n+FUNC_END(_rest32gpr_17)\n+FUNC_END(_rest32gpr_16)\n+FUNC_END(_rest32gpr_15)\n+FUNC_END(_rest32gpr_14)\n+\n+#endif"}, {"sha": "73ab506710c36b4663d7df843f8a1c7437457b1d", "filename": "gcc/config/rs6000/e500crtres64gpr.asm", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres64gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres64gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtres64gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtres64gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for restoring 64-bit integer registers, called by the compiler.  */\n+/* \"Bare\" versions that return to their caller.  */\n+\n+FUNC_START(_rest64gpr_14)\tevldd 14,0(11)\n+FUNC_START(_rest64gpr_15)\tevldd 15,8(11)\n+FUNC_START(_rest64gpr_16)\tevldd 16,16(11)\n+FUNC_START(_rest64gpr_17)\tevldd 17,24(11)\n+FUNC_START(_rest64gpr_18)\tevldd 18,32(11)\n+FUNC_START(_rest64gpr_19)\tevldd 19,40(11)\n+FUNC_START(_rest64gpr_20)\tevldd 20,48(11)\n+FUNC_START(_rest64gpr_21)\tevldd 21,56(11)\n+FUNC_START(_rest64gpr_22)\tevldd 22,64(11)\n+FUNC_START(_rest64gpr_23)\tevldd 23,72(11)\n+FUNC_START(_rest64gpr_24)\tevldd 24,80(11)\n+FUNC_START(_rest64gpr_25)\tevldd 25,88(11)\n+FUNC_START(_rest64gpr_26)\tevldd 26,96(11)\n+FUNC_START(_rest64gpr_27)\tevldd 27,104(11)\n+FUNC_START(_rest64gpr_28)\tevldd 28,112(11)\n+FUNC_START(_rest64gpr_29)\tevldd 29,120(11)\n+FUNC_START(_rest64gpr_30)\tevldd 30,128(11)\n+FUNC_START(_rest64gpr_31)\tevldd 31,136(11)\n+\t\t\t\tblr\n+FUNC_END(_rest64gpr_31)\n+FUNC_END(_rest64gpr_30)\n+FUNC_END(_rest64gpr_29)\n+FUNC_END(_rest64gpr_28)\n+FUNC_END(_rest64gpr_27)\n+FUNC_END(_rest64gpr_26)\n+FUNC_END(_rest64gpr_25)\n+FUNC_END(_rest64gpr_24)\n+FUNC_END(_rest64gpr_23)\n+FUNC_END(_rest64gpr_22)\n+FUNC_END(_rest64gpr_21)\n+FUNC_END(_rest64gpr_20)\n+FUNC_END(_rest64gpr_19)\n+FUNC_END(_rest64gpr_18)\n+FUNC_END(_rest64gpr_17)\n+FUNC_END(_rest64gpr_16)\n+FUNC_END(_rest64gpr_15)\n+FUNC_END(_rest64gpr_14)\n+\n+#endif"}, {"sha": "93b5963321a25cf3381e0284a0ab0f6c38bab735", "filename": "gcc/config/rs6000/e500crtres64gprctr.asm", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres64gprctr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtres64gprctr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtres64gprctr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtres64gprctr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for restoring 64-bit integer registers where the number of\n+   registers to be restored is passed in CTR, called by the compiler.  */\n+\n+FUNC_START(_rest64gpr_ctr_14)\tevldd 14,0(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_15)\tevldd 15,8(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_16)\tevldd 16,16(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_17)\tevldd 17,24(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_18)\tevldd 18,32(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_19)\tevldd 19,40(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_20)\tevldd 20,48(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_21)\tevldd 21,56(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_22)\tevldd 22,64(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_23)\tevldd 23,72(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_24)\tevldd 24,80(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_25)\tevldd 25,88(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_26)\tevldd 26,96(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_27)\tevldd 27,104(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_28)\tevldd 28,112(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_29)\tevldd 29,120(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_30)\tevldd 30,128(11)\n+\t\t\t\tbdz _rest64_gpr_ctr_done\n+FUNC_START(_rest64gpr_ctr_31)\tevldd 31,136(11)\n+_rest64gpr_ctr_done:\t\tblr\n+\n+#endif"}, {"sha": "42f81d689f6f4cd81c50f7fc7d1c70e1a20835ef", "filename": "gcc/config/rs6000/e500crtrest32gpr.asm", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtrest32gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtrest32gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtrest32gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtrest32gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for restoring 32-bit integer registers, called by the compiler.  */\n+/* \"Tail\" versions that perform a tail call.  */\n+\n+FUNC_START(_rest32gpr_14_t)\tlwz 14,-72(11)\n+FUNC_START(_rest32gpr_15_t)\tlwz 15,-68(11)\n+FUNC_START(_rest32gpr_16_t)\tlwz 16,-64(11)\n+FUNC_START(_rest32gpr_17_t)\tlwz 17,-60(11)\n+FUNC_START(_rest32gpr_18_t)\tlwz 18,-56(11)\n+FUNC_START(_rest32gpr_19_t)\tlwz 19,-52(11)\n+FUNC_START(_rest32gpr_20_t)\tlwz 20,-48(11)\n+FUNC_START(_rest32gpr_21_t)\tlwz 21,-44(11)\n+FUNC_START(_rest32gpr_22_t)\tlwz 22,-40(11)\n+FUNC_START(_rest32gpr_23_t)\tlwz 23,-36(11)\n+FUNC_START(_rest32gpr_24_t)\tlwz 24,-32(11)\n+FUNC_START(_rest32gpr_25_t)\tlwz 25,-28(11)\n+FUNC_START(_rest32gpr_26_t)\tlwz 26,-24(11)\n+FUNC_START(_rest32gpr_27_t)\tlwz 27,-20(11)\n+FUNC_START(_rest32gpr_28_t)\tlwz 28,-16(11)\n+FUNC_START(_rest32gpr_29_t)\tlwz 29,-12(11)\n+FUNC_START(_rest32gpr_30_t)\tlwz 30,-8(11)\n+FUNC_START(_rest32gpr_31_t)\tlwz 31,-4(11)\n+\t\t\t\tlwz 0,4(11)\n+\t\t\t\tmr 1,11\n+\t\t\t\tblr\n+FUNC_END(_rest32gpr_31_t)\n+FUNC_END(_rest32gpr_30_t)\n+FUNC_END(_rest32gpr_29_t)\n+FUNC_END(_rest32gpr_28_t)\n+FUNC_END(_rest32gpr_27_t)\n+FUNC_END(_rest32gpr_26_t)\n+FUNC_END(_rest32gpr_25_t)\n+FUNC_END(_rest32gpr_24_t)\n+FUNC_END(_rest32gpr_23_t)\n+FUNC_END(_rest32gpr_22_t)\n+FUNC_END(_rest32gpr_21_t)\n+FUNC_END(_rest32gpr_20_t)\n+FUNC_END(_rest32gpr_19_t)\n+FUNC_END(_rest32gpr_18_t)\n+FUNC_END(_rest32gpr_17_t)\n+FUNC_END(_rest32gpr_16_t)\n+FUNC_END(_rest32gpr_15_t)\n+FUNC_END(_rest32gpr_14_t)\n+\n+#endif"}, {"sha": "cf7092c7a28703f7a6f142e7dfcc5dbd6b734c46", "filename": "gcc/config/rs6000/e500crtrest64gpr.asm", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtrest64gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtrest64gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtrest64gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtrest64gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* \"Tail\" versions that perform a tail call.  */\n+\n+FUNC_START(_rest64gpr_14_t)\tevldd 14,0(11)\n+FUNC_START(_rest64gpr_15_t)\tevldd 15,8(11)\n+FUNC_START(_rest64gpr_16_t)\tevldd 16,16(11)\n+FUNC_START(_rest64gpr_17_t)\tevldd 17,24(11)\n+FUNC_START(_rest64gpr_18_t)\tevldd 18,32(11)\n+FUNC_START(_rest64gpr_19_t)\tevldd 19,40(11)\n+FUNC_START(_rest64gpr_20_t)\tevldd 20,48(11)\n+FUNC_START(_rest64gpr_21_t)\tevldd 21,56(11)\n+FUNC_START(_rest64gpr_22_t)\tevldd 22,64(11)\n+FUNC_START(_rest64gpr_23_t)\tevldd 23,72(11)\n+FUNC_START(_rest64gpr_24_t)\tevldd 24,80(11)\n+FUNC_START(_rest64gpr_25_t)\tevldd 25,88(11)\n+FUNC_START(_rest64gpr_26_t)\tevldd 26,96(11)\n+FUNC_START(_rest64gpr_27_t)\tevldd 27,104(11)\n+FUNC_START(_rest64gpr_28_t)\tevldd 28,112(11)\n+FUNC_START(_rest64gpr_29_t)\tevldd 29,120(11)\n+FUNC_START(_rest64gpr_30_t)\tevldd 30,128(11)\n+FUNC_START(_rest64gpr_31_t)\tlwz 0,148(11)\n+\t\t\t\tevldd 31,136(11)\n+\t\t\t\taddi 1,11,144\n+\t\t\t\tblr\n+FUNC_END(_rest64gpr_31_t)\n+FUNC_END(_rest64gpr_30_t)\n+FUNC_END(_rest64gpr_29_t)\n+FUNC_END(_rest64gpr_28_t)\n+FUNC_END(_rest64gpr_27_t)\n+FUNC_END(_rest64gpr_26_t)\n+FUNC_END(_rest64gpr_25_t)\n+FUNC_END(_rest64gpr_24_t)\n+FUNC_END(_rest64gpr_23_t)\n+FUNC_END(_rest64gpr_22_t)\n+FUNC_END(_rest64gpr_21_t)\n+FUNC_END(_rest64gpr_20_t)\n+FUNC_END(_rest64gpr_19_t)\n+FUNC_END(_rest64gpr_18_t)\n+FUNC_END(_rest64gpr_17_t)\n+FUNC_END(_rest64gpr_16_t)\n+FUNC_END(_rest64gpr_15_t)\n+FUNC_END(_rest64gpr_14_t)\n+\n+#endif"}, {"sha": "9fba08b551199a1c1e014af403ae9cef38c74a18", "filename": "gcc/config/rs6000/e500crtresx32gpr.asm", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtresx32gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtresx32gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtresx32gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtresx32gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for restoring 32-bit integer registers, called by the compiler.  */\n+/* \"Exit\" versions that return to the caller's caller.  */\n+\n+FUNC_START(_rest32gpr_14_x)\tlwz 14,-72(11)\n+FUNC_START(_rest32gpr_15_x)\tlwz 15,-68(11)\n+FUNC_START(_rest32gpr_16_x)\tlwz 16,-64(11)\n+FUNC_START(_rest32gpr_17_x)\tlwz 17,-60(11)\n+FUNC_START(_rest32gpr_18_x)\tlwz 18,-56(11)\n+FUNC_START(_rest32gpr_19_x)\tlwz 19,-52(11)\n+FUNC_START(_rest32gpr_20_x)\tlwz 20,-48(11)\n+FUNC_START(_rest32gpr_21_x)\tlwz 21,-44(11)\n+FUNC_START(_rest32gpr_22_x)\tlwz 22,-40(11)\n+FUNC_START(_rest32gpr_23_x)\tlwz 23,-36(11)\n+FUNC_START(_rest32gpr_24_x)\tlwz 24,-32(11)\n+FUNC_START(_rest32gpr_25_x)\tlwz 25,-28(11)\n+FUNC_START(_rest32gpr_26_x)\tlwz 26,-24(11)\n+FUNC_START(_rest32gpr_27_x)\tlwz 27,-20(11)\n+FUNC_START(_rest32gpr_28_x)\tlwz 28,-16(11)\n+FUNC_START(_rest32gpr_29_x)\tlwz 29,-12(11)\n+FUNC_START(_rest32gpr_30_x)\tlwz 30,-8(11)\n+FUNC_START(_rest32gpr_31_x)\tlwz 0,4(11)\n+\t\t\t\tlwz 31,-4(11)\n+\t\t\t\tmr 1,11\n+\t\t\t\tmtlr 0\n+\t\t\t\tblr\n+FUNC_END(_rest32gpr_31_x)\n+FUNC_END(_rest32gpr_30_x)\n+FUNC_END(_rest32gpr_29_x)\n+FUNC_END(_rest32gpr_28_x)\n+FUNC_END(_rest32gpr_27_x)\n+FUNC_END(_rest32gpr_26_x)\n+FUNC_END(_rest32gpr_25_x)\n+FUNC_END(_rest32gpr_24_x)\n+FUNC_END(_rest32gpr_23_x)\n+FUNC_END(_rest32gpr_22_x)\n+FUNC_END(_rest32gpr_21_x)\n+FUNC_END(_rest32gpr_20_x)\n+FUNC_END(_rest32gpr_19_x)\n+FUNC_END(_rest32gpr_18_x)\n+FUNC_END(_rest32gpr_17_x)\n+FUNC_END(_rest32gpr_16_x)\n+FUNC_END(_rest32gpr_15_x)\n+FUNC_END(_rest32gpr_14_x)\n+\n+#endif"}, {"sha": "e6a24e94b35f49880850ce6b0f2c3c1bc0733560", "filename": "gcc/config/rs6000/e500crtresx64gpr.asm", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtresx64gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtresx64gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtresx64gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtresx64gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* \"Exit\" versions that return to their caller's caller.  */\n+\n+FUNC_START(_rest64gpr_14_x)\tevldd 14,0(11)\n+FUNC_START(_rest64gpr_15_x)\tevldd 15,8(11)\n+FUNC_START(_rest64gpr_16_x)\tevldd 16,16(11)\n+FUNC_START(_rest64gpr_17_x)\tevldd 17,24(11)\n+FUNC_START(_rest64gpr_18_x)\tevldd 18,32(11)\n+FUNC_START(_rest64gpr_19_x)\tevldd 19,40(11)\n+FUNC_START(_rest64gpr_20_x)\tevldd 20,48(11)\n+FUNC_START(_rest64gpr_21_x)\tevldd 21,56(11)\n+FUNC_START(_rest64gpr_22_x)\tevldd 22,64(11)\n+FUNC_START(_rest64gpr_23_x)\tevldd 23,72(11)\n+FUNC_START(_rest64gpr_24_x)\tevldd 24,80(11)\n+FUNC_START(_rest64gpr_25_x)\tevldd 25,88(11)\n+FUNC_START(_rest64gpr_26_x)\tevldd 26,96(11)\n+FUNC_START(_rest64gpr_27_x)\tevldd 27,104(11)\n+FUNC_START(_rest64gpr_28_x)\tevldd 28,112(11)\n+FUNC_START(_rest64gpr_29_x)\tevldd 29,120(11)\n+FUNC_START(_rest64gpr_30_x)\tevldd 30,128(11)\n+FUNC_START(_rest64gpr_31_x)\tlwz 0,148(11)\n+\t\t\t\tevldd 31,136(11)\n+\t\t\t\taddi 1,11,144\n+\t\t\t\tmtlr 0\n+\t\t\t\tblr\n+FUNC_END(_rest64gpr_31_x)\n+FUNC_END(_rest64gpr_30_x)\n+FUNC_END(_rest64gpr_29_x)\n+FUNC_END(_rest64gpr_28_x)\n+FUNC_END(_rest64gpr_27_x)\n+FUNC_END(_rest64gpr_26_x)\n+FUNC_END(_rest64gpr_25_x)\n+FUNC_END(_rest64gpr_24_x)\n+FUNC_END(_rest64gpr_23_x)\n+FUNC_END(_rest64gpr_22_x)\n+FUNC_END(_rest64gpr_21_x)\n+FUNC_END(_rest64gpr_20_x)\n+FUNC_END(_rest64gpr_19_x)\n+FUNC_END(_rest64gpr_18_x)\n+FUNC_END(_rest64gpr_17_x)\n+FUNC_END(_rest64gpr_16_x)\n+FUNC_END(_rest64gpr_15_x)\n+FUNC_END(_rest64gpr_14_x)\n+\n+#endif"}, {"sha": "6cf97956cccd7092c5ac87fb7c4c853a6d800c2b", "filename": "gcc/config/rs6000/e500crtsav32gpr.asm", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav32gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav32gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsav32gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsav32gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 32-bit integer registers, called by the compiler.  */\n+/* \"Bare\" versions that simply return to their caller.  */\n+\n+FUNC_START(_save32gpr_14)\tstw 14,-72(11)\n+FUNC_START(_save32gpr_15)\tstw 15,-68(11)\n+FUNC_START(_save32gpr_16)\tstw 16,-64(11)\n+FUNC_START(_save32gpr_17)\tstw 17,-60(11)\n+FUNC_START(_save32gpr_18)\tstw 18,-56(11)\n+FUNC_START(_save32gpr_19)\tstw 19,-52(11)\n+FUNC_START(_save32gpr_20)\tstw 20,-48(11)\n+FUNC_START(_save32gpr_21)\tstw 21,-44(11)\n+FUNC_START(_save32gpr_22)\tstw 22,-40(11)\n+FUNC_START(_save32gpr_23)\tstw 23,-36(11)\n+FUNC_START(_save32gpr_24)\tstw 24,-32(11)\n+FUNC_START(_save32gpr_25)\tstw 25,-28(11)\n+FUNC_START(_save32gpr_26)\tstw 26,-24(11)\n+FUNC_START(_save32gpr_27)\tstw 27,-20(11)\n+FUNC_START(_save32gpr_28)\tstw 28,-16(11)\n+FUNC_START(_save32gpr_29)\tstw 29,-12(11)\n+FUNC_START(_save32gpr_30)\tstw 30,-8(11)\n+FUNC_START(_save32gpr_31)\tstw 31,-4(11)\n+\t\t\t\tblr\n+FUNC_END(_save32gpr_31)\n+FUNC_END(_save32gpr_30)\n+FUNC_END(_save32gpr_29)\n+FUNC_END(_save32gpr_28)\n+FUNC_END(_save32gpr_27)\n+FUNC_END(_save32gpr_26)\n+FUNC_END(_save32gpr_25)\n+FUNC_END(_save32gpr_24)\n+FUNC_END(_save32gpr_23)\n+FUNC_END(_save32gpr_22)\n+FUNC_END(_save32gpr_21)\n+FUNC_END(_save32gpr_20)\n+FUNC_END(_save32gpr_19)\n+FUNC_END(_save32gpr_18)\n+FUNC_END(_save32gpr_17)\n+FUNC_END(_save32gpr_16)\n+FUNC_END(_save32gpr_15)\n+FUNC_END(_save32gpr_14)\n+\n+#endif"}, {"sha": "6a2b0fac82ae81e2f94740aae110ae738b862f44", "filename": "gcc/config/rs6000/e500crtsav64gpr.asm", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsav64gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 64-bit integer registers, called by the compiler.  */\n+\n+FUNC_START(_save64gpr_14)\tevstdd 14,0(11)\n+FUNC_START(_save64gpr_15)\tevstdd 15,8(11)\n+FUNC_START(_save64gpr_16)\tevstdd 16,16(11)\n+FUNC_START(_save64gpr_17)\tevstdd 17,24(11)\n+FUNC_START(_save64gpr_18)\tevstdd 18,32(11)\n+FUNC_START(_save64gpr_19)\tevstdd 19,40(11)\n+FUNC_START(_save64gpr_20)\tevstdd 20,48(11)\n+FUNC_START(_save64gpr_21)\tevstdd 21,56(11)\n+FUNC_START(_save64gpr_22)\tevstdd 22,64(11)\n+FUNC_START(_save64gpr_23)\tevstdd 23,72(11)\n+FUNC_START(_save64gpr_24)\tevstdd 24,80(11)\n+FUNC_START(_save64gpr_25)\tevstdd 25,88(11)\n+FUNC_START(_save64gpr_26)\tevstdd 26,96(11)\n+FUNC_START(_save64gpr_27)\tevstdd 27,104(11)\n+FUNC_START(_save64gpr_28)\tevstdd 28,112(11)\n+FUNC_START(_save64gpr_29)\tevstdd 29,120(11)\n+FUNC_START(_save64gpr_30)\tevstdd 30,128(11)\n+FUNC_START(_save64gpr_31)\tevstdd 31,136(11)\n+\t\t\t\tblr\n+FUNC_END(_save64gpr_31)\n+FUNC_END(_save64gpr_30)\n+FUNC_END(_save64gpr_29)\n+FUNC_END(_save64gpr_28)\n+FUNC_END(_save64gpr_27)\n+FUNC_END(_save64gpr_26)\n+FUNC_END(_save64gpr_25)\n+FUNC_END(_save64gpr_24)\n+FUNC_END(_save64gpr_23)\n+FUNC_END(_save64gpr_22)\n+FUNC_END(_save64gpr_21)\n+FUNC_END(_save64gpr_20)\n+FUNC_END(_save64gpr_19)\n+FUNC_END(_save64gpr_18)\n+FUNC_END(_save64gpr_17)\n+FUNC_END(_save64gpr_16)\n+FUNC_END(_save64gpr_15)\n+FUNC_END(_save64gpr_14)\n+\n+#endif"}, {"sha": "1261bb06ed8e91c5ffa275d1da2d0e68a64ae3ce", "filename": "gcc/config/rs6000/e500crtsav64gprctr.asm", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gprctr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gprctr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsav64gprctr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsav64gprctr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 64-bit integer registers where the number of\n+   registers to be saved is passed in CTR, called by the compiler.  */\n+/* \"Bare\" versions that return to their caller.  */\n+\n+FUNC_START(_save64gpr_ctr_14)\tevstdd 14,0(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_15)\tevstdd 15,8(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_16)\tevstdd 16,16(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_17)\tevstdd 17,24(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_18)\tevstdd 18,32(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_19)\tevstdd 19,40(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_20)\tevstdd 20,48(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_21)\tevstdd 21,56(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_22)\tevstdd 22,64(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_23)\tevstdd 23,72(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_24)\tevstdd 24,80(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_25)\tevstdd 25,88(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_26)\tevstdd 26,96(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_27)\tevstdd 27,104(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_28)\tevstdd 28,112(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_29)\tevstdd 29,120(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_30)\tevstdd 30,128(11)\n+\t\t\t\tbdz _save64_gpr_ctr_done\n+FUNC_START(_save64gpr_ctr_31)\tevstdd 31,136(11)\n+_save64gpr_ctr_done:\t\tblr\n+FUNC_END(_save64gpr_ctr_31)\n+FUNC_END(_save64gpr_ctr_30)\n+FUNC_END(_save64gpr_ctr_29)\n+FUNC_END(_save64gpr_ctr_28)\n+FUNC_END(_save64gpr_ctr_27)\n+FUNC_END(_save64gpr_ctr_26)\n+FUNC_END(_save64gpr_ctr_25)\n+FUNC_END(_save64gpr_ctr_24)\n+FUNC_END(_save64gpr_ctr_23)\n+FUNC_END(_save64gpr_ctr_22)\n+FUNC_END(_save64gpr_ctr_21)\n+FUNC_END(_save64gpr_ctr_20)\n+FUNC_END(_save64gpr_ctr_19)\n+FUNC_END(_save64gpr_ctr_18)\n+FUNC_END(_save64gpr_ctr_17)\n+FUNC_END(_save64gpr_ctr_16)\n+FUNC_END(_save64gpr_ctr_15)\n+FUNC_END(_save64gpr_ctr_14)\n+\n+#endif"}, {"sha": "d648817a763a36b2bc4e3b268959613174863c74", "filename": "gcc/config/rs6000/e500crtsavg32gpr.asm", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg32gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg32gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsavg32gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsavg32gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 32-bit integer registers, called by the compiler.  */\n+/* \"GOT\" versions that load the address of the GOT into lr before returning.  */\n+\n+FUNC_START(_save32gpr_14_g)\tstw 14,-72(11)\n+FUNC_START(_save32gpr_15_g)\tstw 15,-68(11)\n+FUNC_START(_save32gpr_16_g)\tstw 16,-64(11)\n+FUNC_START(_save32gpr_17_g)\tstw 17,-60(11)\n+FUNC_START(_save32gpr_18_g)\tstw 18,-56(11)\n+FUNC_START(_save32gpr_19_g)\tstw 19,-52(11)\n+FUNC_START(_save32gpr_20_g)\tstw 20,-48(11)\n+FUNC_START(_save32gpr_21_g)\tstw 21,-44(11)\n+FUNC_START(_save32gpr_22_g)\tstw 22,-40(11)\n+FUNC_START(_save32gpr_23_g)\tstw 23,-36(11)\n+FUNC_START(_save32gpr_24_g)\tstw 24,-32(11)\n+FUNC_START(_save32gpr_25_g)\tstw 25,-28(11)\n+FUNC_START(_save32gpr_26_g)\tstw 26,-24(11)\n+FUNC_START(_save32gpr_27_g)\tstw 27,-20(11)\n+FUNC_START(_save32gpr_28_g)\tstw 28,-16(11)\n+FUNC_START(_save32gpr_29_g)\tstw 29,-12(11)\n+FUNC_START(_save32gpr_30_g)\tstw 30,-8(11)\n+FUNC_START(_save32gpr_31_g)\tstw 31,-4(11)\n+\t\t\t\tb _GLOBAL_OFFSET_TABLE_-4\n+FUNC_END(_save32gpr_31_g)\n+FUNC_END(_save32gpr_30_g)\n+FUNC_END(_save32gpr_29_g)\n+FUNC_END(_save32gpr_28_g)\n+FUNC_END(_save32gpr_27_g)\n+FUNC_END(_save32gpr_26_g)\n+FUNC_END(_save32gpr_25_g)\n+FUNC_END(_save32gpr_24_g)\n+FUNC_END(_save32gpr_23_g)\n+FUNC_END(_save32gpr_22_g)\n+FUNC_END(_save32gpr_21_g)\n+FUNC_END(_save32gpr_20_g)\n+FUNC_END(_save32gpr_19_g)\n+FUNC_END(_save32gpr_18_g)\n+FUNC_END(_save32gpr_17_g)\n+FUNC_END(_save32gpr_16_g)\n+FUNC_END(_save32gpr_15_g)\n+FUNC_END(_save32gpr_14_g)\n+\n+#endif"}, {"sha": "7a60a84f2eca2f7f440dfe8ed5e3f5cc4f47aafc", "filename": "gcc/config/rs6000/e500crtsavg64gpr.asm", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gpr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsavg64gpr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 64-bit integer registers, called by the compiler.  */\n+/* \"GOT\" versions that load the address of the GOT into lr before returning.  */\n+\n+FUNC_START(_save64gpr_14_g)\tevstdd 14,0(11)\n+FUNC_START(_save64gpr_15_g)\tevstdd 15,8(11)\n+FUNC_START(_save64gpr_16_g)\tevstdd 16,16(11)\n+FUNC_START(_save64gpr_17_g)\tevstdd 17,24(11)\n+FUNC_START(_save64gpr_18_g)\tevstdd 18,32(11)\n+FUNC_START(_save64gpr_19_g)\tevstdd 19,40(11)\n+FUNC_START(_save64gpr_20_g)\tevstdd 20,48(11)\n+FUNC_START(_save64gpr_21_g)\tevstdd 21,56(11)\n+FUNC_START(_save64gpr_22_g)\tevstdd 22,64(11)\n+FUNC_START(_save64gpr_23_g)\tevstdd 23,72(11)\n+FUNC_START(_save64gpr_24_g)\tevstdd 24,80(11)\n+FUNC_START(_save64gpr_25_g)\tevstdd 25,88(11)\n+FUNC_START(_save64gpr_26_g)\tevstdd 26,96(11)\n+FUNC_START(_save64gpr_27_g)\tevstdd 27,104(11)\n+FUNC_START(_save64gpr_28_g)\tevstdd 28,112(11)\n+FUNC_START(_save64gpr_29_g)\tevstdd 29,120(11)\n+FUNC_START(_save64gpr_30_g)\tevstdd 30,128(11)\n+FUNC_START(_save64gpr_31_g)\tevstdd 31,136(11)\n+\t\t\t\tb _GLOBAL_OFFSET_TABLE_-4\n+FUNC_END(_save64gpr_31_g)\n+FUNC_END(_save64gpr_30_g)\n+FUNC_END(_save64gpr_29_g)\n+FUNC_END(_save64gpr_28_g)\n+FUNC_END(_save64gpr_27_g)\n+FUNC_END(_save64gpr_26_g)\n+FUNC_END(_save64gpr_25_g)\n+FUNC_END(_save64gpr_24_g)\n+FUNC_END(_save64gpr_23_g)\n+FUNC_END(_save64gpr_22_g)\n+FUNC_END(_save64gpr_21_g)\n+FUNC_END(_save64gpr_20_g)\n+FUNC_END(_save64gpr_19_g)\n+FUNC_END(_save64gpr_18_g)\n+FUNC_END(_save64gpr_17_g)\n+FUNC_END(_save64gpr_16_g)\n+FUNC_END(_save64gpr_15_g)\n+FUNC_END(_save64gpr_14_g)\n+\n+#endif"}, {"sha": "1d978ec279310173f95f8593a62c1b59fd8c890d", "filename": "gcc/config/rs6000/e500crtsavg64gprctr.asm", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gprctr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gprctr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500crtsavg64gprctr.asm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Special support for e500 eabi and SVR4\n+ *\n+ *   Copyright (C) 2008 Free Software Foundation, Inc.\n+ *   Written by Nathan Froyd\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n+\t.file\t\"e500crtsavg64gprctr.asm\"\n+\t.section \".text\"\n+\t#include \"ppc-asm.h\"\n+\n+#ifdef __SPE__\n+\n+/* Routines for saving 64-bit integer registers, called by the compiler.  */\n+/* \"GOT\" versions that load the address of the GOT into lr before returning.  */\n+\n+FUNC_START(_save64gpr_ctr_14_g)\tevstdd 14,0(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_15_g)\tevstdd 15,8(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_16_g)\tevstdd 16,16(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_17_g)\tevstdd 17,24(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_18_g)\tevstdd 18,32(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_19_g)\tevstdd 19,40(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_20_g)\tevstdd 20,48(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_21_g)\tevstdd 21,56(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_22_g)\tevstdd 22,64(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_23_g)\tevstdd 23,72(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_24_g)\tevstdd 24,80(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_25_g)\tevstdd 25,88(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_26_g)\tevstdd 26,96(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_27_g)\tevstdd 27,104(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_28_g)\tevstdd 28,112(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_29_g)\tevstdd 29,120(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_30_g)\tevstdd 30,128(11)\n+\t\t\t\tbdz _save64_gpr_ctr_g_done\n+FUNC_START(_save64gpr_ctr_31_g)\tevstdd 31,136(11)\n+_save64gpr_ctr_g_done:\t\tb _GLOBAL_OFFSET_TABLE_-4\n+FUNC_END(_save64gpr_ctr_31_g)\n+FUNC_END(_save64gpr_ctr_30_g)\n+FUNC_END(_save64gpr_ctr_29_g)\n+FUNC_END(_save64gpr_ctr_28_g)\n+FUNC_END(_save64gpr_ctr_27_g)\n+FUNC_END(_save64gpr_ctr_26_g)\n+FUNC_END(_save64gpr_ctr_25_g)\n+FUNC_END(_save64gpr_ctr_24_g)\n+FUNC_END(_save64gpr_ctr_23_g)\n+FUNC_END(_save64gpr_ctr_22_g)\n+FUNC_END(_save64gpr_ctr_21_g)\n+FUNC_END(_save64gpr_ctr_20_g)\n+FUNC_END(_save64gpr_ctr_19_g)\n+FUNC_END(_save64gpr_ctr_18_g)\n+FUNC_END(_save64gpr_ctr_17_g)\n+FUNC_END(_save64gpr_ctr_16_g)\n+FUNC_END(_save64gpr_ctr_15_g)\n+FUNC_END(_save64gpr_ctr_14_g)\n+\n+#endif"}, {"sha": "0fdb4b5c37661eca64e58eebbd3269097608f101", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -75,8 +75,7 @@\n #define STARTFILE_SPEC NETBSD_STARTFILE_SPEC\n \n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"crtsavres%O%s %(netbsd_endfile_spec)\"\n+#define ENDFILE_SPEC \"%(netbsd_endfile_spec)\"\n \n #undef  LIB_SPEC\n #define LIB_SPEC NETBSD_LIB_SPEC"}, {"sha": "12abf4d61125c390815223b66292da681459c5ec", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -777,19 +777,19 @@ extern int fixuplabelno;\n /* Override svr4.h definition.  */\n #undef\tENDFILE_SPEC\n #define\tENDFILE_SPEC \"\\\n-%{mads         : crtsavres.o%s        %(endfile_ads)         ; \\\n-  myellowknife : crtsavres.o%s        %(endfile_yellowknife) ; \\\n-  mmvme        : crtsavres.o%s        %(endfile_mvme)        ; \\\n-  msim         : crtsavres.o%s        %(endfile_sim)         ; \\\n+%{mads         : %(endfile_ads)         ; \\\n+  myellowknife : %(endfile_yellowknife) ; \\\n+  mmvme        : %(endfile_mvme)        ; \\\n+  msim         : %(endfile_sim)         ; \\\n   mwindiss     :                      %(endfile_windiss)     ; \\\n-  mcall-freebsd: crtsavres.o%s        %(endfile_freebsd)     ; \\\n-  mcall-linux  : crtsavres.o%s        %(endfile_linux)       ; \\\n-  mcall-gnu    : crtsavres.o%s        %(endfile_gnu)         ; \\\n-  mcall-netbsd : crtsavres.o%s        %(endfile_netbsd)      ; \\\n-  mcall-openbsd: crtsavres.o%s        %(endfile_openbsd)     ; \\\n+  mcall-freebsd: %(endfile_freebsd)     ; \\\n+  mcall-linux  : %(endfile_linux)       ; \\\n+  mcall-gnu    : %(endfile_gnu)         ; \\\n+  mcall-netbsd : %(endfile_netbsd)      ; \\\n+  mcall-openbsd: %(endfile_openbsd)     ; \\\n                : %(crtsavres_default) %(endfile_default)     }\"\n \n-#define CRTSAVRES_DEFAULT_SPEC \"crtsavres.o%s\"\n+#define CRTSAVRES_DEFAULT_SPEC \"\"\n \n #define\tENDFILE_DEFAULT_SPEC \"crtend.o%s ecrtn.o%s\"\n "}, {"sha": "135748daecf2a90cc733a630bf98754d824de088", "filename": "gcc/config/rs6000/t-netbsd", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-netbsd?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -2,13 +2,30 @@\n \n LIB2FUNCS_EXTRA = tramp.S\n \n+LIB2FUNCS_STATIC_EXTRA = crtsavfpr.S crtresfpr.S \\\n+  crtsavgpr.S crtresgpr.S \\\n+  crtresxfpr.S crtresxgpr.S\n+\n tramp.S: $(srcdir)/config/rs6000/tramp.asm\n \tcat $(srcdir)/config/rs6000/tramp.asm > tramp.S\n \n-crtsavres.S: $(srcdir)/config/rs6000/crtsavres.asm\n-\tcat $(srcdir)/config/rs6000/crtsavres.asm >crtsavres.S\n+crtsavfpr.S: $(srcdir)/config/rs6000/crtsavfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtsavfpr.asm >crtsavfpr.S\n+\n+crtresfpr.S: $(srcdir)/config/rs6000/crtresfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresfpr.asm >crtresfpr.S\n+\n+crtsavgpr.S: $(srcdir)/config/rs6000/crtsavgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtsavgpr.asm >crtsavgpr.S\n+\n+crtresgpr.S: $(srcdir)/config/rs6000/crtresgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresgpr.asm >crtresgpr.S\n+\n+crtresxfpr.S: $(srcdir)/config/rs6000/crtresxfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresxfpr.asm >crtresxfpr.S\n \n-EXTRA_PARTS += crtsavres$(objext)\n+crtresxgpr.S: $(srcdir)/config/rs6000/crtresxgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresxgpr.asm >crtresxgpr.S\n \n # It is important that crtbegin.o, etc., aren't surprised by stuff in .sdata.\n CRTSTUFF_T_CFLAGS += -msdata=none\n@@ -34,9 +51,22 @@ MULTILIB_MATCHES\t= ${MULTILIB_MATCHES_FLOAT}\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext) \\\n-  crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext) \\\n-  crtsavres$(objext)\n+  crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext)\n+\n+$(T)crtsavfpr$(objext): crtsavfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavfpr.S -o $(T)crtsavfpr$(objext)\n+\n+$(T)crtresfpr$(objext): crtresfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresfpr.S -o $(T)crtresfpr$(objext)\n+\n+$(T)crtsavgpr$(objext): crtsavgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavgpr.S -o $(T)crtsavgpr$(objext)\n+\n+$(T)crtresgpr$(objext): crtresgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresgpr.S -o $(T)crtresgpr$(objext)\n+\n+$(T)crtresxfpr$(objext): crtresxfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresxfpr.S -o $(T)crtresxfpr$(objext)\n \n-$(T)crtsavres$(objext): crtsavres.S\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c crtsavres.S -o $(T)crtsavres$(objext)\n+$(T)crtresxgpr$(objext): crtresxgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresxgpr.S -o $(T)crtresxgpr$(objext)"}, {"sha": "8fc3e71b08e7105486ce367fe415afcb4c5d3338", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 131, "deletions": 8, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -2,8 +2,24 @@\n \n LIB2FUNCS_EXTRA += tramp.S $(srcdir)/config/rs6000/darwin-ldouble.c\n \n-# This one can't end up in shared libgcc\n-LIB2FUNCS_STATIC_EXTRA = eabi.S\n+# These can't end up in shared libgcc\n+LIB2FUNCS_STATIC_EXTRA = eabi.S \\\n+  crtsavfpr.S crtresfpr.S \\\n+  crtsavgpr.S crtresgpr.S \\\n+  crtresxfpr.S crtresxgpr.S \\\n+  e500crtres32gpr.S \\\n+  e500crtres64gpr.S \\\n+  e500crtres64gprctr.S \\\n+  e500crtrest32gpr.S \\\n+  e500crtrest64gpr.S \\\n+  e500crtresx32gpr.S \\\n+  e500crtresx64gpr.S \\\n+  e500crtsav32gpr.S \\\n+  e500crtsav64gpr.S \\\n+  e500crtsav64gprctr.S \\\n+  e500crtsavg32gpr.S \\\n+  e500crtsavg64gpr.S \\\n+  e500crtsavg64gprctr.S\n \n eabi.S: $(srcdir)/config/rs6000/eabi.asm\n \tcat $(srcdir)/config/rs6000/eabi.asm > eabi.S\n@@ -18,8 +34,7 @@ MULTILIB_MATCHES_SYSV\t= mcall-sysv=mcall-sysv-eabi mcall-sysv=mcall-sysv-noeabi\n EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext) \\\n   crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext) \\\n   ecrti$(objext) ecrtn$(objext) \\\n-  ncrti$(objext) ncrtn$(objext) \\\n-  crtsavres$(objext)\n+  ncrti$(objext) ncrtn$(objext)\n \n # We build {e,n}crti.o and {e,n}crtn.o, which serve to add begin and\n # end labels to all of the special sections used when we link using gcc.\n@@ -37,8 +52,62 @@ ncrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n ncrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n \tcat $(srcdir)/config/rs6000/sol-cn.asm >ncrtn.S\n \n-crtsavres.S: $(srcdir)/config/rs6000/crtsavres.asm\n-\tcat $(srcdir)/config/rs6000/crtsavres.asm >crtsavres.S\n+crtsavfpr.S: $(srcdir)/config/rs6000/crtsavfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtsavfpr.asm >crtsavfpr.S\n+\n+crtresfpr.S: $(srcdir)/config/rs6000/crtresfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresfpr.asm >crtresfpr.S\n+\n+crtsavgpr.S: $(srcdir)/config/rs6000/crtsavgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtsavgpr.asm >crtsavgpr.S\n+\n+crtresgpr.S: $(srcdir)/config/rs6000/crtresgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresgpr.asm >crtresgpr.S\n+\n+crtresxfpr.S: $(srcdir)/config/rs6000/crtresxfpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresxfpr.asm >crtresxfpr.S\n+\n+crtresxgpr.S: $(srcdir)/config/rs6000/crtresxgpr.asm\n+\tcat $(srcdir)/config/rs6000/crtresxgpr.asm >crtresxgpr.S\n+\n+e500crtres32gpr.S: $(srcdir)/config/rs6000/e500crtres32gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtres32gpr.asm >e500crtres32gpr.S\n+\n+e500crtres64gpr.S: $(srcdir)/config/rs6000/e500crtres64gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtres64gpr.asm >e500crtres64gpr.S\n+\n+e500crtres64gprctr.S: $(srcdir)/config/rs6000/e500crtres64gprctr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtres64gprctr.asm >e500crtres64gprctr.S\n+\n+e500crtrest32gpr.S: $(srcdir)/config/rs6000/e500crtrest32gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtrest32gpr.asm >e500crtrest32gpr.S\n+\n+e500crtrest64gpr.S: $(srcdir)/config/rs6000/e500crtrest64gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtrest64gpr.asm >e500crtrest64gpr.S\n+\n+e500crtresx32gpr.S: $(srcdir)/config/rs6000/e500crtresx32gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtresx32gpr.asm >e500crtresx32gpr.S\n+\n+e500crtresx64gpr.S: $(srcdir)/config/rs6000/e500crtresx64gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtresx64gpr.asm >e500crtresx64gpr.S\n+\n+e500crtsav32gpr.S: $(srcdir)/config/rs6000/e500crtsav32gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsav32gpr.asm >e500crtsav32gpr.S\n+\n+e500crtsav64gpr.S: $(srcdir)/config/rs6000/e500crtsav64gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsav64gpr.asm >e500crtsav64gpr.S\n+\n+e500crtsav64gprctr.S: $(srcdir)/config/rs6000/e500crtsav64gprctr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsav64gprctr.asm >e500crtsav64gprctr.S\n+\n+e500crtsavg32gpr.S: $(srcdir)/config/rs6000/e500crtsavg32gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsavg32gpr.asm >e500crtsavg32gpr.S\n+\n+e500crtsavg64gpr.S: $(srcdir)/config/rs6000/e500crtsavg64gpr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsavg64gpr.asm >e500crtsavg64gpr.S\n+\n+e500crtsavg64gprctr.S: $(srcdir)/config/rs6000/e500crtsavg64gprctr.asm\n+\tcat $(srcdir)/config/rs6000/e500crtsavg64gprctr.asm >e500crtsavg64gprctr.S\n \n # Build multiple copies of ?crt{i,n}.o, one for each target switch.\n $(T)ecrti$(objext): ecrti.S\n@@ -53,8 +122,62 @@ $(T)ncrti$(objext): ncrti.S\n $(T)ncrtn$(objext): ncrtn.S\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ncrtn.S -o $(T)ncrtn$(objext)\n \n-$(T)crtsavres$(objext): crtsavres.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavres.S -o $(T)crtsavres$(objext)\n+$(T)crtsavfpr$(objext): crtsavfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavfpr.S -o $(T)crtsavfpr$(objext)\n+\n+$(T)crtresfpr$(objext): crtresfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresfpr.S -o $(T)crtresfpr$(objext)\n+\n+$(T)crtsavgpr$(objext): crtsavgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavgpr.S -o $(T)crtsavgpr$(objext)\n+\n+$(T)crtresgpr$(objext): crtresgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresgpr.S -o $(T)crtresgpr$(objext)\n+\n+$(T)crtresxfpr$(objext): crtresxfpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresxfpr.S -o $(T)crtresxfpr$(objext)\n+\n+$(T)crtresxgpr$(objext): crtresxgpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtresxgpr.S -o $(T)crtresxgpr$(objext)\n+\n+$(T)e500crtres32gpr$(objext): e500crtres32gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtres32gpr.S -o $(T)e500crtres32gpr$(objext)\n+\n+$(T)e500crtres64gpr$(objext): e500crtres64gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtres64gpr.S -o $(T)e500crtres64gpr$(objext)\n+\n+$(T)e500crtres64gprctr$(objext): e500crtres64gprctr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtres64gprctr.S -o $(T)e500crtres64gprctr$(objext)\n+\n+$(T)e500crtrest32gpr$(objext): e500crtrest32gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtrest32gpr.S -o $(T)e500crtrest32gpr$(objext)\n+\n+$(T)e500crtrest64gpr$(objext): e500crtrest64gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtrest64gpr.S -o $(T)e500crtrest64gpr$(objext)\n+\n+$(T)e500crtresx32gpr$(objext): e500crtresx32gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtresx32gpr.S -o $(T)e500crtresx32gpr$(objext)\n+\n+$(T)e500crtresx64gpr$(objext): e500crtresx64gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtresx64gpr.S -o $(T)e500crtresx64gpr$(objext)\n+\n+$(T)e500crtsav32gpr$(objext): e500crtsav32gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsav32gpr.S -o $(T)e500crtsav32gpr$(objext)\n+\n+$(T)e500crtsav64gpr$(objext): e500crtsav64gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsav64gpr.S -o $(T)e500crtsav64gpr$(objext)\n+\n+$(T)e500crtsav64gprctr$(objext): e500crtsav64gprctr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsav64gprctr.S -o $(T)e500crtsav64gprctr$(objext)\n+\n+$(T)e500crtsavg32gpr$(objext): e500crtsavg32gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsavg32gpr.S -o $(T)e500crtsavg32gpr$(objext)\n+\n+$(T)e500crtsavg64gpr$(objext): e500crtsavg64gpr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsavg64gpr.S -o $(T)e500crtsavg64gpr$(objext)\n+\n+$(T)e500crtsavg64gprctr$(objext): e500crtsavg64gprctr.S\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c e500crtsavg64gprctr.S -o $(T)e500crtsavg64gprctr$(objext)\n \n # It is important that crtbegin.o, etc., aren't surprised by stuff in .sdata.\n CRTSTUFF_T_CFLAGS = -msdata=none"}, {"sha": "2dec005b4d89a60522a6856beefead110e5c75f3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -1,3 +1,8 @@\n+2008-04-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/t-ppccomm: Add build rules for new files.\n+\t(LIB2ADD_ST): New variable.\n+\n 2008-04-07  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \tPR target/34210"}, {"sha": "0558d1575b43074a82b2a408ed1e25194993c4eb", "filename": "libgcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 131, "deletions": 4, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18724e30aca828678b4f0a788e26b90dc8c44c36/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18724e30aca828678b4f0a788e26b90dc8c44c36/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=18724e30aca828678b4f0a788e26b90dc8c44c36", "patch": "@@ -1,5 +1,21 @@\n-EXTRA_PARTS += ecrti$(objext) ecrtn$(objext) ncrti$(objext) ncrtn$(objext) \\\n-  crtsavres$(objext)\n+LIB2ADD_ST += crtsavfpr.S crtresfpr.S \\\n+  crtsavgpr.S crtresgpr.S \\\n+  crtresxfpr.S crtresxgpr.S \\\n+  e500crtres32gpr.S \\\n+  e500crtres64gpr.S \\\n+  e500crtres64gprctr.S \\\n+  e500crtrest32gpr.S \\\n+  e500crtrest64gpr.S \\\n+  e500crtresx32gpr.S \\\n+  e500crtresx64gpr.S \\\n+  e500crtsav32gpr.S \\\n+  e500crtsav64gpr.S \\\n+  e500crtsav64gprctr.S \\\n+  e500crtsavg32gpr.S \\\n+  e500crtsavg64gpr.S \\\n+  e500crtsavg64gprctr.S\n+\n+EXTRA_PARTS += ecrti$(objext) ecrtn$(objext) ncrti$(objext) ncrtn$(objext)\n \n # We build {e,n}crti.o and {e,n}crtn.o, which serve to add begin and\n # end labels to all of the special sections used when we link using gcc.\n@@ -17,8 +33,62 @@ ncrti.S: $(gcc_srcdir)/config/rs6000/sol-ci.asm\n ncrtn.S: $(gcc_srcdir)/config/rs6000/sol-cn.asm\n \tcat $(gcc_srcdir)/config/rs6000/sol-cn.asm >ncrtn.S\n \n-crtsavres.S: $(gcc_srcdir)/config/rs6000/crtsavres.asm\n-\tcat $(gcc_srcdir)/config/rs6000/crtsavres.asm >crtsavres.S\n+crtsavfpr.S: $(gcc_srcdir)/config/rs6000/crtsavfpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtsavfpr.asm >crtsavfpr.S\n+\n+crtresfpr.S: $(gcc_srcdir)/config/rs6000/crtresfpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtresfpr.asm >crtresfpr.S\n+\n+crtsavgpr.S: $(gcc_srcdir)/config/rs6000/crtsavgpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtsavgpr.asm >crtsavgpr.S\n+\n+crtresgpr.S: $(gcc_srcdir)/config/rs6000/crtresgpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtresgpr.asm >crtresgpr.S\n+\n+crtresxfpr.S: $(gcc_srcdir)/config/rs6000/crtresxfpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtresxfpr.asm >crtresxfpr.S\n+\n+crtresxgpr.S: $(gcc_srcdir)/config/rs6000/crtresxgpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/crtresxgpr.asm >crtresxgpr.S\n+\n+e500crtres32gpr.S: $(gcc_srcdir)/config/rs6000/e500crtres32gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtres32gpr.asm >e500crtres32gpr.S\n+\n+e500crtres64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtres64gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtres64gpr.asm >e500crtres64gpr.S\n+\n+e500crtres64gprctr.S: $(gcc_srcdir)/config/rs6000/e500crtres64gprctr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtres64gprctr.asm >e500crtres64gprctr.S\n+\n+e500crtrest32gpr.S: $(gcc_srcdir)/config/rs6000/e500crtrest32gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtrest32gpr.asm >e500crtrest32gpr.S\n+\n+e500crtrest64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtrest64gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtrest64gpr.asm >e500crtrest64gpr.S\n+\n+e500crtresx32gpr.S: $(gcc_srcdir)/config/rs6000/e500crtresx32gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtresx32gpr.asm >e500crtresx32gpr.S\n+\n+e500crtresx64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtresx64gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtresx64gpr.asm >e500crtresx64gpr.S\n+\n+e500crtsav32gpr.S: $(gcc_srcdir)/config/rs6000/e500crtsav32gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsav32gpr.asm >e500crtsav32gpr.S\n+\n+e500crtsav64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtsav64gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsav64gpr.asm >e500crtsav64gpr.S\n+\n+e500crtsav64gprctr.S: $(gcc_srcdir)/config/rs6000/e500crtsav64gprctr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsav64gprctr.asm >e500crtsav64gprctr.S\n+\n+e500crtsavg32gpr.S: $(gcc_srcdir)/config/rs6000/e500crtsavg32gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsavg32gpr.asm >e500crtsavg32gpr.S\n+\n+e500crtsavg64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtsavg64gpr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsavg64gpr.asm >e500crtsavg64gpr.S\n+\n+e500crtsavg64gprctr.S: $(gcc_srcdir)/config/rs6000/e500crtsavg64gprctr.asm\n+\tcat $(gcc_srcdir)/config/rs6000/e500crtsavg64gprctr.asm >e500crtsavg64gprctr.S\n \n ecrti$(objext): ecrti.S\n \t$(crt_compile) -c ecrti.S\n@@ -34,3 +104,60 @@ ncrtn$(objext): ncrtn.S\n \n crtsavres$(objext): crtsavres.S\n \t$(crt_compile) -c crtsavres.S\n+\n+crtsavfpr$(objext): crtsavfpr.S\n+\t$(crt_compile) -c crtsavfpr.S\n+\n+crtresfpr$(objext): crtresfpr.S\n+\t$(crt_compile) -c crtresfpr.S\n+\n+crtsavgpr$(objext): crtsavgpr.S\n+\t$(crt_compile) -c crtsavgpr.S\n+\n+crtresgpr$(objext): crtresgpr.S\n+\t$(crt_compile) -c crtresgpr.S\n+\n+crtresxfpr$(objext): crtresxfpr.S\n+\t$(crt_compile) -c crtresxfpr.S\n+\n+crtresxgpr$(objext): crtresxgpr.S\n+\t$(crt_compile) -c crtresxgpr.S\n+\n+e500crtres32gpr$(objext): e500crtres32gpr.S\n+\t$(crt_compile) -c e500crtres32gpr.S\n+\n+e500crtres64gpr$(objext): e500crtres64gpr.S\n+\t$(crt_compile) -c e500crtres64gpr.S\n+\n+e500crtres64gprctr$(objext): e500crtres64gprctr.S\n+\t$(crt_compile) -c e500crtres64gprctr.S\n+\n+e500crtrest32gpr$(objext): e500crtrest32gpr.S\n+\t$(crt_compile) -c e500crtrest32gpr.S\n+\n+e500crtrest64gpr$(objext): e500crtrest64gpr.S\n+\t$(crt_compile) -c e500crtrest64gpr.S\n+\n+e500crtresx32gpr$(objext): e500crtresx32gpr.S\n+\t$(crt_compile) -c e500crtresx32gpr.S\n+\n+e500crtresx64gpr$(objext): e500crtresx64gpr.S\n+\t$(crt_compile) -c e500crtresx64gpr.S\n+\n+e500crtsav32gpr$(objext): e500crtsav32gpr.S\n+\t$(crt_compile) -c e500crtsav32gpr.S\n+\n+e500crtsav64gpr$(objext): e500crtsav64gpr.S\n+\t$(crt_compile) -c e500crtsav64gpr.S\n+\n+e500crtsav64gprctr$(objext): e500crtsav64gprctr.S\n+\t$(crt_compile) -c e500crtsav64gprctr.S\n+\n+e500crtsavg32gpr$(objext): e500crtsavg32gpr.S\n+\t$(crt_compile) -c e500crtsavg32gpr.S\n+\n+e500crtsavg64gpr$(objext): e500crtsavg64gpr.S\n+\t$(crt_compile) -c e500crtsavg64gpr.S\n+\n+e500crtsavg64gprctr$(objext): e500crtsavg64gprctr.S\n+\t$(crt_compile) -c e500crtsavg64gprctr.S"}]}