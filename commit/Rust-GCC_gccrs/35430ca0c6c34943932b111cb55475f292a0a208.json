{"sha": "35430ca0c6c34943932b111cb55475f292a0a208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0MzBjYTBjNmMzNDk0MzkzMmIxMTFjYjU1NDc1ZjI5MmEwYTIwOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-21T12:56:39Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-21T12:56:39Z"}, "message": "[expmed] Properly account for the cost and latency of shift+add ops when synthesizing mults\n\n        * expmed.c: (synth_mult): Only assume overlapping\n        shift with previous steps in alg_sub_t_m2 case.\n\n        * gcc.target/aarch64/mult-synth_1.c: New test.\n        * gcc.target/aarch64/mult-synth_2.c: Likewise.\n        * gcc.target/aarch64/mult-synth_3.c: Likewise.\n        * gcc.target/aarch64/mult-synth_4.c: Likewise.\n        * gcc.target/aarch64/mult-synth_5.c: Likewise.\n        * gcc.target/aarch64/mult-synth_6.c: Likewise.\n\nFrom-SVN: r222268", "tree": {"sha": "65294ecdcc9cb98ab5d1d0b01ea428adf669115c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65294ecdcc9cb98ab5d1d0b01ea428adf669115c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35430ca0c6c34943932b111cb55475f292a0a208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35430ca0c6c34943932b111cb55475f292a0a208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35430ca0c6c34943932b111cb55475f292a0a208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35430ca0c6c34943932b111cb55475f292a0a208/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ff093d85530159d74f77edc0da5d8bd176fe953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff093d85530159d74f77edc0da5d8bd176fe953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff093d85530159d74f77edc0da5d8bd176fe953"}], "stats": {"total": 135, "additions": 106, "deletions": 29}, "files": [{"sha": "1e56a373bdc07074226b44b88f14dc39e219204d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -1,3 +1,8 @@\n+2015-04-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* expmed.c: (synth_mult): Only assume overlapping\n+\tshift with previous steps in alg_sub_t_m2 case.\n+\n 2015-04-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65650"}, {"sha": "6679f501c2c1eafb63b93f60681dcc305847249a", "filename": "gcc/expmed.c", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -2664,14 +2664,28 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       m = exact_log2 (-orig_t + 1);\n       if (m >= 0 && m < maxm)\n \t{\n-\t  op_cost = shiftsub1_cost (speed, mode, m);\n+\t  op_cost = add_cost (speed, mode) + shift_cost (speed, mode, m);\n+\t  /* If the target has a cheap shift-and-subtract insn use\n+\t     that in preference to a shift insn followed by a sub insn.\n+\t     Assume that the shift-and-sub is \"atomic\" with a latency\n+\t     equal to it's cost, otherwise assume that on superscalar\n+\t     hardware the shift may be executed concurrently with the\n+\t     earlier steps in the algorithm.  */\n+\t  if (shiftsub1_cost (speed, mode, m) <= op_cost)\n+\t    {\n+\t      op_cost = shiftsub1_cost (speed, mode, m);\n+\t      op_latency = op_cost;\n+\t    }\n+\t  else\n+\t    op_latency = add_cost (speed, mode);\n+\n \t  new_limit.cost = best_cost.cost - op_cost;\n-\t  new_limit.latency = best_cost.latency - op_cost;\n+\t  new_limit.latency = best_cost.latency - op_latency;\n \t  synth_mult (alg_in, (unsigned HOST_WIDE_INT) (-orig_t + 1) >> m,\n \t\t      &new_limit, mode);\n \n \t  alg_in->cost.cost += op_cost;\n-\t  alg_in->cost.latency += op_cost;\n+\t  alg_in->cost.latency += op_latency;\n \t  if (CHEAPER_MULT_COST (&alg_in->cost, &best_cost))\n \t    {\n \t      best_cost = alg_in->cost;\n@@ -2704,20 +2718,12 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       if (t % d == 0 && t > d && m < maxm\n \t  && (!cache_hit || cache_alg == alg_add_factor))\n \t{\n-\t  /* If the target has a cheap shift-and-add instruction use\n-\t     that in preference to a shift insn followed by an add insn.\n-\t     Assume that the shift-and-add is \"atomic\" with a latency\n-\t     equal to its cost, otherwise assume that on superscalar\n-\t     hardware the shift may be executed concurrently with the\n-\t     earlier steps in the algorithm.  */\n \t  op_cost = add_cost (speed, mode) + shift_cost (speed, mode, m);\n-\t  if (shiftadd_cost (speed, mode, m) < op_cost)\n-\t    {\n-\t      op_cost = shiftadd_cost (speed, mode, m);\n-\t      op_latency = op_cost;\n-\t    }\n-\t  else\n-\t    op_latency = add_cost (speed, mode);\n+\t  if (shiftadd_cost (speed, mode, m) <= op_cost)\n+\t    op_cost = shiftadd_cost (speed, mode, m);\n+\n+\t  op_latency = op_cost;\n+\n \n \t  new_limit.cost = best_cost.cost - op_cost;\n \t  new_limit.latency = best_cost.latency - op_latency;\n@@ -2742,20 +2748,11 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       if (t % d == 0 && t > d && m < maxm\n \t  && (!cache_hit || cache_alg == alg_sub_factor))\n \t{\n-\t  /* If the target has a cheap shift-and-subtract insn use\n-\t     that in preference to a shift insn followed by a sub insn.\n-\t     Assume that the shift-and-sub is \"atomic\" with a latency\n-\t     equal to it's cost, otherwise assume that on superscalar\n-\t     hardware the shift may be executed concurrently with the\n-\t     earlier steps in the algorithm.  */\n \t  op_cost = add_cost (speed, mode) + shift_cost (speed, mode, m);\n-\t  if (shiftsub0_cost (speed, mode, m) < op_cost)\n-\t    {\n-\t      op_cost = shiftsub0_cost (speed, mode, m);\n-\t      op_latency = op_cost;\n-\t    }\n-\t  else\n-\t    op_latency = add_cost (speed, mode);\n+\t  if (shiftsub0_cost (speed, mode, m) <= op_cost)\n+\t    op_cost = shiftsub0_cost (speed, mode, m);\n+\n+\t  op_latency = op_cost;\n \n \t  new_limit.cost = best_cost.cost - op_cost;\n \t  new_limit.latency = best_cost.latency - op_latency;"}, {"sha": "c031a3afc880bd80803db070dd517cbe7c60c1fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -1,3 +1,12 @@\n+2015-04-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mult-synth_1.c: New test.\n+\t* gcc.target/aarch64/mult-synth_2.c: Likewise.\n+\t* gcc.target/aarch64/mult-synth_3.c: Likewise.\n+\t* gcc.target/aarch64/mult-synth_4.c: Likewise.\n+\t* gcc.target/aarch64/mult-synth_5.c: Likewise.\n+\t* gcc.target/aarch64/mult-synth_6.c: Likewise.\n+\n 2015-04-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65650"}, {"sha": "37f079d5beb21c5571e860f52bb0836ae85923bc", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_1.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+int\n+foo (int x)\n+{\n+  return x * 100;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4d2e5bf3dc16daaea21683736374288d230978bf", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_2.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+int\n+foo (int x)\n+{\n+  return x * 25;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "03e83e97b50f9a8b790885f99ebd5ef06bffd0c0", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_3.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+int\n+foo (int x)\n+{\n+  return x * 11;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "05a82bdffe0b0e330ce8e1094486017c56440dd5", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+long\n+foo (int x, int y)\n+{\n+   return (long)x * 6L;\n+}\n+\n+/* { dg-final { scan-assembler-times \"smull\\tx\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8cf3314aa2a8b0a5736211ed73a9546d7baa939a", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_5.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+int\n+foo (int x)\n+{\n+  return x * 10;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tw1\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e941b72351eb1524373c25e216d5366c34c50c49", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35430ca0c6c34943932b111cb55475f292a0a208/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_6.c?ref=35430ca0c6c34943932b111cb55475f292a0a208", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n+\n+int\n+foo (int x)\n+{\n+  return x * 20;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tw1\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}