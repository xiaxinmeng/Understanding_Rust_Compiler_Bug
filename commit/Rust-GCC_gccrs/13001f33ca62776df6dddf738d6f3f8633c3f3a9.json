{"sha": "13001f33ca62776df6dddf738d6f3f8633c3f3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwMDFmMzNjYTYyNzc2ZGY2ZGRkZjczOGQ2ZjNmODYzM2MzZjNhOQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-20T19:11:56Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-08-20T19:11:56Z"}, "message": "re PR fortran/49638 ([OOP] length parameter is ignored when overriding type bound character functions with constant length.)\n\n2011-08-20  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/49638\n\t* dependency.c (gfc_dep_compare_expr): Add new result value \"-3\".\n\t(gfc_check_element_vs_section,gfc_check_element_vs_element): Handle\n\tresult value \"-3\".\n        * frontend-passes.c (optimize_comparison): Ditto.\n\t* interface.c (gfc_check_typebound_override): Ditto.\n\n\n2011-08-20  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/49638\n\t* gfortran.dg/typebound_override_1.f90: Modified.\n\nFrom-SVN: r177932", "tree": {"sha": "0b566ef40080433f1d226346402ff9a2e006672f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b566ef40080433f1d226346402ff9a2e006672f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13001f33ca62776df6dddf738d6f3f8633c3f3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13001f33ca62776df6dddf738d6f3f8633c3f3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13001f33ca62776df6dddf738d6f3f8633c3f3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13001f33ca62776df6dddf738d6f3f8633c3f3a9/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894113c35c8cc3caa9b15860eb9ad06130776091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894113c35c8cc3caa9b15860eb9ad06130776091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894113c35c8cc3caa9b15860eb9ad06130776091"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "2e2a714dd2530bed1541fd122f2fe938b2e56503", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -1,3 +1,12 @@\n+2011-08-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/49638\n+\t* dependency.c (gfc_dep_compare_expr): Add new result value \"-3\".\n+\t(gfc_check_element_vs_section,gfc_check_element_vs_element): Handle\n+\tresult value \"-3\".\n+        * frontend-passes.c (optimize_comparison): Ditto.\n+\t* interface.c (gfc_check_typebound_override): Ditto.\n+\n 2011-08-19  Mikael Morin  <mikael.morin@sfr.fr>\n \n \tPR fortran/50129"}, {"sha": "c43af00c727ff88e49c8c292fe30d6ac2bd605aa", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -230,8 +230,12 @@ gfc_dep_compare_functions (gfc_expr *e1, gfc_expr *e2, bool impure_ok)\n \treturn -2;      \n }\n \n-/* Compare two values.  Returns 0 if e1 == e2, -1 if e1 < e2, +1 if e1 > e2,\n-   and -2 if the relationship could not be determined.  */\n+/* Compare two expressions.  Return values:\n+   * +1 if e1 > e2\n+   * 0 if e1 == e2\n+   * -1 if e1 < e2\n+   * -2 if the relationship could not be determined\n+   * -3 if e1 /= e2, but we cannot tell which one is larger.  */\n \n int\n gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n@@ -304,9 +308,9 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t  r = gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op2);\n \t  if (l == 0 && r == 0)\n \t    return 0;\n-\t  if (l == 0 && r != -2)\n+\t  if (l == 0 && r > -2)\n \t    return r;\n-\t  if (l != -2 && r == 0)\n+\t  if (l > -2 && r == 0)\n \t    return l;\n \t  if (l == 1 && r == 1)\n \t    return 1;\n@@ -317,9 +321,9 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t  r = gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op1);\n \t  if (l == 0 && r == 0)\n \t    return 0;\n-\t  if (l == 0 && r != -2)\n+\t  if (l == 0 && r > -2)\n \t    return r;\n-\t  if (l != -2 && r == 0)\n+\t  if (l > -2 && r == 0)\n \t    return l;\n \t  if (l == 1 && r == 1)\n \t    return 1;\n@@ -354,9 +358,9 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t  r = gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op2);\n \t  if (l == 0 && r == 0)\n \t    return 0;\n-\t  if (l != -2 && r == 0)\n+\t  if (l > -2 && r == 0)\n \t    return l;\n-\t  if (l == 0 && r != -2)\n+\t  if (l == 0 && r > -2)\n \t    return -r;\n \t  if (l == 1 && r == -1)\n \t    return 1;\n@@ -375,8 +379,8 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       l = gfc_dep_compare_expr (e1->value.op.op1, e2->value.op.op1);\n       r = gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op2);\n \n-      if (l == -2)\n-\treturn -2;\n+      if (l <= -2)\n+\treturn l;\n \n       if (l == 0)\n \t{\n@@ -387,7 +391,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t  if (e1_left->expr_type == EXPR_CONSTANT\n \t      && e2_left->expr_type == EXPR_CONSTANT\n \t      && e1_left->value.character.length\n-\t        != e2_left->value.character.length)\n+\t\t != e2_left->value.character.length)\n \t    return -2;\n \t  else\n \t    return r;\n@@ -411,7 +415,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n     }\n \n   if (e1->expr_type != e2->expr_type)\n-    return -2;\n+    return -3;\n \n   switch (e1->expr_type)\n     {\n@@ -434,7 +438,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       if (are_identical_variables (e1, e2))\n \treturn 0;\n       else\n-\treturn -2;\n+\treturn -3;\n \n     case EXPR_OP:\n       /* Intrinsic operators are the same if their operands are the same.  */\n@@ -1406,7 +1410,7 @@ gfc_check_element_vs_section( gfc_ref *lref, gfc_ref *rref, int n)\n       if (!start || !end)\n \treturn GFC_DEP_OVERLAP;\n       s = gfc_dep_compare_expr (start, end);\n-      if (s == -2)\n+      if (s <= -2)\n \treturn GFC_DEP_OVERLAP;\n       /* Assume positive stride.  */\n       if (s == -1)\n@@ -1553,7 +1557,7 @@ gfc_check_element_vs_element (gfc_ref *lref, gfc_ref *rref, int n)\n   if (contains_forall_index_p (r_start) || contains_forall_index_p (l_start))\n     return GFC_DEP_OVERLAP;\n \n-  if (i != -2)\n+  if (i > -2)\n     return GFC_DEP_NODEP;\n   return GFC_DEP_EQUAL;\n }"}, {"sha": "8f2b1d1350d88617b9b30cb87f84a66d92bc0de8", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -682,7 +682,7 @@ optimize_comparison (gfc_expr *e, gfc_intrinsic_op op)\n \t  && op1->ts.type != BT_COMPLEX && op2->ts.type != BT_COMPLEX))\n     {\n       eq = gfc_dep_compare_expr (op1, op2);\n-      if (eq == -2)\n+      if (eq <= -2)\n \t{\n \t  /* Replace A // B < A // C with B < C, and A // B < C // B\n \t     with A < C.  */"}, {"sha": "c6626972bb7422a8ae8d1561fc6b058f46d9cca4", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -3574,7 +3574,8 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n \t  switch (compval)\n \t  {\n \t    case -1:\n-\t    case 1:\n+\t    case  1:\n+\t    case -3:\n \t      gfc_error (\"Character length mismatch between '%s' at '%L' and \"\n \t\t\t \"overridden FUNCTION\", proc->name, &where);\n \t      return FAILURE;"}, {"sha": "d54fd2bd9bb8f00306feb5a083a5aa582b5e1ed2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -1,3 +1,8 @@\n+2011-08-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/49638\n+\t* gfortran.dg/typebound_override_1.f90: Modified.\n+\n 2011-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/48739"}, {"sha": "c2b71933ac0b882afe76a1c6062b018850cb57fe", "filename": "gcc/testsuite/gfortran.dg/typebound_override_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13001f33ca62776df6dddf738d6f3f8633c3f3a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90?ref=13001f33ca62776df6dddf738d6f3f8633c3f3a9", "patch": "@@ -23,7 +23,7 @@ module m\n      procedure, nopass :: b => b2  ! { dg-error \"should have matching result types and ranks\" }\n      procedure, nopass :: c => c2  ! { dg-warning \"Possible character length mismatch\" }\n      procedure, nopass :: d => d2  ! valid, check for commutativity (+,*)\n-     procedure, nopass :: e => e2  ! { dg-warning \"Possible character length mismatch\" }\n+     procedure, nopass :: e => e2  ! { dg-error \"Character length mismatch\" }\n   end type\n \n contains"}]}