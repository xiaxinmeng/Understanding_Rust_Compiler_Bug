{"sha": "56c24f18cce0da6405c5071b838844447fa81ac8", "node_id": "C_kwDOANBUbNoAKDU2YzI0ZjE4Y2NlMGRhNjQwNWM1MDcxYjgzODg0NDQ0N2ZhODFhYzg", "commit": {"author": {"name": "wangpc", "email": "pc.wang@linux.alibaba.com", "date": "2021-09-18T05:53:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-21T00:52:46Z"}, "message": "C++: add type checking for static local vector variable in template\n\nThis patch moves verify_type_context from start_decl_1 to cp_finish_decl to\ndo more type checking such as static local vector variable in C++ template.\n\n2021-08-06  wangpc  <pc.wang@linux.alibaba.com>\n\ngcc/cp/ChangeLog\n\n\t* decl.c (start_decl_1): Move verify_type_context to ...\n\t(cp_finish_decl): ... to here.\n\ngcc/testsuite/ChangeLog\n\n\t* g++.target/aarch64/sve/static-var-in-template.C: New test.", "tree": {"sha": "16a11409e01b62870a1786052a8b4709f36d6078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16a11409e01b62870a1786052a8b4709f36d6078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c24f18cce0da6405c5071b838844447fa81ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c24f18cce0da6405c5071b838844447fa81ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c24f18cce0da6405c5071b838844447fa81ac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c24f18cce0da6405c5071b838844447fa81ac8/comments", "author": {"login": "pcwang-thead", "id": 89008543, "node_id": "MDQ6VXNlcjg5MDA4NTQz", "avatar_url": "https://avatars.githubusercontent.com/u/89008543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwang-thead", "html_url": "https://github.com/pcwang-thead", "followers_url": "https://api.github.com/users/pcwang-thead/followers", "following_url": "https://api.github.com/users/pcwang-thead/following{/other_user}", "gists_url": "https://api.github.com/users/pcwang-thead/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwang-thead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwang-thead/subscriptions", "organizations_url": "https://api.github.com/users/pcwang-thead/orgs", "repos_url": "https://api.github.com/users/pcwang-thead/repos", "events_url": "https://api.github.com/users/pcwang-thead/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwang-thead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "624980241ec69afc7b354f81cc64a1fd77131f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624980241ec69afc7b354f81cc64a1fd77131f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624980241ec69afc7b354f81cc64a1fd77131f3e"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "722e540babaf4d649877efc10a7a08a4231a4dfc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c24f18cce0da6405c5071b838844447fa81ac8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c24f18cce0da6405c5071b838844447fa81ac8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56c24f18cce0da6405c5071b838844447fa81ac8", "patch": "@@ -5772,14 +5772,6 @@ start_decl_1 (tree decl, bool initialized)\n       cp_apply_type_quals_to_decl (cp_type_quals (type), decl);\n     }\n \n-  if (is_global_var (decl))\n-    {\n-      type_context_kind context = (DECL_THREAD_LOCAL_P (decl)\n-\t\t\t\t   ? TCTX_THREAD_STORAGE\n-\t\t\t\t   : TCTX_STATIC_STORAGE);\n-      verify_type_context (input_location, context, TREE_TYPE (decl));\n-    }\n-\n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?  */\n     {\n@@ -7977,6 +7969,14 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       && DECL_INITIALIZED_IN_CLASS_P (decl))\n     check_static_variable_definition (decl, type);\n \n+  if (!processing_template_decl && VAR_P (decl) && is_global_var (decl))\n+    {\n+      type_context_kind context = (DECL_THREAD_LOCAL_P (decl)\n+\t\t\t\t   ? TCTX_THREAD_STORAGE\n+\t\t\t\t   : TCTX_STATIC_STORAGE);\n+      verify_type_context (input_location, context, TREE_TYPE (decl));\n+    }\n+\n   if (init && TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       tree clone;"}, {"sha": "74237ff7c579de5d0893578b1218188a45422412", "filename": "gcc/testsuite/g++.target/aarch64/sve/static-var-in-template.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c24f18cce0da6405c5071b838844447fa81ac8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fstatic-var-in-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c24f18cce0da6405c5071b838844447fa81ac8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fstatic-var-in-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fstatic-var-in-template.C?ref=56c24f18cce0da6405c5071b838844447fa81ac8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+template <int N>\n+void f()\n+{\n+    static svbool_t pg = svwhilelt_b64(0, N);\n+}\n+\n+int main(int argc, char **argv)\n+{\n+    f<2>();\n+    return 0;\n+}\n+\n+/* { dg-error \"SVE type 'svbool_t' does not have a fixed size\" \"\" { target *-*-* } 0 } */"}]}