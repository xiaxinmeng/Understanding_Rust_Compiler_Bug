{"sha": "627121b6996146d7b14f2ad848f416682b1ce0fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3MTIxYjY5OTYxNDZkN2IxNGYyYWQ4NDhmNDE2NjgyYjFjZTBmZQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-22T04:17:34Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-22T11:24:37Z"}, "message": "Added code to expand cfg! macros\n\nMoved function body to prevent compile issues\n\nMoved around some definitions in rust-ast.h in attempt to prevent compile error", "tree": {"sha": "a3681b6a59e597860e51cfb742b866c64533efd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3681b6a59e597860e51cfb742b866c64533efd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/627121b6996146d7b14f2ad848f416682b1ce0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627121b6996146d7b14f2ad848f416682b1ce0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627121b6996146d7b14f2ad848f416682b1ce0fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627121b6996146d7b14f2ad848f416682b1ce0fe/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30dd20c0098948de74f6a18978e78e2950782975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30dd20c0098948de74f6a18978e78e2950782975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30dd20c0098948de74f6a18978e78e2950782975"}], "stats": {"total": 708, "additions": 446, "deletions": 262}, "files": [{"sha": "e6bcdb37d5f3c6697883b9f260f070e028f73c85", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -4628,8 +4628,8 @@ ModuleBodied::add_crate_name (std::vector<std::string> &names) const\n void\n Attribute::parse_attr_to_meta_item ()\n {\n-  // only parse if has attribute input\n-  if (!has_attr_input ())\n+  // only parse if has attribute input and not already parsed\n+  if (!has_attr_input () || is_parsed_to_meta_item ())\n     return;\n \n   std::unique_ptr<AttrInput> converted_input (\n@@ -4639,7 +4639,7 @@ Attribute::parse_attr_to_meta_item ()\n     attr_input = std::move (converted_input);\n }\n \n-AttrInput *\n+AttrInputMetaItemContainer *\n DelimTokenTree::parse_to_meta_item () const\n {\n   // must have token trees\n@@ -5391,34 +5391,40 @@ AttrInputMetaItemContainer::separate_cfg_attrs () const\n }\n \n bool\n-Attribute::check_cfg_predicate (const Session &session)\n+Attribute::check_cfg_predicate (const Session &session) const\n {\n   /* assume that cfg predicate actually can exist, i.e. attribute has cfg or\n    * cfg_attr path */\n   if (!has_attr_input ()\n       || (path.as_string () != \"cfg\" && path.as_string () != \"cfg_attr\"))\n     return false;\n-\n-  // TODO: maybe replace with storing a \"has been parsed\" variable?\n-  parse_attr_to_meta_item ();\n-  // can't be const because of this anyway\n+  \n+  // assume that it has already been parsed\n+  if (!is_parsed_to_meta_item ())\n+    return false;\n \n   return attr_input->check_cfg_predicate (session);\n }\n \n std::vector<Attribute>\n-Attribute::separate_cfg_attrs ()\n+Attribute::separate_cfg_attrs () const\n {\n   if (!has_attr_input () || path.as_string () != \"cfg_attr\")\n     return {};\n \n-  // TODO: maybe replace with storing a \"has been parsed\" variable?\n-  parse_attr_to_meta_item ();\n-  // can't be const because of this anyway\n+  // assume that it has already been parsed\n+  if (!is_parsed_to_meta_item ())\n+    return {};\n \n   return attr_input->separate_cfg_attrs ();\n }\n \n+bool \n+Attribute::is_parsed_to_meta_item () const \n+{ \n+  return has_attr_input () && attr_input->is_meta_item (); \n+}\n+\n /* Visitor implementations - these are short but inlining can't happen anyway\n  * due to virtual functions and I didn't want to make the ast header includes\n  * any longer than they already are. */"}, {"sha": "8ca89fa6893bc94fbf26e0b7f0644eac1e4c7128", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 173, "deletions": 123, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -362,6 +362,11 @@ class SimplePath\n   }\n };\n \n+// path-to-string inverse comparison operator\n+inline bool operator!= (const SimplePath& lhs, const std::string &rhs) {\n+  return !(lhs == rhs);\n+}\n+\n // forward decl for Attribute\n class AttrInput;\n \n@@ -392,27 +397,9 @@ struct Attribute\n   // default destructor\n   ~Attribute () = default;\n \n-  // Copy constructor must deep copy attr_input as unique pointer\n-  /*Attribute (Attribute const &other) : path (other.path), locus (other.locus)\n-  {\n-    // guard to protect from null pointer dereference\n-    if (other.attr_input != nullptr)\n-      attr_input = other.attr_input->clone_attr_input ();\n-  }*/\n   // no point in being defined inline as requires virtual call anyway\n   Attribute (const Attribute &other);\n \n-  // overload assignment operator to use custom clone method\n-  /*Attribute &operator= (Attribute const &other)\n-  {\n-    path = other.path;\n-    locus = other.locus;\n-    // guard to protect from null pointer dereference\n-    if (other.attr_input != nullptr)\n-      attr_input = other.attr_input->clone_attr_input ();\n-\n-    return *this;\n-  }*/\n   // no point in being defined inline as requires virtual call anyway\n   Attribute &operator= (const Attribute &other);\n \n@@ -489,7 +476,7 @@ struct Attribute\n \n   std::string as_string () const;\n \n-  // TODO: does this require visitor pattern as not polymorphic?\n+  // no visitor pattern as not currently polymorphic\n \n   const SimplePath &get_path () const { return path; }\n   SimplePath &get_path () { return path; }\n@@ -498,10 +485,15 @@ struct Attribute\n   void parse_attr_to_meta_item ();\n \n   /* Determines whether cfg predicate is true and item with attribute should not\n-   * be stripped. */\n-  bool check_cfg_predicate (const Session &session);\n+   * be stripped. Attribute body must already be parsed to meta item. */\n+  bool check_cfg_predicate (const Session &session) const;\n+\n+  // Returns whether body has been parsed to meta item form or not.\n+  bool is_parsed_to_meta_item () const;\n \n-  std::vector<Attribute> separate_cfg_attrs ();\n+  /* Returns any attributes generated from cfg_attr attributes. Attribute body\n+   * must already be parsed to meta item. */\n+  std::vector<Attribute> separate_cfg_attrs () const;\n \n protected:\n   // not virtual as currently no subclasses of Attribute, but could be in future\n@@ -534,99 +526,14 @@ class AttrInput\n \n   virtual std::vector<Attribute> separate_cfg_attrs () const { return {}; }\n \n+  // Returns whether attr input has been parsed to meta item syntax.\n+  virtual bool is_meta_item () const = 0;\n+\n protected:\n   // pure virtual clone implementation\n   virtual AttrInput *clone_attr_input_impl () const = 0;\n };\n \n-// A token tree with delimiters\n-class DelimTokenTree : public TokenTree, public AttrInput\n-{\n-  DelimType delim_type;\n-  std::vector<std::unique_ptr<TokenTree> > token_trees;\n-  Location locus;\n-\n-protected:\n-  DelimTokenTree *clone_delim_tok_tree_impl () const\n-  {\n-    return new DelimTokenTree (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning a DelimTokenTree\n-   * object */\n-  DelimTokenTree *clone_attr_input_impl () const override\n-  {\n-    return clone_delim_tok_tree_impl ();\n-  }\n-\n-  /* Use covariance to implement clone function as returning a DelimTokenTree\n-   * object */\n-  DelimTokenTree *clone_token_tree_impl () const override\n-  {\n-    return clone_delim_tok_tree_impl ();\n-  }\n-\n-public:\n-  DelimTokenTree (DelimType delim_type,\n-\t\t  std::vector<std::unique_ptr<TokenTree> > token_trees\n-\t\t  = std::vector<std::unique_ptr<TokenTree> > (),\n-\t\t  Location locus = Location ())\n-    : delim_type (delim_type), token_trees (std::move (token_trees)),\n-      locus (locus)\n-  {}\n-\n-  // Copy constructor with vector clone\n-  DelimTokenTree (DelimTokenTree const &other)\n-    : delim_type (other.delim_type), locus (other.locus)\n-  {\n-    token_trees.reserve (other.token_trees.size ());\n-    for (const auto &e : other.token_trees)\n-      token_trees.push_back (e->clone_token_tree ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  DelimTokenTree &operator= (DelimTokenTree const &other)\n-  {\n-    delim_type = other.delim_type;\n-    locus = other.locus;\n-\n-    token_trees.reserve (other.token_trees.size ());\n-    for (const auto &e : other.token_trees)\n-      token_trees.push_back (e->clone_token_tree ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  DelimTokenTree (DelimTokenTree &&other) = default;\n-  DelimTokenTree &operator= (DelimTokenTree &&other) = default;\n-\n-  static DelimTokenTree create_empty () { return DelimTokenTree (PARENS); }\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  bool check_cfg_predicate (const Session &) const override\n-  {\n-    // this should never be called - should be converted first\n-    return false;\n-  }\n-\n-  AttrInput *parse_to_meta_item () const override;\n-\n-  std::vector<std::unique_ptr<Token> > to_token_stream () const override;\n-\n-  std::unique_ptr<DelimTokenTree> clone_delim_token_tree () const\n-  {\n-    return std::unique_ptr<DelimTokenTree> (clone_delim_tok_tree_impl ());\n-  }\n-};\n-\n-/* Forward decl - definition moved to rust-expr.h as it requires LiteralExpr to\n- * be defined */\n-class AttrInputLiteral;\n-\n // Forward decl - defined in rust-macro.h\n class MetaNameValueStr;\n \n@@ -679,7 +586,26 @@ class AttrInputMetaItemContainer : public AttrInput\n     : items (std::move (items))\n   {}\n \n-  // no destructor definition required\n+  // copy constructor with vector clone\n+  AttrInputMetaItemContainer (const AttrInputMetaItemContainer &other)\n+  {\n+    items.reserve (other.items.size ());\n+    for (const auto &e : other.items)\n+      items.push_back (e->clone_meta_item_inner ());\n+  }\n+\n+  // copy assignment operator with vector clone\n+  AttrInputMetaItemContainer &\n+  operator= (const AttrInputMetaItemContainer &other)\n+  {\n+    AttrInput::operator= (other);\n+\n+    items.reserve (other.items.size ());\n+    for (const auto &e : other.items)\n+      items.push_back (e->clone_meta_item_inner ());\n+\n+    return *this;\n+  }\n \n   // default move constructors\n   AttrInputMetaItemContainer (AttrInputMetaItemContainer &&other) = default;\n@@ -702,6 +628,12 @@ class AttrInputMetaItemContainer : public AttrInput\n \n   std::vector<Attribute> separate_cfg_attrs () const override;\n \n+  bool is_meta_item () const override { return true; }\n+\n+  // TODO: this mutable getter seems dodgy\n+  std::vector<std::unique_ptr<MetaItemInner> > &get_items () { return items; }\n+  const std::vector<std::unique_ptr<MetaItemInner> > &get_items () const { return items; }\n+\n protected:\n   // Use covariance to implement clone function as returning this type\n   AttrInputMetaItemContainer *clone_attr_input_impl () const override\n@@ -713,29 +645,98 @@ class AttrInputMetaItemContainer : public AttrInput\n   {\n     return new AttrInputMetaItemContainer (*this);\n   }\n+};\n \n-  // copy constructor with vector clone\n-  AttrInputMetaItemContainer (const AttrInputMetaItemContainer &other)\n+// A token tree with delimiters\n+class DelimTokenTree : public TokenTree, public AttrInput\n+{\n+  DelimType delim_type;\n+  std::vector<std::unique_ptr<TokenTree> > token_trees;\n+  Location locus;\n+\n+protected:\n+  DelimTokenTree *clone_delim_tok_tree_impl () const\n   {\n-    items.reserve (other.items.size ());\n-    for (const auto &e : other.items)\n-      items.push_back (e->clone_meta_item_inner ());\n+    return new DelimTokenTree (*this);\n   }\n \n-  // copy assignment operator with vector clone\n-  AttrInputMetaItemContainer &\n-  operator= (const AttrInputMetaItemContainer &other)\n+  /* Use covariance to implement clone function as returning a DelimTokenTree\n+   * object */\n+  DelimTokenTree *clone_attr_input_impl () const override\n   {\n-    AttrInput::operator= (other);\n+    return clone_delim_tok_tree_impl ();\n+  }\n \n-    items.reserve (other.items.size ());\n-    for (const auto &e : other.items)\n-      items.push_back (e->clone_meta_item_inner ());\n+  /* Use covariance to implement clone function as returning a DelimTokenTree\n+   * object */\n+  DelimTokenTree *clone_token_tree_impl () const override\n+  {\n+    return clone_delim_tok_tree_impl ();\n+  }\n+\n+public:\n+  DelimTokenTree (DelimType delim_type,\n+\t\t  std::vector<std::unique_ptr<TokenTree> > token_trees\n+\t\t  = std::vector<std::unique_ptr<TokenTree> > (),\n+\t\t  Location locus = Location ())\n+    : delim_type (delim_type), token_trees (std::move (token_trees)),\n+      locus (locus)\n+  {}\n+\n+  // Copy constructor with vector clone\n+  DelimTokenTree (DelimTokenTree const &other)\n+    : delim_type (other.delim_type), locus (other.locus)\n+  {\n+    token_trees.reserve (other.token_trees.size ());\n+    for (const auto &e : other.token_trees)\n+      token_trees.push_back (e->clone_token_tree ());\n+  }\n+\n+  // overloaded assignment operator with vector clone\n+  DelimTokenTree &operator= (DelimTokenTree const &other)\n+  {\n+    delim_type = other.delim_type;\n+    locus = other.locus;\n+\n+    token_trees.reserve (other.token_trees.size ());\n+    for (const auto &e : other.token_trees)\n+      token_trees.push_back (e->clone_token_tree ());\n \n     return *this;\n   }\n+\n+  // move constructors\n+  DelimTokenTree (DelimTokenTree &&other) = default;\n+  DelimTokenTree &operator= (DelimTokenTree &&other) = default;\n+\n+  static DelimTokenTree create_empty () { return DelimTokenTree (PARENS); }\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  bool check_cfg_predicate (const Session &) const override\n+  {\n+    // this should never be called - should be converted first\n+    return false;\n+  }\n+\n+  AttrInputMetaItemContainer *parse_to_meta_item () const override;\n+\n+  std::vector<std::unique_ptr<Token> > to_token_stream () const override;\n+\n+  std::unique_ptr<DelimTokenTree> clone_delim_token_tree () const\n+  {\n+    return std::unique_ptr<DelimTokenTree> (clone_delim_tok_tree_impl ());\n+  }\n+\n+  bool is_meta_item () const override { return false; }\n };\n \n+/* Forward decl - definition moved to rust-expr.h as it requires LiteralExpr to\n+ * be defined */\n+class AttrInputLiteral;\n+\n // abstract base meta item class\n class MetaItem : public MetaItemInner\n {\n@@ -1378,15 +1379,64 @@ struct MacroInvocData\n   SimplePath path;\n   DelimTokenTree token_tree;\n \n+  // One way of parsing the macro. Probably not applicable for all macros.\n+  std::vector<std::unique_ptr<MetaItemInner> > parsed_items;\n+  bool parsed_to_meta_item = false;\n+\n public:\n   std::string as_string () const;\n \n   MacroInvocData (SimplePath path, DelimTokenTree token_tree) \n     : path (std::move (path)), token_tree (std::move (token_tree)) {}\n   \n+  // Copy constructor with vector clone\n+  MacroInvocData (const MacroInvocData &other) : path (other.path), token_tree (other.token_tree), parsed_to_meta_item (other.parsed_to_meta_item) {\n+    parsed_items.reserve (other.parsed_items.size ());\n+    for (const auto &e : other.parsed_items)\n+      parsed_items.push_back (e->clone_meta_item_inner ());\n+  }\n+\n+  // Copy assignment operator with vector clone\n+  MacroInvocData &operator= (const MacroInvocData &other)\n+  {\n+    path = other.path;\n+    token_tree = other.token_tree;\n+    parsed_to_meta_item = other.parsed_to_meta_item;\n+\n+    parsed_items.reserve (other.parsed_items.size ());\n+    for (const auto &e : other.parsed_items)\n+      parsed_items.push_back (e->clone_meta_item_inner ());\n+\n+    return *this;\n+  }\n+\n+  // Move constructors\n+  MacroInvocData (MacroInvocData &&other) = default;\n+  MacroInvocData &operator= (MacroInvocData &&other) = default;\n+  \n   // Invalid if path is empty, so base stripping on that.\n   void mark_for_strip () { path = SimplePath::create_empty (); }\n   bool is_marked_for_strip () const { return path.is_empty (); }\n+\n+  // Returns whether the macro has been parsed already.\n+  bool is_parsed () const { return parsed_to_meta_item; }\n+  // TODO: update on other ways of parsing it\n+\n+  // TODO: this mutable getter seems kinda dodgy\n+  DelimTokenTree &get_delim_tok_tree () { return token_tree; }\n+  const DelimTokenTree &get_delim_tok_tree () const { return token_tree; }\n+\n+  // TODO: this mutable getter seems kinda dodgy\n+  SimplePath &get_path () { return path; }\n+  const SimplePath &get_path () const { return path; }\n+\n+  void set_meta_item_output (std::vector<std::unique_ptr<MetaItemInner> > new_items) \n+  { \n+    parsed_items = std::move (new_items); \n+  }\n+  // TODO: mutable getter seems kinda dodgy\n+  std::vector<std::unique_ptr<MetaItemInner> > &get_meta_items () { return parsed_items; }\n+  const std::vector<std::unique_ptr<MetaItemInner> > &get_meta_items () const { return parsed_items; }\n };\n \n /* A macro invocation item (or statement) AST node (i.e. semi-coloned macro"}, {"sha": "89718bc0c74c1e7ed63f3bca6a248031d93f3878", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -121,6 +121,8 @@ class AttrInputLiteral : public AttrInput\n    * cfg */\n   bool check_cfg_predicate (const Session &) const override { return false; }\n \n+  bool is_meta_item () const override { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "97e455e394225e3463a5a3f2183211e55c94174d", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 183, "deletions": 126, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -22,7 +22,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &field_attrs = field.get_outer_attrs ();\n \texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg (field_attrs))\n+\tif (expander.fails_cfg_with_expand (field_attrs))\n \t  {\n \t    it = fields.erase (it);\n \t    continue;\n@@ -39,14 +39,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t++it;\n       }\n \n-    #if 0\n+#if 0\n     for (int i = 0; i < fields.size ();)\n       {\n \tauto &field = fields[i];\n \n \tauto &field_attrs = field.get_outer_attrs ();\n \texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg (field_attrs))\n+\tif (expander.fails_cfg_with_expand (field_attrs))\n \t  {\n \t    fields.erase (fields.begin () + i);\n \t    continue;\n@@ -62,7 +62,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \ti++;\n       }\n-      #endif\n+#endif\n   }\n \n   void expand_tuple_fields (std::vector<AST::TupleField> &fields)\n@@ -73,7 +73,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &field_attrs = field.get_outer_attrs ();\n \texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg (field_attrs))\n+\tif (expander.fails_cfg_with_expand (field_attrs))\n \t  {\n \t    it = fields.erase (it);\n \t    continue;\n@@ -90,14 +90,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t++it;\n       }\n \n-    #if 0\n+#if 0\n     for (int i = 0; i < fields.size ();)\n       {\n \tauto &field = fields[i];\n \n \tauto &field_attrs = field.get_outer_attrs ();\n \texpander.expand_cfg_attrs (field_attrs);\n-\tif (expander.fails_cfg (field_attrs))\n+\tif (expander.fails_cfg_with_expand (field_attrs))\n \t  {\n \t    fields.erase (fields.begin () + i);\n \t    continue;\n@@ -113,7 +113,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \ti++;\n       }\n-      #endif\n+#endif\n   }\n \n   void expand_function_params (std::vector<AST::FunctionParam> &params)\n@@ -124,7 +124,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    it = params.erase (it);\n \t    continue;\n@@ -147,14 +147,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t++it;\n       }\n \n-    #if 0\n+#if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    params.erase (params.begin () + i);\n \t    continue;\n@@ -176,7 +176,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment\n \ti++;\n       }\n-      #endif\n+#endif\n   }\n \n   void expand_generic_args (AST::GenericArgs &args)\n@@ -229,7 +229,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    it = params.erase (it);\n \t    continue;\n@@ -254,14 +254,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t++it;\n       }\n \n-    #if 0\n+#if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    params.erase (params.begin () + i);\n \t    continue;\n@@ -285,7 +285,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if found nothing else so far\n \ti++;\n       }\n-    #endif\n+#endif\n   }\n \n   void expand_self_param (AST::SelfParam &self_param)\n@@ -359,9 +359,8 @@ class AttrVisitor : public AST::ASTVisitor\n     if (decl.has_where_clause ())\n       expand_where_clause (decl.get_where_clause ());\n   }\n-  \n-  template <typename T>\n-  void expand_pointer_allow_strip (T &values) \n+\n+  template <typename T> void expand_pointer_allow_strip (T &values)\n   {\n     for (auto it = values.begin (); it != values.end ();)\n       {\n@@ -393,7 +392,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (ident_expr.get_outer_attrs ());\n-    if (expander.fails_cfg (ident_expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (ident_expr.get_outer_attrs ()))\n       {\n \tident_expr.mark_for_strip ();\n \treturn;\n@@ -411,7 +410,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (macro_invoc.get_outer_attrs ());\n-    if (expander.fails_cfg (macro_invoc.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (macro_invoc.get_outer_attrs ()))\n       {\n \tmacro_invoc.mark_for_strip ();\n \treturn;\n@@ -428,7 +427,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (path.get_outer_attrs ());\n-    if (expander.fails_cfg (path.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (path.get_outer_attrs ()))\n       {\n \tpath.mark_for_strip ();\n \treturn;\n@@ -484,7 +483,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (path.get_outer_attrs ());\n-    if (expander.fails_cfg (path.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (path.get_outer_attrs ()))\n       {\n \tpath.mark_for_strip ();\n \treturn;\n@@ -511,7 +510,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -533,7 +532,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -553,7 +552,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -573,7 +572,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -593,7 +592,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -751,7 +750,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -760,7 +759,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -824,7 +823,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -833,7 +832,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says there are separate\n      * inner attributes, not just outer attributes of inner exprs */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -851,7 +850,7 @@ class AttrVisitor : public AST::ASTVisitor\n      * having expansion code anyway. TODO */\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -881,7 +880,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -890,7 +889,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -920,7 +919,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -940,7 +939,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -949,7 +948,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -992,7 +991,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1001,7 +1000,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1040,7 +1039,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1049,7 +1048,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1076,7 +1075,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1085,7 +1084,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says these are inner\n      * attributes, not outer attributes of inner expr */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1122,7 +1121,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1165,7 +1164,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1194,7 +1193,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1244,7 +1243,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1284,7 +1283,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1328,7 +1327,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1348,7 +1347,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1370,7 +1369,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1379,7 +1378,7 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip test based on inner attrs - spec says there are inner\n      * attributes, not just outer attributes of inner stmts */\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1419,7 +1418,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1448,7 +1447,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1458,7 +1457,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1581,7 +1580,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1611,7 +1610,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1629,7 +1628,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1647,7 +1646,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1673,7 +1672,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1707,7 +1706,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1740,7 +1739,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1766,7 +1765,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1800,7 +1799,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1834,7 +1833,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1869,7 +1868,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1903,7 +1902,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1945,7 +1944,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -1987,7 +1986,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -2030,15 +2029,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n       }\n \n     // inner attr strip test\n     expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg (expr.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -2061,7 +2060,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// strip match case based on outer attributes in match arm\n \tauto &match_arm = match_case.get_arm ();\n \texpander.expand_cfg_attrs (match_arm.get_outer_attrs ());\n-\tif (expander.fails_cfg (match_arm.get_outer_attrs ()))\n+\tif (expander.fails_cfg_with_expand (match_arm.get_outer_attrs ()))\n \t  {\n \t    // strip match case\n \t    it = match_cases.erase (it);\n@@ -2110,7 +2109,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// strip match case based on outer attributes in match arm\n \tauto &match_arm = match_case.get_arm ();\n \texpander.expand_cfg_attrs (match_arm.get_outer_attrs ());\n-\tif (expander.fails_cfg (match_arm.get_outer_attrs ()))\n+\tif (expander.fails_cfg_with_expand (match_arm.get_outer_attrs ()))\n \t  {\n \t    // strip match case\n \t    match_cases.erase (match_cases.begin () + i);\n@@ -2156,7 +2155,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -2175,7 +2174,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg (expr.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n       {\n \texpr.mark_for_strip ();\n \treturn;\n@@ -2232,7 +2231,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (method.get_outer_attrs ());\n-    if (expander.fails_cfg (method.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (method.get_outer_attrs ()))\n       {\n \tmethod.mark_for_strip ();\n \treturn;\n@@ -2277,15 +2276,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (module.get_outer_attrs ());\n-    if (expander.fails_cfg (module.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (module.get_outer_attrs ()))\n       {\n \tmodule.mark_for_strip ();\n \treturn;\n       }\n \n     // strip test based on inner attrs\n     expander.expand_cfg_attrs (module.get_inner_attrs ());\n-    if (expander.fails_cfg (module.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (module.get_inner_attrs ()))\n       {\n \tmodule.mark_for_strip ();\n \treturn;\n@@ -2314,7 +2313,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (module.get_outer_attrs ());\n-    if (expander.fails_cfg (module.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (module.get_outer_attrs ()))\n       {\n \tmodule.mark_for_strip ();\n \treturn;\n@@ -2324,7 +2323,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (crate.get_outer_attrs ());\n-    if (expander.fails_cfg (crate.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (crate.get_outer_attrs ()))\n       {\n \tcrate.mark_for_strip ();\n \treturn;\n@@ -2346,7 +2345,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (use_decl.get_outer_attrs ());\n-    if (expander.fails_cfg (use_decl.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (use_decl.get_outer_attrs ()))\n       {\n \tuse_decl.mark_for_strip ();\n \treturn;\n@@ -2356,7 +2355,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (function.get_outer_attrs ());\n-    if (expander.fails_cfg (function.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (function.get_outer_attrs ()))\n       {\n \tfunction.mark_for_strip ();\n \treturn;\n@@ -2396,7 +2395,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (type_alias.get_outer_attrs ());\n-    if (expander.fails_cfg (type_alias.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (type_alias.get_outer_attrs ()))\n       {\n \ttype_alias.mark_for_strip ();\n \treturn;\n@@ -2419,7 +2418,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (struct_item.get_outer_attrs ());\n-    if (expander.fails_cfg (struct_item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (struct_item.get_outer_attrs ()))\n       {\n \tstruct_item.mark_for_strip ();\n \treturn;\n@@ -2440,7 +2439,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (tuple_struct.get_outer_attrs ());\n-    if (expander.fails_cfg (tuple_struct.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (tuple_struct.get_outer_attrs ()))\n       {\n \ttuple_struct.mark_for_strip ();\n \treturn;\n@@ -2461,7 +2460,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2471,7 +2470,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2485,7 +2484,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2499,7 +2498,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2519,7 +2518,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (enum_item.get_outer_attrs ());\n-    if (expander.fails_cfg (enum_item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (enum_item.get_outer_attrs ()))\n       {\n \tenum_item.mark_for_strip ();\n \treturn;\n@@ -2556,7 +2555,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (union_item.get_outer_attrs ());\n-    if (expander.fails_cfg (union_item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (union_item.get_outer_attrs ()))\n       {\n \tunion_item.mark_for_strip ();\n \treturn;\n@@ -2577,7 +2576,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (const_item.get_outer_attrs ());\n-    if (expander.fails_cfg (const_item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (const_item.get_outer_attrs ()))\n       {\n \tconst_item.mark_for_strip ();\n \treturn;\n@@ -2604,7 +2603,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (static_item.get_outer_attrs ());\n-    if (expander.fails_cfg (static_item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (static_item.get_outer_attrs ()))\n       {\n \tstatic_item.mark_for_strip ();\n \treturn;\n@@ -2631,7 +2630,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2656,7 +2655,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2681,7 +2680,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2711,7 +2710,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2728,15 +2727,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (trait.get_outer_attrs ());\n-    if (expander.fails_cfg (trait.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (trait.get_outer_attrs ()))\n       {\n \ttrait.mark_for_strip ();\n \treturn;\n       }\n \n     // strip test based on inner attrs\n     expander.expand_cfg_attrs (trait.get_inner_attrs ());\n-    if (expander.fails_cfg (trait.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (trait.get_inner_attrs ()))\n       {\n \ttrait.mark_for_strip ();\n \treturn;\n@@ -2779,15 +2778,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (impl.get_outer_attrs ());\n-    if (expander.fails_cfg (impl.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (impl.get_outer_attrs ()))\n       {\n \timpl.mark_for_strip ();\n \treturn;\n       }\n \n     // strip test based on inner attrs\n     expander.expand_cfg_attrs (impl.get_inner_attrs ());\n-    if (expander.fails_cfg (impl.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (impl.get_inner_attrs ()))\n       {\n \timpl.mark_for_strip ();\n \treturn;\n@@ -2829,15 +2828,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (impl.get_outer_attrs ());\n-    if (expander.fails_cfg (impl.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (impl.get_outer_attrs ()))\n       {\n \timpl.mark_for_strip ();\n \treturn;\n       }\n \n     // strip test based on inner attrs\n     expander.expand_cfg_attrs (impl.get_inner_attrs ());\n-    if (expander.fails_cfg (impl.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (impl.get_inner_attrs ()))\n       {\n \timpl.mark_for_strip ();\n \treturn;\n@@ -2885,7 +2884,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2901,7 +2900,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // strip test based on outer attrs\n     expander.expand_cfg_attrs (item.get_outer_attrs ());\n-    if (expander.fails_cfg (item.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n       {\n \titem.mark_for_strip ();\n \treturn;\n@@ -2920,7 +2919,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    it = params.erase (it);\n \t    continue;\n@@ -2942,7 +2941,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    params.erase (params.begin () + i);\n \t    continue;\n@@ -2981,15 +2980,15 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (block.get_outer_attrs ());\n-    if (expander.fails_cfg (block.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (block.get_outer_attrs ()))\n       {\n \tblock.mark_for_strip ();\n \treturn;\n       }\n \n     // strip test based on inner attrs\n     expander.expand_cfg_attrs (block.get_inner_attrs ());\n-    if (expander.fails_cfg (block.get_inner_attrs ()))\n+    if (expander.fails_cfg_with_expand (block.get_inner_attrs ()))\n       {\n \tblock.mark_for_strip ();\n \treturn;\n@@ -3023,7 +3022,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (rules_def.get_outer_attrs ());\n-    if (expander.fails_cfg (rules_def.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (rules_def.get_outer_attrs ()))\n       {\n \trules_def.mark_for_strip ();\n \treturn;\n@@ -3035,7 +3034,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (macro_invoc.get_outer_attrs ());\n-    if (expander.fails_cfg (macro_invoc.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (macro_invoc.get_outer_attrs ()))\n       {\n \tmacro_invoc.mark_for_strip ();\n \treturn;\n@@ -3110,7 +3109,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (field.get_outer_attrs ());\n-    if (expander.fails_cfg (field.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n       {\n \tfield.mark_for_strip ();\n \treturn;\n@@ -3127,7 +3126,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (field.get_outer_attrs ());\n-    if (expander.fails_cfg (field.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n       {\n \tfield.mark_for_strip ();\n \treturn;\n@@ -3144,7 +3143,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (field.get_outer_attrs ());\n-    if (expander.fails_cfg (field.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n       {\n \tfield.mark_for_strip ();\n \treturn;\n@@ -3187,7 +3186,7 @@ class AttrVisitor : public AST::ASTVisitor\n     if (elems.has_etc ())\n       {\n \texpander.expand_cfg_attrs (elems.get_etc_outer_attrs ());\n-\tif (expander.fails_cfg (elems.get_etc_outer_attrs ()))\n+\tif (expander.fails_cfg_with_expand (elems.get_etc_outer_attrs ()))\n \t  elems.strip_etc ();\n       }\n   }\n@@ -3310,7 +3309,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     // initial strip test based on outer attrs\n     expander.expand_cfg_attrs (stmt.get_outer_attrs ());\n-    if (expander.fails_cfg (stmt.get_outer_attrs ()))\n+    if (expander.fails_cfg_with_expand (stmt.get_outer_attrs ()))\n       {\n \tstmt.mark_for_strip ();\n \treturn;\n@@ -3498,7 +3497,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    it = params.erase (it);\n \t    continue;\n@@ -3520,7 +3519,7 @@ class AttrVisitor : public AST::ASTVisitor\n \n \tauto &param_attrs = param.get_outer_attrs ();\n \texpander.expand_cfg_attrs (param_attrs);\n-\tif (expander.fails_cfg (param_attrs))\n+\tif (expander.fails_cfg_with_expand (param_attrs))\n \t  {\n \t    params.erase (params.begin () + i);\n \t    continue;\n@@ -3553,10 +3552,46 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n };\n \n-AST::Literal \n+void\n+MacroExpander::parse_macro_to_meta_item (AST::MacroInvocData &invoc)\n+{\n+  // only parse if not already parsed\n+  if (invoc.is_parsed ())\n+    return;\n+\n+  std::unique_ptr<AST::AttrInputMetaItemContainer> converted_input (\n+    invoc.get_delim_tok_tree ().parse_to_meta_item ());\n+  \n+  if (converted_input == nullptr) \n+  {\n+    fprintf (stderr, \"DEBUG: failed to parse macro to meta item\\n\");\n+    // TODO: do something now? is this an actual error?\n+  } \n+  else\n+  {\n+    std::vector<std::unique_ptr<AST::MetaItemInner> > meta_items (std::move (converted_input->get_items ()));\n+    invoc.set_meta_item_output (std::move (meta_items));\n+  }\n+}\n+\n+AST::Literal\n MacroExpander::expand_cfg_macro (AST::MacroInvocData &invoc)\n {\n-  return AST::Literal::create_error ();\n+  // only allow on cfg macros\n+  if (invoc.get_path () != \"cfg\")\n+    return AST::Literal::create_error ();\n+\n+  parse_macro_to_meta_item (invoc);\n+\n+  // TODO: assuming that cfg! macros can only have one meta item inner, like cfg attributes\n+  if (invoc.get_meta_items ().size () != 1) \n+    return AST::Literal::create_error ();\n+  \n+  bool result = invoc.get_meta_items ()[0]->check_cfg_predicate (session);\n+  if (result)\n+    return AST::Literal (\"true\", AST::Literal::BOOL);\n+  else \n+    return AST::Literal (\"false\", AST::Literal::BOOL);\n }\n \n void\n@@ -3580,7 +3615,7 @@ MacroExpander::expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc)\n \t  - derive or legacy derive - \"token-based\" vs \"AST-based\"\n \t  - else is unreachable\n       - derive container macro - unreachable*/\n-  \n+\n #if 0\n   // macro_rules macro test code\n   auto rule_def = find_rules_def(invoc->get_path());\n@@ -3602,18 +3637,37 @@ MacroExpander::expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc)\n }\n \n /* Determines whether any cfg predicate is false and hence item with attributes\n- * should be stripped.  */\n+ * should be stripped. Note that attributes must be expanded before calling. */\n bool\n-MacroExpander::fails_cfg (std::vector<AST::Attribute> &attrs)\n+MacroExpander::fails_cfg (const std::vector<AST::Attribute> &attrs) const\n {\n-  for (auto &attr : attrs)\n+  for (const auto &attr : attrs)\n     {\n       if (attr.get_path () == \"cfg\" && !attr.check_cfg_predicate (session))\n \treturn true;\n     }\n   return false;\n }\n \n+/* Determines whether any cfg predicate is false and hence item with attributes\n+ * should be stripped. Will expand attributes as well. */\n+bool\n+MacroExpander::fails_cfg_with_expand (std::vector<AST::Attribute> &attrs) const\n+{\n+  for (auto &attr : attrs)\n+    {\n+      if (attr.get_path () == \"cfg\")\n+\t{\n+\t  if (!attr.is_parsed_to_meta_item ())\n+\t    attr.parse_attr_to_meta_item ();\n+\n+\t  if (!attr.check_cfg_predicate (session))\n+\t    return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n // Expands cfg_attr attributes.\n void\n MacroExpander::expand_cfg_attrs (std::vector<AST::Attribute> &attrs)\n@@ -3623,6 +3677,9 @@ MacroExpander::expand_cfg_attrs (std::vector<AST::Attribute> &attrs)\n       auto &attr = attrs[i];\n       if (attr.get_path () == \"cfg_attr\")\n \t{\n+\t  if (!attr.is_parsed_to_meta_item ())\n+\t    attr.parse_attr_to_meta_item ();\n+\n \t  if (attr.check_cfg_predicate (session))\n \t    {\n \t      // split off cfg_attr\n@@ -3665,7 +3722,7 @@ MacroExpander::expand_crate ()\n   // expand crate cfg_attr attributes\n   expand_cfg_attrs (crate.inner_attrs);\n \n-  if (fails_cfg (crate.inner_attrs))\n+  if (fails_cfg_with_expand (crate.inner_attrs))\n     {\n       // basically, delete whole crate\n       crate.strip_crate ();"}, {"sha": "02186000f74e5a0cbe10ee9de24f538a3b06d062", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -42,9 +42,12 @@ struct MacroExpander\n   void expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc);\n \n   void expand_cfg_attrs (std::vector<AST::Attribute> &attrs);\n-  bool fails_cfg (std::vector<AST::Attribute> &attr);\n+  bool fails_cfg (const std::vector<AST::Attribute> &attr) const;\n+  bool fails_cfg_with_expand (std::vector<AST::Attribute> &attrs) const;\n \n   // Expand the data of a cfg! macro.\n+  void parse_macro_to_meta_item (AST::MacroInvocData &invoc);\n+  // Get the literal representation of a cfg! macro.\n   AST::Literal expand_cfg_macro (AST::MacroInvocData &invoc);\n \n private:"}, {"sha": "974e34697b86a50e85b34ea53f1c680c25466c25", "filename": "gcc/testsuite/rust.test/compilable/arrays2.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627121b6996146d7b14f2ad848f416682b1ce0fe/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs?ref=627121b6996146d7b14f2ad848f416682b1ce0fe", "patch": "@@ -0,0 +1,66 @@\n+fn main() {\n+    // const, inferred array\n+    let const_inferred_array = [0, 1, 2, 3];\n+    // const, inferred, copied array \n+    let const_inferred_copied_array = [0; 4];\n+\n+    // const index of const, inferred array\n+    let const_inferred_index = const_inferred_array[1];\n+    // variable index of const, inferred array\n+    let some_var = 3;\n+    let const_inferred_index_var = const_inferred_array[some_var];\n+\n+    // const index of const, inferred, copied array\n+    let const_inferred_copied_index = const_inferred_copied_array[1];\n+    // variable index of const, inferred array\n+    let const_inferred_copied_index_var = const_inferred_copied_array[some_var];\n+\n+    // mut, inferred array\n+    let mut mut_inferred_array = [0, 1, 2, 3];\n+    // mut, inferred, copied array\n+    let mut mut_inferred_copied_array = [0; 6];\n+\n+    // const index of mut, inferred array\n+    let mut_inferred_index = mut_inferred_array[1];\n+    // variable index of mut, inferred array\n+    let mut_inferred_index_var = mut_inferred_array[some_var];\n+\n+    // const index of mut, inferred, copied array\n+    let mut_inferred_copied_index = mut_inferred_copied_array[1];\n+    // variable index of mut, inferred array\n+    let mut_inferred_copied_index_var = mut_inferred_copied_array[some_var];\n+\n+    // const, typed array\n+    let const_typed_array: [i32; 5] = [0, 1, 2, 3, 4];\n+    // const, typed, copied array\n+    let const_typed_copied_array: [i32; 4] = [2; 4];\n+\n+    // const index of const, typed array\n+    let const_typed_index = const_typed_array[1];\n+    // variable index of const, typed array\n+    let const_typed_index_var = const_typed_array[some_var];\n+\n+    // const index of const, typed, copied array\n+    let const_typed_copied_index = const_typed_copied_array[1];\n+    // variable index of const, typed array\n+    let const_typed_copied_index_var = const_typed_copied_array[some_var];\n+\n+    // mut, typed array\n+    let mut mut_typed_array: [i32; 4] = [0, 1, 2, 3];\n+    // mut, typed, copied array\n+    let mut mut_typed_copied_array: [i32; 4] = [0; 4];\n+\n+    // const index of mut, typed array\n+    let mut_typed_index = mut_typed_array[1];\n+    // variable index of mut, typed array\n+    let mut_typed_index_var = mut_typed_array[some_var];\n+\n+    // const index of mut, typed, copied array\n+    let mut_typed_copied_index = mut_typed_copied_array[1];\n+    // variable index of mut, typed array\n+    let mut_typed_copied_index_var = mut_typed_copied_array[some_var];\n+\n+\n+    // index + 1 expression\n+    let some_thing = mut_inferred_copied_array[some_var + 1];\n+}\n\\ No newline at end of file"}]}