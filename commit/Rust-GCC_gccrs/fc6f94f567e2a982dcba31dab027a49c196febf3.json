{"sha": "fc6f94f567e2a982dcba31dab027a49c196febf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2Zjk0ZjU2N2UyYTk4MmRjYmEzMWRhYjAyN2E0OWMxOTZmZWJmMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-04-17T11:22:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-04-17T11:22:07Z"}, "message": "tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): New.\n\n\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): New.\n\t(decl_refs_may_alias_p): Add REF1 and REF2 parameters.\n\tUse nonoverlapping_component_refs_of_decl_p to disambiguate component\n\treferences.\n\t(refs_may_alias_p_1): Adjust call to decl_refs_may_alias_p.\n\t* tree-streamer.c (record_common_node): Adjust reference in comment.\n\nFrom-SVN: r198024", "tree": {"sha": "e92c611aff1949568c16e22a343380f90a7e4aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e92c611aff1949568c16e22a343380f90a7e4aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6f94f567e2a982dcba31dab027a49c196febf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6f94f567e2a982dcba31dab027a49c196febf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6f94f567e2a982dcba31dab027a49c196febf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6f94f567e2a982dcba31dab027a49c196febf3/comments", "author": null, "committer": null, "parents": [{"sha": "070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0"}], "stats": {"total": 398, "additions": 328, "deletions": 70}, "files": [{"sha": "440d3a1a097240e6b5be6a63bfe0d6aa10d38c2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -1,3 +1,12 @@\n+2013-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): New.\n+\t(decl_refs_may_alias_p): Add REF1 and REF2 parameters.\n+\tUse nonoverlapping_component_refs_of_decl_p to disambiguate component\n+\treferences.\n+\t(refs_may_alias_p_1): Adjust call to decl_refs_may_alias_p.\n+\t* tree-streamer.c (record_common_node): Adjust reference in comment.\n+\n 2013-04-17  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/cortex-m4.md: Add a new bypass."}, {"sha": "4035e12dcf3d3644e3d6a9159f5e479ae981cc9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -1,9 +1,41 @@\n+2013-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr41.ad[sb]: New test.\n+\t* gcc.dg/tree-ssa/ssa-fre-38.c: Likewise.\n+\t* gcc.dg/vect/slp-24-big-array.c: Beef up anti-vectorization trick.\n+\t* gcc.dg/vect/slp-24.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-mult.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-i2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-i4.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u16-mult.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i2-gap.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-mult-char-ls.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-mult.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-same-dr.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u16-i2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u16-i4.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u32-i4.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u32-i8.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i2-gap.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-unknown.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-u8-i8.c: Likewise.\n+\n 2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR fortran/40958\n-        * lib/gcc-dg.exp (scan-module): Uncompress module file before\n-        scanning.\n-        * gfortran.dg/module_md5_1.f90: Remove.\n+\tPR fortran/40958\n+\t* lib/gcc-dg.exp (scan-module): Uncompress module file before scanning.\n+\t* gfortran.dg/module_md5_1.f90: Remove.\n \n 2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n "}, {"sha": "2b342db524734d60f68e091627de7826e0064962", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-38.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-38.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+struct S { int i; int j; };\n+\n+struct U\n+{\n+  struct S a[10];\n+} u;\n+\n+int foo (int n, int i, int j)\n+{\n+  u.a[n].i = i;\n+  u.a[n].j = j;\n+  return u.a[n].i;\n+}\n+\n+/* We should remove the redundant load.  */\n+\n+/* { dg-final { scan-tree-dump-not \"= u.a\\\\\\[n_2\\\\(D\\\\)\\\\\\].i\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "10b31aaac37571dadd8284bb8057de2520ab1823", "filename": "gcc/testsuite/gcc.dg/vect/slp-24-big-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -84,8 +84,8 @@ int main (void)\n       arr[i].b = i * 2 + 10;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (arr[i].a == 178)\n-         abort ();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n   check_vect ();\n "}, {"sha": "eca66bfb0364659ccc75adb447d5066ad6f6fc6d", "filename": "gcc/testsuite/gcc.dg/vect/slp-24.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n unsigned char ub[N*2] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n \n+volatile int y = 0;\n+\n void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *arr)\n {\n@@ -67,8 +69,8 @@ int main (void)\n       arr[i].b = i * 2 + 10;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n   check_vect ();\n   "}, {"sha": "8bc2c48dbced0242e3a25950e03345834d509804", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-mult.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-mult.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -15,6 +15,8 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -32,8 +34,8 @@ main1 ()\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "dca34ef1f2998df2261f8a0fb941f382187ce258", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-i2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i2.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned short b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -22,8 +24,8 @@ main1 ()\n     {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "68114a6824915840ce073595a3409610730b324c", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-i4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-i4.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -12,6 +12,8 @@ typedef struct {\n    unsigned short d;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -27,8 +29,8 @@ main1 ()\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "0b21522498f087d5f89abdcb0af17135f42c0bd3", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u16-mult.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u16-mult.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned short b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -26,8 +28,8 @@ main1 ()\n       arr[i].a = i;\n       arr[i].b = i * 2;\n       iarr[i] = i * 3;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "22030b06ba8c5e0571d156e78466c4a40b9fe921", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i2-gap.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i2-gap.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned char b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -22,8 +24,8 @@ main1 ()\n     {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "ca8bd12825c1db23a861c9565f7644318491609d", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2-big-array.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -45,8 +47,8 @@ main1 ()\n       check_res[i].h = arr[i].f;\n       check_res[i].g = arr[i].f - arr[i].a;\n \n-      if (arr[i].a == 178)\n-         abort ();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "b1ce8052a3815aad3c113e6c24b3b4cd01d6ac3a", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -34,8 +36,8 @@ main1 ()\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "188e288238536d043fb4a869fac3ba563f76f609", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7-big-array.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -50,8 +52,8 @@ main1 ()\n       check_res[i].h = arr[i].d;\n       check_res[i].g = u + t;\n \n-      if (arr[i].a == 178)\n-         abort ();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "87e6ce22e649eb376cd0a6bc81da0dc5e368baf3", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n@@ -35,8 +37,8 @@ main1 ()\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "cc877293cea72c774893e62865b6c3d4b92e7e92", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-mult-char-ls.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult-char-ls.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -15,6 +15,8 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr, ii *iarr)\n {\n@@ -62,8 +64,8 @@ int main (void)\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   main1 (arr, iarr);"}, {"sha": "3d2de09cbb0e950bbfa776b660c6529d16c1f76f", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-mult.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-mult.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -15,6 +15,8 @@ typedef struct {\n    unsigned int b;\n } ii;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr, ii *iarr)\n {\n@@ -62,8 +64,8 @@ int main (void)\n       arr[i].b = i * 2;\n       iarr[i].a = i;\n       iarr[i].b = i * 3;\n-      if (arr[i].a == 178)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   main1 (arr, iarr); "}, {"sha": "9768d72636a8b64a0f11a604506a80aa5e4f65c5", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-same-dr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-same-dr.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -12,6 +12,8 @@ typedef struct {\n \n s buffer1[N], buffer2[N];\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s * __restrict__  pIn, s* __restrict__ pOut)\n {\n@@ -61,8 +63,8 @@ int main (void)\n       buffer1[i].b = i + 8;\n       buffer2[i].a = i * 3;\n       buffer2[i].b = i * 2;\n-      if (buffer1[i].a == 500)\n-         abort();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   check_vect ();"}, {"sha": "57006846ff2f90568553eda09c2e58cc6bcbc289", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u16-i2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i2.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned short b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -46,8 +48,8 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "2e6fb02b81782e8acbe63453a7e848fc9714afa7", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u16-i4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u16-i4.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -12,6 +12,8 @@ typedef struct {\n    unsigned short d;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -59,8 +61,8 @@ int main (void)\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "4c2048820a11a52a43cdb531d4c9ce7d83788080", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u32-i4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i4.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -12,6 +12,8 @@ typedef struct {\n    int d;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -54,8 +56,8 @@ int main (void)\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n       arr[i].d = i+34;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "4dbd8d9ab3c1862256509695cd88a47fee628e9e", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u32-i8.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u32-i8.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    int h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -68,8 +70,8 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "b83d54e2e3741622d85124f237ae4ec8f4c0c105", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i2-gap.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2-gap.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned char b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -62,8 +64,8 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "962ba51bd5f90b66b089a7bee29fae6054950636", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i2.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -10,6 +10,8 @@ typedef struct {\n    unsigned char b;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -45,8 +47,8 @@ int main (void)\n     { \n       arr[i].a = i;\n       arr[i].b = i * 2;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "473f560511a78cf31f664bf71bb9ee6dc816a771", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2-big-array.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -18,6 +18,8 @@ typedef struct {\n \n s check_res[N];\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -80,8 +82,9 @@ int main (void)\n       check_res[i].e = arr[i].f - arr[i].b;\n       check_res[i].h = arr[i].f;\n       check_res[i].g = arr[i].f - arr[i].b;\n-      if (arr[i].a == 178)\n-         abort ();\n+\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   main1 (arr);"}, {"sha": "4037572d9700753c4d5b191642804b7eaaa779e8", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -69,8 +71,8 @@ int main (void)\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "da4b484b1ae3670ca604a661d2a92cb4e6ea9f89", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -18,6 +18,8 @@ typedef struct {\n \n s check_res[N];\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -103,8 +105,8 @@ int main (void)\n       check_res[i].h = arr[i].c;\n       check_res[i].g = arr[i].b + arr[i].c;\n \n-      if (arr[i].a == 178)\n-         abort ();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n   main1 (arr);\n "}, {"sha": "07e1a803f7c001699c620a2900b7de8ce9970de7", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-unknown.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-unknown.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -17,6 +17,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr, int n)\n {\n@@ -102,8 +104,8 @@ int main (void)\n       arr[i].f = 16;\n       arr[i].g = 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr, N-2);"}, {"sha": "007966704801bce3dac7712c1e8c98cf2c3a65aa", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -89,8 +91,8 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "9697aaa8b6f4c2bf43c08d968d08a1acd80930d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7-big-array.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7-big-array.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -18,6 +18,8 @@ typedef struct {\n \n s check_res[N];\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -91,8 +93,8 @@ int main (void)\n       check_res[i].h = arr[i].d;\n       check_res[i].g = u + t;\n \n-      if (arr[i].a == 178)\n-         abort ();\n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     }\n \n   main1 (arr);"}, {"sha": "854a4aaabb835ee662864e272e4e7493ab39fe39", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -74,8 +76,8 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "37a0954001e3bd4edd6ed6bc41be59fded191a93", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -76,8 +78,8 @@ int main (void)\n       arr[i].f = i + 5;\n       arr[i].g = i + 3;\n       arr[i].h = 67;\n-      if (arr[i].a == 178)\n-         abort(); \n+      if (y) /* Avoid vectorization.  */\n+        abort ();\n     } \n \n   main1 (arr);"}, {"sha": "d5ace723b1bbd77570a2b532718d75fba260fbb5", "filename": "gcc/testsuite/gnat.dg/discr41.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.adb?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+package body Discr41 is\n+\n+   function F return Rec is\n+      Ret : Rec (0);\n+   begin\n+      return Ret;\n+   end;\n+\n+end Discr41;"}, {"sha": "4af8f63853d2bb6e3da66fdc16fac2f907b75ded", "filename": "gcc/testsuite/gnat.dg/discr41.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr41.ads?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -0,0 +1,20 @@\n+package Discr41 is\n+\n+   type Vector is array (Positive range <>) of Long_Float;\n+\n+   type Date is record\n+      LF : Long_Float := 0.0;\n+   end record;\n+\n+   type Date_Vector is array (Positive range <>) of Date;\n+\n+   type Rec (D : Natural) is record\n+      B1 : Boolean := False;\n+      DL : Date_Vector (1 .. D);\n+      VL : Vector (1 .. D) := (others => 0.0);\n+      B2 : Boolean := True;\n+   end record;\n+\n+   function F return Rec;\n+\n+end Discr41;"}, {"sha": "70e9e00878348c5183e53b11032b2e4390dec9ca", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 115, "deletions": 6, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -719,14 +719,113 @@ aliasing_component_refs_p (tree ref1,\n   return false;\n }\n \n+/* Return true if we can determine that component references REF1 and REF2,\n+   that are within a common DECL, cannot overlap.  */\n+\n+static bool\n+nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n+{\n+  vec<tree, va_stack> component_refs1;\n+  vec<tree, va_stack> component_refs2;\n+\n+  vec_stack_alloc (tree, component_refs1, 16);\n+  vec_stack_alloc (tree, component_refs2, 16);\n+\n+  /* Create the stack of handled components for REF1.  */\n+  while (handled_component_p (ref1))\n+    {\n+      component_refs1.safe_push (ref1);\n+      ref1 = TREE_OPERAND (ref1, 0);\n+    }\n+  if (TREE_CODE (ref1) == MEM_REF)\n+    {\n+      if (!integer_zerop (TREE_OPERAND (ref1, 1)))\n+\tgoto may_overlap;\n+      ref1 = TREE_OPERAND (TREE_OPERAND (ref1, 0), 0);\n+    }\n+\n+  /* Create the stack of handled components for REF2.  */\n+  while (handled_component_p (ref2))\n+    {\n+      component_refs2.safe_push (ref2);\n+      ref2 = TREE_OPERAND (ref2, 0);\n+    }\n+  if (TREE_CODE (ref2) == MEM_REF)\n+    {\n+      if (!integer_zerop (TREE_OPERAND (ref2, 1)))\n+\tgoto may_overlap;\n+      ref2 = TREE_OPERAND (TREE_OPERAND (ref2, 0), 0);\n+    }\n+\n+  /* We must have the same base DECL.  */\n+  gcc_assert (ref1 == ref2);\n+\n+  /* Pop the stacks in parallel and examine the COMPONENT_REFs of the same\n+     rank.  This is sufficient because we start from the same DECL and you\n+     cannot reference several fields at a time with COMPONENT_REFs (unlike\n+     with ARRAY_RANGE_REFs for arrays) so you always need the same number\n+     of them to access a sub-component, unless you're in a union, in which\n+     case the return value will precisely be false.  */\n+  while (true)\n+    {\n+      do\n+\t{\n+\t  if (component_refs1.is_empty ())\n+\t    goto may_overlap;\n+\t  ref1 = component_refs1.pop ();\n+\t}\n+      while (!RECORD_OR_UNION_TYPE_P (TREE_TYPE (TREE_OPERAND (ref1, 0))));\n+\n+      do\n+\t{\n+\t  if (component_refs2.is_empty ())\n+\t     goto may_overlap;\n+\t  ref2 = component_refs2.pop ();\n+\t}\n+      while (!RECORD_OR_UNION_TYPE_P (TREE_TYPE (TREE_OPERAND (ref2, 0))));\n+\n+      /* Beware of BIT_FIELD_REF.  */\n+      if (TREE_CODE (ref1) != COMPONENT_REF\n+\t  || TREE_CODE (ref2) != COMPONENT_REF)\n+\tgoto may_overlap;\n+\n+      tree field1 = TREE_OPERAND (ref1, 1);\n+      tree field2 = TREE_OPERAND (ref2, 1);\n+\n+      /* ??? We cannot simply use the type of operand #0 of the refs here\n+\t as the Fortran compiler smuggles type punning into COMPONENT_REFs\n+\t for common blocks instead of using unions like everyone else.  */\n+      tree type1 = TYPE_MAIN_VARIANT (DECL_CONTEXT (field1));\n+      tree type2 = TYPE_MAIN_VARIANT (DECL_CONTEXT (field2));\n+\n+      /* We cannot disambiguate fields in a union or qualified union.  */\n+      if (type1 != type2 || TREE_CODE (type1) != RECORD_TYPE)\n+\t goto may_overlap;\n+\n+      /* Different fields of the same record type cannot overlap.  */\n+      if (field1 != field2)\n+\t{\n+\t  component_refs1.release ();\n+\t  component_refs2.release ();\n+\t  return true;\n+\t}\n+    }\n+\n+may_overlap:\n+  component_refs1.release ();\n+  component_refs2.release ();\n+  return false;\n+}\n+\n /* Return true if two memory references based on the variables BASE1\n    and BASE2 constrained to [OFFSET1, OFFSET1 + MAX_SIZE1) and\n-   [OFFSET2, OFFSET2 + MAX_SIZE2) may alias.  */\n+   [OFFSET2, OFFSET2 + MAX_SIZE2) may alias.  REF1 and REF2\n+   if non-NULL are the complete memory reference trees.  */\n \n static bool\n-decl_refs_may_alias_p (tree base1,\n+decl_refs_may_alias_p (tree ref1, tree base1,\n \t\t       HOST_WIDE_INT offset1, HOST_WIDE_INT max_size1,\n-\t\t       tree base2,\n+\t\t       tree ref2, tree base2,\n \t\t       HOST_WIDE_INT offset2, HOST_WIDE_INT max_size2)\n {\n   gcc_checking_assert (DECL_P (base1) && DECL_P (base2));\n@@ -737,7 +836,17 @@ decl_refs_may_alias_p (tree base1,\n \n   /* If both references are based on the same variable, they cannot alias if\n      the accesses do not overlap.  */\n-  return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n+  if (!ranges_overlap_p (offset1, max_size1, offset2, max_size2))\n+    return false;\n+\n+  /* For components with variable position, the above test isn't sufficient,\n+     so we disambiguate component references manually.  */\n+  if (ref1 && ref2\n+      && handled_component_p (ref1) && handled_component_p (ref2)\n+      && nonoverlapping_component_refs_of_decl_p (ref1, ref2))\n+    return false;\n+\n+  return true;     \n }\n \n /* Return true if an indirect reference based on *PTR1 constrained\n@@ -1086,8 +1195,8 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n   var1_p = DECL_P (base1);\n   var2_p = DECL_P (base2);\n   if (var1_p && var2_p)\n-    return decl_refs_may_alias_p (base1, offset1, max_size1,\n-\t\t\t\t  base2, offset2, max_size2);\n+    return decl_refs_may_alias_p (ref1->ref, base1, offset1, max_size1,\n+\t\t\t\t  ref2->ref, base2, offset2, max_size2);\n \n   ind1_p = (TREE_CODE (base1) == MEM_REF\n \t    || TREE_CODE (base1) == TARGET_MEM_REF);"}, {"sha": "f29690f62b9b3ffdad6037e681f2d3d0ecd5edf0", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f94f567e2a982dcba31dab027a49c196febf3/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=fc6f94f567e2a982dcba31dab027a49c196febf3", "patch": "@@ -267,10 +267,10 @@ record_common_node (struct streamer_tree_cache_d *cache, tree node)\n       /* The FIELD_DECLs of structures should be shared, so that every\n \t COMPONENT_REF uses the same tree node when referencing a field.\n \t Pointer equality between FIELD_DECLs is used by the alias\n-\t machinery to compute overlapping memory references (See\n-\t nonoverlapping_component_refs_p).  */\n-      tree f;\n-      for (f = TYPE_FIELDS (node); f; f = TREE_CHAIN (f))\n+\t machinery to compute overlapping component references (see\n+\t nonoverlapping_component_refs_p and\n+\t nonoverlapping_component_refs_of_decl_p).  */\n+      for (tree f = TYPE_FIELDS (node); f; f = TREE_CHAIN (f))\n \trecord_common_node (cache, f);\n     }\n }"}]}