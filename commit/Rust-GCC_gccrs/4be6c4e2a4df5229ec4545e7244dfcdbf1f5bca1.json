{"sha": "4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlNmM0ZTJhNGRmNTIyOWVjNDU0NWU3MjQ0ZGZjZGJmMWY1YmNhMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-16T14:20:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-16T14:20:20Z"}, "message": "libcody: fix --enable-checking=... [PR 98311]\n\nThe -enable-checking configure code in libcody didn't play well with\nus.  This just uses libcpp's configurey for that piece.\n\n\tlibcody/\n\t* configure.ac: Use libcpp's enable-checking code.\n\t* configure: Rebuilt.", "tree": {"sha": "3f03bdd3774bf9f0155c1d387e6e1b843b423407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f03bdd3774bf9f0155c1d387e6e1b843b423407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d972f5183d8d476cfb008b85e224aa9b90e628d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d972f5183d8d476cfb008b85e224aa9b90e628d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d972f5183d8d476cfb008b85e224aa9b90e628d"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "76ff932d61b964f66fbcb89adb5fad1b8342e6c1", "filename": "libcody/configure", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1/libcody%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1/libcody%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure?ref=4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "patch": "@@ -1285,7 +1285,11 @@ Optional Features:\n   --enable-maintainer-mode\n                           enable maintainer mode. Add rules to rebuild\n                           configurey bits\n-  --enable-checking       enable run-time checking\n+  --enable-checking[=LIST]\n+                          enable expensive run-time checks. With LIST, enable\n+                          only specific categories of checks. Categories are:\n+                          yes,no,all,none,release. Flags are: misc,valgrind or\n+                          other strings\n   --enable-exceptions     enable exceptions & rtti\n \n Optional Packages:\n@@ -2708,30 +2712,45 @@ _ACEOF\n \n # Check whether --enable-checking was given.\n if test \"${enable_checking+set}\" = set; then :\n-  enableval=$enable_checking;\n+  enableval=$enable_checking; ac_checking_flags=\"${enableval}\"\n else\n-  enable_checking=\"yes\"\n+\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n+else\n+  ac_checking_flags=release\n+fi\n fi\n \n-case $enable_checking in #(\n-  yes|all|yes,*) :\n-    nms_checking=yes ;; #(\n-  no|none|release) :\n-    nms_checking= ;; #(\n-  *) :\n-    as_fn_error $? \"unknown check \\\"$enable_checking\\\"\" \"$LINENO\" 5 ;;\n-esac\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking checking\" >&5\n-$as_echo_n \"checking checking... \" >&6; }\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${nms_checking:-no}\" >&5\n-$as_echo \"${nms_checking:-no}\" >&6; }\n-if test \"$nms_checking\" = yes ; then\n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in release $ac_checking_flags\n+do\n+\tcase $check in\n+\t# these set all the flags to specific states\n+\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n+\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n+\tassert) ac_assert_checking=1 ;;\n+\tmisc) ac_checking=1 ;;\n+\tvalgrind) ac_valgrind_checking=1 ;;\n+\t# accept\n+\t*) ;;\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n \n-cat >>confdefs.h <<_ACEOF\n-#define NMS_CHECKING 0${nms_checking:+1}\n-_ACEOF\n+if test x$ac_checking != x ; then\n+\n+$as_echo \"#define NMS_CHECKING 1\" >>confdefs.h\n+\n+else\n+  $as_echo \"#define NMS_CHECKING 0\" >>confdefs.h\n \n fi\n+\n+\n # Check whether --enable-exceptions was given.\n if test \"${enable_exceptions+set}\" = set; then :\n   enableval=$enable_exceptions;"}, {"sha": "c3db5534f1f1aa35938989d302386cfe0631a3aa", "filename": "libcody/configure.ac", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1/libcody%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1/libcody%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure.ac?ref=4be6c4e2a4df5229ec4545e7244dfcdbf1f5bca1", "patch": "@@ -24,7 +24,47 @@ NMS_LINK_OPT([-Wl,--no-undefined])\n NMS_CONFIG_FILES([gdbinit dox.cfg])\n \n NMS_BUGURL\n-NMS_ENABLE_CHECKING\n+dnl NMS_ENABLE_CHECKING\n+dnl cloned from ../libcpp/configure.ac\n+AC_ARG_ENABLE(checking,\n+[AS_HELP_STRING([[--enable-checking[=LIST]]],\n+\t\t[enable expensive run-time checks.  With LIST,\n+\t\t enable only specific categories of checks.\n+\t\t Categories are: yes,no,all,none,release.\n+\t\t Flags are: misc,valgrind or other strings])],\n+[ac_checking_flags=\"${enableval}\"],[\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n+else\n+  ac_checking_flags=release\n+fi])\n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in release $ac_checking_flags\n+do\n+\tcase $check in\n+\t# these set all the flags to specific states\n+\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n+\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\t# these enable particular checks\n+\tassert) ac_assert_checking=1 ;;\n+\tmisc) ac_checking=1 ;;\n+\tvalgrind) ac_valgrind_checking=1 ;;\n+\t# accept\n+\t*) ;;\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n+                \n+if test x$ac_checking != x ; then\n+  AC_DEFINE(NMS_CHECKING, 1,\n+[Define to 1 if you want more run-time sanity checks.])\n+else\n+  AC_DEFINE(NMS_CHECKING, 0)\n+fi\n+\n+\n NMS_ENABLE_EXCEPTIONS\n \n AC_CONFIG_HEADERS([config.h])"}]}