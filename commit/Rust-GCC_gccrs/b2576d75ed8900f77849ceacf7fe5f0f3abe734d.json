{"sha": "b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1NzZkNzVlZDg5MDBmNzc4NDljZWFjZjdmZTVmMGYzYWJlNzM0ZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-09T21:03:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-09T21:03:04Z"}, "message": "c++: Use a TEMPLATE_INFO to hold regenerated-lambda info\n\nA TEMPLATE_INFO is a natural fit for what LAMBDA_EXPR_REGENERATED_FROM\nand LAMBDA_EXPR_REGENERATING_TARGS hold, so let's use it instead.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (LAMBDA_EXPR_REGENERATED_FROM)\n\t(LAMBDA_EXPR_REGENERATING_TARGS): Replace these with ...\n\t(LAMBDA_EXPR_REGEN_INFO): ... this.\n\t(tree_lambda_expr::regenerated_from)\n\t(tree_lambda_expr::regenerating_targs): Replace these with ...\n\t(tree_lambda_expr::regen_info): ... this.\n\t* constraint.cc (satisfy_declaration_constraints): Adjust\n\taccordingly.\n\t* lambda.c (build_lambda_expr): Likewise.\n\t* pt.c (regenerated_lambda_fn_p): Likewise.\n\t(most_general_lambda): Likewise.\n\t(tsubst_lambda_expr): Likewise.", "tree": {"sha": "b97d64dc9a547017ba5241a32e0b411176675ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b97d64dc9a547017ba5241a32e0b411176675ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/comments", "author": null, "committer": null, "parents": [{"sha": "cc796820466acb02989c72d42d96f06b4e5e020a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc796820466acb02989c72d42d96f06b4e5e020a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc796820466acb02989c72d42d96f06b4e5e020a"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "0ddb2990dd95e846bc2f8e0eb5d86c55c2e721d2", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "patch": "@@ -3193,7 +3193,7 @@ satisfy_declaration_constraints (tree t, sat_info info)\n \t arguments that were used to regenerate the lambda.  */\n       gcc_assert (!args || TMPL_ARGS_DEPTH (args) == 1);\n       tree lambda = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (t));\n-      tree outer_args = LAMBDA_EXPR_REGENERATING_TARGS (lambda);\n+      tree outer_args = TI_ARGS (LAMBDA_EXPR_REGEN_INFO (lambda));\n       if (args)\n \targs = add_to_template_args (outer_args, args);\n       else\n@@ -3256,7 +3256,7 @@ satisfy_declaration_constraints (tree t, tree args, sat_info info)\n       /* As in the two-parameter version of this function.  */\n       gcc_assert (TMPL_ARGS_DEPTH (args) == 1);\n       tree lambda = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (t));\n-      tree outer_args = LAMBDA_EXPR_REGENERATING_TARGS (lambda);\n+      tree outer_args = TI_ARGS (LAMBDA_EXPR_REGEN_INFO (lambda));\n       args = add_to_template_args (outer_args, args);\n     }\n   else"}, {"sha": "e42b82ae5a497f622b1a0787428ce513c9a09aea", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "patch": "@@ -1456,15 +1456,12 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_PENDING_PROXIES(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->pending_proxies)\n \n-/* The immediate LAMBDA_EXPR from which NODE was regenerated, or NULL_TREE\n-   (if NODE was not regenerated via tsubst_lambda_expr).  */\n-#define LAMBDA_EXPR_REGENERATED_FROM(NODE) \\\n-  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->regenerated_from)\n-\n-/* The full set of template arguments used to regenerate NODE, or NULL_TREE\n-   (if NODE was not regenerated via tsubst_lambda_expr).  */\n-#define LAMBDA_EXPR_REGENERATING_TARGS(NODE) \\\n-  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->regenerating_targs)\n+/* If NODE was regenerated via tsubst_lambda_expr, this is a TEMPLATE_INFO\n+   whose TI_TEMPLATE is the immediate LAMBDA_EXPR from which NODE was\n+   regenerated, and TI_ARGS is the full set of template arguments used\n+   to regenerate NODE from the most general lambda.  */\n+#define LAMBDA_EXPR_REGEN_INFO(NODE) \\\n+  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->regen_info)\n \n /* The closure type of the lambda, which is also the type of the\n    LAMBDA_EXPR.  */\n@@ -1477,8 +1474,7 @@ struct GTY (()) tree_lambda_expr\n   tree capture_list;\n   tree this_capture;\n   tree extra_scope;\n-  tree regenerated_from;\n-  tree regenerating_targs;\n+  tree regen_info;\n   vec<tree, va_gc> *pending_proxies;\n   location_t locus;\n   enum cp_lambda_default_capture_mode_type default_capture_mode : 8;"}, {"sha": "16e2b4c18b4c966c492481dec2b65634da4e8675", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "patch": "@@ -41,8 +41,7 @@ build_lambda_expr (void)\n   LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) = CPLD_NONE;\n   LAMBDA_EXPR_CAPTURE_LIST         (lambda) = NULL_TREE;\n   LAMBDA_EXPR_THIS_CAPTURE         (lambda) = NULL_TREE;\n-  LAMBDA_EXPR_REGENERATED_FROM     (lambda) = NULL_TREE;\n-  LAMBDA_EXPR_REGENERATING_TARGS   (lambda) = NULL_TREE;\n+  LAMBDA_EXPR_REGEN_INFO           (lambda) = NULL_TREE;\n   LAMBDA_EXPR_PENDING_PROXIES      (lambda) = NULL;\n   LAMBDA_EXPR_MUTABLE_P            (lambda) = false;\n   return lambda;"}, {"sha": "01c807be1bb5f6710df4f63f55650b779d262953", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2576d75ed8900f77849ceacf7fe5f0f3abe734d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "patch": "@@ -14356,7 +14356,7 @@ regenerated_lambda_fn_p (tree fn)\n     return false;\n   tree closure = DECL_CONTEXT (fn);\n   tree lam = CLASSTYPE_LAMBDA_EXPR (closure);\n-  return LAMBDA_EXPR_REGENERATED_FROM (lam) != NULL_TREE;\n+  return LAMBDA_EXPR_REGEN_INFO (lam) != NULL_TREE;\n }\n \n /* Return the LAMBDA_EXPR from which T was ultimately regenerated.\n@@ -14365,8 +14365,8 @@ regenerated_lambda_fn_p (tree fn)\n tree\n most_general_lambda (tree t)\n {\n-  while (LAMBDA_EXPR_REGENERATED_FROM (t))\n-    t = LAMBDA_EXPR_REGENERATED_FROM (t);\n+  while (tree ti = LAMBDA_EXPR_REGEN_INFO (t))\n+    t = TI_TEMPLATE (ti);\n   return t;\n }\n \n@@ -19278,9 +19278,12 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (r)\n     = LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (t);\n   LAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n-  LAMBDA_EXPR_REGENERATED_FROM (r) = t;\n-  LAMBDA_EXPR_REGENERATING_TARGS (r)\n-    = add_to_template_args (LAMBDA_EXPR_REGENERATING_TARGS (t), args);\n+  if (tree ti = LAMBDA_EXPR_REGEN_INFO (t))\n+    LAMBDA_EXPR_REGEN_INFO (r)\n+      = build_template_info (t, add_to_template_args (TI_ARGS (ti), args));\n+  else\n+    LAMBDA_EXPR_REGEN_INFO (r)\n+      = build_template_info (t, args);\n \n   gcc_assert (LAMBDA_EXPR_THIS_CAPTURE (t) == NULL_TREE\n \t      && LAMBDA_EXPR_PENDING_PROXIES (t) == NULL);"}]}