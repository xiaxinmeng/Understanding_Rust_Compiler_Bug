{"sha": "25839c4147749c40e6add9e7da1a12adb0b79d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4MzljNDE0Nzc0OWM0MGU2YWRkOWU3ZGExYTEyYWRiMGI3OWQ2Mg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-01-09T00:30:09Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-01-09T00:30:09Z"}, "message": "* gcc.hlp: Delete.\n\nFrom-SVN: r61060", "tree": {"sha": "d242c8f0f5d3739f4f5fbae186188cfd5def2ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d242c8f0f5d3739f4f5fbae186188cfd5def2ff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25839c4147749c40e6add9e7da1a12adb0b79d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25839c4147749c40e6add9e7da1a12adb0b79d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25839c4147749c40e6add9e7da1a12adb0b79d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25839c4147749c40e6add9e7da1a12adb0b79d62/comments", "author": null, "committer": null, "parents": [{"sha": "4bdc8610f2c46b0474845659454926a7c950ecfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdc8610f2c46b0474845659454926a7c950ecfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdc8610f2c46b0474845659454926a7c950ecfd"}], "stats": {"total": 407, "additions": 4, "deletions": 403}, "files": [{"sha": "12b6c83bcf645ef34eb69f02b850d59353b456f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25839c4147749c40e6add9e7da1a12adb0b79d62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25839c4147749c40e6add9e7da1a12adb0b79d62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25839c4147749c40e6add9e7da1a12adb0b79d62", "patch": "@@ -1,3 +1,7 @@\n+2003-01-08  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* gcc.hlp: Delete.\n+\n Thu Jan  9 00:57:15 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c  (ix86_expand_int_addcc): Fix thinko."}, {"sha": "6d8723b82a4af2d3f2b8977c05e0f1c4a3e73fd5", "filename": "gcc/gcc.hlp", "status": "removed", "additions": 0, "deletions": 403, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdc8610f2c46b0474845659454926a7c950ecfd/gcc%2Fgcc.hlp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdc8610f2c46b0474845659454926a7c950ecfd/gcc%2Fgcc.hlp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.hlp?ref=4bdc8610f2c46b0474845659454926a7c950ecfd", "patch": "@@ -1,403 +0,0 @@\n-1 GCC\n-\n- The GCC command invokes the GNU C compiler.\n-\n-       GCC file-spec\n-\n-2 Parameters\n-\n- file-spec\n-\n- A C source file.  If no input file  extension  is  specified,  GNU  C\n- assumes  .C  as  the  default extension unless the /PLUS qualifier is\n- given, in which case .CC is assumed as the default extension.\n-\n- If an extension of .CPP is given, then the source file is assumed  to\n- be  the  output of the preprocessor, and thus the preprocessor is not\n- executed.\n-\n- If an extension of .S is given, then the source file is assumed to be\n- the  assembly  code output of the compiler, and only the assembler is\n- called to generate an object file.\n-\n-2 Qualifiers\n-\n- GNU C command qualifiers modify the  way  the  compiler  handles  the\n- compilation.\n-\n- The following is the list of available qualifiers for GNU C:\n-\n-       /CASE_HACK\n-       /CC1_OPTIONS=(option [,option...]])\n-       /DEBUG\n-       /DEFINE=(identifier[=definition][,...])\n-       /G_FLOAT\n-       /INCLUDE_DIRECTORY=(path [,path...]])\n-       /LIST[=filename]\n-       /MACHINE_CODE\n-       /OBJECT[=filename]\n-       /OPTIMIZE\n-       /PLUS\n-       /PROFILE[=identifier]\n-       /SCAN=(file[,file...])\n-       /SHOW[=option]\n-       /UNDEFINE=(identifier[,identifier,...])\n-       /VERBOSE\n-       /VERSION\n-       /WARNING\n-\n-2 Linking\n-\n- When linking programs compiled with GNU C, you should include the GNU\n- C library before the VAX C library.  For example,\n-\n-   LINK object-file,GNU_CC:[000000]GCCLIB/LIB,SYS$LIBRARY:VAXCRTL/LIB\n-\n- You can also link your program with the shared VAX C  library.   This\n- can reduce the size of the .EXE file, as well as make it smaller when\n- it's running.  For example,\n-\n-   $ LINK object-file, GNU_CC:[000000]GCCLIB/LIB,SYS$INPUT/OPT\n-   SYS$SHARE:VAXCRTL/SHARE\n-\n- (If you use the second example and type it in by  hand,  be  sure  to\n- type ^Z after the last carriage return).  A simpler alternative would\n- be to place the single line:\n-\n-   SYS$SHARE:VAXCRTL/SHARE\n-\n- into a file called VAXCRTL.OPT, and then use the link command:\n-\n-   $ LINK object-file, GNU_CC:[000000]GCCLIB/LIB,VAXCRTL.OPT/OPT\n-\n- If a program has  been  compiled  with  /G_FLOAT,  then  the  linking\n- instructions  are  slightly  different.   If you are linking with the\n- non-shared library, then the command that you should use would be:\n-\n-   LINK object-file,GNU_CC:[000000]GCCLIB/LIB,SYS$LIBRARY:VAXCRTLG/LIB -\n-                                ,SYS$LIBRARY:VAXCRTL/LIB\n-\n- Note that both VAXCRTL and VAXCRTLG must be linked to.   If  you  are\n- using the shared VAX C library, then you should use a command like:\n-\n-   $ LINK object-file, GNU_CC:[000000]GCCLIB/LIB,SYS$INPUT:/OPTIONS\n-   SYS$SHARE:VAXCRTLG/SHARE\n-\n- In the case of the sharable library, only one  library  needs  to  be\n- linked to.\n-\n-2 /CASE_HACK\n-\n-   /[NO]CASE_HACK      D=/CASE_HACK\n-\n- Since the VMS Linker  and  Librarian  are  not  case  sensitive  with\n- respect  to  symbol names, a \"case-hack\" is appended to a symbol name\n- when the symbol contains upper case characters.\n-\n- There are cases where this is undesirable, (mainly when using certain\n- applications  where modules have been precompiled, perhaps in another\n- language) and we want to compile  without  case  hacking.   In  these\n- cases the /NOCASE_HACK switch disables case hacking.\n-\n-2 /CC1_OPTIONS\n-\n- This specifies additional  switches  to  the  compiler  itself  which\n- cannot be set by means of the compiler driver.\n-\n-2 /DEBUG\n-\n- /DEBUG includes additional information in the object file  output  so\n- that the program can be debugged with the VAX Symbolic Debugger.\n-\n- To use the debugger it is also necessary to link the debugger to your\n- program, which is done by specifying the /DEBUG qualifier to the link\n- command.  With the  debugger  it  is  possible  to  set  breakpoints,\n- examine  variables,  and  set  variables  to new values.  See the VAX\n- Symbolic Debugger manual for more information, or  type  \"HELP\"  from\n- the debugger prompt.\n-\n-2 /DEFINE\n-\n- /DEFINE=(identifier[=definition][,...])\n-\n- /DEFINE defines a string or macro ('definition')  to  be  substituted\n- for  every  occurrence of a given string ('identifier') in a program.\n- It is equivalent to the #define preprocessor directive.\n-\n- All definitions and identifiers are  converted  to  uppercase  unless\n- they are in quotation marks.\n-\n- The simple form of the /DEFINE qualifier:\n-\n-    /DEFINE=vms\n-\n- results in a definition equivalent to the preprocessor directive:\n-\n-  #define VMS 1\n-\n- You must enclose macro definitions in quotation  marks,  as  in  this\n- example:\n-\n-  /DEFINE=\"C(x)=((x) & 0xff)\"\n-\n- This definition is the same as the preprocessor definition:\n-\n-  #define C(x) ((x) & 0xff)\n-\n- If more than one /DEFINE is present on the GCC command line, only the\n- last /DEFINE is used.\n-\n- If both /DEFINE and /UNDEFINE are present on a command line,  /DEFINE\n- is evaluated before /UNDEFINE.\n-\n-2 /G_FLOAT\n-\n- Instructs the compiler to use \"G\" floating point  arithmetic  instead\n- of  \"D\".   The  difference  is  that  double precision has a range of\n- approximately +/-0.56e-308 to +/-0.9  e+308,  with  approximately  15\n- decimal digits precision.\n-\n- \"D\" floating point has the same range as  single  precision  floating\n- point, with approximately 17 decimal digits precision.\n-\n- If you use the  /G_FLOAT  qualifier,  the  linking  instructions  are\n- different.  See \"Linking\" for further details.\n-\n-2 /LIST\n-\n- /LIST[=list_file_name]\n-\n- This does not generate a listing file in the usual sense, however  it\n- does  direct the compiler to save the preprocessor output.  If a file\n- is not specified, then this output is written into a  file  with  the\n- same name as the source file and an extension of .CPP.\n-\n-2 /INCLUDE_DIRECTORY\n-\n-  /INCLUDE_DIRECTORY=(path [,path...])\n-\n- The /INCLUDE_DIRECTORY qualifier provides additional  directories  to\n- search  for  user-defined  include  files.   'path'  can  be either a\n- logical name or a directory specification.\n-\n- There  are  two  forms  for  specifying  include  files  -   #include\n- \"file-spec\"  and  #include <file-spec>.  For the #include \"file-spec\"\n- form, the search order is:\n-\n-  1.  The directory containing the source file.\n-\n-  2.  The directories in the /INCLUDE qualifier (if any).\n-\n-  3.  The directory (or directories) specified in the logical name\n-      GNU_CC_INCLUDE.\n-\n-  4.  The directory (or directories) specified in the logical name\n-      SYS$LIBRARY.\n-\n-  For the #include <file-spec> form, the search order is:\n-\n-  1.  The directories specified in the /INCLUDE qualifier (if any).\n-\n-  2.  The directory (or directories) specified in the logical name\n-      GNU_CC_INCLUDE.\n-\n-  3.  The directory (or directories) specified in the logical name\n-      SYS$LIBRARY.\n-\n-2 /MACHINE_CODE\n-\n- Tells GNU C to output the machine code  generated  by  the  compiler.\n- The  machine code is output to a file with the same name as the input\n- file, with the extension .S.  An  object  file  is  still  generated,\n- unless /NOOBJ is also specified.\n-\n-2 /OBJECT\n-\n-   /OBJECT[=filename]\n-   /NOOBJECT\n-\n-        Controls whether or not an object file  is  generated  by  the\n- compiler.\n-\n-2 /OPTIMIZE\n-\n- /[NO]OPTIMIZE\n-\n- Controls whether optimization  is  performed  by  the  compiler.   By\n- default, optimization is on.  /NOOPTIMIZE turns optimization off.\n-\n-2 /PLUS\n-\n- Instructs the compiler driver to use the GNU-C++ compiler instead  of\n- the  GNU-C compiler.  Note that the default extension of source files\n- is .CC when this qualifier is in effect.\n-\n-2 /PROFILE\n-\n- /PROFILE[=identifier]\n-\n- Instructs the compiler to generate function profiling code.  You must\n- link  your  program  to  the profiler when you use this options.  The\n- profile statistics are automatically  printed  out  on  the  terminal\n- during  image  exit.  (i.e.  no modifications to your source file are\n- required in order to use the profiler).\n-\n- There are three identifiers  that  can  be  used  with  the  /PROFILE\n- switch.   These  are  ALL, FUNCTION, and BLOCK.  If /PROFILE is given\n- without an identifier, then FUNCTION is assumed.\n-\n-3 Block_Profiler\n-\n- The block profiler counts how  many  times  control  of  the  program\n- passes certain points in your program.  This is useful in determining\n- which  portions  of  a  program  would  benefit  from  recoding   for\n- optimization.\n-\n- The report for the block profiler contains the  function  name,  file\n- name, PC, and the source file line number as well as the count of how\n- many times control has passed through the specified source line.\n-\n-3 Function_Profiler\n-\n- The function profiler counts how many times each function is entered,\n- and keeps track of how much CPU time is used within each function.\n-\n- You should be careful about  interpreting  the  results  of  profiles\n- where  there  are  inline  functions.  When a function is included as\n- inline, then there is no call to the internal data collection routine\n- used  by  the  profiler,  and  thus  there  will be no record of this\n- function being called.  The compiler does generate a callable version\n- of each inline function, and if this called version is used, then the\n- profiler's data collection routine will be called.\n-\n-2 /SCAN\n-\n- /SCAN=(file[,file...])\n-\n- This qualifier supplies a list of files that will be read  as  input,\n- and  the output will be discarded before processing the regular input\n- file.  Because the output generated from the files is discarded,  the\n- only  effect  of  this qualifier is to make the macros defined in the\n- files available for use in the main input.\n-\n-2 /SHOW\n-\n- /SHOW[=option]\n-\n- This causes the preprocessor to generate information other  than  the\n- preprocessed  input  file.   When this qualifier is used, no assembly\n- code and no object file is generated.\n-\n- The output of the preprocessor is placed in the file specified by the\n- /LIST  qualifier, if present.  If the /LIST qualifier is not present,\n- then the output is placed in a file with the same name as  the  input\n- file  with  an  extension  that  depends  upon  which  option that is\n- selected.\n-\n-3 DEFINITIONS\n-\n- This option causes the preprocessor to dump a  list  of  all  of  the\n- definitions  to  the  output  file.   This  is  useful  for debugging\n- purposes, since it lets you determine whether or not  everything  has\n- been defined properly.\n-\n- If the default file name is used for the output, the  extension  will\n- be .DEF.\n-\n-3 RULES\n-\n- This option causes the preprocessor to output  a  rule  suitable  for\n- MAKE,  describing  the  dependencies  of  the  main source file.  The\n- preprocessor outputs one MAKE rule containing the  object  file  name\n- for  that  source  file,  a colon, and the names of all the concluded\n- files.  If there are many included files then the rule is split  into\n- several lines using the '\\'-newline.\n-\n- When using this option, only files included with the \"#include \"file\"\n- directive are mentioned.\n-\n- If the default file name is used for the  output,  a  null  extension\n- will be used.\n-\n-3 ALL\n-\n- This option is similar to RULES, except that it also  mentions  files\n- included with the \"#include <file.h>\" directive.\n-\n- If the default file name is used for the  output,  a  null  extension\n- will be used.\n-\n-2 /UNDEFINE\n-\n- /UNDEFINE cancels a macro definition.  Thus, it is the  same  as  the\n- #undef preprocessor directive.\n-\n- If more than one /UNDEFINE is present on the GCC command  line,  only\n- the last /UNDEFINE is used.\n-\n- If both /DEFINE and /UNDEFINE are present on a command line,  /DEFINE\n- is evaluated before /UNDEFINE.\n-\n-2 /VERBOSE\n-\n- Controls whether the user sees the invocation command strings for the\n- preprocessor,  compiler,  and  assembler.   The compiler also outputs\n- some statistics on time spent in its various phases.\n-\n-2 /VERSION\n-\n- Causes the preprocessor and the compiler to  identify  themselves  by\n- their  version  numbers, and in the case of the compiler, the version\n- number of the compiler that built it.\n-\n-2 /WARNING\n-\n- When this qualifier is present, warnings about usage that  should  be\n- avoided  are given by the compiler.  For more information, see \"Using\n- and Porting the GNU Compiler Collection (GCC)\", in the section on\n- command line options, under \"-Wall\".\n-\n- Warnings are also generated by the preprocessor when  this  qualifier\n- is given.\n-\n-2 Known_Incompatibilities_with_VAX-C\n-\n- There are several known incompatibilities between  GNU-C  and  VAX-C.\n- Some  common  ones  will  be  briefly  described  here.   A  complete\n- description can be found in \"Using and Porting the GNU Compiler\n- Collection (GCC)\" in the chapter entitled \"Using GCC on VMS\".\n-\n-     GNU-C provides case hacking as a means of giving case sensitivity\n- to  symbol  names.  The case hack is a hexadecimal number appended to\n- the symbol name, with a bit being set for  each  upper  case  letter.\n- Symbols with all lower case, or symbols that have a dollar sign (\"$\")\n- are not case hacked.  There  are  times  that  this  is  undesirable,\n- namely  when  you  wish  to  link  your program against a precompiled\n- library which was compiled with a non-GNU-C compiler.  X-windows  (or\n- DECWindows)   is  an  example  of  this.   In  these  instances,  the\n- /NOCASE_HACK switch should be used.\n-\n- If you require case hacking in some cases, but not  in  others  (i.e.\n- Libg++  with  DECWindows),  then it is recommended that you develop a\n- header file which will define all mixed case  functions  that  should\n- not have a case hack as the lower case equivalents.\n-\n-     GNU-C does not provide  the  globaldef  and  globalref  mechanism\n- which  is  used  by VAX-C to coerce the VMS linker to include certain\n- object modules from a library.  There are assembler hacks, which  are\n- available  to  the  user  through  the macros defined in gnu_hacks.h,\n- which effectively give you the ability to  perform  these  functions.\n- While  not  syntactically  identical,  they  do  provide  most of the\n- functionality.\n-\n- Note that globaldefs of enums is not supported in the way that it  is\n- under  VAX-C.  This can be easily simulated, however, by globaldefing\n- an integer variable, and then globalvaluing  all  of  the  enumerated\n- states.\n-\n- Furthermore, the way that globalvalue is currently  implemented,  the\n- data type of the globalvalue variable is seen to the compiler to be a\n- pointer to the data type that you  specify.   This  is  necessary  in\n- order   to  make  the  compiler  correctly  address  the  globalvalue\n- variables.\n-"}]}