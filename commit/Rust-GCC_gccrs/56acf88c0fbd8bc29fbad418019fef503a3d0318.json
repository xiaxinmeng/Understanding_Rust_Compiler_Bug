{"sha": "56acf88c0fbd8bc29fbad418019fef503a3d0318", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhY2Y4OGMwZmJkOGJjMjlmYmFkNDE4MDE5ZmVmNTAzYTNkMDMxOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-11-12T10:37:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-11-12T10:37:00Z"}, "message": "bitmap_allocator.h: Uglify some names.\n\n2006-11-12  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/bitmap_allocator.h: Uglify some names.\n\t* include/ext/concurrence.h: Likewise.\n\t* src/bitmap_allocator.cc: Likewise.\n\nFrom-SVN: r118722", "tree": {"sha": "7c7df613518f488656edd7eb4a0f3dcab1666847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7df613518f488656edd7eb4a0f3dcab1666847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56acf88c0fbd8bc29fbad418019fef503a3d0318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56acf88c0fbd8bc29fbad418019fef503a3d0318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56acf88c0fbd8bc29fbad418019fef503a3d0318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56acf88c0fbd8bc29fbad418019fef503a3d0318/comments", "author": null, "committer": null, "parents": [{"sha": "41f1662296f971f89812fe9710a2d8e79c4a72b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f1662296f971f89812fe9710a2d8e79c4a72b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f1662296f971f89812fe9710a2d8e79c4a72b8"}], "stats": {"total": 126, "additions": 70, "deletions": 56}, "files": [{"sha": "0cb34970347e70538b1274b7230ee6de960e157a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56acf88c0fbd8bc29fbad418019fef503a3d0318", "patch": "@@ -1,3 +1,9 @@\n+2006-11-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/bitmap_allocator.h: Uglify some names.\n+\t* include/ext/concurrence.h: Likewise.\n+\t* src/bitmap_allocator.cc: Likewise.\n+\n 2006-11-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/29496"}, {"sha": "838aef844bc0566ad6b50dbc506e449ea74017c1", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=56acf88c0fbd8bc29fbad418019fef503a3d0318", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::size_t;\n   using std::ptrdiff_t;\n \n-  namespace balloc\n+  namespace __balloc\n   {\n     /** @class  __mini_vector bitmap_allocator.h bitmap_allocator.h\n      *\n@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       : public std::unary_function<typename std::pair<_Tp, _Tp>, bool>\n       {\n \ttypedef typename std::pair<_Tp, _Tp> _Block_pair;\n-\ttypedef typename balloc::__mini_vector<_Block_pair> _BPVector;\n+\ttypedef typename __balloc::__mini_vector<_Block_pair> _BPVector;\n \ttypedef typename _BPVector::difference_type _Counter_type;\n \n \tsize_t* _M_pbitmap;\n@@ -385,11 +385,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  // store, then there is definitely no space for another single\n \t  // object, so just return false.\n \t  _Counter_type __diff = \n-\t    __gnu_cxx::balloc::__num_bitmaps(__bp);\n+\t    __gnu_cxx::__balloc::__num_bitmaps(__bp);\n \n \t  if (*(reinterpret_cast<size_t*>\n \t\t(__bp.first) - (__diff + 1))\n-\t      == __gnu_cxx::balloc::__num_blocks(__bp))\n+\t      == __gnu_cxx::__balloc::__num_blocks(__bp))\n \t    return false;\n \n \t  size_t* __rover = reinterpret_cast<size_t*>(__bp.first) - 1;\n@@ -428,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     template<typename _Tp>\n       class _Bitmap_counter\n       {\n-\ttypedef typename balloc::__mini_vector<typename std::pair<_Tp, _Tp> > \n+\ttypedef typename __balloc::__mini_vector<typename std::pair<_Tp, _Tp> >\n \t_BPVector;\n \ttypedef typename _BPVector::size_type _Index_type;\n \ttypedef _Tp pointer;\n@@ -534,7 +534,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       size_t __mask = 1 << __pos;\n       *__pbmap |= __mask;\n     }\n-  } // namespace balloc\n+  } // namespace __balloc\n \n   /** @brief  Generic Version of the bsf instruction.\n    */\n@@ -550,9 +550,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   class free_list\n   {\n     typedef size_t* \t\t\t\tvalue_type;\n-    typedef balloc::__mini_vector<value_type> \tvector_type;\n+    typedef __balloc::__mini_vector<value_type> vector_type;\n     typedef vector_type::iterator \t\titerator;\n-    typedef __mutex\t\t\t\tmutex_type;\n+    typedef __mutex\t\t\t\t__mutex_type;\n \n     struct _LT_pointer_compare\n     {\n@@ -563,10 +563,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     };\n \n #if defined __GTHREADS\n-    mutex_type&\n+    __mutex_type&\n     _M_get_mutex()\n     {\n-      static mutex_type _S_mutex;\n+      static __mutex_type _S_mutex;\n       return _S_mutex;\n     }\n #endif\n@@ -615,7 +615,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n \t  \n       // Just add the block to the list of free lists unconditionally.\n-      iterator __temp = __gnu_cxx::balloc::__lower_bound\n+      iterator __temp = __gnu_cxx::__balloc::__lower_bound\n \t(__free_list.begin(), __free_list.end(), \n \t *__addr, _LT_pointer_compare());\n \n@@ -717,7 +717,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef _Tp&        \t\treference;\n       typedef const _Tp&  \t\tconst_reference;\n       typedef _Tp         \t\tvalue_type;\n-      typedef free_list::mutex_type \tmutex_type;\n+      typedef free_list::__mutex_type \t__mutex_type;\n \n       template<typename _Tp1>\n         struct rebind\n@@ -746,7 +746,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename std::pair<_Alloc_block*, _Alloc_block*> _Block_pair;\n \n       typedef typename \n-      balloc::__mini_vector<_Block_pair> _BPVector;\n+      __balloc::__mini_vector<_Block_pair> _BPVector;\n \n #if defined _GLIBCXX_DEBUG\n       // Complexity: O(lg(N)). Where, N is the number of block of size\n@@ -755,13 +755,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _S_check_for_free_blocks() throw()\n       {\n \ttypedef typename \n-\t  __gnu_cxx::balloc::_Ffit_finder<_Alloc_block*> _FFF;\n+\t  __gnu_cxx::__balloc::_Ffit_finder<_Alloc_block*> _FFF;\n \t_FFF __fff;\n \ttypedef typename _BPVector::iterator _BPiter;\n \t_BPiter __bpi = \n-\t  __gnu_cxx::balloc::__find_if\n+\t  __gnu_cxx::__balloc::__find_if\n \t  (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t   __gnu_cxx::balloc::_Functor_Ref<_FFF>(__fff));\n+\t   __gnu_cxx::__balloc::_Functor_Ref<_FFF>(__fff));\n \n \t_GLIBCXX_DEBUG_ASSERT(__bpi == _S_mem_blocks.end());\n       }\n@@ -786,7 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n \n \tconst size_t __num_bitmaps = (_S_block_size\n-\t\t\t\t      / size_t(balloc::bits_per_block));\n+\t\t\t\t      / size_t(__balloc::bits_per_block));\n \tconst size_t __size_to_allocate = sizeof(size_t) \n \t  + _S_block_size * sizeof(_Alloc_block) \n \t  + __num_bitmaps * sizeof(size_t);\n@@ -820,11 +820,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       static _BPVector _S_mem_blocks;\n       static size_t _S_block_size;\n-      static __gnu_cxx::balloc::\n+      static __gnu_cxx::__balloc::\n       _Bitmap_counter<_Alloc_block*> _S_last_request;\n       static typename _BPVector::size_type _S_last_dealloc_index;\n #if defined __GTHREADS\n-      static mutex_type _S_mut;\n+      static __mutex_type _S_mut;\n #endif\n \n     public:\n@@ -872,21 +872,21 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  {\n \t    // Fall Back to First Fit algorithm.\n \t    typedef typename \n-\t      __gnu_cxx::balloc::_Ffit_finder<_Alloc_block*> _FFF;\n+\t      __gnu_cxx::__balloc::_Ffit_finder<_Alloc_block*> _FFF;\n \t    _FFF __fff;\n \t    typedef typename _BPVector::iterator _BPiter;\n \t    _BPiter __bpi = \n-\t      __gnu_cxx::balloc::__find_if\n+\t      __gnu_cxx::__balloc::__find_if\n \t      (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t       __gnu_cxx::balloc::_Functor_Ref<_FFF>(__fff));\n+\t       __gnu_cxx::__balloc::_Functor_Ref<_FFF>(__fff));\n \n \t    if (__bpi != _S_mem_blocks.end())\n \t      {\n \t\t// Search was successful. Ok, now mark the first bit from\n \t\t// the right as 0, meaning Allocated. This bit is obtained\n \t\t// by calling _M_get() on __fff.\n \t\tsize_t __nz_bit = _Bit_scan_forward(*__fff._M_get());\n-\t\tballoc::__bit_allocate(__fff._M_get(), __nz_bit);\n+\t\t__balloc::__bit_allocate(__fff._M_get(), __nz_bit);\n \n \t\t_S_last_request._M_reset(__bpi - _S_mem_blocks.begin());\n \n@@ -896,7 +896,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\tsize_t* __puse_count = \n \t\t  reinterpret_cast<size_t*>\n \t\t  (__bpi->first) \n-\t\t  - (__gnu_cxx::balloc::__num_bitmaps(*__bpi) + 1);\n+\t\t  - (__gnu_cxx::__balloc::__num_bitmaps(*__bpi) + 1);\n \t\t\n \t\t++(*__puse_count);\n \t\treturn __ret;\n@@ -918,14 +918,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// _S_last_request holds a pointer to a valid bit map, that\n \t// points to a free block in memory.\n \tsize_t __nz_bit = _Bit_scan_forward(*_S_last_request._M_get());\n-\tballoc::__bit_allocate(_S_last_request._M_get(), __nz_bit);\n+\t__balloc::__bit_allocate(_S_last_request._M_get(), __nz_bit);\n \n \tpointer __ret = reinterpret_cast<pointer>\n \t  (_S_last_request._M_base() + _S_last_request._M_offset() + __nz_bit);\n \n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[_S_last_request._M_where()].first)\n-\t  - (__gnu_cxx::balloc::\n+\t  - (__gnu_cxx::__balloc::\n \t     __num_bitmaps(_S_mem_blocks[_S_last_request._M_where()]) + 1);\n \n \t++(*__puse_count);\n@@ -957,21 +957,22 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index >= 0);\n \n \t\n-\tif (__gnu_cxx::balloc::_Inclusive_between<_Alloc_block*>\n+\tif (__gnu_cxx::__balloc::_Inclusive_between<_Alloc_block*>\n \t    (__real_p) (_S_mem_blocks[_S_last_dealloc_index]))\n \t  {\n-\t    _GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index <= _S_mem_blocks.size() - 1);\n+\t    _GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index\n+\t\t\t\t  <= _S_mem_blocks.size() - 1);\n \n \t    // Initial Assumption was correct!\n \t    __diff = _S_last_dealloc_index;\n \t    __displacement = __real_p - _S_mem_blocks[__diff].first;\n \t  }\n \telse\n \t  {\n-\t    _Iterator _iter = __gnu_cxx::balloc::\n+\t    _Iterator _iter = __gnu_cxx::__balloc::\n \t      __find_if(_S_mem_blocks.begin(), \n \t\t\t_S_mem_blocks.end(), \n-\t\t\t__gnu_cxx::balloc::\n+\t\t\t__gnu_cxx::__balloc::\n \t\t\t_Inclusive_between<_Alloc_block*>(__real_p));\n \n \t    _GLIBCXX_DEBUG_ASSERT(_iter != _S_mem_blocks.end());\n@@ -983,16 +984,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \t// Get the position of the iterator that has been found.\n \tconst size_t __rotate = (__displacement\n-\t\t\t\t % size_t(balloc::bits_per_block));\n+\t\t\t\t % size_t(__balloc::bits_per_block));\n \tsize_t* __bitmapC = \n \t  reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first) - 1;\n-\t__bitmapC -= (__displacement / size_t(balloc::bits_per_block));\n+\t__bitmapC -= (__displacement / size_t(__balloc::bits_per_block));\n       \n-\tballoc::__bit_free(__bitmapC, __rotate);\n+\t__balloc::__bit_free(__bitmapC, __rotate);\n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first)\n-\t  - (__gnu_cxx::balloc::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n+\t  - (__gnu_cxx::__balloc::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n \t\n \t_GLIBCXX_DEBUG_ASSERT(*__puse_count != 0);\n \n@@ -1114,20 +1115,20 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   template<typename _Tp>\n     size_t bitmap_allocator<_Tp>::_S_block_size = \n-    2 * size_t(balloc::bits_per_block);\n+    2 * size_t(__balloc::bits_per_block);\n \n   template<typename _Tp>\n     typename __gnu_cxx::bitmap_allocator<_Tp>::_BPVector::size_type \n     bitmap_allocator<_Tp>::_S_last_dealloc_index = 0;\n \n   template<typename _Tp>\n-    __gnu_cxx::balloc::_Bitmap_counter \n+    __gnu_cxx::__balloc::_Bitmap_counter \n   <typename bitmap_allocator<_Tp>::_Alloc_block*>\n     bitmap_allocator<_Tp>::_S_last_request(_S_mem_blocks);\n \n #if defined __GTHREADS\n   template<typename _Tp>\n-    typename bitmap_allocator<_Tp>::mutex_type\n+    typename bitmap_allocator<_Tp>::__mutex_type\n     bitmap_allocator<_Tp>::_S_mut;\n #endif\n "}, {"sha": "56e07de91e0dbaf2142812406d4a5ba490998302", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=56acf88c0fbd8bc29fbad418019fef503a3d0318", "patch": "@@ -67,28 +67,28 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   \n   // NB: As this is used in libsupc++, need to only depend on\n   // exception. No stdexception classes, no use of std::string.\n-  class concurrence_lock_error : public std::exception\n+  class __concurrence_lock_error : public std::exception\n   {\n   public:\n     virtual char const*\n     what() const throw()\n-    { return \"__gnu_cxx::concurrence_lock_error\"; }\n+    { return \"__gnu_cxx::__concurrence_lock_error\"; }\n   };\n \n-  class concurrence_unlock_error : public std::exception\n+  class __concurrence_unlock_error : public std::exception\n   {\n   public:\n     virtual char const*\n     what() const throw()\n-    { return \"__gnu_cxx::concurrence_unlock_error\"; }\n+    { return \"__gnu_cxx::__concurrence_unlock_error\"; }\n   };\n \n   // Substitute for concurrence_error object in the case of -fno-exceptions.\n   inline void\n   __throw_concurrence_lock_error()\n   {\n #if __EXCEPTIONS\n-    throw concurrence_lock_error();\n+    throw __concurrence_lock_error();\n #else\n     std::abort();\n #endif\n@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __throw_concurrence_unlock_error()\n   {\n #if __EXCEPTIONS\n-    throw concurrence_unlock_error();\n+    throw __concurrence_unlock_error();\n #else\n     std::abort();\n #endif\n@@ -129,7 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     }\n \n     void lock()\n-    { \n+    {\n #if __GTHREADS\n       if (__gthread_active_p())\n \t{\n@@ -140,7 +140,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     }\n     \n     void unlock()\n-    { \n+    {\n #if __GTHREADS\n       if (__gthread_active_p())\n \t{\n@@ -204,16 +204,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   class __scoped_lock\n   {\n   public:\n-    typedef __mutex mutex_type;\n+    typedef __mutex __mutex_type;\n \n   private:\n-    mutex_type& _M_device;\n+    __mutex_type& _M_device;\n \n     __scoped_lock(const __scoped_lock&);\n     __scoped_lock& operator=(const __scoped_lock&);\n \n   public:\n-    explicit __scoped_lock(mutex_type& __name) : _M_device(__name)\n+    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)\n     { _M_device.lock(); }\n \n     ~__scoped_lock() throw()"}, {"sha": "411c7a1c0289dc1420768924dfb37d752aa89d74", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56acf88c0fbd8bc29fbad418019fef503a3d0318/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=56acf88c0fbd8bc29fbad418019fef503a3d0318", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. Out of line function definitions. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,10 +31,16 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  namespace balloc\n+  namespace __balloc\n   {\n-    template class __mini_vector<std::pair<bitmap_allocator<char>::_Alloc_block*, bitmap_allocator<char>::_Alloc_block*> >;\n-    template class __mini_vector<std::pair<bitmap_allocator<wchar_t>::_Alloc_block*, bitmap_allocator<wchar_t>::_Alloc_block*> >;\n+    template class __mini_vector<\n+      std::pair<bitmap_allocator<char>::_Alloc_block*,\n+\t\tbitmap_allocator<char>::_Alloc_block*> >;\n+\n+    template class __mini_vector<\n+      std::pair<bitmap_allocator<wchar_t>::_Alloc_block*,\n+\t\tbitmap_allocator<wchar_t>::_Alloc_block*> >;\n+\n     template class __mini_vector<size_t*>;\n \n     template size_t** __lower_bound(size_t**, size_t**, size_t const&, \n@@ -46,10 +52,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   _M_get(size_t __sz) throw(std::bad_alloc)\n   {\n #if defined __GTHREADS\n-    mutex_type& __bfl_mutex = _M_get_mutex();\n+    __mutex_type& __bfl_mutex = _M_get_mutex();\n #endif\n     const vector_type& __free_list = _M_get_free_list();\n-    using __gnu_cxx::balloc::__lower_bound;\n+    using __gnu_cxx::__balloc::__lower_bound;\n     iterator __tmp = __lower_bound(__free_list.begin(), __free_list.end(), \n \t\t\t\t   __sz, _LT_pointer_compare());\n \n@@ -71,7 +77,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    --__ctr;\n \t    try\n \t      {\n-\t\t__ret = reinterpret_cast<size_t*>(::operator new(__sz + sizeof(size_t)));\n+\t\t__ret = reinterpret_cast<size_t*>\n+\t\t  (::operator new(__sz + sizeof(size_t)));\n \t      }\n \t    catch(...)\n \t      {\n@@ -95,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n   }\n \n-  void \n+  void\n   free_list::\n   _M_clear()\n   {"}]}