{"sha": "b4d05578efc40cd1eaa1370d1bba58029c545ea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkMDU1NzhlZmM0MGNkMWVhYTEzNzBkMWJiYTU4MDI5YzU0NWVhMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2013-11-19T12:39:06Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2013-11-19T12:39:06Z"}, "message": "Small cleanups in cgraph.\n\n\t* cgraphunit.c (symtab_terminator): New variable.\n\t(queued_nodes): Renamed from first.  Use symtab_terminator as\n\tinitializer.\n\t(analyze_functions): Adjust accordingly.\n\t(cgraph_process_new_functions): Return void.\n\t* cgraph.h (cgraph_process_new_functions): Adjust declaration.\n\nFrom-SVN: r205024", "tree": {"sha": "b8cd2857f4c323efd8c210cca9bb665614a2dff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8cd2857f4c323efd8c210cca9bb665614a2dff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d05578efc40cd1eaa1370d1bba58029c545ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d05578efc40cd1eaa1370d1bba58029c545ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d05578efc40cd1eaa1370d1bba58029c545ea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d05578efc40cd1eaa1370d1bba58029c545ea0/comments", "author": null, "committer": null, "parents": [{"sha": "d8a2d370dc8e418c97cfacbef66a86ab444e94d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a2d370dc8e418c97cfacbef66a86ab444e94d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a2d370dc8e418c97cfacbef66a86ab444e94d2"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "9931a0b3216f864d36e5378fdd4f94d5980fc6bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4d05578efc40cd1eaa1370d1bba58029c545ea0", "patch": "@@ -1,3 +1,12 @@\n+2013-11-19  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* cgraphunit.c (symtab_terminator): New variable.\n+\t(queued_nodes): Renamed from first.  Use symtab_terminator as\n+\tinitializer.\n+\t(analyze_functions): Adjust accordingly.\n+\t(cgraph_process_new_functions): Return void.\n+\t* cgraph.h (cgraph_process_new_functions): Adjust declaration.\n+\n 2013-11-19  Marek Polacek  <polacek@redhat.com>\n \n \t* opts.c (common_handle_option): Add -fsanitize=null option.\n@@ -20,7 +29,7 @@\n \t(make_pass_sanopt): Likewise.\n \t(class pass_sanopt): New class.\n \t* ubsan.c: Include tree-pass.h, gimple-ssa.h, gimple-walk.h,\n-\tgimple-iterator.h and cfgloop.h. \n+\tgimple-iterator.h and cfgloop.h.\n \t(PROB_VERY_UNLIKELY): Define.\n \t(tree_type_map_hash): New function.\n \t(ubsan_type_descriptor): Add new parameter."}, {"sha": "4acf2d0c28665d0fde558dcba268141879ad11c0", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=b4d05578efc40cd1eaa1370d1bba58029c545ea0", "patch": "@@ -743,7 +743,7 @@ void cgraph_finalize_function (tree, bool);\n void finalize_compilation_unit (void);\n void compile (void);\n void init_cgraph (void);\n-bool cgraph_process_new_functions (void);\n+void cgraph_process_new_functions (void);\n void cgraph_process_same_body_aliases (void);\n void fixup_same_cpp_alias_visibility (symtab_node *, symtab_node *target, tree);\n /*  Initialize datastructures so DECL is a function in lowered gimple form."}, {"sha": "b84e1989be9380f3321354aff54b7235b4494671", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d05578efc40cd1eaa1370d1bba58029c545ea0/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=b4d05578efc40cd1eaa1370d1bba58029c545ea0", "patch": "@@ -268,37 +268,38 @@ decide_is_symbol_needed (symtab_node *node)\n   return false;\n }\n \n-/* Head of the queue of nodes to be processed while building callgraph */\n+/* Head and terminator of the queue of nodes to be processed while building\n+   callgraph.  */\n \n-static symtab_node *first = (symtab_node *)(void *)1;\n+static symtab_node symtab_terminator;\n+static symtab_node *queued_nodes = &symtab_terminator;\n \n-/* Add NODE to queue starting at FIRST. \n+/* Add NODE to queue starting at QUEUED_NODES. \n    The queue is linked via AUX pointers and terminated by pointer to 1.  */\n \n static void\n enqueue_node (symtab_node *node)\n {\n   if (node->aux)\n     return;\n-  gcc_checking_assert (first);\n-  node->aux = first;\n-  first = node;\n+  gcc_checking_assert (queued_nodes);\n+  node->aux = queued_nodes;\n+  queued_nodes = node;\n }\n \n /* Process CGRAPH_NEW_FUNCTIONS and perform actions necessary to add these\n    functions into callgraph in a way so they look like ordinary reachable\n    functions inserted into callgraph already at construction time.  */\n \n-bool\n+void\n cgraph_process_new_functions (void)\n {\n-  bool output = false;\n   tree fndecl;\n   struct cgraph_node *node;\n   cgraph_node_set_iterator csi;\n \n   if (!cgraph_new_nodes)\n-    return false;\n+    return;\n   handle_alias_pairs ();\n   /*  Note that this queue may grow as its being processed, as the new\n       functions may generate new ones.  */\n@@ -313,7 +314,6 @@ cgraph_process_new_functions (void)\n \t     it into reachable functions list.  */\n \n \t  cgraph_finalize_function (fndecl, false);\n-\t  output = true;\n           cgraph_call_function_insertion_hooks (node);\n \t  enqueue_node (node);\n \t  break;\n@@ -354,7 +354,6 @@ cgraph_process_new_functions (void)\n     }\n   free_cgraph_node_set (cgraph_new_nodes);\n   cgraph_new_nodes = NULL;\n-  return output;\n }\n \n /* As an GCC extension we allow redefinition of the function.  The\n@@ -985,11 +984,11 @@ analyze_functions (void)\n \n       /* Lower representation, build callgraph edges and references for all trivially\n          needed symbols and all symbols referred by them.  */\n-      while (first != (symtab_node *)(void *)1)\n+      while (queued_nodes != &symtab_terminator)\n \t{\n \t  changed = true;\n-\t  node = first;\n-\t  first = (symtab_node *)first->aux;\n+\t  node = queued_nodes;\n+\t  queued_nodes = (symtab_node *)queued_nodes->aux;\n \t  cgraph_node *cnode = dyn_cast <cgraph_node> (node);\n \t  if (cnode && cnode->definition)\n \t    {"}]}