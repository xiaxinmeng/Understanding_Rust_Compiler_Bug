{"sha": "c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjODUxNGUwZGQzN2JjODBjNGFkM2M2OGFiNTM5ZTFmOTg1NjExMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-12T13:36:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-12T13:36:08Z"}, "message": "re PR middle-end/60092 (posix_memalign not recognized to derive alias and alignment info)\n\n2014-02-12  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/60092\n\t* gimple-low.c (lower_builtin_posix_memalign): Lower conditional\n\tof posix_memalign being successful.\n\t(lower_stmt): Restrict lowering of posix_memalign to when\n\t-ftree-bit-ccp is enabled.\n\n\t* gcc.dg/torture/pr60092.c: New testcase.\n\t* gcc.dg/tree-ssa/alias-31.c: Disable SRA.\n\nFrom-SVN: r207720", "tree": {"sha": "2170229d022391e2e5097c4abd86cc05f7ff07dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2170229d022391e2e5097c4abd86cc05f7ff07dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8eb651bd31d310ccc2771d8346f9b1bc2d5957e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb651bd31d310ccc2771d8346f9b1bc2d5957e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb651bd31d310ccc2771d8346f9b1bc2d5957e2"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "1f4ddb8e31ad7058b076b37dfa667311c68b480b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "patch": "@@ -1,3 +1,11 @@\n+2014-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gimple-low.c (lower_builtin_posix_memalign): Lower conditional\n+\tof posix_memalign being successful.\n+\t(lower_stmt): Restrict lowering of posix_memalign to when\n+\t-ftree-bit-ccp is enabled.\n+\n 2014-02-12  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* config/avr/avr-c.c (avr_resolve_overloaded_builtin): Pass vNULL for"}, {"sha": "80fd786fddeb40f75e4bee1a9802d74b507517fb", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "patch": "@@ -336,7 +336,8 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t\tdata->cannot_fallthru = false;\n \t\treturn;\n \t      }\n-\t    else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_POSIX_MEMALIGN)\n+\t    else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_POSIX_MEMALIGN\n+\t\t     && flag_tree_bit_ccp)\n \t      {\n \t\tlower_builtin_posix_memalign (gsi);\n \t\treturn;\n@@ -781,37 +782,47 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n }\n \n /* Lower calls to posix_memalign to\n-     posix_memalign (ptr, align, size);\n-     tem = *ptr;\n-     tem = __builtin_assume_aligned (tem, align);\n-     *ptr = tem;\n+     res = posix_memalign (ptr, align, size);\n+     if (res == 0)\n+       *ptr = __builtin_assume_aligned (*ptr, align);\n    or to\n      void *tem;\n-     posix_memalign (&tem, align, size);\n-     ttem = tem;\n-     ttem = __builtin_assume_aligned (ttem, align);\n-     ptr = tem;\n+     res = posix_memalign (&tem, align, size);\n+     if (res == 0)\n+       ptr = __builtin_assume_aligned (tem, align);\n    in case the first argument was &ptr.  That way we can get at the\n    alignment of the heap pointer in CCP.  */\n \n static void\n lower_builtin_posix_memalign (gimple_stmt_iterator *gsi)\n {\n-  gimple stmt = gsi_stmt (*gsi);\n-  tree pptr = gimple_call_arg (stmt, 0);\n-  tree align = gimple_call_arg (stmt, 1);\n+  gimple stmt, call = gsi_stmt (*gsi);\n+  tree pptr = gimple_call_arg (call, 0);\n+  tree align = gimple_call_arg (call, 1);\n+  tree res = gimple_call_lhs (call);\n   tree ptr = create_tmp_reg (ptr_type_node, NULL);\n   if (TREE_CODE (pptr) == ADDR_EXPR)\n     {\n       tree tem = create_tmp_var (ptr_type_node, NULL);\n       TREE_ADDRESSABLE (tem) = 1;\n-      gimple_call_set_arg (stmt, 0, build_fold_addr_expr (tem));\n+      gimple_call_set_arg (call, 0, build_fold_addr_expr (tem));\n       stmt = gimple_build_assign (ptr, tem);\n     }\n   else\n     stmt = gimple_build_assign (ptr,\n \t\t\t\tfold_build2 (MEM_REF, ptr_type_node, pptr,\n \t\t\t\t\t     build_int_cst (ptr_type_node, 0)));\n+  if (res == NULL_TREE)\n+    {\n+      res = create_tmp_reg (integer_type_node, NULL);\n+      gimple_call_set_lhs (call, res);\n+    }\n+  tree align_label = create_artificial_label (UNKNOWN_LOCATION);\n+  tree noalign_label = create_artificial_label (UNKNOWN_LOCATION);\n+  gimple cond = gimple_build_cond (EQ_EXPR, res, integer_zero_node,\n+\t\t\t\t   align_label, noalign_label);\n+  gsi_insert_after (gsi, cond, GSI_NEW_STMT);\n+  gsi_insert_after (gsi, gimple_build_label (align_label), GSI_NEW_STMT);\n   gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n   stmt = gimple_build_call (builtin_decl_implicit (BUILT_IN_ASSUME_ALIGNED),\n \t\t\t    2, ptr, align);\n@@ -821,6 +832,7 @@ lower_builtin_posix_memalign (gimple_stmt_iterator *gsi)\n \t\t\t\t\t   build_int_cst (ptr_type_node, 0)),\n \t\t\t      ptr);\n   gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n+  gsi_insert_after (gsi, gimple_build_label (noalign_label), GSI_NEW_STMT);\n }\n \f\n "}, {"sha": "c87966d3fe73c8776ab58c4b5a5a079bf053be6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "patch": "@@ -1,3 +1,9 @@\n+2014-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gcc.dg/torture/pr60092.c: New testcase.\n+\t* gcc.dg/tree-ssa/alias-31.c: Disable SRA.\n+\n 2014-02-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20140212-1.c: New test."}, {"sha": "f1ff80d8ac72242b16c9c85091fc2e0414cba41a", "filename": "gcc/testsuite/gcc.dg/torture/pr60092.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c?ref=c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-weak \"\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern int posix_memalign(void **memptr, size_t alignment, size_t size) __attribute__((weak));\n+extern void abort(void);\n+int\n+main (void)\n+{\n+  void *p;\n+  int ret;\n+\n+  if (!posix_memalign)\n+    return 0;\n+\n+  p = (void *)&ret;\n+  ret = posix_memalign (&p, sizeof (void *), -1);\n+  if (p != (void *)&ret)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "622df80a9c4520e138ed30670f80f6c36027fc5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c8514e0dd37bc80c4ad3c68ab539e1f9856110/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c?ref=c4c8514e0dd37bc80c4ad3c68ab539e1f9856110", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+/* { dg-options \"-O2 -fno-tree-sra -fdump-tree-cddce1\" } */\n \n extern int posix_memalign(void **memptr,\n \t\t\t  __SIZE_TYPE__ alignment, __SIZE_TYPE__ size);"}]}