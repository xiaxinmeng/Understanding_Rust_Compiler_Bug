{"sha": "25b5b4657bb687964f54f3ec3f6aece9645b22c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNWI0NjU3YmI2ODc5NjRmNTRmM2VjM2Y2YWVjZTk2NDViMjJjMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-06-11T21:29:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-06-11T21:29:39Z"}, "message": "c-tree.texi: Update information about flag_honor_std.\n\n\t* doc/c-tree.texi: Update information about flag_honor_std.\n\t* doc/install.texi: Note that binutils is required on HPUX 11.\n\t* doc/invoke.texi (-fhonor-std): Note that -fno-honor-std is\n\tnow the default.\n\n\t* config/mips/abi64.h (RETURN_IN_MEMORY): Fix handling of\n\tvariable-sized types.\n\n\t* lang-options.h: Emit documentation for -fno-honor-std, not\n\t-fhonor-std.\n\nFrom-SVN: r43226", "tree": {"sha": "de2fc619f0b4fe48e434795a71a13082c9b4b6db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2fc619f0b4fe48e434795a71a13082c9b4b6db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b5b4657bb687964f54f3ec3f6aece9645b22c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b5b4657bb687964f54f3ec3f6aece9645b22c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b5b4657bb687964f54f3ec3f6aece9645b22c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b5b4657bb687964f54f3ec3f6aece9645b22c2/comments", "author": null, "committer": null, "parents": [{"sha": "c94cfc8b23653bbc1696693089e8c8885146252c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94cfc8b23653bbc1696693089e8c8885146252c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94cfc8b23653bbc1696693089e8c8885146252c"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "a382d5176d419deca492eec2dde10ed8cb7ea662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -1,3 +1,13 @@\n+2001-06-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* doc/c-tree.texi: Update information about flag_honor_std.\n+\t* doc/install.texi: Note that binutils is required on HPUX 11.\n+\t* doc/invoke.texi (-fhonor-std): Note that -fno-honor-std is\n+\tnow the default.\n+\n+\t* config/mips/abi64.h (RETURN_IN_MEMORY): Fix handling of\n+\tvariable-sized types.\n+\n 2001-06-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/md.texi: Use TeX dashes and quotes."}, {"sha": "5be5f51b109ad9d41e28302aa57cd4c7c63b26ab", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -86,12 +86,17 @@ Boston, MA 02111-1307, USA.  */\n \t      || GET_MODE_CLASS (MODE) == MODE_INT)))\t\t\t\\\n       ? downward : upward))\n \n+/* Under the old (i.e., 32 and O64 ABIs) all BLKmode objects are\n+   returned in memory.  Under the new (N32 and 64-bit MIPS ABIs) small\n+   structures are returned in a register.  Objects with varying size\n+   must still be returned in memory, of course.  */\n #undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t\\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64)\t\t\t\t\\\n-   ? TYPE_MODE (TYPE) == BLKmode\t\t\t\t\t\\\n-   : (int_size_in_bytes (TYPE)\t\t\t\t\t\t\\\n-      > (2 * UNITS_PER_WORD)))\n+#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t \\\n+  ((mips_abi == ABI_32 || mips_abi == ABI_O64)\t\t\t\t \\\n+   ? TYPE_MODE (TYPE) == BLKmode\t\t\t\t\t \\\n+   : ((int_size_in_bytes (TYPE)\t\t\t\t\t\t \\\n+       > (2 * UNITS_PER_WORD)) \t\t\t\t\t\t \\\n+      || (int_size_in_bytes (TYPE) == -1)))\n \n #ifdef ANSI_PROTOTYPES\n union tree_node;"}, {"sha": "8d84da69c61aba6a2265ffd3318a060fa830f941", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -1,3 +1,8 @@\n+2001-06-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lang-options.h: Emit documentation for -fno-honor-std, not\n+\t-fhonor-std.\n+\n 2001-06-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* typeck.c (get_member_function_from_ptrfunc) [vbit_in_delta]:"}, {"sha": "172461a95065e5480752019028b7f24044ea049f", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -64,9 +64,9 @@ DEFINE_LANG_NAME (\"C++\")\n     N_(\"Do not recognise GNU defined keywords\") },\n   { \"-fhandle-exceptions\", \"\" },\n   { \"-fno-handle-exceptions\", \"\" },\n-  { \"-fhonor-std\", \n-    N_(\"Treat the namespace `std' as a normal namespace\") },\n-  { \"-fno-honor-std\", \"\" },\n+  { \"-fhonor-std\", \"\" },\n+  { \"-fno-honor-std\", \n+    N_(\"Do not treat the namespace `std' as a normal namespace\") },\n   { \"-fhuge-objects\", \n     N_(\"Enable support for huge objects\") },\n   { \"-fno-huge-objects\", \"\" },"}, {"sha": "d5a786bf124f0596a984faad455986ec04d17270", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -619,16 +619,13 @@ representation, the global namespace is no different from any other\n namespace.  Thus, in what follows, we describe namespaces generally,\n rather than the global namespace in particular.\n \n-The @code{::std} namespace, however, @emph{is} special, unless\n-@code{flag_honor_std} is set.  This variable is set by the use\n-@option{-fhonor-std} (or an option that implies it, like\n-@option{-fnew-abi}), when invoking G++.  When @code{flag_honor_std} is\n-set, the @code{std} namespace is just like any other namespace.  When\n+The @code{::std} namespace, however, @emph{is} special when\n+@code{flag_honor_std} is not set.  When @code{flag_honor_std} is set,\n+the @code{std} namespace is just like any other namespace.  When\n @code{flag_honor_std} is not set, however, the @code{::std} namespace is\n treated as a synonym for the global namespace, thereby allowing users to\n write code that will work with compilers that put the standard library\n-in the @code{::std} namespace, even though the library supplied with G++\n-does not do so, as of GCC 2.95.  The @code{std} namespace is represented\n+in the @code{::std} namespace.  The @code{std} namespace is represented\n by the variable @code{std_node}.  Although @code{std_node} is a\n @code{NAMESPACE_DECL}, it does not have all the fields required of a\n real namespace, and the macros and functions described here do not work,"}, {"sha": "3c491ccc0b4069f3c75d14dc21895c72abf20b46", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.17 2001/06/11 01:03:11 aoliva Exp $\n+@comment $Id: install.texi,v 1.18 2001/06/11 07:26:33 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -1726,10 +1726,8 @@ bootstrap}.\n @end html\n @heading @anchor{hppa*-hp-hpux11}hppa*-hp-hpux11\n \n-GCC 2.95.2 does not support HP-UX 11, and it cannot generate 64-bit\n-object files. Current (as of late 2000) snapshots and GCC 3.0 do support\n-HP-UX 11.\n-\n+GCC 3.0 supports HP-UX 11.  You must use GNU binutils 2.11 or above on\n+this platform.\n \n @html\n </p>"}, {"sha": "eeecbee53f72ace78c091ec3538832e048fc5d08", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b5b4657bb687964f54f3ec3f6aece9645b22c2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=25b5b4657bb687964f54f3ec3f6aece9645b22c2", "patch": "@@ -174,7 +174,7 @@ in the following sections.\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs  -fexternal-templates @gol\n -falt-external-templates @gol\n--ffor-scope  -fno-for-scope  -fno-gnu-keywords  -fhonor-std @gol\n+-ffor-scope  -fno-for-scope  -fno-gnu-keywords  -fno-honor-std @gol\n -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n@@ -1355,13 +1355,18 @@ Do not recognize @code{typeof} as a keyword, so that code can use this\n word as an identifier. You can use the keyword @code{__typeof__} instead.\n @samp{-ansi} implies @samp{-fno-gnu-keywords}.\n \n-@item -fhonor-std\n-@opindex fhonor-std\n-Treat the @code{namespace std} as a namespace, instead of ignoring\n-it. For compatibility with earlier versions of g++, the compiler will,\n-by default, ignore @code{namespace-declarations},\n-@code{using-declarations}, @code{using-directives}, and\n-@code{namespace-names}, if they involve @code{std}.\n+@item -fno-honor-std\n+@opindex fno-honor-std\n+Ignore @code{namespace std}, instead of treating it as a real namespace.\n+With this switch, the compiler will ignore\n+@code{namespace-declarations}, @code{using-declarations},\n+@code{using-directives}, and @code{namespace-names}, if they involve\n+@code{std}.  \n+\n+This option is only useful if you have manually compiled the C++\n+run-time library with the same switch.  Otherwise, your programs will\n+not link.  The use of this option is not recommended, and the option may\n+be removed from a future version of G++.\n \n @item -fno-implicit-templates\n @opindex fno-implicit-templates"}]}