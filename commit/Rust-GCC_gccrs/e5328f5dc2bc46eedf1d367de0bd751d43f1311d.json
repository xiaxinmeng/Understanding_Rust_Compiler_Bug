{"sha": "e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzMjhmNWRjMmJjNDZlZWRmMWQzNjdkZTBiZDc1MWQ0M2YxMzExZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-24T14:35:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-24T14:35:36Z"}, "message": "re PR tree-optimization/71230 (ICE : in zero_one_operation, at tree-ssa-reassoc.c:1230)\n\n2016-05-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71230\n\t* tree-ssa-reassoc.c (zero_one_operation): Handle negate special ops.\n\n\t* gcc.dg/torture/pr71230.c: New testcase.\n\t* g++.dg/torture/pr71230.C: Likewise.\n\nFrom-SVN: r236643", "tree": {"sha": "3e7c51013c73ad079750221df2bef6bfcd99e8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e7c51013c73ad079750221df2bef6bfcd99e8ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fce57248c89d5b990d1f82a2f8eba5a9741c9ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce57248c89d5b990d1f82a2f8eba5a9741c9ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce57248c89d5b990d1f82a2f8eba5a9741c9ad9"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "13134d91114962ecc24af25363fa5900321e5a76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "patch": "@@ -1,3 +1,8 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71230\n+\t* tree-ssa-reassoc.c (zero_one_operation): Handle negate special ops.\n+\n 2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vectorizable_comparison): Delete."}, {"sha": "a6f65b87a1988c63cb0f2a0fd77b5383ce8b1f62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "patch": "@@ -1,3 +1,9 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71230\n+\t* gcc.dg/torture/pr71230.c: New testcase.\n+\t* g++.dg/torture/pr71230.C: Likewise.\n+\n 2016-05-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-c++-common/goacc/routine-5.c: Add tests."}, {"sha": "40ce55a6acc32a19e821e3ced138249f1730b325", "filename": "gcc/testsuite/g++.dg/torture/pr71230.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71230.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71230.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71230.C?ref=e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-ffast-math\" }\n+\n+template <int rank, int dim> class Tensor;\n+template <int dim> class Point {\n+public:\n+    Point (const double x, const double y, const double z);\n+    double operator () (const unsigned int index) const;\n+};\n+template <int celldim, int dim> class TriaObjectAccessor  {\n+    Point<dim> & vertex (const unsigned int i) const;\n+    Point<dim> barycenter (double, double, double, double, double) const;\n+};\n+template <> Point<3> TriaObjectAccessor<3, 3>::barycenter (double s6, double s7, double s1, double s2, double s3) const\n+{\n+    const double x[8] = {\n+\tvertex(0)(0),    vertex(1)(0),    vertex(2)(0),    vertex(3)(0),    vertex(4)(0),    vertex(5)(0),    vertex(6)(0),    vertex(7)(0) };\n+    const double y[8] = {\n+\tvertex(0)(1),    vertex(1)(1),    vertex(2)(1),    vertex(3)(1),    vertex(4)(1),    vertex(5)(1),    vertex(6)(1),    vertex(7)(1) };\n+    const double z[8] = {\n+\tvertex(0)(2),    vertex(1)(2),    vertex(2)(2),    vertex(3)(2),    vertex(4)(2),    vertex(5)(2),    vertex(6)(2),    vertex(7)(2) };\n+    double s4, s5, s8;\n+    const double unknown0 = s1*s2;\n+    const double unknown1 = s1*s2;\n+    s8 = -z[2]*x[1]*y[2]*z[5]+z[2]*y[1]*x[2]*z[5]-z[2]*z[1]*x[2]*y[5]+z[2]*z        [1]*x[5]*y[2]+2.0*y[5]*x[7]*z[4]*z[4]-y[1]*x[2]*z[0]*z[0]+x[0]*y[3]*z[7]*z[7]        -2.0*z[5]*z[5]*x[4]*y[1]+2.0*z[5]*z[5]*x[1]*y[4]+z[5]*z[5]*x[0]*y[4]-2.0*z[2]*z        [2]*x[1]*y[3]+2.0*z[2]*z[2]*x[3]*y[1]-x[0]*y[4]*z[7]*z[7]-y[0]*x[3]*z[7]*z[7]+x        [1]*y[0]*z[5]*z[5];\n+    s5 = s8+z[2]*x[6]*y[2]*z[5]-z[2]*x[5]*y[2]*z[6]-z[2]*x[2]*y[3]*z[7]-x[2]*        y[3]*z[7]*z[7]+2.0*z[2]*x[2]*y[3]*z[1]-z[2]*y[2]*x[3]*z[0]+z[2]*y[2]*x[0]*z[3]-        z[2]*x[2]*y[0]*z[3]-z[7]*y[2]*x[7]*z[3]+z[7]*z[2]*x[7]*y[3]+z[7]*x[2]*y[7]*z[3]        +z[6]*y[1]*x[2]*z[5]-z[6]*x[1]*y[2]*z[5]+z[5]*x[1]*y[5]*z[2]+s6+s7;\n+    s4 = 1/s5;\n+    s2 = s3*s4;\n+    const double unknown2 = s1*s2;\n+    return Point<3> (unknown0, unknown1, unknown2);\n+}"}, {"sha": "d0df8da9b335bd23c99ed36338d36812afdbbe0f", "filename": "gcc/testsuite/gcc.dg/torture/pr71230.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71230.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71230.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71230.c?ref=e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ffast-math\" } */\n+\n+void metric_carttosphere(int *cctk_lsh, double txz, double tyz, double txx,\n+\t\t\t double tzz, double sint, double cosp, double cost,\n+\t\t\t double tyy, double sinp, double txy, double *grp,\n+\t\t\t double *grq, double *r)\n+{\n+  int i;\n+  for(i=0; i<cctk_lsh[0]*cctk_lsh[1]*cctk_lsh[2]; i++)\n+    {\n+      grq[i] = (cost*tyy*((sinp)*(sinp))*sint+\n+\t\t2*cosp*cost*txy*sinp*sint-\n+\t\tcost*tzz*sint+ \n+\t\t((cosp)*(cosp))*cost*txx*sint+\n+\t\t2*((cost)*(cost))*tyz*sinp-\n+\t\ttyz*sinp+\n+\t\t2*cosp*((cost)*(cost))*txz-\n+\t\tcosp*txz)*r[i];\n+      grp[i] = ((-txy*((sinp)*(sinp))+\n+\t\t (cosp*tyy-cosp*txx)*sinp+\n+\t\t ((cosp)*(cosp))*txy)*sint-\n+\t\tcost*txz*sinp+cosp*cost*tyz);\n+    }\n+}"}, {"sha": "3b0266767a3c3ce6c90b5e1e06acb11da1b2527d", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5328f5dc2bc46eedf1d367de0bd751d43f1311d/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=e5328f5dc2bc46eedf1d367de0bd751d43f1311d", "patch": "@@ -1189,12 +1189,20 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n     {\n       tree name;\n \n-      if (opcode == MULT_EXPR\n-\t  && stmt_is_power_of_op (stmt, op))\n+      if (opcode == MULT_EXPR)\n \t{\n-\t  if (decrement_power (stmt) == 1)\n-\t    propagate_op_to_single_use (op, stmt, def);\n-\t  return;\n+\t  if (stmt_is_power_of_op (stmt, op))\n+\t    {\n+\t      if (decrement_power (stmt) == 1)\n+\t\tpropagate_op_to_single_use (op, stmt, def);\n+\t      return;\n+\t    }\n+\t  else if (gimple_assign_rhs_code (stmt) == NEGATE_EXPR\n+\t\t   && gimple_assign_rhs1 (stmt) == op)\n+\t    {\n+\t      propagate_op_to_single_use (op, stmt, def);\n+\t      return;\n+\t    }\n \t}\n \n       name = gimple_assign_rhs1 (stmt);\n@@ -1213,7 +1221,8 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t}\n \n       /* We might have a multiply of two __builtin_pow* calls, and\n-\t the operand might be hiding in the rightmost one.  */\n+\t the operand might be hiding in the rightmost one.  Likewise\n+\t this can happen for a negate.  */\n       if (opcode == MULT_EXPR\n \t  && gimple_assign_rhs_code (stmt) == opcode\n \t  && TREE_CODE (gimple_assign_rhs2 (stmt)) == SSA_NAME\n@@ -1226,6 +1235,13 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t\tpropagate_op_to_single_use (op, stmt2, def);\n \t      return;\n \t    }\n+\t  else if (is_gimple_assign (stmt2)\n+\t\t   && gimple_assign_rhs_code (stmt2) == NEGATE_EXPR\n+\t\t   && gimple_assign_rhs1 (stmt2) == op)\n+\t    {\n+\t      propagate_op_to_single_use (op, stmt2, def);\n+\t      return;\n+\t    }\n \t}\n \n       /* Continue walking the chain.  */"}]}