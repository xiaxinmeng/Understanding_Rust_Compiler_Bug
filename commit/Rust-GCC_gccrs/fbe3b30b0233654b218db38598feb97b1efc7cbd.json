{"sha": "fbe3b30b0233654b218db38598feb97b1efc7cbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlM2IzMGIwMjMzNjU0YjIxOGRiMzg1OThmZWI5N2IxZWZjN2NiZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@koffie.nl", "date": "2003-01-15T12:07:46Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2003-01-15T12:07:46Z"}, "message": "Segher Boessenkool  <segher@koffie.nl>\n\n\t* predict.c (real_inv_br_prob_base): New variable.\n\t(propagate_freq): Use multiply by reciprocal instead of\n\tdivision.  Don't divide by 1.0 at all.\n\t(estimate_bb_frequencies): Similar.\n\nFrom-SVN: r61326", "tree": {"sha": "f85fdb4afd85f5211f727167742b5a1bbcb1197e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85fdb4afd85f5211f727167742b5a1bbcb1197e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe3b30b0233654b218db38598feb97b1efc7cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe3b30b0233654b218db38598feb97b1efc7cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe3b30b0233654b218db38598feb97b1efc7cbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe3b30b0233654b218db38598feb97b1efc7cbd/comments", "author": null, "committer": null, "parents": [{"sha": "7c005a3a4586b0f7fba10a5b5f889549a296d61b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c005a3a4586b0f7fba10a5b5f889549a296d61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c005a3a4586b0f7fba10a5b5f889549a296d61b"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "5d907b19b840f562e2b2353cecd8013a15c34f3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe3b30b0233654b218db38598feb97b1efc7cbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe3b30b0233654b218db38598feb97b1efc7cbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbe3b30b0233654b218db38598feb97b1efc7cbd", "patch": "@@ -1,3 +1,10 @@\n+2003-01-15  Segher Boessenkool  <segher@koffie.nl>\n+\n+\t* predict.c (real_inv_br_prob_base): New variable.\n+\t(propagate_freq): Use multiply by reciprocal instead of\n+\tdivision.  Don't divide by 1.0 at all.\n+\t(estimate_bb_frequencies): Similar.\n+\n 2003-01-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (libgcc_visibility): Force disabled on IRIX 6 too."}, {"sha": "4ca71d3b0d2430215c43a6e3344fc9648cb214e8", "filename": "gcc/predict.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe3b30b0233654b218db38598feb97b1efc7cbd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe3b30b0233654b218db38598feb97b1efc7cbd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=fbe3b30b0233654b218db38598feb97b1efc7cbd", "patch": "@@ -53,10 +53,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"loop.h\"\n \n-/* real constants: 0, 1, 1-1/REG_BR_PROB_BASE, REG_BR_PROB_BASE, 0.5,\n-                   REAL_BB_FREQ_MAX.  */\n+/* real constants: 0, 1, 1-1/REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n+\t\t   1/REG_BR_PROB_BASE, 0.5, BB_FREQ_MAX.  */\n static REAL_VALUE_TYPE real_zero, real_one, real_almost_one, real_br_prob_base,\n-\t\t       real_one_half, real_bb_freq_max;\n+\t\t       real_inv_br_prob_base, real_one_half, real_bb_freq_max;\n \n /* Random guesstimation given names.  */\n #define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 10 - 1)\n@@ -988,20 +988,25 @@ propagate_freq (loop)\n \t\t\t\t     TYPE_MODE (double_type_node));\n \t\tREAL_ARITHMETIC (tmp, MULT_EXPR, tmp,\n \t\t\t\t BLOCK_INFO (e->src)->frequency);\n-\t\tREAL_ARITHMETIC (tmp, RDIV_EXPR, tmp, real_br_prob_base);\n+\t\tREAL_ARITHMETIC (tmp, MULT_EXPR, tmp, real_inv_br_prob_base);\n \t\tREAL_ARITHMETIC (frequency, PLUS_EXPR, frequency, tmp);\n \t      }\n \n-\t  if (REAL_VALUES_LESS (real_almost_one, cyclic_probability))\n-\t    memcpy (&cyclic_probability, &real_almost_one, sizeof (real_zero));\n+\t  if (REAL_VALUES_IDENTICAL (cyclic_probability, real_zero))\n+\t    memcpy (&BLOCK_INFO (bb)->frequency, &frequency, sizeof (frequency));\n+\t  else\n+\t    {\n+\t      if (REAL_VALUES_LESS (real_almost_one, cyclic_probability))\n+\t\tmemcpy (&cyclic_probability, &real_almost_one, sizeof (real_zero));\n \n-\t  /* BLOCK_INFO (bb)->frequency = frequency / (1 - cyclic_probability)\n-\t   */\n+\t      /* BLOCK_INFO (bb)->frequency = frequency / (1 - cyclic_probability)\n+\t       */\n \n-\t  REAL_ARITHMETIC (cyclic_probability, MINUS_EXPR, real_one,\n+\t      REAL_ARITHMETIC (cyclic_probability, MINUS_EXPR, real_one,\n \t\t\t   cyclic_probability);\n-\t  REAL_ARITHMETIC (BLOCK_INFO (bb)->frequency,\n-\t\t\t   RDIV_EXPR, frequency, cyclic_probability);\n+\t      REAL_ARITHMETIC (BLOCK_INFO (bb)->frequency,\n+\t\t\t       RDIV_EXPR, frequency, cyclic_probability);\n+\t    }\n \t}\n \n       BLOCK_INFO (bb)->tovisit = 0;\n@@ -1020,7 +1025,7 @@ propagate_freq (loop)\n \t    REAL_ARITHMETIC (tmp, MULT_EXPR, tmp,\n \t\t\t     BLOCK_INFO (bb)->frequency);\n \t    REAL_ARITHMETIC (EDGE_INFO (e)->back_edge_prob,\n-\t\t\t     RDIV_EXPR, tmp, real_br_prob_base);\n+\t\t\t     MULT_EXPR, tmp, real_inv_br_prob_base);\n \n \t  }\n \n@@ -1151,11 +1156,9 @@ estimate_bb_frequencies (loops)\n       REAL_VALUE_FROM_INT (real_br_prob_base, REG_BR_PROB_BASE, 0, double_mode);\n       REAL_VALUE_FROM_INT (real_bb_freq_max, BB_FREQ_MAX, 0, double_mode);\n       REAL_VALUE_FROM_INT (real_one_half, 2, 0, double_mode);\n-\n       REAL_ARITHMETIC (real_one_half, RDIV_EXPR, real_one, real_one_half);\n-\n-      REAL_ARITHMETIC (real_almost_one, RDIV_EXPR, real_one, real_br_prob_base);\n-      REAL_ARITHMETIC (real_almost_one, MINUS_EXPR, real_one, real_almost_one);\n+      REAL_ARITHMETIC (real_inv_br_prob_base, RDIV_EXPR, real_one, real_br_prob_base);\n+      REAL_ARITHMETIC (real_almost_one, MINUS_EXPR, real_one, real_inv_br_prob_base);\n \n       mark_dfs_back_edges ();\n       /* Fill in the probability values in flowgraph based on the REG_BR_PROB\n@@ -1199,8 +1202,8 @@ estimate_bb_frequencies (loops)\n \t      REAL_VALUE_FROM_INT (EDGE_INFO (e)->back_edge_prob,\n \t\t\t\t   e->probability, 0, double_mode);\n \t      REAL_ARITHMETIC (EDGE_INFO (e)->back_edge_prob,\n-\t\t\t       RDIV_EXPR, EDGE_INFO (e)->back_edge_prob,\n-\t\t\t       real_br_prob_base);\n+\t\t\t       MULT_EXPR, EDGE_INFO (e)->back_edge_prob,\n+\t\t\t       real_inv_br_prob_base);\n \t    }\n \t}\n \n@@ -1215,13 +1218,14 @@ estimate_bb_frequencies (loops)\n \t  memcpy (&freq_max, &BLOCK_INFO (bb)->frequency,\n \t\t  sizeof (freq_max));\n \n+      REAL_ARITHMETIC (freq_max, RDIV_EXPR, real_bb_freq_max, freq_max);\n+\n       FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n \t{\n \t  REAL_VALUE_TYPE tmp;\n \n \t  REAL_ARITHMETIC (tmp, MULT_EXPR, BLOCK_INFO (bb)->frequency,\n-\t\t\t   real_bb_freq_max);\n-\t  REAL_ARITHMETIC (tmp, RDIV_EXPR, tmp, freq_max);\n+\t\t\t   freq_max);\n \t  REAL_ARITHMETIC (tmp, PLUS_EXPR, tmp, real_one_half);\n \t  bb->frequency = REAL_VALUE_UNSIGNED_FIX (tmp);\n \t}"}]}