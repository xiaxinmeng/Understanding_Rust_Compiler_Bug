{"sha": "cafea0e43647f764861b625232460c584fe11086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmZWEwZTQzNjQ3Zjc2NDg2MWI2MjUyMzI0NjBjNTg0ZmUxMTA4Ng==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-09-03T17:47:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-03T17:47:32Z"}, "message": "condition_variable: Use new deleted ctors.\n\n2008-09-03  Chris Fairles  <chris.fairles@gmail.com>\n\n        * include/std/condition_variable: Use new deleted ctors.\n        * include/std/mutex: Likewise plus implement timed_mutex, \n\trecursive_timed_mutex and call_once.\n\t* src/condition_variable.cc: Implement wait(). Use gthread types.\n\tRemove _GTHREADS_HAS_COND checks in favor of global\n\t_GLIBCXX_HAS_GTHREADS.\n\t* src/mutex.cc (call_once): Implementation using TLS with mutex\n\tfallback.\n\t* config/abi/pre/gnu.ver: Add exported symbols.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_gthreads): New.\n\t* testsuite/lib/dg-options.exp (dg-require-gthreads): Likewise.\n\t* testsuite/30_threads/lock_guard/requirements/typedefs.cc: Use\n\tdg-require-gthreads and dg-require-cstdint.\n\t* testsuite/30_threads/lock_guard/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/requirements/typedefs.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n\tLikewise.\n        * testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/requirements/typedefs.cc:\n\tLikewise.\n        * testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: Likewise.\n        * testsuite/30_threads/mutex/cons/assign_neg.cc: Also adjust dg-error\n\tlines for deleted members.\n        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/call_once/once_flag.cc: New.\n\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise\n\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/requirements/typedefs.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n\tLikewise.\n\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/modifiers/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n\nFrom-SVN: r139944", "tree": {"sha": "c3ebd816c3b1581824f71c85c5584ffa18c7c763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ebd816c3b1581824f71c85c5584ffa18c7c763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cafea0e43647f764861b625232460c584fe11086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafea0e43647f764861b625232460c584fe11086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafea0e43647f764861b625232460c584fe11086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafea0e43647f764861b625232460c584fe11086/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b800287b74501a98bf859cf13f46eb562ba876c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b800287b74501a98bf859cf13f46eb562ba876c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b800287b74501a98bf859cf13f46eb562ba876c"}], "stats": {"total": 876, "additions": 876, "deletions": 0}, "files": [{"sha": "15f3b24f22ccbf6ca55f76d310afdcaf89d3627b", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F1.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      lock_type lock;\n+\n+      VERIFY( !lock.owns_lock() );\n+      VERIFY( !(bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "2e734860b1b8e95095206e28e34c9ad4c38205ad", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F2.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type lock(m);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "ecb783f6448637d7e0c68d00e5e61ad28b444cd7", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/3.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F3.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type lock(m, std::defer_lock);\n+\n+      VERIFY( !lock.owns_lock() );\n+      VERIFY( !(bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "088e39f48262a33c685b9117d8a4a3ac7ba8223c", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/4.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F4.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type lock(m, std::try_to_lock);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "b2f005001ad0a5895a78bf7d3d235363aea77ae1", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/5.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try \n+    {\n+      clock_type::time_point t = clock_type::now() + std::chrono::seconds(5);\n+\n+      mutex_type m;\n+      lock_type lock(m, t);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "db0d9cb8a3ee704318e1437dfdbaa6571c3ce619", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/6.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try \n+    {\n+      clock_type::duration d = std::chrono::seconds(5);\n+\n+      mutex_type m;\n+      lock_type lock(m, d);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c0d93a34bf97f7f5b558a68f7f5ab49f5ba79d5e", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/1.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F1.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+\n+      l.lock();\n+\n+      VERIFY( (bool)l );\n+      VERIFY( l.owns_lock() );\n+\n+      l.unlock();\n+      \n+      VERIFY( !(bool)l );\n+      VERIFY( !l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "96ab25e999910a68daabb68a979b7d3868b3db55", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/2.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,113 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      lock_type l;\n+\n+      // Lock unique_lock w/o mutex\n+      try\n+        {\n+          l.lock();\n+        }\n+      catch (std::system_error const& ex)\n+        {\n+\t  VERIFY( ex.code() == std::posix_error::operation_not_permitted );\n+        }\n+      catch (...)\n+        {\n+          VERIFY( false );\n+        }\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l(m);\n+\n+      // Lock already locked unique_lock.\n+      try\n+\t{\n+\t  l.lock();\n+\t}\n+      catch (const std::system_error& ex)\n+\t{\n+\t  VERIFY( ex.code() == std::posix_error::resource_deadlock_would_occur );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "b64c9f8f4e1395d1ddf85c0c30440e14ede2aeb4", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/3.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,76 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+\n+      try\n+\t{\n+\t  l.try_lock_for(std::chrono::milliseconds(100));\n+\t}\n+      catch(const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      \n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "6f43a789a695559bd261f123518b43199c16a70f", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/4.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+      clock_type::time_point t = clock_type::now() + std::chrono::seconds(1);\n+\n+      try\n+\t{\n+\t  l.try_lock_until(t);\n+\t}\n+      catch(const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      \n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "149fe16dfea9f962d31f94e420f6424917095a4b", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/modifiers/1.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F1.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,77 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l1(m);\n+      lock_type l2;\n+      \n+      try\n+\t{\n+\t  l1.swap(l2);\n+\t}\n+      catch (const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch(...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      \n+      VERIFY( !(bool)l1 );\n+      VERIFY( (bool)l2 );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "386266cd573b8ffecd67cf54de1dbeba02216a1e", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/modifiers/2.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafea0e43647f764861b625232460c584fe11086/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fmodifiers%2F2.cc?ref=cafea0e43647f764861b625232460c584fe11086", "patch": "@@ -0,0 +1,77 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      lock_type l1(m);\n+      lock_type l2;\n+      \n+      try\n+\t{\n+\t  l1.swap(l2);\n+\t}\n+      catch (const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch(...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      \n+      VERIFY( !(bool)l1 );\n+      VERIFY( (bool)l2 );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}]}