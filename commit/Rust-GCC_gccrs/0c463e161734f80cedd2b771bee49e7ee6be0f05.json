{"sha": "0c463e161734f80cedd2b771bee49e7ee6be0f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0NjNlMTYxNzM0ZjgwY2VkZDJiNzcxYmVlNDllN2VlNmJlMGYwNQ==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-04-29T13:20:53Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-04-29T13:20:53Z"}, "message": "Makefile.in (PLUGIN_VERSION_H): New.\n\n2009-04-29  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* Makefile.in (PLUGIN_VERSION_H): New.\n\t(OBJS-common): Remove plugin-version.o.\n\t(plugin.o): Depend on (PLUGIN_VERSION_H).\n\t(plugin-version.o): Remove.\n\t* configure: Regenerate\n\t* configure.ac: Create plugin-version.h.\n\t* gcc-plugin.h (plugin_gcc_version): Remove.\n\t(plugin_default_version_check): Change signature.\n\t* plugin-version.c: Remove.\n\t* plugin.c: Include plugin-version.h.\n\t(str_plugin_gcc_version_name): Remove.\n\t(try_init_one_plugin): Pass gcc version to plugin_init.\n\t(plugin_default_version_check): Both gcc and plugin versions are now\n\targuments.\n\nFrom-SVN: r146962", "tree": {"sha": "bc30f317d77a84e251fb2c5a1c24dff6ffcfd42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc30f317d77a84e251fb2c5a1c24dff6ffcfd42a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c463e161734f80cedd2b771bee49e7ee6be0f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c463e161734f80cedd2b771bee49e7ee6be0f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c463e161734f80cedd2b771bee49e7ee6be0f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c463e161734f80cedd2b771bee49e7ee6be0f05/comments", "author": null, "committer": null, "parents": [{"sha": "eb9cb0fc5e0c945f8f2bc0d3acaf4fbba7acfe6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9cb0fc5e0c945f8f2bc0d3acaf4fbba7acfe6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9cb0fc5e0c945f8f2bc0d3acaf4fbba7acfe6b"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "8b95f6187eec151402c951ec25ede99c0a64d7eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -1,3 +1,20 @@\n+2009-04-29  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* Makefile.in (PLUGIN_VERSION_H): New.\n+\t(OBJS-common): Remove plugin-version.o.\n+\t(plugin.o): Depend on (PLUGIN_VERSION_H).\n+\t(plugin-version.o): Remove.\n+\t* configure: Regenerate\n+\t* configure.ac: Create plugin-version.h.\n+\t* gcc-plugin.h (plugin_gcc_version): Remove.\n+\t(plugin_default_version_check): Change signature.\n+\t* plugin-version.c: Remove.\n+\t* plugin.c: Include plugin-version.h.\n+\t(str_plugin_gcc_version_name): Remove.\n+\t(try_init_one_plugin): Pass gcc version to plugin_init.\n+\t(plugin_default_version_check): Both gcc and plugin versions are now\n+\targuments.\n+\n 2009-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n \t\n \t* config/bfin/bfin.c (bfin_optimize_loop): Unify handling of"}, {"sha": "2283138956e0b7268c0d375277ffde27a27e3182", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -881,6 +881,7 @@ IPA_PROP_H = ipa-prop.h $(TREE_H) vec.h $(CGRAPH_H)\n GSTAB_H = gstab.h stab.def\n BITMAP_H = bitmap.h $(HASHTAB_H) statistics.h\n PLUGIN_H = plugin.h gcc-plugin.h\n+PLUGIN_VERSION_H = plugin-version.h configargs.h\n \n #\f\n # Now figure out from those variables how to compile and link.\n@@ -1158,7 +1159,6 @@ OBJS-common = \\\n \tparams.o \\\n \tpasses.o \\\n \tplugin.o \\\n-\tplugin-version.o \\\n \tpointer-set.o \\\n \tpostreload-gcse.o \\\n \tpostreload.o \\\n@@ -2475,13 +2475,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h\n-\n-plugin-version.o : plugin-version.c $(SYSTEM_H) gcc-plugin.h configargs.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n-\t-DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n-\t-DREVISION=$(REVISION_s) -DDEVPHASE=$(DEVPHASE_s) -c \\\n-\t-DPLUGIN $(srcdir)/plugin-version.c $(OUTPUT_OPTION)\n+   $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H)\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H)\n "}, {"sha": "e96fcf528a34cae98c0e219659cfe1eb7dc6ed6d", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -13451,6 +13451,30 @@ static const struct {\n } configure_default_options[] = $configure_default_options;\n EOF\n \n+gcc_BASEVER=$(cat $srcdir/BASE-VER)\n+gcc_DEVPHASE=$(cat $srcdir/DEV-PHASE)\n+gcc_DATESTAMP=$(cat $srcdir/DATESTAMP)\n+if test -f $srcdir/REVISION ; then\n+\tgcc_REVISION=$(cat $srcdir/REVISION)\n+else\n+        gcc_REVISION=\"\"\n+fi\n+cat > plugin-version.h <<EOF\n+#include \"configargs.h\"\n+\n+static char basever[] = \"$gcc_BASEVER\";\n+static char datestamp[] = \"$gcc_DATESTAMP\";\n+static char devphase[] = \"$gcc_DEVPHASE\";\n+static char revision[] = \"$gcc_REVISION\";\n+\n+/* FIXME plugins: We should make the version information more precise.\n+   One way to do is to add a checksum. */\n+\n+static struct plugin_gcc_version gcc_version = {basever, datestamp,\n+\t\t\t\t\t\tdevphase, revision,\n+\t\t\t\t\t\tconfiguration_arguments};\n+EOF\n+\n # Internationalization\n # If we haven't got the data from the intl directory,\n # assume NLS is disabled.\n@@ -14359,13 +14383,13 @@ if test \"${lt_cv_nm_interface+set}\" = set; then\n else\n   lt_cv_nm_interface=\"BSD nm\"\n   echo \"int some_variable = 0;\" > conftest.$ac_ext\n-  (eval echo \"\\\"\\$as_me:14362: $ac_compile\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14386: $ac_compile\\\"\" >&5)\n   (eval \"$ac_compile\" 2>conftest.err)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:14365: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14389: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n   (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:14368: output\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:14392: output\\\"\" >&5)\n   cat conftest.out >&5\n   if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n     lt_cv_nm_interface=\"MS dumpbin\"\n@@ -15522,7 +15546,7 @@ ia64-*-hpux*)\n   ;;\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 15525 \"configure\"' > conftest.$ac_ext\n+  echo '#line 15549 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -16821,11 +16845,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16824: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16848: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16828: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16852: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -17160,11 +17184,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:17163: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:17187: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:17167: \\$? = $ac_status\" >&5\n+   echo \"$as_me:17191: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -17265,11 +17289,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:17268: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:17292: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:17272: \\$? = $ac_status\" >&5\n+   echo \"$as_me:17296: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -17320,11 +17344,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:17323: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:17347: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:17327: \\$? = $ac_status\" >&5\n+   echo \"$as_me:17351: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -20132,7 +20156,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 20135 \"configure\"\n+#line 20159 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -20228,7 +20252,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 20231 \"configure\"\n+#line 20255 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "306adc18d2dc84b94600e539007674d6b9a9082b", "filename": "gcc/configure.ac", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -1495,6 +1495,32 @@ static const struct {\n EOF\n changequote([,])dnl\n \n+changequote(,)dnl\n+gcc_BASEVER=$(cat $srcdir/BASE-VER)\n+gcc_DEVPHASE=$(cat $srcdir/DEV-PHASE)\n+gcc_DATESTAMP=$(cat $srcdir/DATESTAMP)\n+if test -f $srcdir/REVISION ; then\n+\tgcc_REVISION=$(cat $srcdir/REVISION)\n+else\n+        gcc_REVISION=\"\"\n+fi\n+cat > plugin-version.h <<EOF\n+#include \"configargs.h\"\n+\n+static char basever[] = \"$gcc_BASEVER\";\n+static char datestamp[] = \"$gcc_DATESTAMP\";\n+static char devphase[] = \"$gcc_DEVPHASE\";\n+static char revision[] = \"$gcc_REVISION\";\n+\n+/* FIXME plugins: We should make the version information more precise.\n+   One way to do is to add a checksum. */\n+\n+static struct plugin_gcc_version gcc_version = {basever, datestamp,\n+\t\t\t\t\t\tdevphase, revision,\n+\t\t\t\t\t\tconfiguration_arguments};\n+EOF\n+changequote([,])dnl\n+\n # Internationalization\n ZW_GNU_GETTEXT_SISTER_DIR\n "}, {"sha": "96c867d4bc6e9a6c869a4eaee0268e816901cea2", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -78,11 +78,10 @@ struct plugin_gcc_version\n   const char *configuration_arguments;\n };\n \n-extern struct plugin_gcc_version plugin_gcc_version;\n-\n /* The default version check. Compares every field in VERSION. */\n \n-extern bool plugin_default_version_check(struct plugin_gcc_version *version);\n+extern bool plugin_default_version_check (struct plugin_gcc_version *,\n+\t\t\t\t\t  struct plugin_gcc_version *);\n \n /* Function type for the plugin initialization routine. Each plugin module\n    should define this as an externally-visible function with name"}, {"sha": "3b7cc78a1932aa977adfad3fc7c32f32d3f2ba08", "filename": "gcc/plugin.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c463e161734f80cedd2b771bee49e7ee6be0f05/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=0c463e161734f80cedd2b771bee49e7ee6be0f05", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"plugin.h\"\n #include \"timevar.h\"\n+#include \"plugin-version.h\"\n \n /* Event names as strings.  Keep in sync with enum plugin_event.  */\n const char *plugin_event_name[] =\n@@ -99,7 +100,6 @@ static struct pass_list_node *prev_added_pass_node;\n /* Each plugin should define an initialization function with exactly\n    this name.  */\n static const char *str_plugin_init_func_name = \"plugin_init\";\n-static const char *str_plugin_gcc_version_name = \"plugin_gcc_version\";\n #endif\n \n /* Helper function for the hash table that compares the base_name of the\n@@ -567,10 +567,8 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n {\n   void *dl_handle;\n   plugin_init_func plugin_init;\n-  struct plugin_gcc_version *version;\n   char *err;\n   PTR_UNION_TYPE (plugin_init_func) plugin_init_union;\n-  PTR_UNION_TYPE (struct plugin_gcc_version*) version_union;\n \n   dl_handle = dlopen (plugin->full_name, RTLD_NOW);\n   if (!dl_handle)\n@@ -593,12 +591,9 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n       return false;\n     }\n \n-  PTR_UNION_AS_VOID_PTR (version_union) =\n-      dlsym (dl_handle, str_plugin_gcc_version_name);\n-  version = PTR_UNION_AS_CAST_PTR (version_union);\n-\n   /* Call the plugin-provided initialization routine with the arguments.  */\n-  if ((*plugin_init) (plugin->base_name, version, plugin->argc, plugin->argv))\n+  if ((*plugin_init) (plugin->base_name, &gcc_version, plugin->argc,\n+\t\t      plugin->argv))\n     {\n       error (\"Fail to initialize plugin %s\", plugin->full_name);\n       return false;\n@@ -816,22 +811,23 @@ debug_active_plugins (void)\n /* The default version check. Compares every field in VERSION. */\n \n bool\n-plugin_default_version_check(struct plugin_gcc_version *version)\n+plugin_default_version_check (struct plugin_gcc_version *gcc_version,\n+\t\t\t      struct plugin_gcc_version *plugin_version)\n {\n   /* version is NULL if the plugin was not linked with plugin-version.o */\n-  if (!version)\n+  if (!gcc_version || !plugin_version)\n     return false;\n \n-  if (strcmp (version->basever, plugin_gcc_version.basever))\n+  if (strcmp (gcc_version->basever, plugin_version->basever))\n     return false;\n-  if (strcmp (version->datestamp, plugin_gcc_version.datestamp))\n+  if (strcmp (gcc_version->datestamp, plugin_version->datestamp))\n     return false;\n-  if (strcmp (version->devphase, plugin_gcc_version.devphase))\n+  if (strcmp (gcc_version->devphase, plugin_version->devphase))\n     return false;\n-  if (strcmp (version->revision, plugin_gcc_version.revision))\n+  if (strcmp (gcc_version->revision, plugin_version->revision))\n     return false;\n-  if (strcmp (version->configuration_arguments,\n-\t      plugin_gcc_version.configuration_arguments))\n+  if (strcmp (gcc_version->configuration_arguments,\n+\t      plugin_version->configuration_arguments))\n     return false;\n   return true;\n }"}]}