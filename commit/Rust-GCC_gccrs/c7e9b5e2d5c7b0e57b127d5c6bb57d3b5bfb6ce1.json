{"sha": "c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "node_id": "C_kwDOANBUbNoAKGM3ZTliNWUyZDVjN2IwZTU3YjEyN2Q1YzZiYjU3ZDNiNWJmYjZjZTE", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-09-02T11:32:27Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:30Z"}, "message": "ada: Create operator nodes in functional style\n\nA recent patch removed two rewritings, where we kept the operator node\nbut replaced its operands. This patch removes explicit setting of the\noperands; instead, the operator is already created together with its\noperands, which seems a bit safer and more consistent with how we\ntypically create operator nodes.\n\nIt is a cleanup only; semantics is unaffected.\n\ngcc/ada/\n\n\t* exp_ch4.adb\n\t(Expand_Modular_Addition): Rewrite using Make_XXX calls.\n\t(Expand_Modular_Op): Likewise.\n\t(Expand_Modular_Subtraction): Likewise.\n\t* exp_imgv.adb\n\t(Expand_User_Defined_Enumeration_Image): Likewise.", "tree": {"sha": "aebfb75b143909f01f1542cca47b6a6c1665a741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aebfb75b143909f01f1542cca47b6a6c1665a741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85"}], "stats": {"total": 146, "additions": 76, "deletions": 70}, "files": [{"sha": "b9433c358bf0add12061b9497a0843daf00abc1d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 64, "deletions": 58, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "patch": "@@ -4154,39 +4154,42 @@ package body Exp_Ch4 is\n                Mod_Minus_Right : constant Uint :=\n                                    Modulus (Typ) - Intval (Right_Opnd (N));\n \n-               Exprs     : constant List_Id := New_List;\n-               Cond_Expr : constant Node_Id := New_Op_Node (N_Op_Lt, Loc);\n-               Then_Expr : constant Node_Id := New_Op_Node (N_Op_Add, Loc);\n-               Else_Expr : constant Node_Id := New_Op_Node (N_Op_Subtract,\n-                                                            Loc);\n+               Cond_Expr : Node_Id;\n+               Then_Expr : Node_Id;\n+               Else_Expr : Node_Id;\n             begin\n                --  To prevent spurious visibility issues, convert all\n                --  operands to Standard.Unsigned.\n \n-               Set_Left_Opnd (Cond_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Cond_Expr,\n-                 Make_Integer_Literal (Loc, Mod_Minus_Right));\n-               Append_To (Exprs, Cond_Expr);\n-\n-               Set_Left_Opnd (Then_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Then_Expr,\n-                 Make_Integer_Literal (Loc, Intval (Right_Opnd (N))));\n-               Append_To (Exprs, Then_Expr);\n-\n-               Set_Left_Opnd (Else_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Else_Expr,\n-                 Make_Integer_Literal (Loc, Mod_Minus_Right));\n-               Append_To (Exprs, Else_Expr);\n+               Cond_Expr :=\n+                 Make_Op_Lt (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Mod_Minus_Right));\n+\n+               Then_Expr :=\n+                 Make_Op_Add (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Intval (Right_Opnd (N))));\n+\n+               Else_Expr :=\n+                 Make_Op_Subtract (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Mod_Minus_Right));\n \n                Rewrite (N,\n                  Unchecked_Convert_To (Typ,\n-                   Make_If_Expression (Loc, Expressions => Exprs)));\n+                   Make_If_Expression (Loc,\n+                     Expressions =>\n+                       New_List (Cond_Expr, Then_Expr, Else_Expr))));\n             end;\n          end if;\n       end Expand_Modular_Addition;\n@@ -4202,7 +4205,7 @@ package body Exp_Ch4 is\n          --   backend does not have to deal with nonbinary-modulus ops.\n \n          Op_Expr  : constant Node_Id := New_Op_Node (Nkind (N), Loc);\n-         Mod_Expr : constant Node_Id := New_Op_Node (N_Op_Mod, Loc);\n+         Mod_Expr : Node_Id;\n \n          Target_Type : Entity_Id;\n       begin\n@@ -4297,10 +4300,10 @@ package body Exp_Ch4 is\n             Force_Evaluation (Op_Expr, Mode => Strict);\n          end if;\n \n-         Set_Left_Opnd (Mod_Expr, Op_Expr);\n-\n-         Set_Right_Opnd (Mod_Expr,\n-           Make_Integer_Literal (Loc, Modulus (Typ)));\n+         Mod_Expr :=\n+           Make_Op_Mod (Loc,\n+             Left_Opnd  => Op_Expr,\n+             Right_Opnd => Make_Integer_Literal (Loc, Modulus (Typ)));\n \n          Rewrite (N,\n            Unchecked_Convert_To (Typ, Mod_Expr));\n@@ -4331,37 +4334,40 @@ package body Exp_Ch4 is\n                Mod_Minus_Right : constant Uint :=\n                                    Modulus (Typ) - Intval (Right_Opnd (N));\n \n-               Exprs     : constant List_Id := New_List;\n-               Cond_Expr : constant Node_Id := New_Op_Node (N_Op_Lt, Loc);\n-               Then_Expr : constant Node_Id := New_Op_Node (N_Op_Add, Loc);\n-               Else_Expr : constant Node_Id := New_Op_Node (N_Op_Subtract,\n-                                                            Loc);\n+               Cond_Expr : Node_Id;\n+               Then_Expr : Node_Id;\n+               Else_Expr : Node_Id;\n             begin\n-               Set_Left_Opnd (Cond_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Cond_Expr,\n-                 Make_Integer_Literal (Loc, Intval (Right_Opnd (N))));\n-               Append_To (Exprs, Cond_Expr);\n-\n-               Set_Left_Opnd (Then_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Then_Expr,\n-                 Make_Integer_Literal (Loc, Mod_Minus_Right));\n-               Append_To (Exprs, Then_Expr);\n-\n-               Set_Left_Opnd (Else_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Left_Opnd (N))));\n-               Set_Right_Opnd (Else_Expr,\n-                 Unchecked_Convert_To (Standard_Unsigned,\n-                   New_Copy_Tree (Right_Opnd (N))));\n-               Append_To (Exprs, Else_Expr);\n+               Cond_Expr :=\n+                 Make_Op_Lt (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Intval (Right_Opnd (N))));\n+\n+               Then_Expr :=\n+                 Make_Op_Add (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Mod_Minus_Right));\n+\n+               Else_Expr :=\n+                 Make_Op_Subtract (Loc,\n+                   Left_Opnd  =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Left_Opnd (N))),\n+                   Right_Opnd =>\n+                     Unchecked_Convert_To (Standard_Unsigned,\n+                       New_Copy_Tree (Right_Opnd (N))));\n \n                Rewrite (N,\n                  Unchecked_Convert_To (Typ,\n-                   Make_If_Expression (Loc, Expressions => Exprs)));\n+                   Make_If_Expression (Loc,\n+                     Expressions =>\n+                       New_List (Cond_Expr, Then_Expr, Else_Expr))));\n             end;\n          end if;\n       end Expand_Modular_Subtraction;"}, {"sha": "f2043f525d533843a8d9655a599c05ab7709bf7b", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=c7e9b5e2d5c7b0e57b127d5c6bb57d3b5bfb6ce1", "patch": "@@ -938,12 +938,12 @@ package body Exp_Imgv is\n          --    P3 : constant Natural := call_put_enumN (P1 + 1);\n \n          declare\n-            Add_Node : constant Node_Id := New_Op_Node (N_Op_Add, Loc);\n+            Add_Node : constant Node_Id :=\n+              Make_Op_Add (Loc,\n+                Left_Opnd  => New_Occurrence_Of (P1_Id, Loc),\n+                Right_Opnd => Make_Integer_Literal (Loc, Uint_1));\n \n          begin\n-            Set_Left_Opnd  (Add_Node, New_Occurrence_Of (P1_Id, Loc));\n-            Set_Right_Opnd (Add_Node, Make_Integer_Literal (Loc, 1));\n-\n             Append_To (Ins_List,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => P3_Id,\n@@ -963,12 +963,12 @@ package body Exp_Imgv is\n          --    P4 : String renames call_put_enumS (P2 .. P3 - 1);\n \n          declare\n-            Sub_Node : constant Node_Id := New_Op_Node (N_Op_Subtract, Loc);\n+            Sub_Node : constant Node_Id :=\n+              Make_Op_Subtract (Loc,\n+                Left_Opnd  => New_Occurrence_Of (P3_Id, Loc),\n+                Right_Opnd => Make_Integer_Literal (Loc, Uint_1));\n \n          begin\n-            Set_Left_Opnd  (Sub_Node, New_Occurrence_Of (P3_Id, Loc));\n-            Set_Right_Opnd (Sub_Node, Make_Integer_Literal (Loc, 1));\n-\n             Append_To (Ins_List,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => P4_Id,\n@@ -988,12 +988,12 @@ package body Exp_Imgv is\n          --    subtype S1 is String (1 .. P3 - P2);\n \n          declare\n-            HB : constant Node_Id := New_Op_Node (N_Op_Subtract, Loc);\n+            HB : constant Node_Id :=\n+              Make_Op_Subtract (Loc,\n+                Left_Opnd  => New_Occurrence_Of (P3_Id, Loc),\n+                Right_Opnd => New_Occurrence_Of (P2_Id, Loc));\n \n          begin\n-            Set_Left_Opnd  (HB, New_Occurrence_Of (P3_Id, Loc));\n-            Set_Right_Opnd (HB, New_Occurrence_Of (P2_Id, Loc));\n-\n             Append_To (Ins_List,\n               Make_Subtype_Declaration (Loc,\n                 Defining_Identifier => S1_Id,"}]}