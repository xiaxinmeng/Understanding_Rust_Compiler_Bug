{"sha": "691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxZmUyMDNiMzk4OWM5ZjA1ZDhkOGMxY2I3NGI3N2NhOGIxNDJhOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T16:39:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T16:39:22Z"}, "message": "function.c: Use rtx_insn\n\ngcc/\n\t* function.c (emit_initial_value_sets): Strengthen local \"seq\"\n\tfrom rtx to rtx_insn *.\n\t(instantiate_virtual_regs_in_insn): Likewise for param \"insn\" and\n\tlocal \"seq\".\n\t(instantiate_virtual_regs): Likewise for local \"insn\".\n\t(assign_parm_setup_reg): Likewise for locals \"linsn\", \"sinsn\".\n\t(reorder_blocks_1): Likewise for param \"insns\" and local \"insn\".\n\t(expand_function_end): Likewise for locals \"insn\" and \"seq\".\n\t(epilogue_done): Likewise for local \"insn\".\n\t(thread_prologue_and_epilogue_insns): Likewise for locals \"prev\",\n\t\"last\", \"trial\".\n\t(reposition_prologue_and_epilogue_notes): Likewise for locals\n\t\"insn\", \"last\", \"note\", \"first\".\n\t(match_asm_constraints_1): Likewise for param \"insn\" and local \"insns\".\n\t(pass_match_asm_constraints::execute): Likewise for local \"insn\".\n\nFrom-SVN: r214327", "tree": {"sha": "6b287bf0096597a906287954267da97d37d63fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b287bf0096597a906287954267da97d37d63fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa7af5812f2da9411baeffbc7aeedf749b8ef9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7af5812f2da9411baeffbc7aeedf749b8ef9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7af5812f2da9411baeffbc7aeedf749b8ef9d9"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "029db32f05a8d1a70f72f1a5e5132dcde60168fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "patch": "@@ -1,3 +1,21 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* function.c (emit_initial_value_sets): Strengthen local \"seq\"\n+\tfrom rtx to rtx_insn *.\n+\t(instantiate_virtual_regs_in_insn): Likewise for param \"insn\" and\n+\tlocal \"seq\".\n+\t(instantiate_virtual_regs): Likewise for local \"insn\".\n+\t(assign_parm_setup_reg): Likewise for locals \"linsn\", \"sinsn\".\n+\t(reorder_blocks_1): Likewise for param \"insns\" and local \"insn\".\n+\t(expand_function_end): Likewise for locals \"insn\" and \"seq\".\n+\t(epilogue_done): Likewise for local \"insn\".\n+\t(thread_prologue_and_epilogue_insns): Likewise for locals \"prev\",\n+\t\"last\", \"trial\".\n+\t(reposition_prologue_and_epilogue_notes): Likewise for locals\n+\t\"insn\", \"last\", \"note\", \"first\".\n+\t(match_asm_constraints_1): Likewise for param \"insn\" and local \"insns\".\n+\t(pass_match_asm_constraints::execute): Likewise for local \"insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* output.h (final_scan_insn): Strengthen return type from rtx to"}, {"sha": "6a85b56f32f3df1892339c7a4415a487726d4a99", "filename": "gcc/function.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "patch": "@@ -115,7 +115,7 @@ vec<tree, va_gc> *types_used_by_cur_var_decl;\n static struct temp_slot *find_temp_slot_from_address (rtx);\n static void pad_to_arg_alignment (struct args_size *, int, struct args_size *);\n static void pad_below (struct args_size *, enum machine_mode, tree);\n-static void reorder_blocks_1 (rtx, tree, vec<tree> *);\n+static void reorder_blocks_1 (rtx_insn *, tree, vec<tree> *);\n static int all_blocks (tree, tree *);\n static tree *get_block_vector (tree, int *);\n extern tree debug_find_var_in_block_tree (tree, tree);\n@@ -1300,7 +1300,7 @@ emit_initial_value_sets (void)\n {\n   struct initial_value_struct *ivs = crtl->hard_reg_initial_vals;\n   int i;\n-  rtx seq;\n+  rtx_insn *seq;\n \n   if (ivs == 0)\n     return 0;\n@@ -1497,12 +1497,13 @@ safe_insn_predicate (int code, int operand, rtx x)\n    registers present inside of insn.  The result will be a valid insn.  */\n \n static void\n-instantiate_virtual_regs_in_insn (rtx insn)\n+instantiate_virtual_regs_in_insn (rtx_insn *insn)\n {\n   HOST_WIDE_INT offset;\n   int insn_code, i;\n   bool any_change = false;\n-  rtx set, new_rtx, x, seq;\n+  rtx set, new_rtx, x;\n+  rtx_insn *seq;\n \n   /* There are some special cases to be handled first.  */\n   set = single_set (insn);\n@@ -1898,7 +1899,7 @@ instantiate_decls (tree fndecl)\n static unsigned int\n instantiate_virtual_regs (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (current_function_decl);\n@@ -3172,8 +3173,9 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n       && reg_mentioned_p (virtual_incoming_args_rtx,\n \t\t\t  XEXP (data->stack_parm, 0)))\n     {\n-      rtx linsn = get_last_insn ();\n-      rtx sinsn, set;\n+      rtx_insn *linsn = get_last_insn ();\n+      rtx_insn *sinsn;\n+      rtx set;\n \n       /* Mark complex types separately.  */\n       if (GET_CODE (parmreg) == CONCAT)\n@@ -4156,9 +4158,10 @@ clear_block_marks (tree block)\n }\n \n static void\n-reorder_blocks_1 (rtx insns, tree current_block, vec<tree> *p_block_stack)\n+reorder_blocks_1 (rtx_insn *insns, tree current_block,\n+\t\t  vec<tree> *p_block_stack)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   tree prev_beg = NULL_TREE, prev_end = NULL_TREE;\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n@@ -5006,7 +5009,7 @@ expand_function_end (void)\n      space for another stack frame.  */\n   if (flag_stack_check == GENERIC_STACK_CHECK)\n     {\n-      rtx insn, seq;\n+      rtx_insn *insn, *seq;\n \n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \tif (CALL_P (insn))\n@@ -5765,7 +5768,7 @@ thread_prologue_and_epilogue_insns (void)\n      EPILOGUE_BEG note and mark the insns as epilogue insns.  */\n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     {\n-      rtx prev, last, trial;\n+      rtx_insn *prev, *last, *trial;\n \n       if (e->flags & EDGE_FALLTHRU)\n \tcontinue;\n@@ -5874,7 +5877,7 @@ thread_prologue_and_epilogue_insns (void)\n \t\t\t\t\t\t\t     )\n     {\n       basic_block bb = e->src;\n-      rtx insn = BB_END (bb);\n+      rtx_insn *insn = BB_END (bb);\n       rtx ep_seq;\n \n       if (!CALL_P (insn)\n@@ -5953,7 +5956,7 @@ reposition_prologue_and_epilogue_notes (void)\n   if (prologue_insn_hash != NULL)\n     {\n       size_t len = htab_elements (prologue_insn_hash);\n-      rtx insn, last = NULL, note = NULL;\n+      rtx_insn *insn, *last = NULL, *note = NULL;\n \n       /* Scan from the beginning until we reach the last prologue insn.  */\n       /* ??? While we do have the CFG intact, there are two problems:\n@@ -6004,7 +6007,7 @@ reposition_prologue_and_epilogue_notes (void)\n \n       FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n \t{\n-\t  rtx insn, first = NULL, note = NULL;\n+\t  rtx_insn *insn, *first = NULL, *note = NULL;\n \t  basic_block bb = e->src;\n \n \t  /* Scan from the beginning until we reach the first epilogue insn. */\n@@ -6334,7 +6337,7 @@ make_pass_thread_prologue_and_epilogue (gcc::context *ctxt)\n      asm (\"\": \"=mr\" (inout_2) : \"0\" (inout_2));  */\n \n static void\n-match_asm_constraints_1 (rtx insn, rtx *p_sets, int noutputs)\n+match_asm_constraints_1 (rtx_insn *insn, rtx *p_sets, int noutputs)\n {\n   int i;\n   bool changed = false;\n@@ -6346,7 +6349,8 @@ match_asm_constraints_1 (rtx insn, rtx *p_sets, int noutputs)\n   memset (output_matched, 0, noutputs * sizeof (bool));\n   for (i = 0; i < ninputs; i++)\n     {\n-      rtx input, output, insns;\n+      rtx input, output;\n+      rtx_insn *insns;\n       const char *constraint = ASM_OPERANDS_INPUT_CONSTRAINT (op, i);\n       char *end;\n       int match, j;\n@@ -6466,7 +6470,8 @@ unsigned\n pass_match_asm_constraints::execute (function *fun)\n {\n   basic_block bb;\n-  rtx insn, pat, *p_sets;\n+  rtx_insn *insn;\n+  rtx pat, *p_sets;\n   int noutputs;\n \n   if (!crtl->has_asm_statement)"}]}