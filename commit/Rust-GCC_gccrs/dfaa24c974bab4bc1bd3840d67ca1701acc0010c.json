{"sha": "dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhYTI0Yzk3NGJhYjRiYzFiZDM4NDBkNjdjYTE3MDFhY2MwMDEwYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-01T19:36:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-01T19:39:03Z"}, "message": "c++: Kill DECL_HIDDEN_P\n\nThere are only a couple of asserts remaining using this macro, and\nnothing using TYPE_HIDDEN_P.  Killed thusly.\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_ANTICIPATED): Adjust comment.\n\t(DECL_HIDDEN_P, TYPE_HIDDEN_P): Delete.\n\t* tree.c (ovl_insert): Delete DECL_HIDDEN_P assert.\n\t(ovl_skip_hidden): Likewise.", "tree": {"sha": "9e88df5c5741a77887fbc7ffcbc5682837b2ee0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e88df5c5741a77887fbc7ffcbc5682837b2ee0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaa24c974bab4bc1bd3840d67ca1701acc0010c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb3c3daf6f5e2c09ade7a237749ba1f64a0a0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb3c3daf6f5e2c09ade7a237749ba1f64a0a0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb3c3daf6f5e2c09ade7a237749ba1f64a0a0a8"}], "stats": {"total": 25, "additions": 3, "deletions": 22}, "files": [{"sha": "3ccd54ce24b91122b5e27be54c8146ae83ae0c1f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaa24c974bab4bc1bd3840d67ca1701acc0010c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaa24c974bab4bc1bd3840d67ca1701acc0010c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "patch": "@@ -4045,22 +4045,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n /* Nonzero if NODE is a DECL which we know about but which has not\n    been explicitly declared, such as a built-in function or a friend\n-   declared inside a class.  In the latter case DECL_HIDDEN_FRIEND_P\n-   will be set.  */\n+   declared inside a class.  */\n #define DECL_ANTICIPATED(NODE) \\\n   (DECL_LANG_SPECIFIC (TYPE_FUNCTION_OR_TEMPLATE_DECL_CHECK (NODE)) \\\n    ->u.base.anticipated_p)\n \n-/* Is DECL NODE a hidden name?  */\n-#define DECL_HIDDEN_P(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE) && TYPE_FUNCTION_OR_TEMPLATE_DECL_P (NODE) \\\n-   && DECL_ANTICIPATED (NODE))\n-\n-/* True if this is a hidden class type.    */\n-#define TYPE_HIDDEN_P(NODE) \\\n-  (DECL_LANG_SPECIFIC (TYPE_NAME (NODE)) \\\n-   && DECL_ANTICIPATED (TYPE_NAME (NODE)))\n-\n /* True for artificial decls added for OpenMP privatized non-static\n    data members.  */\n #define DECL_OMP_PRIVATIZED_MEMBER(NODE) \\"}, {"sha": "8b7c6798ee968e30e55ef5f80f3ca08cb5810e71", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaa24c974bab4bc1bd3840d67ca1701acc0010c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaa24c974bab4bc1bd3840d67ca1701acc0010c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "patch": "@@ -2261,8 +2261,6 @@ ovl_insert (tree fn, tree maybe_ovl, int using_or_hidden)\n     {\n       maybe_ovl = ovl_make (fn, maybe_ovl);\n \n-      gcc_checking_assert ((using_or_hidden < 0) == DECL_HIDDEN_P (fn));\n-\n       if (using_or_hidden < 0)\n \tOVL_HIDDEN_P (maybe_ovl) = true;\n       if (using_or_hidden > 0)\n@@ -2287,14 +2285,8 @@ ovl_insert (tree fn, tree maybe_ovl, int using_or_hidden)\n tree\n ovl_skip_hidden (tree ovl)\n {\n-  for (;\n-       ovl && TREE_CODE (ovl) == OVERLOAD && OVL_HIDDEN_P (ovl);\n-       ovl = OVL_CHAIN (ovl))\n-    gcc_checking_assert (DECL_HIDDEN_P (OVL_FUNCTION (ovl)));\n-\n-  /* We should not see a naked hidden decl.  */\n-  gcc_checking_assert (!(ovl && TREE_CODE (ovl) != OVERLOAD\n-\t\t\t && DECL_HIDDEN_P (ovl)));\n+  while (ovl && TREE_CODE (ovl) == OVERLOAD && OVL_HIDDEN_P (ovl))\n+    ovl = OVL_CHAIN (ovl);\n \n   return ovl;\n }"}]}