{"sha": "91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkMDFiZjQwYTdlZWMyZjBlYjVjYmJiZjlmZWUyMzk5ZmExMmI0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-11T21:43:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-11T21:43:42Z"}, "message": "PR c++/78337 - ICE on invalid with generic lambda\n\n\t* semantics.c (process_outer_var_ref): Check if containing_function\n\tis null.  Move inform call under complain test.\n\nFrom-SVN: r244340", "tree": {"sha": "82c146cb83c34e77c0591731d723d63ca785f116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82c146cb83c34e77c0591731d723d63ca785f116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e32c4743fbd0d2c16ea2fb9212540707f3c01a"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "201d73697e5309fe59a488bd9e5958493cfaeb0e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "patch": "@@ -1,3 +1,9 @@\n+2017-01-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/78337 - ICE on invalid with generic lambda\n+\t* semantics.c (process_outer_var_ref): Check if containing_function\n+\tis null.  Move inform call under complain test.\n+\n 2017-01-11  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/77812"}, {"sha": "42024755e4f0808a780f486fe8c26ac200d2e3ab", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "patch": "@@ -3278,6 +3278,8 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n        2. a non-lambda function, or\n        3. a non-default capturing lambda function.  */\n     while (context != containing_function\n+\t   /* containing_function can be null with invalid generic lambdas.  */\n+\t   && containing_function\n \t   && LAMBDA_FUNCTION_P (containing_function))\n       {\n \ttree closure = DECL_CONTEXT (containing_function);\n@@ -3365,10 +3367,13 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n   else\n     {\n       if (complain & tf_error)\n-\terror (VAR_P (decl)\n-\t       ? G_(\"use of local variable with automatic storage from containing function\")\n-\t       : G_(\"use of parameter from containing function\"));\n-      inform (DECL_SOURCE_LOCATION (decl), \"%q#D declared here\", decl);\n+\t{\n+\t  error (VAR_P (decl)\n+\t\t ? G_(\"use of local variable with automatic storage from \"\n+\t\t      \"containing function\")\n+\t\t : G_(\"use of parameter from containing function\"));\n+\t  inform (DECL_SOURCE_LOCATION (decl), \"%q#D declared here\", decl);\n+\t}\n       return error_mark_node;\n     }\n   return decl;"}, {"sha": "473e412cb9d498af52d7e268c458075975a78d50", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-ice5.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice5.C?ref=91d01bf40a7eec2f0eb5cbbbf9fee2399fa12b46", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/78337\n+// { dg-do compile { target c++14 } }\n+\n+struct X {\n+  static constexpr int foo (int b) {\n+    return b;\n+  }\n+};\n+\n+template<int>\n+using Void = void;\n+\n+template<typename F,typename A>\n+auto\n+bar(F f, A a) -> decltype( ( f(a) , 0 ) ) // { dg-error \"no match\" }\n+{ return {}; }\n+\n+\n+int main() {\n+  //constexpr\n+  int f = 3;\n+  (void)f;\n+  auto l = [](auto of_type_X)->\n+    Void<(decltype(of_type_X)::foo(f), 0)> // { dg-error \"variable\" }\n+    {return;};\n+  bar(l , X{});\t\t\t// { dg-error \"no match\" }\n+}"}]}