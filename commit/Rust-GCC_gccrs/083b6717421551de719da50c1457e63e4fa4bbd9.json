{"sha": "083b6717421551de719da50c1457e63e4fa4bbd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzYjY3MTc0MjE1NTFkZTcxOWRhNTBjMTQ1N2U2M2U0ZmE0YmJkOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-01-16T15:28:18Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-01-16T15:28:18Z"}, "message": "re PR target/16304 (bootstrap failure on AIX 4.3.3: cannot build strstream in libstdc++)\n\n\tPR target/16304\n\t* defaults.h (TARGET_DEFERRED_OUTPUT_DEFS): Provide default.\n\t* toplev.c (compile_file): Call process_pending_assemble_output_defs\n\tjust before targetm.asm_out.file_end.\n\t* tree.h (process_pending_assemble_output_defs): Declare.\n\t* varasm.c (assemble_output_def, process_pending_assemble_output_defs):\n\tNew functions.\n\t(assemble_alias): Defer generation of assembly code for defines when\n\tTARGET_DEFERRED_OUTPUT_DEFS is true.\n\t* config/rs6000/aix41.h (TARGET_DEFERRED_OUTPUT_DEFS): Define.\n\t* config/rs6000/aix43.h (TARGET_DEFERRED_OUTPUT_DEFS): Define.\n\t* doc/tm.texi (TARGET_DEFERRED_OUTPUT_DEFS): document.\n\nFrom-SVN: r93726", "tree": {"sha": "1c91cbe9f2de1c17161aeacff28875b71fb4cf00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c91cbe9f2de1c17161aeacff28875b71fb4cf00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083b6717421551de719da50c1457e63e4fa4bbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083b6717421551de719da50c1457e63e4fa4bbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083b6717421551de719da50c1457e63e4fa4bbd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083b6717421551de719da50c1457e63e4fa4bbd9/comments", "author": null, "committer": null, "parents": [{"sha": "5352b89f604b3be2f9e7d33e748e82391d49cf90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5352b89f604b3be2f9e7d33e748e82391d49cf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5352b89f604b3be2f9e7d33e748e82391d49cf90"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "9bff84f653c37609d2c18240e4533b5257dc909d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -1,3 +1,18 @@\n+2005-01-16  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/16304\n+\t* defaults.h (TARGET_DEFERRED_OUTPUT_DEFS): Provide default.\n+\t* toplev.c (compile_file): Call process_pending_assemble_output_defs\n+\tjust before targetm.asm_out.file_end.\n+\t* tree.h (process_pending_assemble_output_defs): Declare.\n+\t* varasm.c (assemble_output_def, process_pending_assemble_output_defs):\n+\tNew functions.\n+\t(assemble_alias): Defer generation of assembly code for defines when\n+\tTARGET_DEFERRED_OUTPUT_DEFS is true.\n+\t* config/rs6000/aix41.h (TARGET_DEFERRED_OUTPUT_DEFS): Define.\n+\t* config/rs6000/aix43.h (TARGET_DEFERRED_OUTPUT_DEFS): Define.\n+\t* doc/tm.texi (TARGET_DEFERRED_OUTPUT_DEFS): document.\n+\n 2005-01-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/19336"}, {"sha": "74afa7a875d9e663e4efb51a89c00217c3b75c5e", "filename": "gcc/config/rs6000/aix41.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fconfig%2Frs6000%2Faix41.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fconfig%2Frs6000%2Faix41.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix41.h?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -91,3 +91,7 @@\n #undef RS6000_CALL_GLUE\n #define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n \n+/* The IBM AIX 4.x assembler doesn't support forward references in\n+   .set directives.  We handle this by deferring the output of .set\n+   directives to the end of the compilation unit.  */\n+#define TARGET_DEFERRED_OUTPUT_DEFS(DECL,TARGET) true"}, {"sha": "4eae08a585513d1074aea44eafddf7e90ed7f63c", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -181,3 +181,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef LD_INIT_SWITCH\n #define LD_INIT_SWITCH \"-binitfini\"\n+\n+/* The IBM AIX 4.x assembler doesn't support forward references in\n+   .set directives.  We handle this by deferring the output of .set\n+   directives to the end of the compilation unit.  */\n+#define TARGET_DEFERRED_OUTPUT_DEFS(DECL,TARGET) true"}, {"sha": "8d342b927a0b5d243e320ba51759f6c7a23bbcd2", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -137,6 +137,12 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #endif\n #endif\n \n+/* Decide whether to defer emitting the assembler output for an equate\n+   of two values.  The default is to not defer output.  */\n+#ifndef TARGET_DEFERRED_OUTPUT_DEFS\n+#define TARGET_DEFERRED_OUTPUT_DEFS(DECL,TARGET) false\n+#endif\n+\n /* This is how to output the definition of a user-level label named\n    NAME, such as the label on a static function or variable NAME.  */\n "}, {"sha": "c842b05232cdf8757a1e3c964af248ee67a372eb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -7045,6 +7045,15 @@ If @code{SET_ASM_OP} is defined, a default definition is provided which is\n correct for most systems.\n @end defmac\n \n+@defmac TARGET_DEFERRED_OUTPUT_DEFS (@var{decl_of_name}, @var{decl_of_value})\n+A C statement that evaluates to true if the assembler code which defines\n+(equates) the symbol whose tree node is @var{decl_of_name} to have the value\n+of the tree node @var{decl_of_value} should be emitted near the end of the\n+current compilation unit.  The default is to not defer output of defines.\n+This macro affects defines output by @samp{ASM_OUTPUT_DEF} and\n+@samp{ASM_OUTPUT_DEF_FROM_DECLS}.\n+@end defmac\n+\n @defmac ASM_OUTPUT_WEAK_ALIAS (@var{stream}, @var{name}, @var{value})\n A C statement to output to the stdio stream @var{stream} assembler code\n which defines (equates) the weak symbol @var{name} to have the value"}, {"sha": "8ef19f773eaa6ba8a1ffab3dec88bcc2a49231d3", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -1043,6 +1043,9 @@ compile_file (void)\n      expander can also generate them.  */\n   process_pending_assemble_externals ();\n \n+  /* Flush any pending equate directives.  */\n+  process_pending_assemble_output_defs ();\n+\n   /* Attach a special .ident directive to the end of the file to identify\n      the version of GCC which compiled this code.  The format of the .ident\n      string is patterned after the ones produced by native SVR4 compilers.  */"}, {"sha": "4fdff0c76e10ac10059b429b191b196e810ede8d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -3703,6 +3703,7 @@ extern void mark_decl_referenced (tree);\n extern void notice_global_symbol (tree);\n extern void set_user_assembler_name (tree, const char *);\n extern void process_pending_assemble_externals (void);\n+extern void process_pending_assemble_output_defs (void);\n \n /* In stmt.c */\n extern void expand_computed_goto (tree);"}, {"sha": "d37bee897345d1eb13c6c2433624da76c503924f", "filename": "gcc/varasm.c", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083b6717421551de719da50c1457e63e4fa4bbd9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=083b6717421551de719da50c1457e63e4fa4bbd9", "patch": "@@ -4347,20 +4347,67 @@ globalize_decl (tree decl)\n   targetm.asm_out.globalize_label (asm_out_file, name);\n }\n \n+/* Some targets do not allow a forward or undefined reference in a\n+   ASM_OUTPUT_DEF.  Thus, a mechanism is needed to defer the output of\n+   this assembler code.  The following struct holds the declaration\n+   and target for a deferred output define.  */\n+struct output_def_pair GTY(())\n+{\n+  tree decl;\n+  tree target;\n+};\n+typedef struct output_def_pair *output_def_pair;\n+\n+/* Define gc'd vector type.  */\n+DEF_VEC_GC_P(output_def_pair);\n+\n+/* Vector of output_def_pair pointers.  */\n+static GTY(()) VEC(output_def_pair) *output_defs;\n+\n+#ifdef ASM_OUTPUT_DEF\n+/* Output the assembler code for a define (equate) using ASM_OUTPUT_DEF\n+   or ASM_OUTPUT_DEF_FROM_DECLS.  The function defines the symbol whose\n+   tree node is DECL to have the value of the tree node TARGET.  */\n+\n+static void\n+assemble_output_def (tree decl ATTRIBUTE_UNUSED, tree target ATTRIBUTE_UNUSED)\n+{\n+#ifdef ASM_OUTPUT_DEF_FROM_DECLS\n+  ASM_OUTPUT_DEF_FROM_DECLS (asm_out_file, decl, target);\n+#else\n+  ASM_OUTPUT_DEF (asm_out_file,\n+\t\t  IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t\t  IDENTIFIER_POINTER (target));\n+#endif\n+}\n+#endif\n+\n+/* Process the vector of pending assembler defines.  */\n+\n+void\n+process_pending_assemble_output_defs (void)\n+{\n+#ifdef ASM_OUTPUT_DEF\n+  unsigned i;\n+  output_def_pair p;\n+\n+  for (i = 0; VEC_iterate (output_def_pair, output_defs, i, p); i++)\n+    assemble_output_def (p->decl, p->target);\n+\n+  output_defs = NULL;\n+#endif\n+}\n+\n /* Emit an assembler directive to make the symbol for DECL an alias to\n    the symbol for TARGET.  */\n \n void\n assemble_alias (tree decl, tree target)\n {\n-  const char *name;\n-\n   /* We must force creation of DECL_RTL for debug info generation, even though\n      we don't use it here.  */\n   make_decl_rtl (decl);\n \n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-\n #ifdef ASM_OUTPUT_DEF\n   /* Make name accessible from other files, if appropriate.  */\n \n@@ -4370,16 +4417,25 @@ assemble_alias (tree decl, tree target)\n       maybe_assemble_visibility (decl);\n     }\n \n-#ifdef ASM_OUTPUT_DEF_FROM_DECLS\n-  ASM_OUTPUT_DEF_FROM_DECLS (asm_out_file, decl, target);\n-#else\n-  ASM_OUTPUT_DEF (asm_out_file, name, IDENTIFIER_POINTER (target));\n-#endif\n+  if (TARGET_DEFERRED_OUTPUT_DEFS (decl, target))\n+    {\n+      output_def_pair p;\n+\n+      p = ggc_alloc (sizeof (struct output_def_pair));\n+      p->decl = decl;\n+      p->target = target;\n+      VEC_safe_push (output_def_pair, output_defs, p);\n+    }\n+  else\n+    assemble_output_def (decl, target);\n #else /* !ASM_OUTPUT_DEF */\n #if defined (ASM_OUTPUT_WEAK_ALIAS) || defined (ASM_WEAKEN_DECL)\n   if (DECL_WEAK (decl))\n     {\n+      const char *name;\n       tree *p, t;\n+\n+      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n #ifdef ASM_WEAKEN_DECL\n       ASM_WEAKEN_DECL (asm_out_file, decl, name, IDENTIFIER_POINTER (target));\n #else"}]}