{"sha": "b5c433ce11a140e2221b8acc7dee21abc2a80c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjNDMzY2UxMWExNDBlMjIyMWI4YWNjN2RlZTIxYWJjMmE4MGM5MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-05T13:48:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-05T13:48:33Z"}, "message": "Improve precondition checks for std::span\n\n\t* doc/xml/manual/status_cxx2020.xml: Update status for P0122R7 and\n\tP1024R3. Remove entry for P0920R2.\n\t* include/std/span  (__cpp_lib_span): Change value.\n\t(__extent_storage, __extent_storage<dynamic_extent>): Remove default\n\tconstructor.\n\t(span): Replace __extent_storage base class with data member.\n\t(span::_S_subspan_extent): New function.\n\t(span::empty()): Add nodiscard attribute.\n\t(span::front, span::back, span::operator[]): Check preconditions.\n\t(span::first, span::last, span::subspan): Add noexcept. Improve\n\tprecondition checks (LWG 3103).\n\t(get): Remove redundant condition from static_assert.\n\t(tuple_element<I, span<T, E>>): Fix static_assert message and simplify.\n\t(as_writable_bytes): Add inline specifier.\n\t* include/std/version (__cpp_lib_span): Change value.\n\t* testsuite/23_containers/span/back_neg.cc: Remove stray semi-colon.\n\t* testsuite/23_containers/span/front_neg.cc: Likewise.\n\t* testsuite/23_containers/span/index_op_neg.cc: Likewise.\n\t* testsuite/23_containers/span/last_neg.cc: Improve test.\n\t* testsuite/23_containers/span/subspan_neg.cc: Likewise.\n\t* testsuite/23_containers/span/1.cc: New test.\n\t* testsuite/23_containers/span/2.cc: New test.\n\t* testsuite/23_containers/span/back_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/first_2_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/first_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/first_neg.cc: New test.\n\t* testsuite/23_containers/span/front_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/index_op_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/last_2_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/last_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_2_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_3_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_4_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_5_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_6_assert_neg.cc: New test.\n\t* testsuite/23_containers/span/subspan_assert_neg.cc: New test.\n\nFrom-SVN: r275411", "tree": {"sha": "a8868d5f7ccf93c569e688364dd86f613b2d90f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8868d5f7ccf93c569e688364dd86f613b2d90f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c433ce11a140e2221b8acc7dee21abc2a80c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c433ce11a140e2221b8acc7dee21abc2a80c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c433ce11a140e2221b8acc7dee21abc2a80c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c433ce11a140e2221b8acc7dee21abc2a80c90/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e8f926f260342e0b89765a306a3027daeaa10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e8f926f260342e0b89765a306a3027daeaa10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e8f926f260342e0b89765a306a3027daeaa10e"}], "stats": {"total": 856, "additions": 733, "deletions": 123}, "files": [{"sha": "2ea0fe4ec40a0a82f612aedd4a40b94c95e1cd26", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -1,3 +1,42 @@\n+2019-09-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2020.xml: Update status for P0122R7 and\n+\tP1024R3. Remove entry for P0920R2.\n+\t* include/std/span  (__cpp_lib_span): Change value.\n+\t(__extent_storage, __extent_storage<dynamic_extent>): Remove default\n+\tconstructor.\n+\t(span): Replace __extent_storage base class with data member.\n+\t(span::_S_subspan_extent): New function.\n+\t(span::empty()): Add nodiscard attribute.\n+\t(span::front, span::back, span::operator[]): Check preconditions.\n+\t(span::first, span::last, span::subspan): Add noexcept. Improve\n+\tprecondition checks (LWG 3103).\n+\t(get): Remove redundant condition from static_assert.\n+\t(tuple_element<I, span<T, E>>): Fix static_assert message and simplify.\n+\t(as_writable_bytes): Add inline specifier.\n+\t* include/std/version (__cpp_lib_span): Change value.\n+\t* testsuite/23_containers/span/back_neg.cc: Remove stray semi-colon.\n+\t* testsuite/23_containers/span/front_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/index_op_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/last_neg.cc: Improve test.\n+\t* testsuite/23_containers/span/subspan_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/1.cc: New test.\n+\t* testsuite/23_containers/span/2.cc: New test.\n+\t* testsuite/23_containers/span/back_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/first_2_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/first_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/first_neg.cc: New test.\n+\t* testsuite/23_containers/span/front_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/index_op_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/last_2_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/last_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_2_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_3_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_4_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_5_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_6_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/subspan_assert_neg.cc: New test.\n+\n 2019-09-05  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n \n \t* include/Makefile.am: Add <span> header."}, {"sha": "06269a7145579a93844eae4f2b666d50f7ed5d90", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -1109,11 +1109,11 @@\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0777r1.pdf\" target=\"_top\">\n \tP0777R1\n \t</a>\n-      </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  <code class=\"code\">&lt;span&gt;</code> </td><td align=\"left\">\n+      </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">&lt;span&gt;</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0122r7.pdf\" target=\"_top\">\n \tP0122R7\n \t</a>\n-      </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Extending chrono to Calendars and Time Zones </td><td align=\"left\">\n+      </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_span &gt;= 201803L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Extending chrono to Calendars and Time Zones </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0355r7.html\" target=\"_top\">\n \tP0355R7\n \t</a>\n@@ -1430,17 +1430,13 @@\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1252r2.pdf\" target=\"_top\">\n         P1252R2\n \t</a>\n-      </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">\n+      </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         Usability Enhancements for <code class=\"classname\">std::span</code>\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1024r3.pdf\" target=\"_top\">\n         P1024R3\n \t</a>\n-      </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Precalculated hash values in lookup </td><td align=\"left\">\n-        <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0920r2.html\" target=\"_top\">\n-        P0920R2\n-\t</a>\n-      </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Traits for [Un]bounded Arrays </td><td align=\"left\">\n+      </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_span &gt;= 201902L</code> </td></tr><tr><td align=\"left\"> Traits for [Un]bounded Arrays </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1357r1.pdf\" target=\"_top\">\n         P1357R1\n \t</a>"}, {"sha": "ffd73aefc964b221d1accd5941df5f79595d2ca7", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2020.xml", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -237,15 +237,14 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>  <code>&lt;span&gt;</code> </entry>\n       <entry>\n         <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0122r7.pdf\">\n \tP0122R7\n \t</link>\n       </entry>\n-      <entry align=\"center\"> </entry>\n-      <entry />\n+      <entry align=\"center\"> 10.1 </entry>\n+      <entry> <code>__cpp_lib_span &gt;= 201803L</code> </entry>\n     </row>\n \n     <row>\n@@ -1111,7 +1110,6 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>\n         Usability Enhancements for <classname>std::span</classname>\n       </entry>\n@@ -1120,20 +1118,8 @@ Feature-testing recommendations for C++</link>.\n         P1024R3\n \t</link>\n       </entry>\n-      <entry align=\"center\"> </entry>\n-      <entry />\n-    </row>\n-\n-    <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n-      <entry> Precalculated hash values in lookup </entry>\n-      <entry>\n-        <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0920r2.html\">\n-        P0920R2\n-\t</link>\n-      </entry>\n-      <entry align=\"center\"> </entry>\n-      <entry />\n+      <entry align=\"center\"> 10.1 </entry>\n+      <entry> <code>__cpp_lib_span &gt;= 201902L</code> </entry>\n     </row>\n \n     <row>"}, {"sha": "95d778b104bc9c2721c42f1248428f5be87dde39", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 111, "deletions": 84, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -49,9 +49,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-// FIXME: they forgot this feature test macro\n-// get on someone's back about it in Belfast!!!\n-#define __cpp_lib_span 201911\n+#define __cpp_lib_span 201902L\n \n   inline constexpr size_t dynamic_extent = static_cast<size_t>(-1);\n \n@@ -78,9 +76,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       class __extent_storage\n       {\n       public:\n-\tconstexpr\n-\t__extent_storage() noexcept = default;\n-\n \tconstexpr\n \t__extent_storage(size_t) noexcept\n \t{ }\n@@ -91,13 +86,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<>\n-      class __extent_storage<static_cast<size_t>(-1)>\n+      class __extent_storage<dynamic_extent>\n       {\n       public:\n-\tconstexpr\n-\t__extent_storage() noexcept : _M_extent_value(0)\n-\t{ };\n-\n \tconstexpr\n \t__extent_storage(size_t __extent) noexcept\n \t: _M_extent_value(__extent)\n@@ -114,8 +105,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   } // namespace __detail\n \n   template<typename _Type, size_t _Extent = dynamic_extent>\n-    class span : private __detail::__extent_storage<_Extent>\n+    class span\n     {\n+      template<size_t _Offset, size_t _Count>\n+\tstatic constexpr size_t\n+\t_S_subspan_extent()\n+\t{\n+\t  if constexpr (_Count != dynamic_extent)\n+\t    return _Count;\n+\t  else if constexpr (extent != dynamic_extent)\n+\t    return _Extent - _Offset;\n+\t  else\n+\t    return dynamic_extent;\n+\t}\n+\n     public:\n       // member types\n       using value_type             = remove_cv_t<_Type>;\n@@ -138,17 +141,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // member constants\n       static inline constexpr size_t extent = _Extent;\n \n-    private:\n-      using __base_t = __detail::__extent_storage<extent>;\n-\n-    public:\n       // constructors\n \n       template <typename _Dummy = _Type,\n \t\tenable_if_t<is_same_v<_Dummy, _Type>\n \t\t  && (_Extent == dynamic_extent || _Extent == 0)>* = nullptr>\n \tconstexpr\n-\tspan() noexcept : __base_t(0), _M_ptr(nullptr)\n+\tspan() noexcept : _M_extent(0), _M_ptr(nullptr)\n \t{ }\n \n       constexpr\n@@ -234,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr\n \tspan(_ContiguousIterator __first, index_type __count)\n \tnoexcept(noexcept(::std::__adl_to_address(__first)))\n-\t: __base_t(__count), _M_ptr(::std::__adl_to_address(__first))\n+\t: _M_extent(__count), _M_ptr(::std::__adl_to_address(__first))\n \t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n \n #else\n@@ -276,7 +275,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr\n       span(pointer __first, index_type __count) noexcept\n-      : __base_t(__count), _M_ptr(static_cast<pointer>(__first))\n+      : _M_extent(__count), _M_ptr(static_cast<pointer>(__first))\n       { __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n \n       constexpr\n@@ -290,41 +289,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr span&\n       operator=(const span&) noexcept = default;\n \n-      // observers: element access\n+      // observers\n+\n+      constexpr index_type\n+      size() const noexcept\n+      { return this->_M_extent._M_extent(); }\n+\n+      constexpr index_type\n+      size_bytes() const noexcept\n+      { return this->_M_extent._M_extent() * sizeof(element_type); }\n+\n+      [[nodiscard]] constexpr bool\n+      empty() const noexcept\n+      { return size() == 0; }\n+\n+      // element access\n \n       constexpr reference\n       front() const noexcept\n-      { return *this->begin(); }\n+      {\n+\tstatic_assert(extent != 0);\n+\t__glibcxx_assert(!empty());\n+\treturn *this->_M_ptr;\n+      }\n \n       constexpr reference\n       back() const noexcept\n       {\n-\titerator __it = this->end();\n-\t--__it;\n-\treturn *__it;\n+\tstatic_assert(extent != 0);\n+\t__glibcxx_assert(!empty());\n+\treturn *(this->_M_ptr + (size() - 1));\n       }\n \n       constexpr reference\n       operator[](index_type __idx) const noexcept\n-      { return *(this->_M_ptr + __idx); }\n+      {\n+\tstatic_assert(extent != 0);\n+\t__glibcxx_assert(__idx < size());\n+\treturn *(this->_M_ptr + __idx);\n+      }\n \n       constexpr pointer\n       data() const noexcept\n       { return this->_M_ptr; }\n \n-      constexpr index_type\n-      size() const noexcept\n-      { return this->__base_t::_M_extent(); }\n+      // iterator support\n \n-      constexpr index_type\n-      size_bytes() const noexcept\n-      { return this->__base_t::_M_extent() * sizeof(element_type); }\n-\n-      constexpr bool\n-      empty() const noexcept\n-      { return size() == 0; }\n-\n-      // observers: iterator support\n       constexpr iterator\n       begin() const noexcept\n       { return iterator(this->_M_ptr); }\n@@ -357,70 +367,85 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       crend() const noexcept\n       { return const_reverse_iterator(this->cbegin()); }\n \n-      // observers: subranges\n+      // subviews\n+\n       template<size_t _Count>\n \tconstexpr span<element_type, _Count>\n-\tfirst() const\n+\tfirst() const noexcept\n \t{\n-\t  __glibcxx_assert(_Count < size());\n+\t  if constexpr (_Extent == dynamic_extent)\n+\t    __glibcxx_assert(_Count <= size());\n+\t  else\n+\t    static_assert(_Count <= extent);\n \t  return { this->data(), _Count };\n \t}\n \n       constexpr span<element_type, dynamic_extent>\n-      first(index_type __count) const\n+      first(index_type __count) const noexcept\n       {\n-\t__glibcxx_assert(__count < size());\n+\t__glibcxx_assert(__count <= size());\n \treturn { this->data(), __count };\n       }\n \n       template<size_t _Count>\n \tconstexpr span<element_type, _Count>\n-\tlast() const\n+\tlast() const noexcept\n \t{\n-\t  static_assert(_Count == dynamic_extent ||\n-\t\t\t  _Extent == dynamic_extent || _Count <= _Extent,\n-\t    \"Count or Extent are dynamic, \"\n-\t    \"or the Count is less than the static extent\");\n-\t  __glibcxx_assert(_Count <= size());\n+\t  if constexpr (_Extent == dynamic_extent)\n+\t    __glibcxx_assert(_Count <= size());\n+\t  else\n+\t    static_assert(_Count <= extent);\n \t  return { this->data() + (this->size() - _Count), _Count };\n \t}\n \n       constexpr span<element_type, dynamic_extent>\n-      last(index_type __count) const\n+      last(index_type __count) const noexcept\n       {\n-\t__glibcxx_assert(__count < size());\n-\tindex_type __offset = (this->size() - __count);\n-\treturn { this->data() + __offset, __count };\n+\t__glibcxx_assert(__count <= size());\n+\treturn { this->data() + (this->size() - __count), __count };\n       }\n \n       template<size_t _Offset, size_t _Count = dynamic_extent>\n \tconstexpr auto\n-\tsubspan() const\n+\tsubspan() const noexcept\n+\t-> span<element_type, _S_subspan_extent<_Offset, _Count>()>\n \t{\n-\t  static_assert(_Count == dynamic_extent ||\n-\t\t\t  _Extent == dynamic_extent ||\n-\t\t\t  (_Offset + _Count) <= _Extent,\n-\t    \"Count or Extent are dynamic, \"\n-\t    \"or the Count + Offset is less than the static extent\");\n-\t  constexpr size_t __span_extent =\n-\t    (_Count != dynamic_extent\n-\t\t? _Count\n-\t\t: (_Extent != dynamic_extent ? _Extent - _Offset\n-\t\t\t\t\t\t    : dynamic_extent));\n-\t  using __span_t = span<element_type, __span_extent>;\n-\t  if constexpr(_Count != dynamic_extent)\n+\t  if constexpr (_Extent == dynamic_extent)\n+\t    __glibcxx_assert(_Offset <= size());\n+\t  else\n+\t    static_assert(_Offset <= extent);\n+\n+\t  if constexpr (_Count == dynamic_extent)\n+\t    return { this->data() + _Offset, this->size() - _Offset };\n+\t  else\n \t    {\n-\t      __glibcxx_assert((_Offset + _Count) < size());\n+\t      if constexpr (_Extent == dynamic_extent)\n+\t\t{\n+\t\t  __glibcxx_assert(_Count <= size());\n+\t\t  __glibcxx_assert(_Count <= (size() - _Offset));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  static_assert(_Count <= extent);\n+\t\t  static_assert(_Count <= (extent - _Offset));\n+\t\t}\n+\t      return { this->data() + _Offset, _Count };\n \t    }\n-\t  return __span_t(this->data() + _Offset,\n-\t    (_Count == dynamic_extent ? this->size() - _Offset : _Count));\n \t}\n \n       constexpr span<element_type, dynamic_extent>\n       subspan(index_type __offset, index_type __count = dynamic_extent) const\n+      noexcept\n       {\n-\treturn {this->data() + __offset,\n-\t  __count == dynamic_extent ? this->size() - __offset : __count};\n+\t__glibcxx_assert(__offset <= size());\n+\tif (__count == dynamic_extent)\n+\t  __count = this->size() - __offset;\n+\telse\n+\t  {\n+\t    __glibcxx_assert(__count <= size());\n+\t    __glibcxx_assert(__offset + __count <= size());\n+\t  }\n+\treturn {this->data() + __offset, __count};\n       }\n \n       // observers: range helpers\n@@ -434,51 +459,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __sp.end(); }\n \n     private:\n+      [[no_unique_address]] __detail::__extent_storage<extent> _M_extent;\n       pointer _M_ptr;\n     };\n \n   // deduction guides\n   template<typename _Type, size_t _ArrayExtent>\n-    span(_Type(&)[_ArrayExtent])->span<_Type, _ArrayExtent>;\n+    span(_Type(&)[_ArrayExtent]) -> span<_Type, _ArrayExtent>;\n \n   template<typename _Type, size_t _ArrayExtent>\n-    span(array<_Type, _ArrayExtent>&)->span<_Type, _ArrayExtent>;\n+    span(array<_Type, _ArrayExtent>&) -> span<_Type, _ArrayExtent>;\n \n   template<typename _Type, size_t _ArrayExtent>\n     span(const array<_Type, _ArrayExtent>&)\n-      ->span<const _Type, _ArrayExtent>;\n+      -> span<const _Type, _ArrayExtent>;\n \n #if defined(_GLIBCXX_P1394) && _GLIBCXX_P1394\n \n   template<typename _ContiguousIterator, typename _Sentinel>\n     span(_ContiguousIterator, _Sentinel)\n-      ->span<remove_reference_t<\n+      -> span<remove_reference_t<\n \ttypename iterator_traits<_ContiguousIterator>::reference>>;\n \n   template<typename _Range>\n     span(_Range &&)\n-      ->span<remove_reference_t<typename iterator_traits<decltype(\n-\t::std::__adl_begin(::std::declval<_Range&>()))>::reference>>;\n+      -> span<remove_reference_t<typename iterator_traits<\n+\t  decltype(std::__adl_begin(::std::declval<_Range&>()))>::reference>>;\n \n #else\n \n   template<typename _Container>\n-    span(_Container&)->span<typename _Container::value_type>;\n+    span(_Container&) -> span<typename _Container::value_type>;\n \n   template<typename _Container>\n-    span(const _Container&)->span<const typename _Container::value_type>;\n+    span(const _Container&) -> span<const typename _Container::value_type>;\n \n #endif // P1394\n \n   template<typename _Type, size_t _Extent>\n+    inline\n     span<const byte, _Extent == dynamic_extent\n \t? dynamic_extent : _Extent * sizeof(_Type)>\n-    inline as_bytes(span<_Type, _Extent> __sp) noexcept\n+    as_bytes(span<_Type, _Extent> __sp) noexcept\n     {\n       return {reinterpret_cast<const byte*>(__sp.data()), __sp.size_bytes()};\n     }\n \n   template<typename _Type, size_t _Extent>\n+    inline\n     span<byte, _Extent == dynamic_extent\n        ? dynamic_extent : _Extent * sizeof(_Type)>\n     as_writable_bytes(span<_Type, _Extent> __sp) noexcept\n@@ -491,9 +519,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Type&\n     get(span<_Type, _Extent> __sp) noexcept\n     {\n-      static_assert(_Extent != dynamic_extent\n-\t&& (_Extent > 0) && (_Index < _Extent),\n-\t\"std::get can only be used with a span of non-dynamic (fixed) extent\");\n+      static_assert(_Extent != dynamic_extent && _Index < _Extent,\n+\t\"get<I> can only be used with a span of non-dynamic (fixed) extent\");\n       return __sp[_Index];\n     }\n \n@@ -508,10 +535,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<size_t _Index, typename _Type, size_t _Extent>\n     struct tuple_element<_Index, span<_Type, _Extent>>\n     {\n-      static_assert(_Extent != dynamic_extent, \"tuple_size can only \"\n+      static_assert(_Extent != dynamic_extent, \"tuple_element can only \"\n \t\"be used with a span of non-dynamic (fixed) extent\");\n       static_assert(_Index < _Extent, \"Index is less than Extent\");\n-      using type = typename span<_Type, _Extent>::element_type;\n+      using type = _Type;\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7625d397a0de25b4b0de3679f9d762125bcde426", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -166,10 +166,8 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_math_constants 201907L\n+#define __cpp_lib_span 201902L\n #define __cpp_lib_to_array 201907L\n-// FIXME: they forgot this feature test macro\n-// get on someone's back about it in Belfast!!!\n-#define __cpp_lib_span 201911\n #endif // C++2a\n #endif // C++17\n #endif // C++14"}, {"sha": "c31d8d400ced1fa76553fe7d586c26a24566b8c0", "filename": "libstdc++-v3/testsuite/23_containers/span/1.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+#ifndef __cpp_lib_span\n+# error \"Feature-test macro for span missing in <span>\"\n+#elif __cpp_lib_span != 201902L\n+# error \"Feature-test macro for span has wrong value in <span>\"\n+#endif"}, {"sha": "1870ba169731490ef55268f2ca6a40ae6ca5eeb4", "filename": "libstdc++-v3/testsuite/23_containers/span/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_span\n+# error \"Feature-test macro for span missing in <version>\"\n+#elif __cpp_lib_span != 201902L\n+# error \"Feature-test macro for span has wrong value in <version>\"\n+#endif"}, {"sha": "0b8fc672a202156cd2bca28e23e68a775de87231", "filename": "libstdc++-v3/testsuite/23_containers/span/back_assert_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  std::span<int, std::dynamic_extent> s;\n+  s.back();\n+}"}, {"sha": "b1bb10f40d1ce67611a25849de8082864dce354a", "filename": "libstdc++-v3/testsuite/23_containers/span/back_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fback_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+void\n+test01()\n+{\n+  std::span<int, 0> s;\n+  s.back(); // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "fd9c9204d1ef51a7bf05b79b5df0a47e16911f14", "filename": "libstdc++-v3/testsuite/23_containers/span/first_2_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_2_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_2_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_2_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.first(5);\n+}"}, {"sha": "94f1f03a64ab75503a44fcaa2c49c8f80b415d75", "filename": "libstdc++-v3/testsuite/23_containers/span/first_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.first<5>();\n+}"}, {"sha": "42729347d3312dd8fe52763945bfb86b1895ff7b", "filename": "libstdc++-v3/testsuite/23_containers/span/first_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffirst_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+void\n+test01()\n+{\n+  int a[4];\n+  std::span<int, 4> s(a);\n+  s.first<5>(); // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "516bf2a2dcb5d52c5d1640efc1f84c7a6fd64925", "filename": "libstdc++-v3/testsuite/23_containers/span/front_assert_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  std::span<int, std::dynamic_extent> s;\n+  s.front();\n+}"}, {"sha": "4c2b6e39c703fff565bf6acf079e96b050afec64", "filename": "libstdc++-v3/testsuite/23_containers/span/front_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Ffront_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+void\n+test01()\n+{\n+  std::span<int, 0> s;\n+  s.front(); // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "4109c4cdc7ab1f55a7b8f3fe8b6d235d816b18c7", "filename": "libstdc++-v3/testsuite/23_containers/span/index_op_assert_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  std::span<int, std::dynamic_extent> s;\n+  s[99];\n+}"}, {"sha": "5bd1e11dda007e7566445b087a310ab87f204ffe", "filename": "libstdc++-v3/testsuite/23_containers/span/index_op_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Findex_op_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+void\n+test01()\n+{\n+  std::span<int, 0> s;\n+  s[99]; // { dg-error \"here\" }\n+}\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "1cc060f4735676a45b649e023247bc5b2eb44539", "filename": "libstdc++-v3/testsuite/23_containers/span/last_2_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_2_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_2_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_2_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.last(5);\n+}"}, {"sha": "31b6cc0816f97a95cefe82c1f68359ac381ab3ab", "filename": "libstdc++-v3/testsuite/23_containers/span/last_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.last<5>();\n+}"}, {"sha": "ac77dbe44381ca8d0b2fe8677e152798f325b9b2", "filename": "libstdc++-v3/testsuite/23_containers/span/last_neg.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flast_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -15,15 +15,16 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=c++2a\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n \n #include <span>\n \n-int\n-main()\n+void\n+test01()\n {\n-  std::span<int, 2> myspan(nullptr, 2);\n-  myspan.last<3>(); // { dg-error \"here\" }\n+  int a[2];\n+  std::span<int, 2> s(a);\n+  s.last<3>(); // { dg-error \"here\" }\n }\n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "355a71c9d9de70bae9a742c8f735d4d2270141f9", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_2_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_2_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_2_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_2_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan<2, 5>();\n+}"}, {"sha": "bdf4abad2c6189007f3deb52c50a3c190c98e6a2", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_3_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_3_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_3_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_3_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan<2, 3>();\n+}"}, {"sha": "37ebed038fa63eb9f3b2e797228df9cac53b9ae1", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_4_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_4_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_4_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_4_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan(5, 0);\n+}"}, {"sha": "615ea0ba559946305b50c0a9d845754475ac044c", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_5_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_5_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_5_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_5_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan(2, 5);\n+}"}, {"sha": "db5f427b35fcdccd2bac537b783c59b52a54dfee", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_6_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_6_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_6_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_6_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan(2, 3);\n+}"}, {"sha": "d120d436c23889b806deedef5ab98cfad367d7af", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_assert_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_assert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_assert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_assert_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { xfail c++2a } }\n+\n+#define _GLIBCXX_ASSERTIONS\n+#include <span>\n+\n+int main()\n+{\n+  int a[4];\n+  std::span<int, std::dynamic_extent> s(a);\n+  s.subspan<5, 0>();\n+}"}, {"sha": "70fcda6e91a4870e7de0df8c1fe2d65fee876eee", "filename": "libstdc++-v3/testsuite/23_containers/span/subspan_neg.cc", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c433ce11a140e2221b8acc7dee21abc2a80c90/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fsubspan_neg.cc?ref=b5c433ce11a140e2221b8acc7dee21abc2a80c90", "patch": "@@ -15,15 +15,33 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=c++2a\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do compile { target c++2a } }\n \n #include <span>\n \n-int\n-main()\n+void\n+test01()\n {\n-  std::span<int, 2> myspan(nullptr, 2);\n-  myspan.subspan<3, 1>(); // { dg-error \"here\" }\n+  int a[4];\n+  std::span<int, 4> s(a);\n+  s.subspan<5, 0>(); // { dg-error \"here\" }\n }\n+\n+void\n+test02()\n+{\n+  int a[4];\n+  std::span<int, 4> s(a);\n+  s.subspan<3, 5>(); // { dg-error \"here\" }\n+}\n+\n+void\n+test03()\n+{\n+  int a[4];\n+  std::span<int, 4> s(a);\n+  s.subspan<3, 2>(); // { dg-error \"here\" }\n+}\n+\n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}]}