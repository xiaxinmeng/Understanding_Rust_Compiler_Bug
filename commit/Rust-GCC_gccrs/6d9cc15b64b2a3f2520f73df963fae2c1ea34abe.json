{"sha": "6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5Y2MxNWI2NGIyYTNmMjUyMGY3M2RmOTYzZmFlMmMxZWEzNGFiZQ==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2003-02-19T18:12:54Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2003-02-19T18:12:54Z"}, "message": "bb-reorder.c (find_traces_1_round): Fixed condition for small destination block with multiple predecessors.\n\n\t* bb-reorder.c (find_traces_1_round): Fixed condition for small\n\tdestination block with multiple predecessors.\n\t(connect_traces): Check whether the block is a start of trace.\n\nFrom-SVN: r63127", "tree": {"sha": "4c8382923a9291af159b79e52ac1a3d9325f105d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8382923a9291af159b79e52ac1a3d9325f105d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe/comments", "author": null, "committer": null, "parents": [{"sha": "563a317a855153a044b32549429218e121d51ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563a317a855153a044b32549429218e121d51ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563a317a855153a044b32549429218e121d51ff6"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "d083a31cf0ce21810bd53dec00e482fd1ed78cf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "patch": "@@ -1,3 +1,9 @@\n+2003-02-19  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* bb-reorder.c (find_traces_1_round): Fixed condition for small\n+\tdestination block with multiple predecessors.\n+\t(connect_traces): Check whether the block is a start of trace.\n+\n Wed Feb 19 19:00:24 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (expand_call): Update call of INIT_CUMULATIVE_ARGS"}, {"sha": "f89900d470b12e2e95b1771b1d8bccc7726c0cc1", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "patch": "@@ -448,12 +448,6 @@ find_traces_1_round (branch_th, exec_th, count_th, traces, n_traces, round,\n \t\t  || prob < branch_th || freq < exec_th || e->count < count_th)\n \t\tcontinue;\n \n-\t      /* If the destination has multiple precessesors, and can be\n-\t\t duplicated cheaper than a jump, don't allow it to be added\n-\t\t to a trace.  We'll duplicate it when connecting traces.  */\n-\t      if (e->dest->pred->pred_next && copy_bb_p (e->dest, 0))\n-\t\tcontinue;\n-\n \t      if (better_edge_p (bb, e, prob, freq, best_prob, best_freq))\n \t\t{\n \t\t  best_edge = e;\n@@ -462,6 +456,13 @@ find_traces_1_round (branch_th, exec_th, count_th, traces, n_traces, round,\n \t\t}\n \t    }\n \n+\t  /* If the best destination has multiple precessesors, and can be\n+\t     duplicated cheaper than a jump, don't allow it to be added\n+\t     to a trace.  We'll duplicate it when connecting traces.  */\n+\t  if (best_edge && best_edge->dest->pred->pred_next\n+\t      && copy_bb_p (best_edge->dest, 0))\n+\t    best_edge = NULL;\n+\n \t  /* Add all non-selected successors to the heaps.  */\n \t  for (e = bb->succ; e; e = e->succ_next)\n \t    {\n@@ -922,15 +923,17 @@ connect_traces (n_traces, traces)\n \t\t    edge best2 = NULL;\n \t\t    int best2_len = 0;\n \n-\t\t    /* If the destination trace is only one block\n-\t\t       long, then no need to search the successor\n+\t\t    /* If the destination is a start of a trace which is only\n+\t\t       one block long, then no need to search the successor\n \t\t       blocks of the trace.  Accept it.  */\n-\t\t   if (traces[bbd[e->dest->index].start_of_trace].length == 1)\n-\t\t     {\n-\t\t       best = e;\n-\t\t       try_copy = true;\n-\t\t       continue;\n-\t\t     }\n+\t\t    if (bbd[e->dest->index].start_of_trace >= 0\n+\t\t\t&& traces[bbd[e->dest->index].start_of_trace].length\n+\t\t\t   == 1)\n+\t\t      {\n+\t\t\tbest = e;\n+\t\t\ttry_copy = true;\n+\t\t\tcontinue;\n+\t\t      }\n \n \t\t    for (e2 = e->dest->succ; e2; e2 = e2->succ_next)\n \t\t      {"}]}