{"sha": "62b7afe926099bac064a39a88bb3685ce50c2965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiN2FmZTkyNjA5OWJhYzA2NGEzOWE4OGJiMzY4NWNlNTBjMjk2NQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2008-08-08T12:59:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-08T12:59:28Z"}, "message": "g-soccon.ads: New file.\n\n2008-08-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-soccon.ads: New file.\n\n\t* g-stheme.adb, g-socthi-vms.adb, g-socthi-vxworks.adb,\n\tg-socthi-mingw.adb, g-sttsne-vxworks.adb, g-socthi.adb,\n\tg-stsifd-sockets.adb, g-socket.adb, g-socket.ads,\n\tg-sothco.adb, g-sothco.ads: Add back GNAT.Sockets.Constants as a child\n\tunit, to allow building software that depends on this internal unit\n\twith both older and newer compilers.\n\nFrom-SVN: r138877", "tree": {"sha": "79ae6ee89c9399d148f4fe0f6a12ce13f41573e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ae6ee89c9399d148f4fe0f6a12ce13f41573e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b7afe926099bac064a39a88bb3685ce50c2965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b7afe926099bac064a39a88bb3685ce50c2965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b7afe926099bac064a39a88bb3685ce50c2965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b7afe926099bac064a39a88bb3685ce50c2965/comments", "author": null, "committer": null, "parents": [{"sha": "d65251b83d49c8c78aa31fcf33eb287a91aa3dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65251b83d49c8c78aa31fcf33eb287a91aa3dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65251b83d49c8c78aa31fcf33eb287a91aa3dea"}], "stats": {"total": 335, "additions": 188, "deletions": 147}, "files": [{"sha": "ede8fd5eb0919d44b048b3f8f61aa33ffa4e7b92", "filename": "gcc/ada/g-soccon.ads", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-soccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-soccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon.ads?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -0,0 +1,42 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a temporary compatibility renaming for deprecated\n+--  internal package GNAT.Sockets.Constants.\n+\n+--  This package should not be directly used by an applications program.\n+--  It is a compatibility artefact to help building legacy code with newer\n+--  compilers, and will be removed at some point in the future.\n+\n+with System.OS_Constants;\n+package GNAT.Sockets.Constants renames System.OS_Constants;"}, {"sha": "2f729bd0314bf04340160cea4dd5f293e920b68e", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -58,7 +58,7 @@ package body GNAT.Sockets is\n \n    ENOERROR : constant := 0;\n \n-   Netdb_Buffer_Size : constant := Constants.Need_Netdb_Buffer * 1024;\n+   Netdb_Buffer_Size : constant := SOSC.Need_Netdb_Buffer * 1024;\n    --  The network database functions gethostbyname, gethostbyaddr,\n    --  getservbyname and getservbyport can either be guaranteed task safe by\n    --  the operating system, or else return data through a user-provided buffer\n@@ -67,49 +67,49 @@ package body GNAT.Sockets is\n    --  Correspondence tables\n \n    Levels : constant array (Level_Type) of C.int :=\n-              (Socket_Level              => Constants.SOL_SOCKET,\n-               IP_Protocol_For_IP_Level  => Constants.IPPROTO_IP,\n-               IP_Protocol_For_UDP_Level => Constants.IPPROTO_UDP,\n-               IP_Protocol_For_TCP_Level => Constants.IPPROTO_TCP);\n+              (Socket_Level              => SOSC.SOL_SOCKET,\n+               IP_Protocol_For_IP_Level  => SOSC.IPPROTO_IP,\n+               IP_Protocol_For_UDP_Level => SOSC.IPPROTO_UDP,\n+               IP_Protocol_For_TCP_Level => SOSC.IPPROTO_TCP);\n \n    Modes : constant array (Mode_Type) of C.int :=\n-             (Socket_Stream   => Constants.SOCK_STREAM,\n-              Socket_Datagram => Constants.SOCK_DGRAM);\n+             (Socket_Stream   => SOSC.SOCK_STREAM,\n+              Socket_Datagram => SOSC.SOCK_DGRAM);\n \n    Shutmodes : constant array (Shutmode_Type) of C.int :=\n-                 (Shut_Read       => Constants.SHUT_RD,\n-                  Shut_Write      => Constants.SHUT_WR,\n-                  Shut_Read_Write => Constants.SHUT_RDWR);\n+                 (Shut_Read       => SOSC.SHUT_RD,\n+                  Shut_Write      => SOSC.SHUT_WR,\n+                  Shut_Read_Write => SOSC.SHUT_RDWR);\n \n    Requests : constant array (Request_Name) of C.int :=\n-                (Non_Blocking_IO => Constants.FIONBIO,\n-                 N_Bytes_To_Read => Constants.FIONREAD);\n+                (Non_Blocking_IO => SOSC.FIONBIO,\n+                 N_Bytes_To_Read => SOSC.FIONREAD);\n \n    Options : constant array (Option_Name) of C.int :=\n-               (Keep_Alive          => Constants.SO_KEEPALIVE,\n-                Reuse_Address       => Constants.SO_REUSEADDR,\n-                Broadcast           => Constants.SO_BROADCAST,\n-                Send_Buffer         => Constants.SO_SNDBUF,\n-                Receive_Buffer      => Constants.SO_RCVBUF,\n-                Linger              => Constants.SO_LINGER,\n-                Error               => Constants.SO_ERROR,\n-                No_Delay            => Constants.TCP_NODELAY,\n-                Add_Membership      => Constants.IP_ADD_MEMBERSHIP,\n-                Drop_Membership     => Constants.IP_DROP_MEMBERSHIP,\n-                Multicast_If        => Constants.IP_MULTICAST_IF,\n-                Multicast_TTL       => Constants.IP_MULTICAST_TTL,\n-                Multicast_Loop      => Constants.IP_MULTICAST_LOOP,\n-                Receive_Packet_Info => Constants.IP_PKTINFO,\n-                Send_Timeout        => Constants.SO_SNDTIMEO,\n-                Receive_Timeout     => Constants.SO_RCVTIMEO);\n+               (Keep_Alive          => SOSC.SO_KEEPALIVE,\n+                Reuse_Address       => SOSC.SO_REUSEADDR,\n+                Broadcast           => SOSC.SO_BROADCAST,\n+                Send_Buffer         => SOSC.SO_SNDBUF,\n+                Receive_Buffer      => SOSC.SO_RCVBUF,\n+                Linger              => SOSC.SO_LINGER,\n+                Error               => SOSC.SO_ERROR,\n+                No_Delay            => SOSC.TCP_NODELAY,\n+                Add_Membership      => SOSC.IP_ADD_MEMBERSHIP,\n+                Drop_Membership     => SOSC.IP_DROP_MEMBERSHIP,\n+                Multicast_If        => SOSC.IP_MULTICAST_IF,\n+                Multicast_TTL       => SOSC.IP_MULTICAST_TTL,\n+                Multicast_Loop      => SOSC.IP_MULTICAST_LOOP,\n+                Receive_Packet_Info => SOSC.IP_PKTINFO,\n+                Send_Timeout        => SOSC.SO_SNDTIMEO,\n+                Receive_Timeout     => SOSC.SO_RCVTIMEO);\n    --  ??? Note: for OpenSolaris, Receive_Packet_Info should be IP_RECVPKTINFO,\n    --  but for Linux compatibility this constant is the same as IP_PKTINFO.\n \n    Flags : constant array (0 .. 3) of C.int :=\n-             (0 => Constants.MSG_OOB,     --  Process_Out_Of_Band_Data\n-              1 => Constants.MSG_PEEK,    --  Peek_At_Incoming_Data\n-              2 => Constants.MSG_WAITALL, --  Wait_For_A_Full_Reception\n-              3 => Constants.MSG_EOR);    --  Send_End_Of_Record\n+             (0 => SOSC.MSG_OOB,     --  Process_Out_Of_Band_Data\n+              1 => SOSC.MSG_PEEK,    --  Peek_At_Incoming_Data\n+              2 => SOSC.MSG_WAITALL, --  Wait_For_A_Full_Reception\n+              3 => SOSC.MSG_EOR);    --  Send_End_Of_Record\n \n    Socket_Error_Id : constant Exception_Id := Socket_Error'Identity;\n    Host_Error_Id   : constant Exception_Id := Host_Error'Identity;\n@@ -138,7 +138,7 @@ package body GNAT.Sockets is\n    --  Return the int value corresponding to the specified flags combination\n \n    function Set_Forced_Flags (F : C.int) return C.int;\n-   --  Return F with the bits from Constants.MSG_Forced_Flags forced set\n+   --  Return F with the bits from SOSC.MSG_Forced_Flags forced set\n \n    function Short_To_Network\n      (S : C.unsigned_short) return C.unsigned_short;\n@@ -882,7 +882,7 @@ package body GNAT.Sockets is\n       Err    : aliased C.int;\n \n    begin\n-      if Safe_Gethostbyaddr (HA'Address, HA'Size / 8, Constants.AF_INET,\n+      if Safe_Gethostbyaddr (HA'Address, HA'Size / 8, SOSC.AF_INET,\n                              Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n       then\n          Raise_Host_Error (Integer (Err));\n@@ -1260,15 +1260,15 @@ package body GNAT.Sockets is\n       --  calling Inet_Addr(\"\") will not return an error.\n \n       elsif Image = \"\" then\n-         Raise_Socket_Error (Constants.EINVAL);\n+         Raise_Socket_Error (SOSC.EINVAL);\n       end if;\n \n       Img := New_String (Image);\n       Res := C_Inet_Addr (Img);\n       Free (Img);\n \n       if Res = Failure then\n-         Raise_Socket_Error (Constants.EINVAL);\n+         Raise_Socket_Error (SOSC.EINVAL);\n       end if;\n \n       To_Inet_Addr (To_In_Addr (Res), Result);\n@@ -1280,7 +1280,7 @@ package body GNAT.Sockets is\n    ----------------\n \n    procedure Initialize (Process_Blocking_IO : Boolean) is\n-      Expected : constant Boolean := not Constants.Thread_Blocking_IO;\n+      Expected : constant Boolean := not SOSC.Thread_Blocking_IO;\n    begin\n       if Process_Blocking_IO /= Expected then\n          raise Socket_Error with\n@@ -1613,16 +1613,16 @@ package body GNAT.Sockets is\n      (Error_Value : Integer;\n       From_Errno  : Boolean := True) return Error_Type\n    is\n-      use GNAT.Sockets.Constants;\n+      use GNAT.Sockets.SOSC;\n \n    begin\n       if not From_Errno then\n          case Error_Value is\n-            when Constants.HOST_NOT_FOUND => return Unknown_Host;\n-            when Constants.TRY_AGAIN      => return Host_Name_Lookup_Failure;\n-            when Constants.NO_RECOVERY    => return Non_Recoverable_Error;\n-            when Constants.NO_DATA        => return Unknown_Server_Error;\n-            when others                   => return Cannot_Resolve_Error;\n+            when SOSC.HOST_NOT_FOUND => return Unknown_Host;\n+            when SOSC.TRY_AGAIN      => return Host_Name_Lookup_Failure;\n+            when SOSC.NO_RECOVERY    => return Non_Recoverable_Error;\n+            when SOSC.NO_DATA        => return Unknown_Server_Error;\n+            when others              => return Cannot_Resolve_Error;\n          end case;\n       end if;\n \n@@ -1828,8 +1828,8 @@ package body GNAT.Sockets is\n          pragma Warnings (Off);\n          --  Following test may be compile time known on some targets\n \n-         if Vector'Length - Iov_Count > Constants.IOV_MAX then\n-            This_Iov_Count := Constants.IOV_MAX;\n+         if Vector'Length - Iov_Count > SOSC.IOV_MAX then\n+            This_Iov_Count := SOSC.IOV_MAX;\n          else\n             This_Iov_Count := Vector'Length - Iov_Count;\n          end if;\n@@ -1879,7 +1879,7 @@ package body GNAT.Sockets is\n       function To_int is\n         new Ada.Unchecked_Conversion (C.unsigned, C.int);\n    begin\n-      return To_int (To_unsigned (F) or Constants.MSG_Forced_Flags);\n+      return To_int (To_unsigned (F) or SOSC.MSG_Forced_Flags);\n    end Set_Forced_Flags;\n \n    -----------------------\n@@ -2160,7 +2160,7 @@ package body GNAT.Sockets is\n \n          if Current mod 2 /= 0 then\n             if Flags (J) = -1 then\n-               Raise_Socket_Error (Constants.EOPNOTSUPP);\n+               Raise_Socket_Error (SOSC.EOPNOTSUPP);\n             end if;\n \n             Result := Result + Flags (J);"}, {"sha": "045e3bfb7d07fa1b8bc776d86731c7434d8c8780", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -369,7 +369,7 @@ package GNAT.Sockets is\n    --     Finalize;\n    --  end PingPong;\n \n-   package Constants renames System.OS_Constants;\n+   package SOSC renames System.OS_Constants;\n    --  Renaming used to provide short-hand notations thoughout the sockets\n    --  binding. Note that System.OS_Constants is an internal unit, and the\n    --  entities declared therein are not meant for direct access by users,\n@@ -414,10 +414,9 @@ package GNAT.Sockets is\n \n    Immediate : constant Duration := 0.0;\n \n-   Timeval_Forever : constant :=\n-                       2.0 ** (Constants.SIZEOF_tv_sec * 8 - 1) - 1.0;\n-   Forever   : constant Duration :=\n-                 Duration'Min (Duration'Last, Timeval_Forever);\n+   Timeval_Forever : constant := 2.0 ** (SOSC.SIZEOF_tv_sec * 8 - 1) - 1.0;\n+   Forever         : constant Duration :=\n+                       Duration'Min (Duration'Last, Timeval_Forever);\n \n    subtype Timeval_Duration is Duration range Immediate .. Forever;\n "}, {"sha": "301317587aae3944dbca92d6a1a08d71321837f4", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -239,8 +239,8 @@ package body GNAT.Sockets.Thin is\n       Res := Standard_Connect (S, Name, Namelen);\n \n       if Res = -1 then\n-         if Socket_Errno = Constants.EWOULDBLOCK then\n-            Set_Socket_Errno (Constants.EINPROGRESS);\n+         if Socket_Errno = SOSC.EWOULDBLOCK then\n+            Set_Socket_Errno (SOSC.EINPROGRESS);\n          end if;\n       end if;\n \n@@ -341,7 +341,7 @@ package body GNAT.Sockets.Thin is\n       if EFS /= No_Fd_Set_Access then\n          declare\n             EFSC    : constant Fd_Set_Access := New_Socket_Set (EFS);\n-            Flag    : constant C.int := Constants.MSG_PEEK + Constants.MSG_OOB;\n+            Flag    : constant C.int := SOSC.MSG_PEEK + Constants.MSG_OOB;\n             Buffer  : Character;\n             Length  : C.int;\n             Fromlen : aliased C.int;\n@@ -487,7 +487,7 @@ package body GNAT.Sockets.Thin is\n    function Socket_Error_Message\n      (Errno : Integer) return C.Strings.chars_ptr\n    is\n-      use GNAT.Sockets.Constants;\n+      use GNAT.Sockets.SOSC;\n    begin\n       case Errno is\n          when EINTR =>           return Error_Messages (N_EINTR);"}, {"sha": "0151ef567f4862fe949816f28cf51ef2cc466a89", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -52,7 +52,7 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n+   --  When SOSC.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n@@ -134,22 +134,22 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties of its server, especially\n          --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Discard := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n       end if;\n \n       return R;\n@@ -169,10 +169,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Constants.Thread_Blocking_IO\n+      if SOSC.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n-        or else Errno /= Constants.EINPROGRESS\n+        or else Errno /= SOSC.EINPROGRESS\n       then\n          return Res;\n       end if;\n@@ -208,7 +208,7 @@ package body GNAT.Sockets.Thin is\n \n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Res = Failure and then Errno = Constants.EISCONN then\n+      if Res = Failure and then Errno = SOSC.EISCONN then\n          return Thin_Common.Success;\n \n       else\n@@ -226,8 +226,8 @@ package body GNAT.Sockets.Thin is\n       Arg : Int_Access) return C.int\n    is\n    begin\n-      if not Constants.Thread_Blocking_IO\n-        and then Req = Constants.FIONBIO\n+      if not SOSC.Thread_Blocking_IO\n+        and then Req = SOSC.FIONBIO\n       then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n@@ -252,10 +252,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -279,10 +279,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -304,10 +304,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -331,10 +331,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -359,13 +359,13 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Discard := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n          Set_Non_Blocking_Socket (R, False);\n       end if;\n \n@@ -508,7 +508,7 @@ package body GNAT.Sockets.Thin is\n            (Fd,\n             Iovec (J).Base.all'Address,\n             Interfaces.C.int (Iovec (J).Length),\n-            Constants.MSG_Forced_Flags);\n+            SOSC.MSG_Forced_Flags);\n \n          if Res < 0 then\n             return Res;"}, {"sha": "3a1d1fe9a5fb8514f4aec78f7c8cd55e8be83a97", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -56,7 +56,7 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n+   --  When SOSC.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n@@ -146,22 +146,22 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties of its server especially\n          --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Res := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Res := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n          --  Is it OK to ignore result ???\n       end if;\n \n@@ -182,10 +182,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Constants.Thread_Blocking_IO\n+      if SOSC.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n-        or else Errno /= Constants.EINPROGRESS\n+        or else Errno /= SOSC.EINPROGRESS\n       then\n          return Res;\n       end if;\n@@ -223,7 +223,7 @@ package body GNAT.Sockets.Thin is\n       Res := Syscall_Connect (S, Name, Namelen);\n \n       if Res = Failure\n-        and then Errno = Constants.EISCONN\n+        and then Errno = SOSC.EISCONN\n       then\n          return Thin_Common.Success;\n       else\n@@ -241,8 +241,8 @@ package body GNAT.Sockets.Thin is\n       Arg  : Int_Access) return C.int\n    is\n    begin\n-      if not Constants.Thread_Blocking_IO\n-        and then Req = Constants.FIONBIO\n+      if not SOSC.Thread_Blocking_IO\n+        and then Req = SOSC.FIONBIO\n       then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n@@ -267,10 +267,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -294,10 +294,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -319,10 +319,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -346,10 +346,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -374,13 +374,13 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Res := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Res := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n          --  Is it OK to ignore result ???\n          Set_Non_Blocking_Socket (R, False);\n       end if;"}, {"sha": "57b76bc2fe0f375ceb139afaeb8d71f602ee894d", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -56,7 +56,7 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n+   --  When SOSC.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n@@ -150,22 +150,22 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties ot its server especially\n          --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Discard := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n       end if;\n \n       Disable_SIGPIPE (R);\n@@ -186,10 +186,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Constants.Thread_Blocking_IO\n+      if SOSC.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n-        or else Errno /= Constants.EINPROGRESS\n+        or else Errno /= SOSC.EINPROGRESS\n       then\n          return Res;\n       end if;\n@@ -226,7 +226,7 @@ package body GNAT.Sockets.Thin is\n       Res := Syscall_Connect (S, Name, Namelen);\n \n       if Res = Failure\n-        and then Errno = Constants.EISCONN\n+        and then Errno = SOSC.EISCONN\n       then\n          return Thin_Common.Success;\n       else\n@@ -244,8 +244,8 @@ package body GNAT.Sockets.Thin is\n       Arg : Int_Access) return C.int\n    is\n    begin\n-      if not Constants.Thread_Blocking_IO\n-        and then Req = Constants.FIONBIO\n+      if not SOSC.Thread_Blocking_IO\n+        and then Req = SOSC.FIONBIO\n       then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n@@ -270,10 +270,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -297,10 +297,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -322,10 +322,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -349,10 +349,10 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Constants.Thread_Blocking_IO\n+         exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n-           or else Errno /= Constants.EWOULDBLOCK;\n+           or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n@@ -377,13 +377,13 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Constants.Thread_Blocking_IO\n+      if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Discard := Syscall_Ioctl (R, Constants.FIONBIO, Val'Unchecked_Access);\n+         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Unchecked_Access);\n          Set_Non_Blocking_Socket (R, False);\n       end if;\n       Disable_SIGPIPE (R);"}, {"sha": "7a8b5a13e005e6dbe5fdc682f44744f753488387", "filename": "gcc/ada/g-sothco.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sothco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sothco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -54,7 +54,7 @@ package body GNAT.Sockets.Thin_Common is\n       Family            : Family_Type)\n    is\n       C_Family : C.int renames Families (Family);\n-      Has_Sockaddr_Len : constant Boolean := Constants.Has_Sockaddr_Len /= 0;\n+      Has_Sockaddr_Len : constant Boolean := SOSC.Has_Sockaddr_Len /= 0;\n    begin\n       if Has_Sockaddr_Len then\n          Length_And_Family.Length       := Lengths (Family);"}, {"sha": "434557d1f08404b7fb595843370f6c8aa16c846f", "filename": "gcc/ada/g-sothco.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.ads?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -51,15 +51,15 @@ package GNAT.Sockets.Thin_Common is\n    Failure : constant C.int := -1;\n \n    type time_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_sec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_sec - 1) - 1;\n-   for time_t'Size use 8 * Constants.SIZEOF_tv_sec;\n+     range -2 ** (8 * SOSC.SIZEOF_tv_sec - 1)\n+         .. 2 ** (8 * SOSC.SIZEOF_tv_sec - 1) - 1;\n+   for time_t'Size use 8 * SOSC.SIZEOF_tv_sec;\n    pragma Convention (C, time_t);\n \n    type suseconds_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_usec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_usec - 1) - 1;\n-   for suseconds_t'Size use 8 * Constants.SIZEOF_tv_usec;\n+     range -2 ** (8 * SOSC.SIZEOF_tv_usec - 1)\n+         .. 2 ** (8 * SOSC.SIZEOF_tv_usec - 1) - 1;\n+   for suseconds_t'Size use 8 * SOSC.SIZEOF_tv_usec;\n    pragma Convention (C, suseconds_t);\n \n    type Timeval is record\n@@ -78,12 +78,12 @@ package GNAT.Sockets.Thin_Common is\n    -------------------------------------------\n \n    Families : constant array (Family_Type) of C.int :=\n-                (Family_Inet  => Constants.AF_INET,\n-                 Family_Inet6 => Constants.AF_INET6);\n+                (Family_Inet  => SOSC.AF_INET,\n+                 Family_Inet6 => SOSC.AF_INET6);\n \n    Lengths  : constant array (Family_Type) of C.unsigned_char :=\n-                (Family_Inet  => Constants.SIZEOF_sockaddr_in,\n-                 Family_Inet6 => Constants.SIZEOF_sockaddr_in6);\n+                (Family_Inet  => SOSC.SIZEOF_sockaddr_in,\n+                 Family_Inet6 => SOSC.SIZEOF_sockaddr_in6);\n \n    ----------------------------\n    -- Generic socket address --\n@@ -95,7 +95,7 @@ package GNAT.Sockets.Thin_Common is\n    --  and protocol specific address types) start with the same 2-byte header,\n    --  which is either a length and a family (one byte each) or just a two-byte\n    --  family. The following unchecked union describes the two possible layouts\n-   --  and is meant to be constrained with Constants.Have_Sockaddr_Len.\n+   --  and is meant to be constrained with SOSC.Have_Sockaddr_Len.\n \n    type Sockaddr_Length_And_Family\n      (Has_Sockaddr_Len : Boolean := False)\n@@ -231,8 +231,8 @@ package GNAT.Sockets.Thin_Common is\n    type Hostent is record\n       H_Name      : C.Strings.chars_ptr;\n       H_Aliases   : Chars_Ptr_Pointers.Pointer;\n-      H_Addrtype  : Constants.H_Addrtype_T;\n-      H_Length    : Constants.H_Length_T;\n+      H_Addrtype  : SOSC.H_Addrtype_T;\n+      H_Length    : SOSC.H_Length_T;\n       H_Addr_List : In_Addr_Access_Pointers.Pointer;\n    end record;\n    pragma Convention (C, Hostent);"}, {"sha": "5222f448dcf43f0acc43ce17ac6f11b156d5953e", "filename": "gcc/ada/g-stheme.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-stheme.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-stheme.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-stheme.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                       Copyright (C) 2007, AdaCore                        --\n+--                     Copyright (C) 2007-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,16 +54,16 @@ package body Host_Error_Messages is\n         renames To_Chars_Ptr;\n    begin\n       case H_Errno is\n-         when Constants.HOST_NOT_FOUND =>\n+         when SOSC.HOST_NOT_FOUND =>\n             return TCP (Messages.HOST_NOT_FOUND'Access);\n \n-         when Constants.TRY_AGAIN      =>\n+         when SOSC.TRY_AGAIN      =>\n             return TCP (Messages.TRY_AGAIN'Access);\n \n-         when Constants.NO_RECOVERY    =>\n+         when SOSC.NO_RECOVERY    =>\n             return TCP (Messages.NO_RECOVERY'Access);\n \n-         when Constants.NO_DATA        =>\n+         when SOSC.NO_DATA        =>\n             return TCP (Messages.NO_DATA'Access);\n \n          when others                   =>"}, {"sha": "bb6095c3b460915bc8885dc553e40223fc28dbcc", "filename": "gcc/ada/g-stsifd-sockets.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-stsifd-sockets.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-stsifd-sockets.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-stsifd-sockets.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -82,7 +82,7 @@ package body Signalling_Fds is\n \n          --  Create a listening socket\n \n-         L_Sock := C_Socket (Constants.AF_INET, Constants.SOCK_STREAM, 0);\n+         L_Sock := C_Socket (SOSC.AF_INET, Constants.SOCK_STREAM, 0);\n \n          if L_Sock = Failure then\n             goto Fail;\n@@ -122,7 +122,7 @@ package body Signalling_Fds is\n \n          --  Create read end (client) socket\n \n-         R_Sock := C_Socket (Constants.AF_INET, Constants.SOCK_STREAM, 0);\n+         R_Sock := C_Socket (SOSC.AF_INET, Constants.SOCK_STREAM, 0);\n \n          if R_Sock = Failure then\n             goto Fail;\n@@ -134,7 +134,7 @@ package body Signalling_Fds is\n \n          exit when Res /= Failure;\n \n-         if Socket_Errno /= Constants.EADDRINUSE then\n+         if Socket_Errno /= SOSC.EADDRINUSE then\n             goto Fail;\n          end if;\n \n@@ -152,7 +152,7 @@ package body Signalling_Fds is\n \n          pragma Assert (Res = Failure\n                           and then\n-                        Socket_Errno = Constants.EADDRINUSE);\n+                        Socket_Errno = SOSC.EADDRINUSE);\n          pragma Warnings (Off); -- useless assignment to \"Res\"\n          Res := C_Close (W_Sock);\n          pragma Warnings (On);\n@@ -217,7 +217,7 @@ package body Signalling_Fds is\n    function Read (Rsig : C.int) return C.int is\n       Buf : aliased Character;\n    begin\n-      return C_Recv (Rsig, Buf'Address, 1, Constants.MSG_Forced_Flags);\n+      return C_Recv (Rsig, Buf'Address, 1, SOSC.MSG_Forced_Flags);\n    end Read;\n \n    -----------\n@@ -227,7 +227,7 @@ package body Signalling_Fds is\n    function Write (Wsig : C.int) return C.int is\n       Buf : aliased Character := ASCII.NUL;\n    begin\n-      return C_Send (Wsig, Buf'Address, 1, Constants.MSG_Forced_Flags);\n+      return C_Send (Wsig, Buf'Address, 1, SOSC.MSG_Forced_Flags);\n    end Write;\n \n end Signalling_Fds;"}, {"sha": "be0578d048c62759567cf3ed1da18b36fa430473", "filename": "gcc/ada/g-sttsne-vxworks.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sttsne-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b7afe926099bac064a39a88bb3685ce50c2965/gcc%2Fada%2Fg-sttsne-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-vxworks.adb?ref=62b7afe926099bac064a39a88bb3685ce50c2965", "patch": "@@ -81,7 +81,7 @@ package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n       --  VxWorks does not provide h_errno\n \n    begin\n-      pragma Assert (Addr_Type = Constants.AF_INET);\n+      pragma Assert (Addr_Type = SOSC.AF_INET);\n       pragma Assert (Addr_Len = In_Addr'Size / 8);\n \n       --  Check that provided buffer is sufficiently large to hold the\n@@ -93,7 +93,7 @@ package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n \n       if VxWorks_hostGetByAddr (To_Pointer (Addr).all,\n                                 Netdb_Data.Name'Address)\n-           /= Constants.OK\n+           /= SOSC.OK\n       then\n          return -1;\n       end if;\n@@ -106,7 +106,7 @@ package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n       Ret.H_Name      := C.Strings.To_Chars_Ptr\n                            (Netdb_Data.Name'Unrestricted_Access);\n       Ret.H_Aliases   := Alias_Access;\n-      Ret.H_Addrtype  := Constants.AF_INET;\n+      Ret.H_Addrtype  := SOSC.AF_INET;\n       Ret.H_Length    := 4;\n       Ret.H_Addr_List :=\n         Netdb_Data.Addr_List (Netdb_Data.Addr_List'First)'Unchecked_Access;\n@@ -135,7 +135,7 @@ package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n \n    begin\n       Addr := VxWorks_hostGetByName (Name);\n-      if Addr = Constants.ERROR then\n+      if Addr = SOSC.ERROR then\n          return -1;\n       end if;\n \n@@ -161,7 +161,7 @@ package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n          Ret.H_Name      := C.Strings.To_Chars_Ptr\n                               (Netdb_Data.Name'Unrestricted_Access);\n          Ret.H_Aliases   := Alias_Access;\n-         Ret.H_Addrtype  := Constants.AF_INET;\n+         Ret.H_Addrtype  := SOSC.AF_INET;\n          Ret.H_Length    := 4;\n          Ret.H_Addr_List :=\n            Netdb_Data.Addr_List (Netdb_Data.Addr_List'First)'Unchecked_Access;"}]}