{"sha": "1a9746032345e1bffeb9ff2c92473bf90f843379", "node_id": "C_kwDOANBUbNoAKDFhOTc0NjAzMjM0NWUxYmZmZWI5ZmYyYzkyNDczYmY5MGY4NDMzNzk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-25T16:34:21Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-27T09:18:33Z"}, "message": "Add HIR lowering for where clause items", "tree": {"sha": "dd88e4e97bcdc94943fc75309c51e6ecb9926d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd88e4e97bcdc94943fc75309c51e6ecb9926d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a9746032345e1bffeb9ff2c92473bf90f843379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9746032345e1bffeb9ff2c92473bf90f843379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9746032345e1bffeb9ff2c92473bf90f843379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9746032345e1bffeb9ff2c92473bf90f843379/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01e62c136b1ebf27894c68669e265e67b941300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01e62c136b1ebf27894c68669e265e67b941300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01e62c136b1ebf27894c68669e265e67b941300"}], "stats": {"total": 147, "additions": 140, "deletions": 7}, "files": [{"sha": "fb7cc17a8b506515edd0dd6969eeb92f1729be34", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=1a9746032345e1bffeb9ff2c92473bf90f843379", "patch": "@@ -188,7 +188,6 @@ class WhereClauseItem\n class LifetimeWhereClauseItem : public WhereClauseItem\n {\n   Lifetime lifetime;\n-\n   std::vector<Lifetime> lifetime_bounds;\n   Location locus;\n   NodeId node_id;\n@@ -212,6 +211,8 @@ class LifetimeWhereClauseItem : public WhereClauseItem\n \n   std::vector<Lifetime> &get_lifetime_bounds () { return lifetime_bounds; }\n \n+  Location get_locus () const { return locus; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   LifetimeWhereClauseItem *clone_where_clause_item_impl () const override"}, {"sha": "db0425ff7df8c5188420209ca56acadc59572f7a", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=1a9746032345e1bffeb9ff2c92473bf90f843379", "patch": "@@ -95,6 +95,14 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::TypeAlias &alias) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : alias.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -134,6 +142,14 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : struct_decl.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -186,6 +202,14 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : struct_decl.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -242,6 +266,14 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : enum_decl.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -282,6 +314,13 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : union_decl.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -380,8 +419,15 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::Function &function) override\n   {\n-    // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : function.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n       HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n@@ -466,6 +512,13 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::InherentImpl &impl_block) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n+    for (auto &item : impl_block.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n@@ -545,8 +598,15 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Trait &trait) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-\n+    for (auto &item : trait.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n+\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n@@ -632,7 +692,13 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::TraitImpl &impl_block) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-\n+    for (auto &item : impl_block.get_where_clause ().get_items ())\n+      {\n+\tHIR::WhereClauseItem *i\n+\t  = ASTLowerWhereClauseItem::translate (*item.get ());\n+\twhere_clause_items.push_back (\n+\t  std::unique_ptr<HIR::WhereClauseItem> (i));\n+      }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n "}, {"sha": "8205d078463d67375cee9e91f9c037df1505899d", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9746032345e1bffeb9ff2c92473bf90f843379/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=1a9746032345e1bffeb9ff2c92473bf90f843379", "patch": "@@ -60,7 +60,7 @@ class ASTLowerTypePath : public ASTLoweringBase\n \n   void visit (AST::TypePath &path) override\n   {\n-    std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n+    std::vector<std::unique_ptr<HIR::TypePathSegment>> translated_segments;\n \n     path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n       translated_segment = nullptr;\n@@ -188,7 +188,7 @@ class ASTLoweringType : public ASTLoweringBase\n \n   void visit (AST::TupleType &tuple) override\n   {\n-    std::vector<std::unique_ptr<HIR::Type> > elems;\n+    std::vector<std::unique_ptr<HIR::Type>> elems;\n     for (auto &e : tuple.get_elems ())\n       {\n \tHIR::Type *t = ASTLoweringType::translate (e.get ());\n@@ -340,7 +340,7 @@ class ASTLowerGenericParam : public ASTLoweringBase\n   void visit (AST::TypeParam &param) override\n   {\n     AST::Attribute outer_attr = AST::Attribute::create_empty ();\n-    std::vector<std::unique_ptr<HIR::TypeParamBound> > type_param_bounds;\n+    std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n     if (param.has_type_param_bounds ())\n       {\n \tfor (auto &bound : param.get_type_param_bounds ())\n@@ -422,6 +422,72 @@ class ASTLoweringTypeBounds : public ASTLoweringBase\n   HIR::TypeParamBound *translated;\n };\n \n+class ASTLowerWhereClauseItem : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::WhereClauseItem *translate (AST::WhereClauseItem &item)\n+  {\n+    ASTLowerWhereClauseItem compiler;\n+    item.accept_vis (compiler);\n+    rust_assert (compiler.translated != nullptr);\n+    return compiler.translated;\n+  }\n+\n+  void visit (AST::LifetimeWhereClauseItem &item) override\n+  {\n+    HIR::Lifetime l = lower_lifetime (item.get_lifetime ());\n+    std::vector<HIR::Lifetime> lifetime_bounds;\n+    for (auto &lifetime_bound : item.get_lifetime_bounds ())\n+      {\n+\tHIR::Lifetime ll = lower_lifetime (lifetime_bound);\n+\tlifetime_bounds.push_back (std::move (ll));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::LifetimeWhereClauseItem (mapping, std::move (l),\n+\t\t\t\t\t\t   std::move (lifetime_bounds),\n+\t\t\t\t\t\t   item.get_locus ());\n+  }\n+\n+  void visit (AST::TypeBoundWhereClauseItem &item) override\n+  {\n+    // FIXME\n+    std::vector<HIR::LifetimeParam> for_lifetimes;\n+\n+    std::unique_ptr<HIR::Type> bound_type = std::unique_ptr<HIR::Type> (\n+      ASTLoweringType::translate (item.get_type ().get ()));\n+\n+    std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n+    for (auto &bound : item.get_type_param_bounds ())\n+      {\n+\tHIR::TypeParamBound *b\n+\t  = ASTLoweringTypeBounds::translate (bound.get ());\n+\ttype_param_bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (b));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TypeBoundWhereClauseItem (mapping, std::move (for_lifetimes),\n+\t\t\t\t\t   std::move (bound_type),\n+\t\t\t\t\t   std::move (type_param_bounds));\n+  }\n+\n+private:\n+  ASTLowerWhereClauseItem () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::WhereClauseItem *translated;\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}]}