{"sha": "c61e8502c1ea36112a24b80015e0b8a484c61946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxZTg1MDJjMWVhMzYxMTJhMjRiODAwMTVlMGI4YTQ4NGM2MTk0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-11-11T02:11:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-11-11T02:11:15Z"}, "message": "cp-demangle.c (d_unqualified_name): Handle abi tags here.\n\n\t* cp-demangle.c (d_unqualified_name): Handle abi tags here.\n\t(d_name): Not here.\n\nFrom-SVN: r193401", "tree": {"sha": "43336c2888d5d1f6d7ac6a4fdcd190c36ecd1f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43336c2888d5d1f6d7ac6a4fdcd190c36ecd1f88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61e8502c1ea36112a24b80015e0b8a484c61946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e8502c1ea36112a24b80015e0b8a484c61946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61e8502c1ea36112a24b80015e0b8a484c61946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e8502c1ea36112a24b80015e0b8a484c61946/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c417597c1ff9a0607a56d46199dabbf470b0edf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c417597c1ff9a0607a56d46199dabbf470b0edf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c417597c1ff9a0607a56d46199dabbf470b0edf6"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "7ecd6da140e0f91c639aacab545fe221a5128f53", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c61e8502c1ea36112a24b80015e0b8a484c61946", "patch": "@@ -1,3 +1,8 @@\n+2012-11-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (d_unqualified_name): Handle abi tags here.\n+\t(d_name): Not here.\n+\n 2012-11-09  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_TAGGED_NAME."}, {"sha": "913d4bf09d4bf6f70bde8005409c3d4a801a5068", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=c61e8502c1ea36112a24b80015e0b8a484c61946", "patch": "@@ -1246,17 +1246,14 @@ d_name (struct d_info *di)\n   switch (peek)\n     {\n     case 'N':\n-      dc = d_nested_name (di);\n-      break;\n+      return d_nested_name (di);\n \n     case 'Z':\n-      dc = d_local_name (di);\n-      break;\n+      return d_local_name (di);\n \n     case 'L':\n     case 'U':\n-      dc = d_unqualified_name (di);\n-      break;\n+      return d_unqualified_name (di);\n \n     case 'S':\n       {\n@@ -1298,7 +1295,7 @@ d_name (struct d_info *di)\n \t\t\t      d_template_args (di));\n \t  }\n \n-\tbreak;\n+\treturn dc;\n       }\n \n     default:\n@@ -1313,12 +1310,8 @@ d_name (struct d_info *di)\n \t  dc = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, dc,\n \t\t\t    d_template_args (di));\n \t}\n-      break;\n+      return dc;\n     }\n-\n-  if (d_peek_char (di) == 'B')\n-    dc = d_abi_tags (di, dc);\n-  return dc;\n }\n \n /* <nested-name> ::= N [<CV-qualifiers>] <prefix> <unqualified-name> E\n@@ -1446,15 +1439,14 @@ d_prefix (struct d_info *di)\n static struct demangle_component *\n d_unqualified_name (struct d_info *di)\n {\n+  struct demangle_component *ret;\n   char peek;\n \n   peek = d_peek_char (di);\n   if (IS_DIGIT (peek))\n-    return d_source_name (di);\n+    ret = d_source_name (di);\n   else if (IS_LOWER (peek))\n     {\n-      struct demangle_component *ret;\n-\n       ret = d_operator_name (di);\n       if (ret != NULL && ret->type == DEMANGLE_COMPONENT_OPERATOR)\n \t{\n@@ -1463,37 +1455,39 @@ d_unqualified_name (struct d_info *di)\n \t    ret = d_make_comp (di, DEMANGLE_COMPONENT_UNARY, ret,\n \t\t\t       d_source_name (di));\n \t}\n-      return ret;\n     }\n   else if (peek == 'C' || peek == 'D')\n-    return d_ctor_dtor_name (di);\n+    ret = d_ctor_dtor_name (di);\n   else if (peek == 'L')\n     {\n-      struct demangle_component * ret;\n-\n       d_advance (di, 1);\n \n       ret = d_source_name (di);\n       if (ret == NULL)\n \treturn NULL;\n       if (! d_discriminator (di))\n \treturn NULL;\n-      return ret;\n     }\n   else if (peek == 'U')\n     {\n       switch (d_peek_next_char (di))\n \t{\n \tcase 'l':\n-\t  return d_lambda (di);\n+\t  ret = d_lambda (di);\n+\t  break;\n \tcase 't':\n-\t  return d_unnamed_type (di);\n+\t  ret = d_unnamed_type (di);\n+\t  break;\n \tdefault:\n \t  return NULL;\n \t}\n     }\n   else\n     return NULL;\n+\n+  if (d_peek_char (di) == 'B')\n+    ret = d_abi_tags (di, ret);\n+  return ret;\n }\n \n /* <source-name> ::= <(positive length) number> <identifier>  */"}, {"sha": "5b41b03f9faa1b81b7221ca12a50d143eab6f7de", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61e8502c1ea36112a24b80015e0b8a484c61946/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=c61e8502c1ea36112a24b80015e0b8a484c61946", "patch": "@@ -4084,6 +4084,9 @@ auto& f<int>(int const&, int)\n --format=gnu-v3\n _Z1gILi1EEvR1AIXT_EER1BIXscbT_EE\n void g<1>(A<1>&, B<static_cast<bool>(1)>&)\n+--format=gnu-v3\n+_ZNKSt7complexIiE4realB5cxx11Ev\n+std::complex<int>::real[abi:cxx11]() const\n #\n # Ada (GNAT) tests.\n #"}]}