{"sha": "b376b1ef38971b84975ad1540bf5d2ae0b924e76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3NmIxZWYzODk3MWI4NDk3NWFkMTU0MGJmNWQyYWUwYjkyNGU3Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-17T13:11:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-17T21:00:58Z"}, "message": "libstdc++: Simplify constexpr checks in std::char_traits [PR 91488]\n\nThis removes the helper functions added by r8-1294 to detect whether the\nchar_traits member functions can be evaluated at compile time. Instead,\nwe can just use __builtin_constant_evaluated directly, which is well\nsupported by non-GCC compilers by now.\n\nAs a result, there is a chance that those members will no longer be\nusable in constant expressions when using old versions of non-GCC\ncompilers. Make the relevant feature test macros depend on the\navailability of __builtin_constant_evaluated, so they are defined only\nwhen the feature is actualyl available.\n\nThe new testcase from the PR is added to the libitm testsuite, because\nthat's where we can be sure it's OK to use the -fgnu-tm option.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\n\tPR libstdc++/91488\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (__cpp_lib_constexpr_string): Only\n\tdefine when is_constant_evaluated is available.\n\t* include/bits/char_traits.h (__cpp_lib_constexpr_char_traits):\n\tLikewise.\n\t(__constant_string_p, __constant_array_p): Remove.\n\t(char_traits): Use is_constant_evaluated directly.\n\t* include/std/version (__cpp_lib_constexpr_char_traits)\n\t(__cpp_lib_constexpr_string): Only define when\n\tis_constant_evaluated is available.\n\nlibitm/ChangeLog:\n\n\t* testsuite/libitm.c++/libstdc++-pr91488.C: New test.", "tree": {"sha": "e81a073a91795524bc4a7241d9ac7987d82861e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e81a073a91795524bc4a7241d9ac7987d82861e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b376b1ef38971b84975ad1540bf5d2ae0b924e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376b1ef38971b84975ad1540bf5d2ae0b924e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b376b1ef38971b84975ad1540bf5d2ae0b924e76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376b1ef38971b84975ad1540bf5d2ae0b924e76/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331e20a69be0d9e7d448580945945d4c7a1e3c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331e20a69be0d9e7d448580945945d4c7a1e3c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331e20a69be0d9e7d448580945945d4c7a1e3c0a"}], "stats": {"total": 138, "additions": 46, "deletions": 92}, "files": [{"sha": "e9e82bd1ce21e38e5dc209b85974638071b95b2c", "filename": "libitm/testsuite/libitm.c++/libstdc++-pr91488.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-pr91488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-pr91488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-pr91488.C?ref=b376b1ef38971b84975ad1540bf5d2ae0b924e76", "patch": "@@ -0,0 +1,9 @@\n+// PR libstdc++/91488 \"inlining failed in call to always_inline\"\n+// { dg-do run }\n+// { dg-additional-options \"-O1\" }\n+\n+#include <string>\n+\n+int main() {\n+    return std::char_traits<char>::length(\"\");\n+}"}, {"sha": "9911d4deb7240c66cee74cf428550ee5075f2e9a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b376b1ef38971b84975ad1540bf5d2ae0b924e76", "patch": "@@ -52,12 +52,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if __cplusplus == 201703L\n+#ifdef __cpp_lib_is_constant_evaluated\n+// Support P1032R1 in C++20 (but not P0980R1 yet).\n+# define __cpp_lib_constexpr_string 201811L\n+#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n // Support P0426R1 changes to char_traits in C++17.\n # define __cpp_lib_constexpr_string 201611L\n #elif __cplusplus > 201703L\n-// Also support P1032R1 in C++20 (but not P0980R1 yet).\n-# define __cpp_lib_constexpr_string 201811L\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI"}, {"sha": "3da6e28a513a192765f78bdf046c7e750d65818b", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 23, "deletions": 85, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=b376b1ef38971b84975ad1540bf5d2ae0b924e76", "patch": "@@ -235,62 +235,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if __cplusplus >= 201703L\n-\n-#if __cplusplus == 201703L\n-// Unofficial macro indicating P0426R1 support\n-# define __cpp_lib_constexpr_char_traits 201611L\n-#else\n-// Also support P1032R1 in C++20\n+#ifdef __cpp_lib_is_constant_evaluated\n+// Unofficial macro indicating P1032R1 support in C++20\n # define __cpp_lib_constexpr_char_traits 201811L\n-#endif\n-\n-  /**\n-   *  @brief Determine whether the characters of a NULL-terminated\n-   *  string are known at compile time.\n-   *  @param  __s  The string.\n-   *\n-   *  Assumes that _CharT is a built-in character type.\n-   */\n-  template<typename _CharT>\n-    static _GLIBCXX_ALWAYS_INLINE constexpr bool\n-    __constant_string_p(const _CharT* __s)\n-    {\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-      (void) __s;\n-      // In constexpr contexts all strings should be constant.\n-      return __builtin_is_constant_evaluated();\n-#else\n-      while (__builtin_constant_p(*__s) && *__s)\n-\t__s++;\n-      return __builtin_constant_p(*__s);\n-#endif\n-    }\n-\n-  /**\n-   *  @brief Determine whether the characters of a character array are\n-   *  known at compile time.\n-   *  @param  __a  The character array.\n-   *  @param  __n  Number of characters.\n-   *\n-   *  Assumes that _CharT is a built-in character type.\n-   */\n-  template<typename _CharT>\n-    static _GLIBCXX_ALWAYS_INLINE constexpr bool\n-    __constant_char_array_p(const _CharT* __a, size_t __n)\n-    {\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-      (void) __a;\n-      (void) __n;\n-      // In constexpr contexts all character arrays should be constant.\n-      return __builtin_is_constant_evaluated();\n-#else\n-      size_t __i = 0;\n-      while (__i < __n && __builtin_constant_p(__a[__i]))\n-\t__i++;\n-      return __i == __n;\n-#endif\n-    }\n+#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+// Unofficial macro indicating P0426R1 support in C++17\n+# define __cpp_lib_constexpr_char_traits 201611L\n #endif\n \n   // 21.1\n@@ -345,10 +295,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L\n-\tif (__builtin_constant_p(__n)\n-\t    && __constant_char_array_p(__s1, __n)\n-\t    && __constant_char_array_p(__s2, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  {\n \t    for (size_t __i = 0; __i < __n; ++__i)\n \t      if (lt(__s1[__i], __s2[__i]))\n@@ -364,8 +312,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus >= 201703L\n-\tif (__constant_string_p(__s))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \treturn __builtin_strlen(__s);\n@@ -376,10 +324,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L\n-\tif (__builtin_constant_p(__n)\n-\t    && __builtin_constant_p(__a)\n-\t    && __constant_char_array_p(__s, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n@@ -476,10 +422,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L\n-\tif (__builtin_constant_p(__n)\n-\t    && __constant_char_array_p(__s1, __n)\n-\t    && __constant_char_array_p(__s2, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n \treturn wmemcmp(__s1, __s2, __n);\n@@ -488,8 +432,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus >= 201703L\n-\tif (__constant_string_p(__s))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \treturn wcslen(__s);\n@@ -500,10 +444,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L\n-\tif (__builtin_constant_p(__n)\n-\t    && __builtin_constant_p(__a)\n-\t    && __constant_char_array_p(__s, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn wmemchr(__s, __a, __n);\n@@ -597,10 +539,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus > 201402\n-\tif (__builtin_constant_p(__n)\n-\t    && __constant_char_array_p(__s1, __n)\n-\t    && __constant_char_array_p(__s2, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n \treturn __builtin_memcmp(__s1, __s2, __n);\n@@ -609,8 +549,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus > 201402\n-\tif (__constant_string_p(__s))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \tsize_t __i = 0;\n@@ -624,10 +564,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus > 201402\n-\tif (__builtin_constant_p(__n)\n-\t    && __builtin_constant_p(__a)\n-\t    && __constant_char_array_p(__s, __n))\n+#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\tif (__builtin_is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));"}, {"sha": "e6fbb38a44ab3928a6efae67943a01abc9bf5442", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376b1ef38971b84975ad1540bf5d2ae0b924e76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b376b1ef38971b84975ad1540bf5d2ae0b924e76", "patch": "@@ -130,8 +130,10 @@\n #define __cpp_lib_chrono 201611\n #define __cpp_lib_clamp 201603\n #if __cplusplus == 201703L // N.B. updated value in C++20\n-# define __cpp_lib_constexpr_char_traits 201611L\n-# define __cpp_lib_constexpr_string 201611L\n+# if _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+#  define __cpp_lib_constexpr_char_traits 201611L\n+#  define __cpp_lib_constexpr_string 201611L\n+# endif\n #endif\n #define __cpp_lib_enable_shared_from_this 201603\n #define __cpp_lib_execution 201902L // FIXME: should be 201603L\n@@ -213,14 +215,18 @@\n // FIXME: #define __cpp_lib_execution 201902L\n #define __cpp_lib_integer_comparison_functions 202002L\n #define __cpp_lib_constexpr_algorithms 201806L\n-#define __cpp_lib_constexpr_char_traits 201811L\n+#ifdef __cpp_lib_is_constant_evaluated\n+# define __cpp_lib_constexpr_char_traits 201811L\n+#endif\n #define __cpp_lib_constexpr_complex 201711L\n #define __cpp_lib_constexpr_dynamic_alloc 201907L\n #define __cpp_lib_constexpr_functional 201907L\n #define __cpp_lib_constexpr_iterator 201811L\n #define __cpp_lib_constexpr_memory 201811L\n #define __cpp_lib_constexpr_numeric 201911L\n-#define __cpp_lib_constexpr_string 201811L\n+#ifdef __cpp_lib_is_constant_evaluated\n+# define __cpp_lib_constexpr_string 201811L\n+#endif\n #define __cpp_lib_constexpr_string_view 201811L\n #define __cpp_lib_constexpr_tuple 201811L\n #define __cpp_lib_constexpr_utility 201811L"}]}