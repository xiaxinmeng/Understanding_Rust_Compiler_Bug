{"sha": "a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwNTIwZWNjNWVmNTY1NDA1ZGM4YTNkY2Q5ZjUwNzBjNWRlYTVkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T12:41:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T12:41:52Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r160732", "tree": {"sha": "05532330c7f48b0821649e5fc5784c0e23eb8066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05532330c7f48b0821649e5fc5784c0e23eb8066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3/comments", "author": null, "committer": null, "parents": [{"sha": "4a214958d18269588e382f1a39c6d5612f37365c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a214958d18269588e382f1a39c6d5612f37365c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a214958d18269588e382f1a39c6d5612f37365c"}], "stats": {"total": 261, "additions": 144, "deletions": 117}, "files": [{"sha": "294eb1d844bfb39a16dfc302d86867ddac7ac279", "filename": "gcc/ada/s-auxdec-vms-alpha.adb", "status": "modified", "additions": 144, "deletions": 117, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3/gcc%2Fada%2Fs-auxdec-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3/gcc%2Fada%2Fs-auxdec-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms-alpha.adb?ref=a40520ecc5ef565405dc8a3dcd9f5070c5dea5d3", "patch": "@@ -135,7 +135,7 @@ package body System.Aux_DEC is\n    ---------------------------------\n \n    --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n+   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n \n    type BU is mod 2 ** Unsigned_Byte'Size;\n    --  Unsigned type of same length as Unsigned_Byte\n@@ -168,7 +168,7 @@ package body System.Aux_DEC is\n    ---------------------------------\n \n    --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n+   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n \n    type WU is mod 2 ** Unsigned_Word'Size;\n    --  Unsigned type of same length as Unsigned_Word\n@@ -201,7 +201,7 @@ package body System.Aux_DEC is\n    -------------------------------------\n \n    --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n+   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n \n    type LWU is mod 2 ** Unsigned_Longword'Size;\n    --  Unsigned type of same length as Unsigned_Longword\n@@ -234,7 +234,7 @@ package body System.Aux_DEC is\n    -------------------------------\n \n    --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n+   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n \n    type U32 is mod 2 ** Unsigned_32'Size;\n    --  Unsigned type of same length as Unsigned_32\n@@ -267,7 +267,7 @@ package body System.Aux_DEC is\n    -------------------------------------\n \n    --  It would be nice to replace these with intrinsics, but that does\n-   --  not work yet (the back end would be ok, but GNAT itself objects)\n+   --  not work yet (the back end would be ok, but GNAT itself objects) ???\n \n    type QWU is mod 2 ** 64;  -- 64 = Unsigned_Quadword'Size\n    --  Unsigned type of same length as Unsigned_Quadword\n@@ -306,7 +306,12 @@ package body System.Aux_DEC is\n       use ASCII;\n       Clr_Bit : Boolean := Bit;\n       Old_Bit : Boolean;\n+\n    begin\n+      --  All these ASM sequences should be commented. I suggest definining\n+      --  a constant called E which is LF & HT and then you have more space\n+      --  for line by line comments ???\n+\n       System.Machine_Code.Asm\n         (\n          \"lda $16, %2\"      & LF & HT &\n@@ -328,10 +333,10 @@ package body System.Aux_DEC is\n          \"mb\"               & LF & HT &\n          \"xor %1, 1, %1\"    & LF & HT &\n          \"trapb\",\n-         Outputs => (Boolean'Asm_Output (\"=m\", Clr_Bit),\n-                     Boolean'Asm_Output (\"=r\", Old_Bit)),\n-         Inputs => Boolean'Asm_Input (\"m\", Clr_Bit),\n-         Clobber => \"$1, $16, $17, $18\",\n+         Outputs  => (Boolean'Asm_Output (\"=m\", Clr_Bit),\n+                      Boolean'Asm_Output (\"=r\", Old_Bit)),\n+         Inputs   => Boolean'Asm_Input (\"m\", Clr_Bit),\n+         Clobber  => \"$1, $16, $17, $18\",\n          Volatile => True);\n \n          Bit := Clr_Bit;\n@@ -347,6 +352,7 @@ package body System.Aux_DEC is\n       use ASCII;\n       Clr_Bit : Boolean := Bit;\n       Succ, Old_Bit : Boolean;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -374,12 +380,12 @@ package body System.Aux_DEC is\n          \"mb\"               & LF & HT &\n          \"xor %1, 1, %1\"    & LF & HT &\n          \"trapb\",\n-         Outputs => (Boolean'Asm_Output (\"=m\", Clr_Bit),\n-                     Boolean'Asm_Output (\"=r\", Old_Bit),\n-                     Boolean'Asm_Output (\"=r\", Succ)),\n-         Inputs => (Boolean'Asm_Input (\"m\", Clr_Bit),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$16, $17, $18, $19\",\n+         Outputs  => (Boolean'Asm_Output (\"=m\", Clr_Bit),\n+                      Boolean'Asm_Output (\"=r\", Old_Bit),\n+                      Boolean'Asm_Output (\"=r\", Succ)),\n+         Inputs   => (Boolean'Asm_Input (\"m\", Clr_Bit),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$16, $17, $18, $19\",\n          Volatile => True);\n \n          Bit := Clr_Bit;\n@@ -398,7 +404,10 @@ package body System.Aux_DEC is\n       use ASCII;\n       Set_Bit : Boolean := Bit;\n       Old_Bit : Boolean;\n+\n    begin\n+      --  Don't we need comments on these long asm sequences???\n+\n       System.Machine_Code.Asm\n         (\n          \"lda $16, %2\"      & LF & HT &\n@@ -419,10 +428,10 @@ package body System.Aux_DEC is\n          \"beq $1, 1b\"       & LF & HT &\n          \"mb\"               & LF & HT &\n          \"trapb\",\n-         Outputs => (Boolean'Asm_Output (\"=m\", Set_Bit),\n-                     Boolean'Asm_Output (\"=r\", Old_Bit)),\n-         Inputs => Boolean'Asm_Input (\"m\", Set_Bit),\n-         Clobber => \"$1, $16, $17, $18\",\n+         Outputs  => (Boolean'Asm_Output (\"=m\", Set_Bit),\n+                      Boolean'Asm_Output (\"=r\", Old_Bit)),\n+         Inputs   => Boolean'Asm_Input (\"m\", Set_Bit),\n+         Clobber  => \"$1, $16, $17, $18\",\n          Volatile => True);\n \n          Bit := Set_Bit;\n@@ -438,6 +447,7 @@ package body System.Aux_DEC is\n       use ASCII;\n       Set_Bit : Boolean := Bit;\n       Succ, Old_Bit : Boolean;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -464,12 +474,12 @@ package body System.Aux_DEC is\n          \"3:\"               & LF & HT &\n          \"mb\"               & LF & HT &\n          \"trapb\",\n-         Outputs => (Boolean'Asm_Output (\"=m\", Set_Bit),\n-                     Boolean'Asm_Output (\"=r\", Old_Bit),\n-                     Boolean'Asm_Output (\"=r\", Succ)),\n-         Inputs => (Boolean'Asm_Input (\"m\", Set_Bit),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$16, $17, $18, $19\",\n+         Outputs  => (Boolean'Asm_Output (\"=m\", Set_Bit),\n+                      Boolean'Asm_Output (\"=r\", Old_Bit),\n+                      Boolean'Asm_Output (\"=r\", Succ)),\n+         Inputs   => (Boolean'Asm_Input (\"m\", Set_Bit),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$16, $17, $18, $19\",\n          Volatile => True);\n \n          Bit := Set_Bit;\n@@ -488,6 +498,7 @@ package body System.Aux_DEC is\n    is\n       use ASCII;\n       Overflowed : Boolean := False;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -527,12 +538,12 @@ package body System.Aux_DEC is\n          \"lda $16, -1\"         & LF & HT &\n          \"cmovne $0, $16, %1\"  & LF & HT &\n          \"2:\",\n-         Outputs => (Aligned_Word'Asm_Output (\"=m\", Augend),\n-                     Integer'Asm_Output (\"=r\", Sign),\n-                     Boolean'Asm_Output (\"=r\", Overflowed)),\n-         Inputs => (Short_Integer'Asm_Input (\"r\", Addend),\n-                    Aligned_Word'Asm_Input (\"m\", Augend)),\n-         Clobber => \"$0, $1, $16, $17, $18, $19, $20, $21\",\n+         Outputs  => (Aligned_Word'Asm_Output (\"=m\", Augend),\n+                      Integer'Asm_Output (\"=r\", Sign),\n+                      Boolean'Asm_Output (\"=r\", Overflowed)),\n+         Inputs   => (Short_Integer'Asm_Input (\"r\", Addend),\n+                      Aligned_Word'Asm_Input (\"m\", Augend)),\n+         Clobber  => \"$0, $1, $16, $17, $18, $19, $20, $21\",\n          Volatile => True);\n \n          if Overflowed then\n@@ -549,6 +560,7 @@ package body System.Aux_DEC is\n       Amount : Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -559,10 +571,10 @@ package body System.Aux_DEC is\n          \"stl_c $0, %1\"    & LF & HT &\n          \"beq $0, 1b\"      & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", Amount)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", Amount)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end Add_Atomic;\n \n@@ -574,6 +586,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -594,13 +607,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Integer'Asm_Output (\"=m\", To),\n-                     Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", Amount),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Integer'Asm_Output (\"=m\", To),\n+                      Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", Amount),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end Add_Atomic;\n \n@@ -609,6 +622,7 @@ package body System.Aux_DEC is\n       Amount : Long_Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -619,10 +633,10 @@ package body System.Aux_DEC is\n          \"stq_c $0, %1\"    & LF & HT &\n          \"beq $0, 1b\"      & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", Amount)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", Amount)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end Add_Atomic;\n \n@@ -634,6 +648,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -654,13 +669,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-                     Long_Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", Amount),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+                      Long_Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", Amount),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end Add_Atomic;\n \n@@ -673,6 +688,7 @@ package body System.Aux_DEC is\n       From : Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -683,10 +699,10 @@ package body System.Aux_DEC is\n          \"stl_c $0, %1\"   & LF & HT &\n          \"beq $0, 1b\"     & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", From)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", From)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end And_Atomic;\n \n@@ -698,6 +714,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -718,13 +735,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Integer'Asm_Output (\"=m\", To),\n-                     Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", From),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Integer'Asm_Output (\"=m\", To),\n+                      Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", From),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end And_Atomic;\n \n@@ -733,6 +750,7 @@ package body System.Aux_DEC is\n       From : Long_Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -743,10 +761,10 @@ package body System.Aux_DEC is\n          \"stq_c $0, %1\"   & LF & HT &\n          \"beq $0, 1b\"     & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", From)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", From)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end And_Atomic;\n \n@@ -758,6 +776,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -778,13 +797,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-                     Long_Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", From),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+                      Long_Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", From),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end And_Atomic;\n \n@@ -797,6 +816,7 @@ package body System.Aux_DEC is\n       From : Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -807,10 +827,10 @@ package body System.Aux_DEC is\n          \"stl_c $0, %1\"   & LF & HT &\n          \"beq $0, 1b\"     & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", From)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", From)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end Or_Atomic;\n \n@@ -822,6 +842,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -842,13 +863,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Integer'Asm_Output (\"=m\", To),\n-                     Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Integer'Asm_Input (\"m\", To),\n-                    Integer'Asm_Input (\"rJ\", From),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Integer'Asm_Output (\"=m\", To),\n+                      Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Integer'Asm_Input (\"m\", To),\n+                      Integer'Asm_Input (\"rJ\", From),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end Or_Atomic;\n \n@@ -857,6 +878,7 @@ package body System.Aux_DEC is\n       From : Long_Integer)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -867,10 +889,10 @@ package body System.Aux_DEC is\n          \"stq_c $0, %1\"   & LF & HT &\n          \"beq $0, 1b\"     & LF & HT &\n          \"mb\",\n-         Outputs => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", From)),\n-         Clobber => \"$0, $1\",\n+         Outputs  => Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", From)),\n+         Clobber  => \"$0, $1\",\n          Volatile => True);\n    end Or_Atomic;\n \n@@ -882,6 +904,7 @@ package body System.Aux_DEC is\n       Success_Flag : out Boolean)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -902,13 +925,13 @@ package body System.Aux_DEC is\n          \"bgt $17, 1b\"      & LF & HT &\n          \"br 3b\"            & LF & HT &\n          \"4:\",\n-         Outputs => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n-                     Long_Integer'Asm_Output (\"=m\", Old_Value),\n-                     Boolean'Asm_Output (\"=m\", Success_Flag)),\n-         Inputs => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n-                    Long_Integer'Asm_Input (\"rJ\", From),\n-                    Natural'Asm_Input (\"rJ\", Retry_Count)),\n-         Clobber => \"$0, $1, $17\",\n+         Outputs  => (Aligned_Long_Integer'Asm_Output (\"=m\", To),\n+                      Long_Integer'Asm_Output (\"=m\", Old_Value),\n+                      Boolean'Asm_Output (\"=m\", Success_Flag)),\n+         Inputs   => (Aligned_Long_Integer'Asm_Input (\"m\", To),\n+                      Long_Integer'Asm_Input (\"rJ\", From),\n+                      Natural'Asm_Input (\"rJ\", Retry_Count)),\n+         Clobber  => \"$0, $1, $17\",\n          Volatile => True);\n    end Or_Atomic;\n \n@@ -919,9 +942,10 @@ package body System.Aux_DEC is\n    procedure Insqhi\n      (Item   : Address;\n       Header : Address;\n-      Status : out Insq_Status) is\n-\n+      Status : out Insq_Status)\n+   is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -930,10 +954,10 @@ package body System.Aux_DEC is\n          \"mb\"               & LF & HT &\n          \"call_pal 0x87\"    & LF & HT &\n          \"mb\",\n-         Outputs => Insq_Status'Asm_Output (\"=v\", Status),\n-         Inputs => (Address'Asm_Input (\"rJ\", Item),\n-                    Address'Asm_Input (\"rJ\", Header)),\n-         Clobber => \"$16, $17\",\n+         Outputs  => Insq_Status'Asm_Output (\"=v\", Status),\n+         Inputs   => (Address'Asm_Input (\"rJ\", Item),\n+                      Address'Asm_Input (\"rJ\", Header)),\n+         Clobber  => \"$16, $17\",\n          Volatile => True);\n    end Insqhi;\n \n@@ -947,6 +971,7 @@ package body System.Aux_DEC is\n       Status : out Remq_Status)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -955,10 +980,10 @@ package body System.Aux_DEC is\n          \"call_pal 0x93\"    & LF & HT &\n          \"mb\"               & LF & HT &\n          \"bis $31, $1, %1\",\n-         Outputs => (Remq_Status'Asm_Output (\"=v\", Status),\n-                     Address'Asm_Output (\"=r\", Item)),\n-         Inputs => Address'Asm_Input (\"rJ\", Header),\n-         Clobber => \"$1, $16\",\n+         Outputs  => (Remq_Status'Asm_Output (\"=v\", Status),\n+                      Address'Asm_Output (\"=r\", Item)),\n+         Inputs   => Address'Asm_Input (\"rJ\", Header),\n+         Clobber  => \"$1, $16\",\n          Volatile => True);\n    end Remqhi;\n \n@@ -969,9 +994,10 @@ package body System.Aux_DEC is\n    procedure Insqti\n      (Item   : Address;\n       Header : Address;\n-      Status : out Insq_Status) is\n-\n+      Status : out Insq_Status)\n+   is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -980,10 +1006,10 @@ package body System.Aux_DEC is\n          \"mb\"               & LF & HT &\n          \"call_pal 0x88\"    & LF & HT &\n          \"mb\",\n-         Outputs => Insq_Status'Asm_Output (\"=v\", Status),\n-         Inputs => (Address'Asm_Input (\"rJ\", Item),\n-                    Address'Asm_Input (\"rJ\", Header)),\n-         Clobber => \"$16, $17\",\n+         Outputs  => Insq_Status'Asm_Output (\"=v\", Status),\n+         Inputs   => (Address'Asm_Input (\"rJ\", Item),\n+                      Address'Asm_Input (\"rJ\", Header)),\n+         Clobber  => \"$16, $17\",\n          Volatile => True);\n    end Insqti;\n \n@@ -997,6 +1023,7 @@ package body System.Aux_DEC is\n       Status : out Remq_Status)\n    is\n       use ASCII;\n+\n    begin\n       System.Machine_Code.Asm\n         (\n@@ -1005,10 +1032,10 @@ package body System.Aux_DEC is\n          \"call_pal 0x94\"    & LF & HT &\n          \"mb\"               & LF & HT &\n          \"bis $31, $1, %1\",\n-         Outputs => (Remq_Status'Asm_Output (\"=v\", Status),\n-                     Address'Asm_Output (\"=r\", Item)),\n-         Inputs => Address'Asm_Input (\"rJ\", Header),\n-         Clobber => \"$1, $16\",\n+         Outputs  => (Remq_Status'Asm_Output (\"=v\", Status),\n+                      Address'Asm_Output (\"=r\", Item)),\n+         Inputs   => Address'Asm_Input (\"rJ\", Header),\n+         Clobber  => \"$1, $16\",\n          Volatile => True);\n    end Remqti;\n "}]}