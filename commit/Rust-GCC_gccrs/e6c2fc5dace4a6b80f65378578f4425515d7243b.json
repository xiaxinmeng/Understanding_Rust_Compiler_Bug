{"sha": "e6c2fc5dace4a6b80f65378578f4425515d7243b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjMmZjNWRhY2U0YTZiODBmNjUzNzg1NzhmNDQyNTUxNWQ3MjQzYg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-09-06T18:44:23Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-09-06T18:44:23Z"}, "message": "Patch PR c++/45200\n\n    Fix PR c++/45200, c++/45293, c++/45558\n\ngcc/cp/Changelog:\n\tPR c++/45200\n\tPR c++/45293\n\tPR c++/45558\n\t* tree.c (strip_typedefs): Strip typedefs from the context of\n\tTYPENAME_TYPEs.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/45200\n\tPR c++/45293\n\tPR c++/45558\n\t* g++.dg/template/typedef34.C: New test.\n\t* g++.dg/template/typedef35.C: New test.\n\nFrom-SVN: r163929", "tree": {"sha": "4632c0080a473a464c988e9d9cf35edb808bb6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4632c0080a473a464c988e9d9cf35edb808bb6dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6c2fc5dace4a6b80f65378578f4425515d7243b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c2fc5dace4a6b80f65378578f4425515d7243b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c2fc5dace4a6b80f65378578f4425515d7243b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c2fc5dace4a6b80f65378578f4425515d7243b/comments", "author": null, "committer": null, "parents": [{"sha": "3c7ac37eea95be3f08fca1573116ca494158728f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7ac37eea95be3f08fca1573116ca494158728f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7ac37eea95be3f08fca1573116ca494158728f"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "f777ae9a23f5c359e09cf208410dc32f1f21d636", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -1,3 +1,11 @@\n+2010-09-06  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/45200\n+\tPR c++/45293\n+\tPR c++/45558\n+\t* tree.c (strip_typedefs): Strip typedefs from the context of\n+\tTYPENAME_TYPEs.\n+\n 2010-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* typeck.c (cp_build_binary_op): Call do_warn_double_promotion."}, {"sha": "ea01d1f4677f7d9abbef36240f262ecee9456967", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -1047,6 +1047,11 @@ strip_typedefs (tree t)\n \t\t\t\t\t    TYPE_RAISES_EXCEPTIONS (t));\n       }\n       break;\n+    case TYPENAME_TYPE:\n+      result = make_typename_type (strip_typedefs (TYPE_CONTEXT (t)),\n+\t\t\t\t   TYPENAME_TYPE_FULLNAME (t),\n+\t\t\t\t   typename_type, tf_none);\n+      break;\n     default:\n       break;\n     }"}, {"sha": "0ac95d05b697611b13dce31f8f9280c2074fa81b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -1220,7 +1220,7 @@ incompatible_dependent_types_p (tree t1, tree t2)\n \n   if (!t1_typedef_variant_p || !t2_typedef_variant_p)\n     /* Either T1 or T2 is not a typedef so we cannot compare the\n-       the template parms of the typedefs of T1 and T2.\n+       template parms of the typedefs of T1 and T2.\n        At this point, if the main variant type of T1 and T2 are equal\n        it means the two types can't be incompatible, from the perspective\n        of this function.  */"}, {"sha": "4805390bf25cef7a68ae6235ec64cd2442a5134c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -1,3 +1,11 @@\n+2010-09-06  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/45200\n+\tPR c++/45293\n+\tPR c++/45558\n+\t* g++.dg/template/typedef34.C: New test.\n+\t* g++.dg/template/typedef35.C: New test.\n+\n 2010-09-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/22152"}, {"sha": "a82e155e266269142af08a01bebe9dcde9fa96c1", "filename": "gcc/testsuite/g++.dg/template/typedef34.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef34.C?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -0,0 +1,37 @@\n+// Origin PR c++/45200\n+// { dg-do compile }\n+\n+template<typename T>\n+struct remove_reference\n+{\n+  typedef T type;\n+};\n+\n+template<typename TestType>\n+struct forward_as_lref\n+{\n+};\n+\n+template<typename Seq, typename N>\n+struct apply1\n+{\n+  typedef typename remove_reference<Seq>::type seq;\n+  typedef forward_as_lref<typename seq::seq_type> type; //#0\n+};\n+\n+template<typename Seq>\n+struct apply\n+{\n+  typedef forward_as_lref<typename remove_reference<Seq>::type::seq_type> type; //#1\n+};\n+\n+struct reverse_view\n+{\n+  typedef int seq_type;\n+};\n+\n+int\n+main()\n+{\n+  apply<reverse_view >::type a2;\n+}"}, {"sha": "2dddf0966abd9187c72b5e43610836abbf976f21", "filename": "gcc/testsuite/g++.dg/template/typedef35.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c2fc5dace4a6b80f65378578f4425515d7243b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef35.C?ref=e6c2fc5dace4a6b80f65378578f4425515d7243b", "patch": "@@ -0,0 +1,41 @@\n+// Origin c++/45558\n+// { dg-do compile }\n+\n+template <typename S, typename T>\n+struct C\n+{\n+  template <typename U>\n+  struct B\n+  {\n+    template <typename W>\n+    struct E\n+    {\n+      explicit E(const W &x) : w(x) {}\n+      const W &w;\n+    };\n+  };\n+};\n+\n+struct F;\n+template <typename X>\n+struct D\n+{\n+  D() {}\n+};\n+\n+const D<F> g;\n+template <typename S, typename T>\n+struct A\n+{\n+  template <typename U>\n+  struct B : C<S, T>::template B<U>\n+  {\n+    typedef typename C<S, T>::template B<U> V;\n+    static const D<typename V::template E<D<F> > > a;\n+  };\n+};\n+\n+template <typename S, typename T>\n+template <typename U>\n+const D<typename C<S, T>::template B<U>::template E<D<F> > >\n+A<S, T>::B<U>::a = typename C<S, T>::template B<U>::template E<D<F> >(g);"}]}