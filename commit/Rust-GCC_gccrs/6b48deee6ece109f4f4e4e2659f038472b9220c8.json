{"sha": "6b48deee6ece109f4f4e4e2659f038472b9220c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0OGRlZWU2ZWNlMTA5ZjRmNGU0ZTI2NTlmMDM4NDcyYjkyMjBjOA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-05-20T22:38:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-20T22:38:05Z"}, "message": "parse.y (resolve_package): Correctly set `*next' (was off by one.)\n\n2000-05-01  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (resolve_package): Correctly set `*next' (was off by\n\tone.)\n\t(resolve_qualified_expression_name): Fixed comment.\n\nFrom-SVN: r34060", "tree": {"sha": "d80cb4b5c55e8cb674e846af59730bacf4eceef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80cb4b5c55e8cb674e846af59730bacf4eceef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b48deee6ece109f4f4e4e2659f038472b9220c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b48deee6ece109f4f4e4e2659f038472b9220c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b48deee6ece109f4f4e4e2659f038472b9220c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b48deee6ece109f4f4e4e2659f038472b9220c8/comments", "author": null, "committer": null, "parents": [{"sha": "cb8d51687d5faba3725ff96b8277fb1142003450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8d51687d5faba3725ff96b8277fb1142003450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8d51687d5faba3725ff96b8277fb1142003450"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "663e62168892ac7458538d08027fb7e59c2bd803", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6b48deee6ece109f4f4e4e2659f038472b9220c8", "patch": "@@ -1,3 +1,9 @@\n+2000-05-01  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (resolve_package): Correctly set `*next' (was off by\n+\tone.)\n+\t(resolve_qualified_expression_name): Fixed comment.\n+\n Thu Apr 27 17:25:33 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (block_end:): If the collected block doesn't feature a"}, {"sha": "1b58acdee14379485bba2da31c07a155dc6a528a", "filename": "gcc/java/parse.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=6b48deee6ece109f4f4e4e2659f038472b9220c8", "patch": "@@ -9311,7 +9311,10 @@ resolve_package (pkg, next)\n \tif ((type_name = resolve_no_layout (acc, NULL_TREE)))\n \t  {\n \t    type_name = acc;\n-\t    *next = TREE_CHAIN (current);\n+\t    /* resolve_package should be used in a loop, hence we\n+\t       point at this one to naturally process the next one at\n+\t       the next iteration. */\n+\t    *next = current;\n \t    break;\n \t  }\n       }\n@@ -11525,7 +11528,7 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t    {\n \t      tree list;\n \t      *where_found = decl = resolve_no_layout (name, qual_wfl);\n-\t      /* We wan't to be absolutely that the class is laid\n+\t      /* We want to be absolutely sure that the class is laid\n                  out. We're going to search something inside it. */\n \t      *type_found = type = TREE_TYPE (decl);\n \t      layout_class (type);"}, {"sha": "ca99a072baeb6f48084f207c8dca0d7731382019", "filename": "gcc/java/parse.y", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b48deee6ece109f4f4e4e2659f038472b9220c8/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=6b48deee6ece109f4f4e4e2659f038472b9220c8", "patch": "@@ -6679,7 +6679,10 @@ resolve_package (pkg, next)\n \tif ((type_name = resolve_no_layout (acc, NULL_TREE)))\n \t  {\n \t    type_name = acc;\n-\t    *next = TREE_CHAIN (current);\n+\t    /* resolve_package should be used in a loop, hence we\n+\t       point at this one to naturally process the next one at\n+\t       the next iteration. */\n+\t    *next = current;\n \t    break;\n \t  }\n       }\n@@ -8893,7 +8896,7 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t    {\n \t      tree list;\n \t      *where_found = decl = resolve_no_layout (name, qual_wfl);\n-\t      /* We wan't to be absolutely that the class is laid\n+\t      /* We want to be absolutely sure that the class is laid\n                  out. We're going to search something inside it. */\n \t      *type_found = type = TREE_TYPE (decl);\n \t      layout_class (type);"}]}