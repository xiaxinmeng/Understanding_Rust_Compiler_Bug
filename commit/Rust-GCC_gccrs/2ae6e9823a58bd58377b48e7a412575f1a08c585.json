{"sha": "2ae6e9823a58bd58377b48e7a412575f1a08c585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlNmU5ODIzYTU4YmQ1ODM3N2I0OGU3YTQxMjU3NWYxYTA4YzU4NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-04-01T09:16:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-01T09:16:36Z"}, "message": "re PR libstdc++/14775 ([3.4 only] LFS tests missing)\n\n2004-04-01  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/14775\n\t* acconfig.h: Rename _GLIBCXX_MEM_LIMITS to _GLIBCXX_RES_LIMITS.\n\t* acinclude.m4 (GLIBCXX_CHECK_SETRLIMIT): Call\n\tGLIBCXX_CHECK_SETRLIMIT_ancilliary for FSIZE too, adjust define\n\tto _GLIBCXX_RES_LIMITS.\n\t(GLIBCXX_CHECK_SETRLIMIT_ancilliary): Rename HAVE_MEMLIMIT_* to\n\tHAVE_LIMIT_*.\n\t* testsuite/testsuite_hooks.h: Declare set_file_limit.\n\t* testsuite/testsuite_hooks.cc: Define it, using getrlimit\n\tand setrlimit(RLIMIT_FSIZE).\n\t* testsuite/27_io/fpos/14775.cc: New.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\nFrom-SVN: r80289", "tree": {"sha": "7ae66fabd70ebda8e3705ff984e122d6cadb9163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae66fabd70ebda8e3705ff984e122d6cadb9163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae6e9823a58bd58377b48e7a412575f1a08c585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae6e9823a58bd58377b48e7a412575f1a08c585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae6e9823a58bd58377b48e7a412575f1a08c585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae6e9823a58bd58377b48e7a412575f1a08c585/comments", "author": null, "committer": null, "parents": [{"sha": "8df83eae1ed8f8f7cfb653bdeb14f2b5071d7c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df83eae1ed8f8f7cfb653bdeb14f2b5071d7c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df83eae1ed8f8f7cfb653bdeb14f2b5071d7c4f"}], "stats": {"total": 242, "additions": 196, "deletions": 46}, "files": [{"sha": "20f02238271a1d1ff6fbfd65ea73ca7e380b34bc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -1,3 +1,19 @@\n+2004-04-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/14775\n+\t* acconfig.h: Rename _GLIBCXX_MEM_LIMITS to _GLIBCXX_RES_LIMITS.\n+\t* acinclude.m4 (GLIBCXX_CHECK_SETRLIMIT): Call\n+\tGLIBCXX_CHECK_SETRLIMIT_ancilliary for FSIZE too, adjust define\n+\tto _GLIBCXX_RES_LIMITS.\n+\t(GLIBCXX_CHECK_SETRLIMIT_ancilliary): Rename HAVE_MEMLIMIT_* to\n+\tHAVE_LIMIT_*.\n+\t* testsuite/testsuite_hooks.h: Declare set_file_limit.\n+\t* testsuite/testsuite_hooks.cc: Define it, using getrlimit\n+\tand setrlimit(RLIMIT_FSIZE).\n+\t* testsuite/27_io/fpos/14775.cc: New.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2004-03-31  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/generic/c_locale.cc (__convert_to_v(long double&)):"}, {"sha": "cad2748bbdb52cdc9e70e90619130ef061bdeec2", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -25,8 +25,8 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCXX_USE_WCHAR_T\n \n-// Define if using setrlimit to limit memory usage during 'make check'.\n-#undef _GLIBCXX_MEM_LIMITS\n+// Define if using setrlimit to set resource limits during 'make check'.\n+#undef _GLIBCXX_RES_LIMITS\n \n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS"}, {"sha": "ab4538c5e1ca653adb329afef484bbf513e1a6bf", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -454,8 +454,8 @@ dnl Check for headers for, and arguments to, the setrlimit() function.\n dnl Used only in testsuite_hooks.h.  Called from GLIBCXX_CONFIGURE_TESTSUITE.\n dnl\n dnl Defines:\n-dnl  _GLIBCXX_MEM_LIMITS if we can set artificial limits on memory\n-dnl  various HAVE_MEMLIMIT_* for individual limit names\n+dnl  _GLIBCXX_RES_LIMITS if we can set artificial resource limits \n+dnl  various HAVE_LIMIT_* for individual limit names\n dnl\n AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT_ancilliary], [\n   AC_TRY_COMPILE(\n@@ -465,7 +465,7 @@ AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT_ancilliary], [\n     ],\n     [ int f = RLIMIT_$1 ; ],\n     [glibcxx_mresult=1], [glibcxx_mresult=0])\n-  AC_DEFINE_UNQUOTED(HAVE_MEMLIMIT_$1, $glibcxx_mresult,\n+  AC_DEFINE_UNQUOTED(HAVE_LIMIT_$1, $glibcxx_mresult,\n                      [Only used in build directory testsuite_hooks.h.])\n ])\n \n@@ -482,6 +482,7 @@ AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT], [\n     GLIBCXX_CHECK_SETRLIMIT_ancilliary(RSS)\n     GLIBCXX_CHECK_SETRLIMIT_ancilliary(VMEM)\n     GLIBCXX_CHECK_SETRLIMIT_ancilliary(AS)\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary(FSIZE)\n \n     # Check for rlimit, setrlimit.\n     AC_CACHE_VAL(ac_setrlimit, [\n@@ -496,14 +497,14 @@ AC_DEFUN([GLIBCXX_CHECK_SETRLIMIT], [\n     ])\n   fi\n \n-  AC_MSG_CHECKING([for testsuite memory limit support])\n+  AC_MSG_CHECKING([for testsuite resource limits support])\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n-    ac_mem_limits=yes\n-    AC_DEFINE(_GLIBCXX_MEM_LIMITS)\n+    ac_res_limits=yes\n+    AC_DEFINE(_GLIBCXX_RES_LIMITS)\n   else\n-    ac_mem_limits=no\n+    ac_res_limits=no\n   fi\n-  AC_MSG_RESULT($ac_mem_limits)\n+  AC_MSG_RESULT($ac_res_limits)\n ])\n \n \n@@ -634,7 +635,7 @@ dnl  baseline_dir\n dnl\n AC_DEFUN([GLIBCXX_CONFIGURE_TESTSUITE], [\n   if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n-    # Do checks for memory limit functions.\n+    # Do checks for resource limit functions.\n     GLIBCXX_CHECK_SETRLIMIT\n \n     # Look for setenv, so that extended locale tests can be performed."}, {"sha": "bef3e8c82487c450f3bebf277bd40f5b3576f142", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -26,8 +26,8 @@\n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCXX_USE_WCHAR_T\n \n-// Define if using setrlimit to limit memory usage during 'make check'.\n-#undef _GLIBCXX_MEM_LIMITS\n+// Define if using setrlimit to set resource limits during 'make check'.\n+#undef _GLIBCXX_RES_LIMITS\n \n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS\n@@ -362,6 +362,21 @@\n /* Define to 1 if you have the `m' library (-lm). */\n #undef HAVE_LIBM\n \n+/* Only used in build directory testsuite_hooks.h. */\n+#undef HAVE_LIMIT_AS\n+\n+/* Only used in build directory testsuite_hooks.h. */\n+#undef HAVE_LIMIT_DATA\n+\n+/* Only used in build directory testsuite_hooks.h. */\n+#undef HAVE_LIMIT_FSIZE\n+\n+/* Only used in build directory testsuite_hooks.h. */\n+#undef HAVE_LIMIT_RSS\n+\n+/* Only used in build directory testsuite_hooks.h. */\n+#undef HAVE_LIMIT_VMEM\n+\n /* Define to 1 if you have the <locale.h> header file. */\n #undef HAVE_LOCALE_H\n \n@@ -395,18 +410,6 @@\n /* Define to 1 if you have the `mbsrtowcs' function. */\n #undef HAVE_MBSRTOWCS\n \n-/* Only used in build directory testsuite_hooks.h. */\n-#undef HAVE_MEMLIMIT_AS\n-\n-/* Only used in build directory testsuite_hooks.h. */\n-#undef HAVE_MEMLIMIT_DATA\n-\n-/* Only used in build directory testsuite_hooks.h. */\n-#undef HAVE_MEMLIMIT_RSS\n-\n-/* Only used in build directory testsuite_hooks.h. */\n-#undef HAVE_MEMLIMIT_VMEM\n-\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n "}, {"sha": "c19c57a0ac824edb0c707126f1442e932b05e375", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -72046,7 +72046,7 @@ echo \"$as_me: versioning on shared library symbols is $enable_symvers\" >&6;}\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n \n   if $GLIBCXX_IS_NATIVE && test $is_hosted = yes; then\n-    # Do checks for memory limit functions.\n+    # Do checks for resource limit functions.\n \n   setrlimit_have_headers=yes\n \n@@ -72258,7 +72258,7 @@ fi\n rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n \n cat >>confdefs.h <<_ACEOF\n-#define HAVE_MEMLIMIT_DATA $glibcxx_mresult\n+#define HAVE_LIMIT_DATA $glibcxx_mresult\n _ACEOF\n \n \n@@ -72313,7 +72313,7 @@ fi\n rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n \n cat >>confdefs.h <<_ACEOF\n-#define HAVE_MEMLIMIT_RSS $glibcxx_mresult\n+#define HAVE_LIMIT_RSS $glibcxx_mresult\n _ACEOF\n \n \n@@ -72368,7 +72368,7 @@ fi\n rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n \n cat >>confdefs.h <<_ACEOF\n-#define HAVE_MEMLIMIT_VMEM $glibcxx_mresult\n+#define HAVE_LIMIT_VMEM $glibcxx_mresult\n _ACEOF\n \n \n@@ -72423,7 +72423,62 @@ fi\n rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n \n cat >>confdefs.h <<_ACEOF\n-#define HAVE_MEMLIMIT_AS $glibcxx_mresult\n+#define HAVE_LIMIT_AS $glibcxx_mresult\n+_ACEOF\n+\n+\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+     #include <sys/time.h>\n+     #include <sys/resource.h>\n+\n+int\n+main ()\n+{\n+ int f = RLIMIT_FSIZE ;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_mresult=1\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_mresult=0\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_LIMIT_FSIZE $glibcxx_mresult\n _ACEOF\n \n \n@@ -72487,19 +72542,19 @@ fi\n \n   fi\n \n-  echo \"$as_me:$LINENO: checking for testsuite memory limit support\" >&5\n-echo $ECHO_N \"checking for testsuite memory limit support... $ECHO_C\" >&6\n+  echo \"$as_me:$LINENO: checking for testsuite resource limits support\" >&5\n+echo $ECHO_N \"checking for testsuite resource limits support... $ECHO_C\" >&6\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n-    ac_mem_limits=yes\n+    ac_res_limits=yes\n     cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_MEM_LIMITS 1\n+#define _GLIBCXX_RES_LIMITS 1\n _ACEOF\n \n   else\n-    ac_mem_limits=no\n+    ac_res_limits=no\n   fi\n-  echo \"$as_me:$LINENO: result: $ac_mem_limits\" >&5\n-echo \"${ECHO_T}$ac_mem_limits\" >&6\n+  echo \"$as_me:$LINENO: result: $ac_res_limits\" >&5\n+echo \"${ECHO_T}$ac_res_limits\" >&6\n \n \n     # Look for setenv, so that extended locale tests can be performed."}, {"sha": "aff56b6fefb03703d63c0a0ec29bc05e3389a201", "filename": "libstdc++-v3/testsuite/27_io/fpos/14775.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14775.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14775.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14775.cc?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -0,0 +1,55 @@\n+// 2004-03-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+#define TWO_GB 2147483648UL\n+\n+// Basic test for LFS support.\n+void test01()\n+{\n+#ifdef _GLIBCXX_USE_LFS\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  __gnu_test::set_file_limit(TWO_GB + 200);\n+\n+  basic_filebuf<char> fb;\n+  fb.open(\"14775_tmp\", ios_base::out | ios_base::in | ios_base::trunc);\n+\n+  pos_type ret = fb.pubseekoff(TWO_GB + 100, ios_base::beg);\n+  VERIFY( ret != pos_type(off_type(-1)) );\n+\n+  fb.close();\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "689a02b57e8b8769aaf1044cce5bc82c49de89e4", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -30,7 +30,7 @@\n \n #include <testsuite_hooks.h>\n \n-#ifdef _GLIBCXX_MEM_LIMITS\n+#ifdef _GLIBCXX_RES_LIMITS\n #include <unistd.h>\n #include <sys/time.h>\n #include <sys/resource.h>\n@@ -44,7 +44,7 @@\n \n namespace __gnu_test\n {\n-#ifdef _GLIBCXX_MEM_LIMITS\n+#ifdef _GLIBCXX_RES_LIMITS\n   void \n   set_memory_limits(float size)\n   {\n@@ -53,21 +53,21 @@ namespace __gnu_test\n     __typeof__ (r.rlim_cur) limit = (__typeof__ (r.rlim_cur))(size * 1048576);\n \n     // Heap size, seems to be common.\n-#if _GLIBCXX_HAVE_MEMLIMIT_DATA\n+#if _GLIBCXX_HAVE_LIMIT_DATA\n     getrlimit(RLIMIT_DATA, &r);\n     r.rlim_cur = limit;\n     setrlimit(RLIMIT_DATA, &r);\n #endif\n \n     // Resident set size.\n-#if _GLIBCXX_HAVE_MEMLIMIT_RSS\n+#if _GLIBCXX_HAVE_LIMIT_RSS\n     getrlimit(RLIMIT_RSS, &r);\n     r.rlim_cur = limit;\n     setrlimit(RLIMIT_RSS, &r);\n #endif\n \n     // Mapped memory (brk + mmap).\n-#if _GLIBCXX_HAVE_MEMLIMIT_VMEM\n+#if _GLIBCXX_HAVE_LIMIT_VMEM\n     getrlimit(RLIMIT_VMEM, &r);\n     r.rlim_cur = limit;\n     setrlimit(RLIMIT_VMEM, &r);\n@@ -77,7 +77,7 @@ namespace __gnu_test\n     // On HP-UX 11.23, a trivial C++ program that sets RLIMIT_AS to\n     // anything less than 128MB cannot \"malloc\" even 1K of memory.\n     // Therefore, we skip RLIMIT_AS on HP-UX.\n-#if _GLIBCXX_HAVE_MEMLIMIT_AS && !defined(__hpux__)\n+#if _GLIBCXX_HAVE_LIMIT_AS && !defined(__hpux__)\n     getrlimit(RLIMIT_AS, &r);\n     r.rlim_cur = limit;\n     setrlimit(RLIMIT_AS, &r);\n@@ -89,6 +89,25 @@ namespace __gnu_test\n   set_memory_limits(float) { }\n #endif \n \n+#ifdef _GLIBCXX_RES_LIMITS\n+  void \n+  set_file_limit(unsigned long size)\n+  {\n+#if _GLIBCXX_HAVE_LIMIT_FSIZE\n+    struct rlimit r;\n+    // Cater to the absence of rlim_t.\n+    __typeof__ (r.rlim_cur) limit = (__typeof__ (r.rlim_cur))(size);\n+\n+    getrlimit(RLIMIT_FSIZE, &r);\n+    r.rlim_cur = limit;\n+    setrlimit(RLIMIT_FSIZE, &r);\n+#endif\n+  }\n+\n+#else\n+  void\n+  set_file_limit(unsigned long) { }\n+#endif \n \n   void \n   verify_demangle(const char* mangled, const char* wanted)"}, {"sha": "fad69adadd73498e45f2c58397e0f899dc264b24", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae6e9823a58bd58377b48e7a412575f1a08c585/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=2ae6e9823a58bd58377b48e7a412575f1a08c585", "patch": "@@ -39,7 +39,7 @@\n //   set_memory_limits() uses setrlimit() to restrict dynamic memory\n //   allocation.  We provide a default memory limit if none is passed by the\n //   calling application.  The argument to set_memory_limits() is the\n-//   limit in megabytes (a floating-point number).  If _GLIBCXX_MEM_LIMITS is\n+//   limit in megabytes (a floating-point number).  If _GLIBCXX_RES_LIMITS is\n //   not #defined before including this header, then no limiting is attempted.\n //\n // 3)  counter\n@@ -86,7 +86,7 @@ namespace __gnu_test\n   // from c++config.h\n \n   // Set memory limits if possible, if not set to 0.\n-#ifndef _GLIBCXX_MEM_LIMITS\n+#ifndef _GLIBCXX_RES_LIMITS\n #  define MEMLIMIT_MB 0\n #else\n # ifndef MEMLIMIT_MB\n@@ -96,12 +96,13 @@ namespace __gnu_test\n   extern void\n   set_memory_limits(float __size = MEMLIMIT_MB);\n \n+  extern void\n+  set_file_limit(unsigned long __size);\n \n   // Check mangled name demangles (using __cxa_demangle) as expected.\n   void\n   verify_demangle(const char* mangled, const char* wanted);\n \n-\n   // Simple callback structure for variable numbers of tests (all with\n   // same signature).  Assume all unit tests are of the signature\n   // void test01(); "}]}