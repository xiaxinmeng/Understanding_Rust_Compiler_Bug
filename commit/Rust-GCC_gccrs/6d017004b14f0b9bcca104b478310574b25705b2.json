{"sha": "6d017004b14f0b9bcca104b478310574b25705b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwMTcwMDRiMTRmMGI5YmNjYTEwNGI0NzgzMTA1NzRiMjU3MDViMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-06-15T07:29:26Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-06-15T07:29:26Z"}, "message": "2012-06-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* sysdep/s390/locks.h (compare_and_swap, release_set)\n\t(read_barrier, write_barrier): Use the GCC atomic builtins.\n\nFrom-SVN: r188649", "tree": {"sha": "01a86ae6a90eb0b425ae4ff08b1341b98c421f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01a86ae6a90eb0b425ae4ff08b1341b98c421f2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d017004b14f0b9bcca104b478310574b25705b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d017004b14f0b9bcca104b478310574b25705b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d017004b14f0b9bcca104b478310574b25705b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d017004b14f0b9bcca104b478310574b25705b2/comments", "author": null, "committer": null, "parents": [{"sha": "6c31f5fbe0cd6506b74916a168d88e0b307f8eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c31f5fbe0cd6506b74916a168d88e0b307f8eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c31f5fbe0cd6506b74916a168d88e0b307f8eab"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "dffa3682726b035d2e4b8ec29806a12dfcbf2ad3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d017004b14f0b9bcca104b478310574b25705b2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d017004b14f0b9bcca104b478310574b25705b2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6d017004b14f0b9bcca104b478310574b25705b2", "patch": "@@ -1,3 +1,8 @@\n+2012-06-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* sysdep/s390/locks.h (compare_and_swap, release_set)\n+\t(read_barrier, write_barrier): Use the GCC atomic builtins.\n+\n 2012-06-14  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* sysdep/sh/locks.h (__cas_lock): Remove."}, {"sha": "96fb43d5647c1ccbc54a9ded1f40f7fcabed293d", "filename": "libjava/sysdep/s390/locks.h", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d017004b14f0b9bcca104b478310574b25705b2/libjava%2Fsysdep%2Fs390%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d017004b14f0b9bcca104b478310574b25705b2/libjava%2Fsysdep%2Fs390%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fs390%2Flocks.h?ref=6d017004b14f0b9bcca104b478310574b25705b2", "patch": "@@ -1,6 +1,6 @@\n // locks.h - Thread synchronization primitives. S/390 implementation.\n \n-/* Copyright (C) 2002  Free Software Foundation\n+/* Copyright (C) 2002-2012  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -22,21 +22,7 @@ inline static bool\n compare_and_swap(volatile obj_addr_t *addr,\n \t\t obj_addr_t old, obj_addr_t new_val) \n {\n-  int result;\n-\n-  __asm__ __volatile__ (\n-#ifndef __s390x__\n-    \"       cs  %1,%2,0(%3)\\n\"\n-#else\n-    \"       csg %1,%2,0(%3)\\n\"\n-#endif\n-    \"       ipm %0\\n\"\n-    \"       srl %0,28\\n\"\n-    : \"=&d\" (result), \"+d\" (old)\n-    : \"d\" (new_val), \"a\" (addr)\n-    : \"cc\", \"memory\");\n-\n-  return result == 0;\n+  return __sync_bool_compare_and_swap (addr, old, new_val);\n }\n \n // Set *addr to new_val with release semantics, i.e. making sure\n@@ -45,7 +31,7 @@ compare_and_swap(volatile obj_addr_t *addr,\n inline static void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n {\n-  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+  __sync_synchronize ();\n   *(addr) = new_val;\n }\n \n@@ -64,14 +50,14 @@ compare_and_swap_release(volatile obj_addr_t *addr,\n inline static void\n read_barrier()\n {\n-  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+  __sync_synchronize ();\n }\n \n // Ensure that prior stores to memory are completed with respect to other\n // processors.\n inline static void\n write_barrier()\n {\n-  __asm__ __volatile__(\"bcr 15,0\" : : : \"memory\");\n+  __sync_synchronize ();\n }\n #endif"}]}