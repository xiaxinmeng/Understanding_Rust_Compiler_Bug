{"sha": "e35229f83e1fa1da69b85dab0466545442b6fa80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MjI5ZjgzZTFmYTFkYTY5Yjg1ZGFiMDQ2NjU0NTQ0MmI2ZmE4MA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-03-29T17:30:58Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-03-29T17:30:58Z"}, "message": "re PR fortran/80254 (Windows test failure: dec_io_2.f90)\n\n2017-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/80254\n\t* gfortran.dg/dec_io_2.f90:  Do not run on MINGW, run\n\t* gfortran.dg/dec_io_2a.f90:  instead (new test).\n\nFrom-SVN: r246573", "tree": {"sha": "c555a62e423df2445b8ee273a54c85f7c1351626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c555a62e423df2445b8ee273a54c85f7c1351626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35229f83e1fa1da69b85dab0466545442b6fa80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35229f83e1fa1da69b85dab0466545442b6fa80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35229f83e1fa1da69b85dab0466545442b6fa80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35229f83e1fa1da69b85dab0466545442b6fa80/comments", "author": null, "committer": null, "parents": [{"sha": "84355514f445ca2c7e3de1e05b8d2a2993f96cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84355514f445ca2c7e3de1e05b8d2a2993f96cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84355514f445ca2c7e3de1e05b8d2a2993f96cbc"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "ce511267046e8c3447656546cf7875a7c163037d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e35229f83e1fa1da69b85dab0466545442b6fa80", "patch": "@@ -1,3 +1,9 @@\n+2017-03-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/80254\n+\t* gfortran.dg/dec_io_2.f90:  Do not run on MINGW, run\n+\t* gfortran.dg/dec_io_2a.f90:  instead (new test).\n+\n 2017-03-28  Jiong Wang  <jiong.wang@arm.com>\n \n \t* g++.dg/tls/thread_local-order2.C: XFAIL on newlib."}, {"sha": "dc05f5170c9d548c856a096d617120fb9a6061e4", "filename": "gcc/testsuite/gfortran.dg/dec_io_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2.f90?ref=e35229f83e1fa1da69b85dab0466545442b6fa80", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do run }\n+! { dg-do run { target { ! { *-*-mingw* } } } }\n ! { dg-options \"-fdec\" }\n !\n ! Run-time tests for various carriagecontrol parameters with DEC I/O."}, {"sha": "f3e4739cf8d2faa7521502571028be485e57987f", "filename": "gcc/testsuite/gfortran.dg/dec_io_2a.f90", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35229f83e1fa1da69b85dab0466545442b6fa80/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_io_2a.f90?ref=e35229f83e1fa1da69b85dab0466545442b6fa80", "patch": "@@ -0,0 +1,104 @@\n+! { dg-do run { target {  *-*-mingw* } } }\n+! { dg-options \"-fdec\" }\n+!\n+! Run-time tests for various carriagecontrol parameters with DEC I/O.\n+! Ensures the output is as defined.\n+!\n+\n+subroutine write_lines(fd)\n+  implicit none\n+  integer, intent(in) :: fd\n+  write(fd, '(A)') \"+ first\"\n+  write(fd, '(A)') \"-second line\"\n+  write(fd, '(A)') \"0now you know\"\n+  write(fd, '(A)') \"1this is the fourth line\"\n+  write(fd, '(A)') \"$finally we have a new challenger for the final line\"\n+  write(fd, '(A)') CHAR(0)//\"this is the end\"\n+  write(fd, '(A)') \" this is a plain old line\"\n+endsubroutine\n+\n+subroutine check_cc (cc, fname, expected)\n+  implicit none\n+  ! carraigecontrol type, file name to write to\n+  character(*), intent(in) :: cc, fname\n+  ! expected output\n+  character(*), intent(in) :: expected\n+\n+  ! read buffer, line number, unit, status\n+  character(len=:), allocatable :: buf\n+  integer :: i, fd, siz\n+  fd = 3\n+\n+  ! write lines using carriagecontrol setting\n+  open(unit=fd, file=fname, action='write', carriagecontrol=cc)\n+  call write_lines(fd)\n+  close(unit=fd)\n+\n+  open(unit=fd, file=fname, action='readwrite', &\n+       form='unformatted', access='stream')\n+  call fseek(fd, 0, 0)\n+  inquire(file=fname, size=siz)\n+  allocate(character(len=siz) :: buf)\n+  read(unit=fd, pos=1) buf\n+  if (buf .ne. expected) then\n+    print *, '=================> ',cc,' <================='\n+    print *, '*****  actual  *****'\n+    print *, buf\n+    print *, '***** expected *****'\n+    print *, expected\n+    deallocate(buf)\n+    close(unit=fd)\n+    call abort()\n+  else\n+    deallocate(buf)\n+    close(unit=fd, status='delete')\n+  endif\n+endsubroutine\n+\n+implicit none\n+\n+character(*), parameter :: fname  = 'dec_io_2.txt'\n+\n+!! In NONE mode, there are no line breaks between records.\n+character(*), parameter :: output_ccnone = &\n+  \"+ first\"//&\n+  \"-second line\"//&\n+  \"0now you know\"//&\n+  \"1this is the fourth line\"//&\n+  \"$finally we have a new challenger for the final line\"//&\n+  CHAR(0)//\"this is the end\"//&\n+  \" this is a plain old line\"\n+\n+!! In LIST mode, each record is terminated with a newline.\n+character(*), parameter :: output_cclist = &\n+  \"+ first\"//CHAR(13)//CHAR(10)//&\n+  \"-second line\"//CHAR(13)//CHAR(10)//&\n+  \"0now you know\"//CHAR(13)//CHAR(10)//&\n+  \"1this is the fourth line\"//CHAR(13)//CHAR(10)//&\n+  \"$finally we have a new challenger for the final line\"//CHAR(13)//CHAR(10)//&\n+  CHAR(0)//\"this is the end\"//CHAR(13)//CHAR(10)//&\n+  \" this is a plain old line\"//CHAR(13)//CHAR(10)\n+\n+!! In FORTRAN mode, the default record break is CR, and the first character\n+!! implies the start- and end-of-record formatting.\n+! '+' Overprinting: <text> CR\n+! '-' One line feed: NL <text> CR\n+! '0' Two line feeds: NL NL <text> CR\n+! '1' Next page: FF <text> CR\n+! '$' Prompting: NL <text>\n+!'\\0' Overprinting with no advance: <text>\n+!     Other: defaults to Overprinting <text> CR\n+character(*), parameter :: output_ccfort = \"\"//&\n+  \" first\"//CHAR(13)//&\n+  CHAR(10)//\"second line\"//CHAR(13)//&\n+  CHAR(10)//CHAR(10)//\"now you know\"//CHAR(13)//&\n+  CHAR(12)//\"this is the fourth line\"//CHAR(13)//&\n+  CHAR(10)//\"finally we have a new challenger for the final line\"//&\n+  \"this is the end\"//&\n+  CHAR(10)//\"this is a plain old line\"//CHAR(13)\n+\n+call check_cc('none',    fname, output_ccnone)\n+call check_cc('list',    fname, output_cclist)\n+call check_cc('fortran', fname, output_ccfort)\n+\n+end"}]}