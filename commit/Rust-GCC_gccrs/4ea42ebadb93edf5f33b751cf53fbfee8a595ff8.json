{"sha": "4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhNDJlYmFkYjkzZWRmNWYzM2I3NTFjZjUzZmJmZWU4YTU5NWZmOA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2006-02-18T16:15:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-02-18T16:15:07Z"}, "message": "re PR ada/13408 (acats numeric tests cxg* fail on pa/hpux)\n\n\tPR ada/13408\n\t* pa.h (WIDEST_HARDWARE_FP_SIZE): Define.\n\nFrom-SVN: r111241", "tree": {"sha": "4cdc1ed000741fc08816374170681642b9ea2299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cdc1ed000741fc08816374170681642b9ea2299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef6a0629b45f7b2fa8ae02ff94de99a053071515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6a0629b45f7b2fa8ae02ff94de99a053071515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6a0629b45f7b2fa8ae02ff94de99a053071515"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "6bc87a089595891596a2b61aada9de5adc85a9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "patch": "@@ -1,3 +1,8 @@\n+2006-02-18  Olivier Hainque  <hainque@adacore.com>\n+\n+\tPR ada/13408\n+\t* pa.h (WIDEST_HARDWARE_FP_SIZE): Define.\n+\n 2006-02-18  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR target/24837"}, {"sha": "1f576507210277f3b4a0ddf3e620bc331fb9b053", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea42ebadb93edf5f33b751cf53fbfee8a595ff8/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4ea42ebadb93edf5f33b751cf53fbfee8a595ff8", "patch": "@@ -289,6 +289,11 @@ typedef struct machine_function GTY(())\n    conventions for TImode variables.  */\n #define MIN_UNITS_PER_WORD 4\n \n+/* The widest floating point format supported by the hardware.  Note that\n+   setting this influences some Ada floating point type sizes, currently\n+   required for GNAT to operate properly.  */\n+#define WIDEST_HARDWARE_FP_SIZE 64\n+\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY BITS_PER_WORD\n "}]}