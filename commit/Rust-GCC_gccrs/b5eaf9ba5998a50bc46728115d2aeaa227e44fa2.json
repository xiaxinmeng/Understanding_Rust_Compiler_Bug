{"sha": "b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlYWY5YmE1OTk4YTUwYmM0NjcyODExNWQyYWVhYTIyN2U0NGZhMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-07-31T13:08:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-31T13:08:11Z"}, "message": "h8300.c (get_shift_alg): Remove the variable alg.\n\n        * h8300.c (get_shift_alg): Remove the variable alg.\n        (emit_a_shift): Rearrange code to improve readability.\n\n        * h8300.md (movsi_h8300hs): Rearrange code to improve readability.\n\nFrom-SVN: r35375", "tree": {"sha": "9682a23dc6a0a55cac6aadca9338ff5a6f960db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9682a23dc6a0a55cac6aadca9338ff5a6f960db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/comments", "author": null, "committer": null, "parents": [{"sha": "6fffb55cd75516538000c88e83cd72a42c7a8e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fffb55cd75516538000c88e83cd72a42c7a8e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fffb55cd75516538000c88e83cd72a42c7a8e60"}], "stats": {"total": 137, "additions": 75, "deletions": 62}, "files": [{"sha": "a26fc32986d34c809b7d8ec1b1f58763553132b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "patch": "@@ -5,6 +5,11 @@\n \n 2000-07-31  Kazu Hirata  <kazu@hxi.com>\n \n+\t* h8300.c (get_shift_alg): Remove the variable alg.\n+\t(emit_a_shift): Rearrange code to improve readability.\n+\n+\t* h8300.md (movsi_h8300hs): Rearrange code to improve readability.\n+\n \t* h8300.h (MODES_TIEABLE_P): Accept a combination of QImode and\n \tHImode on all architectures and a combination of HImode and SImode\n \ton H8/300H and H8/S."}, {"sha": "c6e61db06242e5000d6d41929dc9a8dac6563be8", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "patch": "@@ -2055,8 +2055,6 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n      const char **assembler2_p;\n      int *cc_valid_p;\n {\n-  /* The default is to loop.  */\n-  enum shift_alg alg = SHIFT_LOOP;\n   enum shift_mode shift_mode;\n \n   /* We don't handle negative shifts or shifts greater than the word size,\n@@ -2544,7 +2542,8 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n       abort ();\n     }\n \n-  return alg;\n+  /* No fancy method is available.  Just loop.  */\n+  return SHIFT_LOOP;\n }\n \n /* Emit the assembler code for doing shifts.  */\n@@ -2605,6 +2604,14 @@ emit_a_shift (insn, operands)\n       /* Get the assembler code to do one shift.  */\n       get_shift_alg (cpu_type, shift_type, mode, 1, &assembler,\n \t\t     &assembler2, &cc_valid);\n+\n+      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n+      output_asm_insn (assembler, operands);\n+      output_asm_insn (\"add\t#0xff,%X4\", operands);\n+      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n+      fprintf (asm_out_file, \".Lle%d:\\n\", loopend_lab);\n+\n+      return \"\";\n     }\n   else\n     {\n@@ -2655,6 +2662,7 @@ emit_a_shift (insn, operands)\n \t\t\t? ((1 << (GET_MODE_BITSIZE (mode) - n)) - 1) << n\n \t\t\t: (1 << (GET_MODE_BITSIZE (mode) - n)) - 1);\n \t    char insn_buf[200];\n+\n \t    /* Not all possibilities of rotate are supported.  They shouldn't\n \t       be generated, but let's watch for 'em.  */\n \t    if (assembler == 0)\n@@ -2705,44 +2713,40 @@ emit_a_shift (insn, operands)\n \t    output_asm_insn (insn_buf, operands);\n \t    return \"\";\n \t  }\n+\n \tcase SHIFT_SPECIAL:\n \t  output_asm_insn (assembler, operands);\n \t  return \"\";\n-\t}\n \n-      /* A loop to shift by a \"large\" constant value.\n-\t If we have shift-by-2 insns, use them.  */\n-      if (assembler2 != NULL)\n-\t{\n-\t  fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n / 2,\n-\t\t   names_big[REGNO (operands[4])]);\n-\t  fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-\t  output_asm_insn (assembler2, operands);\n-\t  output_asm_insn (\"add\t#0xff,%X4\", operands);\n-\t  fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n-\t  if (n % 2)\n-\t    output_asm_insn (assembler, operands);\n-\t  return \"\";\n-\t}\n-      else\n-\t{\n-\t  fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n,\n-\t\t   names_big[REGNO (operands[4])]);\n-\t  fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-\t  output_asm_insn (assembler, operands);\n-\t  output_asm_insn (\"add\t#0xff,%X4\", operands);\n-\t  fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n+\tcase SHIFT_LOOP:\n+\t  /* A loop to shift by a \"large\" constant value.\n+\t     If we have shift-by-2 insns, use them.  */\n+\t  if (assembler2 != NULL)\n+\t    {\n+\t      fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n / 2,\n+\t\t       names_big[REGNO (operands[4])]);\n+\t      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n+\t      output_asm_insn (assembler2, operands);\n+\t      output_asm_insn (\"add\t#0xff,%X4\", operands);\n+\t      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n+\t      if (n % 2)\n+\t\toutput_asm_insn (assembler, operands);\n+\t    }\n+\t  else\n+\t    {\n+\t      fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n,\n+\t\t       names_big[REGNO (operands[4])]);\n+\t      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n+\t      output_asm_insn (assembler, operands);\n+\t      output_asm_insn (\"add\t#0xff,%X4\", operands);\n+\t      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n+\t    }\n \t  return \"\";\n+\n+\tdefault:\n+\t  abort ();\n \t}\n     }\n-\n-  fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-  output_asm_insn (assembler, operands);\n-  output_asm_insn (\"add\t#0xff,%X4\", operands);\n-  fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n-  fprintf (asm_out_file, \".Lle%d:\\n\", loopend_lab);\n-\n-  return \"\";\n }\n \f\n /* Fix the operands of a gen_xxx so that it could become a bit"}, {"sha": "e340d940be9d27597a4735ea4f9bd5bed668c670", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5eaf9ba5998a50bc46728115d2aeaa227e44fa2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=b5eaf9ba5998a50bc46728115d2aeaa227e44fa2", "patch": "@@ -411,38 +411,42 @@\n        || register_operand (operands[1], SImode))\"\n   \"*\n {\n-  if (which_alternative == 0)\n-    return \\\"sub.l\t%S0,%S0\\\";\n-  if (which_alternative == 6)\n-    return \\\"clrmac\\\";\n-  if (which_alternative == 7)\n-    return \\\"clrmac\\;ldmac %1,macl\\\";\n-  if (which_alternative == 8)\n-    return \\\"stmac\tmacl,%0\\\";\n-  if (GET_CODE (operands[1]) == CONST_INT)\n+  switch (which_alternative)\n     {\n-      int val = INTVAL (operands[1]);\n-\n-      /* Look for constants which can be made by adding an 8-bit\n-\t number to zero in one of the two low bytes.  */\n-      if (val == (val & 0xff))\n+    case 0:\n+      return \\\"sub.l\t%S0,%S0\\\";\n+    case 6:\n+      return \\\"clrmac\\\";\n+    case 7:\n+      return \\\"clrmac\\;ldmac %1,macl\\\";\n+    case 8:\n+      return \\\"stmac\tmacl,%0\\\";\n+    default:\n+      if (GET_CODE (operands[1]) == CONST_INT)\n \t{\n-\t  operands[1] = GEN_INT ((char)val & 0xff);\n-\t  return \\\"sub.l %S0,%S0\\;add.b %1,%w0\\\";\n-\t}\n+\t  int val = INTVAL (operands[1]);\n+\n+\t  /* Look for constants which can be made by adding an 8-bit\n+\t     number to zero in one of the two low bytes.  */\n+\t  if (val == (val & 0xff))\n+\t    {\n+\t      operands[1] = GEN_INT ((char)val & 0xff);\n+\t      return \\\"sub.l %S0,%S0\\;add.b %1,%w0\\\";\n+\t    }\n      \n-      if (val == (val & 0xff00))\n-\t{\n-\t  operands[1] = GEN_INT ((char)(val >> 8) & 0xff);\n-\t  return \\\"sub.l %S0,%S0\\;add.b %1,%x0\\\";\n-\t}\n+\t  if (val == (val & 0xff00))\n+\t    {\n+\t      operands[1] = GEN_INT ((char)(val >> 8) & 0xff);\n+\t      return \\\"sub.l %S0,%S0\\;add.b %1,%x0\\\";\n+\t    }\n \n-      /* Now look for small negative numbers.  We can subtract them\n-\t from zero to get the desired constant.  */\n-      if (val == -4 || val == -2 || val == -1)\n-\t{\n-\t  operands[1] = GEN_INT (-INTVAL (operands[1]));\n-\t  return \\\"sub.l %S0,%S0\\;subs %1,%S0\\\";\n+\t  /* Now look for small negative numbers.  We can subtract them\n+\t     from zero to get the desired constant.  */\n+\t  if (val == -4 || val == -2 || val == -1)\n+\t    {\n+\t      operands[1] = GEN_INT (-INTVAL (operands[1]));\n+\t      return \\\"sub.l %S0,%S0\\;subs %1,%S0\\\";\n+\t    }\n \t}\n     }\n    return \\\"mov.l\t%S1,%S0\\\";"}]}