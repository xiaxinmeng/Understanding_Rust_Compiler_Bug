{"sha": "c4765d18f2b94c466136c40c34b6fc19202aba9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3NjVkMThmMmI5NGM0NjYxMzZjNDBjMzRiNmZjMTkyMDJhYmE5Yw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-12-01T19:31:01Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-12-01T19:31:01Z"}, "message": "diagnostic.c: Fix typos in comments.\n\n2000-12-01  Phil Edwards  <pme@sources.redhat.com>\n\n\t* diagnostic.c:  Fix typos in comments.\n\t* diagnostic.h:  Likewise.\n\nFrom-SVN: r37923", "tree": {"sha": "f7c91f33832ca998f5cbb7d4128b538e022d0e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c91f33832ca998f5cbb7d4128b538e022d0e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4765d18f2b94c466136c40c34b6fc19202aba9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4765d18f2b94c466136c40c34b6fc19202aba9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4765d18f2b94c466136c40c34b6fc19202aba9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4765d18f2b94c466136c40c34b6fc19202aba9c/comments", "author": null, "committer": null, "parents": [{"sha": "815d683eb807397e670bb8e06f6333e0a391fccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815d683eb807397e670bb8e06f6333e0a391fccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815d683eb807397e670bb8e06f6333e0a391fccb"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "6cc1677931c72dcc36e32aafdb874900f844b11b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4765d18f2b94c466136c40c34b6fc19202aba9c", "patch": "@@ -1,3 +1,8 @@\n+2000-12-01  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* diagnostic.c:  Fix typos in comments.\n+\t* diagnostic.h:  Likewise.\n+\n 2000-11-30  Phil Edwards  <pme@sources.redhat.com>\n \n \t* rtl.texi (Machine Modes):  Document BImode and OImode."}, {"sha": "e8c7cca7846150137addb1f17c5c5c39509962a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c4765d18f2b94c466136c40c34b6fc19202aba9c", "patch": "@@ -147,7 +147,7 @@ diagnostic_finalizer_fn lang_diagnostic_finalizer;\n int diagnostic_message_length_per_line;\n \n /* Used to control every diagnostic message formatting.  Front-ends should\n-   call set_message_prefixing_rule to set up their politics.  */\n+   call set_message_prefixing_rule to set up their policies.  */\n static int current_prefixing_rule;\n \n /* Prevent recursion into the error handler.  */\n@@ -373,7 +373,7 @@ output_clear (buffer)\n   clear_diagnostic_info (buffer);\n }\n \n-/* Finishes to construct a NULL-terminated character string representing\n+/* Finishes constructing a NULL-terminated character string representing\n    the BUFFERed message.  */\n \n const char *\n@@ -636,7 +636,7 @@ maybe_wrap_text (buffer, start, end)\n }\n \n \n-/* Append a STRING to BUFFER; the STRING maybe be line-wrapped if in\n+/* Append a STRING to BUFFER; the STRING might be line-wrapped if in\n    appropriate mode.  */\n \n void\n@@ -661,7 +661,7 @@ output_to_stream (buffer, file)\n \n /* Format a message pointed to by output_buffer_text_cursor (BUFFER) using\n    output_buffer_format_args (BUFFER) as appropriate.  The following format\n-   specifiers are recognized as  being language independent:\n+   specifiers are recognized as being language independent:\n    %d, %i: (signed) integer in base ten.\n    %u: unsigned integer in base ten.\n    %o: unsigned integer in base eight.\n@@ -1696,7 +1696,7 @@ See %s for instructions.\\n\",\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* Setup DC for reporting a diagnostic MESSAGE (an error of a WARNING),\n+/* Setup DC for reporting a diagnostic MESSAGE (an error or a WARNING),\n    using arguments pointed to by ARGS_PTR, issued at a location specified\n    by FILE and LINE.  */\n void"}, {"sha": "775626aa4efcc8cad08f5eb36c97526ce0e1c3e9", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4765d18f2b94c466136c40c34b6fc19202aba9c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=c4765d18f2b94c466136c40c34b6fc19202aba9c", "patch": "@@ -40,13 +40,13 @@ typedef diagnostic_starter_fn diagnostic_finalizer_fn;\n    everything goes well. */\n typedef int (*printer_fn) PARAMS ((output_buffer *));\n \n-/* This data structure encapulates an output_buffer's state.  */\n+/* This data structure encapsulates an output_buffer's state.  */\n typedef struct\n {\n   /* The prefix for each new line.   */\n   const char *prefix;\n   /* The real upper bound of number of characters per line, taking into\n-     accompt the case of a very very looong prefix.  */  \n+     account the case of a very very looong prefix.  */  \n   int maximum_length;\n   /* The ideal upper bound of number of characters per line, as suggested\n      by front-end. */  \n@@ -96,15 +96,15 @@ struct output_buffer\n #define output_message_text(BUFFER) \\\n    ((const char *) obstack_base (&(BUFFER)->obstack))\n \n-/* This data structure bundles altogether any information relevent to\n+/* This data structure bundles altogether any information relevant to\n    the context of a diagnostic message.  */\n struct diagnostic_context\n {\n   /* The diagnostic message to output.  */\n   const char *message;\n \n   /* A pointer to a variable list of the arguments necessary for the\n-     purpose of  message formatting.  */\n+     purpose of message formatting.  */\n   va_list *args_ptr;\n \n   /* The name of the source file involved in the diiagnostic.  */     \n@@ -113,11 +113,11 @@ struct diagnostic_context\n   /* The line-location in the source file.  */\n   int line;\n \n-  /* Is it message a warning?  */\n+  /* Is this message a warning?  */\n   int warn;\n \n   /* This function is called before any message is printed out.  It is\n-     respondible for preparing message prefix and such.  For example, it\n+     responsible for preparing message prefix and such.  For example, it\n      might say:\n      In file included from \"/usr/local/include/curses.h:5:\n                       from \"/home/gdr/src/nifty_printer.h:56:\n@@ -160,7 +160,7 @@ extern int diagnostic_message_length_per_line;\n \n /* This output buffer is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n-   and simillar functions.  In general, such usage should be\n+   and similar functions.  In general, such usage should be\n    avoided.  This global buffer will go away, once all such usage\n    has been removed.  */\n extern output_buffer *diagnostic_buffer;"}]}