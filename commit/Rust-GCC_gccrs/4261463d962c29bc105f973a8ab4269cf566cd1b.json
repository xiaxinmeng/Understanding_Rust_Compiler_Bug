{"sha": "4261463d962c29bc105f973a8ab4269cf566cd1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI2MTQ2M2Q5NjJjMjliYzEwNWY5NzNhOGFiNDI2OWNmNTY2Y2QxYg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-08-08T13:17:41Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-08-08T13:17:41Z"}, "message": "re PR middle-end/19706 (Recognize common Fortran usages of copysign.)\n\n2017-08-08  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR middle-end/19706\n\t* config/aarch64/aarch64.md (xorsign<mode>3): New optabs.\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_builtin_vectorized_function): Added CASE_CFN_XORSIGN.\n\t* config/aarch64/aarch64-simd-builtins.def: Added xorsign BINOP.\n\t* config/aarch64/aarch64-simd.md: Added xorsign<mode>3.\n\ngcc/testsuite/\n2017-08-08  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc.target/aarch64/xorsign.c: New.\n\t* gcc.target/aarch64/xorsign_exec.c: New.\n\t* gcc.target/aarch64/vect-xorsign_exec.c: New.\n\nFrom-SVN: r250957", "tree": {"sha": "585e331e9be3be86535e1e88262394af21fa11f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585e331e9be3be86535e1e88262394af21fa11f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4261463d962c29bc105f973a8ab4269cf566cd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4261463d962c29bc105f973a8ab4269cf566cd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4261463d962c29bc105f973a8ab4269cf566cd1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4261463d962c29bc105f973a8ab4269cf566cd1b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "336a06a163f7a761f7c3b223a1dd9a1b81cda2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336a06a163f7a761f7c3b223a1dd9a1b81cda2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336a06a163f7a761f7c3b223a1dd9a1b81cda2cb"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "2f38329ed9eb0e03a2ddc1671fcfae695e3b50b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -1,3 +1,12 @@\n+2017-08-08  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR middle-end/19706\n+\t* config/aarch64/aarch64.md (xorsign<mode>3): New optabs.\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_builtin_vectorized_function): Added CASE_CFN_XORSIGN.\n+\t* config/aarch64/aarch64-simd-builtins.def: Added xorsign BINOP.\n+\t* config/aarch64/aarch64-simd.md: Added xorsign<mode>3\n+\n 2017-08-08  Tamar Christina  <tamar.christina@arm.com>\n \t    Andrew Pinski <pinskia@gmail.com>\n "}, {"sha": "f74b68775cf64c063e23956324795b153dff71af", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -351,6 +351,35 @@\n   }\n )\n \n+(define_expand \"xorsign<mode>3\"\n+  [(match_operand:VHSDF 0 \"register_operand\")\n+   (match_operand:VHSDF 1 \"register_operand\")\n+   (match_operand:VHSDF 2 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+\n+  machine_mode imode = <V_cmp_result>mode;\n+  rtx v_bitmask = gen_reg_rtx (imode);\n+  rtx op1x = gen_reg_rtx (imode);\n+  rtx op2x = gen_reg_rtx (imode);\n+\n+  rtx arg1 = lowpart_subreg (imode, operands[1], <MODE>mode);\n+  rtx arg2 = lowpart_subreg (imode, operands[2], <MODE>mode);\n+\n+  int bits = GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1;\n+\n+  emit_move_insn (v_bitmask,\n+\t\t  aarch64_simd_gen_const_vector_dup (<V_cmp_result>mode,\n+\t\t\t\t\t\t     HOST_WIDE_INT_M1U << bits));\n+\n+  emit_insn (gen_and<v_cmp_result>3 (op2x, v_bitmask, arg2));\n+  emit_insn (gen_xor<v_cmp_result>3 (op1x, arg1, op2x));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, op1x, imode));\n+  DONE;\n+}\n+)\n+\n (define_expand \"copysign<mode>3\"\n   [(match_operand:VHSDF 0 \"register_operand\")\n    (match_operand:VHSDF 1 \"register_operand\")"}, {"sha": "7609fdba22627f15ed7630c371587b14b72e02ec", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -5178,6 +5178,42 @@\n }\n )\n \n+;; For xorsign (x, y), we want to generate:\n+;;\n+;; LDR   d2, #1<<63\n+;; AND   v3.8B, v1.8B, v2.8B\n+;; EOR   v0.8B, v0.8B, v3.8B\n+;;\n+\n+(define_expand \"xorsign<mode>3\"\n+  [(match_operand:GPF 0 \"register_operand\")\n+   (match_operand:GPF 1 \"register_operand\")\n+   (match_operand:GPF 2 \"register_operand\")]\n+  \"TARGET_FLOAT && TARGET_SIMD\"\n+{\n+\n+  machine_mode imode = <V_cmp_result>mode;\n+  rtx mask = gen_reg_rtx (imode);\n+  rtx op1x = gen_reg_rtx (imode);\n+  rtx op2x = gen_reg_rtx (imode);\n+\n+  int bits = GET_MODE_BITSIZE (<MODE>mode) - 1;\n+  emit_move_insn (mask, GEN_INT (trunc_int_for_mode (HOST_WIDE_INT_M1U << bits,\n+\t\t\t\t\t\t     imode)));\n+\n+  emit_insn (gen_and<v_cmp_result>3 (op2x, mask,\n+\t\t\t\t     lowpart_subreg (imode, operands[2],\n+\t\t\t\t\t\t     <MODE>mode)));\n+  emit_insn (gen_xor<v_cmp_result>3 (op1x,\n+\t\t\t\t     lowpart_subreg (imode, operands[1],\n+\t\t\t\t\t\t     <MODE>mode),\n+\t\t\t\t     op2x));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, op1x, imode));\n+  DONE;\n+}\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Reload support\n ;; -------------------------------------------------------------------"}, {"sha": "c9742dfa01d1093a1b281ec4d0b81384ee070aba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -1,3 +1,9 @@\n+2017-08-08  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/xorsign.c: New.\n+\t* gcc.target/aarch64/xorsign_exec.c: New.\n+\t* gcc.target/aarch64/vect-xorsign_exec.c: New.\n+\n 2017-08-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/81354"}, {"sha": "d57350c6ab8cf0a6fda43a91bc5fc59a985ccfc7", "filename": "gcc/testsuite/gcc.target/aarch64/vect-xorsign_exec.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-xorsign_exec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-xorsign_exec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-xorsign_exec.c?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+\n+extern void abort ();\n+\n+#define N 16\n+float a[N] = {-0.1f, -3.2f, -6.3f, -9.4f,\n+\t      -12.5f, -15.6f, -18.7f, -21.8f,\n+\t      24.9f, 27.1f, 30.2f, 33.3f,\n+\t      36.4f, 39.5f, 42.6f, 45.7f};\n+float b[N] = {-1.2f, 3.4f, -5.6f, 7.8f,\n+\t      -9.0f, 1.0f, -2.0f, 3.0f,\n+\t      -4.0f, -5.0f, 6.0f, 7.0f,\n+\t      -8.0f, -9.0f, 10.0f, 11.0f};\n+float r[N];\n+\n+double ad[N] = {-0.1d,  -3.2d,  -6.3d,  -9.4d,\n+\t\t-12.5d, -15.6d, -18.7d, -21.8d,\n+\t\t 24.9d,  27.1d,  30.2d,  33.3d,\n+\t\t 36.4d,  39.5d,  42.6d, 45.7d};\n+double bd[N] = {-1.2d,  3.4d, -5.6d,  7.8d,\n+\t\t-9.0d,  1.0d, -2.0d,  3.0d,\n+\t\t-4.0d, -5.0d,  6.0d,  7.0d,\n+\t\t-8.0d, -9.0d, 10.0d, 11.0d};\n+double rd[N];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = a[i] * __builtin_copysignf (1.0f, b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != a[i] * __builtin_copysignf (1.0f, b[i]))\n+      abort ();\n+\n+  for (i = 0; i < N; i++)\n+    rd[i] = ad[i] * __builtin_copysign (1.0d, bd[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (rd[i] != ad[i] * __builtin_copysign (1.0d, bd[i]))\n+      abort ();\n+\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]?eor\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]?and\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler-not \"copysign\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]?orr\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]?fmul\\[ \\t\\]?\" } } */\n+"}, {"sha": "22c5829449d932bed08de7e453c435ade3b787b2", "filename": "gcc/testsuite/gcc.target/aarch64/xorsign.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign.c?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+double\n+check_d_pos (double x, double y)\n+{\n+  return x * __builtin_copysign (1.0, y);\n+}\n+\n+float\n+check_f_pos (float x, float y)\n+{\n+  return x * __builtin_copysignf (1.0f, y);\n+}\n+\n+long double\n+check_l_pos (long double x, long double y)\n+{\n+  return x * __builtin_copysignl (1.0, y);\n+}\n+\n+/* --------------- */\n+\n+double\n+check_d_neg (double x, double y)\n+{\n+  return x * __builtin_copysign (-1.0, y);\n+}\n+\n+float\n+check_f_neg (float x, float y)\n+{\n+  return x * __builtin_copysignf (-1.0f, y);\n+}\n+\n+long double\n+check_l_neg (long double x, long double y)\n+{\n+  return x * __builtin_copysignl (-1.0, y);\n+}\n+\n+/* --------------- */\n+\n+double\n+check_d_pos_rev (double x, double y)\n+{\n+  return __builtin_copysign (1.0, y) * x;\n+}\n+\n+float\n+check_f_pos_rev (float x, float y)\n+{\n+  return __builtin_copysignf (1.0f, y) * x;\n+}\n+\n+long double\n+check_l_pos_rev (long double x, long double y)\n+{\n+  return __builtin_copysignl (1.0, y) * x;\n+}\n+\n+/* --------------- */\n+\n+double\n+check_d_neg_rev (double x, double y)\n+{\n+  return __builtin_copysign (-1.0, y) * x;\n+}\n+\n+float\n+check_f_neg_rev (float x, float y)\n+{\n+  return __builtin_copysignf (-1.0f, y) * x;\n+}\n+\n+long double\n+check_l_neg_rev (long double x, long double y)\n+{\n+  return __builtin_copysignl (-1.0, y) * x;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]?eor\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]?and\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler-not \"copysign\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]?orr\\[ \\t\\]?\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]?fmul\\[ \\t\\]?\" } } */"}, {"sha": "64bf8044cbd12c1cc744ff9b2a3308d71267bff0", "filename": "gcc/testsuite/gcc.target/aarch64/xorsign_exec.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign_exec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4261463d962c29bc105f973a8ab4269cf566cd1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign_exec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fxorsign_exec.c?ref=4261463d962c29bc105f973a8ab4269cf566cd1b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -ffast-math\" } */\n+\n+#include <math.h>\n+\n+extern void abort(void);\n+\n+static double x = 2.0;\n+static float  y = 2.0;\n+\n+int main()\n+{\n+  if ((2.5 * __builtin_copysign(1.0d, x)) != 2.5)\n+     abort();\n+\n+  if ((2.5 * __builtin_copysign(1.0f, y)) != 2.5)\n+     abort();\n+\n+  if ((2.5 * __builtin_copysignf(1.0d, -x)) != -2.5)\n+     abort();\n+\n+  if ((2.5 * __builtin_copysignf(1.0f, -y)) != -2.5)\n+     abort();\n+\n+  return 0;\n+}"}]}