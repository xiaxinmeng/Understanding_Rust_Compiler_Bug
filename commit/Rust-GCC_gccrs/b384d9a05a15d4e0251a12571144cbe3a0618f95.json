{"sha": "b384d9a05a15d4e0251a12571144cbe3a0618f95", "node_id": "C_kwDOANBUbNoAKGIzODRkOWEwNWExNWQ0ZTAyNTFhMTI1NzExNDRjYmUzYTA2MThmOTU", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-04T07:01:05Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-07T02:15:04Z"}, "message": "Support Intel prefetchit0/t1\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect PREFETCHI.\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA2_PREFETCHI_SET,\n\tOPTION_MASK_ISA2_PREFETCHI_UNSET): New.\n\t(ix86_handle_option): Handle -mprefetchi.\n\t* common/config/i386/i386-cpuinfo.h\n\t(enum processor_features): Add FEATURE_PREFETCHI.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY\n\tfor prefetchi.\n\t* config.gcc: Add prfchiintrin.h.\n\t* config/i386/cpuid.h (bit_PREFETCHI): New.\n\t* config/i386/i386-builtin-types.def:\n\tAdd DEF_FUNCTION_TYPE (VOID, PCVOID, INT)\n\tand DEF_FUNCTION_TYPE (VOID, PCVOID, INT, INT, INT).\n\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal):\n\tDefine __PREFETCHI__.\n\t* config/i386/i386-expand.cc: Handle new builtins.\n\t* config/i386/i386-isa.def (PREFETCHI):\n\tAdd DEF_PTA(PREFETCHI).\n\t* config/i386/i386-options.cc\n\t(ix86_valid_target_attribute_inner_p): Handle prefetchi.\n\t* config/i386/i386.md (prefetchi): New define_insn.\n\t* config/i386/i386.opt: Add option -mprefetchi.\n\t* config/i386/predicates.md (local_func_symbolic_operand):\n\tNew predicates.\n\t* config/i386/x86gprintrin.h: Include prfchiintrin.h.\n\t* config/i386/xmmintrin.h (enum _mm_hint): New enum for\n\tprefetchi.\n\t(_mm_prefetch): Handle the highest bit of enum.\n\t* doc/extend.texi: Document prefetchi.\n\t* doc/invoke.texi: Document -mprefetchi.\n\t* doc/sourcebuild.texi: Document target prefetchi.\n\t* config/i386/prfchiintrin.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/i386-2.C: Add -mprefetchi.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/avx-1.c: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-13.c: Add -mprefetchi.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n\t* gcc.target/i386/prefetchi-1.c: New test.\n\t* gcc.target/i386/prefetchi-2.c: Ditto.\n\t* gcc.target/i386/prefetchi-3.c: Ditto.\n\t* gcc.target/i386/prefetchi-4.c: Ditto.\n\nCo-authored-by: Hongtao Liu <hongtao.liu@intel.com>", "tree": {"sha": "c038c1cc66a1a949b7e08570966dfd8c0f4bc3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c038c1cc66a1a949b7e08570966dfd8c0f4bc3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b384d9a05a15d4e0251a12571144cbe3a0618f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b384d9a05a15d4e0251a12571144cbe3a0618f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b384d9a05a15d4e0251a12571144cbe3a0618f95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b384d9a05a15d4e0251a12571144cbe3a0618f95/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c67c15d839a8237912311a0f974fef48580edff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c67c15d839a8237912311a0f974fef48580edff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c67c15d839a8237912311a0f974fef48580edff"}], "stats": {"total": 365, "additions": 345, "deletions": 20}, "files": [{"sha": "ac7761699af6a2139706f570c9597521f5465b5b", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -839,6 +839,8 @@ get_available_features (struct __processor_model *cpu_model,\n \tset_feature (FEATURE_HRESET);\n       if (eax & bit_CMPCCXADD)\n \tset_feature(FEATURE_CMPCCXADD);\n+      if (edx & bit_PREFETCHI)\n+\tset_feature (FEATURE_PREFETCHI);\n       if (avx_usable)\n \t{\n \t  if (eax & bit_AVXVNNI)"}, {"sha": "9bcae020a007211fed3ed577b1e8ab46b24e3e50", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -112,6 +112,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVXNECONVERT_SET OPTION_MASK_ISA2_AVXNECONVERT\n #define OPTION_MASK_ISA2_CMPCCXADD_SET OPTION_MASK_ISA2_CMPCCXADD\n #define OPTION_MASK_ISA2_AMX_FP16_SET OPTION_MASK_ISA2_AMX_FP16\n+#define OPTION_MASK_ISA2_PREFETCHI_SET OPTION_MASK_ISA2_PREFETCHI\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -287,6 +288,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVXNECONVERT_UNSET OPTION_MASK_ISA2_AVXNECONVERT\n #define OPTION_MASK_ISA2_CMPCCXADD_UNSET OPTION_MASK_ISA2_CMPCCXADD\n #define OPTION_MASK_ISA2_AMX_FP16_UNSET OPTION_MASK_ISA2_AMX_FP16\n+#define OPTION_MASK_ISA2_PREFETCHI_UNSET OPTION_MASK_ISA2_PREFETCHI\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1211,6 +1213,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mprefetchi:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_PREFETCHI_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_PREFETCHI_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_PREFETCHI_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_PREFETCHI_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "68eda7a8696e947f3b8ceef5d9592a2cb3e45090", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -249,6 +249,7 @@ enum processor_features\n   FEATURE_AVXNECONVERT,\n   FEATURE_CMPCCXADD,\n   FEATURE_AMX_FP16,\n+  FEATURE_PREFETCHI,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "8648ea6903cfbb436b0718649a6c4bf8622cd3f0", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -182,4 +182,5 @@ ISA_NAMES_TABLE_START\n \t\t\tP_NONE, \"-mavxneconvert\")\n   ISA_NAMES_TABLE_ENTRY(\"cmpccxadd\", FEATURE_CMPCCXADD, P_NONE, \"-mcmpccxadd\")\n   ISA_NAMES_TABLE_ENTRY(\"amx-fp16\", FEATURE_AMX_FP16, P_NONE, \"-mamx-fp16\")\n+  ISA_NAMES_TABLE_ENTRY(\"prefetchi\", FEATURE_PREFETCHI, P_NONE, \"-mprefetchi\")\n ISA_NAMES_TABLE_END"}, {"sha": "2488385bf44a9be1a837701380e7ee68a3176f0c", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -423,7 +423,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n \t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n-\t\t       cmpccxaddintrin.h amxfp16intrin.h\"\n+\t\t       cmpccxaddintrin.h amxfp16intrin.h prfchiintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "9258326188380be3589187ceb544dfe55b2bea24", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -54,6 +54,7 @@\n #define bit_AVXVNNIINT8 (1 << 4)\n #define bit_AVXNECONVERT (1 << 5)\n #define bit_CMPXCHG8B\t(1 << 8)\n+#define bit_PREFETCHI\t(1 << 14)\n #define bit_CMOV\t(1 << 15)\n #define bit_MMX\t\t(1 << 23)\n #define bit_FXSAVE\t(1 << 24)"}, {"sha": "d10de32643fecfdd85ed6b8140e92012c1819c48", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1411,3 +1411,7 @@ DEF_FUNCTION_TYPE (V8SF, PCV16BF)\n # CMPccXADD builtins\n DEF_FUNCTION_TYPE (INT, PINT, INT, INT, INT)\n DEF_FUNCTION_TYPE (LONGLONG, PLONGLONG, LONGLONG, LONGLONG, INT)\n+\n+# PREFETCHI builtins\n+DEF_FUNCTION_TYPE (VOID, PCVOID, INT)\n+DEF_FUNCTION_TYPE (VOID, PCVOID, INT, INT, INT)"}, {"sha": "837007ada8e0c479a248b865a179491be6346d83", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -487,6 +487,10 @@ BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesdecwide2\n BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide128kl_u8\", IX86_BUILTIN_AESENCWIDE128KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide256kl_u8\", IX86_BUILTIN_AESENCWIDE256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n \n+/* PREFETCHI */\n+BDESC (0, 0, CODE_FOR_prefetchi, \"__builtin_ia32_prefetchi\", IX86_BUILTIN_PREFETCHI, UNKNOWN, (int) VOID_FTYPE_PCVOID_INT)\n+BDESC (0, 0, CODE_FOR_nothing, \"__builtin_ia32_prefetch\", IX86_BUILTIN_PREFETCH, UNKNOWN, (int) VOID_FTYPE_PCVOID_INT_INT_INT)\n+\n BDESC_END (SPECIAL_ARGS, PURE_ARGS)\n \n /* AVX */"}, {"sha": "07ce0f8a5a749d0db3e61ae7ba7609a3b711733d", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -657,6 +657,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__CMPCCXADD__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AMX_FP16)\n     def_or_undef (parse_in, \"__AMX_FP16__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_PREFETCHI)\n+    def_or_undef (parse_in, \"__PREFETCHI__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "2e0d12c010881e45ff9c7ed41aef484acaf66b0d", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -13035,6 +13035,83 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \treturn target;\n       }\n \n+    case IX86_BUILTIN_PREFETCH:\n+      {\n+\targ0 = CALL_EXPR_ARG (exp, 0); // const void *\n+\targ1 = CALL_EXPR_ARG (exp, 1); // const int\n+\targ2 = CALL_EXPR_ARG (exp, 2); // const int\n+\targ3 = CALL_EXPR_ARG (exp, 3); // const int\n+\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\top2 = expand_normal (arg2);\n+\top3 = expand_normal (arg3);\n+\n+\tif (!CONST_INT_P (op1) || !CONST_INT_P (op2) || !CONST_INT_P (op3))\n+\t  {\n+\t    error (\"second, third and fourth argument must be a const\");\n+\t    return const0_rtx;\n+\t  }\n+\n+\tif (INTVAL (op3) == 1)\n+\t  {\n+\t    if (TARGET_64BIT\n+\t\t&& local_func_symbolic_operand (op0, GET_MODE (op0)))\n+\t      emit_insn (gen_prefetchi (op0, op2));\n+\t    else\n+\t      {\n+\t\twarning (0, \"instruction prefetch applies when in 64-bit mode\"\n+\t\t\t    \" with RIP-relative addressing and\"\n+\t\t\t    \" option %<-mprefetchi%>;\"\n+\t\t\t    \" they stay NOPs otherwise\");\n+\t\temit_insn (gen_nop ());\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    if (!address_operand (op0, VOIDmode))\n+\t      {\n+\t\top0 = convert_memory_address (Pmode, op0);\n+\t\top0 = copy_addr_to_reg (op0);\n+\t      }\n+\t    emit_insn (gen_prefetch (op0, op1, op2));\n+\t  }\n+\n+\treturn 0;\n+      }\n+\n+    case IX86_BUILTIN_PREFETCHI:\n+      {\n+\targ0 = CALL_EXPR_ARG (exp, 0); // const void *\n+\targ1 = CALL_EXPR_ARG (exp, 1); // const int\n+\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\n+\tif (!CONST_INT_P (op1))\n+\t  {\n+\t    error (\"second argument must be a const\");\n+\t    return const0_rtx;\n+\t  }\n+\n+\t/* GOT/PLT_PIC should not be available for instruction prefetch.\n+\t   It must be real instruction address.  */\n+\tif (TARGET_64BIT\n+\t    && local_func_symbolic_operand (op0, GET_MODE (op0)))\n+\t  emit_insn (gen_prefetchi (op0, op1));\n+\telse\n+\t  {\n+\t    /* Ignore the hint.  */\n+\t    warning (0, \"instruction prefetch applies when in 64-bit mode\"\n+\t\t\t\" with RIP-relative addressing and\"\n+\t\t\t\" option %<-mprefetchi%>;\"\n+\t\t\t\" they stay NOPs otherwise\");\n+\t    emit_insn (gen_nop ());\n+\t  }\n+\n+\treturn 0;\n+      }\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "f234dcc37d78b9b89c88a74c5cfc3cd5c44b6b0b", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -114,3 +114,4 @@ DEF_PTA(AVXVNNIINT8)\n DEF_PTA(AVXNECONVERT)\n DEF_PTA(CMPCCXADD)\n DEF_PTA(AMX_FP16)\n+DEF_PTA(PREFETCHI)"}, {"sha": "e04b8407b62c9cdc77349f92475f04dc17add8b0", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -233,7 +233,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 },\n   { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT },\n   { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD },\n-  { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 }\n+  { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 },\n+  { \"-mprefetchi\",      OPTION_MASK_ISA2_PREFETCHI }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1082,6 +1083,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avxneconvert\", OPT_mavxneconvert),\n     IX86_ATTR_ISA (\"cmpccxadd\",   OPT_mcmpccxadd),\n     IX86_ATTR_ISA (\"amx-fp16\", OPT_mamx_fp16),\n+    IX86_ATTR_ISA (\"prefetchi\",   OPT_mprefetchi),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "a2b8f26714a40a4da6912389e61aca2465f77a05", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -330,6 +330,9 @@\n \n   ;; For HRESET support\n   UNSPECV_HRESET\n+\n+  ;; For PREFETCHI support\n+  UNSPECV_PREFETCHI\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -23961,6 +23964,26 @@\n \t(symbol_ref \"memory_address_length (operands[0], false)\"))\n    (set_attr \"memory\" \"none\")])\n \n+(define_insn \"prefetchi\"\n+  [(unspec_volatile [(match_operand 0 \"local_func_symbolic_operand\" \"p\")\n+\t\t     (match_operand:SI 1 \"const_int_operand\")]\n+\t\t    UNSPECV_PREFETCHI)]\n+  \"TARGET_PREFETCHI && TARGET_64BIT\"\n+{\n+  static const char * const patterns[2] = {\n+    \"prefetchit1\\t%0\", \"prefetchit0\\t%0\"\n+  };\n+\n+  int locality = INTVAL (operands[1]);\n+  gcc_assert (IN_RANGE (locality, 2, 3));\n+\n+  return patterns[locality - 2];\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set (attr \"length_address\")\n+\t(symbol_ref \"memory_address_length (operands[0], false)\"))\n+   (set_attr \"memory\" \"none\")])\n+\n (define_expand \"stack_protect_set\"\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")]"}, {"sha": "1d91103cd54b319000c19bdcd9887f4851f177d2", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1238,3 +1238,7 @@ CMPCCXADD build-in functions and code generation.\n mamx-fp16\n Target Mask(ISA2_AMX_FP16) Var(ix86_isa_flags2) Save\n Support AMX-FP16 built-in functions and code generation.\n+\n+mprefetchi\n+Target Mask(ISA2_PREFETCHI) Var(ix86_isa_flags2) Save\n+Support PREFETCHI built-in functions and code generation."}, {"sha": "2a3f07224cc8155b803eda5331975c38336f5315", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -610,6 +610,21 @@\n   return false;\n })\n \n+(define_predicate \"local_func_symbolic_operand\"\n+  (match_operand 0 \"local_symbolic_operand\")\n+{\n+  if (GET_CODE (op) == CONST\n+      && GET_CODE (XEXP (op, 0)) == PLUS\n+      && CONST_INT_P (XEXP (XEXP (op, 0), 1)))\n+    op = XEXP (XEXP (op, 0), 0);\n+\n+  if (GET_CODE (op) == SYMBOL_REF\n+      && !SYMBOL_REF_FUNCTION_P (op))\n+    return false;\n+\n+  return true;\n+})\n+\n ;; Test for a legitimate @GOTOFF operand.\n ;;\n ;; VxWorks does not impose a fixed gap between segments; the run-time"}, {"sha": "06deef488ba28d12c782ac23f2786d87d85d9409", "filename": "gcc/config/i386/prfchiintrin.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fprfchiintrin.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <prfchiintrin.h> directly; include <x86gprintrin.h> instead.\"\n+#endif\n+\n+#ifndef _PRFCHIINTRIN_H_INCLUDED\n+#define _PRFCHIINTRIN_H_INCLUDED\n+\n+#ifdef __x86_64__\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_m_prefetchit0 (void* __P)\n+{\n+  __builtin_ia32_prefetchi (__P, 3);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_m_prefetchit1 (void* __P)\n+{\n+  __builtin_ia32_prefetchi (__P, 2);\n+}\n+\n+#endif\n+\n+#endif /* _PRFCHIINTRIN_H_INCLUDED */"}, {"sha": "abe8f487f03120657da10856d7c102b08db77611", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -74,6 +74,8 @@\n \n #include <pkuintrin.h>\n \n+#include <prfchiintrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <rtmintrin.h>"}, {"sha": "ab65c430a97eae2d7d256c59a29612cc8870812d", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -36,6 +36,8 @@\n /* Constants for use with _mm_prefetch.  */\n enum _mm_hint\n {\n+  _MM_HINT_IT0 = 19,\n+  _MM_HINT_IT1 = 18,\n   /* _MM_HINT_ET is _MM_HINT_T with set 3rd bit.  */\n   _MM_HINT_ET0 = 7,\n   _MM_HINT_ET1 = 6,\n@@ -51,11 +53,12 @@ enum _mm_hint\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_prefetch (const void *__P, enum _mm_hint __I)\n {\n-  __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);\n+  __builtin_ia32_prefetch (__P, (__I & 0x4) >> 2,\n+\t\t\t   __I & 0x3, (__I & 0x10) >> 4);\n }\n #else\n #define _mm_prefetch(P, I) \\\n-  __builtin_prefetch ((P), ((I & 0x4) >> 2), (I & 0x3))\n+  __builtin_ia32_prefetch ((P), ((I) & 0x4) >> 2, ((I) & 0x3), ((I) & 0x10) >> 4)\n #endif\n \n #ifndef __SSE__"}, {"sha": "ba1e12b4fa90d0811c777e085dd4e88e230446e7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -7085,6 +7085,11 @@ Enable/disable the generation of the CMPccXADD instructions.\n @cindex @code{target(\"amx-fp16\")} function attribute, x86\n Enable/disable the generation of the AMX-FP16 instructions.\n \n+@item prefetchi\n+@itemx no-prefetchi\n+@cindex @code{target(\"prefetchi\")} function attribute, x86\n+Enable/disable the generation of the PREFETCHI instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "008a3c53c3e7bdb3dc188f99c1c8eba89e556b56", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1438,6 +1438,7 @@ See RS/6000 and PowerPC Options.\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 @gol\n+-mprefetchi @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -33012,6 +33013,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mamx-fp16\n @opindex mamx-fp16\n+@need 200\n+@itemx -mprefetchi\n+@opindex mprefetchi\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -33022,9 +33026,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16 or CLDEMOTE extended\n-instruction sets. Each has a corresponding @option{-mno-} option to disable\n-use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI or CLDEMOTE\n+extended instruction sets. Each has a corresponding @option{-mno-} option to\n+disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "055a76607c2dc0561ab52aa1972b1acbcfed413d", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -2532,6 +2532,9 @@ Target does not require strict alignment.\n @item pie_copyreloc\n The x86-64 target linker supports PIE with copy reloc.\n \n+@item prefetchi\n+Target supports the execution of @code{prefetchi} instructions.\n+\n @item rdrand\n Target supports x86 @code{rdrand} instruction.\n "}, {"sha": "ec3b1864ec08ceea141c43c523111e7271e1c540", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "542275ca057b53f7e77baa2dc556252b81dfe843", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "0b2b68b678d792aa53eaf39b3ba2089c0972007b", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw -mavx512fp16 -mavx512vl\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw -mavx512fp16 -mavx512vl -mprefetchi\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -153,7 +153,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n+#define __builtin_ia32_prefetch(A, B, C, D) __builtin_ia32_prefetch(A, 0, 3, 0)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)"}, {"sha": "631d5c2b950b636828a8d82aef584642b702c0aa", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -85,6 +85,7 @@ extern void test_avxvnniint8 (void)\t\t__attribute__((__target__(\"avxvnniint8\")));\n extern void test_avxneconvert (void)\t\t__attribute__((__target__(\"avxneconvert\")));\n extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n extern void test_amx_fp16 (void)\t\t__attribute__((__target__(\"amx-fp16\")));\n+extern void test_prefetchi (void)               __attribute__((__target__(\"prefetchi\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -171,6 +172,7 @@ extern void test_no_avxvnniint8 (void)\t\t__attribute__((__target__(\"no-avxvnniint\n extern void test_no_avxneconvert (void)\t\t__attribute__((__target__(\"no-avxneconvert\")));\n extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cmpccxadd\")));\n extern void test_no_amx_fp16 (void)\t\t__attribute__((__target__(\"no-amx-fp16\")));\n+extern void test_no_prefetchi (void)            __attribute__((__target__(\"no-prefetchi\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "80f25e70e8e33a4d7c5de845218272141dc966bd", "filename": "gcc/testsuite/gcc.target/i386/prefetchi-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-1.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mprefetchi -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\[ \\\\t\\]+prefetchit0\\[ \\\\t\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\\\t\\]+prefetchit1\\[ \\\\t\\]+\" 2 } } */\n+\n+#include <x86intrin.h>\n+\n+int\n+bar (int a)\n+{\n+  return a + 1;\n+}\n+\n+int\n+foo1 (int b)\n+{\n+  _mm_prefetch (bar, _MM_HINT_IT0);\n+  return bar (b) + 1;\n+}\n+\n+int\n+foo2 (int b)\n+{\n+  _mm_prefetch (bar, _MM_HINT_IT1);\n+  return bar (b) + 1;\n+}\n+\n+int\n+foo3 (int b)\n+{\n+  _m_prefetchit0 (bar);\n+  return bar (b) + 1;\n+}\n+\n+int\n+foo4 (int b)\n+{\n+  _m_prefetchit1 (bar);\n+  return bar (b) + 1;\n+}"}, {"sha": "e05ce9c733d41944f1cd803cfb5f9bf5a7a512b7", "filename": "gcc/testsuite/gcc.target/i386/prefetchi-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-2.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-mprefetchi -O2\" } */\n+/* { dg-final { scan-assembler-not \"\\[ \\\\t\\]+prefetchit0\" } } */\n+/* { dg-final { scan-assembler-not \"\\[ \\\\t\\]+prefetchit1\" } } */\n+\n+#include <x86intrin.h>\n+\n+int\n+bar (int a)\n+{\n+  return a + 1;\n+}\n+\n+int\n+foo1 (int b)\n+{\n+  __builtin_ia32_prefetch (bar, 0, 3, 1); /* { dg-warning \"instruction prefetch applies when in 64-bit mode with RIP-relative addressing and option '-mprefetchi'; they stay NOPs otherwise\" } */\n+  return bar (b) + 1;\n+}\n+\n+int\n+foo2 (int b)\n+{\n+  __builtin_ia32_prefetchi (bar, 2); /* { dg-warning \"instruction prefetch applies when in 64-bit mode with RIP-relative addressing and option '-mprefetchi'; they stay NOPs otherwise\" } */\n+  return bar (b) + 1;\n+}"}, {"sha": "f0a4173d2a6af5ae5522e806f49930bc61680a16", "filename": "gcc/testsuite/gcc.target/i386/prefetchi-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-3.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mprefetchi -O2\" } */\n+/* { dg-final { scan-assembler-not \"prefetchit0\" } } */\n+/* { dg-final { scan-assembler-not \"prefetchit1\" } } */\n+\n+#include <x86intrin.h>\n+\n+void* p;\n+\n+void extern\n+prefetchi_test1 (void)\n+{\n+  __builtin_ia32_prefetchi (p, 2); /* { dg-warning \"instruction prefetch applies when in 64-bit mode with RIP-relative addressing and option '-mprefetchi'; they stay NOPs otherwise\" } */\n+}\n+\n+void extern\n+prefetchi_test2 (void)\n+{\n+  __builtin_ia32_prefetch (p, 0, 3, 1); /* { dg-warning \"instruction prefetch applies when in 64-bit mode with RIP-relative addressing and option '-mprefetchi'; they stay NOPs otherwise\" } */\n+} "}, {"sha": "73ae596d147a1f4ba821a61ee1d8d16f2948a5fb", "filename": "gcc/testsuite/gcc.target/i386/prefetchi-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchi-4.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <x86intrin.h>\n+\n+void* p;\n+\n+void extern\n+prefetch_test (void)\n+{\n+  __builtin_ia32_prefetch (p, 0, 3, 0);\n+  __builtin_ia32_prefetch (p, 0, 2, 0);\n+  __builtin_ia32_prefetch (p, 0, 1, 0);\n+  __builtin_ia32_prefetch (p, 0, 0, 0);\n+  __builtin_ia32_prefetch (p, 1, 3, 0);\n+  __builtin_ia32_prefetch (p, 1, 2, 0);\n+  __builtin_ia32_prefetch (p, 1, 1, 0);\n+  __builtin_ia32_prefetch (p, 1, 0, 0);\n+}"}, {"sha": "f0d2d5b4975829b6ccc63245b1c5a085f8497ff3", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -125,7 +125,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n+#define __builtin_ia32_prefetch(A, B, C, D) __builtin_ia32_prefetch(A, 0, 3, 0)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)"}, {"sha": "547e441c98650ffc7e18477ad32cd3ce099b969d", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -94,7 +94,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n+#define __builtin_ia32_prefetch(A, B, C, D) __builtin_ia32_prefetch(A, 0, 3, 0)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)\n@@ -847,6 +847,6 @@\n #define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi\")\n \n #include <x86intrin.h>"}, {"sha": "3be40d41b37394e83299c03221e7a7d3b723cf69", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,7 +1,7 @@\n /* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n /* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n-/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n \n #include <x86gprintrin.h>\n "}, {"sha": "5eaeab6edf058e02f2c9f98ce04c0accca98c3b6", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n-/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile with optimization.\n    All of them are defined as inline functions that reference the proper"}, {"sha": "03967f80445c799be508ad7454f253f06b1cc1ff", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n-/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile without optimization.\n    All of them are defined as inline functions that reference the proper"}, {"sha": "64fc337da603e61aef5a479327555a1de7c65447", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -15,7 +15,7 @@\n \n #ifndef DIFFERENT_PRAGMAS\n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,cmpccxadd,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,cmpccxadd,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,prefetchi,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n #else\n #pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n #endif"}, {"sha": "8937f55e7ee22f6f485e22c404d305373c68241e", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b384d9a05a15d4e0251a12571144cbe3a0618f95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=b384d9a05a15d4e0251a12571144cbe3a0618f95", "patch": "@@ -32,7 +32,7 @@\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,cmpccxadd,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,cmpccxadd,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,prefetchi,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #else\n #pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #endif"}]}