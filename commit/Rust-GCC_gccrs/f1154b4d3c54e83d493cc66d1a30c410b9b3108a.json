{"sha": "f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExNTRiNGQzYzU0ZTgzZDQ5M2NjNjZkMWEzMGM0MTBiOWIzMTA4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-25T08:17:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-25T08:17:01Z"}, "message": "sccvn: Fix buffer overflow in push_partial_def [PR94300]\n\nThe following testcase is miscompiled, because there is a buffer overflow\nin push_partial_def in the little-endian case when working 64-byte vectors.\nThe code computes the number of bytes we need in the BUFFER: NEEDED_LEN,\nwhich is rounded up number of bits we need.  Then the code\nnative_encode_expr each (partially overlapping) pd into THIS_BUFFER.\nIf pd.offset < 0, i.e. the pd.rhs store starts at some bits before the\nwindow we are interested in, we pass -pd.offset to native_encode_expr and\nshrink the size already earlier:\n      HOST_WIDE_INT size = pd.size;\n      if (pd.offset < 0)\n        size -= ROUND_DOWN (-pd.offset, BITS_PER_UNIT);\nOn this testcase, the problem is with a store with pd.offset > 0,\nin particular pd.offset 256, pd.size 512, i.e. a 64-byte store which doesn't\nfit into entirely into BUFFER.\nWe have just:\n          size = MIN (size, (HOST_WIDE_INT) needed_len * BITS_PER_UNIT);\nin this case for little-endian, which isn't sufficient, because needed_len\nis 64, the entire BUFFER (except of the last extra byte used for shifting).\nnative_encode_expr fills the whole THIS_BUFFER (again, except the last extra\nbyte), and the code then performs memcpy (BUFFER + 32, THIS_BUFFER, 64);\nwhich overflows BUFFER and as THIS_BUFFER is usually laid out after it,\noverflows it into THIS_BUFFER.\nThe following patch fixes it by for pd.offset > 0 making sure size is\nreduced too.  For big-endian the code does things differently and already\nhandles this right.\n\n2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94300\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): If pd.offset\n\tis positive, make sure that off + size isn't larger than needed_len.\n\n\t* gcc.target/i386/avx512f-pr94300.c: New test.", "tree": {"sha": "fb627b61b79512d67596406e99de8c37fcf3460d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb627b61b79512d67596406e99de8c37fcf3460d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2133167ad58d15c2c2df0cb4fa3a3757603144e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2133167ad58d15c2c2df0cb4fa3a3757603144e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2133167ad58d15c2c2df0cb4fa3a3757603144e"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "4a0e473afd736c69dc567136d6422be76cf59974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "patch": "@@ -1,3 +1,9 @@\n+2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94300\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): If pd.offset\n+\tis positive, make sure that off + size isn't larger than needed_len.\n+\n 2020-03-25  Richard Biener  <rguenther@suse.de>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "2a39af6feabd7a6e51424d6dfdde7cb1ff49d8db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "patch": "@@ -1,5 +1,8 @@\n 2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94300\n+\t* gcc.target/i386/avx512f-pr94300.c: New test.\n+\n \tPR debug/94283\n \t* gcc.dg/pr94283.c: New test.\n "}, {"sha": "7593408dae99a41e5ed6d2cbe1d050a0e3fb1ffd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr94300.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94300.c?ref=f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/94300 */\n+/* { dg-do run { target { avx512f } } } */\n+/* { dg-options \"-O1 -mavx512f -mprefer-vector-width=512 -mtune=skylake-avx512\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+typedef double V __attribute__((vector_size (64)));\n+\n+static void\n+avx512f_test (void)\n+{\n+  double mem[16];\n+  const V a = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };\n+  const V b = { 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 };\n+  V c;\n+  __builtin_memcpy (mem, &a, 64);\n+  __builtin_memcpy (mem + 8, &b, 64);\n+  __builtin_memcpy (&c, mem + 4, 64);\n+  if (c[5] != 9.0)\n+    __builtin_abort ();\n+}"}, {"sha": "fd74809ca6ea0cd3d69016b9307f271c4c01f041", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1154b4d3c54e83d493cc66d1a30c410b9b3108a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=f1154b4d3c54e83d493cc66d1a30c410b9b3108a", "patch": "@@ -2058,6 +2058,8 @@ vn_walk_cb_data::push_partial_def (pd_data pd,\n \t\tshift_bytes_in_array_left (this_buffer, len + 1, amnt);\n \t      unsigned int off = pd.offset / BITS_PER_UNIT;\n \t      gcc_assert (off < needed_len);\n+\t      size = MIN (size,\n+\t\t\t  (HOST_WIDE_INT) (needed_len - off) * BITS_PER_UNIT);\n \t      p = buffer + off;\n \t      if (amnt + size < BITS_PER_UNIT)\n \t\t{"}]}