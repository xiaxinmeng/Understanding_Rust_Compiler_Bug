{"sha": "e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiYmIwMzc2NzAzMjNmYmM1NzhiNmJjNjhjZmI1MjUyZjFiZjBjYw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-07-06T13:17:23Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-07-06T13:17:23Z"}, "message": "This patch improves the accuracy of the Cortex-A53 integer scheduler...\n\nThis patch improves the accuracy of the Cortex-A53 integer scheduler, \nresulting in performance gains across a wide range of benchmarks.\n\n    gcc/\n\t* config/arm/cortex-a53.md: Use final_presence_set for in-order.\n\t(cortex_a53_shift): Add mov_shift.\n\t(cortex_a53_shift_reg): Add new reservation for register shifts.\n\t(cortex_a53_alu): Remove bfm.\n\t(cortex_a53_alu_shift): Add bfm, remove mov_shift.\n\t(cortex_a53_alu_extr): Add new reservation for EXTR.\n\t(bypasses): Improve bypass modelling.\n\nFrom-SVN: r238048", "tree": {"sha": "39497a96e56171e271511b7cb7ad0c18b6e67f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39497a96e56171e271511b7cb7ad0c18b6e67f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc/comments", "author": null, "committer": null, "parents": [{"sha": "136236bd31f5244bba8fa063c7d159c07422c018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136236bd31f5244bba8fa063c7d159c07422c018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/136236bd31f5244bba8fa063c7d159c07422c018"}], "stats": {"total": 119, "additions": 58, "deletions": 61}, "files": [{"sha": "348b0bb2453a41b40791445823433c1dd48ebb9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "patch": "@@ -1,3 +1,13 @@\n+2016-07-06  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/cortex-a53.md: Use final_presence_set for in-order.\n+\t(cortex_a53_shift): Add mov_shift.\n+\t(cortex_a53_shift_reg): Add new reservation for register shifts.\n+\t(cortex_a53_alu): Remove bfm.\n+\t(cortex_a53_alu_shift): Add bfm, remove mov_shift.\n+\t(cortex_a53_alu_extr): Add new reservation for EXTR.\n+\t(bypasses): Improve bypass modelling.\n+\n 2016-07-06  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \tPR target/50739\t"}, {"sha": "70c0f4daabe0ccb8e32808f1af51f5460e087a18", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 48, "deletions": 61, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bbb037670323fbc578b6bc68cfb5252f1bf0cc/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=e4bbb037670323fbc578b6bc68cfb5252f1bf0cc", "patch": "@@ -30,6 +30,7 @@\n \n (define_cpu_unit \"cortex_a53_slot0\" \"cortex_a53\")\n (define_cpu_unit \"cortex_a53_slot1\" \"cortex_a53\")\n+(final_presence_set \"cortex_a53_slot1\" \"cortex_a53_slot0\")\n \n (define_reservation \"cortex_a53_slot_any\"\n \t\t    \"cortex_a53_slot0\\\n@@ -71,41 +72,43 @@\n \n (define_insn_reservation \"cortex_a53_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"adr,shift_imm,shift_reg,mov_imm,mvn_imm\"))\n+       (eq_attr \"type\" \"adr,shift_imm,mov_imm,mvn_imm,mov_shift\"))\n   \"cortex_a53_slot_any\")\n \n-(define_insn_reservation \"cortex_a53_alu_rotate_imm\" 2\n+(define_insn_reservation \"cortex_a53_shift_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"rotate_imm\"))\n-  \"(cortex_a53_slot1)\n-   | (cortex_a53_single_issue)\")\n+       (eq_attr \"type\" \"shift_reg,mov_shift_reg\"))\n+  \"cortex_a53_slot_any+cortex_a53_hazard\")\n \n (define_insn_reservation \"cortex_a53_alu\" 3\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\n \t\t\talu_sreg,alus_sreg,logic_reg,logics_reg,\n \t\t\tadc_imm,adcs_imm,adc_reg,adcs_reg,\n-\t\t\tbfm,csel,clz,rbit,rev,alu_dsp_reg,\n-\t\t\tmov_reg,mvn_reg,\n-\t\t\tmrs,multiple,no_insn\"))\n+\t\t\tcsel,clz,rbit,rev,alu_dsp_reg,\n+\t\t\tmov_reg,mvn_reg,mrs,multiple,no_insn\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift\" 3\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\n \t\t\tcrc,logic_shift_imm,logics_shift_imm,\n-\t\t\talu_ext,alus_ext,\n-\t\t\textend,mov_shift,mvn_shift\"))\n+\t\t\talu_ext,alus_ext,bfm,extend,mvn_shift\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift_reg\" 3\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\n \t\t\tlogic_shift_reg,logics_shift_reg,\n-\t\t\tmov_shift_reg,mvn_shift_reg\"))\n+\t\t\tmvn_shift_reg\"))\n   \"cortex_a53_slot_any+cortex_a53_hazard\")\n \n-(define_insn_reservation \"cortex_a53_mul\" 3\n+(define_insn_reservation \"cortex_a53_alu_extr\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"rotate_imm\"))\n+  \"cortex_a53_slot1|cortex_a53_single_issue\")\n+\n+(define_insn_reservation \"cortex_a53_mul\" 4\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (ior (eq_attr \"mul32\" \"yes\")\n \t    (eq_attr \"mul64\" \"yes\")))\n@@ -189,97 +192,81 @@\n (define_insn_reservation \"cortex_a53_branch\" 0\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"branch,call\"))\n-  \"cortex_a53_slot_any,cortex_a53_branch\")\n+  \"cortex_a53_slot_any+cortex_a53_branch\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; General-purpose register bypasses\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-;; Model bypasses for unshifted operands to ALU instructions.\n+;; Model bypasses for ALU to ALU instructions.\n \n-(define_bypass 1 \"cortex_a53_shift\"\n-\t\t \"cortex_a53_shift\")\n+(define_bypass 0 \"cortex_a53_shift*\"\n+\t\t \"cortex_a53_alu\")\n \n-(define_bypass 1 \"cortex_a53_alu,\n-\t\t  cortex_a53_alu_shift*,\n-\t\t  cortex_a53_alu_rotate_imm,\n-\t\t  cortex_a53_shift\"\n+(define_bypass 1 \"cortex_a53_shift*\"\n+\t\t \"cortex_a53_shift*,cortex_a53_alu_*\")\n+\n+(define_bypass 1 \"cortex_a53_alu*\"\n \t\t \"cortex_a53_alu\")\n \n-(define_bypass 2 \"cortex_a53_alu,\n-\t\t  cortex_a53_alu_shift*\"\n+(define_bypass 1 \"cortex_a53_alu*\"\n \t\t \"cortex_a53_alu_shift*\"\n \t\t \"aarch_forward_to_shift_is_not_shifted_reg\")\n \n-;; In our model, we allow any general-purpose register operation to\n-;; bypass to the accumulator operand of an integer MADD-like operation.\n+(define_bypass 2 \"cortex_a53_alu*\"\n+\t\t \"cortex_a53_alu_*,cortex_a53_shift*\")\n \n-(define_bypass 1 \"cortex_a53_alu*,\n-\t\t  cortex_a53_load*,\n-\t\t  cortex_a53_mul\"\n+;; Model a bypass from MUL/MLA to MLA instructions.\n+\n+(define_bypass 1 \"cortex_a53_mul\"\n \t\t \"cortex_a53_mul\"\n \t\t \"aarch_accumulator_forwarding\")\n \n-;; Model a bypass from MLA/MUL to many ALU instructions.\n+;; Model a bypass from MUL/MLA to ALU instructions.\n \n (define_bypass 2 \"cortex_a53_mul\"\n-\t\t \"cortex_a53_alu,\n-\t\t  cortex_a53_alu_shift*\")\n-\n-;; We get neater schedules by allowing an MLA/MUL to feed an\n-;; early load address dependency to a load.\n+\t\t \"cortex_a53_alu\")\n \n-(define_bypass 2 \"cortex_a53_mul\"\n-\t\t \"cortex_a53_load*\"\n-\t\t \"arm_early_load_addr_dep\")\n+(define_bypass 3 \"cortex_a53_mul\"\n+\t\t \"cortex_a53_alu_*,cortex_a53_shift*\")\n \n ;; Model bypasses for loads which are to be consumed by the ALU.\n \n (define_bypass 2 \"cortex_a53_load1\"\n \t\t \"cortex_a53_alu\")\n \n (define_bypass 3 \"cortex_a53_load1\"\n-\t\t \"cortex_a53_alu_shift*\")\n+\t\t \"cortex_a53_alu_*,cortex_a53_shift*\")\n+\n+(define_bypass 3 \"cortex_a53_load2\"\n+\t\t \"cortex_a53_alu\")\n \n ;; Model a bypass for ALU instructions feeding stores.\n \n-(define_bypass 1 \"cortex_a53_alu*\"\n-\t\t \"cortex_a53_store1,\n-\t\t  cortex_a53_store2,\n-\t\t  cortex_a53_store3plus\"\n+(define_bypass 0 \"cortex_a53_alu*,cortex_a53_shift*\"\n+\t\t \"cortex_a53_store*\"\n \t\t \"arm_no_early_store_addr_dep\")\n \n ;; Model a bypass for load and multiply instructions feeding stores.\n \n-(define_bypass 2 \"cortex_a53_mul,\n-\t\t  cortex_a53_load1,\n-\t\t  cortex_a53_load2,\n-\t\t  cortex_a53_load3plus\"\n-\t\t \"cortex_a53_store1,\n-\t\t  cortex_a53_store2,\n-\t\t  cortex_a53_store3plus\"\n+(define_bypass 1 \"cortex_a53_mul,\n+\t\t  cortex_a53_load*\"\n+\t\t \"cortex_a53_store*\"\n \t\t \"arm_no_early_store_addr_dep\")\n \n ;; Model a GP->FP register move as similar to stores.\n \n-(define_bypass 1 \"cortex_a53_alu*\"\n+(define_bypass 0 \"cortex_a53_alu*,cortex_a53_shift*\"\n \t\t \"cortex_a53_r2f\")\n \n-(define_bypass 2 \"cortex_a53_mul,\n-\t\t  cortex_a53_load1,\n-\t\t  cortex_a53_load2,\n-\t\t  cortex_a53_load3plus\"\n+(define_bypass 1 \"cortex_a53_mul,\n+\t\t  cortex_a53_load*\"\n \t\t \"cortex_a53_r2f\")\n \n-;; Shifts feeding Load/Store addresses may not be ready in time.\n+;; Model flag forwarding to branches.\n \n-(define_bypass 3 \"cortex_a53_shift\"\n-\t\t \"cortex_a53_load*\"\n-\t\t \"arm_early_load_addr_dep\")\n-\n-(define_bypass 3 \"cortex_a53_shift\"\n-\t\t \"cortex_a53_store*\"\n-\t\t \"arm_early_store_addr_dep\")\n+(define_bypass 0 \"cortex_a53_alu*,cortex_a53_shift*\"\n+\t\t \"cortex_a53_branch\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; Floating-point/Advanced SIMD."}]}