{"sha": "d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmYWQ0ZWE0OWE0OWE3Nzg3ODkxZDFhNmU3ZGJiODFlMmEwOTU3Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-02-28T23:06:10Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-02-28T23:06:10Z"}, "message": "In gcc/: 2003-02-28 Geoffrey Keating <geoffk@apple.com>\n\nIn gcc/:\n2003-02-28  Geoffrey Keating  <geoffk@apple.com>\n\n\t* doc/invoke.texi: Change .pch to .gch.\n\t* cppfiles.c (open_file_pch): Likewise.\n\t* gcc.c (default_compilers): Likewise.\n\nIn gcc/testsuite/:\n2003-02-28  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/pch/pch.exp: Change .pch to .gch.\n\t* g++.dg/pch/pch.exp: Likewise.\n\nFrom-SVN: r63587", "tree": {"sha": "3296383554cf8641e0ecd0dce811b757bb507ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3296383554cf8641e0ecd0dce811b757bb507ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9855905ceff516db0276b303406bf703236d4c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9855905ceff516db0276b303406bf703236d4c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9855905ceff516db0276b303406bf703236d4c42"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "9a4e99cae61419d110afdbaa73c9e50656dbf360", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -1,3 +1,9 @@\n+2003-02-28  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* doc/invoke.texi: Change .pch to .gch.\n+\t* cppfiles.c (open_file_pch): Likewise.\n+\t* gcc.c (default_compilers): Likewise.\n+\n 2003-02-28  Aldy Hernandez  <aldyh@redhat.com>\n \n         * floatlib.c: Remove."}, {"sha": "1f5d6c3de51fb0bba37bbc30da3df01b88294575", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.  (include file handling)\n-   Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1998,\n+   Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1998, 2003,\n    1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n@@ -362,7 +362,7 @@ open_file_pch (pfile, filename)\n       splay_tree_node nd;\n       \n       memcpy (pchname, filename, namelen);\n-      memcpy (pchname + namelen, \".pch\", 5);\n+      memcpy (pchname + namelen, \".gch\", 5);\n \n       nd = find_or_create_entry (pfile, pchname);\n       file = (struct include_file *) nd->value;"}, {"sha": "90790df59af78fb177e2bace1c8fc3b461b8eb41", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -11251,11 +11251,11 @@ seen in the compilation.  As it searches for the included file\n (@pxref{Search Path,,Search Path,cpp.info,The C Preprocessor}) the\n compiler looks for a precompiled header in each directory just before it\n looks for the include file in that directory.  The name searched for is\n-the name specified in the @code{#include} with @samp{.pch} appended.  If\n+the name specified in the @code{#include} with @samp{.gch} appended.  If\n the precompiled header file can't be used, it is ignored.\n \n For instance, if you have @code{#include \"all.h\"}, and you have\n-@file{all.h.pch} in the same directory as @file{all.h}, then the\n+@file{all.h.gch} in the same directory as @file{all.h}, then the\n precompiled header file will be used if possible, and the original\n header will be used otherwise.\n \n@@ -11276,7 +11276,7 @@ they've already been included (in the precompiled header).\n \n If you need to precompile the same header file for different\n languages, targets, or compiler options, you can instead make a\n-@emph{directory} named like @file{all.h.pch}, and put each precompiled\n+@emph{directory} named like @file{all.h.gch}, and put each precompiled\n header in the directory.  (It doesn't matter what you call the files\n in the directory, every precompiled header in the directory will be\n considered.)  The first precompiled header encountered in the"}, {"sha": "db37242dd0c4c8ebeda60653aee060890debace5", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -929,11 +929,11 @@ static const struct compiler default_compilers[] =\n \t  %{save-temps|traditional-cpp:%(trad_capable_cpp) \\\n \t\t%(cpp_options) %b.i \\n\\\n \t\t    cc1 -fpreprocessed %b.i %(cc1_options)\\\n-                        -o %g.s %{!o*:--output-pch=%i.pch}\\\n+                        -o %g.s %{!o*:--output-pch=%i.gch}\\\n                         %W{o*:--output-pch=%*}%V}\\\n \t  %{!save-temps:%{!traditional-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)\\\n-                    -o %g.s %{!o*:--output-pch=%i.pch}\\\n+                    -o %g.s %{!o*:--output-pch=%i.gch}\\\n                     %W{o*:--output-pch=%*}%V}}}}}\", 0},\n   {\".i\", \"@cpp-output\", 0},\n   {\"@cpp-output\","}, {"sha": "96d3d97335a4e1477e55ab2b9972da99323a6018", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -1,3 +1,8 @@\n+2003-02-28  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/pch/pch.exp: Change .pch to .gch.\n+\t* g++.dg/pch/pch.exp: Likewise.\n+\n 2003-02-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9879"}, {"sha": "bf2dab4af908aed4a9b353522eb94edb3bb84ec5", "filename": "gcc/testsuite/g++.dg/pch/pch.exp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -36,9 +36,9 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n     set nshort [file tail [file dirname $test]]/[file tail $test]\n     set bname \"[file rootname [file tail $test]]\"\n \n-    catch { file delete \"$bname.H.pch\" }\n+    catch { file delete \"$bname.H.gch\" }\n     catch { file delete \"$bname.s\" }\n-    catch { file delete \"$bname.s-pch\" }\n+    catch { file delete \"$bname.s-gch\" }\n \n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.\n@@ -54,17 +54,17 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n \t# For the rest, the default is to compile to .s.\n \tset dg-do-what-default compile\n \n-\tif { [ file exists \"$bname.H.pch\" ] } {\n+\tif { [ file exists \"$bname.H.gch\" ] } {\n \t    # Ensure that the PCH file is used, not the original header.\n \t    file delete \"$bname.H\"\n \n \t    dg-test -keep-output $test $flags \"-I.\"\n-\t    file delete \"$bname.H.pch\"\n+\t    file delete \"$bname.H.gch\"\n \t    if { [ file exists \"$bname.s\" ] } {\n-\t\tfile rename \"$bname.s\" \"$bname.s-pch\"\n+\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n \t\tfile copy \"[file rootname $test].Hs\" \"$bname.H\"\n \t\tdg-test -keep-output $test $flags \"-I.\"\n-\t\tset tmp [ diff \"$bname.s\" \"$bname.s-pch\" ]\n+\t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n \t\tif { $tmp == 0 } {\n \t\t    untested \"$nshort $flags assembly comparison\"\n \t\t} elseif { $tmp == 1 } {\n@@ -74,7 +74,7 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n \t\t}\n \t\tfile delete \"$bname.H\"\n \t\tfile delete \"$bname.s\"\n-\t\tfile delete \"$bname.s-pch\"\n+\t\tfile delete \"$bname.s-gch\"\n \t    } else {\n \t\tuntested \"$nshort $flags assembly comparison\"\n \t    }"}, {"sha": "7a5aacaac569f0afb6dda1f309ef37bd730b4bce", "filename": "gcc/testsuite/gcc.dg/pch/pch.exp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fad4ea49a49a7787891d1a6e7dbb81e2a09572/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp?ref=d8fad4ea49a49a7787891d1a6e7dbb81e2a09572", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997, 2002 Free Software Foundation, Inc.\n+#   Copyright (C) 1997, 2002, 2003 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -36,9 +36,9 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     set nshort [file tail [file dirname $test]]/[file tail $test]\n     set bname \"[file rootname [file tail $test]]\"\n \n-    catch { file delete \"$bname.h.pch\" }\n+    catch { file delete \"$bname.h.gch\" }\n     catch { file delete \"$bname.s\" }\n-    catch { file delete \"$bname.s-pch\" }\n+    catch { file delete \"$bname.s-gch\" }\n \n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.\n@@ -54,17 +54,17 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \t# For the rest, the default is to compile to .s.\n \tset dg-do-what-default compile\n \n-\tif { [ file exists \"$bname.h.pch\" ] } {\n+\tif { [ file exists \"$bname.h.gch\" ] } {\n \t    # Ensure that the PCH file is used, not the original header.\n \t    file delete \"$bname.h\"\n \n \t    dg-test -keep-output $test $flags \"-I.\"\n-\t    file delete \"$bname.h.pch\"\n+\t    file delete \"$bname.h.gch\"\n \t    if { [ file exists \"$bname.s\" ] } {\n-\t\tfile rename \"$bname.s\" \"$bname.s-pch\"\n+\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n \t\tfile copy \"[file rootname $test].hs\" \"$bname.h\"\n \t\tdg-test -keep-output $test $flags \"-I.\"\n-\t\tset tmp [ diff \"$bname.s\" \"$bname.s-pch\" ]\n+\t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n \t\tif { $tmp == 0 } {\n \t\t    untested \"$nshort $flags assembly comparison\"\n \t\t} elseif { $tmp == 1 } {\n@@ -74,7 +74,7 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \t\t}\n \t\tfile delete \"$bname.h\"\n \t\tfile delete \"$bname.s\"\n-\t\tfile delete \"$bname.s-pch\"\n+\t\tfile delete \"$bname.s-gch\"\n \t    } else {\n \t\tuntested \"$nshort $flags assembly comparison\"\n \t    }"}]}