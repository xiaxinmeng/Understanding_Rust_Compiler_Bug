{"sha": "97448adf21ff74d0efe757d580dcefb5aab75244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0NDhhZGYyMWZmNzRkMGVmZTc1N2Q1ODBkY2VmYjVhYWI3NTI0NA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-11-20T10:49:47Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-11-20T10:49:47Z"}, "message": "Fix libsanitizer build on OS X 10.1[01], macOS 10.12 (PR sanitizer/78267)\n\n\tfixincludes:\n\tPR sanitizer/78267\n\t* inclhack.def (darwin_availabilityinternal, darwin_os_trace_1)\n\t(darwin_os_trace_2, darwin_os_trace_3): New fixes.\n\t(hpux_stdint_least_fast): Remove spurious _EOFix_.\n\t* fixincl.x: Regenerate.\n\t* tests/bases/AvailabilityInternal.h: New file.\n\t* tests/bases/os/trace.h: New file.\n\n2016-11-20  Jack Howarth  <howarth.at.gcc@gmail.com>\n\n\tlibsanitizer:\n\tPR sanitizer/78267\n\t* sanitizer_common/sanitizer_mac.cc: Include <os/trace.h> only if\n\tcompiler supports blocks extension.\n\nFrom-SVN: r242633", "tree": {"sha": "e0646a17c02687c46ede7df11ce8ea0fa032343d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0646a17c02687c46ede7df11ce8ea0fa032343d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97448adf21ff74d0efe757d580dcefb5aab75244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97448adf21ff74d0efe757d580dcefb5aab75244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97448adf21ff74d0efe757d580dcefb5aab75244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97448adf21ff74d0efe757d580dcefb5aab75244/comments", "author": null, "committer": null, "parents": [{"sha": "71b9f645fb4148fe98563ad1ba230c3cee6d6efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b9f645fb4148fe98563ad1ba230c3cee6d6efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b9f645fb4148fe98563ad1ba230c3cee6d6efc"}], "stats": {"total": 367, "additions": 360, "deletions": 7}, "files": [{"sha": "fef9f9fdc6f955cbaef4d95fcb4c096283679134", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -1,3 +1,13 @@\n+2016-11-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR sanitizer/78267\n+\t* inclhack.def (darwin_availabilityinternal, darwin_os_trace_1)\n+\t(darwin_os_trace_2, darwin_os_trace_3): New fixes.\n+\t(hpux_stdint_least_fast): Remove spurious _EOFix_.\n+\t* fixincl.x: Regenerate.\n+\t* tests/bases/AvailabilityInternal.h: New file.\n+\t* tests/bases/os/trace.h: New file.\n+\n 2016-09-30  Tadek Kijkowski  <tkijkowski@gmail.com>\n \n \t* check.tpl: Convert line endings to unix on test outputs"}, {"sha": "00d03be8ffe8eac6e7f88b73e47e250ef13eb654", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 192, "deletions": 5, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Sunday September  4, 2016 at 12:15:33 PM EDT\n+ * It has been AutoGen-ed  November 20, 2016 at 11:44:36 AM by AutoGen 5.16.2\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun  4 Sep 2016 12:15:33 EDT\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Nov 20 11:44:37 MET 2016\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 237 fixup descriptions.\n+ * This file contains 241 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -2577,6 +2577,51 @@ extern \\\"C\\\" {\\n\\\n #endif\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Availabilityinternal fix\n+ */\n+tSCC zDarwin_AvailabilityinternalName[] =\n+     \"darwin_availabilityinternal\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_AvailabilityinternalList[] =\n+  \"AvailabilityInternal.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_AvailabilityinternalMachs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_AvailabilityinternalSelect0[] =\n+       \"#define[ \\t]+(__API_[ADU]\\\\([^)]*\\\\)).*\";\n+\n+#define    DARWIN_AVAILABILITYINTERNAL_TEST_CT  1\n+static tTestDesc aDarwin_AvailabilityinternalTests[] = {\n+  { TT_EGREP,    zDarwin_AvailabilityinternalSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Availabilityinternal\n+ */\n+static const char* apzDarwin_AvailabilityinternalPatch[] = {\n+    \"format\",\n+    \"#if defined(__has_attribute)\\n\\\n+  #if __has_attribute(availability)\\n\\\n+%0\\n\\\n+  #else\\n\\\n+    #define %1\\n\\\n+  #endif\\n\\\n+#else\\n\\\n+    #define %1\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Darwin_9_Long_Double_Funcs_2 fix\n@@ -2741,6 +2786,124 @@ static const char* apzDarwin_Longjmp_NoreturnPatch[] = {\n     \"%1 __attribute__ ((__noreturn__));\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Os_Trace_1 fix\n+ */\n+tSCC zDarwin_Os_Trace_1Name[] =\n+     \"darwin_os_trace_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Os_Trace_1List[] =\n+  \"os/trace.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Os_Trace_1Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Os_Trace_1Select0[] =\n+       \"^(_os_trace_verify_printf.*) (__attribute__.*)\";\n+\n+#define    DARWIN_OS_TRACE_1_TEST_CT  1\n+static tTestDesc aDarwin_Os_Trace_1Tests[] = {\n+  { TT_EGREP,    zDarwin_Os_Trace_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Os_Trace_1\n+ */\n+static const char* apzDarwin_Os_Trace_1Patch[] = {\n+    \"format\",\n+    \"%1\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Os_Trace_2 fix\n+ */\n+tSCC zDarwin_Os_Trace_2Name[] =\n+     \"darwin_os_trace_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Os_Trace_2List[] =\n+  \"os/trace.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Os_Trace_2Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Os_Trace_2Select0[] =\n+       \"typedef.*\\\\^os_trace_payload_t.*\";\n+\n+#define    DARWIN_OS_TRACE_2_TEST_CT  1\n+static tTestDesc aDarwin_Os_Trace_2Tests[] = {\n+  { TT_EGREP,    zDarwin_Os_Trace_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Os_Trace_2\n+ */\n+static const char* apzDarwin_Os_Trace_2Patch[] = {\n+    \"format\",\n+    \"#if __BLOCKS__\\n\\\n+%0\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Os_Trace_3 fix\n+ */\n+tSCC zDarwin_Os_Trace_3Name[] =\n+     \"darwin_os_trace_3\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Os_Trace_3List[] =\n+  \"os/trace.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Os_Trace_3Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Os_Trace_3Select0[] =\n+       \"__(API|OSX)_.*\\n\\\n+OS_EXPORT.*\\n\\\n+.*\\n\\\n+_os_trace.*os_trace_payload_t payload);\";\n+\n+#define    DARWIN_OS_TRACE_3_TEST_CT  1\n+static tTestDesc aDarwin_Os_Trace_3Tests[] = {\n+  { TT_EGREP,    zDarwin_Os_Trace_3Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Os_Trace_3\n+ */\n+static const char* apzDarwin_Os_Trace_3Patch[] = {\n+    \"format\",\n+    \"#if __BLOCKS__\\n\\\n+%0\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Darwin_Private_Extern fix\n@@ -9714,9 +9877,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          275\n+#define REGEX_COUNT          279\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            237\n+#define FIX_COUNT            241\n \n /*\n  *  Enumerate the fixes\n@@ -9781,10 +9944,14 @@ typedef enum {\n     CTRL_QUOTES_DEF_FIXIDX,\n     CTRL_QUOTES_USE_FIXIDX,\n     CXX_UNREADY_FIXIDX,\n+    DARWIN_AVAILABILITYINTERNAL_FIXIDX,\n     DARWIN_9_LONG_DOUBLE_FUNCS_2_FIXIDX,\n     DARWIN_EXTERNC_FIXIDX,\n     DARWIN_GCC4_BREAKAGE_FIXIDX,\n     DARWIN_LONGJMP_NORETURN_FIXIDX,\n+    DARWIN_OS_TRACE_1_FIXIDX,\n+    DARWIN_OS_TRACE_2_FIXIDX,\n+    DARWIN_OS_TRACE_3_FIXIDX,\n     DARWIN_PRIVATE_EXTERN_FIXIDX,\n     DARWIN_STDINT_1_FIXIDX,\n     DARWIN_STDINT_2_FIXIDX,\n@@ -10257,6 +10424,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      CXX_UNREADY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aCxx_UnreadyTests,   apzCxx_UnreadyPatch, 0 },\n \n+  {  zDarwin_AvailabilityinternalName,    zDarwin_AvailabilityinternalList,\n+     apzDarwin_AvailabilityinternalMachs,\n+     DARWIN_AVAILABILITYINTERNAL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_AvailabilityinternalTests,   apzDarwin_AvailabilityinternalPatch, 0 },\n+\n   {  zDarwin_9_Long_Double_Funcs_2Name,    zDarwin_9_Long_Double_Funcs_2List,\n      apzDarwin_9_Long_Double_Funcs_2Machs,\n      DARWIN_9_LONG_DOUBLE_FUNCS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -10277,6 +10449,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      DARWIN_LONGJMP_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aDarwin_Longjmp_NoreturnTests,   apzDarwin_Longjmp_NoreturnPatch, 0 },\n \n+  {  zDarwin_Os_Trace_1Name,    zDarwin_Os_Trace_1List,\n+     apzDarwin_Os_Trace_1Machs,\n+     DARWIN_OS_TRACE_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Os_Trace_1Tests,   apzDarwin_Os_Trace_1Patch, 0 },\n+\n+  {  zDarwin_Os_Trace_2Name,    zDarwin_Os_Trace_2List,\n+     apzDarwin_Os_Trace_2Machs,\n+     DARWIN_OS_TRACE_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Os_Trace_2Tests,   apzDarwin_Os_Trace_2Patch, 0 },\n+\n+  {  zDarwin_Os_Trace_3Name,    zDarwin_Os_Trace_3List,\n+     apzDarwin_Os_Trace_3Machs,\n+     DARWIN_OS_TRACE_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Os_Trace_3Tests,   apzDarwin_Os_Trace_3Patch, 0 },\n+\n   {  zDarwin_Private_ExternName,    zDarwin_Private_ExternList,\n      apzDarwin_Private_ExternMachs,\n      DARWIN_PRIVATE_EXTERN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "931161b69ce8ddc6241a65540eef5ed42959dc53", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -1337,6 +1337,32 @@ fix = {\n     test_text = \"extern void* malloc( size_t );\";\n };\n \n+/*\n+ *  macOS 10.12 <AvailabilityInternal.h> uses __attribute__((availability))\n+ *  unconditionally.\n+ */\n+fix = {\n+    hackname  = darwin_availabilityinternal;\n+    mach      = \"*-*-darwin*\";\n+    files     = AvailabilityInternal.h;\n+    select    = \"#define[ \\t]+(__API_[ADU]\\\\([^)]*\\\\)).*\";\n+    c_fix     = format;\n+    c_fix_arg = <<- _EOFix_\n+\t#if defined(__has_attribute)\n+\t  #if __has_attribute(availability)\n+\t%0\n+\t  #else\n+\t    #define %1\n+\t  #endif\n+\t#else\n+\t    #define %1\n+\t#endif\n+\t_EOFix_;\n+\n+    test_text = \"#define __API_A(x) __attribute__((availability(__API_AVAILABLE_PLATFORM_##x)))\\n\"\n+\t\t\"#define __API_D(msg,x) __attribute__((availability(__API_DEPRECATED_PLATFORM_##x,message=msg)))\";\n+};\n+\n /*\n  *  For the AAB_darwin7_9_long_double_funcs fix to be useful,\n  *  you have to not use \"\" includes.\n@@ -1409,6 +1435,62 @@ fix = {\n     test_text = \"void siglongjmp(sigjmp_buf, int);\";\n };\n \n+/*\n+ *  Mac OS X 10.11 <os/trace.h> uses attribute on function definition.\n+ */\n+fix = {\n+  hackname  = darwin_os_trace_1;\n+  mach      = \"*-*-darwin*\";\n+  files     = os/trace.h;\n+  select    = \"^(_os_trace_verify_printf.*) (__attribute__.*)\";\n+  c_fix     = format;\n+  c_fix_arg = \"%1\";\n+  test_text = \"_os_trace_verify_printf(const char *msg, ...) __attribute__((format(printf, 1, 2)))\";\n+};\n+\n+/*\n+ *  Mac OS X 10.1[012] <os/trace.h> os_trace_payload_t typedef uses Blocks\n+ *  extension without guard.\n+ */\n+fix = {\n+  hackname  = darwin_os_trace_2;\n+  mach      = \"*-*-darwin*\";\n+  files     = os/trace.h;\n+  select    = \"typedef.*\\\\^os_trace_payload_t.*\";\n+  c_fix     = format;\n+  c_fix_arg = \"#if __BLOCKS__\\n%0\\n#endif\";\n+  test_text = \"typedef void (^os_trace_payload_t)(xpc_object_t xdict);\";\n+};\n+\n+/*\n+ *  In Mac OS X 10.1[012] <os/trace.h>, need to guard users of\n+ *  os_trace_payload_t typedef, too.\n+ */\n+fix = {\n+  hackname  = darwin_os_trace_3;\n+  mach      = \"*-*-darwin*\";\n+  files     = os/trace.h;\n+  select    = <<- _EOSelect_\n+\t__(API|OSX)_.*\n+\tOS_EXPORT.*\n+\t.*\n+\t_os_trace.*os_trace_payload_t payload);\n+\t_EOSelect_;\n+  c_fix     = format;\n+  c_fix_arg = \"#if __BLOCKS__\\n%0\\n#endif\";\n+  test_text = <<- _EOText_\n+\t__API_AVAILABLE(macosx(10.10), ios(8.0), watchos(2.0), tvos(8.0))\n+\tOS_EXPORT OS_NOTHROW OS_NOT_TAIL_CALLED\n+\tvoid\n+\t_os_trace_with_buffer(void *dso, const char *message, uint8_t type, const void *buffer, size_t buffer_size, os_trace_payload_t payload);\n+\n+\t__OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_10_0)\n+\tOS_EXPORT OS_NOTHROW\n+\tvoid\n+\t_os_trace_internal(void *dso, uint8_t type, const char *format, const uint8_t *buf, size_t buf_size, os_trace_payload_t payload);\n+\t_EOText_;\n+};\n+\n /*\n  *  __private_extern__ doesn't exist in FSF GCC.  Even if it did,\n  *  why would you ever put it in a system header file?\n@@ -2638,7 +2720,6 @@ fix = {\n     c-fix-arg = \"#  define\tUINT_%164_MAX\t__UINT64_MAX__\";\n     test-text = \"#  define       UINT_FAST64_MAX        ULLONG_MAX\\n\"\n \t\t\"#  define       UINT_LEAST64_MAX        ULLONG_MAX\\n\";\n-\t_EOFix_;\n };\n \n /*"}, {"sha": "60b3503f1532ca0a13787334fc33f56c35576dac", "filename": "fixincludes/tests/base/AvailabilityInternal.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ftests%2Fbase%2FAvailabilityInternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ftests%2Fbase%2FAvailabilityInternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FAvailabilityInternal.h?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -0,0 +1,31 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/AvailabilityInternal.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( DARWIN_AVAILABILITYINTERNAL_CHECK )\n+#if defined(__has_attribute)\n+  #if __has_attribute(availability)\n+#define __API_A(x) __attribute__((availability(__API_AVAILABLE_PLATFORM_##x)))\n+  #else\n+    #define __API_A(x)\n+  #endif\n+#else\n+    #define __API_A(x)\n+#endif\n+#if defined(__has_attribute)\n+  #if __has_attribute(availability)\n+#define __API_D(msg,x) __attribute__((availability(__API_DEPRECATED_PLATFORM_##x,message=msg)))\n+  #else\n+    #define __API_D(msg,x)\n+  #endif\n+#else\n+    #define __API_D(msg,x)\n+#endif\n+#endif  /* DARWIN_AVAILABILITYINTERNAL_CHECK */"}, {"sha": "fdbf1a809fe1ebe156c703d8aecba5d9d521da1a", "filename": "fixincludes/tests/base/os/trace.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ftests%2Fbase%2Fos%2Ftrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/fixincludes%2Ftests%2Fbase%2Fos%2Ftrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fos%2Ftrace.h?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -0,0 +1,38 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/os/trace.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( DARWIN_OS_TRACE_1_CHECK )\n+_os_trace_verify_printf(const char *msg, ...)\n+#endif  /* DARWIN_OS_TRACE_1_CHECK */\n+\n+\n+#if defined( DARWIN_OS_TRACE_2_CHECK )\n+#if __BLOCKS__\n+typedef void (^os_trace_payload_t)(xpc_object_t xdict);\n+#endif\n+#endif  /* DARWIN_OS_TRACE_2_CHECK */\n+\n+\n+#if defined( DARWIN_OS_TRACE_3_CHECK )\n+#if __BLOCKS__\n+__API_AVAILABLE(macosx(10.10), ios(8.0), watchos(2.0), tvos(8.0))\n+OS_EXPORT OS_NOTHROW OS_NOT_TAIL_CALLED\n+void\n+_os_trace_with_buffer(void *dso, const char *message, uint8_t type, const void *buffer, size_t buffer_size, os_trace_payload_t payload);\n+#endif\n+\n+#if __BLOCKS__\n+__OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_10_0)\n+OS_EXPORT OS_NOTHROW\n+void\n+_os_trace_internal(void *dso, uint8_t type, const char *format, const uint8_t *buf, size_t buf_size, os_trace_payload_t payload);\n+#endif\n+#endif  /* DARWIN_OS_TRACE_3_CHECK */"}, {"sha": "5ac40280fd96bb08db22df65f4f4a5db4eae137e", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -1,3 +1,9 @@\n+2016-11-20  Jack Howarth  <howarth.at.gcc@gmail.com>\n+\n+\tPR sanitizer/78267\n+\t* sanitizer_common/sanitizer_mac.cc: Include <os/trace.h> only if\n+\tcompiler supports blocks extension.\n+\n 2016-11-16  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \t* LOCAL_PATCHES: Add revision."}, {"sha": "62be7b0b15e7a0c2b6901ce05335f0241295e512", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97448adf21ff74d0efe757d580dcefb5aab75244/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97448adf21ff74d0efe757d580dcefb5aab75244/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc?ref=97448adf21ff74d0efe757d580dcefb5aab75244", "patch": "@@ -34,7 +34,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>)\n+#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else"}]}