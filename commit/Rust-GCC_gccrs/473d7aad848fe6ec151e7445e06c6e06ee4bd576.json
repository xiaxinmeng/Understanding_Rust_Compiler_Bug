{"sha": "473d7aad848fe6ec151e7445e06c6e06ee4bd576", "node_id": "C_kwDOANBUbNoAKDQ3M2Q3YWFkODQ4ZmU2ZWMxNTFlNzQ0NWUwNmM2ZTA2ZWU0YmQ1NzY", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-12T17:46:16Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-24T19:15:31Z"}, "message": "[RISCV] Add %~ to print w if TARGET_64BIT and use it\n\nTo make things easier and more maintainable, we need to\nadd support printing out w if TARGET_64BIT so this patch\nadds %~ to do that, similar how the x86 backend uses %~\nto print out i/f for TARGET_AVX2. We could have chosen any\npunctuation symbol but ~ looks the closest to w.\n\nOK? Build and tested for riscv64-linux-gnu and riscv32-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_print_operand):\n\tHandle '~'.\n\t(riscv_print_operand_punct_valid_p): New function\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n\t* config/riscv/bitmanip.md (<bitmanip_optab>si2/clz_ctz_pcnt):\n\tUse %~ instead of conditional the pattern on TARGET_64BIT.\n\t(rotrsi3): Likewise.\n\t(rotlsi3): Likewise.\n\t* config/riscv/riscv.md: Add ~ to the list of modifiers.\n\t(addsi3): Use %~ instead of conditional the pattern on TARGET_64BIT.\n\t(subsi3): Likewise.\n\t(negsi2): Likewise.\n\t(mulsi3): Likewise.\n\t(optab>si3/any_div): Likewise.\n\t(*add<mode>hi3): Likewise.\n\t(<optab>si3/any_shift): Likewise.", "tree": {"sha": "51c2c6aca7aadd80ab21308a6526b1cc4ed546a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c2c6aca7aadd80ab21308a6526b1cc4ed546a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/473d7aad848fe6ec151e7445e06c6e06ee4bd576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473d7aad848fe6ec151e7445e06c6e06ee4bd576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473d7aad848fe6ec151e7445e06c6e06ee4bd576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473d7aad848fe6ec151e7445e06c6e06ee4bd576/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380b8fd96e10c45ce8470b906037cf487ac3f91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380b8fd96e10c45ce8470b906037cf487ac3f91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380b8fd96e10c45ce8470b906037cf487ac3f91f"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "9f3c306423d61f87bb097342c6a398852ce9163d", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=473d7aad848fe6ec151e7445e06c6e06ee4bd576", "patch": "@@ -143,7 +143,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (clz_ctz_pcnt:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"TARGET_ZBB\"\n-  { return TARGET_64BIT ? \"<bitmanip_insn>w\\t%0,%1\" : \"<bitmanip_insn>\\t%0,%1\"; }\n+  \"<bitmanip_insn>%~\\t%0,%1\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -201,7 +201,7 @@\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ZBB\"\n-  { return TARGET_64BIT ? \"ror%i2w\\t%0,%1,%2\" : \"ror%i2\\t%0,%1,%2\"; }\n+  \"ror%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotrdi3\"\n@@ -225,7 +225,7 @@\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ZBB\"\n-  { return TARGET_64BIT ? \"rolw\\t%0,%1,%2\" : \"rol\\t%0,%1,%2\"; }\n+  \"rol%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotldi3\""}, {"sha": "22d0f6d604c2f574cdd4928c75a487e0bf26722c", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=473d7aad848fe6ec151e7445e06c6e06ee4bd576", "patch": "@@ -3731,12 +3731,22 @@ riscv_memmodel_needs_release_fence (enum memmodel model)\n    'i'\tPrint i if the operand is not a register.\n    'S'\tPrint shift-index of single-bit mask OP.\n    'T'\tPrint shift-index of inverted single-bit mask OP.\n+   '~'\tPrint w if TARGET_64BIT is true; otherwise not print anything.\n \n    Note please keep this list and the list in riscv.md in sync.  */\n \n static void\n riscv_print_operand (FILE *file, rtx op, int letter)\n {\n+  /* `~` does not take an operand so op will be null\n+     Check for before accessing op.\n+  */\n+  if (letter == '~')\n+    {\n+      if (TARGET_64BIT)\n+\tfputc('w', file);\n+      return;\n+    }\n   machine_mode mode = GET_MODE (op);\n   enum rtx_code code = GET_CODE (op);\n \n@@ -3812,6 +3822,13 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n     }\n }\n \n+/* Implement TARGET_PRINT_OPERAND_PUNCT_VALID_P */\n+static bool\n+riscv_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '~');\n+}\n+\n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n \n static void\n@@ -5900,6 +5917,8 @@ riscv_init_libfuncs (void)\n #define TARGET_PRINT_OPERAND riscv_print_operand\n #undef TARGET_PRINT_OPERAND_ADDRESS\n #define TARGET_PRINT_OPERAND_ADDRESS riscv_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P riscv_print_operand_punct_valid_p\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS riscv_setup_incoming_varargs"}, {"sha": "30cd07dc6f50ff97e00c80533b2cc7c7d6a65479", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473d7aad848fe6ec151e7445e06c6e06ee4bd576/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=473d7aad848fe6ec151e7445e06c6e06ee4bd576", "patch": "@@ -32,6 +32,7 @@\n ;; i -- Print i if the operand is not a register.\n ;; S -- Print shift-index of single-bit mask OP.\n ;; T -- Print shift-index of inverted single-bit mask OP.\n+;; ~ -- Print w if TARGET_64BIT is true; otherwise not print anything.\n \n (define_c_enum \"unspec\" [\n   ;; Override return address for exception handling.\n@@ -312,7 +313,7 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \" r,r\")\n \t\t (match_operand:SI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"add%i2w\\t%0,%1,%2\" : \"add%i2\\t%0,%1,%2\"; }\n+  \"add%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -452,7 +453,7 @@\n \t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \" rJ\")\n \t\t  (match_operand:SI 2 \"register_operand\" \"  r\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"subw\\t%0,%z1,%2\" : \"sub\\t%0,%z1,%2\"; }\n+  \"sub%~\\t%0,%z1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -568,7 +569,7 @@\n   [(set (match_operand:SI         0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \" r\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"negw\\t%0,%1\" : \"neg\\t%0,%1\"; }\n+  \"neg%~\\t%0,%1\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -613,7 +614,7 @@\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t (match_operand:SI 2 \"register_operand\" \" r\")))]\n   \"TARGET_MUL\"\n-  { return TARGET_64BIT ? \"mulw\\t%0,%1,%2\" : \"mul\\t%0,%1,%2\"; }\n+  \"mul%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -883,7 +884,7 @@\n \t(any_div:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t    (match_operand:SI 2 \"register_operand\" \" r\")))]\n   \"TARGET_DIV\"\n-  { return TARGET_64BIT ? \"<insn>%i2w\\t%0,%1,%2\" : \"<insn>%i2\\t%0,%1,%2\"; }\n+  \"<insn>%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -1605,7 +1606,7 @@\n \t(plus:HI (match_operand:HISI 1 \"register_operand\" \" r,r\")\n \t\t (match_operand:HISI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"add%i2w\\t%0,%1,%2\" : \"add%i2\\t%0,%1,%2\"; }\n+  \"add%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -1787,7 +1788,7 @@\n     operands[2] = GEN_INT (INTVAL (operands[2])\n \t\t\t   & (GET_MODE_BITSIZE (SImode) - 1));\n \n-  return TARGET_64BIT ? \"<insn>%i2w\\t%0,%1,%2\" : \"<insn>%i2\\t%0,%1,%2\";\n+  return \"<insn>%i2%~\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")])"}]}