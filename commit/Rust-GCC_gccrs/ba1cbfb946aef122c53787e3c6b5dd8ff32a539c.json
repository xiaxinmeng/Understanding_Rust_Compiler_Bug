{"sha": "ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExY2JmYjk0NmFlZjEyMmM1Mzc4N2UzYzZiNWRkOGZmMzJhNTM5Yw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T18:14:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:14:24Z"}, "message": "debug.adb: Update flags documentation\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\t    Cyrille Comar  <comar@adacore.com>\n\t    Ben Brosgol  <brosgol@adacore.com>\n\n\t* debug.adb:  Update flags documentation\n\n        * gnat_ugn.texi: Add documentation for new -gnatwq switch\n        Clean up documentation for several other warning switches\n        Clarify how task stack size can be specified with various\n        versions of Windows.\n        Add note that -gnatVo includes ranges including loops\n\tAdd documentation for -gnatL switch\n\tAdd note on elaboration warning for initializing variables\n\tAdd documentation for new -gnatwt warning switch\n\tDocument new form of pragma Warnings (On|Off, string)\n\tAdd comment on use of pragma Warnings to control warnings\n\tAdd documentation for -gnatjnn switch\n\tModify section on interfacing with C for VMS 64-bit.\n\tAdd doc for -gnatVe/E\n\tAdd documentation of new warning flags -gnatww/-gnatwW\n\tAdd warnings about address clause overlays to list of warnings\n\t(Exception Handling Control): Document that the option --RTS must be\n\tused consistently for gcc and gnatbind.\n\tClarify that inlining is not always possible\n\tUpdate documentation on pragma Unchecked_Union.\n\n\t* gnat_rm.texi: \n\tAdd documentation for new extended version of pragma Obsolescent\n\tAdd documentation for implementation defined attribute 'Stub_Type.\n\tAdd note on use of Volatile in asm statements\n\tAdd documentation on use of pragma Unreferenced in context clause\n\tDocument new form of pragma Warnings (On|Off, pattern)\n\tDocument pragma Wide_Character_Encoding\n\tAdd note that pragma Restrictions (No_Elaboration_Code) is only fully\n\tenforced if code generation is active.\n\tAdd section on pragma Suppress to document GNAT specific check\n\tAlignment_Check\n\tClarify difference between No_Dispatching_Calls & No_Dispatch.\n\tAdd documentation for pragma Restrictions (No_Elaboration_Code)\n\n\t* gnat-style.texi: \n\tAdd comments on layout of subprogram local variables in the\n\tpresence of nested subprograms.\n\n        * ug_words: Resync.\n\n\t* elists.ads: Minor reformatting\n\tNode returns Node_Or_Entity_Id (doc change only)\n\n\t* xgnatugn.adb: Replace ACADEMICEDITION with GPLEDITION\n\n\t* g-arrspl.ads (Create): Update comments.\n\n\t* sem.ads: Add details on the handling of the scope stack.\n\n        * usage.adb: Update documentation.\n\n\t* validsw.ads, validsw.adb: \n\tAdd definition of Validity_Check_Components and implement -gnatVe/E\n\n        * vms_data.ads: Add missing VMS qualifiers.\n\n\t* s-addope.ads: Add documentation on overflow and divide by zero\n\nFrom-SVN: r118328", "tree": {"sha": "ad6eccb3bbe4d254d8f30c907aedfba6fc19c409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad6eccb3bbe4d254d8f30c907aedfba6fc19c409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/comments", "author": null, "committer": null, "parents": [{"sha": "ab31b1a60faffd5a6fbec3502ee62605a67fd91c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab31b1a60faffd5a6fbec3502ee62605a67fd91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab31b1a60faffd5a6fbec3502ee62605a67fd91c"}], "stats": {"total": 1325, "additions": 1015, "deletions": 310}, "files": [{"sha": "d7dd11e41ba27426a8e97b00caa74be325e42a3f", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,8 +104,8 @@ package body Debug is\n    --  d.i\n    --  d.j\n    --  d.k\n-   --  d.l\n-   --  d.m\n+   --  d.l  Use Ada 95 semantics for limited function returns\n+   --  d.m  For -gnatl, print full source only for main unit\n    --  d.n\n    --  d.o\n    --  d.p\n@@ -115,11 +115,38 @@ package body Debug is\n    --  d.t\n    --  d.u\n    --  d.v\n-   --  d.w\n+   --  d.w  Do not check for infinite while loops\n    --  d.x  No exception handlers\n    --  d.y\n    --  d.z\n \n+   --  d.A\n+   --  d.B\n+   --  d.C\n+   --  d.D\n+   --  d.E\n+   --  d.F\n+   --  d.G\n+   --  d.H\n+   --  d.I\n+   --  d.J\n+   --  d.K\n+   --  d.L\n+   --  d.M\n+   --  d.N\n+   --  d.O\n+   --  d.P\n+   --  d.Q\n+   --  d.R\n+   --  d.S\n+   --  d.T\n+   --  d.U\n+   --  d.V\n+   --  d.W\n+   --  d.X\n+   --  d.Y\n+   --  d.Z\n+\n    --  d1   Error msgs have node numbers where possible\n    --  d2   Eliminate error flags in verbose form error messages\n    --  d3   Dump bad node in Comperr on an abort\n@@ -133,7 +160,7 @@ package body Debug is\n    --  Debug flags for binder (GNATBIND)\n \n    --  da  All links (including internal units) listed if there is a cycle\n-   --  db\n+   --  db  Output information from Better_Choice\n    --  dc  List units as they are chosen\n    --  dd\n    --  de  Elaboration dependencies including system units\n@@ -146,7 +173,7 @@ package body Debug is\n    --  dl\n    --  dm\n    --  dn  List details of manipulation of Num_Pred values\n-   --  do\n+   --  do  Use old preference for elaboration order\n    --  dp\n    --  dq\n    --  dr\n@@ -403,6 +430,8 @@ package body Debug is\n    --       in preelaborable packages, but this restriction is a huge pain,\n    --       especially in the predefined library units.\n \n+   --  dQ   needs full documentation ???\n+\n    --  dR   Bypass the check for a proper version of s-rpc being present\n    --       to use the -gnatz? switch. This allows debugging of the use\n    --       of stubs generation without needing to have GLADE (or some\n@@ -445,6 +474,19 @@ package body Debug is\n    --       in seriously non-conforming behavior, but is useful sometimes\n    --       when tracking down handling of complex expressions.\n \n+   --  d.l  Use Ada 95 semantics for limited function returns. This may be\n+   --       used to work around the incompatibility introduced by AI-318-2.\n+   --       It is useful only in -gnat05 mode.\n+\n+   --  d.m  When -gnatl is used, the normal output includes full listings of\n+   --       all files in the extended main source (body/spec/subunits). If this\n+   --       debug switch is used, then the full listing is given only for the\n+   --       main source (this corresponds to a previous behavior of -gnatl and\n+   --       is used for running the ACATS tests).\n+\n+   --  d.w  This flag turns off the scanning of while loops to detect possible\n+   --       infinite loops.\n+\n    --  d.x  No exception handlers in generated code. This causes exception\n    --       handlers to be eliminated from the generated code. They are still\n    --       fully compiled and analyzed, they just get eliminated from the\n@@ -519,6 +561,12 @@ package body Debug is\n    --      the algorithm used to determine a correct order of elaboration. This\n    --      is useful in diagnosing any problems in its behavior.\n \n+   --  do  Use old elaboration order preference. The new preference rules\n+   --      prefer specs with no bodies to specs with bodies, and between two\n+   --      specs with bodies, prefers the one whose body is closer to being\n+   --      able to be elaborated. This is a clear improvement, but we provide\n+   --      this debug flag in case of regressions.\n+\n    --  du  List unit name and file name for each unit as it is read in\n \n    --  dx  Force the binder to read (and then ignore) the xref information"}, {"sha": "d68d66d2f2e767d0a3e71a30244ca907aa0402bb", "filename": "gcc/ada/elists.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Felists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Felists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.ads?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,7 +86,7 @@ package Elists is\n    function Elmts_Address return System.Address;\n    --  Return address of Elmts table (used in Back_End for Gigi call)\n \n-   function Node (Elmt : Elmt_Id) return Node_Id;\n+   function Node (Elmt : Elmt_Id) return Node_Or_Entity_Id;\n    pragma Inline (Node);\n    --  Returns the value of a given list element. Returns Empty if Elmt\n    --  is set to No_Elmt.\n@@ -98,13 +98,13 @@ package Elists is\n \n    function First_Elmt (List : Elist_Id) return Elmt_Id;\n    pragma Inline (First_Elmt);\n-   --  Obtains the first element of the given element list or, if the\n-   --  list has no items, then No_Elmt is returned.\n+   --  Obtains the first element of the given element list or, if the list has\n+   --  no items, then No_Elmt is returned.\n \n    function Last_Elmt (List : Elist_Id) return Elmt_Id;\n    pragma Inline (Last_Elmt);\n-   --  Obtains the last element of the given element list or, if the\n-   --  list has no items, then No_Elmt is returned.\n+   --  Obtains the last element of the given element list or, if the list has\n+   --  no items, then No_Elmt is returned.\n \n    function Next_Elmt (Elmt : Elmt_Id) return Elmt_Id;\n    pragma Inline (Next_Elmt);"}, {"sha": "07209bc6161f62edd433cebd63ee2b58bb8b8452", "filename": "gcc/ada/g-arrspl.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fg-arrspl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fg-arrspl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-arrspl.ads?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,6 +90,10 @@ package GNAT.Array_Split is\n    --  is a sequence of Element along which to split the array. The source\n    --  array is sliced at separator boundaries. The separators are not\n    --  included as part of the resulting slices.\n+   --\n+   --  Note that if From is terminated by a separator an extra empty element\n+   --  is added to the slice set. If From only contains a separator the slice\n+   --  set contains two empty elements.\n \n    procedure Create\n      (S          : out Slice_Set;"}, {"sha": "701897432d07aa82c0553c9a9fd3a07e50f2fbc2", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -712,7 +712,7 @@ alternative forms for the above spec are:\n @item\n Function and procedure bodies should usually be sorted alphabetically. Do\n not attempt to sort them in some logical order by functionality. For a\n-sequence of subrpgroams specs, a general alphabetical sorting is also\n+sequence of subprogram specs, a general alphabetical sorting is also\n usually appropriate, but occasionally it makes sense to group by major\n function, with appropriate headers.\n \n@@ -749,7 +749,8 @@ A sequence of declarations may optionally be separated from the following\n begin by a blank line.  Just as we optionally allow blank lines in general\n between declarations, this blank line should be present only if it improves\n readability. Generally we avoid this blank line if the declarative part is\n-small (one or two lines) and we include it if the declarative part is long.\n+small (one or two lines) and the body has no blank lines, and we include it\n+if the declarative part is long or if the body has blank lines.\n \n @item\n If the declarations in a subprogram contain at least one nested\n@@ -766,8 +767,78 @@ subprogram, there is a comment line and a blank line:\n @end group\n @end smallexample\n \n+@item\n+When nested subprograms are present, variables that are referenced by any\n+nested subprogram should precede the nested subprogram specs. For variables\n+that are not referenced by nested procedures, the declarations can either also\n+be before any of the nested subprogram specs (this is the old style, more\n+generally used). Or then can come just before the begin, with a header. The\n+following example shows the two possible styles:\n+\n+@smallexample @c adanocomment\n+@group\n+    procedure Style1 is\n+       Var_Referenced_In_Nested      : Integer;\n+       Var_Referenced_Only_In_Style1 : Integer;\n+\n+       proc Nested;\n+       --  Comments ...\n+\n+\n+       ------------\n+       -- Nested --\n+       ------------\n+\n+       procedure Nested is\n+       begin\n+          ...\n+       end Nested;\n+\n+    --  Start of processing for Style1\n+\n+    begin\n+       ...\n+    end Style1;\n+\n+@end group\n+\n+@group\n+    procedure Style2 is\n+       Var_Referenced_In_Nested : Integer;\n+\n+       proc Nested;\n+       --  Comments ...\n+\n+       ------------\n+       -- Nested --\n+       ------------\n+\n+       procedure Nested is\n+       begin\n+          ...\n+       end Nested;\n+\n+       --  Local variables\n+\n+       Var_Referenced_Only_In_Style2 : Integer;\n+\n+    --  Start of processing for Style2\n+\n+    begin\n+       ...\n+    end Style2;\n+\n+@end group\n+@end smallexample\n+\n+@noindent\n+For new code, we generally prefer Style2, but we do not insist on\n+modifying all legacy occurrences of Style1, which is still much\n+more common in the sources.\n+\n @end itemize\n \n+\n @c  -------------------------------------------------------------------------\n @node    Packages, Program Structure, Subprograms, Top\n @section Packages and Visibility Rules"}, {"sha": "bf2d61ddc087782ea30ffc4d8a30c10d456b8d22", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 265, "deletions": 85, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -8,7 +8,7 @@\n @c                                                                            o\n @c                              G N A T _ RM                                  o\n @c                                                                            o\n-@c              Copyright (C) 1995-2005 Free Software Foundation              o\n+@c              Copyright (C) 1995-2006 Free Software Foundation              o\n @c                                                                            o\n @c                                                                            o\n @c  GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).    o\n@@ -17,8 +17,7 @@\n \n @setfilename gnat_rm.info\n \n-@set FSFEDITION\n-\n+@set EDITION GNAT\n @settitle GNAT Reference Manual\n \n @setchapternewpage odd\n@@ -176,6 +175,7 @@ Implementation Defined Pragmas\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n * Pragma Subtitle::\n+* Pragma Suppress::\n * Pragma Suppress_All::\n * Pragma Suppress_Exception_Locations::\n * Pragma Suppress_Initialization::\n@@ -196,6 +196,7 @@ Implementation Defined Pragmas\n * Pragma Volatile::\n * Pragma Warnings::\n * Pragma Weak_External::\n+* Pragma Wide_Character_Encoding::\n \n Implementation Defined Attributes\n \n@@ -234,6 +235,7 @@ Implementation Defined Attributes\n * Safe_Large::\n * Small::\n * Storage_Unit::\n+* Stub_Type::\n * Target_Name::\n * Tick::\n * To_Address::\n@@ -716,6 +718,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n * Pragma Subtitle::\n+* Pragma Suppress::\n * Pragma Suppress_All::\n * Pragma Suppress_Exception_Locations::\n * Pragma Suppress_Initialization::\n@@ -736,6 +739,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Volatile::\n * Pragma Warnings::\n * Pragma Weak_External::\n+* Pragma Wide_Character_Encoding::\n @end menu\n \n @node Pragma Abort_Defer\n@@ -3052,39 +3056,89 @@ will always generate an invalid value if one exists.\n Syntax:\n \n @smallexample @c ada\n-pragma Obsolescent [(static_string_EXPRESSION [,Ada_05])];\n+pragma Obsolescent\n+  (Entity => NAME [, static_string_EXPRESSION [,Ada_05]]);\n @end smallexample\n \n @noindent\n-This pragma can occur immediately following a subprogram\n-declaration and indicates that the associated function or procedure\n+This pragma can occur immediately following a declaration of an entity,\n+including the case of a record component, and usually the Entity name\n+must match the name of the entity declared by this declaration.\n+Alternatively, the pragma can immediately follow an\n+enumeration type declaration, where the entity argument names one of the\n+enumeration literals.\n+\n+This pragma is used to indicate that the named entity\n is considered obsolescent and should not be used. Typically this is\n used when an API must be modified by eventually removing or modifying\n-existing subprograms. The pragma can be used at an intermediate stage\n-when the subprogram is still present, but will be removed later.\n+existing subprograms or other entities. The pragma can be used at an\n+intermediate stage when the entity is still present, but will be\n+removed later.\n \n The effect of this pragma is to output a warning message on\n a call to a program thus marked that the\n subprogram is obsolescent if the appropriate warning option in the\n-compiler is activated. If a parameter is present, then a second\n+compiler is activated. If the string parameter is present, then a second\n warning message is given containing this text.\n In addition, a call to such a program is considered a violation of\n pragma Restrictions (No_Obsolescent_Features).\n \n This pragma can also be used as a program unit pragma for a package,\n-in which case it indicates that the entire package is considered\n+in which case the entity name is the name of the package, and the\n+pragma indicates that the entire package is considered\n obsolescent. In this case a client @code{with}'ing such a package\n violates the restriction, and the @code{with} statement is\n flagged with warnings if the warning option is set.\n \n-If the optional second parameter is present (which must be exactly\n+If the optional third parameter is present (which must be exactly\n the identifier Ada_05, no other argument is allowed), then the\n indication of obsolescence applies only when compiling in Ada 2005\n mode. This is primarily intended for dealing with the situations\n in the predefined library where subprograms or packages\n have become defined as obsolescent in Ada 2005\n (e.g. in Ada.Characters.Handling), but may be used anywhere.\n \n+The following examples show typical uses of this pragma:\n+\n+@smallexample @c ada\n+package p is\n+   pragma Obsolescent\n+     (Entity => p, \"use pp instead of p\");\n+end p;\n+\n+package q is\n+   procedure q2;\n+   pragma Obsolescent\n+     (Entity => q2, \"use q2new instead\");\n+\n+   type R is new integer;\n+   pragma Obsolescent\n+     (Entity => R, \"use RR in Ada 2005\", Ada_05);\n+\n+   type M is record\n+      F1 : Integer;\n+      F2 : Integer;\n+      pragma Obsolescent (Entity => F2);\n+      F3 : Integer;\n+   end record;\n+\n+   type E is (a, bc, 'd', quack);\n+   pragma Obsolescent (Entity => bc)\n+   pragma Obsolescent (Entity => 'd')\n+\n+   function \"+\"\n+     (a, b : character) return character;\n+   pragma Obsolescent (Entity => \"+\");\n+end;\n+@end smallexample\n+\n+@noindent\n+In an earlier version of GNAT, the Entity parameter was not required,\n+and this form is still accepted for compatibility purposes. If the\n+Entity parameter is omitted, then the pragma applies to the declaration\n+immediately preceding the pragma (this form cannot be used for the\n+enumeration literal case).\n+\n @node Pragma Passive\n @unnumberedsec Pragma Passive\n @findex Passive\n@@ -3718,6 +3772,24 @@ pragma Subtitle ([Subtitle =>] STRING_LITERAL);\n This pragma is recognized for compatibility with other Ada compilers\n but is ignored by GNAT@.\n \n+@node Pragma Suppress\n+@unnumberedsec Pragma Suppress\n+@findex Suppress\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Suppress (Identifier [, [On =>] Name]);\n+@end smallexample\n+\n+@noindent\n+This is a standard pragma, and supports all the check names required in\n+the RM. It is included here because GNAT recognizes one additional check\n+name: @code{Alignment_Check} which can be used to suppress alignment checks\n+on addresses used in address clauses. Such checks can also be suppressed\n+by suppressing range checks, but the specific use of @code{Alignment_Check}\n+allows suppression of alignment checks without suppressing other range checks.\n+\n @node Pragma Suppress_All\n @unnumberedsec Pragma Suppress_All\n @findex Suppress_All\n@@ -3966,64 +4038,12 @@ pragma Unchecked_Union (first_subtype_local_NAME);\n @end smallexample\n \n @noindent\n-This pragma is used to declare that the specified type should be represented\n-in a manner\n-equivalent to a C union type, and is intended only for use in\n-interfacing with C code that uses union types.  In Ada terms, the named\n-type must obey the following rules:\n-\n-@itemize @bullet\n-@item\n-It is a non-tagged non-limited record type.\n-@item\n-It has a single discrete discriminant with a default value.\n-@item\n-The component list consists of a single variant part.\n-@item\n-Each variant has a component list with a single component.\n-@item\n-No nested variants are allowed.\n-@item\n-No component has an explicit default value.\n-@item\n-No component has a non-static constraint.\n-@end itemize\n-\n-@noindent\n-In addition, given a type that meets the above requirements, the\n-following restrictions apply to its use throughout the program:\n-\n-@itemize @bullet\n-@item\n-The discriminant name can be mentioned only in an aggregate.\n-@item\n-No subtypes may be created of this type.\n-@item\n-The type may not be constrained by giving a discriminant value.\n-@item\n-The type cannot be passed as the actual for a generic formal with a\n-discriminant.\n-@end itemize\n-\n-@noindent\n-Equality and inequality operations on @code{unchecked_unions} are not\n-available, since there is no discriminant to compare and the compiler\n-does not even know how many bits to compare.  It is implementation\n-dependent whether this is detected at compile time as an illegality or\n-whether it is undetected and considered to be an erroneous construct.  In\n-GNAT, a direct comparison is illegal, but GNAT does not attempt to catch\n-the composite case (where two composites are compared that contain an\n-unchecked union component), so such comparisons are simply considered\n-erroneous.\n-\n-The layout of the resulting type corresponds exactly to a C union, where\n-each branch of the union corresponds to a single variant in the Ada\n-record.  The semantics of the Ada program is not changed in any way by\n-the pragma, i.e.@: provided the above restrictions are followed, and no\n-erroneous incorrect references to fields or erroneous comparisons occur,\n-the semantics is exactly as described by the Ada reference manual.\n-Pragma @code{Suppress (Discriminant_Check)} applies implicitly to the\n-type and the default convention is C.\n+This pragma is used to specify a representation of a record type that is\n+equivalent to a C union. It was introduced as a GNAT implementation defined\n+pragma in the GNAT Ada 95 mode. Ada 2005 includes an extended version of this\n+pragma, making it language defined, and GNAT fully implements this extended\n+version in all language modes (Ada 83, Ada 95, and Ada 2005). For full\n+details, consult the Ada 2005 RM, section 8.3.3.\n \n @node Pragma Unimplemented_Unit\n @unnumberedsec Pragma Unimplemented_Unit\n@@ -4078,6 +4098,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Unreferenced (local_NAME @{, local_NAME@});\n+pragma Unreferenced (library_unit_NAME @{, library_unit_NAME@});\n @end smallexample\n \n @noindent\n@@ -4112,6 +4133,12 @@ declaration, then this pragma should not be used (calls from another\n unit would not be flagged); pragma Obsolescent can be used instead\n for this purpose, see @xref{Pragma Obsolescent}.\n \n+The second form of pragma @code{Unreferenced} is used within a context\n+clause. In this case the arguments must be unit names of units previously\n+mentioned in @code{with} clauses (similar to the usage of pragma\n+@code{Elaborate_All}. The effect is to suppress warnings about unreferenced\n+units.\n+\n @node Pragma Unreserve_All_Interrupts\n @unnumberedsec Pragma Unreserve_All_Interrupts\n @findex Unreserve_All_Interrupts\n@@ -4274,8 +4301,10 @@ Dec Ada 83.\n Syntax:\n \n @smallexample @c ada\n-pragma Warnings (On | Off [, local_NAME]);\n+pragma Warnings (On | Off);\n+pragma Warnings (On | Off, local_NAME);\n pragma Warnings (static_string_EXPRESSION);\n+pragma Warnings (On | Off, static_string_EXPRESSION);\n @end smallexample\n \n @noindent\n@@ -4286,14 +4315,14 @@ current unit.  If generation of warnings is turned off using this\n pragma, then no warning messages are output, regardless of the\n setting of the command line switches.\n \n-The form with a single argument is a configuration pragma.\n+The form with a single argument may be used as a configuration pragma.\n \n If the @var{local_NAME} parameter is present, warnings are suppressed for\n the specified entity.  This suppression is effective from the point where\n it occurs till the end of the extended scope of the variable (similar to\n the scope of @code{Suppress}).\n \n-The form with a static_string_EXPRESSION argument provides more precise\n+The form with a single static_string_EXPRESSION argument provides more precise\n control over which warnings are active. The string is a list of letters\n specifying which warnings are to be activated and which deactivated. The\n code for these letters is the same as the string used in the command\n@@ -4326,7 +4355,7 @@ l   turn on warnings for missing elaboration pragma\n L   turn off warnings for missing elaboration pragma\n m   turn on warnings for variable assigned but not read\n M   turn off warnings for variable assigned but not read\n-n   normal warning mode (cancels s/e)\n+n   normal warning mode (cancels -gnatws/-gnatwe)\n o   turn on warnings for address clause overlay\n O   turn off warnings for address clause overlay\n p   turn on warnings for ineffective pragma Inline\n@@ -4338,6 +4367,8 @@ u   turn on warnings for unused entity\n U   turn off warnings for unused entity\n v   turn on warnings for unassigned variable\n V   turn off warnings for unassigned variable\n+w   turn on warnings for wrong low bound assumption\n+W   turn off warnings for wrong low bound assumption\n x   turn on warnings for export/import\n X   turn off warnings for export/import\n y   turn on warnings for Ada 2005 incompatibility\n@@ -4351,7 +4382,39 @@ The specified warnings will be in effect until the end of the program\n or another pragma Warnings is encountered. The effect of the pragma is\n cumulative. Initially the set of warnings is the standard default set\n as possibly modified by compiler switches. Then each pragma Warning\n-modifies this set of warnings as specified.\n+modifies this set of warnings as specified. This form of the pragma may\n+also be used as a configuration pragma.\n+\n+The fourth form, with an On|Off parameter and a string, is used to\n+control individual messages, based on their text. The string argument\n+is a pattern that is used to match against the text of individual\n+warning messages (not including the initial \"warnings: \" tag).\n+\n+The pattern may start with an asterisk, which matches otherwise unmatched\n+characters at the start of the message, and it may also end with an asterisk\n+which matches otherwise unmatched characters at the end of the message. For\n+example, the string \"*alignment*\" could be used to match any warnings about\n+alignment problems. Within the string, the sequence \"*\" can be used to match\n+any sequence of characters enclosed in quotation marks. No other regular\n+expression notations are permitted. All characters other than asterisk in\n+these three specific cases are treated as literal characters in the match.\n+\n+There are two ways to use this pragma. The OFF form can be used as a\n+configuration pragma. The effect is to suppress all warnings (if any)\n+that match the pattern string throughout the compilation.\n+\n+The second usage is to suppress a warning locally, and in this case, two\n+pragmas must appear in sequence:\n+\n+@smallexample @c ada\n+pragma Warnings (Off, Pattern);\n+.. code where given warning is to be suppressed\n+pragma Warnings (On, Pattern);\n+@end smallexample\n+\n+@noindent\n+In this usage, the pattern string must match in the Off and On pragmas,\n+and at least one matching warning must be suppressed.\n \n @node Pragma Weak_External\n @unnumberedsec Pragma Weak_External\n@@ -4404,6 +4467,32 @@ package body External_Module is\n end External_Module;\n @end smallexample\n \n+@node Pragma Wide_Character_Encoding\n+@unnumberedsec Pragma Wide_Character_Encoding\n+@findex Wide_Character_Encoding\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Wide_Character_Encoding (IDENTIFIER | CHRARACTER_LITERAL);\n+@end smallexample\n+\n+@noindent\n+This pragma specifies the wide character encoding to be used in program\n+source text appearing subsequently. It is a configuration pragma, but may\n+also be used at any point that a pragma is allowed, and it is permissible\n+to have more than one such pragma in a file, allowing multiple encodings\n+to appear within the same file.\n+\n+The argument can be an identifier or a character literal. In the identifier\n+case, it is one of @code{HEX}, @code{UPPER}, @code{SHIFT_JIS},\n+@code{EUC}, @code{UTF8}, or @code{BRACKETS}. In the character literal\n+case it is correspondingly one of the characters h,u,s,e,8,b.\n+\n+Note that when the pragma is used within a file, it affects only the\n+encoding within that file, and does not affect withed units, specs,\n+or subunits.\n+\n @node Implementation Defined Attributes\n @chapter Implementation Defined Attributes\n Ada 95 defines (throughout the Ada 95 reference manual,\n@@ -4459,6 +4548,7 @@ consideration, you should minimize the use of these attributes.\n * Safe_Large::\n * Small::\n * Storage_Unit::\n+* Stub_Type::\n * Target_Name::\n * Tick::\n * To_Address::\n@@ -5041,6 +5131,27 @@ this attribute when applied to floating-point types.\n @code{Standard'Storage_Unit} (@code{Standard} is the only permissible\n prefix) provides the same value as @code{System.Storage_Unit}.\n \n+@node Stub_Type\n+@unnumberedsec Stub_Type\n+@findex Stub_Type\n+@noindent\n+The GNAT implementation of remote access-to-classwide types is\n+organised as described in AARM section E.4 (20.t): a value of an RACW type\n+(designating a remote object) is represented as a normal access\n+value, pointing to a \"stub\" object which in turn contains the\n+necessary information to contact the designated remote object. A\n+call on any dispatching operation of such a stub object does the\n+remote call, if necessary, using the information in the stub object\n+to locate the target partition, etc.\n+\n+For a prefix @code{T} that denotes a remote access-to-classwide type,\n+@code{T'Stub_Type} denotes the type of the corresponding stub objects.\n+\n+By construction, the layout of @code{T'Stub_Type} is identical to that of\n+type @code{RACW_Stub_Type} declared in the internal implementation-defined\n+unit @code{System.Partition_Interface}. Use of this attribute will create\n+an implicit dependency on this unit.\n+\n @node Target_Name\n @unnumberedsec Target_Name\n @findex Target_Name\n@@ -7376,13 +7487,17 @@ where the certification protocol requires the use of short-circuit\n @findex No_Dispatching_Calls\n This restriction ensures at compile time that the code generated by the\n compiler involves no dispatching calls. The use of this restriction allows the\n-safe use of record extensions and membership tests and ensures that the code \n-contains no indirect calls through a dispatching mechanism. (Note that this\n-includes internally-generated calls created by the compiler, for example in\n-the implementation of the predefined attributes on class-wide objects.) The\n+safe use of record extensions, classwide membership tests and other classwide\n+features not involving implicit dispatching. This restriction ensures that\n+the code contains no indirect calls through a dispatching mechanism. Note that\n+this includes internally-generated calls created by the compiler, for example\n+in the implementation of class-wide objects assignments. The\n membership test is allowed in the presence of this restriction, because its\n-implementation requires no dispatching. The following example indicates\n-constructs that violate this restriction.\n+implementation requires no dispatching.\n+This restriction is comparable to the official Ada restriction\n+@code{No_Dispatch} except that it is a bit less restrictive in that it allows\n+all classwide constructs that do not imply dispatching.\n+The following example indicates constructs that violate this restriction.\n \n @smallexample\n package Pkg is\n@@ -7400,10 +7515,11 @@ end Pkg;\n with Pkg; use Pkg;\n procedure Example is\n   procedure Test (O : T'Class) is\n-    N : Natural := O'Size; --  Error: Dispatching call\n+    N : Natural  := O'Size;--  Error: Dispatching call\n+    C : T'Class := O;      --  Error: implicit Dispatching Call\n   begin\n     if O in DT'Class then  --  OK   : Membership test\n-       Q (DT (O));         --  OK   : Type conversion plus direct call         \n+       Q (DT (O));         --  OK   : Type conversion plus direct call\n     else\n        P (O);              --  Error: Dispatching call\n     end if;\n@@ -7599,6 +7715,14 @@ registry procedure).  This restriction is enforced on\n a unit by unit basis, it need not be obeyed consistently\n throughout a partition.\n \n+In the case of aggregates with others, if the aggregate has a dynamic\n+size, there is no way to eliminate the elaboration code (such dynamic\n+bounds would be incompatible with @code{Preelaborate} in any case. If\n+the bounds are static, then use of this restriction actually modifies\n+the code choice of the compiler to avoid generating a loop, and instead\n+generate the aggregate statically if possible, no matter how many times\n+the data for the others clause must be repeatedly generated.\n+\n It is not possible to precisely document\n the constructs which are compatible with this restriction, since,\n unlike most other restrictions, this is not a restriction on the\n@@ -7617,6 +7741,10 @@ can be done by the loader, and requires no initialization code. It\n is not possible to document the precise conditions under which the\n optimizer can figure this out.\n \n+Note that this the implementation of this restriction requires full\n+code generation. If it is used in conjunction with \"semantics only\"\n+checking, then some cases of violations may be missed.\n+\n @item No_Entry_Queue\n @findex No_Entry_Queue\n This restriction is a declaration that any protected entry compiled in\n@@ -10223,7 +10351,8 @@ Since this source of erroneous behavior can have unfortunate effects, GNAT\n checks (at compile time if possible, generating a warning, or at execution\n time with a run-time check) that the alignment is appropriate.  If the\n run-time check fails, then @code{Program_Error} is raised.  This run-time\n-check is suppressed if range checks are suppressed, or if\n+check is suppressed if range checks are suppressed, or if the special GNAT\n+check Alignment_Check is suppressed, or if\n @code{pragma Restrictions (No_Elaboration_Code)} is in effect.\n \n @findex Export\n@@ -10340,7 +10469,7 @@ conventions, and for example records are laid out in a manner that is\n consistent with C@.  This means that specifying convention C (for example)\n has no effect.\n \n-There are three exceptions to this general rule:\n+There are four exceptions to this general rule:\n \n @itemize @bullet\n \n@@ -10389,6 +10518,14 @@ then the GNAT generated code will treat any nonzero value as true.  For truth\n values generated by GNAT, the conventional value 1 will be used for True, but\n when one of these values is read, any nonzero value is treated as True.\n \n+@item Access types on OpenVMS\n+For 64-bit OpenVMS systems, access types (other than those for unconstrained\n+arrays) are 64-bits long. An exception to this rule is for the case of\n+C-convention access types where there is no explicit size clause present (or\n+inheritied for derived types). In this case, GNAT chooses to make these\n+pointers 32-bits, which provides an easier path for migration of 32-bit legacy\n+code. size clause specifying 64-bits must be used to obtain a 64-bit pointer.\n+\n @end itemize\n \n @node Determining the Representations chosen by GNAT\n@@ -11615,10 +11752,49 @@ On input, brackets coding can also be used for upper half characters,\n e.g.@: @code{[\"C1\"]} for lower case a.  However, on output, brackets notation\n is only used for wide characters with a code greater than @code{16#FF#}.\n \n+Note that brackets coding is not normally used in the context of\n+Wide_Text_IO or Wide_Wide_Text_IO, since it is really just designed as\n+a portable way of encoding source files. In the contect of Wide_Text_IO\n+or Wide_Wide_Text_IO, it can only be used if the file does not contain\n+any instance of the left bracket character other than to encode wide\n+character values using the brackets encoding method. In practice it is\n+expected that some standard wide character encoding method such\n+as UTF-8 will be used for text input output.\n+\n+If brackets notation is used, then any occurrence of a left bracket\n+in the input file which is not the start of a valid wide character\n+sequence will cause Constraint_Error to be raised. It is possible to\n+encode a left bracket as [\"5B\"] and Wide_Text_IO and Wide_Wide_Text_IO\n+input will interpret this as a left bracket.\n+\n+However, when a left bracket is output, it will be output as a left bracket\n+and not as [\"5B\"]. We make this decision because for normal use of\n+Wide_Text_IO for outputting messages, it is unpleasant to clobber left\n+brackets. For example, if we write:\n+\n+@smallexample\n+   Put_Line (\"Start of output [first run]\");\n+@end smallexample\n+\n+@noindent\n+we really do not want to have the left bracket in this message clobbered so\n+that the output reads:\n+\n+@smallexample\n+   Start of output [\"5B\"]first run]\n+@end smallexample\n+\n+@noindent\n+In practice brackets encoding is reasonably useful for normal Put_Line use\n+since we won't get confused between left brackets and wide character\n+sequences in the output. But for input, or when files are written out\n+and read back in, it really makes better sense to use one of the standard\n+encoding methods such as UTF-8.\n+\n @end table\n \n @noindent\n-For the coding schemes other than Hex and Brackets encoding,\n+For the coding schemes other than UTF-8, Hex, or Brackets encoding,\n not all wide character\n values can be represented.  An attempt to output a character that cannot\n be represented using the encoding scheme for the file causes\n@@ -13796,6 +13972,10 @@ optimizations with respect to the instruction specified should be\n suppressed, and that in particular, for an instruction that has outputs,\n the instruction will still be generated, even if none of the outputs are\n used.  See the full description in the GCC manual for further details.\n+Generally it is strongly advisable to use Volatile for any ASM statement\n+that is missing either input or output operands, or when two or more ASM\n+statements appear in sequence, to avoid unwanted optimizations. A warning\n+is generated if this advice is not followed.\n \n The @code{Asm} subprograms may be used in two ways.  First the procedure\n forms can be used anywhere a procedure call would be valid, and"}, {"sha": "480ad9c540edae2c358bbe4888330cb60c285b2b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 396, "deletions": 140, "changes": 536, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -324,8 +324,8 @@ The GNAT Make Program gnatmake\n \n Improving Performance\n * Performance Considerations::\n-* Reducing the Size of Ada Executables with gnatelim::\n-* Reducing the Size of Executables with unused subprogram/data elimination::\n+* Reducing Size of Ada Executables with gnatelim::\n+* Reducing Size of Executables with unused subprogram/data elimination::\n \n Performance Considerations\n * Controlling Run-Time Checks::\n@@ -339,14 +339,14 @@ Performance Considerations\n * Coverage Analysis::\n @end ifset\n \n-Reducing the Size of Ada Executables with gnatelim\n+Reducing Size of Ada Executables with gnatelim\n * About gnatelim::\n * Running gnatelim::\n * Correcting the List of Eliminate Pragmas::\n * Making Your Executables Smaller::\n * Summary of the gnatelim Usage Cycle::\n \n-Reducing the Size of Executables with unused subprogram/data elimination\n+Reducing Size of Executables with unused subprogram/data elimination\n * About unused subprogram/data elimination::\n * Compilation options::\n \n@@ -630,7 +630,7 @@ Compatibility and Porting Guide\n * Compatibility with Other Ada 95 Systems::\n * Representation Clauses::\n @ifset vms\n-* Transitioning from Alpha to I64 OpenVMS::\n+* Transitioning to 64-Bit GNAT for OpenVMS::\n @end ifset\n \n @ifset unw\n@@ -3902,6 +3902,10 @@ For details of the possible selections for @var{c},\n see @ref{Character Set Control}.\n @end ifset\n \n+@item -gnatjnn\n+@cindex @option{-gnatjnn} (@command{gcc})\n+Reformat error messages to fit on nn character lines\n+\n @item -gnatk=@var{n}\n @cindex @option{-gnatk} (@command{gcc})\n Limit file names to @var{n} (1-999) characters ^(@code{k} = krunch)^^.\n@@ -3910,6 +3914,12 @@ Limit file names to @var{n} (1-999) characters ^(@code{k} = krunch)^^.\n @cindex @option{-gnatl} (@command{gcc})\n Output full source listing with embedded error messages.\n \n+@item -gnatL\n+@cindex @option{-gnatL} (@command{gcc})\n+Used in conjunction with -gnatG or -gnatD to intersperse original\n+source lines (as comment lines with line numbers) in the expanded\n+source output.\n+\n @item -gnatm=@var{n}\n @cindex @option{-gnatm} (@command{gcc})\n Limit number of detected error or warning messages to @var{n}\n@@ -4298,24 +4308,47 @@ used the only source lines output are those with errors.\n The @code{l} stands for list.\n @end ifclear\n This switch causes a full listing of\n-the file to be generated. The output might look as follows:\n+the file to be generated. In the case where a body is\n+compiled, the corresponding spec is also listed, along\n+with any subunits. Typical output from compiling a package\n+body @file{p.adb} might look like:\n \n-@smallexample\n+@smallexample @c ada\n @cartouche\n- 1. procedure E is\n- 2.    V : Integer;\n- 3.    funcion X (Q : Integer)\n-       |\n-    >>> Incorrect spelling of keyword \"function\"\n- 4.     return Integer;\n-                      |\n-    >>> \";\" should be \"is\"\n- 5.    begin\n- 6.       return Q + Q;\n- 7.    end;\n- 8. begin\n- 9.    V := X + X;\n-10.end E;\n+ Compiling: p.adb\n+\n+     1. package body p is\n+     2.    procedure a;\n+     3.    procedure a is separate;\n+     4. begin\n+     5.    null\n+               |\n+        >>> missing \";\"\n+\n+     6. end;\n+\n+Compiling: p.ads\n+\n+     1. package p is\n+     2.    pragma Elaborate_Body\n+                                |\n+        >>> missing \";\"\n+\n+     3. end p;\n+\n+Compiling: p-a.adb\n+\n+     1. separate p\n+                |\n+        >>> missing \"(\"\n+\n+     2. procedure a is\n+     3. begin\n+     4.    null\n+               |\n+        >>> missing \";\"\n+\n+     5. end;\n @end cartouche\n @end smallexample\n \n@@ -4326,6 +4359,16 @@ standard output is redirected, a brief summary is written to\n @file{stderr} (standard error) giving the number of error messages and\n warning messages generated.\n \n+@item -^gnatl^OUTPUT_FILE^=file\n+@cindex @option{^-gnatl^OUTPUT_FILE^=fname} (@command{gcc})\n+This has the same effect as @code{-gnatl} except that the output is\n+written to a file instead of to standard output. If the given name\n+@file{fname} does not start with a period, then it is the full name\n+of the file to be written. If @file{fname} is an extension, it is\n+appended to the name of the file being compiled. For example, if\n+file @file{xyz.adb} is compiled with @option{^-gnatl^OUTPUT_FILE^=.lst},\n+then the output is written to file ^xyz.adb.lst^xyz.adb_lst^.\n+\n @item -gnatU\n @cindex @option{-gnatU} (@command{gcc})\n This switch forces all error messages to be preceded by the unique\n@@ -4408,6 +4451,19 @@ List possible interpretations for ambiguous calls\n Additional details on incorrect parameters\n @end itemize\n \n+@item -gnatjnn\n+@cindex @option{-gnatjnn} (@command{gcc})\n+In normal operation mode (or if @option{-gnatj0} is used, then error messages\n+with continuation lines are treated as though the continuation lines were\n+separate messages (and so a warning with two continuation lines counts as\n+three warnings, and is listed as three separate messages).\n+\n+If the @option{-gnatjnn} switch is used with a positive value for nn, then\n+messages are output in a different manner. A message and all its continuation\n+lines are treated as a unit, and count as only one warning or message in the\n+statistics totals. Furthermore, the message is reformatted so that no line\n+is longer than nn characters.\n+\n @item -gnatq\n @cindex @option{-gnatq} (@command{gcc})\n @ifclear vms\n@@ -4495,6 +4551,10 @@ Possible order of elaboration problems\n @item\n Unreachable code\n \n+@item\n+Address clauses with possibly unaligned values, or where an attempt is\n+made to overlay a smaller variable with a larger one.\n+\n @item\n Fixed-point type declarations with a null range\n \n@@ -4612,8 +4672,11 @@ A range in a @code{for} loop that is known to be null or might be null\n @end itemize\n \n @noindent\n-The following switches are available to control the handling of\n-warning messages:\n+The following section lists compiler switches that are available\n+to control the handling of warning messages. It is also possible\n+to excercise much finer control over what warnings are issued and\n+suppressed using the GNAT pragma Warnings, which is documented\n+in the GNAT Reference manual.\n \n @table @option\n @c !sort!\n@@ -4626,7 +4689,8 @@ individually controlled.  The warnings that are not turned on by this\n switch are\n @option{-gnatwd} (implicit dereferencing),\n @option{-gnatwh} (hiding),\n-and @option{-gnatwl} (elaboration warnings).\n+@option{-gnatwl} (elaboration warnings),\n+and @option{-gnatwt} (tracking of deleted conditional code).\n All other optional warnings are turned on.\n \n @item -gnatwA\n@@ -4667,7 +4731,7 @@ Note that this warning does\n not get issued for the use of boolean variables or constants whose\n values are known at compile time, since this is a standard technique\n for conditional compilation in Ada, and this would generate too many\n-``false positive'' warnings.\n+false positive warnings.\n \n This warning option also activates a special test for comparisons using\n the operators ``>='' and`` <=''.\n@@ -4719,7 +4783,8 @@ as errors, and prevent the generation of an object file.\n @cindex Formals, unreferenced\n This switch causes a warning to be generated if a formal parameter\n is not referenced in the body of the subprogram. This warning can\n-also be turned on using @option{-gnatwa} or @option{-gnatwu}.\n+also be turned on using @option{-gnatwa} or @option{-gnatwu}. The\n+default is that these warnings are not generated.\n \n @item -gnatwF\n @emph{Suppress warnings on unreferenced formals.}\n@@ -4794,7 +4859,8 @@ case of Annex J, not all features are flagged. In particular use\n of the renamed packages (like @code{Text_IO}) and use of package\n @code{ASCII} are not flagged, since these are very common and\n would generate many annoying positive warnings. The default is that\n-such warnings are not generated.\n+such warnings are not generated. This warning is also turned on by\n+the use of @option{-gnatwa}.\n \n In addition to the above cases, warnings are also generated for\n GNAT features that have been provided in past versions but which\n@@ -4816,7 +4882,9 @@ This switch disables warnings on use of obsolescent features.\n @emph{Activate warnings on variables that could be constants.}\n @cindex @option{-gnatwk} (@command{gcc})\n This switch activates warnings for variables that are initialized but\n-never modified, and then could be declared constants.\n+never modified, and then could be declared constants. The default is that\n+such warnings are not given.\n+This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwK\n @emph{Suppress warnings on variables that could be constants.}\n@@ -4852,6 +4920,7 @@ whose value is never read. The warning is suppressed for volatile\n variables and also for variables that are renamings of other variables\n or for which an address clause is given.\n This warning can also be turned on using @option{-gnatwa}.\n+The default is that these warnings are not given.\n \n @item -gnatwM\n @emph{Disable warnings on modified but unreferenced variables.}\n@@ -4893,7 +4962,8 @@ another.\n This switch activates warnings for failure of front end inlining\n (activated by @option{-gnatN}) to inline a particular call. There are\n many reasons for not being able to inline a call, including most\n-commonly that the call is too complex to inline.\n+commonly that the call is too complex to inline. The default is\n+that such warnings are not given.\n This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwP\n@@ -4903,12 +4973,31 @@ This switch suppresses warnings on ineffective pragma Inlines. If the\n inlining mechanism cannot inline a call, it will simply ignore the\n request silently.\n \n+@item -gnatwq\n+@emph{Activate warnings on questionable missing parentheses.}\n+@cindex @option{-gnatwq} (@command{gcc})\n+@cindex Parentheses, warnings\n+This switch activates warnings for cases where parentheses are not used and\n+the result is potential ambiguity from a readers point of view. For example\n+(not a > b) when a and b are modular means (not (a) > b) and very likely the\n+programmer intended (not (a > b)). Similarly (-x mod 5) means (-(x mod 5)) and\n+quite likely ((-x) mod 5) was intended. In such situations it seems best to\n+follow the rule of always parenthesizing to make the association clear, and\n+this warning switch warns if such parentheses are not present. The default\n+is that these warnings are not given.\n+This warning can also be turned on using @option{-gnatwa}.\n+\n+@item -gnatwQ\n+@emph{Suppress warnings on questionable missing parentheses.}\n+@cindex @option{-gnatwQ} (@command{gcc})\n+This switch suppresses warnings for cases where the association is not\n+clear and the use of parentheses is preferred.\n+\n @item -gnatwr\n @emph{Activate warnings on redundant constructs.}\n @cindex @option{-gnatwr} (@command{gcc})\n This switch activates warnings for redundant constructs. The following\n is the current list of constructs regarded as redundant:\n-This warning can also be turned on using @option{-gnatwa}.\n \n @itemize @bullet\n @item\n@@ -4931,6 +5020,9 @@ to be non-negative\n Comparison of boolean expressions to an explicit True value.\n @end itemize\n \n+This warning can also be turned on using @option{-gnatwa}.\n+The default is that warnings for redundant constructs are not given.\n+\n @item -gnatwR\n @emph{Suppress warnings on redundant constructs.}\n @cindex @option{-gnatwR} (@command{gcc})\n@@ -4945,6 +5037,22 @@ Note that it does not suppress warnings from the @command{gcc} back end.\n To suppress these back end warnings as well, use the switch @option{-w}\n in addition to @option{-gnatws}.\n \n+@item -gnatwt\n+@emph{Activate warnings for tracking of deleted conditional code.}\n+@cindex @option{-gnatwt} (@command{gcc})\n+@cindex Deactivated code, warnings\n+@cindex Deleted code, warnings\n+This switch activates warnings for tracking of code in conditionals (IF and\n+CASE statements) that is detected to be dead code which cannot be executed, and\n+which is removed by the front end. This warning is off by default, and is not\n+turned on by @option{-gnatwa}, it has to be turned on explicitly. This may be\n+useful for detecting deactivated code in certified applications.\n+\n+@item -gnatwT\n+@emph{Suppress warnings for tracking of deleted conditional code.}\n+@cindex @option{-gnatwT} (@command{gcc})\n+This switch suppresses warnings for tracking of deleted conditional code.\n+\n @item -gnatwu\n @emph{Activate warnings on unused entities.}\n @cindex @option{-gnatwu} (@command{gcc})\n@@ -4981,31 +5089,37 @@ the effect of @option{-gnatwF}).\n This switch activates warnings for access to variables which\n may not be properly initialized. The default is that\n such warnings are generated.\n+This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwV\n @emph{Suppress warnings on unassigned variables.}\n @cindex @option{-gnatwV} (@command{gcc})\n This switch suppresses warnings for access to variables which\n may not be properly initialized.\n \n-@item -gnatwy\n-@emph{Activate warnings for Ada 2005 compatibility issues.}\n-@cindex @option{-gnatwy} (@command{gcc})\n-@cindex Ada 2005 compatibility issues warnings\n-For the most part Ada 2005 is upwards compatible with Ada 95,\n-but there are some exceptions (for example the fact that\n-@code{interface} is now a reserved word in Ada 2005). This\n-switch activates several warnings to help in identifying\n-and correcting such incompatibilities. The default is that\n-these warnings are generated. Note that at one point Ada 2005\n-was called Ada 0Y, hence the choice of character.\n+@item -gnatww\n+@emph{Activate warnings on wrong low bound assumption.}\n+@cindex @option{-gnatww} (@command{gcc})\n+@cindex String indexing warnings\n+This switch activates warnings for indexing an unconstrained string parameter\n+with a literal or S'Length. This is a case where the code is assuming that the\n+low bound is one, which is in general not true (for example when a slice is\n+passed). The default is that such warnings are generated.\n+This warning can also be turned on using @option{-gnatwa}.\n+F\n \n-@item -gnatwY\n-@emph{Disable warnings for Ada 2005 compatibility issues.}\n-@cindex @option{-gnatwY} (@command{gcc})\n-@cindex Ada 2005 compatibility issues warnings\n-This switch suppresses several warnings intended to help in identifying\n-incompatibilities between Ada 95 and Ada 2005.\n+@item -gnatwW\n+@emph{Suppress warnings on wrong low bound assumption.}\n+@cindex @option{-gnatwW} (@command{gcc})\n+This switch activates warnings for indexing an unconstrained string parameter\n+with a literal or S'Length. This warning can also be suppressed by providing\n+an Assert pragma that checks the low bound, for example:\n+\n+@smallexample @c ada\n+   procedure K (S : String) is\n+      pragma Assert (S'First = 1);\n+      ...\n+@end smallexample\n \n @item -gnatwx\n @emph{Activate warnings on Export/Import pragmas.}\n@@ -5018,6 +5132,7 @@ default parameters in a convention C procedure is dubious\n because the C compiler cannot supply the proper default, so\n a warning is issued. The default is that such warnings are\n generated.\n+This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwX\n @emph{Suppress warnings on Export/Import pragmas.}\n@@ -5027,6 +5142,26 @@ The sense of this is that you are telling the compiler that\n you know what you are doing in writing the pragma, and it\n should not complain at you.\n \n+@item -gnatwy\n+@emph{Activate warnings for Ada 2005 compatibility issues.}\n+@cindex @option{-gnatwy} (@command{gcc})\n+@cindex Ada 2005 compatibility issues warnings\n+For the most part Ada 2005 is upwards compatible with Ada 95,\n+but there are some exceptions (for example the fact that\n+@code{interface} is now a reserved word in Ada 2005). This\n+switch activates several warnings to help in identifying\n+and correcting such incompatibilities. The default is that\n+these warnings are generated. Note that at one point Ada 2005\n+was called Ada 0Y, hence the choice of character.\n+This warning can also be turned on using @option{-gnatwa}.\n+\n+@item -gnatwY\n+@emph{Disable warnings for Ada 2005 compatibility issues.}\n+@cindex @option{-gnatwY} (@command{gcc})\n+@cindex Ada 2005 compatibility issues warnings\n+This switch suppresses several warnings intended to help in identifying\n+incompatibilities between Ada 95 and Ada 2005.\n+\n @item -gnatwz\n @emph{Activate warnings on unchecked conversions.}\n @cindex @option{-gnatwz} (@command{gcc})\n@@ -5035,6 +5170,7 @@ This switch activates warnings for unchecked conversions\n where the types are known at compile time to have different\n sizes. The default\n is that such warnings are generated.\n+This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwZ\n @emph{Suppress warnings on unchecked conversions.}\n@@ -5227,6 +5363,18 @@ expressions have valid values. If you use this switch and invalid values\n are present, then the program is erroneous, and wild jumps or memory\n overwriting may occur.\n \n+@item -gnatVe\n+@emph{Validity checks for elementary components.}\n+@cindex @option{-gnatVe} (@command{gcc})\n+In the absence of this switch, assignments to record or array components are\n+not validity checked, even if validity checks for assignments generally\n+(@option{-gnatVc}) are turned on. In Ada, assignment of composite values do not\n+require valid data, but assignment of individual components does. So for\n+example, there is a difference between copying the elements of an array with a\n+slice assignment, compared to assigning element by element in a loop. This\n+switch allows you to turn off validity checking for components, even when they\n+are assigned component by component.\n+\n @item -gnatVf\n @emph{Validity checks for floating-point values.}\n @cindex @option{-gnatVf} (@command{gcc})\n@@ -5276,7 +5424,8 @@ This includes all operators in package @code{Standard},\n the shift operators defined as intrinsic in package @code{Interfaces}\n and operands for attributes such as @code{Pos}. Checks are also made\n on individual component values for composite comparisons, and on the\n-expressions in type conversions and qualified expressions.\n+expressions in type conversions and qualified expressions. Checks are\n+also made on explicit ranges using .. (e.g. slices, loops etc).\n \n @item -gnatVp\n @emph{Validity checks for parameters.}\n@@ -6040,14 +6189,13 @@ this default Ada95 mode without problems (see section above describing the\n use of @option{-gnat83} to run in Ada 83 mode).\n \n In Ada 95 mode, the use of Ada 2005 features will in general cause error\n-messages or warnings. Some specialized releases of GNAT (notably the GAP\n-academic version) operate in Ada 2005 mode by default (see section below\n+messages or warnings. Some specialized releases of GNAT (notably the GPL\n+edition) operate in Ada 2005 mode by default (see section below\n describing the use of @option{-gnat05} to run in Ada 2005 mode). For such\n versions the @option{-gnat95} switch may be used to enforce Ada 95 mode.\n This option also can be used to cancel the effect of a previous\n @option{-gnat83} or @option{-gnat05} switch earlier in the command line.\n \n-\n @item -gnat05 (Ada 2005 mode)\n @cindex @option{-gnat05} (@command{gcc})\n \n@@ -6066,8 +6214,8 @@ generated, reflecting the fact that these new features are otherwise\n unauthorized extensions to Ada 95. The use of the @option{-gnat05}\n switch (or an equivalent pragma) causes these messages to be suppressed.\n \n-Note that some specialized releases of GNAT (notably the GAP academic\n-version) have Ada 2005 mode on by default, and in such environments,\n+Note that some specialized releases of GNAT (notably the GPL edition)\n+have Ada 2005 mode on by default, and in such environments,\n the Ada 2005 features can be used freely without the use of switches.\n \n @end table\n@@ -6303,6 +6451,11 @@ do not have any exact analogies in pure Ada source form. The following\n is a partial list of these special constructions. See the specification\n of package @code{Sprint} in file @file{sprint.ads} for a full list.\n \n+If the switch @option{-gnatL} is used in conjunction with\n+@cindex @option{-gnatL} (@command{gcc})\n+@option{-gnatG}, then the original source lines are interspersed\n+in the expanded source (as comment lines with the original line number).\n+\n @table @code\n @item new @var{xxx} [storage_pool = @var{yyy}]\n Shows the storage pool being used for an allocator.\n@@ -6397,6 +6550,11 @@ Note that @option{-gnatD} actually implies @option{-gnatG}\n automatically, so it is not necessary to give both options.\n In other words @option{-gnatD} is equivalent to @option{-gnatDG}).\n \n+If the switch @option{-gnatL} is used in conjunction with\n+@cindex @option{-gnatL} (@command{gcc})\n+@option{-gnatDG}, then the original source lines are interspersed\n+in the expanded source (as comment lines with the original line number).\n+\n @ifclear vms\n @item -gnatR[0|1|2|3[s]]\n @cindex @option{-gnatR} (@command{gcc})\n@@ -6407,7 +6565,7 @@ the @option{-gnatR} switch). For @option{-gnatR1} (which is the default,\n so @option{-gnatR} with no parameter has the same effect), size and alignment\n information is listed for declared array and record types. For\n @option{-gnatR2}, size and alignment information is listed for all\n-expression information for values that are computed at run time for\n+expressions for values that are computed at run time for\n variant records. These symbolic expressions have a mostly obvious\n format with #n being used to represent the value of the n'th\n discriminant. See source files @file{repinfo.ads/adb} in the\n@@ -6524,6 +6682,11 @@ is available for the target in use (see below).\n @end table\n \n @noindent\n+The same option @option{--RTS} must be used both for @command{gcc}\n+and @command{gnatbind}. Passing this option to @command{gnatmake}\n+(@pxref{Switches for gnatmake}) will ensure the required consistency\n+through the compilation and binding steps.\n+\n The @code{setjmp/longjmp} approach is available on all targets, while\n the @code{zero cost} approach is available on selected targets.\n To determine whether zero cost exceptions can be used for a\n@@ -7326,7 +7489,6 @@ semantics should match as closely as possible the Annex D\n requirements of the Ada RM, and in particular sets the default\n scheduling policy to @code{FIFO_Within_Priorities}.\n \n-\n @item ^-u@var{n}^/DYNAMIC_STACK_USAGE=@var{n}^\n @cindex @option{^-u^/DYNAMIC_STACK_USAGE^} (@code{gnatbind})\n Enable dynamic stack usage, with n result stored and displayed at program\n@@ -8133,7 +8295,6 @@ Prefer linking with object libraries over sharable images, even without\n \n @end table\n \n-\n @node The GNAT Make Program gnatmake\n @chapter The GNAT Make Program @command{gnatmake}\n @findex gnatmake\n@@ -8877,8 +9038,8 @@ elimination feature, which can reduce the size of program executables.\n @ifnottex\n @menu\n * Performance Considerations::\n-* Reducing the Size of Ada Executables with gnatelim::\n-* Reducing the Size of Executables with unused subprogram/data elimination::\n+* Reducing Size of Ada Executables with gnatelim::\n+* Reducing Size of Executables with unused subprogram/data elimination::\n @end menu\n @end ifnottex\n \n@@ -9253,8 +9414,8 @@ specified.\n \n @noindent\n Calls to subprograms in @code{with}'ed units are normally not inlined.\n-To achieve this level of inlining, the following conditions must all be\n-true:\n+To achieve actual inlining (that is, replacement of the call by the code\n+in the body of the subprogram), the following conditions must all be true.\n \n @itemize @bullet\n @item\n@@ -9277,6 +9438,11 @@ The @option{^-gnatn^/INLINE^} switch\n is used in the @command{gcc} command line\n @end itemize\n \n+Even if all these conditions are met, it may not be possible for\n+the compiler to inline the call, due to the length of the body,\n+or features in the body that make it impossible for the compiler\n+to do the inlining.\n+\n Note that specifying the @option{-gnatn} switch causes additional\n compilation dependencies. Consider the following:\n \n@@ -9578,8 +9744,8 @@ the user to determine the distribution of execution time across a program,\n @pxref{Profiling} for details of usage.\n @end ifset\n \n-@node Reducing the Size of Ada Executables with gnatelim\n-@section Reducing the Size of Ada Executables with @code{gnatelim}\n+@node Reducing Size of Ada Executables with gnatelim\n+@section Reducing Size of Ada Executables with @code{gnatelim}\n @findex gnatelim\n \n @noindent\n@@ -9798,8 +9964,8 @@ $ gnatmake ^-f main_prog^/FORCE_COMPILE MAIN_PROG^\n \n @end enumerate\n \n-@node Reducing the Size of Executables with unused subprogram/data elimination\n-@section Reducing the Size of Executables with Unused Subprogram/Data Elimination\n+@node Reducing Size of Executables with unused subprogram/data elimination\n+@section Reducing Size of Executables with Unused Subprogram/Data Elimination\n @findex unused subprogram/data elimination\n \n @noindent\n@@ -9809,6 +9975,7 @@ your executable just by setting options at compilation time.\n @menu\n * About unused subprogram/data elimination::\n * Compilation options::\n+* Example of unused subprogram/data elimination::\n @end menu\n \n @node About unused subprogram/data elimination\n@@ -9822,8 +9989,8 @@ never used by this executable.\n This feature will allow you to eliminate such unused code from your\n executable, making it smaller (in disk and in memory).\n \n-This functionality is only available on native x86 GNU/Linux platform for the\n-moment.\n+This functionality is available on all platforms using elf binary format and\n+having GNU binutils version 2.16.1.\n \n @node Compilation options\n @subsection Compilation options\n@@ -9844,17 +10011,82 @@ function or data in a separate section in the resulting object file.\n Once the objects and static libraries are created with these options, the\n linker can perform the dead code elimination. You can do this by setting\n the @option{-Wl,--gc-sections} option to gcc command or in the\n-@option{-largs} section of gnatmake. This will create the final executable,\n-without including the code and data determined as never accessed.\n+@option{-largs} section of gnatmake. This will perform a garbage collection of\n+code and data never referenced.\n+\n+If the linker performs a partial link (@option{-r} ld linker option), then you\n+will need to provide one or several entry point using the\n+@option{-e} / @option{--entry} ld option.\n \n Note that objects compiled without the @option{-ffunction-sections} and\n @option{-fdata-sections} options can still be linked with the executable.\n However, no dead code elimination will be performed on those objects (they will\n be linked as is).\n \n The GNAT static library is now compiled with -ffunction-sections and\n--fdata-sections. This allows you to eliminate the unused code of the GNAT\n-library from your executable.\n+-fdata-sections on some platforms. This allows you to eliminate the unused code\n+and data of the GNAT library from your executable.\n+\n+@node Example of unused subprogram/data elimination\n+@subsection Example of unused subprogram/data elimination\n+\n+@noindent\n+Here is a simple example:\n+\n+@smallexample @c ada\n+with Aux;\n+\n+procedure Test is\n+begin\n+   Aux.Used (10);\n+end Test;\n+\n+package Aux is\n+   Used_Data   : Integer;\n+   Unused_Data : Integer;\n+\n+   procedure Used   (Data : Integer);\n+   procedure Unused (Data : Integer);\n+end Aux;\n+\n+package body Aux is\n+   procedure Used (Data : Integer) is\n+   begin\n+      Used_Data := Data;\n+   end Used;\n+\n+   procedure Unused (Data : Integer) is\n+   begin\n+      Unused_Data := Data;\n+   end Unused;\n+end Aux;\n+@end smallexample\n+\n+@noindent\n+@code{Unused} and @code{Unused_Data} are never referenced in this code\n+excerpt, and hence they may be safely removed from the final executable.\n+\n+@smallexample\n+$ gnatmake test\n+\n+$ nm test | grep used\n+020015f0 T aux__unused\n+02005d88 B aux__unused_data\n+020015cc T aux__used\n+02005d84 B aux__used_data\n+\n+$ gnatmake test -cargs -fdata-sections -ffunction-sections \\\n+     -largs -Wl,--gc-sections\n+\n+$ nm test | grep used\n+02005350 T aux__used\n+0201ffe0 B aux__used_data\n+@end smallexample\n+\n+@noindent\n+It can be observed that the procedure @code{Unused} and the object\n+@code{Unused_Data} are removed by the linker when using the\n+appropriate options.\n \n @c ********************************\n @node Renaming Files Using gnatchop\n@@ -15778,7 +16010,6 @@ the description of the @command{gnatmetric} switches below.)\n Alternatively, you may use a project file and invoke @command{gnatmetric}\n through the @command{gnat} driver.\n \n-\n The @command{gnatmetric} command has the form\n \n @smallexample\n@@ -16004,7 +16235,6 @@ The number of blank lines\n \n @end table\n \n-\n @node Syntax Metrics Control\n @subsection Syntax Metrics Control\n @cindex Syntax metrics control in @command{gnatmetric}\n@@ -18219,7 +18449,6 @@ user and it is implicitly used for each such declaration:\n    for T1'Storage_Size use 10_000;\n @end smallexample\n \n-\n @node The GNAT Debug Pool Facility\n @section The GNAT Debug Pool Facility\n @findex Debug Pool\n@@ -18423,6 +18652,12 @@ the user program should be compiled with debugging options\n $ gnatmake -g my_program -largs -lgmem\n @end smallexample\n \n+@noindent\n+As library @file{libgmem.a} contains an alternate body for package\n+@code{System.Memory}, @file{s-memory.adb} should not be compiled and linked\n+when an executable is linked with library @file{libgmem.a}. It is then not\n+recommended to use @command{gnatmake} with switch @option{^-a^/ALL_FILES^}.\n+\n @noindent\n When @file{my_program} is executed, the file @file{gmem.out} is produced.\n This file contains information about all allocations and deallocations\n@@ -18904,11 +19139,11 @@ amount of straightforward ASIS-based programming is usually needed.\n @command{gnatcheck} has the command-line interface of the form\n \n @smallexample\n-$ gnatcheck [@i{switches}]  @{@i{filename}@}  [@i{^-files^/FILES^=@{arg_list_filename@}}]\n+$ gnatcheck [@i{switches}]  @{@i{filename}@}\n+      [@i{^-files^/FILES^=@{arg_list_filename@}}]\n       [@i{-cargs gcc_switches}] [@i{-rules rule_options}]\n @end smallexample\n \n-\n @noindent\n where\n @itemize @bullet\n@@ -18967,7 +19202,6 @@ messages ordered by rules.\n Section 3 contains messages ordered by source files.\n @end itemize\n \n-\n @node General gnatcheck Switches\n @section General @command{gnatcheck} Switches\n \n@@ -20679,7 +20913,6 @@ begin\n end STB;\n @end smallexample\n \n-\n @c ******************************\n @ifset vms\n @node Compatibility with HP Ada\n@@ -20708,7 +20941,7 @@ Except where otherwise indicated, the description of GNAT for OpenVMS\n applies to both the Alpha and I64 platforms.\n \n For information on porting Ada code from GNAT on Alpha OpenVMS to GNAT on\n-I64 OpenVMS, see @ref{Transitioning from Alpha to I64 OpenVMS}.\n+I64 OpenVMS, see @ref{Transitioning to 64-Bit GNAT for OpenVMS}.\n \n The discussion in this chapter addresses specifically the implementation\n of Ada 83 for HP OpenVMS Alpha Systems. In cases where the implementation\n@@ -20721,7 +20954,6 @@ be implemented.  The description of pragmas in the\n @cite{GNAT Reference Manual} indicates whether or not they are applicable\n to non-VMS systems.\n \n-\n @menu\n * Ada 95 Compatibility::\n * Differences in the Definition of Package System::\n@@ -21038,7 +21270,7 @@ adds directly to package @code{System}.\n \n The type @code{System.Address} is a 64-bit integer type in GNAT for\n I64 OpenVMS.  For more information,\n-see @ref{Transitioning from Alpha to I64 OpenVMS}.\n+see @ref{Transitioning to 64-Bit GNAT for OpenVMS}.\n \n GNAT is compatible with HP Ada in its handling of address\n clauses, except for some limitations in\n@@ -21278,7 +21510,6 @@ HP Ada can call C code that is already threaded.\n GNAT uses the facilities of DECthreads,\n and Ada tasks are mapped to threads.\n \n-\n @node Assigning Task IDs\n @subsection Assigning Task IDs\n \n@@ -21637,14 +21868,12 @@ incompatibilities and to make them interoperable with GNAT\n (@pxref{Changes to DECLIB}, for details).\n The units are located in the @file{DECLIB} directory.\n \n-\n The GNAT RTL is contained in\n the @file{ADALIB} directory, and\n the default search path is set up to find @code{DECLIB} units in preference\n to @code{ADALIB} units with the same name (@code{TEXT_IO},\n @code{SEQUENTIAL_IO}, and @code{DIRECT_IO}, for example).\n \n-\n @menu\n * Changes to DECLIB::\n @end menu\n@@ -22272,7 +22501,6 @@ use with @value{EDITION} on Alpha and I64 platforms.\n Aside from the debugger, all the OpenVMS tools identified are part\n of the DECset package.\n \n-\n @iftex\n @c Specify table in TeX since Texinfo does a poor job\n @tex\n@@ -22340,10 +22568,10 @@ of the DECset package.\n @c the TeX version above for the printed version\n @flushleft\n @c @multitable @columnfractions .3 .4 .4\n-@multitable {Source Code Analyzer /}{Product with HP Ada}{Product with GNAT Pro}\n+@multitable {Source Code Analyzer /}{Tool with HP Ada}{Tool with GNAT Pro}\n @item @i{Tool}\n- @tab @i{Product with HP Ada}\n- @tab @i{Product with @value{EDITION}}\n+ @tab @i{Tool with HP Ada}\n+ @tab @i{Tool with @value{EDITION}}\n @item Code Management@*System\n  @tab HP CMS\n  @tab HP CMS\n@@ -22377,7 +22605,6 @@ of the DECset package.\n \n @end ifset\n \n-\n @c **************************************\n @node Platform-Specific Information for the Run-Time Libraries\n @appendix Platform-Specific Information for the Run-Time Libraries\n@@ -25355,6 +25582,13 @@ which were not properly specified by adding @code{Elaborate} or\n @code{Elaborate_All} pragmas, then indeed it is possible that two different\n compilers can choose different orders.\n \n+However, GNAT does attempt to diagnose the common situation where there\n+are uninitialized variables in the visible part of a package spec, and the\n+corresponding package body has an elaboration block that directly or\n+indirectly initialized one or more of these variables. This is the situation\n+in which a pragma Elaborate_Body is usually desirable, and GNAT will generate\n+a warning that suggests this addition if it detects this situation.\n+\n The @code{gnatbind}\n @option{^-p^/PESSIMISTIC_ELABORATION^} switch may be useful in smoking\n out problems. This switch causes bodies to be elaborated as late as possible\n@@ -26118,7 +26352,7 @@ applications developed in other Ada environments.\n * Compatibility with HP Ada 83::\n @end ifclear\n @ifset vms\n-* Transitioning from Alpha to I64 OpenVMS::\n+* Transitioning to 64-Bit GNAT for OpenVMS::\n @end ifset\n @end menu\n \n@@ -26630,8 +26864,14 @@ indicates whether or not they are applicable to non-VMS systems.\n @end ifclear\n \n @ifset vms\n-@node Transitioning from Alpha to I64 OpenVMS\n-@section Transitioning from Alpha to I64 OpenVMS\n+@node Transitioning to 64-Bit GNAT for OpenVMS\n+@section Transitioning to 64-Bit @value{EDITION} for OpenVMS\n+\n+@noindent\n+This section is meant to assist users of pre-2006 @value{EDITION}\n+for Alpha OpenVMS who are transitioning to 64-bit @value{EDITION},\n+the version of the GNAT technology supplied in 2006 and later for\n+OpenVMS on both Alpha and I64.\n \n @menu\n * Introduction to transitioning::\n@@ -26641,12 +26881,10 @@ indicates whether or not they are applicable to non-VMS systems.\n @end menu\n \n @node Introduction to transitioning\n-@subsection Introduction to transitioning\n+@subsection Introduction\n \n @noindent\n-This section is meant to assist users of @value{EDITION}\n-for Alpha OpenVMS who are planning to transition to the I64 architecture.\n-@value{EDITION} for Open VMS I64 has been designed to meet\n+64-bit @value{EDITION} for Open VMS has been designed to meet\n three main goals:\n \n @enumerate\n@@ -26658,7 +26896,7 @@ Allowing maximum backward compatibility, thus easing migration of existing\n Ada source code\n \n @item\n-Supplying a path for exploiting the full I64 address range\n+Supplying a path for exploiting the full 64-bit address range\n @end enumerate\n \n @noindent\n@@ -26681,18 +26919,16 @@ this approach provides a simple, gradual upgrade path to future\n use of larger memories than available for 32-bit systems.\n Also, newly written applications or libraries will by default\n be fully compatible with future systems exploiting 64-bit\n-addressing capabilities present in I64.\n+addressing capabilities.\n \n @ref{Migration of 32 bit code}, will focus on porting applications\n that do not require more than 2 GB of\n addressable memory. This code will be referred to as\n @emph{32-bit code}.\n-For applications intending to exploit the full I64 address space,\n+For applications intending to exploit the full 64-bit address space,\n @ref{Taking advantage of 64 bit addressing},\n will consider further changes that may be required.\n-Such code is called @emph{64-bit code} in the\n-remainder of this guide.\n-\n+Such code will be referred to below as @emph{64-bit code}.\n \n @node Migration of 32 bit code\n @subsection Migration of 32-bit code\n@@ -26702,7 +26938,7 @@ remainder of this guide.\n * Access types::\n * Unchecked conversions::\n * Predefined constants::\n-* Single source compatibility::\n+* Interfacing with C::\n * Experience with source compatibility::\n @end menu\n \n@@ -26722,13 +26958,12 @@ approach has been taken:\n @code{System.Short_Address} is a 32-bit subtype of @code{System.Address}\n @end itemize\n \n-\n @noindent\n Since @code{System.Short_Address} is a subtype of @code{System.Address},\n a @code{Short_Address}\n may be used where an @code{Address} is required, and vice versa, without\n needing explicit type conversions.\n-By virtue of the Open VMS I64 parameter passing conventions,\n+By virtue of the Open VMS parameter passing conventions,\n even imported\n and exported subprograms that have 32-bit address parameters are\n compatible with those that have 64-bit address parameters.\n@@ -26748,8 +26983,8 @@ generally uses representation clauses to specify the expected\n layout where required.\n \n If such a representation clause uses 32 bits for a component having\n-the type @code{System.Address}, GNAT Pro for OpenVMS I64 will detect\n-that error and produce a specific diagnostic message.\n+the type @code{System.Address}, 64-bit @value{EDITION} for OpenVMS\n+will detect that error and produce a specific diagnostic message.\n The developer should then determine whether the representation\n should be 64 bits or not and make either of two changes:\n change the size to 64 bits and leave the type as @code{System.Address}, or\n@@ -26801,13 +27036,16 @@ as the source type.\n @subsubsection Predefined constants\n \n @noindent\n-The following predefined constants have changed:\n+The following table shows the correspondence between pre-2006 versions of\n+@value{EDITION} on Alpha OpenVMS (``Old'') and 64-bit @value{EDITION}\n+(``New''):\n \n-@multitable {@code{System.Address_Size}} {2**32} {2**64}\n-@item   @b{Constant}               @tab @b{Old} @tab @b{New}\n-@item   @code{System.Word_Size}    @tab 32      @tab 64\n-@item   @code{System.Memory_Size}  @tab 2**32   @tab 2**64\n-@item   @code{System.Address_Size} @tab 32      @tab 64\n+@multitable {@code{System.Short_Memory_Size}} {2**32} {2**64}\n+@item   @b{Constant}                     @tab @b{Old} @tab @b{New}\n+@item   @code{System.Word_Size}          @tab 32      @tab 64\n+@item   @code{System.Memory_Size}        @tab 2**32   @tab 2**64\n+@item   @code{System.Short_Memory_Size}  @tab 2**32   @tab 2**32\n+@item   @code{System.Address_Size}       @tab 32      @tab 64\n @end multitable\n \n @noindent\n@@ -26821,23 +27059,43 @@ The program @command{gnatfind} may be useful for locating\n references to the above constants, so that you can verify that they\n are still correct.\n \n-@node Single source compatibility\n-@subsubsection Single source compatibility\n+@node Interfacing with C\n+@subsubsection Interfacing with C\n+\n+@noindent\n+In order to minimize the impact of the transition to 64-bit addresses on\n+legacy programs, some fundamental types in the @code{Interfaces.C}\n+package hierarchy continue to be represented in 32 bits.\n+These types are: @code{ptrdiff_t}, @code{size_t}, and @code{chars_ptr}.\n+This eases integration with the default HP C layout choices, for example\n+as found in the system routines in @code{DECC$SHR.EXE}.\n+Because of this implementation choice, the type fully compatible with\n+@code{chars_ptr} is now @code{Short_Address} and not @code{Address}.\n+Depending on the context the compiler will issue a\n+warning or an error when type @code{Address} is used, alerting the user to a\n+potential problem. Otherwise 32-bit programs that use\n+@code{Interfaces.C} should normally not require code modifications\n+\n+The other issue arising with C interfacing concerns pragma @code{Convention}.\n+For VMS 64-bit systems, there is an issue of the appropriate default size\n+of C convention pointers in the absence of an explicit size clause. The HP\n+C compiler can choose either 32 or 64 bits depending on compiler options.\n+GNAT chooses 32-bits rather than 64-bits in the default case where no size\n+clause is given. This proves a better choice for porting 32-bit legacy\n+applications. In order to have a 64-bit representation, it is necessary to\n+specify a size representation clause. For example:\n \n-@noindent\n-In order to allow the same source code to be compiled on\n-both Alpha and I64 platforms, GNAT Pro for Alpha OpenVMS\n-defines @code{System.Short_Address} and System.Short_Memory_Size\n-as aliases of respectively @code{System.Address} and\n-@code{System.Memory_Size}.\n-(These aliases also leave the door open for a possible\n-future ``upgrade'' of OpenVMS Alpha to a 64-bit address space.)\n+@smallexample @c ada\n+type int_star is access Interfaces.C.int;\n+pragma Convention(C, int_star);\n+for int_star'Size use 64;  -- Necessary to get 64 and not 32 bits\n+@end smallexample\n \n @node Experience with source compatibility\n @subsubsection Experience with source compatibility\n \n @noindent\n-The Security Server and STARLET provide an interesting ``test case''\n+The Security Server and STARLET on I64 provide an interesting ``test case''\n for source compatibility issues, since it is in such system code\n where assumptions about @code{Address} size might be expected to occur.\n Indeed, there were a small number of occasions in the Security Server\n@@ -26854,10 +27112,8 @@ there was an implicit assumption that an @code{Address} value occupied\n 32 bits.\n These compiled without error, but their usage resulted in run-time error\n returns from STARLET system calls.\n-To assist in the compile-time detection of such situations, we\n-plan to include a switch to generate a warning message when a\n-record component is of type @code{Address}.\n-\n+Future GNAT technology enhancements may include a tool that detects and flags\n+these sorts of potential source code porting problems.\n \n @c ****************************************\n @node Taking advantage of 64 bit addressing\n@@ -26920,7 +27176,6 @@ use the following representation clause:\n    for T'Storage_Pool use System.Pool_64;\n @end smallexample\n \n-\n @node Restrictions on use of 64 bit objects\n @subsubsection Restrictions on use of 64-bit objects\n \n@@ -26974,7 +27229,6 @@ but never allocate objects outside the 32-bit address space.\n Using general access types ensures maximum compatibility with both\n 32-bit and 64-bit code.\n \n-\n @node STARLET and other predefined libraries\n @subsubsection STARLET and other predefined libraries\n \n@@ -26989,14 +27243,14 @@ in 64-bit address space are acceptable.\n @subsection Technical details\n \n @noindent\n-GNAT Pro for Open VMS I64 takes advantage of the freedom given in the Ada\n-standard with respect to the type of @code{System.Address}. Previous versions\n-of GNAT Pro have defined this type as private and implemented it as\n-a modular type.\n+64-bit @value{EDITION} for Open VMS takes advantage of the freedom given in the\n+Ada standard with respect to the type of @code{System.Address}. Previous\n+versions of GNAT Pro have defined this type as private and implemented it as a\n+modular type.\n \n In order to allow defining @code{System.Short_Address} as a proper subtype,\n and to match the implicit sign extension in parameter passing,\n-in GNAT Pro for Open VMS I64, @code{System.Address} is defined as a\n+in 64-bit @value{EDITION} for Open VMS, @code{System.Address} is defined as a\n visible (i.e., non-private) integer type.\n Standard operations on the type, such as the binary operators ``+'', ``-'',\n etc., that take @code{Address} operands and return an @code{Address} result,\n@@ -27010,10 +27264,9 @@ code portability.)\n \n Defining @code{Address} as a visible integer type helps achieve\n maximum compatibility for existing Ada code,\n-without sacrificing the capabilities of the I64 architecture.\n+without sacrificing the capabilities of the 64-bit architecture.\n @end ifset\n \n-\n @c ************************************************\n @ifset unw\n @node Microsoft Windows Topics\n@@ -28868,9 +29121,13 @@ approach to debug a program as described in\n It is possible to specify the program stack size at link time. On modern\n versions of Windows, starting with XP, this is mostly useful to set the size of\n the main stack (environment task). The other task stacks are set with pragma\n-Linker_Options or with gnatbind -d. On older versions of Windows (2000, NT4,\n-etc.), it is not possible to set the reserve size of individual tasks and thus\n-the link-time stack size applies to all tasks.\n+Storage_Size or with gnatbind -d.\n+\n+Older versions of Windows (2000, NT4, etc.) do\n+not provide any means of setting the reserve size of individual tasks, thus the\n+link-time stack size applies to all tasks and pragma Storage_Size has no effect.\n+It means, in particular, that Stack Overflow checks are made against this\n+link-time specified size.\n \n This setting can be done with\n @command{gnatlink} using either:\n@@ -28928,7 +29185,6 @@ because the coma is a separator for this option.\n \n @end itemize\n \n-\n @end ifset\n \n @c **********************************"}, {"sha": "6a86affbf189f7e5bfaf3b1d30330626c6fc4b21", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 72, "deletions": 27, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -269,12 +269,54 @@ package Sem is\n    -- Scope Stack --\n    -----------------\n \n-   --  The scope stack holds all entries of the scope table. As in the parser,\n-   --  we use Last as the stack pointer, so that we can always find the scope\n-   --  that is currently open in Scope_Stack.Table (Scope_Stack.Last). The\n-   --  oldest entry, at Scope_Stack (0) is Standard. The entries in the table\n-   --  include the entity for the referenced scope, together with information\n-   --  used to restore the proper setting of check suppressions on scope exit.\n+   --  The scope stack indicates the declarative regions that are currently\n+   --  being processed (analyzed and/or expanded). The scope stack is one of\n+   --  basic visibility structures in the compiler: entities that are declared\n+   --  in a scope that is currently on the scope stack are immediately visible.\n+   --  (leaving aside issues of hiding and overloading).\n+\n+   --  Initially, the scope stack only contains an entry for package Standard.\n+   --  When a compilation unit, subprogram unit, block or declarative region\n+   --  is being processed, the corresponding entity is pushed on the scope\n+   --  stack. It is removed after the processing step is completed. A given\n+   --  entity can be placed several times on the scope stack, for example\n+   --  when processing derived type declarations, freeze nodes, etc. The top\n+   --  of the scope stack is the innermost scope currently being processed.\n+   --  It is obtained through function Current_Scope. After a compilation unit\n+   --  has been processed, the scope stack must contain only Standard.\n+   --  The predicate In_Open_Scopes specifies whether a scope is currently\n+   --  on the scope stack.\n+\n+   --  This model is complicated by the need to compile units on the fly, in\n+   --  the middle of the compilation of other units. This arises when compiling\n+   --  instantiations, and when compiling run-time packages obtained through\n+   --  rtsfind. Given that the scope stack is a single static and global\n+   --  structure (not originally designed for the recursive processing required\n+   --  by rtsfind for example) additional machinery is needed to indicate what\n+   --  is currently being compiled. As a result, the scope stack holds several\n+   --  contiguous sections that correspond to the compilation of a given\n+   --  compilation unit. These sections are separated by distinct occurrences\n+   --  of package Standard. The currently active section of the scope stack\n+   --  goes from the current scope to the first occurrence of Standard, which\n+   --  is additionally marked with the flag Is_Active_Stack_Base. The basic\n+   --  visibility routine (Find_Direct_Name, sem_ch8) uses this contiguous\n+   --  section of the scope stack to determine whether a given entity is or\n+   --  is not visible at a point. In_Open_Scopes only examines the currently\n+   --  active section of the scope stack.\n+\n+   --  Similar complications arise when processing child instances. These\n+   --  must be compiled in the context of parent instances, and therefore the\n+   --  parents must be pushed on the stack before compiling the child, and\n+   --  removed afterwards. Routines Save_Scope_Stack and Restore_Scope_Stack\n+   --  are used to set/reset the visibility of entities declared in scopes\n+   --  that are currently on the scope stack, and are used when compiling\n+   --  instance bodies on the fly.\n+\n+   --  It is clear in retrospect that all semantic processing and visibility\n+   --  structures should have been fully recursive. The rtsfind mechanism,\n+   --  and the complexities brought about by subunits and by generic child\n+   --  units and their instantitions, have led to a hybrid model that carries\n+   --  more state than one would wish.\n \n    type Scope_Stack_Entry is record\n       Entity : Entity_Id;\n@@ -294,9 +336,12 @@ package Sem is\n       --  Marks Transient Scopes (See Exp_Ch7 body for details)\n \n       Previous_Visibility : Boolean;\n-      --  Used when installing the parent (s) of the current compilation\n-      --  unit. The parent may already be visible because of an ongoing\n-      --  compilation, and the proper visibility must be restored on exit.\n+      --  Used when installing the parent(s) of the current compilation unit.\n+      --  The parent may already be visible because of an ongoing compilation,\n+      --  and the proper visibility must be restored on exit. The flag is\n+      --  typically needed when the context of a child unit requires\n+      --  compilation of a sibling. In other cases the flag is set to False.\n+      --  See Sem_Ch10 (Install_Parents, Remove_Parents).\n \n       Node_To_Be_Wrapped : Node_Id;\n       --  Only used in transient scopes. Records the node which will\n@@ -306,33 +351,33 @@ package Sem is\n       Actions_To_Be_Wrapped_After  : List_Id;\n       --  Actions that have to be inserted at the start or at the end of a\n       --  transient block. Used to temporarily hold these actions until the\n-      --  block is created, at which time the actions are moved to the\n-      --  block.\n+      --  block is created, at which time the actions are moved to the block.\n \n       Pending_Freeze_Actions : List_Id;\n-      --  Used to collect freeze entity nodes and associated actions that\n-      --  are generated in a inner context but need to be analyzed outside,\n-      --  such as records and initialization procedures. On exit from the\n-      --  scope, this list of actions is inserted before the scope construct\n-      --  and analyzed to generate the corresponding freeze processing and\n-      --  elaboration of other associated actions.\n+      --  Used to collect freeze entity nodes and associated actions that are\n+      --  generated in a inner context but need to be analyzed outside, such as\n+      --  records and initialization procedures. On exit from the scope, this\n+      --  list of actions is inserted before the scope construct and analyzed\n+      --  to generate the corresponding freeze processing and elaboration of\n+      --  other associated actions.\n \n       First_Use_Clause : Node_Id;\n-      --  Head of list of Use_Clauses in current scope. The list is built\n-      --  when the declarations in the scope are processed. The list is\n-      --  traversed on scope exit to undo the effect of the use clauses.\n+      --  Head of list of Use_Clauses in current scope. The list is built when\n+      --  the declarations in the scope are processed. The list is traversed\n+      --  on scope exit to undo the effect of the use clauses.\n \n       Component_Alignment_Default : Component_Alignment_Kind;\n-      --  Component alignment to be applied to any record or array types\n-      --  that are declared for which a specific component alignment pragma\n-      --  does not set the alignment.\n+      --  Component alignment to be applied to any record or array types that\n+      --  are declared for which a specific component alignment pragma does not\n+      --  set the alignment.\n \n       Is_Active_Stack_Base : Boolean;\n       --  Set to true only when entering the scope for Standard_Standard from\n       --  from within procedure Semantics. Indicates the base of the current\n-      --  active set of scopes. Needed by In_Open_Scopes to handle cases\n-      --  where Standard_Standard can be pushed in the middle of the active\n-      --  set of scopes (occurs for instantiations of generic child units).\n+      --  active set of scopes. Needed by In_Open_Scopes to handle cases where\n+      --  Standard_Standard can be pushed anew on the scope stack to start a\n+      --  new active section (see comment above).\n+\n    end record;\n \n    package Scope_Stack is new Table.Table ("}, {"sha": "420e0d78bcad6e359dce22ef85d08829d5d3751c", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -56,6 +56,7 @@ gcc -c          ^ GNAT COMPILE\n -gnatdc         ^ /TRACE_UNITS\n -gnatdO         ^ /REPORT_ERRORS=IMMEDIATE\n -gnatC          ^ /COMPRESS_NAMES\n+-gnatDG         ^ /XDEBUG /EXPAND_SOURCEA\n -gnatD          ^ /XDEBUG\n -gnatec         ^ /CONFIGURATION_PRAGMAS_FILE\n -gnateD         ^ /SYMBOL_PREPROCESSING\n@@ -70,6 +71,10 @@ gcc -c          ^ GNAT COMPILE\n -gnatk          ^ /FILE_NAME_MAX_LENGTH\n -gnatl          ^ /LIST\n -gnatL          ^ /LONGJMP_SETJMP\n+-gnatj          ^ /JUSTIFY_MESSAGES\n+-gnatj0         ^ /NO_JUSTIFY_MESSAGES\n+-gnatjnn        ^ /JUSTIFY_MESSAGES=nn\n+-gnatL          ^ /INTERSPERSE_SOURCE\n -gnatm          ^ /ERROR_LIMIT\n -gnatm2         ^ /ERROR_LIMIT=2\n -gnatn          ^ /INLINE=PRAGMA\n@@ -135,13 +140,19 @@ gcc -c          ^ GNAT COMPILE\n -gnatwO         ^ /WARNINGS=NOOVERLAYS\n -gnatwp         ^ /WARNINGS=INEFFECTIVE_INLINE\n -gnatwP         ^ /WARNINGS=NOINEFFECTIVE_INLINE\n+-gnatwq         ^ /WARNINGS=MISSING_PARENS\n+-gnatwQ         ^ /WARNINGS=NOMISSING_PARENS\n -gnatwr         ^ /WARNINGS=REDUNDANT\n -gnatwR         ^ /WARNINGS=NOREDUNDANT\n -gnatws         ^ /WARNINGS=SUPPRESS\n+-gnatwt         ^ /WARNINGS=DELETED_CODE\n+-gnatwT         ^ /WARNINGS=NODELETED_CODE\n -gnatwu         ^ /WARNINGS=UNUSED\n -gnatwU         ^ /WARNINGS=NOUNUSED\n -gnatwv         ^ /WARNINGS=VARIABLES_UNINITIALIZED\n -gnatwV         ^ /WARNINGS=NOVARIABLES_UNINITIALIZED\n+-gnatww         ^ /WARNINGS=LOWBOUND_ASSUMED\n+-gnatwW         ^ /WARNINGS=NOLOWBOUND_ASSUMED\n -gnatwx         ^ /WARNINGS=IMPORT_EXPORT_PRAGMAS\n -gnatwX         ^ /WARNINGS=NOIMPORT_EXPORT_PRAGMAS\n -gnatwy         ^ /WARNINGS=ADA_2005_COMPATIBILITY"}, {"sha": "f3bc06965b6c3b3cadf2dc6c172b596afaddb36b", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -210,15 +210,27 @@ begin\n    Write_Switch_Char (\"i?\");\n    Write_Line (\"Identifier char set (?=1/2/3/4/5/8/9/p/f/n/w)\");\n \n+   --  Line for -gnatj switch\n+\n+   Write_Switch_Char (\"jnn\");\n+   Write_Line (\"Format error and warning messages to fit nn character lines\");\n+\n    --  Line for -gnatk switch\n \n    Write_Switch_Char (\"k\");\n    Write_Line (\"Limit file names to nn characters (k = krunch)\");\n \n-   --  Line for -gnatl switch\n+   --  Lines for -gnatl switch\n \n    Write_Switch_Char (\"l\");\n    Write_Line (\"Output full source listing with embedded error messages\");\n+   Write_Switch_Char (\"l=f\");\n+   Write_Line (\"Output full source listing to specified file\");\n+\n+   --  Line for -gnatL switch\n+\n+   Write_Switch_Char (\"L\");\n+   Write_Line (\"List corresponding source text in -gnatG or -gnatD output\");\n \n    --  Line for -gnatm switch\n \n@@ -317,6 +329,8 @@ begin\n    Write_Line (\"        C    turn off checking for copies\");\n    Write_Line (\"        d    turn on default (RM) checking\");\n    Write_Line (\"        D    turn off default (RM) checking\");\n+   Write_Line (\"        e    turn on checking for elementary components\");\n+   Write_Line (\"        E    turn off checking for elementary components\");\n    Write_Line (\"        f    turn on checking for floating-point\");\n    Write_Line (\"        F    turn off checking for floating-point\");\n    Write_Line (\"        i    turn on checking for in params\");\n@@ -339,7 +353,7 @@ begin\n \n    Write_Switch_Char (\"wxx\");\n    Write_Line (\"Enable selected warning modes, xx = list of parameters:\");\n-   Write_Line (\"        a    turn on all optional warnings (except d,h,l)\");\n+   Write_Line (\"        a    turn on all optional warnings (except d,h,l,t)\");\n    Write_Line (\"        A    turn off all optional warnings\");\n    Write_Line (\"        b    turn on warnings for bad fixed value \" &\n                                                   \"(not multiple of small)\");\n@@ -377,13 +391,22 @@ begin\n    Write_Line (\"        O    turn off warnings for address clause overlay\");\n    Write_Line (\"        p    turn on warnings for ineffective pragma Inline\");\n    Write_Line (\"        P*   turn off warnings for ineffective pragma Inline\");\n+   Write_Line (\"        q    turn on warnings for questionable \" &\n+                                                  \"missing paretheses\");\n+   Write_Line (\"        Q*   turn off warnings for questionable \" &\n+                                                  \"missing paretheses\");\n    Write_Line (\"        r    turn on warnings for redundant construct\");\n    Write_Line (\"        R*   turn off warnings for redundant construct\");\n    Write_Line (\"        s    suppress all warnings\");\n+   Write_Line (\"        t    turn on warnings for tracking deleted code\");\n+   Write_Line (\"        T*   turn off warnings for tracking deleted code\");\n    Write_Line (\"        u    turn on warnings for unused entity\");\n    Write_Line (\"        U*   turn off warnings for unused entity\");\n    Write_Line (\"        v*   turn on warnings for unassigned variable\");\n    Write_Line (\"        V    turn off warnings for unassigned variable\");\n+   Write_Line (\"        w*   turn on warnings for wrong low bound assumption\");\n+   Write_Line (\"        W    turn off warnings for wrong low bound \" &\n+                                                  \"assumption\");\n    Write_Line (\"        x*   turn on warnings for export/import\");\n    Write_Line (\"        X    turn off warnings for export/import\");\n    Write_Line (\"        y*   turn on warnings for Ada 2005 incompatibility\");"}, {"sha": "abb48cac9e60ffa506f95065ca7dc26f1c29df82", "filename": "gcc/ada/validsw.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvalidsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvalidsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.adb?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@ package body Validsw is\n \n    procedure Reset_Validity_Check_Options is\n    begin\n+      Validity_Check_Components     := False;\n       Validity_Check_Copies         := False;\n       Validity_Check_Default        := True;\n       Validity_Check_Floating_Point := False;\n@@ -75,6 +76,7 @@ package body Validsw is\n       Add ('n', not Validity_Check_Default);\n \n       Add ('c', Validity_Check_Copies);\n+      Add ('e', Validity_Check_Components);\n       Add ('f', Validity_Check_Floating_Point);\n       Add ('i', Validity_Check_In_Params);\n       Add ('m', Validity_Check_In_Out_Params);\n@@ -136,6 +138,9 @@ package body Validsw is\n             when 'd' =>\n                Validity_Check_Default        := True;\n \n+            when 'e' =>\n+               Validity_Check_Components     := True;\n+\n             when 'f' =>\n                Validity_Check_Floating_Point := True;\n \n@@ -166,6 +171,9 @@ package body Validsw is\n             when 'D' =>\n                Validity_Check_Default        := False;\n \n+            when 'E' =>\n+               Validity_Check_Components     := False;\n+\n             when 'I' =>\n                Validity_Check_In_Params      := False;\n \n@@ -191,6 +199,7 @@ package body Validsw is\n                Validity_Check_Tests          := False;\n \n             when 'a' =>\n+               Validity_Check_Components     := True;\n                Validity_Check_Copies         := True;\n                Validity_Check_Default        := True;\n                Validity_Check_Floating_Point := True;\n@@ -203,6 +212,7 @@ package body Validsw is\n                Validity_Check_Tests          := True;\n \n             when 'n' =>\n+               Validity_Check_Components     := False;\n                Validity_Check_Copies         := False;\n                Validity_Check_Default        := False;\n                Validity_Check_Floating_Point := False;"}, {"sha": "1038b366a6dd3ce79d2bebded79d9d240e2aea51", "filename": "gcc/ada/validsw.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvalidsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvalidsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.ads?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,6 +47,12 @@ package Validsw is\n    --  pragma, then the right side of assignments and also initializing\n    --  expressions in object declarations are checked for validity.\n \n+   Validity_Check_Components : Boolean := False;\n+   --  Controls validity checking for assignment to elementary components of\n+   --  records. If this switch is set true using -gnatVe, or an 'e' in the\n+   --  argument of Validity_Checks pragma, then the right hand of an assignment\n+   --  to such a component is checked for validity.\n+\n    Validity_Check_Default : Boolean := True;\n    --  Controls default (reference manual) validity checking. If this switch is\n    --  set to True using -gnatVd or a 'd' in the argument of a Validity_ Checks"}, {"sha": "e7e19efba1edae818b2d36c21378d72cd3c63e8b", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 85, "deletions": 34, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -744,15 +744,15 @@ package VMS_Data is\n    --\n    --   Work quietly, only output warnings and errors.\n \n-   S_Check_Sections : aliased constant S := \"/SECTIONS= \"                 &\n+   S_Check_Sections : aliased constant S := \"/SECTIONS=\"                  &\n                                             \"DEFAULT \"                    &\n                                                \"-s123 \"                   &\n                                             \"COMPILER_STYLE \"             &\n                                                \"-s1 \"                     &\n                                             \"BY_RULES \"                   &\n                                                \"-s2 \"                     &\n                                             \"BY_FILES_BY_RULES \"          &\n-                                               \"-s3 \";\n+                                               \"-s3\";\n    --        /SECTIONS[=section-option, section-option, ...]\n    --\n    --   Specify what sections should be included into the report file.\n@@ -1566,22 +1566,33 @@ package VMS_Data is\n                                              \"!-gnatn,!-gnatN\";\n    --  NODOC (see /INLINE)\n \n-   S_GCC_Jumps   : aliased constant S := \"/LONGJMP_SETJMP \"                &\n+   S_GCC_Intsrc  : aliased constant S := \"/INTERSPERSE_SOURCE \"            &\n                                              \"-gnatL\";\n-   --        /NOLONGJMP_SETJMP (D)\n-   --        /LONGJMP_SETJMP\n+\n+   --        /NO_INTERSPERSE_SOURCE (D)\n+   --        /INTERSPERSE_SOURCE\n    --\n-   --   Causes the longjmp/setjmp approach to be used for exception handling.\n+   --   Causes output from /XDEBUG or /EXPAND_SOURCE to be interspersed with\n+   --   lines from the original source file, output as comment lines with the\n+   --   associated line number.\n+\n+   S_GCC_Just   : aliased constant S := \"/JUSTIFY_MESSAGES=#\"             &\n+                                             \"-gnatj#\";\n+\n+   --        /NO_JUSTIFY_MESSAGES (D)\n+   --        /JUSTIFY_MESSAGES=nnn\n    --\n-   --   The default mechanism for OpenVMS is zero cost exceptions. This\n-   --   qualifier can be used to modify this default, but it must be used for\n-   --   all units in the partition, including all run-time library units.\n-   --   One way to achieve this is to use the /ALL_FILES and /FORCE_COMPILE\n-   --   for gnatmake.\n-   --   This option is rarely used. One case in which it may be advantageous is\n-   --   in an application where exception raising is common and the overall\n-   --   performance of the application is improved by favoring exception\n-   --   propagation.\n+   --   Causes error messages to be reformatted so that a message and all its\n+   --   continuation lines count as one warning or error in the statistics on\n+   --   total errors, and the message is broken down into lines (justified) so\n+   --   that no line is longer than nnn characters. The default message\n+   --   behavior (each message counted separately and not reformatted to fit\n+   --   a particular line length) can be obtained using /NO_JUSTIFY_MESSAGES.\n+\n+   S_GCC_JustX  : aliased constant S := \"/NO_JUSTIFY_MESSAGES \"           &\n+                                             \"-gnatj0\";\n+\n+   --  NODOC (see /JUSTIFY_MESSAGES)\n \n    S_GCC_Length  : aliased constant S := \"/MAX_LINE_LENGTH=#\"              &\n                                              \"-gnatyM#\";\n@@ -1595,7 +1606,9 @@ package VMS_Data is\n    --        /NOLIST (D)\n    --        /LIST\n    --\n-   --   Cause a full listing of the file to be generated.\n+   --   Cause a full listing of the file to be generated. In the case where\n+   --   a body is compiled, the corresponding spec is also listed, along\n+   --   with any subunits.\n \n    S_GCC_Mapping : aliased constant S := \"/MAPPING_FILE=<\"  &\n                                             \"-gnatem>\";\n@@ -1767,6 +1780,19 @@ package VMS_Data is\n                                             \"-O0,!-O1,!-O2,!-O3\";\n    --  NODOC (see /OPTIMIZE)\n \n+   S_GCC_Output  : aliased constant S := \"/OUTPUT_FILE=<\"                  &\n+                                            \"-gnatl=>\";\n+   --        /OUTPUT_FILE=fname\n+   --\n+   --   This has the same effect as /LIST except that the output is written\n+   --   to a file instead of to standard output. If the given fname\n+   --   does not start with a period, then it is the full name of the file\n+   --   to be written. If fname starts with a period, the name of the file\n+   --   is the concatenation of to the name of the file being compiled with\n+   --   fname where the period is replace by an underline. For example, if\n+   --   file xyz.adb is compiled with -gnatl=.lst, then the output is written\n+   --   to file xyz.adb_lst.\n+\n    S_GCC_Polling : aliased constant S := \"/POLLING \"                       &\n                                             \"-gnatP\";\n    --        /NOPOLLING (D)\n@@ -2539,20 +2565,24 @@ package VMS_Data is\n                                                \"-gnatwp \"                  &\n                                             \"NOINEFFECTIVE_INLINE \"        &\n                                                \"-gnatwP \"                  &\n+                                            \"MISSING_PARENS \"              &\n+                                               \"-gnatwq \"                  &\n+                                            \"NOMISSING_PARENS \"            &\n+                                               \"-gnatwQ \"                  &\n                                             \"MODIFIED_UNREF \"              &\n                                                \"-gnatwm \"                  &\n                                             \"NOMODIFIED_UNREF \"            &\n                                                \"-gnatwM \"                  &\n-                                            \"OPTIONAL \"                    &\n-                                               \"-gnatwa \"                  &\n-                                            \"NOOPTIONAL \"                  &\n-                                               \"-gnatwA \"                  &\n                                             \"NORMAL \"                      &\n                                                \"-gnatwn \"                  &\n                                             \"OBSOLESCENT \"                 &\n                                                \"-gnatwj \"                  &\n                                             \"NOOBSOLESCENT \"               &\n                                                \"-gnatwJ \"                  &\n+                                            \"OPTIONAL \"                    &\n+                                               \"-gnatwa \"                  &\n+                                            \"NOOPTIONAL \"                  &\n+                                               \"-gnatwA \"                  &\n                                             \"OVERLAYS \"                    &\n                                                \"-gnatwo \"                  &\n                                             \"NOOVERLAYS \"                  &\n@@ -2563,6 +2593,10 @@ package VMS_Data is\n                                                \"-gnatwR \"                  &\n                                             \"SUPPRESS \"                    &\n                                                \"-gnatws \"                  &\n+                                            \"DELETED_CODE \"                &\n+                                               \"-gnatwt \"                  &\n+                                            \"NODELETED_CODE \"              &\n+                                               \"-gnatwT \"                  &\n                                             \"UNINITIALIZED \"               &\n                                                \"-Wuninitialized \"          &\n                                             \"UNREFERENCED_FORMALS \"        &\n@@ -2581,6 +2615,10 @@ package VMS_Data is\n                                                \"-gnatwv \"                  &\n                                             \"NOVARIABLES_UNINITIALIZED \"   &\n                                                \"-gnatwV \"                  &\n+                                            \"LOWBOUND_ASSUMED \"            &\n+                                               \"-gnatww \"                  &\n+                                            \"NOLOWBOUND_ASSUMED \"          &\n+                                               \"-gnatwW \"                  &\n                                             \"IMPORT_EXPORT_PRAGMAS \"       &\n                                                \"-gnatwx \"                  &\n                                             \"NOIMPORT_EXPORT_PRAGMAS \"     &\n@@ -2707,6 +2745,19 @@ package VMS_Data is\n    --                           inline a call, it will simply ignore the\n    --                           request silently.\n    --\n+   --   MISSING_PARENS\n+   --                           Activate warnings for cases where parentheses\n+   --                           are not used and the result is potential\n+   --                           ambiguity from a reader's point of view.\n+   --                           For example (not a > b) when a and b are\n+   --                           modular means (not (a) > b) and very likely\n+   --                           the programmer intended (not (a > b)).\n+   --\n+   --   NOMISSING_PARENS\n+   --                           Suppress warnings for cases where parentheses\n+   --                           are not used and the result is potential\n+   --                           ambiguity from a reader's point of view.\n+   --\n    --   MODIFIED_UNREF          Activates warnings for variables that are\n    --                           assigned (using an initialization value or with\n    --                           one or more assignment statements) but whose\n@@ -2853,8 +2904,6 @@ package VMS_Data is\n    S_GCC_Wide    : aliased constant S := \"/WIDE_CHARACTER_ENCODING=\"       &\n                                              \"BRACKETS \"                   &\n                                                 \"-gnatWb \"                 &\n-                                             \"NONE \"                       &\n-                                                \"-gnatWn \"                 &\n                                              \"HEX \"                        &\n                                                 \"-gnatWh \"                 &\n                                              \"UPPER \"                      &\n@@ -2977,15 +3026,6 @@ package VMS_Data is\n    --                                speed up compilation, but means that some\n    --                                tools cannot be used.\n \n-   S_GCC_Zero    : aliased constant S := \"/ZERO_COST_EXCEPTIONS \"          &\n-                                             \"-gnatZ\";\n-   --        /ZERO_COST_EXCEPTIONS\n-   --        /NOZERO_COST_EXCEPTIONS\n-   --\n-   --   As zero-cost exceptions is the default on VMS, this qualifier has\n-   --   no effect, except that it cancels the effect of a previous\n-   --   /LONGJMP_SETJUMP qualifier.\n-\n    GCC_Switches : aliased constant Switches :=\n      (S_GCC_Ada_83  'Access,\n       S_GCC_Ada_95  'Access,\n@@ -3015,9 +3055,12 @@ package VMS_Data is\n       S_GCC_Immed   'Access,\n       S_GCC_Inline  'Access,\n       S_GCC_InlineX 'Access,\n-      S_GCC_Jumps   'Access,\n+      S_GCC_Intsrc  'Access,\n+      S_GCC_Just    'Access,\n+      S_GCC_JustX   'Access,\n       S_GCC_Length  'Access,\n       S_GCC_List    'Access,\n+      S_GCC_Output  'Access,\n       S_GCC_Mapping 'Access,\n       S_GCC_Mess    'Access,\n       S_GCC_Nesting 'Access,\n@@ -3056,8 +3099,7 @@ package VMS_Data is\n       S_GCC_WideX   'Access,\n       S_GCC_No_Back 'Access,\n       S_GCC_Xdebug  'Access,\n-      S_GCC_Xref    'Access,\n-      S_GCC_Zero    'Access);\n+      S_GCC_Xref    'Access);\n \n    ----------------------------\n    -- Switches for GNAT ELIM --\n@@ -4169,6 +4211,14 @@ package VMS_Data is\n    --\n    --   When looking for source files also look in the specified directories.\n \n+   S_Make_Stand   : aliased constant S := \"/STANDARD_OUTPUT_FOR_COMMANDS \" &\n+                                            \"-S\";\n+   --        /NOSTANDARD_OUTPUT_FOR_COMMANDS (D)\n+   --        /STANDARD_OUTPUT_FOR_COMMANDS\n+   --\n+   --   Output the commands for the compiler, the binder and the linker\n+   --   on SYS$OUTPUT, instead of SYS$ERROR.\n+\n    S_Make_Switch  : aliased constant S := \"/SWITCH_CHECK \"                 &\n                                             \"-s\";\n    --        /NOSWITCH_CHECK (D)\n@@ -4251,6 +4301,7 @@ package VMS_Data is\n       S_Make_Search  'Access,\n       S_Make_Skip    'Access,\n       S_Make_Source  'Access,\n+      S_Make_Stand   'Access,\n       S_Make_Switch  'Access,\n       S_Make_Unique  'Access,\n       S_Make_Use_Map 'Access,"}, {"sha": "d511237ba92fb6c4720409f70af367bd0b610d83", "filename": "gcc/ada/xgnatugn.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fxgnatugn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c/gcc%2Fada%2Fxgnatugn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxgnatugn.adb?ref=ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,7 +90,7 @@\n --       this is because we have menu problems if we let makeinfo handle\n --       these ifset/ifclear pairs.\n --       Note: @ifset/@ifclear commands for the edition flags (FSFEDITION,\n---       PROEDITION, ACADEMICEDITION) are passed through unchanged\n+--       PROEDITION, GPLEDITION) are passed through unchanged\n \n with Ada.Command_Line;           use Ada.Command_Line;\n with Ada.Strings;                use Ada.Strings;\n@@ -161,21 +161,21 @@ procedure Xgnatugn is\n    --  It contains the Texinfo source code. Process_Source_File\n    --  performs the necessary replacements.\n \n-   type Flag_Type is (UNW, VMS, FSFEDITION, PROEDITION, ACADEMICEDITION);\n+   type Flag_Type is (UNW, VMS, FSFEDITION, PROEDITION, GPLEDITION);\n    --  The flags permitted in @ifset or @ifclear commands:\n    --\n    --  Targets for preprocessing\n    --    UNW (Unix and Windows) or VMS\n    --\n    --  Editions of the manual\n-   --    FSFEDITION, PROEDITION, or ACADEMICEDITION\n+   --    FSFEDITION, PROEDITION, or GPLEDITION\n    --\n    --  Conditional commands for target are processed by xgnatugn\n    --\n    --  Conditional commands for edition are passed through unchanged\n \n    subtype Target_Type is Flag_Type range UNW .. VMS;\n-   subtype Edition_Type is Flag_Type range FSFEDITION .. ACADEMICEDITION;\n+   subtype Edition_Type is Flag_Type range FSFEDITION .. GPLEDITION;\n \n    Target : Target_Type;\n    --  The Target variable is initialized using the command line"}]}