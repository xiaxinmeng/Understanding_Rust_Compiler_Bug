{"sha": "fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjYmJmZTcwYzY2YjljNzkzZjdlMGNkZTk5ZTFhY2RiYzI5OTk5MA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-11T02:36:32Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-11T02:36:32Z"}, "message": "In libobjc/: 2010-10-11 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * Makefile.in (C_SOURCE_FILES): Added ivars.c.\n        * ivars.c: New.\n        * objc/objc.h: Updated comments.\n        * objc/runtime.h (object_getClass): New.\n        (object_getClassName): New.\n        (object_setClass): New.\n        (class_getInstanceVariable): New.\n        (object_getIndexedIvars): New.\n        (object_getInstanceVariable): New.\n        (object_setInstanceVariable): New.\n        (object_getIvar): New.\n        (object_setIvar): New.  \n        (ivar_getName): New.\n        (ivar_getOffset): New.\n        (ivar_getTypeEncoding): New.\n        * objc-private/module-abi-8.h (struct objc_class): Added.\n        * objects.c (object_getClassName): New.\n        (object_setClass): New.\n\nFrom-SVN: r165269", "tree": {"sha": "f2b370a071fcf2d2a1803013ffb11cafc329f866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b370a071fcf2d2a1803013ffb11cafc329f866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3660703cb78861bb89b261524a71f8c04d61e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3660703cb78861bb89b261524a71f8c04d61e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3660703cb78861bb89b261524a71f8c04d61e95"}], "stats": {"total": 355, "additions": 341, "deletions": 14}, "files": [{"sha": "e7881c6836bb4d4b935e851141c149701adaca7b", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -1,3 +1,24 @@\n+2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* Makefile.in (C_SOURCE_FILES): Added ivars.c.\n+\t* ivars.c: New.\n+\t* objc/objc.h: Updated comments.\n+\t* objc/runtime.h (object_getClass): New.\n+\t(object_getClassName): New.\n+\t(object_setClass): New.\n+\t(class_getInstanceVariable): New.\n+\t(object_getIndexedIvars): New.\n+\t(object_getInstanceVariable): New.\n+\t(object_setInstanceVariable): New.\n+\t(object_getIvar): New.\n+\t(object_setIvar): New.\t\n+\t(ivar_getName): New.\n+\t(ivar_getOffset): New.\n+\t(ivar_getTypeEncoding): New.\n+\t* objc-private/module-abi-8.h (struct objc_class): Added.\n+\t* objects.c (object_getClassName): New.\n+\t(object_setClass): New.\n+\t\n 2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc.h: Updated comments."}, {"sha": "86f65bad844ff849210c088f366456109d4f87a3", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -171,6 +171,7 @@ C_SOURCE_FILES = \\\n    gc.c \\\n    hash.c \\\n    init.c \\\n+   ivars.c \\\n    memory.c \\\n    nil_method.c \\\n    objc-foreach.c \\"}, {"sha": "18c6e8af29db44d229a23d08c1812bc9ebf29ca8", "filename": "libobjc/ivars.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fivars.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fivars.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fivars.c?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -0,0 +1,151 @@\n+/* GNU Objective C Runtime ivar related functions.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 3, or (at your option) any later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"objc-private/common.h\"\n+#include \"objc/objc.h\"\n+#include \"objc/objc-api.h\"\n+#include \"objc-private/runtime.h\"\t\t/* the kitchen sink */\n+#include <string.h> /* For strcmp */\n+\n+struct objc_ivar *\n+class_getInstanceVariable (Class class_, const char *name)\n+{\n+  if (class_ != Nil  &&  name != NULL)\n+    {\n+      objc_mutex_lock (__objc_runtime_mutex);\n+      while (class_ != Nil)\n+\t{\n+\t  struct objc_ivar_list *ivars = class_->ivars;\n+\t  if (ivars != NULL)\n+\t    {\n+\t      int i;\n+\t      \n+\t      for (i = 0; i < ivars->ivar_count; i++)\n+\t\t{\n+\t\t  struct objc_ivar *ivar = &(ivars->ivar_list[i]);\n+\t\t  \n+\t\t  if (!strcmp (ivar->ivar_name, name))\n+\t\t    {\n+\t\t      objc_mutex_unlock (__objc_runtime_mutex);\n+\t\t      return ivar;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  class_ = class_->super_class;\n+\t}\n+      objc_mutex_unlock (__objc_runtime_mutex);\n+    }\n+  return NULL;\n+}\n+\n+void *\n+object_getIndexedIvars (id object)\n+{\n+  if (object == nil)\n+    return NULL;\n+  else\n+    {\n+      return (void *)(((char *)object) \n+\t\t      + object->class_pointer->instance_size);\n+    }\n+}\n+\n+struct objc_ivar *\n+object_getInstanceVariable (id object, const char *name, void **returnValue)\n+{\n+  if (object == nil  ||  name == NULL)\n+    return NULL;\n+  else\n+    {\n+      struct objc_ivar * variable = class_getInstanceVariable (object->class_pointer, name);\n+\n+      if (variable != NULL  &&  returnValue != NULL)\n+\t{\n+\t  char *location = (char *)object + variable->ivar_offset;\n+\t \n+\t  *returnValue = *((id *)location);\n+\t}\n+\n+      return variable;\n+    }\n+}\n+\n+struct objc_ivar *\n+object_setInstanceVariable (id object, const char *name, void *newValue)\n+{\n+  if (object == nil  ||  name == NULL)\n+    return NULL;\n+  else\n+    {\n+      struct objc_ivar * variable = class_getInstanceVariable (object->class_pointer, name);\n+\n+      if (variable != NULL)\n+\t{\n+\t  char *location = (char *)object + variable->ivar_offset;\n+\t  \n+\t  *((id *)location) = (id)newValue;\n+\t}\n+\n+      return variable;\n+    }\n+}\n+\n+id object_getIvar (id object, struct objc_ivar * variable)\n+{\n+  if (object == nil  ||  variable == NULL)\n+    return nil;\n+  else\n+    {\n+      char *location = (char *)object + variable->ivar_offset;\n+\n+      return *((id *)location);\n+    }\n+}\n+\n+void object_setIvar (id object, struct objc_ivar * variable, id value)\n+{\n+  if (object == nil  ||  variable == NULL)\n+    return;\n+  else\n+    {\n+      char *location = (char *)object + variable->ivar_offset;\n+\n+      *((id *)location) = value;\n+    }\n+}\n+\n+const char * ivar_getName (struct objc_ivar * variable)\n+{\n+  return variable->ivar_name;\n+}\n+\n+ptrdiff_t ivar_getOffset (struct objc_ivar * variable)\n+{\n+  return (ptrdiff_t)(variable->ivar_offset);\n+}\n+\n+const char * ivar_getTypeEncoding (struct objc_ivar * variable)\n+{\n+  return variable->ivar_type;\n+}"}, {"sha": "a20e3a3ae6e533acebddef1020e1afc08c81018c", "filename": "libobjc/objc-private/module-abi-8.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -145,6 +145,59 @@ struct objc_protocol_list\n   Protocol *list[1];\n };\n \n+/*\n+  The compiler generates one of these structures for each class.  \n+\n+  This structure is the definition for classes.\n+\n+  This structure is generated by the compiler in the executable and\n+  used by the run-time during normal messaging operations.  Therefore\n+  some members change type. The compiler generates \"char* const\" and\n+  places a string in the following member variables: super_class.\n+*/\n+struct objc_class {     \n+  struct objc_class*  class_pointer;    /* Pointer to the class's meta\n+\t\t\t\t\t   class. */\n+  struct objc_class*  super_class;      /* Pointer to the super\n+\t\t\t\t\t   class. NULL for class\n+\t\t\t\t\t   Object. */\n+  const char*         name;             /* Name of the class. */\n+  long                version;          /* Unknown. */\n+  unsigned long       info;             /* Bit mask.  See class masks\n+\t\t\t\t\t   defined above. */\n+  long                instance_size;    /* Size in bytes of the class.\n+\t\t\t\t\t   The sum of the class\n+\t\t\t\t\t   definition and all super\n+\t\t\t\t\t   class definitions. */\n+#ifdef _WIN64\n+  /* We pad the structure manually to prevent warning when -Wpadded is\n+     used.  The compiler automatically pads the structures that it\n+     generates, so this manually padded structure still matches the\n+     one generated by the compiler, but if we don't pad manually,\n+     -Wpadded detects that padding is being added and generates\n+     annoying warnings.  This hack is necessary as on LLP64 targets\n+     sizeof (long) isn't equal to sizeof (void *).  */\n+  long pad;\n+#endif\n+  struct objc_ivar_list* ivars;         /* Pointer to a structure that\n+\t\t\t\t\t   describes the instance\n+\t\t\t\t\t   variables in the class\n+\t\t\t\t\t   definition.  NULL indicates\n+\t\t\t\t\t   no instance variables.\n+\t\t\t\t\t   Does not include super\n+\t\t\t\t\t   class variables. */\n+  struct objc_method_list*  methods;    /* Linked list of instance\n+\t\t\t\t\t   methods defined for the\n+\t\t\t\t\t   class. */\n+  struct sarray *    dtable;            /* Pointer to instance method\n+\t\t\t\t\t   dispatch table. */  \n+  struct objc_class* subclass_list;     /* Subclasses */\n+  struct objc_class* sibling_class;\n+\n+  struct objc_protocol_list *protocols; /* Protocols conformed to */\n+  void* gc_object_type;\n+};\n+\n /* The compiler generates one of these structures for each category.\n    A class may have many categories and contain both instance and\n    factory methods.  */"}, {"sha": "7d382169dfbf5a7081ebacf4c3cdb327e3c80f32", "filename": "libobjc/objc/objc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc.h?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -91,17 +91,17 @@ typedef struct objc_class *Class;\n /* An 'id' is an object of an unknown class.  The way the object data\n    is stored inside the object is private and what you see here is\n    only the beginning of the actual struct.  The first field is always\n-   a pointer to the Class that the object belongs to.  If performance\n-   is paramount, you can use this knowledge to get the class of an\n-   object by doing '((id)object)->class_pointer'.\n+   a pointer to the Class that the object belongs to.\n */\n typedef struct objc_object\n {\n   /* 'class_pointer' is the Class that the object belongs to.  In case\n      of a Class object, this pointer points to the meta class.\n \n      Compatibility Note: The Apple/NeXT runtime calls this field\n-     'isa'.  */\n+     'isa'.  To access this field in a portable way, use\n+     object_getClass() from runtime.h, which is an inline function so\n+     does not add any overhead.  */\n   Class class_pointer;\n } *id;\n "}, {"sha": "95928c839f24bea3b0c0e35a279b510303605c00", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 88, "deletions": 10, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -146,6 +146,24 @@ struct objc_method_description\n #define _F_GCINVISIBLE\t0x20\n \n \n+/** Internals: defined inline.  */\n+\n+/* Return the class of 'object', or Nil if the object is nil.  If\n+   'object' is a class, the meta class is returned; if 'object' is a\n+   meta class, the root meta class is returned (note that this is\n+   different from the traditional GNU Objective-C Runtime API function\n+   object_get_class(), which for a meta class would return the meta\n+   class itself).  */\n+static inline Class\n+object_getClass (id object)\n+{\n+  if (object != nil)\n+    return object->class_pointer;\n+  else\n+    return Nil;\n+}\n+\n+\n /** Internals: the following functions are in selector.c.  */\n \n /* Return the name of a given selector.  */\n@@ -182,13 +200,13 @@ objc_EXPORT BOOL sel_isEqual (SEL first_selector, SEL second_selector);\n \n /** Internals: the following functions are in objects.c.  */\n \n-/* Create an instance of class 'class', adding extraBytes to the size\n+/* Create an instance of class 'class_', adding extraBytes to the size\n    of the returned object.  This method allocates the appropriate\n    amount of memory for the instance, initializes it to zero, then\n    calls all the C++ constructors on appropriate C++ instance\n-   variables of the instance (if any) (TODO: This is not implemented\n-   yet).  */\n-objc_EXPORT id class_createInstance (Class class, size_t extraBytes);\n+   variables of the instance (if any) (TODO: The C++ constructors bit\n+   is not implemented yet).  */\n+objc_EXPORT id class_createInstance (Class class_, size_t extraBytes);\n \n /* Copy an object and return the copy.  extraBytes should be identical\n    to the extraBytes parameter that was passed when creating the\n@@ -201,6 +219,69 @@ objc_EXPORT id object_copy (id object, size_t extraBytes);\n    for the instance.  */\n objc_EXPORT id object_dispose (id object);\n \n+/* Return the name of the class of 'object'.  If 'object' is 'nil',\n+   returns \"Nil\".  */\n+objc_EXPORT const char * object_getClassName (id object);\n+\n+/* Change the class of object to be class_.  Return the previous class\n+   of object.  This is currently not really thread-safe.  */\n+objc_EXPORT Class object_setClass (id object, Class class_);\n+\n+\n+/** Internals: the following functions are in ivars.c.  */\n+\n+/* Return an instance variable given the class and the instance\n+   variable name.  This is an expensive function to call, so try to\n+   reuse the returned Ivar if you can.  */\n+objc_EXPORT Ivar class_getInstanceVariable (Class class_, const char *name);\n+\n+/* If the object was created in class_createInstance() with some\n+   extraBytes, returns a pointer to them.  If it was not, then the\n+   returned pointer may make no sense.  */\n+objc_EXPORT void * object_getIndexedIvars (id object);\n+\n+/* Get the value of an instance variable of type 'id'.  The function\n+   returns the instance variable.  To get the value of the instance\n+   variable, you should pass as 'returnValue' a pointer to an 'id';\n+   the value will be copied there.  Note that 'returnValue' is really\n+   a 'void *', not a 'void **'.  This function really works only with\n+   instance variables of type 'id'; for other types of instance\n+   variables, access directly the data at (char *)object +\n+   ivar_getOffset (ivar).  */\n+objc_EXPORT Ivar object_getInstanceVariable (id object, const char *name, void **returnValue);\n+\n+/* Set the value of an instance variable.  The value to set is passed\n+   in 'newValue' (which really is an 'id', not a 'void *').  The\n+   function returns the instance variable.  This function really works\n+   only with instance variables of type 'id'; for other types of\n+   instance variables, access directly the data at (char *)object +\n+   ivar_getOffset (ivar).  */\n+objc_EXPORT Ivar object_setInstanceVariable (id object, const char *name, void *newValue);\n+\n+/* Get the value of an instance variable of type 'id' of the object\n+   'object'.  This is faster than object_getInstanceVariable if you\n+   already have the instance variable because it avoids the expensive\n+   call to class_getInstanceVariable that is done by\n+   object_getInstanceVariable.  */\n+objc_EXPORT id object_getIvar (id object, Ivar variable);\n+\n+/* Set the value of an instance variable of type 'id' of the object\n+   'object'.  This is faster than object_setInstanceVariable if you\n+   already have the instance variable because it avoids the expensive\n+   call to class_getInstanceVariable that is done by\n+   object_setInstanceVariable.  */\n+objc_EXPORT void object_setIvar (id object, Ivar variable, id value);\n+\n+/* Return the name of the instance variable.  */\n+objc_EXPORT const char * ivar_getName (Ivar variable);\n+\n+/* Return the offset of the instance variable from the start of the\n+   object data.  */\n+objc_EXPORT ptrdiff_t ivar_getOffset (Ivar variable);\n+\n+/* Return the type encoding of the variable.  */\n+objc_EXPORT const char * ivar_getTypeEncoding (Ivar variable);\n+\n \n /* TODO: Add all the other functions in the API.  */\n \n@@ -216,8 +297,7 @@ objc_EXPORT id object_dispose (id object);\n    is set.  Then, it will abort the program.\n \n    Compatibility note: the Apple runtime will not abort the program\n-   after calling the mutation handler.\n- */\n+   after calling the mutation handler.  */\n objc_EXPORT void objc_enumerationMutation (id collection);\n \n /* 'objc_set_enumeration_mutation_handler' can be used to set a\n@@ -236,8 +316,7 @@ objc_EXPORT void objc_enumerationMutation (id collection);\n    libraries; in the case of GNUstep, GNUstep Base may be using this\n    function to improve the standard enumeration mutation handling.\n    You probably shouldn't use this function unless you are writing\n-   your own Foundation library.\n-*/\n+   your own Foundation library.  */\n objc_EXPORT void objc_setEnumerationMutationHandler (void (*handler)(id));\n \n /* This structure (used during fast enumeration) is automatically\n@@ -246,8 +325,7 @@ objc_EXPORT void objc_setEnumerationMutationHandler (void (*handler)(id));\n    defined again with the name of NSFastEnumeration by \"Foundation\"\n    libraries such as GNUstep Base.  And if NSFastEnumeration is\n    defined, the compiler will use it instead of\n-   __objcFastEnumerationState when doing fast enumeration.\n-*/\n+   __objcFastEnumerationState when doing fast enumeration.  */\n /*\n struct __objcFastEnumerationState\n {"}, {"sha": "2562be55f247bb528de170afef524bbc3d0e4b4b", "filename": "libobjc/objects.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcbbfe70c66b9c793f7e0cde99e1acdbc299990/libobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjects.c?ref=fdcbbfe70c66b9c793f7e0cde99e1acdbc299990", "patch": "@@ -102,6 +102,29 @@ object_dispose (id object)\n   return nil;\n }\n \n+const char *\n+object_getClassName (id object)\n+{\n+  if (object != nil)\n+    return object->class_pointer->name;\n+  else\n+    return \"Nil\";\n+}\n+\n+Class\n+object_setClass (id object, Class class_)\n+{\n+  if (object == nil)\n+    return Nil;\n+  else\n+    {\n+      Class old_class = object->class_pointer;\n+\n+      object->class_pointer = class_;\n+      return old_class;\n+    }\n+}\n+\n /*\n   Hook functions for memory allocation and disposal.  Deprecated\n   and currently unused."}]}