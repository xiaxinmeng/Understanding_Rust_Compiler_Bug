{"sha": "be17328916770319a04f236f42aaf12404bad162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxNzMyODkxNjc3MDMxOWEwNGYyMzZmNDJhYWYxMjQwNGJhZDE2Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-10T09:57:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-10T09:57:50Z"}, "message": "tree-ssa-forwprop.c (combine_conversions): Pattern-match a series of conversions and apply foldings similar to what...\n\n2011-05-10  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (combine_conversions): Pattern-match\n\ta series of conversions and apply foldings similar to what\n\tfold-const does.\n\t(tree_ssa_forward_propagate_single_use_vars): Call it.\n\n\t* gcc.dg/tree-ssa/ssa-fre-2.c: Disable forwprop.\n\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n\t* gcc.dg/tree-ssa/scev-cast.c: Adjust.  Note what transformation\n\tapplies.\n\nFrom-SVN: r173612", "tree": {"sha": "29206a7d5e93403b2d8ad01b15c16501a9d9603c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29206a7d5e93403b2d8ad01b15c16501a9d9603c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be17328916770319a04f236f42aaf12404bad162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be17328916770319a04f236f42aaf12404bad162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be17328916770319a04f236f42aaf12404bad162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be17328916770319a04f236f42aaf12404bad162/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ae70ea2e6f12a97415896b4721bf4df536e3b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae70ea2e6f12a97415896b4721bf4df536e3b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae70ea2e6f12a97415896b4721bf4df536e3b09"}], "stats": {"total": 213, "additions": 199, "deletions": 14}, "files": [{"sha": "7e5d7b957d3421223ce406ad58aca6413d01ef55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1,3 +1,10 @@\n+2011-05-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (combine_conversions): Pattern-match\n+\ta series of conversions and apply foldings similar to what\n+\tfold-const does.\n+\t(tree_ssa_forward_propagate_single_use_vars): Call it.\n+\n 2011-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/48611"}, {"sha": "f57c040561ece0eec64edd72ba62159c2a3267b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1,3 +1,12 @@\n+2011-05-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-2.c: Disable forwprop.\n+\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/scev-cast.c: Adjust.  Note what transformation\n+\tapplies.\n+\n 2011-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/48611"}, {"sha": "8120dad7fe9d5081f54fd2038217ec5508a6de67", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-cast.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -3,24 +3,26 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n-void blas (char xxx);\n+void blas (signed char xxx);\n void blau (unsigned char xxx);\n \n void tst(void)\n {\n   unsigned i;\n \n-  for (i = 0; i < 128; i++) /* This cast to char has to be preserved.  */\n-    blas ((char) i);\n-  for (i = 0; i < 127; i++) /* And this one does not.  */\n-    blas ((char) i);\n-  for (i = 0; i < 255; i++) /* This cast is not necessary.  */\n+  for (i = 0; i < 129; i++) /* This truncation to char has to be preserved.  */\n+    blas ((signed char) i);\n+  for (i = 0; i < 128; i++) /* This one is not necessary, but nothing eliminates it.  */\n+    blas ((signed char) i);\n+  for (i = 0; i < 127; i++) /* This one is not necessary, IVOPTS eliminates it.  */\n+    blas ((signed char) i);\n+  for (i = 0; i < 256; i++) /* This one is not necessary, VRP eliminates it.  */\n+    blau ((unsigned char) i);\n+  for (i = 0; i < 257; i++) /* This one is necessary.  */\n     blau ((unsigned char) i);\n-  for (i = 0; i < 256; i++)\n-    blau ((unsigned char) i); /* This one is necessary.  */\n }\n \n-/* { dg-final { scan-tree-dump-times \"= \\\\(unsigned char\\\\)\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"= \\\\(char\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"& 255\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\\\(signed char\\\\)\" 2 \"optimized\" } } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f85c06139f21712db07338665581eb70b0eacb1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-2.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n \n /* From PR14287.  */\n "}, {"sha": "6813b4323020bc710f7550a10ba3679fbd4b5fa7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -6,7 +6,7 @@\n    When the condition is true, we distribute \"(int) (a + b)\" as\n    \"(int) a + (int) b\", otherwise we keep the original.  */\n /* { dg-do compile { target { { ! mips64 } && { ! spu-*-* } } } } */\n-/* { dg-options \"-O -fwrapv -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fwrapv -fdump-tree-fre1-details\" } */\n \n /* From PR14844.  */\n "}, {"sha": "96738305bbcf02ce038a164d02cbd1c1908184a7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1,7 +1,7 @@\n /* If the target returns false for TARGET_PROMOTE_PROTOTYPES, then there\n    will be no casts for FRE to eliminate and the test will fail.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* hppa*-*-* mips*-*-* m68k*-*-* } } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n \n /* From PR21608.  */\n "}, {"sha": "e6010ca031835202ec815f9eb10ef114aed3b36e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-forwprop -fdump-tree-fre1-details\" } */\n \n /* From PR19792.  */\n "}, {"sha": "65e058d7231a3c7df6771ed7c427076bb57531f7", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be17328916770319a04f236f42aaf12404bad162/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=be17328916770319a04f236f42aaf12404bad162", "patch": "@@ -1938,6 +1938,166 @@ associate_plusminus (gimple stmt)\n   return false;\n }\n \n+/* Combine two conversions in a row for the second conversion at *GSI.\n+   Returns true if there were any changes made.  */\n+ \n+static bool\n+combine_conversions (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree op0, lhs;\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+\n+  gcc_checking_assert (CONVERT_EXPR_CODE_P (code)\n+\t\t       || code == FLOAT_EXPR\n+\t\t       || code == FIX_TRUNC_EXPR);\n+\n+  lhs = gimple_assign_lhs (stmt);\n+  op0 = gimple_assign_rhs1 (stmt);\n+  if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (op0)))\n+    {\n+      gimple_assign_set_rhs_code (stmt, TREE_CODE (op0));\n+      return true;\n+    }\n+\n+  if (TREE_CODE (op0) != SSA_NAME)\n+    return false;\n+\n+  def_stmt = SSA_NAME_DEF_STMT (op0);\n+  if (!is_gimple_assign (def_stmt))\n+    return false;\n+\n+  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+    {\n+      tree defop0 = gimple_assign_rhs1 (def_stmt);\n+      tree type = TREE_TYPE (lhs);\n+      tree inside_type = TREE_TYPE (defop0);\n+      tree inter_type = TREE_TYPE (op0);\n+      int inside_int = INTEGRAL_TYPE_P (inside_type);\n+      int inside_ptr = POINTER_TYPE_P (inside_type);\n+      int inside_float = FLOAT_TYPE_P (inside_type);\n+      int inside_vec = TREE_CODE (inside_type) == VECTOR_TYPE;\n+      unsigned int inside_prec = TYPE_PRECISION (inside_type);\n+      int inside_unsignedp = TYPE_UNSIGNED (inside_type);\n+      int inter_int = INTEGRAL_TYPE_P (inter_type);\n+      int inter_ptr = POINTER_TYPE_P (inter_type);\n+      int inter_float = FLOAT_TYPE_P (inter_type);\n+      int inter_vec = TREE_CODE (inter_type) == VECTOR_TYPE;\n+      unsigned int inter_prec = TYPE_PRECISION (inter_type);\n+      int inter_unsignedp = TYPE_UNSIGNED (inter_type);\n+      int final_int = INTEGRAL_TYPE_P (type);\n+      int final_ptr = POINTER_TYPE_P (type);\n+      int final_float = FLOAT_TYPE_P (type);\n+      int final_vec = TREE_CODE (type) == VECTOR_TYPE;\n+      unsigned int final_prec = TYPE_PRECISION (type);\n+      int final_unsignedp = TYPE_UNSIGNED (type);\n+\n+      /* In addition to the cases of two conversions in a row\n+\t handled below, if we are converting something to its own\n+\t type via an object of identical or wider precision, neither\n+\t conversion is needed.  */\n+      if (useless_type_conversion_p (type, inside_type)\n+\t  && (((inter_int || inter_ptr) && final_int)\n+\t      || (inter_float && final_float))\n+\t  && inter_prec >= final_prec)\n+\t{\n+\t  gimple_assign_set_rhs1 (stmt, unshare_expr (defop0));\n+\t  gimple_assign_set_rhs_code (stmt, TREE_CODE (defop0));\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+\n+      /* Likewise, if the intermediate and initial types are either both\n+\t float or both integer, we don't need the middle conversion if the\n+\t former is wider than the latter and doesn't change the signedness\n+\t (for integers).  Avoid this if the final type is a pointer since\n+\t then we sometimes need the middle conversion.  Likewise if the\n+\t final type has a precision not equal to the size of its mode.  */\n+      if (((inter_int && inside_int)\n+\t   || (inter_float && inside_float)\n+\t   || (inter_vec && inside_vec))\n+\t  && inter_prec >= inside_prec\n+\t  && (inter_float || inter_vec\n+\t      || inter_unsignedp == inside_unsignedp)\n+\t  && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n+\t\t&& TYPE_MODE (type) == TYPE_MODE (inter_type))\n+\t  && ! final_ptr\n+\t  && (! final_vec || inter_prec == inside_prec))\n+\t{\n+\t  gimple_assign_set_rhs1 (stmt, defop0);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+\n+      /* If we have a sign-extension of a zero-extended value, we can\n+\t replace that by a single zero-extension.  */\n+      if (inside_int && inter_int && final_int\n+\t  && inside_prec < inter_prec && inter_prec < final_prec\n+\t  && inside_unsignedp && !inter_unsignedp)\n+\t{\n+\t  gimple_assign_set_rhs1 (stmt, defop0);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+\n+      /* Two conversions in a row are not needed unless:\n+\t - some conversion is floating-point (overstrict for now), or\n+\t - some conversion is a vector (overstrict for now), or\n+\t - the intermediate type is narrower than both initial and\n+\t final, or\n+\t - the intermediate type and innermost type differ in signedness,\n+\t and the outermost type is wider than the intermediate, or\n+\t - the initial type is a pointer type and the precisions of the\n+\t intermediate and final types differ, or\n+\t - the final type is a pointer type and the precisions of the\n+\t initial and intermediate types differ.  */\n+      if (! inside_float && ! inter_float && ! final_float\n+\t  && ! inside_vec && ! inter_vec && ! final_vec\n+\t  && (inter_prec >= inside_prec || inter_prec >= final_prec)\n+\t  && ! (inside_int && inter_int\n+\t\t&& inter_unsignedp != inside_unsignedp\n+\t\t&& inter_prec < final_prec)\n+\t  && ((inter_unsignedp && inter_prec > inside_prec)\n+\t      == (final_unsignedp && final_prec > inter_prec))\n+\t  && ! (inside_ptr && inter_prec != final_prec)\n+\t  && ! (final_ptr && inside_prec != inter_prec)\n+\t  && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n+\t\t&& TYPE_MODE (type) == TYPE_MODE (inter_type)))\n+\t{\n+\t  gimple_assign_set_rhs1 (stmt, defop0);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+\n+      /* A truncation to an unsigned type should be canonicalized as\n+\t bitwise and of a mask.  */\n+      if (final_int && inter_int && inside_int\n+\t  && final_prec == inside_prec\n+\t  && final_prec > inter_prec\n+\t  && inter_unsignedp)\n+\t{\n+\t  tree tem;\n+\t  tem = fold_build2 (BIT_AND_EXPR, inside_type,\n+\t\t\t     defop0,\n+\t\t\t     double_int_to_tree\n+\t\t\t       (inside_type, double_int_mask (inter_prec)));\n+\t  if (!useless_type_conversion_p (type, inside_type))\n+\t    {\n+\t      tem = force_gimple_operand_gsi (gsi, tem, true, NULL_TREE, true,\n+\t\t\t\t\t      GSI_SAME_STMT);\n+\t      gimple_assign_set_rhs1 (stmt, tem);\n+\t    }\n+\t  else\n+\t    gimple_assign_set_rhs_from_tree (gsi, tem);\n+\t  update_stmt (gsi_stmt (*gsi));\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Main entry point for the forward propagation optimizer.  */\n \n static unsigned int\n@@ -2061,6 +2221,13 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t  cfg_changed |= associate_plusminus (stmt);\n \t\t  gsi_next (&gsi);\n \t\t}\n+\t      else if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n+\t\t       || gimple_assign_rhs_code (stmt) == FLOAT_EXPR\n+\t\t       || gimple_assign_rhs_code (stmt) == FIX_TRUNC_EXPR)\n+\t\t{\n+\t\t  if (!combine_conversions (&gsi))\n+\t\t    gsi_next (&gsi);\n+\t\t}\n \t      else\n \t\tgsi_next (&gsi);\n \t    }"}]}