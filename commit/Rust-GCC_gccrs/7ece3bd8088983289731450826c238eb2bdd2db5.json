{"sha": "7ece3bd8088983289731450826c238eb2bdd2db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjZTNiZDgwODg5ODMyODk3MzE0NTA4MjZjMjM4ZWIyYmRkMmRiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-04T03:50:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-04T19:11:42Z"}, "message": "c++: Fix complex constexpr virtual cases [PR93310].\n\nThe code in constexpr for looking up the actual type of the object and then\ngetting the virtual function from there broke for both of these tests: for\n16, it assumed incorrectly that the DECL_VINDEX would apply to the most\nderived type's vtable; for 17, it failed to consider that during\nconstruction the base subobject is treated as being of the base type.\n\nFixed by just doing constant evaluation of the expression that looks up the\nfunction in the vtable.  This means that a virtual call will involve loading\nthe vptr, so we will reject some calls through non-constexpr variables that\nwe previously accepted, but this seems appropriate to me.  None of our\ntestcases were affected.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93310\n\t* constexpr.c (cxx_eval_constant_expression) [OBJ_TYPE_REF]:\n\tEvaluate OBJ_TYPE_REF_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93310\n\t* g++.dg/cpp2a/constexpr-virtual16.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual17.C: New test.\n\t* g++.dg/cpp2a/constexpr-new12.C: Adjust diagnostic.", "tree": {"sha": "d48b471b9169fe130e1faea914228b58853128c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48b471b9169fe130e1faea914228b58853128c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ece3bd8088983289731450826c238eb2bdd2db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ece3bd8088983289731450826c238eb2bdd2db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ece3bd8088983289731450826c238eb2bdd2db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ece3bd8088983289731450826c238eb2bdd2db5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddb93ce77374004c49cdfbd748ba35867620cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ddb93ce77374004c49cdfbd748ba35867620cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ddb93ce77374004c49cdfbd748ba35867620cf1"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "c01c42bf88686c1661ef43f6c2ac9a2d7788d6b4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7ece3bd8088983289731450826c238eb2bdd2db5", "patch": "@@ -6373,47 +6373,9 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case OBJ_TYPE_REF:\n-      {\n-\t/* Virtual function call.  Let the constexpr machinery figure out\n-\t   the dynamic type.  */\n-\tint token = tree_to_shwi (OBJ_TYPE_REF_TOKEN (t));\n-\ttree obj = OBJ_TYPE_REF_OBJECT (t);\n-\tobj = cxx_eval_constant_expression (ctx, obj, lval, non_constant_p,\n-\t\t\t\t\t    overflow_p);\n-\tSTRIP_NOPS (obj);\n-\t/* We expect something in the form of &x.D.2103.D.2094; get x. */\n-\tif (TREE_CODE (obj) != ADDR_EXPR\n-\t    || !DECL_P (get_base_address (TREE_OPERAND (obj, 0))))\n-\t  {\n-\t    if (!ctx->quiet)\n-\t      error_at (loc, \"expression %qE is not a constant expression\", t);\n-\t    *non_constant_p = true;\n-\t    return t;\n-\t  }\n-\tobj = TREE_OPERAND (obj, 0);\n-\twhile (TREE_CODE (obj) == COMPONENT_REF\n-\t       && DECL_FIELD_IS_BASE (TREE_OPERAND (obj, 1)))\n-\t  obj = TREE_OPERAND (obj, 0);\n-\ttree objtype = TREE_TYPE (obj);\n-\tif (VAR_P (obj)\n-\t    && DECL_NAME (obj) == heap_identifier\n-\t    && TREE_CODE (objtype) == ARRAY_TYPE)\n-\t  objtype = TREE_TYPE (objtype);\n-\tif (!CLASS_TYPE_P (objtype))\n-\t  {\n-\t    if (!ctx->quiet)\n-\t      error_at (loc, \"expression %qE is not a constant expression\", t);\n-\t    *non_constant_p = true;\n-\t    return t;\n-\t  }\n-\t/* Find the function decl in the virtual functions list.  TOKEN is\n-\t   the DECL_VINDEX that says which function we're looking for.  */\n-\ttree virtuals = BINFO_VIRTUALS (TYPE_BINFO (objtype));\n-\tif (TARGET_VTABLE_USES_DESCRIPTORS)\n-\t  token /= MAX (TARGET_VTABLE_USES_DESCRIPTORS, 1);\n-\tr = TREE_VALUE (chain_index (token, virtuals));\n-\tbreak;\n-      }\n+      /* Virtual function lookup.  We don't need to do anything fancy.  */\n+      return cxx_eval_constant_expression (ctx, OBJ_TYPE_REF_EXPR (t),\n+\t\t\t\t\t   lval, non_constant_p, overflow_p);\n \n     case PLACEHOLDER_EXPR:\n       /* Use of the value or address of the current object.  */"}, {"sha": "5a3d06a5fab05153c36808b904575f143586223a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C?ref=7ece3bd8088983289731450826c238eb2bdd2db5", "patch": "@@ -24,4 +24,4 @@ foo ()\n   return r;\n }\n \n-constexpr auto a = foo ();\t// { dg-error \"is not a constant expression\" }\n+constexpr auto a = foo ();\t// { dg-error \"constant expression\" }"}, {"sha": "8cca8a617235ce2fbaeb2b2bf5583a4c4703efaf", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual16.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual16.C?ref=7ece3bd8088983289731450826c238eb2bdd2db5", "patch": "@@ -0,0 +1,22 @@\n+// Test constexpr virtual in non-primary vtable.\n+// { dg-do compile { target c++20 } }\n+\n+struct A\n+{\n+  virtual constexpr int f() const { return 1; };\n+};\n+\n+struct B\n+{\n+  virtual constexpr int g() const { return 2; };\n+};\n+\n+struct C: A, B\n+{\n+};\n+\n+constexpr C c;\n+\n+constexpr int g(const B& b) { return b.g(); }\n+static_assert (g(c) == 2);\n+"}, {"sha": "a8a89952626f41ba1752728aa78aedd2431b965c", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual17.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece3bd8088983289731450826c238eb2bdd2db5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual17.C?ref=7ece3bd8088983289731450826c238eb2bdd2db5", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/93310\n+// { dg-do compile { target c++20 } }\n+\n+struct A\n+{\n+  virtual constexpr char f () const\n+  { return 'A'; }\n+};\n+\n+struct B : A\n+{\n+  char x;\n+\n+  constexpr B () : x (0)\n+  { x = ((A *)this)->f(); }\n+\n+  virtual constexpr char f () const\n+  { return 'B'; }\n+};\n+\n+struct C : B\n+{\n+  virtual constexpr char f () const\n+  { return 'C'; }\n+};\n+\n+constexpr C c;\n+static_assert (c.x == 'B');"}]}