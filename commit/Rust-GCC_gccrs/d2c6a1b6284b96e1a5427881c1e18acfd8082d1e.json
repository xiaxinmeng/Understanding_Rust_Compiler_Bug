{"sha": "d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjNmExYjYyODRiOTZlMWE1NDI3ODgxYzFlMThhY2ZkODA4MmQxZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-27T20:34:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-27T20:34:12Z"}, "message": "alpha.c (hard_fp_register_operand): Mind the mode.\n\n        * config/alpha/alpha.c (hard_fp_register_operand): Mind the mode.\n        (hard_int_register_operand): New.\n        * config/alpha/alpha-protos.h: Declare it.\n        * config/alpha/alpha.h (PREDICATE_CODES): Update.\n        * config/alpha/alpha.md (peep2 patterns): Use hard_int_register_operand\n        as needed; use peep2_reg_dead_p instead of dead_or_set_p.\n\nFrom-SVN: r34209", "tree": {"sha": "91ed04981004d5ead1bcbdab22ff4a7bee0052bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ed04981004d5ead1bcbdab22ff4a7bee0052bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/comments", "author": null, "committer": null, "parents": [{"sha": "232801393614cd0dd2d1d9edb0821a08fe57e767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232801393614cd0dd2d1d9edb0821a08fe57e767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232801393614cd0dd2d1d9edb0821a08fe57e767"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "38306c8271261139e3aba0f54ddb7609b3fdf6a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "patch": "@@ -27,6 +27,13 @@\n \n \t* config/i386/i386.md (all peepholes): Use peep2_regno_dead_p.\n \n+\t* config/alpha/alpha.c (hard_fp_register_operand): Mind the mode.\n+\t(hard_int_register_operand): New.\n+\t* config/alpha/alpha-protos.h: Declare it.\n+\t* config/alpha/alpha.h (PREDICATE_CODES): Update.\n+\t* config/alpha/alpha.md (peep2 patterns): Use hard_int_register_operand\n+\tas needed; use peep2_reg_dead_p instead of dead_or_set_p.\n+\n 2000-05-27  Richard Henderson  <rth@cygnus.com>\n \n \t* function.c (thread_prologue_epilogue_insns): Don't move the"}, {"sha": "41c4187c5d63b2229d029d8b0659d57fb2a44ec7", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "patch": "@@ -49,6 +49,7 @@ extern int mul8_operand PARAMS ((rtx, enum machine_mode));\n extern int fp0_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_fp0_operand PARAMS ((rtx, enum machine_mode));\n extern int hard_fp_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int hard_int_register_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_cint_operand PARAMS ((rtx, enum machine_mode));\n extern int some_operand PARAMS ((rtx, enum machine_mode));\n extern int some_ni_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "f467c45b2b80d18dcef150f900ff4acd78b51a67", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "patch": "@@ -562,9 +562,27 @@ hard_fp_register_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  return ((GET_CODE (op) == REG && REGNO_REG_CLASS (REGNO (op)) == FLOAT_REGS)\n-\t  || (GET_CODE (op) == SUBREG\n-\t      && hard_fp_register_operand (SUBREG_REG (op), mode)));\n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  return GET_CODE (op) == REG && REGNO_REG_CLASS (REGNO (op)) == FLOAT_REGS;\n+}\n+\n+/* Return 1 if OP is a hard general register.  */\n+\n+int\n+hard_int_register_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  return GET_CODE (op) == REG && REGNO_REG_CLASS (REGNO (op)) == GENERAL_REGS;\n }\n \n /* Return 1 if OP is a register or a constant integer.  */"}, {"sha": "a362bb86c745b0548a7e2ef4af2c9e72025065b7", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "patch": "@@ -2347,6 +2347,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"any_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"hard_fp_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"hard_int_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_not_elim_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_no_subreg_operand\", {REG}},\t\t\t\t\t\\\n   {\"addition_operation\", {PLUS}},"}, {"sha": "520c2e099049f442930903afa50c92ec86f3aed6", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c6a1b6284b96e1a5427881c1e18acfd8082d1e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=d2c6a1b6284b96e1a5427881c1e18acfd8082d1e", "patch": "@@ -5869,21 +5869,34 @@\n ;; reload when converting fp->int.\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"memory_operand\" \"m\"))\n-   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n+        (match_operand:SI 1 \"memory_operand\" \"\"))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n         (sign_extend:DI (match_dup 0)))]\n-  \"dead_or_set_p (next_nonnote_insn (insn), operands[0])\"\n+  \"true_regnum (operands[0]) == true_regnum (operands[2])\n+   || peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2)\n \t(sign_extend:DI (match_dup 1)))]\n   \"\")\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"hard_fp_register_operand\" \"f\"))\n-   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n+        (match_operand:SI 1 \"hard_fp_register_operand\" \"\"))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n         (sign_extend:DI (match_dup 0)))]\n-  \"TARGET_FIX && dead_or_set_p (next_nonnote_insn (insn), operands[0])\"\n+  \"TARGET_FIX\n+   && (true_regnum (operands[0]) == true_regnum (operands[2])\n+       || peep2_reg_dead_p (2, operands[0]))\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n+        (sign_extend:DI (match_operand:SI 1 \"hard_fp_register_operand\" \"\")))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n+        (match_dup 0))]\n+  \"TARGET_FIX && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2)\n \t(sign_extend:DI (match_dup 1)))]\n   \"\")"}]}