{"sha": "228b4037f0d7b13bccfc2e4620bed6ac51f6cca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4YjQwMzdmMGQ3YjEzYmNjZmMyZTQ2MjBiZWQ2YWM1MWY2Y2NhOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-14T19:20:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-14T19:20:09Z"}, "message": "Clarify numerous *_operand comments.\n\n(SPARC_STACK_ALIGN): Delete.\n(sparc_frw_output_function_epilogue): Delete unused variable\nload_only_r15.\n(sparc_frw_epilogue_delay_slots): Delete r15/fmask test.\n\nFrom-SVN: r3234", "tree": {"sha": "b60cf9f01a24f2eecea1ec958f7c6d95f2d52913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60cf9f01a24f2eecea1ec958f7c6d95f2d52913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9/comments", "author": null, "committer": null, "parents": [{"sha": "b4c65118c407e7776c66fd4cb49a4517bf9ce46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c65118c407e7776c66fd4cb49a4517bf9ce46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c65118c407e7776c66fd4cb49a4517bf9ce46a"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "8e1b9a94fcc03f34ddc271447b5b5359c85c4866", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228b4037f0d7b13bccfc2e4620bed6ac51f6cca9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=228b4037f0d7b13bccfc2e4620bed6ac51f6cca9", "patch": "@@ -154,7 +154,7 @@ symbolic_operand (op, mode)\n \t       || GET_CODE (XEXP (op, 0)) == LABEL_REF)\n \t      && GET_CODE (XEXP (op, 1)) == CONST_INT);\n \n-      /* This clause seems to be irrelevant.  */\n+      /* ??? This clause seems to be irrelevant.  */\n     case CONST_DOUBLE:\n       return GET_MODE (op) == mode;\n \n@@ -396,8 +396,9 @@ cc_arithopn (op, mode)\n \t  || GET_CODE (op) == IOR);\n }\n \f\n-/* Return truth value of whether OP can be used as an operands in a three\n-   address arithmetic insn (such as add %o1,7,%l2) of mode MODE.  */\n+/* Return true if OP is a register, or is a CONST_INT that can fit in a 13\n+   bit immediate field.  This is an acceptable SImode operand for most 3\n+   address instructions.  */\n \n int\n arith_operand (op, mode)\n@@ -408,7 +409,9 @@ arith_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op)));\n }\n \n-/* Return truth value of whether OP is a register or a CONST_DOUBLE.  */\n+/* Return true if OP is a register, or is a CONST_INT or CONST_DOUBLE that\n+   can fit in a 13 bit immediate field.  This is an acceptable DImode operand\n+   for most 3 address instructions.  */\n \n int\n arith_double_operand (op, mode)\n@@ -429,7 +432,8 @@ arith_double_operand (op, mode)\n }\n \n /* Return truth value of whether OP is a integer which fits the\n-   range constraining immediate operands in three-address insns.  */\n+   range constraining immediate operands in most three-address insns,\n+   which have a 13 bit immediate field.  */\n \n int\n small_int (op, mode)\n@@ -3127,11 +3131,6 @@ struct sparc_frame_info zero_frame_info;\n   || (regno == FRAME_POINTER_REGNUM && frame_pointer_needed)\t\\\n   || (regno == 15 && regs_ever_live[15]))\n \n-#ifndef SPARC_STACK_ALIGN\n-#define STACK_BYTES (STACK_BOUNDARY / 8)\n-#define SPARC_STACK_ALIGN(X) (((X) + STACK_BYTES -  1) & -STACK_BYTES)\n-#endif\n-\n /* Return the bytes needed to compute the frame pointer from the current\n    stack pointer.  */\n \n@@ -3404,7 +3403,6 @@ sparc_frw_output_function_epilogue (file, size, ignored1, ignored2)\n   char *t1_str = \"%g1\";\n   rtx epilogue_delay = current_function_epilogue_delay_list;\n   int noepilogue = FALSE;\n-  int load_only_r15;\n \n   /* The epilogue does not depend on any registers, but the stack\n      registers, so we assume that if we have 1 pending nop, it can be\n@@ -3450,9 +3448,6 @@ sparc_frw_output_function_epilogue (file, size, ignored1, ignored2)\n \n       sparc_frw_save_restore (file, \"ld\", \"ldd\");\n \n-      load_only_r15 = (current_frame_info.mask == (1 << 15)\n-\t\t       && current_frame_info.fmask == 0);\n-\n       if (current_function_returns_struct)\n \tfprintf (file, \"\\tjmp %%o7+12\\n\");\n       else\n@@ -3498,9 +3493,6 @@ sparc_frw_epilogue_delay_slots ()\n   if (current_frame_info.total_size == 0)\n     return 1;\n \n-  if (current_frame_info.mask == (1 << 15) && current_frame_info.fmask == 0)\n-    return 1;\n-\n   return 0;\n }\n "}]}