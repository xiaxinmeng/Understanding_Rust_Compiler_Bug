{"sha": "160a6c31074afde0bfc835591a95653c5e65cc45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwYTZjMzEwNzRhZmRlMGJmYzgzNTU5MWE5NTY1M2M1ZTY1Y2M0NQ==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-05-08T04:28:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-06T14:46:55Z"}, "message": "[Ada] Spurious initialization of element iterators in \"for of\" loops\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_Formal_Container_Element_Loop): Remove\n\tlegacy expansion of element iterators, and use expansion form\n\tused by unconstrained element types in the general case.", "tree": {"sha": "b1b44c880cee89e779e91fcb8d9ab2f37d41baff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1b44c880cee89e779e91fcb8d9ab2f37d41baff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/160a6c31074afde0bfc835591a95653c5e65cc45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160a6c31074afde0bfc835591a95653c5e65cc45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160a6c31074afde0bfc835591a95653c5e65cc45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160a6c31074afde0bfc835591a95653c5e65cc45/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7961c89914cf544018e731693418f18b5cc984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7961c89914cf544018e731693418f18b5cc984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7961c89914cf544018e731693418f18b5cc984"}], "stats": {"total": 68, "additions": 15, "deletions": 53}, "files": [{"sha": "3e65084c65f61b3bc612f4593c183576855b7cfc", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 15, "deletions": 53, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160a6c31074afde0bfc835591a95653c5e65cc45/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160a6c31074afde0bfc835591a95653c5e65cc45/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=160a6c31074afde0bfc835591a95653c5e65cc45", "patch": "@@ -4077,7 +4077,6 @@ package body Exp_Ch5 is\n                     Make_Defining_Identifier (Loc,\n                       Chars => New_External_Name (Chars (Element), 'C'));\n       Elmt_Decl : Node_Id;\n-      Elmt_Ref  : Node_Id;\n \n       Element_Op : constant Entity_Id :=\n                      Get_Iterable_Type_Primitive (Container_Typ, Name_Element);\n@@ -4088,19 +4087,10 @@ package body Exp_Ch5 is\n \n    begin\n       --  For an element iterator, the Element aspect must be present,\n-      --  (this is checked during analysis) and the expansion takes the form:\n+      --  (this is checked during analysis).\n \n-      --    Cursor : Cursor_Type := First (Container);\n-      --    Elmt : Element_Type;\n-      --    while Has_Element (Cursor, Container) loop\n-      --       Elmt := Element (Container, Cursor);\n-      --          <original loop statements>\n-      --       Cursor := Next (Container, Cursor);\n-      --    end loop;\n-\n-      --   However this expansion is not legal if the element is indefinite.\n-      --   In that case we create a block to hold a variable declaration\n-      --   initialized with a call to Element, and generate:\n+      --  We create a block to hold a variable declaration initialized with\n+      --  a call to Element, and generate:\n \n       --    Cursor : Cursor_Type := First (Container);\n       --    while Has_Element (Cursor, Container) loop\n@@ -4132,48 +4122,20 @@ package body Exp_Ch5 is\n           Defining_Identifier => Element,\n           Object_Definition   => New_Occurrence_Of (Etype (Element_Op), Loc));\n \n-      if not Is_Constrained (Etype (Element_Op)) then\n-         Set_Expression (Elmt_Decl,\n-           Make_Function_Call (Loc,\n-             Name                   => New_Occurrence_Of (Element_Op, Loc),\n-             Parameter_Associations => New_List (\n-               Convert_To_Iterable_Type (Container, Loc),\n-               New_Occurrence_Of (Cursor, Loc))));\n-\n-         Set_Statements (New_Loop,\n-           New_List\n-             (Make_Block_Statement (Loc,\n-                Declarations => New_List (Elmt_Decl),\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements => Stats))));\n-\n-      else\n-         Elmt_Ref :=\n-           Make_Assignment_Statement (Loc,\n-             Name       => New_Occurrence_Of (Element, Loc),\n-             Expression =>\n-               Make_Function_Call (Loc,\n-                 Name                   => New_Occurrence_Of (Element_Op, Loc),\n-                 Parameter_Associations => New_List (\n-                   Convert_To_Iterable_Type (Container, Loc),\n-                   New_Occurrence_Of (Cursor, Loc))));\n-\n-         Prepend (Elmt_Ref, Stats);\n-\n-         --  The element is assignable in the expanded code\n-\n-         Set_Assignment_OK (Name (Elmt_Ref));\n-\n-         --  The loop is rewritten as a block, to hold the element declaration\n-\n-         New_Loop :=\n-           Make_Block_Statement (Loc,\n-             Declarations               => New_List (Elmt_Decl),\n+      Set_Expression (Elmt_Decl,\n+        Make_Function_Call (Loc,\n+          Name                   => New_Occurrence_Of (Element_Op, Loc),\n+          Parameter_Associations => New_List (\n+            Convert_To_Iterable_Type (Container, Loc),\n+            New_Occurrence_Of (Cursor, Loc))));\n+\n+      Set_Statements (New_Loop,\n+        New_List\n+          (Make_Block_Statement (Loc,\n+             Declarations => New_List (Elmt_Decl),\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => New_List (New_Loop)));\n-      end if;\n+                 Statements => Stats))));\n \n       --  The element is only modified in expanded code, so it appears as\n       --  unassigned to the warning machinery. We must suppress this spurious"}]}