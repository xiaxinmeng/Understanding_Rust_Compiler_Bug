{"sha": "799270b430542572ddc859331e9e15311ce7ee2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5MjcwYjQzMDU0MjU3MmRkYzg1OTMzMWU5ZTE1MzExY2U3ZWUyYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-28T17:43:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-28T20:08:14Z"}, "message": "libstdc++: Update the <numeric> synopsis test to latest standard\n\nTested with\n\n  make check RUNTESTFLAGS=\"conformance.exp=*numeric*synopsis* --target_board=unix/-std=$std\"\n\nfor std in {c++98, c++11, c++17, c++2a}.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/26_numerics/headers/numeric/synopsis.cc: Add signatures for\n\tfunctions introduced in C++11, C++17 and C++2a.  Add 'constexpr' to\n\texisting signatures for C++2a.", "tree": {"sha": "1ebe99b26e3861ef0796f027f5dd649447229eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ebe99b26e3861ef0796f027f5dd649447229eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799270b430542572ddc859331e9e15311ce7ee2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799270b430542572ddc859331e9e15311ce7ee2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799270b430542572ddc859331e9e15311ce7ee2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799270b430542572ddc859331e9e15311ce7ee2c/comments", "author": null, "committer": null, "parents": [{"sha": "586b016cd48f5a5f6f2ba9f179105fabaa3e85dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586b016cd48f5a5f6f2ba9f179105fabaa3e85dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586b016cd48f5a5f6f2ba9f179105fabaa3e85dd"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "6484e499b963998257dc499e8de9985b78c482a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799270b430542572ddc859331e9e15311ce7ee2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799270b430542572ddc859331e9e15311ce7ee2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=799270b430542572ddc859331e9e15311ce7ee2c", "patch": "@@ -1,3 +1,9 @@\n+2020-02-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/26_numerics/headers/numeric/synopsis.cc: Add signatures for\n+\tfunctions introduced in C++11, C++17 and C++2a.  Add 'constexpr' to\n+\texisting signatures for C++2a.\n+\n 2020-02-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/24_iterators/range_operations/advance_debug_neg.cc: Run"}, {"sha": "5a9465c45f4091f063db0a122e4bc6ecb6d75555", "filename": "libstdc++-v3/testsuite/26_numerics/headers/numeric/synopsis.cc", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799270b430542572ddc859331e9e15311ce7ee2c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799270b430542572ddc859331e9e15311ce7ee2c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fsynopsis.cc?ref=799270b430542572ddc859331e9e15311ce7ee2c", "patch": "@@ -19,46 +19,157 @@\n \n #include <numeric>\n \n+#if __cplusplus > 201703L\n+#define CONSTEXPR constexpr\n+#else\n+#define CONSTEXPR\n+#endif\n+\n namespace std {\n   template <class InputIterator, class T>\n+    CONSTEXPR\n     T accumulate(InputIterator first, InputIterator last, T init);\n \n   template <class InputIterator, class T, class BinaryOperation>\n+    CONSTEXPR\n     T accumulate(InputIterator first, InputIterator last, T init,\n                  BinaryOperation binary_op);\n \n   template <class InputIterator1, class InputIterator2, class T>\n+    CONSTEXPR\n     T inner_product(InputIterator1 first1, InputIterator1 last1,\n                     InputIterator2 first2, T init);\n \n   template <class InputIterator1, class InputIterator2, class T,\n             class BinaryOperation1, class BinaryOperation2>\n+    CONSTEXPR\n     T inner_product(InputIterator1 first1, InputIterator1 last1,\n                     InputIterator2 first2, T init,\n                     BinaryOperation1 binary_op1,\n                     BinaryOperation2 binary_op2);\n \n   template <class InputIterator, class OutputIterator>\n+    CONSTEXPR\n     OutputIterator partial_sum(InputIterator first,\n                                InputIterator last,\n                                OutputIterator result);\n \n   template <class InputIterator, class OutputIterator,\n             class BinaryOperation>\n+    CONSTEXPR\n     OutputIterator partial_sum(InputIterator first,\n                                InputIterator last,\n                                OutputIterator result,\n                                BinaryOperation binary_op);\n \n   template <class InputIterator, class OutputIterator>\n+    CONSTEXPR\n     OutputIterator adjacent_difference(InputIterator first,\n                                        InputIterator last,\n                                        OutputIterator result);\n \n   template <class InputIterator, class OutputIterator,\n             class BinaryOperation>\n+    CONSTEXPR\n     OutputIterator adjacent_difference(InputIterator first,\n                                        InputIterator last,\n                                        OutputIterator result,\n                                        BinaryOperation binary_op);\n+#if __cplusplus >= 201103L\n+  template<class ForwardIterator, class T>\n+    CONSTEXPR void iota(ForwardIterator first, ForwardIterator last, T value);\n+#endif // C++11\n+\n+#if __cplusplus >= 201703L\n+  template<class InputIterator>\n+    CONSTEXPR typename iterator_traits<InputIterator>::value_type\n+    reduce(InputIterator first, InputIterator last);\n+\n+  template<class InputIterator, class T>\n+    CONSTEXPR T reduce(InputIterator first, InputIterator last, T init);\n+\n+  template<class InputIterator, class T, class BinaryOperation>\n+    CONSTEXPR T reduce(InputIterator first, InputIterator last, T init,\n+\t\t       BinaryOperation binary_op);\n+\n+  template<class InputIterator, class OutputIterator, class T>\n+    CONSTEXPR OutputIterator\n+    exclusive_scan(InputIterator first, InputIterator last,\n+\t\t   OutputIterator result, T init);\n+\n+  template<class InputIterator, class OutputIterator, class T,\n+\t   class BinaryOperation>\n+    CONSTEXPR OutputIterator\n+    exclusive_scan(InputIterator first, InputIterator last,\n+\t\t   OutputIterator result, T init, BinaryOperation binary_op);\n+\n+  template<class InputIterator, class OutputIterator>\n+    CONSTEXPR OutputIterator\n+    inclusive_scan(InputIterator first, InputIterator last,\n+\t\t   OutputIterator result);\n+\n+  template<class InputIterator, class OutputIterator, class BinaryOperation>\n+    CONSTEXPR OutputIterator\n+    inclusive_scan(InputIterator first, InputIterator last,\n+\t\t   OutputIterator result, BinaryOperation binary_op);\n+\n+  template<class InputIterator, class OutputIterator, class BinaryOperation,\n+\t   class T>\n+    CONSTEXPR OutputIterator\n+    inclusive_scan(InputIterator first, InputIterator last,\n+\t\t   OutputIterator result, BinaryOperation binary_op, T init);\n+\n+  template<class InputIterator1, class InputIterator2, class T>\n+    CONSTEXPR T transform_reduce(InputIterator1 first1, InputIterator1 last1,\n+\t\t\t\t InputIterator2 first2, T init);\n+\n+  template<class InputIterator1, class InputIterator2, class T,\n+\t   class BinaryOperation1, class BinaryOperation2>\n+    CONSTEXPR T transform_reduce(InputIterator1 first1, InputIterator1 last1,\n+\t\t\t\t InputIterator2 first2, T init,\n+\t\t\t\t BinaryOperation1 binary_op1,\n+\t\t\t\t BinaryOperation2 binary_op2);\n+\n+  template<class InputIterator, class T,\n+\t   class BinaryOperation, class UnaryOperation>\n+    CONSTEXPR T transform_reduce(InputIterator first, InputIterator last, T init,\n+\t\t\t\t BinaryOperation binary_op,\n+\t\t\t\t UnaryOperation unary_op);\n+\n+  template<class InputIterator, class OutputIterator, class T,\n+\t   class BinaryOperation, class UnaryOperation>\n+    CONSTEXPR OutputIterator\n+    transform_exclusive_scan(InputIterator first, InputIterator last,\n+\t\t\t     OutputIterator result, T init,\n+\t\t\t     BinaryOperation binary_op, UnaryOperation unary_op);\n+\n+  template<class InputIterator, class OutputIterator,\n+\t   class BinaryOperation, class UnaryOperation>\n+    CONSTEXPR OutputIterator\n+    transform_inclusive_scan(InputIterator first, InputIterator last,\n+\t\t\t     OutputIterator result,\n+\t\t\t     BinaryOperation binary_op, UnaryOperation unary_op);\n+\n+  template<class InputIterator, class OutputIterator,\n+\t   class BinaryOperation, class UnaryOperation, class T>\n+    CONSTEXPR OutputIterator\n+    transform_inclusive_scan(InputIterator first, InputIterator last,\n+\t\t\t     OutputIterator result,\n+\t\t\t     BinaryOperation binary_op, UnaryOperation unary_op,\n+\t\t\t     T init);\n+#endif // C++17\n+\n+#if __cplusplus > 201703L\n+  template<class M, class N>\n+    constexpr common_type_t<M,N> gcd(M m, N n);\n+\n+  template<class M, class N>\n+    constexpr common_type_t<M,N> lcm(M m, N n);\n+\n+  template<class T>\n+    constexpr T midpoint(T a, T b) noexcept;\n+\n+  template<class T>\n+    constexpr T* midpoint(T* a, T* b);\n+#endif // C++2a\n }"}]}