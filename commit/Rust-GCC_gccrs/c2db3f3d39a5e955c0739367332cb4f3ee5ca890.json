{"sha": "c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkYjNmM2QzOWE1ZTk1NWMwNzM5MzY3MzMyY2I0ZjNlZTVjYTg5MA==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-05-29T08:59:08Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-05-29T08:59:08Z"}, "message": "-fuse-caller-save - Enable for MIPS\n\n2014-05-29  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* config/mips/mips.h (POST_CALL_TMP_REG): Define.\n\t* config/mips/mips.c (mips_emit_call_insn): Add POST_CALL_TMP_REG\n\tclobber.\n\t(mips_split_call): Use POST_CALL_TMP_REG.\n\t(TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Redefine to true.\n\n\t* gcc.target/mips/mips.exp: Add use-caller-save to -ffoo/-fno-foo\n\toptions.\n\t* gcc.target/mips/fuse-caller-save.h: New include file.\n\t* gcc.target/mips/fuse-caller-save.c: New test.\n\t* gcc.target/mips/fuse-caller-save-mips16.c: Same.\n\t* gcc.target/mips/fuse-caller-save-micromips.c: Same.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r211049", "tree": {"sha": "9f9a483656688d27a979e680fda462192b02869f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f9a483656688d27a979e680fda462192b02869f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/comments", "author": null, "committer": null, "parents": [{"sha": "41455f89185c4cf265d15e6d4e2af546514e85db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41455f89185c4cf265d15e6d4e2af546514e85db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41455f89185c4cf265d15e6d4e2af546514e85db"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "1eebdacf6cf1d9f95a5d9d99aa190787a23e65e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -1,3 +1,12 @@\n+2014-05-29  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/mips/mips.h (POST_CALL_TMP_REG): Define.\n+\t* config/mips/mips.c (mips_emit_call_insn): Add POST_CALL_TMP_REG\n+\tclobber.\n+\t(mips_split_call): Use POST_CALL_TMP_REG.\n+\t(TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): Redefine to true.\n+\n 2014-05-29  Tom de Vries  <tom@codesourcery.com>\n \n \t* final.c (collect_fn_hard_reg_usage): Guard variable declaration"}, {"sha": "804112cb074e55ef4691c36b3b2d7b24b90b13a8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -2848,6 +2848,15 @@ mips_emit_call_insn (rtx pattern, rtx orig_addr, rtx addr, bool lazy_p)\n \t       gen_rtx_REG (Pmode, GOT_VERSION_REGNUM));\n       emit_insn (gen_update_got_version ());\n     }\n+\n+  if (TARGET_MIPS16\n+      && TARGET_EXPLICIT_RELOCS\n+      && TARGET_CALL_CLOBBERED_GP)\n+    {\n+      rtx post_call_tmp_reg = gen_rtx_REG (word_mode, POST_CALL_TMP_REG);\n+      clobber_reg (&CALL_INSN_FUNCTION_USAGE (insn), post_call_tmp_reg);\n+    }\n+\n   return insn;\n }\n \f\n@@ -7104,10 +7113,8 @@ mips_split_call (rtx insn, rtx call_pattern)\n {\n   emit_call_insn (call_pattern);\n   if (!find_reg_note (insn, REG_NORETURN, 0))\n-    /* Pick a temporary register that is suitable for both MIPS16 and\n-       non-MIPS16 code.  $4 and $5 are used for returning complex double\n-       values in soft-float code, so $6 is the first suitable candidate.  */\n-    mips_restore_gp_from_cprestore_slot (gen_rtx_REG (Pmode, GP_ARG_FIRST + 2));\n+    mips_restore_gp_from_cprestore_slot (gen_rtx_REG (Pmode,\n+\t\t\t\t\t\t      POST_CALL_TMP_REG));\n }\n \n /* Return true if a call to DECL may need to use JALX.  */\n@@ -19143,6 +19150,9 @@ mips_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #undef TARGET_ATOMIC_ASSIGN_EXPAND_FENV\n #define TARGET_ATOMIC_ASSIGN_EXPAND_FENV mips_atomic_assign_expand_fenv\n \n+#undef TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n+#define TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "933e053d6a6de7f418f2fbd400cad9ad241cd549", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -2175,6 +2175,13 @@ enum reg_class\n #define FP_ARG_FIRST (FP_REG_FIRST + 12)\n #define FP_ARG_LAST  (FP_ARG_FIRST + MAX_ARGS_IN_REGISTERS - 1)\n \n+/* Temporary register that is used when restoring $gp after a call.  $4 and $5\n+   are used for returning complex double values in soft-float code, so $6 is the\n+   first suitable candidate for TARGET_MIPS16.  For !TARGET_MIPS16 we can use\n+   $gp itself as the temporary.  */\n+#define POST_CALL_TMP_REG \\\n+  (TARGET_MIPS16 ? GP_ARG_FIRST + 2 : PIC_OFFSET_TABLE_REGNUM)\n+\n /* 1 if N is a possible register number for function argument passing.\n    We have no FP argument registers when soft-float.  When FP registers\n    are 32 bits, we can't directly reference the odd numbered ones.  */"}, {"sha": "92801a9340f15f6c4a1f79b03ecaa5cd9a902793", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -1,3 +1,13 @@\n+2014-05-29  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/mips/mips.exp: Add use-caller-save to -ffoo/-fno-foo\n+\toptions.\n+\t* gcc.target/mips/fuse-caller-save.h: New include file.\n+\t* gcc.target/mips/fuse-caller-save.c: New test.\n+\t* gcc.target/mips/fuse-caller-save-mips16.c: Same.\n+\t* gcc.target/mips/fuse-caller-save-micromips.c: Same.\n+\n 2014-05-29  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* gcc.dg/vect/pr52252-ld.c: Fix target and options for the test."}, {"sha": "6ad01c7b389d57d7c58cd9b4fa12f7118a883160", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save-micromips.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-micromips.c?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fuse-caller-save (-mmicromips)\" } */\n+/* At -O0 and -O1, the register allocator behaves more conservatively, and\n+   the fuse-caller-save optimization doesnt' trigger.  */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n+/* Testing -fuse-caller-save optimization option.  */\n+\n+#define ATTRIBUTE MICROMIPS\n+#include \"fuse-caller-save.h\"\n+\n+/* Check that there are only 2 stack-saves: r31 in main and foo.  */\n+\n+/* Check that there only 2 sw/sd.  */\n+/* { dg-final { scan-assembler-times \"(?n)s\\[wd\\]\\t\\\\\\$.*,.*\\\\(\\\\\\$sp\\\\)\" 2 } } */\n+\n+/* Check that the first caller-save register is unused.  */\n+/* { dg-final { scan-assembler-not \"\\\\\\$16\" } } */"}, {"sha": "a7c6cf4a0474b0defcbf0cf04759cce17a328cf2", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save-mips16.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save-mips16.c?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fuse-caller-save (-mips16)\" } */\n+/* At -O0 and -O1, the register allocator behaves more conservatively, and\n+   the fuse-caller-save optimization doesnt' trigger.  */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n+/* Testing -fuse-caller-save optimization option.  */\n+\n+#define ATTRIBUTE MIPS16\n+#include \"fuse-caller-save.h\"\n+\n+/* Check that there are only 2 stack-saves: r31 in main and foo.  */\n+\n+/* Check that there only 2 sw/sd.  */\n+/* { dg-final { scan-assembler-times \"(?n)s\\[wd\\]\\t\\\\\\$.*,.*\\\\(\\\\\\$sp\\\\)\" 2 } } */\n+\n+/* Check that the first caller-save register is unused.  */\n+/* { dg-final { scan-assembler-not \"\\\\\\$16\" } } */"}, {"sha": "72c08fe5cb3c64c41c60454638249f483403ee86", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.c?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fuse-caller-save\" } */\n+/* At -O0 and -O1, the register allocator behaves more conservatively, and\n+   the fuse-caller-save optimization doesnt' trigger.  */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-O0\" \"-O1\" } } */\n+/* Testing -fuse-caller-save optimization option.  */\n+\n+#define ATTRIBUTE NOCOMPRESSION\n+#include \"fuse-caller-save.h\"\n+\n+/* Check that there are only 2 stack-saves: r31 in main and foo.  */\n+\n+/* Check that there only 2 sw/sd.  */\n+/* { dg-final { scan-assembler-times \"(?n)s\\[wd\\]\\t\\\\\\$.*,.*\\\\(\\\\\\$sp\\\\)\" 2 } } */\n+\n+/* Check that the first caller-save register is unused.  */\n+/* { dg-final { scan-assembler-not \"\\\\\\$16\" } } */"}, {"sha": "edf6039f9b21795319d98b34b5ce2a092d34581b", "filename": "gcc/testsuite/gcc.target/mips/fuse-caller-save.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffuse-caller-save.h?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -0,0 +1,17 @@\n+static int __attribute__((noinline)) ATTRIBUTE\n+bar (int x)\n+{\n+  return x + 3;\n+}\n+\n+int __attribute__((noinline)) ATTRIBUTE\n+foo (int y)\n+{\n+  return y + bar (y);\n+}\n+\n+int ATTRIBUTE\n+main (void)\n+{\n+  return !(foo (5) == 13);\n+}"}, {"sha": "6ad816098d1363b031fb2307ce3d0806279f2356", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2db3f3d39a5e955c0739367332cb4f3ee5ca890/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "patch": "@@ -305,6 +305,7 @@ foreach option {\n     tree-vectorize\n     unroll-all-loops\n     unroll-loops\n+    use-caller-save\n } {\n     lappend mips_option_groups $option \"-f(no-|)$option\"\n }"}]}