{"sha": "bfe5c1215899ebd3871d177050c71d0a7a09f909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlNWMxMjE1ODk5ZWJkMzg3MWQxNzcwNTBjNzFkMGE3YTA5ZjkwOQ==", "commit": {"author": {"name": "Branko Cibej", "email": "branko.cibej@hermes.si", "date": "2000-05-08T18:32:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-08T18:32:58Z"}, "message": "complex_io.cc: Don't instantiate inserters and extractors for wide-character streams unless...\n\n\n2000-05-04  Branko Cibej  <branko.cibej@hermes.si>\n\n        * src/complex_io.cc: Don't instantiate inserters and extractors\n        for wide-character streams unless _GLIBCPP_USE_WCHAR_T is defined.\n\nFrom-SVN: r33770", "tree": {"sha": "78f915b1c3e66fcdb1c8d91d4938094adad9bfef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78f915b1c3e66fcdb1c8d91d4938094adad9bfef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe5c1215899ebd3871d177050c71d0a7a09f909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe5c1215899ebd3871d177050c71d0a7a09f909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe5c1215899ebd3871d177050c71d0a7a09f909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe5c1215899ebd3871d177050c71d0a7a09f909/comments", "author": null, "committer": null, "parents": [{"sha": "afc2cd0575ff57470ee0b2a055bbd57d5746aae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc2cd0575ff57470ee0b2a055bbd57d5746aae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afc2cd0575ff57470ee0b2a055bbd57d5746aae7"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "661c8ad4579b269cd3567942422f7852f39e4c85", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5c1215899ebd3871d177050c71d0a7a09f909/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5c1215899ebd3871d177050c71d0a7a09f909/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bfe5c1215899ebd3871d177050c71d0a7a09f909", "patch": "@@ -7,6 +7,11 @@\n \t* testsuite/27_io/filebuf.cc (filebuf): Use _M_buf_size_opt\n \tinstead of _M_buf_size.\n \n+2000-05-04  Branko Cibej  <branko.cibej@hermes.si>\n+\n+        * src/complex_io.cc: Don't instantiate inserters and extractors\n+        for wide-character streams unless _GLIBCPP_USE_WCHAR_T is defined.\n+\n 2000-05-03  Phil Edwards  <pme@sourceware.cygnus.com>\n             Felix Natter <fnatter@gmx.net>\n "}, {"sha": "5fec9cf52908c442c3b4b058fbd078c3b1fc1f99", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5c1215899ebd3871d177050c71d0a7a09f909/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5c1215899ebd3871d177050c71d0a7a09f909/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=bfe5c1215899ebd3871d177050c71d0a7a09f909", "patch": "@@ -92,64 +92,66 @@ namespace std\n \n \n   template\n-    basic_istream< char, char_traits<char> >&\n+    basic_istream<char, char_traits<char> >&\n     operator>>(basic_istream< char, char_traits<char> >&,\n                complex<float>&);\n \n   template\n-    basic_ostream< char, char_traits<char> >&\n+    basic_ostream<char, char_traits<char> >&\n     operator<<(basic_ostream< char, char_traits<char> >&,\n                const complex<float>&);\n \n   template\n-    basic_istream< char, char_traits<char> >&\n+    basic_istream<char, char_traits<char> >&\n     operator>>(basic_istream< char, char_traits<char> >&,\n                complex<double>&);\n \n   template\n-    basic_ostream< char, char_traits<char> >&\n+    basic_ostream<char, char_traits<char> >&\n     operator<<(basic_ostream< char, char_traits<char> >&,\n                const complex<double>&);\n \n   template\n-    basic_istream< char, char_traits<char> >&\n+    basic_istream<char, char_traits<char> >&\n     operator>>(basic_istream< char, char_traits<char> >&,\n                complex<long double>&);\n \n   template\n-    basic_ostream< char, char_traits<char> >&\n+    basic_ostream<char, char_traits<char> >&\n     operator<<(basic_ostream< char, char_traits<char> >&,\n                const complex<long double>&);\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n   template\n-    basic_istream< wchar_t, char_traits<wchar_t> >&\n+    basic_istream<wchar_t, char_traits<wchar_t> >&\n     operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n                complex<float>&);\n \n   template\n-    basic_ostream< wchar_t, char_traits<wchar_t> >&\n+    basic_ostream<wchar_t, char_traits<wchar_t> >&\n     operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n                const complex<float>&);\n \n   template\n-    basic_istream< wchar_t, char_traits<wchar_t> >&\n+    basic_istream<wchar_t, char_traits<wchar_t> >&\n     operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n                complex<double>&);\n \n   template\n-    basic_ostream< wchar_t, char_traits<wchar_t> >&\n+    basic_ostream<wchar_t, char_traits<wchar_t> >&\n     operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n                const complex<double>&);\n \n   template\n-    basic_istream< wchar_t, char_traits<wchar_t> >&\n+    basic_istream<wchar_t, char_traits<wchar_t> >&\n     operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n                complex<long double>&);\n \n   template\n-    basic_ostream< wchar_t, char_traits<wchar_t> >&\n+    basic_ostream<wchar_t, char_traits<wchar_t> >&\n     operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n                const complex<long double>&);\n+#endif //_GLIBCPP_USE_WCHAR_T\n }\n \n \n@@ -158,3 +160,5 @@ namespace std\n \n \n \n+\n+"}]}