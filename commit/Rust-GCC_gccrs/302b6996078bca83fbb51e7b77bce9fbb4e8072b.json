{"sha": "302b6996078bca83fbb51e7b77bce9fbb4e8072b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyYjY5OTYwNzhiY2E4M2ZiYjUxZTdiNzdiY2U5ZmJiNGU4MDcyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-10T21:41:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-10T21:41:11Z"}, "message": "Improve API docs for <memory> and <new>\n\n\t* include/bits/shared_ptr.h: Improve docs.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/bits/stl_uninitialized.h: Likewise.\n\t* include/bits/unique_ptr.h: Likewise.\n\t* libsupc++/new: Likewise.\n\nFrom-SVN: r271077", "tree": {"sha": "bfcdae6d1a79cde6c76f55fca4534b725fb24908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfcdae6d1a79cde6c76f55fca4534b725fb24908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302b6996078bca83fbb51e7b77bce9fbb4e8072b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302b6996078bca83fbb51e7b77bce9fbb4e8072b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302b6996078bca83fbb51e7b77bce9fbb4e8072b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302b6996078bca83fbb51e7b77bce9fbb4e8072b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e5858fbe6245b07f9115990bc58d4dfb76e46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e5858fbe6245b07f9115990bc58d4dfb76e46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e5858fbe6245b07f9115990bc58d4dfb76e46a"}], "stats": {"total": 201, "additions": 179, "deletions": 22}, "files": [{"sha": "77a83d273af126a867a94646ac24d9bb3cdd8313", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -1,3 +1,11 @@\n+2019-05-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr.h: Improve docs.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* include/bits/stl_uninitialized.h: Likewise.\n+\t* include/bits/unique_ptr.h: Likewise.\n+\t* libsupc++/new: Likewise.\n+\n 2019-05-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_deque.h"}, {"sha": "8f219e73d60babb187de8623739fdc7d50985652", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -60,7 +60,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  /// 20.7.2.2.11 shared_ptr I/O\n+  // 20.7.2.2.11 shared_ptr I/O\n+\n+  /// Write the stored pointer to an ostream.\n+  /// @relates shared_ptr\n   template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>\n     inline std::basic_ostream<_Ch, _Tr>&\n     operator<<(std::basic_ostream<_Ch, _Tr>& __os,\n@@ -82,6 +85,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// 20.7.2.2.10 shared_ptr get_deleter\n+\n+  /// If `__p` has a deleter of type `_Del`, return a pointer to it.\n   /// @relates shared_ptr\n   template<typename _Del, typename _Tp>\n     inline _Del*\n@@ -106,6 +111,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * A `shared_ptr` also stores another pointer, which is usually\n    * (but not always) the same pointer as it owns. The stored pointer\n    * can be retrieved by calling the `get()` member function.\n+   *\n+   * The equality and relational operators for `shared_ptr` only compare\n+   * the stored pointer returned by `get()`, not the owned pointer.\n+   * To test whether two `shared_ptr` objects share ownership of the same\n+   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.\n   */\n   template<typename _Tp>\n     class shared_ptr : public __shared_ptr<_Tp>\n@@ -122,10 +132,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n \n+      /// The type pointed to by the stored pointer, remove_extent_t<_Tp>\n       using element_type = typename __shared_ptr<_Tp>::element_type;\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n # define __cpp_lib_shared_ptr_weak_type 201606\n+      /// The corresponding weak_ptr type for this shared_ptr\n       using weak_type = weak_ptr<_Tp>;\n #endif\n       /**\n@@ -134,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }\n \n-      shared_ptr(const shared_ptr&) noexcept = default;\n+      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns the pointer @a __p.\n@@ -378,8 +390,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class weak_ptr<_Tp>;\n     };\n \n-  /// @relates shared_ptr @{\n-\n #if __cpp_deduction_guides >= 201606\n   template<typename _Tp>\n     shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;\n@@ -388,36 +398,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   // 20.7.2.2.7 shared_ptr comparisons\n+\n+  /// @relates shared_ptr @{\n+\n+  /// Equality operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return __a.get() == __b.get(); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !__a; }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !__a; }\n \n+  /// Inequality operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return __a.get() != __b.get(); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return (bool)__a; }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return (bool)__a; }\n \n+  /// Relational operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n@@ -428,6 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return less<_Vp>()(__a.get(), __b.get());\n     }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n@@ -436,6 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return less<_Tp_elt*>()(__a.get(), nullptr);\n     }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n@@ -444,59 +466,70 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return less<_Tp_elt*>()(nullptr, __a.get());\n     }\n \n+  /// Relational operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return !(__b < __a); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !(nullptr < __a); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(__a < nullptr); }\n \n+  /// Relational operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return (__b < __a); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return nullptr < __a; }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return __a < nullptr; }\n \n+  /// Relational operator for shared_ptr objects, compares the stored pointers\n   template<typename _Tp, typename _Up>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return !(__a < __b); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !(__a < nullptr); }\n \n+  /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(nullptr < __a); }\n \n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n+\n   /// Swap overload for shared_ptr\n   template<typename _Tp>\n     inline void\n     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n     { __a.swap(__b); }\n \n   // 20.7.2.2.9 shared_ptr casts.\n+\n   /// Convert type of `shared_ptr`, via `static_cast`\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n@@ -540,9 +573,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // @}\n \n   /**\n-   *  @brief  A smart pointer with weak semantics.\n+   * @brief  A non-owning observer for a pointer owned by a shared_ptr\n+   *\n+   * A weak_ptr provides a safe alternative to a raw pointer when you want\n+   * a non-owning reference to an object that is managed by a shared_ptr.\n    *\n-   *  With forwarding constructors and assignment operators.\n+   * Unlike a raw pointer, a weak_ptr can be converted to a new shared_ptr\n+   * that shares ownership with every other shared_ptr that already owns\n+   * the pointer. In other words you can upgrade from a non-owning \"weak\"\n+   * reference to an owning shared_ptr, without having access to any of\n+   * the existing shared_ptr objects.\n+   *\n+   * Also unlike a raw pointer, a weak_ptr does not become \"dangling\" after\n+   * the object it points to has been destroyed. Instead, a weak_ptr\n+   * becomes _expired_ and can no longer be converted to a shared_ptr that\n+   * owns the freed pointer, so you cannot accidentally access the pointed-to\n+   * object after it has been destroyed.\n    */\n   template<typename _Tp>\n     class weak_ptr : public __weak_ptr<_Tp>\n@@ -630,20 +676,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp = void>\n     struct owner_less;\n \n-  /// Void specialization of owner_less\n+  /// Void specialization of owner_less compares either shared_ptr or weak_ptr\n   template<>\n     struct owner_less<void> : _Sp_owner_less<void, void>\n     { };\n \n   /// Partial specialization of owner_less for shared_ptr.\n-  /// @relates shared_ptr\n   template<typename _Tp>\n     struct owner_less<shared_ptr<_Tp>>\n     : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>\n     { };\n \n   /// Partial specialization of owner_less for weak_ptr.\n-  /// @relates weak_ptr\n   template<typename _Tp>\n     struct owner_less<weak_ptr<_Tp>>\n     : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>\n@@ -704,7 +748,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       mutable weak_ptr<_Tp>  _M_weak_this;\n     };\n \n-  /// @relates unique_ptr @{\n+  /// @relates shared_ptr @{\n \n   /**\n    *  @brief  Create an object that is owned by a shared_ptr."}, {"sha": "968cc9658e2bc16255ba066f0faf492ef759948c", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -1305,28 +1305,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treset(_Yp* __p, _Deleter __d, _Alloc __a)\n         { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }\n \n+      /// Return the stored pointer.\n       element_type*\n       get() const noexcept\n       { return _M_ptr; }\n \n+      /// Return true if the stored pointer is not null.\n       explicit operator bool() const // never throws\n       { return _M_ptr == 0 ? false : true; }\n \n+      /// Return true if use_count() == 1.\n       bool\n       unique() const noexcept\n       { return _M_refcount._M_unique(); }\n \n+      /// If *this owns a pointer, return the number of owners, otherwise zero.\n       long\n       use_count() const noexcept\n       { return _M_refcount._M_get_use_count(); }\n \n+      /// Exchange both the owned pointer and the stored pointer.\n       void\n       swap(__shared_ptr<_Tp, _Lp>& __other) noexcept\n       {\n \tstd::swap(_M_ptr, __other._M_ptr);\n \t_M_refcount._M_swap(__other._M_refcount);\n       }\n \n+      /** @brief Define an ordering based on ownership.\n+       *\n+       * This function defines a strict weak ordering between two shared_ptr\n+       * or weak_ptr objects, such that one object is less than the other\n+       * unless they share ownership of the same pointer, or are both empty.\n+       * @{\n+      */\n       template<typename _Tp1>\n \tbool\n \towner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept\n@@ -1336,6 +1348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool\n \towner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n+      // @}\n \n     protected:\n       // This constructor is non-standard, it is used by allocate_shared."}, {"sha": "b29395cb7c04bb93d9ada466066f1209ff74e9c6", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -68,6 +68,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /** @addtogroup memory\n+   *  @{\n+   */\n+\n+  /// @cond undocumented\n+\n   template<bool _TrivialValueTypes>\n     struct __uninitialized_copy\n     {\n@@ -101,6 +107,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { return std::copy(__first, __last, __result); }\n     };\n \n+  /// @endcond\n+\n   /**\n    *  @brief Copies the range [first,last) into result.\n    *  @param  __first  An input iterator.\n@@ -134,6 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__uninit_copy(__first, __last, __result);\n     }\n \n+  /// @cond undocumented\n \n   template<bool _TrivialValueType>\n     struct __uninitialized_fill\n@@ -167,6 +176,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { std::fill(__first, __last, __x); }\n     };\n \n+  /// @endcond\n+\n   /**\n    *  @brief Copies the value x into the range [first,last).\n    *  @param  __first  An input iterator.\n@@ -194,6 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__uninit_fill(__first, __last, __x);\n     }\n \n+  /// @cond undocumented\n \n   template<bool _TrivialValueType>\n     struct __uninitialized_fill_n\n@@ -228,6 +240,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { return std::fill_n(__first, __n, __x); }\n     };\n \n+  /// @endcond\n+\n    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n    // DR 1339. uninitialized_fill_n should return the end of its range\n   /**\n@@ -255,6 +269,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__uninit_fill_n(__first, __n, __x);\n     }\n \n+  /// @cond undocumented\n+\n   // Extensions: versions of uninitialized_copy, uninitialized_fill,\n   //  and uninitialized_fill_n that take an allocator parameter.\n   //  We dispatch back to the standard versions when we're given the\n@@ -474,7 +490,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+  /// @endcond\n+\n #if __cplusplus >= 201103L\n+  /// @cond undocumented\n+\n   // Extensions: __uninitialized_default, __uninitialized_default_n,\n   // __uninitialized_default_a, __uninitialized_default_n_a.\n \n@@ -798,6 +818,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return {__first_res, __second_res};\n     }\n \n+  /// @endcond\n+\n   /**\n    *  @brief Copies the range [first,first+n) into result.\n    *  @param  __first  An input iterator.\n@@ -814,6 +836,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return std::__uninitialized_copy_n(__first, __n, __result,\n \t\t\t\t\t std::__iterator_category(__first)); }\n \n+  /// @cond undocumented\n   template<typename _InputIterator, typename _Size, typename _ForwardIterator>\n     inline pair<_InputIterator, _ForwardIterator>\n     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,\n@@ -823,12 +846,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::__uninitialized_copy_n_pair(__first, __n, __result,\n \t\t\t\t\t std::__iterator_category(__first));\n     }\n-\n+  /// @endcond\n #endif\n \n #if __cplusplus >= 201703L\n # define __cpp_lib_raw_memory_algorithms 201606L\n \n+  /**\n+   *  @brief Default-initializes objects in the range [first,last).\n+   *  @param  __first  A forward iterator.\n+   *  @param  __last   A forward iterator.\n+  */\n   template <typename _ForwardIterator>\n     inline void\n     uninitialized_default_construct(_ForwardIterator __first,\n@@ -837,13 +865,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __uninitialized_default_novalue(__first, __last);\n     }\n \n+  /**\n+   *  @brief Default-initializes objects in the range [first,first+count).\n+   *  @param  __first  A forward iterator.\n+   *  @param  __count  The number of objects to construct.\n+   *  @return   __first + __count\n+  */\n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)\n     {\n       return __uninitialized_default_novalue_n(__first, __count);\n     }\n \n+  /**\n+   *  @brief Value-initializes objects in the range [first,last).\n+   *  @param  __first  A forward iterator.\n+   *  @param  __last   A forward iterator.\n+  */\n   template <typename _ForwardIterator>\n     inline void\n     uninitialized_value_construct(_ForwardIterator __first,\n@@ -852,13 +891,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __uninitialized_default(__first, __last);\n     }\n \n+  /**\n+   *  @brief Value-initializes objects in the range [first,first+count).\n+   *  @param  __first  A forward iterator.\n+   *  @param  __count  The number of objects to construct.\n+   *  @return   __result + __count\n+  */\n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)\n     {\n       return __uninitialized_default_n(__first, __count);\n     }\n \n+  /**\n+   *  @brief Move-construct from the range [first,last) into result.\n+   *  @param  __first  An input iterator.\n+   *  @param  __last   An input iterator.\n+   *  @param  __result An output iterator.\n+   *  @return   __result + (__first - __last)\n+  */\n   template <typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator\n     uninitialized_move(_InputIterator __first, _InputIterator __last,\n@@ -869,6 +921,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);\n     }\n \n+  /**\n+   *  @brief Move-construct from the range [first,first+count) into result.\n+   *  @param  __first  An input iterator.\n+   *  @param  __count  The number of objects to initialize.\n+   *  @param  __result An output iterator.\n+   *  @return  __result + __count\n+  */\n   template <typename _InputIterator, typename _Size, typename _ForwardIterator>\n     inline pair<_InputIterator, _ForwardIterator>\n     uninitialized_move_n(_InputIterator __first, _Size __count,\n@@ -882,6 +941,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++17\n \n #if __cplusplus >= 201103L\n+  /// @cond undocumented\n+\n   template<typename _Tp, typename _Up, typename _Allocator>\n     inline void\n     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,\n@@ -948,8 +1009,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    std::__niter_base(__last),\n \t\t\t    std::__niter_base(__result), __alloc);\n     }\n+\n+  /// @endcond\n #endif\n \n+  // @} group memory\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "6a23669f1193523516fb4dbc6193d58c13cde67f", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #pragma GCC diagnostic pop\n #endif\n \n-  /// Primary template of default_delete, used by unique_ptr\n+  /// Primary template of default_delete, used by unique_ptr for single objects\n   template<typename _Tp>\n     struct default_delete\n     {\n@@ -63,14 +63,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /** @brief Converting constructor.\n        *\n-       * Allows conversion from a deleter for arrays of another type, @p _Up,\n-       * only if @p _Up* is convertible to @p _Tp*.\n+       * Allows conversion from a deleter for objects of another type, `_Up`,\n+       * only if `_Up*` is convertible to `_Tp*`.\n        */\n       template<typename _Up, typename = typename\n \t       enable_if<is_convertible<_Up*, _Tp*>::value>::type>\n         default_delete(const default_delete<_Up>&) noexcept { }\n \n-      /// Calls @c delete @p __ptr\n+      /// Calls `delete __ptr`\n       void\n       operator()(_Tp* __ptr) const\n       {\n@@ -84,7 +84,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n-  /// Specialization for arrays, default_delete.\n+\n+  /// Specialization of default_delete for arrays, used by `unique_ptr<T[]>`\n   template<typename _Tp>\n     struct default_delete<_Tp[]>\n     {\n@@ -95,17 +96,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /** @brief Converting constructor.\n        *\n        * Allows conversion from a deleter for arrays of another type, such as\n-       * a const-qualified version of @p _Tp.\n+       * a const-qualified version of `_Tp`.\n        *\n-       * Conversions from types derived from @c _Tp are not allowed because\n-       * it is unsafe to @c delete[] an array of derived types through a\n+       * Conversions from types derived from `_Tp` are not allowed because\n+       * it is undefined to `delete[]` an array of derived types through a\n        * pointer to the base type.\n        */\n       template<typename _Up, typename = typename\n \t       enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>\n         default_delete(const default_delete<_Up[]>&) noexcept { }\n \n-      /// Calls @c delete[] @p __ptr\n+      /// Calls `delete[] __ptr`\n       template<typename _Up>\n       typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type\n \toperator()(_Up* __ptr) const\n@@ -116,6 +117,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  /// @cond undocumented\n+\n   template <typename _Tp, typename _Dp>\n     class __uniq_ptr_impl\n     {\n@@ -158,6 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       tuple<pointer, _Dp> _M_t;\n     };\n+  /// @endcond\n \n   /// 20.7.1.2 unique_ptr for single objects.\n   template <typename _Tp, typename _Dp = default_delete<_Tp>>\n@@ -688,6 +692,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @relates unique_ptr @{\n \n+  /// Swap overload for unique_ptr\n   template<typename _Tp, typename _Dp>\n     inline\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n@@ -707,40 +712,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t unique_ptr<_Tp, _Dp>&) = delete;\n #endif\n \n+  /// Equality operator for unique_ptr objects, compares the owned pointers.\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() == __y.get(); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n     { return !__x; }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n     { return !__x; }\n \n+  /// Inequality operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() != __y.get(); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n     { return (bool)__x; }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n     { return (bool)__x; }\n \n+  /// Relational operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n@@ -753,6 +765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::less<_CT>()(__x.get(), __y.get());\n     }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n@@ -761,6 +774,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t\t nullptr);\n     }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n@@ -769,30 +783,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t\t __x.get());\n     }\n \n+  /// Relational operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__y < __x); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return !(nullptr < __x); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return !(__x < nullptr); }\n \n+  /// Relational operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x,\n \t      const unique_ptr<_Up, _Ep>& __y)\n     { return (__y < __x); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n@@ -801,6 +820,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t\t __x.get());\n     }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n@@ -809,18 +829,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t\t nullptr);\n     }\n \n+  /// Relational operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__x < __y); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return !(__x < nullptr); }\n \n+  /// unique_ptr comparison with nullptr\n   template<typename _Tp, typename _Dp>\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)"}, {"sha": "9ea44a4ede03ad5a55b9cb5ccc8a86968b91c916", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302b6996078bca83fbb51e7b77bce9fbb4e8072b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=302b6996078bca83fbb51e7b77bce9fbb4e8072b", "patch": "@@ -28,7 +28,8 @@\n  *\n  *  The header @c new defines several functions to manage dynamic memory and\n  *  handling memory allocation errors; see\n- *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.\n+ *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html\n+ *  for more.\n  */\n \n #ifndef _NEW\n@@ -211,10 +212,13 @@ namespace std\n #if __cplusplus > 201703L\n namespace std\n {\n+  /// Tag type used to declare a class-specific operator delete that can\n+  /// invoke the destructor before deallocating the memory.\n   struct destroying_delete_t\n   {\n     explicit destroying_delete_t() = default;\n   };\n+  /// Tag variable of type destroying_delete_t.\n   inline constexpr destroying_delete_t destroying_delete{};\n }\n // Only define the feature test macro if the compiler supports the feature:"}]}