{"sha": "9b854a97608cd666464ce555d152e0e83ab291aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4NTRhOTc2MDhjZDY2NjQ2NGNlNTU1ZDE1MmUwZTgzYWIyOTFhYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-08T15:08:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-08T15:08:16Z"}, "message": "tree-ssa-operands.c (add_stmt_operand): Do not mark stmts volatile when processing operands of an ADDR_EXPR.\n\n2011-12-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-operands.c (add_stmt_operand): Do not mark stmts\n\tvolatile when processing operands of an ADDR_EXPR.\n\t(get_indirect_ref_operands): Likewise.\n\t(get_tmr_operands): Likewise.\n\t(get_expr_operands): Likewise.\n\n\t* gcc.dg/volatile3.c: New testcase.\n\nFrom-SVN: r182117", "tree": {"sha": "cf170603549b65a83b8471dc9e2ce0b6de209fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf170603549b65a83b8471dc9e2ce0b6de209fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b854a97608cd666464ce555d152e0e83ab291aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b854a97608cd666464ce555d152e0e83ab291aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b854a97608cd666464ce555d152e0e83ab291aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b854a97608cd666464ce555d152e0e83ab291aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0a1ac21bda697a7bcec9ecd7b29c4df2c18ead4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a1ac21bda697a7bcec9ecd7b29c4df2c18ead4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a1ac21bda697a7bcec9ecd7b29c4df2c18ead4"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "acf73da830a4e84b6ede1b1ed603d0fc15b987d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b854a97608cd666464ce555d152e0e83ab291aa", "patch": "@@ -1,3 +1,11 @@\n+2011-12-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-operands.c (add_stmt_operand): Do not mark stmts\n+\tvolatile when processing operands of an ADDR_EXPR.\n+\t(get_indirect_ref_operands): Likewise.\n+\t(get_tmr_operands): Likewise.\n+\t(get_expr_operands): Likewise.\n+\n 2011-12-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/50395"}, {"sha": "fe1e197480fad5735c6176d81f5402dd9b6d2ca8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b854a97608cd666464ce555d152e0e83ab291aa", "patch": "@@ -1,3 +1,7 @@\n+2011-12-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/volatile3.c: New testcase.\n+\n 2011-12-08  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR tree-optimization/51315"}, {"sha": "4a5893d97cb127dc8e9d990dd3be91194f12c490", "filename": "gcc/testsuite/gcc.dg/volatile3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile3.c?ref=9b854a97608cd666464ce555d152e0e83ab291aa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-ssa\" } */\n+\n+volatile int *q;\n+void foo(int i)\n+{\n+  volatile int a[2];\n+  volatile int *p = &a[i];\n+  q = p;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"{v}\" \"ssa\" } } */\n+/* { dg-final { cleanup-tree-dump \"ssa\" } } */"}, {"sha": "0045dd875ec09b516ba28ead5e59332a01180977", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b854a97608cd666464ce555d152e0e83ab291aa/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=9b854a97608cd666464ce555d152e0e83ab291aa", "patch": "@@ -668,7 +668,8 @@ add_stmt_operand (tree *var_p, gimple stmt, int flags)\n   sym = (TREE_CODE (var) == SSA_NAME ? SSA_NAME_VAR (var) : var);\n \n   /* Mark statements with volatile operands.  */\n-  if (TREE_THIS_VOLATILE (sym))\n+  if (!(flags & opf_no_vops)\n+      && TREE_THIS_VOLATILE (sym))\n     gimple_set_has_volatile_ops (stmt, true);\n \n   if (is_gimple_reg (sym))\n@@ -728,7 +729,8 @@ get_indirect_ref_operands (gimple stmt, tree expr, int flags,\n {\n   tree *pptr = &TREE_OPERAND (expr, 0);\n \n-  if (TREE_THIS_VOLATILE (expr))\n+  if (!(flags & opf_no_vops)\n+      && TREE_THIS_VOLATILE (expr))\n     gimple_set_has_volatile_ops (stmt, true);\n \n   /* Add the VOP.  */\n@@ -747,7 +749,8 @@ get_indirect_ref_operands (gimple stmt, tree expr, int flags,\n static void\n get_tmr_operands (gimple stmt, tree expr, int flags)\n {\n-  if (TREE_THIS_VOLATILE (expr))\n+  if (!(flags & opf_no_vops)\n+      && TREE_THIS_VOLATILE (expr))\n     gimple_set_has_volatile_ops (stmt, true);\n \n   /* First record the real operands.  */\n@@ -914,14 +917,16 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       {\n-\tif (TREE_THIS_VOLATILE (expr))\n+\tif (!(flags & opf_no_vops)\n+\t    && TREE_THIS_VOLATILE (expr))\n \t  gimple_set_has_volatile_ops (stmt, true);\n \n \tget_expr_operands (stmt, &TREE_OPERAND (expr, 0), flags);\n \n \tif (code == COMPONENT_REF)\n \t  {\n-\t    if (TREE_THIS_VOLATILE (TREE_OPERAND (expr, 1)))\n+\t    if (!(flags & opf_no_vops)\n+\t\t&& TREE_THIS_VOLATILE (TREE_OPERAND (expr, 1)))\n \t      gimple_set_has_volatile_ops (stmt, true);\n \t    get_expr_operands (stmt, &TREE_OPERAND (expr, 2), uflags);\n \t  }\n@@ -960,7 +965,8 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n \t/* A volatile constructor is actually TREE_CLOBBER_P, transfer\n \t   the volatility to the statement, don't use TREE_CLOBBER_P for\n \t   mirroring the other uses of THIS_VOLATILE in this file.  */\n-\tif (TREE_THIS_VOLATILE (expr))\n+\tif (!(flags & opf_no_vops)\n+\t    && TREE_THIS_VOLATILE (expr))\n \t  gimple_set_has_volatile_ops (stmt, true);\n \n \tfor (idx = 0;\n@@ -972,7 +978,8 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n       }\n \n     case BIT_FIELD_REF:\n-      if (TREE_THIS_VOLATILE (expr))\n+      if (!(flags & opf_no_vops)\n+\t  && TREE_THIS_VOLATILE (expr))\n \tgimple_set_has_volatile_ops (stmt, true);\n       /* FALLTHRU */\n "}]}