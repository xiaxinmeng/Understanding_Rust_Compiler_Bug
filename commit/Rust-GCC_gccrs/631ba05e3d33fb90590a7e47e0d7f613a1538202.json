{"sha": "631ba05e3d33fb90590a7e47e0d7f613a1538202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxYmEwNWUzZDMzZmI5MDU5MGE3ZTQ3ZTBkN2Y2MTNhMTUzODIwMg==", "commit": {"author": {"name": "David Seymour", "email": "seymour_dj@yahoo.com", "date": "2002-01-11T05:07:22Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-11T05:07:22Z"}, "message": "locale_facets.h (num_get<>): Return advanced iterator for _M_extract_float and _M_extract_int\n\n\n2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n\n\t* include/bits/locale_facets.h (num_get<>): Return advanced iterator\n\tfor _M_extract_float and _M_extract_int\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float)\n\t(num_get<>::_M_extract_int): Likewise, all callers changed\n\t* testsuite/22_locale/num_get_members_char.cc: Testcase\n\nFrom-SVN: r48764", "tree": {"sha": "67149074f856183b2d483c4475db8536533251e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67149074f856183b2d483c4475db8536533251e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/631ba05e3d33fb90590a7e47e0d7f613a1538202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631ba05e3d33fb90590a7e47e0d7f613a1538202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631ba05e3d33fb90590a7e47e0d7f613a1538202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631ba05e3d33fb90590a7e47e0d7f613a1538202/comments", "author": null, "committer": null, "parents": [{"sha": "40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40571d67835ef8e9a3cf8815faed5d40caa5ff1b"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "c2c6993a0beab40f16cafee5dfa4b375abc7fb09", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=631ba05e3d33fb90590a7e47e0d7f613a1538202", "patch": "@@ -1,3 +1,11 @@\n+2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n+\n+\t* include/bits/locale_facets.h (num_get<>): Return advanced iterator\n+\tfor _M_extract_float and _M_extract_int\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float)\n+\t(num_get<>::_M_extract_int): Likewise, all callers changed\n+\t* testsuite/22_locale/num_get_members_char.cc: Testcase\n+\n 2002-01-09  Paolo Carlini <pcarlini@unitus.it>\n \n         * libsupc++/exception (bad_exception): Add comment."}, {"sha": "7fad2e0e8fa1a3ff4669e74df5fed11cc52745f2", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=631ba05e3d33fb90590a7e47e0d7f613a1538202", "patch": "@@ -641,11 +641,11 @@ namespace std\n     protected:\n       virtual ~num_get() { }\n \n-      void \n+      iter_type \n       _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t\t       string& __xtrc) const;\n \n-      void \n+      iter_type \n       _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t\t     char* __xtrc, int __max, int& __base) const;\n "}, {"sha": "6e0e8b9f1bcca9eab1686045e2cc38d8dc0e9b8b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=631ba05e3d33fb90590a7e47e0d7f613a1538202", "patch": "@@ -88,7 +88,7 @@ namespace std\n \n \n   template<typename _CharT, typename _InIter>\n-    void\n+    _InIter\n     num_get<_CharT, _InIter>::\n     _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,\n \t\t     ios_base::iostate& __err, string& __xtrc) const\n@@ -213,10 +213,11 @@ namespace std\n       __xtrc += char();\n       if (__beg == __end)\n         __err |= ios_base::eofbit;\n+      return __beg;\n     }\n \n   template<typename _CharT, typename _InIter>\n-    void\n+    _InIter\n     num_get<_CharT, _InIter>::\n     _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,\n \t\t   ios_base::iostate& __err, char* __xtrc, int __max, \n@@ -369,6 +370,7 @@ namespace std\n       __xtrc[__pos] = char();\n       if (__beg == __end)\n         __err |= ios_base::eofbit;\n+      return __beg;\n     }\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n@@ -394,8 +396,8 @@ namespace std\n \t  // that can be represented without change\" so we have to add 1 to it\n \t  // in order to obtain the max number of digits. The same for the\n \t  // other do_get for integral types below.\n-          _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t\t numeric_limits<bool>::digits10 + 1, __base);\n+          __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t\t numeric_limits<bool>::digits10 + 1, __base);\n \n           // Stage 2: convert and store results.\n           char* __sanity;\n@@ -459,8 +461,8 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<long>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -485,8 +487,9 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned short>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<unsigned short>::digits10 + 1,\n+\t\t\t     __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -512,8 +515,9 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned int>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<unsigned int>::digits10 + 1,\n+\t\t\t     __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -539,8 +543,9 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned long>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<unsigned long>::digits10 + 1,\n+\t\t\t     __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -566,8 +571,8 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<long long>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<long long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -592,8 +597,9 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc,\n-\t\t     numeric_limits<unsigned long long>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc,\n+\t\t\t     numeric_limits<unsigned long long>::digits10 + 1,\n+\t\t\t     __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -617,7 +623,7 @@ namespace std\n       // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n-      _M_extract_float(__beg, __end, __io, __err, __xtrc);\n+      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -644,7 +650,7 @@ namespace std\n       // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n-      _M_extract_float(__beg, __end, __io, __err, __xtrc);\n+      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -667,7 +673,7 @@ namespace std\n       // Stage 1: extract and determine the conversion specifier.\n       string __xtrc;\n       __xtrc.reserve(32);\n-      _M_extract_float(__beg, __end, __io, __err, __xtrc);\n+      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n \n #if defined(_GLIBCPP_USE_C99) && !defined(__hpux)\n       // Stage 2: convert and store results.\n@@ -721,8 +727,9 @@ namespace std\n       // integral types.\n       char __xtrc[32];\n       int __base;\n-      _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned long>::digits10 + 1, __base);\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, \n+\t\t\t     numeric_limits<unsigned long>::digits10 + 1,\n+\t\t\t     __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;"}, {"sha": "68313437f7fbc509266413eb67dc0262cac68ec0", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/631ba05e3d33fb90590a7e47e0d7f613a1538202/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=631ba05e3d33fb90590a7e47e0d7f613a1538202", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -235,10 +235,39 @@ void test01()\n #endif\n }\n \n+// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Num_get works with other iterators besides streambuf output iterators\n+  typedef string::const_iterator iter_type;\n+  typedef num_get<char, iter_type> num_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  long i = 0;\n+  const string str = \"20000106 Elizabeth Durack\";\n+  istringstream iss; // need an ios, add my num_get facet\n+  iss.imbue(locale(loc_c, new num_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n+  iter_type end = ng.get(str.begin(), str.end(), iss, err, i);\n+  string rem(end, str.end());\n+\n+  VERIFY( err == goodbit );\n+  VERIFY( i == 20000106);\n+  VERIFY( rem == \" Elizabeth Durack\" );\n+}\n \n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }\n "}]}