{"sha": "f3e4d63c924af4eab9bacf989db3d5187ca316ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlNGQ2M2M5MjRhZjRlYWI5YmFjZjk4OWRiM2Q1MTg3Y2EzMTZhYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-09T02:30:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-09T02:30:21Z"}, "message": "ptree.c (print_lang_type): Print the real type of a PMF.\n\n\t* ptree.c (print_lang_type): Print the real type of a PMF.\n\tPrint what exceptions a fn type throws.\n\n\t* typeck.c (common_type): Use same_type_p.\n\nAnd revert:\n\t* decl.c (bad_specifiers): It's OK to have an EH spec on a function\n\tpointer.\n\nFrom-SVN: r28609", "tree": {"sha": "67145bc3dd60898a6dd39bf5df997819d9ce78fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67145bc3dd60898a6dd39bf5df997819d9ce78fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3e4d63c924af4eab9bacf989db3d5187ca316ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e4d63c924af4eab9bacf989db3d5187ca316ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e4d63c924af4eab9bacf989db3d5187ca316ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e4d63c924af4eab9bacf989db3d5187ca316ab/comments", "author": null, "committer": null, "parents": [{"sha": "cb35be5713a3a2a28d06aabf364d12f5dd67e8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb35be5713a3a2a28d06aabf364d12f5dd67e8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb35be5713a3a2a28d06aabf364d12f5dd67e8d9"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "41037ae68994ce1ef29976178a1d91bb0015c90b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3e4d63c924af4eab9bacf989db3d5187ca316ab", "patch": "@@ -1,3 +1,10 @@\n+1999-08-08  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* ptree.c (print_lang_type): Print the real type of a PMF.\n+\tPrint what exceptions a fn type throws.\n+\n+\t* typeck.c (common_type): Use same_type_p.\n+\n 1999-08-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (count_fields, add_fields_to_vec): Add static prototype.\n@@ -37,9 +44,6 @@\n \n 1999-08-06  Jason Merrill  <jason@yorick.cygnus.com>\n \n-\t* decl.c (bad_specifiers): It's OK to have an EH spec on a function\n-\tpointer.\n-\n \t* pt.c (maybe_get_template_decl_from_type_decl): Make sure that\n \twe're looking at a class.\n "}, {"sha": "27f915c65ce8793fefb45da6b157f7c2b91b3e08", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f3e4d63c924af4eab9bacf989db3d5187ca316ab", "patch": "@@ -8363,7 +8363,7 @@ bad_specifiers (object, type, virtualp, quals, inlinep, friendp, raises)\n \t      object, type);\n   if (friendp)\n     cp_error_at (\"`%D' declared as a friend\", object);\n-  if (raises && ! TYPE_PTRFN_P (TREE_TYPE (object)))\n+  if (raises)\n     cp_error_at (\"`%D' declared with an exception specification\", object);\n }\n "}, {"sha": "0f7a7cba9b1dfa93a8d7808b13b086df66da433a", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=f3e4d63c924af4eab9bacf989db3d5187ca316ab", "patch": "@@ -73,9 +73,10 @@ print_lang_type (file, node, indent)\n      register tree node;\n      int indent;\n {\n-  if (TREE_CODE (node) == TEMPLATE_TYPE_PARM\n-      || TREE_CODE (node) == TEMPLATE_TEMPLATE_PARM)\n+  switch (TREE_CODE (node))\n     {\n+    case TEMPLATE_TYPE_PARM:\n+    case TEMPLATE_TEMPLATE_PARM:\n       indent_to (file, indent + 3);\n       fputs (\"index \", file);\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_TYPE_IDX (node));\n@@ -84,8 +85,25 @@ print_lang_type (file, node, indent)\n       fputs (\" orig_level \", file);\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_TYPE_ORIG_LEVEL (node));\n       return;\n+\n+    case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      if (TYPE_RAISES_EXCEPTIONS (node))\n+\tprint_node (file, \"throws\", TYPE_RAISES_EXCEPTIONS (node), indent + 4);\n+      return;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+      break;\n+\n+    default:\n+      return;\n     }\n \n+  if (TYPE_PTRMEMFUNC_P (node))\n+    print_node (file, \"ptrmemfunc fn type\", TYPE_PTRMEMFUNC_FN_TYPE (node),\n+\t\tindent + 4);\n+\n   if (! CLASS_TYPE_P (node))\n     return;\n "}, {"sha": "87245484eca307329bf17848e251d8bff8ebb3f1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4d63c924af4eab9bacf989db3d5187ca316ab/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f3e4d63c924af4eab9bacf989db3d5187ca316ab", "patch": "@@ -699,7 +699,7 @@ common_type (t1, t2)\n \ttt1 = TYPE_MAIN_VARIANT (tt1);\n \ttt2 = TYPE_MAIN_VARIANT (tt2);\n \n-\tif (tt1 == tt2)\n+\tif (same_type_p (tt1, tt2))\n \t  target = tt1;\n \telse if (b1)\n \t  {"}]}