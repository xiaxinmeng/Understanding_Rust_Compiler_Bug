{"sha": "8325a4ec9c0d79b68856e355323052ad8fbdd21c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyNWE0ZWM5YzBkNzliNjg4NTZlMzU1MzIzMDUyYWQ4ZmJkZDIxYw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-01T16:35:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-01T16:35:45Z"}, "message": "2003-12-01  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/http/Connection.java\n\t(Connection): Merged class documentation.\n\t(socket): Renamed from sock.\n\t(Connection): Made protected, documentation added.\n\t(connect): Give URL'S host instead of InetAddress to Socket\n\tconstructor.\n\t(disconnect): Documentation added.\n\t(getOutputStream): Rewrapped.\n\nFrom-SVN: r74109", "tree": {"sha": "5a4741b18c6d3ab798886eb8c008162a62d34c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4741b18c6d3ab798886eb8c008162a62d34c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8325a4ec9c0d79b68856e355323052ad8fbdd21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8325a4ec9c0d79b68856e355323052ad8fbdd21c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8325a4ec9c0d79b68856e355323052ad8fbdd21c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8325a4ec9c0d79b68856e355323052ad8fbdd21c/comments", "author": null, "committer": null, "parents": [{"sha": "41439bf6a6479263d57f27bbd3bc75f31de780fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41439bf6a6479263d57f27bbd3bc75f31de780fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41439bf6a6479263d57f27bbd3bc75f31de780fd"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "8d51beb9a8869825b4eab3c3f6c9feee42e90a02", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8325a4ec9c0d79b68856e355323052ad8fbdd21c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8325a4ec9c0d79b68856e355323052ad8fbdd21c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8325a4ec9c0d79b68856e355323052ad8fbdd21c", "patch": "@@ -1,3 +1,14 @@\n+2003-12-01  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/http/Connection.java\n+\t(Connection): Merged class documentation.\n+\t(socket): Renamed from sock.\n+\t(Connection): Made protected, documentation added.\n+\t(connect): Give URL'S host instead of InetAddress to Socket\n+\tconstructor.\n+\t(disconnect): Documentation added.\n+\t(getOutputStream): Rewrapped.\n+\n 2003-12-01  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/file/Connection.java"}, {"sha": "257c8a4fe801318a91b34be2975b15893a8faf00", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8325a4ec9c0d79b68856e355323052ad8fbdd21c/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8325a4ec9c0d79b68856e355323052ad8fbdd21c/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=8325a4ec9c0d79b68856e355323052ad8fbdd21c", "patch": "@@ -44,7 +44,6 @@\n import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.net.HttpURLConnection;\n-import java.net.InetAddress;\n import java.net.ProtocolException;\n import java.net.Socket;\n import java.net.URL;\n@@ -55,22 +54,24 @@\n import java.util.Enumeration;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+ * This subclass of java.net.URLConnection models a URLConnection via\n+ * the HTTP protocol.\n+ *\n  * Status: Minimal subset of functionality.  Proxies only partially\n  * handled; Redirects not yet handled.  FileNameMap handling needs to\n  * be considered.  useCaches, ifModifiedSince, and\n  * allowUserInteraction need consideration as well as doInput and\n  * doOutput.\n- */\n-\n-/**\n+ * \n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 29, 1999.\n  */\n-class Connection extends HttpURLConnection\n+public final class Connection extends HttpURLConnection\n {\n-  protected Socket sock = null;\n+  /**\n+   * The socket we are connected to\n+   */\n+  private Socket socket;\n   private static Hashtable defRequestProperties = new Hashtable();\n   private Hashtable requestProperties;\n   private Hashtable hdrHash = new Hashtable();\n@@ -104,7 +105,10 @@ class Connection extends HttpURLConnection\n       }\n   }\n \n-  public Connection(URL url)\n+  /**\n+   * Calls superclass constructor to initialize\n+   */\n+  protected Connection(URL url)\n   {\n     super(url);\n     requestProperties = (Hashtable) defRequestProperties.clone();\n@@ -140,7 +144,10 @@ public String getRequestProperty(String key)\n     return (String) requestProperties.get(key);\n   }\n \n-  // Implementation of abstract method.\n+  /**\n+   * Connects to the remote host, sends the request, and parses the reply\n+   * code and header information returned\n+   */\n   public void connect() throws IOException\n   {\n     // Call is ignored if already connected.\n@@ -152,18 +159,17 @@ public void connect() throws IOException\n     if (proxyInUse)\n       {\n \tport = proxyPort;\n-\tsock = new Socket(proxyHost, port);\n+\tsocket = new Socket(proxyHost, port);\n       }\n     else\n       {\n-\tInetAddress destAddr = InetAddress.getByName(url.getHost());\n \tif ((port = url.getPort()) == -1)\n \t  port = 80;\n \t// Open socket and output stream.\n-\tsock = new Socket(destAddr, port);\n+\tsocket = new Socket(url.getHost(), port);\n       }\n \n-    PrintWriter out = new PrintWriter(sock.getOutputStream());\n+    PrintWriter out = new PrintWriter(socket.getOutputStream());\n \n     // Send request including any request properties that were set.\n     out.print(getRequestMethod() + \" \" + url.getFile() + \" HTTP/1.0\\r\\n\");\n@@ -178,20 +184,22 @@ public void connect() throws IOException\n     connected = true;\n   }\n \n-  // Implementation of abstract method.\n+  /**\n+   * Disconnects from the remote server.\n+   */\n   public void disconnect()\n   {\n-    if (sock != null)\n+    if (socket != null)\n       {\n \ttry\n \t  {\n-\t    sock.close();\n+\t    socket.close();\n \t  }\n \tcatch (IOException ex)\n \t  {\n-\t    ; // Ignore errors in closing socket.\n+\t    // Ignore errors in closing socket.\n \t  }\n-\tsock = null;\n+\tsocket = null;\n       }\n   }\n \n@@ -218,9 +226,9 @@ public OutputStream getOutputStream() throws IOException\n       connect();\n \n     if (! doOutput)\n-      throw new\n-\tProtocolException(\"Can't open OutputStream if doOutput is false\");\n-    return sock.getOutputStream();\n+      throw new ProtocolException(\"Can't open OutputStream if doOutput is false\");\n+    \n+    return socket.getOutputStream();\n   }\n \n   // Override default method in URLConnection.\n@@ -321,7 +329,7 @@ private void getHttpHeaders() throws IOException\n     // It is probably more robust than it needs to be, e.g. the byte[]\n     // is unlikely to overflow and a '\\r' should always be followed by a '\\n',\n     // but it is better to be safe just in case.\n-    bufferedIn = new BufferedInputStream(sock.getInputStream());\n+    bufferedIn = new BufferedInputStream(socket.getInputStream());\n \n     int buflen = 100;\n     byte[] buf = new byte[buflen];"}]}