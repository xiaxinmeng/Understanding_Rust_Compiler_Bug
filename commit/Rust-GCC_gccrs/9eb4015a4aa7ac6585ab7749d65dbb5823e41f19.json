{"sha": "9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViNDAxNWE0YWE3YWM2NTg1YWI3NzQ5ZDY1ZGJiNTgyM2U0MWYxOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-11-08T21:07:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-08T21:07:46Z"}, "message": "dwarf2out.c (debug_str_hash): New.\n\n\t* dwarf2out.c (debug_str_hash): New.\n\t(struct indirect_string_node): New.\n\t(struct dw_val_struct): Change type of val_str to it.\n\t(DEBUG_STR_SECTION_FLAGS): Define.\n\t(add_AT_string): Push string into hashtable, increment reference\n\tcounter.\n\t(AT_string): Return string from ht_identifier.\n\t(AT_string_form): New.\n\t(free_AT): For dw_val_class_str, just decrement reference counter.\n\t(size_of_string): Remove.\n\t(size_of_die): Use AT_string_form to decide what size the string\n\toccupies in DIE.\n\t(size_of_pubnames): Use strlen instead of size_of_string.\n\t(value_format): Use AT_string_form for dw_val_class_str.\n\t(output_die): Output DW_FORM_strp strings using\n\tdw2_asm_output_offset.\n\t(indirect_string_alloc, output_indirect_string): New.\n\t(dwarf2out_finish): Emit .debug_str strings if there are any.\n\nFrom-SVN: r46858", "tree": {"sha": "b9d5aa6dec87e9d425f456603496a28ee2122a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9d5aa6dec87e9d425f456603496a28ee2122a5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "944effb637cc9756bbce3c702bd79bca39a0575c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944effb637cc9756bbce3c702bd79bca39a0575c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944effb637cc9756bbce3c702bd79bca39a0575c"}], "stats": {"total": 191, "additions": 166, "deletions": 25}, "files": [{"sha": "c3738f8e60b85b3bed381725217c94570909d374", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "patch": "@@ -1,3 +1,24 @@\n+2001-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (debug_str_hash): New.\n+\t(struct indirect_string_node): New.\n+\t(struct dw_val_struct): Change type of val_str to it.\n+\t(DEBUG_STR_SECTION_FLAGS): Define.\n+\t(add_AT_string): Push string into hashtable, increment reference\n+\tcounter.\n+\t(AT_string): Return string from ht_identifier.\n+\t(AT_string_form): New.\n+\t(free_AT): For dw_val_class_str, just decrement reference counter.\n+\t(size_of_string): Remove.\n+\t(size_of_die): Use AT_string_form to decide what size the string\n+\toccupies in DIE.\n+\t(size_of_pubnames): Use strlen instead of size_of_string.\n+\t(value_format): Use AT_string_form for dw_val_class_str.\n+\t(output_die): Output DW_FORM_strp strings using\n+\tdw2_asm_output_offset.\n+\t(indirect_string_alloc, output_indirect_string): New.\n+\t(dwarf2out_finish): Emit .debug_str strings if there are any.\n+\n 2001-11-08  Andreas Franck  <afranck@gmx.de>\n \n \t* configure.in: Add AC_ARG_PROGRAM to support program name"}, {"sha": "9ba26d3b648b28c39f68c54de2553b3fd130cbb3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 145, "deletions": 25, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb4015a4aa7ac6585ab7749d65dbb5823e41f19/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9eb4015a4aa7ac6585ab7749d65dbb5823e41f19", "patch": "@@ -22,8 +22,7 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* TODO: Implement .debug_str handling, and share entries somehow.\n-\t Emit .debug_line header even when there are no functions, since\n+/* TODO: Emit .debug_line header even when there are no functions, since\n \t   the file numbers are used by .debug_info.  Alternately, leave\n \t   out locations for types and decls.\n \t Avoid talking about ctors and op= for PODs.\n@@ -60,6 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"hashtable.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n static void dwarf2out_source_line\tPARAMS ((unsigned int, const char *));\n@@ -255,6 +255,16 @@ static dw_cfi_ref cie_cfi_head;\n    associated with the current function (body) definition.  */\n static unsigned current_funcdef_fde;\n \n+struct ht *debug_str_hash;\n+\n+struct indirect_string_node\n+{\n+  struct ht_identifier id;\n+  unsigned int refcount;\n+  unsigned int form;\n+  char *label;\n+};\n+\n /* Forward declarations for functions defined in this file.  */\n \n static char *stripattributes\t\tPARAMS ((const char *));\n@@ -284,6 +294,11 @@ static struct dw_loc_descr_struct *build_cfa_loc\n \t\t\t\t\tPARAMS ((dw_cfa_location *));\n static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n+/* .debug_str support.  */\n+static hashnode indirect_string_alloc\tPARAMS ((hash_table *));\n+static int output_indirect_string\tPARAMS ((struct cpp_reader *,\n+\t\t\t\t\t\t hashnode, const PTR));\n+\n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\"\n@@ -2176,7 +2191,7 @@ typedef struct dw_val_struct\n \tint external;\n       } val_die_ref;\n       unsigned val_fde_index;\n-      char *val_str;\n+      struct indirect_string_node *val_str;\n       char *val_lbl_id;\n       unsigned char val_flag;\n     }\n@@ -3473,7 +3488,6 @@ static void break_out_includes\t\tPARAMS ((dw_die_ref));\n static void add_sibling_attributes\tPARAMS ((dw_die_ref));\n static void build_abbrev_table\t\tPARAMS ((dw_die_ref));\n static void output_location_lists   \tPARAMS ((dw_die_ref));\n-static unsigned long size_of_string\tPARAMS ((const char *));\n static int constant_size\t\tPARAMS ((long unsigned));\n static unsigned long size_of_die\tPARAMS ((dw_die_ref));\n static void calc_die_sizes\t\tPARAMS ((dw_die_ref));\n@@ -3629,6 +3643,14 @@ static char *gen_internal_sym \t\tPARAMS ((const char *));\n #define TEXT_SECTION_NAME\t\".text\"\n #endif\n \n+/* Section flags for .debug_str section.  */\n+#ifdef HAVE_GAS_SHF_MERGE\n+#define DEBUG_STR_SECTION_FLAGS \\\n+  (SECTION_DEBUG | SECTION_MERGE | SECTION_STRINGS | 1)\n+#else\n+#define DEBUG_STR_SECTION_FLAGS\tSECTION_DEBUG\n+#endif\n+\n /* Labels we insert at beginning sections we can reference instead of\n    the section names themselves.  */\n \n@@ -4406,11 +4428,23 @@ add_AT_string (die, attr_kind, str)\n      const char *str;\n {\n   dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n+  struct indirect_string_node *node;\n+  \n+  if (! debug_str_hash)\n+    {\n+      debug_str_hash = ht_create (10);\n+      debug_str_hash->alloc_node = indirect_string_alloc;\n+    }\n+\n+  node = (struct indirect_string_node *)\n+\t ht_lookup (debug_str_hash, (const unsigned char *) str,\n+\t\t    strlen (str), HT_ALLOC);\n+  node->refcount++;\n \n   attr->dw_attr_next = NULL;\n   attr->dw_attr = attr_kind;\n   attr->dw_attr_val.val_class = dw_val_class_str;\n-  attr->dw_attr_val.v.val_str = xstrdup (str);\n+  attr->dw_attr_val.v.val_str = node;\n   add_dwarf_attr (die, attr);\n }\n \n@@ -4420,7 +4454,52 @@ AT_string (a)\n      dw_attr_ref a;\n {\n   if (a && AT_class (a) == dw_val_class_str)\n-    return a->dw_attr_val.v.val_str;\n+    return (const char *) HT_STR (&a->dw_attr_val.v.val_str->id);\n+\n+  abort ();\n+}\n+\n+/* Find out whether a string should be output inline in DIE\n+   or out-of-line in .debug_str section.  */\n+\n+static int AT_string_form PARAMS ((dw_attr_ref));\n+static int\n+AT_string_form (a)\n+     dw_attr_ref a;\n+{\n+  if (a && AT_class (a) == dw_val_class_str)\n+    {\n+      struct indirect_string_node *node;\n+      unsigned int len;\n+      extern int const_labelno;\n+      char label[32];\n+\n+      node = a->dw_attr_val.v.val_str;\n+      if (node->form)\n+\treturn node->form;\n+\n+      len = HT_LEN (&node->id) + 1;\n+\n+      /* If the string is shorter or equal to the size\n+\t of the reference, it is always better to put it\n+\t inline.  */\n+      if (len <= DWARF_OFFSET_SIZE || node->refcount == 0)\n+\treturn node->form = DW_FORM_string;\n+\n+      if ((DEBUG_STR_SECTION_FLAGS & SECTION_MERGE) == 0)\n+\t{\n+\t  /* If we cannot expect the linker to merge strings\n+\t     in .debug_str section, only put it into .debug_str\n+\t     if it is worth even in this single module.  */\n+\t  if ((len - DWARF_OFFSET_SIZE) * node->refcount <= len)\n+\t    return node->form = DW_FORM_string;\n+\t}\n+\n+      ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", const_labelno);\n+      ++const_labelno;\n+      node->label = xstrdup (label);\n+      return node->form = DW_FORM_strp;\n+    }\n \n   abort ();\n }\n@@ -4776,9 +4855,13 @@ free_AT (a)\n   switch (AT_class (a))\n     {\n     case dw_val_class_str:\n+      if (a->dw_attr_val.v.val_str->refcount)\n+\ta->dw_attr_val.v.val_str->refcount--;\n+      break;\n+\n     case dw_val_class_lbl_id:\n     case dw_val_class_lbl_offset:\n-      free (a->dw_attr_val.v.val_str);\n+      free (a->dw_attr_val.v.val_lbl_id);\n       break;\n \n     case dw_val_class_float:\n@@ -5670,20 +5753,6 @@ build_abbrev_table (die)\n     build_abbrev_table (c);\n }\n \f\n-/* Return the size of a string, including the null byte.\n-\n-   This used to treat backslashes as escapes, and hence they were not included\n-   in the count.  However, that conflicts with what ASM_OUTPUT_ASCII does,\n-   which treats a backslash as a backslash, escaping it if necessary, and hence\n-   we must include them in the count.  */\n-\n-static unsigned long\n-size_of_string (str)\n-     const char *str;\n-{\n-  return strlen (str) + 1;\n-}\n-\n /* Return the power-of-two number of bytes necessary to represent VALUE.  */\n \n static int\n@@ -5764,7 +5833,10 @@ size_of_die (die)\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n \tcase dw_val_class_str:\n-\t  size += size_of_string (AT_string (a));\n+\t  if (AT_string_form (a) == DW_FORM_strp)\n+\t    size += DWARF_OFFSET_SIZE;\n+\t  else\n+\t    size += HT_LEN (&a->dw_attr_val.v.val_str->id) + 1;\n \t  break;\n \tdefault:\n \t  abort ();\n@@ -5836,7 +5908,7 @@ size_of_pubnames ()\n   for (i = 0; i < pubname_table_in_use; ++i)\n     {\n       pubname_ref p = &pubname_table[i];\n-      size += DWARF_OFFSET_SIZE + size_of_string (p->name);\n+      size += DWARF_OFFSET_SIZE + strlen (p->name) + 1;\n     }\n \n   size += DWARF_OFFSET_SIZE;\n@@ -5925,7 +5997,7 @@ value_format (a)\n     case dw_val_class_lbl_offset:\n       return DW_FORM_data;\n     case dw_val_class_str:\n-      return DW_FORM_string;\n+      return AT_string_form (a);\n \n     default:\n       abort ();\n@@ -6084,6 +6156,7 @@ output_loc_list (list_head)\n \t\t       \"Location list terminator end (%s)\",\n \t\t       list_head->ll_symbol);\n }\n+\n /* Output the DIE and its attributes.  Called recursively to generate\n    the definitions of each child DIE.  */\n \n@@ -6223,7 +6296,12 @@ output_die (die)\n \t  break;\n \n \tcase dw_val_class_str:\n-\t  dw2_asm_output_nstring (AT_string (a), -1, \"%s\", name);\n+\t  if (AT_string_form (a) == DW_FORM_strp)\n+\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE,\n+\t\t\t\t   a->dw_attr_val.v.val_str->label,\n+\t\t\t\t   \"%s\", name);\n+\t  else\n+\t    dw2_asm_output_nstring (AT_string (a), -1, \"%s\", name);\n \t  break;\n \n \tdefault:\n@@ -11706,6 +11784,43 @@ dwarf2out_init (main_input_filename)\n     }\n }\n \n+/* Allocate a string in .debug_str hash table.  */\n+\n+static hashnode\n+indirect_string_alloc (tab)\n+     hash_table *tab ATTRIBUTE_UNUSED;\n+{\n+  struct indirect_string_node *node;\n+\n+  node = xmalloc (sizeof (struct indirect_string_node));\n+  node->refcount = 0;\n+  node->form = 0;\n+  node->label = NULL;\n+  return (hashnode) node;\n+}\n+\n+/* A helper function for dwarf2out_finish called through\n+   ht_forall.  Emit one queued .debug_str string.  */\n+\n+static int\n+output_indirect_string (pfile, h, v)\n+     struct cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     hashnode h;\n+     const PTR v ATTRIBUTE_UNUSED;\n+{\n+  struct indirect_string_node *node;\n+\n+  node = (struct indirect_string_node *) h;\n+  if (node->form == DW_FORM_strp)\n+    {\n+      named_section_flags (DEBUG_STR_SECTION, DEBUG_STR_SECTION_FLAGS);\n+      ASM_OUTPUT_LABEL (asm_out_file, node->label);\n+      assemble_string ((const char *) HT_STR (&node->id),\n+\t\t       HT_LEN (&node->id) + 1);\n+    }\n+  return 1;\n+}\n+\n /* Output stuff that dwarf requires at the end of every file,\n    and generate the DWARF-2 debugging info.  */\n \n@@ -11845,5 +11960,10 @@ dwarf2out_finish (input_filename)\n       named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n+\n+  /* If we emitted any DW_FORM_strp form attribute, output string\n+     table too.  */\n+  if (debug_str_hash)\n+    ht_forall (debug_str_hash, output_indirect_string, NULL);\n }\n #endif /* DWARF2_DEBUGGING_INFO || DWARF2_UNWIND_INFO */"}]}