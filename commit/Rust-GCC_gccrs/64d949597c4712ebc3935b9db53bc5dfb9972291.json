{"sha": "64d949597c4712ebc3935b9db53bc5dfb9972291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkOTQ5NTk3YzQ3MTJlYmMzOTM1YjlkYjUzYmM1ZGZiOTk3MjI5MQ==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-12-04T14:52:01Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-12-04T14:52:01Z"}, "message": "re PR middle-end/51285 (internal compiler error: in check_loop_closed_ssa_use, at tree-ssa-loop-manip.c)\n\n\n        PR middle-end/51285\n        * tree-vect-loop.c (vect_create_epilog_for_reduction): Create\n        exit phi nodes for outer loop in case of double reduction.\n\nFrom-SVN: r181990", "tree": {"sha": "df942befd5a56ffe122736f684e0205793b54f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df942befd5a56ffe122736f684e0205793b54f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64d949597c4712ebc3935b9db53bc5dfb9972291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d949597c4712ebc3935b9db53bc5dfb9972291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d949597c4712ebc3935b9db53bc5dfb9972291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d949597c4712ebc3935b9db53bc5dfb9972291/comments", "author": null, "committer": null, "parents": [{"sha": "e13afbace17d25acdad40cc4649b51d28ec42364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13afbace17d25acdad40cc4649b51d28ec42364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13afbace17d25acdad40cc4649b51d28ec42364"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "8a763f31588aeda46cc96d33f75d038fbd3f89cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64d949597c4712ebc3935b9db53bc5dfb9972291", "patch": "@@ -1,3 +1,9 @@\n+2011-12-04  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR middle-end/51285\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Create exit\n+\tphi nodes for outer loop in case of double reduction.\n+\n 2011-12-04  J\u00e9r\u00e9mie Detrey  <Jeremie.Detrey@loria.fr>\n \n \tPR target/51393"}, {"sha": "ab8534e09841cb584997d260c39a2c07b4cab732", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64d949597c4712ebc3935b9db53bc5dfb9972291", "patch": "@@ -1,3 +1,8 @@\n+2011-12-04  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR middle-end/51285\n+\t* gfortran.dg/vect/pr51285.f90: New test.\n+\n 2011-12-04  Uros Bizjak  <ubizjak@gmail.com>\n \t    J\u00e9r\u00e9mie Detrey  <Jeremie.Detrey@loria.fr>\n "}, {"sha": "92907f388019c66479e0eac8fe52eff7ec0f21ea", "filename": "gcc/testsuite/gfortran.dg/vect/pr51285.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51285.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51285.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51285.f90?ref=64d949597c4712ebc3935b9db53bc5dfb9972291", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+\n+   SUBROUTINE smm_dnn_4_10_10_1_1_2_1(A,B,C)\n+      REAL   :: C(4,10), B(10,10), A(4,10)\n+      DO j=           1 ,          10 ,           2\n+      DO i=           1 ,           4 ,           1\n+      DO l=           1 ,          10 ,           1\n+        C(i+0,j+0)=C(i+0,j+0)+A(i+0,l+0)*B(l+0,j+0)\n+        C(i+0,j+1)=C(i+0,j+1)+A(i+0,l+0)*B(l+0,j+1)\n+      ENDDO\n+      ENDDO\n+      ENDDO\n+    END SUBROUTINE\n+   SUBROUTINE smm_dnn_4_10_10_6_4_1_1(A,B,C)\n+      REAL   :: C(4,10), B(10,10), A(4,10)\n+      DO l=           1 ,          10 ,           1\n+      DO j=           1 ,          10 ,           1\n+        C(i+0,j+0)=C(i+0,j+0)+A(i+0,l+0)*B(l+0,j+0)\n+      ENDDO\n+      ENDDO\n+    END SUBROUTINE\n+ SUBROUTINE S(A,B,C)\n+    INTEGER :: Nmin=2,Niter=100\n+    REAL, DIMENSION(:,:), ALLOCATABLE   :: A,B,C\n+    DO imin=1,Nmin\n+     DO i=1,Niter\n+       CALL smm_dnn_4_10_10_1_1_2_1(A,B,C)\n+     ENDDO\n+     DO i=1,Niter\n+       CALL smm_dnn_4_10_10_6_4_1_1(A,B,C)\n+     ENDDO\n+     CALL foo()\n+    ENDDO\n+ END SUBROUTINE\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "30d45c49b966972188577bcc14e6b0862cdec115", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d949597c4712ebc3935b9db53bc5dfb9972291/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=64d949597c4712ebc3935b9db53bc5dfb9972291", "patch": "@@ -3462,6 +3462,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n   gimple use_stmt, orig_stmt, reduction_phi = NULL;\n   bool nested_in_vect_loop = false;\n   VEC (gimple, heap) *new_phis = NULL;\n+  VEC (gimple, heap) *inner_phis = NULL;\n   enum vect_def_type dt = vect_unknown_def_type;\n   int j, i;\n   VEC (tree, heap) *scalar_results = NULL;\n@@ -3470,6 +3471,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n   VEC (gimple, heap) *phis;\n   bool slp_reduc = false;\n   tree new_phi_result;\n+  gimple inner_phi = NULL;\n \n   if (slp_node)\n     group_size = VEC_length (gimple, SLP_TREE_SCALAR_STMTS (slp_node)); \n@@ -3626,11 +3628,36 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n     }\n \n   /* The epilogue is created for the outer-loop, i.e., for the loop being\n-     vectorized.  */\n+     vectorized.  Create exit phis for the outer loop.  */\n   if (double_reduc)\n     {\n       loop = outer_loop;\n       exit_bb = single_exit (loop)->dest;\n+      inner_phis = VEC_alloc (gimple, heap, VEC_length (tree, vect_defs));\n+      FOR_EACH_VEC_ELT (gimple, new_phis, i, phi)\n+\t{\n+\t  gimple outer_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (phi)),\n+\t\t\t\t\t      exit_bb);\n+\t  SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n+\t\t\t   PHI_RESULT (phi));\n+\t  set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,\n+\t\t\t\t\t\t\t    loop_vinfo, NULL));\n+\t  VEC_quick_push (gimple, inner_phis, phi);\n+\t  VEC_replace (gimple, new_phis, i, outer_phi);\n+\t  prev_phi_info = vinfo_for_stmt (outer_phi);\n+          while (STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi)))\n+            {\n+\t      phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));\n+\t      outer_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (phi)),\n+\t\t\t\t\t   exit_bb);\n+\t      SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n+\t\t\t       PHI_RESULT (phi));\n+\t      set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,\n+\t\t\t\t\t\t\tloop_vinfo, NULL));\n+\t      STMT_VINFO_RELATED_STMT (prev_phi_info) = outer_phi;\n+\t      prev_phi_info = vinfo_for_stmt (outer_phi);\n+\t    }\n+\t}\n     }\n \n   exit_gsi = gsi_after_labels (exit_bb);\n@@ -4040,6 +4067,8 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n         {\n           epilog_stmt = VEC_index (gimple, new_phis, k / ratio);\n           reduction_phi = VEC_index (gimple, reduction_phis, k / ratio);\n+\t  if (double_reduc)\n+\t    inner_phi = VEC_index (gimple, inner_phis, k / ratio);\n         }\n \n       if (slp_reduc)\n@@ -4123,7 +4152,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n                      vs1 was created previously in this function by a call to\n                        vect_get_vec_def_for_operand and is stored in\n                        vec_initial_def;\n-                     vs2 is defined by EPILOG_STMT, the vectorized EXIT_PHI;\n+                     vs2 is defined by INNER_PHI, the vectorized EXIT_PHI;\n                      vs0 is created here.  */\n \n                   /* Create vector phi node.  */\n@@ -4144,7 +4173,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n                   add_phi_arg (vect_phi, vect_phi_init,\n                                loop_preheader_edge (outer_loop),\n                                UNKNOWN_LOCATION);\n-                  add_phi_arg (vect_phi, PHI_RESULT (epilog_stmt),\n+                  add_phi_arg (vect_phi, PHI_RESULT (inner_phi),\n                                loop_latch_edge (outer_loop), UNKNOWN_LOCATION);\n                   if (vect_print_dump_info (REPORT_DETAILS))\n                     {"}]}