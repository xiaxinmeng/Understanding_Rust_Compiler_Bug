{"sha": "7a32d6c491b450dfe86263ef28a9947cd57d09b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzMmQ2YzQ5MWI0NTBkZmU4NjI2M2VmMjhhOTk0N2NkNTdkMDliNg==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-06-18T15:50:59Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-06-18T15:50:59Z"}, "message": "-fuse-caller-save - Enable for ARM\n\n2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* config/arm/arm-protos.h (arm_emit_call_insn): Add bool parameter.\n\t* config/arm/arm.c (TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS):\n\tRedefine to true.\n\t(arm_emit_call_insn): Add and use sibcall parameter.  Add IP and CC\n\tclobbers to CALL_INSN_FUNCTION_USAGE.\n\t(define_expand \"sibcall_internal\")\n\t(define_expand \"sibcall_value_internal\"): New.\n\t(define_expand \"call\", define_expand \"call_value\"): Add argument to\n\tarm_emit_call_insn.\n\t(define_expand \"sibcall\"): Use sibcall_internal and arm_emit_call_insn.\n\t(define_expand \"sibcall_value\"): Use sibcall_value_internal and\n\tarm_emit_call_insn.\n\n\t* gcc.target/arm/fuse-caller-save.c: New test.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r211798", "tree": {"sha": "c149e1e97b535742e7eb05f673e0816661351dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c149e1e97b535742e7eb05f673e0816661351dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a32d6c491b450dfe86263ef28a9947cd57d09b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a32d6c491b450dfe86263ef28a9947cd57d09b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a32d6c491b450dfe86263ef28a9947cd57d09b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a32d6c491b450dfe86263ef28a9947cd57d09b6/comments", "author": null, "committer": null, "parents": [{"sha": "4b9fcb37ba51b6806d9a38b27ebd7e057e8d46e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9fcb37ba51b6806d9a38b27ebd7e057e8d46e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9fcb37ba51b6806d9a38b27ebd7e057e8d46e9"}], "stats": {"total": 94, "additions": 90, "deletions": 4}, "files": [{"sha": "b0c9ed83ba0e67fb522817e4d5709568ccacd7ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -1,3 +1,19 @@\n+2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_emit_call_insn): Add bool parameter.\n+\t* config/arm/arm.c (TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS):\n+\tRedefine to true.\n+\t(arm_emit_call_insn): Add and use sibcall parameter.  Add IP and CC\n+\tclobbers to CALL_INSN_FUNCTION_USAGE.\n+\t(define_expand \"sibcall_internal\")\n+\t(define_expand \"sibcall_value_internal\"): New.\n+\t(define_expand \"call\", define_expand \"call_value\"): Add argument to\n+\tarm_emit_call_insn.\n+\t(define_expand \"sibcall\"): Use sibcall_internal and arm_emit_call_insn.\n+\t(define_expand \"sibcall_value\"): Use sibcall_value_internal and\n+\tarm_emit_call_insn.\n+\n 2014-06-18  Charles Baylis  <charles.baylis@linaro.org>\n \n \t* config/arm/bpabi.c (__gnu_uldivmod_helper): Remove."}, {"sha": "524fd83c05a9cb29fa65738011367bb53b1ff547", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -126,7 +126,7 @@ extern int arm_const_double_inline_cost (rtx);\n extern bool arm_const_double_by_parts (rtx);\n extern bool arm_const_double_by_immediates (rtx);\n extern const char *fp_immediate_constant (rtx);\n-extern void arm_emit_call_insn (rtx, rtx);\n+extern void arm_emit_call_insn (rtx, rtx, bool);\n extern const char *output_call (rtx *);\n extern const char *output_call_mem (rtx *);\n void arm_emit_movpair (rtx, rtx);"}, {"sha": "d293b5b24f41bd75a59f04ff5032d756232a1df0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -685,6 +685,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CONST_NOT_OK_FOR_DEBUG_P\n #define TARGET_CONST_NOT_OK_FOR_DEBUG_P arm_const_not_ok_for_debug_p\n \n+#undef TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n+#define TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -17615,7 +17618,7 @@ vfp_emit_fstmd (int base_reg, int count)\n    the call target.  */\n \n void\n-arm_emit_call_insn (rtx pat, rtx addr)\n+arm_emit_call_insn (rtx pat, rtx addr, bool sibcall)\n {\n   rtx insn;\n \n@@ -17626,6 +17629,7 @@ arm_emit_call_insn (rtx pat, rtx addr)\n      to the instruction's CALL_INSN_FUNCTION_USAGE.  */\n   if (TARGET_VXWORKS_RTP\n       && flag_pic\n+      && !sibcall\n       && GET_CODE (addr) == SYMBOL_REF\n       && (SYMBOL_REF_DECL (addr)\n \t  ? !targetm.binds_local_p (SYMBOL_REF_DECL (addr))\n@@ -17634,6 +17638,16 @@ arm_emit_call_insn (rtx pat, rtx addr)\n       require_pic_register ();\n       use_reg (&CALL_INSN_FUNCTION_USAGE (insn), cfun->machine->pic_reg);\n     }\n+\n+  if (TARGET_AAPCS_BASED)\n+    {\n+      /* For AAPCS, IP and CC can be clobbered by veneers inserted by the\n+\t linker.  We need to add these to allow setting\n+\t TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS to true.  */\n+      rtx *fusage = &CALL_INSN_FUNCTION_USAGE (insn);\n+      clobber_reg (fusage, gen_rtx_REG (word_mode, IP_REGNUM));\n+      clobber_reg (fusage, gen_rtx_REG (word_mode, CC_REGNUM));\n+    }\n }\n \n /* Output a 'call' insn.  */"}, {"sha": "42c12c8f87f2349eafa0e71eba187f7d9d521e78", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -7561,7 +7561,7 @@\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n \n     pat = gen_call_internal (operands[0], operands[1], operands[2]);\n-    arm_emit_call_insn (pat, XEXP (operands[0], 0));\n+    arm_emit_call_insn (pat, XEXP (operands[0], 0), false);\n     DONE;\n   }\"\n )\n@@ -7640,7 +7640,7 @@\n \n     pat = gen_call_value_internal (operands[0], operands[1],\n \t\t\t\t   operands[2], operands[3]);\n-    arm_emit_call_insn (pat, XEXP (operands[1], 0));\n+    arm_emit_call_insn (pat, XEXP (operands[1], 0), false);\n     DONE;\n   }\"\n )\n@@ -7730,6 +7730,12 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n+(define_expand \"sibcall_internal\"\n+  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n+\t\t    (match_operand 1 \"general_operand\" \"\"))\n+\t      (return)\n+\t      (use (match_operand 2 \"\" \"\"))])])\n+\n ;; We may also be able to do sibcalls for Thumb, but it's much harder...\n (define_expand \"sibcall\"\n   [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n@@ -7739,6 +7745,8 @@\n   \"TARGET_32BIT\"\n   \"\n   {\n+    rtx pat;\n+\n     if ((!REG_P (XEXP (operands[0], 0))\n \t && GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF)\n \t|| (GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n@@ -7747,9 +7755,20 @@\n \n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n+\n+    pat = gen_sibcall_internal (operands[0], operands[1], operands[2]);\n+    arm_emit_call_insn (pat, operands[0], true);\n+    DONE;\n   }\"\n )\n \n+(define_expand \"sibcall_value_internal\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n+\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t      (return)\n+\t      (use (match_operand 3 \"\" \"\"))])])\n+\n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (match_operand 1 \"memory_operand\" \"\")\n@@ -7759,6 +7778,8 @@\n   \"TARGET_32BIT\"\n   \"\n   {\n+    rtx pat;\n+\n     if ((!REG_P (XEXP (operands[1], 0))\n \t && GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF)\n \t|| (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n@@ -7767,6 +7788,11 @@\n \n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n+\n+    pat = gen_sibcall_value_internal (operands[0], operands[1],\n+                                      operands[2], operands[3]);\n+    arm_emit_call_insn (pat, operands[1], true);\n+    DONE;\n   }\"\n )\n "}, {"sha": "f41f3dfe06911446ed72e46bcb337eff5c929f49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -1,3 +1,8 @@\n+2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/arm/fuse-caller-save.c: New test.\n+\n 2014-06-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-pass.h (make_pass_dce_loop): Remove."}, {"sha": "5fa8998ac56f51620284739598f083b72178a3be", "filename": "gcc/testsuite/gcc.target/arm/fuse-caller-save.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a32d6c491b450dfe86263ef28a9947cd57d09b6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffuse-caller-save.c?ref=7a32d6c491b450dfe86263ef28a9947cd57d09b6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fuse-caller-save\" } */\n+/* Testing -fuse-caller-save optimization option.  */\n+\n+static int __attribute__((noinline))\n+bar (int x)\n+{\n+  return x + 3;\n+}\n+\n+int __attribute__((noinline))\n+foo (int y)\n+{\n+  return y + bar (y);\n+}\n+\n+int\n+main (void)\n+{\n+  return !(foo (5) == 13);\n+}\n+\n+/* For thumb1, r3 is considered likely spilled, and treated differently in\n+   ira_build_conflicts, which inhibits the fuse-caller-save optimization.  */\n+/* { dg-final { scan-assembler-times \"mov\\tr3, r0\" 1 { target { ! arm_thumb1 } } } } */"}]}