{"sha": "f546e0d3d0316aa76a45de1f548591bde7308c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0NmUwZDNkMDMxNmFhNzZhNDVkZTFmNTQ4NTkxYmRlNzMwOGM0MQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-04T23:00:00Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-30T17:40:22Z"}, "message": "aarch64: Use RTL builtins for vmull[_high]_p8 intrinsics\n\nRewrite vmull[_high]_p8 Neon intrinsics to use RTL builtins rather\nthan inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-05  Jonathan Wright  <joanthan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add pmull[2]\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_pmullv8qi): Define.\n\t(aarch64_pmull_hiv16qi_insn): Define.\n\t(aarch64_pmull_hiv16qi): Define.\n\t* config/aarch64/arm_neon.h (vmull_high_p8): Use RTL builtin\n\tinstead of inline asm.\n\t(vmull_p8): Likewise.", "tree": {"sha": "91cb2cb9a9545cb19a8601ade47e8496895f8e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cb2cb9a9545cb19a8601ade47e8496895f8e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f546e0d3d0316aa76a45de1f548591bde7308c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f546e0d3d0316aa76a45de1f548591bde7308c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f546e0d3d0316aa76a45de1f548591bde7308c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f546e0d3d0316aa76a45de1f548591bde7308c41/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5672fe9da4ab4e8787c288b64008251065c67c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5672fe9da4ab4e8787c288b64008251065c67c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5672fe9da4ab4e8787c288b64008251065c67c98"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "5d4c01f32e7e911cc53afb2fa5f0580039f77300", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f546e0d3d0316aa76a45de1f548591bde7308c41", "patch": "@@ -46,6 +46,8 @@\n   BUILTIN_VDC (COMBINE, combine, 0, AUTO_FP)\n   VAR1 (COMBINEP, combine, 0, NONE, di)\n   BUILTIN_VB (BINOP, pmul, 0, NONE)\n+  VAR1 (BINOP, pmull, 0, NONE, v8qi)\n+  VAR1 (BINOP, pmull_hi, 0, NONE, v16qi)\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n   BUILTIN_VDQ_I (BINOP, addp, 0, NONE)"}, {"sha": "65e63900e075722ebd93e433f3cc1fb449e02c7d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f546e0d3d0316aa76a45de1f548591bde7308c41", "patch": "@@ -4471,6 +4471,44 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype><q>\")]\n )\n \n+(define_insn \"aarch64_pmullv8qi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n+        (unspec:V8HI [(match_operand:V8QI 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_PMULL))]\n+ \"TARGET_SIMD\"\n+ \"pmull\\\\t%0.8h, %1.8b, %2.8b\"\n+  [(set_attr \"type\" \"neon_mul_b_long\")]\n+)\n+\n+(define_insn \"aarch64_pmull_hiv16qi_insn\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n+\t(unspec:V8HI\n+\t  [(vec_select:V8QI\n+\t     (match_operand:V16QI 1 \"register_operand\" \"w\")\n+\t     (match_operand:V16QI 3 \"vect_par_cnst_hi_half\" \"\"))\n+\t   (vec_select:V8QI\n+\t     (match_operand:V16QI 2 \"register_operand\" \"w\")\n+\t     (match_dup 3))]\n+\t  UNSPEC_PMULL))]\n+ \"TARGET_SIMD\"\n+ \"pmull2\\\\t%0.8h, %1.16b, %2.16b\"\n+  [(set_attr \"type\" \"neon_mul_b_long\")]\n+)\n+\n+(define_expand \"aarch64_pmull_hiv16qi\"\n+  [(match_operand:V8HI 0 \"register_operand\")\n+   (match_operand:V16QI 1 \"register_operand\")\n+   (match_operand:V16QI 2 \"register_operand\")]\n+ \"TARGET_SIMD\"\n+ {\n+   rtx p = aarch64_simd_vect_par_cnst_half (V16QImode, 16, true);\n+   emit_insn (gen_aarch64_pmull_hiv16qi_insn (operands[0], operands[1],\n+\t\t\t\t\t      operands[2], p));\n+   DONE;\n+ }\n+)\n+\n ;; fmulx.\n \n (define_insn \"aarch64_fmulx<mode>\""}, {"sha": "bde2d17fbd92f9d2a0ae2f47f2c92c622c365642", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f546e0d3d0316aa76a45de1f548591bde7308c41/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f546e0d3d0316aa76a45de1f548591bde7308c41", "patch": "@@ -8228,12 +8228,8 @@ __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_p8 (poly8x16_t __a, poly8x16_t __b)\n {\n-  poly16x8_t __result;\n-  __asm__ (\"pmull2 %0.8h,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly16x8_t) __builtin_aarch64_pmull_hiv16qi ((int8x16_t) __a,\n+\t\t\t\t\t\t       (int8x16_t) __b);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -8366,12 +8362,8 @@ __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n-  poly16x8_t __result;\n-  __asm__ (\"pmull %0.8h, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly16x8_t) __builtin_aarch64_pmullv8qi ((int8x8_t) __a,\n+\t\t\t\t\t\t   (int8x8_t) __b);\n }\n \n __extension__ extern __inline int16x8_t"}]}