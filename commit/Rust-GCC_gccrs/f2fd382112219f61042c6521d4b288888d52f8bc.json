{"sha": "f2fd382112219f61042c6521d4b288888d52f8bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmZDM4MjExMjIxOWY2MTA0MmM2NTIxZDRiMjg4ODg4ZDUyZjhiYw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-01-18T06:03:46Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-01-18T06:03:46Z"}, "message": "[multiple changes]\n\n2005-01-18  Andi Kleen <ak@muc.de>\n\n\t* c-typeck.c: (convert_for_assignment): Check warn_pointer_sign.\n\t* c.opt (-Wpointer-sign): Add.\n\t* doc/invoke.texi: (-Wpointer-sign): Add.\n\n2005-01-18  Michael Matz  <matz@suse.de>\n\n\t* gcc.dg/Wno-pointer-sign.c: New test for -Wno-pointer-sign.\n\nFrom-SVN: r93813", "tree": {"sha": "682eabeadb86e7ed4277488a966cfaae164aead2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/682eabeadb86e7ed4277488a966cfaae164aead2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2fd382112219f61042c6521d4b288888d52f8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2fd382112219f61042c6521d4b288888d52f8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2fd382112219f61042c6521d4b288888d52f8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2fd382112219f61042c6521d4b288888d52f8bc/comments", "author": null, "committer": null, "parents": [{"sha": "e1b83ac7fb32ca56fe0bf5ebfbb052b0054a39c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b83ac7fb32ca56fe0bf5ebfbb052b0054a39c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b83ac7fb32ca56fe0bf5ebfbb052b0054a39c3"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "2b065023aa5d195fe3109d640a44fc18012e598b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f2fd382112219f61042c6521d4b288888d52f8bc", "patch": "@@ -3651,7 +3651,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t       || target_cmp)\n \t\t;\n \t      /* If there is a mismatch, do warn.  */\n-\t      else\n+\t      else if (warn_pointer_sign)\n \t\tWARN_FOR_ASSIGNMENT (N_(\"pointer targets in passing argument \"\n \t\t\t\t\t\"%d of %qE differ in signedness\"),\n \t\t\t\t     N_(\"pointer targets in assignment \""}, {"sha": "8267e0ee49786c3a63c1b5be2c0bc4cfa3a1fb66", "filename": "gcc/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=f2fd382112219f61042c6521d4b288888d52f8bc", "patch": "@@ -1,5 +1,5 @@\n ; Options for the C, ObjC, C++ and ObjC++ front ends.\n-; Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -430,6 +430,10 @@ Wwrite-strings\n C ObjC C++ ObjC++\n Give strings the type \\\"array of char\\\"\n \n+Wpointer-sign\n+C ObjC Var(warn_pointer_sign) Init(1)\n+Warn when a pointer differs in signedness in an assignment.\n+\n ansi\n C ObjC C++ ObjC++\n A synonym for -std=c89.  In a future version of GCC it will become synonymous with -std=c99 instead"}, {"sha": "d13feda555e150721129d7b44531e54dfc158334", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f2fd382112219f61042c6521d4b288888d52f8bc", "patch": "@@ -1,12 +1,12 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-@c 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+@c 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n @ignore\n @c man begin COPYRIGHT\n Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.2 or\n@@ -242,7 +242,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition @gol\n -Wstrict-prototypes  -Wtraditional @gol\n--Wdeclaration-after-statement}\n+-Wdeclaration-after-statement -Wno-pointer-sign}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n@@ -3135,6 +3135,12 @@ effectively.  Often, the problem is that your code is too big or too\n complex; GCC will refuse to optimize programs when the optimization\n itself is likely to take inordinate amounts of time.\n \n+@item -Wno-pointer-sign\n+@opindex Wno-pointer-sign\n+Don't warn for pointer argument passing or assignment with different signedness.\n+Only useful in the negative form since this warning is enabled by default.\n+This option is only supported for C and Objective-C@.\n+\n @item -Werror\n @opindex Werror\n Make all warnings into errors.\n@@ -10900,7 +10906,7 @@ However, when @option{-mbackchain} is also in effect, the topmost word of\n the save area is always used to store the backchain, and the return address\n register is always saved two words below the backchain.\n \n-As long as the stack frame backchain is not used, code generated with \n+As long as the stack frame backchain is not used, code generated with\n @option{-mpacked-stack} is call-compatible with code generated with\n @option{-mno-packed-stack}.  Note that some non-FSF releases of GCC 2.95 for\n S/390 or zSeries generated code that uses the stack frame backchain at run"}, {"sha": "06441c8ac7c06023ef34d93e6d5020d29f26fb91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2fd382112219f61042c6521d4b288888d52f8bc", "patch": "@@ -1,3 +1,7 @@\n+2005-01-18  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/Wno-pointer-sign.c: New test for -Wno-pointer-sign.\n+\n 2005-01-17  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/19121"}, {"sha": "780c9d4e20718c50303bf0961aa4f94772f7a3d3", "filename": "gcc/testsuite/gcc.dg/Wno-pointer-sign.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Ftestsuite%2Fgcc.dg%2FWno-pointer-sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fd382112219f61042c6521d4b288888d52f8bc/gcc%2Ftestsuite%2Fgcc.dg%2FWno-pointer-sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWno-pointer-sign.c?ref=f2fd382112219f61042c6521d4b288888d52f8bc", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-pointer-sign\" } */\n+\n+void f1(long *);\n+void f2(unsigned long *);\n+\n+int main()\n+{\n+  long *lp;\n+  unsigned long *ulp;\n+  char *cp;\n+  unsigned char *ucp;\n+  signed char *scp;\n+\n+  ulp = lp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  lp = ulp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  f1(ulp);\t/* { dg-bogus \" differ in signedness\" } */\n+  f2(lp);\t/* { dg-bogus \" differ in signedness\" } */\n+\n+  cp = ucp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  cp = scp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  ucp = scp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  ucp = cp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  scp = ucp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+  scp = cp;\t/* { dg-bogus \" pointer targets in assignment differ in signedness\" } */\n+}"}]}