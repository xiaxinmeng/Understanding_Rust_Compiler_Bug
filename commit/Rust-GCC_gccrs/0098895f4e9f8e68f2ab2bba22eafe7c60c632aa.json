{"sha": "0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5ODg5NWY0ZTlmOGU2OGYyYWIyYmJhMjJlYWZlN2M2MGM2MzJhYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-11-07T18:22:59Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-11-07T18:22:59Z"}, "message": "avr.c (output_reload_in_const): Can handle CONSTANT_P now, not only CONST_INT and CONST_DOUBLE.\n\n\t* config/avr/avr.c (output_reload_in_const): Can handle CONSTANT_P\n\tnow, not only CONST_INT and CONST_DOUBLE.\n\t(output_movqi): Use output_reload_in_const.\n\t(output_reload_inhi): Ditto.\n\t(output_reload_insisf): Move assertion to output_reload_in_const.\n\t(avr_out_reload_inpsi): Ditto.\n\nFrom-SVN: r181106", "tree": {"sha": "ef4ca069c6d3146a2ee304787ab6094652d0ef5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4ca069c6d3146a2ee304787ab6094652d0ef5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5366b18679f7ead0a02c29759d4bb455f52114ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5366b18679f7ead0a02c29759d4bb455f52114ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5366b18679f7ead0a02c29759d4bb455f52114ce"}], "stats": {"total": 165, "additions": 59, "deletions": 106}, "files": [{"sha": "bce55bc4d722ad507f98d604413716a0e4668d20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "patch": "@@ -1,3 +1,12 @@\n+2011-11-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (output_reload_in_const): Can handle CONSTANT_P\n+\tnow, not only CONST_INT and CONST_DOUBLE.\n+\t(output_movqi): Use output_reload_in_const.\n+\t(output_reload_inhi): Ditto.\n+\t(output_reload_insisf): Move assertion to output_reload_in_const.\n+\t(avr_out_reload_inpsi): Ditto.\n+\n 2011-11-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcov.c (object_summary): Replace with ..."}, {"sha": "630b7ef19eec1c850235af1b24cb7cff00654fb1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 50, "deletions": 106, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "patch": "@@ -71,7 +71,8 @@ static const char *ptrreg_to_str (int);\n static const char *cond_string (enum rtx_code);\n static int avr_num_arg_regs (enum machine_mode, const_tree);\n static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code,\n-\t\t\t\t int, bool);\n+                                 int, bool);\n+static void output_reload_in_const (rtx*, rtx, int*, bool);\n static struct machine_function * avr_init_machine_status (void);\n \n \n@@ -2201,52 +2202,10 @@ output_movqi (rtx insn, rtx operands[], int *l)\n \t  return AS2 (mov,%0,%1);\n \t}\n       else if (CONSTANT_P (src))\n-\t{\n-\t  if (test_hard_reg_class (LD_REGS, dest)) /* ldi d,i */\n-\t    return AS2 (ldi,%0,lo8(%1));\n-\t  \n-\t  if (GET_CODE (src) == CONST_INT)\n-\t    {\n-\t      if (src == const0_rtx) /* mov r,L */\n-\t\treturn AS1 (clr,%0);\n-\t      else if (src == const1_rtx)\n-\t\t{\n-\t\t  *l = 2;\n-\t\t  return (AS1 (clr,%0) CR_TAB\n-\t\t\t  AS1 (inc,%0));\n-\t\t}\n-\t      else if (src == constm1_rtx)\n-\t\t{\n-\t\t  /* Immediate constants -1 to any register */\n-\t\t  *l = 2;\n-\t\t  return (AS1 (clr,%0) CR_TAB\n-\t\t\t  AS1 (dec,%0));\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  int bit_nr = exact_log2 (INTVAL (src));\n-\n-\t\t  if (bit_nr >= 0)\n-\t\t    {\n-\t\t      *l = 3;\n-\t\t      if (!real_l)\n-\t\t\toutput_asm_insn ((AS1 (clr,%0) CR_TAB\n-\t\t\t\t\t  \"set\"), operands);\n-\t\t      if (!real_l)\n-\t\t\tavr_output_bld (operands, bit_nr);\n-\n-\t\t      return \"\";\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  \n-\t  /* Last resort, larger than loading from memory.  */\n-\t  *l = 4;\n-\t  return (AS2 (mov,__tmp_reg__,r31) CR_TAB\n-\t\t  AS2 (ldi,r31,lo8(%1))     CR_TAB\n-\t\t  AS2 (mov,%0,r31)          CR_TAB\n-\t\t  AS2 (mov,r31,__tmp_reg__));\n-\t}\n+        {\n+          output_reload_in_const (operands, NULL_RTX, real_l, false);\n+          return \"\";\n+        }\n       else if (GET_CODE (src) == MEM)\n \treturn out_movqi_r_mr (insn, operands, real_l); /* mov r,m */\n     }\n@@ -8163,8 +8122,10 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n   bool set_p = false;\n   unsigned int n;\n   enum machine_mode mode = GET_MODE (dest);\n+  int n_bytes = GET_MODE_SIZE (mode);\n   \n-  gcc_assert (REG_P (dest));\n+  gcc_assert (REG_P (dest)\n+              && CONSTANT_P (src));\n \n   if (len)\n     *len = 0;\n@@ -8175,18 +8136,18 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n   if (REGNO (dest) < 16\n       && REGNO (dest) + GET_MODE_SIZE (mode) > 16)\n     {\n-      clobber_reg = gen_rtx_REG (QImode,\n-                                 REGNO (dest) + GET_MODE_SIZE (mode) - 1);\n+      clobber_reg = gen_rtx_REG (QImode, REGNO (dest) + n_bytes - 1);\n     }\n \n-  /* We might need a clobber reg but don't have one.  Look at the value\n-     to be loaded more closely.  A clobber is only needed if it contains\n-     a byte that is neither 0, -1 or a power of 2.  */\n+  /* We might need a clobber reg but don't have one.  Look at the value to\n+     be loaded more closely.  A clobber is only needed if it is a symbol\n+     or contains a byte that is neither 0, -1 or a power of 2.  */\n   \n   if (NULL_RTX == clobber_reg\n       && !test_hard_reg_class (LD_REGS, dest)\n-      && !avr_popcount_each_byte (src, GET_MODE_SIZE (mode),\n-                                  (1 << 0) | (1 << 1) | (1 << 8)))\n+      && (! (CONST_INT_P (src) || CONST_DOUBLE_P (src))\n+          || !avr_popcount_each_byte (src, n_bytes,\n+                                      (1 << 0) | (1 << 1) | (1 << 8))))\n     {\n       /* We have no clobber register but need one.  Cook one up.\n          That's cheaper than loading from constant pool.  */\n@@ -8198,22 +8159,49 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n \n   /* Now start filling DEST from LSB to MSB.  */\n   \n-  for (n = 0; n < GET_MODE_SIZE (mode); n++)\n+  for (n = 0; n < n_bytes; n++)\n     {\n+      int ldreg_p;\n       bool done_byte = false;\n       unsigned int j;\n       rtx xop[3];\n \n-      /* Crop the n-th sub-byte.  */\n-      \n-      xval = simplify_gen_subreg (QImode, src, mode, n);\n+      /* Crop the n-th destination byte.  */\n+\n       xdest[n] = simplify_gen_subreg (QImode, dest, mode, n);\n+      ldreg_p = test_hard_reg_class (LD_REGS, xdest[n]);\n+\n+      if (!CONST_INT_P (src)\n+          && !CONST_DOUBLE_P (src))\n+        {\n+          static const char* const asm_code[][2] =\n+            {\n+              { \"ldi %2,lo8(%1)\"  CR_TAB \"mov %0,%2\",    \"ldi %0,lo8(%1)\"  },\n+              { \"ldi %2,hi8(%1)\"  CR_TAB \"mov %0,%2\",    \"ldi %0,hi8(%1)\"  },\n+              { \"ldi %2,hlo8(%1)\" CR_TAB \"mov %0,%2\",    \"ldi %0,hlo8(%1)\" },\n+              { \"ldi %2,hhi8(%1)\" CR_TAB \"mov %0,%2\",    \"ldi %0,hhi8(%1)\" }\n+            };\n+          \n+          xop[0] = xdest[n];\n+          xop[1] = src;\n+          xop[2] = clobber_reg;\n+\n+          if (n >= 2)\n+            avr_asm_len (\"clr %0\", xop, len, 1);\n+          else\n+            avr_asm_len (asm_code[n][ldreg_p], xop, len, ldreg_p ? 1 : 2);\n+          continue;\n+        }\n+\n+      /* Crop the n-th source byte.  */\n+\n+      xval = simplify_gen_subreg (QImode, src, mode, n);\n       ival[n] = INTVAL (xval);\n \n       /* Look if we can reuse the low word by means of MOVW.  */\n       \n       if (n == 2\n-          && GET_MODE_SIZE (mode) >= 4\n+          && n_bytes >= 4\n           && AVR_HAVE_MOVW)\n         {\n           rtx lo16 = simplify_gen_subreg (HImode, src, mode, 0);\n@@ -8250,7 +8238,7 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n \n       /* LD_REGS can use LDI to move a constant value */\n       \n-      if (test_hard_reg_class (LD_REGS, xdest[n]))\n+      if (ldreg_p)\n         {\n           xop[0] = xdest[n];\n           xop[1] = xval;\n@@ -8353,45 +8341,7 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n const char*\n output_reload_inhi (rtx *op, rtx clobber_reg, int *plen)\n {\n-  if (CONST_INT_P (op[1]))\n-    {\n-      output_reload_in_const (op, clobber_reg, plen, false);\n-    }\n-  else if (test_hard_reg_class (LD_REGS, op[0]))\n-    {\n-      avr_asm_len (\"ldi %A0,lo8(%1)\" CR_TAB\n-                   \"ldi %B0,hi8(%1)\", op, plen, -2);\n-    }\n-  else\n-    {\n-      rtx xop[3];\n-\n-      xop[0] = op[0];\n-      xop[1] = op[1];\n-      xop[2] = clobber_reg;\n-      \n-      if (plen)\n-        *plen = 0;\n-      \n-      if (clobber_reg == NULL_RTX)\n-        {\n-          /* No scratch register provided: cook une up.  */\n-          \n-          xop[2] = gen_rtx_REG (QImode, REG_Z + 1);\n-          avr_asm_len (\"mov __tmp_reg__,%2\", xop, plen, 1);\n-        }\n-      \n-      avr_asm_len (\"ldi %2,lo8(%1)\" CR_TAB\n-                   \"mov %A0,%2\"     CR_TAB\n-                   \"ldi %2,hi8(%1)\" CR_TAB\n-                   \"mov %B0,%2\", xop, plen, 4);\n-\n-      if (clobber_reg == NULL_RTX)\n-        {\n-          avr_asm_len (\"mov %2,__tmp_reg__\", xop, plen, 1);\n-        }\n-    }\n-\n+  output_reload_in_const (op, clobber_reg, plen, false);\n   return \"\";\n }\n \n@@ -8411,9 +8361,6 @@ output_reload_inhi (rtx *op, rtx clobber_reg, int *plen)\n const char *\n output_reload_insisf (rtx *op, rtx clobber_reg, int *len)\n {\n-  gcc_assert (REG_P (op[0])\n-              && CONSTANT_P (op[1]));\n-\n   if (AVR_HAVE_MOVW\n       && !test_hard_reg_class (LD_REGS, op[0]))\n     {\n@@ -8460,9 +8407,6 @@ output_reload_insisf (rtx *op, rtx clobber_reg, int *len)\n const char *\n avr_out_reload_inpsi (rtx *op, rtx clobber_reg, int *len)\n {\n-  gcc_assert (REG_P (op[0])\n-              && CONST_INT_P (op[1]));\n-\n   output_reload_in_const (op, clobber_reg, len, false);\n   return \"\";\n }"}]}