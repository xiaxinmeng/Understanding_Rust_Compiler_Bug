{"sha": "6b91b3e9df171970a907638d9b2e0bca1e792975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5MWIzZTlkZjE3MTk3MGE5MDc2MzhkOWIyZTBiY2ExZTc5Mjk3NQ==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-11-04T19:54:25Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-11-17T16:10:11Z"}, "message": "Add MODE_OPAQUE\n\nAfter discussion with Richard Sandiford on IRC, he suggested adding a\nnew mode class MODE_OPAQUE to deal with the problems (PR 96791) we had\nbeen having with POImode/PXImode in powerpc target. This patch is the\naccumulation of changes I needed to make to add this and make it useable\nfor the purposes of what power10 MMA needed.\n\nMODE_OPAQUE modes allow you to have modes for which you can just\ndefine loads and stores. By design, optimization does not expect to\nknow how to do arithmetic or subregs on these modes. This allows us to\nhave modes for multi-register vector operations where we don't want to\nopen Pandora's Box and define general arithmetic operations.\n\nThis patch will be followed by a target specific patch to change the\npowerpc power10 MMA builtins to use opaque modes, and will also let use\nuse the vector pair loads/stores defined with that in the inline expansion\nof memcpy/memmove, allowing me to fix PR 96791.\n\ngcc/ChangeLog\n\tPR target/96791\n\t* mode-classes.def: Add MODE_OPAQUE.\n\t* machmode.def: Add OPAQUE_MODE.\n\t* tree.def: Add OPAQUE_TYPE for types that will use\n\tMODE_OPAQUE.\n\t* doc/generic.texi: Document OPAQUE_TYPE.\n\t* doc/rtl.texi: Document MODE_OPAQUE.\n\t* machmode.h: Add OPAQUE_MODE_P().\n\t* genmodes.c (complete_mode): Add MODE_OPAQUE.\n\t(opaque_mode): New function.\n\t* tree.c (tree_code_size): Add OPAQUE_TYPE.\n\t* tree.h: Add OPAQUE_TYPE_P().\n\t* stor-layout.c (int_mode_for_mode): Treat MODE_OPAQUE modes\n\tlike BLKmode.\n\t* ira.c (find_moveable_pseudos): Treat MODE_OPAQUE modes more\n\tlike integer/float modes here.\n\t* dbxout.c (dbxout_type): Treat OPAQUE_TYPE like VOID_TYPE.\n\t* tree-pretty-print.c (dump_generic_node): Treat OPAQUE_TYPE\n\tlike like other types.", "tree": {"sha": "4520112150212b2ccc3174df9393bad83169aad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4520112150212b2ccc3174df9393bad83169aad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b91b3e9df171970a907638d9b2e0bca1e792975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b91b3e9df171970a907638d9b2e0bca1e792975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b91b3e9df171970a907638d9b2e0bca1e792975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b91b3e9df171970a907638d9b2e0bca1e792975/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8661f4faa875f361cd22a197774c1fa04cd0580b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8661f4faa875f361cd22a197774c1fa04cd0580b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8661f4faa875f361cd22a197774c1fa04cd0580b"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "eaee2f19ce0cb59d9f50215c875f0e4c30200137", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -1963,6 +1963,7 @@ dbxout_type (tree type, int full)\n     case VOID_TYPE:\n     case NULLPTR_TYPE:\n     case LANG_TYPE:\n+    case OPAQUE_TYPE:\n       /* For a void type, just define it as itself; i.e., \"5=5\".\n \t This makes us consider it defined\n \t without saying what it is.  The debugger will make it"}, {"sha": "5c1d3cda48c0376ab851a560c5bb419d73603ff2", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -302,6 +302,7 @@ The elements are indexed from zero.\n @tindex ARRAY_TYPE\n @tindex RECORD_TYPE\n @tindex UNION_TYPE\n+@tindex OPAQUE_TYPE\n @tindex UNKNOWN_TYPE\n @tindex OFFSET_TYPE\n @findex TYPE_UNQUALIFIED\n@@ -487,6 +488,13 @@ assigned to that constant.  These constants will appear in the order in\n which they were declared.  The @code{TREE_TYPE} of each of these\n constants will be the type of enumeration type itself.\n \n+@item OPAQUE_TYPE\n+Used for things that have a @code{MODE_OPAQUE} mode class in the\n+backend. Opaque types have a size and precision, and can be held in\n+memory or registers. They are used when we do not want the compiler to\n+make assumptions about the availability of other operations as would\n+happen with integer types.\n+\n @item BOOLEAN_TYPE\n Used to represent the @code{bool} type.\n "}, {"sha": "4f9b99047ad09d6ef74d782b9c988650086ea4de", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -1406,6 +1406,12 @@ Pointer bounds modes.  Used to represent values of pointer bounds type.\n Operations in these modes may be executed as NOPs depending on hardware\n features and environment setup.\n \n+@findex MODE_OPAQUE\n+@item MODE_OPAQUE\n+This is a mode class for modes that don't want to provide operations\n+other than register moves, memory moves, loads, stores, and\n+@code{unspec}s. They have a size and precision and that's all.\n+\n @findex MODE_RANDOM\n @item MODE_RANDOM\n This is a catchall mode class for modes which don't fit into the above"}, {"sha": "34b52fe41d6bf441a8487abc17d6fea3137c4829", "filename": "gcc/genmodes.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -358,6 +358,14 @@ complete_mode (struct mode_data *m)\n       m->component = 0;\n       break;\n \n+    case MODE_OPAQUE:\n+      /* Opaque modes have size and precision.  */\n+      validate_mode (m, OPTIONAL, SET, UNSET, UNSET, UNSET);\n+\n+      m->ncomponents = 1;\n+      m->component = 0;\n+      break;\n+\n     case MODE_PARTIAL_INT:\n       /* A partial integer mode uses ->component to say what the\n \t corresponding full-size integer mode is, and may also\n@@ -588,6 +596,20 @@ make_int_mode (const char *name,\n   m->precision = precision;\n }\n \n+#define OPAQUE_MODE(N, B)\t\t\t\\\n+  make_opaque_mode (#N, -1U, B, __FILE__, __LINE__)\n+\n+static void ATTRIBUTE_UNUSED\n+make_opaque_mode (const char *name,\n+\t\t  unsigned int precision,\n+\t\t  unsigned int bytesize,\n+\t\t  const char *file, unsigned int line)\n+{\n+  struct mode_data *m = new_mode (MODE_OPAQUE, name, file, line);\n+  m->bytesize = bytesize;\n+  m->precision = precision;\n+}\n+\n #define FRACT_MODE(N, Y, F) \\\n \tmake_fixed_point_mode (MODE_FRACT, #N, Y, 0, F, __FILE__, __LINE__)\n "}, {"sha": "89b5df4003d5c443e2a014f60c54e5cdb2ccea1a", "filename": "gcc/ira.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -4666,7 +4666,9 @@ find_moveable_pseudos (void)\n \t\t|| !DF_REF_INSN_INFO (def)\n \t\t|| HARD_REGISTER_NUM_P (regno)\n \t\t|| DF_REG_EQ_USE_COUNT (regno) > 0\n-\t\t|| (!INTEGRAL_MODE_P (mode) && !FLOAT_MODE_P (mode)))\n+\t\t|| (!INTEGRAL_MODE_P (mode)\n+\t\t    && !FLOAT_MODE_P (mode)\n+\t\t    && !OPAQUE_MODE_P (mode)))\n \t      continue;\n \t    def_insn = DF_REF_INSN (def);\n "}, {"sha": "6f8c6855acaa21862ad0a20a75a8749c8480cd11", "filename": "gcc/machmode.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -153,6 +153,9 @@ along with GCC; see the file COPYING3.  If not see\n         the element at index 0 occupying the lsb of the first byte in\n         memory.  Only the lowest bit of each element is significant.\n \n+     OPAQUE_MODE (NAME, BYTESIZE)\n+        Create an opaque mode called NAME that is BYTESIZE bytes wide.\n+\n      COMPLEX_MODES (CLASS);\n         For all modes presently declared in class CLASS, construct\n \tcorresponding complex modes.  Modes smaller than one byte"}, {"sha": "bb3a5c6c27e56679d41b5aa44283b07dada454a2", "filename": "gcc/machmode.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -225,6 +225,10 @@ extern const unsigned char mode_class[NUM_MACHINE_MODES];\n   (SIGNED_FIXED_POINT_MODE_P (MODE)\t\t\\\n    || UNSIGNED_FIXED_POINT_MODE_P (MODE))\n \n+/* Nonzero if MODE is opaque.  */\n+#define OPAQUE_MODE_P(MODE)                     \\\n+    (GET_MODE_CLASS (MODE) == MODE_OPAQUE)\n+\n /* Nonzero if CLASS modes can be widened.  */\n #define CLASS_HAS_WIDER_MODES_P(CLASS)         \\\n   (CLASS == MODE_INT                           \\"}, {"sha": "b78a715ba59198ddca049e5c3de9142d195a8c92", "filename": "gcc/mode-classes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmode-classes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fmode-classes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-classes.def?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -36,4 +36,5 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_MODE_CLASS (MODE_VECTOR_UFRACT),\t/* SIMD vectors */\t\t   \\\n   DEF_MODE_CLASS (MODE_VECTOR_ACCUM),\t/* SIMD vectors */\t\t   \\\n   DEF_MODE_CLASS (MODE_VECTOR_UACCUM),\t/* SIMD vectors */\t\t   \\\n-  DEF_MODE_CLASS (MODE_VECTOR_FLOAT)\n+  DEF_MODE_CLASS (MODE_VECTOR_FLOAT),                                      \\\n+  DEF_MODE_CLASS (MODE_OPAQUE)          /* opaque modes */"}, {"sha": "ee1cf55df90e2948df52f6d90b7e3d6741a4d399", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -393,6 +393,9 @@ int_mode_for_mode (machine_mode mode)\n     case MODE_VECTOR_UACCUM:\n       return int_mode_for_size (GET_MODE_BITSIZE (mode), 0);\n \n+    case MODE_OPAQUE:\n+\treturn opt_scalar_int_mode ();\n+\n     case MODE_RANDOM:\n       if (mode == BLKmode)\n \treturn opt_scalar_int_mode ();"}, {"sha": "5a93c4d8b9e3df117f515347ec7eaaf53f06240c", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -1708,6 +1708,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n     case VECTOR_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n+    case OPAQUE_TYPE:\n       {\n \tunsigned int quals = TYPE_QUALS (node);\n \tenum tree_code_class tclass;"}, {"sha": "569a9b9317bee17f0dacfda0eee2bdba63b3aae1", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -864,6 +864,7 @@ tree_code_size (enum tree_code code)\n \tcase BOOLEAN_TYPE:\n \tcase INTEGER_TYPE:\n \tcase REAL_TYPE:\n+\tcase OPAQUE_TYPE:\n \tcase POINTER_TYPE:\n \tcase REFERENCE_TYPE:\n \tcase NULLPTR_TYPE:"}, {"sha": "462672f2c69fc988a314799e7342a29298674e8f", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -250,6 +250,12 @@ DEFTREECODE (METHOD_TYPE, \"method_type\", tcc_type, 0)\n    layout_type does not know how to lay this out,\n    so the front-end must do so manually.  */\n DEFTREECODE (LANG_TYPE, \"lang_type\", tcc_type, 0)\n+\n+/* This is for types that will use MODE_OPAQUE in the back end.  They are meant\n+   to be able to go in a register of some sort but are explicitly not to be\n+   converted or operated on like INTEGER_TYPE.  They will have size and\n+   alignment information only.  */\n+DEFTREECODE (OPAQUE_TYPE, \"opaque_type\", tcc_type, 0)\n \f\n /* Expressions */\n "}, {"sha": "bea3e16c0916dc121e215ab8b18d179d6cc69898", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b91b3e9df171970a907638d9b2e0bca1e792975/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6b91b3e9df171970a907638d9b2e0bca1e792975", "patch": "@@ -625,6 +625,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define FUNC_OR_METHOD_TYPE_P(NODE) \\\n   (TREE_CODE (NODE) == FUNCTION_TYPE || TREE_CODE (NODE) == METHOD_TYPE)\n \n+#define OPAQUE_TYPE_P(NODE) \\\n+    (TREE_CODE (NODE) == OPAQUE_TYPE)\n+\n /* Define many boolean fields that all tree nodes have.  */\n \n /* In VAR_DECL, PARM_DECL and RESULT_DECL nodes, nonzero means address"}]}