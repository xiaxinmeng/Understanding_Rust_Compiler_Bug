{"sha": "974e0ad69d898e5088ca125c84b6708ed958302b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0ZTBhZDY5ZDg5OGU1MDg4Y2ExMjVjODRiNjcwOGVkOTU4MzAyYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-08T18:24:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-08T18:24:04Z"}, "message": "i386.c (standard_sse_constant_p): Handle AVX2 modes.\n\n2011-09-08  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.c (standard_sse_constant_p): Handle AVX2 modes.\n\t(standard_sse_constant_opcode) <case 2>: Change vpcmpeqd template.\n\ntestsuite/ChangeLog:\n\n2011-09-08  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* gcc.target/i386/all_one_m256i.c: New test.\n\nFrom-SVN: r178704", "tree": {"sha": "0b9538cb7439ea82eb37612ab5b84aad1ceaea95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b9538cb7439ea82eb37612ab5b84aad1ceaea95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974e0ad69d898e5088ca125c84b6708ed958302b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e0ad69d898e5088ca125c84b6708ed958302b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974e0ad69d898e5088ca125c84b6708ed958302b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e0ad69d898e5088ca125c84b6708ed958302b/comments", "author": null, "committer": null, "parents": [{"sha": "bd2777de1f2361995befcbe52577fce6067c4e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2777de1f2361995befcbe52577fce6067c4e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2777de1f2361995befcbe52577fce6067c4e49"}], "stats": {"total": 95, "additions": 57, "deletions": 38}, "files": [{"sha": "b3dc6bd524b42b09848b3fa6843f9aa741bb82a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974e0ad69d898e5088ca125c84b6708ed958302b", "patch": "@@ -1,3 +1,8 @@\n+2011-09-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (standard_sse_constant_p): Handle AVX2 modes.\n+\t(standard_sse_constant_opcode) <case 2>: Change vpcmpeqd template.\n+\n 2011-09-08  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config/arm/arm.md (push_multi): Emit predicates.\n@@ -8,19 +13,16 @@\n \n \tPR c++/33255 - Support -Wunused-local-typedefs warning\n \t* c-decl.c (lookup_name): Use the new maybe_record_typedef_use.\n-    \t(pushdecl): Use the new\n-    \trecord_locally_defined_typedef.\n-    \t(store_parm_decls): Allocate cfun->language.\n-    \t(finish_function): Use the new maybe_warn_unused_local_typedefs,\n-    \tand free cfun->language.\n-    \t(c_push_function_context): Allocate cfun->language here only if\n-    \tneeded.\n-    \t(c_pop_function_context): Likewise, mark cfun->language\n-    \tfor collection only when it should be done.\n-    \t* c-common.c (handle_used_attribute): Don't ignore TYPE_DECL\n-    \tnodes.\n-    \t* c-typeck.c (c_expr_sizeof_type, c_cast_expr): Use the new\n-    \tmaybe_record_local_typedef_use.\n+\t(pushdecl): Use the new record_locally_defined_typedef.\n+\t(store_parm_decls): Allocate cfun->language.\n+\t(finish_function): Use the new maybe_warn_unused_local_typedefs,\n+\tand free cfun->language.\n+\t(c_push_function_context): Allocate cfun->language here only if needed.\n+\t(c_pop_function_context): Likewise, mark cfun->language\n+\tfor collection only when it should be done.\n+\t* c-common.c (handle_used_attribute): Don't ignore TYPE_DECL nodes.\n+\t* c-typeck.c (c_expr_sizeof_type, c_cast_expr): Use the new\n+\tmaybe_record_local_typedef_use.\n \t* doc/invoke.texi: Update documentation for\n \t-Wunused-local-typedefs.\n \n@@ -78,8 +80,9 @@\n \n 2011-09-08  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t*config/darwin-driver.c (darwin_find_version_from_kernel): New routine \n-\tcut from ... (darwin_default_min_version): Amended to provide defaults\n+\t* config/darwin-driver.c (darwin_find_version_from_kernel): New routine\n+\tcut from ...\n+\t(darwin_default_min_version): Amended to provide defaults\n \tfor the cross directory case.\n \t(darwin_driver_init): call darwin_default_min_version unconditionally.\n \t* config/darwin.h (DEF_MIN_OSX_VERSION): New.\n@@ -114,8 +117,7 @@\n \t(merge_overlapping_regs): Use chain_from_id.  Assert that\n \tchains don't conflict with themselves.\n \t(rename_chains): Take no argument.  Iterate over id_to_chain\n-\trather to find chains to rename.  Clear tick before the main\n-\tloop.\n+\trather to find chains to rename.  Clear tick before the main loop.\n \t(struct incoming_reg_info): New struct.\n \t(struct bb_rename_info): New struct.\n \t(init_rename_info, set_incoming_from_chain, merge_chains): New\n@@ -239,18 +241,15 @@\n \t* hooks.c (hook_int_uint_mode_1): Likewise.\n \n \t* config/i386/i386.h (ix86_tune_indices): Add\n-\tX86_TUNE_REASSOC_INT_TO_PARALLEL and\n-\tX86_TUNE_REASSOC_FP_TO_PARALLEL.\n+\tX86_TUNE_REASSOC_INT_TO_PARALLEL and X86_TUNE_REASSOC_FP_TO_PARALLEL.\n \n \t(TARGET_REASSOC_INT_TO_PARALLEL): New.\n \t(TARGET_REASSOC_FP_TO_PARALLEL): Likewise.\n \n \t* config/i386/i386.c (initial_ix86_tune_features): Add\n-\tX86_TUNE_REASSOC_INT_TO_PARALLEL and\n-\tX86_TUNE_REASSOC_FP_TO_PARALLEL.\n+\tX86_TUNE_REASSOC_INT_TO_PARALLEL and X86_TUNE_REASSOC_FP_TO_PARALLEL.\n \n-\t(ix86_reassociation_width) implementation of\n-\tnew hook for i386 target.\n+\t(ix86_reassociation_width): New function.\n \n \t* params.def (PARAM_TREE_REASSOC_WIDTH): New param added.\n \n@@ -259,12 +258,11 @@\n \t(swap_ops_for_binary_stmt): Likewise.\n \t(rewrite_expr_tree_parallel): Likewise.\n \n-\t(rewrite_expr_tree): Refactored. Part of code moved into\n+\t(rewrite_expr_tree): Refactored.  Part of code moved into\n \tswap_ops_for_binary_stmt.\n \n-\t(reassociate_bb): Now checks reassociation width to be used\n-\tand call rewrite_expr_tree_parallel instead of rewrite_expr_tree\n-\tif needed.\n+\t(reassociate_bb): Now checks reassociation width to be used and\n+\tcall rewrite_expr_tree_parallel instead of rewrite_expr_tree if needed.\n \n 2011-09-06  Richard Guenther  <rguenther@suse.de>\n \n@@ -342,8 +340,7 @@\n \n 2011-09-06  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify\n-\tmatching.\n+\t* tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify matching.\n \n 2011-09-06  Tom de Vries  <tom@codesourcery.com>\n \n@@ -401,11 +398,9 @@\n \t* config/sparc/sparc.md: Add to \"cpu\" attribute.\n \t* config/sparc/sparc.h (TARGET_CPU_niagara3,\n \tTARGET_CPU_niagara4): New, treat as niagara2.\n-\t* config/sparc/linux64.h: Handle niagara3 and niagara4\n-\tlike niagara2.\n+\t* config/sparc/linux64.h: Handle niagara3 and niagara4 like niagara2.\n \t* config/sparc/sol2.h: Likewise.\n-\t* config/sparc/niagara2.md: Schedule niagara3 like\n-\tniagara2.\n+\t* config/sparc/niagara2.md: Schedule niagara3 like niagara2.\n \t* config/sparc/sparc.c (sparc_option_override): Add\n \tniagara3 and niagara4 handling.\n \t(sparc32_initialize_trampoline): Likewise.\n@@ -712,8 +707,7 @@\n \t* gimple-fold.c (fold_gimple_assign): Move COND_EXPR folding.\n \t* tree-object-size.c (cond_expr_object_size): Adjust.\n \t(collect_object_sizes_for): Likewise.\n-\t* tree-scalar-evolution.c (interpret_expr): Don't handle\n-\tternary RHSs.\n+\t* tree-scalar-evolution.c (interpret_expr): Don't handle ternary RHSs.\n \t* tree-ssa-forwprop.c (forward_propagate_into_cond): Fix and simplify.\n \t(ssa_forward_propagate_and_combine): Adjust.\n \t* tree-ssa-loop-im.c (move_computations_stmt): Build the COND_EXPR"}, {"sha": "171a48026bf28e8a88e1f6b557c7b888bc14849f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=974e0ad69d898e5088ca125c84b6708ed958302b", "patch": "@@ -8176,7 +8176,7 @@ standard_80387_constant_rtx (int idx)\n }\n \n /* Return 1 if X is all 0s and 2 if x is all 1s\n-   in supported SSE vector mode.  */\n+   in supported SSE/AVX vector mode.  */\n \n int\n standard_sse_constant_p (rtx x)\n@@ -8194,6 +8194,12 @@ standard_sse_constant_p (rtx x)\n       case V2DImode:\n \tif (TARGET_SSE2)\n \t  return 2;\n+      case V32QImode:\n+      case V16HImode:\n+      case V8SImode:\n+      case V4DImode:\n+\tif (TARGET_AVX2)\n+\t  return 2;\n       default:\n \tbreak;\n       }\n@@ -8235,7 +8241,8 @@ standard_sse_constant_opcode (rtx insn, rtx x)\n \t}\n \n     case 2:\n-      return \"%vpcmpeqd\\t%0, %d0\";\n+      return \"%vpcmpeqd\\t%0, %0, %0\";\n+\n     default:\n       break;\n     }"}, {"sha": "3670296970a3c528a96caf0cd95c79267f19505a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=974e0ad69d898e5088ca125c84b6708ed958302b", "patch": "@@ -1,3 +1,7 @@\n+2011-09-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/all_one_m256i.c: New test.\n+\n 2011-09-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50324\n@@ -56,7 +60,7 @@\n \tPR middle-end/48571\n \t* gcc.c-torture/execute/pr48571-1.c (bar): Use offsets sizeof(int)\n \tinstead of 4.\n-\t\n+\n 2011-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50309"}, {"sha": "1c3ca08b1692c48b5f0187edaa96677268999649", "filename": "gcc/testsuite/gcc.target/i386/all_one_m256i.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fall_one_m256i.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e0ad69d898e5088ca125c84b6708ed958302b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fall_one_m256i.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fall_one_m256i.c?ref=974e0ad69d898e5088ca125c84b6708ed958302b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+typedef long long __m256i __attribute__ ((__vector_size__ (32)));\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\n+__m256i foo ()\n+{\n+  __m256i minus_1 = (__m256i) (__v8si) { -1, -1, -1, -1, -1, -1, -1, -1 };\n+\n+  return minus_1;\n+}\n+\n+/* { dg-final { scan-assembler \"vpcmpeqd\" } } */"}]}