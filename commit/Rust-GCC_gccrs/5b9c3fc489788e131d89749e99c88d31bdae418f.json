{"sha": "5b9c3fc489788e131d89749e99c88d31bdae418f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5YzNmYzQ4OTc4OGUxMzFkODk3NDllOTljODhkMzFiZGFlNDE4Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T05:48:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T05:48:28Z"}, "message": "[multiple changes]\n\n2010-06-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb: Minor reformatting.\n\n2010-06-23  Doug Rupp  <rupp@adacore.com>\n\n\t* bindusg.adb (Display): Write -Hnn line.\n\t* bindgen.adb (Gen_Adainit_Ada): Write Heap_Size to binder file as \n\tnecessary.\n\t* init.c (__gl_heap_size): Rename from __gl_no_malloc_64 and change\n\tvalid values to 32 and 64.\n\t(GNAT$NO_MALLOC_64): Recognize TRUE, 1, FALSE, and 0 in addition to\n\tENABLE, DISABLE as valid settings.\n\t* switch-b.adb (Scan_Binder_Switches): Process -Hnn switch.\n\t* opt.ads (Heap_Size): New global variable.\n\t* gcc-interface/utils2.c (maybe_wrap_malloc): Remove mostly redundant \n\tTARGET_MALLOC64 check. Fix comment.\n\nFrom-SVN: r161243", "tree": {"sha": "b13f3fbe9e2ed2f7b3538a470648b39de5a19659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b13f3fbe9e2ed2f7b3538a470648b39de5a19659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b9c3fc489788e131d89749e99c88d31bdae418f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9c3fc489788e131d89749e99c88d31bdae418f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9c3fc489788e131d89749e99c88d31bdae418f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9c3fc489788e131d89749e99c88d31bdae418f/comments", "author": null, "committer": null, "parents": [{"sha": "13d923cc90c7964d5629013c843036fdb50e4301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d923cc90c7964d5629013c843036fdb50e4301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d923cc90c7964d5629013c843036fdb50e4301"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "5f146ed995901d9d5348e77252989d12cc04de75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -1,3 +1,21 @@\n+2010-06-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb: Minor reformatting.\n+\n+2010-06-23  Doug Rupp  <rupp@adacore.com>\n+\n+\t* bindusg.adb (Display): Write -Hnn line.\n+\t* bindgen.adb (Gen_Adainit_Ada): Write Heap_Size to binder file as \n+\tnecessary.\n+\t* init.c (__gl_heap_size): Rename from __gl_no_malloc_64 and change\n+\tvalid values to 32 and 64.\n+\t(GNAT$NO_MALLOC_64): Recognize TRUE, 1, FALSE, and 0 in addition to\n+\tENABLE, DISABLE as valid settings.\n+\t* switch-b.adb (Scan_Binder_Switches): Process -Hnn switch.\n+\t* opt.ads (Heap_Size): New global variable.\n+\t* gcc-interface/utils2.c (maybe_wrap_malloc): Remove mostly redundant \n+\tTARGET_MALLOC64 check. Fix comment.\n+\n 2010-06-23  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb, exp_ch4.adb, s-rannum.ads, sem.adb, sem_ch12.adb: Minor"}, {"sha": "316459fbb579c83cd67bd997193347df52fdd26b", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -111,6 +111,7 @@ package body Bindgen is\n \n    --     Main_Priority                 : Integer;\n    --     Time_Slice_Value              : Integer;\n+   --     Heap_Size                     : Natural;\n    --     WC_Encoding                   : Character;\n    --     Locking_Policy                : Character;\n    --     Queuing_Policy                : Character;\n@@ -136,6 +137,10 @@ package body Bindgen is\n    --  A value of zero indicates that time slicing should be suppressed. If no\n    --  pragma is present, and no -T switch was used, the value is -1.\n \n+   --  Heap_Size is the heap to use for memory allocations set by use of a\n+   --  -Hnn parameter for the binder or by the GNAT$NO_MALLOC_64 logical.\n+   --  Valid values are 32 and 64. This switch is only available on VMS.\n+\n    --  WC_Encoding shows the wide character encoding method used for the main\n    --  program. This is one of the encoding letters defined in\n    --  System.WCh_Con.WC_Encoding_Letters.\n@@ -615,6 +620,15 @@ package body Bindgen is\n             WBI (\"      Features_Set : Integer;\");\n             WBI (\"      pragma Import (C, Features_Set, \" &\n                  \"\"\"__gnat_features_set\"\");\");\n+\n+            if Opt.Heap_Size /= 0 then\n+               WBI (\"\");\n+               WBI (\"      Heap_Size : Integer;\");\n+               WBI (\"      pragma Import (C, Heap_Size, \" &\n+                    \"\"\"__gl_heap_size\"\");\");\n+\n+               Write_Statement_Buffer;\n+            end if;\n          end if;\n \n          --  Initialize stack limit variable of the environment task if the\n@@ -786,7 +800,18 @@ package body Bindgen is\n             WBI (\"      if Features_Set = 0 then\");\n             WBI (\"         Set_Features;\");\n             WBI (\"      end if;\");\n+\n+            --  Features_Set may twiddle the heap size according to a logical\n+            --  name, but the binder switch must override.\n+\n+            if Opt.Heap_Size /= 0 then\n+               Set_String (\"      Heap_Size := \");\n+               Set_Int (Opt.Heap_Size);\n+               Set_Char   (';');\n+               Write_Statement_Buffer;\n+            end if;\n          end if;\n+\n       end if;\n \n       --  Generate call to set Initialize_Scalar values if active"}, {"sha": "06fa354d414aaab72a76c3fcfb1bb5783ee2fcbc", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -116,6 +116,11 @@ package body Bindusg is\n \n       Write_Line (\"  -h        Output this usage (help) information\");\n \n+      --  Line for -H switch\n+\n+      Write_Line (\"  -Hnn      Use nn bit heap where nn is 32 or 64 \" &\n+                  \"(VMS Only)\");\n+\n       --  Lines for -I switch\n \n       Write_Line (\"  -Idir     Specify library and source files search path\");"}, {"sha": "69f5f38cf21b9f19f0e3071d628c9cd42553c261", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -1823,13 +1823,12 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n \n   tree malloc_ptr;\n \n-  /* On VMS, if 64-bit memory is disabled or pointers are 64-bit and the\n-     allocator size is 32-bit or Convention C, allocate 32-bit memory.  */\n+  /* On VMS, if pointers are 64-bit and the allocator size is 32-bit or\n+     Convention C, allocate 32-bit memory.  */\n   if (TARGET_ABI_OPEN_VMS\n-      && (!TARGET_MALLOC64\n-\t  || (POINTER_SIZE == 64\n-\t      && (UI_To_Int (Esize (Etype (gnat_node))) == 32\n-\t\t  || Convention (Etype (gnat_node)) == Convention_C))))\n+      && (POINTER_SIZE == 64\n+\t     && (UI_To_Int (Esize (Etype (gnat_node))) == 32\n+\t\t || Convention (Etype (gnat_node)) == Convention_C)))\n     malloc_ptr = build_call_1_expr (malloc32_decl, size_to_malloc);\n   else\n     malloc_ptr = build_call_1_expr (malloc_decl, size_to_malloc);"}, {"sha": "f011668899cffd41d9f927fafbcbad65fd797248", "filename": "gcc/ada/init.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -1568,15 +1568,18 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n \n #endif\n \n-/* Feature logical name and global variable address pair */\n+/* Feature logical name and global variable address pair.\n+   If we ever add another feature logical to this list, the\n+   feature struct will need to be enhanced to take into account\n+   possible values for *gl_addr.  */\n struct feature {char *name; int* gl_addr;};\n \n /* Default values for GNAT features set by environment. */\n-int __gl_no_malloc_64 = 0;\n+int __gl_heap_size = 64;\n \n /* Array feature logical names and global variable addresses */\n static struct feature features[] = {\n-  {\"GNAT$NO_MALLOC_64\", &__gl_no_malloc_64},\n+  {\"GNAT$NO_MALLOC_64\", &__gl_heap_size},\n   {0, 0}\n };\n \n@@ -1607,10 +1610,14 @@ void __gnat_set_features ()\n        else\n          strcpy (buff, \"\");\n \n-       if (strcmp (buff, \"ENABLE\") == 0)\n-          *features [i].gl_addr = 1;\n-       else if (strcmp (buff, \"DISABLE\") == 0)\n-          *features [i].gl_addr = 0;\n+       if ((strcmp (buff, \"ENABLE\") == 0) ||\n+           (strcmp (buff, \"TRUE\") == 0) ||\n+           (strcmp (buff, \"1\") == 0))\n+          *features [i].gl_addr = 32;\n+       else if ((strcmp (buff, \"DISABLE\") == 0) ||\n+                (strcmp (buff, \"FALSE\") == 0) ||\n+                (strcmp (buff, \"0\") == 0))\n+          *features [i].gl_addr = 64;\n     }\n \n     __gnat_features_set = 1;"}, {"sha": "cac20fbe05c25abc84e271aec58bbc102c80c543", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -585,6 +585,11 @@ package Opt is\n    --  GNAT\n    --  True if compiling in GNAT system mode (-gnatg switch)\n \n+   Heap_Size : Nat := 0;\n+   --  GNATBIND\n+   --  Heap size for memory allocations. Valid values are 32 and 64. Only\n+   --  available on VMS.\n+\n    HLO_Active : Boolean := False;\n    --  GNAT\n    --  True if High Level Optimizer is activated (-gnatH switch)"}, {"sha": "ac5663bd4a39d7061dc1254a345aaa55ba4461c2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -98,15 +98,15 @@ package body Sem_Ch6 is\n    -----------------------\n \n    procedure Analyze_Return_Statement (N : Node_Id);\n-   --  Common processing for simple_ and extended_return_statements\n+   --  Common processing for simple and extended return statements\n \n    procedure Analyze_Function_Return (N : Node_Id);\n    --  Subsidiary to Analyze_Return_Statement. Called when the return statement\n    --  applies to a [generic] function.\n \n    procedure Analyze_Return_Type (N : Node_Id);\n    --  Subsidiary to Process_Formals: analyze subtype mark in function\n-   --  specification, in a context where the formals are visible and hide\n+   --  specification in a context where the formals are visible and hide\n    --  outer homographs.\n \n    procedure Analyze_Subprogram_Body_Helper (N : Node_Id);"}, {"sha": "efc104715c9c1a7546fd444c7f9db857c03a3545", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9c3fc489788e131d89749e99c88d31bdae418f/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=5b9c3fc489788e131d89749e99c88d31bdae418f", "patch": "@@ -271,6 +271,19 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             Usage_Requested := True;\n \n+         --  Processing for H switch\n+\n+         when 'H' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n+            Ptr := Ptr + 1;\n+            Scan_Nat (Switch_Chars, Max, Ptr, Heap_Size, C);\n+            if Heap_Size /= 32 and then Heap_Size /= 64 then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n          --  Processing for i switch\n \n          when 'i' =>"}]}