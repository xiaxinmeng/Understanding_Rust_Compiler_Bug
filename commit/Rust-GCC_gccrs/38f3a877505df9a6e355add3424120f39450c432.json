{"sha": "38f3a877505df9a6e355add3424120f39450c432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmM2E4Nzc1MDVkZjlhNmUzNTVhZGQzNDI0MTIwZjM5NDUwYzQzMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-12T20:03:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-12T20:03:33Z"}, "message": "PR c++/85356 - ICE with pointer to member function.\n\n\t* pt.c (maybe_instantiate_noexcept): Do instantiate in templates if\n\tflag_noexcept_type.  Build the new spec within the function context.\n\t* except.c (build_noexcept_spec): Do get constant value in templates\n\tif flag_noexcept_type.\n\t* decl.c (check_redeclaration_exception_specification): Don't\n\tinstantiate noexcept on a dependent declaration.\n\nFrom-SVN: r259356", "tree": {"sha": "3fd42df87398348c6dd035d4b1fdbb12ec2da387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd42df87398348c6dd035d4b1fdbb12ec2da387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f3a877505df9a6e355add3424120f39450c432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f3a877505df9a6e355add3424120f39450c432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f3a877505df9a6e355add3424120f39450c432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f3a877505df9a6e355add3424120f39450c432/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4930c53ee69f18a6fd689527864d419ce0333e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4930c53ee69f18a6fd689527864d419ce0333e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4930c53ee69f18a6fd689527864d419ce0333e7a"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "08021dfb1e22a163c324e2efa670351b7bc84053", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38f3a877505df9a6e355add3424120f39450c432", "patch": "@@ -1,3 +1,13 @@\n+2018-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85356 - ICE with pointer to member function.\n+\t* pt.c (maybe_instantiate_noexcept): Do instantiate in templates if\n+\tflag_noexcept_type.  Build the new spec within the function context.\n+\t* except.c (build_noexcept_spec): Do get constant value in templates\n+\tif flag_noexcept_type.\n+\t* decl.c (check_redeclaration_exception_specification): Don't\n+\tinstantiate noexcept on a dependent declaration.\n+\n 2018-04-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85258"}, {"sha": "9f1a171ead79066e281e82c1e33c971aa7589bc5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=38f3a877505df9a6e355add3424120f39450c432", "patch": "@@ -1232,8 +1232,11 @@ check_redeclaration_exception_specification (tree new_decl,\n       && UNEVALUATED_NOEXCEPT_SPEC_P (old_exceptions))\n     return;\n \n-  maybe_instantiate_noexcept (new_decl);\n-  maybe_instantiate_noexcept (old_decl);\n+  if (!type_dependent_expression_p (old_decl))\n+    {\n+      maybe_instantiate_noexcept (new_decl);\n+      maybe_instantiate_noexcept (old_decl);\n+    }\n   new_exceptions = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (new_decl));\n   old_exceptions = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (old_decl));\n "}, {"sha": "6dab6d6bd961c7c78aac699ff5925325f86900dc", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=38f3a877505df9a6e355add3424120f39450c432", "patch": "@@ -1194,11 +1194,14 @@ build_noexcept_spec (tree expr, int complain)\n {\n   /* This isn't part of the signature, so don't bother trying to evaluate\n      it until instantiation.  */\n-  if (!processing_template_decl && TREE_CODE (expr) != DEFERRED_NOEXCEPT)\n+  if (TREE_CODE (expr) != DEFERRED_NOEXCEPT\n+      && (!processing_template_decl\n+\t  || (flag_noexcept_type && !value_dependent_expression_p (expr))))\n     {\n       expr = perform_implicit_conversion_flags (boolean_type_node, expr,\n \t\t\t\t\t\tcomplain,\n \t\t\t\t\t\tLOOKUP_NORMAL);\n+      expr = instantiate_non_dependent_expr (expr);\n       expr = cxx_constant_value (expr);\n     }\n   if (TREE_CODE (expr) == INTEGER_CST)"}, {"sha": "da8a5264d33e21c23fee30f5368bbeedbce6da59", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f3a877505df9a6e355add3424120f39450c432/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=38f3a877505df9a6e355add3424120f39450c432", "patch": "@@ -23234,7 +23234,8 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n   tree fntype, spec, noex, clone;\n \n   /* Don't instantiate a noexcept-specification from template context.  */\n-  if (processing_template_decl)\n+  if (processing_template_decl\n+      && (!flag_noexcept_type || type_dependent_expression_p (fn)))\n     return true;\n \n   if (DECL_CLONED_FUNCTION_P (fn))\n@@ -23273,10 +23274,10 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t\t\t\t\ttf_warning_or_error, fn,\n \t\t\t\t\t/*function_p=*/false,\n \t\t\t\t\t/*integral_constant_expression_p=*/true);\n+\t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n \t  pop_deferring_access_checks ();\n \t  pop_access_scope (fn);\n \t  pop_tinst_level ();\n-\t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n \t  if (spec == error_mark_node)\n \t    spec = noexcept_false_spec;\n \t}"}, {"sha": "9ceabd3642bc98e9aa0019dcf75fef9bef712fd2", "filename": "gcc/testsuite/g++.dg/template/mem_func_ptr2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f3a877505df9a6e355add3424120f39450c432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f3a877505df9a6e355add3424120f39450c432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr2.C?ref=38f3a877505df9a6e355add3424120f39450c432", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/85356\n+\n+struct A\n+{\n+  A& operator=(int);\n+};\n+\n+void foo(A&(A::*)(int));\n+\n+template<int> void bar()\n+{\n+  foo(&A::operator=);\n+}"}]}