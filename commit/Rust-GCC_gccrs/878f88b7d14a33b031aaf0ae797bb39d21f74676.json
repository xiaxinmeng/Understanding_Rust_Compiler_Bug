{"sha": "878f88b7d14a33b031aaf0ae797bb39d21f74676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4Zjg4YjdkMTRhMzNiMDMxYWFmMGFlNzk3YmIzOWQyMWY3NDY3Ng==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-10T18:26:13Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-10T18:26:13Z"}, "message": "decl.c (match_old_style_init): Use a clearer error message.\n\n2019-08-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* decl.c (match_old_style_init): Use a clearer error message.\n\t* expr.c (gfc_check_assign): Update BOZ checking to provide a stricter\n\tadherence to the Fortran standard.  Use gfc_invalid_boz () to\n\trelax errors into warnings.\n\t* gfortran.h (gfc_isym_id): Add new ids GFC_ISYM_DFLOAT,\n\tGFC_ISYM_FLOAT, GFC_ISYM_REALPART, and GFC_ISYM_SNGL\n\t* intrinsic.c (add_functions): Use new ids to split REAL generic into\n\tREAL, FLOAT, DFLOAT, SNGL, and REALPART generics.\n\t(gfc_intrinsic_func_interface): Allow new intrinsics in an\n\tinitialization expression\n\t* resolve.c (resolve_operator): Deal with BOZ as operands.\n        Use gfc_invalid_boz to allow for errors or warnings via the\n\t-fallow-invalid-boz option.  A BOZ cannot be an operand to an\n\tunary operator.  Both operands of a binary operator cannot be BOZ.\n        For binary operators, convert a BOZ operand into the type and\n\tkind of the other operand for REAL or INTEGER operand.\n\t* trans-intrinsic.c: Use new ids to cause conversions to happen.\n\n2019-08-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* gfortran.dg/boz_8.f90: Adjust error messages.\n\t* gfortran.dg/nan_4.f90: Ditto.\n\t* gfortran.dg/boz_1.f90: Add -fallow-invalid-boz to dg-options,\n\tand test for warnings.\n\t* gfortran.dg/boz_3.f90: Ditto.\n\t* gfortran.dg/boz_4.f90: Ditto.\n\t* gfortran.dg/dec_structure_6.f90: Ditto.\n\t* gfortran.dg/ibits.f90: Ditto.\n\nFrom-SVN: r274257", "tree": {"sha": "a46d0e4c5948327c1c6686fd1403fc7756bd9259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a46d0e4c5948327c1c6686fd1403fc7756bd9259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878f88b7d14a33b031aaf0ae797bb39d21f74676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f88b7d14a33b031aaf0ae797bb39d21f74676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878f88b7d14a33b031aaf0ae797bb39d21f74676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f88b7d14a33b031aaf0ae797bb39d21f74676/comments", "author": null, "committer": null, "parents": [{"sha": "884efbd523b7191edd7763ae8bba8afc96e3c238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884efbd523b7191edd7763ae8bba8afc96e3c238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/884efbd523b7191edd7763ae8bba8afc96e3c238"}], "stats": {"total": 255, "additions": 185, "deletions": 70}, "files": [{"sha": "51dc89328c26cb360d5c74f2948ac913187b2646", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,3 +1,23 @@\n+2019-08-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* decl.c (match_old_style_init): Use a clearer error message.\n+\t* expr.c (gfc_check_assign): Update BOZ checking to provide a stricter\n+\tadherence to the Fortran standard.  Use gfc_invalid_boz () to\n+\trelax errors into warnings.\n+\t* gfortran.h (gfc_isym_id): Add new ids GFC_ISYM_DFLOAT,\n+\tGFC_ISYM_FLOAT, GFC_ISYM_REALPART, and GFC_ISYM_SNGL\n+\t* intrinsic.c (add_functions): Use new ids to split REAL generic into\n+\tREAL, FLOAT, DFLOAT, SNGL, and REALPART generics.\n+\t(gfc_intrinsic_func_interface): Allow new intrinsics in an\n+\tinitialization expression\n+\t* resolve.c (resolve_operator): Deal with BOZ as operands.\n+        Use gfc_invalid_boz to allow for errors or warnings via the\n+\t-fallow-invalid-boz option.  A BOZ cannot be an operand to an\n+\tunary operator.  Both operands of a binary operator cannot be BOZ.\n+        For binary operators, convert a BOZ operand into the type and\n+\tkind of the other operand for REAL or INTEGER operand.\n+\t* trans-intrinsic.c: Use new ids to cause conversions to happen.\n+\n 2019-08-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91359"}, {"sha": "436dd102f3bbcc307fa019422137aac3b60b14f8", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -579,9 +579,10 @@ match_old_style_init (const char *name)\n \t  && nd->var->expr->ts.type != BT_REAL\n \t  && nd->value->expr->ts.type == BT_BOZ)\n \t{\n-\t  gfc_error (\"Mismatch in variable type and BOZ literal constant \"\n-\t\t     \"at %L in an old-style initialization\",\n-\t\t     &nd->value->expr->where);\n+\t  gfc_error (\"BOZ literal constant near %L cannot be assigned to \"\n+\t\t     \"a %qs variable in an old-style initialization\",\n+\t\t     &nd->value->expr->where,\n+\t\t     gfc_typename (&nd->value->expr->ts));\n \t  return MATCH_ERROR;\n \t}\n     }"}, {"sha": "900242dc1aea27043e5fe39ebaee09400d9fd83e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -3641,29 +3641,44 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n       && !gfc_check_conformance (lvalue, rvalue, \"array assignment\"))\n     return false;\n \n-  if (rvalue->ts.type == BT_BOZ && lvalue->ts.type != BT_INTEGER\n-      && lvalue->symtree->n.sym->attr.data\n-      && !gfc_notify_std (GFC_STD_GNU, \"BOZ literal at %L used to \"\n-\t\t\t  \"initialize non-integer variable %qs\",\n-\t\t\t  &rvalue->where, lvalue->symtree->n.sym->name))\n-    return false;\n-  else if (rvalue->ts.type == BT_BOZ && !lvalue->symtree->n.sym->attr.data\n-      && !gfc_notify_std (GFC_STD_GNU, \"BOZ literal at %L outside \"\n-\t\t\t  \"a DATA statement and outside INT/REAL/DBLE/CMPLX\",\n-\t\t\t  &rvalue->where))\n-    return false;\n-\n   /* Handle the case of a BOZ literal on the RHS.  */\n   if (rvalue->ts.type == BT_BOZ)\n     {\n-      /* FIXME BOZ.  Need gfc_invalid_boz() here?.  */\n+      if (lvalue->symtree->n.sym->attr.data)\n+\t{\n+\t  if (lvalue->ts.type == BT_INTEGER\n+\t      && gfc_boz2int (rvalue, lvalue->ts.kind))\n+\t    return true;\n+\n+\t  if (lvalue->ts.type == BT_REAL\n+\t      && gfc_boz2real (rvalue, lvalue->ts.kind))\n+\t    {\n+\t      if (gfc_invalid_boz (\"BOZ literal constant near %L cannot \"\n+\t\t\t\t   \"be assigned to a REAL variable\",\n+\t\t\t\t   &rvalue->where))\n+\t\treturn false;\n+\t      return true;\n+\t    }\n+\t}\n+\n+      if (!lvalue->symtree->n.sym->attr.data\n+\t  && gfc_invalid_boz (\"BOZ literal constant at %L is neither a \"\n+\t\t\t      \"data-stmt-constant nor an actual argument to \"\n+\t\t\t      \"INT, REAL, DBLE, or CMPLX intrinsic function\",\n+\t\t\t      &rvalue->where))\n+\treturn false;\n+\n       if (lvalue->ts.type == BT_INTEGER\n \t  && gfc_boz2int (rvalue, lvalue->ts.kind))\n \treturn true;\n+\n       if (lvalue->ts.type == BT_REAL\n \t  && gfc_boz2real (rvalue, lvalue->ts.kind))\n \treturn true;\n \n+      gfc_error (\"BOZ literal constant near %L cannot be assigned to a \"\n+\t\t \"%qs variable\", &rvalue->where, gfc_typename (&lvalue->ts));\n+ \n       return false;\n     }\n "}, {"sha": "75e5b2f06440a650f75c212655815468bfefbd9b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -423,6 +423,7 @@ enum gfc_isym_id\n   GFC_ISYM_C_SIZEOF,\n   GFC_ISYM_DATE_AND_TIME,\n   GFC_ISYM_DBLE,\n+  GFC_ISYM_DFLOAT,\n   GFC_ISYM_DIGITS,\n   GFC_ISYM_DIM,\n   GFC_ISYM_DOT_PRODUCT,\n@@ -448,6 +449,7 @@ enum gfc_isym_id\n   GFC_ISYM_FGET,\n   GFC_ISYM_FGETC,\n   GFC_ISYM_FINDLOC,\n+  GFC_ISYM_FLOAT,\n   GFC_ISYM_FLOOR,\n   GFC_ISYM_FLUSH,\n   GFC_ISYM_FNUM,\n@@ -573,6 +575,7 @@ enum gfc_isym_id\n   GFC_ISYM_RANGE,\n   GFC_ISYM_RANK,\n   GFC_ISYM_REAL,\n+  GFC_ISYM_REALPART,\n   GFC_ISYM_RENAME,\n   GFC_ISYM_REPEAT,\n   GFC_ISYM_RESHAPE,\n@@ -598,6 +601,7 @@ enum gfc_isym_id\n   GFC_ISYM_SIZE,\n   GFC_ISYM_SLEEP,\n   GFC_ISYM_SIZEOF,\n+  GFC_ISYM_SNGL,\n   GFC_ISYM_SPACING,\n   GFC_ISYM_SPREAD,\n   GFC_ISYM_SQRT,"}, {"sha": "c35ea73f5d9707755aba2e75731cc79ce2609ecf", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -2786,12 +2786,16 @@ add_functions (void)\n \t     gfc_check_real, gfc_simplify_real, gfc_resolve_real,\n \t     a, BT_UNKNOWN, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n+  make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n+\n   /* This provides compatibility with g77.  */\n-  add_sym_1 (\"realpart\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"realpart\", GFC_ISYM_REALPART, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_c, gfc_simplify_realpart, gfc_resolve_realpart,\n \t     a, BT_UNKNOWN, dr, REQUIRED);\n \n-  add_sym_1 (\"float\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n+  make_generic (\"realpart\", GFC_ISYM_REALPART, GFC_STD_F77);\n+\n+  add_sym_1 (\"float\", GFC_ISYM_FLOAT, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_float, gfc_simplify_float, NULL,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n@@ -2802,15 +2806,19 @@ add_functions (void)\n       make_alias (\"floatk\", GFC_STD_GNU);\n     }\n \n-  add_sym_1 (\"dfloat\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n+  make_generic (\"float\", GFC_ISYM_FLOAT, GFC_STD_F77);\n+\n+  add_sym_1 (\"dfloat\", GFC_ISYM_DFLOAT, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_float, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n \n-  add_sym_1 (\"sngl\", GFC_ISYM_REAL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n+  make_generic (\"dfloat\", GFC_ISYM_DFLOAT, GFC_STD_F77);\n+\n+  add_sym_1 (\"sngl\", GFC_ISYM_SNGL, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_sngl, gfc_simplify_sngl, NULL,\n \t     a, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n+  make_generic (\"sngl\", GFC_ISYM_SNGL, GFC_STD_F77);\n \n   add_sym_2 (\"rename\", GFC_ISYM_RENAME, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_rename, NULL, gfc_resolve_rename,\n@@ -4833,7 +4841,8 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n     }\n \n   if ((isym->id == GFC_ISYM_REAL || isym->id == GFC_ISYM_DBLE\n-       || isym->id == GFC_ISYM_CMPLX)\n+       || isym->id == GFC_ISYM_CMPLX || isym->id == GFC_ISYM_FLOAT\n+       || isym->id == GFC_ISYM_SNGL || isym->id == GFC_ISYM_DFLOAT)\n       && gfc_init_expr_flag\n       && !gfc_notify_std (GFC_STD_F2003, \"Function %qs as initialization \"\n \t\t\t  \"expression at %L\", name, &expr->where))"}, {"sha": "d9ad88842718ce5da80c7f04320b031ba38a81e6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -3930,6 +3930,14 @@ resolve_operator (gfc_expr *e)\n     case INTRINSIC_PARENTHESES:\n       if (!gfc_resolve_expr (e->value.op.op1))\n \treturn false;\n+      if (e->value.op.op1\n+\t  && e->value.op.op1->ts.type == BT_BOZ && !e->value.op.op2)\n+\t{\n+\t  gfc_error (\"BOZ literal constant at %L cannot be an operand of \"\n+\t\t     \"unary operator %qs\", &e->value.op.op1->where,\n+\t\t     gfc_op2string (e->value.op.op));\n+\t  return false;\n+\t}\n       break;\n     }\n \n@@ -3939,6 +3947,16 @@ resolve_operator (gfc_expr *e)\n   op2 = e->value.op.op2;\n   dual_locus_error = false;\n \n+  /* op1 and op2 cannot both be BOZ.  */\n+  if (op1 && op1->ts.type == BT_BOZ\n+      && op2 && op2->ts.type == BT_BOZ)\n+    {\n+      gfc_error (\"Operands at %L and %L cannot appear as operands of \"\n+\t\t \"binary operator %qs\", &op1->where, &op2->where,\n+\t\t gfc_op2string (e->value.op.op));\n+      return false;\n+    }\n+\n   if ((op1 && op1->expr_type == EXPR_NULL)\n       || (op2 && op2->expr_type == EXPR_NULL))\n     {\n@@ -4092,6 +4110,36 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n+      /* If op1 is BOZ, then op2 is not!.  Try to convert to type of op2.  */\n+      if (op1->ts.type == BT_BOZ)\n+\t{\n+\t  if (gfc_invalid_boz (\"BOZ literal constant near %L cannot appear as \"\n+\t\t\t\t\"an operand of a relational operator\",\n+\t\t\t\t&op1->where))\n+\t    return false;\n+\n+\t  if (op2->ts.type == BT_INTEGER && !gfc_boz2int (op1, op2->ts.kind))\n+\t    return false;\n+\n+\t  if (op2->ts.type == BT_REAL && !gfc_boz2real (op1, op2->ts.kind))\n+\t    return false;\n+\t}\n+\n+      /* If op2 is BOZ, then op1 is not!.  Try to convert to type of op2. */\n+      if (op2->ts.type == BT_BOZ)\n+\t{\n+\t  if (gfc_invalid_boz (\"BOZ literal constant near %L cannot appear as \"\n+\t\t\t\t\"an operand of a relational operator\",\n+\t\t\t\t&op2->where))\n+\t    return false;\n+\n+\t  if (op1->ts.type == BT_INTEGER && !gfc_boz2int (op2, op1->ts.kind))\n+\t    return false;\n+\n+\t  if (op1->ts.type == BT_REAL && !gfc_boz2real (op2, op1->ts.kind))\n+\t    return false;\n+\t}\n+\n       if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))\n \t{\n \t  gfc_type_convert_binary (e, 1);\n@@ -6432,6 +6480,7 @@ resolve_compcall (gfc_expr* e, const char **name)\n       return false;\n     }\n \n+\n   /* These must not be assign-calls!  */\n   gcc_assert (!e->value.compcall.assign);\n "}, {"sha": "8f64c387258784f806fe3ce462772c98d6255f36", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -9930,9 +9930,13 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_CONVERSION:\n-    case GFC_ISYM_REAL:\n-    case GFC_ISYM_LOGICAL:\n     case GFC_ISYM_DBLE:\n+    case GFC_ISYM_DFLOAT:\n+    case GFC_ISYM_FLOAT:\n+    case GFC_ISYM_LOGICAL:\n+    case GFC_ISYM_REAL:\n+    case GFC_ISYM_REALPART:\n+    case GFC_ISYM_SNGL:\n       gfc_conv_intrinsic_conversion (se, expr);\n       break;\n "}, {"sha": "adf661130bc60432f6522cc76d786bfd54a2e37c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,3 +1,14 @@\n+2019-08-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.dg/boz_8.f90: Adjust error messages.\n+\t* gfortran.dg/nan_4.f90: Ditto.\n+\t* gfortran.dg/boz_1.f90: Add -fallow-invalid-boz to dg-options,\n+\tand test for warnings.\n+\t* gfortran.dg/boz_3.f90: Ditto.\n+\t* gfortran.dg/boz_4.f90: Ditto.\n+\t* gfortran.dg/dec_structure_6.f90: Ditto.\n+\t* gfortran.dg/ibits.f90: Ditto.\n+\n 2019-08-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/91238"}, {"sha": "5f9abb3b2568ab8b5313f6157fb35f6cefa48ee1", "filename": "gcc/testsuite/gfortran.dg/boz_1.f90", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_1.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,25 +1,25 @@\n ! { dg-do run }\n-! { dg-options \"-std=gnu\" }\n+! { dg-options \"-std=gnu -fallow-invalid-boz\" }\n ! Test the boz handling\n program boz\n \n    implicit none\n \n-   integer(1), parameter :: b1 = b'00000001'\n-   integer(2), parameter :: b2 = b'0101010110101010'\n-   integer(4), parameter :: b4 = b'01110000111100001111000011110000'\n+   integer(1), parameter :: b1 = b'00000001'                         ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: b2 = b'0101010110101010'                 ! { dg-warning \"BOZ literal constant\" }\n+   integer(4), parameter :: b4 = b'01110000111100001111000011110000' ! { dg-warning \"BOZ literal constant\" }\n    integer(8), parameter :: &\n-   &  b8 = b'0111000011110000111100001111000011110000111100001111000011110000'\n+   &  b8 = b'0111000011110000111100001111000011110000111100001111000011110000' ! { dg-warning \"BOZ literal constant\" }\n \n-   integer(1), parameter :: o1 = o'12'\n-   integer(2), parameter :: o2 = o'4321'\n-   integer(4), parameter :: o4 = o'43210765'\n-   integer(8), parameter :: o8 = o'1234567076543210'\n+   integer(1), parameter :: o1 = o'12'                ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: o2 = o'4321'              ! { dg-warning \"BOZ literal constant\" }\n+   integer(4), parameter :: o4 = o'43210765'          ! { dg-warning \"BOZ literal constant\" }\n+   integer(8), parameter :: o8 = o'1234567076543210'  ! { dg-warning \"BOZ literal constant\" }\n \n-   integer(1), parameter :: z1 = z'a'\n-   integer(2), parameter :: z2 = z'ab'\n-   integer(4), parameter :: z4 = z'dead'\n-   integer(8), parameter :: z8 = z'deadbeef'\n+   integer(1), parameter :: z1 = z'a'                 ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: z2 = z'ab'                ! { dg-warning \"BOZ literal constant\" }\n+   integer(4), parameter :: z4 = z'dead'              ! { dg-warning \"BOZ literal constant\" }\n+   integer(8), parameter :: z8 = z'deadbeef'          ! { dg-warning \"BOZ literal constant\" }\n \n    if (z1 /= 10_1) STOP 1\n    if (z2 /= 171_2) STOP 2"}, {"sha": "b3766cc818db59c6429c7e6c95550a73830a5932", "filename": "gcc/testsuite/gfortran.dg/boz_3.f90", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_3.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,24 +1,27 @@\n ! { dg-do run }\n-! { dg-options \"-std=gnu\" }\n+! { dg-options \"-std=gnu -fallow-invalid-boz\" }\n+!\n ! Test that the BOZ constant on the RHS, which are of different KIND than\n ! the LHS, are correctly converted.\n !\n program boz\n \n    implicit none\n \n-   integer(1), parameter :: b1 = b'000000000001111'\n-   integer(2), parameter :: b2 = b'00000000000000000111000011110000'\n+   integer(1), parameter :: &\n+   &  b1 = b'000000000001111'                   ! { dg-warning \"BOZ literal constant at\" }\n+   integer(2), parameter :: &\n+   &  b2 = b'00000000000000000111000011110000'  ! { dg-warning \"BOZ literal constant at\" }\n    integer(4), parameter :: &\n-   &  b4 = b'0000000000000000000000000000000001110000111100001111000011110000'\n+   &  b4 = b'0000000000000000000000000000000001110000111100001111000011110000'  ! { dg-warning \"BOZ literal constant at\" }\n \n-   integer(1), parameter :: o1 = o'0012'\n-   integer(2), parameter :: o2 = o'0004321'\n-   integer(4), parameter :: o4 = o'0000000043210765'\n+   integer(1), parameter :: o1 = o'0012'              ! { dg-warning \"BOZ literal constant at\" }\n+   integer(2), parameter :: o2 = o'0004321'           ! { dg-warning \"BOZ literal constant at\" }\n+   integer(4), parameter :: o4 = o'0000000043210765'  ! { dg-warning \"BOZ literal constant at\" }\n \n-   integer(1), parameter :: z1 = z'0a'\n-   integer(2), parameter :: z2 = z'00ab'\n-   integer(4), parameter :: z4 = z'0000dead'\n+   integer(1), parameter :: z1 = z'0a'       ! { dg-warning \"BOZ literal constant at\" }\n+   integer(2), parameter :: z2 = z'00ab'     ! { dg-warning \"BOZ literal constant at\" }\n+   integer(4), parameter :: z4 = z'0000dead' ! { dg-warning \"BOZ literal constant at\" }\n \n    if (b1 /= 15_1) STOP 1\n    if (b2 /= 28912_2) STOP 2"}, {"sha": "fbde4537ccc91c3233f9bb7e1bd305bb036c7554", "filename": "gcc/testsuite/gfortran.dg/boz_4.f90", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_4.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,20 +1,16 @@\n ! { dg-do compile }\n-! Test that the conversion of a BOZ constant that is too large for the\n-! integer variable is caught by the compiler.\n-!\n-! In F2008 and F2018, overflow cannot happen.\n+! { dg-options \"-fallow-invalid-boz\" }\n !\n program boz\n    implicit none\n-   integer(1), parameter :: b1 = b'0101010110101010'\n-   integer(2), parameter :: b2 = b'01110000111100001111000011110000'\n+   integer(1), parameter :: b1 = b'0101010110101010'                    ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: b2 = b'01110000111100001111000011110000'    ! { dg-warning \"BOZ literal constant\" }\n    integer(4), parameter :: &\n-   &  b4 = b'0111000011110000111100001111000011110000111100001111000011110000'\n-   integer(1), parameter :: o1 = o'1234567076543210'\n-   integer(2), parameter :: o2 = o'1234567076543210'\n-   integer(4), parameter :: o4 = o'1234567076543210'\n-   integer(1), parameter :: z1 = z'deadbeef'\n-   integer(2), parameter :: z2 = z'deadbeef'\n-   integer(4), parameter :: z4 = z'deadbeeffeed'\n+   &  b4 = b'0111000011110000111100001111000011110000111100001111000011110000' ! { dg-warning \"BOZ literal constant\" }\n+   integer(1), parameter :: o1 = o'1234567076543210' ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: o2 = o'1234567076543210' ! { dg-warning \"BOZ literal constant\" }\n+   integer(4), parameter :: o4 = o'1234567076543210' ! { dg-warning \"BOZ literal constant\" }\n+   integer(1), parameter :: z1 = z'deadbeef'         ! { dg-warning \"BOZ literal constant\" }\n+   integer(2), parameter :: z2 = z'deadbeef'         ! { dg-warning \"BOZ literal constant\" }\n+   integer(4), parameter :: z4 = z'deadbeeffeed'     ! { dg-warning \"BOZ literal constant\" }\n end program boz\n-! { dg-prune-output \"BOZ literal at\" }"}, {"sha": "b1d966f530d73e45ef1109236ffc20fd0c08633d", "filename": "gcc/testsuite/gfortran.dg/boz_8.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -10,8 +10,9 @@\n !\n real :: r\n integer :: i\n-data i/z'111'/, r/z'4455'/ ! { dg-error \"BOZ literal at .1. used to initialize non-integer variable 'r'\" }\n-r = z'FFFF' ! { dg-error \"a DATA statement value\" }\n-i = z'4455' ! { dg-error \"a DATA statement value\" }\n+data i/z'111'/\n+data r/z'4455'/   ! { dg-error \"BOZ literal constant\" }\n+r = z'FFFF'       ! { dg-error \"BOZ literal constant\" }\n+i = z'4455'       ! { dg-error \"BOZ literal constant\" }\n r = real(z'FFFFFFFFF')\n end"}, {"sha": "c4cb7e30f8bbfa4bce9dbb894ed9c95294e62384", "filename": "gcc/testsuite/gfortran.dg/dec_structure_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_6.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-fdec-structure\" }\n+! { dg-options \"-fdec-structure -fallow-invalid-boz\" }\n !\n ! Test old-style CLIST initializers in STRUCTURE.\n !\n@@ -21,7 +21,7 @@ subroutine aborts (s)\n   integer   o(as) /as*9/    ! ok, parameter array spec\n   integer   p(2,2) /1,2,3,4/! ok\n   real      q(3) /1_2,3.5,2.4E-12_8/ ! ok, with some implicit conversions\n-  integer :: canary = z'3D3D3D3D'\n+  integer :: canary = z'3D3D3D3D'    ! { dg-warning \"BOZ literal constant\" }\n end structure\n \n record /s8/ r8"}, {"sha": "c817c483281622b5c56b5ae55eaa2bf569008e5f", "filename": "gcc/testsuite/gfortran.dg/ibits.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -1,8 +1,10 @@\n ! { dg-do run }\n+! { dg-options \"-fallow-invalid-boz\" }\n ! Test that the mask is properly converted to the kind type of j in ibits.\n program ibits_test\n   implicit none\n-  integer(8), parameter :: n = z'00000000FFFFFFFF' ! { dg-warning \"BOZ literal at .1. outside a DATA statement\" }\n+  integer(8), parameter :: &\n+  &  n = z'00000000FFFFFFFF' ! { dg-warning \"BOZ literal constant\" }\n   integer(8) i,j,k,m\n   j = 1\n   do i=1,70"}, {"sha": "b4c1f71b9088c611ce63a74b54e339c6f8bd72fe", "filename": "gcc/testsuite/gfortran.dg/nan_4.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f88b7d14a33b031aaf0ae797bb39d21f74676/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_4.f90?ref=878f88b7d14a33b031aaf0ae797bb39d21f74676", "patch": "@@ -9,8 +9,8 @@\n !\n program test\n   implicit none\n-  real(4), parameter :: r0 = z'FFFFFFFF'\n+  real(4), parameter :: r0 = z'FFFFFFFF' ! { dg-warning \"BOZ literal constant\" }\n   real(4) r\n-  data r/z'FFFFFFFF'/\n-  r = z'FFFFFFFF'       ! { dg-warning \"neither a DATA statement value\" }\n+  data r/z'FFFFFFFF'/   ! { dg-warning \"BOZ literal constant\" }\n+  r = z'FFFFFFFF'       ! { dg-warning \"BOZ literal constant\" }\n end program test"}]}