{"sha": "f47df2af313d2ce7f9149149010a142c2237beda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3ZGYyYWYzMTNkMmNlN2Y5MTQ5MTQ5MDEwYTE0MmMyMjM3YmVkYQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-12-14T13:05:28Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-01-08T16:43:24Z"}, "message": "IBM Z: Introduce __LONG_DOUBLE_VX__ macro\n\nGive end users the opportunity to find out whether long doubles are\nstored in floating-point register pairs or in vector registers, so that\nthey could fine-tune their asm statements.\n\ngcc/ChangeLog:\n\n2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390-c.c (s390_def_or_undef_macro): Accept\n\tcallables instead of mask values.\n\t(struct target_flag_set_p): New predicate.\n\t(s390_cpu_cpp_builtins_internal): Define or undefine\n\t__LONG_DOUBLE_VX__ macro.\n\n2020-12-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/vector/long-double-vx-macro-off-on.c: New test.\n\t* gcc.target/s390/vector/long-double-vx-macro-on-off.c: New test.", "tree": {"sha": "2cb0a47b36c0630ef29ade877e97d74ac689224a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cb0a47b36c0630ef29ade877e97d74ac689224a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f47df2af313d2ce7f9149149010a142c2237beda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47df2af313d2ce7f9149149010a142c2237beda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47df2af313d2ce7f9149149010a142c2237beda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47df2af313d2ce7f9149149010a142c2237beda/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98546324c799c5c2d00491ab64e8dee3c3b0120e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98546324c799c5c2d00491ab64e8dee3c3b0120e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98546324c799c5c2d00491ab64e8dee3c3b0120e"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "a5f5f56311ad86d89d4793095c82fea7c6798464", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=f47df2af313d2ce7f9149149010a142c2237beda", "patch": "@@ -294,18 +294,18 @@ s390_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n /* Helper function that defines or undefines macros.  If SET is true, the macro\n    MACRO_DEF is defined.  If SET is false, the macro MACRO_UNDEF is undefined.\n    Nothing is done if SET and WAS_SET have the same value.  */\n+template <typename F>\n static void\n-s390_def_or_undef_macro (cpp_reader *pfile,\n-\t\t\t unsigned int mask,\n+s390_def_or_undef_macro (cpp_reader *pfile, F is_set,\n \t\t\t const struct cl_target_option *old_opts,\n \t\t\t const struct cl_target_option *new_opts,\n \t\t\t const char *macro_def, const char *macro_undef)\n {\n   bool was_set;\n   bool set;\n \n-  was_set = (!old_opts) ? false : old_opts->x_target_flags & mask;\n-  set = new_opts->x_target_flags & mask;\n+  was_set = (!old_opts) ? false : is_set (old_opts);\n+  set = is_set (new_opts);\n   if (was_set == set)\n     return;\n   if (set)\n@@ -314,42 +314,59 @@ s390_def_or_undef_macro (cpp_reader *pfile,\n     cpp_undef (pfile, macro_undef);\n }\n \n+struct target_flag_set_p\n+{\n+  target_flag_set_p (unsigned int mask) : m_mask (mask) {}\n+\n+  bool\n+  operator() (const struct cl_target_option *opts) const\n+  {\n+    return opts->x_target_flags & m_mask;\n+  }\n+\n+  unsigned int m_mask;\n+};\n+\n /* Internal function to either define or undef the appropriate system\n    macros.  */\n static void\n s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n \t\t\t\tstruct cl_target_option *opts,\n \t\t\t\tconst struct cl_target_option *old_opts)\n {\n-  s390_def_or_undef_macro (pfile, MASK_OPT_HTM, old_opts, opts,\n-\t\t\t   \"__HTM__\", \"__HTM__\");\n-  s390_def_or_undef_macro (pfile, MASK_OPT_VX, old_opts, opts,\n-\t\t\t   \"__VX__\", \"__VX__\");\n-  s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t   \"__VEC__=10303\", \"__VEC__\");\n-  s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t   \"__vector=__attribute__((vector_size(16)))\",\n+  s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_OPT_HTM), old_opts,\n+\t\t\t   opts, \"__HTM__\", \"__HTM__\");\n+  s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_OPT_VX), old_opts,\n+\t\t\t   opts, \"__VX__\", \"__VX__\");\n+  s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_ZVECTOR), old_opts,\n+\t\t\t   opts, \"__VEC__=10303\", \"__VEC__\");\n+  s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_ZVECTOR), old_opts,\n+\t\t\t   opts, \"__vector=__attribute__((vector_size(16)))\",\n \t\t\t   \"__vector__\");\n-  s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t   \"__bool=__attribute__((s390_vector_bool)) unsigned\",\n-\t\t\t   \"__bool\");\n+  s390_def_or_undef_macro (\n+      pfile, target_flag_set_p (MASK_ZVECTOR), old_opts, opts,\n+      \"__bool=__attribute__((s390_vector_bool)) unsigned\", \"__bool\");\n   {\n     char macro_def[64];\n     gcc_assert (s390_arch != PROCESSOR_NATIVE);\n     sprintf (macro_def, \"__ARCH__=%d\", processor_table[s390_arch].arch_level);\n     cpp_undef (pfile, \"__ARCH__\");\n     cpp_define (pfile, macro_def);\n   }\n+  s390_def_or_undef_macro (\n+      pfile,\n+      [] (const struct cl_target_option *opts) { return TARGET_VXE_P (opts); },\n+      old_opts, opts, \"__LONG_DOUBLE_VX__\", \"__LONG_DOUBLE_VX__\");\n \n   if (!flag_iso)\n     {\n-      s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t       \"__VECTOR_KEYWORD_SUPPORTED__\",\n+      s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_ZVECTOR),\n+\t\t\t       old_opts, opts, \"__VECTOR_KEYWORD_SUPPORTED__\",\n \t\t\t       \"__VECTOR_KEYWORD_SUPPORTED__\");\n-      s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t       \"vector=vector\", \"vector\");\n-      s390_def_or_undef_macro (pfile, MASK_ZVECTOR, old_opts, opts,\n-\t\t\t       \"bool=bool\", \"bool\");\n+      s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_ZVECTOR),\n+\t\t\t       old_opts, opts, \"vector=vector\", \"vector\");\n+      s390_def_or_undef_macro (pfile, target_flag_set_p (MASK_ZVECTOR),\n+\t\t\t       old_opts, opts, \"bool=bool\", \"bool\");\n       if (TARGET_ZVECTOR_P (opts->x_target_flags) && __vector_keyword == NULL)\n \t{\n \t  __vector_keyword = get_identifier (\"__vector\");"}, {"sha": "2d67679bb111f7da09ba7d40b0e16413d2aa911a", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-vx-macro-off-on.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-off-on.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-off-on.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-off-on.c?ref=f47df2af313d2ce7f9149149010a142c2237beda", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target target_attribute } */\n+/* { dg-options \"-march=z14\" } */\n+#if !defined(__LONG_DOUBLE_VX__)\n+#error\n+#endif\n+\n+#pragma GCC target(\"arch=zEC12\")\n+#if defined(__LONG_DOUBLE_VX__)\n+#error\n+#endif"}, {"sha": "6f264313408d5b90441161232aa98ff7ac8ae1c8", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-vx-macro-on-off.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-on-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47df2af313d2ce7f9149149010a142c2237beda/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-on-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-vx-macro-on-off.c?ref=f47df2af313d2ce7f9149149010a142c2237beda", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target target_attribute } */\n+/* { dg-options \"-march=z13\" } */\n+#if defined(__LONG_DOUBLE_VX__)\n+#error\n+#endif\n+\n+#pragma GCC target(\"arch=z15\")\n+#if !defined(__LONG_DOUBLE_VX__)\n+#error\n+#endif"}]}