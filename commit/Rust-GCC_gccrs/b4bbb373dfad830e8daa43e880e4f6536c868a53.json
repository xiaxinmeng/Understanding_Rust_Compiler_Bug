{"sha": "b4bbb373dfad830e8daa43e880e4f6536c868a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRiYmIzNzNkZmFkODMwZThkYWE0M2U4ODBlNGY2NTM2Yzg2OGE1Mw==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2020-09-25T11:17:46Z"}, "committer": {"name": "Daniel Hellstrom", "email": "daniel@gaisler.com", "date": "2021-09-16T11:05:47Z"}, "message": "sparc: Treat more instructions as load or store in errata workarounds\n\nCheck the attribute of instruction to determine if it performs a store\nor load operation. This more generic approach sees the last instruction\nin the GOTdata_op model as a potential load and treats the memory barrier\nas a potential store instruction.\n\ngcc/ChangeLog:\n\n\t* config/sparc/sparc.c (store_insn_p): Add predicate for store\n\tattributes.\n\t(load_insn_p): Add predicate for load attributes.\n\t(sparc_do_work_around_errata): Use new predicates.", "tree": {"sha": "0b8cde799a46c98081b7fb309bcf5599549be1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8cde799a46c98081b7fb309bcf5599549be1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4bbb373dfad830e8daa43e880e4f6536c868a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4bbb373dfad830e8daa43e880e4f6536c868a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4bbb373dfad830e8daa43e880e4f6536c868a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4bbb373dfad830e8daa43e880e4f6536c868a53/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daniel-hellstrom", "id": 1167836, "node_id": "MDQ6VXNlcjExNjc4MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1167836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-hellstrom", "html_url": "https://github.com/daniel-hellstrom", "followers_url": "https://api.github.com/users/daniel-hellstrom/followers", "following_url": "https://api.github.com/users/daniel-hellstrom/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-hellstrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-hellstrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-hellstrom/subscriptions", "organizations_url": "https://api.github.com/users/daniel-hellstrom/orgs", "repos_url": "https://api.github.com/users/daniel-hellstrom/repos", "events_url": "https://api.github.com/users/daniel-hellstrom/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-hellstrom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e0dd61e4ffa8787ef8fe7449dde36cc970653f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e0dd61e4ffa8787ef8fe7449dde36cc970653f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e0dd61e4ffa8787ef8fe7449dde36cc970653f"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "49cee356a836c1723937719cba87bd0571c2c0ed", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bbb373dfad830e8daa43e880e4f6536c868a53/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bbb373dfad830e8daa43e880e4f6536c868a53/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b4bbb373dfad830e8daa43e880e4f6536c868a53", "patch": "@@ -1045,6 +1045,43 @@ atomic_insn_for_leon3_p (rtx_insn *insn)\n     }\n }\n \n+/* True if INSN is a store instruction.  */\n+\n+static bool\n+store_insn_p (rtx_insn *insn)\n+{\n+  if (GET_CODE (PATTERN (insn)) != SET)\n+    return false;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_STORE:\n+    case TYPE_FPSTORE:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* True if INSN is a load instruction.  */\n+\n+static bool\n+load_insn_p (rtx_insn *insn)\n+{\n+  if (GET_CODE (PATTERN (insn)) != SET)\n+    return false;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD:\n+    case TYPE_SLOAD:\n+    case TYPE_FPLOAD:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* We use a machine specific pass to enable workarounds for errata.\n \n    We need to have the (essentially) final form of the insn stream in order\n@@ -1105,9 +1142,7 @@ sparc_do_work_around_errata (void)\n \t instruction at branch target.  */\n       if (sparc_fix_ut700\n \t  && NONJUMP_INSN_P (insn)\n-\t  && (set = single_set (insn)) != NULL_RTX\n-\t  && mem_ref (SET_SRC (set))\n-\t  && REG_P (SET_DEST (set)))\n+\t  && load_insn_p (insn))\n \t{\n \t  if (jump && jump_to_label_p (jump))\n \t    {\n@@ -1212,7 +1247,7 @@ sparc_do_work_around_errata (void)\n       if (sparc_fix_b2bst\n \t  && NONJUMP_INSN_P (insn)\n \t  && (set = single_set (insn)) != NULL_RTX\n-\t  && MEM_P (SET_DEST (set)))\n+\t  && store_insn_p (insn))\n \t{\n \t  /* Sequence B begins with a double-word store.  */\n \t  bool seq_b = GET_MODE_SIZE (GET_MODE (SET_DEST (set))) == 8;\n@@ -1245,8 +1280,7 @@ sparc_do_work_around_errata (void)\n \t      if (seq_b)\n \t\t{\n \t\t  /* Add NOP if followed by a store.  */\n-\t\t  if ((set = single_set (after)) != NULL_RTX\n-\t\t      && MEM_P (SET_DEST (set)))\n+\t\t  if (store_insn_p (after))\n \t\t    insert_nop = true;\n \n \t\t  /* Otherwise it is ok.  */\n@@ -1268,8 +1302,7 @@ sparc_do_work_around_errata (void)\n \n \t      /* Add NOP if third instruction is a store.  */\n \t      if (i == 1\n-\t\t  && (set = single_set (after)) != NULL_RTX\n-\t\t  && MEM_P (SET_DEST (set)))\n+\t\t  && store_insn_p (after))\n \t\tinsert_nop = true;\n \t    }\n \t}"}]}