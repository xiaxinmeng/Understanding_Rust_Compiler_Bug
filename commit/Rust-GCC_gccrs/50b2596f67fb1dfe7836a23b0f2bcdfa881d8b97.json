{"sha": "50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMjU5NmY2N2ZiMWRmZTc4MzZhMjNiMGYyYmNkZmE4ODFkOGI5Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-08T18:30:27Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-08T18:30:27Z"}, "message": "Warning fixes:\n\n\t* Makefile.in (varasm.o): Depend on dbxout.h.\n\t(cse.o): Depend on toplev.h and output.h.\n\t(gcse.o): Depend on output.h.\n\t* mips.c: Include system.h and toplev.h and remove redundant code.\n\tInclude output.h after tree.h so all its prototypes get activated.\n\t* mips.md (table_jump): Remove unused variable `dest'.\n\t* sparc.h: Add prototype for `v8plus_regcmp_op'.\n\t* crtstuff.c (fini_dummy, init_dummy): Mark function definitions\n\twith __attribute__ ((__unused__)).\n\t(__frame_dummy): Provide prototype before use, wrap it with\n\tEH_FRAME_SECTION_ASM_OP.\n\t* cse.c: Move inclusion of <setjmp.h> above local headers.\n  \tInclude toplev.h and output.h.\n\t* dbxout.h: Add prototype for `dbxout_begin_function'.\n\t* final.c (final_scan_insn): Wrap variable `max_skip' in macro\n\tASM_OUTPUT_MAX_SKIP_ALIGN.\n\t* gcse.c: Include system.h and output.h.\n\t(dump_cuid_table, dump_rd_table, dump_cprop_data, dump_pre_data):\n\tMake extern instead of static.\n\t(compute_can_copy): Only declare variables `reg' and `insn' when\n \tAVOID_CCMODE_COPIES is not defined.\n\t(record_set_info): Mark parameter `setter' with ATTRIBUTE_UNUSED.\n\t(hash_scan_clobber): Likewise for `x' and `insn'.\n\t(hash_scan_call): Likewise.\n\t(record_last_set_info): Likewise for `setter'.\n\t(mark_call): Likewise for `pat'.\n\t(pre_insert_insn): Wrap variable `note' in macro HAVE_cc0.\n\t* libgcc2.c (__bb_init_prg): Replace bzero with memset and fix the\n \tlength parameter so that it multiplies the number of elements by\n \tthe sizeof(element).\n\t* output.h: Add prototype for `weak_finish'.\n\t* recog.h: Likewise for `validate_replace_src'.\n\t* rtl.h: Likewise for `optimize_save_area_alloca',\n \t`fix_sched_param', `purge_addressof', `gcse_main',\n \t`regmove_optimize', `dbr_schedule', `branch_prob' and\n \t`end_branch_prob'.\n\t* toplev.h: Likewise for `set_float_handler' and\n \t`output_quoted_string'.\n\t* varasm.c: Include dbxout.h.\n\nFrom-SVN: r20351", "tree": {"sha": "1b29c35cca4b350da96a455cc884f1ada931c3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b29c35cca4b350da96a455cc884f1ada931c3b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/comments", "author": null, "committer": null, "parents": [{"sha": "33d7a5215db14185db24d6c21708d00468de8c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d7a5215db14185db24d6c21708d00468de8c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d7a5215db14185db24d6c21708d00468de8c38"}], "stats": {"total": 188, "additions": 133, "deletions": 55}, "files": [{"sha": "5800f6233241a95cb1c6828e6760bb1d333f55c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -1,3 +1,58 @@\n+Mon Jun  8 20:57:40 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (varasm.o): Depend on dbxout.h.\n+\t(cse.o): Depend on toplev.h and output.h.\n+\t(gcse.o): Depend on output.h.\n+\n+\t* mips.c: Include system.h and toplev.h and remove redundant code.\n+\tInclude output.h after tree.h so all its prototypes get activated.\n+\t* mips.md (table_jump): Remove unused variable `dest'.\n+\n+\t* sparc.h: Add prototype for `v8plus_regcmp_op'.\n+\n+\t* crtstuff.c (fini_dummy, init_dummy): Mark function definitions\n+\twith __attribute__ ((__unused__)).\n+\t(__frame_dummy): Provide prototype before use, wrap it with\n+\tEH_FRAME_SECTION_ASM_OP.\n+\n+\t* cse.c: Move inclusion of <setjmp.h> above local headers.\n+  \tInclude toplev.h and output.h.\n+\n+\t* dbxout.h: Add prototype for `dbxout_begin_function'.\n+\n+\t* final.c (final_scan_insn): Wrap variable `max_skip' in macro\n+\tASM_OUTPUT_MAX_SKIP_ALIGN.\n+\n+\t* gcse.c: Include system.h and output.h.\n+\t(dump_cuid_table, dump_rd_table, dump_cprop_data, dump_pre_data):\n+\tMake extern instead of static.\n+\t(compute_can_copy): Only declare variables `reg' and `insn' when\n+ \tAVOID_CCMODE_COPIES is not defined.\n+\t(record_set_info): Mark parameter `setter' with ATTRIBUTE_UNUSED.\n+\t(hash_scan_clobber): Likewise for `x' and `insn'.\n+\t(hash_scan_call): Likewise.\n+\t(record_last_set_info): Likewise for `setter'.\n+\t(mark_call): Likewise for `pat'.\n+\t(pre_insert_insn): Wrap variable `note' in macro HAVE_cc0.\n+\n+\t* libgcc2.c (__bb_init_prg): Replace bzero with memset and fix the\n+ \tlength parameter so that it multiplies the number of elements by\n+ \tthe sizeof(element).\n+\n+\t* output.h: Add prototype for `weak_finish'.\n+\n+\t* recog.h: Likewise for `validate_replace_src'.\n+\n+\t* rtl.h: Likewise for `optimize_save_area_alloca',\n+ \t`fix_sched_param', `purge_addressof', `gcse_main',\n+ \t`regmove_optimize', `dbr_schedule', `branch_prob' and\n+ \t`end_branch_prob'.\n+\n+\t* toplev.h: Likewise for `set_float_handler' and\n+ \t`output_quoted_string'.\n+\n+\t* varasm.c: Include dbxout.h.\n+\n Mon Jun  8 18:12:06 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* mips.c (mips_secondary_reload_class): Use gp_reg_p instead of"}, {"sha": "f60452730194204fcf23d0acdb3dcd05542e0170", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -1364,7 +1364,7 @@ rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n \n varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n    function.h defaults.h insn-codes.h expr.h hard-reg-set.h regs.h \\\n-   xcoffout.h output.h c-pragma.h toplev.h except.h\n+   xcoffout.h output.h c-pragma.h toplev.h except.h dbxout.h\n function.o : function.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h\n@@ -1413,9 +1413,9 @@ jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h regs.h \\\n stupid.o : stupid.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h\n \n cse.o : cse.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h \\\n-   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h\n+   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h toplev.h output.h\n gcse.o : gcse.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h \\\n-   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h basic-block.h\n+   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h basic-block.h output.h\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\\n    gcov-io.h $(TREE_H) output.h regs.h toplev.h\n loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h loop.h insn-config.h \\"}, {"sha": "35b4d505faf8fe488eebff207bfe5729f130cd00", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -27,14 +27,8 @@ Boston, MA 02111-1307, USA.  */\n    be replaced with something better designed.  */\n \n #include \"config.h\"\n-\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n+#include \"system.h\"\n+#include <signal.h>\n \n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -46,25 +40,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"insn-codes.h\"\n #include \"recog.h\"\n-#include \"output.h\"\n+#include \"toplev.h\"\n \n #undef MAX\t\t\t/* sys/param.h may also define these */\n #undef MIN\n \n-#include <signal.h>\n-#include <sys/types.h>\n-#include <sys/file.h>\n-#include <ctype.h>\n #include \"tree.h\"\n #include \"expr.h\"\n #include \"flags.h\"\n #include \"reload.h\"\n-\n-#ifndef R_OK\n-#define R_OK 4\n-#define W_OK 2\n-#define X_OK 1\n-#endif\n+#include \"output.h\"\n \n #if defined(USG) || !defined(HAVE_STAB_H)\n #include \"gstab.h\"  /* If doing DBX on sysV, use our own stab.h.  */\n@@ -78,19 +63,8 @@ Boston, MA 02111-1307, USA.  */\n #define STAB_CODE_TYPE int\n #endif\n \n-extern void   abort ();\n-extern int    atoi ();\n-extern char  *getenv ();\n extern char  *mktemp ();\n- \n-extern rtx    adj_offsettable_operand ();\n-extern rtx    copy_to_reg ();\n-extern void   error ();\n extern tree   lookup_name ();\n-extern void   pfatal_with_name ();\n-extern void   warning ();\n-\n-extern FILE  *asm_out_file;\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order"}, {"sha": "00f0461da18066956e73e831f0d4c57a03b373ed", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -8681,8 +8681,6 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\"\n   \"\n {\n-  rtx dest;\n-\n   if (operands[0])\t\t/* eliminate unused code warnings */\n     {\n       if (TARGET_MIPS16)"}, {"sha": "44a6bc200de087f5f5f0c54d5ccbae6cbc743009", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -3261,6 +3261,7 @@ extern int symbolic_operand ();\n extern int text_segment_operand ();\n extern int ultrasparc_adjust_cost ();\n extern int uns_small_int ();\n+extern int v8plus_regcmp_op ();\n extern int v8plus_regcmp_p ();\n extern int v9_regcmp_op ();\n extern int v9_regcmp_p ();"}, {"sha": "8e50ac740d7150e72a6812f1378b993af3acdc15", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -150,7 +150,7 @@ __do_global_dtors_aux ()\n \n /* Stick a call to __do_global_dtors_aux into the .fini section.  */\n \n-static void\n+static void __attribute__ ((__unused__))\n fini_dummy ()\n {\n   asm (FINI_SECTION_ASM_OP);\n@@ -173,7 +173,7 @@ frame_dummy ()\n   __register_frame_info (__EH_FRAME_BEGIN__, &object);\n }\n \n-static void\n+static void __attribute__ ((__unused__))\n init_dummy ()\n {\n   asm (INIT_SECTION_ASM_OP);\n@@ -335,7 +335,7 @@ __do_global_ctors_aux ()\n \n /* Stick a call to __do_global_ctors_aux into the .init section.  */\n \n-static void\n+static void __attribute__ ((__unused__))\n init_dummy ()\n {\n   asm (INIT_SECTION_ASM_OP);\n@@ -407,6 +407,9 @@ asm (TEXT_SECTION_ASM_OP);\n    not an SVR4-style .init section.  __do_global_ctors can be non-static\n    in this case because we protect it with -hidden_symbol.  */\n static func_ptr __CTOR_END__[];\n+#ifdef EH_FRAME_SECTION_ASM_OP\n+extern void __frame_dummy (void);\n+#endif\n void\n __do_global_ctors ()\n {"}, {"sha": "6d2e8c9c6e73a744c4a88848e91c507f33b7932b", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n /* stdio.h must precede rtl.h for FFS.  */\n #include \"system.h\"\n+#include <setjmp.h>\n \n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -31,8 +32,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n-\n-#include <setjmp.h>\n+#include \"toplev.h\"\n+#include \"output.h\"\n \n /* The basic idea of common subexpression elimination is to go\n    through the code, keeping a record of expressions that would"}, {"sha": "c208686e0abd8f0d233cb8c42b03ccd2e5cc54ef", "filename": "gcc/dbxout.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -27,3 +27,4 @@ extern void dbxout_resume_previous_source_file\tPROTO ((void));\n extern void dbxout_symbol\t\tPROTO ((tree, int));\n extern void dbxout_function\t\tPROTO ((tree));\n extern void dbxout_source_line\t\tPROTO ((FILE *, char*, int));\n+extern void dbxout_begin_function\tPROTO ((tree));"}, {"sha": "79990bc2356f018d5bea713c8bf96bbcbaf3a5be", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -2276,7 +2276,9 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       if (CODE_LABEL_NUMBER (insn) <= max_labelno)\n \t{\n \t  int align = LABEL_TO_ALIGNMENT (insn);\n+#ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n \t  int max_skip = LABEL_TO_MAX_SKIP (insn);\n+#endif\n \n \t  if (align && NEXT_INSN (insn))\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN"}, {"sha": "eca12422c8901183ed4352b5e729b8a795d32744", "filename": "gcc/gcse.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -141,7 +141,7 @@ yyy\n \n #include \"config.h\"\n /* Must precede rtl.h for FFS.  */\n-#include <stdio.h>\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -151,6 +151,7 @@ yyy\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"basic-block.h\"\n+#include \"output.h\"\n \n #include \"obstack.h\"\n #define obstack_chunk_alloc gmalloc\n@@ -541,7 +542,7 @@ static char *grealloc                 PROTO ((char *, unsigned int));\n static char *gcse_alloc               PROTO ((unsigned long));\n static void alloc_gcse_mem            PROTO ((rtx));\n static void free_gcse_mem             PROTO ((void));\n-static void dump_cuid_table           PROTO ((FILE *));\n+extern void dump_cuid_table           PROTO ((FILE *));\n \n static void alloc_reg_set_mem         PROTO ((int));\n static void free_reg_set_mem          PROTO ((void));\n@@ -590,7 +591,7 @@ static void free_rd_mem               PROTO ((void));\n static void compute_kill_rd           PROTO ((void));\n static void handle_rd_kill_set        PROTO ((rtx, int, int));\n static void compute_rd                PROTO ((void));\n-static void dump_rd_table             PROTO ((FILE *, char *, sbitmap *));\n+extern void dump_rd_table             PROTO ((FILE *, char *, sbitmap *));\n \n static void alloc_avail_expr_mem      PROTO ((int, int));\n static void free_avail_expr_mem       PROTO ((void));\n@@ -610,7 +611,7 @@ static int one_classic_gcse_pass      PROTO ((rtx, int));\n \n static void alloc_cprop_mem           PROTO ((int, int));\n static void free_cprop_mem            PROTO ((void));\n-static void dump_cprop_data           PROTO ((FILE *));\n+extern void dump_cprop_data           PROTO ((FILE *));\n static void compute_transp            PROTO ((rtx, int, sbitmap *, int));\n static void compute_cprop_local_properties PROTO ((void));\n static void compute_cprop_avinout     PROTO ((void));\n@@ -624,7 +625,7 @@ static int one_cprop_pass             PROTO ((rtx, int));\n \n static void alloc_pre_mem             PROTO ((int, int));\n static void free_pre_mem              PROTO ((void));\n-static void dump_pre_data             PROTO ((FILE *));\n+extern void dump_pre_data             PROTO ((FILE *));\n static void compute_pre_local_properties PROTO ((void));\n static void compute_pre_avinout       PROTO ((void));\n static void compute_pre_antinout      PROTO ((void));\n@@ -786,7 +787,9 @@ static void\n compute_can_copy ()\n {\n   int i;\n+#ifndef AVOID_CCMODE_COPIES\n   rtx reg,insn;\n+#endif\n   char *free_point = (char *) oballoc (1);\n \n   bzero (can_copy_p, NUM_MACHINE_MODES);\n@@ -918,7 +921,7 @@ free_gcse_mem ()\n   free (mem_set_in_block);\n }\n \n-static void\n+void\n dump_cuid_table (file)\n      FILE *file;\n {\n@@ -1014,7 +1017,7 @@ static rtx record_set_insn;\n \n static void\n record_set_info (dest, setter)\n-     rtx dest, setter;\n+     rtx dest, setter ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (dest) == SUBREG)\n     dest = SUBREG_REG (dest);\n@@ -1823,14 +1826,14 @@ hash_scan_set (pat, insn, set_p)\n \n static void\n hash_scan_clobber (x, insn)\n-     rtx x, insn;\n+     rtx x ATTRIBUTE_UNUSED, insn ATTRIBUTE_UNUSED;\n {\n   /* Currently nothing to do.  */\n }\n \n static void\n hash_scan_call (x, insn)\n-     rtx x, insn;\n+     rtx x ATTRIBUTE_UNUSED, insn ATTRIBUTE_UNUSED;\n {\n   /* Currently nothing to do.  */\n }\n@@ -1977,7 +1980,7 @@ static rtx last_set_insn;\n \n static void\n record_last_set_info (dest, setter)\n-     rtx dest, setter;\n+     rtx dest, setter ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (dest) == SUBREG)\n     dest = SUBREG_REG (dest);\n@@ -2338,7 +2341,7 @@ oprs_not_set_p (x, insn)\n \n static void\n mark_call (pat, insn)\n-     rtx pat, insn;\n+     rtx pat ATTRIBUTE_UNUSED, insn;\n {\n   mem_last_set = INSN_CUID (insn);\n }\n@@ -2466,7 +2469,7 @@ handle_rd_kill_set (insn, regno, bb)\n     }\n }\n \n-static void\n+void\n dump_rd_table (file, title, bmap)\n      FILE *file;\n      char *title;\n@@ -3321,7 +3324,7 @@ free_cprop_mem ()\n \n /* Dump copy/const propagation data.  */\n \n-static void\n+void\n dump_cprop_data (file)\n      FILE *file;\n {\n@@ -3915,7 +3918,7 @@ free_pre_mem ()\n \n /* Dump PRE data.  */\n \n-static void\n+void\n dump_pre_data (file)\n      FILE *file;\n {\n@@ -4323,7 +4326,9 @@ pre_insert_insn (expr, bb)\n \n   if (GET_CODE (insn) == JUMP_INSN)\n     {\n+#ifdef HAVE_cc0\n       rtx note;\n+#endif\n \n       /* If this is a jump table, then we can't insert stuff here.  Since\n \t we know the previous real insn must be the tablejump, we insert"}, {"sha": "379586b8728769f53169cbe1300372d79a905673", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -2157,7 +2157,7 @@ __bb_init_prg ()\n       bb_hashbuckets = (struct bb_edge **) \n                    malloc (BB_BUCKETS * sizeof (struct bb_edge *));\n       if (bb_hashbuckets)\n-        bzero ((char *) bb_hashbuckets, BB_BUCKETS);\n+        memset (bb_hashbuckets, 0, BB_BUCKETS * sizeof (struct bb_edge *));\n     }\n \n   if (bb_mode & 12)"}, {"sha": "e2c9f4dcbf4767e3f114d3d41bd049e8e3b2f817", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -171,6 +171,9 @@ extern void make_function_rtl\t\tPROTO((tree));\n extern void declare_weak\t\tPROTO ((tree));\n #endif /* TREE_CODE */\n \n+/* Emit any pending weak declarations.  */\n+extern void weak_finish\t\t\tPROTO ((void));\n+\n /* Decode an `asm' spec for a declaration as a register name.\n    Return the register number, or -1 if nothing specified,\n    or -2 if the ASMSPEC is not `cc' or `memory' and is not recognized,"}, {"sha": "6e6bb06482439860d313e7d2a8bab14e3ba67f7d", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -32,6 +32,7 @@ extern int constrain_operands\t\tPROTO((int, int));\n extern int memory_address_p\t\tPROTO((enum machine_mode, rtx));\n extern int strict_memory_address_p\tPROTO((enum machine_mode, rtx));\n extern int validate_replace_rtx\t\tPROTO((rtx, rtx, rtx));\n+extern int validate_replace_src\t\tPROTO((rtx, rtx, rtx));\n extern int reg_fits_class_p\t\tPROTO((rtx, enum reg_class, int,\n \t\t\t\t\t       enum machine_mode));\n extern rtx *find_single_use\t\tPROTO((rtx, rtx, rtx *));"}, {"sha": "7cbcbb24a7ca466438ba3455b8cb8e9e74ff3839", "filename": "gcc/rtl.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -799,8 +799,10 @@ extern int ceil_log2\t\t\tPROTO((unsigned HOST_WIDE_INT));\n #define plus_constant_for_output(X,C)  \\\n   plus_constant_for_output_wide (X, (HOST_WIDE_INT) (C))\n \n+/* In explow.c */\n extern rtx plus_constant_wide\t\t PROTO((rtx, HOST_WIDE_INT));\n extern rtx plus_constant_for_output_wide PROTO((rtx, HOST_WIDE_INT));\n+extern void optimize_save_area_alloca\tPROTO((rtx));\n \n extern rtx gen_rtx\t\t\tPVPROTO((enum rtx_code,\n \t\t\t\t\t\t enum machine_mode, ...));\n@@ -1306,6 +1308,9 @@ extern void dump_combine_total_stats\tPROTO ((FILE *));\n #ifdef BUFSIZ\n extern void schedule_insns\t\tPROTO ((FILE *));\n #endif\n+#ifdef HAIFA\n+extern void fix_sched_param\t\tPROTO ((char *, char *));\n+#endif\n \n /* In print-rtl.c */\n extern void debug_rtx\t\t\tPROTO ((rtx));\n@@ -1333,6 +1338,7 @@ extern void preserve_rtl_expr_result\t\t\tPROTO ((rtx));\n extern void mark_temp_addr_taken\t\t\tPROTO ((rtx));\n extern void update_temp_slot_address\t\t\tPROTO ((rtx, rtx));\n extern void use_variable_after\t\t\t\tPROTO ((rtx, rtx));\n+extern void purge_addressof\t\t\t\tPROTO ((rtx));\n \n /* In reload.c */\n extern int operands_match_p\t\tPROTO ((rtx, rtx));\n@@ -1404,6 +1410,11 @@ extern rtx expand_mult_highpart\t\tPROTO ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT, rtx,\n \t\t\t\t\t\tint, int));\n \n+/* In gcse.c */\n+#ifdef BUFSIZ\n+extern void gcse_main\t\t\tPROTO ((rtx, FILE *));\n+#endif\n+\n /* In global.c */\n extern void mark_elimination\t\tPROTO ((int, int));\n #ifdef BUFSIZ\n@@ -1423,6 +1434,16 @@ extern void regclass\t\t\tPROTO ((rtx, int));\n extern void reg_scan\t\t\tPROTO ((rtx, int, int));\n extern void fix_register\t\tPROTO ((char *, int, int));\n \n+/* In regmove.c */\n+#ifdef BUFSIZ\n+extern void regmove_optimize\t\tPROTO ((rtx, int, FILE *));\n+#endif\n+\n+/* In reorg.c */\n+#ifdef BUFSIZ\n+extern void dbr_schedule\t\tPROTO ((rtx, FILE *));\n+#endif\n+\n /* In optabs.c */\n extern void init_optabs\t\t\tPROTO ((void));\n \n@@ -1445,6 +1466,10 @@ extern void init_caller_save\t\tPROTO ((void));\n \n /* In profile.c */\n extern void init_branch_prob\t\tPROTO ((char *));\n+#ifdef BUFSIZ\n+extern void branch_prob\t\t\tPROTO ((rtx, FILE *));\n+extern void end_branch_prob\t\tPROTO ((FILE *));\n+#endif\n extern void output_func_start_profiler\tPROTO ((void));\n \n /* In reg-stack.c */"}, {"sha": "fa9b365b752600cd5762d258ebb3b000a2074121", "filename": "gcc/toplev.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -51,4 +51,12 @@ extern void error_for_asm\t\tPVPROTO((struct rtx_def *, char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_2;\n extern void warning_for_asm\t\tPVPROTO((struct rtx_def *, char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_2;\n+#ifdef _JBLEN\n+extern void set_float_handler PROTO((jmp_buf));\n+#endif\n+\n+#ifdef BUFSIZ\n+extern void output_quoted_string\tPROTO ((FILE *, char *));\n+#endif\n+\n #endif /* __GCC_TOPLEV_H */"}, {"sha": "d60bfcb49f1a68cf5f0c88b26e9c8049c0d83a63", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=50b2596f67fb1dfe7836a23b0f2bcdfa881d8b97", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"real.h\"\n #include \"toplev.h\"\n+#include \"dbxout.h\"\n \n #include \"obstack.h\"\n #include \"c-pragma.h\""}]}