{"sha": "5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmNTZhZThmODM5NDgwYjI3OWQxYzg5ZjRhMGExZGY3YmQ4ZGRlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-10T19:20:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-10T19:20:14Z"}, "message": "ipa-cp.c (ipcp_cloning_candidate_p): Use node->optimize_for_size_p.\n\n\n\t* ipa-cp.c (ipcp_cloning_candidate_p): Use node->optimize_for_size_p.\n\t(good_cloning_opportunity_p): Likewise.\n\t(gather_context_independent_values): Do not return true when\n\tpolymorphic call context is known or when we have known aggregate\n\tvalue of unused parameter.\n\t(estimate_local_effects): Try to create clone for all context\n\twhen either some params are substituted or devirtualization is possible\n\tor some params can be removed; use local flag instead of\n\tnode->will_be_removed_from_program_if_no_direct_calls_p.\n\t(identify_dead_nodes): Likewise.\n\n\t* gcc.c-torture/execute/20010122-1.c: Disable cloning.\n\nFrom-SVN: r231540", "tree": {"sha": "929c94d07fa924c519891a5c38a32cbc3d416489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/929c94d07fa924c519891a5c38a32cbc3d416489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/comments", "author": null, "committer": null, "parents": [{"sha": "f6069ccc2b4a6d02ae3f51119a6471a3b11b2119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6069ccc2b4a6d02ae3f51119a6471a3b11b2119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6069ccc2b4a6d02ae3f51119a6471a3b11b2119"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "fb1cb06a7f428d458754493b3b2e0cc230cc6d9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "patch": "@@ -1,3 +1,16 @@\n+2015-12-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (ipcp_cloning_candidate_p): Use node->optimize_for_size_p.\n+\t(good_cloning_opportunity_p): Likewise.\n+\t(gather_context_independent_values): Do not return true when\n+\tpolymorphic call context is known or when we have known aggregate\n+\tvalue of unused parameter.\n+\t(estimate_local_effects): Try to create clone for all context\n+\twhen either some params are substituted or devirtualization is possible\n+\tor some params can be removed; use local flag instead of\n+\tnode->will_be_removed_from_program_if_no_direct_calls_p.\n+\t(identify_dead_nodes): Likewise.\n+\n 2015-12-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* doc/invoke.texi (-Wall): Add -Wmisleading-indentation to the"}, {"sha": "ee285500608664720a8b617761db8403b5c0f50b", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "patch": "@@ -613,7 +613,7 @@ ipcp_cloning_candidate_p (struct cgraph_node *node)\n       return false;\n     }\n \n-  if (!optimize_function_for_speed_p (DECL_STRUCT_FUNCTION (node->decl)))\n+  if (node->optimize_for_size_p ())\n     {\n       if (dump_file)\n         fprintf (dump_file, \"Not considering %s for cloning; \"\n@@ -2267,7 +2267,7 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n {\n   if (time_benefit == 0\n       || !opt_for_fn (node->decl, flag_ipa_cp_clone)\n-      || !optimize_function_for_speed_p (DECL_STRUCT_FUNCTION (node->decl)))\n+      || node->optimize_for_size_p ())\n     return false;\n \n   gcc_assert (size_cost > 0);\n@@ -2387,12 +2387,14 @@ gather_context_independent_values (struct ipa_node_params *info,\n \t*removable_params_cost\n \t  += ipa_get_param_move_cost (info, i);\n \n+      if (!ipa_is_param_used (info, i))\n+\tcontinue;\n+\n       ipcp_lattice<ipa_polymorphic_call_context> *ctxlat = &plats->ctxlat;\n+      /* Do not account known context as reason for cloning.  We can see\n+\t if it permits devirtualization.  */\n       if (ctxlat->is_single_const ())\n-\t{\n-\t  (*known_contexts)[i] = ctxlat->values->value;\n-\t  ret = true;\n-\t}\n+\t(*known_contexts)[i] = ctxlat->values->value;\n \n       if (known_aggs)\n \t{\n@@ -2494,7 +2496,9 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t\t\t\t\t    &known_contexts, &known_aggs,\n \t\t\t\t\t\t    &removable_params_cost);\n   known_aggs_ptrs = agg_jmp_p_vec_for_t_vec (known_aggs);\n-  if (always_const)\n+  int devirt_bonus = devirtualization_time_bonus (node, known_csts,\n+\t\t\t\t\t   known_contexts, known_aggs_ptrs);\n+  if (always_const || devirt_bonus || removable_params_cost)\n     {\n       struct caller_statistics stats;\n       inline_hints hints;\n@@ -2505,8 +2509,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t\t\t\t      false);\n       estimate_ipcp_clone_size_and_time (node, known_csts, known_contexts,\n \t\t\t\t\t known_aggs_ptrs, &size, &time, &hints);\n-      time -= devirtualization_time_bonus (node, known_csts, known_contexts,\n-\t\t\t\t\t   known_aggs_ptrs);\n+      time -= devirt_bonus;\n       time -= hint_time_bonus (hints);\n       time -= removable_params_cost;\n       size -= stats.n_calls * removable_params_cost;\n@@ -2515,8 +2518,7 @@ estimate_local_effects (struct cgraph_node *node)\n \tfprintf (dump_file, \" - context independent values, size: %i, \"\n \t\t \"time_benefit: %i\\n\", size, base_time - time);\n \n-      if (size <= 0\n-\t  || node->will_be_removed_from_program_if_no_direct_calls_p ())\n+      if (size <= 0 || node->local.local)\n \t{\n \t  info->do_clone_for_all_contexts = true;\n \t  base_time = time;\n@@ -2544,6 +2546,10 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t     \"max_new_size would be reached with %li.\\n\",\n \t\t     size + overall_size);\n \t}\n+      else if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"   Not cloning for all contexts because \"\n+\t\t \"!good_cloning_opportunity_p.\\n\");\n+\t\n     }\n \n   for (i = 0; i < count ; i++)\n@@ -4419,7 +4425,7 @@ identify_dead_nodes (struct cgraph_node *node)\n {\n   struct cgraph_node *v;\n   for (v = node; v ; v = ((struct ipa_dfs_info *) v->aux)->next_cycle)\n-    if (v->will_be_removed_from_program_if_no_direct_calls_p ()\n+    if (v->local.local\n \t&& !v->call_for_symbol_thunks_and_aliases\n \t     (has_undead_caller_from_outside_scc_p, NULL, true))\n       IPA_NODE_REF (v)->node_dead = 1;"}, {"sha": "ef97e761d45b26087ec25c501c6c459e4bc529a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "patch": "@@ -1,3 +1,7 @@\n+2015-12-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/execute/20010122-1.c: Disable cloning.\n+\n 2015-12-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/68691"}, {"sha": "4eeb8c7a30bd556ac8a01970164ceb6690da1c6e", "filename": "gcc/testsuite/gcc.c-torture/execute/20010122-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af56ae8f839480b279d1c89f4a0a1df7bd8dde2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c?ref=5af56ae8f839480b279d1c89f4a0a1df7bd8dde2", "patch": "@@ -6,7 +6,7 @@ extern void abort (void);\n extern void *alloca (__SIZE_TYPE__);\n char *dummy (void);\n \n-#define NOINLINE __attribute__((noinline))\n+#define NOINLINE __attribute__((noinline)) __attribute__ ((noclone))\n \n void *save_ret1[6];\n void *test4a (char *);"}]}