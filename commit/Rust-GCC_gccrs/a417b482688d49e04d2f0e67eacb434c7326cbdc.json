{"sha": "a417b482688d49e04d2f0e67eacb434c7326cbdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxN2I0ODI2ODhkNDllMDRkMmYwZTY3ZWFjYjQzNGM3MzI2Y2JkYw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-09-20T07:40:41Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-09-20T07:40:41Z"}, "message": "pr16105.c: Replace \"aligned types\" with regular types.\n\n        * gcc.dg/vect/pr16105.c: Replace \"aligned types\" with regular types.\n        No longer vectorizable on vect_no_align targets.\n        * gcc.dg/vect/pr20122.c: Likewise.\n        * gcc.dg/vect/vect-74.c: Likewise.\n        * gcc.dg/vect/vect-75.c: Likewise.\n        * gcc.dg/vect/vect-76.c: Likewise.\n\n        * gcc.dg/vect/vect-37.c: Replace \"aligned types\" with regular types.\n        Will not be vectorizable on vect_no_align targets once aliasing issues\n        are resolved.\n        * gcc.dg/vect/vect-79.c: Likewise.\n\n        * gcc.dg/vect/vect-77.c: Replace \"aligned types\" with regular types.\n        * gcc.dg/vect/vect-78.c: Likewise.\n        * gcc.dg/vect/vect-97.c: Likewise.\n\nFrom-SVN: r104445", "tree": {"sha": "64b1297a327d078a5a8d9912d6d1e01fbf7a059d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b1297a327d078a5a8d9912d6d1e01fbf7a059d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a417b482688d49e04d2f0e67eacb434c7326cbdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a417b482688d49e04d2f0e67eacb434c7326cbdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a417b482688d49e04d2f0e67eacb434c7326cbdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a417b482688d49e04d2f0e67eacb434c7326cbdc/comments", "author": null, "committer": null, "parents": [{"sha": "da8f5fd92e3943a011eac4af96457c3bf4b51f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8f5fd92e3943a011eac4af96457c3bf4b51f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8f5fd92e3943a011eac4af96457c3bf4b51f0b"}], "stats": {"total": 139, "additions": 77, "deletions": 62}, "files": [{"sha": "6b46fe2dc0006295b1d6308cd11f565a136717c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -1,3 +1,21 @@\n+2005-09-20  Dorit Nuzman  <dorit@il.ibm.com>\n+        \n+\t* gcc.dg/vect/pr16105.c: Replace \"aligned types\" with regular types.\n+\tNo longer vectorizable on vect_no_align targets.\n+\t* gcc.dg/vect/pr20122.c: Likewise.\n+\t* gcc.dg/vect/vect-74.c: Likewise.\n+\t* gcc.dg/vect/vect-75.c: Likewise.\n+\t* gcc.dg/vect/vect-76.c: Likewise.\n+\n+\t* gcc.dg/vect/vect-37.c: Replace \"aligned types\" with regular types.\n+\tWill not be vectorizable on vect_no_align targets once aliasing issues\n+\tare resolved.\n+\t* gcc.dg/vect/vect-79.c: Likewise.\n+\n+\t* gcc.dg/vect/vect-77.c: Replace \"aligned types\" with regular types.\n+\t* gcc.dg/vect/vect-78.c: Likewise.\n+\t* gcc.dg/vect/vect-97.c: Likewise.\n+\n 2005-09-19  Steven Bosscher  <stevenb@suse.de>\n \n \t* gcc.dg/pr23943.c: New test."}, {"sha": "ddc669cf2d8e7abec0c919a59ad86c5a7fc180b5", "filename": "gcc/testsuite/gcc.dg/vect/pr16105.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -2,12 +2,11 @@\n /* { dg-require-effective-target vect_float } */\n \n #define VECTOR_SIZE 512\n-typedef float afloat __attribute__ ((__aligned__(16)));\n \n-extern void check(const afloat * __restrict__ v);\n+extern void check(const float * __restrict__ v);\n \n-void square(const afloat * __restrict__ a,\n-\t    afloat * __restrict__ out)\n+void square(const float * __restrict__ a,\n+\t    float * __restrict__ out)\n {\n     unsigned int i;\n     for (i = 0; i < VECTOR_SIZE; i++) {\n@@ -18,5 +17,5 @@ void square(const afloat * __restrict__ a,\n     check(out);\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ebb9f42db0c653b7785c284350abcb279abf925a", "filename": "gcc/testsuite/gcc.dg/vect/pr20122.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -3,15 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-typedef short ashort __attribute__ ((__aligned__(16)));\n-ashort Kernshort[24];\n-static void VecBug(ashort Kernel[8][24]) __attribute__((noinline));\n-static void VecBug(ashort Kernel[8][24]);\n-static void VecBug2(ashort Kernel[8][24]) __attribute__((noinline));\n-static void VecBug2(ashort Kernel[8][24]);\n+short Kernshort[24] __attribute__ ((__aligned__(16)));\n+static void VecBug(short Kernel[8][24]) __attribute__((noinline));\n+static void VecBug2(short Kernel[8][24]) __attribute__((noinline));\n \n /* Not vectorizable: Kernel may alias Kernshort - a global array.  */\n-static void VecBug(ashort Kernel[8][24])\n+static void VecBug(short Kernel[8][24])\n {\n   int k,i;\n     for (k = 0; k<8; k++)\n@@ -20,10 +17,10 @@ static void VecBug(ashort Kernel[8][24])\n }\n \n /* Vectorizable: Kernshort2 is local.  */\n-static void VecBug2(ashort Kernel[8][24])\n+static void VecBug2(short Kernel[8][24])\n {\n   int k,i;\n-  ashort Kernshort2[24];\n+  short Kernshort2[24] __attribute__ ((__aligned__(16)));\n     for (k = 0; k<8; k++)\n         for (i = 0; i<24; i++)\n             Kernshort2[i] = Kernel[k][i];\n@@ -38,7 +35,7 @@ int main (int argc, char **argv)\n {\n     check_vect ();\n \n-    ashort Kernel[8][24];\n+    short Kernel[8][24] __attribute__ ((__aligned__(16)));\n     int k,i;\n \n     for (k = 0; k<8; k++)\n@@ -52,5 +49,5 @@ int main (int argc, char **argv)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail vect_no_align} } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e54e0c5166c3c30224845eace518fec66178cd56", "filename": "gcc/testsuite/gcc.dg/vect/vect-37.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -3,20 +3,19 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-typedef char achar __attribute__ ((__aligned__(16)));\n-\n #define N 16\n-achar x[N];\n+char x[N] __attribute__ ((__aligned__(16)));\n  \n-int main1 (achar *y)\n+int main1 (char *y)\n {  \n   struct {\n-    achar *p;\n-    achar *q;\n+    char *p;\n+    char *q;\n   } s;\n-  achar cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  char cb[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n   int i;\n \n+  /* Not vectorized - can't antialias the pointer s.p from the array cb.  */\n   s.p = y;\n   for (i = 0; i < N; i++)\n     {\n@@ -30,6 +29,7 @@ int main1 (achar *y)\n         abort ();\n     }\n \n+  /* Not vectorized - can't antialias the pointer s.p from the pointer s.q.  */\n   s.q = cb;\n   for (i = 0; i < N; i++)\n     {\n@@ -53,8 +53,9 @@ int main (void)\n   return main1 (x);\n } \n \n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* Currently the loops fail to vectorize due to aliasing problems.\n+   If/when the aliasing problems are resolved, unalignment may\n+   prevent vectorization on some targets.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 2 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5dbd3120d69947ee6a6c534ebb5a3db82167fd13", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -5,8 +5,6 @@\n \n #define N 16\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n-\n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n@@ -16,10 +14,10 @@ float b[N+4] __attribute__ ((__aligned__(16))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0,\n float c[N] __attribute__ ((__aligned__(16))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n int\n-main1 (afloat *__restrict__  pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc)\n {\n   int i;\n-  afloat *q = pb + 4;\n+  float *q = pb + 4;\n \n   for (i = 0; i < N; i++)\n     {\n@@ -44,6 +42,7 @@ int main (void)\n   return 0;\t\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "db543f864893fbf1e1577074007c6ce4e1e4ca6f", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -6,15 +6,13 @@\n #define N 8\n #define OFF 8\n \n-typedef int aint __attribute__ ((__aligned__(16)));\n-\n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n \n-int main1 (aint *ib)\n+int main1 (int *ib)\n {\n   int i;\n   int ia[N];\n@@ -44,6 +42,6 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "40213e80acf85eda9ac8e7215995c32ad98962db", "filename": "gcc/testsuite/gcc.dg/vect/vect-76.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -6,15 +6,13 @@\n #define N 8\n #define OFF 4\n \n-typedef int aint __attribute__ ((__aligned__(16)));\n-\n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};\n \n-int main1 (aint *pib)\n+int main1 (int *pib)\n {\n   int i;\n   int ia[N+OFF];\n@@ -71,6 +69,7 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e182ecaa3a411df1dfdb4ad292c47919fd824e37", "filename": "gcc/testsuite/gcc.dg/vect/vect-77.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -6,15 +6,13 @@\n #define N 8\n #define OFF 8\n \n-typedef int aint __attribute__ ((__aligned__(16)));\n-\n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n \n-int main1 (aint *ib, int off)\n+int main1 (int *ib, int off)\n {\n   int i;\n   int ia[N];"}, {"sha": "d1d367da2bdf5ad0b31c00295909193ad4417806", "filename": "gcc/testsuite/gcc.dg/vect/vect-78.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -6,16 +6,14 @@\n #define N 8\n #define OFF 8\n \n-typedef int aint __attribute__ ((__aligned__(16)));\n-\n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n int off = 8;\n \n-int main1 (aint *ib)\n+int main1 (int *ib)\n {\n   int i;\n   int ia[N];"}, {"sha": "8e98e4d0ed982da895cd3c3ed446eec5f68e1aee", "filename": "gcc/testsuite/gcc.dg/vect/vect-79.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -5,18 +5,18 @@\n \n #define N 16\n \n-typedef float afloat __attribute__ ((__aligned__(16)));\n+float fa[N] __attribute__ ((__aligned__(16)));\n+float fb[N+4] __attribute__ ((__aligned__(16))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n+float fc[N] __attribute__ ((__aligned__(16))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n-afloat a[N];\n-afloat b[N+4] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n-afloat c[N] = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n+/* Like vect-80.c but the pointers are not annotated as restricted,\n+   and therefore can't be antialiased.  */\n \n-/* Not vectorizable. Alias. */\n int\n-main1 (afloat *pa, afloat *pb, afloat *pc)\n+main1 (float *pa, float *pb, float *pc)\n {\n   int i;\n-  afloat *q = pb + 4;\n+  float *q = pb + 4;\n \n   for (i = 0; i < N; i++)\n     {\n@@ -37,10 +37,14 @@ int main (void)\n { \n   check_vect ();\n \n-  main1 (a, b, c);\n+  main1 (fa, fb, fc);\n \n   return 0;\t\n }\n \n+/* Currently the loops fail to vectorize due to aliasing problems.\n+  If/when the aliasing problems are resolved, unalignment may\n+  prevent vectorization on some targets.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "bf92dac7a1a946879792df3e04015b79f2a199a4", "filename": "gcc/testsuite/gcc.dg/vect/vect-97.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a417b482688d49e04d2f0e67eacb434c7326cbdc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c?ref=a417b482688d49e04d2f0e67eacb434c7326cbdc", "patch": "@@ -3,20 +3,21 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-typedef char achar __attribute__ ((__aligned__(16)));\n-\n #define N 16\n  \n int main1 ()\n {  \n   struct {\n-    achar *p;\n-    achar *q;\n+    char *p;\n+    char *q;\n   } s;\n   int i;\n-  achar x[N];\n-  achar cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  char x[N] __attribute__ ((__aligned__(16)));\n+  char cb[N] __attribute__ ((__aligned__(16))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n \n+  /* Check that datarefs analysis can determine that the access via pointer\n+     s.p is based off array x, which enables us to antialias this access from\n+     the access to array cb.  */\n   s.p = x;\n   for (i = 0; i < N; i++)\n     {\n@@ -30,6 +31,9 @@ int main1 ()\n         abort ();\n     }\n \n+  /* Check that datarefs analysis can determine that the access via pointer\n+     s.p is based off array x, and that the access via pointer s.q is based off\n+     array cb, which enables us to antialias these two accesses.  */\n   s.q = cb;\n   for (i = 0; i < N; i++)\n     {"}]}