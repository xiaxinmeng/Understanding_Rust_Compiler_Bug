{"sha": "75a0b80599ca4326da8a203e042cb9db6c27ab08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhMGI4MDU5OWNhNDMyNmRhOGEyMDNlMDQyY2I5ZGI2YzI3YWIwOA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-29T04:41:06Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-29T04:41:06Z"}, "message": "[RS6000] rs6000_call_template for external call insn assembly output\n\nThis is a first step in tidying rs6000 call patterns, in preparation\nto support inline plt calls.\n\n\t* config/rs6000/rs6000-protos.h (rs6000_call_template): Declare.\n\t(rs6000_sibcall_template): Declare.\n\t(macho_call_template): Rename from output_call.\n\t* config/rs6000/rs6000.c (rs6000_call_template_1): New function.\n\t(rs6000_call_template, rs6000_sibcall_template): Likewise.\n\t(macho_call_template): Rename from output_call.\n\t* config/rs6000/rs6000.md (tls_gd_aix, tls_gd_sysv),\n\t(tls_gd_call_aix, tls_gd_call_sysv, tls_ld_aix, tls_ld_sysv),\n\t(tls_ld_call_aix, tls_ld_call_sysv, call_nonlocal_sysv),\n\t(call_nonlocal_sysv_secure, call_value_nonlocal_sysv),\n\t(call_value_nonlocal_sysv_secure, call_nonlocal_aix),\n\t(call_value_nonlocal_aix): Use rs6000_call_template and update\n\toccurrences of output_call to macho_call_template.\n\t(sibcall_nonlocal_sysv, sibcall_value_nonlocal_sysv, sibcall_aix),\n\t(sibcall_value_aix): Use rs6000_sibcall_template.\n\nFrom-SVN: r266600", "tree": {"sha": "5ea43ae34b9d1f277ee33c2b5c731d17058797ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ea43ae34b9d1f277ee33c2b5c731d17058797ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a0b80599ca4326da8a203e042cb9db6c27ab08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a0b80599ca4326da8a203e042cb9db6c27ab08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a0b80599ca4326da8a203e042cb9db6c27ab08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a0b80599ca4326da8a203e042cb9db6c27ab08/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "645eee7431fef4cc37c5307a6c6f81fcc6c553d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645eee7431fef4cc37c5307a6c6f81fcc6c553d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645eee7431fef4cc37c5307a6c6f81fcc6c553d4"}], "stats": {"total": 203, "additions": 113, "deletions": 90}, "files": [{"sha": "0186a40e45b6dc56e268e89a0a1862602a50b823", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75a0b80599ca4326da8a203e042cb9db6c27ab08", "patch": "@@ -1,3 +1,21 @@\n+2018-11-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_call_template): Declare.\n+\t(rs6000_sibcall_template): Declare.\n+\t(macho_call_template): Rename from output_call.\n+\t* config/rs6000/rs6000.c (rs6000_call_template_1): New function.\n+\t(rs6000_call_template, rs6000_sibcall_template): Likewise.\n+\t(macho_call_template): Rename from output_call.\n+\t* config/rs6000/rs6000.md (tls_gd_aix, tls_gd_sysv),\n+\t(tls_gd_call_aix, tls_gd_call_sysv, tls_ld_aix, tls_ld_sysv),\n+\t(tls_ld_call_aix, tls_ld_call_sysv, call_nonlocal_sysv),\n+\t(call_nonlocal_sysv_secure, call_value_nonlocal_sysv),\n+\t(call_value_nonlocal_sysv_secure, call_nonlocal_aix),\n+\t(call_value_nonlocal_aix): Use rs6000_call_template and update\n+\toccurrences of output_call to macho_call_template.\n+\t(sibcall_nonlocal_sysv, sibcall_value_nonlocal_sysv, sibcall_aix),\n+\t(sibcall_value_aix): Use rs6000_sibcall_template.\n+\n 2018-11-28  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000-string.c (expand_block_clear): Change how"}, {"sha": "bdb2a595a4f4185ed561993d344f82e8c9caf26b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=75a0b80599ca4326da8a203e042cb9db6c27ab08", "patch": "@@ -105,6 +105,8 @@ extern int ccr_bit (rtx, int);\n extern void rs6000_output_function_entry (FILE *, const char *);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n+extern const char *rs6000_call_template (rtx *, unsigned int, const char *);\n+extern const char *rs6000_sibcall_template (rtx *, unsigned int, const char *);\n extern enum rtx_code rs6000_reverse_condition (machine_mode,\n \t\t\t\t\t       enum rtx_code);\n extern rtx rs6000_emit_eqne (machine_mode, rtx, rtx, rtx);\n@@ -222,7 +224,7 @@ extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n extern void rs6000_d_target_versions (void);\n \n #if TARGET_MACHO\n-char *output_call (rtx_insn *, rtx *, int, int);\n+char *macho_call_template (rtx_insn *, rtx *, int, int);\n #endif\n \n #ifdef NO_DOLLAR_IN_LABEL"}, {"sha": "7c7117c5d1e9f8fdaefb58ef51c14123eecdf7d5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=75a0b80599ca4326da8a203e042cb9db6c27ab08", "patch": "@@ -21367,6 +21367,50 @@ rs6000_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n+/* Return a template string for assembly to emit when making an\n+   external call.  FUNOP is the call mem argument operand number,\n+   ARG is either NULL or a @TLSGD or @TLSLD __tls_get_addr argument\n+   specifier.  */\n+\n+static const char *\n+rs6000_call_template_1 (rtx *operands ATTRIBUTE_UNUSED, unsigned int funop,\n+\t\t\tbool sibcall, const char *arg)\n+{\n+  /* -Wformat-overflow workaround, without which gcc thinks that %u\n+      might produce 10 digits.  */\n+  gcc_assert (funop <= MAX_RECOG_OPERANDS);\n+\n+  /* The magic 32768 offset here corresponds to the offset of\n+     r30 in .got2, as given by LCTOC1.  See sysv4.h:toc_section.  */\n+  char z[11];\n+  sprintf (z, \"%%z%u%s\", funop,\n+\t   (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT && flag_pic == 2\n+\t    ? \"+32768\" : \"\"));\n+\n+  static char str[32];  /* 4 spare */\n+  if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n+    sprintf (str, \"b%s %s%s%s\", sibcall ? \"\" : \"l\", z, arg,\n+\t     sibcall ? \"\" : \"\\n\\tnop\");\n+  else if (DEFAULT_ABI == ABI_V4)\n+    sprintf (str, \"b%s %s%s%s\", sibcall ? \"\" : \"l\", z, arg,\n+\t     flag_pic ? \"@plt\" : \"\");\n+  else\n+    gcc_unreachable ();\n+  return str;\n+}\n+\n+const char *\n+rs6000_call_template (rtx *operands, unsigned int funop, const char *arg)\n+{\n+  return rs6000_call_template_1 (operands, funop, false, arg);\n+}\n+\n+const char *\n+rs6000_sibcall_template (rtx *operands, unsigned int funop, const char *arg)\n+{\n+  return rs6000_call_template_1 (operands, funop, true, arg);\n+}\n+\n #if defined (HAVE_GAS_HIDDEN) && !TARGET_MACHO\n /* Emit an assembler directive to set symbol visibility for DECL to\n    VISIBILITY_TYPE.  */\n@@ -32805,8 +32849,8 @@ get_prev_label (tree function_name)\n    CALL_DEST is the routine we are calling.  */\n \n char *\n-output_call (rtx_insn *insn, rtx *operands, int dest_operand_number,\n-\t     int cookie_operand_number)\n+macho_call_template (rtx_insn *insn, rtx *operands, int dest_operand_number,\n+\t\t     int cookie_operand_number)\n {\n   static char buf[256];\n   if (darwin_emit_branch_islands"}, {"sha": "fd0ae58607049838820fcfe8732e601357a32a07", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 46, "deletions": 87, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0b80599ca4326da8a203e042cb9db6c27ab08/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=75a0b80599ca4326da8a203e042cb9db6c27ab08", "patch": "@@ -9439,10 +9439,11 @@\n   \"HAVE_AS_TLS && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n {\n   if (TARGET_CMODEL != CMODEL_SMALL)\n-    return \"addis %0,%1,%2@got@tlsgd@ha\\;addi %0,%0,%2@got@tlsgd@l\\;\"\n-\t   \"bl %z3\\;nop\";\n+    output_asm_insn (\"addis %0,%1,%2@got@tlsgd@ha\\;\"\n+\t\t     \"addi %0,%0,%2@got@tlsgd@l\", operands);\n   else\n-    return \"addi %0,%1,%2@got@tlsgd\\;bl %z3\\;nop\";\n+    output_asm_insn (\"addi %0,%1,%2@got@tlsgd\", operands);\n+  return rs6000_call_template (operands, 3, \"\");\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n@@ -9471,15 +9472,8 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n {\n-  if (flag_pic)\n-    {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \"addi %0,%1,%2@got@tlsgd\\;bl %z3+32768@plt\";\n-      else\n-\treturn \"addi %0,%1,%2@got@tlsgd\\;bl %z3@plt\";\n-    }\n-  else\n-    return \"addi %0,%1,%2@got@tlsgd\\;bl %z3\";\n+  output_asm_insn (\"addi %0,%1,%2@got@tlsgd\", operands);\n+  return rs6000_call_template (operands, 3, \"\");\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n@@ -9544,7 +9538,9 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\n    && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n-  \"bl %z1(%3@tlsgd)\\;nop\"\n+{\n+  return rs6000_call_template (operands, 1, \"(%3@tlsgd)\");\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n@@ -9557,13 +9553,7 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n {\n-  if (flag_pic)\n-    {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \"bl %z1+32768(%3@tlsgd)@plt\";\n-      return \"bl %z1(%3@tlsgd)@plt\";\n-    }\n-  return \"bl %z1(%3@tlsgd)\";\n+  return rs6000_call_template (operands, 1, \"(%3@tlsgd)\");\n }\n   [(set_attr \"type\" \"branch\")])\n \n@@ -9577,10 +9567,11 @@\n   \"HAVE_AS_TLS && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n {\n   if (TARGET_CMODEL != CMODEL_SMALL)\n-    return \"addis %0,%1,%&@got@tlsld@ha\\;addi %0,%0,%&@got@tlsld@l\\;\"\n-\t   \"bl %z2\\;nop\";\n+    output_asm_insn (\"addis %0,%1,%&@got@tlsld@ha\\;\"\n+\t\t     \"addi %0,%0,%&@got@tlsld@l\", operands);\n   else\n-    return \"addi %0,%1,%&@got@tlsld\\;bl %z2\\;nop\";\n+    output_asm_insn (\"addi %0,%1,%&@got@tlsld\", operands);\n+  return rs6000_call_template (operands, 2, \"\");\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n@@ -9607,15 +9598,8 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n {\n-  if (flag_pic)\n-    {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \"addi %0,%1,%&@got@tlsld\\;bl %z2+32768@plt\";\n-      else\n-\treturn \"addi %0,%1,%&@got@tlsld\\;bl %z2@plt\";\n-    }\n-  else\n-    return \"addi %0,%1,%&@got@tlsld\\;bl %z2\";\n+  output_asm_insn (\"addi %0,%1,%&@got@tlsld\", operands);\n+  return rs6000_call_template (operands, 2, \"\");\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n@@ -9676,7 +9660,9 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\n    && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n-  \"bl %z1(%&@tlsld)\\;nop\"\n+{\n+  return rs6000_call_template (operands, 1, \"(%&@tlsld)\");\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n@@ -9688,13 +9674,7 @@\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n {\n-  if (flag_pic)\n-    {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \"bl %z1+32768(%&@tlsld)@plt\";\n-      return \"bl %z1(%&@tlsld)@plt\";\n-    }\n-  return \"bl %z1(%&@tlsld)\";\n+  return rs6000_call_template (operands, 1, \"(%&@tlsld)\");\n }\n   [(set_attr \"type\" \"branch\")])\n \n@@ -10580,15 +10560,9 @@\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n #if TARGET_MACHO\n-  return output_call(insn, operands, 0, 2);\n+  return macho_call_template (insn, operands, 0, 2);\n #else\n-  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n-    {\n-      gcc_assert (!TARGET_SECURE_PLT);\n-      return \"bl %z0@plt\";\n-    }\n-  else\n-    return \"bl %z0\";\n+  return rs6000_call_template (operands, 0, \"\");\n #endif\n }\n   \"DEFAULT_ABI == ABI_V4\n@@ -10621,13 +10595,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (flag_pic == 2)\n-    /* The magic 32768 offset here and in the other sysv call insns\n-       corresponds to the offset of r30 in .got2, as given by LCTOC1.\n-       See sysv4.h:toc_section.  */\n-    return \"bl %z0+32768@plt\";\n-  else\n-    return \"bl %z0@plt\";\n+  return rs6000_call_template (operands, 0, \"\");\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10683,15 +10651,9 @@\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n #if TARGET_MACHO\n-  return output_call(insn, operands, 1, 3);\n+  return macho_call_template (insn, operands, 1, 3);\n #else\n-  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n-    {\n-      gcc_assert (!TARGET_SECURE_PLT);\n-      return \"bl %z1@plt\";\n-    }\n-  else\n-    return \"bl %z1\";\n+  return rs6000_call_template (operands, 1, \"\");\n #endif\n }\n   \"DEFAULT_ABI == ABI_V4\n@@ -10726,10 +10688,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (flag_pic == 2)\n-    return \"bl %z1+32768@plt\";\n-  else\n-    return \"bl %z1@plt\";\n+  return rs6000_call_template (operands, 1, \"\");\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10762,7 +10721,9 @@\n \t (match_operand 1 \"\" \"g\"))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2\"\n-  \"bl %z0\\;nop\"\n+{\n+  return rs6000_call_template (operands, 0, \"\");\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10772,7 +10733,9 @@\n \t      (match_operand 2 \"\" \"g\")))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2\"\n-  \"bl %z1\\;nop\"\n+{\n+  return rs6000_call_template (operands, 1, \"\");\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n@@ -11049,13 +11012,8 @@\n \t/* Can use CR0 since it is volatile across sibcalls.  */\n \treturn \"crset 2\\;beq%T0-\\;b $\";\n     }\n-  else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n-    {\n-      gcc_assert (!TARGET_SECURE_PLT);\n-      return \"b %z0@plt\";\n-    }\n   else\n-    return \"b %z0\";\n+    return rs6000_sibcall_template (operands, 0, \"\");\n }\n   [(set_attr \"type\" \"branch\")\n    (set_attr_alternative \"length\"\n@@ -11094,13 +11052,8 @@\n \t/* Can use CR0 since it is volatile across sibcalls.  */\n \treturn \"crset 2\\;beq%T1-\\;b $\";\n     }\n-  else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n-    {\n-      gcc_assert (!TARGET_SECURE_PLT);\n-      return \"b %z1@plt\";\n-    }\n   else\n-    return \"b %z1\";\n+    return rs6000_sibcall_template (operands, 1, \"\");\n }\n   [(set_attr \"type\" \"branch\")\n    (set_attr_alternative \"length\"\n@@ -11122,9 +11075,12 @@\n \t (match_operand 1 \"\" \"g,g\"))\n    (simple_return)]\n   \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2\"\n-  \"@\n-   b %z0\n-   b%T0\"\n+{\n+  if (which_alternative == 0)\n+    return rs6000_sibcall_template (operands, 0, \"\");\n+  else\n+    return \"b%T0\";\n+}\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"*sibcall_value_aix<mode>\"\n@@ -11133,9 +11089,12 @@\n \t      (match_operand 2 \"\" \"g,g\")))\n    (simple_return)]\n   \"DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2\"\n-  \"@\n-   b %z1\n-   b%T1\"\n+{\n+  if (which_alternative == 0)\n+    return rs6000_sibcall_template (operands, 1, \"\");\n+  else\n+    return \"b%T1\";\n+}\n   [(set_attr \"type\" \"branch\")])\n \n (define_expand \"sibcall_epilogue\""}]}