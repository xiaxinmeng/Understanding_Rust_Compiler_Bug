{"sha": "c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0MjNlZjNlMDA4NTZlYjg4ZmI3ZmNlYjBmMDhiNjA2OGRkZDkyNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-09-17T10:13:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-09-17T10:13:12Z"}, "message": "error.c (error_print): Move increment out of the assert.\n\n2012-09-17  Tobias Burnus  <burnus@net-b.de>\n\n        * error.c (error_print): Move increment out of the assert.\n        * interface.c (gfc_compare_derived_types): Add assert.\n        (get_expr_storage_size): Remove always-true logical condition.\n        * resolve.c (resolve_allocate_expr): Fix looping logic.\n        * target-memory.c (gfc_target_expr_size): Add assert.\n\nFrom-SVN: r191381", "tree": {"sha": "339fefefa19c741b32e5ef9e8249c05755344a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/339fefefa19c741b32e5ef9e8249c05755344a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b9ee1cc734a78aaf343eea4e8a748cbf4a95510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9ee1cc734a78aaf343eea4e8a748cbf4a95510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9ee1cc734a78aaf343eea4e8a748cbf4a95510"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "b2950f7316036752883b2a4366932ec027c67d9b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "patch": "@@ -1,3 +1,11 @@\n+2012-09-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (error_print): Move increment out of the assert.\n+\t* interface.c (gfc_compare_derived_types): Add assert.\n+\t(get_expr_storage_size): Remove always-true logical condition.\n+\t* resolve.c (resolve_allocate_expr): Fix looping logic.\n+\t* target-memory.c (gfc_target_expr_size): Add assert.\n+\n 2012-09-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54594"}, {"sha": "4b061560c0e2c98ea8d15e9d1bdafc0b9a6f6cff", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "patch": "@@ -544,7 +544,8 @@ error_print (const char *type, const char *format0, va_list argp)\n \t  gcc_assert (pos >= 0);\n \t  while (ISDIGIT(*format))\n \t    format++;\n-\t  gcc_assert (*format++ == '$');\n+\t  gcc_assert (*format == '$');\n+\t  format++;\n \t}\n       else\n \tpos++;"}, {"sha": "88689aa47d611896ecc519a51cd2018a321efcdc", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "patch": "@@ -396,11 +396,12 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n   if (derived1 == derived2)\n     return 1;\n \n+  gcc_assert (derived1 && derived2);\n+\n   /* Special case for comparing derived types across namespaces.  If the\n      true names and module names are the same and the module name is\n      nonnull, then they are equal.  */\n-  if (derived1 != NULL && derived2 != NULL\n-      && strcmp (derived1->name, derived2->name) == 0\n+  if (strcmp (derived1->name, derived2->name) == 0\n       && derived1->module != NULL && derived2->module != NULL\n       && strcmp (derived1->module, derived2->module) == 0)\n     return 1;\n@@ -2267,8 +2268,7 @@ get_expr_storage_size (gfc_expr *e)\n \n \t    elements *= (end - start)/stride + 1L;\n \t  }\n-      else if (ref->type == REF_ARRAY && ref->u.ar.type == AR_FULL\n-\t       && ref->u.ar.as->lower && ref->u.ar.as->upper)\n+      else if (ref->type == REF_ARRAY && ref->u.ar.type == AR_FULL)\n \tfor (i = 0; i < ref->u.ar.as->rank; i++)\n \t  {\n \t    if (ref->u.ar.as->lower[i] && ref->u.ar.as->upper[i]"}, {"sha": "f67c07f8b7b987f399c8426d77c1a7ae444d2a04", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "patch": "@@ -7427,7 +7427,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\t\t \"statement at %L\", &e->where);\n \t      goto failure;\n \t    }\n-\t  break;\n+\t  continue;\n \t}\n \n       if (ar->dimen_type[i] == DIMEN_STAR && i == (ar->dimen + ar->codimen - 1)"}, {"sha": "7a55dcd05b4f3d1ea3555904664026d6212ce423", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6423ef3e00856eb88fb7fceb0f08b6068ddd926/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "patch": "@@ -125,9 +125,12 @@ gfc_target_expr_size (gfc_expr *e)\n \t/* Determine type size without clobbering the typespec for ISO C\n \t   binding types.  */\n \tgfc_typespec ts;\n+\tHOST_WIDE_INT size;\n \tts = e->ts;\n \ttype = gfc_typenode_for_spec (&ts);\n-\treturn int_size_in_bytes (type);\n+\tsize = int_size_in_bytes (type);\n+\tgcc_assert (size >= 0);\n+\treturn size;\n       }\n     default:\n       gfc_internal_error (\"Invalid expression in gfc_target_expr_size.\");"}]}