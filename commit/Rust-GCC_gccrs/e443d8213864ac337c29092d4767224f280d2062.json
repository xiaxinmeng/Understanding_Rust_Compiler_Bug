{"sha": "e443d8213864ac337c29092d4767224f280d2062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0M2Q4MjEzODY0YWMzMzdjMjkwOTJkNDc2NzIyNGYyODBkMjA2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-12T21:31:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-20T22:18:12Z"}, "message": "c++: Pseudo-destructor ends object lifetime.\n\nP0593R6 is mostly about a new object model whereby malloc and the like are\ntreated as implicitly starting the lifetime of whatever trivial types are\nnecessary to give the program well-defined semantics; that seems only\nrelevant to TBAA, and is not implemented here.\n\nThe paper also specifies that a pseudo-destructor call (a destructor call\nfor a non-class type) ends the lifetime of the object like a destructor call\nfor an object of class type, even though it doesn't call a destructor; this\npatch implements that change.\n\nThe paper was voted as a DR, so I'm applying this change to all standard\nlevels.  Like class end-of-life clobbers, it is controlled by\n-flifetime-dse.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (type_dependent_expression_p): A pseudo-dtor can be\n\tdependent.\n\t* semantics.c (finish_call_expr): Use build_trivial_dtor_call for\n\tpseudo-destructor.\n\t(finish_pseudo_destructor_expr): Leave type NULL for dependent arg.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/opt/flifetime-dse7.C: New test.", "tree": {"sha": "1ae6feb7361f7274835f0e8051befab2a5a83f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae6feb7361f7274835f0e8051befab2a5a83f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e443d8213864ac337c29092d4767224f280d2062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e443d8213864ac337c29092d4767224f280d2062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e443d8213864ac337c29092d4767224f280d2062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e443d8213864ac337c29092d4767224f280d2062/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812798917c59e95405a71b31ab37bd78c0f43f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812798917c59e95405a71b31ab37bd78c0f43f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812798917c59e95405a71b31ab37bd78c0f43f79"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "f9e80e5a1c37966bcd6c4b9b40eea5cd82065bc6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443d8213864ac337c29092d4767224f280d2062/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443d8213864ac337c29092d4767224f280d2062/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e443d8213864ac337c29092d4767224f280d2062", "patch": "@@ -26729,8 +26729,7 @@ type_dependent_expression_p (tree expression)\n     return true;\n \n   /* Some expression forms are never type-dependent.  */\n-  if (TREE_CODE (expression) == PSEUDO_DTOR_EXPR\n-      || TREE_CODE (expression) == SIZEOF_EXPR\n+  if (TREE_CODE (expression) == SIZEOF_EXPR\n       || TREE_CODE (expression) == ALIGNOF_EXPR\n       || TREE_CODE (expression) == AT_ENCODE_EXPR\n       || TREE_CODE (expression) == NOEXCEPT_EXPR"}, {"sha": "3096fe834336fc86acaece27328136d3f23ddf1e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443d8213864ac337c29092d4767224f280d2062/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443d8213864ac337c29092d4767224f280d2062/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e443d8213864ac337c29092d4767224f280d2062", "patch": "@@ -2707,12 +2707,16 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n     {\n       if (!vec_safe_is_empty (*args))\n \terror (\"arguments to destructor are not allowed\");\n-      /* Mark the pseudo-destructor call as having side-effects so\n-\t that we do not issue warnings about its use.  */\n-      result = build1 (NOP_EXPR,\n-\t\t       void_type_node,\n-\t\t       TREE_OPERAND (fn, 0));\n-      TREE_SIDE_EFFECTS (result) = 1;\n+      /* C++20/DR: If the postfix-expression names a pseudo-destructor (in\n+\t which case the postfix-expression is a possibly-parenthesized class\n+\t member access), the function call destroys the object of scalar type\n+\t denoted by the object expression of the class member access.  */\n+      tree ob = TREE_OPERAND (fn, 0);\n+      if (obvalue_p (ob))\n+\tresult = build_trivial_dtor_call (ob);\n+      else\n+\t/* No location to clobber.  */\n+\tresult = convert_to_void (ob, ICV_STATEMENT, complain);\n     }\n   else if (CLASS_TYPE_P (TREE_TYPE (fn)))\n     /* If the \"function\" is really an object of class type, it might\n@@ -2845,7 +2849,10 @@ finish_pseudo_destructor_expr (tree object, tree scope, tree destructor,\n \t}\n     }\n \n-  return build3_loc (loc, PSEUDO_DTOR_EXPR, void_type_node, object,\n+  tree type = (type_dependent_expression_p (object)\n+\t       ? NULL_TREE : void_type_node);\n+\n+  return build3_loc (loc, PSEUDO_DTOR_EXPR, type, object,\n \t\t     scope, destructor);\n }\n "}, {"sha": "4fe1eb062f4e55804f1c0a1c6347c39c6367f931", "filename": "gcc/testsuite/g++.dg/opt/flifetime-dse7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443d8213864ac337c29092d4767224f280d2062/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443d8213864ac337c29092d4767224f280d2062/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse7.C?ref=e443d8213864ac337c29092d4767224f280d2062", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-O3 -flifetime-dse\" }\n+// { dg-do run }\n+\n+template <class T>\n+void f()\n+{\n+  T t = 42;\n+  t.~T();\n+  if (t == 42) __builtin_abort();\n+}\n+\n+int main()\n+{\n+  f<int>();\n+}\n+"}]}