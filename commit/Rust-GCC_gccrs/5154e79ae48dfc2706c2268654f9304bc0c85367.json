{"sha": "5154e79ae48dfc2706c2268654f9304bc0c85367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1NGU3OWFlNDhkZmMyNzA2YzIyNjg2NTRmOTMwNGJjMGM4NTM2Nw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2001-06-22T16:42:33Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2001-06-22T16:42:33Z"}, "message": "optabs.c (emit_libcall_block): When using non-call exceptions, don't mark libcalls never throwing.\n\n2001-06-14  Andrew Haley  <aph@cambridge.redhat.com>\n\n        * optabs.c (emit_libcall_block): When using non-call exceptions,\n        don't mark libcalls never throwing.\n\nFrom-SVN: r43504", "tree": {"sha": "edd5601d31cd10bb0532bedfe5976ad18a4799bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edd5601d31cd10bb0532bedfe5976ad18a4799bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5154e79ae48dfc2706c2268654f9304bc0c85367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5154e79ae48dfc2706c2268654f9304bc0c85367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5154e79ae48dfc2706c2268654f9304bc0c85367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5154e79ae48dfc2706c2268654f9304bc0c85367/comments", "author": null, "committer": null, "parents": [{"sha": "8b8d3a3451f12827490a78130012f5f3bf28f23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8d3a3451f12827490a78130012f5f3bf28f23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8d3a3451f12827490a78130012f5f3bf28f23c"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "573da053303313cd42801a93183e3f39c4214fa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5154e79ae48dfc2706c2268654f9304bc0c85367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5154e79ae48dfc2706c2268654f9304bc0c85367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5154e79ae48dfc2706c2268654f9304bc0c85367", "patch": "@@ -1,3 +1,8 @@\n+2001-06-14  Andrew Haley  <aph@cambridge.redhat.com>\n+\n+\t* optabs.c (emit_libcall_block): When using non-call exceptions,\n+\tdon't mark libcalls never throwing.\n+\n 2001-06-21  Stan Shebs  <shebs@apple.com>\n \n \t* objc/objc-act.c (hash_init): Use xcalloc."}, {"sha": "a3e2682a65856f2a123f7dcfefdc44fa12fca230", "filename": "gcc/optabs.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5154e79ae48dfc2706c2268654f9304bc0c85367/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5154e79ae48dfc2706c2268654f9304bc0c85367/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5154e79ae48dfc2706c2268654f9304bc0c85367", "patch": "@@ -2820,23 +2820,36 @@ emit_libcall_block (insns, target, result, equiv)\n      into a MEM later.  Protect the libcall block from this change.  */\n   if (! REG_P (target) || REG_USERVAR_P (target))\n     target = gen_reg_rtx (GET_MODE (target));\n-\n+  \n+  /* If we're using non-call exceptions, a libcall corresponding to an\n+     operation that may trap may also trap.  */\n+  if (flag_non_call_exceptions && may_trap_p (equiv))\n+    {\n+      for (insn = insns; insn; insn = NEXT_INSN (insn))\n+\tif (GET_CODE (insn) == CALL_INSN)\n+\t  {\n+\t    rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\t    \n+\t    if (note != 0 && INTVAL (XEXP (note, 0)) <= 0)\n+\t      remove_note (insn, note);\n+\t  }\n+    }\n+  else\n   /* look for any CALL_INSNs in this sequence, and attach a REG_EH_REGION\n      reg note to indicate that this call cannot throw or execute a nonlocal\n      goto (unless there is already a REG_EH_REGION note, in which case\n      we update it).  */\n-\n-  for (insn = insns; insn; insn = NEXT_INSN (insn))\n-    if (GET_CODE (insn) == CALL_INSN)\n-      {\n-\trtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n-\n-\tif (note != 0)\n-\t  XEXP (note, 0) = GEN_INT (-1);\n-\telse\n-\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n-\t\t\t\t\t\tREG_NOTES (insn));\n-      }\n+    for (insn = insns; insn; insn = NEXT_INSN (insn))\n+      if (GET_CODE (insn) == CALL_INSN)\n+\t{\n+\t  rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\t\n+\t  if (note != 0)\n+\t    XEXP (note, 0) = GEN_INT (-1);\n+\t  else\n+\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n+\t\t\t\t\t\t  REG_NOTES (insn));\n+\t}\n \n   /* First emit all insns that set pseudos.  Remove them from the list as\n      we go.  Avoid insns that set pseudos which were referenced in previous"}]}