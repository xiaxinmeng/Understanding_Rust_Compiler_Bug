{"sha": "4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiNmQ3ZDc5ZDhkYzdjNjNlYzczMGU3ZWNkY2ZhOWY4ZjMxMzI5OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-03-16T16:05:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-03-16T16:05:45Z"}, "message": "gnu.ver: Add base destructors for stdexcept classes.\n\n2011-03-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/abi/pre/gnu.ver: Add base destructors for stdexcept classes.\n\t* testsuite/19_diagnostics/stdexcept.cc: New.\n\nFrom-SVN: r171049", "tree": {"sha": "d3868cf9ff85b2ebf56ac4cdbae508b4d647a4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3868cf9ff85b2ebf56ac4cdbae508b4d647a4e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/comments", "author": null, "committer": null, "parents": [{"sha": "0b0081eca46587e27c16abc633fd199832616243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0081eca46587e27c16abc633fd199832616243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0081eca46587e27c16abc633fd199832616243"}], "stats": {"total": 241, "additions": 241, "deletions": 0}, "files": [{"sha": "c63cf2f91579480e3e10336f032bb31492cba3ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "patch": "@@ -1,3 +1,8 @@\n+2011-03-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Add base destructors for stdexcept classes.\n+\t* testsuite/19_diagnostics/stdexcept.cc: New.\n+\n 2011-03-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/thread: Revert."}, {"sha": "f566efde75498e5a1526a677d3120c326587cb46", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "patch": "@@ -1221,6 +1221,14 @@ GLIBCXX_3.4.15 {\n     _ZNSt8__detail15_List_node_base11_M_transfer*;\n     _ZNSt8__detail15_List_node_base4swapERS0_S1_;\n \n+    _ZNSt11range_errorD2Ev;\n+    _ZNSt12domain_errorD2Ev;\n+    _ZNSt12length_errorD2Ev;\n+    _ZNSt12out_of_rangeD2Ev;\n+    _ZNSt14overflow_errorD2Ev;\n+    _ZNSt15underflow_errorD2Ev;\n+    _ZNSt16invalid_argumentD2Ev;\n+\n     _ZNSt11regex_errorD*;\n     _ZNKSt11regex_error4whatEv;\n     _ZTSSt11regex_error;"}, {"sha": "128f0a5b5446b71d019a4b356c535969a652760b", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexcept.cc", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc?ref=4db6d7d79d8dc7c63ec730e7ecdcfa9f8f313299", "patch": "@@ -0,0 +1,228 @@\n+// 2011-03-16 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2011\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  std::string s(\"error\");\n+\n+  try\n+    {\n+      logic_error e1(s);\n+      throw e1;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      domain_error e2(s);\n+      throw e2;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      invalid_argument e3(s);\n+      throw e3;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      length_error e4(s);\n+      throw e4;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      out_of_range e5(s);\n+      throw e5;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      runtime_error e6(s);\n+      throw e6;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      range_error e7(s);\n+      throw e7;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      overflow_error e8(s);\n+      throw e8;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      underflow_error e9(s);\n+      throw e9;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+}\n+\n+template<typename _Tp>\n+struct extra_error : public _Tp\n+{\n+  extra_error(const std::string& s) : _Tp(s) { }\n+};\n+\n+void test02()\n+{\n+  using namespace std;\n+  std::string s(\"error\");\n+\n+  try\n+    {\n+      extra_error<logic_error> e1(s);\n+      throw e1;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<domain_error> e2(s);\n+      throw e2;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<invalid_argument> e3(s);\n+      throw e3;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<length_error> e4(s);\n+      throw e4;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<out_of_range> e5(s);\n+      throw e5;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<runtime_error> e6(s);\n+      throw e6;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<range_error> e7(s);\n+      throw e7;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<overflow_error> e8(s);\n+      throw e8;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+\n+  try\n+    {\n+      extra_error<underflow_error> e9(s);\n+      throw e9;\n+    }\n+  catch(const exception& e)\n+    {\n+      s = e.what();\n+    }\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}