{"sha": "75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlNGUzNmRmZTEyZjc4ZWZhNjFjMDcxY2FmOTViYTlkNWY0ZjcyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T12:34:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T12:34:52Z"}, "message": "[multiple changes]\n\n2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb, sem_attr.adb, sem_ch13.adb: Minor reformatting.\n\n2016-07-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* lib.adb (Check_Same_Extended_Unit): Prevent looping forever.\n\t* gnatbind.adb: Disable some consistency checks in codepeer mode,\n\twhich are not needed.\n\n2016-07-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Check_Fixed_Point_Actual): Add a warning when\n\ta formal fixed point type is instantiated with a type that has\n\ta user-defined arithmetic operations, but the generic has no\n\tcorresponding formal functions. This is worth a warning because\n\tof the special semantics of fixed-point operators.\n\nFrom-SVN: r238043", "tree": {"sha": "1fb80ec7768e44a4088bfa55b4f75502ccd10a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb80ec7768e44a4088bfa55b4f75502ccd10a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/comments", "author": null, "committer": null, "parents": [{"sha": "1956beb8aa91181d614441e943a76fa7f7d8d51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1956beb8aa91181d614441e943a76fa7f7d8d51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1956beb8aa91181d614441e943a76fa7f7d8d51c"}], "stats": {"total": 145, "additions": 117, "deletions": 28}, "files": [{"sha": "c52781752d143cb5237cdf00008d80882e04d74c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -1,3 +1,21 @@\n+2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.adb, sem_ch13.adb: Minor reformatting.\n+\n+2016-07-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib.adb (Check_Same_Extended_Unit): Prevent looping forever.\n+\t* gnatbind.adb: Disable some consistency checks in codepeer mode,\n+\twhich are not needed.\n+\n+2016-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Fixed_Point_Actual): Add a warning when\n+\ta formal fixed point type is instantiated with a type that has\n+\ta user-defined arithmetic operations, but the generic has no\n+\tcorresponding formal functions. This is worth a warning because\n+\tof the special semantics of fixed-point operators.\n+\n 2016-07-06  Bob Duff  <duff@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute): Allow any expression of"}, {"sha": "04929b5aa575a2f6191c2bd7ffd12c52ae86a9c4", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -3009,18 +3009,19 @@ package body Exp_Attr is\n \n       when Attribute_Enum_Rep => Enum_Rep : declare\n          Expr : Node_Id;\n+\n       begin\n-         --  Get the expression, which is X for Enum_Type'Enum_Rep (X)\n-         --  or X'Enum_Rep.\n+         --  Get the expression, which is X for Enum_Type'Enum_Rep (X) or\n+         --  X'Enum_Rep.\n \n          if Is_Non_Empty_List (Exprs) then\n             Expr := First (Exprs);\n          else\n             Expr := Pref;\n          end if;\n \n-         --  If the expression is an enumeration literal, it is\n-         --  replaced by the literal value.\n+         --  If the expression is an enumeration literal, it is replaced by the\n+         --  literal value.\n \n          if Nkind (Expr) in N_Has_Entity\n            and then Ekind (Entity (Expr)) = E_Enumeration_Literal\n@@ -3029,8 +3030,8 @@ package body Exp_Attr is\n               Make_Integer_Literal (Loc, Enumeration_Rep (Entity (Expr))));\n \n          --  If this is a renaming of a literal, recover the representation\n-         --  of the original. If it renames an expression there is nothing\n-         --  to fold.\n+         --  of the original. If it renames an expression there is nothing to\n+         --  fold.\n \n          elsif Nkind (Expr) in N_Has_Entity\n            and then Ekind (Entity (Expr)) = E_Constant\n@@ -3056,8 +3057,7 @@ package body Exp_Attr is\n          --  might be an illegal conversion.\n \n          else\n-            Rewrite (N,\n-              OK_Convert_To (Typ, Relocate_Node (Expr)));\n+            Rewrite (N, OK_Convert_To (Typ, Relocate_Node (Expr)));\n          end if;\n \n          Set_Etype (N, Typ);"}, {"sha": "5135377382250a76d039329dc0d441dae2ce52bf", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -855,12 +855,15 @@ begin\n          end;\n       end if;\n \n-      --  Perform consistency and correctness checks\n-\n-      Check_Duplicated_Subunits;\n-      Check_Versions;\n-      Check_Consistency;\n-      Check_Configuration_Consistency;\n+      --  Perform consistency and correctness checks. Disable these in CodePeer\n+      --  mode where we want to be more flexible.\n+\n+      if not CodePeer_Mode then\n+         Check_Duplicated_Subunits;\n+         Check_Versions;\n+         Check_Consistency;\n+         Check_Configuration_Consistency;\n+      end if;\n \n       --  List restrictions that could be applied to this partition\n "}, {"sha": "c4edc7f1ebbf5240a5400e28d6e0d08ab40635ca", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -38,6 +38,7 @@ with Csets;    use Csets;\n with Einfo;    use Einfo;\n with Fname;    use Fname;\n with Nlists;   use Nlists;\n+with Opt;      use Opt;\n with Output;   use Output;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n@@ -259,18 +260,22 @@ package body Lib is\n    ------------------------------\n \n    function Check_Same_Extended_Unit (S1, S2 : Source_Ptr) return SEU_Result is\n-      Sloc1  : Source_Ptr;\n-      Sloc2  : Source_Ptr;\n-      Sind1  : Source_File_Index;\n-      Sind2  : Source_File_Index;\n-      Inst1  : Source_Ptr;\n-      Inst2  : Source_Ptr;\n-      Unum1  : Unit_Number_Type;\n-      Unum2  : Unit_Number_Type;\n-      Unit1  : Node_Id;\n-      Unit2  : Node_Id;\n-      Depth1 : Nat;\n-      Depth2 : Nat;\n+      Max_Iterations : constant Nat := Maximum_Instantiations * 2;\n+      --  Limit to prevent a potential infinite loop\n+\n+      Counter : Nat := 0;\n+      Depth1  : Nat;\n+      Depth2  : Nat;\n+      Inst1   : Source_Ptr;\n+      Inst2   : Source_Ptr;\n+      Sind1   : Source_File_Index;\n+      Sind2   : Source_File_Index;\n+      Sloc1   : Source_Ptr;\n+      Sloc2   : Source_Ptr;\n+      Unit1   : Node_Id;\n+      Unit2   : Node_Id;\n+      Unum1   : Unit_Number_Type;\n+      Unum2   : Unit_Number_Type;\n \n    begin\n       if S1 = No_Location or else S2 = No_Location then\n@@ -435,7 +440,13 @@ package body Lib is\n          return No;\n \n          <<Continue>>\n-            null;\n+         Counter := Counter + 1;\n+\n+         --  Prevent looping forever\n+\n+         if Counter > Max_Iterations then\n+            raise Program_Error;\n+         end if;\n       end loop;\n    end Check_Same_Extended_Unit;\n "}, {"sha": "3dec30ab0ed256656fecf70a92da0600e9caf42c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -3742,6 +3742,7 @@ package body Sem_Attr is\n             Check_E1;\n             Check_Discrete_Type;\n             Resolve (E1, P_Base_Type);\n+\n          elsif not Is_Discrete_Type (Etype (P)) then\n             Error_Attr_P (\"prefix of % attribute must be of discrete type\");\n          end if;"}, {"sha": "d600d277e21e81e8fc29477ee92e7c66c6b63084", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -1105,6 +1105,12 @@ package body Sem_Ch12 is\n       --  In Ada 2005, indicates partial parameterization of a formal\n       --  package. As usual an other association must be last in the list.\n \n+      procedure Check_Fixed_Point_Actual (Actual : Node_Id);\n+      --  Warn if an actual fixed-point type has user-defined arithmetic\n+      --  operations, but there is no corresponding formal in the generic,\n+      --  in which case the predefined operations will be used. This merits\n+      --  a warning because of the special semantics of fixed point ops.\n+\n       procedure Check_Overloaded_Formal_Subprogram (Formal : Entity_Id);\n       --  Apply RM 12.3(9): if a formal subprogram is overloaded, the instance\n       --  cannot have a named association for it. AI05-0025 extends this rule\n@@ -1186,6 +1192,52 @@ package body Sem_Ch12 is\n          end loop;\n       end Check_Overloaded_Formal_Subprogram;\n \n+      -------------------------------\n+      --  Check_Fixed_Point_Actual --\n+      -------------------------------\n+\n+      procedure Check_Fixed_Point_Actual (Actual : Node_Id) is\n+         Typ    : constant Entity_Id := Entity (Actual);\n+         Prims  : constant Elist_Id  := Collect_Primitive_Operations (Typ);\n+         Elem   : Elmt_Id;\n+         Formal : Node_Id;\n+\n+      begin\n+         --  Locate primitive operations of the type that are arithmetic\n+         --  operations.\n+\n+         Elem := First_Elmt (Prims);\n+         while Present (Elem) loop\n+            if Nkind (Node (Elem)) = N_Defining_Operator_Symbol then\n+\n+               --  Check whether the generic unit has a formal subprogram of\n+               --  the same name. This does not check types but is good enough\n+               --  to justify a warning.\n+\n+               Formal := First_Non_Pragma (Formals);\n+               while Present (Formal) loop\n+                  if Nkind (Formal) = N_Formal_Concrete_Subprogram_Declaration\n+                    and then Chars (Defining_Entity (Formal)) =\n+                               Chars (Node (Elem))\n+                  then\n+                     exit;\n+                  end if;\n+\n+                  Next (Formal);\n+               end loop;\n+\n+               if No (Formal) then\n+                  Error_Msg_Sloc := Sloc (Node (Elem));\n+                  Error_Msg_NE\n+                    (\"?instance does not use primitive operation&#\",\n+                      Actual, Node (Elem));\n+               end if;\n+            end if;\n+\n+            Next_Elmt (Elem);\n+         end loop;\n+      end Check_Fixed_Point_Actual;\n+\n       -------------------------------\n       -- Has_Fully_Defined_Profile --\n       -------------------------------\n@@ -1613,6 +1665,10 @@ package body Sem_Ch12 is\n                           (Formal, Match, Analyzed_Formal, Assoc),\n                         Assoc);\n \n+                     if Is_Fixed_Point_Type (Entity (Match)) then\n+                        Check_Fixed_Point_Actual (Match);\n+                     end if;\n+\n                      --  An instantiation is a freeze point for the actuals,\n                      --  unless this is a rewritten formal package, or the\n                      --  formal is an Ada 2012 formal incomplete type."}, {"sha": "ccb323325f300f42bbe787827d91073e2ba6da9a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e4e36dfe12f78efa61c071caf95ba9d5f4f722/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=75e4e36dfe12f78efa61c071caf95ba9d5f4f722", "patch": "@@ -1937,7 +1937,7 @@ package body Sem_Ch13 is\n             if not Implementation_Defined_Aspect (A_Id) then\n                Error_Msg_Name_1 := Nam;\n \n-               --  Not allowed for renaming declarations. Examine original\n+               --  Not allowed for renaming declarations. Examine the original\n                --  node because a subprogram renaming may have been rewritten\n                --  as a body.\n "}]}