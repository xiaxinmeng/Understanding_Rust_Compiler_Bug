{"sha": "c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzYTc4ZDhmOGNhYzMwMTllN2JjNjdiNmFlMzlmNGVkYzYxY2YyYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-02T22:11:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-03T03:15:54Z"}, "message": "c++: Push parms when late parsing default args\n\nIn this testcase we weren't catching the error in A::f because the parameter\n'I' wasn't in scope, so the default argument for 'b' found the global\ntypedef I.  Fixed by pushing the parms before parsing.  This is a bit\ncomplicated because pushdecl clears DECL_CHAIN; do_push_parm_decls deals\nwith this by nreversing first, but that doesn't work here because we only\nwant to push them one at a time; if we pushed all of them before parsing,\nwe'd wrongly reject A::g.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_primary_expression): Distinguish\n\tparms from vars in error.\n\t(cp_parser_late_parsing_default_args): Pushdecl parms\n\tas we go.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/parse/defarg17.C: New test.", "tree": {"sha": "a91b22d64976926d88b622aa66919ff41cff528e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a91b22d64976926d88b622aa66919ff41cff528e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f97a226a0d8b315aa1a0129df957a8bb3fdf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f97a226a0d8b315aa1a0129df957a8bb3fdf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f97a226a0d8b315aa1a0129df957a8bb3fdf65"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "ef4d73d61610ea33e2e6fd8a75ddc0a8d4157dc0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "patch": "@@ -5814,8 +5814,11 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    if ((parser->local_variables_forbidden_p & LOCAL_VARS_FORBIDDEN)\n \t\t&& local_variable_p (decl))\n \t      {\n-\t\terror_at (id_expression.get_location (),\n-\t\t\t  \"local variable %qD may not appear in this context\",\n+\t\tconst char *msg\n+\t\t  = (TREE_CODE (decl) == PARM_DECL\n+\t\t     ? _(\"parameter %qD may not appear in this context\")\n+\t\t     : _(\"local variable %qD may not appear in this context\"));\n+\t\terror_at (id_expression.get_location (), msg,\n \t\t\t  decl.get_value ());\n \t\treturn error_mark_node;\n \t      }\n@@ -30551,7 +30554,6 @@ static void\n cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n {\n   unsigned char saved_local_variables_forbidden_p;\n-  tree parm, parmdecl;\n \n   /* While we're parsing the default args, we might (due to the\n      statement expression extension) encounter more classes.  We want\n@@ -30568,18 +30570,28 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n \n   begin_scope (sk_function_parms, fn);\n \n-  for (parm = TYPE_ARG_TYPES (TREE_TYPE (fn)),\n-\t parmdecl = DECL_ARGUMENTS (fn);\n+  /* Gather the PARM_DECLs into a vec so we can keep track of them when\n+     pushdecl clears DECL_CHAIN.  */\n+  releasing_vec parms;\n+  for (tree parmdecl = DECL_ARGUMENTS (fn); parmdecl;\n+       parmdecl = DECL_CHAIN (parmdecl))\n+    vec_safe_push (parms, parmdecl);\n+\n+  tree parm = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+  for (int i = 0;\n        parm && parm != void_list_node;\n        parm = TREE_CHAIN (parm),\n-\t parmdecl = DECL_CHAIN (parmdecl))\n+\t ++i)\n     {\n       tree default_arg = TREE_PURPOSE (parm);\n       tree parsed_arg;\n       vec<tree, va_gc> *insts;\n       tree copy;\n       unsigned ix;\n \n+      tree parmdecl = parms[i];\n+      pushdecl (parmdecl);\n+\n       if (!default_arg)\n \tcontinue;\n \n@@ -30602,6 +30614,14 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n \n   pop_bindings_and_leave_scope ();\n \n+  /* Restore DECL_CHAINs after clobbering by pushdecl.  */\n+  parm = NULL_TREE;\n+  for (int i = parms->length () - 1; i >= 0; --i)\n+    {\n+      DECL_CHAIN (parms[i]) = parm;\n+      parm = parms[i];\n+    }\n+\n   pop_defarg_context ();\n \n   /* Make sure no default arg is missing.  */"}, {"sha": "c39a819c72328c367c6610b4b8487466f6b32daa", "filename": "gcc/testsuite/g++.dg/parse/defarg17.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg17.C?ref=c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "patch": "@@ -0,0 +1,11 @@\n+typedef int I;\n+\n+int f(float I = 0.0, int b = I(2)); // { dg-error \"parameter\" }\n+int g(int b = I(2), float I = 0.0);\n+\n+struct A\n+{\n+  int f(float I = 0.0, int b = I(2)); // { dg-error \"parameter\" }\n+  int g(int b = I(2), float I = 0.0);\n+};\n+"}]}