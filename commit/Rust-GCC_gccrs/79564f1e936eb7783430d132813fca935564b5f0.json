{"sha": "79564f1e936eb7783430d132813fca935564b5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1NjRmMWU5MzZlYjc3ODM0MzBkMTMyODEzZmNhOTM1NTY0YjVmMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-12-01T21:23:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-12-01T21:23:55Z"}, "message": "i386.md (SWI124): Rename from CRC32MODE.\n\n\t* config/i386/i386.md (SWI124): Rename from CRC32MODE.\n\t(crc32modesuffix): Remove.\n\t(crc32modeconstraint): Ditto.\n\t(sse4_2_crc32<mode>): Update for renamed mode iterator.  Use\n\timodesuffix instead of crc32modesuffix and <r>m instead of\n\tcrc32modeconstraint.\n\nFrom-SVN: r154882", "tree": {"sha": "cd2a35d51341a26bec15a58b7b93a381a377655c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd2a35d51341a26bec15a58b7b93a381a377655c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79564f1e936eb7783430d132813fca935564b5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79564f1e936eb7783430d132813fca935564b5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79564f1e936eb7783430d132813fca935564b5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79564f1e936eb7783430d132813fca935564b5f0/comments", "author": null, "committer": null, "parents": [{"sha": "24b3ff2c53806d3ddf1b93dcc04dfc538597effa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b3ff2c53806d3ddf1b93dcc04dfc538597effa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b3ff2c53806d3ddf1b93dcc04dfc538597effa"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "08a09724468b90425fe7dcd52cf954516d7d8b94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79564f1e936eb7783430d132813fca935564b5f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79564f1e936eb7783430d132813fca935564b5f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79564f1e936eb7783430d132813fca935564b5f0", "patch": "@@ -1,3 +1,12 @@\n+2009-12-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (SWI124): Rename from CRC32MODE.\n+\t(crc32modesuffix): Remove.\n+\t(crc32modeconstraint): Ditto.\n+\t(sse4_2_crc32<mode>): Update for renamed mode iterator.  Use\n+\timodesuffix instead of crc32modesuffix and <r>m instead of\n+\tcrc32modeconstraint.\n+\n 2009-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/42234\n@@ -72,7 +81,7 @@\n \n 2009-12-01  Martin Jambor  <mjambor@suse.cz>\n \n-        * cgraph.h (struct cgraph_edge): Reorder fields.  Make loop_nest\n+\t* cgraph.h (struct cgraph_edge): Reorder fields.  Make loop_nest\n \tunsigned short int.\n \t* ipa-prop.h (struct ipa_param_call_note): Likewise.\n \t* ipa-prop.c (ipa_note_param_call): Initialize note->loop_nest.\n@@ -167,13 +176,13 @@\n \tvec_select form to vec_duplicate form.\n \t(*sse2_interleave_highv2df, sse2_interleave_lowv2df): Use\n \tix86_vec_interleave_v2df_operator_ok.\n-\t(avx_movddup256, avx_unpcklpd256): Change to expanders, merge into ... \n+\t(avx_movddup256, avx_unpcklpd256): Change to expanders, merge into ...\n \t(*avx_unpcklpd256): ... here.\n \t(*vec_dupv4si_avx): New.\n \t(*vec_dupv2di_avx): Add movddup alternative.\n \t(*vec_dupv2di_sse3): New.\n \t(vec_dup<AVX256MODE24P>): Replace avx_vbroadcasts<AVXMODEF4P> and\n-\tavx_vbroadcastss256; represent with vec_duplicate instead of \n+\tavx_vbroadcastss256; represent with vec_duplicate instead of\n \tnested vec_concat operations.\n \t(avx_vbroadcastf128_<mode>): Rename from\n \tavx_vbroadcastf128_p<avxmodesuffixf2c>256.\n@@ -345,7 +354,8 @@\n \t(cgraph_expand_function): Handle thunks.\n \t(thunk_adjust): New.\n \t(init_lowered_empty_function): New.\n-\t* cp-objcp-common.h (LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS): Remove.\n+\t* cp-objcp-common.h (LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS):\n+\tRemove.\n \t* lto-cgraph.c (lto_output_node): Stream thunk info.\n \t(input_node): Likewise.\n \t* langhooks.h (lang_hooks_for_callgraph): Remove emit_associated_thunks.\n@@ -459,7 +469,7 @@\n \n 2009-11-28  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n \n-\t* config/avr/avr.h (ASM_OUTPUT_EXTERNAL): Add. \n+\t* config/avr/avr.h (ASM_OUTPUT_EXTERNAL): Add.\n \n 2009-11-28  David Binderman  <dcb314@hotmail.com>\n \n@@ -479,9 +489,8 @@\n \n 2009-11-27  Nick Clifton  <nickc@redhat.com>\n \n-\t* longlong.h (count_leading_zeros): Define macro for stormy16\n-\ttarget.\n-\t(COUNT_LEADING_ZEROS_0): Likewise.\t\n+\t* longlong.h (count_leading_zeros): Define macro for stormy16 target.\n+\t(COUNT_LEADING_ZEROS_0): Likewise.\n \t* config/stormy16/stormy16-lib2.c: Arrange for separate\n \tcompilation of each function.\n \t(__ffshi2): New function.\n@@ -533,8 +542,7 @@\n \t[SUPPORTS_WEAK && GTHREAD_USE_WEAK] (__gthread_active_p): Use\n \t__extension__ to allow cast from function pointer to object\n \tpointer in C++.\n-\t* doc/install.texi (--enable-threads): Clarify use of Solaris\n-\tthreads.\n+\t* doc/install.texi (--enable-threads): Clarify use of Solaris threads.\n \n 2009-11-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -573,8 +581,7 @@\n \n 2009-11-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* emit-rtl.c (next_active_insn, prev_active_insn): Correct\n-\tcomment.\n+\t* emit-rtl.c (next_active_insn, prev_active_insn): Correct comment.\n \n 2009-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -781,7 +788,7 @@\n \t(struct builtin_description) <CODE_FOR_avx_vzeroupper_rex64>:\n \tRemove initailization.\n \t<CODE_FOR_avx_vzeroupper>: Unconditionally initialize here.\n-\t\n+\n 2009-11-25  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (consttable_4): Handle (high ...)."}, {"sha": "851061dcd8db99d86203fd353e2e3aa64a84142d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79564f1e936eb7783430d132813fca935564b5f0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79564f1e936eb7783430d132813fca935564b5f0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=79564f1e936eb7783430d132813fca935564b5f0", "patch": "@@ -747,6 +747,9 @@\n ;; All single word integer modes.\n (define_mode_iterator SWI [QI HI SI (DI \"TARGET_64BIT\")])\n \n+;; Single word integer modes without DImode.\n+(define_mode_iterator SWI124 [QI HI SI])\n+\n ;; Single word integer modes without QImode.\n (define_mode_iterator SWI248 [HI SI (DI \"TARGET_64BIT\")])\n \n@@ -21169,18 +21172,14 @@\n   }\n   [(set_attr \"type\" \"multi\")])\n \n-(define_mode_iterator CRC32MODE [QI HI SI])\n-(define_mode_attr crc32modesuffix [(QI \"{b}\") (HI \"{w}\") (SI \"{l}\")])\n-(define_mode_attr crc32modeconstraint [(QI \"qm\") (HI \"rm\") (SI \"rm\")])\n-\n (define_insn \"sse4_2_crc32<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(match_operand:SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:CRC32MODE 2 \"nonimmediate_operand\" \"<crc32modeconstraint>\")]\n+\t   (match_operand:SWI124 2 \"nonimmediate_operand\" \"<r>m\")]\n \t  UNSPEC_CRC32))]\n   \"TARGET_SSE4_2 || TARGET_CRC32\"\n-  \"crc32<crc32modesuffix>\\t{%2, %0|%0, %2}\"\n+  \"crc32{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")"}]}