{"sha": "21c7aab09805d0c8c7695c8a69c8715d673a739a", "node_id": "C_kwDOANBUbNoAKDIxYzdhYWIwOTgwNWQwYzhjNzY5NWM4YTY5Yzg3MTVkNjczYTczOWE", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-12-21T04:27:33Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-08T15:14:25Z"}, "message": "Fix middle-end/103645: empty struct store not removed when using compound literal\n\nFor compound literals empty struct stores are not removed as they go down a\ndifferent path of the gimplifier; trying to optimize the init constructor.\nThis fixes the problem by not adding the gimple assignment at the end\nof gimplify_init_constructor if it was an empty type.\n\nNote this updates gcc.dg/pr87052.c where we had:\nconst char d[0] = { };\nAnd was expecting a store to d but after this, there is no store\nas the decl's type is zero in size.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR middle-end/103645\n\t* gimplify.cc (gimplify_init_constructor): Don't build/add\n\tgimple assignment of an empty type.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/pr87052.c: Update d var to expect nothing.", "tree": {"sha": "a382ed19535fe9b35a9268a7460f9680369803c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a382ed19535fe9b35a9268a7460f9680369803c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c7aab09805d0c8c7695c8a69c8715d673a739a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7aab09805d0c8c7695c8a69c8715d673a739a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c7aab09805d0c8c7695c8a69c8715d673a739a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7aab09805d0c8c7695c8a69c8715d673a739a/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5471f55f001af412e1125b04972ebaab9d4f7337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5471f55f001af412e1125b04972ebaab9d4f7337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5471f55f001af412e1125b04972ebaab9d4f7337"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "f0fbdb48012b08f29da51327fe9ed26757aa734b", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7aab09805d0c8c7695c8a69c8715d673a739a/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7aab09805d0c8c7695c8a69c8715d673a739a/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=21c7aab09805d0c8c7695c8a69c8715d673a739a", "patch": "@@ -5488,8 +5488,11 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   if (ret == GS_ERROR)\n     return GS_ERROR;\n   /* If we have gimplified both sides of the initializer but have\n-     not emitted an assignment, do so now.  */\n-  if (*expr_p)\n+     not emitted an assignment, do so now.   */\n+  if (*expr_p\n+      /* If the type is an empty type, we don't need to emit the\n+\t assignment. */\n+      && !is_empty_type (TREE_TYPE (TREE_OPERAND (*expr_p, 0))))\n     {\n       tree lhs = TREE_OPERAND (*expr_p, 0);\n       tree rhs = TREE_OPERAND (*expr_p, 1);"}, {"sha": "796fe6440c174a9816678e6ca4181c48f0ea6032", "filename": "gcc/testsuite/gcc.dg/pr87052.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7aab09805d0c8c7695c8a69c8715d673a739a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7aab09805d0c8c7695c8a69c8715d673a739a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c?ref=21c7aab09805d0c8c7695c8a69c8715d673a739a", "patch": "@@ -23,8 +23,7 @@ void test (void)\n \n   const char d[0] = { };\n \n-  /* Expect the following:\n-     d = \"\"; */\n+  /* Expect nothing.  */\n \n   const char e[0] = \"\";\n \n@@ -36,6 +35,7 @@ void test (void)\n /* { dg-final { scan-tree-dump-times \"a = \\\"\\\\\\\\x00ab\\\";\" 1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"b = \\\"a\\\\\\\\x00bc\\\";\"  1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"c = \\\"\\\";\"  1 \"gimple\" } }\n-   { dg-final { scan-tree-dump-times \"d = { *};\"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"d = \"  1 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"d = {CLOBBER\\\\(eol\\\\)}\"  1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"e = \"  1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"e = {CLOBBER\\\\(eol\\\\)}\"  1 \"gimple\" } }  */"}]}