{"sha": "c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxMjllMmQ0ODljYzBhYjQxOWM1OGM0Zjg0NTE4OThjMmI1ZTNhZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-19T09:21:35Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-18T08:37:40Z"}, "message": "Use startswith in targets.\n\ngcc/ChangeLog:\n\n\t* common/config/aarch64/aarch64-common.c (aarch64_parse_extension):\n\tUse startswith function instead of strncmp.\n\t* common/config/bfin/bfin-common.c (bfin_handle_option): Likewise.\n\t* common/config/riscv/riscv-common.c (riscv_subset_list::parse): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc (parse_type): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_process_one_target_attr): Likewise.\n\t* config/alpha/alpha.c (alpha_elf_section_type_flags): Likewise.\n\t* config/arm/aarch-common.c (arm_md_asm_adjust): Likewise.\n\t* config/arm/arm.c (arm_file_start): Likewise.\n\t(arm_valid_target_attribute_rec): Likewise.\n\t(thumb1_md_asm_adjust): Likewise.\n\t* config/arm/driver-arm.c (host_detect_local_cpu): Likewise.\n\t* config/avr/avr.c (STR_PREFIX_P): Likewise.\n\t(avr_set_current_function): Likewise.\n\t(avr_handle_addr_attribute): Likewise.\n\t(avr_asm_output_aligned_decl_common): Likewise.\n\t(avr_asm_named_section): Likewise.\n\t(avr_section_type_flags): Likewise.\n\t(avr_asm_select_section): Likewise.\n\t* config/c6x/c6x.c (c6x_in_small_data_p): Likewise.\n\t(c6x_section_type_flags): Likewise.\n\t* config/darwin-c.c (darwin_cfstring_ref_p): Likewise.\n\t(darwin_objc_declare_unresolved_class_reference): Likewise.\n\t(darwin_objc_declare_class_definition): Likewise.\n\t* config/darwin.c (indirect_data): Likewise.\n\t(darwin_encode_section_info): Likewise.\n\t(darwin_objc2_section): Likewise.\n\t(darwin_objc1_section): Likewise.\n\t(machopic_select_section): Likewise.\n\t(darwin_globalize_label): Likewise.\n\t(darwin_label_is_anonymous_local_objc_name): Likewise.\n\t(darwin_asm_named_section): Likewise.\n\t(darwin_asm_output_dwarf_offset): Likewise.\n\t* config/frv/frv.c (frv_string_begins_with): Likewise.\n\t(frv_in_small_data_p): Likewise.\n\t* config/gcn/mkoffload.c (STR): Likewise.\n\t(main): Likewise.\n\t* config/i386/i386-builtins.c (get_builtin_code_for_version): Likewise.\n\t* config/i386/i386-options.c (ix86_option_override_internal): Likewise.\n\t* config/i386/i386.c (x86_64_elf_section_type_flags): Likewise.\n\t(ix86_md_asm_adjust): Likewise.\n\t* config/i386/intelmic-mkoffload.c (STR): Likewise.\n\t* config/i386/winnt.c (i386_pe_asm_named_section): Likewise.\n\t(i386_pe_file_end): Likewise.\n\t* config/ia64/ia64.c (ia64_in_small_data_p): Likewise.\n\t(ia64_section_type_flags): Likewise.\n\t* config/mips/driver-native.c (host_detect_local_cpu): Likewise.\n\t* config/mips/mips.c (mips_handle_interrupt_attr): Likewise.\n\t(mips16_stub_function_p): Likewise.\n\t(mips_function_rodata_section): Likewise.\n\t* config/msp430/msp430.c (msp430_mcu_name): Likewise.\n\t(msp430_function_section): Likewise.\n\t(msp430_section_type_flags): Likewise.\n\t(msp430_expand_helper): Likewise.\n\t* config/nios2/nios2.c (nios2_small_section_name_p): Likewise.\n\t(nios2_valid_target_attribute_rec): Likewise.\n\t* config/nvptx/mkoffload.c (process): Likewise.\n\t(STR): Likewise.\n\t* config/pa/som.h: Likewise.\n\t* config/pdp11/pdp11.c (pdp11_output_ident): Likewise.\n\t* config/riscv/riscv.c (riscv_elf_select_rtx_section): Likewise.\n\t* config/rs6000/rs6000.c (VTABLE_NAME_P): Likewise.\n\t(rs6000_inner_target_options): Likewise.\n\t* config/s390/driver-native.c (s390_host_detect_local_cpu): Likewise.\n\t* config/sparc/driver-sparc.c (host_detect_local_cpu): Likewise.\n\t* config/vax/vax.c (vax_output_int_move): Likewise.\n\t* config/vms/vms-ld.c (startswith): Likewise.\n\t(process_args): Likewise.\n\t(main): Likewise.\n\t* config/vms/vms.c: Likewise.", "tree": {"sha": "226825f086944da04ba34474db74fd9d9d67da07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226825f086944da04ba34474db74fd9d9d67da07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81704b359283bb54696755ead881ab04136da94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81704b359283bb54696755ead881ab04136da94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81704b359283bb54696755ead881ab04136da94"}], "stats": {"total": 420, "additions": 199, "deletions": 221}, "files": [{"sha": "6d200a186604be2028b19ee9691e7bbf4a7be9c2", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -219,7 +219,7 @@ aarch64_parse_extension (const char *str, uint64_t *isa_flags,\n       else\n \tlen = strlen (str);\n \n-      if (len >= 2 && strncmp (str, \"no\", 2) == 0)\n+      if (len >= 2 && startswith (str, \"no\"))\n \t{\n \t  adding_ext = 0;\n \t  len -= 2;"}, {"sha": "a3ee4b5544c180bbadecad1d0ea074c25fb4d375", "filename": "gcc/common/config/bfin/bfin-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -313,7 +313,7 @@ bfin_handle_option (struct gcc_options *opts,\n \ti = 0;\n \twhile ((p = bfin_cpus[i].name) != NULL)\n \t  {\n-\t    if (strncmp (arg, p, strlen (p)) == 0)\n+\t    if (startswith (arg, p))\n \t      break;\n \t    i++;\n \t  }"}, {"sha": "d17bea687e0f5c31a3f8c544e21276832081dfe0", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -804,12 +804,12 @@ riscv_subset_list::parse (const char *arch, location_t loc)\n   riscv_subset_list *subset_list = new riscv_subset_list (arch, loc);\n   riscv_subset_t *itr;\n   const char *p = arch;\n-  if (strncmp (p, \"rv32\", 4) == 0)\n+  if (startswith (p, \"rv32\"))\n     {\n       subset_list->m_xlen = 32;\n       p += 4;\n     }\n-  else if (strncmp (p, \"rv64\", 4) == 0)\n+  else if (startswith (p, \"rv64\"))\n     {\n       subset_list->m_xlen = 64;\n       p += 4;"}, {"sha": "2cc3fbacbac72b8508d8ab8e7abbcf2e5c5382ed", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -191,12 +191,12 @@ parse_type (const function_instance &instance, const char *&format)\n \n   if (ch == 'e')\n     {\n-      if (strncmp (format, \"pattern\", 7) == 0)\n+      if (startswith (format, \"pattern\"))\n \t{\n \t  format += 7;\n \t  return acle_svpattern;\n \t}\n-      if (strncmp (format, \"prfop\", 5) == 0)\n+      if (startswith (format, \"prfop\"))\n \t{\n \t  format += 5;\n \t  return acle_svprfop;"}, {"sha": "08356466e56c3d0585b33a5783f5e98b9276e01d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -17377,7 +17377,7 @@ aarch64_process_one_target_attr (char *arg_str)\n   if (*str_to_check == '+')\n     return aarch64_handle_attr_isa_flags (str_to_check);\n \n-  if (len > 3 && strncmp (str_to_check, \"no-\", 3) == 0)\n+  if (len > 3 && startswith (str_to_check, \"no-\"))\n     {\n       invert = true;\n       str_to_check += 3;"}, {"sha": "c702e683c319e1fc77c6a4ac043305096c08c5ab", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -9457,11 +9457,11 @@ alpha_elf_section_type_flags (tree decl, const char *name, int reloc)\n   unsigned int flags = 0;\n \n   if (strcmp (name, \".sdata\") == 0\n-      || strncmp (name, \".sdata.\", 7) == 0\n-      || strncmp (name, \".gnu.linkonce.s.\", 16) == 0\n+      || startswith (name, \".sdata.\")\n+      || startswith (name, \".gnu.linkonce.s.\")\n       || strcmp (name, \".sbss\") == 0\n-      || strncmp (name, \".sbss.\", 6) == 0\n-      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n+      || startswith (name, \".sbss.\")\n+      || startswith (name, \".gnu.linkonce.sb.\"))\n     flags = SECTION_SMALL;\n \n   flags |= default_section_type_flags (decl, name, reloc);"}, {"sha": "0dbdc56f542b788c33b1a392fcf7c23207d4b309", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -542,7 +542,7 @@ arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n     {\n       const char *con = constraints[i];\n-      if (strncmp (con, \"=@cc\", 4) != 0)\n+      if (!startswith (con, \"=@cc\"))\n \tcontinue;\n       con += 4;\n       if (strchr (con, ',') != NULL)"}, {"sha": "28cfd81cca7ca5d8c04d0e9e455a3219dc4f2e83", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -28169,7 +28169,7 @@ arm_file_start (void)\n \t  else\n \t    arm_print_asm_arch_directives ();\n \t}\n-      else if (strncmp (arm_active_target.core_name, \"generic\", 7) == 0)\n+      else if (startswith (arm_active_target.core_name, \"generic\"))\n \t{\n \t  asm_fprintf (asm_out_file, \"\\t.arch %s\\n\",\n \t\t       arm_active_target.core_name + 8);\n@@ -33054,7 +33054,7 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n       else if (!strcmp (q, \"general-regs-only\"))\n \topts->x_target_flags |= MASK_GENERAL_REGS_ONLY;\n \n-      else if (!strncmp (q, \"fpu=\", 4))\n+      else if (startswith (q, \"fpu=\"))\n \t{\n \t  int fpu_index;\n \t  if (! opt_enum_arg_to_value (OPT_mfpu_, q + 4,\n@@ -33073,7 +33073,7 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n \t    }\n \t  opts->x_arm_fpu_index = (enum fpu_type) fpu_index;\n \t}\n-      else if (!strncmp (q, \"arch=\", 5))\n+      else if (startswith (q, \"arch=\"))\n \t{\n \t  char *arch = q + 5;\n \t  const arch_option *arm_selected_arch\n@@ -34105,7 +34105,7 @@ thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t\t      HARD_REG_SET & /*clobbered_regs*/)\n {\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n-    if (strncmp (constraints[i], \"=@cc\", 4) == 0)\n+    if (startswith (constraints[i], \"=@cc\"))\n       {\n \tsorry (\"asm flags not supported in thumb1 mode\");\n \tbreak;"}, {"sha": "247eab38780b3705bf07404d2891013d6da127b9", "filename": "gcc/config/arm/driver-arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fdriver-arm.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -82,7 +82,7 @@ host_detect_local_cpu (int argc, const char **argv)\n   while (fgets (buf, sizeof (buf), f) != NULL)\n     {\n       /* Find the vendor table associated with this implementer.  */\n-      if (strncmp (buf, \"CPU implementer\", sizeof (\"CPU implementer\") - 1) == 0)\n+      if (startswith (buf, \"CPU implementer\"))\n \t{\n \t  int i;\n \t  for (i = 0; vendors_table[i].vendor_no != NULL; i++)\n@@ -94,7 +94,7 @@ host_detect_local_cpu (int argc, const char **argv)\n \t}\n \n       /* Detect arch/cpu.  */\n-      if (strncmp (buf, \"CPU part\", sizeof (\"CPU part\") - 1) == 0)\n+      if (startswith (buf, \"CPU part\"))\n \t{\n \t  int i;\n "}, {"sha": "c95c436180c7e3e2eadc1bbdb8bc00d8b3cc7143", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -63,9 +63,6 @@\n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n \n-/* Return true if STR starts with PREFIX and false, otherwise.  */\n-#define STR_PREFIX_P(STR,PREFIX) (strncmp (STR, PREFIX, strlen (PREFIX)) == 0)\n-\n /* The 4 bits starting at SECTION_MACH_DEP are reserved to store the\n    address space where data is to be located.\n    As the only non-generic address spaces are all located in flash,\n@@ -1092,7 +1089,7 @@ avr_set_current_function (tree decl)\n          that the name of the function is \"__vector_NN\" so as to catch\n          when the user misspells the vector name.  */\n \n-      if (!STR_PREFIX_P (name, \"__vector\"))\n+      if (!startswith (name, \"__vector\"))\n         warning_at (loc, OPT_Wmisspelled_isr, \"%qs appears to be a misspelled \"\n                     \"%qs handler, missing %<__vector%> prefix\", name, isr);\n #endif // AVR-LibC naming conventions\n@@ -9642,7 +9639,7 @@ static tree\n avr_handle_addr_attribute (tree *node, tree name, tree args,\n \t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add)\n {\n-  bool io_p = (strncmp (IDENTIFIER_POINTER (name), \"io\", 2) == 0);\n+  bool io_p = startswith (IDENTIFIER_POINTER (name), \"io\");\n   location_t loc = DECL_SOURCE_LOCATION (*node);\n \n   if (!VAR_P (*node))\n@@ -10055,7 +10052,7 @@ avr_asm_output_aligned_decl_common (FILE * stream,\n   /* __gnu_lto_slim is just a marker for the linker injected by toplev.c.\n      There is no need to trigger __do_clear_bss code for them.  */\n \n-  if (!STR_PREFIX_P (name, \"__gnu_lto\"))\n+  if (!startswith (name, \"__gnu_lto\"))\n     avr_need_clear_bss_p = true;\n \n   if (local_p)\n@@ -10154,7 +10151,7 @@ avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n       const char *old_prefix = \".rodata\";\n       const char *new_prefix = avr_addrspace[as].section_name;\n \n-      if (STR_PREFIX_P (name, old_prefix))\n+      if (startswith (name, old_prefix))\n         {\n           const char *sname = ACONCAT ((new_prefix,\n                                         name + strlen (old_prefix), NULL));\n@@ -10167,19 +10164,19 @@ avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n     }\n \n   if (!avr_need_copy_data_p)\n-    avr_need_copy_data_p = (STR_PREFIX_P (name, \".data\")\n-                            || STR_PREFIX_P (name, \".gnu.linkonce.d\"));\n+    avr_need_copy_data_p = (startswith (name, \".data\")\n+\t\t\t    || startswith (name, \".gnu.linkonce.d\"));\n \n   if (!avr_need_copy_data_p\n #if defined HAVE_LD_AVR_AVRXMEGA3_RODATA_IN_FLASH\n       && avr_arch->flash_pm_offset == 0\n #endif\n       )\n-    avr_need_copy_data_p = (STR_PREFIX_P (name, \".rodata\")\n-                            || STR_PREFIX_P (name, \".gnu.linkonce.r\"));\n+    avr_need_copy_data_p = (startswith (name, \".rodata\")\n+\t\t\t    || startswith (name, \".gnu.linkonce.r\"));\n \n   if (!avr_need_clear_bss_p)\n-    avr_need_clear_bss_p = STR_PREFIX_P (name, \".bss\");\n+    avr_need_clear_bss_p = startswith (name, \".bss\");\n \n   default_elf_asm_named_section (name, flags, decl);\n }\n@@ -10192,7 +10189,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n {\n   unsigned int flags = default_section_type_flags (decl, name, reloc);\n \n-  if (STR_PREFIX_P (name, \".noinit\"))\n+  if (startswith (name, \".noinit\"))\n     {\n       if (decl && TREE_CODE (decl) == VAR_DECL\n \t  && DECL_INITIAL (decl) == NULL_TREE)\n@@ -10402,7 +10399,7 @@ avr_asm_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n           const char * old_prefix = \".rodata\";\n           const char * new_prefix = avr_addrspace[as].section_name;\n \n-          if (STR_PREFIX_P (name, old_prefix))\n+\t  if (startswith (name, old_prefix))\n             {\n               const char *sname = ACONCAT ((new_prefix,\n                                             name + strlen (old_prefix), NULL));"}, {"sha": "e7e1d6c5d05b97d8f98c801d4145700f1bc411eb", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -862,14 +862,14 @@ c6x_in_small_data_p (const_tree exp)\n       const char *section = DECL_SECTION_NAME (exp);\n \n       if (strcmp (section, \".neardata\") == 0\n-\t  || strncmp (section, \".neardata.\", 10) == 0\n-\t  || strncmp (section, \".gnu.linkonce.s.\", 16) == 0\n+\t  || startswith (section, \".neardata.\")\n+\t  || startswith (section, \".gnu.linkonce.s.\")\n \t  || strcmp (section, \".bss\") == 0\n-\t  || strncmp (section, \".bss.\", 5) == 0\n-\t  || strncmp (section, \".gnu.linkonce.sb.\", 17) == 0\n+\t  || startswith (section, \".bss.\")\n+\t  || startswith (section, \".gnu.linkonce.sb.\")\n \t  || strcmp (section, \".rodata\") == 0\n-\t  || strncmp (section, \".rodata.\", 8) == 0\n-\t  || strncmp (section, \".gnu.linkonce.s2.\", 17) == 0)\n+\t  || startswith (section, \".rodata.\")\n+\t  || startswith (section, \".gnu.linkonce.s2.\"))\n \treturn true;\n     }\n   else\n@@ -1063,7 +1063,7 @@ c6x_section_type_flags (tree decl, const char *name, int reloc)\n   unsigned int flags = 0;\n \n   if (strcmp (name, \".far\") == 0\n-      || strncmp (name, \".far.\", 5) == 0)\n+      || startswith (name, \".far.\"))\n     flags |= SECTION_BSS;\n \n   flags |= default_section_type_flags (decl, name, reloc);"}, {"sha": "951a998775f83e16ed6c11963e6e9eb1286c51a7", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -808,8 +808,7 @@ darwin_cfstring_ref_p (const_tree strp)\n     tn = DECL_NAME (tn);\n   return (tn \n \t  && IDENTIFIER_POINTER (tn)\n-\t  && !strncmp (IDENTIFIER_POINTER (tn), \"CFStringRef\",\n-\t\t       strlen (\"CFStringRef\")));\n+\t  && startswith (IDENTIFIER_POINTER (tn), \"CFStringRef\"));\n }\n \n /* At present the behavior of this is undefined and it does nothing.  */\n@@ -843,7 +842,7 @@ darwin_objc_declare_unresolved_class_reference (const char *name)\n   size_t len = strlen (reference) + strlen(name) + 2;\n   char *buf = (char *) alloca (len);\n \n-  gcc_checking_assert (!strncmp (name, \".objc_class_name_\", 17));\n+  gcc_checking_assert (startswith (name, \".objc_class_name_\"));\n \n   snprintf (buf, len, \"%s%s\", reference, name);\n   symtab->finalize_toplevel_asm (build_string (strlen (buf), buf));\n@@ -856,8 +855,8 @@ darwin_objc_declare_class_definition (const char *name)\n   size_t len = strlen (xname) + 7 + 5;\n   char *buf = (char *) alloca (len);\n \n-  gcc_checking_assert (!strncmp (name, \".objc_class_name_\", 17)\n-\t\t       || !strncmp (name, \"*.objc_category_name_\", 21));\n+  gcc_checking_assert (startswith (name, \".objc_class_name_\")\n+\t\t       || startswith (name, \"*.objc_category_name_\"));\n \n   /* Mimic default_globalize_label.  */\n   snprintf (buf, len, \".globl\\t%s\", xname);"}, {"sha": "c4016fe20ef35a2bec06c3e7df7420606ba365ff", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 70, "deletions": 71, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -329,7 +329,7 @@ indirect_data (rtx sym_ref)\n \n   lprefix = (((name[0] == '*' || name[0] == '&')\n               && (name[1] == 'L' || (name[1] == '\"' && name[2] == 'L')))\n-             || (strncmp (name, \"_OBJC_\", 6) == 0));\n+\t     || (startswith (name, \"_OBJC_\")));\n \n   return ! lprefix;\n }\n@@ -1284,7 +1284,7 @@ darwin_encode_section_info (tree decl, rtx rtl, int first)\n   tree o2meta = lookup_attribute (\"OBJC2META\", DECL_ATTRIBUTES (decl));\n   o2meta = o2meta ? TREE_VALUE (o2meta) : NULL_TREE;\n \n-  if (o2meta && strncmp (IDENTIFIER_POINTER (o2meta), \"V2_IVRF\",7) == 0)\n+  if (o2meta && startswith (IDENTIFIER_POINTER (o2meta), \"V2_IVRF\"))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_MUST_INDIRECT;\n #endif\n }\n@@ -1443,58 +1443,58 @@ darwin_objc2_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n \n   /* Most of the OBJC2 META-data end up in the base section, so check it\n      first.  */\n-  if      (!strncmp (p, \"V2_BASE\", 7))\n+  if      (startswith (p, \"V2_BASE\"))\n     return base;\n-  else if (!strncmp (p, \"V2_CNAM\", 7))\n+  else if (startswith (p, \"V2_CNAM\"))\n     return darwin_sections[objc2_class_names_section];\n-  else if (!strncmp (p, \"V2_MNAM\", 7))\n+  else if (startswith (p, \"V2_MNAM\"))\n     return darwin_sections[objc2_method_names_section];\n-  else if (!strncmp (p, \"V2_MTYP\", 7))\n+  else if (startswith (p, \"V2_MTYP\"))\n     return darwin_sections[objc2_method_types_section];\n-  else if (!strncmp (p, \"V2_STRG\", 7))\n+  else if (startswith (p, \"V2_STRG\"))\n     return darwin_sections[cstring_section];\n \n-  else if (!strncmp (p, \"G2_META\", 7) || !strncmp (p, \"G2_CLAS\", 7))\n+  else if (startswith (p, \"G2_META\") || startswith (p, \"G2_CLAS\"))\n     return darwin_sections[objc2_classdefs_section];\n-  else if (!strncmp (p, \"V2_PCOL\", 7))\n+  else if (startswith (p, \"V2_PCOL\"))\n     return ld_uses_coal_sects ? darwin_sections[data_coal_section]\n \t\t\t      : darwin_sections[objc2_data_section];\n-  else if (!strncmp (p, \"V2_MREF\", 7))\n+  else if (startswith (p, \"V2_MREF\"))\n     return darwin_sections[objc2_message_refs_section];\n-  else if (!strncmp (p, \"V2_CLRF\", 7))\n+  else if (startswith (p, \"V2_CLRF\"))\n     return darwin_sections[objc2_classrefs_section];\n-  else if (!strncmp (p, \"V2_SURF\", 7))\n+  else if (startswith (p, \"V2_SURF\"))\n     return darwin_sections[objc2_super_classrefs_section];\n-  else if (!strncmp (p, \"V2_NLCL\", 7))\n+  else if (startswith (p, \"V2_NLCL\"))\n     return darwin_sections[objc2_nonlazy_class_section];\n-  else if (!strncmp (p, \"V2_CLAB\", 7))\n+  else if (startswith (p, \"V2_CLAB\"))\n     {\n       classes_seen = 1;\n       return darwin_sections[objc2_classlist_section];\n     }\n-  else if (!strncmp (p, \"V2_SRFS\", 7))\n+  else if (startswith (p, \"V2_SRFS\"))\n     return darwin_sections[objc2_selector_refs_section];\n-  else if (!strncmp (p, \"V2_NLCA\", 7))\n+  else if (startswith (p, \"V2_NLCA\"))\n     return darwin_sections[objc2_nonlazy_category_section];\n-  else if (!strncmp (p, \"V2_CALA\", 7))\n+  else if (startswith (p, \"V2_CALA\"))\n     return darwin_sections[objc2_categorylist_section];\n \n-  else if (!strncmp (p, \"V2_PLST\", 7))\n+  else if (startswith (p, \"V2_PLST\"))\n     return darwin_sections[objc2_protocollist_section];\n-  else if (!strncmp (p, \"V2_PRFS\", 7))\n+  else if (startswith (p, \"V2_PRFS\"))\n     return darwin_sections[objc2_protocolrefs_section];\n \n-  else if (!strncmp (p, \"V2_INFO\", 7))\n+  else if (startswith (p, \"V2_INFO\"))\n     return darwin_sections[objc2_image_info_section];\n \n-  else if (!strncmp (p, \"V2_EHTY\", 7))\n+  else if (startswith (p, \"V2_EHTY\"))\n     return ld_uses_coal_sects ? darwin_sections[data_coal_section]\n                               : data_section;\n \n-  else if (!strncmp (p, \"V2_CSTR\", 7))\n+  else if (startswith (p, \"V2_CSTR\"))\n     return darwin_sections[objc2_constant_string_object_section];\n \n-  else if (!strncmp (p, \"V2_IVRF\", 7))\n+  else if (startswith (p, \"V2_IVRF\"))\n     return darwin_sections[objc2_ivar_section];\n \n   /* Not recognized, default.  */\n@@ -1515,72 +1515,72 @@ darwin_objc1_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n   objc_metadata_seen = 1;\n \n   /* String sections first, cos there are lots of strings.  */\n-  if      (!strncmp (p, \"V1_STRG\", 7))\n+  if      (startswith (p, \"V1_STRG\"))\n     return darwin_sections[cstring_section];\n-  else if (!strncmp (p, \"V1_CLSN\", 7))\n+  else if (startswith (p, \"V1_CLSN\"))\n     return darwin_sections[objc_class_names_section];\n-  else if (!strncmp (p, \"V1_METN\", 7))\n+  else if (startswith (p, \"V1_METN\"))\n     return darwin_sections[objc_meth_var_names_section];\n-  else if (!strncmp (p, \"V1_METT\", 7))\n+  else if (startswith (p, \"V1_METT\"))\n     return darwin_sections[objc_meth_var_types_section];\n \n-  else if (!strncmp (p, \"V1_CLAS\", 7))\n+  else if (startswith (p, \"V1_CLAS\"))\n     {\n       classes_seen = 1;\n       return darwin_sections[objc_class_section];\n     }\n-  else if (!strncmp (p, \"V1_META\", 7))\n+  else if (startswith (p, \"V1_META\"))\n     return darwin_sections[objc_meta_class_section];\n-  else if (!strncmp (p, \"V1_CATG\", 7))\n+  else if (startswith (p, \"V1_CATG\"))\n     return darwin_sections[objc_category_section];\n-  else if (!strncmp (p, \"V1_PROT\", 7))\n+  else if (startswith (p, \"V1_PROT\"))\n     return darwin_sections[objc_protocol_section];\n \n-  else if (!strncmp (p, \"V1_CLCV\", 7))\n+  else if (startswith (p, \"V1_CLCV\"))\n     return darwin_sections[objc_class_vars_section];\n-  else if (!strncmp (p, \"V1_CLIV\", 7))\n+  else if (startswith (p, \"V1_CLIV\"))\n     return darwin_sections[objc_instance_vars_section];\n \n-  else if (!strncmp (p, \"V1_CLCM\", 7))\n+  else if (startswith (p, \"V1_CLCM\"))\n     return darwin_sections[objc_cls_meth_section];\n-  else if (!strncmp (p, \"V1_CLIM\", 7))\n+  else if (startswith (p, \"V1_CLIM\"))\n     return darwin_sections[objc_inst_meth_section];\n-  else if (!strncmp (p, \"V1_CACM\", 7))\n+  else if (startswith (p, \"V1_CACM\"))\n     return darwin_sections[objc_cat_cls_meth_section];\n-  else if (!strncmp (p, \"V1_CAIM\", 7))\n+  else if (startswith (p, \"V1_CAIM\"))\n     return darwin_sections[objc_cat_inst_meth_section];\n-  else if (!strncmp (p, \"V1_PNSM\", 7))\n+  else if (startswith (p, \"V1_PNSM\"))\n     return darwin_sections[objc_cat_inst_meth_section];\n-  else if (!strncmp (p, \"V1_PCLM\", 7))\n+  else if (startswith (p, \"V1_PCLM\"))\n     return darwin_sections[objc_cat_cls_meth_section];\n \n-  else if (!strncmp (p, \"V1_CLPR\", 7))\n+  else if (startswith (p, \"V1_CLPR\"))\n     return darwin_sections[objc_cat_cls_meth_section];\n-  else if (!strncmp (p, \"V1_CAPR\", 7))\n+  else if (startswith (p, \"V1_CAPR\"))\n     return darwin_sections[objc_category_section]; /* ??? CHECK me.  */\n \n-  else if (!strncmp (p, \"V1_PRFS\", 7))\n+  else if (startswith (p, \"V1_PRFS\"))\n     return darwin_sections[objc_cat_cls_meth_section];\n-  else if (!strncmp (p, \"V1_CLRF\", 7))\n+  else if (startswith (p, \"V1_CLRF\"))\n     return darwin_sections[objc_cls_refs_section];\n-  else if (!strncmp (p, \"V1_SRFS\", 7))\n+  else if (startswith (p, \"V1_SRFS\"))\n     return darwin_sections[objc_selector_refs_section];\n \n-  else if (!strncmp (p, \"V1_MODU\", 7))\n+  else if (startswith (p, \"V1_MODU\"))\n     return darwin_sections[objc_module_info_section];\n-  else if (!strncmp (p, \"V1_SYMT\", 7))\n+  else if (startswith (p, \"V1_SYMT\"))\n     return darwin_sections[objc_symbols_section];\n-  else if (!strncmp (p, \"V1_INFO\", 7))\n+  else if (startswith (p, \"V1_INFO\"))\n     return darwin_sections[objc_image_info_section];\n \n-  else if (!strncmp (p, \"V1_PLST\", 7))\n+  else if (startswith (p, \"V1_PLST\"))\n     return darwin_sections[objc1_prop_list_section];\n-  else if (!strncmp (p, \"V1_PEXT\", 7))\n+  else if (startswith (p, \"V1_PEXT\"))\n     return darwin_sections[objc1_protocol_ext_section];\n-  else if (!strncmp (p, \"V1_CEXT\", 7))\n+  else if (startswith (p, \"V1_CEXT\"))\n     return darwin_sections[objc1_class_ext_section];\n \n-  else if (!strncmp (p, \"V2_CSTR\", 7))\n+  else if (startswith (p, \"V2_CSTR\"))\n     return darwin_sections[objc_constant_string_object_section];\n \n   return base;\n@@ -1747,7 +1747,7 @@ machopic_select_section (tree decl,\n \t   && DECL_NAME (decl)\n \t   && TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE\n \t   && IDENTIFIER_POINTER (DECL_NAME (decl))\n-\t   && !strncmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"_OBJC_\", 6))\n+\t   && startswith (IDENTIFIER_POINTER (DECL_NAME (decl)), \"_OBJC_\"))\n     /* c) legacy meta-data selection was deprecated at 4.6, removed now.  */\n     gcc_unreachable ();\n \n@@ -1869,15 +1869,15 @@ finalize_dtors ()\n void\n darwin_globalize_label (FILE *stream, const char *name)\n {\n-  if (!!strncmp (name, \"_OBJC_\", 6))\n+  if (!startswith (name, \"_OBJC_\"))\n     default_globalize_label (stream, name);\n   /* We have some Objective C cases that need to be global, but only on newer\n      OS versions.  */\n   if (flag_objc_abi < 2 || flag_next_runtime < 100700)\n     return;\n-  if (!strncmp (name+6, \"LabelPro\", 8))\n+  if (startswith (name+6, \"LabelPro\"))\n     default_globalize_label (stream, name);\n-  if (!strncmp (name+6, \"Protocol_\", 9))\n+  if (startswith (name+6, \"Protocol_\"))\n     default_globalize_label (stream, name);\n }\n \n@@ -1897,7 +1897,7 @@ darwin_label_is_anonymous_local_objc_name (const char *name)\n     while (*p >= '0' && *p <= '9')\n       p++;\n   }\n-  if (strncmp ((const char *)p, \"_OBJC_\", 6) != 0)\n+  if (!startswith ((const char *)p, \"_OBJC_\"))\n     return false;\n \n   /* We need some of the objective c meta-data symbols to be visible to the\n@@ -1908,36 +1908,36 @@ darwin_label_is_anonymous_local_objc_name (const char *name)\n     return true;\n \n   p += 6;\n-  if (!strncmp ((const char *)p, \"ClassRef\", 8))\n+  if (startswith ((const char *)p, \"ClassRef\"))\n     return false;\n-  else if (!strncmp ((const char *)p, \"SelRef\", 6))\n+  else if (startswith ((const char *)p, \"SelRef\"))\n     return false;\n-  else if (!strncmp ((const char *)p, \"Category\", 8))\n+  else if (startswith ((const char *)p, \"Category\"))\n     {\n       if (p[8] == '_' || p[8] == 'I' || p[8] == 'P' || p[8] == 'C' )\n \treturn false;\n       return true;\n     }\n-  else if (!strncmp ((const char *)p, \"ClassMethods\", 12))\n+  else if (startswith ((const char *)p, \"ClassMethods\"))\n     return false;\n-  else if (!strncmp ((const char *)p, \"Instance\", 8))\n+  else if (startswith ((const char *)p, \"Instance\"))\n     {\n       if (p[8] == 'I' || p[8] == 'M')\n \treturn false;\n       return true;\n     }\n-  else if (!strncmp ((const char *)p, \"CLASS_RO\", 8))\n+  else if (startswith ((const char *)p, \"CLASS_RO\"))\n     return false;\n-  else if (!strncmp ((const char *)p, \"METACLASS_RO\", 12))\n+  else if (startswith ((const char *)p, \"METACLASS_RO\"))\n     return false;\n-  else if (!strncmp ((const char *)p, \"Protocol\", 8))\n+  else if (startswith ((const char *)p, \"Protocol\"))\n     {\n       if (p[8] == '_' || p[8] == 'I' || p[8] == 'P'\n \t  || p[8] == 'M' || p[8] == 'C' || p[8] == 'O')\n \treturn false;\n       return true;\n     }\n-  else if (!strncmp ((const char *)p, \"LabelPro\", 8))\n+  else if (startswith ((const char *)p, \"LabelPro\"))\n     return false;\n   return true;\n }\n@@ -2032,8 +2032,7 @@ darwin_asm_named_section (const char *name,\n {\n   /* LTO sections go in a special section that encapsulates the (unlimited)\n      number of GNU LTO sections within a single mach-o one.  */\n-  if (strncmp (name, LTO_SECTION_NAME_PREFIX,\n-\t       strlen (LTO_SECTION_NAME_PREFIX)) == 0)\n+  if (startswith (name, LTO_SECTION_NAME_PREFIX))\n     {\n       darwin_lto_section_e e;\n       /* We expect certain flags to be set...  */\n@@ -2062,9 +2061,9 @@ darwin_asm_named_section (const char *name,\n         vec_alloc (lto_section_names, 16);\n       vec_safe_push (lto_section_names, e);\n    }\n-  else if (strncmp (name, \"__DWARF,\", 8) == 0)\n+  else if (startswith (name, \"__DWARF,\"))\n     darwin_asm_dwarf_section (name, flags, decl, false);\n-  else if (strncmp (name, \"__GNU_DWARF_LTO,\", 16) == 0)\n+  else if (startswith (name, \"__GNU_DWARF_LTO,\"))\n     darwin_asm_dwarf_section (name, flags, decl, true);\n   else\n     fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n@@ -2973,9 +2972,9 @@ darwin_asm_output_dwarf_offset (FILE *file, int size, const char * lab,\n   const char *lto_add = \"\";\n \n   gcc_checking_assert (base->common.flags & SECTION_NAMED);\n-  is_for_lto = strncmp (base->named.name, \"__GNU_DWARF_LTO,\", 16) == 0;\n+  is_for_lto = startswith (base->named.name, \"__GNU_DWARF_LTO,\");\n   gcc_checking_assert (is_for_lto\n-\t\t       || strncmp (base->named.name, \"__DWARF,\", 8) == 0);\n+\t\t       || startswith (base->named.name, \"__DWARF,\"));\n   const char *name = strchr (base->named.name, ',') + 1;\n   gcc_checking_assert (name);\n "}, {"sha": "a7f7f086d170cf5da80bcc9547725129030304d7", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -262,7 +262,6 @@ static frv_stack_t *frv_stack_cache = (frv_stack_t *)0;\n static void frv_option_override\t\t\t(void);\n static bool frv_legitimate_address_p\t\t(machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n-static int frv_string_begins_with\t\t(const char *, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n static void frv_print_operand\t\t\t(FILE *, rtx, int);\n static void frv_print_operand_address\t\t(FILE *, machine_mode, rtx);\n@@ -782,17 +781,6 @@ frv_option_override (void)\n   init_machine_status = frv_init_machine_status;\n }\n \n-\f\n-/* Return true if NAME (a STRING_CST node) begins with PREFIX.  */\n-\n-static int\n-frv_string_begins_with (const char *name, const char *prefix)\n-{\n-  const int prefix_len = strlen (prefix);\n-\n-  /* Remember: NAME's length includes the null terminator.  */\n-  return (strncmp (name, prefix, prefix_len) == 0);\n-}\n \f\n /* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n@@ -9312,9 +9300,9 @@ frv_in_small_data_p (const_tree decl)\n   section_name = DECL_SECTION_NAME (decl);\n   if (section_name)\n     {\n-      if (frv_string_begins_with (section_name, \".sdata\"))\n+      if (startswith (section_name, \".sdata\"))\n \treturn true;\n-      if (frv_string_begins_with (section_name, \".sbss\"))\n+      if (startswith (section_name, \".sbss\"))\n \treturn true;\n       return false;\n     }"}, {"sha": "5432f9591dbfb341245270c67ae22dce80b44d5d", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -825,8 +825,7 @@ main (int argc, char **argv)\n   bool fpic = false;\n   for (int i = 1; i < argc; i++)\n     {\n-#define STR \"-foffload-abi=\"\n-      if (strncmp (argv[i], STR, strlen (STR)) == 0)\n+      if (startswith (argv[i], \"-foffload-abi=\"))\n \t{\n \t  if (strcmp (argv[i] + strlen (STR), \"lp64\") == 0)\n \t    offload_abi = OFFLOAD_ABI_LP64;\n@@ -836,7 +835,6 @@ main (int argc, char **argv)\n \t    fatal_error (input_location,\n \t\t\t \"unrecognizable argument of option \" STR);\n \t}\n-#undef STR\n       else if (strcmp (argv[i], \"-fopenmp\") == 0)\n \tfopenmp = true;\n       else if (strcmp (argv[i], \"-fopenacc\") == 0)\n@@ -995,9 +993,9 @@ main (int argc, char **argv)\n       obstack_ptr_grow (&ld_argv_obstack, \"-lgomp\");\n \n       for (int i = 1; i < argc; i++)\n-\tif (strncmp (argv[i], \"-l\", 2) == 0\n-\t    || strncmp (argv[i], \"-Wl\", 3) == 0\n-\t    || strncmp (argv[i], \"-march\", 6) == 0)\n+\tif (startswith (argv[i], \"-l\")\n+\t    || startswith (argv[i], \"-Wl\")\n+\t    || startswith (argv[i], \"-march\"))\n \t  obstack_ptr_grow (&ld_argv_obstack, argv[i]);\n \n       obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");"}, {"sha": "204e29031264ed1049cdaa8aad6439cc318b64ef", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -1992,7 +1992,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   while (token != NULL)\n     {\n       /* Do not process \"arch=\"  */\n-      if (strncmp (token, \"arch=\", 5) == 0)\n+      if (startswith (token, \"arch=\"))\n \t{\n \t  token = strtok (NULL, \",\");\n \t  continue;"}, {"sha": "0eccb549c2290c0072ff1460c0b3b74430139bce", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -1904,7 +1904,7 @@ ix86_option_override_internal (bool main_args_p,\n \n       /* opts->x_ix86_tune_string is set to opts->x_ix86_arch_string\n \t or defaulted.  We need to use a sensible tune option.  */\n-      if (!strncmp (opts->x_ix86_tune_string, \"x86-64\", 6)\n+      if (startswith (opts->x_ix86_tune_string, \"x86-64\")\n \t  && (opts->x_ix86_tune_string[6] == '\\0'\n \t      || (!strcmp (opts->x_ix86_tune_string + 6, \"-v2\")\n \t\t  || !strcmp (opts->x_ix86_tune_string + 6, \"-v3\")"}, {"sha": "743d8a25fe3edab12c937d3e3b6a88c4dada0a86", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -752,9 +752,8 @@ x86_64_elf_section_type_flags (tree decl, const char *name, int reloc)\n     flags |= SECTION_RELRO;\n \n   if (strcmp (name, \".lbss\") == 0\n-      || strncmp (name, \".lbss.\", sizeof (\".lbss.\") - 1) == 0\n-      || strncmp (name, \".gnu.linkonce.lb.\",\n-\t\t  sizeof (\".gnu.linkonce.lb.\") - 1) == 0)\n+      || startswith (name, \".lbss.\")\n+      || startswith (name, \".gnu.linkonce.lb.\"))\n     flags |= SECTION_BSS;\n \n   return flags;\n@@ -21500,7 +21499,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n     {\n       const char *con = constraints[i];\n-      if (strncmp (con, \"=@cc\", 4) != 0)\n+      if (!startswith (con, \"=@cc\"))\n \tcontinue;\n       con += 4;\n       if (strchr (con, ',') != NULL)"}, {"sha": "cb946d61454eb842aefde108883b9adda8de680b", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -613,8 +613,7 @@ main (int argc, char **argv)\n   /* Scan the argument vector.  */\n   for (int i = 1; i < argc; i++)\n     {\n-#define STR \"-foffload-abi=\"\n-      if (strncmp (argv[i], STR, strlen (STR)) == 0)\n+      if (startswith (argv[i], \"-foffload-abi=\"))\n \t{\n \t  if (strcmp (argv[i] + strlen (STR), \"lp64\") == 0)\n \t    offload_abi = OFFLOAD_ABI_LP64;\n@@ -624,7 +623,6 @@ main (int argc, char **argv)\n \t    fatal_error (input_location,\n \t\t\t \"unrecognizable argument of option \" STR);\n \t}\n-#undef STR\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)"}, {"sha": "4158a45ac319c1525107838c90ba52d4331ae5c2", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -505,8 +505,7 @@ i386_pe_asm_named_section (const char *name, unsigned int flags,\n \n   /* LTO sections need 1-byte alignment to avoid confusing the\n      zlib decompression algorithm with trailing zero pad bytes.  */\n-  if (strncmp (name, LTO_SECTION_NAME_PREFIX,\n-\t\t\tstrlen (LTO_SECTION_NAME_PREFIX)) == 0)\n+  if (startswith (name, LTO_SECTION_NAME_PREFIX))\n     *f++ = '0';\n \n   *f = '\\0';\n@@ -797,7 +796,7 @@ i386_pe_file_end (void)\n \t  oname = name;\n \t  if (name[0] == '.')\n \t    ++name;\n-\t  if (strncmp (name, \"refptr.\", 7) != 0)\n+\t  if (!startswith (name, \"refptr.\"))\n \t    continue;\n \t  name += 7;\n \t  fprintf (asm_out_file, \"\\t.section\\t.rdata$%s, \\\"dr\\\"\\n\""}, {"sha": "632b9df1761635aa0d3e1a31c3c1fbdbbbfd706e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -10007,11 +10007,11 @@ ia64_in_small_data_p (const_tree exp)\n       const char *section = DECL_SECTION_NAME (exp);\n \n       if (strcmp (section, \".sdata\") == 0\n-\t  || strncmp (section, \".sdata.\", 7) == 0\n-\t  || strncmp (section, \".gnu.linkonce.s.\", 16) == 0\n+\t  || startswith (section, \".sdata.\")\n+\t  || startswith (section, \".gnu.linkonce.s.\")\n \t  || strcmp (section, \".sbss\") == 0\n-\t  || strncmp (section, \".sbss.\", 6) == 0\n-\t  || strncmp (section, \".gnu.linkonce.sb.\", 17) == 0)\n+\t  || startswith (section, \".sbss.\")\n+\t  || startswith (section, \".gnu.linkonce.sb.\"))\n \treturn true;\n     }\n   else\n@@ -10869,13 +10869,13 @@ ia64_section_type_flags (tree decl, const char *name, int reloc)\n   unsigned int flags = 0;\n \n   if (strcmp (name, \".sdata\") == 0\n-      || strncmp (name, \".sdata.\", 7) == 0\n-      || strncmp (name, \".gnu.linkonce.s.\", 16) == 0\n-      || strncmp (name, \".sdata2.\", 8) == 0\n-      || strncmp (name, \".gnu.linkonce.s2.\", 17) == 0\n+      || startswith (name, \".sdata.\")\n+      || startswith (name, \".gnu.linkonce.s.\")\n+      || startswith (name, \".sdata2.\")\n+      || startswith (name, \".gnu.linkonce.s2.\")\n       || strcmp (name, \".sbss\") == 0\n-      || strncmp (name, \".sbss.\", 6) == 0\n-      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n+      || startswith (name, \".sbss.\")\n+      || startswith (name, \".gnu.linkonce.sb.\"))\n     flags = SECTION_SMALL;\n \n   flags |= default_section_type_flags (decl, name, reloc);"}, {"sha": "46bb3cad500bfb0042a39aa7dcf0df5f6837c680", "filename": "gcc/config/mips/driver-native.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmips%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmips%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fdriver-native.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -57,7 +57,7 @@ host_detect_local_cpu (int argc, const char **argv)\n     return NULL;\n \n   while (fgets (buf, sizeof (buf), f) != NULL)\n-    if (strncmp (buf, \"cpu model\", sizeof (\"cpu model\") - 1) == 0)\n+    if (startswith (buf, \"cpu model\"))\n       {\n \tif (strstr (buf, \"Godson2 V0.2\") != NULL\n \t    || strstr (buf, \"Loongson-2 V0.2\") != NULL"}, {"sha": "e5ba27331b063b245cb4dfcde81b3d67c90ef242", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -1513,14 +1513,14 @@ mips_handle_interrupt_attr (tree *node ATTRIBUTE_UNUSED, tree name, tree args,\n \t  *no_add_attrs = true;\n \t}\n       else if (strcmp (TREE_STRING_POINTER (cst), \"eic\") != 0\n-\t       && strncmp (TREE_STRING_POINTER (cst), \"vector=\", 7) != 0)\n+\t       && !startswith (TREE_STRING_POINTER (cst), \"vector=\"))\n \t{\n \t  warning (OPT_Wattributes,\n \t\t   \"argument to %qE attribute is neither eic, nor \"\n \t\t   \"vector=<line>\", name);\n \t  *no_add_attrs = true;\n \t}\n-      else if (strncmp (TREE_STRING_POINTER (cst), \"vector=\", 7) == 0)\n+      else if (startswith (TREE_STRING_POINTER (cst), \"vector=\"))\n \t{\n \t  const char *arg = TREE_STRING_POINTER (cst) + 7;\n \n@@ -1849,7 +1849,7 @@ static bool\n mips16_stub_function_p (const_rtx x)\n {\n   return (GET_CODE (x) == SYMBOL_REF\n-\t  && strncmp (XSTR (x, 0), \"__mips16_\", 9) == 0);\n+\t  && startswith (XSTR (x, 0), \"__mips16_\"));\n }\n \n /* Return true if function X is a locally-defined and locally-binding\n@@ -9323,15 +9323,15 @@ mips_function_rodata_section (tree decl, bool)\n   if (decl && DECL_SECTION_NAME (decl))\n     {\n       const char *name = DECL_SECTION_NAME (decl);\n-      if (DECL_COMDAT_GROUP (decl) && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n+      if (DECL_COMDAT_GROUP (decl) && startswith (name, \".gnu.linkonce.t.\"))\n \t{\n \t  char *rname = ASTRDUP (name);\n \t  rname[14] = 'd';\n \t  return get_section (rname, SECTION_LINKONCE | SECTION_WRITE, decl);\n \t}\n       else if (flag_function_sections\n \t       && flag_data_sections\n-\t       && strncmp (name, \".text.\", 6) == 0)\n+\t       && startswith (name, \".text.\"))\n \t{\n \t  char *rname = ASTRDUP (name);\n \t  memcpy (rname + 1, \"data\", 4);"}, {"sha": "1cdacb7f480bb4498b2a6d05631e5bd743dc4a5a", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -122,7 +122,7 @@ msp430_mcu_name (void)\n \n       /* The 'i' in the device name symbol for msp430i* devices must be lower\n \t case, to match the expected symbol in msp430.h.  */\n-      if (strncmp (target_mcu, \"msp430i\", 7) == 0)\n+      if (startswith (target_mcu, \"msp430i\"))\n \t{\n \t  snprintf (mcu_name, sizeof (mcu_name) - 1, \"__MSP430i%s__\",\n \t\t    target_mcu + 7);\n@@ -2466,7 +2466,7 @@ msp430_function_section (tree decl, enum node_frequency freq, bool startup,\n \n   const char * prefix = gen_prefix (decl);\n   if (prefix == NULL\n-      || strncmp (name, prefix, strlen (prefix)) == 0)\n+      || startswith (name, prefix))\n     return default_function_section (decl, freq, startup, exit);\n \n   name = ACONCAT ((prefix, name, NULL));\n@@ -2479,11 +2479,11 @@ msp430_function_section (tree decl, enum node_frequency freq, bool startup,\n unsigned int\n msp430_section_type_flags (tree decl, const char * name, int reloc)\n {\n-  if (strncmp (name, lower_prefix, strlen (lower_prefix)) == 0)\n+  if (startswith (name, lower_prefix))\n     name += strlen (lower_prefix);\n-  else if (strncmp (name, upper_prefix, strlen (upper_prefix)) == 0)\n+  else if (startswith (name, upper_prefix))\n     name += strlen (upper_prefix);\n-  else if (strncmp (name, either_prefix, strlen (either_prefix)) == 0)\n+  else if (startswith (name, either_prefix))\n     name += strlen (either_prefix);\n \n   return default_section_type_flags (decl, name, reloc);\n@@ -3243,8 +3243,7 @@ msp430_expand_helper (rtx *operands, const char *helper_name,\n   machine_mode arg0mode = GET_MODE (operands[0]);\n   machine_mode arg1mode = GET_MODE (operands[1]);\n   machine_mode arg2mode = GET_MODE (operands[2]);\n-  int expand_mpy = strncmp (helper_name, \"__mspabi_mpy\",\n-\t\t\t    sizeof (\"__mspabi_mpy\") - 1) == 0;\n+  int expand_mpy = startswith (helper_name, \"__mspabi_mpy\");\n   /* This function has been used incorrectly if CONST_VARIANTS is TRUE for a\n      hwmpy function.  */\n   gcc_assert (!(expand_mpy && const_variants));"}, {"sha": "26d43331f3327f40c43def845320507b7049965d", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -2336,9 +2336,9 @@ static bool\n nios2_small_section_name_p (const char *section)\n {\n   return (strcmp (section, \".sbss\") == 0\n-\t  || strncmp (section, \".sbss.\", 6) == 0\n+\t  || startswith (section, \".sbss.\")\n \t  || strcmp (section, \".sdata\") == 0\n-\t  || strncmp (section, \".sdata.\", 7) == 0\n+\t  || startswith (section, \".sdata.\")\n \t  || (nios2_gprel_sec \n \t      && regexec (&nios2_gprel_sec_regex, section, 0, NULL, 0) == 0));\n }\n@@ -4199,12 +4199,12 @@ nios2_valid_target_attribute_rec (tree args)\n \t    *p = '\\0';\n \t  if (eq) *eq = '\\0';\n \n-\t  if (!strncmp (argstr, \"no-\", 3))\n+\t  if (startswith (argstr, \"no-\"))\n \t    {\n \t      no_opt = true;\n \t      argstr += 3;\n \t    }\n-\t  if (!strncmp (argstr, \"custom-fpu-cfg\", 14))\n+\t  if (startswith (argstr, \"custom-fpu-cfg\"))\n \t    {\n \t      char *end_eq = p;\n \t      if (no_opt)\n@@ -4225,13 +4225,12 @@ nios2_valid_target_attribute_rec (tree args)\n \n \t      nios2_handle_custom_fpu_cfg (eq, end_eq + 1, true);\n \t    }\n-\t  else if (!strncmp (argstr, \"custom-\", 7))\n+\t  else if (startswith (argstr, \"custom-\"))\n \t    {\n \t      int code = -1;\n \t      unsigned int i;\n \t      for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n-\t\tif (!strncmp (argstr + 7, N2FPU_NAME (i),\n-\t\t\t      strlen (N2FPU_NAME (i))))\n+\t\tif (startswith (argstr + 7, N2FPU_NAME (i)))\n \t\t  {\n \t\t    /* Found insn.  */\n \t\t    code = i;"}, {"sha": "c46c85d3a7c5c4fd7eab3f04958682192ea3aae6", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -256,13 +256,13 @@ process (FILE *in, FILE *out)\n \t    case '\\n':\n \t      fprintf (out, \"\\\\n\\\"\\n\\t\\\"\");\n \t      /* Look for mappings on subsequent lines.  */\n-\t      while (strncmp (input + i, \"//:\", 3) == 0)\n+\t      while (startswith (input + i, \"//:\"))\n \t\t{\n \t\t  i += 3;\n \n-\t\t  if (strncmp (input + i, \"VAR_MAP \", 8) == 0)\n+\t\t  if (startswith (input + i, \"VAR_MAP \"))\n \t\t    record_id (input + i + 8, &vars_tail);\n-\t\t  else if (strncmp (input + i, \"FUNC_MAP \", 9) == 0)\n+\t\t  else if (startswith (input + i, \"FUNC_MAP \"))\n \t\t    record_id (input + i + 9, &funcs_tail);\n \t\t  else\n \t\t    abort ();\n@@ -481,8 +481,7 @@ main (int argc, char **argv)\n   bool fpic = false;\n   for (int i = 1; i < argc; i++)\n     {\n-#define STR \"-foffload-abi=\"\n-      if (strncmp (argv[i], STR, strlen (STR)) == 0)\n+      if (startswith (argv[i], \"-foffload-abi=\"))\n \t{\n \t  if (strcmp (argv[i] + strlen (STR), \"lp64\") == 0)\n \t    offload_abi = OFFLOAD_ABI_LP64;\n@@ -492,7 +491,6 @@ main (int argc, char **argv)\n \t    fatal_error (input_location,\n \t\t\t \"unrecognizable argument of option \" STR);\n \t}\n-#undef STR\n       else if (strcmp (argv[i], \"-fopenmp\") == 0)\n \tfopenmp = true;\n       else if (strcmp (argv[i], \"-fopenacc\") == 0)"}, {"sha": "05cc315b9f98636d9bcfdd5f059fe8a9cf834e7d", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -47,32 +47,29 @@ along with GCC; see the file COPYING3.  If not see\n do {\t\t\t\t\t\t\t\t\\\n   static int in_shlib_list = 0;\t\t\t\t\t\\\n   while (*PTR == ' ') PTR++;\t\t\t\t\t\\\n-  if (strncmp (PTR, \"shared library list:\",\t\t\t\\\n-\t       sizeof (\"shared library list:\") - 1) == 0)\t\\\n+  if (startswith (PTR, \"shared library list:\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       PTR = 0;\t\t\t\t\t\t\t\\\n       in_shlib_list = 1;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-  else if (strncmp (PTR, \"shared library binding:\",\t\t\\\n-\t\t    sizeof (\"shared library binding:\") - 1) == 0)\\\n+  else if (startswith (PTR, \"shared library binding:\"))\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       PTR = 0;\t\t\t\t\t\t\t\\\n       in_shlib_list = 0;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-  else if (strncmp (PTR, \"static branch prediction disabled\",\t\\\n-\t\t    sizeof (\"static branch prediction disabled\") - 1) == 0)\\\n+  else if (startswith (PTR, \"static branch prediction disabled\")) \\\n     {\t\t\t\t\t\t\t\t\\\n       PTR = 0;\t\t\t\t\t\t\t\\\n       in_shlib_list = 0;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (in_shlib_list\t\t\t\t\t\\\n-\t   &&  strncmp (PTR, \"dynamic\", sizeof (\"dynamic\") - 1) == 0) \\\n+\t   && startswith (PTR, \"dynamic\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       PTR += sizeof (\"dynamic\") - 1;\t\t\t\t\\\n       while (*p == ' ') PTR++;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (in_shlib_list\t\t\t\t\t\\\n-\t   && strncmp (PTR, \"static\", sizeof (\"static\") - 1) == 0) \\\n+\t   && startswith (PTR, \"static\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       PTR += sizeof (\"static\") - 1;\t\t\t\t\\\n       while (*p == ' ') PTR++;\t\t\t\t\t\\"}, {"sha": "b663b43a29cdd685ae3ab1f039a891c598c562f0", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -2251,7 +2251,7 @@ static void pdp11_output_ident (const char *ident)\n {\n   if (TARGET_DEC_ASM)\n     {\n-      if (strncmp (ident, \"GCC:\", 4) != 0)\n+      if (!startswith (ident, \"GCC:\"))\n \tfprintf (asm_out_file, \"\\t.ident\\t\\\"%s\\\"\\n\", ident);\n     }\n   "}, {"sha": "1baa2990ee2778fb3ed118b14b665f33afa043d5", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -3593,7 +3593,7 @@ riscv_elf_select_rtx_section (machine_mode mode, rtx x,\n \n   if (riscv_size_ok_for_small_data_p (GET_MODE_SIZE (mode)))\n     {\n-      if (strncmp (s->named.name, \".rodata.cst\", strlen (\".rodata.cst\")) == 0)\n+      if (startswith (s->named.name, \".rodata.cst\"))\n \t{\n \t  /* Rename .rodata.cst* to .srodata.cst*. */\n \t  char *name = (char *) alloca (strlen (s->named.name) + 2);"}, {"sha": "c304596d54bb89858495712b992963e99debe980", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -17205,12 +17205,12 @@ toc_hasher::equal (toc_hash_struct *h1, toc_hash_struct *h2)\n    instead, there should be some programmatic way of inquiring as\n    to whether or not an object is a vtable.  */\n \n-#define VTABLE_NAME_P(NAME)\t\t\t\t\\\n-  (strncmp (\"_vt.\", name, strlen (\"_vt.\")) == 0\t\t\\\n-  || strncmp (\"_ZTV\", name, strlen (\"_ZTV\")) == 0\t\\\n-  || strncmp (\"_ZTT\", name, strlen (\"_ZTT\")) == 0\t\\\n-  || strncmp (\"_ZTI\", name, strlen (\"_ZTI\")) == 0\t\\\n-  || strncmp (\"_ZTC\", name, strlen (\"_ZTC\")) == 0)\n+#define VTABLE_NAME_P(NAME)\t  \\\n+  (startswith (name, \"_vt.\")\t  \\\n+  || startswith (name, \"_ZTV\")\t  \\\n+  || startswith (name, \"_ZTT\")\t  \\\n+  || startswith (name, \"_ZTI\")\t  \\\n+  || startswith (name, \"_ZTC\"))\n \n #ifdef NO_DOLLAR_IN_LABEL\n /* Return a GGC-allocated character string translating dollar signs in\n@@ -24204,7 +24204,7 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t  const char *cpu_opt = NULL;\n \n \t  p = NULL;\n-\t  if (strncmp (q, \"cpu=\", 4) == 0)\n+\t  if (startswith (q, \"cpu=\"))\n \t    {\n \t      int cpu_index = rs6000_cpu_name_lookup (q+4);\n \t      if (cpu_index >= 0)\n@@ -24215,7 +24215,7 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t\t  cpu_opt = q+4;\n \t\t}\n \t    }\n-\t  else if (strncmp (q, \"tune=\", 5) == 0)\n+\t  else if (startswith (q, \"tune=\"))\n \t    {\n \t      int tune_index = rs6000_cpu_name_lookup (q+5);\n \t      if (tune_index >= 0)\n@@ -24233,7 +24233,7 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t      char *r = q;\n \n \t      error_p = true;\n-\t      if (strncmp (r, \"no-\", 3) == 0)\n+\t      if (startswith (r, \"no-\"))\n \t\t{\n \t\t  invert = true;\n \t\t  r += 3;"}, {"sha": "71c4ff672f85f45e70cf1fb8cd506c9d61cc325f", "filename": "gcc/config/s390/driver-native.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fdriver-native.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -73,7 +73,7 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n        (has_features == 0 || has_processor == 0)\n \t && fgets (buf, sizeof (buf), f) != NULL; )\n     {\n-      if (has_processor == 0 && strncmp (buf, \"processor\", 9) == 0)\n+      if (has_processor == 0 && startswith (buf, \"processor\"))\n \t{\n \t  const char *p;\n \t  long machine_id;\n@@ -128,7 +128,7 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n \t      break;\n \t    }\n \t}\n-      if (has_features == 0 && strncmp (buf, \"features\", 8) == 0)\n+      if (has_features == 0 && startswith (buf, \"features\"))\n \t{\n \t  const char *p;\n \n@@ -144,13 +144,13 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n \t\tp++;\n \t      for (i = 0; !ISSPACE (p[i]) && p[i] != 0; i++)\n \t\t;\n-\t      if (i == 3 && strncmp (p, \"dfp\", 3) == 0)\n+\t      if (i == 3 && startswith (p, \"dfp\"))\n \t\thas_dfp = 1;\n-\t      else if (i == 2 && strncmp (p, \"te\", 2) == 0)\n+\t      else if (i == 2 && startswith (p, \"te\"))\n \t\thas_te = 1;\n-\t      else if (i == 2 && strncmp (p, \"vx\", 2) == 0)\n+\t      else if (i == 2 && startswith (p, \"vx\"))\n \t\thas_vx = 1;\n-\t      else if (i == 8 && strncmp (p, \"highgprs\", 8) == 0)\n+\t      else if (i == 8 && startswith (p, \"highgprs\"))\n \t\thas_highgprs = 1;\n \t      p += i;\n \t    }"}, {"sha": "698c18e65d947cd4b49ce773a5570e15d16bd45e", "filename": "gcc/config/sparc/driver-sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -148,7 +148,7 @@ host_detect_local_cpu (int argc, const char **argv)\n     return NULL;\n \n   while (fgets (buf, sizeof (buf), f) != NULL)\n-    if (strncmp (buf, \"cpu\\t\\t:\", sizeof (\"cpu\\t\\t:\") - 1) == 0)\n+    if (startswith (buf, \"cpu\\t\\t:\"))\n       {\n         for (i = 0; cpu_names [i].name; i++)\n           if (strstr (buf, cpu_names [i].name) != NULL)"}, {"sha": "3aacd1e5986dd7e33e5fede37628f5db5a182b99", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -1325,10 +1325,10 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \t     be shorter (1 opcode byte + 1 addrmode byte + 8 immediate value\n \t     bytes .vs. 2 opcode bytes + 2 addrmode bytes + 8 immediate value\n \t     value bytes.  */\n-\t  if ((!strncmp (pattern_lo, \"movl\", 4)\n-\t      && !strncmp (pattern_hi, \"movl\", 4))\n-\t      || (!strncmp (pattern_lo, \"pushl\", 5)\n-\t\t  && !strncmp (pattern_hi, \"pushl\", 5)))\n+\t  if ((startswith (pattern_lo, \"movl\")\n+\t      && startswith (pattern_hi, \"movl\"))\n+\t      || (startswith (pattern_lo, \"pushl\")\n+\t\t  && startswith (pattern_hi, \"pushl\")))\n \t    return \"movq %1,%0\";\n \n \t  if (MEM_P (operands[0])"}, {"sha": "121aebdbe26dc84a7e224e340306eff96e5415a2", "filename": "gcc/config/vms/vms-ld.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvms%2Fvms-ld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvms%2Fvms-ld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-ld.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -94,6 +94,14 @@ static int translate_unix (char *, int);\n #endif\n \f\n \n+/* Return 1 if STR string starts with PREFIX.  */\n+\n+static inline int\n+startswith (const char *str, const char *prefix)\n+{\n+  return strncmp (str, prefix, strlen (prefix)) == 0;\n+}\n+\n /* Append STR to the command line to invoke the linker.\n    Expand the line as necessary to accommodate.  */\n \n@@ -319,7 +327,7 @@ process_args (int argc, char **argv)\n \n   for (i = 1; i < argc; i++)\n     {\n-      if (strncmp (argv[i], \"-L\", 2) == 0)\n+      if (startswith (argv[i], \"-L\"))\n \t{\n           search_dirs = XRESIZEVEC(const char *, search_dirs,\n                                    search_dirs_len + 1);\n@@ -341,7 +349,7 @@ process_args (int argc, char **argv)\n \t}\n       else if (strcmp (argv[i], \"-g0\") == 0)\n \taddarg (\"/notraceback\");\n-      else if (strncmp (argv[i], \"-g\", 2) == 0)\n+      else if (startswith (argv[i], \"-g\"))\n \t{\n \t  addarg (\"/debug\");\n \t  debug = 1;\n@@ -654,7 +662,7 @@ main (int argc, char **argv)\n           /* Already handled.  */\n           i++;\n         }\n-      else if (arg_len > 2 && strncmp (argv[i], \"-l\", 2) == 0)\n+      else if (arg_len > 2 && startswith (argv[i], \"-l\"))\n \t{\n \t  const char *libname;\n \n@@ -676,17 +684,17 @@ main (int argc, char **argv)\n \t    }\n \t}\n       else if (strcmp (argv[i], \"-v\" ) == 0\n-\t       || strncmp (argv[i], \"-g\", 2 ) == 0\n+\t       || startswith (argv[i], \"-g\")\n \t       || strcmp (argv[i], \"-static\" ) == 0\n \t       || strcmp (argv[i], \"-map\" ) == 0\n \t       || strcmp (argv[i], \"-save-temps\") == 0\n \t       || strcmp (argv[i], \"--noinhibit-exec\") == 0\n-\t       || (arg_len > 2 && strncmp (argv[i], \"-L\", 2) == 0)\n-\t       || (arg_len >= 6 && strncmp (argv[i], \"-share\", 6) == 0))\n+\t       || (arg_len > 2 && startswith (argv[i], \"-L\"))\n+\t       || (arg_len >= 6 && startswith (argv[i], \"-share\")))\n         {\n           /* Already handled.  */\n         }\n-      else if (strncmp (argv[i], \"--opt=\", 6) == 0)\n+      else if (startswith (argv[i], \"--opt=\"))\n \tfprintf (optfile, \"%s\\n\", argv[i] + 6);\n       else if (arg_len > 1 && argv[i][0] == '@')\n \t{"}, {"sha": "bbf174e0dc90f228a1e686c3793a70e075640577", "filename": "gcc/config/vms/vms.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvms%2Fvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129e2d489cc0ab419c58c4f8451898c2b5e3ae/gcc%2Fconfig%2Fvms%2Fvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.c?ref=c0129e2d489cc0ab419c58c4f8451898c2b5e3ae", "patch": "@@ -302,7 +302,7 @@ vms_start_function (const char *fnname)\n #if VMS_DEBUGGING_INFO\n   if (vms_debug_main\n       && debug_info_level > DINFO_LEVEL_NONE\n-      && strncmp (vms_debug_main, fnname, strlen (vms_debug_main)) == 0)\n+      && startswith (vms_debug_main, fnname))\n     {\n       targetm.asm_out.globalize_label (asm_out_file, VMS_DEBUG_MAIN_POINTER);\n       ASM_OUTPUT_DEF (asm_out_file, VMS_DEBUG_MAIN_POINTER, fnname);"}]}