{"sha": "a26206ec7b8f8c60747c25d009ea7f9b94184215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2MjA2ZWM3YjhmOGM2MDc0N2MyNWQwMDllYTdmOWI5NDE4NDIxNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-11T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-11T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "ab88ff4003eb9805ebab205703f30688bd81caa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab88ff4003eb9805ebab205703f30688bd81caa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26206ec7b8f8c60747c25d009ea7f9b94184215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26206ec7b8f8c60747c25d009ea7f9b94184215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26206ec7b8f8c60747c25d009ea7f9b94184215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26206ec7b8f8c60747c25d009ea7f9b94184215/comments", "author": null, "committer": null, "parents": [{"sha": "332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da"}], "stats": {"total": 467, "additions": 466, "deletions": 1}, "files": [{"sha": "f46d3caa4fdf602149b2cd26ec1a9a88209370c2", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,7 @@\n+2021-09-10  Petter Tomner  <tomner@kth.se>\n+\n+\t* MAINTAINERS: Me added to DCO and write after approval\n+\n 2021-09-01  YunQiang Su  <syq@debian.org>\n \n \t* MAINTAINERS: Add myself for write after approval."}, {"sha": "6bdd1378da20495fd4cd265575e39c7b8d169914", "filename": "gcc/ChangeLog", "status": "modified", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,280 @@\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\tRevert:\n+\t2021-09-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* emit-rtl.c (validate_subreg): Get rid of all float-int\n+\tspecial cases.\n+\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_memory_order): Add OMP_MEMORY_ORDER_MASK,\n+\tOMP_FAIL_MEMORY_ORDER_UNSPECIFIED, OMP_FAIL_MEMORY_ORDER_RELAXED,\n+\tOMP_FAIL_MEMORY_ORDER_ACQUIRE, OMP_FAIL_MEMORY_ORDER_RELEASE,\n+\tOMP_FAIL_MEMORY_ORDER_ACQ_REL, OMP_FAIL_MEMORY_ORDER_SEQ_CST and\n+\tOMP_FAIL_MEMORY_ORDER_MASK enumerators.\n+\t(OMP_FAIL_MEMORY_ORDER_SHIFT): Define.\n+\t* gimple-pretty-print.c (dump_gimple_omp_atomic_load,\n+\tdump_gimple_omp_atomic_store): Print [weak] for weak atomic\n+\tload/store.\n+\t* gimple.h (enum gf_mask): Change GF_OMP_ATOMIC_MEMORY_ORDER\n+\tto 6-bit mask, adjust GF_OMP_ATOMIC_NEED_VALUE value and add\n+\tGF_OMP_ATOMIC_WEAK.\n+\t(gimple_omp_atomic_weak_p, gimple_omp_atomic_set_weak): New inline\n+\tfunctions.\n+\t* tree.h (OMP_ATOMIC_WEAK): Define.\n+\t* tree-pretty-print.c (dump_omp_atomic_memory_order): Adjust for\n+\tfail memory order being encoded in the same enum and also print\n+\tfail clause if present.\n+\t(dump_generic_node): Print weak clause if OMP_ATOMIC_WEAK.\n+\t* gimplify.c (goa_stabilize_expr): Add target_expr and rhs arguments,\n+\thandle pre_p == NULL case as a test mode that only returns value\n+\tbut doesn't change gimplify nor change anything otherwise, adjust\n+\trecursive calls, add MODIFY_EXPR, ADDR_EXPR, COND_EXPR, TARGET_EXPR\n+\tand CALL_EXPR handling, adjust COMPOUND_EXPR handling for\n+\t__builtin_clear_padding calls, for !rhs gimplify as lvalue rather\n+\tthan rvalue.\n+\t(gimplify_omp_atomic): Adjust goa_stabilize_expr caller.  Handle\n+\tCOND_EXPR rhs.  Set weak flag on gimple load/store for\n+\tOMP_ATOMIC_WEAK.\n+\t* omp-expand.c (omp_memory_order_to_fail_memmodel): New function.\n+\t(omp_memory_order_to_memmodel): Adjust for fail clause encoded\n+\tin the same enum.\n+\t(expand_omp_atomic_cas): New function.\n+\t(expand_omp_atomic_pipeline): Use omp_memory_order_to_fail_memmodel\n+\tfunction.\n+\t(expand_omp_atomic): Attempt to optimize atomic compare and exchange\n+\tusing expand_omp_atomic_cas.\n+\n+2021-09-10  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Michael Matz  <matz@suse.de>\n+\n+\t* tree-pass.h (PROP_loop_opts_done): New.\n+\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n+\tIntersect with global range.\n+\t* tree-ssa-loop.c (tree_ssa_loop_done): Set PROP_loop_opts_done.\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader_profitability::profitable_path_p): Disable\n+\tthreading through latches until after loop optimizations have run.\n+\n+2021-09-10  David Faust  <david.faust@oracle.com>\n+\n+\t* doc/invoke.texi: Document BPF -mcpu, -mjmpext, -mjmp32 and -malu32\n+\toptions.\n+\n+2021-09-10  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf-opts.h (bpf_isa_version): New enum.\n+\t* config/bpf/bpf-protos.h (bpf_expand_cbranch): New.\n+\t* config/bpf/bpf.c (bpf_option_override): Handle -mcpu option.\n+\t(bpf_expand_cbranch): New function.\n+\t* config/bpf/bpf.md (AM mode iterator): Conditionalize support for SI\n+\tmode.\n+\t(zero_extendsidi2): Only use mov32 instruction if it is available.\n+\t(SIM mode iterator): Conditionalize support for SI mode.\n+\t(JM mode iterator): New.\n+\t(cbranchdi4): Update name, use new JM iterator. Use bpf_expand_cbranch.\n+\t(*branch_on_di): Update name, use new JM iterator.\n+\t* config/bpf/bpf.opt: (mjmpext): New option.\n+\t(malu32): Likewise.\n+\t(mjmp32): Likewise.\n+\t(mcpu): Likewise.\n+\t(bpf_isa): New enum.\n+\n+2021-09-10  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.md (zero_extendhidi2): Add new output template\n+\tfor register-to-register extensions.\n+\t(zero_extendqidi2): Likewise.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102273\n+\t* internal-fn.c (expand_DEFERRED_INIT): Always expand non-SSA vars.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102269\n+\t* gimplify.c (is_var_need_auto_init): Empty types do not need\n+\tinitialization.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* configure.ac (--with-stabs): Remove.\n+\t* configure: Regenerate.\n+\t* doc/install.texi: Remove --with-stabs documentation.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: (_mm512_cmp_ph_mask):\n+\tNew intrinsic.\n+\t(_mm512_mask_cmp_ph_mask): Likewise.\n+\t(_mm512_cmp_round_ph_mask): Likewise.\n+\t(_mm512_mask_cmp_round_ph_mask): Likewise.\n+\t(_mm_cmp_sh_mask): Likewise.\n+\t(_mm_mask_cmp_sh_mask): Likewise.\n+\t(_mm_cmp_round_sh_mask): Likewise.\n+\t(_mm_mask_cmp_round_sh_mask): Likewise.\n+\t(_mm_comieq_sh): Likewise.\n+\t(_mm_comilt_sh): Likewise.\n+\t(_mm_comile_sh): Likewise.\n+\t(_mm_comigt_sh): Likewise.\n+\t(_mm_comige_sh): Likewise.\n+\t(_mm_comineq_sh): Likewise.\n+\t(_mm_ucomieq_sh): Likewise.\n+\t(_mm_ucomilt_sh): Likewise.\n+\t(_mm_ucomile_sh): Likewise.\n+\t(_mm_ucomigt_sh): Likewise.\n+\t(_mm_ucomige_sh): Likewise.\n+\t(_mm_ucomineq_sh): Likewise.\n+\t(_mm_comi_round_sh): Likewise.\n+\t(_mm_comi_sh): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_cmp_ph_mask): New intrinsic.\n+\t(_mm_mask_cmp_ph_mask): Likewise.\n+\t(_mm256_cmp_ph_mask): Likewise.\n+\t(_mm256_mask_cmp_ph_mask): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/i386.md (ssevecmode): Add HF mode.\n+\t(MODEFH): New mode iterator.\n+\t* config/i386/sse.md\n+\t(V48H_AVX512VL): New mode iterator to support HF vector modes.\n+\tAjdust corresponding description.\n+\t(ssecmpintprefix): New.\n+\t(VI12_AVX512VL): Adjust to support HF vector modes.\n+\t(cmp_imm_predicate): Likewise.\n+\t(<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>):\n+\tLikewise.\n+\t(avx512f_vmcmp<mode>3<round_saeonly_name>): Likewise.\n+\t(avx512f_vmcmp<mode>3_mask<round_saeonly_name>): Likewise.\n+\t(<sse>_<unord>comi<round_saeonly_name>): Likewise.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: (_mm512_max_ph): New intrinsic.\n+\t(_mm512_mask_max_ph): Likewise.\n+\t(_mm512_maskz_max_ph): Likewise.\n+\t(_mm512_min_ph): Likewise.\n+\t(_mm512_mask_min_ph): Likewise.\n+\t(_mm512_maskz_min_ph): Likewise.\n+\t(_mm512_max_round_ph): Likewise.\n+\t(_mm512_mask_max_round_ph): Likewise.\n+\t(_mm512_maskz_max_round_ph): Likewise.\n+\t(_mm512_min_round_ph): Likewise.\n+\t(_mm512_mask_min_round_ph): Likewise.\n+\t(_mm512_maskz_min_round_ph): Likewise.\n+\t(_mm_max_sh): Likewise.\n+\t(_mm_mask_max_sh): Likewise.\n+\t(_mm_maskz_max_sh): Likewise.\n+\t(_mm_min_sh): Likewise.\n+\t(_mm_mask_min_sh): Likewise.\n+\t(_mm_maskz_min_sh): Likewise.\n+\t(_mm_max_round_sh): Likewise.\n+\t(_mm_mask_max_round_sh): Likewise.\n+\t(_mm_maskz_max_round_sh): Likewise.\n+\t(_mm_min_round_sh): Likewise.\n+\t(_mm_mask_min_round_sh): Likewise.\n+\t(_mm_maskz_min_round_sh): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_max_ph): New intrinsic.\n+\t(_mm256_max_ph): Likewise.\n+\t(_mm_mask_max_ph): Likewise.\n+\t(_mm256_mask_max_ph): Likewise.\n+\t(_mm_maskz_max_ph): Likewise.\n+\t(_mm256_maskz_max_ph): Likewise.\n+\t(_mm_min_ph): Likewise.\n+\t(_mm256_min_ph): Likewise.\n+\t(_mm_mask_min_ph): Likewise.\n+\t(_mm256_mask_min_ph): Likewise.\n+\t(_mm_maskz_min_ph): Likewise.\n+\t(_mm256_maskz_min_ph): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t* config/i386/sse.md\n+\t(<code><mode>3<mask_name><round_saeonly_name>): Adjust to\n+\tsupport HF vector modes.\n+\t(*<code><mode>3<mask_name><round_saeonly_name>): Likewise.\n+\t(ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>):\n+\tLikewise.\n+\t(<sse>_vm<code><mode>3<mask_scalar_name><round_saeonly_scalar_name>):\n+\tLikewise.\n+\t* config/i386/subst.md (round_saeonly_mode512bit_condition):\n+\tAdjust for HF vector modes.\n+\n+2021-09-10  Liu, Hongtao  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_add_sh): New intrinsic.\n+\t(_mm_mask_add_sh): Likewise.\n+\t(_mm_maskz_add_sh): Likewise.\n+\t(_mm_sub_sh): Likewise.\n+\t(_mm_mask_sub_sh): Likewise.\n+\t(_mm_maskz_sub_sh): Likewise.\n+\t(_mm_mul_sh): Likewise.\n+\t(_mm_mask_mul_sh): Likewise.\n+\t(_mm_maskz_mul_sh): Likewise.\n+\t(_mm_div_sh): Likewise.\n+\t(_mm_mask_div_sh): Likewise.\n+\t(_mm_maskz_div_sh): Likewise.\n+\t(_mm_add_round_sh): Likewise.\n+\t(_mm_mask_add_round_sh): Likewise.\n+\t(_mm_maskz_add_round_sh): Likewise.\n+\t(_mm_sub_round_sh): Likewise.\n+\t(_mm_mask_sub_round_sh): Likewise.\n+\t(_mm_maskz_sub_round_sh): Likewise.\n+\t(_mm_mul_round_sh): Likewise.\n+\t(_mm_mask_mul_round_sh): Likewise.\n+\t(_mm_maskz_mul_round_sh): Likewise.\n+\t(_mm_div_round_sh): Likewise.\n+\t(_mm_mask_div_round_sh): Likewise.\n+\t(_mm_maskz_div_round_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_round_builtin): Handle new builtins.\n+\t* config/i386/sse.md (VF_128): Change description.\n+\t(<sse>_vm<plusminus_insn><mode>3<mask_scalar_name><round_scalar_name>):\n+\tAdjust to support HF vector modes.\n+\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name><round_scalar_name>):\n+\tLikewise.\n+\n+2021-09-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-expand.c\n+\t(ix86_avx256_split_vector_move_misalign): Handle V16HF mode.\n+\t* config/i386/i386.c\n+\t(ix86_preferred_simd_mode): Handle HF mode.\n+\t* config/i386/sse.md (V_256H): New mode iterator.\n+\t(avx_vextractf128<mode>): Use it.\n+\t(VEC_INIT_MODE): Align vector HFmode condition to vector\n+\tHImodes since there're no real HF instruction used.\n+\t(VEC_INIT_HALF_MODE): Ditto.\n+\t(VIHF): Ditto.\n+\t(VIHF_AVX512BW): Ditto.\n+\t(*vec_extracthf): Ditto.\n+\t(VEC_EXTRACT_MODE): Ditto.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/102255\n+\t* config/dbx.h: Remove.\n+\t* config/dbxcoff.h: Do not define PREFERRED_DEBUGGING_TYPE.\n+\t* config/lynx.h: Likewise.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_copysign): Expand\n+\tright into ANDNOT + AND + IOR, using paradoxical subregs.\n+\t(ix86_split_copysign_const): Remove.\n+\t(ix86_split_copysign_var): Ditto.\n+\t* config/i386/i386-protos.h (ix86_split_copysign_const): Dotto.\n+\t(ix86_split_copysign_var): Ditto.\n+\t* config/i386/i386.md (@copysign<mode>3_const): Ditto.\n+\t(@copysign<mode>3_var): Ditto.\n+\n 2021-09-09  qing zhao  <qing.zhao@oracle.com>\n \n \t* builtins.c (expand_builtin_memset): Make external visible."}, {"sha": "6edcec5ae6d718fd31c6262a0a01ce044e792d30", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1 +1 @@\n-20210910\n+20210911"}, {"sha": "684d7d08011bcc84c97277333b71396c678b5589", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,10 @@\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (c_finish_omp_atomic): Add r and weak arguments.\n+\t* c-omp.c: Include gimple-fold.h.\n+\t(c_finish_omp_atomic): Add r and weak arguments.  Add support for\n+\tOpenMP 5.1 atomics.\n+\n 2021-09-09  qing zhao  <qing.zhao@oracle.com>\n \n \t* c-attribs.c (handle_uninitialized_attribute): New function."}, {"sha": "28fe7bcf5b861a7623291ddc427e0da389e0955c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,16 @@\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_conditional_expression): If omp_atomic_lhs and\n+\tcond.value is >, < or == with omp_atomic_lhs as one of the operands,\n+\tdon't call build_conditional_expr, instead build a COND_EXPR directly.\n+\t(c_parser_binary_expression): Avoid calling parser_build_binary_op\n+\tif omp_atomic_lhs even in more cases for >, < or ==.\n+\t(c_parser_omp_atomic): Update function comment for OpenMP 5.1 atomics,\n+\tparse OpenMP 5.1 atomics and fail, compare and weak clauses, allow\n+\tacq_rel on atomic read/write and acq_rel/acquire clauses on update.\n+\t* c-typeck.c (build_binary_op): For flag_openmp only handle\n+\tMIN_EXPR/MAX_EXPR.\n+\n 2021-09-07  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_flush): Parse 'seq_cst' clause on 'flush'"}, {"sha": "8d1ec5d72a90800a73a3a75fba2e06f833ce4f2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,9 @@\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_atomic): Allow acq_rel on atomic read/write\n+\tand acq_rel/acquire clauses on update.\n+\t* semantics.c (finish_omp_atomic): Adjust c_finish_omp_atomic caller.\n+\n 2021-09-08  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/102228"}, {"sha": "334fd3942e89a15e3036de5fae79f39d4d2189fd", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,11 @@\n+2021-09-10  Petter Tomner  <tomner@kth.se>\n+\n+\t* jit-playback.c: Moved global var processing to after loc handling.\n+\t  Setting TYPE_NAME for fundamental types.\n+\t  Using common functions for finalizing globals.\n+\t* jit-playback.h: New method init_types().\n+\t  Changed get_tree_node_for_type() to method.\n+\n 2021-08-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* docs/examples/tut04-toyvm/toyvm.c: Include jit-dejagnu.h."}, {"sha": "896582a0ad22ffff2af9b0c835598eca5a891a05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,142 @@\n+2021-09-10  Petter Tomner  <tomner@kth.se>\n+\n+\t* jit.dg/test-error-array-bounds.c: Array is not unsigned\n+\t* jit.dg/jit.exp: Helper function\n+\t* jit.dg/test-debuginfo.c: New testcase\n+\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/atomic-17.c (foo): Add tests for atomic read,\n+\twrite or update with acq_rel clause and atomic update with acquire clause.\n+\t* c-c++-common/gomp/atomic-18.c (foo): Adjust expected diagnostics\n+\twording, remove tests moved to atomic-17.c.\n+\t* c-c++-common/gomp/atomic-21.c: Expect only 2 omp atomic release and\n+\t2 omp atomic acq_rel directives instead of 4 omp atomic release.\n+\t* c-c++-common/gomp/atomic-25.c: New test.\n+\t* c-c++-common/gomp/atomic-26.c: New test.\n+\t* c-c++-common/gomp/atomic-27.c: New test.\n+\t* c-c++-common/gomp/atomic-28.c: New test.\n+\t* c-c++-common/gomp/atomic-29.c: New test.\n+\t* c-c++-common/gomp/atomic-30.c: New test.\n+\t* c-c++-common/goacc-gomp/atomic.c: Expect 1 omp atomic release and\n+\t1 omp atomic_acq_rel instead of 2 omp atomic release directives.\n+\t* gcc.dg/gomp/atomic-5.c: Adjust expected error diagnostic wording.\n+\t* g++.dg/gomp/atomic-18.C:Expect 4 omp atomic release and\n+\t1 omp atomic_acq_rel instead of 5 omp atomic release directives.\n+\n+2021-09-10  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Adjust for disabling of\n+\tthreading through latches.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n+\n+2021-09-10  David Faust  <david.faust@oracle.com>\n+\n+\t* gcc.target/bpf/alu-1.c: New test.\n+\t* gcc.target/bpf/jmp-1.c: New test.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102273\n+\t* gcc.dg/pr102273.c: New testcase.\n+\n+2021-09-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/auto-init-padding-2.c: Fix 'dg-do run' syntax.\n+\t* c-c++-common/auto-init-padding-3.c: Likewise.\n+\n+2021-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102269\n+\t* gcc.dg/pr102269.c: New testcase.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h\n+\t(check_results_mask): New check_function.\n+\t* gcc.target/i386/avx512fp16-vcmpph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcmpph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcmpsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcmpsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcomish-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcomish-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcomish-1c.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcmpph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcmpph-1b.c: Ditto.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vmaxph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vmaxph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmaxsh-1.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmaxsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vminph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vminph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vminsh-1.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vminsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vmaxph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vmaxph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vminph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vminph-1b.c: Ditto.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vaddsh-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vaddsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vdivsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vdivsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmulsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmulsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsubsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsubsh-1b.c: Ditto.\n+\t* gcc.target/i386/pr54855-11.c: Ditto.\n+\n+2021-09-10  Liu, Hongtao  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/vect-float16-1.c: New test.\n+\t* gcc.target/i386/vect-float16-10.c: Ditto.\n+\t* gcc.target/i386/vect-float16-11.c: Ditto.\n+\t* gcc.target/i386/vect-float16-12.c: Ditto.\n+\t* gcc.target/i386/vect-float16-2.c: Ditto.\n+\t* gcc.target/i386/vect-float16-3.c: Ditto.\n+\t* gcc.target/i386/vect-float16-4.c: Ditto.\n+\t* gcc.target/i386/vect-float16-5.c: Ditto.\n+\t* gcc.target/i386/vect-float16-6.c: Ditto.\n+\t* gcc.target/i386/vect-float16-7.c: Ditto.\n+\t* gcc.target/i386/vect-float16-8.c: Ditto.\n+\t* gcc.target/i386/vect-float16-9.c: Ditto.\n+\n+2021-09-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512dq-abs-copysign-1.c: Adjust testcase.\n+\t* gcc.target/i386/avx512vl-abs-copysign-1.c: Adjust testcase.\n+\n 2021-09-09  qing zhao  <qing.zhao@oracle.com>\n \n \t* c-c++-common/auto-init-1.c: New test."}, {"sha": "4d9e20669426a7c10eedeb46cb7f820f539dac9b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,9 @@\n+2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/atomic-19.c: New test.\n+\t* testsuite/libgomp.c-c++-common/atomic-20.c: New test.\n+\t* testsuite/libgomp.c-c++-common/atomic-21.c: New test.\n+\n 2021-09-07  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP Implementation Status): Extend"}, {"sha": "f2edd40bdefa0eb354ec650a1b513f31bf081a55", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26206ec7b8f8c60747c25d009ea7f9b94184215/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26206ec7b8f8c60747c25d009ea7f9b94184215/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a26206ec7b8f8c60747c25d009ea7f9b94184215", "patch": "@@ -1,3 +1,8 @@\n+2021-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:\n+\tFix invalid hostname to only match the .invalid TLD.\n+\n 2021-09-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_base.h (__atomic_base<P*>::compare_exchange_weak):"}]}