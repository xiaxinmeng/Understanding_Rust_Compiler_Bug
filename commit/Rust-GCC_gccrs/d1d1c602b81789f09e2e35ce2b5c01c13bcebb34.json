{"sha": "d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFkMWM2MDJiODE3ODlmMDllMmUzNWNlMmI1YzAxYzEzYmNlYmIzNA==", "commit": {"author": {"name": "Bingfeng Mei", "email": "bmei@broadcom.com", "date": "2009-04-08T13:51:35Z"}, "committer": {"name": "Bingfeng Mei", "email": "meibf@gcc.gnu.org", "date": "2009-04-08T13:51:35Z"}, "message": "fold-const.c (const_binop): Combine two VECTOR_CST under operation CODE to produce a new one.\n\n2009-04-08 Bingfeng Mei <bmei@broadcom.com>\n\n\t* fold-const.c (const_binop): Combine two VECTOR_CST under operation \n        CODE to produce a new one. Add a prototype to use fold_convert_const\n\nFrom-SVN: r145731", "tree": {"sha": "5f363db3db831835937fc93bc08008f4d2f74046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f363db3db831835937fc93bc08008f4d2f74046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34/comments", "author": null, "committer": null, "parents": [{"sha": "40a14772d9e3ac71989aa3c8638d0fd40ed4ae9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a14772d9e3ac71989aa3c8638d0fd40ed4ae9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a14772d9e3ac71989aa3c8638d0fd40ed4ae9a"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "027355c57e99bd471681fcea6d761db285209808", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "patch": "@@ -1,3 +1,8 @@\n+2009-04-08 Bingfeng Mei <bmei@broadcom.com>\n+\n+\t* fold-const.c (const_binop): Combine two VECTOR_CST under operation \n+        CODE to produce a new one. Add a prototype to use fold_convert_const\n+\n 2009-04-08  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR bootstrap/39660"}, {"sha": "7dcf993269d17fdc04d96c2b5b640589c910005a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "patch": "@@ -141,6 +141,7 @@ static bool reorder_operands_p (const_tree, const_tree);\n static tree fold_negate_const (tree, tree);\n static tree fold_not_const (tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n+static tree fold_convert_const (enum tree_code, tree, tree);\n \n \n /* We know that A1 + B1 = SUM1, using 2's complement arithmetic and ignoring\n@@ -1998,6 +1999,50 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \treturn build_complex (type, real, imag);\n     }\n \n+  if (TREE_CODE (arg1) == VECTOR_CST)\n+    {\n+      tree type = TREE_TYPE(arg1);\n+      int count = TYPE_VECTOR_SUBPARTS (type), i;\n+      tree elements1, elements2, list = NULL_TREE;\n+      \n+      if(TREE_CODE(arg2) != VECTOR_CST)\n+        return NULL_TREE;\n+        \n+      elements1 = TREE_VECTOR_CST_ELTS (arg1);\n+      elements2 = TREE_VECTOR_CST_ELTS (arg2);\n+\n+      for (i = 0; i < count; i++)\n+\t{\n+          tree elem1, elem2, elem;\n+          \n+          /* The trailing elements can be empty and should be treated as 0 */\n+          if(!elements1)\n+            elem1 = fold_convert_const (NOP_EXPR, TREE_TYPE (type), integer_zero_node);\n+          else\n+            {\n+              elem1 = TREE_VALUE(elements1);\n+              elements1 = TREE_CHAIN (elements1);\n+            }  \n+            \n+          if(!elements2)\n+            elem2 = fold_convert_const (NOP_EXPR, TREE_TYPE (type), integer_zero_node);\n+          else\n+            {\n+              elem2 = TREE_VALUE(elements2);\n+              elements2 = TREE_CHAIN (elements2);\n+            }\n+              \n+          elem = const_binop (code, elem1, elem2, notrunc);\n+          \n+          /* It is possible that const_binop cannot handle the given\n+            code and return NULL_TREE */\n+          if(elem == NULL_TREE)\n+            return NULL_TREE;\n+          \n+          list = tree_cons (NULL_TREE, elem, list);\n+\t}\n+      return build_vector(type, nreverse(list));  \n+    }\n   return NULL_TREE;\n }\n "}]}