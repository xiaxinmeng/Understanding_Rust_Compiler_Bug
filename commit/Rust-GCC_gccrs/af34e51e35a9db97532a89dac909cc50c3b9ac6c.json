{"sha": "af34e51e35a9db97532a89dac909cc50c3b9ac6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzNGU1MWUzNWE5ZGI5NzUzMmE4OWRhYzkwOWNjNTBjM2I5YWM2Yw==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@broadcom.com", "date": "2002-08-07T02:57:53Z"}, "committer": {"name": "Chris Demetriou", "email": "cgd@gcc.gnu.org", "date": "2002-08-07T02:57:53Z"}, "message": "mips.c (override_options): Set MASK_BRANCHLIKELY in target_flags based on ISA...\n\n2002-08-06  Chris Demetriou  <cgd@broadcom.com>\n\n        * config/mips/mips.c (override_options): Set MASK_BRANCHLIKELY\n        in target_flags based on ISA, if it was not set on the command\n        line.  Warn if MASK_BRANCHLIKLEY is set but the ISA does not\n        support Branch Likely instructions.\n        * config/mips/mips.h (MASK_BRANCHLIKLEY): New macro.\n        (TARGET_BRANCHLIKELY): Likewise.\n        (TARGET_SWITCHES): Add -mbranch-likely and -mno-branch-likely.\n        (GENERATE_BRANCHLIKELY): Use TARGET_BRANCHLIKELY rather than\n        ISA_HAS_BRANCHLIKELY.\n        (ISA_HAS_BRANCHLIKELY): Do not include MIPS16 check.\n        * doc/invoke.texi: Document new MIPS -mbranch-likely and\n        -mno-branch-likely options.\n\nFrom-SVN: r56088", "tree": {"sha": "c13b0c62cab6a17157a952037ef5199d0d414ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c13b0c62cab6a17157a952037ef5199d0d414ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af34e51e35a9db97532a89dac909cc50c3b9ac6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34e51e35a9db97532a89dac909cc50c3b9ac6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af34e51e35a9db97532a89dac909cc50c3b9ac6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34e51e35a9db97532a89dac909cc50c3b9ac6c/comments", "author": null, "committer": null, "parents": [{"sha": "f538618effe28e22c24338e973a5916c36771651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f538618effe28e22c24338e973a5916c36771651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f538618effe28e22c24338e973a5916c36771651"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "e02d1c6e4d84bd966fae9e2be5af2a7d2e753c94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af34e51e35a9db97532a89dac909cc50c3b9ac6c", "patch": "@@ -1,3 +1,18 @@\n+2002-08-06  Chris Demetriou  <cgd@broadcom.com>\n+\n+\t* config/mips/mips.c (override_options): Set MASK_BRANCHLIKELY\n+\tin target_flags based on ISA, if it was not set on the command\n+\tline.  Warn if MASK_BRANCHLIKLEY is set but the ISA does not\n+\tsupport Branch Likely instructions.\n+\t* config/mips/mips.h (MASK_BRANCHLIKLEY): New macro.\n+\t(TARGET_BRANCHLIKELY): Likewise.\n+\t(TARGET_SWITCHES): Add -mbranch-likely and -mno-branch-likely.\n+\t(GENERATE_BRANCHLIKELY): Use TARGET_BRANCHLIKELY rather than\n+\tISA_HAS_BRANCHLIKELY.\n+\t(ISA_HAS_BRANCHLIKELY): Do not include MIPS16 check.\n+\t* doc/invoke.texi: Document new MIPS -mbranch-likely and\n+\t-mno-branch-likely options.\n+\n 2002-08-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ip2k.c (ip2k_set_compare): Add missing iteration variable."}, {"sha": "aa6be83c2067dba45dbd58ae82656bb68ee6e0f9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=af34e51e35a9db97532a89dac909cc50c3b9ac6c", "patch": "@@ -5177,6 +5177,31 @@ override_options ()\n   if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n     flag_pcc_struct_return = 0;\n \n+  if ((target_flags_explicit & MASK_BRANCHLIKELY) == 0)\n+    {\n+      /* If neither -mbranch-likely nor -mno-branch-likely was given\n+\t on the command line, set MASK_BRANCHLIKELY based on the target\n+\t architecture.\n+\n+\t By default, we enable use of Branch Likely instructions on\n+\t all architectures which support them except for MIPS32 and MIPS64\n+\t (i.e., the generic MIPS32 and MIPS64 ISAs, and processors which\n+\t implement them).\n+\n+\t The MIPS32 and MIPS64 architecture specifications say \"Software\n+\t is strongly encouraged to avoid use of Branch Likely\n+\t instructions, as they will be removed from a future revision\n+\t of the [MIPS32 and MIPS64] architecture.\"  Therefore, we do not\n+\t issue those instructions unless instructed to do so by\n+\t -mbranch-likely.  */\n+      if (ISA_HAS_BRANCHLIKELY && !(ISA_MIPS32 || ISA_MIPS64))\n+\ttarget_flags |= MASK_BRANCHLIKELY;\n+      else\n+\ttarget_flags &= ~MASK_BRANCHLIKELY;\n+    }\n+  if (TARGET_BRANCHLIKELY && !ISA_HAS_BRANCHLIKELY)\n+    warning (\"generation of Branch Likely instructions enabled, but not supported by architecture\");\n+\n   /* -fpic (-KPIC) is the default when TARGET_ABICALLS is defined.  We need\n      to set flag_pic so that the LEGITIMATE_PIC_OPERAND_P macro will work.  */\n   /* ??? -non_shared turns off pic code generation, but this is not"}, {"sha": "eaf68528911216da02fe3bca4d007bf9340cc951", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=af34e51e35a9db97532a89dac909cc50c3b9ac6c", "patch": "@@ -232,6 +232,8 @@ extern void\t\tsbss_section PARAMS ((void));\n \t\t\t\t\t   consts in rodata */\n #define MASK_NO_FUSED_MADD 0x01000000   /* Don't generate floating point\n \t\t\t\t\t   multiply-add operations.  */\n+#define MASK_BRANCHLIKELY  0x02000000   /* Generate Branch Likely\n+\t\t\t\t\t   instructions.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -322,6 +324,8 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TARGET_NO_CHECK_ZERO_DIV (target_flags & MASK_NO_CHECK_ZERO_DIV)\n #define TARGET_CHECK_RANGE_DIV  (target_flags & MASK_CHECK_RANGE_DIV)\n \n+#define TARGET_BRANCHLIKELY\t(target_flags & MASK_BRANCHLIKELY)\n+\n /* This is true if we must enable the assembly language file switching\n    code.  */\n \n@@ -608,6 +612,10 @@ extern void\t\tsbss_section PARAMS ((void));\n      N_(\"Trap on integer divide overflow\")},\t\t\t\t\\\n   {\"no-check-range-division\",-MASK_CHECK_RANGE_DIV,\t\t\t\\\n      N_(\"Don't trap on integer divide overflow\")},\t\t\t\\\n+  { \"branch-likely\",      MASK_BRANCHLIKELY,\t\t\t\t\\\n+      N_(\"Use Branch Likely instructions, overriding default for arch\")}, \\\n+  { \"no-branch-likely\",  -MASK_BRANCHLIKELY,\t\t\t\t\\\n+      N_(\"Don't use Branch Likely instructions, overriding default for arch\")}, \\\n   {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n   {\"debuga\",\t\t  MASK_DEBUG_A,\t\t\t\t\t\\\n@@ -741,7 +749,7 @@ extern void\t\tsbss_section PARAMS ((void));\n /* This is meant to be redefined in the host dependent files.  */\n #define SUBTARGET_TARGET_OPTIONS\n \n-#define GENERATE_BRANCHLIKELY   (!TARGET_MIPS16 && ISA_HAS_BRANCHLIKELY)\n+#define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY && !TARGET_MIPS16)\n \n /* Generate three-operand multiply instructions for SImode.  */\n #define GENERATE_MULT3_SI       ((TARGET_MIPS3900                       \\\n@@ -776,8 +784,7 @@ extern void\t\tsbss_section PARAMS ((void));\n /* ISA has branch likely instructions (eg. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n-#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1\t\t\t\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1)\n \n /* ISA has the conditional move instructions introduced in mips4.  */\n #define ISA_HAS_CONDMOVE        ((ISA_MIPS4\t\t\t\t\\"}, {"sha": "71beb9485c6deff38f55d97f2c5db207617cc579", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34e51e35a9db97532a89dac909cc50c3b9ac6c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=af34e51e35a9db97532a89dac909cc50c3b9ac6c", "patch": "@@ -477,7 +477,8 @@ in the following sections.\n -m4650  -msingle-float  -mmad @gol\n -mstats  -EL  -EB  -G @var{num}  -nocpp @gol\n -mabi=32  -mabi=n32  -mabi=64  -mabi=eabi @gol\n--mfix7000  -mno-crt0 -mflush-func=@var{func} -mno-flush-func}\n+-mfix7000  -mno-crt0 -mflush-func=@var{func} -mno-flush-func\n+-mbranch-likely -mno-branch-likely}\n \n @emph{i386 and x86-64 Options}\n @gccoptlist{\n@@ -7369,6 +7370,18 @@ memory range for which the cache is being flushed, the size of the\n memory range, and the number 3 (to flush both caches).  The default\n depends on the target gcc was configured for, but commonly is either\n @samp{_flush_func} or @samp{__cpu_flush}.\n+\n+@item -mbranch-likely\n+@itemx -mno-branch-likely\n+@opindex mbranch-likely\n+@opindex mno-branch-likely\n+Enable or disable use of Branch Likely instructions, regardless of the\n+default for the selected architecture.  By default, Branch Likely\n+instructions may be generated if they are supported by the selected\n+architecture.  An exception is for the MIPS32 and MIPS64 architectures\n+and processors which implement those architectures; for those, Branch\n+Likely instructions will not be generated by default because the MIPS32\n+and MIPS64 architectures specifically deprecate their use.\n @end table\n \n @node i386 and x86-64 Options"}]}