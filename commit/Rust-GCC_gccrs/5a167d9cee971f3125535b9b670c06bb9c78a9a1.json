{"sha": "5a167d9cee971f3125535b9b670c06bb9c78a9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExNjdkOWNlZTk3MWYzMTI1NTM1YjliNjcwYzA2YmI5Yzc4YTlhMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-28T18:21:17Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-28T18:21:17Z"}, "message": "(output_move_double): Handle reg[n,n+1] = mem[reg[n] + reg[n+1]].\n\nFrom-SVN: r4789", "tree": {"sha": "c82b0faf76bc7fc9ca76a844c37792aaa0b85d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c82b0faf76bc7fc9ca76a844c37792aaa0b85d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a167d9cee971f3125535b9b670c06bb9c78a9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a167d9cee971f3125535b9b670c06bb9c78a9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a167d9cee971f3125535b9b670c06bb9c78a9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a167d9cee971f3125535b9b670c06bb9c78a9a1/comments", "author": null, "committer": null, "parents": [{"sha": "3b76513aee76adbfa5a19dd2d7a27fdae1e02940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b76513aee76adbfa5a19dd2d7a27fdae1e02940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b76513aee76adbfa5a19dd2d7a27fdae1e02940"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "6dd4a968869b14b722a76bf804b903f5241c0d71", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a167d9cee971f3125535b9b670c06bb9c78a9a1/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a167d9cee971f3125535b9b670c06bb9c78a9a1/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=5a167d9cee971f3125535b9b670c06bb9c78a9a1", "patch": "@@ -316,7 +316,42 @@ output_move_double (operands)\n       return singlemove_string (operands);\n     }\n \n-  /* Not autodecrementing.  Do the two words, low-numbered first.  */\n+  /* If the first move would clobber the source of the second one,\n+     do them in the other order.  */\n+\n+  /* Overlapping registers.  */\n+  if (optype0 == REGOP && optype1 == REGOP\n+      && REGNO (op0) == REGNO (latehalf[1]))\n+    {\n+      /* Do that word.  */\n+      output_asm_insn (singlemove_string (latehalf), latehalf);\n+      /* Do low-numbered word.  */\n+      return singlemove_string (operands);\n+    }\n+  /* Loading into a register which overlaps a register used in the address.  */\n+  else if (optype0 == REGOP && optype1 != REGOP\n+\t   && reg_overlap_mentioned_p (op0, op1))\n+    {\n+      if (reg_mentioned_p (op0, XEXP (op1, 0))\n+\t  && reg_mentioned_p (latehalf[0], XEXP (op1, 0)))\n+\t{\n+\t  /* If both halves of dest are used in the src memory address,\n+\t     add the two regs and put them in the low reg (op0).\n+\t     Then it works to load latehalf first.  */\n+\t  rtx xops[2];\n+\t  xops[0] = latehalf[0];\n+\t  xops[1] = op0;\n+\t  output_asm_insn (\"addd %0,%1\", xops);\n+\t  operands[1] = gen_rtx (MEM, DImode, op0);\n+\t  latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+\t}\n+      /* Do the late half first.  */\n+      output_asm_insn (singlemove_string (latehalf), latehalf);\n+      /* Then clobber.  */\n+      return singlemove_string (operands);\n+    }\n+\n+  /* Normal case.  Do the two words, low-numbered first.  */\n \n   output_asm_insn (singlemove_string (operands), operands);\n "}]}