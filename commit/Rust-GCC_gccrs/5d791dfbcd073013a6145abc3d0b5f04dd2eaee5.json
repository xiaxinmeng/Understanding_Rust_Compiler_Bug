{"sha": "5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3OTFkZmJjZDA3MzAxM2E2MTQ1YWJjM2QwYjVmMDRkZDJlYWVlNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:43:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:43:38Z"}, "message": "[multiple changes]\n\n2010-06-23  Robert Dewar  <dewar@adacore.com>\n\n\t* g-pehage.adb, exp_ch13.adb: Minor reformatting.\n\n2010-06-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-tags.ads: Fix description of TSD structure.\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Mark_Context): When indicating that the body of a\n\tgeneric unit is needed prior to the unit containing an instantiation,\n\tsearch recursively the context of the generic to add other generic\n\tbodies that may be instantiated indirectly through the current instance.\n\nFrom-SVN: r161251", "tree": {"sha": "d0b3db2e61510958173a65857c5779941e38a686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b3db2e61510958173a65857c5779941e38a686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/comments", "author": null, "committer": null, "parents": [{"sha": "cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd"}], "stats": {"total": 113, "additions": 97, "deletions": 16}, "files": [{"sha": "ea344cbab2121fa1eafc0a9068e162850638be81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "patch": "@@ -1,3 +1,18 @@\n+2010-06-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-pehage.adb, exp_ch13.adb: Minor reformatting.\n+\n+2010-06-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-tags.ads: Fix description of TSD structure.\n+\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Mark_Context): When indicating that the body of a\n+\tgeneric unit is needed prior to the unit containing an instantiation,\n+\tsearch recursively the context of the generic to add other generic\n+\tbodies that may be instantiated indirectly through the current instance.\n+\n 2010-06-23  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb: Minor reformatting."}, {"sha": "7ef214bf83ca2e17ba0c6fbbf87afa6c76bd5af4", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -101,7 +101,7 @@ private\n    --                                    +-------------------+\n    --                                    |   hash table link |\n    --                                    +-------------------+\n-   --                                    | remotely callable |\n+   --                                    |   transportable   |\n    --                                    +-------------------+\n    --                                    | rec ctrler offset |\n    --                                    +-------------------+"}, {"sha": "d0004f473a0a87bf32e02452548fa19ea7e8ce8b", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "patch": "@@ -358,7 +358,6 @@ package body Exp_Ch13 is\n             then\n                declare\n                   Save_Force : constant Boolean := Force_Validity_Checks;\n-\n                begin\n                   Force_Validity_Checks := True;\n                   Analyze (Decl);"}, {"sha": "82cb6d0327822dacc818b430b6b796dfb53075de", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "patch": "@@ -2519,6 +2519,7 @@ package body GNAT.Perfect_Hash_Generators is\n             return Str (Str'First .. J);\n          end if;\n       end loop;\n+\n       return Str;\n    end Trim_Trailing_Nuls;\n "}, {"sha": "da144b898102b85dfa6093c5297ec1dc6c2449ec", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 79, "deletions": 13, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d791dfbcd073013a6145abc3d0b5f04dd2eaee5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=5d791dfbcd073013a6145abc3d0b5f04dd2eaee5", "patch": "@@ -10394,16 +10394,78 @@ package body Sem_Ch12 is\n    ------------------\n \n    procedure Mark_Context (Inst_Decl : Node_Id; Gen_Decl : Node_Id) is\n-      Inst_CU : constant Unit_Number_Type := Get_Code_Unit   (Inst_Decl);\n+      Loc     : constant Source_Ptr := Sloc (Inst_Decl);\n+      Inst_CU : constant Unit_Number_Type := Get_Code_Unit (Inst_Decl);\n+\n+      --  Note that we use Get_Code_Unit to determine the position of the\n+      --  instantiation, because it may itself appear within another instance\n+      --  and we need to mark the context of the enclosing unit, not that of\n+      --  the unit that contains the generic.\n+\n       Gen_CU  : constant Unit_Number_Type := Get_Source_Unit (Gen_Decl);\n       Inst    : Entity_Id;\n       Clause  : Node_Id;\n+      Scop    : Entity_Id;\n+\n+      procedure Add_Implicit_With (CU : Unit_Number_Type);\n+      --  If a generic is instantiated in the direct or indirect context of\n+      --  the current unit, but there is no with_clause for it in the current\n+      --  context, add a with_clause for it to indicate that the body of the\n+      --  generic should be examined before the current unit.\n+\n+      procedure Add_Implicit_With (CU : Unit_Number_Type) is\n+         Withn : constant Node_Id :=\n+           Make_With_Clause (Loc,\n+              Name => New_Occurrence_Of (Cunit_Entity (CU), Loc));\n+      begin\n+         Set_Implicit_With (Withn);\n+         Set_Library_Unit (Withn, Cunit (CU));\n+         Set_Withed_Body (Withn, Cunit (CU));\n+         Append (Withn, Context_Items (Cunit (Inst_CU)));\n+      end Add_Implicit_With;\n \n    begin\n-      --  Note that we use Get_Code_Unit to determine the position of the\n-      --  instantiation, because it may itself appear within another instance\n-      --  and we need to mark the context of the enclosing unit, not that of\n-      --  the unit that contains the corresponding generic.\n+      --  This is only relevant when compiling for CodePeer. In what follows,\n+      --  C is the current unit containing the instance body, and G is the\n+      --  generic unit in that instance.\n+\n+      if not CodePeer_Mode then\n+         return;\n+      end if;\n+\n+      --  If G is itself declared within an instance, indicate that the generic\n+      --  body of that instance is also needed by C. This must be done\n+      --  recursively.\n+\n+      Scop := Scope (Defining_Entity (Gen_Decl));\n+\n+      while Is_Generic_Instance (Scop)\n+        and then Ekind (Scop) = E_Package\n+      loop\n+         Mark_Context\n+           (Inst_Decl,\n+            Unit_Declaration_Node (Generic_Parent (Parent (Scop))));\n+         Scop := Scope (Scop);\n+      end loop;\n+\n+      --  Add references to other generic units in the context of G, because\n+      --  they may be instantiated within G, and their bodies needed by C.\n+\n+      Clause := First (Context_Items (Cunit (Gen_CU)));\n+\n+      while Present (Clause) loop\n+         if Nkind (Clause) = N_With_Clause\n+           and then\n+             Nkind (Unit (Library_Unit (Clause)))\n+               = N_Generic_Package_Declaration\n+         then\n+            Add_Implicit_With (Get_Source_Unit (Library_Unit (Clause)));\n+         end if;\n+\n+         Next (Clause);\n+      end loop;\n+\n+      --  Now indicate that the body of G is needed by C\n \n       Clause := First (Context_Items (Cunit (Inst_CU)));\n       while Present (Clause) loop\n@@ -10417,8 +10479,8 @@ package body Sem_Ch12 is\n          Next (Clause);\n       end loop;\n \n-      --  If the with-clause for the generic unit was not found, it must\n-      --  appear in some ancestor of the current unit.\n+      --  If the with-clause for G is not in the context of C, it may appear in\n+      --  some ancestor of C.\n \n       Inst := Cunit_Entity (Inst_CU);\n       while Is_Child_Unit (Inst) loop\n@@ -10428,7 +10490,7 @@ package body Sem_Ch12 is\n            First (Context_Items (Parent (Unit_Declaration_Node (Inst))));\n          while Present (Clause) loop\n             if Nkind (Clause) = N_With_Clause\n-              and then  Library_Unit (Clause) = Cunit (Gen_CU)\n+              and then Library_Unit (Clause) = Cunit (Gen_CU)\n             then\n                Set_Withed_Body (Clause, Cunit (Gen_CU));\n                return;\n@@ -10437,6 +10499,11 @@ package body Sem_Ch12 is\n             Next (Clause);\n          end loop;\n       end loop;\n+\n+      --  If not found, G comes from an instance elsewhere in the context. Make\n+      --  the dependence explicit in the context of C.\n+\n+      Add_Implicit_With (Gen_CU);\n    end Mark_Context;\n \n    ---------------------\n@@ -10499,8 +10566,8 @@ package body Sem_Ch12 is\n       --  instantiations are available, we must analyze them, to ensure that\n       --  the public symbols generated are the same when the unit is compiled\n       --  to generate code, and when it is compiled in the context of a unit\n-      --  that needs a particular nested instance. This process is applied\n-      --  to both package and subprogram instances.\n+      --  that needs a particular nested instance. This process is applied to\n+      --  both package and subprogram instances.\n \n       --------------------------------\n       -- Collect_Previous_Instances --\n@@ -10650,9 +10717,8 @@ package body Sem_Ch12 is\n                --  enclosing body. Because the generic body we need may use\n                --  global entities declared in the enclosing package (including\n                --  aggregates) it is in general necessary to compile this body\n-               --  with expansion enabled. The exception is if we are within a\n-               --  generic package, in which case the usual generic rule\n-               --  applies.\n+               --  with expansion enabled, except if we are within a generic\n+               --  package, in which case the usual generic rule applies.\n \n                declare\n                   Exp_Status         : Boolean := True;"}]}