{"sha": "6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "node_id": "C_kwDOANBUbNoAKDY3NzRkNTY5YzYxY2IwY2M4MGZjOWU4MDljZDkyZGRhMDAxMGM5YzM", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-15T15:04:32Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:24Z"}, "message": "gccrs: Fix formatting\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-pattern.h: Fix formatting.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "e6faa1686de39521e0941b705d71afbaf17c2c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6faa1686de39521e0941b705d71afbaf17c2c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6774d569c61cb0cc80fc9e809cd92dda0010c9c3/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0ed2387a52201cd58a7f57e53ac20f5bbe6ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0ed2387a52201cd58a7f57e53ac20f5bbe6ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0ed2387a52201cd58a7f57e53ac20f5bbe6ddb"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "0e2f56e32164898da187444ced570b49edbbf475", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6774d569c61cb0cc80fc9e809cd92dda0010c9c3/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6774d569c61cb0cc80fc9e809cd92dda0010c9c3/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "patch": "@@ -763,7 +763,7 @@ struct StructPatternElements\n {\n private:\n   // bool has_struct_pattern_fields;\n-  std::vector<std::unique_ptr<StructPatternField> > fields;\n+  std::vector<std::unique_ptr<StructPatternField>> fields;\n \n   bool has_struct_pattern_etc;\n   std::vector<Attribute> struct_pattern_etc_attrs;\n@@ -788,15 +788,15 @@ struct StructPatternElements\n \n   // Constructor for StructPatternElements with both (potentially)\n   StructPatternElements (\n-    std::vector<std::unique_ptr<StructPatternField> > fields,\n+    std::vector<std::unique_ptr<StructPatternField>> fields,\n     std::vector<Attribute> etc_attrs)\n     : fields (std::move (fields)), has_struct_pattern_etc (true),\n       struct_pattern_etc_attrs (std::move (etc_attrs))\n   {}\n \n   // Constructor for StructPatternElements with no StructPatternEtc\n   StructPatternElements (\n-    std::vector<std::unique_ptr<StructPatternField> > fields)\n+    std::vector<std::unique_ptr<StructPatternField>> fields)\n     : fields (std::move (fields)), has_struct_pattern_etc (false),\n       struct_pattern_etc_attrs ()\n   {}\n@@ -832,18 +832,17 @@ struct StructPatternElements\n   static StructPatternElements create_empty ()\n   {\n     return StructPatternElements (\n-      std::vector<std::unique_ptr<StructPatternField> > ());\n+      std::vector<std::unique_ptr<StructPatternField>> ());\n   }\n \n   std::string as_string () const;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<StructPatternField> > &\n-  get_struct_pattern_fields ()\n+  std::vector<std::unique_ptr<StructPatternField>> &get_struct_pattern_fields ()\n   {\n     return fields;\n   }\n-  const std::vector<std::unique_ptr<StructPatternField> > &\n+  const std::vector<std::unique_ptr<StructPatternField>> &\n   get_struct_pattern_fields () const\n   {\n     return fields;\n@@ -956,10 +955,10 @@ class TupleStructItems\n // Class for non-ranged tuple struct pattern patterns\n class TupleStructItemsNoRange : public TupleStructItems\n {\n-  std::vector<std::unique_ptr<Pattern> > patterns;\n+  std::vector<std::unique_ptr<Pattern>> patterns;\n \n public:\n-  TupleStructItemsNoRange (std::vector<std::unique_ptr<Pattern> > patterns)\n+  TupleStructItemsNoRange (std::vector<std::unique_ptr<Pattern>> patterns)\n     : patterns (std::move (patterns))\n   {}\n \n@@ -991,8 +990,8 @@ class TupleStructItemsNoRange : public TupleStructItems\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_patterns () { return patterns; }\n-  const std::vector<std::unique_ptr<Pattern> > &get_patterns () const\n+  std::vector<std::unique_ptr<Pattern>> &get_patterns () { return patterns; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_patterns () const\n   {\n     return patterns;\n   }\n@@ -1011,12 +1010,12 @@ class TupleStructItemsNoRange : public TupleStructItems\n // Class for ranged tuple struct pattern patterns\n class TupleStructItemsRange : public TupleStructItems\n {\n-  std::vector<std::unique_ptr<Pattern> > lower_patterns;\n-  std::vector<std::unique_ptr<Pattern> > upper_patterns;\n+  std::vector<std::unique_ptr<Pattern>> lower_patterns;\n+  std::vector<std::unique_ptr<Pattern>> upper_patterns;\n \n public:\n-  TupleStructItemsRange (std::vector<std::unique_ptr<Pattern> > lower_patterns,\n-\t\t\t std::vector<std::unique_ptr<Pattern> > upper_patterns)\n+  TupleStructItemsRange (std::vector<std::unique_ptr<Pattern>> lower_patterns,\n+\t\t\t std::vector<std::unique_ptr<Pattern>> upper_patterns)\n     : lower_patterns (std::move (lower_patterns)),\n       upper_patterns (std::move (upper_patterns))\n   {}\n@@ -1056,21 +1055,21 @@ class TupleStructItemsRange : public TupleStructItems\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_lower_patterns ()\n   {\n     return lower_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_lower_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_lower_patterns () const\n   {\n     return lower_patterns;\n   }\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_upper_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_upper_patterns ()\n   {\n     return upper_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_upper_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_upper_patterns () const\n   {\n     return upper_patterns;\n   }\n@@ -1233,10 +1232,10 @@ TuplePatternItemsSingle(*this);\n // Class representing TuplePattern patterns where there are multiple patterns\n class TuplePatternItemsMultiple : public TuplePatternItems\n {\n-  std::vector<std::unique_ptr<Pattern> > patterns;\n+  std::vector<std::unique_ptr<Pattern>> patterns;\n \n public:\n-  TuplePatternItemsMultiple (std::vector<std::unique_ptr<Pattern> > patterns)\n+  TuplePatternItemsMultiple (std::vector<std::unique_ptr<Pattern>> patterns)\n     : patterns (std::move (patterns))\n   {}\n \n@@ -1268,8 +1267,8 @@ class TuplePatternItemsMultiple : public TuplePatternItems\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_patterns () { return patterns; }\n-  const std::vector<std::unique_ptr<Pattern> > &get_patterns () const\n+  std::vector<std::unique_ptr<Pattern>> &get_patterns () { return patterns; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_patterns () const\n   {\n     return patterns;\n   }\n@@ -1291,13 +1290,12 @@ class TuplePatternItemsMultiple : public TuplePatternItems\n // Class representing TuplePattern patterns where there are a range of patterns\n class TuplePatternItemsRanged : public TuplePatternItems\n {\n-  std::vector<std::unique_ptr<Pattern> > lower_patterns;\n-  std::vector<std::unique_ptr<Pattern> > upper_patterns;\n+  std::vector<std::unique_ptr<Pattern>> lower_patterns;\n+  std::vector<std::unique_ptr<Pattern>> upper_patterns;\n \n public:\n-  TuplePatternItemsRanged (\n-    std::vector<std::unique_ptr<Pattern> > lower_patterns,\n-    std::vector<std::unique_ptr<Pattern> > upper_patterns)\n+  TuplePatternItemsRanged (std::vector<std::unique_ptr<Pattern>> lower_patterns,\n+\t\t\t   std::vector<std::unique_ptr<Pattern>> upper_patterns)\n     : lower_patterns (std::move (lower_patterns)),\n       upper_patterns (std::move (upper_patterns))\n   {}\n@@ -1338,21 +1336,21 @@ class TuplePatternItemsRanged : public TuplePatternItems\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_lower_patterns ()\n   {\n     return lower_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_lower_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_lower_patterns () const\n   {\n     return lower_patterns;\n   }\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_upper_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_upper_patterns ()\n   {\n     return upper_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_upper_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_upper_patterns () const\n   {\n     return upper_patterns;\n   }\n@@ -1503,14 +1501,14 @@ class GroupedPattern : public Pattern\n // AST node representing patterns that can match slices and arrays\n class SlicePattern : public Pattern\n {\n-  std::vector<std::unique_ptr<Pattern> > items;\n+  std::vector<std::unique_ptr<Pattern>> items;\n   Location locus;\n   NodeId node_id;\n \n public:\n   std::string as_string () const override;\n \n-  SlicePattern (std::vector<std::unique_ptr<Pattern> > items, Location locus)\n+  SlicePattern (std::vector<std::unique_ptr<Pattern>> items, Location locus)\n     : items (std::move (items)), locus (locus),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n@@ -1546,8 +1544,8 @@ class SlicePattern : public Pattern\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_items () { return items; }\n-  const std::vector<std::unique_ptr<Pattern> > &get_items () const\n+  std::vector<std::unique_ptr<Pattern>> &get_items () { return items; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_items () const\n   {\n     return items;\n   }"}]}