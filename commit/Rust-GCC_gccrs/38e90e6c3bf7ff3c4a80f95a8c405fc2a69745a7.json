{"sha": "38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlOTBlNmMzYmY3ZmYzYzRhODBmOTVhOGM0MDVmYzJhNjk3NDVhNw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-11-15T07:01:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-15T07:01:22Z"}, "message": "basic-block.h (dump_bb_data): Remove declaration.\n\n        * basic-block.h (dump_bb_data): Remove declaration.\n        * flow.c (dump_bb_data): Remove function.\n        * sbitmap.c (sbitmap_intersect_of_predsucc): Delete function.\n        (sbitmap_union_of_predsucc): Likewise.\n\nFrom-SVN: r30530", "tree": {"sha": "56c2aa15712f8c8be8e5efa3256fc0cf80e4178f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c2aa15712f8c8be8e5efa3256fc0cf80e4178f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/comments", "author": null, "committer": null, "parents": [{"sha": "b71a2ff8fc8d43ee51b3f7a5d646c6f812954359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71a2ff8fc8d43ee51b3f7a5d646c6f812954359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71a2ff8fc8d43ee51b3f7a5d646c6f812954359"}], "stats": {"total": 175, "additions": 5, "deletions": 170}, "files": [{"sha": "a5845e306872157bf7e44cc9ea6b06a620b9678d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "patch": "@@ -1,5 +1,10 @@\n Sun Nov 14 23:11:05 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* basic-block.h (dump_bb_data): Remove declaration.\n+\t* flow.c (dump_bb_data): Remove function.\n+\t* sbitmap.c (sbitmap_intersect_of_predsucc): Delete function.\n+\t(sbitmap_union_of_predsucc): Likewise.\n+\n \t* gcse.c (delete_null_pointer_checks_1): Kill unused s_preds\n \targument.  All callers changed.\n \t(delete_null_pointer_checks_1): No longer need to compute the"}, {"sha": "c511bc614377f9b5ba3c2d4af093c389aadd237a", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "patch": "@@ -247,8 +247,6 @@ extern void compute_bb_for_insn\t\tPROTO ((int));\n extern void set_block_for_insn\t\tPROTO ((rtx, basic_block));\n extern void set_block_num\t\tPROTO ((rtx, int));\n \n-extern void dump_bb_data\t\tPROTO ((FILE *, int_list_ptr *,\n-\t\t\t\t\t\tint_list_ptr *, int));\n extern void free_bb_mem\t\t\tPROTO ((void));\n extern void free_basic_block_vars\tPROTO ((int));\n "}, {"sha": "cba5bccb907b30b3c23987fa744e27a79d964ac2", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "patch": "@@ -5261,54 +5261,6 @@ compute_preds_succs (s_preds, s_succs, num_preds, num_succs)\n \t\t   num_preds, num_succs);\n }\n \n-void\n-dump_bb_data (file, preds, succs, live_info)\n-     FILE *file;\n-     int_list_ptr *preds;\n-     int_list_ptr *succs;\n-     int live_info;\n-{\n-  int bb;\n-  int_list_ptr p;\n-\n-  fprintf (file, \"BB data\\n\\n\");\n-  for (bb = 0; bb < n_basic_blocks; bb++)\n-    {\n-      fprintf (file, \"BB %d, start %d, end %d\\n\", bb,\n-\t       INSN_UID (BLOCK_HEAD (bb)), INSN_UID (BLOCK_END (bb)));\n-      fprintf (file, \"  preds:\");\n-      for (p = preds[bb]; p != NULL; p = p->next)\n-\t{\n-\t  int pred_bb = INT_LIST_VAL (p);\n-\t  if (pred_bb == ENTRY_BLOCK)\n-\t    fprintf (file, \" entry\");\n-\t  else\n-\t    fprintf (file, \" %d\", pred_bb);\n-\t}\n-      fprintf (file, \"\\n\");\n-      fprintf (file, \"  succs:\");\n-      for (p = succs[bb]; p != NULL; p = p->next)\n-\t{\n-\t  int succ_bb = INT_LIST_VAL (p);\n-\t  if (succ_bb == EXIT_BLOCK)\n-\t    fprintf (file, \" exit\");\n-\t  else\n-\t    fprintf (file, \" %d\", succ_bb);\n-\t}\n-      if (live_info)\n-\t{\n-\t  int regno;\n-\t  fprintf (file, \"\\nRegisters live at start:\");\n-\t  for (regno = 0; regno < max_regno; regno++)\n-\t    if (REGNO_REG_SET_P (BASIC_BLOCK (bb)->global_live_at_start, regno))\n-\t      fprintf (file, \" %d\", regno);\n-\t  fprintf (file, \"\\n\");\n-\t}\n-      fprintf (file, \"\\n\");\n-    }\n-  fprintf (file, \"\\n\");\n-}\n-\n /* Free basic block data storage.  */\n \n void"}, {"sha": "4cc7c85f5c1b75d2e8b9ad23eaff6dc150f8c3fb", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=38e90e6c3bf7ff3c4a80f95a8c405fc2a69745a7", "patch": "@@ -318,126 +318,6 @@ sbitmap_a_and_b_or_c (dst, a, b, c)\n   return changed;\n }\n \n-/* Set the bitmap DST to the intersection of SRC of all predecessors or\n-   successors of block number BB (PRED_SUCC says which).  */\n-\n-void\n-sbitmap_intersect_of_predsucc (dst, src, bb, pred_succ)\n-     sbitmap dst;\n-     sbitmap *src;\n-     int bb;\n-     int_list_ptr *pred_succ;\n-{\n-  int_list_ptr ps;\n-  int ps_bb;\n-  int set_size = dst->size;\n-\n-  ps = pred_succ[bb];\n-\n-  /* It is possible that there are no predecessors(/successors).\n-     This can happen for example in unreachable code.  */\n-\n-  if (ps == NULL)\n-    {\n-      /* In APL-speak this is the `and' reduction of the empty set and thus\n-\t the result is the identity for `and'.  */\n-      sbitmap_ones (dst);\n-      return;\n-    }\n-\n-  /* Set result to first predecessor/successor.  */\n-\n-  for ( ; ps != NULL; ps = ps->next)\n-    {\n-      ps_bb = INT_LIST_VAL (ps);\n-      if (ps_bb == ENTRY_BLOCK || ps_bb == EXIT_BLOCK)\n-\tcontinue;\n-      sbitmap_copy (dst, src[ps_bb]);\n-      /* Break out since we're only doing first predecessor.  */\n-      break;\n-    }\n-  if (ps == NULL)\n-    return;\n-\n-  /* Now do the remaining predecessors/successors.  */\n-\n-  for (ps = ps->next; ps != NULL; ps = ps->next)\n-    {\n-      int i;\n-      sbitmap_ptr p,r;\n-\n-      ps_bb = INT_LIST_VAL (ps);\n-      if (ps_bb == ENTRY_BLOCK || ps_bb == EXIT_BLOCK)\n-\tcontinue;\n-\n-      p = src[ps_bb]->elms;\n-      r = dst->elms;\n-\n-      for (i = 0; i < set_size; i++)\n-\t*r++ &= *p++;\n-    }\n-}\n-\n-/* Set the bitmap DST to the union of SRC of all predecessors/successors of\n-   block number BB.  */\n-\n-void\n-sbitmap_union_of_predsucc (dst, src, bb, pred_succ)\n-     sbitmap dst;\n-     sbitmap *src;\n-     int bb;\n-     int_list_ptr *pred_succ;\n-{\n-  int_list_ptr ps;\n-  int ps_bb;\n-  int set_size = dst->size;\n-\n-  ps = pred_succ[bb];\n-\n-  /* It is possible that there are no predecessors(/successors).\n-     This can happen for example in unreachable code.  */\n-\n-  if (ps == NULL)\n-    {\n-      /* In APL-speak this is the `or' reduction of the empty set and thus\n-\t the result is the identity for `or'.  */\n-      sbitmap_zero (dst);\n-      return;\n-    }\n-\n-  /* Set result to first predecessor/successor.  */\n-\n-  for ( ; ps != NULL; ps = ps->next)\n-    {\n-      ps_bb = INT_LIST_VAL (ps);\n-      if (ps_bb == ENTRY_BLOCK || ps_bb == EXIT_BLOCK)\n-\tcontinue;\n-      sbitmap_copy (dst, src[ps_bb]);\n-      /* Break out since we're only doing first predecessor.  */\n-      break;\n-    }\n-  if (ps == NULL)\n-    return;\n-\n-  /* Now do the remaining predecessors/successors.  */\n-\n-  for (ps = ps->next; ps != NULL; ps = ps->next)\n-    {\n-      int i;\n-      sbitmap_ptr p,r;\n-\n-      ps_bb = INT_LIST_VAL (ps);\n-      if (ps_bb == ENTRY_BLOCK || ps_bb == EXIT_BLOCK)\n-\tcontinue;\n-\n-      p = src[ps_bb]->elms;\n-      r = dst->elms;\n-\n-      for (i = 0; i < set_size; i++)\n-\t*r++ |= *p++;\n-    }\n-}\n-\n /* Set the bitmap DST to the intersection of SRC of successors of\n    block number BB, using the new flow graph structures.  */\n "}]}