{"sha": "053da6b50d1ec77d71297ba9ef41e8fc4c18362d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzZGE2YjUwZDFlYzc3ZDcxMjk3YmE5ZWY0MWU4ZmM0YzE4MzYyZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T13:39:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T13:39:42Z"}, "message": "(convert_arguments): Truncate and reextend for PROMOTE_PROTOTYPES so\nwe can give error on overflow.\n\nFrom-SVN: r7004", "tree": {"sha": "6b87a17a9ca0721635a5cb7715d9c9fe1f3c9057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b87a17a9ca0721635a5cb7715d9c9fe1f3c9057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053da6b50d1ec77d71297ba9ef41e8fc4c18362d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053da6b50d1ec77d71297ba9ef41e8fc4c18362d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053da6b50d1ec77d71297ba9ef41e8fc4c18362d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053da6b50d1ec77d71297ba9ef41e8fc4c18362d/comments", "author": null, "committer": null, "parents": [{"sha": "d5757bb45ffb48347f0ae275a7034740a3698bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5757bb45ffb48347f0ae275a7034740a3698bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5757bb45ffb48347f0ae275a7034740a3698bfd"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "b1cb70b58d74f8f7ac2096eed9f6bebea70f61b3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053da6b50d1ec77d71297ba9ef41e8fc4c18362d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053da6b50d1ec77d71297ba9ef41e8fc4c18362d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=053da6b50d1ec77d71297ba9ef41e8fc4c18362d", "patch": "@@ -1567,16 +1567,6 @@ convert_arguments (typelist, values, name, fundecl)\n \t    }\n \t  else\n \t    {\n-#ifdef PROMOTE_PROTOTYPES\n-\t      /* Rather than truncating and then reextending,\n-\t\t convert directly to int, if that's the type we will want.  */\n-\t      if (! flag_traditional\n-\t\t  && (TREE_CODE (type) == INTEGER_TYPE\n-\t\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n-\t\t  && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n-\t\ttype = integer_type_node;\n-#endif\n-\n #if 0 /* This turns out not to win--there's no way to write a prototype\n \t for a function whose arg type is a union with no tag.  */\n \t      /* Nameless union automatically casts the types it contains.  */"}]}