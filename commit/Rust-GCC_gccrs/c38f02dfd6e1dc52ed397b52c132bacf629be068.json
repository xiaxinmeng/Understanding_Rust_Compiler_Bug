{"sha": "c38f02dfd6e1dc52ed397b52c132bacf629be068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4ZjAyZGZkNmUxZGM1MmVkMzk3YjUyYzEzMmJhY2Y2MjliZTA2OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-04-05T03:58:46Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-05T03:58:46Z"}, "message": "re PR target/14548 (building Ada library incorrectly requires collect2 on mingw)\n\n\tPR target/14548\n\t* config.host: Set the shell variable host_can_use_collect2.\n\tSet it to yes by default, and to no for alpha*-dec-*vms*,\n\ti[34567]86-*-mingw32*, and powerpc-*-beos*.\n\t* configure.ac: Set and substitute the shell variable collect2.\n\tGive an error if use_collect2 is yes and host_can_use_collect2 is\n\tno.\n\t* Makefile.in (COLLECT2): Rename from USE_COLLECT2.  Change all\n\tuses.  Initialize to @collect2@.\n\t(STAGESTUFF): Remove $(USE_COLLECT2).\n\t* config/alpha/x-vms (USE_COLLECT2): Don't set.\n\t* config/i386/t-mingw32 (USE_COLLECT2): Likewise.\n\t* config/rs6000/t-beos (USE_COLLECT2): Likewise.\n\t* config/pa/t-pa64: Remove commented out USE_COLLECT2.\n\t* configure: Regenerate.\n\nCo-Authored-By: Nathanael Nerode <neroden@gcc.gnu.org>\n\nFrom-SVN: r80422", "tree": {"sha": "7f0a960205235546c7759d86602d1d8705291234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f0a960205235546c7759d86602d1d8705291234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c38f02dfd6e1dc52ed397b52c132bacf629be068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38f02dfd6e1dc52ed397b52c132bacf629be068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c38f02dfd6e1dc52ed397b52c132bacf629be068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38f02dfd6e1dc52ed397b52c132bacf629be068/comments", "author": null, "committer": null, "parents": [{"sha": "9d3172516df99d45ccd381ee644d1b0618a2ea15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3172516df99d45ccd381ee644d1b0618a2ea15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3172516df99d45ccd381ee644d1b0618a2ea15"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "d5486f2f667767a275fde556300fea7d3c5ff71b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -1,3 +1,22 @@\n+2004-04-04  Ian Lance Taylor  <ian@wasabisystems.com>\n+\t    Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\tPR target/14548\n+\t* config.host: Set the shell variable host_can_use_collect2.\n+\tSet it to yes by default, and to no for alpha*-dec-*vms*,\n+\ti[34567]86-*-mingw32*, and powerpc-*-beos*.\n+\t* configure.ac: Set and substitute the shell variable collect2.\n+\tGive an error if use_collect2 is yes and host_can_use_collect2 is\n+\tno.\n+\t* Makefile.in (COLLECT2): Rename from USE_COLLECT2.  Change all\n+\tuses.  Initialize to @collect2@.\n+\t(STAGESTUFF): Remove $(USE_COLLECT2).\n+\t* config/alpha/x-vms (USE_COLLECT2): Don't set.\n+\t* config/i386/t-mingw32 (USE_COLLECT2): Likewise.\n+\t* config/rs6000/t-beos (USE_COLLECT2): Likewise.\n+\t* config/pa/t-pa64: Remove commented out USE_COLLECT2.\n+\t* configure: Regenerate.\n+\n 2004-04-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_binary_operation): Constant fold"}, {"sha": "f75afff19abe5e268556eeb87d0dc67b1fbdb4c2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -539,9 +539,10 @@ EXTRA_GCC_OBJS =@extra_gcc_objs@\n # List of additional header files to install.\n EXTRA_HEADERS =@extra_headers_list@\n \n-# It is convenient for configure to add the assignment at the beginning,\n-# so don't override it here.\n-USE_COLLECT2 = collect2$(exeext)\n+# The configure script will set this to collect2$(exeext), except on a\n+# (non-Unix) host which can not build collect2, for which it will be\n+# set to empty.\n+COLLECT2 = @collect2@\n \n # List of extra C and assembler files to add to static and shared libgcc2.\n # Assembler files should have names ending in `.asm'.\n@@ -580,7 +581,7 @@ GCC_PASSES=xgcc$(exeext) cc1$(exeext) specs $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use xgcc\n # to link anything.\n-GCC_PARTS=$(GCC_PASSES) $(LIBGCC) $(EXTRA_PROGRAMS) $(USE_COLLECT2) $(EXTRA_PARTS)\n+GCC_PARTS=$(GCC_PASSES) $(LIBGCC) $(EXTRA_PROGRAMS) $(COLLECT2) $(EXTRA_PARTS)\n \n # Directory to link to, when using the target `maketest'.\n DIR = ../gcc\n@@ -895,7 +896,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n- $(SPECS) collect2$(exeext) $(USE_COLLECT2) \\\n+ $(SPECS) collect2$(exeext) \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n  *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n@@ -1072,7 +1073,7 @@ rest.encap: $(STMP_FIXPROTO) $(LIBGCC) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status auto-host.h build-@POSUB@ $(LANGUAGES) \\\n-\t$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n+\t$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n C c: cc1$(exeext)\n@@ -2904,7 +2905,7 @@ install-common: native $(EXTRA_PARTS) lang.install-common installdirs\n \t  else true; \\\n \t  fi; \\\n \tdone\n-\tfor file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \\\n+\tfor file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(COLLECT2) ..; do \\\n \t  if [ x\"$$file\" != x.. ]; then \\\n \t    rm -f $(DESTDIR)$(libexecsubdir)/$$file; \\\n \t    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libexecsubdir)/$$file; \\"}, {"sha": "9734966e604afc842c3bc7dfade806480c519b6c", "filename": "gcc/config.host", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -49,6 +49,9 @@\n #                       be linked into the gcc driver.\n #\n #  out_host_hook_obj    An object file that provides the host hooks.\n+#\n+#  host_can_use_collect2 Set to yes normally; to no if the host cannot\n+#\t\t\tlink or otherwise use collect2\n \n # When setting any of these variables, check to see if a corresponding\n # variable is present in config.build; if so, you will likely want to \n@@ -62,6 +65,7 @@ host_exeext=\n host_extra_objs=\n host_extra_gcc_objs=\n out_host_hook_obj=host-default.o\n+host_can_use_collect2=yes\n \n # Unsupported hosts list.  Generally, only include hosts known to fail here,\n # since we allow hosts not listed to be supported generically.\n@@ -82,6 +86,7 @@ case ${host} in\n     host_xm_file=alpha/xm-vms.h\n     host_xmake_file=alpha/x-vms\n     host_exeext=.exe\n+    host_can_use_collect2=no\n     # This removes the cpu type and manufacturer components and\n     #  replaces \".\" with \"_\" in the operating system version.\n     target_noncanonical=`echo $host | sed 's/.*-.*-\\(.*\\)$/\\1/' | sed 's/\\./_/g'`\n@@ -137,6 +142,7 @@ case ${host} in\n     host_xm_file=i386/xm-mingw32.h\n     host_xmake_file=i386/x-mingw32\n     host_exeext=.exe\n+    host_can_use_collect2=no\n     ;;\n   i[34567]86-*-uwin*)\n     echo \"*** UWIN may not be used as a host platform because\"\n@@ -149,6 +155,9 @@ case ${host} in\n   i860-*-sysv4*)\n     host_xmake_file=i860/x-sysv4\n     ;;\n+  powerpc-*-beos*)\n+    host_can_use_collect2=no\n+    ;;\n   powerpc-*-darwin*)\n     # powerpc-darwin host support.\n     out_host_hook_obj=host-darwin.o"}, {"sha": "a0ee2148e831c3471312a0470a0f36423202a89d", "filename": "gcc/config/alpha/x-vms", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Falpha%2Fx-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Falpha%2Fx-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fx-vms?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -19,6 +19,3 @@ decc.exe : vms-cc.o\n # These extra parts can only be compiled on a VMS host and are only needed\n # on a VMS target.  The rules are in t-vms.\n VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n-\n-# Doesn't work on VMS\n-USE_COLLECT2="}, {"sha": "f67fa1e25a8ce550c0c0f46c334482c6cf5f3793", "filename": "gcc/config/i386/t-mingw32", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Fi386%2Ft-mingw32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Fi386%2Ft-mingw32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-mingw32?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -1,7 +1,2 @@\n-#\n-# collect2 doesn't work for i386-mingw32* yet.\n-#\n-USE_COLLECT2=\n-\n # We hide calls to w32api needed for w32 thread support here:\n LIB2FUNCS_EXTRA = $(srcdir)/config/i386/gthr-win32.c"}, {"sha": "e80406009a654b688192392e4575ff4d705fcde8", "filename": "gcc/config/pa/t-pa64", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Fpa%2Ft-pa64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Fpa%2Ft-pa64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa64?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -5,9 +5,6 @@ LIB2FUNCS_EXTRA=quadlib.c\n # We'll need this once .init sections are enabled on PA64.\n #EXTRA_PARTS = crtbegin.o crtend.o\n \n-# For the time being, we are using collect.\n-#USE_COLLECT2 =\n-\n quadlib.c: $(srcdir)/config/pa/quadlib.c\n \trm -f quadlib.c\n \tcp $(srcdir)/config/pa/quadlib.c ."}, {"sha": "dc3b89dba5722bd16dcb8d0cc0a668552ba7d919", "filename": "gcc/config/rs6000/t-beos", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Frs6000%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfig%2Frs6000%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-beos?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -28,6 +28,3 @@ EXTRA_PARTS = milli.exp\n milli.exp: $(srcdir)/config/rs6000/milli.exp\n \trm -f milli.exp\n \tcp $(srcdir)/config/rs6000/milli.exp ./milli.exp\n-\n-# Don't use collect.\n-USE_COLLECT2 ="}, {"sha": "ad40eab0e91bcab7eaad0178767b16009fff2ff4", "filename": "gcc/configure", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP strict1_warn warn_cflags WERROR nocommon_flag EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN LN_S RANLIB ac_ct_RANLIB INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file FORBUILD PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc BUILD_PREFIX BUILD_PREFIX_1 CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines target_noncanonical c_target_objs cxx_target_objs target_cpu_default LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP strict1_warn warn_cflags WERROR nocommon_flag EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN LN_S RANLIB ac_ct_RANLIB INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file FORBUILD PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc BUILD_PREFIX BUILD_PREFIX_1 CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO collect2 libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines target_noncanonical c_target_objs cxx_target_objs target_cpu_default LIBOBJS LTLIBOBJS'\n ac_subst_files='language_hooks'\n \n # Initialize some variables set by options.\n@@ -10019,13 +10019,27 @@ for file in ${extra_headers} ; do\n   extra_headers_list=\"${extra_headers_list} \\$(srcdir)/config/${cpu_type}/${file}\"\n done\n \n+# Define collect2 in Makefile.\n+case $host_can_use_collect2 in\n+  no) collect2= ;;\n+  *) collect2='collect2$(exeext)' ;;\n+esac\n+\n+\n # Add a definition of USE_COLLECT2 if system wants one.\n case $use_collect2 in\n   no) use_collect2= ;;\n   \"\") ;;\n   *)\n     host_xm_defines=\"${host_xm_defines} USE_COLLECT2\"\n     xm_defines=\"${xm_defines} USE_COLLECT2\"\n+    case $host_can_use_collect2 in\n+      no)\n+        { { echo \"$as_me:$LINENO: error: collect2 is required but cannot be built on this system\" >&5\n+echo \"$as_me: error: collect2 is required but cannot be built on this system\" >&2;}\n+   { (exit 1); exit 1; }; }\n+        ;;\n+    esac\n     ;;\n esac\n \n@@ -13026,6 +13040,7 @@ s,@CC_FOR_BUILD@,$CC_FOR_BUILD,;t t\n s,@BUILD_CFLAGS@,$BUILD_CFLAGS,;t t\n s,@STMP_FIXINC@,$STMP_FIXINC,;t t\n s,@STMP_FIXPROTO@,$STMP_FIXPROTO,;t t\n+s,@collect2@,$collect2,;t t\n s,@libgcc_visibility@,$libgcc_visibility,;t t\n s,@GGC@,$GGC,;t t\n s,@zlibdir@,$zlibdir,;t t"}, {"sha": "742432b539072173723e4cdc0e44ece4e3979e56", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f02dfd6e1dc52ed397b52c132bacf629be068/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c38f02dfd6e1dc52ed397b52c132bacf629be068", "patch": "@@ -1656,13 +1656,25 @@ for file in ${extra_headers} ; do\n   extra_headers_list=\"${extra_headers_list} \\$(srcdir)/config/${cpu_type}/${file}\"\n done\n \n+# Define collect2 in Makefile.\n+case $host_can_use_collect2 in\n+  no) collect2= ;;\n+  *) collect2='collect2$(exeext)' ;;\n+esac\n+AC_SUBST([collect2])\n+\n # Add a definition of USE_COLLECT2 if system wants one.\n case $use_collect2 in\n   no) use_collect2= ;;\n   \"\") ;;\n   *) \n     host_xm_defines=\"${host_xm_defines} USE_COLLECT2\"\n     xm_defines=\"${xm_defines} USE_COLLECT2\"\n+    case $host_can_use_collect2 in\n+      no)\n+        AC_MSG_ERROR([collect2 is required but cannot be built on this system])\n+        ;;\n+    esac\n     ;;\n esac\n "}]}