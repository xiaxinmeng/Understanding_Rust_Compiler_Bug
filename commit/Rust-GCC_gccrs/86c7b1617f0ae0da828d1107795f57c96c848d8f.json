{"sha": "86c7b1617f0ae0da828d1107795f57c96c848d8f", "node_id": "C_kwDOANBUbNoAKDg2YzdiMTYxN2YwYWUwZGE4MjhkMTEwNzc5NWY1N2M5NmM4NDhkOGY", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-02-10T10:54:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:38Z"}, "message": "[Ada] Add ghost code to facilitate proof with SPARK\n\nProof of generic units for Long_Long_Long_Unsigned instantiations is\nharder for provers, as they have to deal with larger values. Add ghost\ncode to make the proof easier.\n\ngcc/ada/\n\n\t* libgnat/s-imageu.adb (Set_Image_Unsigned): Add lemma.\n\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Add assertion.", "tree": {"sha": "b5852ca8d5ede3dcf72b8c94f53b3eba433d885a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5852ca8d5ede3dcf72b8c94f53b3eba433d885a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c7b1617f0ae0da828d1107795f57c96c848d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c7b1617f0ae0da828d1107795f57c96c848d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c7b1617f0ae0da828d1107795f57c96c848d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c7b1617f0ae0da828d1107795f57c96c848d8f/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb4320baea245dc5abab35aba7d6225bc9f70fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb4320baea245dc5abab35aba7d6225bc9f70fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb4320baea245dc5abab35aba7d6225bc9f70fe"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "d6d9d466091c492856aa919b201a96655c1824c5", "filename": "gcc/ada/libgnat/s-imageu.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c7b1617f0ae0da828d1107795f57c96c848d8f/gcc%2Fada%2Flibgnat%2Fs-imageu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c7b1617f0ae0da828d1107795f57c96c848d8f/gcc%2Fada%2Flibgnat%2Fs-imageu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imageu.adb?ref=86c7b1617f0ae0da828d1107795f57c96c848d8f", "patch": "@@ -210,6 +210,15 @@ package body System.Image_U is\n       --  Ghost lemma to prove the value of a character corresponding to the\n       --  next figure.\n \n+      procedure Prove_Euclidian (Val, Quot, Rest : Uns)\n+      with\n+        Ghost,\n+        Pre  => Quot = Val / 10\n+          and then Rest = Val rem 10,\n+        Post => Val = 10 * Quot + Rest;\n+      --  Ghost lemma to prove the relation between the quotient/remainder of\n+      --  division by 10 and the initial value.\n+\n       procedure Prove_Hexa_To_Unsigned_Ghost (R : Uns)\n       with\n         Ghost,\n@@ -256,6 +265,7 @@ package body System.Image_U is\n       -----------------------------\n \n       procedure Prove_Character_Val (R : Uns) is null;\n+      procedure Prove_Euclidian (Val, Quot, Rest : Uns) is null;\n       procedure Prove_Hexa_To_Unsigned_Ghost (R : Uns) is null;\n       procedure Prove_Unchanged is null;\n \n@@ -347,6 +357,9 @@ package body System.Image_U is\n             Acc  => Value);\n \n          if J /= Nb_Digits then\n+            Prove_Euclidian (Val  => Prev_Value,\n+                             Quot => Value,\n+                             Rest => Hexa_To_Unsigned_Ghost (S (P + J)));\n             pragma Assert\n               (Prev_Value = 10 * Value + Hexa_To_Unsigned_Ghost (S (P + J)));\n             Prove_Iter_Scan"}, {"sha": "461d957b1cb7bdf57dddef1b369e324d791157c8", "filename": "gcc/ada/libgnat/s-valueu.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c7b1617f0ae0da828d1107795f57c96c848d8f/gcc%2Fada%2Flibgnat%2Fs-valueu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c7b1617f0ae0da828d1107795f57c96c848d8f/gcc%2Fada%2Flibgnat%2Fs-valueu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valueu.adb?ref=86c7b1617f0ae0da828d1107795f57c96c848d8f", "patch": "@@ -590,6 +590,10 @@ package body System.Value_U is\n                if Str (P) = Base_Char then\n                   Ptr.all := P + 1;\n                   pragma Assert (Ptr.all = Last_Num_Based + 2);\n+                  pragma Assert\n+                    (if not Overflow then\n+                       Based_Val = Scan_Based_Number_Ghost\n+                         (Str, P, Last_Num_Based, Base, Uval));\n                   Lemma_End_Of_Scan (Str, P, Last_Num_Based, Base, Uval);\n                   pragma Assert (if not Overflow then Uval = Based_Val.Value);\n                   exit;"}]}