{"sha": "62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlMWM2NzgwZDc3OTRiZDAwMGExNWIyZmRiZmE2NWRkNjNhMjIzYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-10-12T17:49:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-10-12T17:49:35Z"}, "message": "C/C++: add fix-it hints for various missing symbols\n\nThe patch improves our C/C++ frontends' handling of missing\nsymbols, by making c_parser_require and cp_parser_require use\n\"better\" locations for the diagnostic, and insert fix-it hints,\nunder certain circumstances (see the comments in the patch for\nfull details).\n\nFor example, for this code with a missing semicolon:\n\n  $ cat test.c\n  int missing_semicolon (void)\n  {\n    return 42\n  }\n\n  trunk currently emits:\n\n  test.c:4:1: error: expected ';' before '}' token\n   }\n   ^\n\nThis patch adds a fix-it hint for the missing semicolon, and puts\nthe error at the location of the missing semicolon, printing the\nfollowup token as a secondary location:\n\n  test.c:3:12: error: expected ';' before '}' token\n     return 42\n              ^\n              ;\n   }\n   ~\n\nMore examples can be seen in the test cases.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (enum missing_token_insertion_kind): New enum.\n\t(get_missing_token_insertion_kind): New function.\n\t(maybe_suggest_missing_token_insertion): New function.\n\t* c-common.h (maybe_suggest_missing_token_insertion): New decl.\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_require): Add \"type_is_unique\" param and\n\tuse it to guard calls to maybe_suggest_missing_token_insertion.\n\t(c_parser_parms_list_declarator): Override default value of new\n\t\"type_is_unique\" param to c_parser_require.\n\t(c_parser_asm_statement): Likewise.\n\t* c-parser.h (c_parser_require): Add \"type_is_unique\" param,\n\tdefaulting to true.\n\ngcc/cp/ChangeLog:\n\t* parser.c (get_required_cpp_ttype): New function.\n\t(cp_parser_error_1): Call it, using the result to call\n\tmaybe_suggest_missing_token_insertion.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/cilk-plus/AN/parser_errors.c: Update expected\n\toutput to reflect changes to reported locations of missing\n\tsymbols.\n\t* c-c++-common/cilk-plus/AN/parser_errors2.c: Likewise.\n\t* c-c++-common/cilk-plus/AN/parser_errors3.c: Likewise.\n\t* c-c++-common/cilk-plus/AN/pr61191.c: Likewise.\n\t* c-c++-common/gomp/pr63326.c: Likewise.\n\t* c-c++-common/missing-close-symbol.c: Likewise, also update for\n\tnew fix-it hints.\n\t* c-c++-common/missing-symbol.c: Likewise, also add test coverage\n\tfor missing colon in ternary operator.\n\t* g++.dg/cpp1y/digit-sep-neg.C: Likewise.\n\t* g++.dg/cpp1y/pr65202.C: Likewise.\n\t* g++.dg/missing-symbol-2.C: New test case.\n\t* g++.dg/other/do1.C: Update expected output to reflect\n\tchanges to reported locations of missing symbols.\n\t* g++.dg/parse/error11.C: Likewise.\n\t* g++.dg/template/error11.C: Likewise.\n\t* gcc.dg/missing-symbol-2.c: New test case.\n\t* gcc.dg/missing-symbol-3.c: New test case.\n\t* gcc.dg/noncompile/940112-1.c: Update expected output to reflect\n\tchanges to reported locations of missing symbols.\n\t* gcc.dg/noncompile/971104-1.c: Likewise.\n\t* obj-c++.dg/exceptions-6.mm: Likewise.\n\t* obj-c++.dg/pr48187.mm: Likewise.\n\t* objc.dg/exceptions-6.m: Likewise.\n\nFrom-SVN: r253690", "tree": {"sha": "6c49c1da19c243f1bf486dfc0d725c89243b26c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c49c1da19c243f1bf486dfc0d725c89243b26c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a866e7e316df13b04a84a8d5426b43d016573ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a866e7e316df13b04a84a8d5426b43d016573ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a866e7e316df13b04a84a8d5426b43d016573ea"}], "stats": {"total": 585, "additions": 528, "deletions": 57}, "files": [{"sha": "ee6fc87dd6f3ae5f4751a67c99ac208756ebb7c3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,3 +1,10 @@\n+2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (enum missing_token_insertion_kind): New enum.\n+\t(get_missing_token_insertion_kind): New function.\n+\t(maybe_suggest_missing_token_insertion): New function.\n+\t* c-common.h (maybe_suggest_missing_token_insertion): New decl.\n+\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-opts.c (add_prefixed_path): Change chain to incpath_kind."}, {"sha": "dfcfb1960285d0f9afd2d5313bbbe804ce4286a2", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7946,6 +7946,164 @@ c_flt_eval_method (bool maybe_c11_only_p)\n     return c_ts18661_flt_eval_method ();\n }\n \n+/* An enum for get_missing_token_insertion_kind for describing the best\n+   place to insert a missing token, if there is one.  */\n+\n+enum missing_token_insertion_kind\n+{\n+  MTIK_IMPOSSIBLE,\n+  MTIK_INSERT_BEFORE_NEXT,\n+  MTIK_INSERT_AFTER_PREV\n+};\n+\n+/* Given a missing token of TYPE, determine if it is reasonable to\n+   emit a fix-it hint suggesting the insertion of the token, and,\n+   if so, where the token should be inserted relative to other tokens.\n+\n+   It only makes sense to do this for values of TYPE that are symbols.\n+\n+   Some symbols should go before the next token, e.g. in:\n+     if flag)\n+   we want to insert the missing '(' immediately before \"flag\",\n+   giving:\n+     if (flag)\n+   rather than:\n+     if( flag)\n+   These use MTIK_INSERT_BEFORE_NEXT.\n+\n+   Other symbols should go after the previous token, e.g. in:\n+     if (flag\n+       do_something ();\n+   we want to insert the missing ')' immediately after the \"flag\",\n+   giving:\n+     if (flag)\n+       do_something ();\n+   rather than:\n+     if (flag\n+       )do_something ();\n+   These use MTIK_INSERT_AFTER_PREV.  */\n+\n+static enum missing_token_insertion_kind\n+get_missing_token_insertion_kind (enum cpp_ttype type)\n+{\n+  switch (type)\n+    {\n+      /* Insert missing \"opening\" brackets immediately\n+\t before the next token.  */\n+    case CPP_OPEN_SQUARE:\n+    case CPP_OPEN_PAREN:\n+      return MTIK_INSERT_BEFORE_NEXT;\n+\n+      /* Insert other missing symbols immediately after\n+\t the previous token.  */\n+    case CPP_CLOSE_PAREN:\n+    case CPP_CLOSE_SQUARE:\n+    case CPP_SEMICOLON:\n+    case CPP_COMMA:\n+    case CPP_COLON:\n+      return MTIK_INSERT_AFTER_PREV;\n+\n+      /* Other kinds of token don't get fix-it hints.  */\n+    default:\n+      return MTIK_IMPOSSIBLE;\n+    }\n+}\n+\n+/* Given RICHLOC, a location for a diagnostic describing a missing token\n+   of kind TOKEN_TYPE, potentially add a fix-it hint suggesting the\n+   insertion of the token.\n+\n+   The location of the attempted fix-it hint depends on TOKEN_TYPE:\n+   it will either be:\n+     (a) immediately after PREV_TOKEN_LOC, or\n+\n+     (b) immediately before the primary location within RICHLOC (taken to\n+\t be that of the token following where the token was expected).\n+\n+   If we manage to add a fix-it hint, then the location of the\n+   fix-it hint is likely to be more useful as the primary location\n+   of the diagnostic than that of the following token, so we swap\n+   these locations.\n+\n+   For example, given this bogus code:\n+       123456789012345678901234567890\n+   1 | int missing_semicolon (void)\n+   2 | {\n+   3 |   return 42\n+   4 | }\n+\n+   we will emit:\n+\n+     \"expected ';' before '}'\"\n+\n+   RICHLOC's primary location is at the closing brace, so before \"swapping\"\n+   we would emit the error at line 4 column 1:\n+\n+       123456789012345678901234567890\n+   3 |   return 42  |< fix-it hint emitted for this line\n+     |            ; |\n+   4 | }            |< \"expected ';' before '}'\" emitted at this line\n+     | ^            |\n+\n+   It's more useful for the location of the diagnostic to be at the\n+   fix-it hint, so we swap the locations, so the primary location\n+   is at the fix-it hint, with the old primary location inserted\n+   as a secondary location, giving this, with the error at line 3\n+   column 12:\n+\n+       123456789012345678901234567890\n+   3 |   return 42   |< \"expected ';' before '}'\" emitted at this line,\n+     |            ^  |   with fix-it hint\n+   4 |            ;  |\n+     | }             |< secondary range emitted here\n+     | ~             |.  */\n+\n+void\n+maybe_suggest_missing_token_insertion (rich_location *richloc,\n+\t\t\t\t       enum cpp_ttype token_type,\n+\t\t\t\t       location_t prev_token_loc)\n+{\n+  gcc_assert (richloc);\n+\n+  enum missing_token_insertion_kind mtik\n+    = get_missing_token_insertion_kind (token_type);\n+\n+  switch (mtik)\n+    {\n+    default:\n+      gcc_unreachable ();\n+      break;\n+\n+    case MTIK_IMPOSSIBLE:\n+      return;\n+\n+    case MTIK_INSERT_BEFORE_NEXT:\n+      /* Attempt to add the fix-it hint before the primary location\n+\t of RICHLOC.  */\n+      richloc->add_fixit_insert_before (cpp_type2name (token_type, 0));\n+      break;\n+\n+    case MTIK_INSERT_AFTER_PREV:\n+      /* Attempt to add the fix-it hint after PREV_TOKEN_LOC.  */\n+      richloc->add_fixit_insert_after (prev_token_loc,\n+\t\t\t\t       cpp_type2name (token_type, 0));\n+      break;\n+    }\n+\n+  /* If we were successful, use the fix-it hint's location as the\n+     primary location within RICHLOC, adding the old primary location\n+     back as a secondary location.  */\n+  if (!richloc->seen_impossible_fixit_p ())\n+    {\n+      fixit_hint *hint = richloc->get_last_fixit_hint ();\n+      location_t hint_loc = hint->get_start_loc ();\n+      location_t old_loc = richloc->get_loc ();\n+\n+      richloc->set_range (line_table, 0, hint_loc, true);\n+      richloc->add_range (old_loc, false);\n+    }\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "7e1877e8d164adfef446be519f3ec6d983a235c4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1550,6 +1550,9 @@ extern int c_flt_eval_method (bool ts18661_p);\n extern void add_no_sanitize_value (tree node, unsigned int flags);\n \n extern void maybe_add_include_fixit (rich_location *, const char *);\n+extern void maybe_suggest_missing_token_insertion (rich_location *richloc,\n+\t\t\t\t\t\t   enum cpp_ttype token_type,\n+\t\t\t\t\t\t   location_t prev_token_loc);\n \n #if CHECKING_P\n namespace selftest {"}, {"sha": "1f697f17f9924982ccad43f23e78ad48fd656a16", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,3 +1,13 @@\n+2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_require): Add \"type_is_unique\" param and\n+\tuse it to guard calls to maybe_suggest_missing_token_insertion.\n+\t(c_parser_parms_list_declarator): Override default value of new\n+\t\"type_is_unique\" param to c_parser_require.\n+\t(c_parser_asm_statement): Likewise.\n+\t* c-parser.h (c_parser_require): Add \"type_is_unique\" param,\n+\tdefaulting to true.\n+\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-decl.c (grokdeclarator): Check HAS_DECL_ASSEMBLER_NAME_P too."}, {"sha": "6b843247911e84f94c1c775a00d616379c600241", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1041,13 +1041,21 @@ get_matching_symbol (enum cpp_ttype type)\n    If MATCHING_LOCATION is not UNKNOWN_LOCATION, then highlight it\n    within any error as the location of an \"opening\" token matching\n    the close token TYPE (e.g. the location of the '(' when TYPE is\n-   CPP_CLOSE_PAREN).  */\n+   CPP_CLOSE_PAREN).\n+\n+   If TYPE_IS_UNIQUE is true (the default) then msgid describes exactly\n+   one type (e.g. \"expected %<)%>\") and thus it may be reasonable to\n+   attempt to generate a fix-it hint for the problem.\n+   Otherwise msgid describes multiple token types (e.g.\n+   \"expected %<;%>, %<,%> or %<)%>\"), and thus we shouldn't attempt to\n+   generate a fix-it hint.  */\n \n bool\n c_parser_require (c_parser *parser,\n \t\t  enum cpp_ttype type,\n \t\t  const char *msgid,\n-\t\t  location_t matching_location)\n+\t\t  location_t matching_location,\n+\t\t  bool type_is_unique)\n {\n   if (c_parser_next_token_is (parser, type))\n     {\n@@ -1059,6 +1067,13 @@ c_parser_require (c_parser *parser,\n       location_t next_token_loc = c_parser_peek_token (parser)->location;\n       gcc_rich_location richloc (next_token_loc);\n \n+      /* Potentially supply a fix-it hint, suggesting to add the\n+\t missing token immediately after the *previous* token.\n+\t This may move the primary location within richloc.  */\n+      if (!parser->error && type_is_unique)\n+\tmaybe_suggest_missing_token_insertion (&richloc, type,\n+\t\t\t\t\t       parser->last_token_location);\n+\n       /* If matching_location != UNKNOWN_LOCATION, highlight it.\n \t Attempt to consolidate diagnostics by printing it as a\n \t secondary range within the main diagnostic.  */\n@@ -3975,7 +3990,8 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs, tree expr)\n \t    return get_parm_info (false, expr);\n \t}\n       if (!c_parser_require (parser, CPP_COMMA,\n-\t\t\t     \"expected %<;%>, %<,%> or %<)%>\"))\n+\t\t\t     \"expected %<;%>, %<,%> or %<)%>\",\n+\t\t\t     UNKNOWN_LOCATION, false))\n \t{\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n \t  return NULL;\n@@ -6429,7 +6445,8 @@ c_parser_asm_statement (c_parser *parser)\n       if (!c_parser_require (parser, CPP_COLON,\n \t\t\t     is_goto\n \t\t\t     ? G_(\"expected %<:%>\")\n-\t\t\t     : G_(\"expected %<:%> or %<)%>\")))\n+\t\t\t     : G_(\"expected %<:%> or %<)%>\"),\n+\t\t\t     UNKNOWN_LOCATION, is_goto))\n \tgoto error_close_paren;\n \n       /* Once past any colon, we're no longer a simple asm.  */"}, {"sha": "21e40541ce60ecfa9061dd508624a808bde6b738", "filename": "gcc/c/c-parser.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2Fc-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fc%2Fc-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.h?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -137,7 +137,8 @@ extern c_token * c_parser_peek_2nd_token (c_parser *parser);\n extern c_token * c_parser_peek_nth_token (c_parser *parser, unsigned int n);\n extern bool c_parser_require (c_parser *parser, enum cpp_ttype type,\n \t\t\t      const char *msgid,\n-\t\t\t      location_t matching_location = UNKNOWN_LOCATION);\n+\t\t\t      location_t matching_location = UNKNOWN_LOCATION,\n+\t\t\t      bool type_is_unique=true);\n extern bool c_parser_error (c_parser *parser, const char *gmsgid);\n extern void c_parser_consume_token (c_parser *parser);\n extern void c_parser_skip_until_found (c_parser *parser, enum cpp_ttype type,"}, {"sha": "717411582b33a4a1037e32e0b13e25c6b2712e61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,3 +1,9 @@\n+2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (get_required_cpp_ttype): New function.\n+\t(cp_parser_error_1): Call it, using the result to call\n+\tmaybe_suggest_missing_token_insertion.\n+\n 2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (get_matching_symbol): Move to before..."}, {"sha": "810e2b7f72e124941c5534e840d71281ad5164b8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -2788,6 +2788,40 @@ get_matching_symbol (required_token token_desc)\n     }\n }\n \n+/* Attempt to convert TOKEN_DESC from a required_token to an\n+   enum cpp_ttype, returning CPP_EOF if there is no good conversion.  */\n+\n+static enum cpp_ttype\n+get_required_cpp_ttype (required_token token_desc)\n+{\n+  switch (token_desc)\n+    {\n+    case RT_SEMICOLON:\n+      return CPP_SEMICOLON;\n+    case RT_OPEN_PAREN:\n+      return CPP_OPEN_PAREN;\n+    case RT_CLOSE_BRACE:\n+      return CPP_CLOSE_BRACE;\n+    case RT_OPEN_BRACE:\n+      return CPP_OPEN_BRACE;\n+    case RT_CLOSE_SQUARE:\n+      return CPP_CLOSE_SQUARE;\n+    case RT_OPEN_SQUARE:\n+      return CPP_OPEN_SQUARE;\n+    case RT_COMMA:\n+      return CPP_COMMA;\n+    case RT_COLON:\n+      return CPP_COLON;\n+    case RT_CLOSE_PAREN:\n+      return CPP_CLOSE_PAREN;\n+\n+    default:\n+      /* Use CPP_EOF as a \"no completions possible\" code.  */\n+      return CPP_EOF;\n+    }\n+}\n+\n+\n /* Subroutine of cp_parser_error and cp_parser_required_error.\n \n    Issue a diagnostic of the form\n@@ -2799,9 +2833,12 @@ get_matching_symbol (required_token token_desc)\n    This bypasses the check for tentative passing, and potentially\n    adds material needed by cp_parser_required_error.\n \n-   If MISSING_TOKEN_DESC is not RT_NONE, and MATCHING_LOCATION is not\n-   UNKNOWN_LOCATION, then we have an unmatched symbol at\n-   MATCHING_LOCATION; highlight this secondary location.  */\n+   If MISSING_TOKEN_DESC is not RT_NONE, then potentially add fix-it hints\n+   suggesting insertion of the missing token.\n+\n+   Additionally, if MATCHING_LOCATION is not UNKNOWN_LOCATION, then we\n+   have an unmatched symbol at MATCHING_LOCATION; highlight this secondary\n+   location.  */\n \n static void\n cp_parser_error_1 (cp_parser* parser, const char* gmsgid,\n@@ -2840,6 +2877,14 @@ cp_parser_error_1 (cp_parser* parser, const char* gmsgid,\n \n   if (missing_token_desc != RT_NONE)\n     {\n+      /* Potentially supply a fix-it hint, suggesting to add the\n+\t missing token immediately after the *previous* token.\n+\t This may move the primary location within richloc.  */\n+      enum cpp_ttype ttype = get_required_cpp_ttype (missing_token_desc);\n+      location_t prev_token_loc\n+\t= cp_lexer_previous_token (parser->lexer)->location;\n+      maybe_suggest_missing_token_insertion (&richloc, ttype, prev_token_loc);\n+\n       /* If matching_location != UNKNOWN_LOCATION, highlight it.\n \t Attempt to consolidate diagnostics by printing it as a\n \tsecondary range within the main diagnostic.  */"}, {"sha": "79642b88d8236c33be49865c6dff11ff9c67ed76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,3 +1,32 @@\n+2017-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/cilk-plus/AN/parser_errors.c: Update expected\n+\toutput to reflect changes to reported locations of missing\n+\tsymbols.\n+\t* c-c++-common/cilk-plus/AN/parser_errors2.c: Likewise.\n+\t* c-c++-common/cilk-plus/AN/parser_errors3.c: Likewise.\n+\t* c-c++-common/cilk-plus/AN/pr61191.c: Likewise.\n+\t* c-c++-common/gomp/pr63326.c: Likewise.\n+\t* c-c++-common/missing-close-symbol.c: Likewise, also update for\n+\tnew fix-it hints.\n+\t* c-c++-common/missing-symbol.c: Likewise, also add test coverage\n+\tfor missing colon in ternary operator.\n+\t* g++.dg/cpp1y/digit-sep-neg.C: Likewise.\n+\t* g++.dg/cpp1y/pr65202.C: Likewise.\n+\t* g++.dg/missing-symbol-2.C: New test case.\n+\t* g++.dg/other/do1.C: Update expected output to reflect\n+\tchanges to reported locations of missing symbols.\n+\t* g++.dg/parse/error11.C: Likewise.\n+\t* g++.dg/template/error11.C: Likewise.\n+\t* gcc.dg/missing-symbol-2.c: New test case.\n+\t* gcc.dg/missing-symbol-3.c: New test case.\n+\t* gcc.dg/noncompile/940112-1.c: Update expected output to reflect\n+\tchanges to reported locations of missing symbols.\n+\t* gcc.dg/noncompile/971104-1.c: Likewise.\n+\t* obj-c++.dg/exceptions-6.mm: Likewise.\n+\t* obj-c++.dg/pr48187.mm: Likewise.\n+\t* objc.dg/exceptions-6.m: Likewise.\n+\n 2017-10-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR other/82301"}, {"sha": "fd4fe5419b641b49ac6ab46a19643bd930f4fcc8", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/parser_errors.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7,5 +7,5 @@ int main (void)\n   \n   array2[:] = array2[: ;  /* { dg-error \"expected ']'\" } */\n \n-  return 0;\n-} /* { dg-error \"expected ';' before\" \"\" { target c } } */\n+  return 0; /* { dg-error \"expected ';' before\" \"\" { target c } } */\n+}"}, {"sha": "d003d7cc2bb3e5d7dc09ae2b8275d0c9843b114d", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/parser_errors2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors2.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7,6 +7,7 @@ int main (void)\n   \n   array2[:] = array2[1:2:] ;  /* { dg-error \"expected expression before\" \"\" { target c } } */ \n   /* { dg-error  \"expected primary-expression before\" \"\" { target c++ } .-1 } */\n+  /* { dg-error \"expected ';' before\" \"\" { target c } .-2 } */\n \n-  return 0; /* { dg-error \"expected ';' before\" \"\" { target c }  } */\n+  return 0;\n }"}, {"sha": "14256e9579ee7f4108779f4a85745dd976f15fda", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/parser_errors3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fparser_errors3.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7,6 +7,7 @@ int main (void)\n   \n   array2[:] = array2[1: :] ;  /* { dg-error \"expected expression before\" \"\" { target c }  } */ \n   /* { dg-error \"expected primary-expression before\" \"\" { target c++ }  .-1 } */\n+  /* { dg-error \"expected ';' before\" \"\" { target c } .-2 } */\n \n-  return 0; /* { dg-error \"expected ';' before\" \"\" { target c } } */\n+  return 0;\n }"}, {"sha": "8c32ad9a267af3b05b7d8ef5618f5885fea9873d", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr61191.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61191.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7,4 +7,5 @@ double f(double * A, double * B)\n   return __sec_reduce_add((B[0:500])(; /* { dg-error \"called object\" \"\" { target c } } */\n /* { dg-error \"expected expression before ';' token\" \"\" { target c } .-1 } */\n /* { dg-error \"expected primary-expression before ';' token\" \"\" { target c++ } .-2 } */\n-} /* { dg-error \"expected\" \"\" { target c } } */\n+/* { dg-error \"expected\" \"\" { target c } .-3 } */\n+}"}, {"sha": "3e627237c4317ec2cfc017279520db34b720a26f", "filename": "gcc/testsuite/c-c++-common/gomp/pr63326.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -156,63 +156,63 @@ f4 (int x)\n   {\n     do\n       #pragma omp barrier\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   {\n     do\n       #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   {\n     do\n       #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   {\n     do\n       #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   #pragma omp parallel\n   {\n     do\n       #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   #pragma omp parallel\n   {\n     do\n       #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   #pragma omp for ordered(1)\n   for (i = 0; i < 16; i++)\n     {\n       {\n \tdo\n \t  #pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n-\twhile (0);\n+\twhile (0); /* { dg-error \"before\" \"\" { target c++ } } */\n       } /* { dg-error \"before\" \"\" { target c++ } } */\n       {\n \tdo\n \t  #pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n-\twhile (0);\n+\twhile (0); /* { dg-error \"before\" \"\" { target c++ } } */\n       } /* { dg-error \"before\" \"\" { target c++ } } */\n     }\n   {\n     do\n       #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   {\n     do\n       #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n   {\n     do\n       #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n-    while (0);\n+    while (0); /* { dg-error \"before\" \"\" { target c++ } } */\n   } /* { dg-error \"before\" \"\" { target c++ } } */\n }\n "}, {"sha": "abeb83748c163161d15f8584d174b3dc250a042f", "filename": "gcc/testsuite/c-c++-common/missing-close-symbol.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-symbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-symbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-close-symbol.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -12,6 +12,7 @@ void test_static_assert_same_line (void)\n   /* { dg-begin-multiline-output \"\" }\n    _Static_assert(sizeof(int) >= sizeof(char), \"msg\";\n                  ~                                  ^\n+                                                    )\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -25,6 +26,7 @@ void test_static_assert_different_line (void)\n   /* { dg-begin-multiline-output \"\" }\n     \"msg\";\n          ^\n+         )\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n    _Static_assert(sizeof(int) >= sizeof(char),"}, {"sha": "326b9faad7a90714e42802ff689f65b8fa9dfe01", "filename": "gcc/testsuite/c-c++-common/missing-symbol.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -5,15 +5,14 @@ extern int bar (void);\n \n int missing_close_paren_in_switch (int i)\n {\n-  switch (i /* { dg-message \"10: to match this '\\\\('\" } */\n-    { /* { dg-error \"5: expected '\\\\)' before '.' token\" } */\n-  /* { dg-begin-multiline-output \"\" }\n-     {\n-     ^\n-     { dg-end-multiline-output \"\" } */\n+  switch (i /* { dg-error \"12: expected '\\\\)' before '.' token\" } */\n+    {\n   /* { dg-begin-multiline-output \"\" }\n    switch (i\n-          ^\n+          ~ ^\n+            )\n+     {\n+     ~       \n      { dg-end-multiline-output \"\" } */\n \n     case 0:\n@@ -30,21 +29,33 @@ int missing_close_paren_in_switch (int i)\n void missing_close_paren_in_if (void)\n {\n   if (foo () /* { dg-line start_of_if } */\n-      && bar () \n-    { /* { dg-error \"5: expected '\\\\)' before '.' token\" } */\n+      && bar () /* { dg-error \"16: expected '\\\\)' before '.' token\" } */\n+    {\n       /* { dg-begin-multiline-output \"\" }\n+       && bar ()\n+                ^\n+                )\n      {\n-     ^\n+     ~           \n          { dg-end-multiline-output \"\" } */\n       /* { dg-message \"6: to match this '\\\\('\" \"\" { target *-*-* } start_of_if } */\n       /* { dg-begin-multiline-output \"\" }\n    if (foo ()\n       ^\n-      { dg-end-multiline-output \"\" } */\n+         { dg-end-multiline-output \"\" } */\n     }\n-\n } /* { dg-error \"1: expected\" } */\n   /* { dg-begin-multiline-output \"\" }\n  }\n  ^\n      { dg-end-multiline-output \"\" } */\n+\n+int missing_colon_in_ternary (int flag)\n+{\n+  return flag ? 42 0; /* { dg-error \"expected ':' before numeric constant\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return flag ? 42 0;\n+                   ^~\n+                   :\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "727e74e2e108c8c78c4ae4a2b86b795e82d24237", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -26,5 +26,5 @@ main()\n }\n \n // { dg-error \"exponent has no digits\" \"exponent has no digits\" { target *-*-* } 21 }\n-// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 14 }\n-// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 25 }\n+// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 13 }\n+// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 24 }"}, {"sha": "7ce4895a13449792c6abf7de27106a384847c00e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65202.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -22,5 +22,5 @@ struct bar;\n int main()\n {\n     foo<ns::bar> f;\n-    adl::swap(f, f)\n-} // { dg-error \"\" }\n+    adl::swap(f, f) // { dg-error \"expected ';'\" }\n+} // { dg-error \"expected '.'\" \"expected end of namespace\" }"}, {"sha": "4a119f8e9ad0c95c09e843571c8a2bf055b1204f", "filename": "gcc/testsuite/g++.dg/missing-symbol-2.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-symbol-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-symbol-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-symbol-2.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+extern int foo (void);\n+\n+void missing_open_paren (void)\n+{\n+  if foo ()) /* { dg-error \"expected '\\\\(' before 'foo'\" } */\n+    {\n+    }\n+  /* { dg-begin-multiline-output \"\" }\n+   if foo ())\n+      ^~~\n+      (\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+\n+void missing_close_square (void)\n+{\n+  const char test [42;  /* { dg-error \"22: expected ']' before ';' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   const char test [42;\n+                      ^\n+                      ]\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+int missing_semicolon (void)\n+{\n+  return 42 /* { dg-error \"expected ';'\" } */\n+}\n+/* { dg-begin-multiline-output \"\" }\n+   return 42\n+            ^\n+            ;\n+ }\n+ ~           \n+   { dg-end-multiline-output \"\" } */\n+\n+\n+int missing_colon_in_switch (int val)\n+{\n+  switch (val)\n+    {\n+    case 42 /* { dg-error \"expected ':' before 'return'\" } */\n+      return 42;\n+    /* { dg-begin-multiline-output \"\" }\n+     case 42\n+            ^\n+            :\n+       return 42;\n+       ~~~~~~\n+       { dg-end-multiline-output \"\" } */\n+\n+    default:\n+      return val;\n+    }\n+}"}, {"sha": "db65e7de301cb089d64f27a7cbcfde408feaf98c", "filename": "gcc/testsuite/g++.dg/other/do1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -7,7 +7,7 @@\n \n void init ()\n {\n-  do {  } while (0)\n-\t    obj = 0; // { dg-error \"expected|not declared\" }\n+  do {  } while (0) // { dg-error \"expected ';'\" }\n+\t    obj = 0; // { dg-error \"not declared\" }\n      \n }"}, {"sha": "1a49d6edb12f0a156c985e0b9ce7082ed60d8ecc", "filename": "gcc/testsuite/g++.dg/parse/error11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -52,7 +52,7 @@ void func(void)\n   Foo[:B> k1;       // { dg-bogus \"cannot begin|alternate spelling\" \"smart error should not be triggered here\" } \n // { dg-error \"6:missing template arguments before\" \"template\" { target *-*-* } 51 }\n // { dg-error \"9:expected primary-expression before ':' token\" \"primary\" { target *-*-* } 51 }\n-// { dg-error \"9:expected '\\]' before ':' token\" \"backslash\" { target *-*-* } 51 }\n+// { dg-error \"8:expected '\\]' before ':' token\" \"backslash\" { target *-*-* } 51 }\n // { dg-error \"6:missing template arguments before\" \"template\" { target *-*-* } 52 }\n // { dg-error \"7:expected primary-expression before ':' token\" \"primary\" { target *-*-* } 52 }\n // { dg-error \"7:expected '\\]' before ':' token\" \"backslash\" { target *-*-* } 52 }"}, {"sha": "16402988a8704209405c0bb60cea49e6fec83e3d", "filename": "gcc/testsuite/g++.dg/template/error11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror11.C?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,4 +1,4 @@\n // PR c++/12132\n \n inline template <int> void foo () {} // { dg-error \"<\" }\n-void abort (); // { dg-error \";\" }\n+void abort (); // { dg-error \";\" \"\" { target *-*-* } .-1 }"}, {"sha": "7ee795dfcc57983e07784ccdeec9f19ff46f92b4", "filename": "gcc/testsuite/gcc.dg/missing-symbol-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-2.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-options \"-fdiagnostics-show-caret -Wno-switch-unreachable\" } */\n+\n+extern int foo (void);\n+\n+void missing_open_paren (void)\n+{\n+  if foo ()) /* { dg-line missing_open_paren } */\n+    {\n+    }\n+  /* { dg-error \"expected '\\\\(' before 'foo'\" \"\" { target c } missing_open_paren } */\n+  /* { dg-begin-multiline-output \"\" }\n+   if foo ())\n+      ^~~\n+      (\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-error \"expected statement before '\\\\)' token\"  \"\" { target c } missing_open_paren } */\n+  /* { dg-begin-multiline-output \"\" }\n+   if foo ())\n+            ^\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void missing_close_square (void)\n+{\n+  const char test [42;  /* { dg-error \"22: expected ']' before ';' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   const char test [42;\n+                      ^\n+                      ]\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+int missing_semicolon (void)\n+{\n+  return 42 /* { dg-error \"expected ';'\" } */\n+}\n+/* { dg-begin-multiline-output \"\" }\n+   return 42\n+            ^\n+            ;\n+ }\n+ ~           \n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* We don't offer a fix-it hint for this case in C, as it could be\n+   colon or ellipsis.\n+   TODO: we could be smarter about error-recovery here; given the\n+   return perhaps we could assume a missing colon.  */\n+\n+int missing_colon_in_switch (int val)\n+{\n+  switch (val)\n+    {\n+    case 42\n+      return 42; /* { dg-error \"expected ':' or '...' before 'return'\" } */\n+    /* { dg-begin-multiline-output \"\" }\n+       return 42;\n+       ^~~~~~\n+       { dg-end-multiline-output \"\" } */\n+\n+    default:\n+      return val;\n+    }\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+ int dummy;\n+ ^~~\n+   { dg-end-multiline-output \"\" } */\n+int dummy;/* { dg-error \"expected declaration or statement at end of input\" \"\" { target c } } */"}, {"sha": "e2d00dfa03fee6fa24c0309b4c778460fe051442", "filename": "gcc/testsuite/gcc.dg/missing-symbol-3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* A sequence of bogus _Static_assert.\n+   We can offer fix-it hints for some of these, but not all.  */\n+\n+void test_static_assert_1 (void)\n+{\n+  _Static_assert sizeof(int) >= sizeof(char); /* { dg-error \"expected '\\\\(' before 'sizeof'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   _Static_assert sizeof(int) >= sizeof(char);\n+                  ^~~~~~\n+                  (\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_static_assert_2 (void)\n+{\n+  _Static_assert(sizeof(int) >= sizeof(char); /* { dg-error \"expected ',' before ';' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   _Static_assert(sizeof(int) >= sizeof(char);\n+                                             ^\n+                                             ,\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_static_assert_3 (void)\n+{\n+  _Static_assert(sizeof(int) >= sizeof(char),; /* { dg-error \"expected string literal before ';' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   _Static_assert(sizeof(int) >= sizeof(char),;\n+                                              ^\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_static_assert_4 (void)\n+{\n+  _Static_assert(sizeof(int) >= sizeof(char), \"msg\"; /* { dg-error \"expected '\\\\)' before ';' token\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   _Static_assert(sizeof(int) >= sizeof(char), \"msg\";\n+                 ~                                  ^\n+                                                    )\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* The final one is correct.  */\n+\n+void test_static_assert_5 (void)\n+{\n+  _Static_assert(sizeof(int) >= sizeof(char), \"msg\");\n+}"}, {"sha": "0a9e07dcaf9cb88911ab1588039fe95d09321943", "filename": "gcc/testsuite/gcc.dg/noncompile/940112-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F940112-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F940112-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F940112-1.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -3,5 +3,5 @@ f (int x)\n {\n   double e = 1;\n   e = 1;\n-  return (e)\n-}\t/* { dg-error \"parse error|syntax error|expected\" } */\n+  return (e) /* { dg-error \"parse error|syntax error|expected\" } */\n+}\t"}, {"sha": "4a04dad7747b02cb91931e8cd3db29925869c10e", "filename": "gcc/testsuite/gcc.dg/noncompile/971104-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -27,6 +27,6 @@ static void up(int sem){\n     printf(\"%s had processes sleeping on it!\\n\",\n     ({ \"MUTEX     \", \"BARB_SEM 1\", \"BARB_SEM 2\", \"CUST_SEM 1\",\n        \"CUST_SEM 2\", \"WAIT_SEM 1\", \"WAIT_SEM 2\", \"WAIT_SEM 3\",\n-       \"WAIT_SEM 4\"}\t /* { dg-error \"parse error|syntax error|expected\" } */\n-\t[( sb.sem_num )]) ); /* { dg-error \"expected\" } */\n+       \"WAIT_SEM 4\"}\t /* { dg-error \"expected\" } */\n+\t[( sb.sem_num )]) );\n }"}, {"sha": "6f6ba783ea75b02203a233ae878b03e1e3f61b39", "filename": "gcc/testsuite/obj-c++.dg/exceptions-6.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-6.mm?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -11,15 +11,15 @@ void test (id object)\n   @throw object;   /* Ok */\n   @throw;          /* { dg-error \".@throw. .rethrow. used outside of a @catch block\" } */\n   @throw (object); /* Ok.  */\n-  @throw (id)0\n-}                  /* { dg-error \"expected\" } */\n+  @throw (id)0     /* { dg-error \"expected\" } */\n+}\n \n void test2 (id object)\n {\n   @throw object);  /* { dg-error \"expected\" } */\n   @throw (...);    /* { dg-error \"expected\" } */\n   @throw ();       /* { dg-error \"expected\" } */\n-  @throw           \n+  @throw           /* { dg-error \"expected\" } */\n }                  /* { dg-error \"expected\" } */\n \n void test3 (id object1, id object2)"}, {"sha": "99677a562443181dd1159ed0d9a4f2fa7d2a8054", "filename": "gcc/testsuite/obj-c++.dg/pr48187.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -1,27 +1,27 @@\n /* { dg-do compile } */\n \n @interface A\n-{\n+{    /* { dg-error \"xpected\" } */\n   ]  /* { dg-error \"xpected\" } */\n }\n @end\n \n @interface B\n-{\n+{     /* { dg-error \"xpected\" } */\n   ];  /* { dg-error \"xpected\" } */\n }\n @end\n \n @interface C\n-{\n+{     /* { dg-error \"xpected\" } */\n   ];  /* { dg-error \"xpected\" } */\n   int x;\n }\n @end\n \n @interface D\n {\n-  (\n+  (  /* { dg-error \"xpected\" } */\n }  /* { dg-error \"xpected\" } */\n @end\n "}, {"sha": "74be98d39fa0ec6954ad0d5c7180cf2fdfa310c4", "filename": "gcc/testsuite/objc.dg/exceptions-6.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1c6780d7794bd000a15b2fdbfa65dd63a223c/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-6.m?ref=62e1c6780d7794bd000a15b2fdbfa65dd63a223c", "patch": "@@ -11,8 +11,8 @@ void test (id object)\n   @throw object;   /* Ok */\n   @throw;          /* { dg-error \".@throw. .rethrow. used outside of a @catch block\" } */\n   @throw (object); /* Ok.  */\n-  @throw (id)0\n-}                  /* { dg-error \"expected\" } */\n+  @throw (id)0     /* { dg-error \"expected\" } */\n+}\n \n void test2 (id object)\n {"}]}