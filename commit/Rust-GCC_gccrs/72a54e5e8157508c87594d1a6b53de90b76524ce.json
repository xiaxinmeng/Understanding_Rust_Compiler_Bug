{"sha": "72a54e5e8157508c87594d1a6b53de90b76524ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhNTRlNWU4MTU3NTA4Yzg3NTk0ZDFhNmI1M2RlOTBiNzY1MjRjZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-02-04T18:07:06Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-05-06T21:28:22Z"}, "message": "libstdc++ std::fill overload for std::vector<bool>::iterator\n\n  Extend the overload so that it is used even when _GLIBCXX_DEBUG mode\nis activated.\n\n\t* include/bits/stl_algobase.h (struct _Bit_iterator): New declaration.\n\t(std::__fill_a1(_Bit_iterator, _Bit_iterator, const bool&)): Likewise.\n\t* include/bits/stl_bvector.h (__fill_bvector): Move outside\n\t_GLIBCXX_STD_C namespace.\n\t(fill(_Bit_iterator, _Bit_iterator, const bool&)): Likewise and rename\n\tinto...\n\t(__fill_a1): ...this.\n\t* testsuite/25_algorithms/fill/bvector/1.cc: New.", "tree": {"sha": "43e27893f50c6b69a87b4f195789655f5c6969fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e27893f50c6b69a87b4f195789655f5c6969fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72a54e5e8157508c87594d1a6b53de90b76524ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a54e5e8157508c87594d1a6b53de90b76524ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a54e5e8157508c87594d1a6b53de90b76524ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a54e5e8157508c87594d1a6b53de90b76524ce/comments", "author": null, "committer": null, "parents": [{"sha": "d3a1459cd4f2d4997fb53e34ddef72e91a7855c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a1459cd4f2d4997fb53e34ddef72e91a7855c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a1459cd4f2d4997fb53e34ddef72e91a7855c1"}], "stats": {"total": 151, "additions": 102, "deletions": 49}, "files": [{"sha": "76b6e3fe45f772e9174a6bd04d473214c82713fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72a54e5e8157508c87594d1a6b53de90b76524ce", "patch": "@@ -1,3 +1,14 @@\n+2020-05-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+        * include/bits/stl_algobase.h (struct _Bit_iterator): New declaration.\n+        (std::__fill_a1(_Bit_iterator, _Bit_iterator, const bool&)): Likewise.\n+        * include/bits/stl_bvector.h (__fill_bvector): Move outside\n+        _GLIBCXX_STD_C namespace.\n+        (fill(_Bit_iterator, _Bit_iterator, const bool&)): Likewise and rename\n+        into...\n+        (__fill_a1): ...this.\n+        * testsuite/25_algorithms/fill/bvector/1.cc: New.\n+\n 2020-05-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt: Updated."}, {"sha": "089ec2903f6ea7fffae725ebf6e14d7f7c751071", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=72a54e5e8157508c87594d1a6b53de90b76524ce", "patch": "@@ -428,6 +428,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+\n+  template<typename _Tp, typename _Ref, typename _Ptr>\n+    struct _Deque_iterator;\n+\n+  struct _Bit_iterator;\n+\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+\n   // Helpers for streambuf iterators (either istream or ostream).\n   // NB: avoid including <iosfwd>, relatively large.\n   template<typename _CharT>\n@@ -472,13 +481,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      _Category>::__copy_m(__first, __last, __result);\n     }\n \n-_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n-\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    struct _Deque_iterator;\n-\n-_GLIBCXX_END_NAMESPACE_CONTAINER\n-\n   template<bool _IsMove,\n \t   typename _Tp, typename _Ref, typename _Ptr, typename _OI>\n     _OI\n@@ -907,6 +909,10 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \t      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,\n \t      const _VTp&);\n \n+  void\n+  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,\n+\t    const bool&);\n+\n   template<typename _FIte, typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n     inline void"}, {"sha": "a365e7182eb062f17f60a6102b64b35a98129c5a", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=72a54e5e8157508c87594d1a6b53de90b76524ce", "patch": "@@ -416,39 +416,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { return __x + __n; }\n   };\n \n-  inline void\n-  __fill_bvector(_Bit_type * __v,\n-\t\t unsigned int __first, unsigned int __last, bool __x)\n-  {\n-    const _Bit_type __fmask = ~0ul << __first;\n-    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);\n-    const _Bit_type __mask = __fmask & __lmask;\n-\n-    if (__x)\n-      *__v |= __mask;\n-    else\n-      *__v &= ~__mask;\n-  }\n-\n-  inline void\n-  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)\n-  {\n-    if (__first._M_p != __last._M_p)\n-      {\n-\t_Bit_type* __first_p = __first._M_p;\n-\tif (__first._M_offset != 0)\n-\t  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);\n-\n-\t__builtin_memset(__first_p, __x ? ~0 : 0,\n-\t\t\t (__last._M_p - __first_p) * sizeof(_Bit_type));\n-\n-\tif (__last._M_offset != 0)\n-\t  __fill_bvector(__last._M_p, 0, __last._M_offset, __x);\n-      }\n-    else if (__first._M_offset != __last._M_offset)\n-      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);\n-  }\n-\n   template<typename _Alloc>\n     struct _Bvector_base\n     {\n@@ -1336,15 +1303,46 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   };\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace std\n \n-#if __cplusplus >= 201103L\n+  inline void\n+  __fill_bvector(_GLIBCXX_STD_C::_Bit_type * __v,\n+\t\t unsigned int __first, unsigned int __last, bool __x)\n+  {\n+    using _GLIBCXX_STD_C::_Bit_type;\n+    using _GLIBCXX_STD_C::_S_word_bit;\n+    const _Bit_type __fmask = ~0ul << __first;\n+    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);\n+    const _Bit_type __mask = __fmask & __lmask;\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+    if (__x)\n+      *__v |= __mask;\n+    else\n+      *__v &= ~__mask;\n+  }\n \n+  inline void\n+  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator __first,\n+\t    _GLIBCXX_STD_C::_Bit_iterator __last, const bool& __x)\n+  {\n+    using _GLIBCXX_STD_C::_Bit_type;\n+    using _GLIBCXX_STD_C::_S_word_bit;\n+    if (__first._M_p != __last._M_p)\n+      {\n+\t_Bit_type* __first_p = __first._M_p;\n+\tif (__first._M_offset != 0)\n+\t  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);\n+\n+\t__builtin_memset(__first_p, __x ? ~0 : 0,\n+\t\t\t (__last._M_p - __first_p) * sizeof(_Bit_type));\n+\n+\tif (__last._M_offset != 0)\n+\t  __fill_bvector(__last._M_p, 0, __last._M_offset, __x);\n+      }\n+    else if (__first._M_offset != __last._M_offset)\n+      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);\n+  }\n+\n+#if __cplusplus >= 201103L\n   // DR 1182.\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>\n@@ -1354,10 +1352,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t\n       operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>&) const noexcept;\n     };\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-}// namespace std\n-\n-#endif // C++11\n+} // namespace std\n \n #endif"}, {"sha": "22e4fca73b8c8999b5a1f8b161a97e957ecec81b", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/bvector/1.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fbvector%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a54e5e8157508c87594d1a6b53de90b76524ce/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fbvector%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fbvector%2F1.cc?ref=72a54e5e8157508c87594d1a6b53de90b76524ce", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <vector>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  vector<bool> v1(100, false);\n+  vector<bool> v2(100, true);\n+\n+  fill(v1.begin(), v1.end(), true);\n+\n+  VERIFY( equal(v1.begin(), v1.end(), v2.begin()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}