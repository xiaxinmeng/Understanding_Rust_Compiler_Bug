{"sha": "0d01a4abfbaeae96135e2c5383850d3a2ea66aa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwMWE0YWJmYmFlYWU5NjEzNWUyYzUzODM4NTBkM2EyZWE2NmFhMQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-08-16T12:19:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-16T12:19:50Z"}, "message": "sem_ch10.adb (Has_With_Clause): If the name of the with clause currently inspected is a selected component...\n\n2007-08-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch10.adb (Has_With_Clause): If the name of the with clause\n\tcurrently inspected is a selected component, retrieve the entity of\n\tits selector.\n\t(Install_Limited_Withed_Unit): Call Has_Limited_With_Clause starting\n\tfrom the immediate ancestor of Main_Unit_Entity.\n\t(Install_Limited_Withed_Unit): Do not install the limited view of\n\tpackage P if P is reachable through an ancestor chain from package C\n\tand C also has a with clause for P in its body.\n\t(Has_Limited_With_Clause): New routine.\n\t(Has_With_Clause): New routine.\n\nFrom-SVN: r127545", "tree": {"sha": "81c47bb8cecbb7784715c31f4a491b8546f92a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81c47bb8cecbb7784715c31f4a491b8546f92a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f6447c5c85cb0cd0462536c76d3b9c4e1c9b193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6447c5c85cb0cd0462536c76d3b9c4e1c9b193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6447c5c85cb0cd0462536c76d3b9c4e1c9b193"}], "stats": {"total": 158, "additions": 147, "deletions": 11}, "files": [{"sha": "14739b916ff3de7a9bd4a7b83fc5ab5b24f6c34c", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 147, "deletions": 11, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d01a4abfbaeae96135e2c5383850d3a2ea66aa1/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=0d01a4abfbaeae96135e2c5383850d3a2ea66aa1", "patch": "@@ -2220,7 +2220,7 @@ package body Sem_Ch10 is\n       if Limited_Present (N) then\n \n          --  Ada 2005 (AI-50217): Build visibility structures but do not\n-         --  analyze unit\n+         --  analyze the unit.\n \n          Build_Limited_Views (N);\n          return;\n@@ -3147,7 +3147,9 @@ package body Sem_Ch10 is\n       --  private descendant of that library unit.\n \n       procedure Expand_Limited_With_Clause\n-        (Comp_Unit : Node_Id; Nam : Node_Id; N : Node_Id);\n+        (Comp_Unit : Node_Id;\n+         Nam       : Node_Id;\n+         N         : Node_Id);\n       --  If a child unit appears in a limited_with clause, there are implicit\n       --  limited_with clauses on all parents that are not already visible\n       --  through a regular with clause. This procedure creates the implicit\n@@ -3220,7 +3222,8 @@ package body Sem_Ch10 is\n \n                      E2 := E;\n                      while E2 /= Standard_Standard\n-                       and then E2 /= WEnt loop\n+                       and then E2 /= WEnt\n+                     loop\n                         E2 := Scope (E2);\n                      end loop;\n \n@@ -3451,10 +3454,10 @@ package body Sem_Ch10 is\n               and then not Limited_View_Installed (Item)\n             then\n                if not Private_Present (Item)\n-                or else Private_Present (N)\n-                or else Nkind (Unit (N)) = N_Package_Body\n-                or else Nkind (Unit (N)) = N_Subprogram_Body\n-                or else Nkind (Unit (N)) = N_Subunit\n+                 or else Private_Present (N)\n+                 or else Nkind (Unit (N)) = N_Package_Body\n+                 or else Nkind (Unit (N)) = N_Subprogram_Body\n+                 or else Nkind (Unit (N)) = N_Subunit\n                then\n                   Install_Limited_Withed_Unit (Item);\n                end if;\n@@ -3782,14 +3785,114 @@ package body Sem_Ch10 is\n       E                : Entity_Id;\n       P                : Entity_Id;\n       Is_Child_Package : Boolean := False;\n-\n-      Lim_Header : Entity_Id;\n-      Lim_Typ    : Entity_Id;\n+      Lim_Header       : Entity_Id;\n+      Lim_Typ          : Entity_Id;\n+\n+      function Has_Limited_With_Clause\n+        (C_Unit : Entity_Id;\n+         Pack   : Entity_Id) return Boolean;\n+      --  Determine whether any package in the ancestor chain starting with\n+      --  C_Unit has a limited with clause for package Pack.\n+\n+      function Has_With_Clause\n+        (C_Unit     : Node_Id;\n+         Pack       : Entity_Id;\n+         Is_Limited : Boolean := False) return Boolean;\n+      --  Determine whether compilation unit C_Unit contains a with clause\n+      --  for package Pack. Use flag Is_Limited to designate desired clause\n+      --  kind. This is a subsidiary routine to Has_Limited_With_Clause.\n \n       function Is_Visible_Through_Renamings (P : Entity_Id) return Boolean;\n       --  Check if some package installed though normal with-clauses has a\n       --  renaming declaration of package P. AARM 10.1.2(21/2).\n \n+      -----------------------------\n+      -- Has_Limited_With_Clause --\n+      -----------------------------\n+\n+      function Has_Limited_With_Clause\n+        (C_Unit : Entity_Id;\n+         Pack   : Entity_Id) return Boolean\n+      is\n+         Par      : Entity_Id;\n+         Par_Unit : Node_Id;\n+\n+      begin\n+         Par := C_Unit;\n+         while Present (Par) loop\n+            if Ekind (Par) /= E_Package then\n+               exit;\n+            end if;\n+\n+            --  Retrieve the Compilation_Unit node for Par and determine if\n+            --  its context clauses contain a limited with for Pack.\n+\n+            Par_Unit := Parent (Parent (Parent (Par)));\n+\n+            if Nkind (Par_Unit) = N_Package_Declaration then\n+               Par_Unit := Parent (Par_Unit);\n+            end if;\n+\n+            if Has_With_Clause (Par_Unit, Pack, True) then\n+               return True;\n+            end if;\n+\n+            --  If there are more ancestors, climb up the tree, otherwise\n+            --  we are done.\n+\n+            if Is_Child_Unit (Par) then\n+               Par := Scope (Par);\n+            else\n+               exit;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end Has_Limited_With_Clause;\n+\n+      ---------------------\n+      -- Has_With_Clause --\n+      ---------------------\n+\n+      function Has_With_Clause\n+        (C_Unit     : Node_Id;\n+         Pack       : Entity_Id;\n+         Is_Limited : Boolean := False) return Boolean\n+      is\n+         Item : Node_Id;\n+         Nam  : Entity_Id;\n+\n+      begin\n+         if Present (Context_Items (C_Unit)) then\n+            Item := First (Context_Items (C_Unit));\n+            while Present (Item) loop\n+               if Nkind (Item) = N_With_Clause then\n+\n+                  --  Retrieve the entity of the imported compilation unit\n+\n+                  if Nkind (Name (Item)) = N_Selected_Component then\n+                     Nam := Entity (Selector_Name (Name (Item)));\n+                  else\n+                     Nam := Entity (Name (Item));\n+                  end if;\n+\n+                  if Nam = Pack\n+                    and then\n+                      ((Is_Limited and then Limited_Present (Item))\n+                          or else\n+                       (not Is_Limited and then not Limited_Present (Item)))\n+                  then\n+                     return True;\n+                  end if;\n+               end if;\n+\n+               Next (Item);\n+            end loop;\n+         end if;\n+\n+         return False;\n+      end Has_With_Clause;\n+\n       ----------------------------------\n       -- Is_Visible_Through_Renamings --\n       ----------------------------------\n@@ -3924,7 +4027,40 @@ package body Sem_Ch10 is\n       if P = Cunit_Entity (Current_Sem_Unit)\n         or else\n          (Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Body\n-           and then  P = Main_Unit_Entity)\n+            and then P = Main_Unit_Entity)\n+      then\n+         return;\n+      end if;\n+\n+      --  This scenario is similar to the one above, the difference is that\n+      --  the compilation of sibling Par.Sib forces the load of parent Par\n+      --  which tries to install the limited view of Lim_Pack [1]. However\n+      --  Par.Sib has a with clause for Lim_Pack [2] in its body, and thus\n+      --  needs the non-limited views of all entities from Lim_Pack.\n+\n+      --     limited with Lim_Pack;   --  [1]\n+      --     package Par is ...           package Lim_Pack is ...\n+\n+      --                                  with Lim_Pack;  --  [2]\n+      --     package Par.Sib is ...       package body Par.Sib is ...\n+\n+      --  In this case Main_Unit_Entity is the spec of Par.Sib and Current_\n+      --  Sem_Unit is the body of Par.Sib.\n+\n+      if Ekind (P) = E_Package\n+        and then Ekind (Main_Unit_Entity) = E_Package\n+        and then Is_Child_Unit (Main_Unit_Entity)\n+\n+         --  The body has a regular with clause\n+\n+        and then Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Body\n+        and then Has_With_Clause (Cunit (Current_Sem_Unit), P)\n+\n+         --  One of the ancestors has a limited with clause\n+\n+        and then Nkind (Parent (Parent (Main_Unit_Entity))) =\n+                   N_Package_Specification\n+        and then Has_Limited_With_Clause (Scope (Main_Unit_Entity), P)\n       then\n          return;\n       end if;"}]}