{"sha": "7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxMTU2ZWQzNWU0ZjVhMTRjZWE5M2U0MjEzNzMwMmViMWQxZjA3YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-04T09:45:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-04T09:45:29Z"}, "message": "re PR libstdc++/12653 (Resolution of DR 303 (WP) still unimplemented)\n\n2003-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12653\n\t* include/std/std_bitset.h (operator>>): Implement resolution\n\tof DR 303 [WP]: use widen('0') and widen('1').\n\t* docs/html/ext/howto.html: Add an entry for DR 303.\n\n\t* include/std/std_bitset.h (operator>>): Implement the common\n\trequirements of formatted input functions (27.6.1.2.1).\n\n\t* include/std/std_bitset.h (operator>>): Set the failbit when\n\tnothing was extracted and _Nb != 0.\n\t* testsuite/23_containers/bitset/input/1.cc: New.\n\nFrom-SVN: r74276", "tree": {"sha": "250dede730eb4985abd87e33372b147b0426c7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250dede730eb4985abd87e33372b147b0426c7ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/comments", "author": null, "committer": null, "parents": [{"sha": "8a89dbd24275d78205f408da9acdee092850dc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a89dbd24275d78205f408da9acdee092850dc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a89dbd24275d78205f408da9acdee092850dc5a"}], "stats": {"total": 134, "additions": 106, "deletions": 28}, "files": [{"sha": "38a1d2dc9b3606659a9fa394dc62a68cd3916d14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "patch": "@@ -1,3 +1,17 @@\n+2003-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12653\n+\t* include/std/std_bitset.h (operator>>): Implement resolution\n+\tof DR 303 [WP]: use widen('0') and widen('1').\n+\t* docs/html/ext/howto.html: Add an entry for DR 303.\n+\n+\t* include/std/std_bitset.h (operator>>): Implement the common\n+\trequirements of formatted input functions (27.6.1.2.1).\n+\n+\t* include/std/std_bitset.h (operator>>): Set the failbit when\n+\tnothing was extracted and _Nb != 0.\n+\t* testsuite/23_containers/bitset/input/1.cc: New.\n+\n 2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/12791"}, {"sha": "2ce76ee9db37142fd12f3cbaee03458f6abc3523", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "patch": "@@ -682,6 +682,13 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>If <code>(this == &amp;x)</code> do nothing.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#303\">303</a>:\n+        <em>Bitset input operator underspecified</em>\n+    </dt>\n+    <dd>Basically, compare the input character to <code>is.widen(0)</code>\n+        and <code>is.widen(1)</code>.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#305\">305</a>:\n         <em>Default behavior of codecvt&lt;wchar_t, char, mbstate_t&gt;::length()</em>\n     </dt>"}, {"sha": "e6498973e83354dd50308fcd98d71397f5f03196", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "patch": "@@ -1155,46 +1155,53 @@ namespace __gnu_norm\n       basic_string<_CharT, _Traits> __tmp;\n       __tmp.reserve(_Nb);\n \n-      // Skip whitespace\n+      ios_base::iostate __state = ios_base::goodbit;\n       typename basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n       if (__sentry)\n \t{\n-\t  ios_base::iostate  __state = ios_base::goodbit;\n-\t  basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n-\t  for (size_t __i = 0; __i < _Nb; ++__i)\n+\t  try\n \t    {\n-\t      static typename _Traits::int_type __eof = _Traits::eof();\n-\n-\t      typename _Traits::int_type __c1 = __buf->sbumpc();\n-\t      if (_Traits::eq_int_type(__c1, __eof))\n-\t\t{\n-\t\t  __state |= ios_base::eofbit;\n-\t\t  break;\n-\t\t}\n-\t      else\n+\t      basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 303. Bitset input operator underspecified\n+\t      const char_type __zero = __is.widen('0');\n+\t      const char_type __one = __is.widen('1');\n+\t      for (size_t __i = 0; __i < _Nb; ++__i)\n \t\t{\n-\t\t  char_type __c2 = _Traits::to_char_type(__c1);\n-\t\t  char_type __c  = __is.narrow(__c2, '*');\n-\n-\t\t  if (__c == '0' || __c == '1')\n-\t\t    __tmp.push_back(__c);\n-\t\t  else if (_Traits::eq_int_type(__buf->sputbackc(__c2), __eof))\n+\t\t  static typename _Traits::int_type __eof = _Traits::eof();\n+\t\t  \n+\t\t  typename _Traits::int_type __c1 = __buf->sbumpc();\n+\t\t  if (_Traits::eq_int_type(__c1, __eof))\n \t\t    {\n-\t\t      __state |= ios_base::failbit;\n+\t\t      __state |= ios_base::eofbit;\n \t\t      break;\n \t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      char_type __c2 = _Traits::to_char_type(__c1);\n+\t\t      if (__c2 == __zero)\n+\t\t\t__tmp.push_back('0');\n+\t\t      else if (__c2 == __one)\n+\t\t\t__tmp.push_back('1');\n+\t\t      else if (_Traits::eq_int_type(__buf->sputbackc(__c2),\n+\t\t\t\t\t\t    __eof))\n+\t\t\t{\n+\t\t\t  __state |= ios_base::failbit;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n \t\t}\n \t    }\n-\n-\t  if (__tmp.empty() && !_Nb)\n-\t    __state |= ios_base::failbit;\n-\t  else\n-\t    __x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n-\n-\t  if (__state != ios_base::goodbit)\n-\t    __is.setstate(__state);    // may throw an exception\n+\t  catch(...)\n+\t    { __is._M_setstate(ios_base::badbit); }\n \t}\n \n+      if (__tmp.empty() && _Nb)\n+\t__state |= ios_base::failbit;\n+      else\n+\t__x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n+      if (__state)\n+\t__is.setstate(__state);\n       return __is;\n     }\n "}, {"sha": "a9387b65adea445274e472d8f1f0113900579f4e", "filename": "libstdc++-v3/testsuite/23_containers/bitset/input/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finput%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1156ed35e4f5a14cea93e42137302eb1d1f07a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finput%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finput%2F1.cc?ref=7f1156ed35e4f5a14cea93e42137302eb1d1f07a", "patch": "@@ -0,0 +1,50 @@\n+// 2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.3.5.3 bitset operators\n+\n+#include <bitset>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  bitset<5>      b5;\n+  bitset<0>      b0;\n+  stringstream   ss;\n+\n+  ss.str(\"*\");\n+  ss >> b5;\n+  VERIFY( ss.rdstate() == ios_base::failbit );\n+\n+  ss.clear();\n+  ss.str(\"*\");\n+  ss >> b0;\n+  VERIFY( ss.rdstate() == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}