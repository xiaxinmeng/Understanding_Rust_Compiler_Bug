{"sha": "cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5YjVjYThjZjQ1ZmMwYTNhZTE4YjA2ZGM4MjkwZTBhYjUwMGI0Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-05T15:47:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-05T15:47:36Z"}, "message": "h8300.c (output_a_shift): Do not output a variable shift.\n\n\t* config/h8300/h8300.c (output_a_shift): Do not output a\n\tvariable shift.\n\t* config/h8300/h8300.md (two splitters): New.\n\nFrom-SVN: r60915", "tree": {"sha": "bd71dee77cf7c752c67702c2f699e58d6023d46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd71dee77cf7c752c67702c2f699e58d6023d46a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/comments", "author": null, "committer": null, "parents": [{"sha": "30e3682e965c25ed8440c3faf326021d6960ba80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e3682e965c25ed8440c3faf326021d6960ba80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e3682e965c25ed8440c3faf326021d6960ba80"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "673910120b2da31852128e800e5c3a88b2a1571e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "patch": "@@ -1,3 +1,9 @@\n+2003-01-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (output_a_shift): Do not output a\n+\tvariable shift.\n+\t* config/h8300/h8300.md (two splitters): New.\n+\n 2003-01-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md: Disable the movstrsi define_split."}, {"sha": "8bc9bfc82e6a909c85b8c709495db68af2183d60", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "patch": "@@ -3197,20 +3197,9 @@ output_a_shift (operands)\n \n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n-      /* Indexing by reg, so have to loop and test at top.  */\n-      output_asm_insn (\"mov.b\t%X2,%X4\", operands);\n-      fprintf (asm_out_file, \"\\tble\t.Lle%d\\n\", loopend_lab);\n-\n-      /* Get the assembler code to do one shift.  */\n-      get_shift_alg (shift_type, shift_mode, 1, &info);\n-\n-      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-      output_asm_insn (info.shift1, operands);\n-      output_asm_insn (\"add\t#0xff,%X4\", operands);\n-      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n-      fprintf (asm_out_file, \".Lle%d:\\n\", loopend_lab);\n-\n-      return \"\";\n+      /* This case must be taken care of by one of the two splitters\n+\t that convert a variable shift into a loop.  */\n+      abort ();\n     }\n   else\n     {"}, {"sha": "defe9d446a3a6e4da06c194558b66a444e00337c", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=cd9b5ca8cf45fc0a3ae18b06dc8290e0ab500b46", "patch": "@@ -2234,6 +2234,75 @@\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n+\n+;; Split a variable shift into a loop.  If the register containing\n+;; the shift count dies, then we just use that register.\n+\n+(define_split\n+  [(parallel\n+     [(set (match_operand 0 \"register_operand\" \"\")\n+\t   (match_operator 2 \"nshift_operator\"\n+\t     [(match_dup 0)\n+\t      (match_operand:QI 1 \"register_operand\" \"\")]))\n+      (clobber (match_operand:QI 3 \"register_operand\" \"\"))])]\n+  \"flow2_completed\n+   && find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\"\n+  [(set (cc0)\n+\t(match_dup 1))\n+   (set (pc)\n+        (if_then_else (le (cc0) (const_int 0))\n+\t\t      (label_ref (match_dup 5))\n+\t\t      (pc)))\n+   (match_dup 4)\n+   (parallel\n+     [(set (match_dup 0)\n+\t   (match_op_dup 2 [(match_dup 0) (const_int 1)]))\n+      (clobber (scratch:QI))])\n+   (set (match_dup 1)\n+\t(plus:QI (match_dup 1) (const_int -1)))\n+   (set (cc0)\n+\t(match_dup 1))\n+   (set (pc)\n+        (if_then_else (ne (cc0) (const_int 0))\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))\n+   (match_dup 5)]\n+  \"operands[4] = gen_label_rtx ();\n+   operands[5] = gen_label_rtx ();\")\n+\n+(define_split\n+  [(parallel\n+     [(set (match_operand 0 \"register_operand\" \"\")\n+\t   (match_operator 2 \"nshift_operator\"\n+\t     [(match_dup 0)\n+\t      (match_operand:QI 1 \"register_operand\" \"\")]))\n+      (clobber (match_operand:QI 3 \"register_operand\" \"\"))])]\n+  \"flow2_completed\n+   && !find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\"\n+  [(set (match_dup 3)\n+\t(match_dup 1))\n+   (set (cc0)\n+\t(match_dup 3))\n+   (set (pc)\n+        (if_then_else (le (cc0) (const_int 0))\n+\t\t      (label_ref (match_dup 5))\n+\t\t      (pc)))\n+   (match_dup 4)\n+   (parallel\n+     [(set (match_dup 0)\n+\t   (match_op_dup 2 [(match_dup 0) (const_int 1)]))\n+      (clobber (scratch:QI))])\n+   (set (match_dup 3)\n+\t(plus:QI (match_dup 3) (const_int -1)))\n+   (set (cc0)\n+\t(match_dup 3))\n+   (set (pc)\n+        (if_then_else (ne (cc0) (const_int 0))\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))\n+   (match_dup 5)]\n+  \"operands[4] = gen_label_rtx ();\n+   operands[5] = gen_label_rtx ();\")\n \f\n ;; ----------------------------------------------------------------------\n ;; ROTATIONS"}]}