{"sha": "479f75468270993608b1b336baa6e05c9bae7907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5Zjc1NDY4MjcwOTkzNjA4YjFiMzM2YmFhNmUwNWM5YmFlNzkwNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-06-14T16:00:55Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-06-14T16:00:55Z"}, "message": "arm.c (arm_cirrus_insn_p): Delete.\n\n\t* arm.c (arm_cirrus_insn_p): Delete.\n\t(cirrus_reorg): Delete.\n\t(arm_reorg): Don't call cirrus_reorg.\n\t(arm_final_prescan_insn_p): Don't check for cirrus insns.\n\t* arm.md (define_attr \"type\"): Remove mav_farith and mav_dmult.\n\t(adddi3, subdi3): Remove Maverick support.\n\t(arm_adddi3): Likewise.\n\t(adddi_sesidi_di, adddi_zesidi_di): Likewise.\n\t(addsf3, adddf3): Likewise.\n\t(subsf3, subdf3): Likewise.\n\t(mulsf3, muldf3): Likewise.\n\t(ashldi3, ashrdi3, lshrdi3): Likewise.\n\t(floatsisf2, floatsidf2): Likewise.\n\t(fix_truncsfsi2, fix_truncdfsi2): Likewise.\n\t(arm_movdi, thumb1_movdi_insn): Likewise.\n\t(arm_cmpdi_insn): Likewise.\n\t(cirrus_cmpsf, cirrus_cmpdf, cirrus_cmpdi): Likewise.\n\t(cirrus.md): Don't include.\n\t* cirrus.md: Delete file.\n\t* t-arm (MD_INCLUDES): Remove cirrus.md.\n\nFrom-SVN: r188622", "tree": {"sha": "f797acf4d86942e6742bb53828ecb43b28db91ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f797acf4d86942e6742bb53828ecb43b28db91ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/479f75468270993608b1b336baa6e05c9bae7907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479f75468270993608b1b336baa6e05c9bae7907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479f75468270993608b1b336baa6e05c9bae7907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479f75468270993608b1b336baa6e05c9bae7907/comments", "author": null, "committer": null, "parents": [{"sha": "0364adfd168f4e0f155fafb2089a567755ccabf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0364adfd168f4e0f155fafb2089a567755ccabf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0364adfd168f4e0f155fafb2089a567755ccabf9"}], "stats": {"total": 854, "additions": 32, "deletions": 822}, "files": [{"sha": "112c163646071ecf95ea308545340356da2bba56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479f75468270993608b1b336baa6e05c9bae7907/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479f75468270993608b1b336baa6e05c9bae7907/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=479f75468270993608b1b336baa6e05c9bae7907", "patch": "@@ -1,3 +1,26 @@\n+2012-06-14  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_cirrus_insn_p): Delete.\n+\t(cirrus_reorg): Delete.\n+\t(arm_reorg): Don't call cirrus_reorg.\n+\t(arm_final_prescan_insn_p): Don't check for cirrus insns.\n+\t* arm.md (define_attr \"type\"): Remove mav_farith and mav_dmult.\n+\t(adddi3, subdi3): Remove Maverick support.\n+\t(arm_adddi3): Likewise.\n+\t(adddi_sesidi_di, adddi_zesidi_di): Likewise.\n+\t(addsf3, adddf3): Likewise.\n+\t(subsf3, subdf3): Likewise.\n+\t(mulsf3, muldf3): Likewise.\n+\t(ashldi3, ashrdi3, lshrdi3): Likewise.\n+\t(floatsisf2, floatsidf2): Likewise.\n+\t(fix_truncsfsi2, fix_truncdfsi2): Likewise.\n+\t(arm_movdi, thumb1_movdi_insn): Likewise.\n+\t(arm_cmpdi_insn): Likewise.\n+\t(cirrus_cmpsf, cirrus_cmpdf, cirrus_cmpdi): Likewise.\n+\t(cirrus.md): Don't include.\n+\t* cirrus.md: Delete file.\n+\t* t-arm (MD_INCLUDES): Remove cirrus.md.\n+\n 2012-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (function_possibly_abstracted_p): New static function."}, {"sha": "092e2022b7ed479574ac6fc67b7e8a239386d34d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=479f75468270993608b1b336baa6e05c9bae7907", "patch": "@@ -167,8 +167,6 @@ static int arm_address_cost (rtx, bool);\n static int arm_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int arm_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool arm_memory_load_p (rtx);\n-static bool arm_cirrus_insn_p (rtx);\n-static void cirrus_reorg (rtx);\n static void arm_init_builtins (void);\n static void arm_init_iwmmxt_builtins (void);\n static rtx safe_vector_operand (rtx, enum machine_mode);\n@@ -9821,144 +9819,6 @@ arm_memory_load_p (rtx insn)\n \t  || note_invalid_constants (insn, -1, false));\n }\n \n-/* Return TRUE if INSN is a Cirrus instruction.  */\n-static bool\n-arm_cirrus_insn_p (rtx insn)\n-{\n-  enum attr_cirrus attr;\n-\n-  /* get_attr cannot accept USE or CLOBBER.  */\n-  if (!insn\n-      || GET_CODE (insn) != INSN\n-      || GET_CODE (PATTERN (insn)) == USE\n-      || GET_CODE (PATTERN (insn)) == CLOBBER)\n-    return 0;\n-\n-  attr = get_attr_cirrus (insn);\n-\n-  return attr != CIRRUS_NOT;\n-}\n-\n-/* Cirrus reorg for invalid instruction combinations.  */\n-static void\n-cirrus_reorg (rtx first)\n-{\n-  enum attr_cirrus attr;\n-  rtx body = PATTERN (first);\n-  rtx t;\n-  int nops;\n-\n-  /* Any branch must be followed by 2 non Cirrus instructions.  */\n-  if (GET_CODE (first) == JUMP_INSN && GET_CODE (body) != RETURN)\n-    {\n-      nops = 0;\n-      t = next_nonnote_insn (first);\n-\n-      if (arm_cirrus_insn_p (t))\n-\t++ nops;\n-\n-      if (arm_cirrus_insn_p (next_nonnote_insn (t)))\n-\t++ nops;\n-\n-      while (nops --)\n-\temit_insn_after (gen_nop (), first);\n-\n-      return;\n-    }\n-\n-  /* (float (blah)) is in parallel with a clobber.  */\n-  if (GET_CODE (body) == PARALLEL && XVECLEN (body, 0) > 0)\n-    body = XVECEXP (body, 0, 0);\n-\n-  if (GET_CODE (body) == SET)\n-    {\n-      rtx lhs = XEXP (body, 0), rhs = XEXP (body, 1);\n-\n-      /* cfldrd, cfldr64, cfstrd, cfstr64 must\n-\t be followed by a non Cirrus insn.  */\n-      if (get_attr_cirrus (first) == CIRRUS_DOUBLE)\n-\t{\n-\t  if (arm_cirrus_insn_p (next_nonnote_insn (first)))\n-\t    emit_insn_after (gen_nop (), first);\n-\n-\t  return;\n-\t}\n-      else if (arm_memory_load_p (first))\n-\t{\n-\t  unsigned int arm_regno;\n-\n-\t  /* Any ldr/cfmvdlr, ldr/cfmvdhr, ldr/cfmvsr, ldr/cfmv64lr,\n-\t     ldr/cfmv64hr combination where the Rd field is the same\n-\t     in both instructions must be split with a non Cirrus\n-\t     insn.  Example:\n-\n-\t     ldr r0, blah\n-\t     nop\n-\t     cfmvsr mvf0, r0.  */\n-\n-\t  /* Get Arm register number for ldr insn.  */\n-\t  if (GET_CODE (lhs) == REG)\n-\t    arm_regno = REGNO (lhs);\n-\t  else\n-\t    {\n-\t      gcc_assert (GET_CODE (rhs) == REG);\n-\t      arm_regno = REGNO (rhs);\n-\t    }\n-\n-\t  /* Next insn.  */\n-\t  first = next_nonnote_insn (first);\n-\n-\t  if (! arm_cirrus_insn_p (first))\n-\t    return;\n-\n-\t  body = PATTERN (first);\n-\n-          /* (float (blah)) is in parallel with a clobber.  */\n-          if (GET_CODE (body) == PARALLEL && XVECLEN (body, 0))\n-\t    body = XVECEXP (body, 0, 0);\n-\n-\t  if (GET_CODE (body) == FLOAT)\n-\t    body = XEXP (body, 0);\n-\n-\t  if (get_attr_cirrus (first) == CIRRUS_MOVE\n-\t      && GET_CODE (XEXP (body, 1)) == REG\n-\t      && arm_regno == REGNO (XEXP (body, 1)))\n-\t    emit_insn_after (gen_nop (), first);\n-\n-\t  return;\n-\t}\n-    }\n-\n-  /* get_attr cannot accept USE or CLOBBER.  */\n-  if (!first\n-      || GET_CODE (first) != INSN\n-      || GET_CODE (PATTERN (first)) == USE\n-      || GET_CODE (PATTERN (first)) == CLOBBER)\n-    return;\n-\n-  attr = get_attr_cirrus (first);\n-\n-  /* Any coprocessor compare instruction (cfcmps, cfcmpd, ...)\n-     must be followed by a non-coprocessor instruction.  */\n-  if (attr == CIRRUS_COMPARE)\n-    {\n-      nops = 0;\n-\n-      t = next_nonnote_insn (first);\n-\n-      if (arm_cirrus_insn_p (t))\n-\t++ nops;\n-\n-      if (arm_cirrus_insn_p (next_nonnote_insn (t)))\n-\t++ nops;\n-\n-      while (nops --)\n-\temit_insn_after (gen_nop (), first);\n-\n-      return;\n-    }\n-}\n-\n /* Return TRUE if X references a SYMBOL_REF.  */\n int\n symbol_mentioned_p (rtx x)\n@@ -13698,12 +13558,6 @@ arm_reorg (void)\n   /* Scan all the insns and record the operands that will need fixing.  */\n   for (insn = next_nonnote_insn (insn); insn; insn = next_nonnote_insn (insn))\n     {\n-      if (TARGET_CIRRUS_FIX_INVALID_INSNS\n-          && (arm_cirrus_insn_p (insn)\n-\t      || GET_CODE (insn) == JUMP_INSN\n-\t      || arm_memory_load_p (insn)))\n-\tcirrus_reorg (insn);\n-\n       if (GET_CODE (insn) == BARRIER)\n \tpush_minipool_barrier (insn, address);\n       else if (INSN_P (insn))\n@@ -18984,18 +18838,6 @@ arm_final_prescan_insn (rtx insn)\n \t\t    || GET_CODE (scanbody) == PARALLEL)\n \t\t  || get_attr_conds (this_insn) != CONDS_NOCOND)\n \t\tfail = TRUE;\n-\n-\t      /* A conditional cirrus instruction must be followed by\n-\t\t a non Cirrus instruction.  However, since we\n-\t\t conditionalize instructions in this function and by\n-\t\t the time we get here we can't add instructions\n-\t\t (nops), because shorten_branches() has already been\n-\t\t called, we will disable conditionalizing Cirrus\n-\t\t instructions to be safe.  */\n-\t      if (GET_CODE (scanbody) != USE\n-\t\t  && GET_CODE (scanbody) != CLOBBER\n-\t\t  && get_attr_cirrus (this_insn) != CIRRUS_NOT)\n-\t\tfail = TRUE;\n \t      break;\n \n \t    default:"}, {"sha": "52bdb398d7d5616552ff74500cf4a84f4c3dd524", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 123, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=479f75468270993608b1b336baa6e05c9bae7907", "patch": "@@ -348,13 +348,10 @@\n ; store2\tstore 2 words\n ; store3\tstore 3 words\n ; store4\tstore 4 (or more) words\n-;  Additions for Cirrus Maverick co-processor:\n-; mav_farith\tFloating point arithmetic (4 cycle)\n-; mav_dmult\tDouble multiplies (7 cycle)\n ;\n \n (define_attr \"type\"\n-\t\"alu,alu_shift,alu_shift_reg,mult,block,float,fdivx,fdivd,fdivs,fmul,fmuls,fmuld,fmacs,fmacd,ffmul,farith,ffarith,f_flag,float_em,f_fpa_load,f_fpa_store,f_loads,f_loadd,f_stores,f_stored,f_mem_r,r_mem_f,f_2_r,r_2_f,f_cvt,branch,call,load_byte,load1,load2,load3,load4,store1,store2,store3,store4,mav_farith,mav_dmult,fconsts,fconstd,fadds,faddd,ffariths,ffarithd,fcmps,fcmpd,fcpys\"\n+\t\"alu,alu_shift,alu_shift_reg,mult,block,float,fdivx,fdivd,fdivs,fmul,fmuls,fmuld,fmacs,fmacd,ffmul,farith,ffarith,f_flag,float_em,f_fpa_load,f_fpa_store,f_loads,f_loadd,f_stores,f_stored,f_mem_r,r_mem_f,f_2_r,r_2_f,f_cvt,branch,call,load_byte,load1,load2,load3,load4,store1,store2,store3,store4,fconsts,fconstd,fadds,faddd,ffariths,ffarithd,fcmps,fcmpd,fcpys\"\n \t(if_then_else \n \t (eq_attr \"insn\" \"smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n \t (const_string \"mult\")\n@@ -577,8 +574,6 @@\n ;; Note: For DImode insns, there is normally no reason why operands should\n ;; not be in the same register, what we don't want is for something being\n ;; written to partially overlap something that is an input.\n-;; Cirrus 64bit additions should not be split because we have a native\n-;; 64bit addition instructions.\n \n (define_expand \"adddi3\"\n  [(parallel\n@@ -588,16 +583,6 @@\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n-  if (TARGET_HARD_FLOAT && TARGET_MAVERICK)\n-    {\n-      if (!cirrus_fp_register (operands[0], DImode))\n-        operands[0] = force_reg (DImode, operands[0]);\n-      if (!cirrus_fp_register (operands[1], DImode))\n-        operands[1] = force_reg (DImode, operands[1]);\n-      emit_insn (gen_cirrus_adddi3 (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-\n   if (TARGET_THUMB1)\n     {\n       if (GET_CODE (operands[1]) != REG)\n@@ -624,7 +609,7 @@\n \t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"%0, 0\")\n \t\t (match_operand:DI 2 \"s_register_operand\" \"r,  0\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK) && !TARGET_NEON\"\n+  \"TARGET_32BIT && !TARGET_NEON\"\n   \"#\"\n   \"TARGET_32BIT && reload_completed\n    && ! (TARGET_NEON && IS_VFP_REGNUM (REGNO (operands[0])))\"\n@@ -653,7 +638,7 @@\n \t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t (match_operand:DI 1 \"s_register_operand\" \"0,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK)\"\n+  \"TARGET_32BIT\"\n   \"#\"\n   \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (reg:CC_C CC_REGNUM)\n@@ -682,7 +667,7 @@\n \t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t (match_operand:DI 1 \"s_register_operand\" \"0,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK)\"\n+  \"TARGET_32BIT\"\n   \"#\"\n   \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (reg:CC_C CC_REGNUM)\n@@ -1078,9 +1063,6 @@\n \t\t (match_operand:SF 2 \"arm_float_add_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n-  if (TARGET_MAVERICK\n-      && !cirrus_fp_register (operands[2], SFmode))\n-    operands[2] = force_reg (SFmode, operands[2]);\n \")\n \n (define_expand \"adddf3\"\n@@ -1089,9 +1071,6 @@\n \t\t (match_operand:DF 2 \"arm_float_add_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n-  if (TARGET_MAVERICK\n-      && !cirrus_fp_register (operands[2], DFmode))\n-    operands[2] = force_reg (DFmode, operands[2]);\n \")\n \n (define_expand \"subdi3\"\n@@ -1102,15 +1081,6 @@\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n-  if (TARGET_HARD_FLOAT && TARGET_MAVERICK\n-      && TARGET_32BIT\n-      && cirrus_fp_register (operands[0], DImode)\n-      && cirrus_fp_register (operands[1], DImode))\n-    {\n-      emit_insn (gen_cirrus_subdi3 (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-\n   if (TARGET_THUMB1)\n     {\n       if (GET_CODE (operands[1]) != REG)\n@@ -1325,13 +1295,6 @@\n \t\t  (match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-      if (!cirrus_fp_register (operands[1], SFmode))\n-        operands[1] = force_reg (SFmode, operands[1]);\n-      if (!cirrus_fp_register (operands[2], SFmode))\n-        operands[2] = force_reg (SFmode, operands[2]);\n-    }\n \")\n \n (define_expand \"subdf3\"\n@@ -1340,13 +1303,6 @@\n \t\t  (match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-       if (!cirrus_fp_register (operands[1], DFmode))\n-         operands[1] = force_reg (DFmode, operands[1]);\n-       if (!cirrus_fp_register (operands[2], DFmode))\n-         operands[2] = force_reg (DFmode, operands[2]);\n-    }\n \")\n \n \f\n@@ -1945,9 +1901,6 @@\n \t\t (match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n-  if (TARGET_MAVERICK\n-      && !cirrus_fp_register (operands[2], SFmode))\n-    operands[2] = force_reg (SFmode, operands[2]);\n \")\n \n (define_expand \"muldf3\"\n@@ -1956,9 +1909,6 @@\n \t\t (match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n-  if (TARGET_MAVERICK\n-      && !cirrus_fp_register (operands[2], DFmode))\n-    operands[2] = force_reg (DFmode, operands[2]);\n \")\n \f\n ;; Division insns\n@@ -3514,8 +3464,7 @@\n                    (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n   \"TARGET_32BIT\"\n   \"\n-  if (!CONST_INT_P (operands[2])\n-      && (TARGET_REALLY_IWMMXT || (TARGET_HARD_FLOAT && TARGET_MAVERICK)))\n+  if (!CONST_INT_P (operands[2]) && TARGET_REALLY_IWMMXT)\n     ; /* No special preparation statements; expand pattern as above.  */\n   else\n     {\n@@ -3589,8 +3538,7 @@\n                      (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n   \"TARGET_32BIT\"\n   \"\n-  if (!CONST_INT_P (operands[2])\n-      && (TARGET_REALLY_IWMMXT || (TARGET_HARD_FLOAT && TARGET_MAVERICK)))\n+  if (!CONST_INT_P (operands[2]) && TARGET_REALLY_IWMMXT)\n     ; /* No special preparation statements; expand pattern as above.  */\n   else\n     {\n@@ -3662,8 +3610,7 @@\n                      (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n   \"TARGET_32BIT\"\n   \"\n-  if (!CONST_INT_P (operands[2])\n-      && (TARGET_REALLY_IWMMXT || (TARGET_HARD_FLOAT && TARGET_MAVERICK)))\n+  if (!CONST_INT_P (operands[2]) && TARGET_REALLY_IWMMXT)\n     ; /* No special preparation statements; expand pattern as above.  */\n   else\n     {\n@@ -4417,23 +4364,13 @@\n \t(float:SF (match_operand:SI 1 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-      emit_insn (gen_cirrus_floatsisf2 (operands[0], operands[1]));\n-      DONE;\n-    }\n \")\n \n (define_expand \"floatsidf2\"\n   [(set (match_operand:DF           0 \"s_register_operand\" \"\")\n \t(float:DF (match_operand:SI 1 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-      emit_insn (gen_cirrus_floatsidf2 (operands[0], operands[1]));\n-      DONE;\n-    }\n \")\n \n (define_expand \"fix_trunchfsi2\"\n@@ -4465,29 +4402,13 @@\n \t(fix:SI (fix:SF (match_operand:SF 1 \"s_register_operand\"  \"\"))))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-      if (!cirrus_fp_register (operands[0], SImode))\n-        operands[0] = force_reg (SImode, operands[0]);\n-      if (!cirrus_fp_register (operands[1], SFmode))\n-        operands[1] = force_reg (SFmode, operands[0]);\n-      emit_insn (gen_cirrus_truncsfsi2 (operands[0], operands[1]));\n-      DONE;\n-    }\n \")\n \n (define_expand \"fix_truncdfsi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"s_register_operand\"  \"\"))))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n-  if (TARGET_MAVERICK)\n-    {\n-      if (!cirrus_fp_register (operands[1], DFmode))\n-        operands[1] = force_reg (DFmode, operands[0]);\n-      emit_insn (gen_cirrus_truncdfsi2 (operands[0], operands[1]));\n-      DONE;\n-    }\n \")\n \n ;; Truncation insns\n@@ -5341,7 +5262,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, r, r, m\")\n \t(match_operand:DI 1 \"di_operand\"              \"rDa,Db,Dc,mi,r\"))]\n   \"TARGET_32BIT\n-   && !(TARGET_HARD_FLOAT && (TARGET_MAVERICK || TARGET_VFP))\n+   && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && !TARGET_IWMMXT\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -5463,7 +5384,6 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=l,l,l,l,>,l, m,*r\")\n \t(match_operand:DI 1 \"general_operand\"      \"l, I,J,>,l,mi,l,*r\"))]\n   \"TARGET_THUMB1\n-   && !(TARGET_HARD_FLOAT && TARGET_MAVERICK)\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   \"*\n@@ -7664,7 +7584,7 @@\n \t(compare:CC_NCV (match_operand:DI 0 \"s_register_operand\" \"r\")\n \t\t\t(match_operand:DI 1 \"arm_di_operand\"\t   \"rDi\")))\n    (clobber (match_scratch:SI 2 \"=r\"))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK)\"\n+  \"TARGET_32BIT\"\n   \"cmp\\\\t%Q0, %Q1\\;sbcs\\\\t%2, %R0, %R1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"8\")]\n@@ -7701,38 +7621,6 @@\n    (set_attr \"length\" \"2\")]\n )\n \n-;; Cirrus SF compare instruction\n-(define_insn \"*cirrus_cmpsf\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:SF 0 \"cirrus_fp_register\" \"v\")\n-\t\t      (match_operand:SF 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcmps%?\\\\tr15, %V0, %V1\"\n-  [(set_attr \"type\"   \"mav_farith\")\n-   (set_attr \"cirrus\" \"compare\")]\n-)\n-\n-;; Cirrus DF compare instruction\n-(define_insn \"*cirrus_cmpdf\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:DF 0 \"cirrus_fp_register\" \"v\")\n-\t\t      (match_operand:DF 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcmpd%?\\\\tr15, %V0, %V1\"\n-  [(set_attr \"type\"   \"mav_farith\")\n-   (set_attr \"cirrus\" \"compare\")]\n-)\n-\n-(define_insn \"*cirrus_cmpdi\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:DI 0 \"cirrus_fp_register\" \"v\")\n-\t\t    (match_operand:DI 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcmp64%?\\\\tr15, %V0, %V1\"\n-  [(set_attr \"type\"   \"mav_farith\")\n-   (set_attr \"cirrus\" \"compare\")]\n-)\n-\n ; This insn allows redundant compares to be removed by cse, nothing should\n ; ever appear in the output file since (set (reg x) (reg x)) is a no-op that\n ; is deleted later on. The match_dup will match the mode here, so that\n@@ -11406,8 +11294,6 @@\n \n ;; Load the load/store multiple patterns\n (include \"ldmstm.md\")\n-;; Load the Maverick co-processor patterns\n-(include \"cirrus.md\")\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "bfd2bb852635e3113f7bf431f6de6b4f909991d4", "filename": "gcc/config/arm/cirrus.md", "status": "removed", "additions": 0, "deletions": 540, "changes": 540, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0364adfd168f4e0f155fafb2089a567755ccabf9/gcc%2Fconfig%2Farm%2Fcirrus.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0364adfd168f4e0f155fafb2089a567755ccabf9/gcc%2Fconfig%2Farm%2Fcirrus.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcirrus.md?ref=0364adfd168f4e0f155fafb2089a567755ccabf9", "patch": "@@ -1,540 +0,0 @@\n-;; CIRRUS EP9312 \"Maverick\" ARM floating point co-processor description.\n-;; Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n-;; Contributed by Red Hat.\n-;; Written by Aldy Hernandez (aldyh@redhat.com)\n-\n-;; This file is part of GCC.\n-\n-;; GCC is free software; you can redistribute it and/or modify\n-;; it under the terms of the GNU General Public License as published by\n-;; the Free Software Foundation; either version 3, or (at your option)\n-;; any later version.\n-\n-;; GCC is distributed in the hope that it will be useful,\n-;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-;; GNU General Public License for more details.\n-\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.\n-\n-\n-; Cirrus types for invalid insn combinations\n-; not\t\tNot a cirrus insn\n-; normal\tAny Cirrus insn not covered by the special cases below\n-; double\tcfldrd, cfldr64, cfstrd, cfstr64\n-; compare\tcfcmps, cfcmpd, cfcmp32, cfcmp64\n-; move\t\tcfmvdlr, cfmvdhr, cfmvsr, cfmv64lr, cfmv64hr\n-(define_attr \"cirrus\" \"not,normal,double,compare,move\" (const_string \"not\"))\n-\n-\f\n-(define_insn \"cirrus_adddi3\"\n-  [(set (match_operand:DI          0 \"cirrus_fp_register\" \"=v\")\n-\t(plus:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t (match_operand:DI 2 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfadd64%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_addsi3\"\n-  [(set (match_operand:SI          0 \"cirrus_fp_register\" \"=v\")\n-\t(plus:SI (match_operand:SI 1 \"cirrus_fp_register\" \"v\")\n-\t\t (match_operand:SI 2 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfadd32%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_addsf3\"\n-  [(set (match_operand:SF          0 \"cirrus_fp_register\" \"=v\")\n-\t(plus:SF (match_operand:SF 1 \"cirrus_fp_register\" \"v\")\n-\t\t (match_operand:SF 2 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfadds%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_adddf3\"\n-  [(set (match_operand:DF          0 \"cirrus_fp_register\" \"=v\")\n-\t(plus:DF (match_operand:DF 1 \"cirrus_fp_register\" \"v\")\n-\t\t (match_operand:DF 2 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfaddd%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_subdi3\"\n-  [(set (match_operand:DI           0 \"cirrus_fp_register\" \"=v\")\n-\t(minus:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t  (match_operand:DI 2 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfsub64%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_subsi3_insn\"\n-  [(set (match_operand:SI           0 \"cirrus_fp_register\" \"=v\")\n-\t(minus:SI (match_operand:SI 1 \"cirrus_fp_register\" \"v\")\n-\t\t  (match_operand:SI 2 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfsub32%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_subsf3\"\n-  [(set (match_operand:SF           0 \"cirrus_fp_register\" \"=v\")\n-\t(minus:SF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\")\n-\t\t  (match_operand:SF 2 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfsubs%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_subdf3\"\n-  [(set (match_operand:DF           0 \"cirrus_fp_register\" \"=v\")\n-\t(minus:DF (match_operand:DF 1 \"cirrus_fp_register\" \"v\")\n-\t\t  (match_operand:DF 2 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfsubd%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_mulsi3\"\n-  [(set (match_operand:SI          0 \"cirrus_fp_register\" \"=v\")\n-\t(mult:SI (match_operand:SI 2 \"cirrus_fp_register\"  \"v\")\n-\t\t (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfmul32%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"muldi3\"\n-  [(set (match_operand:DI          0 \"cirrus_fp_register\" \"=v\")\n-\t(mult:DI (match_operand:DI 2 \"cirrus_fp_register\"  \"v\")\n-\t\t (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmul64%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_dmult\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_mulsi3addsi\"\n-  [(set (match_operand:SI            0 \"cirrus_fp_register\" \"=v\")\n-\t(plus:SI\n-\t  (mult:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 2 \"cirrus_fp_register\"  \"v\"))\n-\t  (match_operand:SI          3 \"cirrus_fp_register\"  \"0\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfmac32%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-;; Cirrus SI multiply-subtract\n-(define_insn \"*cirrus_mulsi3subsi\"\n-  [(set (match_operand:SI            0 \"cirrus_fp_register\" \"=v\")\n-\t(minus:SI\n-\t  (match_operand:SI          1 \"cirrus_fp_register\"  \"0\")\n-\t  (mult:SI (match_operand:SI 2 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 3 \"cirrus_fp_register\"  \"v\"))))]\n-  \"0 && TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmsc32%?\\\\t%V0, %V2, %V3\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_mulsf3\"\n-  [(set (match_operand:SF          0 \"cirrus_fp_register\" \"=v\")\n-\t(mult:SF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\")\n-\t\t (match_operand:SF 2 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmuls%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_farith\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_muldf3\"\n-  [(set (match_operand:DF          0 \"cirrus_fp_register\" \"=v\")\n-\t(mult:DF (match_operand:DF 1 \"cirrus_fp_register\"  \"v\")\n-\t\t (match_operand:DF 2 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmuld%?\\\\t%V0, %V1, %V2\"\n-  [(set_attr \"type\" \"mav_dmult\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_ashl_const\"\n-  [(set (match_operand:SI            0 \"cirrus_fp_register\" \"=v\")\n-\t(ashift:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 2 \"cirrus_shift_const\"  \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfsh32%?\\\\t%V0, %V1, #%s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_ashiftrt_const\"\n-  [(set (match_operand:SI\t       0 \"cirrus_fp_register\" \"=v\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t     (match_operand:SI 2 \"cirrus_shift_const\"  \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfsh32%?\\\\t%V0, %V1, #-%s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_ashlsi3\"\n-  [(set (match_operand:SI            0 \"cirrus_fp_register\" \"=v\")\n-\t(ashift:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 2 \"register_operand\"    \"r\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfrshl32%?\\\\t%V1, %V0, %s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"ashldi3_cirrus\"\n-  [(set (match_operand:DI            0 \"cirrus_fp_register\" \"=v\")\n-\t(ashift:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 2 \"register_operand\"    \"r\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfrshl64%?\\\\t%V1, %V0, %s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_ashldi_const\"\n-  [(set (match_operand:DI            0 \"cirrus_fp_register\" \"=v\")\n-\t(ashift:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t   (match_operand:SI 2 \"cirrus_shift_const\"  \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfsh64%?\\\\t%V0, %V1, #%s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_ashiftrtdi_const\"\n-  [(set (match_operand:DI            0 \"cirrus_fp_register\" \"=v\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")\n-\t\t     (match_operand:SI 2 \"cirrus_shift_const\"  \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfsh64%?\\\\t%V0, %V1, #-%s2\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_absdi2\"\n-  [(set (match_operand:DI         0 \"cirrus_fp_register\" \"=v\")\n-\t(abs:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfabs64%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-;; This doesn't really clobber ``cc''.  Fixme: aldyh.  \n-(define_insn \"*cirrus_negdi2\"\n-  [(set (match_operand:DI         0 \"cirrus_fp_register\" \"=v\")\n-\t(neg:DI (match_operand:DI 1 \"cirrus_fp_register\"  \"v\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfneg64%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_negsi2\"\n-  [(set (match_operand:SI         0 \"cirrus_fp_register\" \"=v\")\n-\t(neg:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfneg32%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_negsf2\"\n-  [(set (match_operand:SF         0 \"cirrus_fp_register\" \"=v\")\n-\t(neg:SF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfnegs%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_negdf2\"\n-  [(set (match_operand:DF         0 \"cirrus_fp_register\" \"=v\")\n-\t(neg:DF (match_operand:DF 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfnegd%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-;; This doesn't really clobber the condition codes either.  \n-(define_insn \"*cirrus_abssi2\"\n-  [(set (match_operand:SI         0 \"cirrus_fp_register\" \"=v\")\n-        (abs:SI (match_operand:SI 1 \"cirrus_fp_register\"  \"v\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK && 0\"\n-  \"cfabs32%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_abssf2\"\n-  [(set (match_operand:SF         0 \"cirrus_fp_register\" \"=v\")\n-        (abs:SF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfabss%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_absdf2\"\n-  [(set (match_operand:DF         0 \"cirrus_fp_register\" \"=v\")\n-        (abs:DF (match_operand:DF 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfabsd%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-;; Convert Cirrus-SI to Cirrus-SF\n-(define_insn \"cirrus_floatsisf2\"\n-  [(set (match_operand:SF           0 \"cirrus_fp_register\" \"=v\")\n- \t(float:SF (match_operand:SI 1 \"s_register_operand\"  \"r\")))\n-   (clobber (match_scratch:DF 2 \"=v\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmv64lr%?\\\\t%Z2, %1\\;cfcvt32s%?\\\\t%V0, %Y2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cirrus\" \"move\")]\n-)\n-\n-(define_insn \"cirrus_floatsidf2\"\n-  [(set (match_operand:DF           0 \"cirrus_fp_register\" \"=v\")\n-\t(float:DF (match_operand:SI 1 \"s_register_operand\" \"r\")))\n-   (clobber (match_scratch:DF 2 \"=v\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfmv64lr%?\\\\t%Z2, %1\\;cfcvt32d%?\\\\t%V0, %Y2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cirrus\" \"move\")]\n-)\n-\n-(define_insn \"floatdisf2\"\n-  [(set (match_operand:SF           0 \"cirrus_fp_register\" \"=v\")\n-\t(float:SF (match_operand:DI 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcvt64s%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")])\n-\n-(define_insn \"floatdidf2\"\n-  [(set (match_operand:DF 0 \"cirrus_fp_register\" \"=v\")\n-\t(float:DF (match_operand:DI 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcvt64d%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")])\n-\n-(define_insn \"cirrus_truncsfsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\"))))\n-   (clobber (match_scratch:DF     2                      \"=v\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cftruncs32%?\\\\t%Y2, %V1\\;cfmvr64l%?\\\\t%0, %Z2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"cirrus_truncdfsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"cirrus_fp_register\"  \"v\"))))\n-   (clobber (match_scratch:DF     2                      \"=v\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cftruncd32%?\\\\t%Y2, %V1\\;cfmvr64l%?\\\\t%0, %Z2\"\n-  [(set_attr \"length\" \"8\")]\n-)\n-\n-(define_insn \"*cirrus_truncdfsf2\"\n-  [(set (match_operand:SF  0 \"cirrus_fp_register\" \"=v\")\n-        (float_truncate:SF\n-         (match_operand:DF 1 \"cirrus_fp_register\" \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcvtds%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_extendsfdf2\"\n-  [(set (match_operand:DF                  0 \"cirrus_fp_register\" \"=v\")\n-        (float_extend:DF (match_operand:SF 1 \"cirrus_fp_register\"  \"v\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"cfcvtsd%?\\\\t%V0, %V1\"\n-  [(set_attr \"cirrus\" \"normal\")]\n-)\n-\n-(define_insn \"*cirrus_arm_movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,o<>,v,r,v,m,v\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,v,mi,v,v\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"#\\\";\n-    case 1:\n-    case 2:\n-      return output_move_double (operands, true, NULL);\n-\n-    case 3: return \\\"cfmv64lr%?\\\\t%V0, %Q1\\;cfmv64hr%?\\\\t%V0, %R1\\\";\n-    case 4: return \\\"cfmvr64l%?\\\\t%Q0, %V1\\;cfmvr64h%?\\\\t%R0, %V1\\\";\n-\n-    case 5: return \\\"cfldr64%?\\\\t%V0, %1\\\";\n-    case 6: return \\\"cfstr64%?\\\\t%V1, %0\\\";\n-\n-    /* Shifting by 0 will just copy %1 into %0.  */\n-    case 7: return \\\"cfsh64%?\\\\t%V0, %V1, #0\\\";\n-\n-    default: gcc_unreachable ();\n-    }\n-  }\"\n-  [(set_attr \"length\"         \"  8,   8,     8,   8,     8,     4,     4,     4\")\n-   (set_attr \"type\"           \"  *,load2,store2,   *,     *,  load2,store2,     *\")\n-   (set_attr \"pool_range\"     \"  *,1020,     *,   *,     *,  1020,     *,     *\")\n-   (set_attr \"neg_pool_range\" \"  *,1012,     *,   *,     *,  1008,     *,     *\")\n-   (set_attr \"cirrus\"         \"not, not,   not,move,normal,double,double,normal\")]\n-)\n-\n-;; Cirrus SI values have been outlawed.  Look in arm.h for the comment\n-;; on HARD_REGNO_MODE_OK.\n-\n-(define_insn \"*cirrus_movsf_hard_insn\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=v,v,v,r,m,r,r,m\")\n-        (match_operand:SF 1 \"general_operand\"      \"v,mE,r,v,v,r,mE,r\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_MAVERICK\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   cfcpys%?\\\\t%V0, %V1\n-   cfldrs%?\\\\t%V0, %1\n-   cfmvsr%?\\\\t%V0, %1\n-   cfmvrs%?\\\\t%0, %V1\n-   cfstrs%?\\\\t%V1, %0\n-   mov%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"length\"         \"     *,     *,   *,     *,     *,  4,   4,     4\")\n-   (set_attr \"type\"           \"     *,  load1,   *,     *,store1,  *,load1,store1\")\n-   (set_attr \"pool_range\"     \"     *,   1020,   *,     *,     *,  *,4096,     *\")\n-   (set_attr \"neg_pool_range\" \"     *,   1008,   *,     *,     *,  *,4084,     *\")\n-   (set_attr \"cirrus\"         \"normal,normal,move,normal,normal,not, not,   not\")]\n-)\n-\n-(define_insn \"*cirrus_movdf_hard_insn\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,Q,r,m,r,v,v,v,r,m\")\n-\t(match_operand:DF 1 \"general_operand\"       \"Q,r,r,r,mF,v,mF,r,v,v\"))]\n-  \"TARGET_ARM\n-   && TARGET_HARD_FLOAT && TARGET_MAVERICK\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], DFmode))\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    case 0: return \\\"ldm%?ia\\\\t%m1, %M0\\\\t%@ double\\\";\n-    case 1: return \\\"stm%?ia\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: return \\\"#\\\";\n-    case 3: case 4: return output_move_double (operands, true, NULL);\n-    case 5: return \\\"cfcpyd%?\\\\t%V0, %V1\\\";\n-    case 6: return \\\"cfldrd%?\\\\t%V0, %1\\\";\n-    case 7: return \\\"cfmvdlr\\\\t%V0, %Q1\\;cfmvdhr%?\\\\t%V0, %R1\\\";\n-    case 8: return \\\"cfmvrdl%?\\\\t%Q0, %V1\\;cfmvrdh%?\\\\t%R0, %V1\\\";\n-    case 9: return \\\"cfstrd%?\\\\t%V1, %0\\\";\n-    default: gcc_unreachable ();\n-    }\n-  }\"\n-  [(set_attr \"type\"           \"load1,store2,  *,store2,load1,     *,  load1,   *,     *,store2\")\n-   (set_attr \"length\"         \"   4,     4,  8,     8,   8,     4,     4,   8,     8,     4\")\n-   (set_attr \"pool_range\"     \"   *,     *,  *,     *, 252,     *,  1020,   *,     *,     *\")\n-   (set_attr \"neg_pool_range\" \"   *,     *,  *,     *, 244,     *,  1008,   *,     *,     *\")\n-   (set_attr \"cirrus\"         \" not,   not,not,   not, not,normal,double,move,normal,double\")]\n-)\n-\n-(define_insn \"*cirrus_thumb2_movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,o<>,v,r,v,m,v\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r,r,v,mi,v,v\"))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_MAVERICK\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-    case 1:\n-    case 2:\n-      return (output_move_double (operands, true, NULL));\n-\n-    case 3: return \\\"cfmv64lr%?\\\\t%V0, %Q1\\;cfmv64hr%?\\\\t%V0, %R1\\\";\n-    case 4: return \\\"cfmvr64l%?\\\\t%Q0, %V1\\;cfmvr64h%?\\\\t%R0, %V1\\\";\n-\n-    case 5: return \\\"cfldr64%?\\\\t%V0, %1\\\";\n-    case 6: return \\\"cfstr64%?\\\\t%V1, %0\\\";\n-\n-    /* Shifting by 0 will just copy %1 into %0.  */\n-    case 7: return \\\"cfsh64%?\\\\t%V0, %V1, #0\\\";\n-\n-    default: abort ();\n-    }\n-  }\"\n-  [(set_attr \"length\"         \"  8,   8,     8,   8,     8,     4,     4,     4\")\n-   (set_attr \"type\"           \"  *,load2,store2,   *,     *,  load2,store2,     *\")\n-   (set_attr \"pool_range\"     \"  *,4096,     *,   *,     *,  1020,     *,     *\")\n-   (set_attr \"neg_pool_range\" \"  *,   0,     *,   *,     *,  1008,     *,     *\")\n-   (set_attr \"cirrus\"         \"not, not,   not,move,normal,double,double,normal\")]\n-)\n-\n-(define_insn \"*thumb2_cirrus_movsf_hard_insn\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=v,v,v,r,m,r,r,m\")\n-        (match_operand:SF 1 \"general_operand\"      \"v,mE,r,v,v,r,mE,r\"))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_MAVERICK\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   cfcpys%?\\\\t%V0, %V1\n-   cfldrs%?\\\\t%V0, %1\n-   cfmvsr%?\\\\t%V0, %1\n-   cfmvrs%?\\\\t%0, %V1\n-   cfstrs%?\\\\t%V1, %0\n-   mov%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"length\"         \"     *,     *,   *,     *,     *,  4,   4,     4\")\n-   (set_attr \"type\"           \"     *,  load1,   *,     *,store1,  *,load1,store1\")\n-   (set_attr \"pool_range\"     \"     *,   1020,   *,     *,     *,  *,4096,     *\")\n-   (set_attr \"neg_pool_range\" \"     *,   1008,   *,     *,     *,  *,   0,     *\")\n-   (set_attr \"cirrus\"         \"normal,normal,move,normal,normal,not, not,   not\")]\n-)\n-\n-(define_insn \"*thumb2_cirrus_movdf_hard_insn\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,Q,r,m,r,v,v,v,r,m\")\n-\t(match_operand:DF 1 \"general_operand\"       \"Q,r,r,r,mF,v,mF,r,v,v\"))]\n-  \"TARGET_THUMB2\n-   && TARGET_HARD_FLOAT && TARGET_MAVERICK\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], DFmode))\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    case 0: return \\\"ldm%?ia\\\\t%m1, %M0\\\\t%@ double\\\";\n-    case 1: return \\\"stm%?ia\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: case 3: case 4: return output_move_double (operands, true, NULL);\n-    case 5: return \\\"cfcpyd%?\\\\t%V0, %V1\\\";\n-    case 6: return \\\"cfldrd%?\\\\t%V0, %1\\\";\n-    case 7: return \\\"cfmvdlr\\\\t%V0, %Q1\\;cfmvdhr%?\\\\t%V0, %R1\\\";\n-    case 8: return \\\"cfmvrdl%?\\\\t%Q0, %V1\\;cfmvrdh%?\\\\t%R0, %V1\\\";\n-    case 9: return \\\"cfstrd%?\\\\t%V1, %0\\\";\n-    default: abort ();\n-    }\n-  }\"\n-  [(set_attr \"type\"           \"load1,store2,  *,store2,load1,     *,  load1,   *,     *,store2\")\n-   (set_attr \"length\"         \"   4,     4,  8,     8,   8,     4,     4,   8,     8,     4\")\n-   (set_attr \"pool_range\"     \"   *,     *,  *,     *,4092,     *,  1020,   *,     *,     *\")\n-   (set_attr \"neg_pool_range\" \"   *,     *,  *,     *,   0,     *,  1008,   *,     *,     *\")\n-   (set_attr \"cirrus\"         \" not,   not,not,   not, not,normal,double,move,normal,double\")]\n-)\n-"}, {"sha": "ecc25039fbea3f0f35f869d3ff060ccc46697960", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479f75468270993608b1b336baa6e05c9bae7907/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=479f75468270993608b1b336baa6e05c9bae7907", "patch": "@@ -29,7 +29,6 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n \t\t$(srcdir)/config/arm/arm-fixed.md \\\n \t\t$(srcdir)/config/arm/arm-generic.md \\\n \t\t$(srcdir)/config/arm/arm-tune.md \\\n-\t\t$(srcdir)/config/arm/cirrus.md \\\n \t\t$(srcdir)/config/arm/constraints.md \\\n \t\t$(srcdir)/config/arm/cortex-a15.md \\\n \t\t$(srcdir)/config/arm/cortex-a5.md \\"}]}