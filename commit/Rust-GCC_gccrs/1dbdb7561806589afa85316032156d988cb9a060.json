{"sha": "1dbdb7561806589afa85316032156d988cb9a060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiZGI3NTYxODA2NTg5YWZhODUzMTYwMzIxNTZkOTg4Y2I5YTA2MA==", "commit": {"author": {"name": "Patrick Palka", "email": "patrick@parcs.ath.cx", "date": "2014-04-16T20:17:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-04-16T20:17:46Z"}, "message": "re PR c++/60765 (Function attributes ignored for pointer-to-member-function parameters)\n\n2014-04-16  Patrick Palka  <patrick@parcs.ath.cx>\n\n\tPR c++/60765\n\t* decl2.c (cplus_decl_attributes): Handle\n\tpointer-to-member-function declarations.\n\n2014-04-16  Patrick Palka  <patrick@parcs.ath.cx>\n\n\tPR c++/60764\n\t* call.c (build_user_type_coversion): Use build_dummy_object\n\tto create the placeholder object for a constructor method call.\n\t(build_special_member_call): Likewise.\n\t(build_over_call): Check for the placeholder object with\n\tis_dummy_object.\n\t(build_new_method_call_1): Likewise.  Don't attempt to resolve\n\ta dummy object for a constructor method call.\n\nFrom-SVN: r209447", "tree": {"sha": "e7822e302c3d16d9c57a14e379abd21bb382e21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7822e302c3d16d9c57a14e379abd21bb382e21a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dbdb7561806589afa85316032156d988cb9a060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbdb7561806589afa85316032156d988cb9a060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbdb7561806589afa85316032156d988cb9a060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbdb7561806589afa85316032156d988cb9a060/comments", "author": null, "committer": null, "parents": [{"sha": "10353a7987b38e16a09012bf1ba1b9ae489f4351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10353a7987b38e16a09012bf1ba1b9ae489f4351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10353a7987b38e16a09012bf1ba1b9ae489f4351"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "28c6d9697678351258a5ea66af888dadc20f7e8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -1,3 +1,20 @@\n+2014-04-16  Patrick Palka  <patrick@parcs.ath.cx>\n+\n+\tPR c++/60765\n+\t* decl2.c (cplus_decl_attributes): Handle\n+\tpointer-to-member-function declarations.\n+\n+2014-04-16  Patrick Palka  <patrick@parcs.ath.cx>\n+\n+\tPR c++/60764\n+\t* call.c (build_user_type_coversion): Use build_dummy_object\n+\tto create the placeholder object for a constructor method call.\n+\t(build_special_member_call): Likewise.\n+\t(build_over_call): Check for the placeholder object with\n+\tis_dummy_object.\n+\t(build_new_method_call_1): Likewise.  Don't attempt to resolve\n+\ta dummy object for a constructor method call.\n+\n 2014-04-16  Paul Pluzhnikov  <ppluzhnikov@google.com>\n \n \tPR c++/59295"}, {"sha": "7dbe9359b4432f649fa85cc582498dd59b8e3b2a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -3524,8 +3524,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n     {\n       int ctorflags = flags;\n \n-      first_arg = build_int_cst (build_pointer_type (totype), 0);\n-      first_arg = build_fold_indirect_ref (first_arg);\n+      first_arg = build_dummy_object (totype);\n \n       /* We should never try to call the abstract or base constructor\n \t from here.  */\n@@ -7101,7 +7100,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t ctor is trivial, do a bitwise copy with a simple TARGET_EXPR for a\n \t temp or an INIT_EXPR otherwise.  */\n       fa = argarray[0];\n-      if (integer_zerop (fa))\n+      if (is_dummy_object (fa))\n \t{\n \t  if (TREE_CODE (arg) == TARGET_EXPR)\n \t    return arg;\n@@ -7443,10 +7442,7 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n \n   /* Handle the special case where INSTANCE is NULL_TREE.  */\n   if (name == complete_ctor_identifier && !instance)\n-    {\n-      instance = build_int_cst (build_pointer_type (class_type), 0);\n-      instance = build1 (INDIRECT_REF, class_type, instance);\n-    }\n+    instance = build_dummy_object (class_type);\n   else\n     {\n       if (name == complete_dtor_identifier\n@@ -7756,8 +7752,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \n       if (init)\n \t{\n-\t  if (INDIRECT_REF_P (instance)\n-\t      && integer_zerop (TREE_OPERAND (instance, 0)))\n+\t  if (is_dummy_object (instance))\n \t    return get_target_expr_sfinae (init, complain);\n \t  init = build2 (INIT_EXPR, TREE_TYPE (instance), instance, init);\n \t  TREE_SIDE_EFFECTS (init) = true;\n@@ -7856,6 +7851,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t    }\n \n \t  if (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE\n+\t      && !DECL_CONSTRUCTOR_P (fn)\n \t      && is_dummy_object (instance))\n \t    {\n \t      instance = maybe_resolve_dummy (instance);"}, {"sha": "8a7a8369f19a48b268347c30101907db2e87722d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -1427,7 +1427,15 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n   if (TREE_CODE (*decl) == TEMPLATE_DECL)\n     decl = &DECL_TEMPLATE_RESULT (*decl);\n \n-  decl_attributes (decl, attributes, flags);\n+  if (TREE_TYPE (*decl) && TYPE_PTRMEMFUNC_P (TREE_TYPE (*decl)))\n+    {\n+      attributes\n+\t= decl_attributes (decl, attributes, flags | ATTR_FLAG_FUNCTION_NEXT);\n+      decl_attributes (&TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (*decl)),\n+\t\t       attributes, flags);\n+    }\n+  else\n+    decl_attributes (decl, attributes, flags);\n \n   if (TREE_CODE (*decl) == TYPE_DECL)\n     SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (*decl), TREE_TYPE (*decl));"}, {"sha": "131af368a21dce18d0192ed3bc6822948d0a10c1", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-36-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-36-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-36-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-36-1.C?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -6,6 +6,6 @@ typedef int (*F [[gnu::warn_unused_result]]) (int);\n \n typedef int (*F2 [[gnu::warn_unused_result]]) (int);\n \n-typedef int (S::*F3 [[gnu::warn_unused_result]]) (int); // { dg-warning \"only applies to function types\" }\n+typedef int (S::*F3 [[gnu::warn_unused_result]]) (int);\n \n typedef int [[gnu::warn_unused_result]] (*F5) (int); // { dg-warning \"ignored\" }"}, {"sha": "99c6154f1a55b785fb74164d1455ff562786b314", "filename": "gcc/testsuite/g++.dg/ext/attrib49.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/60765\n+// { dg-options \"-Wall -Wunused-parameter\" }\n+\n+struct foo\n+{\n+} x;\n+\n+void (foo::*g) (int *) __attribute__ ((nonnull (2)));\n+\n+void\n+fun1 (void (foo::*f) (int *) __attribute__ ((nonnull (2))))\n+{\n+    (x.*f) ((int *) 0); // { dg-warning \"null argument\" }\n+}\n+\n+void\n+fun2 (void (foo::*f) () __attribute__ ((nonnull, unused))) // { dg-bogus \"unused\" }\n+{\n+    (x.*g) ((int *) 0); // { dg-warning \"null argument\" }\n+}"}, {"sha": "10515a47405d634c06aad4bf4cf0b1fccd3ab081", "filename": "gcc/testsuite/g++.dg/warn/nonnull2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbdb7561806589afa85316032156d988cb9a060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull2.C?ref=1dbdb7561806589afa85316032156d988cb9a060", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/60764\n+// { dg-options \"-Wall\" }\n+\n+struct foo\n+{\n+  foo () __attribute__ ((nonnull (1)));\n+};\n+\n+const foo &x = foo (); // { dg-bogus \"null argument\" }\n+foo y = foo (); // { dg-bogus \"null argument\" }"}]}