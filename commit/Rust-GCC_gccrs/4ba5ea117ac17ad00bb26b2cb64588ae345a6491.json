{"sha": "4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJhNWVhMTE3YWMxN2FkMDBiYjI2YjJjYjY0NTg4YWUzNDVhNjQ5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-11T11:21:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-11T11:21:18Z"}, "message": "re PR tree-optimization/56878 (Issue with candidate choice in vect_gen_niters_for_prolog_loop.)\n\n2013-04-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56878\n\t* tree-flow.h (outermost_invariant_loop_for_expr): Declare.\n\t* tree-ssa-loop-ivopts.c (outermost_invariant_loop_for_expr):\n\tNew function.\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n\tPrefer to align the DR with the most invariant base address.\n\nFrom-SVN: r197769", "tree": {"sha": "7131ce4ad93149ef59b657a80ec5ada7b65d7fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7131ce4ad93149ef59b657a80ec5ada7b65d7fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "983a3d80db525e9d7fbba6f222d3030bfc0a68ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983a3d80db525e9d7fbba6f222d3030bfc0a68ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/983a3d80db525e9d7fbba6f222d3030bfc0a68ac"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "de5bee5d92e1e7f39ed804d948c1c3826a77ce83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "patch": "@@ -1,3 +1,12 @@\n+2013-04-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56878\n+\t* tree-flow.h (outermost_invariant_loop_for_expr): Declare.\n+\t* tree-ssa-loop-ivopts.c (outermost_invariant_loop_for_expr):\n+\tNew function.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tPrefer to align the DR with the most invariant base address.\n+\n 2013-04-11  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* opts.c (common_handle_option): Fix formatting and add FALLTHRU"}, {"sha": "227fe56d00e6a1ce0b30eef714e2500d27b7d699", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "patch": "@@ -749,6 +749,7 @@ extern void tree_check_data_deps (void);\n /* In tree-ssa-loop-ivopts.c  */\n bool expr_invariant_in_loop_p (struct loop *, tree);\n bool stmt_invariant_in_loop_p (struct loop *, gimple);\n+struct loop *outermost_invariant_loop_for_expr (struct loop *, tree);\n bool multiplier_allowed_in_address_p (HOST_WIDE_INT, enum machine_mode,\n \t\t\t\t      addr_space_t);\n bool may_be_nonaddressable_p (tree expr);"}, {"sha": "0099275d49f874953cbce9ba4f6b0b1ef225d868", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "patch": "@@ -1367,6 +1367,54 @@ find_interesting_uses_cond (struct ivopts_data *data, gimple stmt)\n   record_use (data, NULL, civ, stmt, USE_COMPARE);\n }\n \n+/* Returns the outermost loop EXPR is obviously invariant in\n+   relative to the loop LOOP, i.e. if all its operands are defined\n+   outside of the returned loop.  Returns NULL if EXPR is not\n+   even obviously invariant in LOOP.  */\n+\n+struct loop *\n+outermost_invariant_loop_for_expr (struct loop *loop, tree expr)\n+{\n+  basic_block def_bb;\n+  unsigned i, len;\n+\n+  if (is_gimple_min_invariant (expr))\n+    return current_loops->tree_root;\n+\n+  if (TREE_CODE (expr) == SSA_NAME)\n+    {\n+      def_bb = gimple_bb (SSA_NAME_DEF_STMT (expr));\n+      if (def_bb)\n+\t{\n+\t  if (flow_bb_inside_loop_p (loop, def_bb))\n+\t    return NULL;\n+\t  return superloop_at_depth (loop,\n+\t\t\t\t     loop_depth (def_bb->loop_father) + 1);\n+\t}\n+\n+      return current_loops->tree_root;\n+    }\n+\n+  if (!EXPR_P (expr))\n+    return NULL;\n+\n+  unsigned maxdepth = 0;\n+  len = TREE_OPERAND_LENGTH (expr);\n+  for (i = 0; i < len; i++)\n+    {\n+      struct loop *ivloop;\n+      if (!TREE_OPERAND (expr, i))\n+\tcontinue;\n+\n+      ivloop = outermost_invariant_loop_for_expr (loop, TREE_OPERAND (expr, i));\n+      if (!ivloop)\n+\treturn NULL;\n+      maxdepth = MAX (maxdepth, loop_depth (ivloop));\n+    }\n+\n+  return superloop_at_depth (loop, maxdepth);\n+}\n+\n /* Returns true if expression EXPR is obviously invariant in LOOP,\n    i.e. if all its operands are defined outside of the LOOP.  LOOP\n    should not be the function body.  */"}, {"sha": "64f2a8b6d9e29dfaf67e7b9e1f0c1960b710e5b5", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba5ea117ac17ad00bb26b2cb64588ae345a6491/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "patch": "@@ -1456,20 +1456,35 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n             }\n           else\n             {\n-              /* If we don't know all the misalignment values, we prefer\n-                 peeling for data-ref that has maximum number of data-refs\n+              /* If we don't know any misalignment values, we prefer\n+                 peeling for data-ref that has the maximum number of data-refs\n                  with the same alignment, unless the target prefers to align\n                  stores over load.  */\n               if (all_misalignments_unknown)\n                 {\n-                  if (same_align_drs_max \n-\t\t\t< STMT_VINFO_SAME_ALIGN_REFS (stmt_info).length ()\n-                      || !dr0)\n+\t\t  unsigned same_align_drs\n+\t\t    = STMT_VINFO_SAME_ALIGN_REFS (stmt_info).length ();\n+                  if (!dr0\n+\t\t      || same_align_drs_max < same_align_drs)\n                     {\n-                      same_align_drs_max\n-\t\t\t  = STMT_VINFO_SAME_ALIGN_REFS (stmt_info).length ();\n+                      same_align_drs_max = same_align_drs;\n                       dr0 = dr;\n                     }\n+\t\t  /* For data-refs with the same number of related\n+\t\t     accesses prefer the one where the misalign\n+\t\t     computation will be invariant in the outermost loop.  */\n+\t\t  else if (same_align_drs_max == same_align_drs)\n+\t\t    {\n+\t\t      struct loop *ivloop0, *ivloop;\n+\t\t      ivloop0 = outermost_invariant_loop_for_expr\n+\t\t\t  (loop, DR_BASE_ADDRESS (dr0));\n+\t\t      ivloop = outermost_invariant_loop_for_expr\n+\t\t\t  (loop, DR_BASE_ADDRESS (dr));\n+\t\t      if ((ivloop && !ivloop0)\n+\t\t\t  || (ivloop && ivloop0\n+\t\t\t      && flow_loop_nested_p (ivloop, ivloop0)))\n+\t\t\tdr0 = dr;\n+\t\t    }\n \n                   if (!first_store && DR_IS_WRITE (dr))\n                     first_store = dr;\n@@ -1478,8 +1493,6 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n               /* If there are both known and unknown misaligned accesses in the\n                  loop, we choose peeling amount according to the known\n                  accesses.  */\n-\n-\n               if (!supportable_dr_alignment)\n                 {\n                   dr0 = dr;"}]}