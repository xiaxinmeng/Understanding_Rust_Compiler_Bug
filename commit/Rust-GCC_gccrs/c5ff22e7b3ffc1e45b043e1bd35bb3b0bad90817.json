{"sha": "c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmZjIyZTdiM2ZmYzFlNDViMDQzZTFiZDM1YmIzYjBiYWQ5MDgxNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T13:52:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T13:52:35Z"}, "message": "[multiple changes]\n\n2009-11-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* put_scos.adb (Put_SCOs): Do not generate a SCO unit header for a unit\n\tthat has no SCOs.\n\t* scos.ads: Minor reformatting\n\n2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb: Second unanalyzed parameter of Annotate is optional.\n\n2009-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* init.c (__gnat_adjust_context_for_raise, Linux version): Add guard\n\tfor null PC saved in the context.\n\n2009-11-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calend.adb (Day_Of_Week): Rewritten. The routine determines the\n\tnumber of days from the Ada Epoch to the input date while ensuring that\n\tboth dates are in the same time zone.\n\nFrom-SVN: r154801", "tree": {"sha": "b7abf5afcd58c6232f9fa433485530fc11d00ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7abf5afcd58c6232f9fa433485530fc11d00ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/comments", "author": null, "committer": null, "parents": [{"sha": "226e989e7e81f44758f112c719f16d93ccf8be19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226e989e7e81f44758f112c719f16d93ccf8be19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226e989e7e81f44758f112c719f16d93ccf8be19"}], "stats": {"total": 135, "additions": 69, "deletions": 66}, "files": [{"sha": "b30003b7821af6d2107c8200ca2419e8be7655ce", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -1,3 +1,24 @@\n+2009-11-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* put_scos.adb (Put_SCOs): Do not generate a SCO unit header for a unit\n+\tthat has no SCOs.\n+\t* scos.ads: Minor reformatting\n+\n+2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb: Second unanalyzed parameter of Annotate is optional.\n+\n+2009-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c (__gnat_adjust_context_for_raise, Linux version): Add guard\n+\tfor null PC saved in the context.\n+\n+2009-11-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calend.adb (Day_Of_Week): Rewritten. The routine determines the\n+\tnumber of days from the Ada Epoch to the input date while ensuring that\n+\tboth dates are in the same time zone.\n+\n 2009-11-30  Emmanuel Briot  <briot@adacore.com>\n \n \t* clean.adb (\"-eL\"): Also set Follow_Links_For_Dirs, to match what is"}, {"sha": "dd500f43691b99f30d0f6146918c7903502b23dd", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -1029,63 +1029,40 @@ package body Ada.Calendar is\n       -----------------\n \n       function Day_Of_Week (Date : Time) return Integer is\n-         Y  : Year_Number;\n-         Mo : Month_Number;\n-         D  : Day_Number;\n-         Ds : Day_Duration;\n-         H  : Integer;\n-         Mi : Integer;\n-         Se : Integer;\n-         Su : Duration;\n-         Le : Boolean;\n-\n-         pragma Unreferenced (Ds, H, Mi, Se, Su, Le);\n+         Date_N    : constant Time_Rep := Time_Rep (Date);\n+         Time_Zone : constant Long_Integer :=\n+                       Time_Zones_Operations.UTC_Time_Offset (Date);\n \n+         Ada_Low_N : Time_Rep;\n          Day_Count : Long_Integer;\n-         Res_Dur   : Time_Dur;\n-         Res_N     : Time_Rep;\n+         Day_Dur   : Time_Dur;\n+         High_N    : Time_Rep;\n+         Low_N     : Time_Rep;\n \n       begin\n-         Formatting_Operations.Split\n-           (Date      => Date,\n-            Year      => Y,\n-            Month     => Mo,\n-            Day       => D,\n-            Day_Secs  => Ds,\n-            Hour      => H,\n-            Minute    => Mi,\n-            Second    => Se,\n-            Sub_Sec   => Su,\n-            Leap_Sec  => Le,\n-            Is_Ada_05 => True,\n-            Time_Zone => 0);\n-\n-         --  Build a time value in the middle of the same day\n-\n-         Res_N :=\n-           Time_Rep\n-             (Formatting_Operations.Time_Of\n-               (Year         => Y,\n-                Month        => Mo,\n-                Day          => D,\n-                Day_Secs     => 0.0,\n-                Hour         => 12,\n-                Minute       => 0,\n-                Second       => 0,\n-                Sub_Sec      => 0.0,\n-                Leap_Sec     => False,\n-                Use_Day_Secs => False,\n-                Is_Ada_05    => True,\n-                Time_Zone    => 0));\n+         --  As declared, the Ada Epoch is set in UTC. For this calculation to\n+         --  work properly, both the Epoch and the input date must be in the\n+         --  same time zone. The following places the Epoch in the input date's\n+         --  time zone.\n+\n+         Ada_Low_N := Ada_Low - Time_Rep (Time_Zone) * Nano;\n+\n+         if Date_N > Ada_Low_N then\n+            High_N := Date_N;\n+            Low_N  := Ada_Low_N;\n+         else\n+            High_N := Ada_Low_N;\n+            Low_N  := Date_N;\n+         end if;\n \n          --  Determine the elapsed seconds since the start of Ada time\n \n-         Res_Dur := Time_Dur (Res_N / Nano - Ada_Low / Nano);\n+         Day_Dur := Time_Dur (High_N / Nano - Low_N / Nano);\n \n-         --  Count the number of days since the start of Ada time. 1901-1-1\n+         --  Count the number of days since the start of Ada time. 1901-01-01\n          --  GMT was a Tuesday.\n \n-         Day_Count := Long_Integer (Res_Dur / Secs_In_Day) + 1;\n+         Day_Count := Long_Integer (Day_Dur / Secs_In_Day) + 1;\n \n          return Integer (Day_Count mod 7);\n       end Day_Of_Week;"}, {"sha": "5e5d1c60b448afcf6679389ab8913a9c664a261c", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -601,14 +601,14 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n      time this happens.  */\n \n #if defined (i386)\n-  unsigned long pattern = *(unsigned long *)mcontext->gregs[REG_EIP];\n+  unsigned long *pc = (unsigned long *)mcontext->gregs[REG_EIP];\n   /* The pattern is \"orl $0x0,(%esp)\" for a probe in 32-bit mode.  */\n-  if (signo == SIGSEGV && pattern == 0x00240c83)\n+  if (signo == SIGSEGV && pc && *pc == 0x00240c83)\n     mcontext->gregs[REG_ESP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__x86_64__)\n-  unsigned long pattern = *(unsigned long *)mcontext->gregs[REG_RIP];\n+  unsigned long *pc = (unsigned long *)mcontext->gregs[REG_RIP];\n   /* The pattern is \"orq $0x0,(%rsp)\" for a probe in 64-bit mode.  */\n-  if (signo == SIGSEGV && (pattern & 0xffffffffff) == 0x00240c8348)\n+  if (signo == SIGSEGV && pc && (*pc & 0xffffffffff) == 0x00240c8348)\n     mcontext->gregs[REG_RSP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__ia64__)\n   /* ??? The IA-64 unwinder doesn't compensate for signals.  */"}, {"sha": "bca3f698815182c109aa3fc61bc9431cb87e5a23", "filename": "gcc/ada/put_scos.adb", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -37,21 +37,26 @@ begin\n          Stop  : Nat;\n \n       begin\n-         Write_Info_Initiate ('C');\n-         Write_Info_Char (' ');\n-         Write_Info_Nat (SUT.Dep_Num);\n-         Write_Info_Char (' ');\n+         Start := SUT.From;\n+         Stop  := SUT.To;\n \n-         for N in SUT.File_Name'Range loop\n-            Write_Info_Char (SUT.File_Name (N));\n-         end loop;\n+         --  Write unit header (omitted if no SCOs are generated for this unit)\n+\n+         if Start <= Stop then\n+            Write_Info_Initiate ('C');\n+            Write_Info_Char (' ');\n+            Write_Info_Nat (SUT.Dep_Num);\n+            Write_Info_Char (' ');\n \n-         Write_Info_Terminate;\n+            for N in SUT.File_Name'Range loop\n+               Write_Info_Char (SUT.File_Name (N));\n+            end loop;\n+\n+            Write_Info_Terminate;\n+         end if;\n \n          --  Loop through SCO entries for this unit\n \n-         Start := SUT.From;\n-         Stop  := SUT.To;\n          loop\n             exit when Start = Stop + 1;\n             pragma Assert (Start <= Stop);"}, {"sha": "153bf5dc5754f570086350a0f826cce57c16f6cd", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -54,7 +54,7 @@ package SCOs is\n \n    --  Source coverage obligations are generated on a unit-by-unit basis in the\n    --  ALI file, using lines that start with the identifying character C. These\n-   --  lines are generated if the -gnatC switch is set.\n+   --  lines are generated if the -gnateS switch is set.\n \n    --  Sloc Ranges\n \n@@ -75,7 +75,7 @@ package SCOs is\n    --    is divided into sections, one section for each unit for which SCO's\n    --    are generated. A SCO section has a header of the form:\n \n-   --      C  dependency-number  filename\n+   --      C dependency-number filename\n \n    --        This header precedes SCO information for the unit identified by\n    --        dependency number and file name. The dependency number is the"}, {"sha": "2aa6c2e0e31f4c2667a61dabb42e0d0fa11ecc77", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "patch": "@@ -5228,10 +5228,10 @@ package body Sem_Prag is\n                Exp : Node_Id;\n \n             begin\n-               if No (Arg2) then\n-                     Error_Pragma_Arg\n-                       (\"pragma requires at least two arguments\", Arg1);\n+               --  Second unanalyzed parameter is optional.\n \n+               if No (Arg2) then\n+                  null;\n                else\n                   Arg := Next (Arg2);\n                   while Present (Arg) loop"}]}