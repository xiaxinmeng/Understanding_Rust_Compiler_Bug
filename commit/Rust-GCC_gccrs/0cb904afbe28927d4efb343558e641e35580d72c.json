{"sha": "0cb904afbe28927d4efb343558e641e35580d72c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiOTA0YWZiZTI4OTI3ZDRlZmIzNDM1NThlNjQxZTM1NTgwZDcyYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2016-09-22T20:32:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-22T20:32:16Z"}, "message": "compiler: compile runtime.getcaller{pc,sp} into builtin functions\n    \n    The runtime functions runtime.getcallerpc and runtime.getcallersp are\n    intended to be efficient ways to get the return and frame address of the\n    caller (that is, the caller of runtime.getcallerpc).  In the C code that\n    is implemented by simply using C macros:\n    \n    This patch essentially implements those macros in the Go code.\n    \n    It would be nice if we could just use //extern for this, but it doesn't\n    work because the runtime code passes the right argument.  Of course we\n    could change the runtime code, but these are common enough that I'd\n    prefer to avoid the difference from the gc version of the runtime code.\n    \n    This patch corrects the existing declaration of __builtin_return_address\n    to use uint32, rather than uint, for the parameter type.  The builtin\n    functions take the C type \"unsigned int\", which for the targets we use\n    corresponds to the Go type uint32.  Not that it should matter, really.\n    \n    Reviewed-on: https://go-review.googlesource.com/29653\n\nFrom-SVN: r240382", "tree": {"sha": "c603e6261575dd4da3b11d23174440467f68b4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c603e6261575dd4da3b11d23174440467f68b4db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb904afbe28927d4efb343558e641e35580d72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb904afbe28927d4efb343558e641e35580d72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb904afbe28927d4efb343558e641e35580d72c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb904afbe28927d4efb343558e641e35580d72c/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c681c7bf7e28ceeeb50e90444b89f833f7bcc23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c681c7bf7e28ceeeb50e90444b89f833f7bcc23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c681c7bf7e28ceeeb50e90444b89f833f7bcc23"}], "stats": {"total": 134, "additions": 108, "deletions": 26}, "files": [{"sha": "16bc2b7466f8bef143459289c6a629228def51aa", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -1,3 +1,8 @@\n+2016-09-22  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Declare\n+\t__builtin_frame_address.\n+\n 2016-09-11  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-gcc.cc (Gcc_backend::Gcc_backend): Add builtin versions of"}, {"sha": "f9ba9d59c1b317a902da7607e730b1f0a2beddca", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -818,13 +818,14 @@ Gcc_backend::Gcc_backend()\n \t\t       math_function_type_long, true, false);\n \n   // We use __builtin_return_address in the thunk we build for\n-  // functions which call recover.\n+  // functions which call recover, and for runtime.getcallerpc.\n+  t = build_function_type_list(ptr_type_node, unsigned_type_node, NULL_TREE);\n   this->define_builtin(BUILT_IN_RETURN_ADDRESS, \"__builtin_return_address\",\n-\t\t       NULL,\n-\t\t       build_function_type_list(ptr_type_node,\n-\t\t\t\t\t\tunsigned_type_node,\n-\t\t\t\t\t\tNULL_TREE),\n-\t\t       false, false);\n+\t\t       NULL, t, false, false);\n+\n+  // The runtime calls __builtin_frame_address for runtime.getcallersp.\n+  this->define_builtin(BUILT_IN_FRAME_ADDRESS, \"__builtin_frame_address\",\n+\t\t       NULL, t, false, false);\n \n   // The compiler uses __builtin_trap for some exception handling\n   // cases."}, {"sha": "ece695428a6651b73f38635a6545ee492aab978a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -1,4 +1,4 @@\n-34c4837efc21c35eb21f40efc9bb6b1d71dbda47\n+4f84c5e0210e674163f3f6462da6f5be9e5b0a36\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "84c578dd7b1a07bf1b515d29bede33fa4424b6c8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -8897,6 +8897,45 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n \t\t\t\t\t\t  bme->location());\n     }\n \n+  // Handle a couple of special runtime functions.  In the runtime\n+  // package, getcallerpc returns the PC of the caller, and\n+  // getcallersp returns the frame pointer of the caller.  Implement\n+  // these by turning them into calls to GCC builtin functions.  We\n+  // could implement them in normal code, but then we would have to\n+  // explicitly unwind the stack.  These functions are intended to be\n+  // efficient.  Note that this technique obviously only works for\n+  // direct calls, but that is the only way they are used.  The actual\n+  // argument to these functions is always the address of a parameter;\n+  // we don't need that for the GCC builtin functions, so we just\n+  // ignore it.\n+  if (gogo->compiling_runtime()\n+      && this->args_ != NULL\n+      && this->args_->size() == 1\n+      && gogo->package_name() == \"runtime\")\n+    {\n+      Func_expression* fe = this->fn_->func_expression();\n+      if (fe != NULL\n+\t  && fe->named_object()->is_function_declaration()\n+\t  && fe->named_object()->package() == NULL)\n+\t{\n+\t  std::string n = Gogo::unpack_hidden_name(fe->named_object()->name());\n+\t  if (n == \"getcallerpc\")\n+\t    {\n+\t      static Named_object* builtin_return_address;\n+\t      return this->lower_to_builtin(&builtin_return_address,\n+\t\t\t\t\t    \"__builtin_return_address\",\n+\t\t\t\t\t    0);\n+\t    }\n+\t  else if (n == \"getcallersp\")\n+\t    {\n+\t      static Named_object* builtin_frame_address;\n+\t      return this->lower_to_builtin(&builtin_frame_address,\n+\t\t\t\t\t    \"__builtin_frame_address\",\n+\t\t\t\t\t    1);\n+\t    }\n+\t}\n+    }\n+\n   return this;\n }\n \n@@ -8997,6 +9036,28 @@ Call_expression::lower_varargs(Gogo* gogo, Named_object* function,\n   this->varargs_are_lowered_ = true;\n }\n \n+// Return a call to __builtin_return_address or __builtin_frame_address.\n+\n+Expression*\n+Call_expression::lower_to_builtin(Named_object** pno, const char* name,\n+\t\t\t\t  int arg)\n+{\n+  if (*pno == NULL)\n+    *pno = Gogo::declare_builtin_rf_address(name);\n+\n+  Location loc = this->location();\n+\n+  Expression* fn = Expression::make_func_reference(*pno, NULL, loc);\n+  Expression* a = Expression::make_integer_ul(arg, NULL, loc);\n+  Expression_list *args = new Expression_list();\n+  args->push_back(a);\n+  Expression* call = Expression::make_call(fn, args, false, loc);\n+\n+  // The builtin functions return void*, but the Go functions return uintptr.\n+  Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+  return Expression::make_cast(uintptr_type, call, loc);\n+}\n+\n // Flatten a call with multiple results into a temporary.\n \n Expression*"}, {"sha": "357f7dbf9beb9a959b4c06ab082f5ff735abcee0", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -2142,6 +2142,9 @@ class Call_expression : public Expression\n   bool\n   check_argument_type(int, const Type*, const Type*, Location, bool);\n \n+  Expression*\n+  lower_to_builtin(Named_object**, const char*, int);\n+\n   Expression*\n   interface_method_function(Interface_field_reference_expression*,\n \t\t\t    Expression**);"}, {"sha": "20c34208d5bf6fa04022537de3821311e5946096", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -4146,25 +4146,8 @@ Build_recover_thunks::can_recover_arg(Location location)\n {\n   static Named_object* builtin_return_address;\n   if (builtin_return_address == NULL)\n-    {\n-      const Location bloc = Linemap::predeclared_location();\n-\n-      Typed_identifier_list* param_types = new Typed_identifier_list();\n-      Type* uint_type = Type::lookup_integer_type(\"uint\");\n-      param_types->push_back(Typed_identifier(\"l\", uint_type, bloc));\n-\n-      Typed_identifier_list* return_types = new Typed_identifier_list();\n-      Type* voidptr_type = Type::make_pointer_type(Type::make_void_type());\n-      return_types->push_back(Typed_identifier(\"\", voidptr_type, bloc));\n-\n-      Function_type* fntype = Type::make_function_type(NULL, param_types,\n-\t\t\t\t\t\t       return_types, bloc);\n-      builtin_return_address =\n-\tNamed_object::make_function_declaration(\"__builtin_return_address\",\n-\t\t\t\t\t\tNULL, fntype, bloc);\n-      const char* n = \"__builtin_return_address\";\n-      builtin_return_address->func_declaration_value()->set_asm_name(n);\n-    }\n+    builtin_return_address =\n+      Gogo::declare_builtin_rf_address(\"__builtin_return_address\");\n \n   static Named_object* can_recover;\n   if (can_recover == NULL)\n@@ -4216,6 +4199,30 @@ Gogo::build_recover_thunks()\n   this->traverse(&build_recover_thunks);\n }\n \n+// Return a declaration for __builtin_return_address or\n+// __builtin_frame_address.\n+\n+Named_object*\n+Gogo::declare_builtin_rf_address(const char* name)\n+{\n+  const Location bloc = Linemap::predeclared_location();\n+\n+  Typed_identifier_list* param_types = new Typed_identifier_list();\n+  Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n+  param_types->push_back(Typed_identifier(\"l\", uint32_type, bloc));\n+\n+  Typed_identifier_list* return_types = new Typed_identifier_list();\n+  Type* voidptr_type = Type::make_pointer_type(Type::make_void_type());\n+  return_types->push_back(Typed_identifier(\"\", voidptr_type, bloc));\n+\n+  Function_type* fntype = Type::make_function_type(NULL, param_types,\n+\t\t\t\t\t\t   return_types, bloc);\n+  Named_object* ret = Named_object::make_function_declaration(name, NULL,\n+\t\t\t\t\t\t\t      fntype, bloc);\n+  ret->func_declaration_value()->set_asm_name(name);\n+  return ret;\n+}\n+\n // Build a call to the runtime error function.\n \n Expression*"}, {"sha": "17d46d503fdbebe1cfaf0bfa301803da6275786e", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb904afbe28927d4efb343558e641e35580d72c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=0cb904afbe28927d4efb343558e641e35580d72c", "patch": "@@ -670,6 +670,11 @@ class Gogo\n   void\n   build_recover_thunks();\n \n+  // Return a declaration for __builtin_return_address or\n+  // __builtin_frame_address.\n+  static Named_object*\n+  declare_builtin_rf_address(const char* name);\n+\n   // Simplify statements which might use thunks: go and defer\n   // statements.\n   void"}]}