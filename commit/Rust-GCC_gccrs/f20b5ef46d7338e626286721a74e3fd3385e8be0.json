{"sha": "f20b5ef46d7338e626286721a74e3fd3385e8be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwYjVlZjQ2ZDczMzhlNjI2Mjg2NzIxYTc0ZTNmZDMzODVlOGJlMA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-08-21T14:44:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:44:35Z"}, "message": "[Ada] Enumeration types with non-standard representation\n\nThe compiler may report errors on enumeration types with non-standard\nrepresentation (i.e. at least one literal has a representation value\ndifferent from its 'Pos value) processing attribute 'Enum_Rep.\n\nIt may also generate wrong code for the evaluation of 'Enum_Rep raising\nConstraint_Error at runtime.\n\n2018-08-21  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* checks.ads (Determine_Range): Adding documentation.\n\t* checks.adb (Determine_Range): Don't deal with enumerated types\n\twith non-standard representation.\n\t(Convert_And_Check_Range): For conversion of enumeration types\n\twith non standard representation to an integer type perform a\n\tdirect conversion to the target integer type.\n\ngcc/testsuite/\n\n\t* gnat.dg/enum4.adb: New testcase.\n\nFrom-SVN: r263708", "tree": {"sha": "90b400fa0a8757343f0323e28a62e180ef2bd8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b400fa0a8757343f0323e28a62e180ef2bd8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20b5ef46d7338e626286721a74e3fd3385e8be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20b5ef46d7338e626286721a74e3fd3385e8be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20b5ef46d7338e626286721a74e3fd3385e8be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20b5ef46d7338e626286721a74e3fd3385e8be0/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e875ce96282a9c4ecc6cfd4f043c1039e5b7e3"}], "stats": {"total": 129, "additions": 116, "deletions": 13}, "files": [{"sha": "11613943f992255bfad69fca2dea929faacd8201", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f20b5ef46d7338e626286721a74e3fd3385e8be0", "patch": "@@ -1,3 +1,12 @@\n+2018-08-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* checks.ads (Determine_Range): Adding documentation.\n+\t* checks.adb (Determine_Range): Don't deal with enumerated types\n+\twith non-standard representation.\n+\t(Convert_And_Check_Range): For conversion of enumeration types\n+\twith non standard representation to an integer type perform a\n+\tdirect conversion to the target integer type.\n+\n 2018-08-21  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* lib-xref.ads, lib-xref-spark_specific.adb"}, {"sha": "f399cda780c3b981c71cb354d20f1d82b979eee2", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f20b5ef46d7338e626286721a74e3fd3385e8be0", "patch": "@@ -4490,6 +4490,11 @@ package body Checks is\n \n         or else not Is_Discrete_Type (Typ)\n \n+        --  Don't deal with enumerated types with non-standard representation\n+\n+        or else (Is_Enumeration_Type (Typ)\n+                   and then Present (Enum_Pos_To_Rep (Base_Type (Typ))))\n+\n         --  Ignore type for which an error has been posted, since range in\n         --  this case may well be a bogosity deriving from the error. Also\n         --  ignore if error posted on the reference node.\n@@ -6758,9 +6763,36 @@ package body Checks is\n       -----------------------------\n \n       procedure Convert_And_Check_Range is\n-         Tnn : constant Entity_Id := Make_Temporary (Loc, 'T', N);\n+         Tnn       : constant Entity_Id := Make_Temporary (Loc, 'T', N);\n+         Conv_Node : Node_Id;\n \n       begin\n+         --  For enumeration types with non-standard representation this is a\n+         --  direct conversion from the enumeration type to the target integer\n+         --  type, which is treated by the back end as a normal integer type\n+         --  conversion, treating the enumeration type as an integer, which is\n+         --  exactly what we want. We set Conversion_OK to make sure that the\n+         --  analyzer does not complain about what otherwise might be an\n+         --  illegal conversion.\n+\n+         if Is_Enumeration_Type (Source_Base_Type)\n+           and then Present (Enum_Pos_To_Rep (Source_Base_Type))\n+           and then Is_Integer_Type (Target_Base_Type)\n+         then\n+            Conv_Node :=\n+              OK_Convert_To (\n+                Typ  => Target_Base_Type,\n+                Expr => Duplicate_Subexpr (N));\n+\n+         --  Common case\n+\n+         else\n+            Conv_Node :=\n+              Make_Type_Conversion (Loc,\n+                Subtype_Mark => New_Occurrence_Of (Target_Base_Type, Loc),\n+                Expression   => Duplicate_Subexpr (N));\n+         end if;\n+\n          --  We make a temporary to hold the value of the converted value\n          --  (converted to the base type), and then do the test against this\n          --  temporary. The conversion itself is replaced by an occurrence of\n@@ -6776,10 +6808,7 @@ package body Checks is\n              Defining_Identifier => Tnn,\n              Object_Definition   => New_Occurrence_Of (Target_Base_Type, Loc),\n              Constant_Present    => True,\n-             Expression          =>\n-               Make_Type_Conversion (Loc,\n-                 Subtype_Mark => New_Occurrence_Of (Target_Base_Type, Loc),\n-                 Expression   => Duplicate_Subexpr (N))),\n+             Expression          => Conv_Node),\n \n            Make_Raise_Constraint_Error (Loc,\n              Condition =>"}, {"sha": "f2eed3dbcb5010a7893219efae9339a3c3b1dfe2", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=f20b5ef46d7338e626286721a74e3fd3385e8be0", "patch": "@@ -310,14 +310,16 @@ package Checks is\n    --  then OK is True on return, and Lo and Hi are set to a conservative\n    --  estimate of the possible range of values of N. Thus if OK is True on\n    --  return, the value of the subexpression N is known to lie in the range\n-   --  Lo .. Hi (inclusive). If the expression is not of a discrete type, or\n-   --  some kind of error condition is detected, then OK is False on exit, and\n-   --  Lo/Hi are set to No_Uint. Thus the significance of OK being False on\n-   --  return is that no useful information is available on the range of the\n-   --  expression. Assume_Valid determines whether the processing is allowed to\n-   --  assume that values are in range of their subtypes. If it is set to True,\n-   --  then this assumption is valid, if False, then processing is done using\n-   --  base types to allow invalid values.\n+   --  Lo .. Hi (inclusive). For enumeration and character literals the values\n+   --  returned are the Pos value in the relevant enumeration type. If the\n+   --  expression is not of a discrete type, or some kind of error condition\n+   --  is detected, then OK is False on exit, and Lo/Hi are set to No_Uint.\n+   --  Thus the significance of OK being False on return is that no useful\n+   --  information is available on the range of the expression. Assume_Valid\n+   --  determines whether the processing is allowed to assume that values are\n+   --  in range of their subtypes. If it is set to True, then this assumption\n+   --  is valid, if False, then processing is done using base types to allow\n+   --  invalid values.\n \n    procedure Determine_Range_R\n      (N            : Node_Id;"}, {"sha": "13faad8a1dcc3009884c335b94d31d67e6577fe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f20b5ef46d7338e626286721a74e3fd3385e8be0", "patch": "@@ -1,3 +1,7 @@\n+2018-08-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/enum4.adb: New testcase.\n+\n 2018-08-21  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/aarch64/large_struct_copy.c: New test."}, {"sha": "e8d743ec1d391fca84c38c1bbc342f9b1f6cff67", "filename": "gcc/testsuite/gnat.dg/enum4.adb", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Ftestsuite%2Fgnat.dg%2Fenum4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20b5ef46d7338e626286721a74e3fd3385e8be0/gcc%2Ftestsuite%2Fgnat.dg%2Fenum4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenum4.adb?ref=f20b5ef46d7338e626286721a74e3fd3385e8be0", "patch": "@@ -0,0 +1,59 @@\n+--  { dg-do run }\n+\n+procedure Enum4 is\n+\n+   procedure Assert (Expected, Actual : String) is\n+   begin\n+      if Expected /= Actual then\n+         raise Program_Error;\n+      end if;\n+   end Assert;\n+\n+   procedure Test_1 is\n+      type Test_Enum is (Enum_1,     Enum_2);\n+      for Test_Enum use (Enum_1=> 8, Enum_2=> 12);\n+\n+      Enum_Values : constant array (Test_Enum) of Natural := (8, 12);\n+\n+      type Test_Enum_Rep is range 1..12;\n+      Tmp_Test_Enum_Rep : Test_Enum_Rep;\n+   begin\n+      Tmp_Test_Enum_Rep := Test_Enum'Enum_Rep (Test_Enum'First);\n+      Assert (\" 8\", Tmp_Test_Enum_Rep'Img);\n+\n+      for Enum in Test_Enum loop\n+         Tmp_Test_Enum_Rep := Test_Enum'Enum_Rep (Enum);\n+         Assert (Enum_Values (Enum)'Img, Tmp_Test_Enum_Rep'Img);\n+      end loop;\n+   end Test_1;\n+\n+   procedure Test_2 is\n+      type Test_Enum is (Enum_1);\n+      for Test_Enum use (Enum_1=> 2);\n+\n+      type Test_Enum_Rep_Full is range 0..2;\n+      subtype Test_Enum_Rep_Short is\n+        Test_Enum_Rep_Full range 2..Test_Enum_Rep_Full'Last;\n+\n+      Tmp_Test_Enum_Rep_Full  : Test_Enum_Rep_Full;\n+      Tmp_Test_Enum_Rep_Short : Test_Enum_Rep_Short;\n+\n+   begin\n+      Tmp_Test_Enum_Rep_Short := Test_Enum'Enum_Rep (Test_Enum'First);\n+      Assert (\" 2\", Tmp_Test_Enum_Rep_Short'Img);\n+\n+      for Enum in Test_Enum loop\n+         Tmp_Test_Enum_Rep_Full := Test_Enum'Enum_Rep (Enum);\n+         Assert (\" 2\", Tmp_Test_Enum_Rep_Short'Img);\n+      end loop;\n+\n+      for Enum in Test_Enum range Test_Enum'First .. Test_Enum'Last loop\n+         Tmp_Test_Enum_Rep_Short := Test_Enum'Enum_Rep(Enum);  --  Test #2\n+         Assert (\" 2\", Tmp_Test_Enum_Rep_Short'Img);\n+      end loop;\n+   end Test_2;\n+\n+begin\n+   Test_1;\n+   Test_2;\n+end;"}]}