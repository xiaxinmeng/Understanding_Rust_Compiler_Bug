{"sha": "b348d67cd08a3dfab508873bff3fe4597ae3e706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM0OGQ2N2NkMDhhM2RmYWI1MDg4NzNiZmYzZmU0NTk3YWUzZTcwNg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-05-24T11:56:58Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2005-05-24T11:56:58Z"}, "message": "vect-none.c: Split into vect-106.c...\n\n\t* gcc.dg/vect/vect-none.c: Split into vect-106.c, vect-107.c,\n        vect-108.c, vect-109.c, vect-110.c, vect-111.c, vect-112.c,\n        vect-113.c, vect-114.c.\n\nFrom-SVN: r100102", "tree": {"sha": "8efe250ae7e2bbecbc62d58635b64165c34d4003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8efe250ae7e2bbecbc62d58635b64165c34d4003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b348d67cd08a3dfab508873bff3fe4597ae3e706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b348d67cd08a3dfab508873bff3fe4597ae3e706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b348d67cd08a3dfab508873bff3fe4597ae3e706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b348d67cd08a3dfab508873bff3fe4597ae3e706/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "561e7a36e38004d567ada2f0dac327b80d506009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561e7a36e38004d567ada2f0dac327b80d506009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561e7a36e38004d567ada2f0dac327b80d506009"}], "stats": {"total": 554, "additions": 363, "deletions": 191}, "files": [{"sha": "b742080db94fd6c3de41a35bad1f8aad00174d2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -1,3 +1,9 @@\n+2005-05-24  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-none.c: Split into vect-106.c, vect-107.c,\n+\tvect-108.c, vect-109.c, vect-110.c, vect-111.c, vect-112.c,\n+\tvect-113.c, vect-114.c.\n+\n 2005-05-23  Adam Nemet  <anemet@lnxw.com>\n \n \t* gcc.dg/const-elim-1.c: Remove xfails."}, {"sha": "43e43a6cd1f2d16569dcfea8d95cd3e7e6e58072", "filename": "gcc/testsuite/gcc.dg/vect/vect-106.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+\n+  /* Type cast.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (int) sb[i];\n+    }\n+\n+\n+  /* Check results.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != (int) sb[i])\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */ \n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "f8031afad113e2ece7e5b0a8059c63fb4f43a8fb", "filename": "gcc/testsuite/gcc.dg/vect/vect-107.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+\n+  /* Strided access pattern.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+      d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+    }\n+\n+  /* Check results.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (a[i] != b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i]\n+\t  || d[i] != b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i])\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2fa61d02f0906c3fd3a015b4d980c871687b6c34", "filename": "gcc/testsuite/gcc.dg/vect/vect-108.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-108.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-108.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-108.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int_mult } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+\n+  /* This loop is vectorized on platforms that support vect_int_mult.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] * ic[i];\n+    }\n+\n+  /* Check results.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] * ic[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "ba6b2cee3d6a12bc0dc9ab10ad02af341b4fcf8c", "filename": "gcc/testsuite/gcc.dg/vect/vect-109.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  short sc[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sa[N];\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+\n+  /* Two types with different nunits in vector.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] + ic[i];\n+      sa[i] = sb[i] + sc[i];\n+    }\n+\n+  /* Check results.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] + ic[i] || sa[i] != sb[i] + sc[i])\n+\tabort();\n+    }\n+\n+ return 0;\n+}\n+     \n+int main (void)\n+{    \n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "3fa4f4146858f2dc859f4e70cac1b3b832fb645a", "filename": "gcc/testsuite/gcc.dg/vect/vect-110.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-110.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\n+  /* Too conservative dependence test.  */\n+  for (i = 0; i < N - 1; i++){\n+    a[i] = b[i] + c[i];\n+    a[i+1] = b[i] + c[i];\n+  }\n+\n+  /* Check results.  */\n+  for (i = 0; i < N - 1; i++){\n+    if (a[i] != b[i] + c[i])\n+\tabort ();\n+  }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+     \n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+"}, {"sha": "8fb3f72d95e6c299bf36874478fbf93165a5e7a5", "filename": "gcc/testsuite/gcc.dg/vect/vect-111.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-111.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+  /* Condition in loop.  */\n+  /* This loop is vectorized on platforms that support vect_condition.  */\n+  for (i = 0; i < N; i++)\n+  {\n+    a[i] = (b[i] > 0 ? b[i] : 0);\n+  }\n+\n+  for (i = 0; i < N; i++)\n+  {\n+    if (a[i] != b[i])\n+\tabort ();\n+  }\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target powerpc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8363f302d2f2502b8f7c4c5401f6a1621130c24b", "filename": "gcc/testsuite/gcc.dg/vect/vect-112.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  int diff = 0;\n+  char cb[N] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n+  char cc[N] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+\n+  /* Cross-iteration cycle.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (cb[i] - cc[i]);\n+  }\n+\n+  /* Check results.  */\n+  if (diff != 16)\n+    abort();\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+"}, {"sha": "e09a16b365574ec4b12406bff801fc9da8422df5", "filename": "gcc/testsuite/gcc.dg/vect/vect-113.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-113.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  float a[N];\n+\n+  /* Induction.  */\n+  for ( i = 0; i < N; i++) \n+  {\n+    a[i] = i;\n+  }\n+\n+  for ( i = 0; i < N; i++) \n+  {\n+    if (a[i] != i)\n+\tabort ();\n+  }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "41ecd48680eed54fbf65585c97798a3775fc5c20", "filename": "gcc/testsuite/gcc.dg/vect/vect-114.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b348d67cd08a3dfab508873bff3fe4597ae3e706/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c?ref=b348d67cd08a3dfab508873bff3fe4597ae3e706", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int\n+main1 (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+  /* Reverse access and forward access.  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = b[i-1];\n+    }\n+\n+  /* Check results.  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != b[N-1-i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "e36f4871cd406bc11924346834efdefa70514168", "filename": "gcc/testsuite/gcc.dg/vect/vect-none.c", "status": "removed", "additions": 0, "deletions": 191, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -1,191 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target vect_float } */\n-\n-#define N 16\n-\n-extern void abort (void);\n-\n-int iadd_results[N] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};\n-float fadd_results[N] = {0.0,6.0,12.0,18.0,24.0,30.0,36.0,42.0,48.0,54.0,60.0,66.0,72.0,78.0,84.0,90.0};\n-float fmul_results[N] = {0.0,3.0,12.0,27.0,48.0,75.0,108.0,147.0,192.0,243.0,300.0,363.0,432.0,507.0,588.0,675.0};\n-float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48.00,54.00,60.00,66.00,72.00,78.00,84.00,90.00};\n-float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n-\n-/****************************************************/\n-void icheck_results (int *a, int *results)\n-{\n-  int i;\n-  for (i = 0; i < N; i++)\n-    {\n-      if (a[i] != results[i])\n-\tabort ();\n-    }\n-}\n-\n-void fcheck_results (float *a, float *results)\n-{\n-  int i;\n-  for (i = 0; i < N; i++)\n-    {\n-      if (a[i] != results[i])\n-\tabort ();\n-    }\n-}   \n-\n-void \n-fbar_mul (float *a)\n-{\n-  fcheck_results (a, fmul_results);\n-} \n-\n-void \n-fbar_add (float *a)\n-{\n-  fcheck_results (a, fadd_results);\n-} \n-\n-void \n-ibar_add (int *a)\n-{\n-  icheck_results (a, iadd_results);\n-} \n-\n-void \n-fbar1 (float *a)\n-{\n-  fcheck_results (a, fresults1);\n-} \n-\n-void \n-fbar2 (float *a)\n-{\n-  fcheck_results (a, fresults2);\n-} \n-\n-\n-/* None of the loops below is currently vectorizable. The vectorizer will\n-   be enhanced to vectorize most of these loops.  */\n-\n-int\n-foo (int n)\n-{\n-  int i,j;\n-  float a[N];\n-  float e[N];\n-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n-  short sc[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  short sa[N];\n-  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int ia[N];\n-  int diff = 0;\n-  char cb[N];\n-  char cc[N];\n-  char image[N][N];\n-  char block[N][N];\n-\n-\n-  /* Test 1 - type cast.  */\n-  for (i = 0; i < N; i++)\n-    {\n-      ia[i] = (int) sb[i];\n-    }\n-  fbar (a);\n-\n-\n-  /* Test 2 - strided access pattern.  */\n-  for (i = 0; i < N/2; i++)\n-    {\n-      a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n-      d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n-    }\n-  fbar (a);\n-\n-\n-  /* Test 3 - no target support for integer mult.  */\n-  /* This loop is vectorized on platforms that support vect_int_mult.  */\n-  for (i = 0; i < N; i++)\n-    {\n-      ia[i] = ib[i] * ic[i];\n-    }\n-  ibar (ia);\n-\n-\n-  /* Test 4 - two types with different nunits in vector.  */\n-  for (i = 0; i < N; i++)\n-    {\n-      ia[i] = ib[i] + ic[i];\n-      sa[i] = sb[i] + sc[i];\n-    }\n-  ibar (ia);\n-  sbar (sa);\n-\n-\n-  /* Test 5 - too conservative dependence test.  */\n-  for (i = 0; i < N; i++){\n-    a[i] = b[i] + c[i];\n-    a[i+1] = b[i] + c[i];\n-  }\n-  fbar (a);\n-\n-\n-  /* Test 6 - condition in loop.  */\n-  /* This loop is vectorized on platformst that support vect_condition.  */\n-  for (i = 0; i < N; i++){\n-    a[i] = (b[i] > 0 ? b[i] : 0);\n-  }\n-  fbar (a);\n-\n-\n-  /* Test 7 - cross-iteration cycle.  */\n-  diff = 0;\n-  for (i = 0; i < N; i++) {\n-    diff += (cb[i] - cc[i]);\n-  }\n-  ibar (&diff);\n-\n-\n-  /* Test 8 - outer-loop not attempted; inner-loop has cross \n-     iteration cycle and multi-dimensional arrays.  */\n-  diff = 0;\n-  for (i = 0; i < N; i++) {\n-    for (i = 0; i < N; i++) {\n-      diff += (image[i][j] - block[i][j]);\n-    }\n-  }\n-  ibar (&diff);\n-\n-\n-  /* Test 9 - induction.  */\n-  for ( i = 0; i < N; i++) {\n-    a[i] = i;\n-  }\n-  fbar (a);\n-\n-\n-  /* Test 10 - reverse access and forward access.  */\n-  for (i = N; i > 0; i--)\n-    {\n-      a[N-i] = b[i-1];\n-    }\n-  /* check results:  */\n-  for (i = 0; i <N; i++)\n-    {\n-      if (a[i] != b[N-1-i])\n-\tabort ();\n-    }\n-\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized \" 3 \"vect\"} } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { xfail powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target powerpc*-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" { target powerpc*-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}