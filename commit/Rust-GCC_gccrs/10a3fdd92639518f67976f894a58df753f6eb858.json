{"sha": "10a3fdd92639518f67976f894a58df753f6eb858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhM2ZkZDkyNjM5NTE4ZjY3OTc2Zjg5NGE1OGRmNzUzZjZlYjg1OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-28T10:11:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-28T10:11:47Z"}, "message": "combine.c (gen_lowpart_for_combine): Update handling of subregs_of_mode\n\n\t* combine.c (gen_lowpart_for_combine): Update handling of\n\tsubregs_of_mode\n\t* flow.c (life_analysis, mark_used_regs): Likewise.\n\t* regclass.c (subregs_of_mode): Turn into single bitmap.\n\t(cannot_change-mode_set_regs, invalid_mode_change_p): Update\n\tdealing with subregs_of_mode\n\t* regs.h (subregs_of_mode): Update prototype.\n\nFrom-SVN: r63552", "tree": {"sha": "90126b3c24f149851de417e946284822a2bf0b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90126b3c24f149851de417e946284822a2bf0b58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a3fdd92639518f67976f894a58df753f6eb858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a3fdd92639518f67976f894a58df753f6eb858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a3fdd92639518f67976f894a58df753f6eb858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a3fdd92639518f67976f894a58df753f6eb858/comments", "author": null, "committer": null, "parents": [{"sha": "e459243b87904cd66d4bb85892eb831d9e006c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e459243b87904cd66d4bb85892eb831d9e006c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e459243b87904cd66d4bb85892eb831d9e006c2c"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "5023208ea0b5507bdc18961bf95a02552a457d22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -1,3 +1,13 @@\n+Fri Feb 28 11:09:14 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (gen_lowpart_for_combine): Update handling of\n+\tsubregs_of_mode\n+\t* flow.c (life_analysis, mark_used_regs): Likewise.\n+\t* regclass.c (subregs_of_mode): Turn into single bitmap.\n+\t(cannot_change-mode_set_regs, invalid_mode_change_p): Update\n+\tdealing with subregs_of_mode\n+\t* regs.h (subregs_of_mode): Update prototype.\n+\n 2003-02-28  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* emit-rtl.c (set_reg_attrs_for_parm): New function."}, {"sha": "e193387025196ee6aedd87125d96912fba762f51", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -10201,8 +10201,9 @@ gen_lowpart_for_combine (mode, x)\n       && GET_CODE (result) == SUBREG\n       && GET_CODE (SUBREG_REG (result)) == REG\n       && REGNO (SUBREG_REG (result)) >= FIRST_PSEUDO_REGISTER)\n-    SET_REGNO_REG_SET (&subregs_of_mode[GET_MODE (result)],\n-\t\t       REGNO (SUBREG_REG (result)));\n+    bitmap_set_bit (&subregs_of_mode, REGNO (SUBREG_REG (result))\n+\t\t\t\t      * MAX_MACHINE_MODE\n+\t\t\t\t      + GET_MODE (result));\n #endif\n \n   if (result)"}, {"sha": "fb60610a7a87322fa913c552c324db4ec95480dd", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -436,11 +436,7 @@ life_analysis (f, file, flags)\n \n #ifdef CANNOT_CHANGE_MODE_CLASS\n   if (flags & PROP_REG_INFO)\n-    {\n-      int j;\n-      for (j=0; j < NUM_MACHINE_MODES; ++j)\n-\tINIT_REG_SET (&subregs_of_mode[j]);\n-    }\n+    bitmap_initialize (&subregs_of_mode, 1);\n #endif\n \n   if (! optimize)\n@@ -3845,8 +3841,9 @@ mark_used_regs (pbi, x, cond, insn)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       if (GET_CODE (SUBREG_REG (x)) == REG\n \t  && REGNO (SUBREG_REG (x)) >= FIRST_PSEUDO_REGISTER)\n-\tSET_REGNO_REG_SET (&subregs_of_mode[GET_MODE (x)],\n-\t\t\t   REGNO (SUBREG_REG (x)));\n+\tbitmap_set_bit (&subregs_of_mode, REGNO (SUBREG_REG (x))\n+\t\t\t\t\t  * MAX_MACHINE_MODE\n+\t\t\t\t\t  + GET_MODE (x));\n #endif\n \n       /* While we're here, optimize this case.  */\n@@ -3894,8 +3891,9 @@ mark_used_regs (pbi, x, cond, insn)\n \t    if (GET_CODE (testreg) == SUBREG\n \t\t&& GET_CODE (SUBREG_REG (testreg)) == REG\n \t\t&& REGNO (SUBREG_REG (testreg)) >= FIRST_PSEUDO_REGISTER)\n-\t      SET_REGNO_REG_SET (&subregs_of_mode[GET_MODE (testreg)],\n-\t\t\t\t REGNO (SUBREG_REG (testreg)));\n+\t      bitmap_set_bit (&subregs_of_mode, REGNO (SUBREG_REG (testreg))\n+\t\t\t\t\t\t* MAX_MACHINE_MODE\n+\t\t\t\t\t\t+ GET_MODE (testreg));\n #endif\n \n \t    /* Modifying a single register in an alternate mode"}, {"sha": "8626d6367787a185714748f0f4308a93e207480c", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -428,9 +428,6 @@ reg_to_stack (first, file)\n   /* Clean up previous run.  */\n   stack_regs_mentioned_data = 0;\n \n-  if (!optimize)\n-    split_all_insns (0);\n-\n   /* See if there is something to do.  Flow analysis is quite\n      expensive so we might save some compilation time.  */\n   for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)"}, {"sha": "01c08f3a07861dac6f392d82eb2ccdecff5ff6f2", "filename": "gcc/regclass.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -232,9 +232,9 @@ static char *in_inc_dec;\n #endif /* FORBIDDEN_INC_DEC_CLASSES */\n \n #ifdef CANNOT_CHANGE_MODE_CLASS\n-/* All registers that have been subreged.  Indexed by mode, where each\n-   entry is a regset of registers.  */\n-regset_head subregs_of_mode [NUM_MACHINE_MODES];\n+/* All registers that have been subreged.  Indexed by regno * MAX_MACHINE_MODE\n+   + mode.  */\n+bitmap_head subregs_of_mode;\n #endif\n \n /* Sample MEM values for use by memory_move_secondary_cost.  */\n@@ -2638,16 +2638,18 @@ cannot_change_mode_set_regs (used, from, regno)\n      unsigned int regno;\n {\n   enum machine_mode to;\n+  int n, i;\n+  int start = regno * MAX_MACHINE_MODE;\n \n-  for (to = VOIDmode; to < MAX_MACHINE_MODE; ++to)\n-    if (REGNO_REG_SET_P (&subregs_of_mode[to], regno))\n-      {\n-\tint i;\n-\tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-          if (! TEST_HARD_REG_BIT (*used, i)\n-\t      && REG_CANNOT_CHANGE_MODE_P (i, from, to))\n-\t    SET_HARD_REG_BIT (*used, i);\n-      }\n+  EXECUTE_IF_SET_IN_BITMAP (&subregs_of_mode, start, n,\n+    if (n >= MAX_MACHINE_MODE + start)\n+      return;\n+    to = n - start;\n+    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+      if (! TEST_HARD_REG_BIT (*used, i)\n+\t  && REG_CANNOT_CHANGE_MODE_P (i, from, to))\n+\tSET_HARD_REG_BIT (*used, i);\n+  );\n }\n \n /* Return 1 if REGNO has had an invalid mode change in CLASS from FROM\n@@ -2660,11 +2662,16 @@ invalid_mode_change_p (regno, class, from_mode)\n      enum machine_mode from_mode;\n {\n   enum machine_mode to_mode;\n-\n-  for (to_mode = 0; to_mode < NUM_MACHINE_MODES; ++to_mode)\n-    if (REGNO_REG_SET_P (&subregs_of_mode[(int) to_mode], regno)\n-\t&& CANNOT_CHANGE_MODE_CLASS (from_mode, to_mode, class))\n+  int n;\n+  int start = regno * MAX_MACHINE_MODE;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (&subregs_of_mode, start, n,\n+    if (n >= MAX_MACHINE_MODE + start)\n+      return 0;\n+    to_mode = n - start;\n+    if (CANNOT_CHANGE_MODE_CLASS (from_mode, to_mode, class))\n       return 1;\n+  );\n   return 0;\n }\n #endif /* CANNOT_CHANGE_MODE_CLASS */"}, {"sha": "2e838e329398a563525077f5b38a40825234fd79", "filename": "gcc/regs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -66,7 +66,7 @@ typedef struct reg_info_def\n \n extern varray_type reg_n_info;\n \n-extern regset_head subregs_of_mode [NUM_MACHINE_MODES];\n+extern bitmap_head subregs_of_mode;\n \n /* Indexed by n, gives number of times (REG n) is used or set.  */\n "}, {"sha": "ef0ac60ded7fc2f6838b2dded0725cfbf0d393df", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3fdd92639518f67976f894a58df753f6eb858/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=10a3fdd92639518f67976f894a58df753f6eb858", "patch": "@@ -3458,7 +3458,9 @@ rest_of_compilation (decl)\n #endif\n \n   /* If optimizing, then go ahead and split insns now.  */\n+#ifndef STACK_REGS\n   if (optimize > 0)\n+#endif\n     split_all_insns (0);\n \n   cleanup_cfg (optimize ? CLEANUP_EXPENSIVE : 0);\n@@ -3551,10 +3553,6 @@ rest_of_compilation (decl)\n       close_dump_file (DFI_ce3, print_rtl_with_bb, insns);\n       timevar_pop (TV_IFCVT2);\n     }\n-#ifdef STACK_REGS\n-  if (optimize)\n-    split_all_insns (1);\n-#endif\n \n #ifdef INSN_SCHEDULING\n   if (optimize > 0 && flag_schedule_insns_after_reload)"}]}