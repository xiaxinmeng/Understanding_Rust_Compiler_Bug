{"sha": "6e771c087b10d5b730240ea35478eab8694c9c5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU3NzFjMDg3YjEwZDViNzMwMjQwZWEzNTQ3OGVhYjg2OTRjOWM1ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-24T22:25:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-24T22:25:17Z"}, "message": "c++: Give more expressions locations.\n\nIn the testcase for PR94186, we have a SCOPE_REF with no location even\nthough at one point it was in a cp_expr which had a location.  So let's make\nthe cp_expr constructor that takes a location apply it to the expression\nwhen possible.\n\ngcc/cp/ChangeLog\n2020-03-24  Jason Merrill  <jason@redhat.com>\n\n\t* cp-tree.h (cp_expr): When constructing from an expr and a\n\tlocation, call protected_set_expr_location.", "tree": {"sha": "4e040af85a82560387410b4b8c76ab46f9334b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e040af85a82560387410b4b8c76ab46f9334b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e771c087b10d5b730240ea35478eab8694c9c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e771c087b10d5b730240ea35478eab8694c9c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e771c087b10d5b730240ea35478eab8694c9c5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e771c087b10d5b730240ea35478eab8694c9c5d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f8bcc6ea9f3c0850a56a7431d866178d5cee92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f8bcc6ea9f3c0850a56a7431d866178d5cee92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f8bcc6ea9f3c0850a56a7431d866178d5cee92"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "7ae4128a3a871727d83b5a400a23c1e5560e5ada", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e771c087b10d5b730240ea35478eab8694c9c5d", "patch": "@@ -1,3 +1,8 @@\n+2020-03-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (cp_expr): When constructing from an expr and a\n+\tlocation, call protected_set_expr_location.\n+\n 2020-03-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93805"}, {"sha": "4e1d0f1d42e127d4166381cae5456890ba6929c6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6e771c087b10d5b730240ea35478eab8694c9c5d", "patch": "@@ -59,7 +59,10 @@ class cp_expr\n     m_value (value), m_loc (cp_expr_location (m_value)) {}\n \n   cp_expr (tree value, location_t loc):\n-    m_value (value), m_loc (loc) {}\n+    m_value (value), m_loc (loc)\n+  {\n+    protected_set_expr_location (value, loc);\n+  }\n \n   /* Implicit conversions to tree.  */\n   operator tree () const { return m_value; }"}, {"sha": "27406e1e37f95e831d23df3a3df9906bb36b1b58", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C?ref=6e771c087b10d5b730240ea35478eab8694c9c5d", "patch": "@@ -4,5 +4,5 @@\n void foo()\n {\n   int x[({ return; })];\t\t// { dg-error \"could not convert\" }\n-// { dg-error \"12:size of array .x. has non-integral\" \"\" { target *-*-* } .-1 }  \n+// { dg-error \"9:size of array .x. has non-integral\" \"\" { target *-*-* } .-1 }  \n }"}, {"sha": "4005fd5025fc1f28b086eab23d96eb976a93bb4d", "filename": "gcc/testsuite/g++.dg/parse/error26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror26.C?ref=6e771c087b10d5b730240ea35478eab8694c9c5d", "patch": "@@ -4,7 +4,7 @@\n void foo()\n {\n   if (({int c[2];})) ; // { dg-error \"7:ISO C.. forbids\" \"7\" }\n-  // { dg-error \"17:could not convert\" \"17\" { target *-*-* } .-1 }\n+  // { dg-error \"7:could not convert\" \"17\" { target *-*-* } .-1 }\n }\n \n void bar()"}, {"sha": "4fac3675cf6717a594c37b0caeca5bc75c2333f2", "filename": "gcc/testsuite/g++.dg/warn/Wnoexcept1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e771c087b10d5b730240ea35478eab8694c9c5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C?ref=6e771c087b10d5b730240ea35478eab8694c9c5d", "patch": "@@ -7,7 +7,7 @@\n // We expect a warning at the declaration of construct2, since Automatic2 is\n // defined below; we don't expect one for construct1, because Automatic1 is\n // defined in the fake system header.\n-// { dg-warning \"noexcept-expression\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"noexcept-expression\" \"\" { target *-*-* } 16 }\n \n class Automatic2 {\n public:"}]}