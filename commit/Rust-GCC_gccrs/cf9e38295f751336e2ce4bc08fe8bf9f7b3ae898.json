{"sha": "cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5ZTM4Mjk1Zjc1MTMzNmUyY2U0YmMwOGZlOGJmOWY3YjNhZTg5OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-03T14:31:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:24Z"}, "message": "[Ada] Avoid creating temporaries in Universal_Integer for range checks\n\n2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Is_Single_Attribute_Reference): New predicate.\n\t(Generate_Range_Check): Do not force the evaluation if the\n\tnode is a single attribute reference.\n\t* exp_util.adb (Side_Effect_Free_Attribute): New predicate.\n\t(Side_Effect_Free) <N_Attribute_Reference>: Call it.\n\t(Remove_Side_Effects): Remove the side effects of the prefix\n\tfor an attribute reference whose prefix is not a name.", "tree": {"sha": "10bb94dca93402f2b533281e289ec8a3bb8dae22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10bb94dca93402f2b533281e289ec8a3bb8dae22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cea137308eb2e3912e052132131c7b7d9e19e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cea137308eb2e3912e052132131c7b7d9e19e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cea137308eb2e3912e052132131c7b7d9e19e63"}], "stats": {"total": 149, "additions": 91, "deletions": 58}, "files": [{"sha": "a2fa7d099ce1ba41e186064446cd59249208838b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "patch": "@@ -6875,6 +6875,10 @@ package body Checks is\n       --  given Suppress argument. Then check the converted value against the\n       --  range of the target subtype.\n \n+      function Is_Single_Attribute_Reference (N : Node_Id) return Boolean;\n+      --  Return True if N is an expression that contains a single attribute\n+      --  reference, possibly as operand among only integer literal operands.\n+\n       -----------------------------\n       -- Convert_And_Check_Range --\n       -----------------------------\n@@ -6934,6 +6938,31 @@ package body Checks is\n          Set_Etype (N, Target_Base_Type);\n       end Convert_And_Check_Range;\n \n+      -------------------------------------\n+      --  Is_Single_Attribute_Reference  --\n+      -------------------------------------\n+\n+      function Is_Single_Attribute_Reference (N : Node_Id) return Boolean is\n+      begin\n+         if Nkind (N) = N_Attribute_Reference then\n+            return True;\n+\n+         elsif Nkind (N) in N_Binary_Op then\n+            if Nkind (Right_Opnd (N)) = N_Integer_Literal then\n+               return Is_Single_Attribute_Reference (Left_Opnd (N));\n+\n+            elsif Nkind (Left_Opnd (N)) = N_Integer_Literal then\n+               return Is_Single_Attribute_Reference (Right_Opnd (N));\n+\n+            else\n+               return False;\n+            end if;\n+\n+         else\n+            return False;\n+         end if;\n+      end Is_Single_Attribute_Reference;\n+\n    --  Start of processing for Generate_Range_Check\n \n    begin\n@@ -6982,9 +7011,10 @@ package body Checks is\n       --  We skip the evaluation of attribute references because, after these\n       --  runtime checks are generated, the expander may need to rewrite this\n       --  node (for example, see Attribute_Max_Size_In_Storage_Elements in\n-      --  Expand_N_Attribute_Reference).\n+      --  Expand_N_Attribute_Reference) and, in many cases, their return type\n+      --  is universal integer, which is a very large type for a temporary.\n \n-      if Nkind (N) /= N_Attribute_Reference\n+      if not Is_Single_Attribute_Reference (N)\n         and then (not Is_Entity_Name (N)\n                    or else Treat_As_Volatile (Entity (N)))\n       then"}, {"sha": "5fd224be580c0a5efcb55afab6653583204ecc4f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 59, "deletions": 56, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=cf9e38295f751336e2ce4bc08fe8bf9f7b3ae898", "patch": "@@ -224,6 +224,10 @@ package body Exp_Util is\n    --  level, and False otherwise. Nested_Constructs is True when any nested\n    --  packages declared in L must be processed, and False otherwise.\n \n+   function Side_Effect_Free_Attribute (Name : Name_Id) return Boolean;\n+   --  Return True if the evaluation of the given attribute is considered\n+   --  side-effect free, independently of its prefix and expressions.\n+\n    -------------------------------------\n    -- Activate_Atomic_Synchronization --\n    -------------------------------------\n@@ -11306,6 +11310,21 @@ package body Exp_Util is\n \n       Scope_Suppress.Suppress := (others => True);\n \n+      --  If this is a side-effect free attribute reference whose expressions\n+      --  are also side-effect free and whose prefix is not a name, remove the\n+      --  side effects of the prefix. A copy of the prefix is required in this\n+      --  case and it is better not to make an additional one for the attribute\n+      --  itself, because the return type of many of them is universal integer,\n+      --  which is a very large type for a temporary.\n+\n+      if Nkind (Exp) = N_Attribute_Reference\n+        and then Side_Effect_Free_Attribute (Attribute_Name (Exp))\n+        and then Side_Effect_Free (Expressions (Exp), Name_Req, Variable_Ref)\n+        and then not Is_Name_Reference (Prefix (Exp))\n+      then\n+         Remove_Side_Effects (Prefix (Exp), Name_Req, Variable_Ref);\n+         goto Leave;\n+\n       --  If this is an elementary or a small not-by-reference record type, and\n       --  we need to capture the value, just make a constant; this is cheap and\n       --  objects of both kinds of types can be bit aligned, so it might not be\n@@ -11316,12 +11335,12 @@ package body Exp_Util is\n       --  anyway, see below). Also do it if we have a volatile reference and\n       --  Name_Req is not set (see comments for Side_Effect_Free).\n \n-      if (Is_Elementary_Type (Exp_Type)\n-           or else (Is_Record_Type (Exp_Type)\n-                     and then Known_Static_RM_Size (Exp_Type)\n-                     and then RM_Size (Exp_Type) <= 64\n-                     and then not Has_Discriminants (Exp_Type)\n-                     and then not Is_By_Reference_Type (Exp_Type)))\n+      elsif (Is_Elementary_Type (Exp_Type)\n+              or else (Is_Record_Type (Exp_Type)\n+                        and then Known_Static_RM_Size (Exp_Type)\n+                        and then RM_Size (Exp_Type) <= 64\n+                        and then not Has_Discriminants (Exp_Type)\n+                        and then not Is_By_Reference_Type (Exp_Type)))\n         and then (Variable_Ref\n                    or else (not Is_Name_Reference (Exp)\n                              and then Nkind (Exp) /= N_Type_Conversion)\n@@ -13173,58 +13192,18 @@ package body Exp_Util is\n \n       case Nkind (N) is\n \n-         --  An attribute reference is side effect free if its expressions\n-         --  are side effect free and its prefix is side effect free or\n-         --  is an entity reference.\n-\n-         --  Is this right? what about x'first where x is a variable???\n+         --  An attribute reference is side-effect free if its expressions\n+         --  are side-effect free and its prefix is side-effect free or is\n+         --  an entity reference.\n \n          when N_Attribute_Reference =>\n-            Attribute_Reference : declare\n-\n-               function Side_Effect_Free_Attribute\n-                 (Attribute_Name : Name_Id) return Boolean;\n-               --  Returns True if evaluation of the given attribute is\n-               --  considered side-effect free (independent of prefix and\n-               --  arguments).\n-\n-               --------------------------------\n-               -- Side_Effect_Free_Attribute --\n-               --------------------------------\n-\n-               function Side_Effect_Free_Attribute\n-                 (Attribute_Name : Name_Id) return Boolean\n-               is\n-               begin\n-                  case Attribute_Name is\n-                     when Name_Input =>\n-                        return False;\n-\n-                     when Name_Image\n-                        | Name_Img\n-                        | Name_Wide_Image\n-                        | Name_Wide_Wide_Image\n-                     =>\n-                        --  CodePeer doesn't want to see replicated copies of\n-                        --  'Image calls.\n-\n-                        return not CodePeer_Mode;\n-\n-                     when others =>\n-                        return True;\n-                  end case;\n-               end Side_Effect_Free_Attribute;\n-\n-            --  Start of processing for Attribute_Reference\n-\n-            begin\n-               return\n-                 Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref)\n-                   and then Side_Effect_Free_Attribute (Attribute_Name (N))\n-                   and then (Is_Entity_Name (Prefix (N))\n-                              or else Side_Effect_Free\n-                                        (Prefix (N), Name_Req, Variable_Ref));\n-            end Attribute_Reference;\n+            return Side_Effect_Free_Attribute (Attribute_Name (N))\n+                     and then\n+                   Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref)\n+                     and then\n+                   (Is_Entity_Name (Prefix (N))\n+                      or else\n+                    Side_Effect_Free (Prefix (N), Name_Req, Variable_Ref));\n \n          --  A binary operator is side effect free if and both operands are\n          --  side effect free. For this purpose binary operators include\n@@ -13383,6 +13362,30 @@ package body Exp_Util is\n       end if;\n    end Side_Effect_Free;\n \n+   --------------------------------\n+   -- Side_Effect_Free_Attribute --\n+   --------------------------------\n+\n+   function Side_Effect_Free_Attribute (Name : Name_Id) return Boolean is\n+   begin\n+      case Name is\n+         when Name_Input =>\n+            return False;\n+\n+         when Name_Image\n+            | Name_Img\n+            | Name_Wide_Image\n+            | Name_Wide_Wide_Image\n+         =>\n+            --  CodePeer doesn't want to see replicated copies of 'Image calls\n+\n+            return not CodePeer_Mode;\n+\n+         when others =>\n+            return True;\n+      end case;\n+   end Side_Effect_Free_Attribute;\n+\n    ----------------------------------\n    -- Silly_Boolean_Array_Not_Test --\n    ----------------------------------"}]}