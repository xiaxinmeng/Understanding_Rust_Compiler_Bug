{"sha": "0f277ad43f17845caab6501560944b3c85f14528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyNzdhZDQzZjE3ODQ1Y2FhYjY1MDE1NjA5NDRiM2M4NWYxNDUyOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-01-27T16:38:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-27T16:38:58Z"}, "message": "dwarf2out.c (mem_loc_descriptor): Remove special casing of CONSTANT_POOL_ADDRESS_P SYMBOL_REFs.\n\n\t* dwarf2out.c (mem_loc_descriptor): Remove special casing of\n\tCONSTANT_POOL_ADDRESS_P SYMBOL_REFs.  If for MEM recursive call\n\ton MEM's address failed, try avoid_constant_pool_reference and\n\trecurse if it returned something different.\n\t(loc_descriptor): If for MEM mem_loc_descriptor failed on the\n\taddress, try avoid_constant_pool_reference and recurse if it\n\treturned something different.\n\t(dw_loc_list_1): If for MEM mem_loc_descriptor failed on the\n\taddress and avoid_constant_pool_reference returned something\n\tdifferent, don't set have_address.\n\nFrom-SVN: r156293", "tree": {"sha": "5a8473f69b90708c70a8b56a5cc276cfeba4a621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8473f69b90708c70a8b56a5cc276cfeba4a621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f277ad43f17845caab6501560944b3c85f14528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f277ad43f17845caab6501560944b3c85f14528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f277ad43f17845caab6501560944b3c85f14528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f277ad43f17845caab6501560944b3c85f14528/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb4cbb9f9e0f3d3adc88f10fadb09fd6e7ca86f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4cbb9f9e0f3d3adc88f10fadb09fd6e7ca86f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4cbb9f9e0f3d3adc88f10fadb09fd6e7ca86f1"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "f65d62af88b11e723e3b1d86fa4aef2cfb0c6165", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f277ad43f17845caab6501560944b3c85f14528/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f277ad43f17845caab6501560944b3c85f14528/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f277ad43f17845caab6501560944b3c85f14528", "patch": "@@ -1,3 +1,16 @@\n+2010-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor): Remove special casing of\n+\tCONSTANT_POOL_ADDRESS_P SYMBOL_REFs.  If for MEM recursive call\n+\ton MEM's address failed, try avoid_constant_pool_reference and\n+\trecurse if it returned something different.\n+\t(loc_descriptor): If for MEM mem_loc_descriptor failed on the\n+\taddress, try avoid_constant_pool_reference and recurse if it\n+\treturned something different.\n+\t(dw_loc_list_1): If for MEM mem_loc_descriptor failed on the\n+\taddress and avoid_constant_pool_reference returned something\n+\tdifferent, don't set have_address.\n+\n 2010-01-27  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42861"}, {"sha": "0fd93cb194a481276efe0044c6ed7a52db0d268f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f277ad43f17845caab6501560944b3c85f14528/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f277ad43f17845caab6501560944b3c85f14528/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0f277ad43f17845caab6501560944b3c85f14528", "patch": "@@ -12991,6 +12991,12 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \tmem_loc_result = tls_mem_loc_descriptor (rtl);\n       if (mem_loc_result != 0)\n \tadd_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_deref, 0, 0));\n+      else\n+\t{\n+\t  rtx new_rtl = avoid_constant_pool_reference (rtl);\n+\t  if (new_rtl != rtl)\n+\t    return mem_loc_descriptor (new_rtl, mode, initialized);\n+\t}\n       break;\n \n     case LO_SUM:\n@@ -13004,34 +13010,6 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t pool.  */\n     case CONST:\n     case SYMBOL_REF:\n-      /* Alternatively, the symbol in the constant pool might be referenced\n-\t by a different symbol.  */\n-      if (GET_CODE (rtl) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (rtl))\n-\t{\n-\t  bool marked;\n-\t  rtx tmp = get_pool_constant_mark (rtl, &marked);\n-\n-\t  if (GET_CODE (tmp) == SYMBOL_REF)\n-\t    {\n-\t      rtl = tmp;\n-\t      if (CONSTANT_POOL_ADDRESS_P (tmp))\n-\t\tget_pool_constant_mark (tmp, &marked);\n-\t      else\n-\t\tmarked = true;\n-\t    }\n-\n-\t  /* If all references to this pool constant were optimized away,\n-\t     it was not output and thus we can't represent it.\n-\t     FIXME: might try to use DW_OP_const_value here, though\n-\t     DW_OP_piece complicates it.  */\n-\t  if (!marked)\n-\t    {\n-\t      expansion_failed (NULL_TREE, rtl,\n-\t\t\t\t\"Constant was removed from constant pool.\\n\");\n-\t      return 0;\n-\t    }\n-\t}\n-\n       if (GET_CODE (rtl) == SYMBOL_REF\n \t  && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n \t{\n@@ -13623,6 +13601,12 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t\t\t\t       initialized);\n       if (loc_result == NULL)\n \tloc_result = tls_mem_loc_descriptor (rtl);\n+      if (loc_result == NULL)\n+\t{\n+\t  rtx new_rtl = avoid_constant_pool_reference (rtl);\n+\t  if (new_rtl != rtl)\n+\t    loc_result = loc_descriptor (new_rtl, mode, initialized);\n+\t}\n       break;\n \n     case CONCAT:\n@@ -13897,10 +13881,19 @@ dw_loc_list_1 (tree loc, rtx varloc, int want_address,\n \t  mode = GET_MODE (varloc);\n \t  if (MEM_P (varloc))\n \t    {\n-\t      varloc = XEXP (varloc, 0);\n-\t      have_address = 1;\n+\t      rtx addr = XEXP (varloc, 0);\n+\t      descr = mem_loc_descriptor (addr, mode, initialized);\n+\t      if (descr)\n+\t\thave_address = 1;\n+\t      else\n+\t\t{\n+\t\t  rtx x = avoid_constant_pool_reference (varloc);\n+\t\t  if (x != varloc)\n+\t\t    descr = mem_loc_descriptor (x, mode, initialized);\n+\t\t}\n \t    }\n-\t  descr = mem_loc_descriptor (varloc, mode, initialized);\n+\t  else\n+\t    descr = mem_loc_descriptor (varloc, mode, initialized);\n \t}\n       else\n \treturn 0;"}]}