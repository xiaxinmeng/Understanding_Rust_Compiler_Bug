{"sha": "6ca513f9b24dacf47db395f4dc41d11037810706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhNTEzZjliMjRkYWNmNDdkYjM5NWY0ZGM0MWQxMTAzNzgxMDcwNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-01-27T11:22:30Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2017-01-27T11:22:30Z"}, "message": "[ARM] Fix PR target/79239 - unrecognized insn after pragma gcc pop_options\n\n{committed for rearnsha}\n\nIt turns out that because the compiler uses a hash table to save the\ncl_target_option structures it is unsafe to modify the result of\nbuild_target_option_node() (doing so will cause the hash lookup to\nfail).  This PR was due to not properly understanding this limitation.\n\nThe fix is to create temporary copies of the cl_target_option nodes for\nuse during target option processing and then only creating the tree node\nonce the options have been suitably modified.\n\ngcc:\n        PR target/79239\n        * arm.c (arm_option_override): Don't call build_target_option_node\n        until after doing all option overrides.\n        (arm_valid_target_attribute_tree): Likewise.\n\ngcc/testsuite:\n        * gcc.target/arm/pr79239.c: New test.\n\nFrom-SVN: r244965", "tree": {"sha": "1fd60ff0eee31a4f0c215b265fb2431ef590d8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd60ff0eee31a4f0c215b265fb2431ef590d8c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca513f9b24dacf47db395f4dc41d11037810706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca513f9b24dacf47db395f4dc41d11037810706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca513f9b24dacf47db395f4dc41d11037810706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca513f9b24dacf47db395f4dc41d11037810706/comments", "author": null, "committer": null, "parents": [{"sha": "c7181f1393788572fa451bfd8d45d62c8889dd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7181f1393788572fa451bfd8d45d62c8889dd50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7181f1393788572fa451bfd8d45d62c8889dd50"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "3ef51ca9e8a8514b0b77d5612409203d4a8ae7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ca513f9b24dacf47db395f4dc41d11037810706", "patch": "@@ -1,3 +1,10 @@\n+2017-01-27  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/79239\n+        * arm.c (arm_option_override): Don't call build_target_option_node\n+        until after doing all option overrides.\n+        (arm_valid_target_attribute_tree): Likewise.\n+\n 2017-01-27  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi (-fprofile-arcs): Document profiling support"}, {"sha": "6cae17872a4d87fd836b08b6533e089f32a652fb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6ca513f9b24dacf47db395f4dc41d11037810706", "patch": "@@ -3256,6 +3256,7 @@ arm_option_override (void)\n {\n   static const enum isa_feature fpu_bitlist[] = { ISA_ALL_FPU, isa_nobit };\n   static const enum isa_feature quirk_bitlist[] = { ISA_ALL_QUIRKS, isa_nobit};\n+  cl_target_option opts;\n \n   isa_quirkbits = sbitmap_alloc (isa_num_bits);\n   arm_initialize_isa (isa_quirkbits, quirk_bitlist);\n@@ -3283,14 +3284,9 @@ arm_option_override (void)\n       arm_fpu_index = (enum fpu_type) fpu_index;\n     }\n \n-  /* Create the default target_options structure.  We need this early\n-     to configure the overall build target.  */\n-  target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n-\n-  arm_configure_build_target (&arm_active_target,\n-\t\t\t      TREE_TARGET_OPTION (target_option_default_node),\n-\t\t\t      &global_options_set, true);\n+  cl_target_option_save (&opts, &global_options);\n+  arm_configure_build_target (&arm_active_target, &opts, &global_options_set,\n+\t\t\t      true);\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n@@ -3646,9 +3642,10 @@ arm_option_override (void)\n   arm_option_check_internal (&global_options);\n   arm_option_params_internal ();\n \n-  /* Resynchronize the saved target options.  */\n-  cl_target_option_save (TREE_TARGET_OPTION (target_option_default_node),\n-\t\t\t &global_options);\n+  /* Create the default target_options structure.  */\n+  target_option_default_node = target_option_current_node\n+    = build_target_option_node (&global_options);\n+\n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n \n@@ -30347,22 +30344,18 @@ tree\n arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n \t\t\t\t struct gcc_options *opts_set)\n {\n-  tree t;\n+  struct cl_target_option cl_opts;\n \n   if (!arm_valid_target_attribute_rec (args, opts))\n     return NULL_TREE;\n \n-  t = build_target_option_node (opts);\n-  arm_configure_build_target (&arm_active_target, TREE_TARGET_OPTION (t),\n-\t\t\t      opts_set, false);\n+  cl_target_option_save (&cl_opts, opts);\n+  arm_configure_build_target (&arm_active_target, &cl_opts, opts_set, false);\n   arm_option_check_internal (opts);\n   /* Do any overrides, such as global options arch=xxx.  */\n   arm_option_override_internal (opts, opts_set);\n \n-  /* Resynchronize the saved target options.  */\n-  cl_target_option_save (TREE_TARGET_OPTION (t), opts);\n-\n-  return t;\n+  return build_target_option_node (opts);\n }\n \n static void "}, {"sha": "aaabdf3f197c2ec3679e69cca5ba43d96500c241", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ca513f9b24dacf47db395f4dc41d11037810706", "patch": "@@ -1,3 +1,8 @@\n+2017-01-27  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/79239\n+\t* gcc.target/arm/pr79239.c: New test.\n+\n 2017-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/md/setmem_long-1.c: Remove xfail, skip with -O0."}, {"sha": "d1f1b28510a64b1330f392f3b5330d98da91a789", "filename": "gcc/testsuite/gcc.target/arm/pr79239.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79239.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca513f9b24dacf47db395f4dc41d11037810706/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79239.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79239.c?ref=6ca513f9b24dacf47db395f4dc41d11037810706", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp_ok }  */\n+/* { dg-add-options arm_fp } */\n+\n+#pragma GCC push_options\n+#pragma GCC target \"fpu=crypto-neon-fp-armv8\"\n+int a, b;\n+extern __inline __attribute__((__gnu_inline__)) int fn1() {}\n+\n+#pragma GCC pop_options\n+void\n+fn2() {\n+  if (b * 0.77 + 0.5)\n+    a = 0;\n+}"}]}