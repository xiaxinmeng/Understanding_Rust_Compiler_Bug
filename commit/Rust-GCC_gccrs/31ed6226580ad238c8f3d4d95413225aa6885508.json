{"sha": "31ed6226580ad238c8f3d4d95413225aa6885508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlZDYyMjY1ODBhZDIzOGM4ZjNkNGQ5NTQxMzIyNWFhNjg4NTUwOA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-09-14T17:17:01Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-09-14T17:17:01Z"}, "message": "re PR c++/54427 (Expose more vector extensions)\n\n2012-09-14  Marc Glisse  <marc.glisse@inria.fr>\n\tPR c++/54427\n\ngcc/ChangeLog\n\t* fold-const.c (fold_unary_loc): Disable for VECTOR_TYPE.\n\t(fold_binary_loc): Likewise.\n\t* gimple-fold.c (and_comparisons_1): Handle VECTOR_TYPE.\n\t(or_comparisons_1): Likewise.\n\ngcc/cp/ChangeLog\n\t* typeck.c (cp_build_binary_op) [LSHIFT_EXPR, RSHIFT_EXPR, EQ_EXPR,\n\tNE_EXPR, LE_EXPR, GE_EXPR, LT_EXPR, GT_EXPR]: Handle VECTOR_TYPE.\n\ngcc/testsuite/ChangeLog\n\t* g++.dg/other/vector-compare.C: New testcase.\n\t* gcc/testsuite/c-c++-common/vector-compare-3.c: New testcase.\n\t* gcc.dg/vector-shift.c: Move ...\n\t* c-c++-common/vector-shift.c: ... here.\n\t* gcc.dg/vector-shift1.c: Move ...\n\t* c-c++-common/vector-shift1.c: ... here.\n\t* gcc.dg/vector-shift3.c: Move ...\n\t* c-c++-common/vector-shift3.c: ... here.\n\t* gcc.dg/vector-compare-1.c: Move ...\n\t* c-c++-common/vector-compare-1.c: ... here.\n\t* gcc.dg/vector-compare-2.c: Move ...\n\t* c-c++-common/vector-compare-2.c: ... here.\n\t* gcc.c-torture/execute/vector-compare-1.c: Move ...\n\t* c-c++-common/torture/vector-compare-1.c: ... here.\n\t* gcc.c-torture/execute/vector-compare-2.x: Delete.\n\t* gcc.c-torture/execute/vector-compare-2.c: Move ...\n\t* c-c++-common/torture/vector-compare-2.c: ... here.\n\t* gcc.c-torture/execute/vector-shift.c: Move ...\n\t* c-c++-common/torture/vector-shift.c: ... here.\n\t* gcc.c-torture/execute/vector-shift2.c: Move ...\n\t* c-c++-common/torture/vector-shift2.c: ... here.\n\t* gcc.c-torture/execute/vector-subscript-1.c: Move ...\n\t* c-c++-common/torture/vector-subscript-1.c: ... here.\n\t* gcc.c-torture/execute/vector-subscript-2.c: Move ...\n\t* c-c++-common/torture/vector-subscript-2.c: ... here.\n\t* gcc.c-torture/execute/vector-subscript-3.c: Move ...\n\t* c-c++-common/torture/vector-subscript-3.c: ... here.\n\nFrom-SVN: r191308", "tree": {"sha": "fd2bfcf1c245dc3f7d041ac30f6b07952c2c22fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2bfcf1c245dc3f7d041ac30f6b07952c2c22fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ed6226580ad238c8f3d4d95413225aa6885508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed6226580ad238c8f3d4d95413225aa6885508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ed6226580ad238c8f3d4d95413225aa6885508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed6226580ad238c8f3d4d95413225aa6885508/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0290430b751b0f2d3a086d36475d4ceda5a5098e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0290430b751b0f2d3a086d36475d4ceda5a5098e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0290430b751b0f2d3a086d36475d4ceda5a5098e"}], "stats": {"total": 230, "additions": 206, "deletions": 24}, "files": [{"sha": "9c6b378db35a3960181280a3025e075efcfc7825", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,11 @@\n+2012-09-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* fold-const.c (fold_unary_loc): Disable for VECTOR_TYPE.\n+\t(fold_binary_loc): Likewise.\n+\t* gimple-fold.c (and_comparisons_1): Handle VECTOR_TYPE.\n+\t(or_comparisons_1): Likewise.\n+\n 2012-09-14  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/54516"}, {"sha": "f70b46673b3159102bacbf5cc02cf928ac7fc42d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,9 @@\n+2012-09-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* typeck.c (cp_build_binary_op) [LSHIFT_EXPR, RSHIFT_EXPR, EQ_EXPR,\n+\tNE_EXPR, LE_EXPR, GE_EXPR, LT_EXPR, GT_EXPR]: Handle VECTOR_TYPE.\n+\n 2012-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (make_typename_type): Only error out if tf_error is set"}, {"sha": "ad4b0903d6725f3e5480afb94f1ce6081159d6c9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -3985,7 +3985,15 @@ cp_build_binary_op (location_t location,\n \t Also set SHORT_SHIFT if shifting rightward.  */\n \n     case RSHIFT_EXPR:\n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t{\n+\t  result_type = type0;\n+\t  converted = 1;\n+\t}\n+      else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n@@ -4014,7 +4022,15 @@ cp_build_binary_op (location_t location,\n       break;\n \n     case LSHIFT_EXPR:\n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t{\n+\t  result_type = type0;\n+\t  converted = 1;\n+\t}\n+      else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n@@ -4072,6 +4088,8 @@ cp_build_binary_op (location_t location,\n \n     case EQ_EXPR:\n     case NE_EXPR:\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n+\tgoto vector_compare;\n       if ((complain & tf_warning)\n \t  && (FLOAT_TYPE_P (type0) || FLOAT_TYPE_P (type1)))\n \twarning (OPT_Wfloat_equal,\n@@ -4314,6 +4332,35 @@ cp_build_binary_op (location_t location,\n \t    warning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n \t}\n \n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n+\t{\n+\tvector_compare:\n+\t  tree intt;\n+\t  if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n+\t\t\t\t\t\t\t  TREE_TYPE (type1)))\n+\t    {\n+\t      error_at (location, \"comparing vectors with different \"\n+\t\t\t\t  \"element types\");\n+\t      inform (location, \"operand types are %qT and %qT\", type0, type1);\n+\t      return error_mark_node;\n+\t    }\n+\n+\t  if (TYPE_VECTOR_SUBPARTS (type0) != TYPE_VECTOR_SUBPARTS (type1))\n+\t    {\n+\t      error_at (location, \"comparing vectors with different \"\n+\t\t\t\t  \"number of elements\");\n+\t      inform (location, \"operand types are %qT and %qT\", type0, type1);\n+\t      return error_mark_node;\n+\t    }\n+\n+\t  /* Always construct signed integer vector type.  */\n+\t  intt = c_common_type_for_size (GET_MODE_BITSIZE\n+\t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n+\t  result_type = build_opaque_vector_type (intt,\n+\t\t\t\t\t\t  TYPE_VECTOR_SUBPARTS (type0));\n+\t  converted = 1;\n+\t  break;\n+\t}\n       build_type = boolean_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == ENUMERAL_TYPE)"}, {"sha": "c76e7ff68d36fd9138a2ad67ac0f87851407537f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -7771,7 +7771,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t    return build2_loc (loc, TREE_CODE (op0), type,\n \t\t\t       TREE_OPERAND (op0, 0),\n \t\t\t       TREE_OPERAND (op0, 1));\n-\t  else if (!INTEGRAL_TYPE_P (type))\n+\t  else if (!INTEGRAL_TYPE_P (type) && TREE_CODE (type) != VECTOR_TYPE)\n \t    return build3_loc (loc, COND_EXPR, type, op0,\n \t\t\t       constant_boolean_node (true, type),\n \t\t\t       constant_boolean_node (false, type));\n@@ -9829,6 +9829,7 @@ fold_binary_loc (location_t loc,\n \n   if ((code == BIT_AND_EXPR || code == BIT_IOR_EXPR\n        || code == EQ_EXPR || code == NE_EXPR)\n+      && TREE_CODE (type) != VECTOR_TYPE\n       && ((truth_value_p (TREE_CODE (arg0))\n \t   && (truth_value_p (TREE_CODE (arg1))\n \t       || (TREE_CODE (arg1) == BIT_AND_EXPR"}, {"sha": "4dba726f274af966345af20833733148502a6261", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n #include \"gimple-fold.h\"\n+#include \"langhooks.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -1692,14 +1693,24 @@ static tree\n and_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n \t\t   enum tree_code code2, tree op2a, tree op2b)\n {\n+  tree truth_type = boolean_type_node;\n+  if (TREE_CODE (TREE_TYPE (op1a)) == VECTOR_TYPE)\n+    {\n+      tree vec_type = TREE_TYPE (op1a);\n+      tree elem = lang_hooks.types.type_for_size\n+\t(GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vec_type))), 0);\n+      truth_type = build_opaque_vector_type (elem,\n+\t\t\t\t\t     TYPE_VECTOR_SUBPARTS (vec_type));\n+    }\n+\n   /* First check for ((x CODE1 y) AND (x CODE2 y)).  */\n   if (operand_equal_p (op1a, op2a, 0)\n       && operand_equal_p (op1b, op2b, 0))\n     {\n       /* Result will be either NULL_TREE, or a combined comparison.  */\n       tree t = combine_comparisons (UNKNOWN_LOCATION,\n \t\t\t\t    TRUTH_ANDIF_EXPR, code1, code2,\n-\t\t\t\t    boolean_type_node, op1a, op1b);\n+\t\t\t\t    truth_type, op1a, op1b);\n       if (t)\n \treturn t;\n     }\n@@ -1712,7 +1723,7 @@ and_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n       tree t = combine_comparisons (UNKNOWN_LOCATION,\n \t\t\t\t    TRUTH_ANDIF_EXPR, code1,\n \t\t\t\t    swap_tree_comparison (code2),\n-\t\t\t\t    boolean_type_node, op1a, op1b);\n+\t\t\t\t    truth_type, op1a, op1b);\n       if (t)\n \treturn t;\n     }\n@@ -2154,14 +2165,24 @@ static tree\n or_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n \t\t  enum tree_code code2, tree op2a, tree op2b)\n {\n+  tree truth_type = boolean_type_node;\n+  if (TREE_CODE (TREE_TYPE (op1a)) == VECTOR_TYPE)\n+    {\n+      tree vec_type = TREE_TYPE (op1a);\n+      tree elem = lang_hooks.types.type_for_size\n+\t(GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vec_type))), 0);\n+      truth_type = build_opaque_vector_type (elem,\n+\t\t\t\t\t     TYPE_VECTOR_SUBPARTS (vec_type));\n+    }\n+\n   /* First check for ((x CODE1 y) OR (x CODE2 y)).  */\n   if (operand_equal_p (op1a, op2a, 0)\n       && operand_equal_p (op1b, op2b, 0))\n     {\n       /* Result will be either NULL_TREE, or a combined comparison.  */\n       tree t = combine_comparisons (UNKNOWN_LOCATION,\n \t\t\t\t    TRUTH_ORIF_EXPR, code1, code2,\n-\t\t\t\t    boolean_type_node, op1a, op1b);\n+\t\t\t\t    truth_type, op1a, op1b);\n       if (t)\n \treturn t;\n     }\n@@ -2174,7 +2195,7 @@ or_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n       tree t = combine_comparisons (UNKNOWN_LOCATION,\n \t\t\t\t    TRUTH_ORIF_EXPR, code1,\n \t\t\t\t    swap_tree_comparison (code2),\n-\t\t\t\t    boolean_type_node, op1a, op1b);\n+\t\t\t\t    truth_type, op1a, op1b);\n       if (t)\n \treturn t;\n     }"}, {"sha": "4a9715ea5dbb9b65f4f1f640baa5ffb1b3d22887", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,34 @@\n+2012-09-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* g++.dg/other/vector-compare.C: New testcase.\n+\t* gcc/testsuite/c-c++-common/vector-compare-3.c: New testcase.\n+\t* gcc.dg/vector-shift.c: Move ...\n+\t* c-c++-common/vector-shift.c: ... here.\n+\t* gcc.dg/vector-shift1.c: Move ...\n+\t* c-c++-common/vector-shift1.c: ... here.\n+\t* gcc.dg/vector-shift3.c: Move ...\n+\t* c-c++-common/vector-shift3.c: ... here.\n+\t* gcc.dg/vector-compare-1.c: Move ...\n+\t* c-c++-common/vector-compare-1.c: ... here.\n+\t* gcc.dg/vector-compare-2.c: Move ...\n+\t* c-c++-common/vector-compare-2.c: ... here.\n+\t* gcc.c-torture/execute/vector-compare-1.c: Move ...\n+\t* c-c++-common/torture/vector-compare-1.c: ... here.\n+\t* gcc.c-torture/execute/vector-compare-2.x: Delete.\n+\t* gcc.c-torture/execute/vector-compare-2.c: Move ...\n+\t* c-c++-common/torture/vector-compare-2.c: ... here.\n+\t* gcc.c-torture/execute/vector-shift.c: Move ...\n+\t* c-c++-common/torture/vector-shift.c: ... here.\n+\t* gcc.c-torture/execute/vector-shift2.c: Move ...\n+\t* c-c++-common/torture/vector-shift2.c: ... here.\n+\t* gcc.c-torture/execute/vector-subscript-1.c: Move ...\n+\t* c-c++-common/torture/vector-subscript-1.c: ... here.\n+\t* gcc.c-torture/execute/vector-subscript-2.c: Move ...\n+\t* c-c++-common/torture/vector-subscript-2.c: ... here.\n+\t* gcc.c-torture/execute/vector-subscript-3.c: Move ...\n+\t* c-c++-common/torture/vector-subscript-3.c: ... here.\n+\n 2012-09-14  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/54103"}, {"sha": "4cdfcf718c128c8955065ea30837add085fe25db", "filename": "gcc/testsuite/c-c++-common/torture/vector-compare-1.c", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-1.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do run } */\n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n \n@@ -38,7 +39,7 @@ int main (int argc, char *argv[]) {\n     vector (4, int) ires;\n     int i;\n \n-    i0 = (vector (4, INT)){argc, 1,  2,  10};\n+    i0 = (vector (4, INT)){(INT)argc, 1,  2,  10};\n     i1 = (vector (4, INT)){0, 3, 2, (INT)-23};\n     test (4, i0, i1, ires, \"%i\");\n #undef INT\n@@ -48,7 +49,7 @@ int main (int argc, char *argv[]) {\n     vector (4, INT) u0;\n     vector (4, INT) u1;\n \n-    u0 = (vector (4, INT)){argc, 1,  2,  10};\n+    u0 = (vector (4, INT)){(INT)argc, 1,  2,  10};\n     u1 = (vector (4, INT)){0, 3, 2, (INT)-23};\n     test (4, u0, u1, ures, \"%u\");\n #undef INT\n@@ -59,7 +60,7 @@ int main (int argc, char *argv[]) {\n     vector (8, SHORT) s1;\n     vector (8, short) sres;\n \n-    s0 = (vector (8, SHORT)){argc, 1,  2,  10,  6, 87, (SHORT)-5, 2};\n+    s0 = (vector (8, SHORT)){(SHORT)argc, 1,  2,  10,  6, 87, (SHORT)-5, 2};\n     s1 = (vector (8, SHORT)){0, 3, 2, (SHORT)-23, 12, 10, (SHORT)-2, 0};\n     test (8, s0, s1, sres, \"%i\");\n #undef SHORT\n@@ -69,7 +70,7 @@ int main (int argc, char *argv[]) {\n     vector (8, SHORT) us1;\n     vector (8, short) usres;\n \n-    us0 = (vector (8, SHORT)){argc, 1,  2,  10,  6, 87, (SHORT)-5, 2};\n+    us0 = (vector (8, SHORT)){(SHORT)argc, 1,  2,  10,  6, 87, (SHORT)-5, 2};\n     us1 = (vector (8, SHORT)){0, 3, 2, (SHORT)-23, 12, 10, (SHORT)-2, 0};\n     test (8, us0, us1, usres, \"%u\");\n #undef SHORT\n@@ -79,8 +80,8 @@ int main (int argc, char *argv[]) {\n     vector (16, CHAR) c1;\n     vector (16, signed char) cres;\n \n-    c0 = (vector (16, CHAR)){argc, 1,  2,  10,  6, 87, (CHAR)-5, 2, \\\n-                             argc, 1,  2,  10,  6, 87, (CHAR)-5, 2 };\n+    c0 = (vector (16, CHAR)){(CHAR)argc, 1,  2,  10,  6, 87, (CHAR)-5, 2, \\\n+                             (CHAR)argc, 1,  2,  10,  6, 87, (CHAR)-5, 2 };\n \n     c1 = (vector (16, CHAR)){0, 3, 2, (CHAR)-23, 12, 10, (CHAR)-2, 0, \\\n                              0, 3, 2, (CHAR)-23, 12, 10, (CHAR)-2, 0};\n@@ -92,8 +93,8 @@ int main (int argc, char *argv[]) {\n     vector (16, CHAR) uc1;\n     vector (16, signed char) ucres;\n \n-    uc0 = (vector (16, CHAR)){argc, 1,  2,  10,  6, 87, (CHAR)-5, 2, \\\n-                             argc, 1,  2,  10,  6, 87, (CHAR)-5, 2 };\n+    uc0 = (vector (16, CHAR)){(CHAR)argc, 1,  2,  10,  6, 87, (CHAR)-5, 2, \\\n+                              (CHAR)argc, 1,  2,  10,  6, 87, (CHAR)-5, 2 };\n \n     uc1 = (vector (16, CHAR)){0, 3, 2, (CHAR)-23, 12, 10, (CHAR)-2, 0, \\\n                              0, 3, 2, (CHAR)-23, 12, 10, (CHAR)-2, 0};", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-compare-1.c"}, {"sha": "45453e6b98dc54d3e1822b6cb80394ae4a4dc58f", "filename": "gcc/testsuite/c-c++-common/torture/vector-compare-2.c", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-compare-2.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Wno-psabi\" } */\n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n ", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-compare-2.c"}, {"sha": "f690b7c3d6e6824dc8d695ee546554aacacfc1b4", "filename": "gcc/testsuite/c-c++-common/torture/vector-shift.c", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do run } */\n \n #define vector __attribute__((vector_size(sizeof(int)*4) ))\n \n@@ -16,7 +17,7 @@ static vector unsigned int unumbersrightshiftallones = {0, 0, 1, 1};\n \n #define TEST(result, expected) \\\n do { \\\n-  typeof(result) result1 = result; \\\n+  __typeof__(result) result1 = result; \\\n   if(sizeof (result1) != sizeof (expected)) \\\n     __builtin_abort (); \\\n   if (__builtin_memcmp (&result1, &expected, sizeof(result1)) != 0) \\", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift.c"}, {"sha": "d3a2ef87cd58c7e05fc54bf6e5ef45ae9d838060", "filename": "gcc/testsuite/c-c++-common/torture/vector-shift2.c", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift2.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do run } */\n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n ", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift2.c"}, {"sha": "bb1350ebedcb7febcb159b69e5fefad46cab88af", "filename": "gcc/testsuite/c-c++-common/torture/vector-subscript-1.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-1.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,4 +1,4 @@\n-/* dg-do run */\n+/* { dg-do run } */\n #define vector __attribute__((vector_size(sizeof(int)*4) ))\n \n /* Check to make sure that we extract and insert the vector at the same", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-1.c"}, {"sha": "2e4a7488bbe864fc33e9c18fcffc947e85ba7b83", "filename": "gcc/testsuite/c-c++-common/torture/vector-subscript-2.c", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-2.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do run } */\n #define vector __attribute__((vector_size(sizeof(int)*4) ))\n \n /* Check to make sure that we extract and insert the vector at the same", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-2.c"}, {"sha": "bb5c91485d77624fe8db3eb74d03b60d0ea85649", "filename": "gcc/testsuite/c-c++-common/torture/vector-subscript-3.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-subscript-3.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,4 +1,4 @@\n-/* dg-do run */\n+/* { dg-do run } */\n #define vector __attribute__((vector_size(16) ))\n \n /* Check whether register declaration of vector type still ", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-3.c"}, {"sha": "ef99ae472dc45c2c484222929e23e907efd0d8e8", "filename": "gcc/testsuite/c-c++-common/vector-compare-1.c", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-1.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mabi=altivec\" { target { { powerpc*-*-linux* } && ilp32 } } } */\n+/* { dg-prune-output \"operand types are\" } */\n \n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n@@ -14,6 +15,6 @@ foo (vector (4, int) x, vector (4, float) y)\n   vector (4, float) f4;\n   \n   r4 = x > y;\t    /* { dg-error \"comparing vectors with different element types\" } */\n-  r8 = (x != p4);   /* { dg-error \"incompatible types when assigning to type\" } */\n+  r8 = (x != p4);   /* { dg-error \"incompatible types when assigning to type|cannot convert\" } */\n   r8 == r4;\t    /* { dg-error \"comparing vectors with different number of elements\" } */\n }", "previous_filename": "gcc/testsuite/gcc.dg/vector-compare-1.c"}, {"sha": "8cbcf0787c4762199e233f5a0bf84f698c1fbe75", "filename": "gcc/testsuite/c-c++-common/vector-compare-2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-2.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "previous_filename": "gcc/testsuite/gcc.dg/vector-compare-2.c"}, {"sha": "d6b0dac7cb9f29487c7f88366f9d750b448c41dd", "filename": "gcc/testsuite/c-c++-common/vector-compare-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-3.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int v4i __attribute__((vector_size(4*sizeof(int))));\n+\n+// fold should not turn (vec_other)(x<y) into (x<y)?vec_other(-1):vec_other(0).\n+\n+void use (v4i const *z);\n+\n+void\n+f (v4i *x, v4i *y)\n+{\n+  v4i const zz = *x < *y;\n+  use (&zz);\n+}\n+\n+// Optimizations shouldn't introduce a boolean type in there\n+\n+void\n+g (v4i *x, v4i const *y, v4i *z, v4i *t)\n+{\n+  *z = *x < *y | *x == *y;\n+  *t = *x < *y & *x > *y;\n+}\n+"}, {"sha": "593bb36694387cd4639e4ba2d482cefa5b0ed64e", "filename": "gcc/testsuite/c-c++-common/vector-shift.c", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-prune-output \"in evaluation of\" } */\n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n ", "previous_filename": "gcc/testsuite/gcc.dg/vector-shift.c"}, {"sha": "db8035667a95ec4a107c1be446454cc0cd9699c0", "filename": "gcc/testsuite/c-c++-common/vector-shift1.c", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift1.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-prune-output \"in evaluation of\" } */\n #define vector(elcount, type)  \\\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n \n@@ -11,7 +12,7 @@ int main (int argc, char *argv[]) {\n     vint <<= vfloat0;  /* { dg-error \"nvalid operands to binary <<\" } */\n     vfloat0 >>= vint;  /* { dg-error \"nvalid operands to binary >>\" } */\n \n-    vfloat0 <<= vfloat1;  /* { dg-error \"nvalid operands to binary <<\" } */\n+    vfloat0 <<= vfloat1;  /* { dg-error \"nvalid operands\" } */\n \n     return 0;\n }", "previous_filename": "gcc/testsuite/gcc.dg/vector-shift1.c"}, {"sha": "c26fb8d98ca9e0dd6946bf07da92febc3f055b81", "filename": "gcc/testsuite/c-c++-common/vector-shift3.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-shift3.c?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -5,11 +5,11 @@ __attribute__((vector_size((elcount)*sizeof(type)))) type\n \n \n int main (int argc, char *argv[]) {\n-    vector(8, short) v0 = {argc,2,3,4,5,6,7};\n+    vector(8, short) v0 = {(short)argc,2,3,4,5,6,7};\n     short sc;\n \n     \n-    scalar1 <<= v0; /* { dg-error \".*scalar1.*undeclared\" } */\n+    scalar1 <<= v0; /* { dg-error \"scalar1.*(undeclared|was not declared)\" } */\n    \n     return 0;\n }", "previous_filename": "gcc/testsuite/gcc.dg/vector-shift3.c"}, {"sha": "b2d1ecbc5ed6158ee8cff9d1bbfce54726a87dae", "filename": "gcc/testsuite/g++.dg/other/vector-compare.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed6226580ad238c8f3d4d95413225aa6885508/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C?ref=31ed6226580ad238c8f3d4d95413225aa6885508", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu++11 -Wall\" } */\n+\n+// Check that we can compare vector types that really are the same through\n+// typedefs.\n+\n+typedef float v4f __attribute__((vector_size(4*sizeof(float))));\n+\n+template <class T> void eat (T&&) {}\n+\n+template <class T, int n>\n+struct Vec\n+{\n+  typedef T type __attribute__((vector_size(4*sizeof(T))));\n+\n+  template <class U>\n+  static void fun (type const& t, U& u) { eat (t > u); }\n+};\n+\n+long long\n+f (v4f *x, v4f const *y)\n+{\n+  return ((*x < *y) | (*x <= *y))[2];\n+}\n+\n+int main ()\n+{\n+  v4f x = {0,1,2,3};\n+  Vec<const volatile float,4>::type f = {-1,5,2,3.1};\n+  auto c = (x == f) == (x >= x);\n+  eat (c[3]);\n+  Vec<const volatile float,4>::fun (f, x);\n+  Vec<const volatile float,4>::fun (x, f);\n+  Vec<const volatile float,4>::fun (f, f);\n+  Vec<const volatile float,4>::fun (x, x);\n+}"}, {"sha": "cb7b119b8cb171c2882eb5f6f6073ebf806f1b71", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-compare-2.x", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0290430b751b0f2d3a086d36475d4ceda5a5098e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-compare-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0290430b751b0f2d3a086d36475d4ceda5a5098e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-compare-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-compare-2.x?ref=0290430b751b0f2d3a086d36475d4ceda5a5098e", "patch": "@@ -1,2 +0,0 @@\n-set additional_flags \"-Wno-psabi\"\n-return 0"}]}