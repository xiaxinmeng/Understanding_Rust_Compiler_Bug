{"sha": "b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ZjUzMzhkOTIwY2MyMzY1YTBlM2YwOWRjN2NlZmUyYmQ2MjU4ZQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-08-19T12:55:00Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-08-19T12:55:00Z"}, "message": "re PR c++/11174 (derived class can access protected base class member function through pointer to member function)\n\n\tPR c++/11174\n\t* init.c (build_offset_ref): Perform access checking for\n\tpointer to member correctly.\n\n\t* g++.dg/parse/access4.C: New test.\n\t* g++.dg/parse/access5.C: Likewise.\n\t* g++.old-deja/g++.jason/access17.C: Adjust error message.\n\nFrom-SVN: r70566", "tree": {"sha": "2af4698f783f34d32d20523a83a198c5df2680ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af4698f783f34d32d20523a83a198c5df2680ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/comments", "author": null, "committer": null, "parents": [{"sha": "3ab37c7de76a6e34d40c9c9bd9a0101d9accfb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab37c7de76a6e34d40c9c9bd9a0101d9accfb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab37c7de76a6e34d40c9c9bd9a0101d9accfb33"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "958f53fa75836835a9b17abfaa4ca230474d0b4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -1,3 +1,9 @@\n+2003-08-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/11174\n+\t* init.c (build_offset_ref): Perform access checking for\n+\tpointer to member correctly.\n+\n 2003-08-19  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cp-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTICS): Fix spelling."}, {"sha": "032959c7152316c571db9d55c44a5c1fc2fbaf9d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -1502,8 +1502,20 @@ build_offset_ref (tree type, tree name, bool address_p)\n \t  /* Get rid of a potential OVERLOAD around it */\n \t  t = OVL_CURRENT (t);\n \n-\t  /* unique functions are handled easily.  */\n-\t  perform_or_defer_access_check (basebinfo, t);\n+\t  /* Unique functions are handled easily.  */\n+\n+\t  /* For non-static member of base class, we need a special rule\n+\t     for access checking [class.protected]:\n+\n+\t       If the access is to form a pointer to member, the\n+\t       nested-name-specifier shall name the derived class\n+\t       (or any class derived from that class).  */\n+\t  if (address_p && DECL_P (t)\n+\t      && DECL_NONSTATIC_MEMBER_P (t))\n+\t    perform_or_defer_access_check (TYPE_BINFO (type), t);\n+\t  else\n+\t    perform_or_defer_access_check (basebinfo, t);\n+\n \t  mark_used (t);\n \t  if (DECL_STATIC_FUNCTION_P (t))\n \t    return t;\n@@ -1515,6 +1527,11 @@ build_offset_ref (tree type, tree name, bool address_p)\n \t  member = fnfields;\n \t}\n     }\n+  else if (address_p && TREE_CODE (member) == FIELD_DECL)\n+    /* We need additional test besides the one in\n+       check_accessibility_of_qualified_id in case it is\n+       a pointer to non-static member.  */\n+    perform_or_defer_access_check (TYPE_BINFO (type), member);\n \n   if (!address_p)\n     {"}, {"sha": "7bce0ed0bb05f9331a99d994f1a3d7720b37a215", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -1,3 +1,10 @@\n+2003-08-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/11174\n+\t* g++.dg/parse/access4.C: New test.\n+\t* g++.dg/parse/access5.C: Likewise.\n+\t* g++.old-deja/g++.jason/access17.C: Adjust error message.\n+\n 2003-08-18  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* gcc.dg/noncompile/20030818-1.c: New."}, {"sha": "d3870bd3497f4d19c2a8088a74c8867a4409f9b9", "filename": "gcc/testsuite/g++.dg/parse/access4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess4.C?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+\n+// Origin: Mike Reed <mike.reed@amadron.com>\n+\n+// PR c++/11174: Access checking of pointer-to-member function\n+\n+class A {\n+protected:\n+  void foo() {}\t\t\t// { dg-error \"protected\" }\n+public:\n+  A();\n+};\n+\n+class B : public A {\n+  void bar() {\n+    A a;\n+    void (A::*pmf)() = &A::foo;\t// { dg-error \"this context\" }\n+    (a.*pmf)();\n+  }\n+};"}, {"sha": "cd1789eedda0c5d31127e07db9158406ff4607af", "filename": "gcc/testsuite/g++.dg/parse/access5.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess5.C?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+\n+// Origin: Giovanni Bajo <giovannibajo@libero.it>\n+\n+// PR c++/11174: Access checking on pointer to member data.\n+\n+struct A \n+{\n+protected:\n+  int a;\t\t\t// { dg-error \"protected\" }\n+};\n+\n+struct B : A \n+{\n+  void foo() {\n+    (void)&A::a;\t\t// { dg-error \"this context\" }\n+  }\n+};"}, {"sha": "ec8949d77df71f16659e74b523911e27d62023fd", "filename": "gcc/testsuite/g++.old-deja/g++.jason/access17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54f5338d920cc2365a0e3f09dc7cefe2bd6258e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess17.C?ref=b54f5338d920cc2365a0e3f09dc7cefe2bd6258e", "patch": "@@ -13,7 +13,7 @@ struct B: public A {\n };\n \n int A::* B::p = &A::i;         // { dg-error \"\" } \n-int (A::* B::fp)() = &A::f;    // ERROR -\n+int (A::* B::fp)() = &A::f;    // { dg-error \"\" }\n \n struct C {\n   static int A::*p;"}]}