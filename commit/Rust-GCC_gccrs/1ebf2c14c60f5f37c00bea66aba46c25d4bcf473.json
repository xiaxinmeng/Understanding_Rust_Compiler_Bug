{"sha": "1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "node_id": "C_kwDOANBUbNoAKDFlYmYyYzE0YzYwZjVmMzdjMDBiZWE2NmFiYTQ2YzI1ZDRiY2Y0NzM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-07T12:24:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-07T12:28:00Z"}, "message": "tree-optimization/102608 - avoid CSEing .DEFERRED_INIT\n\nThis makes VN not CSE .DEFERRED_INIT which confuses uninit\nanalysis which reports the wrong decl when facing copies\nof not initialized data.\n\n2021-10-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102608\n\t* tree-ssa-sccvn.c (visit_stmt): Drop .DEFERRED_INIT to\n\tvarying.", "tree": {"sha": "43929737d78740d78c40566d03b5f3a18b0666ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43929737d78740d78c40566d03b5f3a18b0666ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fcf7f6800ffde9fd5ebc06e03937f55f80f68ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fcf7f6800ffde9fd5ebc06e03937f55f80f68ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fcf7f6800ffde9fd5ebc06e03937f55f80f68ec"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "ae0172a143e5f1476fe2d67efa9bfba147f33a50", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "patch": "@@ -5668,27 +5668,30 @@ visit_stmt (gimple *stmt, bool backedges_varying_p = false)\n \t      && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL)\n \t    extra_fnflags = flags_from_decl_or_type (TREE_OPERAND (fn, 0));\n \t}\n-      if (/* Calls to the same function with the same vuse\n-\t     and the same operands do not necessarily return the same\n-\t     value, unless they're pure or const.  */\n-\t  ((gimple_call_flags (call_stmt) | extra_fnflags)\n-\t   & (ECF_PURE | ECF_CONST))\n-\t  /* If calls have a vdef, subsequent calls won't have\n-\t     the same incoming vuse.  So, if 2 calls with vdef have the\n-\t     same vuse, we know they're not subsequent.\n-\t     We can value number 2 calls to the same function with the\n-\t     same vuse and the same operands which are not subsequent\n-\t     the same, because there is no code in the program that can\n-\t     compare the 2 values...  */\n-\t  || (gimple_vdef (call_stmt)\n-\t      /* ... unless the call returns a pointer which does\n-\t\t not alias with anything else.  In which case the\n-\t\t information that the values are distinct are encoded\n-\t\t in the IL.  */\n-\t      && !(gimple_call_return_flags (call_stmt) & ERF_NOALIAS)\n-\t      /* Only perform the following when being called from PRE\n-\t\t which embeds tail merging.  */\n-\t      && default_vn_walk_kind == VN_WALK))\n+      if ((/* Calls to the same function with the same vuse\n+\t      and the same operands do not necessarily return the same\n+\t      value, unless they're pure or const.  */\n+\t   ((gimple_call_flags (call_stmt) | extra_fnflags)\n+\t    & (ECF_PURE | ECF_CONST))\n+\t   /* If calls have a vdef, subsequent calls won't have\n+\t      the same incoming vuse.  So, if 2 calls with vdef have the\n+\t      same vuse, we know they're not subsequent.\n+\t      We can value number 2 calls to the same function with the\n+\t      same vuse and the same operands which are not subsequent\n+\t      the same, because there is no code in the program that can\n+\t      compare the 2 values...  */\n+\t   || (gimple_vdef (call_stmt)\n+\t       /* ... unless the call returns a pointer which does\n+\t\t  not alias with anything else.  In which case the\n+\t\t  information that the values are distinct are encoded\n+\t\t  in the IL.  */\n+\t       && !(gimple_call_return_flags (call_stmt) & ERF_NOALIAS)\n+\t       /* Only perform the following when being called from PRE\n+\t\t  which embeds tail merging.  */\n+\t       && default_vn_walk_kind == VN_WALK))\n+\t  /* Do not process .DEFERRED_INIT since that confuses uninit\n+\t     analysis.  */\n+\t  && !gimple_call_internal_p (call_stmt, IFN_DEFERRED_INIT))\n \tchanged = visit_reference_op_call (lhs, call_stmt);\n       else\n \tchanged = defs_to_varying (call_stmt);"}]}