{"sha": "8145e6a0cc1742d77feea78f08a004358ec1e6ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0NWU2YTBjYzE3NDJkNzdmZWVhNzhmMDhhMDA0MzU4ZWMxZTZlYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-10-25T16:34:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-10-25T16:34:36Z"}, "message": "extend.texi (aligned): Expand attribute description.\n\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (aligned): Expand attribute description.\n\t(Alignment): Rename section.  Discuss function arguments.\n\nFrom-SVN: r265498", "tree": {"sha": "d9821225926c6d98b58ad33b73c0381b227745ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9821225926c6d98b58ad33b73c0381b227745ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8145e6a0cc1742d77feea78f08a004358ec1e6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8145e6a0cc1742d77feea78f08a004358ec1e6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8145e6a0cc1742d77feea78f08a004358ec1e6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8145e6a0cc1742d77feea78f08a004358ec1e6ea/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30e874615f3fd9ae1c8024b68cd63b20f2115103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e874615f3fd9ae1c8024b68cd63b20f2115103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e874615f3fd9ae1c8024b68cd63b20f2115103"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "174bcbaee4db574a919f2d94f95fc6a7742d5032", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8145e6a0cc1742d77feea78f08a004358ec1e6ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8145e6a0cc1742d77feea78f08a004358ec1e6ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8145e6a0cc1742d77feea78f08a004358ec1e6ea", "patch": "@@ -1,3 +1,8 @@\n+2018-10-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (aligned): Expand attribute description.\n+\t(Alignment): Rename section.  Discuss function arguments.\n+\n 2018-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-devirt.c (main_odr_variant): Remove."}, {"sha": "edf87118147f645feba3d31feb4137c060c65fa2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8145e6a0cc1742d77feea78f08a004358ec1e6ea/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8145e6a0cc1742d77feea78f08a004358ec1e6ea/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8145e6a0cc1742d77feea78f08a004358ec1e6ea", "patch": "@@ -66,7 +66,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * C++ Comments::        C++ comments are recognized.\n * Dollar Signs::        Dollar sign is allowed in identifiers.\n * Character Escapes::   @samp{\\e} stands for the character @key{ESC}.\n-* Alignment::           Inquiring about the alignment of a type or variable.\n+* Alignment::           Determining the alignment of a function, type or variable.\n * Inline::              Defining inline functions (as fast as macros).\n * Volatiles::           What constitutes an access to a volatile object.\n * Using Assembly Language with C:: Instructions and extensions for interfacing C with assembler.\n@@ -2380,10 +2380,14 @@ is not defined in the same translation unit.\n This attribute requires assembler and object file support,\n and may not be available on all targets.\n \n-@item aligned (@var{alignment})\n+@item aligned\n+@itemx aligned (@var{alignment})\n @cindex @code{aligned} function attribute\n-This attribute specifies a minimum alignment for the function,\n-measured in bytes.\n+The @code{aligned} attribute specifies a minimum alignment for\n+the function, measured in bytes.  When specified, @var{alignment} must\n+be an integer constant power of 2.  Specifying no @var{alignment} argument\n+implies the maximum alignment for the target, which is often, but by no\n+means always, 8 or 16 bytes.\n \n You cannot use this attribute to decrease the alignment of a function,\n only to increase it.  However, when you explicitly specify a function\n@@ -6016,9 +6020,15 @@ The following attributes are supported on most targets.\n \n @table @code\n @cindex @code{aligned} variable attribute\n-@item aligned (@var{alignment})\n-This attribute specifies a minimum alignment for the variable or\n-structure field, measured in bytes.  For example, the declaration:\n+@item aligned\n+@itemx aligned (@var{alignment})\n+The @code{aligned} attribute specifies a minimum alignment for the variable\n+or structure field, measured in bytes.  When specified, @var{alignment} must\n+be an integer constant power of 2.  Specifying no @var{alignment} argument\n+implies the maximum alignment for the target, which is often, but by no\n+means always, 8 or 16 bytes.\n+\n+For example, the declaration:\n \n @smallexample\n int x __attribute__ ((aligned (16))) = 0;\n@@ -6945,9 +6955,13 @@ The following type attributes are supported on most targets.\n \n @table @code\n @cindex @code{aligned} type attribute\n-@item aligned (@var{alignment})\n-This attribute specifies a minimum alignment (in bytes) for variables\n-of the specified type.  For example, the declarations:\n+@item aligned\n+@itemx aligned (@var{alignment})\n+The @code{aligned} attribute specifies a minimum alignment (in bytes) for\n+variables of the specified type.  When specified, @var{alignment} must be\n+a power of 2.  Specifying no @var{alignment} argument implies the maximum\n+alignment for the target, which is often, but by no means always, 8 or 16\n+bytes.  For example, the declarations:\n \n @smallexample\n struct S @{ short f[3]; @} __attribute__ ((aligned (8)));\n@@ -7944,29 +7958,29 @@ You can use the sequence @samp{\\e} in a string or character constant to\n stand for the ASCII character @key{ESC}.\n \n @node Alignment\n-@section Inquiring on Alignment of Types or Variables\n+@section Determining the Alignment of Functions, Types or Variables\n @cindex alignment\n @cindex type alignment\n @cindex variable alignment\n \n-The keyword @code{__alignof__} allows you to inquire about how an object\n-is aligned, or the minimum alignment usually required by a type.  Its\n-syntax is just like @code{sizeof}.\n+The keyword @code{__alignof__} determines the alignment requirement of\n+a function, object, or a type, or the minimum alignment usually required\n+by a type.  Its syntax is just like @code{sizeof} and C11 @code{_Alignof}.\n \n For example, if the target machine requires a @code{double} value to be\n aligned on an 8-byte boundary, then @code{__alignof__ (double)} is 8.\n This is true on many RISC machines.  On more traditional machine\n designs, @code{__alignof__ (double)} is 4 or even 2.\n \n-Some machines never actually require alignment; they allow reference to any\n+Some machines never actually require alignment; they allow references to any\n data type even at an odd address.  For these machines, @code{__alignof__}\n reports the smallest alignment that GCC gives the data type, usually as\n mandated by the target ABI.\n \n If the operand of @code{__alignof__} is an lvalue rather than a type,\n its value is the required alignment for its type, taking into account\n-any minimum alignment specified with GCC's @code{__attribute__}\n-extension (@pxref{Variable Attributes}).  For example, after this\n+any minimum alignment specified by attribute @code{aligned}\n+(@pxref{Common Variable Attributes}).  For example, after this\n declaration:\n \n @smallexample\n@@ -7976,9 +7990,12 @@ struct foo @{ int x; char y; @} foo1;\n @noindent\n the value of @code{__alignof__ (foo1.y)} is 1, even though its actual\n alignment is probably 2 or 4, the same as @code{__alignof__ (int)}.\n+It is an error to ask for the alignment of an incomplete type other\n+than @code{void}.\n \n-It is an error to ask for the alignment of an incomplete type.\n-\n+If the operand of the @code{__alignof__} expression is a function,\n+the expression evaluates to the alignment of the function which may\n+be specified by attribute @code{aligned} (@pxref{Common Function Attributes}).\n \n @node Inline\n @section An Inline Function is As Fast As a Macro"}]}