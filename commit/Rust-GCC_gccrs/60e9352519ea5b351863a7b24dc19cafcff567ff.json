{"sha": "60e9352519ea5b351863a7b24dc19cafcff567ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlOTM1MjUxOWVhNWIzNTE4NjNhN2IyNGRjMTljYWZjZmY1NjdmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-04-20T19:35:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-04-20T19:35:55Z"}, "message": "re PR target/28623 (ICE in extract_insn, at recog.c:2077 (nrecognizable insn) [alpha])\n\n        PR target/28623\n        * config/alpha/alpha.c (get_unaligned_address): Remove extra_offset\n        argument; update all callers.\n        (get_unaligned_offset): New.\n        * config/alpha/alpha.md (extendqidi2, extendhidi2): Don't use\n        get_unaligned_address, just pass on the address directly.\n        (unaligned_extendqidi): Use gen_lowpart instead of open-coding\n        the subreg in the helper patterns.\n        (unaligned_extendqidi_le): Use get_unaligned_offset.\n        (unaligned_extendqidi_be, unaligned_extendhidi_le): Likewise.\n        (unaligned_extendhidi_be): Likewise.\n        (unaligned_extendhidi): Tidy.\n        * config/alpha/alpha-protos.h: Update.\n\nFrom-SVN: r124002", "tree": {"sha": "a99c28e30a1ffc590503139ffa75a83bdb771164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99c28e30a1ffc590503139ffa75a83bdb771164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e9352519ea5b351863a7b24dc19cafcff567ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e9352519ea5b351863a7b24dc19cafcff567ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e9352519ea5b351863a7b24dc19cafcff567ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e9352519ea5b351863a7b24dc19cafcff567ff/comments", "author": null, "committer": null, "parents": [{"sha": "f326fd7a0323d1a17756dc64af3e7d91ef366928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f326fd7a0323d1a17756dc64af3e7d91ef366928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f326fd7a0323d1a17756dc64af3e7d91ef366928"}], "stats": {"total": 126, "additions": 70, "deletions": 56}, "files": [{"sha": "3b86e5ca5dc2d840097c14f3de2328305496c3af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60e9352519ea5b351863a7b24dc19cafcff567ff", "patch": "@@ -1,3 +1,19 @@\n+2007-04-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/28623\n+\t* config/alpha/alpha.c (get_unaligned_address): Remove extra_offset\n+\targument; update all callers.\n+\t(get_unaligned_offset): New.\n+\t* config/alpha/alpha.md (extendqidi2, extendhidi2): Don't use\n+\tget_unaligned_address, just pass on the address directly.\n+\t(unaligned_extendqidi): Use gen_lowpart instead of open-coding\n+\tthe subreg in the helper patterns.\n+\t(unaligned_extendqidi_le): Use get_unaligned_offset.\n+\t(unaligned_extendqidi_be, unaligned_extendhidi_le): Likewise.\n+\t(unaligned_extendhidi_be): Likewise.\n+\t(unaligned_extendhidi): Tidy.\n+\t* config/alpha/alpha-protos.h: Update.\n+\n 2007-04-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.h (CPP_SPEC, CPP_SUBTARGET_SPEC): Remove."}, {"sha": "2ba5dfb3a09b4e44b7f3f116d11a91e7b249f3e8", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=60e9352519ea5b351863a7b24dc19cafcff567ff", "patch": "@@ -47,7 +47,8 @@ extern rtx alpha_legitimize_reload_address (rtx, enum machine_mode,\n extern rtx split_small_symbolic_operand (rtx);\n \n extern void get_aligned_mem (rtx, rtx *, rtx *);\n-extern rtx get_unaligned_address (rtx, int);\n+extern rtx get_unaligned_address (rtx);\n+extern rtx get_unaligned_offset (rtx, HOST_WIDE_INT);\n extern enum reg_class alpha_preferred_reload_class (rtx, enum reg_class);\n extern enum reg_class alpha_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t    enum machine_mode, rtx,"}, {"sha": "be6067eb903a685f324f34d19cbefcf22af5db7f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=60e9352519ea5b351863a7b24dc19cafcff567ff", "patch": "@@ -1461,7 +1461,7 @@ get_aligned_mem (rtx ref, rtx *paligned_mem, rtx *pbitnum)\n    Add EXTRA_OFFSET to the address we return.  */\n \n rtx\n-get_unaligned_address (rtx ref, int extra_offset)\n+get_unaligned_address (rtx ref)\n {\n   rtx base;\n   HOST_WIDE_INT offset = 0;\n@@ -1481,7 +1481,23 @@ get_unaligned_address (rtx ref, int extra_offset)\n   if (GET_CODE (base) == PLUS)\n     offset += INTVAL (XEXP (base, 1)), base = XEXP (base, 0);\n \n-  return plus_constant (base, offset + extra_offset);\n+  return plus_constant (base, offset);\n+}\n+\n+/* Compute a value X, such that X & 7 == (ADDR + OFS) & 7.\n+   X is always returned in a register.  */\n+\n+rtx\n+get_unaligned_offset (rtx addr, HOST_WIDE_INT ofs)\n+{\n+  if (GET_CODE (addr) == PLUS)\n+    {\n+      ofs += INTVAL (XEXP (addr, 1));\n+      addr = XEXP (addr, 0);\n+    }\n+\n+  return expand_simple_binop (Pmode, PLUS, addr, GEN_INT (ofs & 7),\n+\t\t\t      NULL_RTX, 1, OPTAB_LIB_WIDEN);\n }\n \n /* On the Alpha, all (non-symbolic) constants except zero go into\n@@ -2230,7 +2246,7 @@ alpha_expand_mov_nobwx (enum machine_mode mode, rtx *operands)\n \t  seq = ((mode == QImode\n \t\t  ? gen_unaligned_loadqi\n \t\t  : gen_unaligned_loadhi)\n-\t\t (subtarget, get_unaligned_address (operands[1], 0),\n+\t\t (subtarget, get_unaligned_address (operands[1]),\n \t\t  temp1, temp2));\n \t  alpha_set_memflags (seq, operands[1]);\n \t  emit_insn (seq);\n@@ -2269,7 +2285,7 @@ alpha_expand_mov_nobwx (enum machine_mode mode, rtx *operands)\n \t  rtx seq = ((mode == QImode\n \t\t      ? gen_unaligned_storeqi\n \t\t      : gen_unaligned_storehi)\n-\t\t     (get_unaligned_address (operands[0], 0),\n+\t\t     (get_unaligned_address (operands[0]),\n \t\t      operands[1], temp1, temp2, temp3));\n \n \t  alpha_set_memflags (seq, operands[0]);"}, {"sha": "b86a4777621cccca370f449a580a41a0609d784f", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9352519ea5b351863a7b24dc19cafcff567ff/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=60e9352519ea5b351863a7b24dc19cafcff567ff", "patch": "@@ -1664,10 +1664,7 @@\n \n   if (unaligned_memory_operand (operands[1], QImode))\n     {\n-      rtx seq\n-\t= gen_unaligned_extendqidi (operands[0],\n-\t\t\t\t    get_unaligned_address (operands[1], 1));\n-\n+      rtx seq = gen_unaligned_extendqidi (operands[0], XEXP (operands[1], 0));\n       alpha_set_memflags (seq, operands[1]);\n       emit_insn (seq);\n       DONE;\n@@ -1727,9 +1724,7 @@\n \n   if (unaligned_memory_operand (operands[1], HImode))\n     {\n-      rtx seq\n-\t= gen_unaligned_extendhidi (operands[0],\n-\t\t\t\t    get_unaligned_address (operands[1], 2));\n+      rtx seq = gen_unaligned_extendhidi (operands[0], XEXP (operands[1], 0));\n \n       alpha_set_memflags (seq, operands[1]);\n       emit_insn (seq);\n@@ -1744,12 +1739,13 @@\n ;; as a pattern saves one instruction.  The code is similar to that for\n ;; the unaligned loads (see below).\n ;;\n-;; Operand 1 is the address + 1 (+2 for HI), operand 0 is the result.\n+;; Operand 1 is the address, operand 0 is the result.\n (define_expand \"unaligned_extendqidi\"\n   [(use (match_operand:QI 0 \"register_operand\" \"\"))\n    (use (match_operand:DI 1 \"address_operand\" \"\"))]\n   \"\"\n {\n+  operands[0] = gen_lowpart (DImode, operands[0]);\n   if (WORDS_BIG_ENDIAN)\n     emit_insn (gen_unaligned_extendqidi_be (operands[0], operands[1]));\n   else\n@@ -1758,48 +1754,40 @@\n })\n \n (define_expand \"unaligned_extendqidi_le\"\n-  [(set (match_dup 2) (match_operand:DI 1 \"address_operand\" \"\"))\n-   (set (match_dup 3)\n-\t(mem:DI (and:DI (plus:DI (match_dup 2) (const_int -1))\n-\t\t\t(const_int -8))))\n+  [(set (match_dup 3)\n+\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n \t\t\t     (ashift:DI\n \t\t\t      (and:DI (match_dup 2) (const_int 7))\n \t\t\t      (const_int 3)))))\n-   (set (subreg:DI (match_operand:QI 0 \"register_operand\" \"\") 0)\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ashiftrt:DI (match_dup 4) (const_int 56)))]\n   \"! WORDS_BIG_ENDIAN\"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = get_unaligned_offset (operands[1], 1);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n })\n \n (define_expand \"unaligned_extendqidi_be\"\n-  [(set (match_dup 2) (match_operand:DI 1 \"address_operand\" \"\"))\n-   (set (match_dup 3) (plus:DI (match_dup 2) (const_int -1)))\n+  [(set (match_dup 3)\n+\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n    (set (match_dup 4)\n-\t(mem:DI (and:DI (match_dup 3)\n-\t\t\t(const_int -8))))\n-   (set (match_dup 5) (plus:DI (match_dup 2) (const_int -2)))\n-   (set (match_dup 6)\n-\t(ashift:DI (match_dup 4)\n+\t(ashift:DI (match_dup 3)\n \t\t   (ashift:DI\n \t\t     (and:DI\n-\t\t       (plus:DI (match_dup 5) (const_int 1))\n+\t\t       (plus:DI (match_dup 2) (const_int 1))\n \t\t       (const_int 7))\n \t\t     (const_int 3))))\n-   (set (subreg:DI (match_operand:QI 0 \"register_operand\" \"\") 0)\n-\t(ashiftrt:DI (match_dup 6) (const_int 56)))]\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ashiftrt:DI (match_dup 4) (const_int 56)))]\n   \"WORDS_BIG_ENDIAN\"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = get_unaligned_offset (operands[1], -1);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-  operands[6] = gen_reg_rtx (DImode);\n })\n \n (define_expand \"unaligned_extendhidi\"\n@@ -1808,17 +1796,16 @@\n   \"\"\n {\n   operands[0] = gen_lowpart (DImode, operands[0]);\n-  emit_insn ((WORDS_BIG_ENDIAN\n-\t      ? gen_unaligned_extendhidi_be\n-\t      : gen_unaligned_extendhidi_le) (operands[0], operands[1]));\n+  if (WORDS_BIG_ENDIAN)\n+    emit_insn (gen_unaligned_extendhidi_be (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_unaligned_extendhidi_le (operands[0], operands[1]));\n   DONE;\n })\n \n (define_expand \"unaligned_extendhidi_le\"\n-  [(set (match_dup 2) (match_operand:DI 1 \"address_operand\" \"\"))\n-   (set (match_dup 3)\n-\t(mem:DI (and:DI (plus:DI (match_dup 2) (const_int -2))\n-\t\t\t(const_int -8))))\n+  [(set (match_dup 3)\n+\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n@@ -1829,34 +1816,28 @@\n \t(ashiftrt:DI (match_dup 4) (const_int 48)))]\n   \"! WORDS_BIG_ENDIAN\"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = get_unaligned_offset (operands[1], 2);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n })\n \n (define_expand \"unaligned_extendhidi_be\"\n-  [(set (match_dup 2) (match_operand:DI 1 \"address_operand\" \"\"))\n-   (set (match_dup 3) (plus:DI (match_dup 2) (const_int -2)))\n+  [(set (match_dup 3)\n+\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n    (set (match_dup 4)\n-\t(mem:DI (and:DI (match_dup 3)\n-\t\t\t(const_int -8))))\n-   (set (match_dup 5) (plus:DI (match_dup 2) (const_int -3)))\n-   (set (match_dup 6)\n-\t(ashift:DI (match_dup 4)\n+\t(ashift:DI (match_dup 3)\n \t\t   (ashift:DI\n \t\t     (and:DI\n-\t\t       (plus:DI (match_dup 5) (const_int 1))\n+\t\t       (plus:DI (match_dup 2) (const_int 1))\n \t\t       (const_int 7))\n \t\t     (const_int 3))))\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 6) (const_int 48)))]\n+\t(ashiftrt:DI (match_dup 4) (const_int 48)))]\n   \"WORDS_BIG_ENDIAN\"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = get_unaligned_offset (operands[1], -1);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-  operands[6] = gen_reg_rtx (DImode);\n })\n \n (define_insn \"*extxl_const\"\n@@ -6133,7 +6114,7 @@\n       else\n \tscratch = gen_rtx_REG (DImode, REGNO (operands[2]));\n \n-      addr = get_unaligned_address (operands[1], 0);\n+      addr = get_unaligned_address (operands[1]);\n       operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n       seq = gen_unaligned_loadqi (operands[0], addr, scratch, operands[0]);\n       alpha_set_memflags (seq, operands[1]);\n@@ -6167,7 +6148,7 @@\n       else\n \tscratch = gen_rtx_REG (DImode, REGNO (operands[2]));\n \n-      addr = get_unaligned_address (operands[1], 0);\n+      addr = get_unaligned_address (operands[1]);\n       operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n       seq = gen_unaligned_loadhi (operands[0], addr, scratch, operands[0]);\n       alpha_set_memflags (seq, operands[1]);\n@@ -6191,7 +6172,7 @@\n     }\n   else\n     {\n-      rtx addr = get_unaligned_address (operands[0], 0);\n+      rtx addr = get_unaligned_address (operands[0]);\n       rtx scratch1 = gen_rtx_REG (DImode, REGNO (operands[2]));\n       rtx scratch2 = gen_rtx_REG (DImode, REGNO (operands[2]) + 1);\n       rtx scratch3 = scratch1;\n@@ -6223,7 +6204,7 @@\n     }\n   else\n     {\n-      rtx addr = get_unaligned_address (operands[0], 0);\n+      rtx addr = get_unaligned_address (operands[0]);\n       rtx scratch1 = gen_rtx_REG (DImode, REGNO (operands[2]));\n       rtx scratch2 = gen_rtx_REG (DImode, REGNO (operands[2]) + 1);\n       rtx scratch3 = scratch1;"}]}