{"sha": "e112bba2fced713f1fa6c7f41c6925ee4573f215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExMmJiYTJmY2VkNzEzZjFmYTZjN2Y0MWM2OTI1ZWU0NTczZjIxNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:00Z"}, "message": "poly_int: brig vector elements\n\nThis patch adds a brig-specific wrapper around TYPE_VECTOR_SUBPARTS,\nsince presumably it will never need to support variable vector lengths.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/brig/\n\t* brigfrontend/brig-util.h (gccbrig_type_vector_subparts): New\n\tfunction.\n\t* brigfrontend/brig-basic-inst-handler.cc\n\t(brig_basic_inst_handler::build_shuffle): Use it instead of\n\tTYPE_VECTOR_SUBPARTS.\n\t(brig_basic_inst_handler::build_unpack): Likewise.\n\t(brig_basic_inst_handler::build_pack): Likewise.\n\t(brig_basic_inst_handler::build_unpack_lo_or_hi): Likewise.\n\t(brig_basic_inst_handler::operator ()): Likewise.\n\t(brig_basic_inst_handler::build_lower_element_broadcast): Likewise.\n\t* brigfrontend/brig-code-entry-handler.cc\n\t(brig_code_entry_handler::get_tree_cst_for_hsa_operand): Likewise.\n\t(brig_code_entry_handler::get_comparison_result_type): Likewise.\n\t(brig_code_entry_handler::expand_or_call_builtin): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256144", "tree": {"sha": "9e13a14efe75e889f11d09748b692848f53211b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e13a14efe75e889f11d09748b692848f53211b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e112bba2fced713f1fa6c7f41c6925ee4573f215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e112bba2fced713f1fa6c7f41c6925ee4573f215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e112bba2fced713f1fa6c7f41c6925ee4573f215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e112bba2fced713f1fa6c7f41c6925ee4573f215/comments", "author": null, "committer": null, "parents": [{"sha": "22afc2b31b75fa61b9558a9be8c8dbb7d4193b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22afc2b31b75fa61b9558a9be8c8dbb7d4193b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22afc2b31b75fa61b9558a9be8c8dbb7d4193b8a"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "b4f2ec0229b5ae9fc97817afd82c78da68f6cbaf", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=e112bba2fced713f1fa6c7f41c6925ee4573f215", "patch": "@@ -1,3 +1,22 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* brigfrontend/brig-util.h (gccbrig_type_vector_subparts): New\n+\tfunction.\n+\t* brigfrontend/brig-basic-inst-handler.cc\n+\t(brig_basic_inst_handler::build_shuffle): Use it instead of\n+\tTYPE_VECTOR_SUBPARTS.\n+\t(brig_basic_inst_handler::build_unpack): Likewise.\n+\t(brig_basic_inst_handler::build_pack): Likewise.\n+\t(brig_basic_inst_handler::build_unpack_lo_or_hi): Likewise.\n+\t(brig_basic_inst_handler::operator ()): Likewise.\n+\t(brig_basic_inst_handler::build_lower_element_broadcast): Likewise.\n+\t* brigfrontend/brig-code-entry-handler.cc\n+\t(brig_code_entry_handler::get_tree_cst_for_hsa_operand): Likewise.\n+\t(brig_code_entry_handler::get_comparison_result_type): Likewise.\n+\t(brig_code_entry_handler::expand_or_call_builtin): Likewise.\n+\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* brig-lang.c (brig_attribute_table): Swap affects_type_identity"}, {"sha": "ad0b24bedc553054a83e9f59d2c29e626f22c260", "filename": "gcc/brig/brigfrontend/brig-basic-inst-handler.cc", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-basic-inst-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-basic-inst-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-basic-inst-handler.cc?ref=e112bba2fced713f1fa6c7f41c6925ee4573f215", "patch": "@@ -97,9 +97,10 @@ brig_basic_inst_handler::build_shuffle (tree arith_type,\n      output elements can originate from any input element.  */\n   vec<constructor_elt, va_gc> *mask_offset_vals = NULL;\n \n+  unsigned int element_count = gccbrig_type_vector_subparts (arith_type);\n+\n   vec<constructor_elt, va_gc> *input_mask_vals = NULL;\n-  size_t input_mask_element_size\n-    = exact_log2 (TYPE_VECTOR_SUBPARTS (arith_type));\n+  size_t input_mask_element_size = exact_log2 (element_count);\n \n   /* Unpack the tightly packed mask elements to BIT_FIELD_REFs\n      from which to construct the mask vector as understood by\n@@ -109,7 +110,7 @@ brig_basic_inst_handler::build_shuffle (tree arith_type,\n   tree mask_element_type\n     = build_nonstandard_integer_type (input_mask_element_size, true);\n \n-  for (size_t i = 0; i < TYPE_VECTOR_SUBPARTS (arith_type); ++i)\n+  for (size_t i = 0; i < element_count; ++i)\n     {\n       tree mask_element\n \t= build3 (BIT_FIELD_REF, mask_element_type, mask_operand,\n@@ -119,17 +120,15 @@ brig_basic_inst_handler::build_shuffle (tree arith_type,\n       mask_element = convert (element_type, mask_element);\n \n       tree offset;\n-      if (i < TYPE_VECTOR_SUBPARTS (arith_type) / 2)\n+      if (i < element_count / 2)\n \toffset = build_int_cst (element_type, 0);\n       else\n-\toffset\n-\t  = build_int_cst (element_type, TYPE_VECTOR_SUBPARTS (arith_type));\n+\toffset = build_int_cst (element_type, element_count);\n \n       CONSTRUCTOR_APPEND_ELT (mask_offset_vals, NULL_TREE, offset);\n       CONSTRUCTOR_APPEND_ELT (input_mask_vals, NULL_TREE, mask_element);\n     }\n-  tree mask_vec_type\n-    = build_vector_type (element_type, TYPE_VECTOR_SUBPARTS (arith_type));\n+  tree mask_vec_type = build_vector_type (element_type, element_count);\n \n   tree mask_vec = build_constructor (mask_vec_type, input_mask_vals);\n   tree offset_vec = build_constructor (mask_vec_type, mask_offset_vals);\n@@ -158,7 +157,8 @@ brig_basic_inst_handler::build_unpack (tree_stl_vec &operands)\n   vec<constructor_elt, va_gc> *input_mask_vals = NULL;\n   vec<constructor_elt, va_gc> *and_mask_vals = NULL;\n \n-  size_t element_count = TYPE_VECTOR_SUBPARTS (TREE_TYPE (operands[0]));\n+  size_t element_count\n+    = gccbrig_type_vector_subparts (TREE_TYPE (operands[0]));\n   tree vec_type = build_vector_type (element_type, element_count);\n \n   for (size_t i = 0; i < element_count; ++i)\n@@ -214,7 +214,7 @@ brig_basic_inst_handler::build_pack (tree_stl_vec &operands)\n      TODO: Reuse this for implementing 'bitinsert'\n      without a builtin call.  */\n \n-  size_t ecount = TYPE_VECTOR_SUBPARTS (TREE_TYPE (operands[0]));\n+  size_t ecount = gccbrig_type_vector_subparts (TREE_TYPE (operands[0]));\n   size_t vecsize = int_size_in_bytes (TREE_TYPE (operands[0])) * BITS_PER_UNIT;\n   tree wide_type = build_nonstandard_integer_type (vecsize, 1);\n \n@@ -276,9 +276,10 @@ brig_basic_inst_handler::build_unpack_lo_or_hi (BrigOpcode16_t brig_opcode,\n {\n   tree element_type = get_unsigned_int_type (TREE_TYPE (arith_type));\n   tree mask_vec_type\n-    = build_vector_type (element_type, TYPE_VECTOR_SUBPARTS (arith_type));\n+    = build_vector_type (element_type,\n+\t\t\t gccbrig_type_vector_subparts (arith_type));\n \n-  size_t element_count = TYPE_VECTOR_SUBPARTS (arith_type);\n+  size_t element_count = gccbrig_type_vector_subparts (arith_type);\n   vec<constructor_elt, va_gc> *input_mask_vals = NULL;\n \n   size_t offset = (brig_opcode == BRIG_OPCODE_UNPACKLO) ? 0 : element_count / 2;\n@@ -601,8 +602,8 @@ brig_basic_inst_handler::operator () (const BrigBase *base)\n \t}\n \n       size_t promoted_type_size = int_size_in_bytes (promoted_type) * 8;\n-\n-      for (size_t i = 0; i < TYPE_VECTOR_SUBPARTS (arith_type); ++i)\n+      size_t element_count = gccbrig_type_vector_subparts (arith_type);\n+      for (size_t i = 0; i < element_count; ++i)\n \t{\n \t  tree operand0 = convert (promoted_type, operand0_elements.at (i));\n \t  tree operand1 = convert (promoted_type, operand1_elements.at (i));\n@@ -709,7 +710,8 @@ brig_basic_inst_handler::build_lower_element_broadcast (tree vec_operand)\n   tree element_type = TREE_TYPE (TREE_TYPE (vec_operand));\n   size_t esize = 8 * int_size_in_bytes (element_type);\n \n-  size_t element_count = TYPE_VECTOR_SUBPARTS (TREE_TYPE (vec_operand));\n+  size_t element_count\n+    = gccbrig_type_vector_subparts (TREE_TYPE (vec_operand));\n   tree mask_inner_type = build_nonstandard_integer_type (esize, 1);\n   vec<constructor_elt, va_gc> *constructor_vals = NULL;\n "}, {"sha": "fa4da9fb24a8b395a81c4b35acda4760807d6a6a", "filename": "gcc/brig/brigfrontend/brig-code-entry-handler.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-code-entry-handler.cc?ref=e112bba2fced713f1fa6c7f41c6925ee4573f215", "patch": "@@ -638,7 +638,8 @@ brig_code_entry_handler::get_tree_cst_for_hsa_operand\n \t{\n \t  /* In case of vector type elements (or sole vectors),\n \t     create a vector ctor.  */\n-\t  size_t element_count = TYPE_VECTOR_SUBPARTS (tree_element_type);\n+\t  size_t element_count\n+\t    = gccbrig_type_vector_subparts (tree_element_type);\n \t  if (bytes_left < scalar_element_size * element_count)\n \t    fatal_error (UNKNOWN_LOCATION,\n \t\t\t \"Not enough bytes left for the initializer \"\n@@ -841,7 +842,7 @@ brig_code_entry_handler::get_comparison_result_type (tree source_type)\n       size_t element_size = int_size_in_bytes (TREE_TYPE (source_type));\n       return build_vector_type\n \t(build_nonstandard_boolean_type (element_size * BITS_PER_UNIT),\n-\t TYPE_VECTOR_SUBPARTS (source_type));\n+\t gccbrig_type_vector_subparts (source_type));\n     }\n   else\n     return gccbrig_tree_type_for_hsa_type (BRIG_TYPE_B1);\n@@ -946,7 +947,8 @@ brig_code_entry_handler::expand_or_call_builtin (BrigOpcode16_t brig_opcode,\n \n       tree_stl_vec result_elements;\n \n-      for (size_t i = 0; i < TYPE_VECTOR_SUBPARTS (arith_type); ++i)\n+      size_t element_count = gccbrig_type_vector_subparts (arith_type);\n+      for (size_t i = 0; i < element_count; ++i)\n \t{\n \t  tree_stl_vec call_operands;\n \t  if (operand0_elements.size () > 0)"}, {"sha": "3dd2c6e93d6289517ebc97759d08fbc74765d850", "filename": "gcc/brig/brigfrontend/brig-util.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e112bba2fced713f1fa6c7f41c6925ee4573f215/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-util.h?ref=e112bba2fced713f1fa6c7f41c6925ee4573f215", "patch": "@@ -107,4 +107,12 @@ std::string gccbrig_hsa_reg_name_from_id (size_t reg_hash);\n \n void gccbrig_print_reg_use_info (FILE *dump, const regs_use_index &info);\n \n+/* Return the number of elements in a VECTOR_TYPE.  BRIG does not support\n+   variable-length vectors.  */\n+inline unsigned HOST_WIDE_INT\n+gccbrig_type_vector_subparts (const_tree type)\n+{\n+  return TYPE_VECTOR_SUBPARTS (type);\n+}\n+\n #endif"}]}