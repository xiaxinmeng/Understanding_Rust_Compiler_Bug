{"sha": "2426d8dd9e129a0270f152e758380f35ef074bb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyNmQ4ZGQ5ZTEyOWEwMjcwZjE1MmU3NTgzODBmMzVlZjA3NGJiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-10-21T09:04:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-10-21T09:04:56Z"}, "message": "* web.c: Fix various comments.\n\nFrom-SVN: r72743", "tree": {"sha": "0aaf959367721dca729538b7a543cd960c13bf12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aaf959367721dca729538b7a543cd960c13bf12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2426d8dd9e129a0270f152e758380f35ef074bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2426d8dd9e129a0270f152e758380f35ef074bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2426d8dd9e129a0270f152e758380f35ef074bb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2426d8dd9e129a0270f152e758380f35ef074bb7/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de696511fe72679b793ccf0334bf3b4eae6644e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de696511fe72679b793ccf0334bf3b4eae6644e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de696511fe72679b793ccf0334bf3b4eae6644e9"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "ce5ad94f0da6b683eda78d9cbd17204a1858626e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2426d8dd9e129a0270f152e758380f35ef074bb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2426d8dd9e129a0270f152e758380f35ef074bb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2426d8dd9e129a0270f152e758380f35ef074bb7", "patch": "@@ -1,3 +1,7 @@\n+2003-10-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* web.c: Fix various comments.\n+\n 2003-10-20  Nicolas Pitre <nico@cam.org>\n \n \t* config/arm/arm.c (arm_override_options): Set arm_constant_limit"}, {"sha": "a8f9f04dd4c872e45f9a4c91a45135d1d7cee544", "filename": "gcc/web.c", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2426d8dd9e129a0270f152e758380f35ef074bb7/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2426d8dd9e129a0270f152e758380f35ef074bb7/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=2426d8dd9e129a0270f152e758380f35ef074bb7", "patch": "@@ -1,5 +1,5 @@\n /* Web construction code for GNU compiler.\n-   Contributed by Jan Hubicka\n+   Contributed by Jan Hubicka.\n    Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -19,28 +19,28 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* Simple optimization pass that splits indepdendent uses of each pseudo\n+/* Simple optimization pass that splits independent uses of each pseudo,\n    increasing effectivity of other optimizations.  The optimization can\n-   serve as an example of the use of dataflow module.\n+   serve as an example of use for the dataflow module.\n \n-   We don't split registers with REG_USERVAR set unless -fmessy-debugging is\n-   used, because debug information about such split variables is almost\n-   useless.  \n+   We don't split registers with REG_USERVAR set unless -fmessy-debugging\n+   is specified, because debugging information about such split variables\n+   is almost unusable.\n \n    TODO\n-    - Add code to keep debugging up-to-date after splitting of user variable\n-      pseudos.  This can be done by remembering all the pseudos used for the\n-      variable and use life analysis information before reload to determing\n-      wich one of the possible choices is alive and in case more are live,\n-      choose one with latest definition.\n+    - Add code to keep debugging up-to-date after splitting user variable\n+      pseudos.  This can be done by keeping track of all the pseudos used\n+      for the variable and using life analysis information before reload\n+      to determine which one is live and, in case more than one are live,\n+      choose the one with the latest definition.\n \n-      Some other optimization passes will benefit from the infrastructure\n-      too.\n+      Other optimization passes can benefit from the infrastructure too.\n \n-    - We may use profile information and ignore infrequent use for purposes\n-      of web unifying inserting the compensation code later to implement full\n-      induction variable expansion for loops (currently we expand only if\n-      induction is dead afterwards, that is often the case anyway).  */\n+    - We may use profile information and ignore infrequent use for the\n+      purpose of web unifying, inserting the compensation code later to\n+      implement full induction variable expansion for loops (currently\n+      we expand only if the induction variable is dead afterward, which\n+      is often the case).  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -60,9 +60,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This entry is allocated for each reference in the insn stream.  */\n struct web_entry\n {\n-    /* pointer to the parent in the union/find tree.  */\n+  /* Pointer to the parent in the union/find tree.  */\n   struct web_entry *pred;\n-    /* Newly assigned register to the entry.  Set only for roots.  */\n+  /* Newly assigned register to the entry.  Set only for roots.  */\n   rtx reg;\n };\n \n@@ -77,7 +77,7 @@ static rtx entry_register\t\tPARAMS ((struct web_entry *,\n static void replace_ref\t\t\tPARAMS ((struct ref *, rtx));\n static int mark_addressof\t\tPARAMS ((rtx *, void *));\n \n-/* Find the root of unionfind tree (the representatnt of set).  */\n+/* Find the root of unionfind tree (the representative of set).  */\n \n static struct web_entry *\n unionfind_root (element)\n@@ -109,8 +109,8 @@ unionfind_union (first, second)\n   second->pred = first;\n }\n \n-/* For each use, all possible defs reaching it must come in same register,\n-   union them.  */\n+/* For each use, all possible defs reaching it must come in the same\n+   register, union them.  */\n \n static void\n union_defs (df, use, def_entry, use_entry)\n@@ -125,9 +125,9 @@ union_defs (df, use, def_entry, use_entry)\n   struct df_link *def_link = DF_INSN_DEFS (df, insn);\n   rtx set = single_set (insn);\n \n-  /* Some instructions may use match_dup for it's operands.  In case the\n-     operands are dead, we will assign them different pseudos creating\n-     invalid instruction, so union all uses of the same operands for each\n+  /* Some instructions may use match_dup for their operands.  In case the\n+     operands are dead, we will assign them different pseudos, creating\n+     invalid instructions, so union all uses of the same operand for each\n      insn.  */\n \n   while (use_link)\n@@ -139,9 +139,9 @@ union_defs (df, use, def_entry, use_entry)\n       use_link = use_link->next;\n     }\n \n-  /* Recognize trivial noop moves and attempt to keep them noop.\n-     While most of noop moves should be removed we still keep some at\n-     libcall boundaries and such.  */\n+  /* Recognize trivial noop moves and attempt to keep them as noop.\n+     While most of noop moves should be removed, we still keep some\n+     of them at libcall boundaries and such.  */\n \n   if (set\n       && SET_SRC (set) == DF_REF_REG (use)\n@@ -162,7 +162,7 @@ union_defs (df, use, def_entry, use_entry)\n       link = link->next;\n     }\n \n-  /* An READ_WRITE use require the corresponding def to be in the same\n+  /* A READ_WRITE use requires the corresponding def to be in the same\n      register.  Find it and union.  */\n   if (use->flags & DF_REF_READ_WRITE)\n     {\n@@ -176,7 +176,7 @@ union_defs (df, use, def_entry, use_entry)\n     }\n }\n \n-/* Find corresponding register for given entry.  */\n+/* Find the corresponding register for the given entry.  */\n \n static rtx\n entry_register (entry, ref, used, use_addressof)\n@@ -188,14 +188,12 @@ entry_register (entry, ref, used, use_addressof)\n   struct web_entry *root;\n   rtx reg, newreg;\n \n-  /* Find corresponding web and see if it has been visited.  */\n-\n+  /* Find the corresponding web and see if it has been visited.  */\n   root = unionfind_root (entry);\n   if (root->reg)\n     return root->reg;\n \n-  /* We are seeing this web first time, do the assignment.  */\n-\n+  /* We are seeing this web for the first time, do the assignment.  */\n   reg = DF_REF_REAL_REG (ref);\n \n   /* In case the original register is already assigned, generate new one.  */\n@@ -252,7 +250,7 @@ replace_ref (ref, reg)\n   *loc = reg;\n }\n \n-/* Mark each pseudo, whose address is taken.  */\n+/* Mark each pseudo whose address is taken.  */\n \n static int\n mark_addressof (rtl, data)\n@@ -312,8 +310,8 @@ web_main ()\n     replace_ref (df->defs[i], entry_register (def_entry + i, df->defs[i],\n \t\t\t\t\t      used, use_addressof));\n \n-  /* Dataflow information is corrupt here, but it can be easy to update it\n-     by creating new entries for new registers and update or calilng\n+  /* Dataflow information is corrupt here, but it can be easily updated\n+     by creating new entries for new registers and updates or calling\n      df_insns_modify.  */\n   free (def_entry);\n   free (use_entry);"}]}