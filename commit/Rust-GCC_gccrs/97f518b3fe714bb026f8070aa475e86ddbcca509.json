{"sha": "97f518b3fe714bb026f8070aa475e86ddbcca509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmNTE4YjNmZTcxNGJiMDI2ZjgwNzBhYTQ3NWU4NmRkYmNjYTUwOQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-09-09T12:29:36Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-09-09T12:29:36Z"}, "message": "[ARM] Enable auto-vectorization for copysignf\n\n  gcc/\n    * config/arm/arm.c (NEON_COPYSIGNF): New enum.\n    (arm_init_neon_builtins): Support NEON_COPYSIGNF.\n    (arm_builtin_vectorized_function): Likewise.\n    * config/arm/arm_neon_builtins.def: New macro for copysignf.\n    * config/arm/neon.md (neon_copysignf<mode>): New pattern for vector\n    copysignf.\n\n  gcc/testsuite/\n    * gcc.target/arm/vect-copysignf.c: New testcase.\n\nFrom-SVN: r215067", "tree": {"sha": "c16fc32b4d8965bc51c8fe032b60680a1cf133ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c16fc32b4d8965bc51c8fe032b60680a1cf133ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f518b3fe714bb026f8070aa475e86ddbcca509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f518b3fe714bb026f8070aa475e86ddbcca509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f518b3fe714bb026f8070aa475e86ddbcca509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f518b3fe714bb026f8070aa475e86ddbcca509/comments", "author": null, "committer": null, "parents": [{"sha": "1942d1a9e17406469aef7d38e927dd7a14f5b376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1942d1a9e17406469aef7d38e927dd7a14f5b376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1942d1a9e17406469aef7d38e927dd7a14f5b376"}], "stats": {"total": 115, "additions": 108, "deletions": 7}, "files": [{"sha": "68d9cc2dc2ec278114250b0902090de36019e33d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -1,3 +1,11 @@\n+2014-09-09  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/arm/arm.c (NEON_COPYSIGNF): New enum.\n+\t(arm_init_neon_builtins): Support NEON_COPYSIGNF.\n+\t(arm_builtin_vectorized_function): Likewise.\n+\t* config/arm/arm_neon_builtins.def: New macro for copysignf.\n+\t* config/arm/neon.md (neon_copysignf<mode>): New pattern for vector copysignf.\n+\n 2014-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* bb-reorder.h (default_target_bb_reorder): Remove redundant GTY."}, {"sha": "f0e622d0a7837e9c4fb315ce6f2adf537288e14c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -23289,6 +23289,7 @@ typedef enum {\n   NEON_SETLANE,\n   NEON_CREATE,\n   NEON_RINT,\n+  NEON_COPYSIGNF,\n   NEON_DUP,\n   NEON_DUPLANE,\n   NEON_COMBINE,\n@@ -24283,6 +24284,22 @@ arm_init_neon_builtins (void)\n \t    ftype = build_function_type_list (eltype, eltype, NULL);\n \t    break;\n \t}\n+\tcase NEON_COPYSIGNF:\n+\t  {\n+\t    tree eltype = NULL_TREE;\n+\t    switch (insn_data[d->code].operand[1].mode)\n+\t      {\n+\t      case V2SFmode:\n+\t\teltype = V2SF_type_node;\n+\t\tbreak;\n+\t      case V4SFmode:\n+\t\teltype = V4SF_type_node;\n+\t\tbreak;\n+\t      default: gcc_unreachable ();\n+\t      }\n+\t    ftype = build_function_type_list (eltype, eltype, NULL);\n+\t    break;\n+\t  }\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -25486,6 +25503,7 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n       return arm_expand_neon_args (target, icode, 1, type_mode, exp, fcode,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n+    case NEON_COPYSIGNF:\n     case NEON_COMBINE:\n     case NEON_VTBL:\n       return arm_expand_neon_args (target, icode, 1, type_mode, exp, fcode,\n@@ -30063,27 +30081,34 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n                      : ARM_FIND_VCVT_VARIANT (vcvtm);\n #undef ARM_CHECK_BUILTIN_MODE\n #define ARM_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == N##Imode && out_n == C \\\n-   && in_mode == N##Imode && in_n == C)\n+  (out_mode == N##mode && out_n == C \\\n+   && in_mode == N##mode && in_n == C)\n           case BUILT_IN_BSWAP16:\n-            if (ARM_CHECK_BUILTIN_MODE (4, H))\n+            if (ARM_CHECK_BUILTIN_MODE (4, HI))\n               return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4hi, false);\n-            else if (ARM_CHECK_BUILTIN_MODE (8, H))\n+            else if (ARM_CHECK_BUILTIN_MODE (8, HI))\n               return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv8hi, false);\n             else\n               return NULL_TREE;\n           case BUILT_IN_BSWAP32:\n-            if (ARM_CHECK_BUILTIN_MODE (2, S))\n+            if (ARM_CHECK_BUILTIN_MODE (2, SI))\n               return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2si, false);\n-            else if (ARM_CHECK_BUILTIN_MODE (4, S))\n+            else if (ARM_CHECK_BUILTIN_MODE (4, SI))\n               return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4si, false);\n             else\n               return NULL_TREE;\n           case BUILT_IN_BSWAP64:\n-            if (ARM_CHECK_BUILTIN_MODE (2, D))\n+            if (ARM_CHECK_BUILTIN_MODE (2, DI))\n               return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2di, false);\n             else\n               return NULL_TREE;\n+\t  case BUILT_IN_COPYSIGNF:\n+\t    if (ARM_CHECK_BUILTIN_MODE (2, SF))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv2sf, false);\n+\t    else if (ARM_CHECK_BUILTIN_MODE (4, SF))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv4sf, false);\n+\t    else\n+\t      return NULL_TREE;\n \n           default:\n             return NULL_TREE;"}, {"sha": "229caca6a8056c8ba2bbd38032d1aac46db6934f", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -135,6 +135,7 @@ VAR1 (FLOAT_WIDEN, vcvtv4sf, v4hf),\n VAR1 (FLOAT_NARROW, vcvtv4hf, v4sf),\n VAR10 (SELECT, vbsl,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+VAR2 (COPYSIGNF, copysignf, v2sf, v4sf),\n VAR2 (RINT, vrintn, v2sf, v4sf),\n VAR2 (RINT, vrinta, v2sf, v4sf),\n VAR2 (RINT, vrintp, v2sf, v4sf),"}, {"sha": "38daf35ed845b9a60027fc3ef8108bb12af2df7b", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -2580,6 +2580,33 @@\n   DONE;\n })\n \n+(define_expand \"neon_copysignf<mode>\"\n+  [(match_operand:VCVTF 0 \"register_operand\")\n+   (match_operand:VCVTF 1 \"register_operand\")\n+   (match_operand:VCVTF 2 \"register_operand\")]\n+  \"TARGET_NEON\"\n+  \"{\n+     rtx v_bitmask_cast;\n+     rtx v_bitmask = gen_reg_rtx (<VCVTF:V_cmp_result>mode);\n+     int i, n_elt = GET_MODE_NUNITS (<MODE>mode);\n+     rtvec v = rtvec_alloc (n_elt);\n+\n+     /* Create bitmask for vector select.  */\n+     for (i = 0; i < n_elt; ++i)\n+       RTVEC_ELT (v, i) = GEN_INT (0x80000000);\n+\n+     emit_move_insn (v_bitmask,\n+\t\t     gen_rtx_CONST_VECTOR (<VCVTF:V_cmp_result>mode, v));\n+     emit_move_insn (operands[0], operands[2]);\n+     v_bitmask_cast = simplify_gen_subreg (<MODE>mode, v_bitmask,\n+\t\t\t\t\t   <VCVTF:V_cmp_result>mode, 0);\n+     emit_insn (gen_neon_vbsl<mode> (operands[0], v_bitmask_cast, operands[0],\n+\t\t\t\t     operands[1]));\n+\n+     DONE;\n+  }\"\n+)\n+\n (define_insn \"neon_vqneg<mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n \t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")"}, {"sha": "927a7126a748e39bd1616239f3ed607bd879c43c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -1,3 +1,7 @@\n+2014-09-09  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/arm/vect-copysignf.c: New testcase.\n+\n 2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/vfp-1.c: Updated expected assembly."}, {"sha": "b35dd1f1853654a2fbc134195b787372af2082c1", "filename": "gcc/testsuite/gcc.target/arm/vect-copysignf.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-copysignf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f518b3fe714bb026f8070aa475e86ddbcca509/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-copysignf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-copysignf.c?ref=97f518b3fe714bb026f8070aa475e86ddbcca509", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-add-options \"arm_neon\" } */\n+\n+extern void abort ();\n+\n+#define N 16\n+float a[N] = {-0.1f, -3.2f, -6.3f, -9.4f,\n+\t      -12.5f, -15.6f, -18.7f, -21.8f,\n+\t      24.9f, 27.1f, 30.2f, 33.3f,\n+\t      36.4f, 39.5f, 42.6f, 45.7f};\n+float b[N] = {-1.2f, 3.4f, -5.6f, 7.8f,\n+\t      -9.0f, 1.0f, -2.0f, 3.0f,\n+\t      -4.0f, -5.0f, 6.0f, 7.0f,\n+\t      -8.0f, -9.0f, 10.0f, 11.0f};\n+float r[N];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = __builtin_copysignf (a[i], b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != __builtin_copysignf (a[i], b[i]))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}