{"sha": "a6ee63bb34096d1ec1ef342c8e81a303102c8733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlZTYzYmIzNDA5NmQxZWMxZWYzNDJjOGU4MWEzMDMxMDJjODczMw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@loony.cygnus.com", "date": "1999-10-15T07:50:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-15T07:50:54Z"}, "message": "* hashtab.h: New file.\n\nFrom-SVN: r30013", "tree": {"sha": "f78f11328f06128f23af2776e4b4e381b1a2e5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f78f11328f06128f23af2776e4b4e381b1a2e5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6ee63bb34096d1ec1ef342c8e81a303102c8733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ee63bb34096d1ec1ef342c8e81a303102c8733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ee63bb34096d1ec1ef342c8e81a303102c8733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ee63bb34096d1ec1ef342c8e81a303102c8733/comments", "author": null, "committer": null, "parents": [{"sha": "a2f945c649da8791c02ded1c4fc95e1bc9b8b43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f945c649da8791c02ded1c4fc95e1bc9b8b43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f945c649da8791c02ded1c4fc95e1bc9b8b43d"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "cfaab0aac81661ddf780f4d3fdc5ddd84f66d945", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ee63bb34096d1ec1ef342c8e81a303102c8733/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ee63bb34096d1ec1ef342c8e81a303102c8733/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=a6ee63bb34096d1ec1ef342c8e81a303102c8733", "patch": "@@ -1,3 +1,7 @@\n+Fri Oct 15 01:47:51 1999  Vladimir Makarov  <vmakarov@loony.cygnus.com>\n+\n+\t* hashtab.h: New file.\n+\n 1999-10-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ansidecl.h (HAVE_GCC_VERSION): New macro.  Use it instead of"}, {"sha": "67c37a284f771077e08410ab5d6e935556377531", "filename": "include/hashtab.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ee63bb34096d1ec1ef342c8e81a303102c8733/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ee63bb34096d1ec1ef342c8e81a303102c8733/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=a6ee63bb34096d1ec1ef342c8e81a303102c8733", "patch": "@@ -0,0 +1,103 @@\n+/* An expandable hash tables datatype.  \n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Vladimir Makarov (vmakarov@cygnus.com).\n+\n+This program is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2 of the License, or\n+(at your option) any later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+/* This package implements basic hash table functionality.  It is possible\n+   to search for an entry, create an entry and destroy an entry.\n+\n+   Elements in the table are generic pointers.\n+\n+   The size of the table is not fixed; if the occupancy of the table\n+   grows too high the hash table will be expanded.\n+\n+   The abstract data implementation is based on generalized Algorithm D\n+   from Knuth's book \"The art of computer programming\".  Hash table is\n+   expanded by creation of new hash table and transferring elements from\n+   the old table to the new table.  */\n+\n+#ifndef __HASHTAB_H__\n+#define __HASHTAB_H__\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+#include <ansidecl.h>\n+\n+/* The hash table element is represented by the following type. */\n+\n+typedef const void *hash_table_entry_t;\n+\n+/* Hash tables are of the following type.  The structure\n+   (implementation) of this type is not needed for using the hash\n+   tables.  All work with hash table should be executed only through\n+   functions mentioned below. */\n+\n+typedef struct\n+{\n+  /* Current size (in entries) of the hash table */\n+  size_t size;\n+  /* Current number of elements including also deleted elements */\n+  size_t number_of_elements;\n+  /* Current number of deleted elements in the table */\n+  size_t number_of_deleted_elements;\n+  /* The following member is used for debugging. Its value is number\n+     of all calls of `find_hash_table_entry' for the hash table. */\n+  int searches;\n+  /* The following member is used for debugging.  Its value is number\n+     of collisions fixed for time of work with the hash table. */\n+  int collisions;\n+  /* Pointer to function for evaluation of hash value (any unsigned value).\n+     This function has one parameter of type hash_table_entry_t. */\n+  unsigned (*hash_function) PARAMS ((hash_table_entry_t));\n+  /* Pointer to function for test on equality of hash table elements (two\n+     parameter of type hash_table_entry_t. */\n+  int (*eq_function) PARAMS ((hash_table_entry_t, hash_table_entry_t));\n+  /* Table itself */\n+  hash_table_entry_t *entries;\n+} *hash_table_t;\n+\n+\n+/* The prototypes of the package functions. */\n+\n+extern hash_table_t create_hash_table\n+  PARAMS ((size_t, unsigned (*) (hash_table_entry_t),\n+\t   int (*) (hash_table_entry_t, hash_table_entry_t)));\n+\n+extern void delete_hash_table PARAMS ((hash_table_t));\n+\n+extern void empty_hash_table PARAMS ((hash_table_t));\n+\n+extern hash_table_entry_t *find_hash_table_entry\n+  PARAMS ((hash_table_t, hash_table_entry_t, int));\n+\n+extern void remove_element_from_hash_table_entry PARAMS ((hash_table_t,\n+\t\t\t\t\t\t\t  hash_table_entry_t));\n+\n+extern size_t hash_table_size PARAMS ((hash_table_t));\n+\n+extern size_t hash_table_elements_number PARAMS ((hash_table_t));\n+\n+extern int hash_table_collisions PARAMS ((hash_table_t));\n+\n+extern int all_hash_table_collisions ();\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* __HASHTAB_H */"}]}