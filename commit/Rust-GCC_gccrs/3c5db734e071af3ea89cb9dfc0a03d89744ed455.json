{"sha": "3c5db734e071af3ea89cb9dfc0a03d89744ed455", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1ZGI3MzRlMDcxYWYzZWE4OWNiOWRmYzBhMDNkODk3NDRlZDQ1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-16T18:23:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-16T18:23:47Z"}, "message": "i386.md (*ashl<mode>3_mask): Rewrite define_insn pattern as define_insn_and_split.\n\n\t* config/i386/i386.md (*ashl<mode>3_mask): Rewrite define_insn\n\tpattern as define_insn_and_split.  Split insn before reload to\n\tashl<mode>3_1.\n\t(*<shift_insn><mode>3_mask): Ditto.  Split insn before reload to\n\t<shift_insn><mode>3_1.\n\t(*<rotate_insn><mode>3_mask): Ditto.  Split insn before reload to\n\t<rotate_insn><mode>3_1.\n\nFrom-SVN: r239511", "tree": {"sha": "5d0f7554725986fdc8d322693e428925cb545906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0f7554725986fdc8d322693e428925cb545906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5db734e071af3ea89cb9dfc0a03d89744ed455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5db734e071af3ea89cb9dfc0a03d89744ed455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5db734e071af3ea89cb9dfc0a03d89744ed455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5db734e071af3ea89cb9dfc0a03d89744ed455/comments", "author": null, "committer": null, "parents": [{"sha": "65e736c0efc463270764ea3012b9804c495c71bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e736c0efc463270764ea3012b9804c495c71bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e736c0efc463270764ea3012b9804c495c71bc"}], "stats": {"total": 92, "additions": 57, "deletions": 35}, "files": [{"sha": "b128931ccb3830411e3b8bf89d0da0c121c836ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5db734e071af3ea89cb9dfc0a03d89744ed455/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5db734e071af3ea89cb9dfc0a03d89744ed455/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5db734e071af3ea89cb9dfc0a03d89744ed455", "patch": "@@ -1,3 +1,13 @@\n+2016-08-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*ashl<mode>3_mask): Rewrite define_insn\n+\tpattern as define_insn_and_split.  Split insn before reload to\n+\tashl<mode>3_1.\n+\t(*<shift_insn><mode>3_mask): Ditto.  Split insn before reload to\n+\t<shift_insn><mode>3_1.\n+\t(*<rotate_insn><mode>3_mask): Ditto.  Split insn before reload to\n+\t<rotate_insn><mode>3_1.\n+\n 2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/72857\n@@ -33,8 +43,8 @@\n 2016-08-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/71910\n-\t* tree-cfg.c (execute_fixup_cfg): Add node variable, use it.  Before inlining,\n-\tadd cgraph edge for the added __builtin_unreachable call.\n+\t* tree-cfg.c (execute_fixup_cfg): Add node variable, use it.  Before\n+\tinlining, add cgraph edge for the added __builtin_unreachable call.\n \n \tPR middle-end/67485\n \t* expmed.c (expand_mult_const): Change val_so_far's type to UHWI,"}, {"sha": "eed779866b4eb261107bced0e2b1ca67e5d3ee53", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5db734e071af3ea89cb9dfc0a03d89744ed455/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5db734e071af3ea89cb9dfc0a03d89744ed455/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3c5db734e071af3ea89cb9dfc0a03d89744ed455", "patch": "@@ -9794,23 +9794,27 @@\n })\n \n ;; Avoid useless masking of count operand.\n-(define_insn \"*ashl<mode>3_mask\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n+(define_insn_and_split \"*ashl<mode>3_mask\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(ashift:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n-\t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n+\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n-      == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-{\n-  return \"sal{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-}\n-  [(set_attr \"type\" \"ishift\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (ashift:SWI48 (match_dup 1)\n+\t\t\t (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n (define_insn \"*bmi2_ashl<mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n@@ -10290,23 +10294,27 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn \"*<shift_insn><mode>3_mask\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n+(define_insn_and_split \"*<shift_insn><mode>3_mask\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_shiftrt:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n-\t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n+\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n-      == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-{\n-  return \"<shift>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-}\n-  [(set_attr \"type\" \"ishift\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_shiftrt:SWI48 (match_dup 1)\n+\t\t\t      (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n (define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=r\")\n@@ -10745,23 +10753,27 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn \"*<rotate_insn><mode>3_mask\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n+(define_insn_and_split \"*<rotate_insn><mode>3_mask\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_rotate:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\" \"c\")\n-\t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n+\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n-      == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-{\n-  return \"<rotate>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-}\n-  [(set_attr \"type\" \"rotate\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_rotate:SWI48 (match_dup 1)\n+\t\t\t     (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n ;; Implement rotation using two double-precision\n ;; shift instructions and a scratch register."}]}