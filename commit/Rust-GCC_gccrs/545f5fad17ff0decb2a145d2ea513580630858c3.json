{"sha": "545f5fad17ff0decb2a145d2ea513580630858c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1ZjVmYWQxN2ZmMGRlY2IyYTE0NWQyZWE1MTM1ODA2MzA4NThjMw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-01-16T13:48:37Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-01-16T13:48:37Z"}, "message": "contrib: Check and if needed set user.name and user.email in gcc-git-customization.sh\n\nAs discussed on IRC, this adds a couple more checks in the\ncustomization setup for git.  If the variables user.name and\nuser.email are not set anywhere in the git config hierarchy, we set\nsome local values.  We always ask about the values we detect and if\nthe user gives an answer that is new, we save that in the local\nconfig: this gives the opportunity to use different values to those\nconfigured for the global space.\n\nAlso cleaned up a couple of minor niggles, such as using $(cmd) rather\nthan `cmd` for subshells and some quoting issues when using eval.\n\n\t* gcc-git-customization.sh: Check that user.name and user.email\n\tare set.  Use $(cmd) instead of `cmd`.  Fix variable quoting when\n\tusing eval.", "tree": {"sha": "7fc6db66b3f410332a5f71dd91ccc9c7c3941fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc6db66b3f410332a5f71dd91ccc9c7c3941fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/545f5fad17ff0decb2a145d2ea513580630858c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545f5fad17ff0decb2a145d2ea513580630858c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545f5fad17ff0decb2a145d2ea513580630858c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545f5fad17ff0decb2a145d2ea513580630858c3/comments", "author": null, "committer": null, "parents": [{"sha": "1c2755a6a6bfff1402520448aae2a4cd4c6085f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2755a6a6bfff1402520448aae2a4cd4c6085f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2755a6a6bfff1402520448aae2a4cd4c6085f9"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "8090dcbb4e702f116bd970b27feda54d689d1461", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545f5fad17ff0decb2a145d2ea513580630858c3/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545f5fad17ff0decb2a145d2ea513580630858c3/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=545f5fad17ff0decb2a145d2ea513580630858c3", "patch": "@@ -1,3 +1,9 @@\n+2020-01-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc-git-customization.sh: Check that user.name and user.email\n+\tare set.  Use $(cmd) instead of `cmd`.  Fix variable quoting when\n+\tusing eval.\n+\n 2020-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-git-customization.sh: Verify the id to be printed is ancestor of"}, {"sha": "b7e4ce308062251a4c41484f91b0e04d6203fe9e", "filename": "contrib/gcc-git-customization.sh", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545f5fad17ff0decb2a145d2ea513580630858c3/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545f5fad17ff0decb2a145d2ea513580630858c3/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=545f5fad17ff0decb2a145d2ea513580630858c3", "patch": "@@ -11,9 +11,9 @@ ask () {\n     read answer\n     if [ \"x$answer\" = \"x\" ]\n     then\n-\teval $var=$default\n+\teval $var=\\\"$default\\\"\n     else\n-\teval $var=$answer\n+\teval $var=\\\"$answer\\\"\n     fi\n }\n \n@@ -30,35 +30,80 @@ git config alias.gcc-undescr \\!\"f() { o=\\$(git config --get gcc-config.upstream)\n # *.md    diff=md\n git config diff.md.xfuncname '^\\(define.*$'\n \n-upstream=`git config --get \"gcc-config.upstream\"`\n+set_user=$(git config --get \"user.name\")\n+set_email=$(git config --get \"user.email\")\n+\n+if [ \"x$set_user\" = \"x\" ]\n+then\n+    # Try to guess the user's name by looking it up in the password file\n+    new_user=$(getent passwd $(whoami) | awk -F: '{ print $5 }')\n+    if [ \"x$new_user\" = \"x\" ]\n+    then\n+       new_user=\"(no default)\"\n+    fi\n+else\n+    new_user=$set_user\n+fi\n+ask \"Your name\" \"${new_user}\" new_user\n+if [ \"x$new_user\" = \"x(no default)\" ]\n+then\n+    echo \"Cannot continue, git needs to record your name against commits\"\n+    exit 1\n+fi\n+\n+if [ \"x$set_email\" = \"x\" ]\n+then\n+    new_email=\"(no_default)\"\n+else\n+    new_email=$set_email\n+fi\n+\n+ask \"Your email address (for git commits)\" \"${new_email}\" new_email\n+if [ \"x$new_email\" = \"x(no default)\" ]\n+then\n+    echo \"Cannot continue, git needs to record your email address against commits\"\n+    exit 1\n+fi\n+\n+if [ \"x$set_user\" != \"x$new_user\" ]\n+then\n+    git config \"user.name\" \"$new_user\"\n+fi\n+\n+if [ \"x$set_email\" != \"x$new_email\" ]\n+then\n+    git config \"user.email\" \"$new_email\"\n+fi\n+\n+upstream=$(git config --get \"gcc-config.upstream\")\n if [ \"x$upstream\" = \"x\" ]\n then\n     upstream=\"origin\"\n fi\n ask \"Local name for upstream repository\" \"origin\" upstream\n git config \"gcc-config.upstream\" \"$upstream\"\n \n-remote_id=`git config --get \"gcc-config.user\"`\n+remote_id=$(git config --get \"gcc-config.user\")\n if [ \"x$remote_id\" = \"x\" ]\n then\n     # See if the url specifies the remote user name.\n-    url=`git config --get \"remote.$upstream.url\"`\n+    url=$(git config --get \"remote.$upstream.url\")\n     if [ \"x$url\" = \"x\" ]\n     then\n \t# This is a pure guess, but for many people it might be OK.\n-\tremote_id=`whoami`\n+\tremote_id=$(whoami)\n     else\n-\tremote_id=`echo $url | sed -r \"s|^.*ssh://(.+)@gcc.gnu.org.*$|\\1|\"`\n+\tremote_id=$(echo $url | sed -r \"s|^.*ssh://(.+)@gcc.gnu.org.*$|\\1|\")\n \tif [ x$remote_id = x$url ]\n \tthen\n-\t    remote_id=`whoami`\n+\t    remote_id=$(whoami)\n \tfi\n     fi\n fi\n ask \"Account name on gcc.gnu.org (for your personal branches area)\" $remote_id remote_id\n git config \"gcc-config.user\" \"$remote_id\"\n \n-old_pfx=`git config --get \"gcc-config.userpfx\"`\n+old_pfx=$(git config --get \"gcc-config.userpfx\")\n if [ \"x$old_pfx\" = \"x\" ]\n then\n     old_pfx=\"me\"\n@@ -72,7 +117,7 @@ echo \"Setting up tracking for personal namespace $remote_id in remotes/$upstream\n git config --replace-all \"remote.${upstream}.fetch\" \"+refs/users/${remote_id}/heads/*:refs/remotes/${upstream}/${new_pfx}/*\" \":refs/remotes/${upstream}/${old_pfx}/\"\n git config --replace-all \"remote.${upstream}.fetch\" \"+refs/users/${remote_id}/tags/*:refs/tags/${new_pfx}/*\" \":refs/tags/${old_pfx}/\"\n \n-push_rule=`git config --get \"remote.${upstream}.push\"`\n+push_rule=$(git config --get \"remote.${upstream}.push\")\n if [ \"x$push_rule\" != \"x\" ]\n then\n     echo \"***********************************************\""}]}