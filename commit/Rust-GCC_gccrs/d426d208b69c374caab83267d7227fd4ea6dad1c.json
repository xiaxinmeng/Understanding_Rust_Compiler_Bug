{"sha": "d426d208b69c374caab83267d7227fd4ea6dad1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyNmQyMDhiNjljMzc0Y2FhYjgzMjY3ZDcyMjdmZDRlYTZkYWQxYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-27T08:12:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-27T08:12:35Z"}, "message": "lex.l (update_yylval): Constify.\n\n\t* lex.l (update_yylval): Constify.\n\t* treelang.h (struct token_part, struct parameter_part):\n\tLikewise.\n\t* treetree.c (tree_code_create_function_prototype,\n\ttree_code_create_variable, tree_code_get_integer_value):\n\tLikewise.\n\t* treetree.h (tree_code_get_integer_value,\n\ttree_code_create_function_prototype, tree_code_create_variable):\n\tLikewise.\n\nFrom-SVN: r126973", "tree": {"sha": "5fc2f61aad9b67b2bfc28e2c1741d1e689abc993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc2f61aad9b67b2bfc28e2c1741d1e689abc993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d426d208b69c374caab83267d7227fd4ea6dad1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d426d208b69c374caab83267d7227fd4ea6dad1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d426d208b69c374caab83267d7227fd4ea6dad1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d426d208b69c374caab83267d7227fd4ea6dad1c/comments", "author": null, "committer": null, "parents": [{"sha": "6d7db3c5dfd52841132978ce53c041c2f3520562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7db3c5dfd52841132978ce53c041c2f3520562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7db3c5dfd52841132978ce53c041c2f3520562"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "1e47c32c3e5a1ce6991f8b219e3c2118b74293e0", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d426d208b69c374caab83267d7227fd4ea6dad1c", "patch": "@@ -1,3 +1,15 @@\n+2007-07-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lex.l (update_yylval): Constify.\n+\t* treelang.h (struct token_part, struct parameter_part):\n+\tLikewise.\n+\t* treetree.c (tree_code_create_function_prototype,\n+\ttree_code_create_variable, tree_code_get_integer_value):\n+\tLikewise.\n+\t* treetree.h (tree_code_get_integer_value,\n+\ttree_code_create_function_prototype, tree_code_create_variable):\n+\tLikewise.\n+\n 2007-07-25  Richard Guenther  <rguenther@suse.de>\n \n \t* treetree.c (tree_code_generate_return): RETURN_EXPRs"}, {"sha": "429ee80fe60c218d2fa00a7c73d56273e22218e8", "filename": "gcc/treelang/lex.l", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Flex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Flex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flex.l?ref=d426d208b69c374caab83267d7227fd4ea6dad1c", "patch": "@@ -269,7 +269,7 @@ update_yylval (int a)\n   tok->tp.tok.length = yyleng;\n   /* Have to copy yytext as it is just a ptr into the buffer at the\n      moment.  */\n-  tok->tp.tok.chars = (unsigned char*) get_string (yytext, yyleng);\n+  tok->tp.tok.chars = (const unsigned char *) get_string (yytext, yyleng);\n }\n \n /* Trace the value LEXRET and the position and token details being"}, {"sha": "aea030a425636bc8e4ca14acd5f788ba37d40336", "filename": "gcc/treelang/treelang.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreelang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreelang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.h?ref=d426d208b69c374caab83267d7227fd4ea6dad1c", "patch": "@@ -53,7 +53,7 @@ struct token_part GTY(())\n   location_t location;\n   unsigned int charno;\n   unsigned int length; /* The value.  */\n-  unsigned char* chars;\n+  const unsigned char *chars;\n };\n \n /* Definitions for fields in production.  */\n@@ -119,7 +119,7 @@ struct production_part GTY(())\n struct parameter_part GTY(())\n {\n   struct prod_token_parm_item *next; /* Next entry.  */\n-  unsigned char* variable_name; /* Name. */\n+  const unsigned char *variable_name; /* Name. */\n   tree * GTY ((skip)) where_to_put_var_tree; /* Where to save decl.  */\n };\n "}, {"sha": "295d882cb2985a75d8a0f4a4465ad1467ab587d6", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=d426d208b69c374caab83267d7227fd4ea6dad1c", "patch": "@@ -299,7 +299,7 @@ tree_code_if_end (location_t loc ATTRIBUTE_UNUSED)\n    is PARMS, returns decl for this function.  */\n \n tree\n-tree_code_create_function_prototype (unsigned char* chars,\n+tree_code_create_function_prototype (const unsigned char *chars,\n \t\t\t\t     unsigned int storage_class,\n \t\t\t\t     unsigned int ret_type,\n \t\t\t\t     struct prod_token_parm_item* parms,\n@@ -489,7 +489,7 @@ tree_code_create_function_wrapup (location_t loc)\n \n tree\n tree_code_create_variable (unsigned int storage_class,\n-\t\t\t   unsigned char* chars,\n+\t\t\t   const unsigned char *chars,\n \t\t\t   unsigned int length,\n \t\t\t   unsigned int expression_type,\n \t\t\t   tree init,\n@@ -604,7 +604,7 @@ tree_code_output_expression_statement (tree code, location_t loc)\n    size checking is done.  */\n \n tree\n-tree_code_get_integer_value (unsigned char* chars, unsigned int length)\n+tree_code_get_integer_value (const unsigned char *chars, unsigned int length)\n {\n   long long int val = 0;\n   unsigned int ix;"}, {"sha": "6774626cd91b55fb9f1ebf6e3d657bb154cf367d", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d426d208b69c374caab83267d7227fd4ea6dad1c/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=d426d208b69c374caab83267d7227fd4ea6dad1c", "patch": "@@ -29,7 +29,7 @@\n \n tree tree_code_init_parameters (void);\n tree tree_code_add_parameter (tree list, tree proto_exp, tree exp);\n-tree tree_code_get_integer_value (unsigned char *chars, unsigned int length);\n+tree tree_code_get_integer_value (const unsigned char *chars, unsigned int length);\n void tree_code_generate_return (tree type, tree exp);\n void tree_ggc_storage_always_used  (void *m);\n tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1,\n@@ -38,13 +38,13 @@ tree tree_code_get_numeric_type (unsigned int size1, unsigned int sign1);\n void tree_code_create_function_initial (tree prev_saved,\n \t\t\t\t\tlocation_t loc);\n void tree_code_create_function_wrapup (location_t loc);\n-tree tree_code_create_function_prototype (unsigned char* chars,\n+tree tree_code_create_function_prototype (const unsigned char *chars,\n \t\t\t\t\t  unsigned int storage_class,\n \t\t\t\t\t  unsigned int ret_type,\n \t\t\t\t\t  struct prod_token_parm_item* parms,\n                                           location_t loc);\n tree tree_code_create_variable (unsigned int storage_class,\n-\t\t\t\tunsigned char* chars,\n+\t\t\t\tconst unsigned char *chars,\n \t\t\t\tunsigned int length,\n \t\t\t\tunsigned int expression_type,\n \t\t\t\ttree init,"}]}