{"sha": "5823ef233578d8f6e3770bf92e72c1c977067d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyM2VmMjMzNTc4ZDhmNmUzNzcwYmY5MmU3MmMxYzk3NzA2N2QxMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:27:27Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:27:27Z"}, "message": "[Patch libgcc 9/17] Update soft-fp from glibc\n\nlibgcc/\n\n\t* soft-fp/extendhftf2.c: New.\n\t* soft-fp/fixhfti.c: Likewise.\n\t* soft-fp/fixunshfti.c: Likewise.\n\t* soft-fp/floattihf.c: Likewise.\n\t* soft-fp/floatuntihf.c: Likewise.\n\t* soft-fp/half.h: Likewise.\n\t* soft-fp/trunctfhf2.c: Likewise.\n\nFrom-SVN: r242779", "tree": {"sha": "a4e2268e61abf8233df81e2a0a4100c715685566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e2268e61abf8233df81e2a0a4100c715685566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5823ef233578d8f6e3770bf92e72c1c977067d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5823ef233578d8f6e3770bf92e72c1c977067d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5823ef233578d8f6e3770bf92e72c1c977067d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5823ef233578d8f6e3770bf92e72c1c977067d13/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3479b7af5e95a662664dbc0835436fc4d63d9551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3479b7af5e95a662664dbc0835436fc4d63d9551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3479b7af5e95a662664dbc0835436fc4d63d9551"}], "stats": {"total": 465, "additions": 465, "deletions": 0}, "files": [{"sha": "a229f2ac5858d742928586849ede05687156c18f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -1,3 +1,13 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* soft-fp/extendhftf2.c: Update from glibc.\n+\t* soft-fp/fixhfti.c: Likewise.\n+\t* soft-fp/fixunshfti.c: Likewise.\n+\t* soft-fp/floattihf.c: Likewise.\n+\t* soft-fp/floatuntihf.c: Likewise.\n+\t* soft-fp/half.h: Likewise.\n+\t* soft-fp/trunctfhf2.c: Likewise.\n+\n 2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libgcc/77813"}, {"sha": "6ff6438e6d24392f374e57cf3d04d9c99e7c9ed4", "filename": "libgcc/soft-fp/extendhftf2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Fextendhftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Fextendhftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendhftf2.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,53 @@\n+/* Software floating-point emulation.\n+   Return an IEEE half converted to IEEE quad\n+   Copyright (C) 1997-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define FP_NO_EXACT_UNDERFLOW\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+#include \"quad.h\"\n+\n+TFtype\n+__extendhftf2 (HFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_H (A);\n+  FP_DECL_Q (R);\n+  TFtype r;\n+\n+  FP_INIT_EXCEPTIONS;\n+  FP_UNPACK_RAW_H (A, a);\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+  FP_EXTEND (Q, H, 4, 1, R, A);\n+#else\n+  FP_EXTEND (Q, H, 2, 1, R, A);\n+#endif\n+  FP_PACK_RAW_Q (r, R);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "3610f4cc312433d424272086249434ec5a294aca", "filename": "libgcc/soft-fp/fixhfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffixhfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffixhfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixhfti.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE half to 128bit signed integer\n+   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+\n+TItype\n+__fixhfti (HFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_H (A);\n+  UTItype r;\n+\n+  FP_INIT_EXCEPTIONS;\n+  FP_UNPACK_RAW_H (A, a);\n+  FP_TO_INT_H (r, A, TI_BITS, 1);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "30edbfe5d893388bd733d52f6a892b62943f4935", "filename": "libgcc/soft-fp/fixunshfti.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffixunshfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffixunshfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunshfti.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert IEEE half to 128bit unsigned integer\n+   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+\n+UTItype\n+__fixunshfti (HFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_H (A);\n+  UTItype r;\n+\n+  FP_INIT_EXCEPTIONS;\n+  FP_UNPACK_RAW_H (A, a);\n+  FP_TO_INT_H (r, A, TI_BITS, 0);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}, {"sha": "74ac83a739b5066a01565d9f4fee4771eb3a1791", "filename": "libgcc/soft-fp/floattihf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffloattihf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffloattihf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloattihf.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit signed integer to IEEE half\n+   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+\n+HFtype\n+__floattihf (TItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_H (A);\n+  HFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_H (A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_H (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "90e77c2c00f428e302f8a57f7e678a78ac94b901", "filename": "libgcc/soft-fp/floatuntihf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffloatuntihf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ffloatuntihf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatuntihf.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit unsigned integer to IEEE half.\n+   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+\n+HFtype\n+__floatuntihf (UTItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_H (A);\n+  HFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_H (A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_H (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "ba752978380ea25524fa8df80147d83e5443c44b", "filename": "libgcc/soft-fp/half.h", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Fhalf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Fhalf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fhalf.h?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,170 @@\n+/* Software floating-point emulation.\n+   Definitions for IEEE Half Precision.\n+   Copyright (C) 1997-2016 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef SOFT_FP_HALF_H\n+#define SOFT_FP_HALF_H\t1\n+\n+#if _FP_W_TYPE_SIZE < 32\n+# error \"Here's a nickel kid.  Go buy yourself a real computer.\"\n+#endif\n+\n+#define _FP_FRACTBITS_H\t\t(_FP_W_TYPE_SIZE)\n+\n+#define _FP_FRACTBITS_DW_H\t(_FP_W_TYPE_SIZE)\n+\n+#define _FP_FRACBITS_H\t\t11\n+#define _FP_FRACXBITS_H\t\t(_FP_FRACTBITS_H - _FP_FRACBITS_H)\n+#define _FP_WFRACBITS_H\t\t(_FP_WORKBITS + _FP_FRACBITS_H)\n+#define _FP_WFRACXBITS_H\t(_FP_FRACTBITS_H - _FP_WFRACBITS_H)\n+#define _FP_EXPBITS_H\t\t5\n+#define _FP_EXPBIAS_H\t\t15\n+#define _FP_EXPMAX_H\t\t31\n+\n+#define _FP_QNANBIT_H\t\t((_FP_W_TYPE) 1 << (_FP_FRACBITS_H-2))\n+#define _FP_QNANBIT_SH_H\t((_FP_W_TYPE) 1 << (_FP_FRACBITS_H-2+_FP_WORKBITS))\n+#define _FP_IMPLBIT_H\t\t((_FP_W_TYPE) 1 << (_FP_FRACBITS_H-1))\n+#define _FP_IMPLBIT_SH_H\t((_FP_W_TYPE) 1 << (_FP_FRACBITS_H-1+_FP_WORKBITS))\n+#define _FP_OVERFLOW_H\t\t((_FP_W_TYPE) 1 << (_FP_WFRACBITS_H))\n+\n+#define _FP_WFRACBITS_DW_H\t(2 * _FP_WFRACBITS_H)\n+#define _FP_WFRACXBITS_DW_H\t(_FP_FRACTBITS_DW_H - _FP_WFRACBITS_DW_H)\n+#define _FP_HIGHBIT_DW_H\t\\\n+  ((_FP_W_TYPE) 1 << (_FP_WFRACBITS_DW_H - 1) % _FP_W_TYPE_SIZE)\n+\n+/* The implementation of _FP_MUL_MEAT_H and _FP_DIV_MEAT_H should be\n+   chosen by the target machine.  */\n+\n+typedef float HFtype __attribute__ ((mode (HF)));\n+\n+union _FP_UNION_H\n+{\n+  HFtype flt;\n+  struct _FP_STRUCT_LAYOUT\n+  {\n+#if __BYTE_ORDER == __BIG_ENDIAN\n+    unsigned sign : 1;\n+    unsigned exp  : _FP_EXPBITS_H;\n+    unsigned frac : _FP_FRACBITS_H - (_FP_IMPLBIT_H != 0);\n+#else\n+    unsigned frac : _FP_FRACBITS_H - (_FP_IMPLBIT_H != 0);\n+    unsigned exp  : _FP_EXPBITS_H;\n+    unsigned sign : 1;\n+#endif\n+  } bits __attribute__ ((packed));\n+};\n+\n+#define FP_DECL_H(X)\t\t_FP_DECL (1, X)\n+#define FP_UNPACK_RAW_H(X, val)\t_FP_UNPACK_RAW_1 (H, X, (val))\n+#define FP_UNPACK_RAW_HP(X, val)\t_FP_UNPACK_RAW_1_P (H, X, (val))\n+#define FP_PACK_RAW_H(val, X)\t_FP_PACK_RAW_1 (H, (val), X)\n+#define FP_PACK_RAW_HP(val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (!FP_INHIBIT_RESULTS)\t\t\t\\\n+\t_FP_PACK_RAW_1_P (H, (val), X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_UNPACK_H(X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_UNPACK_RAW_1 (H, X, (val));\t\t\\\n+      _FP_UNPACK_CANONICAL (H, 1, X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_UNPACK_HP(X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_UNPACK_RAW_1_P (H, X, (val));\t\t\\\n+      _FP_UNPACK_CANONICAL (H, 1, X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_UNPACK_SEMIRAW_H(X, val)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_UNPACK_RAW_1 (H, X, (val));\t\t\\\n+      _FP_UNPACK_SEMIRAW (H, 1, X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_UNPACK_SEMIRAW_HP(X, val)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_UNPACK_RAW_1_P (H, X, (val));\t\t\\\n+      _FP_UNPACK_SEMIRAW (H, 1, X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_PACK_H(val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_PACK_CANONICAL (H, 1, X);\t\t\\\n+      _FP_PACK_RAW_1 (H, (val), X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_PACK_HP(val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_PACK_CANONICAL (H, 1, X);\t\t\\\n+      if (!FP_INHIBIT_RESULTS)\t\t\t\\\n+\t_FP_PACK_RAW_1_P (H, (val), X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_PACK_SEMIRAW_H(val, X)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_PACK_SEMIRAW (H, 1, X);\t\t\\\n+      _FP_PACK_RAW_1 (H, (val), X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_PACK_SEMIRAW_HP(val, X)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      _FP_PACK_SEMIRAW (H, 1, X);\t\t\\\n+      if (!FP_INHIBIT_RESULTS)\t\t\t\\\n+\t_FP_PACK_RAW_1_P (H, (val), X);\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define FP_TO_INT_H(r, X, rsz, rsg)\t_FP_TO_INT (H, 1, (r), X, (rsz), (rsg))\n+#define FP_TO_INT_ROUND_H(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (H, 1, (r), X, (rsz), (rsg))\n+#define FP_FROM_INT_H(X, r, rs, rt)\t_FP_FROM_INT (H, 1, X, (r), (rs), rt)\n+\n+/* HFmode arithmetic is not implemented.  */\n+\n+#define _FP_FRAC_HIGH_H(X)\t_FP_FRAC_HIGH_1 (X)\n+#define _FP_FRAC_HIGH_RAW_H(X)\t_FP_FRAC_HIGH_1 (X)\n+#define _FP_FRAC_HIGH_DW_H(X)\t_FP_FRAC_HIGH_1 (X)\n+\n+#endif /* !SOFT_FP_HALF_H */"}, {"sha": "0500b141850a3610dbc88eae947f1a3a7e611933", "filename": "libgcc/soft-fp/trunctfhf2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ftrunctfhf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5823ef233578d8f6e3770bf92e72c1c977067d13/libgcc%2Fsoft-fp%2Ftrunctfhf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ftrunctfhf2.c?ref=5823ef233578d8f6e3770bf92e72c1c977067d13", "patch": "@@ -0,0 +1,52 @@\n+/* Software floating-point emulation.\n+   Truncate IEEE quad into IEEE half.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"half.h\"\n+#include \"quad.h\"\n+\n+HFtype\n+__trunctfhf2 (TFtype a)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_Q (A);\n+  FP_DECL_H (R);\n+  HFtype r;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_UNPACK_SEMIRAW_Q (A, a);\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+  FP_TRUNC (H, Q, 1, 4, R, A);\n+#else\n+  FP_TRUNC (H, Q, 1, 2, R, A);\n+#endif\n+  FP_PACK_SEMIRAW_H (r, R);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r;\n+}"}]}