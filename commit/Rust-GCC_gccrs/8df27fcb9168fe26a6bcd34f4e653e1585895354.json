{"sha": "8df27fcb9168fe26a6bcd34f4e653e1585895354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMjdmY2I5MTY4ZmUyNmE2YmNkMzRmNGU2NTNlMTU4NTg5NTM1NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-02T22:09:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-02T22:09:25Z"}, "message": "P0758R1 Implicit conversion traits\n\nExtend __is_convertible_helper to also detect whether the conversion is\nnon-throwing, for std::is_nothrow_convertible in C++2a,\n\n\t* include/std/type_traits [__cplusplus > 201703]\n\t(__is_convertible_helper::__is_nothrow_type): Define new member.\n\t(__is_convertible_helper<_From, _To, false>::__test_aux1): Add\n\tnoexcept.\n\t(__is_convertible_helper<_From, _To, false>::__test_nothrow)\n\t(__is_convertible_helper<_From, _To, false>::__is_nothrow_type): Add\n\tnew members.\n\t(is_nothrow_convertible, is_nothrow_convertible_v): Define for C++2a.\n\t* testsuite/20_util/is_nothrow_convertible/value.cc: New.\n\t* testsuite/20_util/is_nothrow_convertible/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_nothrow_convertible/requirements/typedefs.cc:\n\tNew.\n\nFrom-SVN: r262322", "tree": {"sha": "b28afa0e0becf9af2fcb5fbaa355958c39549d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b28afa0e0becf9af2fcb5fbaa355958c39549d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df27fcb9168fe26a6bcd34f4e653e1585895354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df27fcb9168fe26a6bcd34f4e653e1585895354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df27fcb9168fe26a6bcd34f4e653e1585895354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df27fcb9168fe26a6bcd34f4e653e1585895354/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5eae716f66322842da21c17002c66b10c6f6b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eae716f66322842da21c17002c66b10c6f6b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5eae716f66322842da21c17002c66b10c6f6b40"}], "stats": {"total": 296, "additions": 291, "deletions": 5}, "files": [{"sha": "ae734e8487dede4f4d13ff3b1690ae899fb65a6e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -1,5 +1,20 @@\n 2018-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP0758R1 Implicit conversion traits\n+\t* include/std/type_traits [__cplusplus > 201703]\n+\t(__is_convertible_helper::__is_nothrow_type): Define new member.\n+\t(__is_convertible_helper<_From, _To, false>::__test_aux1): Add\n+\tnoexcept.\n+\t(__is_convertible_helper<_From, _To, false>::__test_nothrow)\n+\t(__is_convertible_helper<_From, _To, false>::__is_nothrow_type): Add\n+\tnew members.\n+\t(is_nothrow_convertible, is_nothrow_convertible_v): Define for C++2a.\n+\t* testsuite/20_util/is_nothrow_convertible/value.cc: New.\n+\t* testsuite/20_util/is_nothrow_convertible/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_nothrow_convertible/requirements/typedefs.cc:\n+\tNew.\n+\n \tP0887R1 The identity metafunction\n \t* include/std/type_traits (type_identity, type_identity_t): Define\n \tfor C++2a."}, {"sha": "accea6df648eeb40b53f108c8cbe54a5b3254c36", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -1341,13 +1341,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            bool = __or_<is_void<_From>, is_function<_To>,\n                         is_array<_To>>::value>\n     struct __is_convertible_helper\n-    { typedef typename is_void<_To>::type type; };\n+    {\n+      typedef typename is_void<_To>::type type;\n+#if __cplusplus > 201703L\n+      typedef type __is_nothrow_type;\n+#endif\n+    };\n \n   template<typename _From, typename _To>\n     class __is_convertible_helper<_From, _To, false>\n     {\n-       template<typename _To1>\n-\tstatic void __test_aux(_To1);\n+      template<typename _To1>\n+\tstatic void __test_aux(_To1) noexcept;\n \n       template<typename _From1, typename _To1,\n \t       typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>\n@@ -1358,8 +1363,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic false_type\n \t__test(...);\n \n+#if __cplusplus > 201703L\n+      template<typename _From1, typename _To1,\n+\t       bool _NoEx = noexcept(__test_aux<_To1>(std::declval<_From1>()))>\n+\tstatic __bool_constant<_NoEx>\n+\t__test_nothrow(int);\n+\n+      template<typename, typename>\n+\tstatic false_type\n+\t__test_nothrow(...);\n+#endif\n+\n     public:\n       typedef decltype(__test<_From, _To>(0)) type;\n+\n+#if __cplusplus > 201703L\n+      typedef decltype(__test_nothrow<_From, _To>(0)) __is_nothrow_type;\n+#endif\n     };\n \n \n@@ -1369,6 +1389,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_convertible_helper<_From, _To>::type\n     { };\n \n+#if __cplusplus > 201703L\n+  /// is_nothrow_convertible\n+  template<typename _From, typename _To>\n+    struct is_nothrow_convertible\n+    : public __is_convertible_helper<_From, _To>::__is_nothrow_type\n+    { };\n+\n+  /// is_nothrow_convertible_v\n+  template<typename _From, typename _To>\n+    inline constexpr bool is_nothrow_convertible_v\n+      = is_nothrow_convertible<_From, _To>::value;\n+#endif // C++2a\n \n   // Const-volatile modifications.\n "}, {"sha": "68f1adecb38e68ea1f19d944aabebb553b16c572", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Fexplicit_instantiation.cc?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_nothrow_convertible<test_type, test_type>;\n+}"}, {"sha": "3b5c6d51fe1af3fdce7b76f1d984be26eaabf22a", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Frequirements%2Ftypedefs.cc?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_nothrow_convertible<int, int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "5824be4810d3fac60f569382c140489e05ca0b1f", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/value.cc", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -0,0 +1,177 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::is_nothrow_convertible;\n+  using namespace __gnu_test;\n+\n+  // Positive conversion tests.\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, const int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  volatile int, const int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, float>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  double, float>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float, int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int*, const int*>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int*, void*>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int[4], int*>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float&, int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, const int&>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const int&, int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float, const int&>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(int), int(*)(int)>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(&)(int), int(*)(int)>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  EnumType, int>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ClassType, ClassType>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  DerivedType, ClassType>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  DerivedType*, ClassType*>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  DerivedType&, ClassType&>(true));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const int, const int&>(true));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void, void>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const void, void>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void, volatile void>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  double&, NoexceptExplicitClass>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  NoexceptCopyConsClass,\n+\t\t\t\t  NoexceptCopyConsClass>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const NoexceptCopyConsClass,\n+\t\t\t\t  NoexceptCopyConsClass>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const NoexceptCopyConsClass&,\n+\t\t\t\t  NoexceptCopyConsClass>(true));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  NoexceptMoveConsClass,\n+\t\t\t\t  NoexceptMoveConsClass>(true));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(int), int(&)(int)>(true));\n+\n+  // Negative conversion tests.\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const int*, int*>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int*, float*>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const int[4], int*>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int[4], int[4]>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const int&, int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float&, int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float, volatile int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(int), int(int)>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(int), int(*)(void)>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int(*)(int), int(&)(int)>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, EnumType>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, ClassType>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ClassType, DerivedType>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ClassType*, DerivedType*>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ClassType&, DerivedType&>(false));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void, int>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void, float>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void, int(*)(int)>(false));\n+\n+  // C++0x\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, void>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int[4], void>(false));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int, int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  float, volatile float&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const volatile int,\n+\t\t\t\t  const volatile int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  volatile int, volatile int&>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  double&, ExplicitClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  int&, ExplicitClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  void*, ExplicitClass>(false));\n+\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ExceptCopyConsClass,\n+\t\t\t\t  ExceptCopyConsClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const ExceptCopyConsClass,\n+\t\t\t\t  ExceptCopyConsClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  const ExceptCopyConsClass&,\n+\t\t\t\t  ExceptCopyConsClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ExceptMoveConsClass,\n+\t\t\t\t  ExceptMoveConsClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  ExceptMoveConsClass&,\n+\t\t\t\t  ExceptMoveConsClass>(false));\n+  static_assert(test_relationship<is_nothrow_convertible,\n+\t\t\t\t  NoexceptMoveConsClass&,\n+\t\t\t\t  NoexceptMoveConsClass>(false));\n+}"}, {"sha": "1380fc55c828e503fa71773886a095f1582fa98e", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -47,4 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1793 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1825 }"}, {"sha": "cbc5300c182c1649ecc4b4de467d2348a83caee3", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df27fcb9168fe26a6bcd34f4e653e1585895354/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=8df27fcb9168fe26a6bcd34f4e653e1585895354", "patch": "@@ -47,5 +47,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1676 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1708 }\n "}]}