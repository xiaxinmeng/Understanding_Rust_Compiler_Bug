{"sha": "fe1db400ad466c7c62a37d89f51ee4474bdba214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxZGI0MDBhZDQ2NmM3YzYyYTM3ZDg5ZjUxZWU0NDc0YmRiYTIxNA==", "commit": {"author": {"name": "Frederic Konrad", "email": "konrad@adacore.com", "date": "2018-05-31T10:47:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:47:08Z"}, "message": "[Ada] Fix __gnat_backtrace for VxWorks7 on x86\n\nA STORAGE ERROR is raised in __gnat_backtrace:\n\nadainit: 0x00400DBC\n\nExecution of ce.vxe terminated by unhandled exception\nraised STORAGE_ERROR : SIGSEGV: possible stack overflow\nCall stack traceback locations:\n0x4082f1 0x408323 0x4080c9\n\nIt was passing with vxsim because the WRS_RTP_BASE is set to a different\nplace hence the (CURRENT) < (TOP_STACK) was stopping the backtrace at the\nright time. So let's stop at the main symbol when RTS=rtp.\n\n2018-05-31  Frederic Konrad  <konrad@adacore.com>\n\ngcc/ada/\n\n\t* tracebak.c (STOP_FRAME): Harden condition.\n\t(is_return_from, EXTRA_STOP_CONDITION): New helpers for VxWorks in RTP\n\tmode.\n\nFrom-SVN: r261010", "tree": {"sha": "74fd38f91d3b24c2cd96bdde7db74f0ab08b9e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74fd38f91d3b24c2cd96bdde7db74f0ab08b9e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1db400ad466c7c62a37d89f51ee4474bdba214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1db400ad466c7c62a37d89f51ee4474bdba214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1db400ad466c7c62a37d89f51ee4474bdba214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1db400ad466c7c62a37d89f51ee4474bdba214/comments", "author": {"login": "FredKonrad", "id": 29773702, "node_id": "MDQ6VXNlcjI5NzczNzAy", "avatar_url": "https://avatars.githubusercontent.com/u/29773702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FredKonrad", "html_url": "https://github.com/FredKonrad", "followers_url": "https://api.github.com/users/FredKonrad/followers", "following_url": "https://api.github.com/users/FredKonrad/following{/other_user}", "gists_url": "https://api.github.com/users/FredKonrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/FredKonrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FredKonrad/subscriptions", "organizations_url": "https://api.github.com/users/FredKonrad/orgs", "repos_url": "https://api.github.com/users/FredKonrad/repos", "events_url": "https://api.github.com/users/FredKonrad/events{/privacy}", "received_events_url": "https://api.github.com/users/FredKonrad/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "a68975b4b59883cc95439f4d6997bf49e296349d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1db400ad466c7c62a37d89f51ee4474bdba214/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1db400ad466c7c62a37d89f51ee4474bdba214/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe1db400ad466c7c62a37d89f51ee4474bdba214", "patch": "@@ -1,3 +1,9 @@\n+2018-05-31  Frederic Konrad  <konrad@adacore.com>\n+\n+\t* tracebak.c (STOP_FRAME): Harden condition.\n+\t(is_return_from, EXTRA_STOP_CONDITION): New helpers for VxWorks in RTP\n+\tmode.\n+\n 2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n \n \t* checks.adb (Apply_Discriminant_Check): Do not apply discriminant"}, {"sha": "9918123d948aeca07bd31f3d30ec55a5eaddca10", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1db400ad466c7c62a37d89f51ee4474bdba214/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1db400ad466c7c62a37d89f51ee4474bdba214/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=fe1db400ad466c7c62a37d89f51ee4474bdba214", "patch": "@@ -478,10 +478,11 @@ struct layout\n #define PC_ADJUST -2\n #define STOP_FRAME(CURRENT, TOP_STACK) \\\n   (IS_BAD_PTR((long)(CURRENT)) \\\n+   || (void *) (CURRENT) < (TOP_STACK) \\\n    || IS_BAD_PTR((long)(CURRENT)->return_address) \\\n    || (CURRENT)->return_address == 0 \\\n    || (void *) ((CURRENT)->next) < (TOP_STACK)  \\\n-   || (void *) (CURRENT) < (TOP_STACK))\n+   || EXTRA_STOP_CONDITION(CURRENT))\n \n #define BASE_SKIP (1+FRAME_LEVEL)\n \n@@ -504,6 +505,37 @@ struct layout\n         || ((*((ptr) - 1) & 0xff) == 0xff) \\\n         || (((*(ptr) & 0xd0ff) == 0xd0ff))))\n \n+#if defined (__vxworks) && defined (__RTP__)\n+\n+/* For VxWorks following backchains past the \"main\" frame gets us into the\n+   kernel space, where it can't be dereferenced. So lets stop at the main\n+   symbol.  */\n+extern void main();\n+\n+static int\n+is_return_from(void *symbol_addr, void *ret_addr)\n+{\n+  int ret = 0;\n+  char *ptr = (char *)ret_addr;\n+\n+  if ((*(ptr - 5) & 0xff) == 0xe8)\n+    {\n+      /* call addr16  E8 xx xx xx xx  */\n+      int32_t offset = *(int32_t *)(ptr - 4);\n+      ret = (ptr + offset) == symbol_addr;\n+    }\n+\n+  /* Others not implemented yet...  But it is very likely that call addr16\n+     is used here.  */\n+  return ret;\n+}\n+\n+#define EXTRA_STOP_CONDITION(CURRENT) \\\n+  (is_return_from(&main, (CURRENT)->return_address))\n+#else /* not (defined (__vxworks) && defined (__RTP__)) */\n+#define EXTRA_STOP_CONDITION(CURRENT) (0)\n+#endif /* not (defined (__vxworks) && defined (__RTP__)) */\n+\n /*----------------------------- qnx ----------------------------------*/\n \n #elif defined (__QNX__)"}]}