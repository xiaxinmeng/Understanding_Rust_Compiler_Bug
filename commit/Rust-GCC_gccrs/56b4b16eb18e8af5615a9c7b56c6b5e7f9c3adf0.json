{"sha": "56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiNGIxNmViMThlOGFmNTYxNWE5YzdiNTZjNmI1ZTdmOWMzYWRmMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-05T14:20:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-05T14:20:38Z"}, "message": "Check for bitwise identity when encoding VECTOR_CSTs (PR 92768)\n\nThis PR shows that we weren't checking for bitwise-identical values\nwhen trying to encode a VECTOR_CST, so -0.0 was treated the same as\n0.0 for -fno-signed-zeros.  The patch adds a new OEP flag to select\nthat behaviour.\n\n2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/92768\n\t* tree-core.h (OEP_BITWISE): New flag.\n\t* fold-const.c (operand_compare::operand_equal_p): Handle it.\n\t* tree-vector-builder.h (tree_vector_builder::equal_p): Pass it.\n\ngcc/testsuite/\n\tPR middle-end/92768\n\t* gcc.dg/pr92768.c: New test.\n\nFrom-SVN: r279002", "tree": {"sha": "5e41d9c2bd48e9c3b6f229b418d7f4fc32780b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e41d9c2bd48e9c3b6f229b418d7f4fc32780b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a784d350c57d670775471bec847370ed7677666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a784d350c57d670775471bec847370ed7677666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a784d350c57d670775471bec847370ed7677666"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "83d66f1673ed691cc0bba65434a996b03886f476", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -1,3 +1,10 @@\n+2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/92768\n+\t* tree-core.h (OEP_BITWISE): New flag.\n+\t* fold-const.c (operand_compare::operand_equal_p): Handle it.\n+\t* tree-vector-builder.h (tree_vector_builder::equal_p): Pass it.\n+\n 2019-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92818"}, {"sha": "c5bd45a6e34466fb4da365592f929aa6e1d9ea73", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -2938,6 +2938,11 @@ combine_comparisons (location_t loc,\n    If OEP_LEXICOGRAPHIC is set, then also handle expressions with side-effects\n    such as MODIFY_EXPR, RETURN_EXPR, as well as STATEMENT_LISTs.\n \n+   If OEP_BITWISE is set, then require the values to be bitwise identical\n+   rather than simply numerically equal.  Do not take advantage of things\n+   like math-related flags or undefined behavior; only return true for\n+   values that are provably bitwise identical in all circumstances.\n+\n    Unless OEP_MATCH_SIDE_EFFECTS is set, the function returns false on\n    any operand with side effect.  This is unnecesarily conservative in the\n    case we know that arg0 and arg1 are in disjoint code paths (such as in\n@@ -2967,6 +2972,11 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n   if (!TREE_TYPE (arg0) || !TREE_TYPE (arg1))\n     return false;\n \n+  /* Bitwise identity makes no sense if the values have different layouts.  */\n+  if ((flags & OEP_BITWISE)\n+      && !tree_nop_conversion_p (TREE_TYPE (arg0), TREE_TYPE (arg1)))\n+    return false;\n+\n   /* We cannot consider pointers to different address space equal.  */\n   if (POINTER_TYPE_P (TREE_TYPE (arg0))\n       && POINTER_TYPE_P (TREE_TYPE (arg1))\n@@ -3099,8 +3109,7 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \tif (real_identical (&TREE_REAL_CST (arg0), &TREE_REAL_CST (arg1)))\n \t  return true;\n \n-\n-\tif (!HONOR_SIGNED_ZEROS (arg0))\n+\tif (!(flags & OEP_BITWISE) && !HONOR_SIGNED_ZEROS (arg0))\n \t  {\n \t    /* If we do not distinguish between signed and unsigned zero,\n \t       consider them equal.  */\n@@ -3152,7 +3161,9 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \tbreak;\n       }\n \n-  if (flags & OEP_ONLY_CONST)\n+  /* Don't handle more cases for OEP_BITWISE, since we can't guarantee that\n+     two instances of undefined behavior will give identical results.  */\n+  if (flags & (OEP_ONLY_CONST | OEP_BITWISE))\n     return false;\n \n /* Define macros to test an operand from arg0 and arg1 for equality and a"}, {"sha": "b2c6d104c61be26ca8ed1867d254dda0c72ac271", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -1,3 +1,8 @@\n+2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/92768\n+\t* gcc.dg/pr92768.c: New test.\n+\n 2019-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92818"}, {"sha": "fa6a9cb39876563baf2575495fd9e6dcd12ca784", "filename": "gcc/testsuite/gcc.dg/pr92768.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92768.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92768.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92768.c?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-O2 -fno-signed-zeros -fdump-tree-optimized\" } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+v4sf f () { return (v4sf) { 0.0, -0.0, 0.0, -0.0 }; }\n+\n+/* { dg-final { scan-tree-dump {{ 0\\.0, -0\\.0, 0\\.0, -0\\.0 }} \"optimized\" } } */"}, {"sha": "631f3712b20036d85671bc2335f9e5e1c0dcfec0", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -881,7 +881,8 @@ enum operand_equal_flag {\n   /* Internal within inchash::add_expr:  */\n   OEP_HASH_CHECK = 32,\n   /* Makes operand_equal_p handle more expressions:  */\n-  OEP_LEXICOGRAPHIC = 64\n+  OEP_LEXICOGRAPHIC = 64,\n+  OEP_BITWISE = 128\n };\n \n /* Enum and arrays used for tree allocation stats."}, {"sha": "add79e476adfe4b0782c3929cb39338d40425f73", "filename": "gcc/tree-vector-builder.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftree-vector-builder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0/gcc%2Ftree-vector-builder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vector-builder.h?ref=56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0", "patch": "@@ -88,7 +88,7 @@ tree_vector_builder::new_vector (tree type, unsigned int npatterns,\n inline bool\n tree_vector_builder::equal_p (const_tree elt1, const_tree elt2) const\n {\n-  return operand_equal_p (elt1, elt2, 0);\n+  return operand_equal_p (elt1, elt2, OEP_BITWISE);\n }\n \n /* Return true if a stepped representation is OK.  We don't allow"}]}