{"sha": "073197227cb998f0506011facad1b20d6e470aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDczMTk3MjI3Y2I5OThmMDUwNjAxMWZhY2FkMWIyMGQ2ZTQ3MGFhNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-02-03T07:24:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-02-03T07:24:06Z"}, "message": "ios_base.h (_S_ios_fmtflags_end): Initialize correctly targets with 16bit ints.\n\n        * include/bits/ios_base.h (_S_ios_fmtflags_end): Initialize\n        correctly targets with 16bit ints.\n        (_S_ios_openmode_end): Similarly.\n        (_S_ios_iostate_end): Similarly.\n        (_S_ios_Seekdir_end): Similarly.\n\nFrom-SVN: r39427", "tree": {"sha": "96ca17685b0ffa8bda632c4215a3ba6531406a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96ca17685b0ffa8bda632c4215a3ba6531406a5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/073197227cb998f0506011facad1b20d6e470aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073197227cb998f0506011facad1b20d6e470aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073197227cb998f0506011facad1b20d6e470aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073197227cb998f0506011facad1b20d6e470aa5/comments", "author": null, "committer": null, "parents": [{"sha": "4e190cf35ce351b8470aced608eebfba027c9564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e190cf35ce351b8470aced608eebfba027c9564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e190cf35ce351b8470aced608eebfba027c9564"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "6b919d9994af4ff3f058ec5490da2b873ebda8c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073197227cb998f0506011facad1b20d6e470aa5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073197227cb998f0506011facad1b20d6e470aa5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=073197227cb998f0506011facad1b20d6e470aa5", "patch": "@@ -1,3 +1,11 @@\n+Fri Feb  2 15:47:51 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* include/bits/ios_base.h (_S_ios_fmtflags_end): Initialize\n+\tcorrectly targets with 16bit ints.\n+\t(_S_ios_openmode_end): Similarly.\n+\t(_S_ios_iostate_end): Similarly.\n+\t(_S_ios_Seekdir_end): Similarly.\n+\t\n 2001-02-02  Phil Edwards  <pme@sources.redhat.com>\n \n \t* mkcheck.in:  Also limit virtual memory size, for mmap-based mallocs."}, {"sha": "12177dafe0f09b3db1d78a3ddcdce2f0cb1c8e15", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/073197227cb998f0506011facad1b20d6e470aa5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/073197227cb998f0506011facad1b20d6e470aa5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=073197227cb998f0506011facad1b20d6e470aa5", "patch": "@@ -40,7 +40,7 @@ namespace std {\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that\n   // expressions involving them are no longer compile-time constants.\n-  enum _Ios_Fmtflags { _M_ios_fmtflags_end = 1 << 16 };\n+  enum _Ios_Fmtflags { _M_ios_fmtflags_end = 1L << 16 };\n \n   inline _Ios_Fmtflags \n   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)\n@@ -71,7 +71,7 @@ namespace std {\n   { return _Ios_Fmtflags(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Openmode { _M_ios_openmode_end = 1 << 16 };\n+  enum _Ios_Openmode { _M_ios_openmode_end = 1L << 16 };\n \n   inline _Ios_Openmode \n   operator&(_Ios_Openmode __a, _Ios_Openmode __b)\n@@ -102,7 +102,7 @@ namespace std {\n   { return _Ios_Openmode(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Iostate { _M_ios_iostate_end = 1 << 16 };\n+  enum _Ios_Iostate { _M_ios_iostate_end = 1L << 16 };\n \n   inline _Ios_Iostate \n   operator&(_Ios_Iostate __a, _Ios_Iostate __b)\n@@ -132,7 +132,7 @@ namespace std {\n   operator~(_Ios_Iostate __a)\n   { return _Ios_Iostate(~static_cast<int>(__a)); }\n \n-  enum _Ios_Seekdir { _M_ios_seekdir_end = 1 << 16 };\n+  enum _Ios_Seekdir { _M_ios_seekdir_end = 1L << 16 };\n \n   // 27.4.2  Class ios_base\n   class ios_base"}]}