{"sha": "ae15736e2d7c411ecedba356c112ae7a134fc62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxNTczNmUyZDdjNDExZWNlZGJhMzU2YzExMmFlN2ExMzRmYzYyYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-08T19:44:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-08T19:44:42Z"}, "message": "re PR target/44757 (lm32.md: In function \u2018gen_ashlsi3\u2019:unused variable \u2018one\u2019)\n\n2010-11-08  Joern Rennecke  <amylaar@spamcop.net>\n\t    Richard Henderson <rth@redhat.com>\n\n\tPR target/44757 \n\t* config/lm32/lm32.h (LEGITIMATE_CONSTANT_P): Call\n\tlm32_legitimate_constant_p.\n\t* config/lm32/lm32.md (ashlsi3): Remove unused variable.\n\t* config/lm32/lm32.c (gen_int_relational): Make new block for\n\tLE / LT / LEU / LTU case.  Declare variables at start of block.\n\t(lm32_block_move_inline): Use XALLOCAVEC.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r166451", "tree": {"sha": "d722d8b6ee9d1632946ea7b6d41ab37b3219be94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d722d8b6ee9d1632946ea7b6d41ab37b3219be94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae15736e2d7c411ecedba356c112ae7a134fc62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae15736e2d7c411ecedba356c112ae7a134fc62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae15736e2d7c411ecedba356c112ae7a134fc62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae15736e2d7c411ecedba356c112ae7a134fc62c/comments", "author": null, "committer": null, "parents": [{"sha": "f4becba81532699a3d4681460fb0107791901a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4becba81532699a3d4681460fb0107791901a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4becba81532699a3d4681460fb0107791901a58"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "49378ae057dc9099d8dfa4d4430958efad17ef6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae15736e2d7c411ecedba356c112ae7a134fc62c", "patch": "@@ -39,6 +39,14 @@\n \t(bdesc_void3arg, bdesc_voidacc, bdesc_loads, bdesc_stores): Likewise.\n \t(frv_read_argument): Use expand_normal.\n \n+\tPR target/44757 \n+\t* config/lm32/lm32.h (LEGITIMATE_CONSTANT_P): Call\n+\tlm32_legitimate_constant_p.\n+\t* config/lm32/lm32.md (ashlsi3): Remove unused variable.\n+\t* config/lm32/lm32.c (gen_int_relational): Make new block for\n+\tLE / LT / LEU / LTU case.  Declare variables at start of block.\n+\t(lm32_block_move_inline): Use XALLOCAVEC.\n+\n 2010-11-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/i386.c (ix86_function_arg_boundary): Fix warning"}, {"sha": "ef09377626dded79a849b9bc3b5f7d5b47d7a412", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=ae15736e2d7c411ecedba356c112ae7a134fc62c", "patch": "@@ -191,18 +191,22 @@ gen_int_relational (enum rtx_code code,\n     case LT:\n     case LEU:\n     case LTU:\n-      code = swap_condition (code);\n-      rtx temp = cmp0;\n-      cmp0 = cmp1;\n-      cmp1 = temp;\n-      break;\n+      {\n+\trtx temp;\n+\n+\tcode = swap_condition (code);\n+\ttemp = cmp0;\n+\tcmp0 = cmp1;\n+\tcmp1 = temp;\n+\tbreak;\n+      }\n     default:\n       break;\n     }\n \n   if (branch_p)\n     {\n-      rtx insn;\n+      rtx insn, cond, label;\n \n       /* Operands must be in registers.  */\n       if (!register_operand (cmp0, mode))\n@@ -211,8 +215,8 @@ gen_int_relational (enum rtx_code code,\n \tcmp1 = force_reg (mode, cmp1);\n \n       /* Generate conditional branch instruction.  */\n-      rtx cond = gen_rtx_fmt_ee (code, mode, cmp0, cmp1);\n-      rtx label = gen_rtx_LABEL_REF (VOIDmode, destination);\n+      cond = gen_rtx_fmt_ee (code, mode, cmp0, cmp1);\n+      label = gen_rtx_LABEL_REF (VOIDmode, destination);\n       insn = gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t  gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\tcond, label, pc_rtx));\n@@ -841,7 +845,7 @@ lm32_block_move_inline (rtx dest, rtx src, HOST_WIDE_INT length,\n   delta = bits / BITS_PER_UNIT;\n \n   /* Allocate a buffer for the temporary registers.  */\n-  regs = alloca (sizeof (rtx) * length / delta);\n+  regs = XALLOCAVEC (rtx, length / delta);\n \n   /* Load as many BITS-sized chunks as possible.  */\n   for (offset = 0, i = 0; offset + delta <= length; offset += delta, i++)"}, {"sha": "1c10f16c812d5087fba71a0e87dd3f93c7b92b29", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=ae15736e2d7c411ecedba356c112ae7a134fc62c", "patch": "@@ -350,7 +350,7 @@ enum reg_class\n #define REG_OK_FOR_BASE_P(X) NONSTRICT_REG_OK_FOR_BASE_P(X)\n #endif\n \n-#define LEGITIMATE_CONSTANT_P(X) lm32_legitimate_constant_p\n+#define LEGITIMATE_CONSTANT_P(X) lm32_legitimate_constant_p (X)\n \n /*-------------------------*/\n /* Condition Code Status.  */"}, {"sha": "72c0d843c0b290031140b9dca3b201598254e6ab", "filename": "gcc/config/lm32/lm32.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae15736e2d7c411ecedba356c112ae7a134fc62c/gcc%2Fconfig%2Flm32%2Flm32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.md?ref=ae15736e2d7c411ecedba356c112ae7a134fc62c", "patch": "@@ -824,7 +824,6 @@\n         {\n           int i;\n           int shifts = INTVAL (operands[2]);\n-          rtx one = GEN_INT (1);\n           \n           if (shifts == 0)\n             emit_move_insn (operands[0], operands[1]);"}]}