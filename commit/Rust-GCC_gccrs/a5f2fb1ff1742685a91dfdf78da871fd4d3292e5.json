{"sha": "a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmMmZiMWZmMTc0MjY4NWE5MWRmZGY3OGRhODcxZmQ0ZDMyOTJlNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-01T13:27:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-01T13:27:25Z"}, "message": "libstdc++: Replace deduced return type in ranges::iter_move (PR 92894)\n\nThe deduced return type causes the instantiation of the function body,\nwhich can then require the instantiation of std::projected::operator*\nwhich is intentionally not defined.\n\nThis patch uses a helper trait to define the return type, so that the\nfunction body doesn't need to be instantiated. That helper trait can\nthen also be used in other places that currently check the return type\nof ranges::iter_move (iter_rvalue_reference_t and indirectly_readable).\n\n2020-05-01  Jonathan Wakely  <jwakely@redhat.com>\n\t    Patrick Palka  <ppalka@redhat.com>\n\n\tPR libstdc++/92894\n\t* include/bits/iterator_concepts.h (ranges::__cust_imove::_IMove):\n\tAdd trait to determine return type and an alias for it.\n\t(ranges::__cust_imove::_IMove::operator()): Use __result instead of\n\tdeduced return type.\n\t(iter_rvalue_reference_t): Use _IMove::__type instead of checking\n\tthe result of ranges::iter_move.\n\t(__detail::__indirectly_readable_impl): Use iter_rvalue_reference_t\n\tinstead of checking the result of ranges::iter_move.\n\t* testsuite/24_iterators/customization_points/92894.cc: New test.\n\t* testsuite/24_iterators/indirect_callable/92894.cc: New test.", "tree": {"sha": "b544e703bf229eb499608901a003e494390166b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b544e703bf229eb499608901a003e494390166b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070b4df8a06539b661c134d436ea4207099fdcf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b4df8a06539b661c134d436ea4207099fdcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070b4df8a06539b661c134d436ea4207099fdcf0"}], "stats": {"total": 164, "additions": 153, "deletions": 11}, "files": [{"sha": "152c69f843f43bf76c122d49c07e7ed04e24919b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "patch": "@@ -1,3 +1,18 @@\n+2020-05-01  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/92894\n+\t* include/bits/iterator_concepts.h (ranges::__cust_imove::_IMove):\n+\tAdd trait to determine return type and an alias for it.\n+\t(ranges::__cust_imove::_IMove::operator()): Use __result instead of\n+\tdeduced return type.\n+\t(iter_rvalue_reference_t): Use _IMove::__type instead of checking\n+\tthe result of ranges::iter_move.\n+\t(__detail::__indirectly_readable_impl): Use iter_rvalue_reference_t\n+\tinstead of checking the result of ranges::iter_move.\n+\t* testsuite/24_iterators/customization_points/92894.cc: New test.\n+\t* testsuite/24_iterators/indirect_callable/92894.cc: New test.\n+\n 2020-05-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94901"}, {"sha": "e221ec7036751b6135e4856f6ab8f4f5ab951306", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "patch": "@@ -89,6 +89,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct _IMove\n       {\n       private:\n+\ttemplate<typename _Tp>\n+\t  struct __result\n+\t  { using type = iter_reference_t<_Tp>; };\n+\n+\ttemplate<typename _Tp>\n+\t  requires __adl_imove<_Tp>\n+\t  struct __result<_Tp>\n+\t  { using type = decltype(iter_move(std::declval<_Tp>())); };\n+\n+\ttemplate<typename _Tp>\n+\t  requires (!__adl_imove<_Tp>)\n+\t  && is_lvalue_reference_v<iter_reference_t<_Tp>>\n+\t  struct __result<_Tp>\n+\t  { using type = remove_reference_t<iter_reference_t<_Tp>>&&; };\n+\n \ttemplate<typename _Tp>\n \t  static constexpr bool\n \t  _S_noexcept()\n@@ -100,16 +115,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \n       public:\n-\ttemplate<typename _Tp>\n-\t  requires __adl_imove<_Tp> || requires(_Tp& __e) { *__e; }\n-\t  constexpr decltype(auto)\n+\t// The result type of iter_move(std::declval<_Tp>())\n+\ttemplate<std::__detail::__dereferenceable _Tp>\n+\t  using __type = typename __result<_Tp>::type;\n+\n+\ttemplate<std::__detail::__dereferenceable _Tp>\n+\t  constexpr __type<_Tp>\n \t  operator()(_Tp&& __e) const\n \t  noexcept(_S_noexcept<_Tp>())\n \t  {\n \t    if constexpr (__adl_imove<_Tp>)\n \t      return iter_move(static_cast<_Tp&&>(__e));\n-\t    else if constexpr (is_reference_v<iter_reference_t<_Tp>>)\n-\t      return std::move(*__e);\n+\t    else if constexpr (is_lvalue_reference_v<iter_reference_t<_Tp>>)\n+\t      return static_cast<__type<_Tp>>(*__e);\n \t    else\n \t      return *__e;\n \t  }\n@@ -123,10 +141,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   } // namespace ranges\n \n   template<__detail::__dereferenceable _Tp>\n-    requires requires(_Tp& __t)\n-    { { ranges::iter_move(__t) } -> __detail::__can_reference; }\n+    requires __detail::\n+      __can_reference<ranges::__cust_imove::_IMove::__type<_Tp&>>\n     using iter_rvalue_reference_t\n-      = decltype(ranges::iter_move(std::declval<_Tp&>()));\n+      = ranges::__cust_imove::_IMove::__type<_Tp&>;\n \n   template<typename> struct incrementable_traits { };\n \n@@ -443,13 +461,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __iter_concept = typename __iter_concept_impl<_Iter>::type;\n \n   template<typename _In>\n-    concept __indirectly_readable_impl = requires(const _In __in)\n+    concept __indirectly_readable_impl = requires\n       {\n \ttypename iter_value_t<_In>;\n \ttypename iter_reference_t<_In>;\n \ttypename iter_rvalue_reference_t<_In>;\n-\t{ *__in } -> same_as<iter_reference_t<_In>>;\n-\t{ ranges::iter_move(__in) } -> same_as<iter_rvalue_reference_t<_In>>;\n+\trequires same_as<iter_reference_t<const _In>,\n+\t\t\t iter_reference_t<_In>>;\n+\trequires same_as<iter_rvalue_reference_t<const _In>,\n+\t\t\t iter_rvalue_reference_t<_In>>;\n       }\n       && common_reference_with<iter_reference_t<_In>&&, iter_value_t<_In>&>\n       && common_reference_with<iter_reference_t<_In>&&,"}, {"sha": "197268fe5e33c4d45328768e61fa80786ac7dc75", "filename": "libstdc++-v3/testsuite/24_iterators/customization_points/92894.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2F92894.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2F92894.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2F92894.cc?ref=a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using namespace std;\n+\n+// Define our own of version of indirectly_readable_impl here,\n+// to check the use of iter_move even if the real concept in\n+// <bits/iterator_concepts.h> no longer uses iter_move.\n+template<class In>\n+concept indirectly_readable_impl\n+  = requires(const In in)\n+      {\n+\ttypename iter_value_t<In>;\n+\ttypename iter_reference_t<In>;\n+\ttypename iter_rvalue_reference_t<In>;\n+\t{ *in } -> same_as<iter_reference_t<In>>;\n+\t{ ranges::iter_move(in) } -> same_as<iter_rvalue_reference_t<In>>;\n+      };\n+\n+template<class T> requires indirectly_readable_impl<projected<T*, identity>>\n+  void algo(T)\n+  { }\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/92894\n+  // Verify that the use of range::iter_move above doesn't cause odr-use of\n+  // projected<local-class-type, identity>::operator* (which is not defined).\n+  struct X { };\n+  X a;\n+  algo(a);\n+}"}, {"sha": "3408c76bde1f66816d60f785bae7804c01144ebb", "filename": "libstdc++-v3/testsuite/24_iterators/indirect_callable/92894.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2F92894.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f2fb1ff1742685a91dfdf78da871fd4d3292e5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2F92894.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2F92894.cc?ref=a5f2fb1ff1742685a91dfdf78da871fd4d3292e5", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+using std::projected;\n+using std::identity;\n+using std::indirect_unary_predicate;\n+\n+template<typename T,\n+\t indirect_unary_predicate<projected<T*, identity>> Pred>\n+  constexpr void\n+  all_of(T*, Pred)\n+  { }\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/92894\n+  struct X { };\n+  X x;\n+  all_of(&x, [](X&) { return false; });\n+}\n+\n+template<class R, class Proj = identity,\n+\t indirect_unary_predicate<projected<R, Proj>> Pred>\n+  constexpr void\n+  find_if(R, Pred, Proj = {})\n+  { }\n+\n+void\n+test02()\n+{\n+  // PR 94241\n+  struct s { int m; };\n+  s r[] = { s{0}, s{1}, s{2}, s{3} };\n+  find_if(r, [](auto const) { return true; });\n+}"}]}