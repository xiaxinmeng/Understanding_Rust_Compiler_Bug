{"sha": "b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlYWU3YjhkMTlmNTMxZDBlZjNhMWVmYjFmZGFjZmRiYzViZmM5Mg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-07-11T23:59:17Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-07-11T23:59:17Z"}, "message": "tree-flow.h (remove_empty_loops, [...]): Declare.\n\n\t* tree-flow.h (remove_empty_loops, single_dom_exit): Declare.\n\t* passes.c (init_optimization_passes): Add pass_empty_loop.\n\t* tree-pass.h (pass_empty_loop): Declare.\n\t* tree-ssa-loop-ivcanon.c (empty_loop_p, remove_empty_loop,\n\ttry_remove_empty_loop, remove_empty_loops): New functions.\n\t* tree-ssa-loop-ivopts.c (single_dom_exit): Export.\n\t* tree-ssa-loop.c (tree_ssa_empty_loop, pass_empty_loop): New.\n\n\t* gcc.dg/tree-ssa/loop-10.c: New test.\n\nFrom-SVN: r101901", "tree": {"sha": "2dbef04c2f2db68628a4762f85cddb33c11d1be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dbef04c2f2db68628a4762f85cddb33c11d1be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/comments", "author": null, "committer": null, "parents": [{"sha": "70028b61459cb2089d18bbd42d582c3411a9edfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70028b61459cb2089d18bbd42d582c3411a9edfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70028b61459cb2089d18bbd42d582c3411a9edfc"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "cc62635be336660e341ff14e9d8926b93f4af96d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -1,3 +1,13 @@\n+2005-07-12  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-flow.h (remove_empty_loops, single_dom_exit): Declare.\n+\t* passes.c (init_optimization_passes): Add pass_empty_loop.\n+\t* tree-pass.h (pass_empty_loop): Declare.\n+\t* tree-ssa-loop-ivcanon.c (empty_loop_p, remove_empty_loop,\n+\ttry_remove_empty_loop, remove_empty_loops): New functions.\n+\t* tree-ssa-loop-ivopts.c (single_dom_exit): Export.\n+\t* tree-ssa-loop.c (tree_ssa_empty_loop, pass_empty_loop): New.\n+\n 2005-07-12  Peter Barada  <peter@the-baradas.com>\n \n \tPR middle-end/16719"}, {"sha": "1356dc171a8c61af0a38682cbf1f253ca6627c5f", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -554,6 +554,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_lim);\n   NEXT_PASS (pass_unswitch);\n   NEXT_PASS (pass_scev_cprop);\n+  NEXT_PASS (pass_empty_loop);\n   NEXT_PASS (pass_record_bounds);\n   NEXT_PASS (pass_linear_transform);\n   NEXT_PASS (pass_iv_canon);"}, {"sha": "2a0a5f8eb0010f7bafeaf2e0f538505283734da8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -1,3 +1,7 @@\n+2005-07-12  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/loop-10.c: New test.\n+\n 2005-07-11  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.c-torture/execute/20020720-1.x: Remove."}, {"sha": "6a0f94d880f47e79c2778d7c5a754dfde856c7ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-10.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+\n+int bar (void);\n+\n+void foo (void)\n+{\n+  unsigned i, j, n;\n+\n+  for (i = 0; i < 100000; i++)\n+    ;\n+\n+  n = bar ();\n+  for (i = 0; i < n; i++)\n+    ;\n+\n+  for (i = 0; i < n; i++)\n+    for (j = 0; j < n; j++)\n+      ;\n+\n+  /* These should not be removed.  */\n+  for (i = 0; i < 10000; i++)\n+    bar ();\n+\n+  for (i = 0; i != n; i += 2)\n+    ;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"bar \" 2 \"vars\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"vars\" } } */"}, {"sha": "e45793033f80c4ff3bcddfdb41e87cff25be0f02", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -688,6 +688,7 @@ void tree_ssa_lim (struct loops *);\n void tree_ssa_unswitch_loops (struct loops *);\n void canonicalize_induction_variables (struct loops *);\n void tree_unroll_loops_completely (struct loops *, bool);\n+void remove_empty_loops (struct loops *);\n void tree_ssa_iv_optimize (struct loops *);\n \n bool number_of_iterations_exit (struct loop *, edge,\n@@ -719,6 +720,7 @@ struct loop *tree_ssa_loop_version (struct loops *, struct loop *, tree,\n \t\t\t\t    basic_block *);\n tree expand_simple_operations (tree);\n void substitute_in_loop_info (struct loop *, tree, tree);\n+edge single_dom_exit (struct loop *);\n \n /* In tree-ssa-loop-im.c  */\n /* The possibilities of statement movement.  */"}, {"sha": "92d52bda0b365170668d508d330ae428dd6ed6d0", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -228,6 +228,7 @@ extern struct tree_opt_pass pass_lim;\n extern struct tree_opt_pass pass_unswitch;\n extern struct tree_opt_pass pass_iv_canon;\n extern struct tree_opt_pass pass_scev_cprop;\n+extern struct tree_opt_pass pass_empty_loop;\n extern struct tree_opt_pass pass_record_bounds;\n extern struct tree_opt_pass pass_if_conversion;\n extern struct tree_opt_pass pass_vectorize;"}, {"sha": "4d02baabd2ddc8d4640a6d1c7210f07fcbe06255", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -371,3 +371,155 @@ tree_unroll_loops_completely (struct loops *loops, bool may_increase_size)\n   if (changed)\n     cleanup_tree_cfg_loop ();\n }\n+\n+/* Checks whether LOOP is empty.  */\n+\n+static bool\n+empty_loop_p (struct loop *loop)\n+{\n+  edge exit;\n+  struct tree_niter_desc niter;\n+  tree phi, def;\n+  basic_block *body;\n+  block_stmt_iterator bsi;\n+  unsigned i;\n+  tree stmt;\n+\n+  /* If the loop has multiple exits, it is too hard for us to handle.\n+     Similarly, if the exit is not dominating, we cannot determine\n+     whether the loop is not infinite.  */\n+  exit = single_dom_exit (loop);\n+  if (!exit)\n+    return false;\n+\n+  /* The loop must be finite.  */\n+  if (!number_of_iterations_exit (loop, exit, &niter))\n+    return false;\n+\n+  /* Values of all loop exit phi nodes must be invariants.  */\n+  for (phi = phi_nodes (exit->dest); phi; phi = PHI_CHAIN (phi))\n+    {\n+      if (!is_gimple_reg (PHI_RESULT (phi)))\n+\tcontinue;\n+\n+      def = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n+\n+      if (!expr_invariant_in_loop_p (loop, def))\n+\treturn false;\n+    }\n+\n+  /* And there should be no memory modifying or from other reasons\n+     unremovable statements.  */\n+  body = get_loop_body (loop);\n+  for (i = 0; i < loop->num_nodes; i++)\n+    {\n+      /* Irreducible region might be infinite.  */\n+      if (body[i]->flags & BB_IRREDUCIBLE_LOOP)\n+\t{\n+\t  free (body);\n+\t  return false;\n+\t}\n+\t\n+      for (bsi = bsi_start (body[i]); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t{\n+\t  stmt = bsi_stmt (bsi);\n+\t  if (!ZERO_SSA_OPERANDS (stmt, SSA_OP_VIRTUAL_DEFS)\n+\t      || stmt_ann (stmt)->has_volatile_ops)\n+\t    {\n+\t      free (body);\n+\t      return false;\n+\t    }\n+\n+\t  /* Also, asm statements and calls may have side effects and we\n+\t     cannot change the number of times they are executed.  */\n+\t  switch (TREE_CODE (stmt))\n+\t    {\n+\t    case RETURN_EXPR:\n+\t    case MODIFY_EXPR:\n+\t      stmt = get_call_expr_in (stmt);\n+\t      if (!stmt)\n+\t\tbreak;\n+\n+\t    case CALL_EXPR:\n+\t      if (TREE_SIDE_EFFECTS (stmt))\n+\t\t{\n+\t\t  free (body);\n+\t\t  return false;\n+\t\t}\n+\t      break;\n+\n+\t    case ASM_EXPR:\n+\t      /* We cannot remove volatile assembler.  */\n+\t      if (ASM_VOLATILE_P (stmt))\n+\t\t{\n+\t\t  free (body);\n+\t\t  return false;\n+\t\t}\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+      }\n+  free (body);\n+\n+  return true;\n+}\n+\n+/* Remove LOOP by making it exit in the first iteration.  */\n+\n+static void\n+remove_empty_loop (struct loop *loop)\n+{\n+  edge exit = single_dom_exit (loop);\n+  tree cond_stmt = last_stmt (exit->src);\n+  tree do_exit;\n+\n+  if (exit->flags & EDGE_TRUE_VALUE)\n+    do_exit = boolean_true_node;\n+  else\n+    do_exit = boolean_false_node;\n+\n+  COND_EXPR_COND (cond_stmt) = do_exit;\n+  update_stmt (cond_stmt);\n+}\n+\n+/* Removes LOOP if it is empty.  Returns true if LOOP is removed.  CHANGED\n+   is set to true if LOOP or any of its subloops is removed.  */\n+\n+static bool\n+try_remove_empty_loop (struct loop *loop, bool *changed)\n+{\n+  bool nonempty_subloop = false;\n+  struct loop *sub;\n+\n+  /* First, all subloops must be removed.  */\n+  for (sub = loop->inner; sub; sub = sub->next)\n+    nonempty_subloop |= !try_remove_empty_loop (sub, changed);\n+\n+  if (nonempty_subloop || !empty_loop_p (loop))\n+    return false;\n+\n+  remove_empty_loop (loop);\n+  *changed = true;\n+  return true;\n+}\n+\n+/* Remove the empty LOOPS.  */\n+\n+void\n+remove_empty_loops (struct loops *loops)\n+{\n+  bool changed = false;\n+  struct loop *loop;\n+\n+  for (loop = loops->tree_root->inner; loop; loop = loop->next)\n+    try_remove_empty_loop (loop, &changed);\n+\n+  if (changed)\n+    {\n+      scev_reset ();\n+      cleanup_tree_cfg_loop ();\n+    }\n+}"}, {"sha": "84c68abad9c57702ace244008dffda090570d535", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -358,7 +358,7 @@ loop_data (struct loop *loop)\n \n /* The single loop exit if it dominates the latch, NULL otherwise.  */\n \n-static edge\n+edge\n single_dom_exit (struct loop *loop)\n {\n   edge exit = loop->single_exit;"}, {"sha": "1e7d73b8885af51554f8f16ba7ad89378f69d15c", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=b7eae7b8d19f531d0ef3a1efb1fdacfdbc5bfc92", "patch": "@@ -311,6 +311,34 @@ struct tree_opt_pass pass_scev_cprop =\n   0\t\t\t\t\t/* letter */\n };\n \n+/* Remove empty loops.  */\n+\n+static void\n+tree_ssa_empty_loop (void)\n+{\n+  if (!current_loops)\n+    return;\n+\n+  remove_empty_loops (current_loops);\n+}\n+\n+struct tree_opt_pass pass_empty_loop =\n+{\n+  \"empty\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  tree_ssa_empty_loop,\t\t       \t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_COMPLETE_UNROLL,\t  \t\t/* tv_id */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n+\n /* Record bounds on numbers of iterations of loops.  */\n \n static void"}]}