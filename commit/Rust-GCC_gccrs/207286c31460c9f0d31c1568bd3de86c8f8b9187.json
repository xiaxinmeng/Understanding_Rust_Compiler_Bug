{"sha": "207286c31460c9f0d31c1568bd3de86c8f8b9187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3Mjg2YzMxNDYwYzlmMGQzMWMxNTY4YmQzZGU4NmM4ZjhiOTE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-09T13:02:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-09T13:02:50Z"}, "message": "workshare-reduction-1.c: New test.\n\n2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/gomp/workshare-reduction-1.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-2.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-3.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-4.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-5.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-6.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-7.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-8.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-9.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-10.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-11.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-12.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-13.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-14.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-15.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-16.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-17.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-18.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-19.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-20.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-21.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-22.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-23.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-24.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-25.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-26.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-27.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-28.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-29.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-30.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-31.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-32.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-33.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-34.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-35.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-36.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-37.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-38.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-39.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-40.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-41.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-42.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-43.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-44.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-45.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-46.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-47.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-48.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-49.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-50.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-51.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-52.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-53.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-54.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-55.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-56.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-57.c: New test.\n\t* gcc.dg/gomp/workshare-reduction-58.c: New test.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/task-reduction-13.c: New test.\n\t* testsuite/libgomp.c-c++-common/task-reduction-14.c: New test.\n\nFrom-SVN: r265967", "tree": {"sha": "903224afe11c85bac02a85466ad076dba6a527eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903224afe11c85bac02a85466ad076dba6a527eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207286c31460c9f0d31c1568bd3de86c8f8b9187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207286c31460c9f0d31c1568bd3de86c8f8b9187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207286c31460c9f0d31c1568bd3de86c8f8b9187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207286c31460c9f0d31c1568bd3de86c8f8b9187/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff150bc478180c2814136df3edd976059157cc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff150bc478180c2814136df3edd976059157cc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff150bc478180c2814136df3edd976059157cc18"}], "stats": {"total": 1529, "additions": 1529, "deletions": 0}, "files": [{"sha": "8fa0c47a90b704b6f119303780108bb0e34a8b41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -1,3 +1,64 @@\n+2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gomp/workshare-reduction-1.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-2.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-3.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-4.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-5.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-6.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-7.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-8.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-9.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-10.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-11.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-12.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-13.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-14.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-15.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-16.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-17.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-18.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-19.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-20.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-21.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-22.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-23.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-24.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-25.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-26.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-27.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-28.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-29.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-30.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-31.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-32.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-33.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-34.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-35.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-36.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-37.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-38.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-39.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-40.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-41.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-42.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-43.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-44.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-45.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-46.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-47.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-48.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-49.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-50.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-51.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-52.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-53.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-54.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-55.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-56.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-57.c: New test.\n+\t* gcc.dg/gomp/workshare-reduction-58.c: New test.\n+\n 2018-11-09  Stafford Horne  <shorne@gmail.com>\n \t    Richard Henderson  <rth@twiddle.net>\n "}, {"sha": "1edd137158e76f0682a59f91ee217818f774ca69", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-1.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 0, 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_maybe_nonmonotonic_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "bb2bfc1e3c0ff0f614b346a8ce668e4f565989ca", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-10.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-10.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "8c3707a75c4c52d01c8b6debda3a39203ee0ad0c", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-11.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-11.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "e6a25608afdf51f03179468ec090cf0aaf65136d", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-12.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-12.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "367a9d923df7e08aa4586ecea63a8ca159d7ef81", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-13.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-13.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "d4099d6d7dd17371524315fa4edaf7b732a6f021", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-14.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-14.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "bdb0da68b630f95c7cc7889847c4da2ac635115f", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-15.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-15.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "8de700647dfcd7a1fc96f1043c6c3a3fab787a9b", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-16.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "afa20242d592028dd3a4e1cf7e3c7c3bcb208490", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-17.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-17.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "f63203f719f33f7483264553bd3fb1a24de3f8a4", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-18.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-18.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "7d46422b8913e43244e1d05986ef1d5c7763d87f", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-19.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-19.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "3a450a4d8ed643b719c783e762bf4f4593e84bd0", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-2.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "c948dbdea6c80aa0b9b2a1a08725616ffe570d76", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-20.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-20.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "869b4428edd7757c69b11a825d0a1e4c9f1a14e8", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-21.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-21.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "9e627b71be43e49ba7c9c19f3aafb9149b2ddf76", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-22.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-22.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "2ef493209332e86ba8b8f258c24b43ca5760af6d", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-23.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-23.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "d32231d7c764068a14e1f360c0f2092006a09961", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-24.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-24.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "891c04a47a12190f8cb20359834beed759e65bab", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-25.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-25.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "f05b43da4177124b96d54d66c56f05e617990708", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-26.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-26.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 0, 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_maybe_nonmonotonic_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "0485a056e208a9237cd8717da88596b67b7bc929", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-27.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-27.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "025d350e06590410a4ead428df042fb8da9c2c33", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-28.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-28.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 4, 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "ff5f48522fe859d3df26ad9e8c1e372e39340bb4", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-29.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-29.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "3cb4766210ebc24bc8135818ef62bab2d58ee12b", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-3.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, 4, 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_nonmonotonic_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "7390fa70aaaf35a9edf245342a90cbe198820a91", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-30.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-30.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "d00d9e90a81225b1022ed033091040ad2bcd0e76", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-31.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-31.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "5e210f8e1df2545de12be0e3be6ca790907cb503", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-32.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "d39467ed333439025cc95196b75d39da9d0a6615", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-33.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-33.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "f9618878b761a32e28b2589f4fe393ea0b281871", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-34.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-34.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "4686e8964a1418a7db3f8892195db9bdd2f04079", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-35.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-35.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "9742d53ce442e5e7fc80502d436d5aa0445107f8", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-36.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-36.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "3164f5e9724bbba9022eeab002001e713fd28e3c", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-37.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-37.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "35677486e33ff4ded17f29e8a66dfdf4002e8dcf", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-38.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-38.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 2, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "b5996e0dcc360ccfc7e6ba62ace58fefe6bdb7d2", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-39.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-39.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "6002cd5bb0412a319a97d0b9d44d1c689dd09a03", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-4.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "1f4e91cec1cfc2b9ab6d903d3f8ae79cad5d6f91", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-40.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-40.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "7739a852b0c8d6c75ddd697e095cdfdd332e79f0", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-41.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-41.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 2, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: dynamic, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "06bf1a4dcff561aec5294ea4c602276065384bab", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-42.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-42.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "b70ef9088e3a345020694b2dd6c5b8a432e41a41", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-43.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-43.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "b4c2cbbd5f55bf7554e413c9d742290ecc3e0ba8", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-44.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-44.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 3, 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "863eae638c7d03340bbe187a95bc43fad3255361", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-45.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-45.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "a7b808fbef751ee4c62175648162bc7dc112e202", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-46.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-46.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "042de7358b98c838d95869a6627ae8139fbecc95", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-47.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-47.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_start \\[^\\n\\r]*, 3, 3, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_nonmonotonic_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: guided, 3)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "bde978c3fb07c048873cedd1b01eeae73798e2aa", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-48.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-48.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "19e092691a67e7f21f20d1ffedcc6af97f787bd1", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-49.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-49.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "351e25dd36166ebbfcebc7190189adf9796b32b8", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-5.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "0b9733691b8724d8ee2d77fe4263bb5e3d39559d", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-50.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-50.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop_ull\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: auto)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "821da5d993ab7dc1680253ccb1fc9b98221e4ac1", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-51.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-51.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered reduction (task, *: j) schedule (runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered\n+      j++;\n+    }\n+}"}, {"sha": "be51f9713f5ddf5ef7792e1776d1dc701822f5c3", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-52.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-52.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_static_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered reduction (task, *: j)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered\n+      j++;\n+    }\n+}"}, {"sha": "48baf6ce307f08cdfcff89e42dc8052eed70305a", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-53.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-53.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 4, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ordered_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered reduction (task, *: j) schedule (dynamic, 4)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered\n+      j++;\n+    }\n+}"}, {"sha": "a39248da7c759b7c8ca2c11584bbe2473b48cf3f", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-54.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-54.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_ordered_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 6, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_start \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_ordered_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_ordered_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered reduction (task, *: j) schedule (guided, 6)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered\n+      j++;\n+    }\n+}"}, {"sha": "6b9a7ecd5a14606a700efd748fe2bf53d5a04ff5", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-55.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-55.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483648|-2147483648), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_runtime_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered(1) reduction (task, *: j) schedule (runtime)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered depend(sink: i - 1)\n+      j++;\n+      #pragma omp ordered depend(source)\n+    }\n+}"}, {"sha": "955c6d4eef88e03e70a61369dfe6a1397b375a91", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-56.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-56.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_doacross_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_ull_post \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_ull_wait \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_static_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered(1) reduction (task, *: j)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered depend(sink: i - 1)\n+      j++;\n+      #pragma omp ordered depend(source)\n+    }\n+}"}, {"sha": "9019886665a334a426e310acd00168158a337052", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-57.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-57.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_doacross_start \\[^\\n\\r]*, (?:2147483650|-2147483646), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_ull_post \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_ull_wait \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_ull_dynamic_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+unsigned long long int j;\n+void bar (unsigned long long int *);\n+\n+void\n+foo (unsigned long long int a, unsigned long long int b, unsigned long long int c)\n+{\n+  unsigned long long int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered(1) reduction (task, *: j) schedule (dynamic)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered depend(sink: i - 1)\n+      j++;\n+      #pragma omp ordered depend(source)\n+    }\n+}"}, {"sha": "7907aba5ee0c8c35ea9b2a6b0e4a98a1b9818564", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-58.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-58.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_doacross_start \\[^\\n\\r]*, (?:2147483651|-2147483645), 1, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_post \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_doacross_wait \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_guided_next \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for ordered(1) reduction (task, *: j) schedule (guided)\n+  for (i = a; i < b; i += c)\n+    {\n+      bar (&j);\n+      #pragma omp ordered depend(sink: i - 1)\n+      j++;\n+      #pragma omp ordered depend(source)\n+    }\n+}"}, {"sha": "63cde1791033579a8df451174593f1d51e45a7f3", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-6.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "430dcd5813e06d536d28d5d6c451dfef9cbed426", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-7.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-7.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (nonmonotonic: static)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "b4cc0df9dfbbf45acb477928db5895c9e9ac1dc6", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-8.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "91da2c7f9504351c15a7a5884b6fefe29a7f69ae", "filename": "gcc/testsuite/gcc.dg/gomp/workshare-reduction-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fworkshare-reduction-9.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_start \\[^\\n\\r]*, (?:2147483649|-2147483647), 0, 0B, 0B, \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_loop_end \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_GOMP_loop\\[^\\n\\r]*_next \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_workshare_task_reduction_unregister \\\\(0\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel \" 1 \"optimized\" } } */\n+\n+int j;\n+void bar (int *);\n+\n+void\n+foo (int a, int b, int c)\n+{\n+  int i;\n+  #pragma omp parallel\n+  #pragma omp for reduction (task, *: j) schedule (monotonic: static, 2)\n+  for (i = a; i < b; i += c)\n+    {\n+      j++;\n+      bar (&j);\n+    }\n+}"}, {"sha": "ac43ff62662cf2bd7a5490c90fec4f09741a9bc3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -1,3 +1,8 @@\n+2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/task-reduction-13.c: New test.\n+\t* testsuite/libgomp.c-c++-common/task-reduction-14.c: New test.\n+\n 2018-11-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* affinity.c: Include <string.h>, <stdio.h>."}, {"sha": "fc32216f407885de9742284f318aba1f98f52323", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-13.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-13.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,50 @@\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+#pragma omp declare reduction (foo: int: omp_out += omp_in - 1) initializer (omp_priv = 1)\n+\n+int\n+main ()\n+{\n+  int i, v = 0;\n+  unsigned long long j;\n+  volatile unsigned long long sixtyfour = 64;\n+  int a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0;\n+  #pragma omp parallel\n+  {\n+#define P(str) _Pragma (#str)\n+#define ONE_ORDERED_LOOP(var, i, max, n, clauses...) \\\n+    P (omp for ordered reduction (task, foo: var) clauses)\t\t  \\\n+    for (i = 0; i < max; i++)\t\t\t\t\t\t  \\\n+      {\t\t\t\t\t\t\t\t\t  \\\n+        var++;\t\t\t\t\t\t\t\t  \\\n+        P (omp task in_reduction (foo: var))\t\t\t\t  \\\n+\tvar++;\t\t\t\t\t\t\t\t  \\\n+\t_Pragma (\"omp ordered\")\t\t\t\t\t\t  \\\n+\tif (v++ != i + n)\t\t\t\t\t\t  \\\n+\t  abort ();\t\t\t\t\t\t\t  \\\n+      }\t\t\t\t\t\t\t\t\t  \\\n+    if (var != 128 || v != 64 + n)\t\t\t\t\t  \\\n+      abort ();\t\t\t\t\t\t\t\t  \\\n+    _Pragma (\"omp barrier\")\n+    ONE_ORDERED_LOOP (a, i, 64, 0, )\n+    ONE_ORDERED_LOOP (b, i, 64, 64, schedule (monotonic: static))\n+    ONE_ORDERED_LOOP (c, i, 64, 128, schedule (static, 1))\n+    ONE_ORDERED_LOOP (d, i, 64, 192, schedule (monotonic: runtime))\n+    ONE_ORDERED_LOOP (e, i, 64, 256, schedule (dynamic, 2))\n+    ONE_ORDERED_LOOP (f, i, 64, 320, schedule (monotonic: guided, 3))\n+    ONE_ORDERED_LOOP (g, i, 64, 384, schedule (auto))\n+    #pragma omp single\n+    { v = 0; a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 0; }\n+    ONE_ORDERED_LOOP (a, j, sixtyfour, 0, )\n+    ONE_ORDERED_LOOP (b, j, sixtyfour, 64, schedule (static))\n+    ONE_ORDERED_LOOP (c, j, sixtyfour, 128, schedule (monotonic: static, 1))\n+    ONE_ORDERED_LOOP (d, j, sixtyfour, 192, schedule (runtime))\n+    ONE_ORDERED_LOOP (e, j, sixtyfour, 256, schedule (monotonic: dynamic, 2))\n+    ONE_ORDERED_LOOP (f, j, sixtyfour, 320, schedule (guided, 3))\n+    ONE_ORDERED_LOOP (g, j, sixtyfour, 384, schedule (monotonic: auto))\n+  }\n+  return 0;\n+}"}, {"sha": "37c00d4394aaa57690e17a64494f933bdad8a882", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-14.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207286c31460c9f0d31c1568bd3de86c8f8b9187/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-14.c?ref=207286c31460c9f0d31c1568bd3de86c8f8b9187", "patch": "@@ -0,0 +1,51 @@\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+#pragma omp declare reduction (foo: int: omp_out += omp_in - 1) initializer (omp_priv = 1)\n+\n+int\n+main ()\n+{\n+  int i, v = 0;\n+  unsigned long long j;\n+  volatile unsigned long long sixtyfour = 64;\n+  int a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0;\n+  #pragma omp parallel\n+  {\n+#define P(str) _Pragma (#str)\n+#define ONE_ORDERED_LOOP(var, i, max, n, clauses...) \\\n+    P (omp for ordered(1) reduction (task, foo: var) clauses)\t\t  \\\n+    for (i = 1; i <= max; i++)\t\t\t\t\t\t  \\\n+      {\t\t\t\t\t\t\t\t\t  \\\n+        P (omp task in_reduction (foo: var))\t\t\t\t  \\\n+\tvar++;\t\t\t\t\t\t\t\t  \\\n+\tP (omp ordered depend(sink: i - 1))\t\t\t\t  \\\n+\tif (v++ != i + n - 1)\t\t\t\t\t\t  \\\n+\t  abort ();\t\t\t\t\t\t\t  \\\n+        _Pragma (\"omp ordered depend(source)\")\t\t\t\t  \\\n+        var++;\t\t\t\t\t\t\t\t  \\\n+      }\t\t\t\t\t\t\t\t\t  \\\n+    if (var != 128 || v != 64 + n)\t\t\t\t\t  \\\n+      abort ();\t\t\t\t\t\t\t\t  \\\n+    _Pragma (\"omp barrier\")\n+    ONE_ORDERED_LOOP (a, i, 64, 0, )\n+    ONE_ORDERED_LOOP (b, i, 64, 64, schedule (monotonic: static))\n+    ONE_ORDERED_LOOP (c, i, 64, 128, schedule (static, 1))\n+    ONE_ORDERED_LOOP (d, i, 64, 192, schedule (monotonic: runtime))\n+    ONE_ORDERED_LOOP (e, i, 64, 256, schedule (dynamic, 2))\n+    ONE_ORDERED_LOOP (f, i, 64, 320, schedule (monotonic: guided, 3))\n+    ONE_ORDERED_LOOP (g, i, 64, 384, schedule (auto))\n+    #pragma omp single\n+    { v = 0; a = 0; b = 0; c = 0; d = 0; e = 0; f = 0; g = 0; }\n+    ONE_ORDERED_LOOP (a, j, sixtyfour, 0, )\n+    ONE_ORDERED_LOOP (b, j, sixtyfour, 64, schedule (static))\n+    ONE_ORDERED_LOOP (c, j, sixtyfour, 128, schedule (monotonic: static, 1))\n+    ONE_ORDERED_LOOP (d, j, sixtyfour, 192, schedule (runtime))\n+    ONE_ORDERED_LOOP (e, j, sixtyfour, 256, schedule (monotonic: dynamic, 2))\n+    ONE_ORDERED_LOOP (f, j, sixtyfour, 320, schedule (guided, 3))\n+    ONE_ORDERED_LOOP (g, j, sixtyfour, 384, schedule (monotonic: auto))\n+  }\n+  return 0;\n+}"}]}