{"sha": "17a819cb0d6becdfe32f6b26164fb14b77d96369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhODE5Y2IwZDZiZWNkZmUzMmY2YjI2MTY0ZmIxNGI3N2Q5NjM2OQ==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2013-07-23T12:12:53Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-07-23T12:12:53Z"}, "message": "[AArch64, ILP32] 1/6 Initial support - configury changes\n\ngcc/\n\t* config.gcc (aarch64*-*-*): Support --with-abi.\n\t(aarch64*-*-elf): Support --with-multilib-list.\n\t(aarch64*-*-linux*): Likewise.\n\t(supported_defaults): Add abi to aarch64*-*-*.\n\t* configure.ac: Mention AArch64 for --with-multilib-list.\n\t* configure: Re-generated.\n\t* config/aarch64/biarchilp32.h: New file.\n\t* config/aarch64/biarchlp64.h: New file.\n\t* config/aarch64/aarch64-elf.h (ENDIAN_SPEC): New define.\n\t(ABI_SPEC): Ditto.\n\t(MULTILIB_DEFAULTS): Ditto.\n\t(DRIVER_SELF_SPECS): Ditto.\n\t(ASM_SPEC): Update to also substitute -mabi.\n\t* config/aarch64/aarch64-elf-raw.h (LINK_SPEC): Add linker script\n\tfile whose name depends on -mabi= and -mbig-endian.\n\t* config/aarch64/aarch64.h (LONG_TYPE_SIZE): Change to depend on\n\tTARGET_ILP32.\n\t(POINTER_SIZE): New define.\n\t(POINTERS_EXTEND_UNSIGNED): Ditto.\n\t(enum aarch64_abi_type): New enumeration tag.\n\t(AARCH64_ABI_LP64, AARCH64_ABI_ILP32): New enumerators.\n\t(AARCH64_ABI_DEFAULT): Define to AARCH64_ABI_LP64 if undefined.\n\t(TARGET_ILP32): New define.\n\t* config/aarch64/aarch64.opt (mabi): New.\n\t(aarch64_abi): New.\n\t(ilp32, lp64): New values for -mabi.\n\t* config/aarch64/t-aarch64 (comma): New define.\n\t(MULTILIB_OPTIONS): Ditto.\n\t(MULTILIB_DIRNAMES): Ditto.\n\t* config/aarch64/t-aarch64-linux (MULTIARCH_DIRNAME): New define.\n\t* doc/invoke.texi: Document -mabi for AArch64.\n\nFrom-SVN: r201164", "tree": {"sha": "ba5fed4bf9a0db1ffa9273ecb836474c8c54c143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5fed4bf9a0db1ffa9273ecb836474c8c54c143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a819cb0d6becdfe32f6b26164fb14b77d96369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a819cb0d6becdfe32f6b26164fb14b77d96369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a819cb0d6becdfe32f6b26164fb14b77d96369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a819cb0d6becdfe32f6b26164fb14b77d96369/comments", "author": null, "committer": null, "parents": [{"sha": "9f9cbdcea607f6705cd25c5d34e2554dfa8fa074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9cbdcea607f6705cd25c5d34e2554dfa8fa074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9cbdcea607f6705cd25c5d34e2554dfa8fa074"}], "stats": {"total": 245, "additions": 238, "deletions": 7}, "files": [{"sha": "32e20902dc7b510dea2d657594c203f0a3cbdf24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -1,3 +1,37 @@\n+2013-07-23  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Support --with-abi.\n+\t(aarch64*-*-elf): Support --with-multilib-list.\n+\t(aarch64*-*-linux*): Likewise.\n+\t(supported_defaults): Add abi to aarch64*-*-*.\n+\t* configure.ac: Mention AArch64 for --with-multilib-list.\n+\t* configure: Re-generated.\n+\t* config/aarch64/biarchilp32.h: New file.\n+\t* config/aarch64/biarchlp64.h: New file.\n+\t* config/aarch64/aarch64-elf.h (ENDIAN_SPEC): New define.\n+\t(ABI_SPEC): Ditto.\n+\t(MULTILIB_DEFAULTS): Ditto.\n+\t(DRIVER_SELF_SPECS): Ditto.\n+\t(ASM_SPEC): Update to also substitute -mabi.\n+\t* config/aarch64/aarch64-elf-raw.h (LINK_SPEC): Add linker script\n+\tfile whose name depends on -mabi= and -mbig-endian.\n+\t* config/aarch64/aarch64.h (LONG_TYPE_SIZE): Change to depend on\n+\tTARGET_ILP32.\n+\t(POINTER_SIZE): New define.\n+\t(POINTERS_EXTEND_UNSIGNED): Ditto.\n+\t(enum aarch64_abi_type): New enumeration tag.\n+\t(AARCH64_ABI_LP64, AARCH64_ABI_ILP32): New enumerators.\n+\t(AARCH64_ABI_DEFAULT): Define to AARCH64_ABI_LP64 if undefined.\n+\t(TARGET_ILP32): New define.\n+\t* config/aarch64/aarch64.opt (mabi): New.\n+\t(aarch64_abi): New.\n+\t(ilp32, lp64): New values for -mabi.\n+\t* config/aarch64/t-aarch64 (comma): New define.\n+\t(MULTILIB_OPTIONS): Ditto.\n+\t(MULTILIB_DIRNAMES): Ditto.\n+\t* config/aarch64/t-aarch64-linux (MULTIARCH_DIRNAME): New define.\n+\t* doc/invoke.texi: Document -mabi for AArch64.\n+\n 2013-07-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md: Explain asm print modifier 'r' for REG."}, {"sha": "177677c8b1500ee43ca465a52ab0c2afa4557eba", "filename": "gcc/config.gcc", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -498,6 +498,26 @@ then\n fi\n \n case ${target} in\n+aarch64*-*-*)\n+\tcase ${with_abi} in\n+\t\"\")\n+\t\tif test \"x$with_multilib_list\" = xilp32; then\n+\t\t\ttm_file=\"aarch64/biarchilp32.h ${tm_file}\"\n+\t\telse\n+\t\t\ttm_file=\"aarch64/biarchlp64.h ${tm_file}\"\n+\t\tfi\n+\t\t;;\n+\tilp32)\n+\t\ttm_file=\"aarch64/biarchilp32.h ${tm_file}\"\n+\t\t;;\n+\tlp64)\n+\t\ttm_file=\"aarch64/biarchlp64.h ${tm_file}\"\n+\t\t;;\n+\t*)\n+\t\techo \"Unknown ABI used in --with-abi=$with_abi\"\n+\t\texit 1\n+\tesac\n+\t;;\n i[34567]86-*-*)\n \tif test \"x$with_abi\" != x; then\n \t\techo \"This target does not support --with-abi.\"\n@@ -828,6 +848,22 @@ aarch64*-*-elf)\n \t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n \t\t;;\n \tesac\n+\taarch64_multilibs=\"${with_multilib_list}\"\n+\tif test \"$aarch64_multilibs\" = \"default\"; then\n+\t\taarch64_multilibs=\"lp64,ilp32\"\n+\tfi\n+\taarch64_multilibs=`echo $aarch64_multilibs | sed -e 's/,/ /g'`\n+\tfor aarch64_multilib in ${aarch64_multilibs}; do\n+\t\tcase ${aarch64_multilib} in\n+\t\tilp32 | lp64 )\n+\t\t\tTM_MULTILIB_CONFIG=\"${TM_MULTILIB_CONFIG},${aarch64_multilib}\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"--with-multilib-list=${aarch64_multilib} not supported.\"\n+\t\t\texit 1\n+\t\tesac\n+\tdone\n+\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t;;\n aarch64*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h\"\n@@ -838,6 +874,24 @@ aarch64*-*-linux*)\n \t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n \t\t;;\n \tesac\n+\taarch64_multilibs=\"${with_multilib_list}\"\n+\tif test \"$aarch64_multilibs\" = \"default\"; then\n+\t\t# TODO: turn on ILP32 multilib build after its support is mature.\n+\t\t# aarch64_multilibs=\"lp64,ilp32\"\n+\t\taarch64_multilibs=\"lp64\"\n+\tfi\n+\taarch64_multilibs=`echo $aarch64_multilibs | sed -e 's/,/ /g'`\n+\tfor aarch64_multilib in ${aarch64_multilibs}; do\n+\t\tcase ${aarch64_multilib} in\n+\t\tilp32 | lp64 )\n+\t\t\tTM_MULTILIB_CONFIG=\"${TM_MULTILIB_CONFIG},${aarch64_multilib}\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"--with-multilib-list=${aarch64_multilib} not supported.\"\n+\t\t\texit 1\n+\t\tesac\n+\tdone\n+\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t;;\n alpha*-*-linux*)\n \ttm_file=\"elfos.h ${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n@@ -3158,7 +3212,7 @@ fi\n supported_defaults=\n case \"${target}\" in\n \taarch64*-*-*)\n-\t\tsupported_defaults=\"cpu arch\"\n+\t\tsupported_defaults=\"abi cpu arch\"\n \t\tfor which in cpu arch; do\n \n \t\t\teval \"val=\\$with_$which\""}, {"sha": "dfaa9f4b81730b06ce50e9d4ac84d86470c49cb2", "filename": "gcc/config/aarch64/aarch64-elf-raw.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -26,7 +26,8 @@\n #define ENDFILE_SPEC \" crtend%O%s crtn%O%s\"\n \n #ifndef LINK_SPEC\n-#define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} -X\"\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} -X \\\n+  -maarch64elf%{mabi=ilp32*:32}%{mbig-endian:b}\"\n #endif\n \n #endif /* GCC_AARCH64_ELF_RAW_H */"}, {"sha": "4757d22473bd33f255d41cafeecef5eefff5f970", "filename": "gcc/config/aarch64/aarch64-elf.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-elf.h?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -111,12 +111,36 @@\n \n #define GLOBAL_ASM_OP \"\\t.global\\t\"\n \n+#ifdef TARGET_BIG_ENDIAN_DEFAULT\n+#define ENDIAN_SPEC \"-mbig-endian\"\n+#else\n+#define ENDIAN_SPEC \"-mlittle-endian\"\n+#endif\n+\n+#if TARGET_DATA_MODEL == 1\n+#define ABI_SPEC  \"-mabi=lp64\"\n+#define MULTILIB_DEFAULTS { \"mabi=lp64\" }\n+#elif TARGET_DATA_MODEL == 2\n+#define ABI_SPEC  \"-mabi=ilp32\"\n+#define MULTILIB_DEFAULTS { \"mabi=ilp32\" }\n+#else\n+#error \"Unknown or undefined TARGET_DATA_MODEL!\"\n+#endif\n+\n+/* Force the default endianness and ABI flags onto the command line\n+   in order to make the other specs easier to write.  */\n+#undef DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \\\n+  \" %{!mbig-endian:%{!mlittle-endian:\" ENDIAN_SPEC \"}}\" \\\n+  \" %{!mabi=*:\" ABI_SPEC \"}\"\n+\n #ifndef ASM_SPEC\n #define ASM_SPEC \"\\\n %{mbig-endian:-EB} \\\n %{mlittle-endian:-EL} \\\n %{mcpu=*:-mcpu=%*} \\\n-%{march=*:-march=%*}\"\n+%{march=*:-march=%*} \\\n+%{mabi=*:-mabi=%*}\"\n #endif\n \n #undef TYPE_OPERAND_FMT"}, {"sha": "6011ab8026b129047ddde9f7ac717dff430e52e6", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -95,7 +95,9 @@\n \n #define INT_TYPE_SIZE\t\t32\n \n-#define LONG_TYPE_SIZE\t\t64\t/* XXX This should be an option */\n+#define LONG_TYPE_SIZE\t\t(TARGET_ILP32 ? 32 : 64)\n+\n+#define POINTER_SIZE\t\t(TARGET_ILP32 ? 32 : 64)\n \n #define LONG_LONG_TYPE_SIZE\t64\n \n@@ -520,6 +522,18 @@ typedef struct GTY (()) machine_function\n } machine_function;\n #endif\n \n+/* Which ABI to use.  */\n+enum aarch64_abi_type\n+{\n+  AARCH64_ABI_LP64 = 0,\n+  AARCH64_ABI_ILP32 = 1\n+};\n+\n+#ifndef AARCH64_ABI_DEFAULT\n+#define AARCH64_ABI_DEFAULT AARCH64_ABI_LP64\n+#endif\n+\n+#define TARGET_ILP32\t(aarch64_abi & AARCH64_ABI_ILP32)\n \n enum arm_pcs\n {\n@@ -694,7 +708,18 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define NO_FUNCTION_CSE\t1\n \n+/* Specify the machine mode that the hardware addresses have.\n+   After generation of rtl, the compiler makes no further distinction\n+   between pointers and any other objects of this machine mode.  */\n #define Pmode\t\tDImode\n+\n+/* A C expression whose value is zero if pointers that need to be extended\n+   from being `POINTER_SIZE' bits wide to `Pmode' are sign-extended and\n+   greater then zero if they are zero-extended and less then zero if the\n+   ptr_extend instruction should be used.  */\n+#define POINTERS_EXTEND_UNSIGNED 1\n+\n+/* Mode of a function address in a call instruction (for indexing purposes).  */\n #define FUNCTION_MODE\tPmode\n \n #define SELECT_CC_MODE(OP, X, Y)\taarch64_select_cc_mode (OP, X, Y)"}, {"sha": "8ff6ca12592d50fddbc573fae64d565896c7ee8f", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -98,3 +98,17 @@ Target RejectNegative Joined Var(aarch64_cpu_string)\n mtune=\n Target RejectNegative Joined Var(aarch64_tune_string)\n -mtune=CPU\tOptimize for CPU\n+\n+mabi=\n+Target RejectNegative Joined Enum(aarch64_abi) Var(aarch64_abi) Init(AARCH64_ABI_DEFAULT)\n+-mabi=ABI\tGenerate code that conforms to the specified ABI\n+\n+Enum\n+Name(aarch64_abi) Type(int)\n+Known AArch64 ABIs (for use with the -mabi= option):\n+\n+EnumValue\n+Enum(aarch64_abi) String(ilp32) Value(AARCH64_ABI_ILP32)\n+\n+EnumValue\n+Enum(aarch64_abi) String(lp64) Value(AARCH64_ABI_LP64)"}, {"sha": "fe13837f59cd501bd62efe649ef2d5a75a1c7f76", "filename": "gcc/config/aarch64/biarchilp32.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Fbiarchilp32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Fbiarchilp32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fbiarchilp32.h?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -0,0 +1,29 @@\n+/* Make configure files to produce biarch compiler defaulting to ilp32 ABI.\n+   This file must be included very first, while the OS specific file later\n+   to overwrite otherwise wrong defaults.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define AARCH64_ABI_DEFAULT AARCH64_ABI_ILP32\n+#define TARGET_DATA_MODEL 2"}, {"sha": "86803af27dc10d999b3e3ea7a9cfe5f6251b784a", "filename": "gcc/config/aarch64/biarchlp64.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Fbiarchlp64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Fbiarchlp64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fbiarchlp64.h?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -0,0 +1,29 @@\n+/* Make configure files to produce biarch compiler defaulting to ilp64 ABI.\n+   This file must be included very first, while the OS specific file later\n+   to overwrite otherwise wrong defaults.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define AARCH64_ABI_DEFAULT AARCH64_ABI_LP64\n+#define TARGET_DATA_MODEL 1"}, {"sha": "2975850dcb94b6e98857ec7982746f77e06538b0", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -34,3 +34,7 @@ aarch64-builtins.o: $(srcdir)/config/aarch64/aarch64-builtins.c $(CONFIG_H) \\\n   $(srcdir)/config/aarch64/aarch64-simd-builtins.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/aarch64-builtins.c\n+\n+comma=,\n+MULTILIB_OPTIONS    = $(patsubst %, mabi=%, $(subst $(comma), ,$(TM_MULTILIB_CONFIG)))\n+MULTILIB_DIRNAMES   = $(subst $(comma), ,$(TM_MULTILIB_CONFIG))"}, {"sha": "ca1525e90467b074794189345bd87af20b121dda", "filename": "gcc/config/aarch64/t-aarch64-linux", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Ft-aarch64-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfig%2Faarch64%2Ft-aarch64-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64-linux?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -23,3 +23,9 @@ LIB1ASMFUNCS = _aarch64_sync_cache_range\n \n AARCH_BE = $(if $(findstring TARGET_BIG_ENDIAN_DEFAULT=1, $(tm_defines)),_be)\n MULTILIB_OSDIRNAMES = .=../lib64$(call if_multiarch,:aarch64$(AARCH_BE)-linux-gnu)\n+MULTIARCH_DIRNAME = $(call if_multiarch,aarch64$(AARCH_BE)-linux-gnu)\n+\n+# Disable the multilib for linux-gnu targets for the time being; focus\n+# on the baremetal targets.\n+MULTILIB_OPTIONS    =\n+MULTILIB_DIRNAMES   ="}, {"sha": "e36a6086c4431e0f5a73345003006b6af4485915", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -1664,7 +1664,7 @@ Optional Packages:\n   --with-specs=SPECS      add SPECS to driver command-line processing\n   --with-pkgversion=PKG   Use PKG in the version string in place of \"GCC\"\n   --with-bugurl=URL       Direct users to URL to report a bug\n-  --with-multilib-list    select multilibs (SH and x86-64 only)\n+  --with-multilib-list    select multilibs (AArch64, SH and x86-64 only)\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir"}, {"sha": "9dfd389bd986ef7f793d1f36a2818bf18fe9ac95", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -839,7 +839,7 @@ esac],\n [enable_languages=c])\n \n AC_ARG_WITH(multilib-list,\n-[AS_HELP_STRING([--with-multilib-list], [select multilibs (SH and x86-64 only)])],\n+[AS_HELP_STRING([--with-multilib-list], [select multilibs (AArch64, SH and x86-64 only)])],\n :,\n with_multilib_list=default)\n "}, {"sha": "3df4662b7f8d9226623186bcc770a7b86cf36902", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a819cb0d6becdfe32f6b26164fb14b77d96369/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=17a819cb0d6becdfe32f6b26164fb14b77d96369", "patch": "@@ -470,7 +470,7 @@ Objective-C and Objective-C++ Dialects}.\n @c so users have a clue at guessing where the ones they want will be.\n \n @emph{AArch64 Options}\n-@gccoptlist{-mbig-endian  -mlittle-endian @gol\n+@gccoptlist{-mabi=@var{name}  -mbig-endian  -mlittle-endian @gol\n -mgeneral-regs-only @gol\n -mcmodel=tiny  -mcmodel=small  -mcmodel=large @gol\n -mstrict-align @gol\n@@ -10972,6 +10972,17 @@ These options are defined for AArch64 implementations:\n \n @table @gcctabopt\n \n+@item -mabi=@var{name}\n+@opindex mabi\n+Generate code for the specified data model.  Permissible values\n+are @samp{ilp32} for SysV-like data model where int, long int and pointer\n+are 32-bit, and @samp{lp64} for SysV-like data model where int is 32-bit,\n+but long int and pointer are 64-bit.\n+\n+The default depends on the specific target configuration.  Note that\n+the LP64 and ILP32 ABIs are not link-compatible; you must compile your\n+entire program with the same ABI, and link with a compatible set of libraries.\n+\n @item -mbig-endian\n @opindex mbig-endian\n Generate big-endian code.  This is the default when GCC is configured for an"}]}