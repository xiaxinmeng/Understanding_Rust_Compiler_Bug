{"sha": "bb17c5030dc47c69c700e0fd0145285dc8f913a2", "node_id": "C_kwDOANBUbNoAKGJiMTdjNTAzMGRjNDdjNjljNzAwZTBmZDAxNDUyODVkYzhmOTEzYTI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-01T14:44:29Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-01T18:06:19Z"}, "message": "Convert ranger uses of real_inf to dconst[n]inf.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (build_le): Convert to dconst*inf.\n\t(build_ge): Same.\n\t* value-range.cc (frange::set_signbit): Same.\n\t(frange::normalize_kind): Same.\n\t(range_tests_floats): Same.\n\t* value-range.h (vrp_val_max): Same.\n\t(vrp_val_min): Same.\n\t(frange::set_varying): Same.", "tree": {"sha": "d36060d77ddeaeca09c5c539b313ecdfade64959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d36060d77ddeaeca09c5c539b313ecdfade64959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb17c5030dc47c69c700e0fd0145285dc8f913a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb17c5030dc47c69c700e0fd0145285dc8f913a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb17c5030dc47c69c700e0fd0145285dc8f913a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb17c5030dc47c69c700e0fd0145285dc8f913a2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5924b6b2e75afa95f09f75ad3ef9ccbeac65d55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5924b6b2e75afa95f09f75ad3ef9ccbeac65d55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5924b6b2e75afa95f09f75ad3ef9ccbeac65d55d"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "7301e5a060b7ab81d98d92ee4f341fb0054db5c8", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=bb17c5030dc47c69c700e0fd0145285dc8f913a2", "patch": "@@ -232,17 +232,15 @@ frange_drop_ninf (frange &r, tree type)\n   r.intersect (tmp);\n }\n \n-// (X <= VAL) produces the range of [MIN, VAL].\n+// (X <= VAL) produces the range of [-INF, VAL].\n \n static void\n build_le (frange &r, tree type, const REAL_VALUE_TYPE &val)\n {\n-  REAL_VALUE_TYPE min;\n-  real_inf (&min, 1);\n-  r.set (type, min, val);\n+  r.set (type, dconstninf, val);\n }\n \n-// (X < VAL) produces the range of [MIN, VAL).\n+// (X < VAL) produces the range of [-INF, VAL).\n \n static void\n build_lt (frange &r, tree type, const REAL_VALUE_TYPE &val)\n@@ -251,17 +249,15 @@ build_lt (frange &r, tree type, const REAL_VALUE_TYPE &val)\n   build_le (r, type, val);\n }\n \n-// (X >= VAL) produces the range of [VAL, MAX].\n+// (X >= VAL) produces the range of [VAL, +INF].\n \n static void\n build_ge (frange &r, tree type, const REAL_VALUE_TYPE &val)\n {\n-  REAL_VALUE_TYPE max;\n-  real_inf (&max, 0);\n-  r.set (type, val, max);\n+  r.set (type, val, dconstinf);\n }\n \n-// (X > VAL) produces the range of (VAL, MAX].\n+// (X > VAL) produces the range of (VAL, +INF].\n \n static void\n build_gt (frange &r, tree type, const REAL_VALUE_TYPE &val)"}, {"sha": "6fd6e3b745cb250858b4145f4c26ea664c8cf320", "filename": "gcc/value-range.cc", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=bb17c5030dc47c69c700e0fd0145285dc8f913a2", "patch": "@@ -320,18 +320,14 @@ frange::set_signbit (fp_prop::kind k)\n   if (k == fp_prop::YES)\n     {\n       // Crop the range to [-INF, 0].\n-      REAL_VALUE_TYPE min;\n-      real_inf (&min, 1);\n-      frange crop (m_type, min, dconst0);\n+      frange crop (m_type, dconstninf, dconst0);\n       intersect (crop);\n       m_props.set_signbit (fp_prop::YES);\n     }\n   else if (k == fp_prop::NO)\n     {\n       // Crop the range to [0, +INF].\n-      REAL_VALUE_TYPE max;\n-      real_inf (&max, 0);\n-      frange crop (m_type, dconst0, max);\n+      frange crop (m_type, dconst0, dconstinf);\n       intersect (crop);\n       m_props.set_signbit (fp_prop::NO);\n     }\n@@ -440,8 +436,8 @@ frange::normalize_kind ()\n       if (!m_props.varying_p ())\n \t{\n \t  m_kind = VR_RANGE;\n-\t  real_inf (&m_min, 1);\n-\t  real_inf (&m_max, 0);\n+\t  m_min = dconstninf;\n+\t  m_max = dconstinf;\n \t  return true;\n \t}\n     }\n@@ -3785,12 +3781,9 @@ range_tests_floats ()\n   ASSERT_FALSE (r0.varying_p ());\n \n   // The endpoints of a VARYING are +-INF.\n-  REAL_VALUE_TYPE inf, ninf;\n-  real_inf (&inf, 0);\n-  real_inf (&ninf, 1);\n   r0.set_varying (float_type_node);\n-  ASSERT_TRUE (real_identical (&r0.lower_bound (), &ninf));\n-  ASSERT_TRUE (real_identical (&r0.upper_bound (), &inf));\n+  ASSERT_TRUE (real_identical (&r0.lower_bound (), &dconstninf));\n+  ASSERT_TRUE (real_identical (&r0.upper_bound (), &dconstinf));\n \n   // The maximum representable range for a type is still a subset of VARYING.\n   REAL_VALUE_TYPE q, r;\n@@ -3800,9 +3793,9 @@ range_tests_floats ()\n   // r0 is not a varying, because it does not include -INF/+INF.\n   ASSERT_FALSE (r0.varying_p ());\n   // The upper bound of r0 must be less than +INF.\n-  ASSERT_TRUE (real_less (&r0.upper_bound (), &inf));\n+  ASSERT_TRUE (real_less (&r0.upper_bound (), &dconstinf));\n   // The lower bound of r0 must be greater than -INF.\n-  ASSERT_TRUE (real_less (&ninf, &r0.lower_bound ()));\n+  ASSERT_TRUE (real_less (&dconstninf, &r0.lower_bound ()));\n \n   // For most architectures, where float and double are different\n   // sizes, having the same endpoints does not necessarily mean the"}, {"sha": "bc00f3d5b0844d76d4b61beb99e1a77bdcd36e0b", "filename": "gcc/value-range.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb17c5030dc47c69c700e0fd0145285dc8f913a2/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=bb17c5030dc47c69c700e0fd0145285dc8f913a2", "patch": "@@ -1050,11 +1050,7 @@ vrp_val_max (const_tree type)\n       return wide_int_to_tree (const_cast<tree> (type), max);\n     }\n   if (frange::supports_p (type))\n-    {\n-      REAL_VALUE_TYPE real;\n-      real_inf (&real);\n-      return build_real (const_cast <tree> (type), real);\n-    }\n+    return build_real (const_cast <tree> (type), dconstinf);\n   return NULL_TREE;\n }\n \n@@ -1068,11 +1064,7 @@ vrp_val_min (const_tree type)\n   if (POINTER_TYPE_P (type))\n     return build_zero_cst (const_cast<tree> (type));\n   if (frange::supports_p (type))\n-    {\n-      REAL_VALUE_TYPE ninf;\n-      real_inf (&ninf, 1);\n-      return build_real (const_cast <tree> (type), ninf);\n-    }\n+    return build_real (const_cast <tree> (type), dconstninf);\n   return NULL_TREE;\n }\n \n@@ -1145,8 +1137,8 @@ frange::set_varying (tree type)\n {\n   m_kind = VR_VARYING;\n   m_type = type;\n-  real_inf (&m_min, 1);\n-  real_inf (&m_max, 0);\n+  m_min = dconstninf;\n+  m_max = dconstinf;\n   m_props.set_varying ();\n }\n "}]}