{"sha": "20b71b177f96921842390ddd9b6e46e45a62451f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiNzFiMTc3Zjk2OTIxODQyMzkwZGRkOWI2ZTQ2ZTQ1YTYyNDUxZg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-09-13T01:40:44Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-09-13T01:40:44Z"}, "message": "rs6000.c (rs6000_emit_load_toc_table): Remove \"if\" nesting.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Remove \"if\"\n\tnesting.  Correct test for non-PowerPC64 ELF ABI_AIX.\n\t* config/rs6000/rs6000.md (load_toc_v4_PIC*): Disable when ABI_AIX.\n\nFrom-SVN: r57086", "tree": {"sha": "a8148c95e5f51615ef5715f9cf49e9625d2f0b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8148c95e5f51615ef5715f9cf49e9625d2f0b22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b71b177f96921842390ddd9b6e46e45a62451f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b71b177f96921842390ddd9b6e46e45a62451f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b71b177f96921842390ddd9b6e46e45a62451f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b71b177f96921842390ddd9b6e46e45a62451f/comments", "author": null, "committer": null, "parents": [{"sha": "00a17e31a624e135eb6807c6ef5cf150018593ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a17e31a624e135eb6807c6ef5cf150018593ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a17e31a624e135eb6807c6ef5cf150018593ef"}], "stats": {"total": 153, "additions": 78, "deletions": 75}, "files": [{"sha": "bad52cacec0d8dcf18fcfd90b8f2deabac18c82b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20b71b177f96921842390ddd9b6e46e45a62451f", "patch": "@@ -1,3 +1,9 @@\n+2002-09-13  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Remove \"if\"\n+\tnesting.  Correct test for non-PowerPC64 ELF ABI_AIX.\n+\t* config/rs6000/rs6000.md (load_toc_v4_PIC*): Disable when ABI_AIX.\n+\n 2002-09-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* toplev.c: Move default definition of USER_LABEL_PREFIX..."}, {"sha": "b4fc13df386be8fec4b5af3bd8f386a651cd6151", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 69, "deletions": 72, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=20b71b177f96921842390ddd9b6e46e45a62451f", "patch": "@@ -9495,91 +9495,88 @@ rs6000_emit_load_toc_table (fromprolog)\n   rtx dest;\n   dest = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \n-  if (TARGET_ELF && DEFAULT_ABI != ABI_AIX)\n+  if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n     {\n-      if (DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n+      rtx temp = (fromprolog\n+\t\t  ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n+\t\t  : gen_reg_rtx (Pmode));\n+      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_pic_si (temp)));\n+      rs6000_maybe_dead (emit_move_insn (dest, temp));\n+    }\n+  else if (TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2)\n+    {\n+      char buf[30];\n+      rtx tempLR = (fromprolog\n+\t\t    ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n+\t\t    : gen_reg_rtx (Pmode));\n+      rtx temp0 = (fromprolog\n+\t\t   ? gen_rtx_REG (Pmode, 0)\n+\t\t   : gen_reg_rtx (Pmode));\n+      rtx symF;\n+\n+      /* possibly create the toc section */\n+      if (! toc_initialized)\n \t{\n-\t  rtx temp = (fromprolog \n-\t\t      ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t      : gen_reg_rtx (Pmode));\n-\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_pic_si (temp)));\n-\t  rs6000_maybe_dead (emit_move_insn (dest, temp));\n+\t  toc_section ();\n+\t  function_section (current_function_decl);\n \t}\n-      else if (flag_pic == 2)\n-        {\n-\t  char buf[30];\n-\t  rtx tempLR = (fromprolog \n-\t\t\t? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t\t: gen_reg_rtx (Pmode));\n-\t  rtx temp0 = (fromprolog\n-\t\t\t? gen_rtx_REG (Pmode, 0)\n-\t\t\t: gen_reg_rtx (Pmode));\n-\t  rtx symF;\n-\n-\t  /* possibly create the toc section */\n-\t  if (! toc_initialized)\n-\t    {\n-\t      toc_section ();\n-\t      function_section (current_function_decl);\n-\t    }\n-  \n-\t  if (fromprolog)\n-\t    {\n-\t      rtx symL;\n-\t  \n-\t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n-\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n-\n-\t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCL\", rs6000_pic_labelno);\n-\t      symL = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n-\n-\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (tempLR, \n-\t\t\t\t\t\t\t\t   symF)));\n-\t      rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n-\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_2 (temp0, dest,\n-\t\t\t\t\t\t\t\t   symL,\n-\t\t\t\t\t\t\t\t   symF)));\n-\t    }\n-\t  else\n-\t    {\n-\t      rtx tocsym;\n-\t      static int reload_toc_labelno = 0;\n \n-\t      tocsym = gen_rtx_SYMBOL_REF (Pmode, toc_label_name);\n+      if (fromprolog)\n+\t{\n+\t  rtx symL;\n \n-\t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCG\", reload_toc_labelno++);\n-\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n+\t  symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n-\t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1b (tempLR, \n-\t\t\t\t\t\t\t\t    symF, \n-\t\t\t\t\t\t\t\t    tocsym)));\n-\t      rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n-\t      rs6000_maybe_dead (emit_move_insn (temp0, \n-\t\t\t\t\t\t gen_rtx_MEM (Pmode, dest)));\n-\t    }\n-\t  rs6000_maybe_dead (emit_insn (gen_addsi3 (dest, temp0, dest)));\n-\t}\n-      else if (flag_pic == 0 && TARGET_MINIMAL_TOC)\n-        {\n-\t  /* This is for AIX code running in non-PIC ELF.  */\n-\t  char buf[30];\n-\t  rtx realsym;\n-\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n-\t  realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n-\t  \n-\t  rs6000_maybe_dead (emit_insn (gen_elf_high (dest, realsym)));\n-\t  rs6000_maybe_dead (emit_insn (gen_elf_low (dest, dest, realsym)));\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCL\", rs6000_pic_labelno);\n+\t  symL = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+\n+\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (tempLR,\n+\t\t\t\t\t\t\t       symF)));\n+\t  rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n+\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_2 (temp0, dest,\n+\t\t\t\t\t\t\t       symL,\n+\t\t\t\t\t\t\t       symF)));\n \t}\n       else\n-        abort ();\n+\t{\n+\t  rtx tocsym;\n+\t  static int reload_toc_labelno = 0;\n+\n+\t  tocsym = gen_rtx_SYMBOL_REF (Pmode, toc_label_name);\n+\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCG\", reload_toc_labelno++);\n+\t  symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+\n+\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1b (tempLR,\n+\t\t\t\t\t\t\t\tsymF,\n+\t\t\t\t\t\t\t\ttocsym)));\n+\t  rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n+\t  rs6000_maybe_dead (emit_move_insn (temp0,\n+\t\t\t\t\t     gen_rtx_MEM (Pmode, dest)));\n+\t}\n+      rs6000_maybe_dead (emit_insn (gen_addsi3 (dest, temp0, dest)));\n     }\n-  else\n+  else if (TARGET_ELF && !TARGET_AIX && flag_pic == 0 && TARGET_MINIMAL_TOC)\n+    {\n+      /* This is for AIX code running in non-PIC ELF32.  */\n+      char buf[30];\n+      rtx realsym;\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n+      realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n+\n+      rs6000_maybe_dead (emit_insn (gen_elf_high (dest, realsym)));\n+      rs6000_maybe_dead (emit_insn (gen_elf_low (dest, dest, realsym)));\n+    }\n+  else if (DEFAULT_ABI == ABI_AIX)\n     {\n       if (TARGET_32BIT)\n-        rs6000_maybe_dead (emit_insn (gen_load_toc_aix_si (dest)));\n+\trs6000_maybe_dead (emit_insn (gen_load_toc_aix_si (dest)));\n       else\n-        rs6000_maybe_dead (emit_insn (gen_load_toc_aix_di (dest)));\n+\trs6000_maybe_dead (emit_insn (gen_load_toc_aix_di (dest)));\n     }\n+  else\n+    abort ();\n }\n \n int   "}, {"sha": "270d82eb26a2bc31f53c6fb0894568492e0c4838", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b71b177f96921842390ddd9b6e46e45a62451f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=20b71b177f96921842390ddd9b6e46e45a62451f", "patch": "@@ -10151,7 +10151,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n    (unspec [(match_dup 1)] 7)]\n-  \"TARGET_ELF && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"bl %1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -10160,7 +10160,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n    (unspec [(match_dup 1) (match_operand 2 \"immediate_operand\" \"s\")] 6)]\n-  \"TARGET_ELF && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"bl %1\\\\n\\\\t.long %2-%1+4\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n@@ -10170,7 +10170,7 @@\n \t(mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t   (minus:SI (match_operand:SI 2 \"immediate_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")))))]\n-  \"TARGET_ELF && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"{l|lwz} %0,%2-%3(%1)\"\n   [(set_attr \"type\" \"load\")])\n "}]}