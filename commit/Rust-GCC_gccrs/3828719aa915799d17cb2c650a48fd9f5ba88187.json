{"sha": "3828719aa915799d17cb2c650a48fd9f5ba88187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyODcxOWFhOTE1Nzk5ZDE3Y2IyYzY1MGE0OGZkOWY1YmE4ODE4Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-22T11:59:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-22T11:59:41Z"}, "message": "tree.h (VAR_DECL_IS_VIRTUAL_OPERAND): New.\n\n2012-05-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (VAR_DECL_IS_VIRTUAL_OPERAND): New.\n\t(init_function_for_compilation): Remove.\n\t* tree-dfa.c (find_vars_r): Take struct function argument.\n\t(find_referenced_vars_in): Adjust.\n\t* tree-ssa-operands.c (clobber_stats): Remove.\n\t(create_vop_var): Take struct function argument.  Mark\n\tvirtual operand with VAR_DECL_IS_VIRTUAL_OPERAND.\n\t(init_ssa_operands): Take struct function argument.\n\t(fini_ssa_operands): Do not dump dead stats.\n\t* tree-ssa-operands.h (init_ssa_operands): Take struct function\n\targument.\n\t* cgraphunit.c (init_lowered_empty_function): Adjust.\n\t* lto-streamer-in.c (input_cfg): Likewise.\n\t* tree-inline.c (initialize_cfun): Likewise.\n\t* tree-into-ssa.c (rewrite_into_ssa): Likewise.\n\t* omp-low.c (expand_omp_taskreg): Likewise.  Avoid switching\n\tcfun.\n\t* gimple.c (is_gimple_reg): Optimize the SSA_NAME case,\n\tvirtual operands are not registers.\n\nFrom-SVN: r187772", "tree": {"sha": "d8263cd9215e1a5a4e587cf8cfb703ab3c0c6850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8263cd9215e1a5a4e587cf8cfb703ab3c0c6850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3828719aa915799d17cb2c650a48fd9f5ba88187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3828719aa915799d17cb2c650a48fd9f5ba88187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3828719aa915799d17cb2c650a48fd9f5ba88187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3828719aa915799d17cb2c650a48fd9f5ba88187/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72d5c6c1575874d0377d4d637fa1311e60378e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d5c6c1575874d0377d4d637fa1311e60378e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d5c6c1575874d0377d4d637fa1311e60378e72"}], "stats": {"total": 140, "additions": 66, "deletions": 74}, "files": [{"sha": "b76a522c60cee091b39369beead486b2eb9fbec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -1,3 +1,25 @@\n+2012-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (VAR_DECL_IS_VIRTUAL_OPERAND): New.\n+\t(init_function_for_compilation): Remove.\n+\t* tree-dfa.c (find_vars_r): Take struct function argument.\n+\t(find_referenced_vars_in): Adjust.\n+\t* tree-ssa-operands.c (clobber_stats): Remove.\n+\t(create_vop_var): Take struct function argument.  Mark\n+\tvirtual operand with VAR_DECL_IS_VIRTUAL_OPERAND.\n+\t(init_ssa_operands): Take struct function argument.\n+\t(fini_ssa_operands): Do not dump dead stats.\n+\t* tree-ssa-operands.h (init_ssa_operands): Take struct function\n+\targument.\n+\t* cgraphunit.c (init_lowered_empty_function): Adjust.\n+\t* lto-streamer-in.c (input_cfg): Likewise.\n+\t* tree-inline.c (initialize_cfun): Likewise.\n+\t* tree-into-ssa.c (rewrite_into_ssa): Likewise.\n+\t* omp-low.c (expand_omp_taskreg): Likewise.  Avoid switching\n+\tcfun.\n+\t* gimple.c (is_gimple_reg): Optimize the SSA_NAME case,\n+\tvirtual operands are not registers.\n+\n 2012-05-22  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_assign_unary): Fix typo in previous"}, {"sha": "28338682cb5d7ebaedfd7402bc2ee67a96187bda", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -1211,7 +1211,7 @@ init_lowered_empty_function (tree decl)\n   gimple_register_cfg_hooks ();\n   init_empty_tree_cfg ();\n   init_tree_ssa (cfun);\n-  init_ssa_operands ();\n+  init_ssa_operands (cfun);\n   cfun->gimple_df->in_ssa_p = true;\n   DECL_INITIAL (decl) = make_node (BLOCK);\n "}, {"sha": "bb0286455670f9494a24fb8fa07d0fd59ac1b8e0", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -2786,7 +2786,17 @@ bool\n is_gimple_reg (tree t)\n {\n   if (TREE_CODE (t) == SSA_NAME)\n-    t = SSA_NAME_VAR (t);\n+    {\n+      t = SSA_NAME_VAR (t);\n+      if (TREE_CODE (t) == VAR_DECL\n+\t  && VAR_DECL_IS_VIRTUAL_OPERAND (t))\n+\treturn false;\n+      return true;\n+    }\n+\n+  if (TREE_CODE (t) == VAR_DECL\n+      && VAR_DECL_IS_VIRTUAL_OPERAND (t))\n+    return false;\n \n   if (!is_gimple_variable (t))\n     return false;"}, {"sha": "271fe99f453996f20833e3991ecf21a4db4bb377", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -616,7 +616,7 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n   int index;\n \n   init_empty_tree_cfg_for_function (fn);\n-  init_ssa_operands ();\n+  init_ssa_operands (fn);\n \n   profile_status_for_function (fn) = streamer_read_enum (ib, profile_status_d,\n \t\t\t\t\t\t\t PROFILE_LAST);"}, {"sha": "00584725ab1c3036bcfb332a309bc974d8dda481", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -3543,11 +3543,9 @@ expand_omp_taskreg (struct omp_region *region)\n \n       if (gimple_in_ssa_p (cfun))\n \t{\n-\t  push_cfun (child_cfun);\n \t  init_tree_ssa (child_cfun);\n-\t  init_ssa_operands ();\n-\t  cfun->gimple_df->in_ssa_p = true;\n-\t  pop_cfun ();\n+\t  init_ssa_operands (child_cfun);\n+\t  child_cfun->gimple_df->in_ssa_p = true;\n \t  block = NULL_TREE;\n \t}\n       else"}, {"sha": "31cafa09a73ceaa83c264eb47e96120136779242", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -62,7 +62,6 @@ struct dfa_stats_d\n \n /* Local functions.  */\n static void collect_dfa_stats (struct dfa_stats_d *);\n-static tree find_vars_r (tree *, int *, void *);\n \n \n /*---------------------------------------------------------------------------\n@@ -441,17 +440,19 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n    the function.  */\n \n static tree\n-find_vars_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+find_vars_r (tree *tp, int *walk_subtrees, void *data)\n {\n+  struct function *fn = (struct function *) data;\n+\n   /* If we are reading the lto info back in, we need to rescan the\n      referenced vars.  */\n   if (TREE_CODE (*tp) == SSA_NAME)\n-    add_referenced_var (SSA_NAME_VAR (*tp));\n+    add_referenced_var_1 (SSA_NAME_VAR (*tp), fn);\n \n   /* If T is a regular variable that the optimizers are interested\n      in, add it to the list of variables.  */\n   else if (SSA_VAR_P (*tp))\n-    add_referenced_var (*tp);\n+    add_referenced_var_1 (*tp, fn);\n \n   /* Type, _DECL and constant nodes have no interesting children.\n      Ignore them.  */\n@@ -471,16 +472,16 @@ find_referenced_vars_in (gimple stmt)\n   if (gimple_code (stmt) != GIMPLE_PHI)\n     {\n       for (i = 0; i < gimple_num_ops (stmt); i++)\n-\twalk_tree (gimple_op_ptr (stmt, i), find_vars_r, NULL, NULL);\n+\twalk_tree (gimple_op_ptr (stmt, i), find_vars_r, cfun, NULL);\n     }\n   else\n     {\n-      walk_tree (gimple_phi_result_ptr (stmt), find_vars_r, NULL, NULL);\n+      walk_tree (gimple_phi_result_ptr (stmt), find_vars_r, cfun, NULL);\n \n       for (i = 0; i < gimple_phi_num_args (stmt); i++)\n \t{\n \t  tree arg = gimple_phi_arg_def (stmt, i);\n-\t  walk_tree (&arg, find_vars_r, NULL, NULL);\n+\t  walk_tree (&arg, find_vars_r, cfun, NULL);\n \t}\n     }\n }"}, {"sha": "3055d9366877772e94f32d2ced5c92017424350f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -2123,7 +2123,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n     {\n       init_tree_ssa (cfun);\n       cfun->gimple_df->in_ssa_p = true;\n-      init_ssa_operands ();\n+      init_ssa_operands (cfun);\n     }\n   pop_cfun ();\n }"}, {"sha": "86899feb532c7542ae9a3bfc7bf3add6fd0c3a4c", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -2471,7 +2471,7 @@ rewrite_into_ssa (void)\n   basic_block bb;\n \n   /* Initialize operand data structures.  */\n-  init_ssa_operands ();\n+  init_ssa_operands (cfun);\n \n   /* Initialize internal data needed by the renamer.  */\n   init_ssa_renamer ();"}, {"sha": "d415ba2fabafa5c1053bb9fdc516bf56da541bdf", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 12, "deletions": 56, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -76,34 +76,6 @@ along with GCC; see the file COPYING3.  If not see\n    operand vector for VUSE, then the new vector will also be modified\n    such that it contains 'a_5' rather than 'a'.  */\n \n-/* Structure storing statistics on how many call clobbers we have, and\n-   how many where avoided.  */\n-\n-static struct\n-{\n-  /* Number of call-clobbered ops we attempt to add to calls in\n-     add_call_clobbered_mem_symbols.  */\n-  unsigned int clobbered_vars;\n-\n-  /* Number of write-clobbers (VDEFs) avoided by using\n-     not_written information.  */\n-  unsigned int static_write_clobbers_avoided;\n-\n-  /* Number of reads (VUSEs) avoided by using not_read information.  */\n-  unsigned int static_read_clobbers_avoided;\n-\n-  /* Number of write-clobbers avoided because the variable can't escape to\n-     this call.  */\n-  unsigned int unescapable_clobbers_avoided;\n-\n-  /* Number of read-only uses we attempt to add to calls in\n-     add_call_read_mem_symbols.  */\n-  unsigned int readonly_clobbers;\n-\n-  /* Number of read-only uses we avoid using not_read information.  */\n-  unsigned int static_readonly_clobbers_avoided;\n-} clobber_stats;\n-\n \n /* Flags to describe operand properties in helpers.  */\n \n@@ -186,11 +158,11 @@ ssa_operands_active (void)\n    representative of all of the virtual operands FUD chain.  */\n \n static void\n-create_vop_var (void)\n+create_vop_var (struct function *fn)\n {\n   tree global_var;\n \n-  gcc_assert (cfun->gimple_df->vop == NULL_TREE);\n+  gcc_assert (fn->gimple_df->vop == NULL_TREE);\n \n   global_var = build_decl (BUILTINS_LOCATION, VAR_DECL,\n \t\t\t   get_identifier (\".MEM\"),\n@@ -203,10 +175,11 @@ create_vop_var (void)\n   DECL_CONTEXT (global_var) = NULL_TREE;\n   TREE_THIS_VOLATILE (global_var) = 0;\n   TREE_ADDRESSABLE (global_var) = 0;\n+  VAR_DECL_IS_VIRTUAL_OPERAND (global_var) = 1;\n \n   create_var_ann (global_var);\n-  add_referenced_var (global_var);\n-  cfun->gimple_df->vop = global_var;\n+  add_referenced_var_1 (global_var, fn);\n+  fn->gimple_df->vop = global_var;\n }\n \n /* These are the sizes of the operand memory buffer in bytes which gets\n@@ -224,7 +197,7 @@ create_vop_var (void)\n /* Initialize the operand cache routines.  */\n \n void\n-init_ssa_operands (void)\n+init_ssa_operands (struct function *fn)\n {\n   if (!n_initialized++)\n     {\n@@ -235,13 +208,12 @@ init_ssa_operands (void)\n       bitmap_obstack_initialize (&operands_bitmap_obstack);\n     }\n \n-  gcc_assert (gimple_ssa_operands (cfun)->operand_memory == NULL);\n-  gimple_ssa_operands (cfun)->operand_memory_index\n-     = gimple_ssa_operands (cfun)->ssa_operand_mem_size;\n-  gimple_ssa_operands (cfun)->ops_active = true;\n-  memset (&clobber_stats, 0, sizeof (clobber_stats));\n-  gimple_ssa_operands (cfun)->ssa_operand_mem_size = OP_SIZE_INIT;\n-  create_vop_var ();\n+  gcc_assert (gimple_ssa_operands (fn)->operand_memory == NULL);\n+  gimple_ssa_operands (fn)->operand_memory_index\n+     = gimple_ssa_operands (fn)->ssa_operand_mem_size;\n+  gimple_ssa_operands (fn)->ops_active = true;\n+  gimple_ssa_operands (fn)->ssa_operand_mem_size = OP_SIZE_INIT;\n+  create_vop_var (fn);\n }\n \n \n@@ -276,22 +248,6 @@ fini_ssa_operands (void)\n     bitmap_obstack_release (&operands_bitmap_obstack);\n \n   cfun->gimple_df->vop = NULL_TREE;\n-\n-  if (dump_file && (dump_flags & TDF_STATS))\n-    {\n-      fprintf (dump_file, \"Original clobbered vars:           %d\\n\",\n-\t       clobber_stats.clobbered_vars);\n-      fprintf (dump_file, \"Static write clobbers avoided:     %d\\n\",\n-\t       clobber_stats.static_write_clobbers_avoided);\n-      fprintf (dump_file, \"Static read clobbers avoided:      %d\\n\",\n-\t       clobber_stats.static_read_clobbers_avoided);\n-      fprintf (dump_file, \"Unescapable clobbers avoided:      %d\\n\",\n-\t       clobber_stats.unescapable_clobbers_avoided);\n-      fprintf (dump_file, \"Original read-only clobbers:       %d\\n\",\n-\t       clobber_stats.readonly_clobbers);\n-      fprintf (dump_file, \"Static read-only clobbers avoided: %d\\n\",\n-\t       clobber_stats.static_readonly_clobbers_avoided);\n-    }\n }\n \n "}, {"sha": "e3fe63364a5636ee517c48ed502cb63c74bfae09", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -100,7 +100,7 @@ struct GTY(()) ssa_operands {\n #define PHI_ARG_INDEX_FROM_USE(USE)   phi_arg_index_from_use (USE)\n \n \n-extern void init_ssa_operands (void);\n+extern void init_ssa_operands (struct function *fn);\n extern void fini_ssa_operands (void);\n extern void update_stmt_operands (gimple);\n extern void free_stmt_operands (gimple);"}, {"sha": "6dda337a00099aef2d37866677c50b49d8be7b31", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3828719aa915799d17cb2c650a48fd9f5ba88187/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3828719aa915799d17cb2c650a48fd9f5ba88187", "patch": "@@ -689,6 +689,9 @@ struct GTY(()) tree_common {\n        TYPE_SATURATING in\n            all types\n \n+       VAR_DECL_IS_VIRTUAL_OPERAND in\n+\t   VAR_DECL\n+\n    nowarning_flag:\n \n        TREE_NO_WARNING in\n@@ -3333,6 +3336,9 @@ extern void decl_fini_priority_insert (tree, priority_type);\n    libraries.  */\n #define MAX_RESERVED_INIT_PRIORITY 100\n \n+#define VAR_DECL_IS_VIRTUAL_OPERAND(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->base.saturating_flag)\n+\n #define DECL_VAR_ANN_PTR(NODE) \\\n   (TREE_CODE (NODE) == VAR_DECL ? &(NODE)->var_decl.ann \\\n    : TREE_CODE (NODE) == PARM_DECL ? &(NODE)->parm_decl.ann \\\n@@ -5537,7 +5543,6 @@ extern void stack_protect_prologue (void);\n extern void stack_protect_epilogue (void);\n extern void init_dummy_function_start (void);\n extern void expand_dummy_function_end (void);\n-extern unsigned int init_function_for_compilation (void);\n extern void allocate_struct_function (tree, bool);\n extern void push_struct_function (tree fndecl);\n extern void init_function_start (tree);"}]}