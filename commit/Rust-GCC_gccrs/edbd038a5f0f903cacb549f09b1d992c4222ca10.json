{"sha": "edbd038a5f0f903cacb549f09b1d992c4222ca10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiZDAzOGE1ZjBmOTAzY2FjYjU0OWYwOWIxZDk5MmM0MjIyY2ExMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-05-09T13:52:49Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-05-09T13:52:49Z"}, "message": "[openacc] Factor out async argument utility functions\n\n2018-05-09  Tom de Vries  <tom@codesourcery.com>\n\n\tPR libgomp/83792\n\t* oacc-int.h (async_valid_stream_id_p, async_valid_p)\n\t(async_synchronous_p): New function.\n\t* oacc-async.c (acc_async_test, acc_wait, acc_wait_all_async): Use\n\tasync_valid_p.\n\t* oacc-cuda.c (acc_get_cuda_stream, acc_set_cuda_stream): Use\n\tasync_valid_stream_id_p.\n\t* oacc-mem.c (gomp_acc_remove_pointer): Use async_synchronous_p.\n\t* oacc-parallel.c (GOACC_parallel_keyed): Same.\n\nFrom-SVN: r260081", "tree": {"sha": "09f3372550d0a9f29fae94eb1220e3609cca1b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f3372550d0a9f29fae94eb1220e3609cca1b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edbd038a5f0f903cacb549f09b1d992c4222ca10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbd038a5f0f903cacb549f09b1d992c4222ca10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbd038a5f0f903cacb549f09b1d992c4222ca10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbd038a5f0f903cacb549f09b1d992c4222ca10/comments", "author": null, "committer": null, "parents": [{"sha": "88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "569c0f1c8592b8e4e0e126929473e4d44208efef", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -1,3 +1,15 @@\n+2018-05-09  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/83792\n+\t* oacc-int.h (async_valid_stream_id_p, async_valid_p)\n+\t(async_synchronous_p): New function.\n+\t* oacc-async.c (acc_async_test, acc_wait, acc_wait_all_async): Use\n+\tasync_valid_p.\n+\t* oacc-cuda.c (acc_get_cuda_stream, acc_set_cuda_stream): Use\n+\tasync_valid_stream_id_p.\n+\t* oacc-mem.c (gomp_acc_remove_pointer): Use async_synchronous_p.\n+\t* oacc-parallel.c (GOACC_parallel_keyed): Same.\n+\n 2018-05-07  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/85677"}, {"sha": "a4e186386df065e3b9bb8532def56f393faaff31", "filename": "libgomp/oacc-async.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-async.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-async.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-async.c?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -34,7 +34,7 @@\n int\n acc_async_test (int async)\n {\n-  if (async < acc_async_sync)\n+  if (!async_valid_p (async))\n     gomp_fatal (\"invalid async argument: %d\", async);\n \n   struct goacc_thread *thr = goacc_thread ();\n@@ -59,7 +59,7 @@ acc_async_test_all (void)\n void\n acc_wait (int async)\n {\n-  if (async < acc_async_sync)\n+  if (!async_valid_p (async))\n     gomp_fatal (\"invalid async argument: %d\", async);\n \n   struct goacc_thread *thr = goacc_thread ();\n@@ -117,7 +117,7 @@ acc_async_wait_all (void)\n void\n acc_wait_all_async (int async)\n {\n-  if (async < acc_async_sync)\n+  if (!async_valid_p (async))\n     gomp_fatal (\"invalid async argument: %d\", async);\n \n   struct goacc_thread *thr = goacc_thread ();"}, {"sha": "20774c1b48763b2fb092c07bfe6d6bffea609400", "filename": "libgomp/oacc-cuda.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-cuda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-cuda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-cuda.c?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -58,7 +58,7 @@ acc_get_cuda_stream (int async)\n {\n   struct goacc_thread *thr = goacc_thread ();\n \n-  if (async < 0)\n+  if (!async_valid_stream_id_p (async))\n     return NULL;\n \n   if (thr && thr->dev && thr->dev->openacc.cuda.get_stream_func)\n@@ -72,7 +72,7 @@ acc_set_cuda_stream (int async, void *stream)\n {\n   struct goacc_thread *thr;\n \n-  if (async < 0 || stream == NULL)\n+  if (!async_valid_stream_id_p (async) || stream == NULL)\n     return 0;\n \n   goacc_lazy_initialize ();"}, {"sha": "cdd0f7f0f73727c0d06a7b31fa88a130852bc215", "filename": "libgomp/oacc-int.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-int.h?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -99,6 +99,28 @@ void goacc_restore_bind (void);\n void goacc_lazy_initialize (void);\n void goacc_host_init (void);\n \n+static inline bool\n+async_valid_stream_id_p (int async)\n+{\n+  return async >= 0;\n+}\n+\n+static inline bool\n+async_valid_p (int async)\n+{\n+  return (async == acc_async_noval || async == acc_async_sync\n+\t  || async_valid_stream_id_p (async));\n+}\n+\n+static inline bool\n+async_synchronous_p (int async)\n+{\n+  if (!async_valid_p (async))\n+    return true;\n+\n+  return async == acc_async_sync;\n+}\n+\n #ifdef HAVE_ATTRIBUTE_VISIBILITY\n # pragma GCC visibility pop\n #endif"}, {"sha": "158f0862018c1fdc8958b3ebefca0d1a0f0d741a", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -723,7 +723,7 @@ gomp_acc_remove_pointer (void *h, bool force_copyfrom, int async, int mapnum)\n   gomp_mutex_unlock (&acc_dev->lock);\n \n   /* If running synchronously, unmap immediately.  */\n-  if (async < acc_async_noval)\n+  if (async_synchronous_p (async))\n     gomp_unmap_vars (t, true);\n   else\n     t->device_descr->openacc.register_async_cleanup_func (t, async);"}, {"sha": "cfba5816036e5342a8a1aa56922c76ae7c6ab4a9", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd038a5f0f903cacb549f09b1d992c4222ca10/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=edbd038a5f0f903cacb549f09b1d992c4222ca10", "patch": "@@ -183,7 +183,7 @@ GOACC_parallel_keyed (int device, void (*fn) (void *),\n \t\t\t      async, dims, tgt);\n \n   /* If running synchronously, unmap immediately.  */\n-  if (async < acc_async_noval)\n+  if (async_synchronous_p (async))\n     gomp_unmap_vars (tgt, true);\n   else\n     tgt->device_descr->openacc.register_async_cleanup_func (tgt, async);"}]}