{"sha": "0b31330e261f86445b9915d471b5e9edbee2b15b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzMTMzMGUyNjFmODY0NDViOTkxNWQ0NzFiNWU5ZWRiZWUyYjE1Yg==", "commit": {"author": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-09-18T15:44:51Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-09-18T15:44:51Z"}, "message": "Various additions and some small fixes.\n\nFrom-SVN: r22468", "tree": {"sha": "68acd82415ed940fcf45d22e9fc5561d19d2d8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68acd82415ed940fcf45d22e9fc5561d19d2d8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b31330e261f86445b9915d471b5e9edbee2b15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b31330e261f86445b9915d471b5e9edbee2b15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b31330e261f86445b9915d471b5e9edbee2b15b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b31330e261f86445b9915d471b5e9edbee2b15b/comments", "author": null, "committer": null, "parents": [{"sha": "d2a73f8ee2ddd2137fc4478936f541ae43615e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a73f8ee2ddd2137fc4478936f541ae43615e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a73f8ee2ddd2137fc4478936f541ae43615e69"}], "stats": {"total": 423, "additions": 402, "deletions": 21}, "files": [{"sha": "6b4b83f3be826f1583231a674cfbd8d1253272ac", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 402, "deletions": 21, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b31330e261f86445b9915d471b5e9edbee2b15b/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b31330e261f86445b9915d471b5e9edbee2b15b/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=0b31330e261f86445b9915d471b5e9edbee2b15b", "patch": "@@ -647,7 +647,7 @@ Jonathan Corbet\n @item\n Dr.@: Mark Fernyhough\n @item\n-Takafumi Hayashi (The University of AIzu)---@email{takafumi@@u-aizu.ac.jp}\n+Takafumi Hayashi (The University of Aizu)---@email{takafumi@@u-aizu.ac.jp}\n @item\n Kate Hedstrom\n @item\n@@ -2638,8 +2638,28 @@ is @samp{-mno-align-double}, not @samp{-benign-double}.\n @item -ffloat-store\n @cindex IEEE conformance\n @cindex conformance, IEEE\n-Might help a Fortran program that depends on exact IEEE conformance\n-on some machines, but might slow down a program that doesn't.\n+@cindex floating point precision\n+Might help a Fortran program that depends on exact IEEE conformance on\n+some machines, but might slow down a program that doesn't.\n+\n+This option is effective when the floating point unit is set to work in\n+IEEE 854 `extended precision'---as it typically is on x86 and m68k GNU\n+systems---rather than IEEE 754 double precision.  @code{-ffloat-store}\n+tries to remove the extra precision by spilling data from floating point\n+registers into memory and this typically involves a big performance\n+hit.  However, it doesn't affect intermediate results, so that it is\n+only partially effective.  `Excess precision' is avoided in code like:\n+@smallexample\n+a = b + c\n+d = a * e\n+@end smallexample\n+but not in code like:\n+@smallexample\n+      d = (b + c) * e\n+@end smallexample\n+\n+@xref{Floating point precision} for another, potentially better way of\n+controlling the precision.\n \n @cindex -fforce-mem option\n @cindex options, -fforce-mem\n@@ -2704,13 +2724,42 @@ Might improve performance on some code.\n @item -funroll-loops\n @cindex loops, unrolling\n @cindex unrolling loops\n-Definitely improves performance on some code.\n+@cindex loop optimization\n+@c DL: fixme: Craig doesn't like `indexed' but f95 doesn't seem to\n+@c provide a suitable term\n+Typically improves performance on code using indexed @code{DO} loops by\n+unrolling them and is probably generally appropriate for Fortran, though\n+it is not turned on at any optimization level.  \n+Note that outer loop unrolling isn't done specifically; decisions about\n+whether to unroll a loop are made on the basis of its instruction count.  \n+\n+@c DL: Fixme: This should obviously go somewhere else...\n+Also, no `loop discovery'@footnote{@dfn{loop discovery} refers to the\n+process by which a compiler, or indeed any reader of a program,\n+determines which portions of the program are more likely to be executed\n+repeatedly as it is being run.  Such discovery typically is done early\n+when compiling using optimization techniques, so the ``discovered''\n+loops get more attention---and more run-time resources, such as\n+registers---from the compiler.  It is easy to ``discover'' loops that are\n+constructed out of looping constructs in the language\n+(such as Fortran's @code{DO}).  For some programs, ``discovering'' loops\n+constructed out of lower-level constructs (such as @code{IF} and\n+@code{GOTO}) can lead to generation of more optimal code\n+than otherwise.} is done, so only loops written with @code{DO}\n+benefit from loop optimizations, including---but not limited\n+to---unrolling.  Loops written with @code{IF} and @code{GOTO} will not\n+be recognized as such.  This option only unrolls indexed @code{DO}\n+loops, not @code{DO WHILE} loops.\n \n @cindex -funroll-all-loops option\n @cindex options, -funroll-all-loops\n+@cindex @code{DO WHILE}\n @item -funroll-all-loops\n-@c DL: Is this really true?  What _are_ the semantics of this option?\n-Improves performance on some code.\n+@c DL: Check my understanding of -funroll-all-loops v. -funroll-loops is correct.\n+Probably improves performance on code using @code{DO WHILE} loops by\n+unrolling them in addition to indexed @code{DO} loops.  In the absence\n+of @code{DO WHILE}, this option is equivalent to @code{-funroll-loops}\n+but possibly slower.\n \n @item -fno-move-all-movables\n @cindex -fno-move-all-movables option\n@@ -4137,6 +4186,8 @@ Extensions to the ANSI FORTRAN 77 standard:\n * Control Statements::\n * Functions and Subroutines::\n * Scope and Classes of Names::\n+* I/O::\n+* Fortran 90 Features::\n @end menu\n \n @node Direction of Language Development\n@@ -4593,7 +4644,7 @@ Otherwise, it is treated as an indicator of a continuation\n line.\n \n @item\n-The exclamation point appears outside a character or hollerith\n+The exclamation point appears outside a character or Hollerith\n constant.\n Otherwise, the exclamation point is considered part of the\n constant.\n@@ -4612,7 +4663,7 @@ is permitted under the following conditions:\n \n @itemize @bullet\n @item\n-The semicolon appears outside a character or hollerith\n+The semicolon appears outside a character or Hollerith\n constant.\n Otherwise, the semicolon is considered part of the\n constant.\n@@ -4671,6 +4722,7 @@ for the relevant aspects of GNU Fortran.)\n * Statement Labels::\n * Order::\n * INCLUDE::\n+* Cpp-style directives::\n @end menu\n \n @node Character Set\n@@ -4683,7 +4735,7 @@ Letters include uppercase letters (the twenty-six characters\n of the English alphabet) and lowercase letters (their lowercase\n equivalent).\n Generally, lowercase letters may be used in place of uppercase\n-letters, though in character and hollerith constants, they\n+letters, though in character and Hollerith constants, they\n are distinct.\n \n Special characters include:\n@@ -5010,6 +5062,18 @@ An @code{INCLUDE} directive may be continued across multiple\n lines as if it were a statement.\n This permits long names to be used for @var{filename}.\n \n+@node Cpp-style directives\n+@subsection Cpp-style directives\n+@cindex #\n+@cindex preprocessor\n+\n+@code{cpp} output-style @code{#} directives @xref{C Preprocessor\n+Output,,, cpp, The C Preprocessor}, are recognized by the compiler even\n+when the preprocessor isn't run on the input (as it is when compiling\n+@samp{.F} files).  (Note the distinction between these @code{cpp}\n+@code{#} @emph{output} directives and @code{#line} @emph{input}\n+directives.)\n+\n @node Data Types and Constants\n @section Data Types and Constants\n \n@@ -5561,6 +5625,7 @@ is 11, and so on.)\n \n (Corresponds to Section 4.8 of ANSI X3.9-1978 FORTRAN 77.)\n \n+@cindex double quoted character constants\n A character constant may be delimited by a pair of double quotes\n (@samp{\"}) instead of apostrophes.\n In this case, an apostrophe within the constant represents\n@@ -5684,6 +5749,27 @@ The @code{NAMELIST} statement, and related I/O constructs, are\n supported by the GNU Fortran language in essentially the same\n way as they are by @code{f2c}.\n \n+This follows Fortran 90 with the restriction that on @code{NAMELIST}\n+input, subscripts must have the form\n+@smallexample\n+@var{subscript} [ @code{:} @var{subscript} [ @code{:} @var{stride}]]\n+@end smallexample\n+i.e.@:\n+@smallexample\n+&xx x(1:3,8:10:2)=1,2,3,4,5,6/\n+@end smallexample\n+is allowed, but not, say,\n+@smallexample\n+&xx x(:3,8::2)=1,2,3,4,5,6/\n+@end smallexample\n+\n+As an extension of the Fortran 90 form, @code{$} and @code{$END} may be\n+used in place of @code{&} and @code{/} in @code{NAMELIST} input, so that\n+@smallexample\n+$&xx x(1:3,8:10:2)=1,2,3,4,5,6 $end\n+@end smallexample\n+could be used instead of the example above.\n+\n @node DOUBLE COMPLEX\n @subsection @code{DOUBLE COMPLEX} Statement\n @cindex DOUBLE COMPLEX\n@@ -5710,10 +5796,13 @@ for the relevant aspects of GNU Fortran.)\n @node DO WHILE\n @subsection DO WHILE\n @cindex DO WHILE\n+@cindex DO\n @cindex MIL-STD 1753\n \n The @code{DO WHILE} statement, a feature of both the MIL-STD 1753 and\n Fortran 90 standards, is provided by the GNU Fortran language.\n+The Fortran 90 ``do forever'' statement comprising just @code{DO} is\n+also supported.\n \n @node END DO\n @subsection END DO\n@@ -6501,6 +6590,115 @@ for the relevant aspects of GNU Fortran.)\n Underscores (@samp{_}) are accepted in symbol names after the first\n character (which must be a letter).\n \n+@node I/O\n+@section I/O\n+\n+@cindex dollar sign\n+A dollar sign at the end of an output format specification suppresses\n+the newline at the end of the output.\n+\n+@cindex <> edit descriptor\n+@cindex edit descriptor, <>\n+Edit descriptors in @code{FORMAT} statements may contain compile-time\n+@code{INTEGER} constant expressions in angle brackets, such as\n+@smallexample\n+10    FORMAT (I<WIDTH>)\n+@end smallexample\n+\n+The @code{OPEN} specifier @code{NAME=} is equivalent to @code{FILE=}.\n+\n+These Fortran 90 features are supported: \n+@itemize @bullet\n+@item\n+@cindex Z edit descriptor\n+@cindex edit descriptor, Z\n+The @code{Z} edit descriptor is supported.\n+@item\n+The @code{FILE=} specifier may be omitted in an @code{OPEN} statement if\n+@code{STATUS='SCRATCH'} is supplied.  The @code{STATUS='REPLACE'}\n+specifier is supported.\n+@end itemize\n+\n+@node Fortran 90 Features\n+@section Fortran 90 Features\n+@cindex Fortran 90\n+\n+For convenience this section collects a list (probably incomplete) of\n+the Fortran 90 features supported by the GNU Fortran language, even if\n+they are documented elsewhere.\n+@c makeinfo 1.68 objects to the nested parens\n+@ifnotinfo\n+@xref{Characters Lines Sequence,,{Characters, Lines, and Execution Sequence}},\n+@end ifnotinfo\n+@ifinfo\n+@xref{Characters Lines Sequence},\n+@end ifinfo\n+for information on additional fixed source form lexical issues.  In\n+addition, the free source form is supported through the\n+@cindex @samp{-ffree-form}\n+@samp{-ffree-form} option.  @xref{Fortran 90} for other Fortran 90\n+features be turned on by the\n+@cindex @samp{-ff90}\n+@samp{-ff90} option.  @xref{Table of Intrinsic Functions} for\n+information on the Fortran 90 intrinsics available.\n+\n+@table @asis\n+@item Automatic arrays in procedures\n+@item Character assignments\n+@cindex character assignments\n+In character assignments, the variable being assigned may occur on the\n+right hand side of the assignment.\n+@item Character strings\n+@cindex double quoted character constants\n+Strings may have zero length and substrings of character constants are\n+permitted.  Character constants may be enclosed in double quotes\n+(@code{\"}) as well as single quotes.  @xref{Character Type}.\n+@item Construct names\n+(Symbolic tags on blocks.)  @xref{Construct Names }.\n+@item @code{CYCLE} and @code{EXIT}\n+@xref{CYCLE and EXIT,,The @code{CYCLE} and @code{EXIT} Statements}.\n+@item @code{DOUBLE COMPLEX}\n+@xref{DOUBLE COMPLEX,,@code{DOUBLE COMPLEX} Statement\n+}.\n+@item @code{DO WHILE}\n+@xref{DO WHILE}.\n+@item @code{END} decoration\n+@xref{Statements}.\n+@item @code{END DO}\n+@xref{END DO}.\n+@item @code{KIND}\n+@item @code{IMPLICIT NONE}\n+@item @code{INCLUDE} statements\n+@xref{INCLUDE}.\n+@item List directed and namelist i/o on internal files\n+@item Binary, octal and hexadecimal constants\n+These are supported more generally than required by Fortran 90.\n+@xref{Integer Type}.\n+@item @code{NAMELIST}\n+@xref{NAMELIST}.\n+@item @code{OPEN} specifiers\n+@code{STATUS='REPLACE'} is supported.\n+@item Relational operators\n+The operators @code{<}, @code{<=}, @code{==}, @code{/=}, @code{>} and\n+@code{>=} may be used instead of @code{.LT.}, @code{.LE.}, @code{.EQ.},\n+@code{.NE.}, @code{.GT.} and @code{.GE.} respectively.\n+@item @code{SELECT CASE}\n+Not fully implemented.  @xref{SELECT CASE on CHARACTER Type,,\n+@code{SELECT CASE} on @code{CHARACTER} Type}.\n+@item Specification statements\n+A limited subset of the Fortran 90 syntax and semantics for variable\n+declarations is supported, including @code{KIND}.  @xref{Kind Notation}.\n+(@code{KIND} is of limited usefulness in the absence of the\n+@code{KIND}-related intrinsics, since these intrinsics permit writing\n+more widely portable code.)  An example of supported @code{KIND} usage\n+is:\n+@smallexample\n+INTEGER (KIND=1) :: FOO=1, BAR=2\n+CHARACTER (LEN=3) FOO\n+@end smallexample\n+@code{PARAMETER} and @code{DIMENSION} attributes aren't supported.\n+@end table\n+\n @node Other Dialects\n @chapter Other Dialects\n \n@@ -8341,7 +8539,7 @@ prototype information.\n @code{#include} this in the C which has to call\n the Fortran routines to make sure you get it right.\n \n-@xref{Arrays,,Arrays (DIMENSION}, for information on the differences\n+@xref{Arrays,,Arrays (DIMENSION)}, for information on the differences\n between the way Fortran (including compilers like @code{g77}) and\n C handle arrays.\n \n@@ -9813,7 +10011,7 @@ The meaning of a @code{DO} loop in Fortran is precisely specified\n in the Fortran standard@dots{}and is quite different from what\n many programmers might expect.\n \n-In particular, Fortran @code{DO} loops are implemented as if\n+In particular, Fortran indexed @code{DO} loops are implemented as if\n the number of trips through the loop is calculated @emph{before}\n the loop is entered.\n \n@@ -9997,6 +10195,8 @@ tracking down bugs in such programs.\n * Aliasing Assumed To Work::\n * Output Assumed To Flush::\n * Large File Unit Numbers::\n+* Floating point precision::\n+* Inconsistent Calling Sequences::\n @end menu\n \n @node Not My Type\n@@ -10414,6 +10614,62 @@ open by a running program.\n Information on how to increase these limits should be found\n in your system's documentation.\n \n+@node Floating point precision\n+@subsection Floating point precision\n+\n+@cindex IEEE 754\n+@cindex IEEE conformance\n+@cindex conformance, IEEE\n+@cindex floating point precision\n+If your program depends on exact IEEE 754 floating point handling it may\n+help on some systems---specifically x86 or m68k hardware---to use\n+the @code{-ffloat-store} option or to reset the precision flag on the\n+floating point unit @xref{Optimize Options}.\n+\n+However, it might be better simply to put the FPU into double precision\n+mode and not take the performance hit of @code{-ffloat-store}.  On x86\n+and m68k GNU systems you can do this with a technique similar to that\n+for turning on floating point exceptions @xref{Floating-point Exception\n+Handling}.  The control word could be set to double precision by\n+replacing the @code{__setfpucw} call with one like this:\n+@smallexample\n+  __setfpucw ((_FPU_DEFAULT & ~_FPU_EXTENDED) | _FPU_DOUBLE);\n+@end smallexample\n+(It is not clear whether this has any effect on the operation of the GNU\n+maths library, but we have no evidence of it causing trouble.)\n+\n+Some targets (such as the Alpha) may need special options for full IEEE\n+conformance @xref{Submodel Options,,Hardware Models and\n+Configurations,gcc,Using and Porting GNU CC}.\n+\n+@node Inconsistent Calling Sequences\n+@subsection Inconsistent Calling Sequences\n+\n+@pindex ftnchek\n+@cindex floating point errors\n+@cindex x86 FPU stack\n+Code containing inconsistent calling sequences in the same file is\n+normally rejected @xref{GLOBALS}.  (Use, say, @code{ftnchek} to ensure\n+consistency across source files \n+@c makeinfo 1.68 objects to the nested parens\n+@ifinfo\n+@xref{f2c Skeletons and Prototypes}.)\n+@end ifinfo\n+@ifnotinfo\n+@xref{f2c Skeletons and Prototypes,,\n+{Generating Skeletons and Prototypes with @code{f2c}}}.)\n+@end ifnotinfo\n+\n+Mysterious errors, which may appear to be code generation problems, can\n+appear specifically on the x86 architecture with some such\n+inconsistencies.  On x86 hardware, floating point return values of\n+functions are placed on the floating point unit's register stack, not\n+the normal stack.  Thus calling a @code{REAL} or @code{DOUBLE PRECISION}\n+@code{FUNCTION} as some other sort of procedure, or vice versa,\n+scrambles the floating point stack.  This may break unrelated code\n+executed later.  Similarly if, say, external C routines are written\n+incorrectly.\n+\n @node Overly Convenient Options\n @section Overly Convenient Command-line Options\n @cindex overly convenient options\n@@ -11251,6 +11507,25 @@ instead of converting them to double precision first.\n This would tend to result in output that is more consistent\n with that produced by some other Fortran implementations.\n \n+A useful source of information on floating point computation is David\n+Goldberg, `What Every Computer Scientist Should Know About\n+Floating-Point Arithmetic', Computing Surveys, 23, March 1991, pp.@:\n+5--48.  At the time of writing this is available online under\n+@uref{http://docs.sun.com} and there is a supplemented version at\n+@uref{http://www.validgh.com/}.  Information related to the IEEE 754\n+floating point standard by a leading light can be found at\n+@uref{http://http.cs.berkeley.edu/%7Ewkahan/ieee754status }; see also\n+slides from the short course referenced from\n+@uref{http://http.cs.berkeley.edu/%7Efateman/}.\n+@uref{http://www.suburbia.net/%7Ebillm/floating-point/} has a brief\n+guide to IEEE 754, a somewhat x86 GNU/Linux-specific FAQ and library\n+code for GNU/Linux x86 systems.\n+@c xref would be different between editions:\n+The GNU C library provides routines for controlling the FPU, and other\n+documentation about this.\n+\n+@xref{Floating point precision}, regarding IEEE 754 conformance.\n+\n @include bugs.texi\n \n @node Missing Features\n@@ -11312,6 +11587,7 @@ Better diagnostics:\n Run-time facilities:\n * Uninitialized Variables at Run Time::\n * Bounds Checking at Run Time::\n+* Portable Unformatted Files::\n \n Debugging:\n * Labels Visible to Debugger::\n@@ -11653,6 +11929,7 @@ code to specify explicit assembler code.\n @subsection Q Edit Descriptor\n @cindex FORMAT statement\n @cindex Q edit descriptor\n+@cindex edit descriptor, Q\n \n The @code{Q} edit descriptor in @code{FORMAT}s isn't supported.\n (This is meant to get the number of characters remaining in an input record.)\n@@ -11730,6 +12007,25 @@ the @code{OPEN}, @code{CLOSE}, and @code{INQUIRE} statements.\n These extensions are easy to add to @code{g77} itself, but\n require much more work on @code{libg2c}.\n \n+@cindex FORM='PRINT'\n+@cindex ANS carriage control\n+@cindex carraige control\n+@pindex asa\n+@pindex fpr\n+@code{g77} doesn't support @code{FORM='PRINT'} or an equivalent to\n+translate the traditional `carraige control' characters in column 1 of\n+output to use backspaces, carriage returns and the like.  However\n+programs exist to translate them in output files (or standard output).\n+These are typically called either @code{fpr} or @code{asa}.  You can get\n+a version of @code{asa} from\n+@uref{ftp://sunsite.unc.edu/pub/Linux/devel/lang/fortran} for GNU\n+systems which will probably build easily on other systems.\n+Alternatively, @code{fpr} is in BSD distributions in various archive\n+sites.\n+\n+I think both programs can either be used in a pipeline.\n+\n+\n @node ENCODE and DECODE\n @subsection @code{ENCODE} and @code{DECODE}\n @cindex ENCODE statement\n@@ -11865,11 +12161,13 @@ END\n @cindex NaN values\n \n The @code{gcc} backend and, consequently, @code{g77}, currently provides no\n-control over whether or not floating-point exceptions are trapped or\n+general control over whether or not floating-point exceptions are trapped or\n ignored.\n (Ignoring them typically results in NaN values being\n propagated in systems that conform to IEEE 754.)\n-The behaviour is inherited from the system-dependent startup code.\n+The behaviour is normally inherited from the system-dependent startup\n+code, though some targets, such as the Alpha, have code generation\n+options which change the behaviour.\n \n Most systems provide some C-callable mechanism to change this; this can\n be invoked at startup using @code{gcc}'s @code{constructor} attribute.\n@@ -11879,13 +12177,21 @@ on an x86-based GNU system:\n \n @smallexample\n #include <fpu_control.h>\n-void __attribute__ ((constructor))\n-trapfpe () @{\n-  (void) __setfpucw (_FPU_DEFAULT &\n-                     ~(_FPU_MASK_IM | _FPU_MASK_ZM | _FPU_MASK_OM));\n+static void __attribute__ ((constructor))\n+trapfpe ()\n+@{\n+  __setfpucw (_FPU_DEFAULT &\n+              ~(_FPU_MASK_IM | _FPU_MASK_ZM | _FPU_MASK_OM));\n @}\n @end smallexample\n \n+A convenient trick is to compile this something like:\n+@smallexample\n+gcc -o libtrapfpe.a trapfpe.c\n+@end smallexample\n+and then use it by adding @code{-trapfpe} to the @code{g77} command line\n+when linking.\n+\n @node Nonportable Conversions\n @subsection Nonportable Conversions\n @cindex nonportable conversions\n@@ -12099,6 +12405,76 @@ in a fashion similar to @code{f2c}.\n Note that @code{g77} already warns about references to out-of-bounds\n elements of arrays when it detects these at compile time.\n \n+@node Portable Unformatted Files\n+@subsection Portable Unformatted Files\n+\n+@cindex unformatted files\n+@cindex file formats\n+@cindex binary data\n+@cindex byte ordering\n+@code{g77} has no facility for exchanging unformatted files with systems\n+using different number formats---even differing only in endianness (byte\n+order)---or written by other compilers.  Some compilers provide\n+facilities at least for doing byte-swapping during unformatted I/O.\n+\n+It is unrealistic to expect to cope with exchanging unformatted files\n+with arbitrary other compiler runtimes, but the @code{g77} runtime\n+should at least be able to read files written by @code{g77} on systems\n+with different number formats, particularly if they differ only in byte\n+order.\n+\n+In case you do need to write a program to translate to or from\n+@code{g77} (@code{libf2c}) unformatted files, they are written as\n+follows:\n+@table @asis\n+@item Sequential\n+Unformatted sequential records consist of\n+@enumerate\n+@item\n+A number giving the length of the record contents;\n+@item\n+the length of record contents again (for backspace).\n+@end enumerate\n+The record length is of C type\n+@code{long}; this means that it is 8 bytes on 64-bit systems such as\n+Alpha GNU/Linux and 4 bytes on other systems, such as x86 GNU/Linux.\n+Consequently such files cannot be exchanged between 64-bit and 32-bit\n+systems, even with the same basic number format.\n+@item Direct access\n+Unformatted direct access files form a byte stream of length\n+@var{records}*@var{recl} bytes, where @var{records} is the maximum\n+record number (@code{REC=@var{records}}) written and @var{recl} is the\n+record length in bytes specified in the @code{OPEN} statement\n+(@code{RECL=@var{recl}}).  Data appear in the records as determined by\n+the relevant @code{WRITE} statement.  Dummy records with arbitrary\n+contents appear in the file in place of records which haven't been\n+written.\n+@end table\n+\n+Thus for exchanging a sequential or direct access unformatted file\n+between big- and little-endian 32-bit systems using IEEE 754 floating\n+point it would be sufficient to reverse the bytes in consecutive words\n+in the file @emph{iff} only @code{REAL*4}, @code{COMPLEX},\n+@code{INTEGER*4} and/or @code{LOGICAL*4} data have been written to it by\n+@code{g77}.\n+\n+If necessary, it is possible to do byte-oriented i/o with @code{g77}'s\n+@code{FGETC} and @code{FPUTC} intrinsics.  Byte-swapping can be done in\n+Fortran by equivalencing larger sized variables to an @code{INTEGER*1}\n+array or a set of scalars.\n+\n+@cindex HDF\n+@cindex PDB\n+If you need to exchange binary data between arbitrary system and\n+compiler variations, we recommend using a portable binary format with\n+Fortran bindings, such as NCSA's HDF (@uref{http://hdf.ncsa.uiuc.edu/})\n+or PACT's PDB@footnote{No, not @emph{that} one.}\n+(@uref{http://www.llnl.gov/def_sci/pact/pact_homepage.html}).  (Unlike,\n+say, CDF or XDR, HDF-like systems write in the native number formats and\n+only incur overhead when they are read on a system with a different\n+format.)  A future @code{g77} runtime library should use such\n+techniques.\n+\n @node Labels Visible to Debugger\n @subsection Labels Visible to Debugger\n \n@@ -13499,6 +13875,8 @@ are passed via this mechanism.\n If you want to contribute to @code{g77} by doing research,\n design, specification, documentation, coding, or testing,\n the following information should give you some ideas.\n+More relevant information might be available from\n+@uref{ftp://alpha.gnu.org/gnu/g77/projects/}.\n \n @menu\n * Efficiency::               Make @code{g77} itself compile code faster.\n@@ -14377,7 +14755,7 @@ Consecutive keywords must be separated by spaces, so\n @samp{REALX,Y} is not valid, while @samp{REAL X,Y} is.\n There are no comment lines per se, but @samp{!} starts a\n comment anywhere in a line (other than within a character or\n-hollerith constant).\n+Hollerith constant).\n \n @xref{Source Form}, for more information.\n \n@@ -14453,7 +14831,7 @@ someone examining the source file itself.\n Examples of errors resulting from preprocessor macro expansion\n include exceeding the line-length limit, improperly starting,\n terminating, or incorporating the apostrophe or double-quote in\n-a character constant, improperly forming a hollerith constant,\n+a character constant, improperly forming a Hollerith constant,\n and so on.\n \n @xref{Overall Options,,Options Controlling the Kind of Output},\n@@ -14526,8 +14904,11 @@ based on @code{gcc}.\n (It does not occur in @code{egcs}.)\n \n On AIX 4.1, @code{g77} might not build with the native (non-GNU) tools\n-due to a linker bug in coping with the @samp{-bbigtoc} option\n-which leads to a @samp{Relocation overflow} error.\n+due to a linker bug in coping with the @samp{-bbigtoc} option which\n+leads to a @samp{Relocation overflow} error.  The GNU linker is not\n+recommended on current AIX versions, though; it was developed under a\n+now-unsupported version.  This bug is said to be fixed by `update PTF\n+U455193 for APAR IX75823'.\n \n Compiling with @samp{-mminimal-toc}\n might solve this problem, e.g.@: by adding"}]}