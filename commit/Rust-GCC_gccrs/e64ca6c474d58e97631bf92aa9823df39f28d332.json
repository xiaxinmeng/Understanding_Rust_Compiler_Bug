{"sha": "e64ca6c474d58e97631bf92aa9823df39f28d332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0Y2E2YzQ3NGQ1OGU5NzYzMWJmOTJhYTk4MjNkZjM5ZjI4ZDMzMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-11-27T09:46:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-11-27T09:46:43Z"}, "message": "mips-protos.h (function_arg_boundary): Declare.\n\n\t* config/mips/mips-protos.h (function_arg_boundary): Declare.\n\t* config/mips/mips.h (PARM_BOUNDARY): Simplify definition.\n\t(STACK_BOUNDARY, MIPS_STACK_ALIGN): Likewise.\n\t(FUNCTION_ARG_BOUNDARY): Use new function_arg_boundary function.\n\t* config/mips/mips.c (function_arg_boundary): New function.\n\tImpose a maximum alignment of STACK_BOUNDARY.\n\nFrom-SVN: r91370", "tree": {"sha": "47c8c495e2fb0e084d92a8feb04e93a863760e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c8c495e2fb0e084d92a8feb04e93a863760e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64ca6c474d58e97631bf92aa9823df39f28d332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64ca6c474d58e97631bf92aa9823df39f28d332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64ca6c474d58e97631bf92aa9823df39f28d332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64ca6c474d58e97631bf92aa9823df39f28d332/comments", "author": null, "committer": null, "parents": [{"sha": "b78b8bd83ec46cfbed0addd238d9dc6f831959b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78b8bd83ec46cfbed0addd238d9dc6f831959b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78b8bd83ec46cfbed0addd238d9dc6f831959b1"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "bb246c40c6a18064b63e6545bbfa05a241810ebc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e64ca6c474d58e97631bf92aa9823df39f28d332", "patch": "@@ -1,3 +1,12 @@\n+2004-11-27  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips-protos.h (function_arg_boundary): Declare.\n+\t* config/mips/mips.h (PARM_BOUNDARY): Simplify definition.\n+\t(STACK_BOUNDARY, MIPS_STACK_ALIGN): Likewise.\n+\t(FUNCTION_ARG_BOUNDARY): Use new function_arg_boundary function.\n+\t* config/mips/mips.c (function_arg_boundary): New function.\n+\tImpose a maximum alignment of STACK_BOUNDARY.\n+\n 2004-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/17825"}, {"sha": "77b7a9ab795c5c85928b267069dcd175a12bfc9e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e64ca6c474d58e97631bf92aa9823df39f28d332", "patch": "@@ -143,6 +143,7 @@ extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int);\n extern int function_arg_partial_nregs (const CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, tree, int);\n+extern int function_arg_boundary (enum machine_mode, tree);\n extern bool mips_pad_arg_upward (enum machine_mode, tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n extern void mips_va_start (tree, rtx);"}, {"sha": "1b98eca3c815a6c871c38d92400ddebc15be58b7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e64ca6c474d58e97631bf92aa9823df39f28d332", "patch": "@@ -3326,6 +3326,23 @@ function_arg_partial_nregs (const CUMULATIVE_ARGS *cum,\n }\n \n \n+/* Implement FUNCTION_ARG_BOUNDARY.  Every parameter gets at least\n+   PARM_BOUNDARY bits of alignment, but will be given anything up\n+   to STACK_BOUNDARY bits if the type requires it.  */\n+\n+int\n+function_arg_boundary (enum machine_mode mode, tree type)\n+{\n+  unsigned int alignment;\n+\n+  alignment = type ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode);\n+  if (alignment < PARM_BOUNDARY)\n+    alignment = PARM_BOUNDARY;\n+  if (alignment > STACK_BOUNDARY)\n+    alignment = STACK_BOUNDARY;\n+  return alignment;\n+}\n+\n /* Return true if FUNCTION_ARG_PADDING (MODE, TYPE) should return\n    upward rather than downward.  In other words, return true if the\n    first byte of the stack slot has useful data, false if the last"}, {"sha": "fd42276eb7a6373e0fc119217daf3859615e1537", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64ca6c474d58e97631bf92aa9823df39f28d332/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e64ca6c474d58e97631bf92aa9823df39f28d332", "patch": "@@ -1300,10 +1300,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #endif\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n-#define PARM_BOUNDARY ((mips_abi == ABI_O64 \\\n-\t\t\t|| TARGET_NEWABI \\\n-\t\t\t|| (mips_abi == ABI_EABI && TARGET_64BIT)) ? 64 : 32)\n-\n+#define PARM_BOUNDARY BITS_PER_WORD\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 32\n@@ -2145,7 +2142,7 @@ extern enum reg_class mips_char_to_class[256];\n    `current_function_outgoing_args_size'.  */\n #define OUTGOING_REG_PARM_STACK_SPACE\n \n-#define STACK_BOUNDARY ((TARGET_OLDABI || mips_abi == ABI_EABI) ? 64 : 128)\n+#define STACK_BOUNDARY (TARGET_NEWABI ? 128 : 64)\n \f\n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n \n@@ -2285,18 +2282,7 @@ typedef struct mips_args {\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \\\n   function_arg_partial_nregs (&CUM, MODE, TYPE, NAMED)\n \n-/* If defined, a C expression that gives the alignment boundary, in\n-   bits, of an argument with the specified mode and type.  If it is\n-   not defined,  `PARM_BOUNDARY' is used for all arguments.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n-  (((TYPE) != 0)\t\t\t\t\t\t\t\\\n-\t? ((TYPE_ALIGN(TYPE) <= PARM_BOUNDARY)\t\t\t\t\\\n-\t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n-\t\t: TYPE_ALIGN(TYPE))\t\t\t\t\t\\\n-\t: ((GET_MODE_ALIGNMENT(MODE) <= PARM_BOUNDARY)\t\t\t\\\n-\t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n-\t\t: GET_MODE_ALIGNMENT(MODE)))\n+#define FUNCTION_ARG_BOUNDARY function_arg_boundary\n \n #define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\\\n   (mips_pad_arg_upward (MODE, TYPE) ? upward : downward)\n@@ -2318,10 +2304,8 @@ typedef struct mips_args {\n \n /* Treat LOC as a byte offset from the stack pointer and round it up\n    to the next fully-aligned offset.  */\n-#define MIPS_STACK_ALIGN(LOC)\t\t\t\t\t\t\\\n-  ((TARGET_OLDABI || mips_abi == ABI_EABI)\t\t\t\t\\\n-   ? ((LOC) + 7) & ~7\t\t\t\t\t\t\t\\\n-   : ((LOC) + 15) & ~15)\n+#define MIPS_STACK_ALIGN(LOC) \\\n+  (TARGET_NEWABI ? ((LOC) + 15) & -16 : ((LOC) + 7) & -8)\n \n \f\n /* Implement `va_start' for varargs and stdarg.  */"}]}