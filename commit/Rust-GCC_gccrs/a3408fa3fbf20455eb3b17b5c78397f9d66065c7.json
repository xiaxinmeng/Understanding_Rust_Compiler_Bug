{"sha": "a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0MDhmYTNmYmYyMDQ1NWViM2IxN2I1Yzc4Mzk3ZjlkNjYwNjVjNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-05T09:45:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-05T09:45:46Z"}, "message": "re PR tree-optimization/92803 (error: type mismatch in 'vec_perm_expr' since r278764)\n\n2019-12-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92803\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Fix\n\tinvariant vector construction.\n\n\t* gcc.target/i386/pr92803.c: New testcase.\n\nFrom-SVN: r278991", "tree": {"sha": "dda93429be6382ac5c36b78294568cd9e9e898be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda93429be6382ac5c36b78294568cd9e9e898be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42870a86829f9d6dd326d318a3a028fbceb88d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42870a86829f9d6dd326d318a3a028fbceb88d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42870a86829f9d6dd326d318a3a028fbceb88d94"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "f17fc102a07bb6ab63dbf61458fc22611628ced1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "patch": "@@ -1,3 +1,9 @@\n+2019-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92803\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Fix\n+\tinvariant vector construction.\n+\n 2019-12-05  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/91971"}, {"sha": "b075e7e3eab66e535725552ea3e46760bf0912b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "patch": "@@ -1,3 +1,8 @@\n+2019-12-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92803\n+\t* gcc.target/i386/pr92803.c: New testcase.\n+\n 2019-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92781"}, {"sha": "fc8d64efb83e34ac8e2c15c1ad5536b6c0768aeb", "filename": "gcc/testsuite/gcc.target/i386/pr92803.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c?ref=a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi -mavx2 -fdump-tree-forwprop1\" } */\n+\n+typedef double v4df __attribute__((vector_size (32)));\n+typedef float v8sf __attribute__((vector_size (32)));\n+typedef float v4sf __attribute__((vector_size (16)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef double v2df __attribute__((vector_size (16)));\n+\n+v2df\n+foo (v4df x, double *p, v2df y)\n+{\n+  return (v2df) { x[3], *p };\n+}\n+\n+v4sf\n+bar (v4si x, float *p)\n+{\n+  return (v4sf) { x[0], x[1], x[2], *p };\n+}\n+\n+v4sf\n+baz (v4si x)\n+{\n+  return (v4sf) { x[0], x[1], 3.0f, 1.0f };\n+}\n+\n+v4sf\n+barf (v8sf x)\n+{\n+  return (v4sf) { x[4], x[5], 1.0f, 2.0f };\n+}\n+\n+/* We expect all CTORs to turn into permutes, the FP converting ones\n+   to two each with the one with constants possibly elided in the future\n+   by converting 3.0f and 1.0f \"back\" to integers.  */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 6 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 5 \"forwprop1\" { xfail *-*-* } } } */"}, {"sha": "a27a4cfb37911bdd6c9aef2bfaf2933a7c3a188c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3408fa3fbf20455eb3b17b5c78397f9d66065c7/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a3408fa3fbf20455eb3b17b5c78397f9d66065c7", "patch": "@@ -2286,24 +2286,28 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       else if (orig[1] == error_mark_node\n \t       && one_nonconstant)\n \t{\n-\t  orig[1] = gimple_build_vector_from_val (&stmts, UNKNOWN_LOCATION,\n-\t\t\t\t\t\t  type, one_nonconstant);\n \t  /* ???  We can see if we can safely convert to the original\n \t     element type.  */\n \t  converted_orig1 = conv_code != ERROR_MARK;\n+\t  orig[1] = gimple_build_vector_from_val (&stmts, UNKNOWN_LOCATION,\n+\t\t\t\t\t\t  converted_orig1\n+\t\t\t\t\t\t  ? type : perm_type,\n+\t\t\t\t\t\t  one_nonconstant);\n \t}\n       else if (orig[1] == error_mark_node)\n \t{\n-\t  tree_vector_builder vec (type, nelts, 1);\n-\t  for (unsigned i = 0; i < nelts; ++i)\n-\t    if (constants[i])\n+\t  /* ???  See if we can convert the vector to the original type.  */\n+\t  converted_orig1 = conv_code != ERROR_MARK;\n+\t  unsigned n = converted_orig1 ? nelts : refnelts;\n+\t  tree_vector_builder vec (converted_orig1\n+\t\t\t\t   ? type : perm_type, n, 1);\n+\t  for (unsigned i = 0; i < n; ++i)\n+\t    if (i < nelts && constants[i])\n \t      vec.quick_push (constants[i]);\n \t    else\n \t      /* ??? Push a don't-care value.  */\n \t      vec.quick_push (one_constant);\n \t  orig[1] = vec.build ();\n-\t  /* ???  See if we can convert the vector to the original type.  */\n-\t  converted_orig1 = conv_code != ERROR_MARK;\n \t}\n       tree blend_op2 = NULL_TREE;\n       if (converted_orig1)"}]}