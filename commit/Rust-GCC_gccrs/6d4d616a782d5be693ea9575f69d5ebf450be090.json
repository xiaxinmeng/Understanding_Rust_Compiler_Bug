{"sha": "6d4d616a782d5be693ea9575f69d5ebf450be090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0ZDYxNmE3ODJkNWJlNjkzZWE5NTc1ZjY5ZDVlYmY0NTBiZTA5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-27T08:47:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-27T08:47:21Z"}, "message": "[AArch64] Split built-in function codes into major and minor codes\n\nIt was easier to add the SVE ACLE support without enumerating every\nfunction at build time.  This in turn meant that it was easier if the\nSVE builtins occupied a distinct numberspace from the existing AArch64\nones, which *are* enumerated at build time.  This patch therefore\ndivides the built-in functions codes into \"major\" and \"minor\" codes.\nAt present the major code is just \"general\", but the SVE patch will add\n\"SVE\" as well.\n\nAlso, it was convenient to put the SVE ACLE support in its own file,\nso the patch makes aarch64.c provide the frontline target hooks directly,\nforwarding to the other files for the real work.\n\nThe reason for organising the files this way is that aarch64.c needs\nto define the target hook macros whatever happens, and having aarch64.c\nmacros forward to aarch64-builtins.c functions and aarch64-bulitins.c\nfunctions forward to the SVE file seemed a bit indirect.  Doing things\nthe way the patch does them puts aarch64-builtins.c and the SVE code on\nmore of an equal footing.\n\nThe aarch64_(general_)gimple_fold_builtin change is mostly just\nreindentation.\n\n2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_builtin_class): New enum.\n\t(AARCH64_BUILTIN_SHIFT, AARCH64_BUILTIN_CLASS): New constants.\n\t(aarch64_gimple_fold_builtin, aarch64_mangle_builtin_type)\n\t(aarch64_fold_builtin, aarch64_init_builtins, aarch64_expand_builtin):\n\t(aarch64_builtin_decl, aarch64_builtin_rsqrt): Delete.\n\t(aarch64_general_mangle_builtin_type, aarch64_general_init_builtins):\n\t(aarch64_general_fold_builtin, aarch64_general_gimple_fold_builtin):\n\t(aarch64_general_expand_builtin, aarch64_general_builtin_decl):\n\t(aarch64_general_builtin_rsqrt): Declare.\n\t* config/aarch64/aarch64-builtins.c (aarch64_general_add_builtin):\n\tNew function.\n\t(aarch64_mangle_builtin_type): Rename to...\n\t(aarch64_general_mangle_builtin_type): ...this.\n\t(aarch64_init_fcmla_laneq_builtins, aarch64_init_simd_builtins)\n\t(aarch64_init_crc32_builtins, aarch64_init_builtin_rsqrt)\n\t(aarch64_init_pauth_hint_builtins, aarch64_init_tme_builtins): Use\n\taarch64_general_add_builtin instead of add_builtin_function.\n\t(aarch64_init_builtins): Rename to...\n\t(aarch64_general_init_builtins): ...this.  Use\n\taarch64_general_add_builtin instead of add_builtin_function.\n\t(aarch64_builtin_decl): Rename to...\n\t(aarch64_general_builtin_decl): ...this and remove the unused\n\targuments.\n\t(aarch64_expand_builtin): Rename to...\n\t(aarch64_general_expand_builtin): ...this and remove the unused\n\targuments.\n\t(aarch64_builtin_rsqrt): Rename to...\n\t(aarch64_general_builtin_rsqrt): ...this.\n\t(aarch64_fold_builtin): Rename to...\n\t(aarch64_general_fold_builtin): ...this.  Take the function subcode\n\tand return type as arguments.  Remove the \"ignored\" argument.\n\t(aarch64_gimple_fold_builtin): Rename to...\n\t(aarch64_general_gimple_fold_builtin): ...this.  Take the function\n\tsubcode and gcall as arguments, and return the new function call.\n\t* config/aarch64/aarch64.c (aarch64_init_builtins)\n\t(aarch64_fold_builtin, aarch64_gimple_fold_builtin)\n\t(aarch64_expand_builtin, aarch64_builtin_decl): New functions.\n\t(aarch64_builtin_reciprocal): Call aarch64_general_builtin_rsqrt\n\tinstead of aarch64_builtin_rsqrt.\n\t(aarch64_mangle_type): Call aarch64_general_mangle_builtin_type\n\tinstead of aarch64_mangle_builtin_type.\n\nFrom-SVN: r276177", "tree": {"sha": "b46334fe07f393a6a462153ede52b5894e60dcf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46334fe07f393a6a462153ede52b5894e60dcf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4d616a782d5be693ea9575f69d5ebf450be090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4d616a782d5be693ea9575f69d5ebf450be090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4d616a782d5be693ea9575f69d5ebf450be090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4d616a782d5be693ea9575f69d5ebf450be090/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4"}], "stats": {"total": 467, "additions": 296, "deletions": 171}, "files": [{"sha": "8d142db7f1247e0dc899500146f0d09c4685d146", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d4d616a782d5be693ea9575f69d5ebf450be090", "patch": "@@ -1,3 +1,47 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_builtin_class): New enum.\n+\t(AARCH64_BUILTIN_SHIFT, AARCH64_BUILTIN_CLASS): New constants.\n+\t(aarch64_gimple_fold_builtin, aarch64_mangle_builtin_type)\n+\t(aarch64_fold_builtin, aarch64_init_builtins, aarch64_expand_builtin):\n+\t(aarch64_builtin_decl, aarch64_builtin_rsqrt): Delete.\n+\t(aarch64_general_mangle_builtin_type, aarch64_general_init_builtins):\n+\t(aarch64_general_fold_builtin, aarch64_general_gimple_fold_builtin):\n+\t(aarch64_general_expand_builtin, aarch64_general_builtin_decl):\n+\t(aarch64_general_builtin_rsqrt): Declare.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_general_add_builtin):\n+\tNew function.\n+\t(aarch64_mangle_builtin_type): Rename to...\n+\t(aarch64_general_mangle_builtin_type): ...this.\n+\t(aarch64_init_fcmla_laneq_builtins, aarch64_init_simd_builtins)\n+\t(aarch64_init_crc32_builtins, aarch64_init_builtin_rsqrt)\n+\t(aarch64_init_pauth_hint_builtins, aarch64_init_tme_builtins): Use\n+\taarch64_general_add_builtin instead of add_builtin_function.\n+\t(aarch64_init_builtins): Rename to...\n+\t(aarch64_general_init_builtins): ...this.  Use\n+\taarch64_general_add_builtin instead of add_builtin_function.\n+\t(aarch64_builtin_decl): Rename to...\n+\t(aarch64_general_builtin_decl): ...this and remove the unused\n+\targuments.\n+\t(aarch64_expand_builtin): Rename to...\n+\t(aarch64_general_expand_builtin): ...this and remove the unused\n+\targuments.\n+\t(aarch64_builtin_rsqrt): Rename to...\n+\t(aarch64_general_builtin_rsqrt): ...this.\n+\t(aarch64_fold_builtin): Rename to...\n+\t(aarch64_general_fold_builtin): ...this.  Take the function subcode\n+\tand return type as arguments.  Remove the \"ignored\" argument.\n+\t(aarch64_gimple_fold_builtin): Rename to...\n+\t(aarch64_general_gimple_fold_builtin): ...this.  Take the function\n+\tsubcode and gcall as arguments, and return the new function call.\n+\t* config/aarch64/aarch64.c (aarch64_init_builtins)\n+\t(aarch64_fold_builtin, aarch64_gimple_fold_builtin)\n+\t(aarch64_expand_builtin, aarch64_builtin_decl): New functions.\n+\t(aarch64_builtin_reciprocal): Call aarch64_general_builtin_rsqrt\n+\tinstead of aarch64_builtin_rsqrt.\n+\t(aarch64_mangle_type): Call aarch64_general_mangle_builtin_type\n+\tinstead of aarch64_mangle_builtin_type.\n+\n 2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (check_builtin_call): New target hook."}, {"sha": "e02ece8672a633833a63993e24a156dd5ff64e69", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 147, "deletions": 157, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=6d4d616a782d5be693ea9575f69d5ebf450be090", "patch": "@@ -556,6 +556,17 @@ static tree aarch64_simd_intXI_type_node = NULL_TREE;\n tree aarch64_fp16_type_node = NULL_TREE;\n tree aarch64_fp16_ptr_type_node = NULL_TREE;\n \n+/* Wrapper around add_builtin_function.  NAME is the name of the built-in\n+   function, TYPE is the function type, and CODE is the function subcode\n+   (relative to AARCH64_BUILTIN_GENERAL).  */\n+static tree\n+aarch64_general_add_builtin (const char *name, tree type, unsigned int code)\n+{\n+  code = (code << AARCH64_BUILTIN_SHIFT) | AARCH64_BUILTIN_GENERAL;\n+  return add_builtin_function (name, type, code, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n+}\n+\n static const char *\n aarch64_mangle_builtin_scalar_type (const_tree type)\n {\n@@ -594,7 +605,7 @@ aarch64_mangle_builtin_vector_type (const_tree type)\n }\n \n const char *\n-aarch64_mangle_builtin_type (const_tree type)\n+aarch64_general_mangle_builtin_type (const_tree type)\n {\n   const char *mangle;\n   /* Walk through all the AArch64 builtins types tables to filter out the\n@@ -825,8 +836,7 @@ aarch64_init_fcmla_laneq_builtins (void)\n \t= aarch64_simd_builtin_std_type (SImode, qualifier_lane_pair_index);\n       tree ftype = build_function_type_list (argtype, argtype, argtype,\n \t\t\t\t\t     quadtype, lanetype, NULL_TREE);\n-      tree fndecl = add_builtin_function (d->name, ftype, d->fcode,\n-\t\t\t\t\t  BUILT_IN_MD, NULL, NULL_TREE);\n+      tree fndecl = aarch64_general_add_builtin (d->name, ftype, d->fcode);\n \n       aarch64_builtin_decls[d->fcode] = fndecl;\n     }\n@@ -855,10 +865,10 @@ aarch64_init_simd_builtins (void)\n \t\t\t\t\t\t  size_type_node,\n \t\t\t\t\t\t  intSI_type_node,\n \t\t\t\t\t\t  NULL);\n-  aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_LANE_CHECK] =\n-      add_builtin_function (\"__builtin_aarch64_im_lane_boundsi\", lane_check_fpr,\n-\t\t\t    AARCH64_SIMD_BUILTIN_LANE_CHECK, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_LANE_CHECK]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_im_lane_boundsi\",\n+\t\t\t\t   lane_check_fpr,\n+\t\t\t\t   AARCH64_SIMD_BUILTIN_LANE_CHECK);\n \n   for (i = 0; i < ARRAY_SIZE (aarch64_simd_builtin_data); i++, fcode++)\n     {\n@@ -956,8 +966,7 @@ aarch64_init_simd_builtins (void)\n \tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s\",\n \t\t  d->name);\n \n-      fndecl = add_builtin_function (namebuf, ftype, fcode, BUILT_IN_MD,\n-\t\t\t\t     NULL, NULL_TREE);\n+      fndecl = aarch64_general_add_builtin (namebuf, ftype, fcode);\n       aarch64_builtin_decls[fcode] = fndecl;\n     }\n \n@@ -977,8 +986,7 @@ aarch64_init_crc32_builtins ()\n       tree argtype = aarch64_simd_builtin_std_type (d->mode,\n \t\t\t\t\t\t    qualifier_unsigned);\n       tree ftype = build_function_type_list (usi_type, usi_type, argtype, NULL_TREE);\n-      tree fndecl = add_builtin_function (d->name, ftype, d->fcode,\n-                                          BUILT_IN_MD, NULL, NULL_TREE);\n+      tree fndecl = aarch64_general_add_builtin (d->name, ftype, d->fcode);\n \n       aarch64_builtin_decls[d->fcode] = fndecl;\n     }\n@@ -1018,8 +1026,8 @@ aarch64_init_builtin_rsqrt (void)\n   for (; bdd < bdd_end; bdd++)\n   {\n     ftype = build_function_type_list (bdd->type_node, bdd->type_node, NULL_TREE);\n-    fndecl = add_builtin_function (bdd->builtin_name,\n-      ftype, bdd->function_code, BUILT_IN_MD, NULL, NULL_TREE);\n+    fndecl = aarch64_general_add_builtin (bdd->builtin_name,\n+\t\t\t\t\t  ftype, bdd->function_code);\n     aarch64_builtin_decls[bdd->function_code] = fndecl;\n   }\n }\n@@ -1053,25 +1061,25 @@ aarch64_init_pauth_hint_builtins (void)\n     = build_function_type_list (ptr_type_node, ptr_type_node, NULL_TREE);\n \n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_AUTIA1716]\n-    = add_builtin_function (\"__builtin_aarch64_autia1716\", ftype_pointer_auth,\n-\t\t\t    AARCH64_PAUTH_BUILTIN_AUTIA1716, BUILT_IN_MD, NULL,\n-\t\t\t    NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_autia1716\",\n+\t\t\t\t   ftype_pointer_auth,\n+\t\t\t\t   AARCH64_PAUTH_BUILTIN_AUTIA1716);\n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_PACIA1716]\n-    = add_builtin_function (\"__builtin_aarch64_pacia1716\", ftype_pointer_auth,\n-\t\t\t    AARCH64_PAUTH_BUILTIN_PACIA1716, BUILT_IN_MD, NULL,\n-\t\t\t    NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_pacia1716\",\n+\t\t\t\t   ftype_pointer_auth,\n+\t\t\t\t   AARCH64_PAUTH_BUILTIN_PACIA1716);\n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_AUTIB1716]\n-    = add_builtin_function (\"__builtin_aarch64_autib1716\", ftype_pointer_auth,\n-\t\t\t    AARCH64_PAUTH_BUILTIN_AUTIB1716, BUILT_IN_MD, NULL,\n-\t\t\t    NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_autib1716\",\n+\t\t\t\t   ftype_pointer_auth,\n+\t\t\t\t   AARCH64_PAUTH_BUILTIN_AUTIB1716);\n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_PACIB1716]\n-    = add_builtin_function (\"__builtin_aarch64_pacib1716\", ftype_pointer_auth,\n-\t\t\t    AARCH64_PAUTH_BUILTIN_PACIB1716, BUILT_IN_MD, NULL,\n-\t\t\t    NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_pacib1716\",\n+\t\t\t\t   ftype_pointer_auth,\n+\t\t\t\t   AARCH64_PAUTH_BUILTIN_PACIB1716);\n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_XPACLRI]\n-    = add_builtin_function (\"__builtin_aarch64_xpaclri\", ftype_pointer_strip,\n-\t\t\t    AARCH64_PAUTH_BUILTIN_XPACLRI, BUILT_IN_MD, NULL,\n-\t\t\t    NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_xpaclri\",\n+\t\t\t\t   ftype_pointer_strip,\n+\t\t\t\t   AARCH64_PAUTH_BUILTIN_XPACLRI);\n }\n \n /* Initialize the transactional memory extension (TME) builtins.  */\n@@ -1086,43 +1094,48 @@ aarch64_init_tme_builtins (void)\n     = build_function_type_list (void_type_node, uint64_type_node, NULL);\n \n   aarch64_builtin_decls[AARCH64_TME_BUILTIN_TSTART]\n-    = add_builtin_function (\"__builtin_aarch64_tstart\", ftype_uint64_void,\n-\t\t\t    AARCH64_TME_BUILTIN_TSTART, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_tstart\",\n+\t\t\t\t   ftype_uint64_void,\n+\t\t\t\t   AARCH64_TME_BUILTIN_TSTART);\n   aarch64_builtin_decls[AARCH64_TME_BUILTIN_TTEST]\n-    = add_builtin_function (\"__builtin_aarch64_ttest\", ftype_uint64_void,\n-\t\t\t    AARCH64_TME_BUILTIN_TTEST, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_ttest\",\n+\t\t\t\t   ftype_uint64_void,\n+\t\t\t\t   AARCH64_TME_BUILTIN_TTEST);\n   aarch64_builtin_decls[AARCH64_TME_BUILTIN_TCOMMIT]\n-    = add_builtin_function (\"__builtin_aarch64_tcommit\", ftype_void_void,\n-\t\t\t    AARCH64_TME_BUILTIN_TCOMMIT, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_tcommit\",\n+\t\t\t\t   ftype_void_void,\n+\t\t\t\t   AARCH64_TME_BUILTIN_TCOMMIT);\n   aarch64_builtin_decls[AARCH64_TME_BUILTIN_TCANCEL]\n-    = add_builtin_function (\"__builtin_aarch64_tcancel\", ftype_void_uint64,\n-\t\t\t    AARCH64_TME_BUILTIN_TCANCEL, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_tcancel\",\n+\t\t\t\t   ftype_void_uint64,\n+\t\t\t\t   AARCH64_TME_BUILTIN_TCANCEL);\n }\n \n+/* Initialize all builtins in the AARCH64_BUILTIN_GENERAL group.  */\n void\n-aarch64_init_builtins (void)\n+aarch64_general_init_builtins (void)\n {\n   tree ftype_set_fpr\n     = build_function_type_list (void_type_node, unsigned_type_node, NULL);\n   tree ftype_get_fpr\n     = build_function_type_list (unsigned_type_node, NULL);\n \n   aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR]\n-    = add_builtin_function (\"__builtin_aarch64_get_fpcr\", ftype_get_fpr,\n-\t\t\t    AARCH64_BUILTIN_GET_FPCR, BUILT_IN_MD, NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpcr\",\n+\t\t\t\t   ftype_get_fpr,\n+\t\t\t\t   AARCH64_BUILTIN_GET_FPCR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR]\n-    = add_builtin_function (\"__builtin_aarch64_set_fpcr\", ftype_set_fpr,\n-\t\t\t    AARCH64_BUILTIN_SET_FPCR, BUILT_IN_MD, NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpcr\",\n+\t\t\t\t   ftype_set_fpr,\n+\t\t\t\t   AARCH64_BUILTIN_SET_FPCR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPSR]\n-    = add_builtin_function (\"__builtin_aarch64_get_fpsr\", ftype_get_fpr,\n-\t\t\t    AARCH64_BUILTIN_GET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpsr\",\n+\t\t\t\t   ftype_get_fpr,\n+\t\t\t\t   AARCH64_BUILTIN_GET_FPSR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPSR]\n-    = add_builtin_function (\"__builtin_aarch64_set_fpsr\", ftype_set_fpr,\n-\t\t\t    AARCH64_BUILTIN_SET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpsr\",\n+\t\t\t\t   ftype_set_fpr,\n+\t\t\t\t   AARCH64_BUILTIN_SET_FPSR);\n \n   aarch64_init_fp16_types ();\n \n@@ -1135,8 +1148,8 @@ aarch64_init_builtins (void)\n   tree ftype_jcvt\n     = build_function_type_list (intSI_type_node, double_type_node, NULL);\n   aarch64_builtin_decls[AARCH64_JSCVT]\n-    = add_builtin_function (\"__builtin_aarch64_jcvtzs\", ftype_jcvt,\n-\t\t\t    AARCH64_JSCVT, BUILT_IN_MD, NULL, NULL_TREE);\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_jcvtzs\", ftype_jcvt,\n+\t\t\t\t   AARCH64_JSCVT);\n \n   /* Initialize pointer authentication builtins which are backed by instructions\n      in NOP encoding space.\n@@ -1151,8 +1164,9 @@ aarch64_init_builtins (void)\n     aarch64_init_tme_builtins ();\n }\n \n+/* Implement TARGET_BUILTIN_DECL for the AARCH64_BUILTIN_GENERAL group.  */\n tree\n-aarch64_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+aarch64_general_builtin_decl (unsigned code, bool)\n {\n   if (code >= AARCH64_BUILTIN_MAX)\n     return error_mark_node;\n@@ -1593,17 +1607,11 @@ aarch64_expand_builtin_tme (int fcode, tree exp, rtx target)\n     return target;\n }\n \n-/* Expand an expression EXP that calls a built-in function,\n+/* Expand an expression EXP that calls built-in function FCODE,\n    with result going to TARGET if that's convenient.  */\n rtx\n-aarch64_expand_builtin (tree exp,\n-\t\t     rtx target,\n-\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t     machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t     int ignore ATTRIBUTE_UNUSED)\n+aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target)\n {\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   int icode;\n   rtx pat, op0;\n   tree arg0;\n@@ -1880,7 +1888,7 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n /* Return builtin for reciprocal square root.  */\n \n tree\n-aarch64_builtin_rsqrt (unsigned int fn)\n+aarch64_general_builtin_rsqrt (unsigned int fn)\n {\n   if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2df)\n     return aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2DF];\n@@ -1895,13 +1903,14 @@ aarch64_builtin_rsqrt (unsigned int fn)\n #define VAR1(T, N, MAP, A) \\\n   case AARCH64_SIMD_BUILTIN_##T##_##N##A:\n \n+/* Try to fold a call to the built-in function with subcode FCODE.  The\n+   function is passed the N_ARGS arguments in ARGS and it returns a value\n+   of type TYPE.  Return the new expression on success and NULL_TREE on\n+   failure.  */\n tree\n-aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n-\t\t      bool ignore ATTRIBUTE_UNUSED)\n+aarch64_general_fold_builtin (unsigned int fcode, tree type,\n+\t\t\t      unsigned int n_args ATTRIBUTE_UNUSED, tree *args)\n {\n-  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n-  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-\n   switch (fcode)\n     {\n       BUILTIN_VDQF (UNOP, abs, 2)\n@@ -1917,109 +1926,90 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n   return NULL_TREE;\n }\n \n-bool\n-aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+/* Try to fold STMT, given that it's a call to the built-in function with\n+   subcode FCODE.  Return the new statement on success and null on\n+   failure.  */\n+gimple *\n+aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt)\n {\n-  bool changed = false;\n-  gimple *stmt = gsi_stmt (*gsi);\n-  tree call = gimple_call_fn (stmt);\n-  tree fndecl;\n   gimple *new_stmt = NULL;\n-\n-  if (call)\n+  unsigned nargs = gimple_call_num_args (stmt);\n+  tree *args = (nargs > 0\n+\t\t? gimple_call_arg_ptr (stmt, 0)\n+\t\t: &error_mark_node);\n+\n+  /* We use gimple's IFN_REDUC_(PLUS|MIN|MAX)s for float, signed int\n+     and unsigned int; it will distinguish according to the types of\n+     the arguments to the __builtin.  */\n+  switch (fcode)\n     {\n-      fndecl = gimple_call_fndecl (stmt);\n-      if (fndecl)\n+      BUILTIN_VALL (UNOP, reduc_plus_scal_, 10)\n+\tnew_stmt = gimple_build_call_internal (IFN_REDUC_PLUS,\n+\t\t\t\t\t       1, args[0]);\n+\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n+\tbreak;\n+      BUILTIN_VDQIF (UNOP, reduc_smax_scal_, 10)\n+      BUILTIN_VDQ_BHSI (UNOPU, reduc_umax_scal_, 10)\n+\tnew_stmt = gimple_build_call_internal (IFN_REDUC_MAX,\n+\t\t\t\t\t       1, args[0]);\n+\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n+\tbreak;\n+      BUILTIN_VDQIF (UNOP, reduc_smin_scal_, 10)\n+      BUILTIN_VDQ_BHSI (UNOPU, reduc_umin_scal_, 10)\n+\tnew_stmt = gimple_build_call_internal (IFN_REDUC_MIN,\n+\t\t\t\t\t       1, args[0]);\n+\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n+\tbreak;\n+      BUILTIN_GPF (BINOP, fmulx, 0)\n \t{\n-\t  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n-\t  unsigned nargs = gimple_call_num_args (stmt);\n-\t  tree *args = (nargs > 0\n-\t\t\t? gimple_call_arg_ptr (stmt, 0)\n-\t\t\t: &error_mark_node);\n-\n-\t  /* We use gimple's IFN_REDUC_(PLUS|MIN|MAX)s for float, signed int\n-\t     and unsigned int; it will distinguish according to the types of\n-\t     the arguments to the __builtin.  */\n-\t  switch (fcode)\n+\t  gcc_assert (nargs == 2);\n+\t  bool a0_cst_p = TREE_CODE (args[0]) == REAL_CST;\n+\t  bool a1_cst_p = TREE_CODE (args[1]) == REAL_CST;\n+\t  if (a0_cst_p || a1_cst_p)\n \t    {\n-\t      BUILTIN_VALL (UNOP, reduc_plus_scal_, 10)\n-\t        new_stmt = gimple_build_call_internal (IFN_REDUC_PLUS,\n-\t\t\t\t\t\t       1, args[0]);\n-\t\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n-\t\tbreak;\n-\t      BUILTIN_VDQIF (UNOP, reduc_smax_scal_, 10)\n-\t      BUILTIN_VDQ_BHSI (UNOPU, reduc_umax_scal_, 10)\n-\t        new_stmt = gimple_build_call_internal (IFN_REDUC_MAX,\n-\t\t\t\t\t\t       1, args[0]);\n-\t\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n-\t\tbreak;\n-\t      BUILTIN_VDQIF (UNOP, reduc_smin_scal_, 10)\n-\t      BUILTIN_VDQ_BHSI (UNOPU, reduc_umin_scal_, 10)\n-\t        new_stmt = gimple_build_call_internal (IFN_REDUC_MIN,\n-\t\t\t\t\t\t       1, args[0]);\n-\t\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n-\t\tbreak;\n-\t      BUILTIN_GPF (BINOP, fmulx, 0)\n+\t      if (a0_cst_p && a1_cst_p)\n \t\t{\n-\t\t  gcc_assert (nargs == 2);\n-\t\t  bool a0_cst_p = TREE_CODE (args[0]) == REAL_CST;\n-\t\t  bool a1_cst_p = TREE_CODE (args[1]) == REAL_CST;\n-\t\t  if (a0_cst_p || a1_cst_p)\n-\t\t    {\n-\t\t      if (a0_cst_p && a1_cst_p)\n-\t\t\t{\n-\t\t\t  tree t0 = TREE_TYPE (args[0]);\n-\t\t\t  real_value a0 = (TREE_REAL_CST (args[0]));\n-\t\t\t  real_value a1 = (TREE_REAL_CST (args[1]));\n-\t\t\t  if (real_equal (&a1, &dconst0))\n-\t\t\t    std::swap (a0, a1);\n-\t\t\t  /* According to real_equal (), +0 equals -0.  */\n-\t\t\t  if (real_equal (&a0, &dconst0) && real_isinf (&a1))\n-\t\t\t    {\n-\t\t\t      real_value res = dconst2;\n-\t\t\t      res.sign = a0.sign ^ a1.sign;\n-\t\t\t      new_stmt =\n-\t\t\t\tgimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t\t\t     REAL_CST,\n-\t\t\t\t\t\t     build_real (t0, res));\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    new_stmt =\n-\t\t\t      gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t\t\t   MULT_EXPR,\n-\t\t\t\t\t\t   args[0], args[1]);\n-\t\t\t}\n-\t\t      else /* a0_cst_p ^ a1_cst_p.  */\n-\t\t\t{\n-\t\t\t  real_value const_part = a0_cst_p\n-\t\t\t    ? TREE_REAL_CST (args[0]) : TREE_REAL_CST (args[1]);\n-\t\t\t  if (!real_equal (&const_part, &dconst0)\n-\t\t\t      && !real_isinf (&const_part))\n-\t\t\t    new_stmt =\n-\t\t\t      gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t\t\t   MULT_EXPR, args[0], args[1]);\n-\t\t\t}\n-\t\t    }\n-\t\t  if (new_stmt)\n+\t\t  tree t0 = TREE_TYPE (args[0]);\n+\t\t  real_value a0 = (TREE_REAL_CST (args[0]));\n+\t\t  real_value a1 = (TREE_REAL_CST (args[1]));\n+\t\t  if (real_equal (&a1, &dconst0))\n+\t\t    std::swap (a0, a1);\n+\t\t  /* According to real_equal (), +0 equals -0.  */\n+\t\t  if (real_equal (&a0, &dconst0) && real_isinf (&a1))\n \t\t    {\n-\t\t      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t\t      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t\t      real_value res = dconst2;\n+\t\t      res.sign = a0.sign ^ a1.sign;\n+\t\t      new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\t      REAL_CST,\n+\t\t\t\t\t\t      build_real (t0, res));\n \t\t    }\n-\t\t  break;\n+\t\t  else\n+\t\t    new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\t    MULT_EXPR,\n+\t\t\t\t\t\t    args[0], args[1]);\n \t\t}\n-\t    default:\n-\t      break;\n+\t      else /* a0_cst_p ^ a1_cst_p.  */\n+\t\t{\n+\t\t  real_value const_part = a0_cst_p\n+\t\t    ? TREE_REAL_CST (args[0]) : TREE_REAL_CST (args[1]);\n+\t\t  if (!real_equal (&const_part, &dconst0)\n+\t\t      && !real_isinf (&const_part))\n+\t\t    new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\t    MULT_EXPR, args[0],\n+\t\t\t\t\t\t    args[1]);\n+\t\t}\n+\t    }\n+\t  if (new_stmt)\n+\t    {\n+\t      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n+\t      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n \t    }\n+\t  break;\n \t}\n+    default:\n+      break;\n     }\n-\n-  if (new_stmt)\n-    {\n-      gsi_replace (gsi, new_stmt, true);\n-      changed = true;\n-    }\n-\n-  return changed;\n+  return new_stmt;\n }\n \n void"}, {"sha": "a870eb7713c4959ebc012cbb0439b2f95ab2787f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=6d4d616a782d5be693ea9575f69d5ebf450be090", "patch": "@@ -433,6 +433,22 @@ enum aarch64_svpattern {\n };\n #undef AARCH64_SVENUM\n \n+/* It's convenient to divide the built-in function codes into groups,\n+   rather than having everything in a single enum.  This type enumerates\n+   those groups.  */\n+enum aarch64_builtin_class\n+{\n+  AARCH64_BUILTIN_GENERAL\n+};\n+\n+/* Built-in function codes are structured so that the low\n+   AARCH64_BUILTIN_SHIFT bits contain the aarch64_builtin_class\n+   and the upper bits contain a group-specific subcode.  */\n+const unsigned int AARCH64_BUILTIN_SHIFT = 1;\n+\n+/* Mask that selects the aarch64_builtin_class part of a function code.  */\n+const unsigned int AARCH64_BUILTIN_CLASS = (1 << AARCH64_BUILTIN_SHIFT) - 1;\n+\n void aarch64_post_cfi_startproc (void);\n poly_int64 aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n@@ -459,7 +475,6 @@ bool aarch64_float_const_rtx_p (rtx);\n bool aarch64_function_arg_regno_p (unsigned);\n bool aarch64_fusion_enabled_p (enum aarch64_fusion_pairs);\n bool aarch64_gen_cpymemqi (rtx *);\n-bool aarch64_gimple_fold_builtin (gimple_stmt_iterator *);\n bool aarch64_is_extend_from_extract (scalar_int_mode, rtx, rtx);\n bool aarch64_is_long_call_p (rtx);\n bool aarch64_is_noplt_call_p (rtx);\n@@ -517,7 +532,6 @@ bool aarch64_symbolic_address_p (rtx);\n bool aarch64_uimm12_shift (HOST_WIDE_INT);\n bool aarch64_use_return_insn_p (void);\n bool aarch64_use_simple_return_insn_p (void);\n-const char *aarch64_mangle_builtin_type (const_tree);\n const char *aarch64_output_casesi (rtx *);\n \n enum aarch64_symbol_type aarch64_classify_symbol (rtx, HOST_WIDE_INT);\n@@ -544,7 +558,6 @@ rtx aarch64_simd_vect_par_cnst_half (machine_mode, int, bool);\n rtx aarch64_gen_stepped_int_parallel (unsigned int, int, int);\n bool aarch64_stepped_int_parallel_p (rtx, int);\n rtx aarch64_tls_get_addr (void);\n-tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);\n@@ -639,18 +652,16 @@ bool aarch64_prepare_sve_int_fma (rtx *, rtx_code);\n bool aarch64_prepare_sve_cond_int_fma (rtx *, rtx_code);\n #endif /* RTX_CODE */\n \n-void aarch64_init_builtins (void);\n-\n bool aarch64_process_target_attr (tree);\n void aarch64_override_options_internal (struct gcc_options *);\n \n-rtx aarch64_expand_builtin (tree exp,\n-\t\t\t    rtx target,\n-\t\t\t    rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t    int ignore ATTRIBUTE_UNUSED);\n-tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n-tree aarch64_builtin_rsqrt (unsigned int);\n+const char *aarch64_general_mangle_builtin_type (const_tree);\n+void aarch64_general_init_builtins (void);\n+tree aarch64_general_fold_builtin (unsigned int, tree, unsigned int, tree *);\n+gimple *aarch64_general_gimple_fold_builtin (unsigned int, gcall *);\n+rtx aarch64_general_expand_builtin (unsigned int, tree, rtx);\n+tree aarch64_general_builtin_decl (unsigned, bool);\n+tree aarch64_general_builtin_rsqrt (unsigned int);\n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n \n extern void aarch64_split_combinev16qi (rtx operands[3]);"}, {"sha": "81d0f2b3f1f51ba126e14f6031d419fcf59d0d42", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4d616a782d5be693ea9575f69d5ebf450be090/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6d4d616a782d5be693ea9575f69d5ebf450be090", "patch": "@@ -11646,6 +11646,79 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n   return aarch64_tune_params.memmov_cost;\n }\n \n+/* Implement TARGET_INIT_BUILTINS.  */\n+static void\n+aarch64_init_builtins ()\n+{\n+  aarch64_general_init_builtins ();\n+}\n+\n+/* Implement TARGET_FOLD_BUILTIN.  */\n+static tree\n+aarch64_fold_builtin (tree fndecl, int nargs, tree *args, bool)\n+{\n+  unsigned int code = DECL_MD_FUNCTION_CODE (fndecl);\n+  unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n+  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+  switch (code & AARCH64_BUILTIN_CLASS)\n+    {\n+    case AARCH64_BUILTIN_GENERAL:\n+      return aarch64_general_fold_builtin (subcode, type, nargs, args);\n+    }\n+  gcc_unreachable ();\n+}\n+\n+/* Implement TARGET_GIMPLE_FOLD_BUILTIN.  */\n+static bool\n+aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+{\n+  gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n+  tree fndecl = gimple_call_fndecl (stmt);\n+  unsigned int code = DECL_MD_FUNCTION_CODE (fndecl);\n+  unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n+  gimple *new_stmt = NULL;\n+  switch (code & AARCH64_BUILTIN_CLASS)\n+    {\n+    case AARCH64_BUILTIN_GENERAL:\n+      new_stmt = aarch64_general_gimple_fold_builtin (subcode, stmt);\n+      break;\n+    }\n+\n+  if (!new_stmt)\n+    return false;\n+\n+  gsi_replace (gsi, new_stmt, true);\n+  return true;\n+}\n+\n+/* Implement TARGET_EXPAND_BUILTIN.  */\n+static rtx\n+aarch64_expand_builtin (tree exp, rtx target, rtx, machine_mode, int)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  unsigned int code = DECL_MD_FUNCTION_CODE (fndecl);\n+  unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n+  switch (code & AARCH64_BUILTIN_CLASS)\n+    {\n+    case AARCH64_BUILTIN_GENERAL:\n+      return aarch64_general_expand_builtin (subcode, exp, target);\n+    }\n+  gcc_unreachable ();\n+}\n+\n+/* Implement TARGET_BUILTIN_DECL.  */\n+static tree\n+aarch64_builtin_decl (unsigned int code, bool initialize_p)\n+{\n+  unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n+  switch (code & AARCH64_BUILTIN_CLASS)\n+    {\n+    case AARCH64_BUILTIN_GENERAL:\n+      return aarch64_general_builtin_decl (subcode, initialize_p);\n+    }\n+  gcc_unreachable ();\n+}\n+\n /* Return true if it is safe and beneficial to use the approximate rsqrt optabs\n    to optimize 1.0/sqrt.  */\n \n@@ -11669,7 +11742,14 @@ aarch64_builtin_reciprocal (tree fndecl)\n \n   if (!use_rsqrt_p (mode))\n     return NULL_TREE;\n-  return aarch64_builtin_rsqrt (DECL_MD_FUNCTION_CODE (fndecl));\n+  unsigned int code = DECL_MD_FUNCTION_CODE (fndecl);\n+  unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n+  switch (code & AARCH64_BUILTIN_CLASS)\n+    {\n+    case AARCH64_BUILTIN_GENERAL:\n+      return aarch64_general_builtin_rsqrt (subcode);\n+    }\n+  gcc_unreachable ();\n }\n \n /* Emit instruction sequence to compute either the approximate square root\n@@ -15081,7 +15161,7 @@ aarch64_mangle_type (const_tree type)\n   /* Mangle AArch64-specific internal types.  TYPE_NAME is non-NULL_TREE for\n      builtin types.  */\n   if (TYPE_NAME (type) != NULL)\n-    return aarch64_mangle_builtin_type (type);\n+    return aarch64_general_mangle_builtin_type (type);\n \n   /* Use the default mangling.  */\n   return NULL;"}]}