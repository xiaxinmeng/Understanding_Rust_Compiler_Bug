{"sha": "27ea9e0635cd6267f9f1b517a6538001c4766be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlYTllMDYzNWNkNjI2N2Y5ZjFiNTE3YTY1MzgwMDFjNDc2NmJlOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-06T14:53:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-06T14:53:03Z"}, "message": "re PR target/57106 (-fcompare-debug failure with -O2 -fschedule-insns -funroll-all-loops)\n\n\tPR target/57106\n\t* config/i386/i386.c (add_parameter_dependencies): Add dependence\n\tbetween \"first_arg\" and \"insn\", not \"last\" and \"insn\".\n\ntestsuite/ChangeLog:\n\n\tPR target/57106\n\t* gcc.target/i386/pr57106.c: New test.\n\nFrom-SVN: r198629", "tree": {"sha": "d168ccc60e184e59a5ab15bfe0dff16ec0131083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d168ccc60e184e59a5ab15bfe0dff16ec0131083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27ea9e0635cd6267f9f1b517a6538001c4766be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ea9e0635cd6267f9f1b517a6538001c4766be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ea9e0635cd6267f9f1b517a6538001c4766be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ea9e0635cd6267f9f1b517a6538001c4766be8/comments", "author": null, "committer": null, "parents": [{"sha": "287085253193b062f8f023ae0c97dc2623d56214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287085253193b062f8f023ae0c97dc2623d56214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287085253193b062f8f023ae0c97dc2623d56214"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "86439ba2fb97ba4fd9bc48c1c0cc868c1e7a009c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ea9e0635cd6267f9f1b517a6538001c4766be8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ea9e0635cd6267f9f1b517a6538001c4766be8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=27ea9e0635cd6267f9f1b517a6538001c4766be8", "patch": "@@ -24662,7 +24662,7 @@ add_parameter_dependencies (rtx call, rtx head)\n \t  /* Add output depdendence between two function arguments if chain\n \t     of output arguments contains likely spilled HW registers.  */\n \t  if (is_spilled)\n-\t    add_dependence (last, insn, REG_DEP_OUTPUT);\n+\t    add_dependence (first_arg, insn, REG_DEP_OUTPUT);\n \t  first_arg = last = insn;\n \t}\n       else\n@@ -41355,7 +41355,8 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_SCHED_ADJUST_PRIORITY\n #define TARGET_SCHED_ADJUST_PRIORITY ix86_adjust_priority\n #undef TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK\n-#define TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK ix86_dependencies_evaluation_hook\n+#define TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK \\\n+  ix86_dependencies_evaluation_hook\n \n /* The size of the dispatch window is the total number of bytes of\n    object code allowed in a window.  */"}, {"sha": "6fccd8aac843dd53994373cf966a4b0db3971d1b", "filename": "gcc/testsuite/gcc.target/i386/pr57106.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ea9e0635cd6267f9f1b517a6538001c4766be8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ea9e0635cd6267f9f1b517a6538001c4766be8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57106.c?ref=27ea9e0635cd6267f9f1b517a6538001c4766be8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fschedule-insns -funroll-all-loops -fcompare-debug\" } */\n+\n+typedef void block128_f (int *, int);\n+\n+void\n+foo (int *out, int *iv, block128_f block)\n+{\n+  while (1)\n+    {\n+      *out = *out ^ *iv;\n+      block (out, *out);\n+      iv = out;\n+    }\n+}"}]}