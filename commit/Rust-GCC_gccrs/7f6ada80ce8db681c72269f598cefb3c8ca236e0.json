{"sha": "7f6ada80ce8db681c72269f598cefb3c8ca236e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y2YWRhODBjZThkYjY4MWM3MjI2OWY1OThjZWZiM2M4Y2EyMzZlMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2013-11-12T20:55:58Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-11-12T20:55:58Z"}, "message": "re PR target/59054 (Powerpc -O0 -mcpu=power7 generates sub-optimal code to load 0)\n\n2013-11-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/59054\n\t* config/rs6000/rs6000.md (movdi_internal32): Eliminate\n\tconstraints that would allow DImode into the traditional Altivec\n\tregisters, but cause undesirable code generation when loading 0 as\n\ta constant.\n\t(movdi_internal64): Likewise.\n\t(cmp<mode>_fpr): Do not use %x for CR register output.\n\t(extendsfdf2_fpr): Fix constraints when -mallow-upper-df and\n\t-mallow-upper-sf debug switches are used.\n\n[gcc/testsuite]\n2013-11-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/59054\n\t* gcc.target/powerpc/pr59054.c: New test.\n\nFrom-SVN: r204718", "tree": {"sha": "daa182cfe3aeab159a3dc7b0515a091f07235421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa182cfe3aeab159a3dc7b0515a091f07235421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f6ada80ce8db681c72269f598cefb3c8ca236e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6ada80ce8db681c72269f598cefb3c8ca236e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6ada80ce8db681c72269f598cefb3c8ca236e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6ada80ce8db681c72269f598cefb3c8ca236e0/comments", "author": null, "committer": null, "parents": [{"sha": "45b0be94bed1f11918c43b420934eac6e2a11bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b0be94bed1f11918c43b420934eac6e2a11bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b0be94bed1f11918c43b420934eac6e2a11bf6"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "97ad345b2c35e3ffb8c783051e7c3cf887663a6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f6ada80ce8db681c72269f598cefb3c8ca236e0", "patch": "@@ -1,3 +1,15 @@\n+2013-11-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/59054\n+\t* config/rs6000/rs6000.md (movdi_internal32): Eliminate\n+\tconstraints that would allow DImode into the traditional Altivec\n+\tregisters, but cause undesirable code generation when loading 0 as\n+\ta constant.\n+\t(movdi_internal64): Likewise.\n+\t(cmp<mode>_fpr): Do not use %x for CR register output.\n+\t(extendsfdf2_fpr): Fix constraints when -mallow-upper-df and\n+\t-mallow-upper-sf debug switches are used.\n+\n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-expr.h (create_tmp_var_name, create_tmp_var_raw,"}, {"sha": "d299a466a2d26218d349f3457ef9e880007f18c1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=7f6ada80ce8db681c72269f598cefb3c8ca236e0", "patch": "@@ -5226,7 +5226,7 @@\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fcmpu %0,%1,%2\n-   xscmpudp %x0,%x1,%x2\"\n+   xscmpudp %0,%x1,%x2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n ;; Floating point conversions\n@@ -5237,8 +5237,8 @@\n   \"\")\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,wy,?wy,wv\")\n-\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wz,Z\")))]\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wv\")\n+\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wy,Z\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"@\n    #\n@@ -5360,7 +5360,7 @@\n   \"TARGET_<MODE>_FPR && TARGET_CMPB\"\n   \"@\n    fcpsgn %0,%2,%1\n-   xscpsgn<VSs> %x0,%x2,%x1\"\n+   xscpsgn<Fvsx> %x0,%x2,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n ;; For MIN, MAX, and conditional move, we use DEFINE_EXPAND's that involve a\n@@ -10081,8 +10081,8 @@\n ;; Use of fprs is disparaged slightly otherwise reload prefers to reload\n ;; a gpr into a fpr instead of reloading an invalid 'Y' address\n (define_insn \"*movdi_internal32\"\n-  [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\" \"=Y,r,r,?m,?*d,?*d,r,?wa\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,Y,r,d,m,d,IJKnGHF,O\"))]\n+  [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\" \"=Y,r,r,?m,?*d,?*d,r\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,Y,r,d,m,d,IJKnGHF\"))]\n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -10093,8 +10093,7 @@\n    stfd%U0%X0 %1,%0\n    lfd%U1%X1 %0,%1\n    fmr %0,%1\n-   #\n-   xxlxor %x0,%x0,%x0\"\n+   #\"\n   [(set_attr_alternative \"type\"\n       [(const_string \"store\")\n        (const_string \"load\")\n@@ -10114,8 +10113,7 @@\n \t   (const_string \"fpload_u\")\n \t   (const_string \"fpload\")))\n        (const_string \"fp\")\n-       (const_string \"*\")\n-       (const_string \"vecsimple\")])])\n+       (const_string \"*\")])])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -10146,8 +10144,8 @@\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n \n (define_insn \"*movdi_internal64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r,?m,?*d,?*d,?Z,?wv,?wa,r,*h,*h,?wa,r,?*wg,r,?*wm\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,Y,r,I,L,nF,d,m,d,wv,Z,wa,*h,r,0,O,*wg,r,*wm,r\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r,?m,?*d,?*d,r,*h,*h,r,?*wg,r,?*wm\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,Y,r,I,L,nF,d,m,d,*h,r,0,*wg,r,*wm,r\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -10161,13 +10159,9 @@\n    stfd%U0%X0 %1,%0\n    lfd%U1%X1 %0,%1\n    fmr %0,%1\n-   stxsd%U0x %x1,%y0\n-   lxsd%U1x %x0,%y1\n-   xxlor %x0,%x1,%x1\n    mf%1 %0\n    mt%0 %1\n    nop\n-   xxlxor %x0,%x0,%x0\n    mftgpr %0,%1\n    mffgpr %0,%1\n    mfvsrd %0,%x1\n@@ -10206,24 +10200,14 @@\n \t   (const_string \"fpload_u\")\n \t   (const_string \"fpload\")))\n        (const_string \"fp\")\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[0], VOIDmode)\")\n-\t (const_string \"fpstore_ux\")\n-\t (const_string \"fpstore\"))\n-       (if_then_else\n-\t (match_test \"update_indexed_address_mem (operands[1], VOIDmode)\")\n-\t (const_string \"fpload_ux\")\n-\t (const_string \"fpload\"))\n-       (const_string \"vecsimple\")\n        (const_string \"mfjmpr\")\n        (const_string \"mtjmpr\")\n        (const_string \"*\")\n-       (const_string \"vecsimple\")\n        (const_string \"mftgpr\")\n        (const_string \"mffgpr\")\n        (const_string \"mftgpr\")\n        (const_string \"mffgpr\")])\n-   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4,4,4\")])\n \n ;; Generate all one-bits and clear left or right.\n ;; Use (and:DI (rotate:DI ...)) to avoid anddi3 unnecessary clobber."}, {"sha": "a8ac6f8acc4096cca02bee1e7bced7cedcf2b708", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f6ada80ce8db681c72269f598cefb3c8ca236e0", "patch": "@@ -1,3 +1,8 @@\n+2013-11-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/59054\n+\t* gcc.target/powerpc/pr59054.c: New test.\n+\n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* g++.dg/cpp1y/lambda-generic.C: New test case."}, {"sha": "0379aeee63539f9cf31c9de4511b7feec4994b49", "filename": "gcc/testsuite/gcc.target/powerpc/pr59054.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f6ada80ce8db681c72269f598cefb3c8ca236e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr59054.c?ref=7f6ada80ce8db681c72269f598cefb3c8ca236e0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O0 -m64\" } */\n+\n+long foo (void) { return 0; }\n+\n+/* { dg-final { scan-assembler-not \"xxlor\" } } */\n+/* { dg-final { scan-assembler-not \"stfd\" } } */\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O0 -m64\" } */\n+\n+long foo (void) { return 0; }\n+\n+/* { dg-final { scan-assembler-not \"xxlor\" } } */\n+/* { dg-final { scan-assembler-not \"stfd\" } } */"}]}