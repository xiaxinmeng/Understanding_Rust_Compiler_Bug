{"sha": "26b69f64820b553e6e5b00122b41e8c53277a95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiNjlmNjQ4MjBiNTUzZTZlNWIwMDEyMmI0MWU4YzUzMjc3YTk1ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-12-21T21:43:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-12-21T21:43:51Z"}, "message": "mips-dsp.md (mips_lbux): Turn into a define_expand, changing operand 1 to a pmode_register_operand.\n\ngcc/\n\t* config/mips/mips-dsp.md (mips_lbux): Turn into a define_expand,\n\tchanging operand 1 to a pmode_register_operand.\n\t(mips_lhx, mips_lwx): Likewise.\n\t(mips_lbux_<mode>, mips_lhx_<mode>, mips_lwx_<mode>): New patterns.\n\t* config/mips/mips.c (mips_prepare_builtin_arg): Get the mode of\n\tthe value from the argument expression.\n\nFrom-SVN: r142872", "tree": {"sha": "818d1f76fcd9055b6365f381013bb34b90e68e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/818d1f76fcd9055b6365f381013bb34b90e68e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b69f64820b553e6e5b00122b41e8c53277a95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b69f64820b553e6e5b00122b41e8c53277a95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b69f64820b553e6e5b00122b41e8c53277a95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b69f64820b553e6e5b00122b41e8c53277a95e/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50220190d24a251bba53c1eb6cf54ae6979d38b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50220190d24a251bba53c1eb6cf54ae6979d38b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50220190d24a251bba53c1eb6cf54ae6979d38b6"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "628277d0d423eb451fbbf6691563322e3e8044d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26b69f64820b553e6e5b00122b41e8c53277a95e", "patch": "@@ -1,3 +1,12 @@\n+2008-12-21  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-dsp.md (mips_lbux): Turn into a define_expand,\n+\tchanging operand 1 to a pmode_register_operand.\n+\t(mips_lhx, mips_lwx): Likewise.\n+\t(mips_lbux_<mode>, mips_lhx_<mode>, mips_lwx_<mode>): New patterns.\n+\t* config/mips/mips.c (mips_prepare_builtin_arg): Get the mode of\n+\tthe value from the argument expression.\n+\n 2008-12-21  Jan Hubicka  <jh@suse.cz>\n \t    Kai Tietz <kai.tietz@onevision.com>\n "}, {"sha": "f846b3d639cc281d4d0039817a7fd2fd388b77ae", "filename": "gcc/config/mips/mips-dsp.md", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dsp.md?ref=26b69f64820b553e6e5b00122b41e8c53277a95e", "patch": "@@ -1008,32 +1008,72 @@\n \n ;; Table 2-7. MIPS DSP ASE Instructions: Indexed-Load\n ;; L*X\n-(define_insn \"mips_lbux\"\n+(define_expand \"mips_lbux\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand 1 \"pmode_register_operand\")\n+   (match_operand:SI 2 \"register_operand\")]\n+  \"ISA_HAS_DSP\"\n+{\n+  operands[2] = convert_to_mode (Pmode, operands[2], false);\n+  if (Pmode == SImode)\n+    emit_insn (gen_mips_lbux_si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_mips_lbux_di (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"mips_lbux_<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(zero_extend:SI (mem:QI (plus:SI (match_operand:SI 1\n-\t\t\t\t\t  \"register_operand\" \"d\")\n-\t\t\t\t\t (match_operand:SI 2\n-\t\t\t\t\t  \"register_operand\" \"d\")))))]\n+   \t(zero_extend:SI\n+\t  (mem:QI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:P 2 \"register_operand\" \"d\")))))]\n   \"ISA_HAS_DSP\"\n   \"lbux\\t%0,%2(%1)\"\n   [(set_attr \"type\"\t\"load\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"mips_lhx\"\n+(define_expand \"mips_lhx\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand 1 \"pmode_register_operand\")\n+   (match_operand:SI 2 \"register_operand\")]\n+  \"ISA_HAS_DSP\"\n+{\n+  operands[2] = convert_to_mode (Pmode, operands[2], false);\n+  if (Pmode == SImode)\n+    emit_insn (gen_mips_lhx_si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_mips_lhx_di (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"mips_lhx_<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:SI (mem:HI (plus:SI (match_operand:SI 1\n-\t\t\t\t\t  \"register_operand\" \"d\")\n-\t\t\t\t\t (match_operand:SI 2\n-\t\t\t\t\t  \"register_operand\" \"d\")))))]\n+\t(zero_extend:SI\n+\t  (mem:HI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:P 2 \"register_operand\" \"d\")))))]\n   \"ISA_HAS_DSP\"\n   \"lhx\\t%0,%2(%1)\"\n   [(set_attr \"type\"\t\"load\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"mips_lwx\"\n+(define_expand \"mips_lwx\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand 1 \"pmode_register_operand\")\n+   (match_operand:SI 2 \"register_operand\")]\n+  \"ISA_HAS_DSP\"\n+{\n+  operands[2] = convert_to_mode (Pmode, operands[2], false);\n+  if (Pmode == SImode)\n+    emit_insn (gen_mips_lwx_si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_mips_lwx_di (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"mips_lwx_<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t\t (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+\t(mem:SI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t    \t\t(match_operand:P 2 \"register_operand\" \"d\"))))]\n   \"ISA_HAS_DSP\"\n   \"lwx\\t%0,%2(%1)\"\n   [(set_attr \"type\"\t\"load\")"}, {"sha": "290caa676918f5a25aa50c297b42437a4c2efd78", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b69f64820b553e6e5b00122b41e8c53277a95e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=26b69f64820b553e6e5b00122b41e8c53277a95e", "patch": "@@ -11682,19 +11682,23 @@ static rtx\n mips_prepare_builtin_arg (enum insn_code icode,\n \t\t\t  unsigned int opno, tree exp, unsigned int argno)\n {\n+  tree arg;\n   rtx value;\n   enum machine_mode mode;\n \n-  value = expand_normal (CALL_EXPR_ARG (exp, argno));\n+  arg = CALL_EXPR_ARG (exp, argno);\n+  value = expand_normal (arg);\n   mode = insn_data[icode].operand[opno].mode;\n   if (!insn_data[icode].operand[opno].predicate (value, mode))\n     {\n-      /* Cope with address operands, where MODE is not the mode of\n-\t VALUE itself.  */\n-      if (GET_MODE (value) == VOIDmode)\n-\tvalue = copy_to_mode_reg (mode, value);\n-      else\n-\tvalue = copy_to_reg (value);\n+      /* We need to get the mode from ARG for two reasons:\n+\n+\t   - to cope with address operands, where MODE is the mode of the\n+\t     memory, rather than of VALUE itself.\n+\n+\t   - to cope with special predicates like pmode_register_operand,\n+\t     where MODE is VOIDmode.  */\n+      value = copy_to_mode_reg (TYPE_MODE (TREE_TYPE (arg)), value);\n \n       /* Check the predicate again.  */\n       if (!insn_data[icode].operand[opno].predicate (value, mode))"}]}