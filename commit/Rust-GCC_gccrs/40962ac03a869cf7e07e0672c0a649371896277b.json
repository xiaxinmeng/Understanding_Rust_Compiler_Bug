{"sha": "40962ac03a869cf7e07e0672c0a649371896277b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA5NjJhYzAzYTg2OWNmN2UwN2UwNjcyYzBhNjQ5MzcxODk2Mjc3Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-10T16:15:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-10T16:15:52Z"}, "message": "Minor simplification to std::_Bind_result helpers\n\n\t* include/std/functional (_Bind_result::__enable_if_void): Use alias\n\ttemplate instead of class template.\n\t(_Bind_result::__disable_if_void): Likewise.\n\t(_Bind_result::__call): Adjust uses of __enable_if_void and\n\t__disable_if_void.\n\nFrom-SVN: r240940", "tree": {"sha": "0ae0104d0d1b18413144651fb5833993248fb3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ae0104d0d1b18413144651fb5833993248fb3f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40962ac03a869cf7e07e0672c0a649371896277b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40962ac03a869cf7e07e0672c0a649371896277b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40962ac03a869cf7e07e0672c0a649371896277b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40962ac03a869cf7e07e0672c0a649371896277b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6744f47576c61fa914057cc7d60e40b74eda95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6744f47576c61fa914057cc7d60e40b74eda95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6744f47576c61fa914057cc7d60e40b74eda95"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "afa10f4a427fe48c297800a3ce92bf1cf7c485a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40962ac03a869cf7e07e0672c0a649371896277b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40962ac03a869cf7e07e0672c0a649371896277b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40962ac03a869cf7e07e0672c0a649371896277b", "patch": "@@ -1,5 +1,11 @@\n 2016-10-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/functional (_Bind_result::__enable_if_void): Use alias\n+\ttemplate instead of class template.\n+\t(_Bind_result::__disable_if_void): Likewise.\n+\t(_Bind_result::__call): Adjust uses of __enable_if_void and\n+\t__disable_if_void.\n+\n \t* doc/xml/manual/intro.xml: Document DR 2296 status.\n \t* doc/xml/manual/status_cxx2017.xml: Update status.\n \t* include/bits/move.h (__addressof): Add _GLIBCXX_CONSTEXPR and"}, {"sha": "2587392a25cf8901e2402504dd48ce82b153575b", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40962ac03a869cf7e07e0672c0a649371896277b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40962ac03a869cf7e07e0672c0a649371896277b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=40962ac03a869cf7e07e0672c0a649371896277b", "patch": "@@ -1000,86 +1000,82 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n       // sfinae types\n       template<typename _Res>\n-\tstruct __enable_if_void : enable_if<is_void<_Res>::value, int> { };\n+\tusing __enable_if_void\n+\t  = typename enable_if<is_void<_Res>{}>::type;\n+\n       template<typename _Res>\n-\tstruct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };\n+\tusing __disable_if_void\n+\t  = typename enable_if<!is_void<_Res>{}, _Result>::type;\n \n       // Call unqualified\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t_Result\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __disable_if_void<_Res>::type = 0)\n+\t__disable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n \t  return _M_f(_Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call unqualified, return void\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\tvoid\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __enable_if_void<_Res>::type = 0)\n+\t__enable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n \t  _M_f(_Mu<_Bound_args>()\n \t       (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call as const\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t_Result\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __disable_if_void<_Res>::type = 0) const\n+\t__disable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n \t  return _M_f(_Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call as const, return void\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\tvoid\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __enable_if_void<_Res>::type = 0) const\n+\t__enable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n \t  _M_f(_Mu<_Bound_args>()\n \t       (std::get<_Indexes>(_M_bound_args),  __args)...);\n \t}\n \n       // Call as volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t_Result\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __disable_if_void<_Res>::type = 0) volatile\n+\t__disable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n \t  return _M_f(_Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call as volatile, return void\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\tvoid\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __enable_if_void<_Res>::type = 0) volatile\n+\t__enable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n \t  _M_f(_Mu<_Bound_args>()\n \t       (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call as const volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t_Result\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,\n-\t    typename __disable_if_void<_Res>::type = 0) const volatile\n+\t__disable_if_void<_Res>\n+\t__call(tuple<_Args...>&& __args,\n+\t       _Index_tuple<_Indexes...>) const volatile\n \t{\n \t  return _M_f(_Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n       // Call as const volatile, return void\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\tvoid\n+\t__enable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args,\n-\t       _Index_tuple<_Indexes...>,\n-\t    typename __enable_if_void<_Res>::type = 0) const volatile\n+\t       _Index_tuple<_Indexes...>) const volatile\n \t{\n \t  _M_f(_Mu<_Bound_args>()\n \t       (__volget<_Indexes>(_M_bound_args), __args)...);"}]}