{"sha": "656b031126ee1679e97b03484cd870d68dd387a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2YjAzMTEyNmVlMTY3OWU5N2IwMzQ4NGNkODcwZDY4ZGQzODdhOQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-10-11T10:35:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-11T10:35:43Z"}, "message": "exp_dbug.adb (Debug_Renaming_Declaration): Process underlying types.\n\n\t* exp_dbug.adb (Debug_Renaming_Declaration): Process underlying types.\n\tEmit GNAT encodings for object renamings involving record components\n\twhose normalized bit offset is not null.\n\t* uintp.h (UI_No_Uint): Declare.\n\t* gcc-interface/gigi.h (can_materialize_object_renaming_p): New.\n\t* gcc-interface/utils.c (can_materialize_object_renaming_p): New\n\tfunction.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Object_Renaming_Declaration>:\n\tIn code generation mode, materialize all renamings as long as they need\n\tdebug info and we are not optimizing.\n\nFrom-SVN: r240985", "tree": {"sha": "8ee7e92fd6e2a32018317f96b606021e045aed70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee7e92fd6e2a32018317f96b606021e045aed70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/656b031126ee1679e97b03484cd870d68dd387a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656b031126ee1679e97b03484cd870d68dd387a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/656b031126ee1679e97b03484cd870d68dd387a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656b031126ee1679e97b03484cd870d68dd387a9/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bb4acee6878e291e3972feb6dcd154bce915190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb4acee6878e291e3972feb6dcd154bce915190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb4acee6878e291e3972feb6dcd154bce915190"}], "stats": {"total": 105, "additions": 98, "deletions": 7}, "files": [{"sha": "c2592cf12bf24045f858a686fafbcaef034402cf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -1,3 +1,16 @@\n+2016-10-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* exp_dbug.adb (Debug_Renaming_Declaration): Process underlying types.\n+\tEmit GNAT encodings for object renamings involving record components\n+ \twhose normalized bit offset is not null.\n+\t* uintp.h (UI_No_Uint): Declare.\n+\t* gcc-interface/gigi.h (can_materialize_object_renaming_p): New.\n+\t* gcc-interface/utils.c (can_materialize_object_renaming_p): New\n+\tfunction.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Object_Renaming_Declaration>:\n+\tIn code generation mode, materialize all renamings as long as they need\n+\tdebug info and we are not optimizing.\n+\n 2016-10-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/utils2.c (build_binary_op): Add a NO_FOLD"}, {"sha": "71454509216001fe7f9199a586d2113e2ea4bf29", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -333,7 +333,7 @@ package body Exp_Dbug is\n       ----------------------------\n \n       procedure Enable_If_Packed_Array (N : Node_Id) is\n-         T : constant Entity_Id := Etype (N);\n+         T : constant Entity_Id := Underlying_Type (Etype (N));\n       begin\n          Enable :=\n            Enable or else (Ekind (T) in Array_Kind\n@@ -390,7 +390,16 @@ package body Exp_Dbug is\n                exit;\n \n             when N_Selected_Component =>\n-               Enable := Enable or else Is_Packed (Etype (Prefix (Ren)));\n+               declare\n+                  First_Bit : constant Uint :=\n+                     Normalized_First_Bit (Entity (Selector_Name (Ren)));\n+               begin\n+                  Enable :=\n+                    (Enable\n+                     or else Is_Packed (Underlying_Type (Etype (Prefix (Ren))))\n+                     or else (First_Bit /= No_Uint\n+                              and then First_Bit /= Uint_0));\n+               end;\n                Prepend_String_To_Buffer\n                  (Get_Name_String (Chars (Selector_Name (Ren))));\n                Prepend_String_To_Buffer (\"XR\");"}, {"sha": "1d87b5be44e6c6b1356fa68d9fc298ded4cbb277", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -1014,6 +1014,11 @@ extern void process_deferred_decl_context (bool force);\n    IS_SUBPROGRAM to whether the returned entity is a subprogram.  */\n extern Entity_Id get_debug_scope (Node_Id gnat_node, bool *is_subprogram);\n \n+/* Return whether EXPR, which is the renamed object in an object renaming\n+   declaration, can be materialized as a reference (REFERENCE_TYPE).  This\n+   should be synchronized with Exp_Dbug.Debug_Renaming_Declaration.  */\n+extern bool can_materialize_object_renaming_p (Node_Id expr);\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif"}, {"sha": "7b319d45a1509a5a533f730fb8f8fdd0193c5e9e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -6084,10 +6084,18 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnat_temp = Defining_Entity (gnat_node);\n       gnu_result = alloc_stmt_list ();\n \n-      /* Don't do anything if this renaming is handled by the front end or if\n-\t we are just annotating types and this object has a composite or task\n-\t type, don't elaborate it.  */\n-      if (!Is_Renaming_Of_Object (gnat_temp)\n+      /* Don't do anything if this renaming is handled by the front end and it\n+\t does not need debug info.  Note that we consider renamings don't need\n+\t debug info when optimizing: our way to describe them has a\n+\t memory/elaboration footprint.\n+\n+\t Don't do anything neither if we are just annotating types and this\n+\t object has a composite or task type, don't elaborate it.  */\n+      if ((!Is_Renaming_Of_Object (gnat_temp)\n+\t   || (Needs_Debug_Info (gnat_temp)\n+\t       && !optimize\n+\t       && can_materialize_object_renaming_p\n+\t\t    (Renamed_Object (gnat_temp))))\n \t  && ! (type_annotate_only\n \t\t&& (Is_Array_Type (Etype (gnat_temp))\n \t\t    || Is_Record_Type (Etype (gnat_temp))"}, {"sha": "21e12658380a5a36862f63e038986777944e2c5c", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -6185,6 +6185,58 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Return whether EXPR, which is the renamed object in an object renaming\n+   declaration, can be materialized as a reference (REFERENCE_TYPE).  This\n+   should be synchronized with Exp_Dbug.Debug_Renaming_Declaration.  */\n+\n+bool\n+can_materialize_object_renaming_p (Node_Id expr)\n+{\n+  while (true)\n+    {\n+      switch Nkind (expr)\n+\t{\n+\tcase N_Identifier:\n+\tcase N_Expanded_Name:\n+\t  return true;\n+\n+\tcase N_Selected_Component:\n+\t  {\n+\t    if (Is_Packed (Underlying_Type (Etype (Prefix (expr)))))\n+\t      return false;\n+\n+\t    const Uint bitpos\n+\t      = Normalized_First_Bit (Entity (Selector_Name (expr)));\n+\t    if (!UI_Is_In_Int_Range (bitpos)\n+\t\t|| (bitpos != UI_No_Uint && bitpos != UI_From_Int (0)))\n+\t      return false;\n+\n+\t    expr = Prefix (expr);\n+\t    break;\n+\t  }\n+\n+\tcase N_Indexed_Component:\n+\tcase N_Slice:\n+\t  {\n+\t    const Entity_Id t = Underlying_Type (Etype (Prefix (expr)));\n+\n+\t    if (Is_Array_Type (t) && Present (Packed_Array_Impl_Type (t)))\n+\t      return false;\n+\n+\t    expr = Prefix (expr);\n+\t    break;\n+\t  }\n+\n+\tcase N_Explicit_Dereference:\n+\t  expr = Prefix (expr);\n+\t  break;\n+\n+\tdefault:\n+\t  return true;\n+\t};\n+    }\n+}\n+\n /* ----------------------------------------------------------------------- *\n  *                              BUILTIN FUNCTIONS                          *\n  * ----------------------------------------------------------------------- */"}, {"sha": "fafa13903b88a8b9869c520cde6e555ec792807b", "filename": "gcc/ada/uintp.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fuintp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656b031126ee1679e97b03484cd870d68dd387a9/gcc%2Fada%2Fuintp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.h?ref=656b031126ee1679e97b03484cd870d68dd387a9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *            Copyright (C) 1992-2014, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 1992-2016, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -64,6 +64,10 @@ extern Uint UI_From_Int\t\t\t(int);\n /* Similarly, but take a GCC INTEGER_CST.  */\n extern Uint UI_From_gnu\t\t\t(tree);\n \n+/* A constant value indicating a missing or unset Uint value.  */\n+#define UI_No_Uint uintp__no_uint\n+extern const Uint UI_No_Uint;\n+\n /* Uint values are represented as multiple precision integers stored in a\n    multi-digit format using UI_Base as the base.  This value is chosen so\n    that the product UI_Base*UI_Base is within the range of Int values.  */"}]}