{"sha": "981c7390cca5fcadebeb0cc928d3301289019cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxYzczOTBjY2E1ZmNhZGViZWIwY2M5MjhkMzMwMTI4OTAxOWNiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-28T13:43:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-28T13:43:23Z"}, "message": "(eliminate_regs, case MULT): New case, to apply distributive law, when\nneeded.\n\nFrom-SVN: r6676", "tree": {"sha": "71bfce3c8b9f494b26086257e0cba9566f518bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71bfce3c8b9f494b26086257e0cba9566f518bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/981c7390cca5fcadebeb0cc928d3301289019cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981c7390cca5fcadebeb0cc928d3301289019cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981c7390cca5fcadebeb0cc928d3301289019cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981c7390cca5fcadebeb0cc928d3301289019cbe/comments", "author": null, "committer": null, "parents": [{"sha": "7633af950689bc65a75284525a7032595c94ad67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7633af950689bc65a75284525a7032595c94ad67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7633af950689bc65a75284525a7032595c94ad67"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "90a4573282ecbf12aa2b295bf3a952db63d82dd2", "filename": "gcc/reload1.c", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981c7390cca5fcadebeb0cc928d3301289019cbe/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981c7390cca5fcadebeb0cc928d3301289019cbe/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=981c7390cca5fcadebeb0cc928d3301289019cbe", "patch": "@@ -2800,33 +2800,35 @@ eliminate_regs (x, mem_mode, insn)\n       }\n       return x;\n \n-    case EXPR_LIST:\n-      /* If we have something in XEXP (x, 0), the usual case, eliminate it.  */\n-      if (XEXP (x, 0))\n-\t{\n-\t  new = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n-\t  if (new != XEXP (x, 0))\n-\t    x = gen_rtx (EXPR_LIST, REG_NOTE_KIND (x), new, XEXP (x, 1));\n-\t}\n+    case MULT:\n+      /* If this is the product of an eliminable register and a \n+\t constant, apply the distribute law and move the constant out\n+\t so that we have (plus (mult ..) ..).  This is needed in order\n+\t to keep load-address insns valid.   This case is pathalogical.\n+\t We ignore the possibility of overflow here.  */\n+      if (GET_CODE (XEXP (x, 0)) == REG\n+\t  && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\tfor (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS];\n+\t     ep++)\n+\t  if (ep->from_rtx == XEXP (x, 0) && ep->can_eliminate)\n+\t    {\n+\t      if (! mem_mode\n+\t\t  /* Refs inside notes don't count for this purpose.  */\n+\t\t  && ! (insn != 0 && (GET_CODE (insn) == EXPR_LIST\n+\t\t\t\t      || GET_CODE (insn) == INSN_LIST)))\n+\t\tep->ref_outside_mem = 1;\n+\n+\t      return\n+\t\tplus_constant (gen_rtx (MULT, Pmode, ep->to_rtx, XEXP (x, 1)),\n+\t\t\t       ep->previous_offset * INTVAL (XEXP (x, 1)));\n+\t    }\n \n       /* ... fall through ... */\n \n-    case INSN_LIST:\n-      /* Now do eliminations in the rest of the chain.  If this was\n-\t an EXPR_LIST, this might result in allocating more memory than is\n-\t strictly needed, but it simplifies the code.  */\n-      if (XEXP (x, 1))\n-\t{\n-\t  new = eliminate_regs (XEXP (x, 1), mem_mode, insn);\n-\t  if (new != XEXP (x, 1))\n-\t    return gen_rtx (GET_CODE (x), GET_MODE (x), XEXP (x, 0), new);\n-\t}\n-      return x;\n-\n     case CALL:\n     case COMPARE:\n     case MINUS:\n-    case MULT:\n     case DIV:      case UDIV:\n     case MOD:      case UMOD:\n     case AND:      case IOR:      case XOR:\n@@ -2845,6 +2847,29 @@ eliminate_regs (x, mem_mode, insn)\n       }\n       return x;\n \n+    case EXPR_LIST:\n+      /* If we have something in XEXP (x, 0), the usual case, eliminate it.  */\n+      if (XEXP (x, 0))\n+\t{\n+\t  new = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n+\t  if (new != XEXP (x, 0))\n+\t    x = gen_rtx (EXPR_LIST, REG_NOTE_KIND (x), new, XEXP (x, 1));\n+\t}\n+\n+      /* ... fall through ... */\n+\n+    case INSN_LIST:\n+      /* Now do eliminations in the rest of the chain.  If this was\n+\t an EXPR_LIST, this might result in allocating more memory than is\n+\t strictly needed, but it simplifies the code.  */\n+      if (XEXP (x, 1))\n+\t{\n+\t  new = eliminate_regs (XEXP (x, 1), mem_mode, insn);\n+\t  if (new != XEXP (x, 1))\n+\t    return gen_rtx (GET_CODE (x), GET_MODE (x), XEXP (x, 0), new);\n+\t}\n+      return x;\n+\n     case PRE_INC:\n     case POST_INC:\n     case PRE_DEC:"}]}