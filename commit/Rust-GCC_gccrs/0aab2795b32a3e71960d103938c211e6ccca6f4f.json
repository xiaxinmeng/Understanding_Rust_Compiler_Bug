{"sha": "0aab2795b32a3e71960d103938c211e6ccca6f4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhYjI3OTViMzJhM2U3MTk2MGQxMDM5MzhjMjExZTZjY2NhNmY0Zg==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@bigfoot.com", "date": "2000-07-27T01:48:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-27T01:48:33Z"}, "message": "pexecute.c (pexecute): Change __GO32__ to __DJGPP__.\n\n        * pexecute.c (pexecute) [__MSDOS__]: Change __GO32__ to\n        __DJGPP__. Use P_WAIT instead of constant in the spawnv* call.\n        Cast program to 'char *' in errmsg_arg assignment.\n        (PWAIT_ERROR): Define.\n        (pwait): Use PWAIT_ERROR.  Adjust DJGPP's status code to conform\n        to DJGPP's WIF* macros.\n\nFrom-SVN: r35281", "tree": {"sha": "75e32e1670a98a7b7d0e1500575760405f2e2547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75e32e1670a98a7b7d0e1500575760405f2e2547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aab2795b32a3e71960d103938c211e6ccca6f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aab2795b32a3e71960d103938c211e6ccca6f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aab2795b32a3e71960d103938c211e6ccca6f4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aab2795b32a3e71960d103938c211e6ccca6f4f/comments", "author": null, "committer": null, "parents": [{"sha": "ecbe6c619dae9c688d35d9080e2e76c11181e63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbe6c619dae9c688d35d9080e2e76c11181e63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbe6c619dae9c688d35d9080e2e76c11181e63b"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "78a66ab4e7935a2a3916931fd70c6836b857159a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aab2795b32a3e71960d103938c211e6ccca6f4f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aab2795b32a3e71960d103938c211e6ccca6f4f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0aab2795b32a3e71960d103938c211e6ccca6f4f", "patch": "@@ -1,3 +1,12 @@\n+2000-07-26 Mark Elbrecht <snowball3@bigfoot.com>\n+\n+\t* pexecute.c (pexecute) [__MSDOS__]: Change __GO32__ to\n+\t__DJGPP__. Use P_WAIT instead of constant in the spawnv* call.\n+\tCast program to 'char *' in errmsg_arg assignment.\n+\t(PWAIT_ERROR): Define.\n+\t(pwait): Use PWAIT_ERROR.  Adjust DJGPP's status code to conform\n+\tto DJGPP's WIF* macros.\n+\n 2000-07-27  RodneyBrown  <RodneyBrown@pmsc.com>\n \t    Jeff Law <law@cygnus.com>\n "}, {"sha": "9c62b57bbdb466a93b85a38ce0de1d57eb562504", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aab2795b32a3e71960d103938c211e6ccca6f4f/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aab2795b32a3e71960d103938c211e6ccca6f4f/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=0aab2795b32a3e71960d103938c211e6ccca6f4f", "patch": "@@ -157,9 +157,9 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n   if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n     abort ();\n \n-#ifdef __GO32__\n+#ifdef __DJGPP__\n   /* ??? What are the possible return values from spawnv?  */\n-  rc = (flags & PEXECUTE_SEARCH ? spawnvp : spawnv) (1, program, argv);\n+  rc = (flags & PEXECUTE_SEARCH ? spawnvp : spawnv) (P_WAIT, program, argv);\n #else\n   char *scmd, *rf;\n   FILE *argfile;\n@@ -208,7 +208,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n   if (rc == -1)\n     {\n       *errmsg_fmt = install_error_msg;\n-      *errmsg_arg = program;\n+      *errmsg_arg = (char *)program;\n       return -1;\n     }\n \n@@ -217,6 +217,13 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n   return last_pid;\n }\n \n+/* Use ECHILD if available, otherwise use EINVAL.  */\n+#ifdef ECHILD\n+#define PWAIT_ERROR ECHILD\n+#else\n+#define PWAIT_ERROR EINVAL\n+#endif\n+\n int\n pwait (pid, status, flags)\n      int pid;\n@@ -228,13 +235,16 @@ pwait (pid, status, flags)\n       /* Called twice for the same child?  */\n       || pid == last_reaped)\n     {\n-      /* ??? ECHILD would be a better choice.  Can we use it here?  */\n-      errno = EINVAL;\n+      errno = PWAIT_ERROR;\n       return -1;\n     }\n   /* ??? Here's an opportunity to canonicalize the values in STATUS.\n      Needed?  */\n+#ifdef __DJGPP__\n+  *status = (last_status >> 8);\n+#else\n   *status = last_status;\n+#endif\n   last_reaped = last_pid;\n   return last_pid;\n }"}]}