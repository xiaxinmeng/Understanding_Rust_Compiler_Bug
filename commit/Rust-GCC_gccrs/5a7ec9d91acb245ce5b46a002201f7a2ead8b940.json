{"sha": "5a7ec9d91acb245ce5b46a002201f7a2ead8b940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3ZWM5ZDkxYWNiMjQ1Y2U1YjQ2YTAwMjIwMWY3YTJlYWQ4Yjk0MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-26T12:54:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-26T12:54:41Z"}, "message": "(process_init_constructor): Strip NON_LVALUE_EXPR\nfrom specified array index.\n\nFrom-SVN: r1300", "tree": {"sha": "1a021c9654f777923b021aa8ebd1e4a9d6e6ecfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a021c9654f777923b021aa8ebd1e4a9d6e6ecfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a7ec9d91acb245ce5b46a002201f7a2ead8b940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7ec9d91acb245ce5b46a002201f7a2ead8b940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7ec9d91acb245ce5b46a002201f7a2ead8b940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7ec9d91acb245ce5b46a002201f7a2ead8b940/comments", "author": null, "committer": null, "parents": [{"sha": "536bb15b8f5fdd59241bdf2eac29298aa61fb272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536bb15b8f5fdd59241bdf2eac29298aa61fb272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536bb15b8f5fdd59241bdf2eac29298aa61fb272"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "bca1eb1aa31facd334feeb02c5726ebe524c45cc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7ec9d91acb245ce5b46a002201f7a2ead8b940/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7ec9d91acb245ce5b46a002201f7a2ead8b940/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5a7ec9d91acb245ce5b46a002201f7a2ead8b940", "patch": "@@ -4864,17 +4864,20 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n \t  if (TREE_PURPOSE (tail) != 0)\n \t    {\n \t      int win = 0;\n+\t      tree index = TREE_PURPOSE (tail);\n \n-\t      if (TREE_CODE (TREE_PURPOSE (tail)) == IDENTIFIER_NODE)\n+\t      if (index && TREE_CODE (index) == NON_LVALUE_EXPR)\n+\t\tindex = TREE_OPERAND (index, 0);\n+\n+\t      if (TREE_CODE (index) == IDENTIFIER_NODE)\n \t\terror (\"field name used as index in array initializer\");\n-\t      else if (TREE_CODE (TREE_PURPOSE (tail)) != INTEGER_CST)\n+\t      else if (TREE_CODE (index) != INTEGER_CST)\n \t\terror (\"non-constant array index in initializer\");\n-\t      else if (tree_int_cst_lt (TREE_PURPOSE (tail), min_index)\n-\t\t       || (max_index && tree_int_cst_lt (max_index,\n-\t\t\t\t\t\t\t TREE_PURPOSE (tail))))\n+\t      else if (tree_int_cst_lt (index, min_index)\n+\t\t       || (max_index && tree_int_cst_lt (max_index, index)))\n \t\terror (\"array index out of range in initializer\");\n \t      else\n-\t\tcurrent_index = TREE_PURPOSE (tail), win = 1;\n+\t\tcurrent_index = index, win = 1;\n \n \t      if (!win)\n \t\tTREE_VALUE (tail) = error_mark_node;"}]}