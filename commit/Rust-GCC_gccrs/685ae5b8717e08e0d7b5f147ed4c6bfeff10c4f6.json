{"sha": "685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1YWU1Yjg3MTdlMDhlMGQ3YjVmMTQ3ZWQ0YzZiZmVmZjEwYzRmNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-26T13:41:26Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-26T13:41:26Z"}, "message": "libphobos: Merge phobos and druntime with upstream.\n\nCommits merged from druntime.\n\n    Fix struct tls_index definition on x32\n    https://github.com/dlang/druntime/pull/2354\n\n    Update SectionGroup signatures to match on all targets\n    https://github.com/dlang/druntime/pull/2401\n\n    Fix issue 19128 - argument to alloca may be too large\n    https://github.com/dlang/druntime/pull/2409\n\n    Define some common filesystem limits in core.stdc.limits\n    https://github.com/dlang/druntime/pull/2460\n\n    Use version Darwin instead of OSX in core.sys.posix.aio\n    https://github.com/dlang/druntime/pull/2470\n\nCommits merged from phobos.\n\n    Don't run HardFloat tests on SoftFloat systems\n    https://github.com/dlang/phobos/pull/5358\n\n    Remove reliance on stdin, stdout, stderr being aliasable\n    https://github.com/dlang/phobos/pull/5718\n\n    Solaris: add import clock_gettime to currStdTime\n    https://github.com/dlang/phobos/pull/5807\n\n    Don't print debug messages when building unittests\n    https://github.com/dlang/phobos/pull/6827\n\n    Add HPPA support to phobos\n    Fixes https://gcc.gnu.org/PR89054\n    https://github.com/dlang/phobos/pull/6836\n\nFrom-SVN: r268293", "tree": {"sha": "b896cf6f236550f22bc5157e858c6714b7411e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b896cf6f236550f22bc5157e858c6714b7411e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/comments", "author": null, "committer": null, "parents": [{"sha": "8f915edbe104731838ef8c6821829a93faf5d063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f915edbe104731838ef8c6821829a93faf5d063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f915edbe104731838ef8c6821829a93faf5d063"}], "stats": {"total": 441, "additions": 315, "deletions": 126}, "files": [{"sha": "b98e0ed6c16d034635af2052c65df513d78f6ac7", "filename": "libphobos/libdruntime/MERGE", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -0,0 +1,4 @@\n+f2db21937e650553066c30f1a9d5a7d08a1b3573\n+\n+The first line of this file holds the git revision number of the last\n+merge done from the dlang/druntime repository."}, {"sha": "3ab7ed1e4f7bbd8af29e6df6abcdf3ddff2569b4", "filename": "libphobos/libdruntime/core/stdc/limits.d", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -14,13 +14,26 @@\n \n module core.stdc.limits;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n private import core.stdc.config;\n \n extern (C):\n @trusted: // Constants only.\n nothrow:\n @nogc:\n \n+//\n+// Numerical limits\n+//\n+\n ///\n enum CHAR_BIT       = 8;\n ///\n@@ -59,3 +72,113 @@ enum LLONG_MIN      = long.min;\n enum LLONG_MAX      = long.max;\n ///\n enum ULLONG_MAX     = ulong.max;\n+\n+//\n+// File system limits\n+//\n+\n+version (Darwin)\n+{\n+    ///\n+    enum MAX_CANON      = 1024;\n+    ///\n+    enum MAX_INPUT      = 1024;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 512;\n+}\n+\n+version (DragonFlyBSD)\n+{\n+    ///\n+    enum MAX_CANON      = 255;\n+    ///\n+    enum MAX_INPUT      = 255;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 512;\n+}\n+else version (FreeBSD)\n+{\n+    ///\n+    enum MAX_CANON      = 255;\n+    ///\n+    enum MAX_INPUT      = 255;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 512;\n+}\n+else version (linux)\n+{\n+    ///\n+    enum MAX_CANON      = 255;\n+    ///\n+    enum MAX_INPUT      = 255;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 4096;\n+    ///\n+    enum PIPE_BUF       = 4096;\n+}\n+else version (NetBSD)\n+{\n+    ///\n+    enum MAX_CANON      = 255;\n+    ///\n+    enum MAX_INPUT      = 255;\n+    ///\n+    enum NAME_MAX       = 511;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 512;\n+}\n+else version (OpenBSD)\n+{\n+    ///\n+    enum MAX_CANON      = 255;\n+    ///\n+    enum MAX_INPUT      = 255;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 512;\n+}\n+else version (Solaris)\n+{\n+    ///\n+    enum MAX_CANON      = 256;\n+    ///\n+    enum MAX_INPUT      = 512;\n+    ///\n+    enum NAME_MAX       = 255;\n+    ///\n+    enum PATH_MAX       = 1024;\n+    ///\n+    enum PIPE_BUF       = 5120;\n+}\n+else version (Windows)\n+{\n+    ///\n+    enum MAX_CANON      = 256;\n+    ///\n+    enum MAX_INPUT      = 256;\n+    ///\n+    enum NAME_MAX       = 256;\n+    ///\n+    enum PATH_MAX       = 260;\n+    ///\n+    enum PIPE_BUF       = 5120;\n+}"}, {"sha": "be36a03e229bf2415ad9627d1b274c01a4a5d486", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -11,6 +11,15 @@ module core.sys.posix.aio;\n private import core.sys.posix.signal;\n private import core.sys.posix.sys.types;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n version (Posix):\n \n extern (C):\n@@ -63,7 +72,7 @@ version (CRuntime_Glibc)\n         }\n     }\n }\n-else version (OSX)\n+else version (Darwin)\n {\n     struct aiocb\n     {\n@@ -171,7 +180,7 @@ version (CRuntime_Glibc)\n         AIO_ALLDONE\n     }\n }\n-else version (OSX)\n+else version (Darwin)\n {\n     enum\n     {\n@@ -209,7 +218,7 @@ version (CRuntime_Glibc)\n         LIO_NOP\n     }\n }\n-else version (OSX)\n+else version (Darwin)\n {\n     enum\n     {\n@@ -246,7 +255,7 @@ version (CRuntime_Glibc)\n         LIO_NOWAIT\n     }\n }\n-else version (OSX)\n+else version (Darwin)\n {\n     enum\n     {"}, {"sha": "389ff92ef786709280df84e98ba0ad21b01693f9", "filename": "libphobos/libdruntime/rt/arrayassign.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Farrayassign.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Farrayassign.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Farrayassign.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -30,7 +30,12 @@ extern (C) void[] _d_arrayassign(TypeInfo ti, void[] from, void[] to)\n \n     // Need a temporary buffer tmp[] big enough to hold one element\n     void[16] buf = void;\n-    void* ptmp = (elementSize > buf.sizeof) ? alloca(elementSize) : buf.ptr;\n+    void* ptmp = (elementSize > buf.sizeof) ? malloc(elementSize) : buf.ptr;\n+    scope (exit)\n+    {\n+        if (ptmp != buf.ptr)\n+            free(ptmp);\n+    }\n     return _d_arrayassign_l(ti, from, to, ptmp);\n }\n \n@@ -206,24 +211,20 @@ extern (C) void* _d_arraysetassign(void* p, void* value, int count, TypeInfo ti)\n \n     auto element_size = ti.tsize;\n \n-    //Need a temporary buffer tmp[] big enough to hold one element\n-    void[16] buf = void;\n-    void[] tmp;\n-    if (element_size > buf.sizeof)\n-    {\n-        tmp = alloca(element_size)[0 .. element_size];\n-    }\n-    else\n-        tmp = buf[];\n+    // Need a temporary buffer tmp[] big enough to hold one element\n+    immutable maxAllocaSize = 512;\n+    void *ptmp = (element_size > maxAllocaSize) ? malloc(element_size) : alloca(element_size);\n \n     foreach (i; 0 .. count)\n     {\n-        memcpy(tmp.ptr, p, element_size);\n+        memcpy(ptmp, p, element_size);\n         memcpy(p, value, element_size);\n         ti.postblit(p);\n-        ti.destroy(tmp.ptr);\n+        ti.destroy(ptmp);\n         p += element_size;\n     }\n+    if (element_size > maxAllocaSize)\n+        free(ptmp);\n     return pstart;\n }\n "}, {"sha": "d9376892769bb1a9ddc40f0a6410981dbf4d60c7", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -31,8 +31,7 @@ version (Windows)\n     private import core.stdc.wchar_;\n     private import core.sys.windows.windows;\n \n-    version (GNU) {}\n-    else pragma(lib, \"shell32.lib\"); // needed for CommandLineToArgvW\n+    pragma(lib, \"shell32.lib\"); // needed for CommandLineToArgvW\n }\n \n version (FreeBSD)"}, {"sha": "3f43bbd76630f259326dc44a3263fcd650ceb239", "filename": "libphobos/libdruntime/rt/sections_elf_shared.d", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -18,6 +18,7 @@ static if (SharedELF):\n \n // debug = PRINTF;\n import core.memory;\n+import core.stdc.config;\n import core.stdc.stdio;\n import core.stdc.stdlib : calloc, exit, free, malloc, EXIT_FAILURE;\n import core.stdc.string : strlen;\n@@ -955,8 +956,27 @@ version (Shared) void* handleForAddr(void* addr) nothrow @nogc\n  */\n struct tls_index\n {\n-    size_t ti_module;\n-    size_t ti_offset;\n+    version (CRuntime_Glibc)\n+    {\n+        // For x86_64, fields are of type uint64_t, this is important for x32\n+        // where tls_index would otherwise have the wrong size.\n+        // See https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/x86_64/dl-tls.h\n+        version (X86_64)\n+        {\n+            ulong ti_module;\n+            ulong ti_offset;\n+        }\n+        else\n+        {\n+            c_ulong ti_module;\n+            c_ulong ti_offset;\n+        }\n+    }\n+    else\n+    {\n+        size_t ti_module;\n+        size_t ti_offset;\n+    }\n }\n \n extern(C) void* __tls_get_addr(tls_index* ti) nothrow @nogc;"}, {"sha": "75a43943f45658c7315aaf035c3b100763fb1d3f", "filename": "libphobos/libdruntime/rt/sections_solaris.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_solaris.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_solaris.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fsections_solaris.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -29,24 +29,24 @@ struct SectionGroup\n         return dg(_sections);\n     }\n \n-    @property immutable(ModuleInfo*)[] modules() const\n+    @property immutable(ModuleInfo*)[] modules() const nothrow @nogc\n     {\n         return _moduleGroup.modules;\n     }\n \n-    @property ref inout(ModuleGroup) moduleGroup() inout\n+    @property ref inout(ModuleGroup) moduleGroup() inout nothrow @nogc\n     {\n         return _moduleGroup;\n     }\n \n-    @property immutable(FuncTable)[] ehTables() const\n+    @property immutable(FuncTable)[] ehTables() const nothrow @nogc\n     {\n         auto pbeg = cast(immutable(FuncTable)*)&__start_deh;\n         auto pend = cast(immutable(FuncTable)*)&__stop_deh;\n         return pbeg[0 .. pend - pbeg];\n     }\n \n-    @property inout(void[])[] gcRanges() inout\n+    @property inout(void[])[] gcRanges() inout nothrow @nogc\n     {\n         return _gcRanges[];\n     }"}, {"sha": "14d91ba9c2dabca63c6975dd2d9f3280dce20d24", "filename": "libphobos/libdruntime/rt/sections_win32.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_win32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_win32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fsections_win32.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -31,17 +31,17 @@ struct SectionGroup\n         return dg(_sections);\n     }\n \n-    @property immutable(ModuleInfo*)[] modules() const\n+    @property immutable(ModuleInfo*)[] modules() const nothrow @nogc\n     {\n         return _moduleGroup.modules;\n     }\n \n-    @property ref inout(ModuleGroup) moduleGroup() inout\n+    @property ref inout(ModuleGroup) moduleGroup() inout nothrow @nogc\n     {\n         return _moduleGroup;\n     }\n \n-    @property inout(void[])[] gcRanges() inout\n+    @property inout(void[])[] gcRanges() inout nothrow @nogc\n     {\n         return _gcRanges[];\n     }"}, {"sha": "346be3b79a824afab9073d4a6253d2d52f07f3eb", "filename": "libphobos/libdruntime/rt/sections_win64.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_win64.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Flibdruntime%2Frt%2Fsections_win64.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fsections_win64.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -42,7 +42,7 @@ struct SectionGroup\n     }\n \n     version (Win64)\n-    @property immutable(FuncTable)[] ehTables() const\n+    @property immutable(FuncTable)[] ehTables() const nothrow @nogc\n     {\n         auto pbeg = cast(immutable(FuncTable)*)&_deh_beg;\n         auto pend = cast(immutable(FuncTable)*)&_deh_end;"}, {"sha": "eee413903c013a9175b1ccf2ce8837cce2a0ef9f", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -1,4 +1,4 @@\n-b022e552aaca84810e3dda3a18179440943c7096\n+d4933a90b1e8446c04d64cd044658f2b33250bd3\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "e65d296e427ee4c4746f4e68abcc945e2fb7c98b", "filename": "libphobos/src/std/datetime/systime.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -220,7 +220,7 @@ public:\n                     return unixTimeToStdTime(core.stdc.time.time(null));\n                 else\n                 {\n-                    import core.sys.solaris.time : CLOCK_REALTIME;\n+                    import core.sys.solaris.time : clock_gettime, CLOCK_REALTIME;\n                     static if (clockType == ClockType.coarse)       alias clockArg = CLOCK_REALTIME;\n                     else static if (clockType == ClockType.normal)  alias clockArg = CLOCK_REALTIME;\n                     else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME;"}, {"sha": "2d1dec39a74c055aa78b3cedcfc9d4e279394249", "filename": "libphobos/src/std/experimental/allocator/mallocator.d", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmallocator.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmallocator.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmallocator.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -105,10 +105,6 @@ struct Mallocator\n     test!Mallocator();\n }\n \n-version (Posix)\n-@nogc nothrow\n-private extern(C) int posix_memalign(void**, size_t, size_t);\n-\n version (Windows)\n {\n     // DMD Win 32 bit, DigitalMars C standard library misses the _aligned_xxx\n@@ -231,6 +227,7 @@ struct AlignedMallocator\n     void[] alignedAllocate(size_t bytes, uint a) shared\n     {\n         import core.stdc.errno : ENOMEM, EINVAL;\n+        import core.sys.posix.stdlib : posix_memalign;\n         assert(a.isGoodDynamicAlignment);\n         void* result;\n         auto code = posix_memalign(&result, a, bytes);"}, {"sha": "6906f05a4a86defaf7323bc3c2aa24e2efaf8f0e", "filename": "libphobos/src/std/experimental/typecons.d", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fexperimental%2Ftypecons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fexperimental%2Ftypecons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Ftypecons.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -113,8 +113,12 @@ if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))\n             else\n             {\n                 enum foundFunc = findCovariantFunction!(TargetMembers[i], Source, SourceMembers);\n-                static if (foundFunc == -1)\n-                    pragma(msg, \"Could not locate matching function for: \" ~ TargetMembers[i].stringof);\n+                debug\n+                {\n+                    static if (foundFunc == -1)\n+                        pragma(msg, \"Could not locate matching function for: \",\n+                               TargetMembers[i].stringof);\n+                }\n                 enum hasRequiredMethods =\n                     foundFunc != -1 &&\n                     hasRequiredMethods!(i + 1);"}, {"sha": "17b7ca82654acda618ac984fa263afc9b62467be", "filename": "libphobos/src/std/file.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffile.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -4293,11 +4293,6 @@ string tempDir() @trusted\n             DWORD len = GetTempPathW(buf.length, buf.ptr);\n             if (len) cache = buf[0 .. len].to!string;\n         }\n-        else version (Android)\n-        {\n-            // Don't check for a global temporary directory as\n-            // Android doesn't have one.\n-        }\n         else version (Posix)\n         {\n             import std.process : environment;"}, {"sha": "e98e746a856660857424c7fcce670d2746325530", "filename": "libphobos/src/std/math.d", "status": "modified", "additions": 102, "deletions": 77, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -160,6 +160,8 @@ version (MIPS32)    version = MIPS_Any;\n version (MIPS64)    version = MIPS_Any;\n version (AArch64)   version = ARM_Any;\n version (ARM)       version = ARM_Any;\n+version (SPARC)     version = SPARC_Any;\n+version (SPARC64)   version = SPARC_Any;\n \n version (D_InlineAsm_X86)\n {\n@@ -380,15 +382,22 @@ template floatTraits(T)\n         enum ushort EXPMASK = 0x7FF0;\n         enum ushort EXPSHIFT = 4;\n         enum realFormat = RealFormat.ibmExtended;\n-        // the exponent byte is not unique\n+\n+        // For IBM doubledouble the larger magnitude double comes first.\n+        // It's really a double[2] and arrays don't index differently\n+        // between little and big-endian targets.\n+        enum DOUBLEPAIR_MSB = 0;\n+        enum DOUBLEPAIR_LSB = 1;\n+\n+        // The exponent/sign byte is for most significant part.\n         version (LittleEndian)\n         {\n-            enum EXPPOS_SHORT = 7; // [3] is also an exp short\n-            enum SIGNPOS_BYTE = 15;\n+            enum EXPPOS_SHORT = 3;\n+            enum SIGNPOS_BYTE = 7;\n         }\n         else\n         {\n-            enum EXPPOS_SHORT = 0; // [4] is also an exp short\n+            enum EXPPOS_SHORT = 0;\n             enum SIGNPOS_BYTE = 0;\n         }\n     }\n@@ -420,19 +429,20 @@ T floorImpl(T)(const T x) @trusted pure nothrow @nogc\n     {\n         T rv;\n         ushort[T.sizeof/2] vu;\n+\n+        // Other kinds of extractors for real formats.\n+        static if (F.realFormat == RealFormat.ieeeSingle)\n+            int vi;\n     }\n     floatBits y = void;\n     y.rv = x;\n \n     // Find the exponent (power of 2)\n+    // Do this by shifting the raw value so that the exponent lies in the low bits,\n+    // then mask out the sign bit, and subtract the bias.\n     static if (F.realFormat == RealFormat.ieeeSingle)\n     {\n-        int exp = ((y.vu[F.EXPPOS_SHORT] >> 7) & 0xff) - 0x7f;\n-\n-        version (LittleEndian)\n-            int pos = 0;\n-        else\n-            int pos = 3;\n+        int exp = ((y.vi >> (T.mant_dig - 1)) & 0xff) - 0x7f;\n     }\n     else static if (F.realFormat == RealFormat.ieeeDouble)\n     {\n@@ -472,24 +482,43 @@ T floorImpl(T)(const T x) @trusted pure nothrow @nogc\n             return 0.0;\n     }\n \n-    exp = (T.mant_dig - 1) - exp;\n-\n-    // Zero 16 bits at a time.\n-    while (exp >= 16)\n+    static if (F.realFormat == RealFormat.ieeeSingle)\n     {\n-        version (LittleEndian)\n-            y.vu[pos++] = 0;\n-        else\n-            y.vu[pos--] = 0;\n-        exp -= 16;\n+        if (exp < (T.mant_dig - 1))\n+        {\n+            // Clear all bits representing the fraction part.\n+            const uint fraction_mask = F.MANTISSAMASK_INT >> exp;\n+\n+            if ((y.vi & fraction_mask) != 0)\n+            {\n+                // If 'x' is negative, then first substract 1.0 from the value.\n+                if (y.vi < 0)\n+                    y.vi += 0x00800000 >> exp;\n+                y.vi &= ~fraction_mask;\n+            }\n+        }\n     }\n+    else\n+    {\n+        exp = (T.mant_dig - 1) - exp;\n+\n+        // Zero 16 bits at a time.\n+        while (exp >= 16)\n+        {\n+            version (LittleEndian)\n+                y.vu[pos++] = 0;\n+            else\n+                y.vu[pos--] = 0;\n+            exp -= 16;\n+        }\n \n-    // Clear the remaining bits.\n-    if (exp > 0)\n-        y.vu[pos] &= 0xffff ^ ((1 << exp) - 1);\n+        // Clear the remaining bits.\n+        if (exp > 0)\n+            y.vu[pos] &= 0xffff ^ ((1 << exp) - 1);\n \n-    if ((x < 0.0) && (x != y.rv))\n-        y.rv -= 1.0;\n+        if ((x < 0.0) && (x != y.rv))\n+            y.rv -= 1.0;\n+    }\n \n     return y.rv;\n }\n@@ -4870,10 +4899,7 @@ public:\n ///\n version (GNU)\n {\n-    unittest\n-    {\n-        pragma(msg, \"ieeeFlags test disabled, see LDC Issue #888\");\n-    }\n+    // ieeeFlags test disabled, see LDC Issue #888.\n }\n else\n @system unittest\n@@ -4904,10 +4930,7 @@ else\n \n version (GNU)\n {\n-    unittest\n-    {\n-        pragma(msg, \"ieeeFlags test disabled, see LDC Issue #888\");\n-    }\n+    // ieeeFlags test disabled, see LDC Issue #888.\n }\n else\n @system unittest\n@@ -4956,10 +4979,6 @@ else\n     }\n }\n \n-version (X86_Any)\n-{\n-    version = IeeeFlagsSupport;\n-}\n version (X86_Any)\n {\n     version = IeeeFlagsSupport;\n@@ -5132,37 +5151,52 @@ struct FloatingPointControl\n                                  | inexactException | subnormalException,\n         }\n     }\n-    else version (MIPS_Any)\n+    else version (PPC_Any)\n     {\n         enum : ExceptionMask\n         {\n-            inexactException      = 0x0080,\n-            underflowException    = 0x0100,\n-            overflowException     = 0x0200,\n-            divByZeroException    = 0x0400,\n-            invalidException      = 0x0800,\n+            inexactException      = 0x0008,\n+            divByZeroException    = 0x0010,\n+            underflowException    = 0x0020,\n+            overflowException     = 0x0040,\n+            invalidException      = 0x0080,\n             severeExceptions   = overflowException | divByZeroException\n                                  | invalidException,\n             allExceptions      = severeExceptions | underflowException\n                                  | inexactException,\n         }\n     }\n-    else version (PPC_Any)\n+    else version (HPPA)\n     {\n         enum : ExceptionMask\n         {\n-            inexactException      = 0x08,\n-            divByZeroException    = 0x10,\n-            underflowException    = 0x20,\n-            overflowException     = 0x40,\n-            invalidException      = 0x80,\n+            inexactException      = 0x01,\n+            underflowException    = 0x02,\n+            overflowException     = 0x04,\n+            divByZeroException    = 0x08,\n+            invalidException      = 0x10,\n             severeExceptions   = overflowException | divByZeroException\n                                  | invalidException,\n             allExceptions      = severeExceptions | underflowException\n                                  | inexactException,\n         }\n     }\n-    else version (SPARC64)\n+    else version (MIPS_Any)\n+    {\n+        enum : ExceptionMask\n+        {\n+            inexactException      = 0x0080,\n+            divByZeroException    = 0x0400,\n+            overflowException     = 0x0200,\n+            underflowException    = 0x0100,\n+            invalidException      = 0x0800,\n+            severeExceptions   = overflowException | divByZeroException\n+                                 | invalidException,\n+            allExceptions      = severeExceptions | underflowException\n+                                 | inexactException,\n+        }\n+    }\n+    else version (SPARC_Any)\n     {\n         enum : ExceptionMask\n         {\n@@ -5284,6 +5318,10 @@ private:\n     {\n         alias ControlState = uint;\n     }\n+    else version (HPPA)\n+    {\n+        alias ControlState = uint;\n+    }\n     else version (PPC_Any)\n     {\n         alias ControlState = uint;\n@@ -5292,7 +5330,7 @@ private:\n     {\n         alias ControlState = uint;\n     }\n-    else version (SPARC64)\n+    else version (SPARC_Any)\n     {\n         alias ControlState = ulong;\n     }\n@@ -5480,13 +5518,8 @@ private:\n     }\n }\n \n-@system unittest\n+version (D_HardFloat) @system unittest\n {\n-    // GCC floating point emulation doesn't allow changing\n-    // rounding modes, getting error bits etc\n-    version (GNU) version (D_SoftFloat)\n-        return;\n-\n     void ensureDefaults()\n     {\n         assert(FloatingPointControl.rounding\n@@ -5500,15 +5533,12 @@ private:\n     }\n     ensureDefaults();\n \n-    version (D_HardFloat)\n     {\n-        {\n-            FloatingPointControl ctrl;\n-            ctrl.rounding = FloatingPointControl.roundDown;\n-            assert(FloatingPointControl.rounding == FloatingPointControl.roundDown);\n-        }\n-        ensureDefaults();\n+        FloatingPointControl ctrl;\n+        ctrl.rounding = FloatingPointControl.roundDown;\n+        assert(FloatingPointControl.rounding == FloatingPointControl.roundDown);\n     }\n+    ensureDefaults();\n \n     if (FloatingPointControl.hasExceptionTraps)\n     {\n@@ -5525,7 +5555,7 @@ private:\n     ensureDefaults();\n }\n \n-@system unittest // rounding\n+version (D_HardFloat) @system unittest // rounding\n {\n     import std.meta : AliasSeq;\n \n@@ -6662,19 +6692,14 @@ if (isFloatingPoint!(F) && isIntegral!(G))\n \n     assert(pow(x, neg1) == 1 / x);\n \n-    version (X86_64)\n-    {\n-        pragma(msg, \"test disabled on x86_64, see bug 5628\");\n-    }\n-    else version (ARM)\n-    {\n-        pragma(msg, \"test disabled on ARM, see bug 5628\");\n-    }\n-    else version (GNU)\n-    {\n-        pragma(msg, \"test disabled on GNU, see bug 5628\");\n-    }\n-    else\n+    // Test disabled on most targets.\n+    // See https://issues.dlang.org/show_bug.cgi?id=5628\n+    version (X86_64)   enum BUG5628 = false;\n+    else version (ARM) enum BUG5628 = false;\n+    else version (GNU) enum BUG5628 = false;\n+    else               enum BUG5628 = true;\n+\n+    static if (BUG5628)\n     {\n         assert(pow(xd, neg2) == 1 / (x * x));\n         assert(pow(xf, neg8) == 1 / ((x * x) * (x * x) * (x * x) * (x * x)));"}, {"sha": "9d751411705e68f70be3d78fdd9dc91906fef7db", "filename": "libphobos/src/std/net/curl.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -659,7 +659,7 @@ if (is(T == char) || is(T == ubyte))\n             s.send(httpOK(req.bdy));\n         });\n         auto res = post(host ~ \"/path\", [\"name1\" : \"value1\", \"name2\" : \"value2\"]);\n-        assert(res == \"name1=value1&name2=value2\");\n+        assert(res == \"name1=value1&name2=value2\" || res == \"name2=value2&name1=value1\");\n     }\n }\n "}, {"sha": "91646e79c1a3577a6ca5cf1e69414d10d8e5fcd6", "filename": "libphobos/src/std/stdio.d", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstdio.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -4517,8 +4517,15 @@ Initialize with a message and an error code.\n     }\n }\n \n+enum StdFileHandle: string\n+{\n+    stdin  = \"core.stdc.stdio.stdin\",\n+    stdout = \"core.stdc.stdio.stdout\",\n+    stderr = \"core.stdc.stdio.stderr\",\n+}\n+\n // Undocumented but public because the std* handles are aliasing it.\n-@property ref File makeGlobal(alias handle)()\n+@property ref File makeGlobal(StdFileHandle _iob)()\n {\n     __gshared File.Impl impl;\n     __gshared File result;\n@@ -4537,7 +4544,9 @@ Initialize with a message and an error code.\n                 break;\n             if (atomicOp!\"+=\"(spinlock, 1) == 1)\n             {\n-                impl.handle = handle;\n+                with (StdFileHandle)\n+                    assert(_iob == stdin || _iob == stdout || _iob == stderr);\n+                impl.handle = mixin(_iob);\n                 result._p = &impl;\n                 atomicOp!\"+=\"(spinlock, uint.max / 2);\n                 break;\n@@ -4554,7 +4563,7 @@ Initialize with a message and an error code.\n         it is thread un-safe to reassign `stdin` to a different `File` instance\n         than the default.\n */\n-alias stdin = makeGlobal!(core.stdc.stdio.stdin);\n+alias stdin = makeGlobal!(StdFileHandle.stdin);\n \n ///\n @safe unittest\n@@ -4582,7 +4591,7 @@ alias stdin = makeGlobal!(core.stdc.stdio.stdin);\n         it is thread un-safe to reassign `stdout` to a different `File` instance\n         than the default.\n */\n-alias stdout = makeGlobal!(core.stdc.stdio.stdout);\n+alias stdout = makeGlobal!(StdFileHandle.stdout);\n \n /**\n     The standard error stream.\n@@ -4591,7 +4600,7 @@ alias stdout = makeGlobal!(core.stdc.stdio.stdout);\n         it is thread un-safe to reassign `stderr` to a different `File` instance\n         than the default.\n */\n-alias stderr = makeGlobal!(core.stdc.stdio.stderr);\n+alias stderr = makeGlobal!(StdFileHandle.stderr);\n \n @system unittest\n {"}, {"sha": "e0b3dee8daef69f702c34e951cb852f79abeef62", "filename": "libphobos/src/std/system.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fsystem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Fsystem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsystem.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -28,10 +28,11 @@ immutable\n     {\n         win32 = 1, /// Microsoft 32 bit Windows systems\n         win64,     /// Microsoft 64 bit Windows systems\n-        linux,     /// All Linux Systems\n+        linux,     /// All Linux Systems, except for Android\n         osx,       /// Mac OS X\n         freeBSD,   /// FreeBSD\n         netBSD,    /// NetBSD\n+        dragonFlyBSD, /// DragonFlyBSD\n         solaris,   /// Solaris\n         android,   /// Android\n         otherPosix /// Other Posix Systems\n@@ -45,6 +46,7 @@ immutable\n     else version (OSX)     OS os = OS.osx;\n     else version (FreeBSD) OS os = OS.freeBSD;\n     else version (NetBSD)  OS os = OS.netBSD;\n+    else version (DragonFlyBSD) OS os = OS.dragonFlyBSD;\n     else version (Posix)   OS os = OS.otherPosix;\n     else static assert(0, \"Unknown OS.\");\n "}, {"sha": "fcc902c8236ea24510e713f6ea3188ef3b034dcb", "filename": "libphobos/src/std/uri.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Furi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6/libphobos%2Fsrc%2Fstd%2Furi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Furi.d?ref=685ae5b8717e08e0d7b5f147ed4c6bfeff10c4f6", "patch": "@@ -403,7 +403,8 @@ package string urlEncode(in string[string] values)\n     string[string] a;\n     assert(urlEncode(a) == \"\");\n     assert(urlEncode([\"name1\" : \"value1\"]) == \"name1=value1\");\n-    assert(urlEncode([\"name1\" : \"value1\", \"name2\" : \"value2\"]) == \"name1=value1&name2=value2\");\n+    auto enc = urlEncode([\"name1\" : \"value1\", \"name2\" : \"value2\"]);\n+    assert(enc == \"name1=value1&name2=value2\" || enc == \"name2=value2&name1=value1\");\n }\n \n /***************************"}]}