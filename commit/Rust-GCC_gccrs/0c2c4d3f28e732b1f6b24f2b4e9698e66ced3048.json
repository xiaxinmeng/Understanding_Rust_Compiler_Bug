{"sha": "0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyYzRkM2YyOGU3MzJiMWY2YjI0ZjJiNGU5Njk4ZTY2Y2VkMzA0OA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-10T23:44:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-10T23:44:33Z"}, "message": "Merge #619\n\n619: Rename CanonicalPath::is_error to is_empty r=philberty a=dkm\n\n`is_error` connotes that an error has been found or that the object is faulty.\r\nIt is possible to `create_empty` paths and pass them around. Having to use\r\n`is_error` to test for valid emptiness can be misleading.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "f93778aa2162e759079be2a398fae8cfac91b367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93778aa2162e759079be2a398fae8cfac91b367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhEw9hCRBK7hj4Ov3rIwAABG4IABkBPenVVn+n0VW7trF/uKOj\n7wywSknh0kQRGxQbosD3C8G47+yWPu5TR52KYRAujcHFqgapKUaaOauEYL0BJmA/\n4gQdortj1obya45yWiB7nnqrOWYCYed8NaJP5vILDabHpjhJMKsDX8mURx10Pwsq\nVtcyvubTT6U9XlBOJWf/l3irM7BxjoHU2rwWLb6CZyeeK1o6E2rTj4aALVMFKqev\nxXvF/x6KkjL3riUraWtQCYbnItRk2QhnsezRVzKeauh3uvSe5oOC1xCPKxC8O2jr\nfSCYPFM1mEfpjQh/E+vM5I1QDINnRygRoAYav+XQ2+/61i5+QnFNe53zlGh8AYs=\n=s+ws\n-----END PGP SIGNATURE-----\n", "payload": "tree f93778aa2162e759079be2a398fae8cfac91b367\nparent e10f3d65566101c774a308f8286e2827455941ed\nparent 7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628639073 +0000\ncommitter GitHub <noreply@github.com> 1628639073 +0000\n\nMerge #619\n\n619: Rename CanonicalPath::is_error to is_empty r=philberty a=dkm\n\n`is_error` connotes that an error has been found or that the object is faulty.\r\nIt is possible to `create_empty` paths and pass them around. Having to use\r\n`is_error` to test for valid emptiness can be misleading.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10f3d65566101c774a308f8286e2827455941ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f3d65566101c774a308f8286e2827455941ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10f3d65566101c774a308f8286e2827455941ed"}, {"sha": "7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1813b56d8e4bc0f2c0cf3174ed1b07c34c0bee"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "47cf5be673f58ed26a72eaf76812c2a7b00b8130", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "patch": "@@ -111,7 +111,7 @@ class ResolveToplevelImplItem : public ResolverBase\n   ResolveToplevelImplItem (const CanonicalPath &prefix)\n     : ResolverBase (UNKNOWN_NODEID), prefix (prefix)\n   {\n-    rust_assert (!prefix.is_error ());\n+    rust_assert (!prefix.is_empty ());\n   }\n \n   const CanonicalPath &prefix;"}, {"sha": "49f1332b097e37109a68afa9f339f95d29148fa5", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "patch": "@@ -193,15 +193,15 @@ class ResolveRelativeTypePath\n       = ResolveTypeToCanonicalPath::resolve (path,\n \t\t\t\t\t     canonicalize_type_with_generics,\n \t\t\t\t\t     true);\n-    if (canonical_path.is_error ())\n+    if (canonical_path.is_empty ())\n       {\n \trust_error_at (path.get_locus (),\n \t\t       \"Failed to resolve canonical path for TypePath\");\n \treturn UNKNOWN_NODEID;\n       }\n \n     CanonicalPath lookup = canonical_path;\n-    if (!prefix.is_error ())\n+    if (!prefix.is_empty ())\n       lookup = prefix.append (canonical_path);\n \n     auto resolver = Resolver::get ();"}, {"sha": "5f01b94e504da71460fe0f977120eff9ff2b3c18", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=0c2c4d3f28e732b1f6b24f2b4e9698e66ced3048", "patch": "@@ -80,12 +80,12 @@ class CanonicalPath\n \n   static CanonicalPath create_empty () { return CanonicalPath ({}); }\n \n-  bool is_error () const { return segs.size () == 0; }\n+  bool is_empty () const { return segs.size () == 0; }\n \n   CanonicalPath append (const CanonicalPath &other) const\n   {\n-    rust_assert (!other.is_error ());\n-    if (is_error ())\n+    rust_assert (!other.is_empty ());\n+    if (is_empty ())\n       return CanonicalPath (other.segs);\n \n     std::vector<std::pair<NodeId, std::string>> copy (segs);"}]}