{"sha": "d251bfca1967ec494827ba26f009f7623eea2975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1MWJmY2ExOTY3ZWM0OTQ4MjdiYTI2ZjAwOWY3NjIzZWVhMjk3NQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2009-07-06T17:06:26Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-07-06T17:06:26Z"}, "message": "tree.c: Include debug.h.\n\n\n\t* tree.c: Include debug.h.\n\t(initialize_tree_contains_struct): New.\n\t(init_ttree): Call it.\n\t(tree_node_structure_for_code): Factor out of ...\n\t(tree_node_structure): ... here.\n\t* treestruct.def (TS_PHI_NODE): Remove.\n\t(TS_GIMPLE_STATEMENT): Remove.\n\nFrom-SVN: r149290", "tree": {"sha": "cc1c9ccf4dc8d7dbfc54939550b893a93bc9f060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc1c9ccf4dc8d7dbfc54939550b893a93bc9f060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d251bfca1967ec494827ba26f009f7623eea2975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d251bfca1967ec494827ba26f009f7623eea2975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d251bfca1967ec494827ba26f009f7623eea2975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d251bfca1967ec494827ba26f009f7623eea2975/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e923c8ea8cd61a186e7082a12864a97df0dde748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e923c8ea8cd61a186e7082a12864a97df0dde748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e923c8ea8cd61a186e7082a12864a97df0dde748"}], "stats": {"total": 406, "additions": 280, "deletions": 126}, "files": [{"sha": "4966f2fc5e570522940ac519ad60d6def38f4631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d251bfca1967ec494827ba26f009f7623eea2975", "patch": "@@ -1,3 +1,13 @@\n+2009-07-06  Diego Novillo  <dnovillo@google.com>\n+\n+\t* tree.c: Include debug.h.\n+\t(initialize_tree_contains_struct): New.\n+\t(init_ttree): Call it.\n+\t(tree_node_structure_for_code): Factor out of ...\n+\t(tree_node_structure): ... here.\n+\t* treestruct.def (TS_PHI_NODE): Remove.\n+\t(TS_GIMPLE_STATEMENT): Remove.\n+\n 2009-07-06  Diego Novillo  <dnovillo@google.com>\n \n \t* tree-pretty-print.c (dump_generic_node): Protect"}, {"sha": "2718667665ba0320ec6e699b12d66af11a35c654", "filename": "gcc/tree.c", "status": "modified", "additions": 261, "deletions": 117, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d251bfca1967ec494827ba26f009f7623eea2975", "patch": "@@ -254,7 +254,263 @@ const char * const omp_clause_code_name[] =\n   \"collapse\",\n   \"untied\"\n };\n-\f\n+\n+\n+/* Return the tree node structure used by tree code CODE.  */\n+\n+static inline enum tree_node_structure_enum\n+tree_node_structure_for_code (enum tree_code code)\n+{\n+  switch (TREE_CODE_CLASS (code))\n+    {      \n+    case tcc_declaration:\n+      {\n+\tswitch (code)\n+\t  {\n+\t  case FIELD_DECL:\n+\t    return TS_FIELD_DECL;\n+\t  case PARM_DECL:\n+\t    return TS_PARM_DECL;\n+\t  case VAR_DECL:\n+\t    return TS_VAR_DECL;\n+\t  case LABEL_DECL:\n+\t    return TS_LABEL_DECL;\n+\t  case RESULT_DECL:\n+\t    return TS_RESULT_DECL;\n+\t  case CONST_DECL:\n+\t    return TS_CONST_DECL;\n+\t  case TYPE_DECL:\n+\t    return TS_TYPE_DECL;\n+\t  case FUNCTION_DECL:\n+\t    return TS_FUNCTION_DECL;\n+\t  default:\n+\t    return TS_DECL_NON_COMMON;\n+\t  }\n+      }\n+    case tcc_type:\n+      return TS_TYPE;\n+    case tcc_reference:\n+    case tcc_comparison:\n+    case tcc_unary:\n+    case tcc_binary:\n+    case tcc_expression:\n+    case tcc_statement:\n+    case tcc_vl_exp:\n+      return TS_EXP;\n+    default:  /* tcc_constant and tcc_exceptional */\n+      break;\n+    }\n+  switch (code)\n+    {\n+      /* tcc_constant cases.  */\n+    case INTEGER_CST:\t\treturn TS_INT_CST;\n+    case REAL_CST:\t\treturn TS_REAL_CST;\n+    case FIXED_CST:\t\treturn TS_FIXED_CST;\n+    case COMPLEX_CST:\t\treturn TS_COMPLEX;\n+    case VECTOR_CST:\t\treturn TS_VECTOR;\n+    case STRING_CST:\t\treturn TS_STRING;\n+      /* tcc_exceptional cases.  */\n+    case ERROR_MARK:\t\treturn TS_COMMON;\n+    case IDENTIFIER_NODE:\treturn TS_IDENTIFIER;\n+    case TREE_LIST:\t\treturn TS_LIST;\n+    case TREE_VEC:\t\treturn TS_VEC;\n+    case SSA_NAME:\t\treturn TS_SSA_NAME;\n+    case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n+    case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n+    case BLOCK:\t\t\treturn TS_BLOCK;\n+    case CONSTRUCTOR:\t\treturn TS_CONSTRUCTOR;\n+    case TREE_BINFO:\t\treturn TS_BINFO;\n+    case OMP_CLAUSE:\t\treturn TS_OMP_CLAUSE;\n+    case OPTIMIZATION_NODE:\treturn TS_OPTIMIZATION;\n+    case TARGET_OPTION_NODE:\treturn TS_TARGET_OPTION;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+\n+/* Initialize tree_contains_struct to describe the hierarchy of tree\n+   nodes.  */\n+\n+static void\n+initialize_tree_contains_struct (void)\n+{\n+  unsigned i;\n+\n+#define MARK_TS_BASE(C)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_BASE] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_COMMON(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_BASE (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_COMMON] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_MINIMAL(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_COMMON (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_MINIMAL] = 1;\t\\\n+  } while (0)\n+  \n+#define MARK_TS_DECL_COMMON(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_MINIMAL (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_COMMON] = 1;\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_WRTL(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_COMMON (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_WRTL] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_WITH_VIS(C)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_WRTL (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_WITH_VIS] = 1;\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_NON_COMMON(C)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_WITH_VIS (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_NON_COMMON] = 1;\t\\\n+  } while (0)\n+\n+  for (i = ERROR_MARK; i < LAST_AND_UNUSED_TREE_CODE; i++)\n+    {\n+      enum tree_code code;\n+      enum tree_node_structure_enum ts_code;\n+\n+      code = (enum tree_code) i;\n+      ts_code = tree_node_structure_for_code (code);\n+\n+      /* Mark the TS structure itself.  */\n+      tree_contains_struct[code][ts_code] = 1;\n+\n+      /* Mark all the structures that TS is derived from.  */\n+      switch (ts_code)\n+\t{\n+\tcase TS_COMMON:\n+\t  MARK_TS_BASE (code);\n+\t  break;\n+\n+\tcase TS_INT_CST:\n+\tcase TS_REAL_CST:\n+\tcase TS_FIXED_CST:\n+\tcase TS_VECTOR:\n+\tcase TS_STRING:\n+\tcase TS_COMPLEX:\n+\tcase TS_IDENTIFIER:\n+\tcase TS_DECL_MINIMAL:\n+\tcase TS_TYPE:\n+\tcase TS_LIST:\n+\tcase TS_VEC:\n+\tcase TS_EXP:\n+\tcase TS_SSA_NAME:\n+\tcase TS_BLOCK:\n+\tcase TS_BINFO:\n+\tcase TS_STATEMENT_LIST:\n+\tcase TS_CONSTRUCTOR:\n+\tcase TS_OMP_CLAUSE:\n+\tcase TS_OPTIMIZATION:\n+\tcase TS_TARGET_OPTION:\n+\t  MARK_TS_COMMON (code);\n+\t  break;\n+\n+\tcase TS_DECL_COMMON:\n+\t  MARK_TS_DECL_MINIMAL (code);\n+\t  break;\n+\n+\tcase TS_DECL_WRTL:\n+\t  MARK_TS_DECL_COMMON (code);\n+\t  break;\n+\n+\tcase TS_DECL_NON_COMMON:\n+\t  MARK_TS_DECL_WITH_VIS (code);\n+\t  break;\n+\n+\tcase TS_DECL_WITH_VIS:\n+\tcase TS_PARM_DECL:\n+\tcase TS_LABEL_DECL:\n+\tcase TS_RESULT_DECL:\n+\tcase TS_CONST_DECL:\n+\t  MARK_TS_DECL_WRTL (code);\n+\t  break;\n+\n+\tcase TS_FIELD_DECL:\n+\t  MARK_TS_DECL_COMMON (code);\n+\t  break;\n+\n+\tcase TS_VAR_DECL:\n+\t  MARK_TS_DECL_WITH_VIS (code);\n+\t  break;\n+\n+\tcase TS_TYPE_DECL:\n+\tcase TS_FUNCTION_DECL:\n+\t  MARK_TS_DECL_NON_COMMON (code);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n+  /* Basic consistency checks for attributes used in fold.  */\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_NON_COMMON]);\n+  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_NON_COMMON]);\n+  gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_NON_COMMON]);\n+  gcc_assert (tree_contains_struct[CONST_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[PARM_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[RESULT_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[LABEL_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[FIELD_DECL][TS_DECL_COMMON]);\n+  gcc_assert (tree_contains_struct[CONST_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[PARM_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[RESULT_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[LABEL_DECL][TS_DECL_WRTL]);\n+  gcc_assert (tree_contains_struct[CONST_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[PARM_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[RESULT_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[LABEL_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[FIELD_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_WITH_VIS]);\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_WITH_VIS]);\n+  gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_WITH_VIS]);\n+  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_WITH_VIS]);\n+  gcc_assert (tree_contains_struct[VAR_DECL][TS_VAR_DECL]);\n+  gcc_assert (tree_contains_struct[FIELD_DECL][TS_FIELD_DECL]);\n+  gcc_assert (tree_contains_struct[PARM_DECL][TS_PARM_DECL]);\n+  gcc_assert (tree_contains_struct[LABEL_DECL][TS_LABEL_DECL]);\n+  gcc_assert (tree_contains_struct[RESULT_DECL][TS_RESULT_DECL]);\n+  gcc_assert (tree_contains_struct[CONST_DECL][TS_CONST_DECL]);\n+  gcc_assert (tree_contains_struct[TYPE_DECL][TS_TYPE_DECL]);\n+  gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_FUNCTION_DECL]);\n+  gcc_assert (tree_contains_struct[IMPORTED_DECL][TS_DECL_MINIMAL]);\n+  gcc_assert (tree_contains_struct[IMPORTED_DECL][TS_DECL_COMMON]);\n+\n+#undef MARK_TS_BASE\n+#undef MARK_TS_COMMON\n+#undef MARK_TS_DECL_MINIMAL\n+#undef MARK_TS_DECL_COMMON\n+#undef MARK_TS_DECL_WRTL\n+#undef MARK_TS_DECL_WITH_VIS\n+#undef MARK_TS_DECL_NON_COMMON\n+}\n+\n+\n /* Init tree.c.  */\n \n void\n@@ -283,55 +539,8 @@ init_ttree (void)\n   cl_optimization_node = make_node (OPTIMIZATION_NODE);\n   cl_target_option_node = make_node (TARGET_OPTION_NODE);\n \n-  tree_contains_struct[FUNCTION_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[TYPE_DECL][TS_DECL_NON_COMMON] = 1;\n-  \n-\n-  tree_contains_struct[CONST_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[VAR_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[PARM_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[RESULT_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[FUNCTION_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[TYPE_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[LABEL_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[FIELD_DECL][TS_DECL_COMMON] = 1;\n-\n-\n-  tree_contains_struct[CONST_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[VAR_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[PARM_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[RESULT_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[FUNCTION_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[LABEL_DECL][TS_DECL_WRTL] = 1; \n-\n-  tree_contains_struct[CONST_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[VAR_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[PARM_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[RESULT_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[FUNCTION_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[TYPE_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[LABEL_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[FIELD_DECL][TS_DECL_MINIMAL] = 1;\n-\n-  tree_contains_struct[VAR_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[FUNCTION_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[TYPE_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_WITH_VIS] = 1;\n-  \n-  tree_contains_struct[VAR_DECL][TS_VAR_DECL] = 1;\n-  tree_contains_struct[FIELD_DECL][TS_FIELD_DECL] = 1;\n-  tree_contains_struct[PARM_DECL][TS_PARM_DECL] = 1;\n-  tree_contains_struct[LABEL_DECL][TS_LABEL_DECL] = 1;\n-  tree_contains_struct[RESULT_DECL][TS_RESULT_DECL] = 1;\n-  tree_contains_struct[CONST_DECL][TS_CONST_DECL] = 1;\n-  tree_contains_struct[TYPE_DECL][TS_TYPE_DECL] = 1;\n-  tree_contains_struct[FUNCTION_DECL][TS_FUNCTION_DECL] = 1;\n-  tree_contains_struct[IMPORTED_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[IMPORTED_DECL][TS_DECL_COMMON] = 1;\n-\n+  /* Initialize the tree_contains_struct array.  */\n+  initialize_tree_contains_struct ();\n   lang_hooks.init_ts ();\n }\n \n@@ -2399,79 +2608,14 @@ skip_simple_arithmetic (tree expr)\n   return inner;\n }\n \n+\n /* Return which tree structure is used by T.  */\n \n enum tree_node_structure_enum\n tree_node_structure (const_tree t)\n {\n   const enum tree_code code = TREE_CODE (t);\n-\n-  switch (TREE_CODE_CLASS (code))\n-    {      \n-    case tcc_declaration:\n-      {\n-\tswitch (code)\n-\t  {\n-\t  case FIELD_DECL:\n-\t    return TS_FIELD_DECL;\n-\t  case PARM_DECL:\n-\t    return TS_PARM_DECL;\n-\t  case VAR_DECL:\n-\t    return TS_VAR_DECL;\n-\t  case LABEL_DECL:\n-\t    return TS_LABEL_DECL;\n-\t  case RESULT_DECL:\n-\t    return TS_RESULT_DECL;\n-\t  case CONST_DECL:\n-\t    return TS_CONST_DECL;\n-\t  case TYPE_DECL:\n-\t    return TS_TYPE_DECL;\n-\t  case FUNCTION_DECL:\n-\t    return TS_FUNCTION_DECL;\n-\t  default:\n-\t    return TS_DECL_NON_COMMON;\n-\t  }\n-      }\n-    case tcc_type:\n-      return TS_TYPE;\n-    case tcc_reference:\n-    case tcc_comparison:\n-    case tcc_unary:\n-    case tcc_binary:\n-    case tcc_expression:\n-    case tcc_statement:\n-    case tcc_vl_exp:\n-      return TS_EXP;\n-    default:  /* tcc_constant and tcc_exceptional */\n-      break;\n-    }\n-  switch (code)\n-    {\n-      /* tcc_constant cases.  */\n-    case INTEGER_CST:\t\treturn TS_INT_CST;\n-    case REAL_CST:\t\treturn TS_REAL_CST;\n-    case FIXED_CST:\t\treturn TS_FIXED_CST;\n-    case COMPLEX_CST:\t\treturn TS_COMPLEX;\n-    case VECTOR_CST:\t\treturn TS_VECTOR;\n-    case STRING_CST:\t\treturn TS_STRING;\n-      /* tcc_exceptional cases.  */\n-    case ERROR_MARK:\t\treturn TS_COMMON;\n-    case IDENTIFIER_NODE:\treturn TS_IDENTIFIER;\n-    case TREE_LIST:\t\treturn TS_LIST;\n-    case TREE_VEC:\t\treturn TS_VEC;\n-    case SSA_NAME:\t\treturn TS_SSA_NAME;\n-    case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n-    case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n-    case BLOCK:\t\t\treturn TS_BLOCK;\n-    case CONSTRUCTOR:\t\treturn TS_CONSTRUCTOR;\n-    case TREE_BINFO:\t\treturn TS_BINFO;\n-    case OMP_CLAUSE:\t\treturn TS_OMP_CLAUSE;\n-    case OPTIMIZATION_NODE:\treturn TS_OPTIMIZATION;\n-    case TARGET_OPTION_NODE:\treturn TS_TARGET_OPTION;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n+  return tree_node_structure_for_code (code);\n }\n \n /* Set various status flags when building a CALL_EXPR object T.  */"}, {"sha": "c56524d708cd69660f75230965fef5ec08361900", "filename": "gcc/treestruct.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2Ftreestruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d251bfca1967ec494827ba26f009f7623eea2975/gcc%2Ftreestruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreestruct.def?ref=d251bfca1967ec494827ba26f009f7623eea2975", "patch": "@@ -20,13 +20,16 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* The format of this file is \n+\n    DEFTREESTRUCT(enumeration value, printable name).\n-   Each enumeration value should correspond with a single member of union \n-   tree_node.  \n-   These enumerator values are used in order to distinguish members of union\n-   tree_node for garbage collection purposes, as well as specifying what structures\n-   contain what other structures in the tree_contains_struct array.  */\n-\t\n+\n+   Each enumeration value should correspond with a single member of\n+   union tree_node.  \n+\n+   These enumerator values are used in order to distinguish members of\n+   union tree_node for garbage collection purposes, as well as\n+   specifying what structures contain what other structures in the\n+   tree_contains_struct array.  */\n DEFTREESTRUCT(TS_BASE, \"base\")\n DEFTREESTRUCT(TS_COMMON, \"common\")\n DEFTREESTRUCT(TS_INT_CST, \"integer cst\")\n@@ -54,13 +57,10 @@ DEFTREESTRUCT(TS_LIST, \"list\")\n DEFTREESTRUCT(TS_VEC, \"vec\")\n DEFTREESTRUCT(TS_EXP, \"exp\")\n DEFTREESTRUCT(TS_SSA_NAME, \"ssa name\")\n-DEFTREESTRUCT(TS_PHI_NODE, \"phi node\")\n DEFTREESTRUCT(TS_BLOCK, \"block\")\n DEFTREESTRUCT(TS_BINFO, \"binfo\")\n DEFTREESTRUCT(TS_STATEMENT_LIST, \"statement list\")\n-DEFTREESTRUCT(TS_GIMPLE_STATEMENT, \"gimple statement\")\n DEFTREESTRUCT(TS_CONSTRUCTOR, \"constructor\")\n DEFTREESTRUCT(TS_OMP_CLAUSE, \"omp clause\")\n DEFTREESTRUCT(TS_OPTIMIZATION, \"optimization options\")\n DEFTREESTRUCT(TS_TARGET_OPTION, \"target options\")\n-"}]}