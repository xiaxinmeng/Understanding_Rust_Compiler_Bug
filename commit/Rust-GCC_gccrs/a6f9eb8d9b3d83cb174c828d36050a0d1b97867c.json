{"sha": "a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmOWViOGQ5YjNkODNjYjE3NGM4MjhkMzYwNTBhMGQxYjk3ODY3Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-09T19:45:50Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-09T19:45:50Z"}, "message": "combine: Use insn_cost instead of pattern_cost everywhere\n\n\n\t* combine.c (combine_validate_cost): Compute the new insn_cost,\n\tnot just pattern_cost.\n\t(try_combine): Adjust comment.\n\nFrom-SVN: r253561", "tree": {"sha": "9e9b0e1f217dfe5f6fd975ad32716e80b1390b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9b0e1f217dfe5f6fd975ad32716e80b1390b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d09e78e89037b5096e55b04effa714fc40e19a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09e78e89037b5096e55b04effa714fc40e19a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09e78e89037b5096e55b04effa714fc40e19a8c"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "dfb19231a981bcc9ea20c83f5967e446257b66de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "patch": "@@ -1,3 +1,9 @@\n+2017-10-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (combine_validate_cost): Compute the new insn_cost,\n+\tnot just pattern_cost.\n+\t(try_combine): Adjust comment.\n+\n 2017-10-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* cfgrtl.c (rtl_account_profile_record): Replace insn_rtx_cost with"}, {"sha": "b89ee6da345b2f0db90d12ee79905d39ac0b5046", "filename": "gcc/combine.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f9eb8d9b3d83cb174c828d36050a0d1b97867c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a6f9eb8d9b3d83cb174c828d36050a0d1b97867c", "patch": "@@ -856,7 +856,7 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n   int new_i2_cost, new_i3_cost;\n   int old_cost, new_cost;\n \n-  /* Lookup the original insn_rtx_costs.  */\n+  /* Lookup the original insn_costs.  */\n   i2_cost = INSN_COST (i2);\n   i3_cost = INSN_COST (i3);\n \n@@ -888,11 +888,23 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n     old_cost -= i1_cost;\n \n \n-  /* Calculate the replacement pattern_costs.  */\n-  new_i3_cost = pattern_cost (newpat, optimize_this_for_speed_p);\n+  /* Calculate the replacement insn_costs.  */\n+  rtx tmp = PATTERN (i3);\n+  PATTERN (i3) = newpat;\n+  int tmpi = INSN_CODE (i3);\n+  INSN_CODE (i3) = -1;\n+  new_i3_cost = insn_cost (i3, optimize_this_for_speed_p);\n+  PATTERN (i3) = tmp;\n+  INSN_CODE (i3) = tmpi;\n   if (newi2pat)\n     {\n-      new_i2_cost = pattern_cost (newi2pat, optimize_this_for_speed_p);\n+      tmp = PATTERN (i2);\n+      PATTERN (i2) = newi2pat;\n+      tmpi = INSN_CODE (i2);\n+      INSN_CODE (i2) = -1;\n+      new_i2_cost = insn_cost (i2, optimize_this_for_speed_p);\n+      PATTERN (i2) = tmp;\n+      INSN_CODE (i2) = tmpi;\n       new_cost = (new_i2_cost > 0 && new_i3_cost > 0)\n \t\t ? new_i2_cost + new_i3_cost : 0;\n     }\n@@ -907,7 +919,14 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n       int old_other_cost, new_other_cost;\n \n       old_other_cost = INSN_COST (undobuf.other_insn);\n-      new_other_cost = pattern_cost (newotherpat, optimize_this_for_speed_p);\n+      tmp = PATTERN (undobuf.other_insn);\n+      PATTERN (undobuf.other_insn) = newotherpat;\n+      tmpi = INSN_CODE (undobuf.other_insn);\n+      INSN_CODE (undobuf.other_insn) = -1;\n+      new_other_cost = insn_cost (undobuf.other_insn,\n+\t\t\t\t  optimize_this_for_speed_p);\n+      PATTERN (undobuf.other_insn) = tmp;\n+      INSN_CODE (undobuf.other_insn) = tmpi;\n       if (old_other_cost > 0 && new_other_cost > 0)\n \t{\n \t  old_cost += old_other_cost;\n@@ -4080,7 +4099,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t}\n     }\n \n-  /* Only allow this combination if insn_rtx_costs reports that the\n+  /* Only allow this combination if insn_cost reports that the\n      replacement instructions are cheaper than the originals.  */\n   if (!combine_validate_cost (i0, i1, i2, i3, newpat, newi2pat, other_pat))\n     {"}]}