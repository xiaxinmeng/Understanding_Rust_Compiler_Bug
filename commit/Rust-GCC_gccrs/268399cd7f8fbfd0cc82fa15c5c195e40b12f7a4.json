{"sha": "268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4Mzk5Y2Q3ZjhmYmZkMGNjODJmYTE1YzVjMTk1ZTQwYjEyZjdhNA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-11-16T22:40:21Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-11-16T22:40:21Z"}, "message": "vax-protos.h (reg_was_0_p): New prototype.\n\n\t* vax-protos.h (reg_was_0_p): New prototype.\n\t* vax.md (movsi, movhi, movqi): Use reg_was_0_p.\n\t* vax.c (follows_p, reg_was_0_p): New functions.\n\nFrom-SVN: r47110", "tree": {"sha": "36e29ac4be21dafdd4bc1a34786fd82349fefdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e29ac4be21dafdd4bc1a34786fd82349fefdc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/comments", "author": null, "committer": null, "parents": [{"sha": "550b2951cdd64ccce65c2580fdfcce7d8c494cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550b2951cdd64ccce65c2580fdfcce7d8c494cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550b2951cdd64ccce65c2580fdfcce7d8c494cf9"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "1bff544d13390126cb1d3a58a91243352800e5e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "patch": "@@ -1,3 +1,9 @@\n+2001-11-16  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* vax-protos.h (reg_was_0_p): New prototype.\n+\t* vax.md (movsi, movhi, movqi): Use reg_was_0_p.\n+\t* vax.c (follows_p, reg_was_0_p): New functions.\n+\n 2001-11-16  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* vax.md (casesi): Swap arguments in \"(plus:SI (pc) (mult))\". Reformat."}, {"sha": "f3a239d76c6341fc0e94d3ebf1a1caa5a3f758f9", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "patch": "@@ -25,6 +25,7 @@ extern void print_operand_address PARAMS ((FILE *, rtx));\n extern int vax_float_literal PARAMS ((rtx));\n extern int vax_address_cost PARAMS ((rtx));\n extern int vax_rtx_cost PARAMS ((rtx));\n+extern int reg_was_0_p PARAMS ((rtx, rtx));\n #endif /* RTX_CODE */\n \n #ifdef REAL_VALUE_TYPE"}, {"sha": "df14f9ef710810e391ada44ac8434c9a0f363a2f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n+static int follows_p PARAMS ((rtx, rtx));\n static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n #if VMS_TARGET\n static void vms_asm_out_constructor PARAMS ((rtx, int));\n@@ -946,3 +947,38 @@ not_qsort (array, count, size, compare)\n   return;\n }\n #endif /* QSORT_WORKAROUND */\n+\n+/* Return 1 if insn A follows B.  */\n+\n+static int\n+follows_p (a, b)\n+     rtx a, b;\n+{\n+  register rtx p;\n+\n+  for (p = a; p != b; p = NEXT_INSN (p))\n+    if (! p)\n+      return 1;\n+\n+  return 0;\n+}\n+\n+/* Returns 1 if we know operand OP was 0 before INSN.  */\n+\n+int\n+reg_was_0_p (insn, op)\n+     rtx insn, op;\n+{\n+  rtx link;\n+\n+  return ((link = find_reg_note (insn, REG_WAS_0, 0))\n+\t  /* Make sure the insn that stored the 0 is still present\n+\t     and doesn't follow INSN in the insn sequence.  */\n+\t  && ! INSN_DELETED_P (XEXP (link, 0))\n+\t  && GET_CODE (XEXP (link, 0)) != NOTE\n+\t  && ! follows_p (XEXP (link, 0), insn)\n+\t  /* Make sure cross jumping didn't happen here.  */\n+\t  && no_labels_between_p (XEXP (link, 0), insn)\n+\t  /* Make sure the reg hasn't been clobbered.  */\n+\t  && ! reg_set_between_p (op, XEXP (link, 0), insn));\n+}"}, {"sha": "4280ac67893731229867028722859b04f03e9ef4", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=268399cd7f8fbfd0cc82fa15c5c195e40b12f7a4", "patch": "@@ -184,17 +184,9 @@\n   \"\"\n   \"*\n {\n-  rtx link;\n-  if (operands[1] == const1_rtx\n-      && (link = find_reg_note (insn, REG_WAS_0, 0))\n-      /* Make sure the insn that stored the 0 is still present.  */\n-      && ! INSN_DELETED_P (XEXP (link, 0))\n-      && GET_CODE (XEXP (link, 0)) != NOTE\n-      /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn)\n-      /* Make sure the reg hasn't been clobbered.  */\n-      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n+  if (operands[1] == const1_rtx && reg_was_0_p (insn, operands[0]))\n     return \\\"incl %0\\\";\n+\n   if (GET_CODE (operands[1]) == SYMBOL_REF || GET_CODE (operands[1]) == CONST)\n     {\n       if (push_operand (operands[0], SImode))\n@@ -229,16 +221,7 @@\n   \"\"\n   \"*\n {\n-  rtx link;\n-  if (operands[1] == const1_rtx\n-      && (link = find_reg_note (insn, REG_WAS_0, 0))\n-      /* Make sure the insn that stored the 0 is still present.  */\n-      && ! INSN_DELETED_P (XEXP (link, 0))\n-      && GET_CODE (XEXP (link, 0)) != NOTE\n-      /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn)\n-      /* Make sure the reg hasn't been clobbered.  */\n-      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n+  if (operands[1] == const1_rtx && reg_was_0_p (insn, operands[0]))\n     return \\\"incw %0\\\";\n \n   if (GET_CODE (operands[1]) == CONST_INT)\n@@ -283,16 +266,7 @@\n   \"\"\n   \"*\n {\n-  rtx link;\n-  if (operands[1] == const1_rtx\n-      && (link = find_reg_note (insn, REG_WAS_0, 0))\n-      /* Make sure the insn that stored the 0 is still present.  */\n-      && ! INSN_DELETED_P (XEXP (link, 0))\n-      && GET_CODE (XEXP (link, 0)) != NOTE\n-      /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn)\n-      /* Make sure the reg hasn't been clobbered.  */\n-      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n+  if (operands[1] == const1_rtx && reg_was_0_p (insn, operands[0]))\n     return \\\"incb %0\\\";\n \n   if (GET_CODE (operands[1]) == CONST_INT)"}]}