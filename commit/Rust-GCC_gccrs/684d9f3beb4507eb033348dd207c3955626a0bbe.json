{"sha": "684d9f3beb4507eb033348dd207c3955626a0bbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0ZDlmM2JlYjQ1MDdlYjAzMzM0OGRkMjA3YzM5NTU2MjZhMGJiZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-29T23:01:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-29T23:01:45Z"}, "message": "ChangeLog.2, [...]: Fix spelling errors and typos.\n\n\t* ChangeLog.2, ChangeLog.3, ChangeLog.4, FSFChangeLog.10,\n\tFSFChangeLog.11, c-common.c, c-common.def, c-common.h, c-decl.c,\n\tc-dump.c, c-typeck.c, except.c, sdbout.c, simplify-rtx.c,\n\ttimevar.h, tree.h, varasm.c: Fix spelling errors and typos.\n\nFrom-SVN: r46621", "tree": {"sha": "a0825327a8a0624c678d9454f1795c441d7adff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0825327a8a0624c678d9454f1795c441d7adff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684d9f3beb4507eb033348dd207c3955626a0bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684d9f3beb4507eb033348dd207c3955626a0bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684d9f3beb4507eb033348dd207c3955626a0bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684d9f3beb4507eb033348dd207c3955626a0bbe/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affd4f3309d3ae078f95268e18b44293e096c9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affd4f3309d3ae078f95268e18b44293e096c9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affd4f3309d3ae078f95268e18b44293e096c9b9"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "320d411d89556d913ef5b5f494d9e0e56a79cf98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -1,5 +1,10 @@\n 2001-10-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* ChangeLog.2, ChangeLog.3, ChangeLog.4, FSFChangeLog.10,\n+\tFSFChangeLog.11, c-common.c, c-common.def, c-common.h, c-decl.c,\n+\tc-dump.c, c-typeck.c, except.c, sdbout.c, simplify-rtx.c,\n+\ttimevar.h, tree.h, varasm.c: Fix spelling errors and typos.\n+\n \t* loop.h (struct induction): Rename ext_dependant to\n \text_dependent.\n \t* loop.c: Change all uses."}, {"sha": "533a545e1f634afd5fe3b49b99add9caa27e2ebf", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -10720,7 +10720,7 @@ Fri Aug 20 22:32:17 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n Thu Aug 19 14:42:38 1999  Mike Stump <mrs@wrs.com>\n \t\t\t  Mark Mitchell <mark@codesourcery.com>\n \n-\t* c-common.c (c_get_alias_set): Fix support for poitners and\n+\t* c-common.c (c_get_alias_set): Fix support for pointers and\n \treferences.\n \n Thu Aug 19 11:51:22 EDT 1999  John Wehle  (john@feith.com)"}, {"sha": "4a92b3b3f965bbeefbf18fefa3bbd274c2567e89", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -8772,7 +8772,7 @@ Tue Mar 28 11:55:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Tue Mar 28 08:29:46 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t* sibcall.c (indentify_call_return_value): Find last call in the chain;\n+\t* sibcall.c (identify_call_return_value): Find last call in the chain;\n \tAllow stack adjustment after function call.\n \n \t* regmove.c (struct csa_memlist): Make mem field rtx *."}, {"sha": "1e5f4f44f330307f5817f1786ed9f32f2d5e0a9f", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -8208,7 +8208,7 @@ Sun Sep 17 10:46:17 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(struct language_function): Add x_scope_stmt_stack and\n \tx_function_name_declared_p.\n \t(RECHAIN_STMTS): Move definition.\n-\t(lang_statment_code_p): Likewise.\n+\t(lang_statement_code_p): Likewise.\n \t(lang_expand_stmt): Likewise.\n \t(lang_expand_decl_stmt): New variable.\n \t(lang_expand_function_end): Likewise.\n@@ -14103,7 +14103,7 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n 2000-07-14  Neil Booth  <NeilB@earthling.net>\n \n-\t* cpplex.c (adjust_column): New funcion.\n+\t* cpplex.c (adjust_column): New function.\n \t(skip_whitespace): Use it.\n \t(skip_block_comment): Use it, and warn about /*/* with\n \t-Wcomments."}, {"sha": "fa4494702ea7a5a98044e4fd1a44a26b29bc8e93", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -3880,7 +3880,7 @@ Wed Dec  6 06:58:23 1995  Richard Earnshaw (rearnsha@armltd.co.uk)\n \tusing prog_mode attribute.\n \t(function units \"write_buf\", \"write_blockage\"): Model the write buffer\n \tas two function units, so that conflicts are avoided more often.\n-\t(funcion unit \"core\"): New function unit, so that elapsed cycles can\n+\t(function unit \"core\"): New function unit, so that elapsed cycles can\n \tbe more accurately determined.\n \t(all anonymous patterns): Add names.\n \t(mulsidi3, umulsidi3): New patterns available with fast multiply"}, {"sha": "11104853279634519193c1fbb14d258b557dffc4", "filename": "gcc/FSFChangeLog.11", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FFSFChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2FFSFChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.11?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -4070,7 +4070,7 @@ Sat Aug  2 13:25:33 1997  Tristan Gingold  (gingold@email.enst.fr)\n \t* stmt.c (expand_computed_goto): If -fcheck-memory-usage, check that\n \tcomputed address of a goto is executable.\n \t(expand_asm, expand_asm_operands): If -fcheck-memory-usage,\n-\tdisallow asm statments.\n+\tdisallow asm statements.\n \t* toplev.c (flag_check_memory_usage, flag_prefix_function_name): New\n \tvariable.\n \t(f_options): Add `check-memory-usage' and `prefix_function_name'."}, {"sha": "a423d53cae3358953af3fcedf3971e7d6318122d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -157,12 +157,12 @@ cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n \ttree void_list_node;\n \n-  The lazily created VAR_DECLS for __FUNCTION__, __PRETTY_FUNCTION__,\n+  The lazily created VAR_DECLs for __FUNCTION__, __PRETTY_FUNCTION__,\n   and __func__. (C doesn't generate __FUNCTION__ and__PRETTY_FUNCTION__\n   VAR_DECLS, but C++ does.)\n \n \ttree function_name_decl_node;\n-\ttree pretty_function_name_declnode;\n+\ttree pretty_function_name_decl_node;\n \ttree c99_function_name_decl_node;\n \n   Stack of nested function name VAR_DECLs.\n@@ -924,7 +924,7 @@ warn_for_collisions (list)\n     }\n }\n \n-/* Return nonzero if X is a tree that can be verified by the sequence poitn\n+/* Return nonzero if X is a tree that can be verified by the sequence point\n    warnings.  */\n static int\n warning_candidate_p (x)\n@@ -2201,7 +2201,7 @@ c_common_get_alias_set (t)\n \n \t Technically, this approach is actually more conservative that\n \t it needs to be.  In particular, `const int *' and `int *'\n-\t chould be in different alias sets, according to the C and C++\n+\t should be in different alias sets, according to the C and C++\n \t standard, since their types are not the same, and so,\n \t technically, an `int **' and `const int **' cannot point at\n \t the same thing."}, {"sha": "6ae0466f236e2e77d95ad265e01b1dc5430b311f", "filename": "gcc/c-common.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* Tree nodes relevent to both C and C++. These were originally in\n+/* Tree nodes relevant to both C and C++. These were originally in\n cp-tree.def in the cp subdir. */\n \n /* A node to remember a source position.  */"}, {"sha": "459976d9019ea009fc9f2f55d5abeaea37ba278d", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -459,7 +459,7 @@ extern int warn_long_long;\n \n /* Return the qualifiers that apply to this type.  In C++, that means\n    descending through array types.  Note that this macro evaluates its\n-   arguments mor than once.  */\n+   arguments more than once.  */\n #define C_TYPE_QUALS(TYPE)\t\t\t\t\\\n   (TYPE_QUALS ((TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n \t\t&& c_language == clk_cplusplus)\t\t\\\n@@ -557,7 +557,7 @@ extern tree strip_array_types                   PARAMS ((tree));\n \n /* IF_STMT accessors. These give access to the condition of the if\n    statement, the then block of the if statement, and the else block\n-   of the if stsatement if it exists.  */\n+   of the if statement if it exists.  */\n #define IF_COND(NODE)           TREE_OPERAND (IF_STMT_CHECK (NODE), 0)\n #define THEN_CLAUSE(NODE)       TREE_OPERAND (IF_STMT_CHECK (NODE), 1)\n #define ELSE_CLAUSE(NODE)       TREE_OPERAND (IF_STMT_CHECK (NODE), 2)\n@@ -605,8 +605,8 @@ extern tree strip_array_types                   PARAMS ((tree));\n #define GOTO_DESTINATION(NODE)  TREE_OPERAND (GOTO_STMT_CHECK (NODE), 0)\n \n /* COMPOUND_STMT accessor. This gives access to the TREE_LIST of\n-   statements assocated with a compound statement. The result is the\n-   first statement in the list. Succeeding nodes can be acccessed by\n+   statements associated with a compound statement. The result is the\n+   first statement in the list. Succeeding nodes can be accessed by\n    calling TREE_CHAIN on a node in the list.  */\n #define COMPOUND_BODY(NODE)     TREE_OPERAND (COMPOUND_STMT_CHECK (NODE), 0)\n \n@@ -823,7 +823,7 @@ extern int c_unsafe_for_reeval\t\t\tPARAMS ((tree));\n enum tree_dump_index\n {\n   TDI_all,\t\t\t/* dump the whole translation unit */\n-  TDI_class,\t\t\t/* dump class heirarchy */\n+  TDI_class,\t\t\t/* dump class hierarchy */\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n   TDI_optimized,\t\t/* dump each function after optimizing it */\n   TDI_inlined,\t\t\t/* dump each function after inlining"}, {"sha": "58bac423d5f927282beafccfb9dbfa3f34c99458", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -4748,7 +4748,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       && TREE_OVERFLOW (TYPE_SIZE (type)))\n     {\n       error (\"size of array `%s' is too large\", name);\n-      /* If we proceed with the array type as it is, we'll eventully\n+      /* If we proceed with the array type as it is, we'll eventually\n \t crash in tree_low_cst().  */\n       type = error_mark_node;\n     }\n@@ -7109,7 +7109,7 @@ mark_c_function_context (f)\n   mark_binding_level (&p->binding_level);\n }\n \n-/* Copy the DECL_LANG_SEPECIFIC data associated with NODE.  */\n+/* Copy the DECL_LANG_SPECIFIC data associated with NODE.  */\n \n void\n copy_lang_decl (decl)"}, {"sha": "7f3dbdd3734671fed4a8bdc20d2767b77bb80f12", "filename": "gcc/c-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -545,7 +545,7 @@ dequeue_and_dump (di)\n       break;\n \n     case CASE_LABEL:\n-      /* Note that a case label is not like other statments; there is\n+      /* Note that a case label is not like other statements; there is\n \t no way to get the line-number of a case label.  */\n       dump_child (\"low\", CASE_LOW (t));\n       dump_child (\"high\", CASE_HIGH (t));"}, {"sha": "1d64ea249f8e226174fd5c664ba4f1feea86fc5b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -3820,7 +3820,7 @@ build_c_cast (type, expr)\n \t}\n     }\n \n-  /* Pedantically, don't ley (void *) (FOO *) 0 be a null pointer constant.  */\n+  /* Pedantically, don't let (void *) (FOO *) 0 be a null pointer constant.  */\n   if (pedantic && TREE_CODE (value) == INTEGER_CST\n       && TREE_CODE (expr) == INTEGER_CST\n       && TREE_CODE (TREE_TYPE (expr)) != INTEGER_TYPE)\n@@ -5762,7 +5762,7 @@ set_init_label (fieldname)\n }\n \f\n /* Add a new initializer to the tree of pending initializers.  PURPOSE\n-   indentifies the initializer, either array index or field in a structure. \n+   identifies the initializer, either array index or field in a structure. \n    VALUE is the value of that index or field.  */\n \n static void"}, {"sha": "e45e71f5a8606f47f0f6898d65c88b620c0b775e", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -2629,7 +2629,7 @@ reachable_next_level (region, type_thrown, info)\n \t\t\t\t\t region->u.allowed.type_list,\n \t\t\t\t\t info->types_allowed);\n \t    \n-      /* If we have definitive information about the type heirarchy,\n+      /* If we have definitive information about the type hierarchy,\n \t then we can tell if the thrown type will pass through the\n \t filter.  */\n       if (type_thrown && lang_eh_type_covers)"}, {"sha": "4d93a9934b36afc99e2e2d99a9974b90605ec907", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -1182,7 +1182,7 @@ sdbout_one_type (type)\n \n \t/* Print out the base class information with fields\n \t   named after the types they hold.  */\n-\t/* This is only relevent to aggregate types.  TYPE_BINFO is used\n+\t/* This is only relevant to aggregate types.  TYPE_BINFO is used\n \t   for other purposes in an ENUMERAL_TYPE, so we must exclude that\n \t   case.  */\n \tif (TREE_CODE (type) != ENUMERAL_TYPE)"}, {"sha": "9f50ed9459fbe8d3f5d5b14564fa7cfc60c76f17", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -2617,7 +2617,7 @@ simplify_subreg (outermode, op, innermode, byte)\n       res = simplify_subreg (outermode, part, GET_MODE (part), final_offset);\n       if (res)\n \treturn res;\n-      /* We can at least simplify it by referring directly to the relevent part.  */\n+      /* We can at least simplify it by referring directly to the relevant part.  */\n       return gen_rtx_SUBREG (outermode, part, final_offset);\n     }\n "}, {"sha": "f0d2fd2a54872a55b35746b2d5694c7051c1b072", "filename": "gcc/timevar.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Ftimevar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Ftimevar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.h?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -63,7 +63,7 @@ struct timevar_time_def\n   float wall;\n };\n \n-/* An enumeration of timing variable indentifiers.  Constructed from\n+/* An enumeration of timing variable identifiers.  Constructed from\n    the contents of timevar.def.  */\n \n #define DEFTIMEVAR(identifier__, name__) \\"}, {"sha": "daa2297cf78f703f257a12b5316b4ecc8488825a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -1556,7 +1556,7 @@ struct tree_type\n    be a RETURN_INIT, CTOR_INITIALIZER, or TRY_BLOCK.  */\n #define DECL_SAVED_TREE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.saved_tree)\n \n-/* List of FUNCION_DECLs inlined into this function's body.  */\n+/* List of FUNCTION_DECLs inlined into this function's body.  */\n #define DECL_INLINED_FNS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.inlined_fns)\n \n /* Nonzero in a FUNCTION_DECL means this is a built-in function"}, {"sha": "c42ad3840320aea2cadb340e464f7e042c38cd1c", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684d9f3beb4507eb033348dd207c3955626a0bbe/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=684d9f3beb4507eb033348dd207c3955626a0bbe", "patch": "@@ -5325,7 +5325,7 @@ assemble_vtable_entry (symbol, offset)\n   fputc ('\\n', asm_out_file);\n }\n \n-/* Used for vtable gc in GNU binutils.  Record the class heirarchy by noting\n+/* Used for vtable gc in GNU binutils.  Record the class hierarchy by noting\n    that the vtable symbol CHILD is derived from the vtable symbol PARENT.  */\n \n void"}]}