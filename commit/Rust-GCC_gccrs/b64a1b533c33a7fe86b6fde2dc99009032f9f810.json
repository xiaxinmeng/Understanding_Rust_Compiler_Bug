{"sha": "b64a1b533c33a7fe86b6fde2dc99009032f9f810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0YTFiNTMzYzMzYTdmZTg2YjZmZGUyZGM5OTAwOTAzMmY5ZjgxMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-18T23:47:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-18T23:47:22Z"}, "message": "system.h (SELECT_RTX_SECTION): Poison.\n\n\t* system.h (SELECT_RTX_SECTION): Poison.\n\t* target-def.h (TARGET_ASM_SELECT_RTX_SECTION): New.\n\t* target.h (select_rtx_section): New.\n\t* varasm.c (output_constant_pool): Use it.\n\t(default_select_rtx_section, default_elf_select_rtx_section): New.\n\t* output.h: Declare them.\n\n\t* config/darwin.h (SELECT_RTX_SECTION): Move ...\n\t* config/darwin.c (machopic_select_rtx_section): ... here.\n\t* config/darwin-protos.h: Update.\n\n\t* config/nextstep.h (SELECT_RTX_SECTION): Move ...\n\t* config/nextstep.c (machopic_select_rtx_section): ... here.\n\t(nextstep_select_section): Rename variable to avoid macro clash.\n\t* config/nextstep-protos.h: Update.\n\n\t* config/elfos.h, config/svr3.h, config/arm/aof.h, config/c4x/c4x.h,\n\tconfig/i386/dgux.h, config/i386/osfrose.h, config/i386/sco5.h,\n\tconfig/i386/svr3gas.h, config/i860/paragon.h, config/ia64/aix.h,\n\tconfig/m32r/m32r.h, config/m68k/dpx2.h, config/m68k/lynx.h,\n\tconfig/m68k/m68k.h, config/m68k/tower-as.h, config/m88k/dgux.h,\n\tconfig/mcore/mcore-pe.h, config/mips/mips.h, config/mmix/mmix.h,\n\tconfig/pa/pa-linux.h, config/pa/pa.h, config/romp/romp.h,\n\tconfig/rs6000/lynx.h, config/rs6000/sysv4.h, config/s390/linux.h,\n\tconfig/sparc/sysv4.h, config/xtensa/elf.h, config/xtensa/linux.h\n\t(SELECT_RTX_SECTION): Remove.\n\n\t* config/darwin.h, config/elfos.h, config/nextstep.h,\n\tconfig/ia64/aix.h, config/ia64/sysv4.h, config/alpha/alpha.c,\n\tconfig/mips/mips.c, config/romp/romp.c, config/rs6000/sysv4.h,\n\tconfig/rs6000/xcoff.h, config/s390/s390.c, config/sparc/aout.h,\n\tconfig/sparc/lynx.h, config/xtensa/xtensa.c\n\t(TARGET_ASM_SELECT_RTX_SECTION): New.\n\n\t* config/alpha/elf.h (SELECT_RTX_SECTION): Move ...\n\t* config/alpha/alpha.c (alpha_elf_select_rtx_section): ... here.\n\t* config/ia64/sysv4.h (SELECT_RTX_SECTION): Move ...\n\t* config/ia64/ia64.c (ia64_select_rtx_section): ... here.\n\t(ia64_aix_select_rtx_section): New.\n\t* config/mips/iris6.h (READONLY_DATA_SECTION_ASM_OP): Undef before\n\tredefining.\n\t* config/mips/mips.c (mips_select_rtx_section): Make static.\n\tSupport ELF SHF_MERGE features.\n\t* config/mips/mips-protos.h: Update.\n\t* config/rs6000/xcoff.h (SELECT_RTX_SECTION): Move ...\n\t* config/rs6000/rs6000.c (rs6000_xcoff_select_rtx_section): ... here.\n\t(rs6000_elf_select_rtx_section): Rename from rs6000_select_rtx_section;\n\tmake static, fall back to default_elf_select_rtx_section.\n\t* config/rs6000/rs6000-protos.h: Update.\n\t* config/sparc/sparc.h (SELECT_RTX_SECTION): Move ...\n\t* config/sparc/sparc.c (sparc_aout_select_rtx_section): ... here.\n\t* config/sparc/sunos4.h (on_exit): Declare only if IN_LIBGCC2.\n\t* config/romp/romp.c (romp_select_rtx_section): New.\n\t* config/s390/s390.c (s390_select_rtx_section): New.\n\t* config/xtensa/xtensa.c: Include output.h.  Shuffle local function\n\tdeclarations before target macro definition.\n\t(xtensa_emit_call): Use static buffer.\n\t(xtensa_select_rtx_section): New.\n\t* config/xtensa/xtensa.h (MAX_INT_TYPE_SIZE): Remove.\n\t(IMPLICIT_FIX_EXPR, EASY_DIV_EXPR): Remove.\n\t(ASM_OUTPUT_POOL_PROLOGUE): Update call to resolve_unique_section.\n\n\t* doc/tm.texi (TARGET_ASM_SELECT_RTX_SECTION): Update from\n\tSELECT_RTX_SECTION docs.\n\nFrom-SVN: r53600", "tree": {"sha": "368c086772f8bba5b6b885540729ed85f99dd14e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368c086772f8bba5b6b885540729ed85f99dd14e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64a1b533c33a7fe86b6fde2dc99009032f9f810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64a1b533c33a7fe86b6fde2dc99009032f9f810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64a1b533c33a7fe86b6fde2dc99009032f9f810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64a1b533c33a7fe86b6fde2dc99009032f9f810/comments", "author": null, "committer": null, "parents": [{"sha": "d63e8c485766fb644be59deed6a5dc9172b9d461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63e8c485766fb644be59deed6a5dc9172b9d461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63e8c485766fb644be59deed6a5dc9172b9d461"}], "stats": {"total": 901, "additions": 469, "deletions": 432}, "files": [{"sha": "13616ecc1323b5cd0699da604f1ed2a777b3f9f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1,4 +1,71 @@\n-Sun May 19 00:24:23 CEST 2002  Jan HUbicka  <jh@suse.cz>\n+2002-05-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* system.h (SELECT_RTX_SECTION): Poison.\n+\t* target-def.h (TARGET_ASM_SELECT_RTX_SECTION): New.\n+\t* target.h (select_rtx_section): New.\n+\t* varasm.c (output_constant_pool): Use it.\n+\t(default_select_rtx_section, default_elf_select_rtx_section): New.\n+\t* output.h: Declare them.\n+\n+\t* config/darwin.h (SELECT_RTX_SECTION): Move ...\n+\t* config/darwin.c (machopic_select_rtx_section): ... here.\n+\t* config/darwin-protos.h: Update.\n+\n+\t* config/nextstep.h (SELECT_RTX_SECTION): Move ...\n+\t* config/nextstep.c (machopic_select_rtx_section): ... here.\n+\t(nextstep_select_section): Rename variable to avoid macro clash.\n+\t* config/nextstep-protos.h: Update.\n+\n+\t* config/elfos.h, config/svr3.h, config/arm/aof.h, config/c4x/c4x.h,\n+\tconfig/i386/dgux.h, config/i386/osfrose.h, config/i386/sco5.h,\n+\tconfig/i386/svr3gas.h, config/i860/paragon.h, config/ia64/aix.h,\n+\tconfig/m32r/m32r.h, config/m68k/dpx2.h, config/m68k/lynx.h, \n+\tconfig/m68k/m68k.h, config/m68k/tower-as.h, config/m88k/dgux.h,\n+\tconfig/mcore/mcore-pe.h, config/mips/mips.h, config/mmix/mmix.h,\n+\tconfig/pa/pa-linux.h, config/pa/pa.h, config/romp/romp.h, \n+\tconfig/rs6000/lynx.h, config/rs6000/sysv4.h, config/s390/linux.h,\n+\tconfig/sparc/sysv4.h, config/xtensa/elf.h, config/xtensa/linux.h\n+\t(SELECT_RTX_SECTION): Remove.\n+\n+\t* config/darwin.h, config/elfos.h, config/nextstep.h,\n+\tconfig/ia64/aix.h, config/ia64/sysv4.h, config/alpha/alpha.c,\n+\tconfig/mips/mips.c, config/romp/romp.c, config/rs6000/sysv4.h,\n+\tconfig/rs6000/xcoff.h, config/s390/s390.c, config/sparc/aout.h,\n+\tconfig/sparc/lynx.h, config/xtensa/xtensa.c\n+\t(TARGET_ASM_SELECT_RTX_SECTION): New.\n+\n+\t* config/alpha/elf.h (SELECT_RTX_SECTION): Move ...\n+\t* config/alpha/alpha.c (alpha_elf_select_rtx_section): ... here.\n+\t* config/ia64/sysv4.h (SELECT_RTX_SECTION): Move ...\n+\t* config/ia64/ia64.c (ia64_select_rtx_section): ... here.\n+\t(ia64_aix_select_rtx_section): New.\n+\t* config/mips/iris6.h (READONLY_DATA_SECTION_ASM_OP): Undef before\n+\tredefining.\n+\t* config/mips/mips.c (mips_select_rtx_section): Make static.\n+\tSupport ELF SHF_MERGE features. \n+\t* config/mips/mips-protos.h: Update.\n+\t* config/rs6000/xcoff.h (SELECT_RTX_SECTION): Move ...\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_select_rtx_section): ... here.\n+\t(rs6000_elf_select_rtx_section): Rename from rs6000_select_rtx_section;\n+\tmake static, fall back to default_elf_select_rtx_section.\n+\t* config/rs6000/rs6000-protos.h: Update.\n+\t* config/sparc/sparc.h (SELECT_RTX_SECTION): Move ...\n+\t* config/sparc/sparc.c (sparc_aout_select_rtx_section): ... here.\n+\t* config/sparc/sunos4.h (on_exit): Declare only if IN_LIBGCC2.\n+\t* config/romp/romp.c (romp_select_rtx_section): New.\n+\t* config/s390/s390.c (s390_select_rtx_section): New.\n+\t* config/xtensa/xtensa.c: Include output.h.  Shuffle local function\n+\tdeclarations before target macro definition.\n+\t(xtensa_emit_call): Use static buffer.\n+\t(xtensa_select_rtx_section): New.\n+\t* config/xtensa/xtensa.h (MAX_INT_TYPE_SIZE): Remove.\n+\t(IMPLICIT_FIX_EXPR, EASY_DIV_EXPR): Remove.\n+\t(ASM_OUTPUT_POOL_PROLOGUE): Update call to resolve_unique_section.\n+\n+\t* doc/tm.texi (TARGET_ASM_SELECT_RTX_SECTION): Update from\n+\tSELECT_RTX_SECTION docs.\n+\n+Sun May 19 00:24:23 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (movsi/movdi): Fix template.\n \t(sse2 patterns): Set attributes consistently."}, {"sha": "eb2eff23711f8fc14fb975ebdc39556063fa295b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -164,6 +164,11 @@ static int alpha_use_dfa_pipeline_interface\n static int alpha_multipass_dfa_lookahead\n   PARAMS ((void));\n \n+#ifdef OBJECT_FORMAT_ELF\n+static void alpha_elf_select_rtx_section\n+  PARAMS ((enum machine_mode, rtx, unsigned HOST_WIDE_INT));\n+#endif\n+\n #if TARGET_ABI_UNICOSMK\n static void alpha_init_machine_status\n   PARAMS ((struct function *p));\n@@ -234,6 +239,11 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n #define TARGET_ASM_UNALIGNED_DI_OP \"\\t.align 0\\n\\t.quad\\t\"\n #endif\n \n+#ifdef OBJECT_FORMAT_ELF\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define\tTARGET_ASM_SELECT_RTX_SECTION  alpha_elf_select_rtx_section\n+#endif\n+\n #undef TARGET_ASM_FUNCTION_END_PROLOGUE\n #define TARGET_ASM_FUNCTION_END_PROLOGUE alpha_output_function_end_prologue\n \n@@ -4841,7 +4851,6 @@ alpha_adjust_cost (insn, link, dep_insn, cost)\n      rtx dep_insn;\n      int cost;\n {\n-  rtx set, set_src;\n   enum attr_type insn_type, dep_insn_type;\n \n   /* If the dependence is an anti-dependence, there is no cost.  For an\n@@ -8072,6 +8081,26 @@ check_float_value (mode, d, overflow)\n   return 0;\n }\n \f\n+#ifdef OBJECT_FORMAT_ELF\n+\n+/* Switch to the section to which we should output X.  The only thing\n+   special we do here is to honor small data.  */\n+\n+static void\n+alpha_elf_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n+{\n+  if (TARGET_SMALL_DATA && GET_MODE_SIZE (mode) <= g_switch_value)\n+    /* ??? Consider using mergable sdata sections.  */\n+    sdata_section ();\n+  else\n+    default_elf_select_rtx_section (mode, x, align);\n+}\n+\n+#endif /* OBJECT_FORMAT_ELF */\n+\f\n #if TARGET_ABI_OPEN_VMS\n \n /* Return the VMS argument type corresponding to MODE.  */"}, {"sha": "722ff5e42a8f7fdfcb35fa483003c35a382b5486", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -258,22 +258,6 @@ void FN ()\t\t\t\t\t\\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-\n-#undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SMALL_DATA && GET_MODE_SIZE (MODE) <= g_switch_value)\t\\\n-     /* ??? Consider .sdata.{lit4,lit8} as SHF_MERGE|SHF_ALPHA_GPREL.  */ \\\n-    sdata_section ();\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    mergeable_constant_section((MODE), (ALIGN), 0);\t\t\t\\\n-} while (0)\n-\n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to\n    another, but if a given system (e.g. m88k running svr) needs to use"}, {"sha": "3760527db42dcee9540480d61be030948cb73165", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -54,8 +54,6 @@ Boston, MA 02111-1307, USA.  */\n    addressing across such boundaries.  */\n #define TEXT_SECTION_ASM_OP aof_text_section ()\n \n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) text_section ();\n-\n #define DATA_SECTION_ASM_OP aof_data_section ()\n \n #define EXTRA_SECTIONS in_zero_init, in_common"}, {"sha": "7e74c2298839906b931e61316d3b063a106b9b35", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1791,16 +1791,6 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    If these items should be placed in the text section, this macro\n    should not be defined.  */\n \n-/* `SELECT_RTX_SECTION (MODE, RTX, ALIGN)'\n-   A C statement or statements to switch to the appropriate section\n-   for output of RTX in mode MODE.  You can assume that RTX is some\n-   kind of constant in RTL.  The argument MODE is redundant except in\n-   the case of a `const_int' rtx.  Select the section by calling\n-   `text_section' or one of the alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n-\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n /* Define this macro if jump tables (for `tablejump' insns) should be\n    output in the text section, along with the assembler instructions."}, {"sha": "ee5e38e710a4c4b1ef8ddffd74282e411350315b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1735,15 +1735,6 @@ fini_section ()\t\t\t\t\t\t\t\\\n # endif\n #endif /* ! HOST_WIDE_INT_PRINT_HEX */\n \n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section()\n-\n-\n /* Overall Framework of an Assembler File.  */\n /* We need to have a data section we can identify so that we can set\n    the DP register back to a data pointer in the small memory model."}, {"sha": "e66ba674d535eaae8b48af74493ff4e0645617dd", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -2747,18 +2747,6 @@ extern const char *d30v_branch_cost_string;\n    Defined in svr4.h.  */\n /* #define EXTRA_SECTION_FUNCTIONS */\n \n-/* A C statement or statements to switch to the appropriate section for output\n-   of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n-   RTL.  The argument MODE is redundant except in the case of a `const_int'\n-   rtx.  Select the section by calling `text_section' or one of the\n-   alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only data\n-   section.\n-\n-   Defined in svr4.h.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n-\n /* Define this macro if jump tables (for `tablejump' insns) should be output in\n    the text section, along with the assembler instructions.  Otherwise, the\n    readonly data section is used."}, {"sha": "c72b0dd1b3a9a7836dfbec6c72942d70f206d316", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -70,9 +70,48 @@ extern void darwin_exception_section PARAMS ((void));\n extern void darwin_eh_frame_section PARAMS ((void));\n extern void machopic_select_section PARAMS ((tree, int,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n+extern void machopic_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT));\n \n #ifdef GCC_C_PRAGMA_H\n extern void darwin_pragma_ignore PARAMS ((cpp_reader *));\n extern void darwin_pragma_options PARAMS ((cpp_reader *));\n extern void darwin_pragma_unused PARAMS ((cpp_reader *));\n #endif\n+\n+/* Expanded by EXTRA_SECTION_FUNCTIONS into varasm.o.  */\n+extern void const_section PARAMS ((void));\n+extern void const_data_section PARAMS ((void));\n+extern void cstring_section PARAMS ((void));\n+extern void literal4_section PARAMS ((void));\n+extern void literal8_section PARAMS ((void));\n+extern void constructor_section PARAMS ((void));\n+extern void mod_init_section PARAMS ((void));\n+extern void mod_term_section PARAMS ((void));\n+extern void destructor_section PARAMS ((void));\n+extern void objc_class_section PARAMS ((void));\n+extern void objc_meta_class_section PARAMS ((void));\n+extern void objc_category_section PARAMS ((void));\n+extern void objc_class_vars_section PARAMS ((void));\n+extern void objc_instance_vars_section PARAMS ((void));\n+extern void objc_cls_meth_section PARAMS ((void));\n+extern void objc_inst_meth_section PARAMS ((void));\n+extern void objc_cat_cls_meth_section PARAMS ((void));\n+extern void objc_cat_inst_meth_section PARAMS ((void));\n+extern void objc_selector_refs_section PARAMS ((void));\n+extern void objc_selector_fixup_section PARAMS ((void));\n+extern void objc_symbols_section PARAMS ((void));\n+extern void objc_module_info_section PARAMS ((void));\n+extern void objc_protocol_section PARAMS ((void));\n+extern void objc_string_object_section PARAMS ((void));\n+extern void objc_constant_string_object_section PARAMS ((void));\n+extern void objc_class_names_section PARAMS ((void));\n+extern void objc_meth_var_names_section PARAMS ((void));\n+extern void objc_meth_var_types_section PARAMS ((void));\n+extern void objc_cls_refs_section PARAMS ((void));\n+extern void machopic_lazy_symbol_ptr_section PARAMS ((void));\n+extern void machopic_nl_symbol_ptr_section PARAMS ((void));\n+extern void machopic_symbol_stub_section PARAMS ((void));\n+extern void machopic_picsymbol_stub_section PARAMS ((void));\n+extern void darwin_exception_section PARAMS ((void));\n+extern void darwin_eh_frame_section PARAMS ((void));"}, {"sha": "e6fe4204c0644d5f9649e82aecec23a4767b88ae", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1237,6 +1237,25 @@ machopic_select_section (exp, reloc, align)\n     data_section ();\n }\n \n+/* This can be called with address expressions as \"rtx\".\n+   They must go in \"const\". */\n+\n+void\n+machopic_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  if (GET_MODE_SIZE (mode) == 8)\n+    literal8_section ();\n+  else if (GET_MODE_SIZE (mode) == 4\n+\t   && (GET_CODE (x) == CONST_INT\n+\t       || GET_CODE (x) == CONST_DOUBLE))\n+    literal4_section ();\n+  else\n+    const_section ();\n+}\n+\n void\n machopic_asm_out_constructor (symbol, priority)\n      rtx symbol;"}, {"sha": "9867f1ff7883e6741ce9a64d1f3646f6723e6a29", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -487,23 +487,8 @@ objc_section_init ()\t\t\t\t\\\n \n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION machopic_select_section\n-\n-/* This can be called with address expressions as \"rtx\".\n-   They must go in \"const\". */\n-#undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(mode, rtx, align)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (GET_MODE_SIZE (mode) == 8)\t\t\t\t\t\\\n-\tliteral8_section ();\t\t\t\t\t\t\\\n-      else if (GET_MODE_SIZE (mode) == 4\t\t\t\t\\\n-\t       && (GET_CODE (rtx) == CONST_INT\t\t\t\t\\\n-\t           || GET_CODE (rtx) == CONST_DOUBLE))\t\t\t\\\n-\tliteral4_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION machopic_select_rtx_section\n \n #define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME)\t\t\t\\\n     do { \t\t\t\t\t\t\t\t\\"}, {"sha": "46a13b4afa738f4a0f511b2477bb76d90c52c20c", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -240,18 +240,8 @@ Boston, MA 02111-1307, USA.  */\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.\n-   If assembler supports SHF_MERGE sections, put it into\n-   a .rodata.cstN section where N is size of the constant,\n-   otherwise into const section.  */\n-\n-#undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\\\n-  mergeable_constant_section ((MODE), (ALIGN), 0)\n-\n+#undef  TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION default_elf_select_rtx_section\n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION default_elf_select_section\n "}, {"sha": "fa6b4a5edfd8d254bd8527459d7c5ebd8a0931c2", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n */\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.17 $\"\n+#define VERSION_INFO2   \"$Revision: 1.18 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -230,16 +230,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 0x1000\n \n-/* Must use data section for relocatable constants when pic.  */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\\\n-    data_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    readonly_data_section ();\t\t\t\t\\\n-} while (0)\n-\n /* This supplements FUNCTION_ARG's definition in i386.h to check\n    TARGET_WARN_PASS_STRUCT */\n "}, {"sha": "83cade2eb83b319765cfc794f10fb1874fddc2b5", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -464,20 +464,6 @@ do\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n \n-/* Given a decl node or constant node, choose the section to output it in\n-   and select that section.  */\n-\n-#undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (MODE == Pmode && HALF_PIC_P () && HALF_PIC_ADDRESS_P (RTX))\t\\\n-      data_section ();\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      readonly_data_section ();\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n #undef\tSELECT_SECTION\n #define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "b520159f79ca5beab45fff9576281f250134be2d", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -348,19 +348,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n         fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n } while (0) \n \n-/* Must use data section for relocatable constants when pic.  */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (TARGET_ELF) {\t\t\t\t\t\\\n-    if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\\\n-      data_section ();\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\\\n-      readonly_data_section ();\t\t\t\t\\\n-  } else\t\t\t\t\t\t\\\n-    readonly_data_section();\t\t\t\t\\\n-}\n-\n #undef ASM_OUTPUT_CASE_LABEL\n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,JUMPTABLE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "b9d94b788cb9ec4deac5d8b684238ff6c7c09587", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -139,11 +139,3 @@ fini_section ()\t\t\t\t\t\t\t\\\n }\n \n #define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor\n-\n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) readonly_data_section()"}, {"sha": "e69574dde5d6f9fd71a0e3484e856a39270944c7", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -182,7 +182,6 @@ Boston, MA 02111-1307, USA.  */\n #undef DO_GLOBAL_CTORS_BODY\n #undef ASM_OUTPUT_DESTRUCTOR\n #undef TARGET_ASM_SELECT_SECTION\n-#undef SELECT_RTX_SECTION\n \n #define\tBSS_SECTION_ASM_OP\t\"\\t.bss\"\t/* XXX */\n #undef EXTRA_SECTIONS"}, {"sha": "b52d49cf66d816e32de5ef79caa66581c39859ba", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -136,19 +136,8 @@ do {\t\t\t\t\t\t\t\\\n #define TARGET_ASM_SELECT_SECTION  ia64_aix_select_section\n #undef\tTARGET_ASM_UNIQUE_SECTION\n #define TARGET_ASM_UNIQUE_SECTION  ia64_aix_unique_section\n-\n-extern unsigned int ia64_section_threshold;\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\\\n-      && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\\\n-    sdata_section ();\t\t\t\t\t\t\\\n-  else if (symbolic_operand ((RTX), (MODE)))\t\t\t\\\n-    data_section ();\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    readonly_data_section ();\t\t\t\t\t\\\n-}\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION  ia64_aix_select_rtx_section\n \n /* Override ia64/sysv4.h setting with that used by AIX5.  */\n #undef WCHAR_TYPE"}, {"sha": "0bbb3caf00a80f8e4935ce62f47449f19a3be7b0", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -153,11 +153,16 @@ static int ia64_sched_reorder PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_sched_reorder2 PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_variable_issue PARAMS ((FILE *, int, rtx, int));\n \n+static void ia64_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void ia64_aix_select_section PARAMS ((tree, int,\n \t\t\t\t\t     unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n static void ia64_aix_unique_section PARAMS ((tree, int))\n      ATTRIBUTE_UNUSED;\n+static void ia64_aix_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t         unsigned HOST_WIDE_INT))\n+     ATTRIBUTE_UNUSED;\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -7843,6 +7848,22 @@ ia64_hpux_function_arg_padding (mode, type)\n       ? downward : upward);\n }\n \f\n+/* Switch to the section to which we should output X.  The only thing\n+   special we do here is to honor small data.  */\n+\n+static void\n+ia64_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n+{\n+  if (GET_MODE_SIZE (mode) > 0\n+      && GET_MODE_SIZE (mode) <= ia64_section_threshold)\n+    sdata_section ();\n+  else\n+    default_elf_select_rtx_section (mode, x, align);\n+}\n+\n /* It is illegal to have relocations in shared segments on AIX.\n    Pretend flag_pic is always set.  */\n \n@@ -7868,3 +7889,15 @@ ia64_aix_unique_section (decl, reloc)\n   default_unique_section (decl, reloc);\n   flag_pic = save_pic;\n }\n+\n+static void\n+ia64_aix_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n+{\n+  int save_pic = flag_pic;\n+  flag_pic = 1;\n+  ia64_select_rtx_section (mode, x, align);\n+  flag_pic = save_pic;\n+}"}, {"sha": "1684db150a00881b0255425f16a9b230c9c9d776", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -140,20 +140,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   emit_safe_across_calls (STREAM);\t\t\t\t\t\\\n } while (0)\n \n-/* Similarly for constant pool data.  */\n-\n-extern unsigned int ia64_section_threshold;\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\t\\\n-      && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\t\\\n-    sdata_section ();\t\t\t\t\t\t\t\\\n-  else if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\t\\\n-    data_section ();\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    mergeable_constant_section ((MODE), (ALIGN), 0);\t\t\t\\\n-}\n+/* Override default elf definition.  */\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION  ia64_select_rtx_section\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_sbss"}, {"sha": "439ddf4708c4431caefab608a5c75f71f2c2d25f", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1569,18 +1569,6 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n #undef  TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION  m32r_select_section\n \n-/* A C statement or statements to switch to the appropriate section for\n-   output of RTX in mode MODE.  You can assume that RTX\n-   is some kind of constant in RTL.  The argument MODE is redundant\n-   except in the case of a `const_int' rtx.  Select the section by\n-   calling `text_section' or one of the alternatives for other\n-   sections.\n-\n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n-\n-#undef SELECT_RTX_SECTION\n-\n /* Define this macro if jump tables (for tablejump insns) should be\n    output in the text section, along with the assembler instructions.\n    Otherwise, the readonly data section is used."}, {"sha": "4e540b89ee0e555829922d5b13b370039e8a3a87", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -29,7 +29,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #include \"m68k/m68k.h\"\n-#undef SELECT_RTX_SECTION\n #include \"svr3.h\"\n \n #undef INT_OP_GROUP\n@@ -44,7 +43,6 @@ Boston, MA 02111-1307, USA.  */\n /* Remove handling for a separate constant data section.  We put\n    constant data in text_section, which is the default.  */\n #undef TARGET_ASM_SELECT_SECTION\n-#undef SELECT_RTX_SECTION\n #undef EXTRA_SECTIONS\n #undef EXTRA_SECTION_FUNCTIONS\n #undef READONLY_DATA_SECTION_ASM_OP"}, {"sha": "38e83b97497674ce07ac0084fed111ab1ea1514a", "filename": "gcc/config/m68k/lynx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flynx.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -25,7 +25,6 @@ Boston, MA 02111-1307, USA.  */\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n #undef ASM_OUTPUT_DESTRUCTOR\n-#undef SELECT_RTX_SECTION\n \n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n "}, {"sha": "bf81aff6723cb2e536b645bea9cc77ea89678265", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -350,16 +350,6 @@ extern int target_flags;\n /* This is how to align an instruction for optimal branching.  */\n #define LABEL_ALIGN_AFTER_BARRIER(LABEL) (m68k_align_jumps)\n \n-#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!flag_pic)\t\t\t\t\t\t\t\\\n-    readonly_data_section();\t\t\t\t\t\t\\\n-  else if (LEGITIMATE_PIC_OPERAND_P (X))\t\t\t\t\\\n-    readonly_data_section();\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    data_section();\t\t\t\t\t\t\t\\\n-}\n-\n /* Define number of bits in most basic integer type.\n    (If undefined, default is BITS_PER_WORD).  */\n "}, {"sha": "a464b925f084d06be1c0103250acec3a2676e2de", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -30,7 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    1.37.1 version.  */\n \n #include \"m68k/tower.h\"\n-#undef SELECT_RTX_SECTION\n \n /* Use default settings for system V.3.  */\n "}, {"sha": "b8be2a17c3895c19b42a5b681cf9906dc49f7cc3", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -290,13 +290,3 @@ func_ptr __DTOR_END__[1] = { (func_ptr) (-1) }\n    page alignment would seem to be enough */\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 0x1000\n-\n-/* Must use data section for relocatable constants when pic.  */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\\\n-    data_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    readonly_data_section ();\t\t\t\t\\\n-}"}, {"sha": "651f3384b27d20e138ee7af1446278e60bf843e4", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -63,13 +63,6 @@ drectve_section ()\t\t\t\t\t\t\\\n       in_section = in_drectve;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-#undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section ()\n \n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "e1502a97f94b393085a6ec2973b94e37344b809d", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -251,6 +251,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n \n+#undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP_32\t\"\\t.rdata\"\n #define READONLY_DATA_SECTION_ASM_OP_64\t\"\\t.section\\t.rodata\"\n #define READONLY_DATA_SECTION_ASM_OP\t\t\\"}, {"sha": "89062c82299442bd52327ed8c07222b761fa11bd", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -120,8 +120,6 @@ extern int              mips_class_max_nregs PARAMS ((enum reg_class,\n extern int              mips_register_move_cost PARAMS ((enum machine_mode,\n \t\t\t\t\t\t\t enum reg_class,\n \t\t\t\t\t\t\t enum reg_class));\n-extern void\t\tmips_select_rtx_section PARAMS ((enum machine_mode,\n-\t\t\t\t\t\t\t rtx));\n \n extern int\t\tpic_address_needs_scratch PARAMS ((rtx));\n extern int\t\tse_arith_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "05bebf488537c94cc74f4eb4a94b3015a9b13ee1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -150,6 +150,8 @@ static void mips_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n \tATTRIBUTE_UNUSED;\n static void mips_unique_section\t\t\tPARAMS ((tree, int))\n \tATTRIBUTE_UNUSED;\n+static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT));\n \n \n struct machine_function {\n@@ -572,6 +574,8 @@ enum reg_class mips_char_to_class[256] =\n #define TARGET_ASM_FUNCTION_PROLOGUE mips_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE mips_output_function_epilogue\n+#undef TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION mips_select_rtx_section\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST mips_adjust_cost\n@@ -7897,10 +7901,11 @@ symbolic_expression_p (x)\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n-void\n-mips_select_rtx_section (mode, x)\n+static void\n+mips_select_rtx_section (mode, x, align)\n      enum machine_mode mode;\n-     rtx x ATTRIBUTE_UNUSED;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n {\n   if (TARGET_MIPS16)\n     {\n@@ -7913,26 +7918,26 @@ mips_select_rtx_section (mode, x)\n     {\n       /* For embedded applications, always put constants in read-only data,\n \t in order to reduce RAM usage.  */\n-      readonly_data_section ();\n+      mergeable_constant_section (mode, align, 0);\n     }\n   else\n     {\n       /* For hosted applications, always put constants in small data if\n \t possible, as this gives the best performance.  */\n+      /* ??? Consider using mergable small data sections.  */\n \n       if (GET_MODE_SIZE (mode) <= (unsigned) mips_section_threshold\n \t  && mips_section_threshold > 0)\n \tSMALL_DATA_SECTION ();\n       else if (flag_pic && symbolic_expression_p (x))\n-\t/* Any expression involving a SYMBOL_REF might need a run-time\n-\t   relocation.  (The symbol might be defined in a shared\n-\t   library loaded at an unexpected base address.)  So, we must\n-\t   put such expressions in the data segment (which is\n-\t   writable), rather than the text segment (which is\n-\t   read-only).  */\n-\tdata_section ();\n+\t{\n+\t  if (targetm.have_named_sections)\n+\t    named_section (NULL_TREE, \".data.rel.ro\", 3);\n+\t  else\n+\t    data_section ();\n+\t}\n       else\n-\treadonly_data_section ();\n+\tmergeable_constant_section (mode, align, 0);\n     }\n }\n "}, {"sha": "aab99807d4fb24d9f5884107d61e09163228ac59", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -4721,10 +4721,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n /* Given a decl node or constant node, choose the section to output it in\n    and select that section.  */\n \n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) \\\n-  mips_select_rtx_section (MODE, RTX)\n-\n #undef  TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION  mips_select_section\n \f"}, {"sha": "80e928b42b5395442a34e182a7b96a0e2eeae102", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -907,9 +907,6 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n \n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-#undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section ()\n-\n #define ENCODE_SECTION_INFO(DECL, FIRST) \\\n  mmix_encode_section_info (DECL, FIRST)\n "}, {"sha": "66b8f7c7d53676b1ae5daa5a9b21c8e46e9dc1c0", "filename": "gcc/config/nextstep-protos.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep-protos.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -28,3 +28,33 @@ extern void nextstep_exception_section PARAMS ((void));\n extern void nextstep_eh_frame_section PARAMS ((void));\n extern void nextstep_select_section PARAMS ((tree, int,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n+extern void nextstep_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT));\n+\n+/* Expanded by EXTRA_SECTION_FUNCTIONS into varasm.o.  */\n+extern void const_section PARAMS ((void));\n+extern void cstring_section PARAMS ((void));\n+extern void literal4_section PARAMS ((void));\n+extern void literal8_section PARAMS ((void));\n+extern void constructor_section PARAMS ((void));\n+extern void destructor_section PARAMS ((void));\n+extern void nextstep_exception_section PARAMS ((void));\n+extern void nextstep_eh_frame_section PARAMS ((void));\n+extern void objc_class_section PARAMS ((void));\n+extern void objc_meta_class_section PARAMS ((void));\n+extern void objc_category_section PARAMS ((void));\n+extern void objc_class_vars_section PARAMS ((void));\n+extern void objc_instance_vars_section PARAMS ((void));\n+extern void objc_cls_meth_section PARAMS ((void));\n+extern void objc_inst_meth_section PARAMS ((void));\n+extern void objc_cat_cls_meth_section PARAMS ((void));\n+extern void objc_cat_inst_meth_section PARAMS ((void));\n+extern void objc_selector_refs_section PARAMS ((void));\n+extern void objc_symbols_section PARAMS ((void));\n+extern void objc_module_info_section PARAMS ((void));\n+extern void objc_protocol_section PARAMS ((void));\n+extern void objc_string_object_section PARAMS ((void));\n+extern void objc_class_names_section PARAMS ((void));\n+extern void objc_meth_var_names_section PARAMS ((void));\n+extern void objc_meth_var_types_section PARAMS ((void));\n+extern void objc_cls_refs_section PARAMS ((void));"}, {"sha": "e7ae8f67674f95f17b9f516efbf82915731c1042", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -135,16 +135,16 @@ nextstep_select_section (exp, reloc, align)\n \t   || TREE_CODE (exp) == REAL_CST)\n     {\n       tree size = TYPE_SIZE (TREE_TYPE (exp));\n-      HOST_WIDE_INT size_int;\n+      HOST_WIDE_INT size_i;\n \n       if (TREE_CODE (size) == INTEGER_CST)\n-\tsize_int = tree_low_cst (size, 1);\n+\tsize_i = tree_low_cst (size, 1);\n       else\n-\tsize_int = 0;\n+\tsize_i = 0;\n \n-      if (size_int == 4)\n+      if (size_i == 4)\n \tliteral4_section ();\n-      else if (size_int == 8)\n+      else if (size_i == 8)\n \tliteral8_section ();\n       else\n \treadonly_data_section ();\n@@ -235,3 +235,19 @@ nextstep_select_section (exp, reloc, align)\n   else\n     readonly_data_section ();\n }\n+\n+void\n+nextstep_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  if (GET_MODE_SIZE (mode) == 8)\n+    literal8_section ();\n+  else if (GET_MODE_SIZE (mode) == 4\n+\t   && (GET_CODE (x) == CONST_INT\n+\t       || GET_CODE (x) == CONST_DOUBLE))\n+    literal4_section ();\n+  else\n+    const_section ();\n+}"}, {"sha": "4f2eb3fd4ee34363c54a651e3f563d0ee5601fde", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -443,19 +443,8 @@ objc_section_init ()\t\t\t\t\\\n \n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION nextstep_select_section\n-\n-#undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(mode, rtx, align)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (GET_MODE_SIZE(mode) == 8)\t\t\t\t\t\\\n-\tliteral8_section();\t\t\t\t\t\t\\\n-      else if (GET_MODE_SIZE(mode) == 4)\t\t\t\t\\\n-\tliteral4_section();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION nextstep_select_rtx_section\n \n #ifdef ASM_COMMENT_START\n # undef ASM_COMMENT_START"}, {"sha": "8f2250354bbf0e6214d5616965ef8c0dcd3ee23c", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -89,14 +89,6 @@ Boston, MA 02111-1307, USA.  */\n /* glibc's profiling functions don't need gcc to allocate counters.  */\n #define NO_PROFILE_COUNTERS 1\n \n-/* Put plabels into the data section so we can relocate them.  */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n-  if (flag_pic && function_label_operand (RTX, MODE))\t\\\n-    data_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    readonly_data_section ();\n-\n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to\n    another, but if a given system (e.g. m88k running svr) needs to use"}, {"sha": "fbab5b73ae55a167db099eb8d2e97883df1338fc", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1492,17 +1492,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n       || GET_CODE (ADDR) == POST_INC)\t\\\n     goto LABEL\n \f\n-/* Arghh.  The hpux10 linker chokes if we have a reference to symbols\n-   in a readonly data section when the symbol is defined in a shared\n-   library.  Since we can't know at compile time if a symbol will be\n-   satisfied by a shared library or main program we put any symbolic\n-   constant into the normal data section.  */\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n-  if (symbolic_operand (RTX, MODE))\t\\\n-    data_section ();\t\t\t\\\n-  else\t\t\t\t\t\\\n-    readonly_data_section ();\n-\n #define TARGET_ASM_SELECT_SECTION  pa_select_section\n    \n /* Define this macro if references to a symbol must be treated"}, {"sha": "003495c0b2542dffb7597f2e3e062b009138165d", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -53,12 +53,16 @@ static int memory_offset_in_range_p PARAMS ((rtx, enum machine_mode, int, int));\n static unsigned int hash_rtx PARAMS ((rtx));\n static void romp_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void romp_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void romp_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE romp_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE romp_output_function_epilogue\n+#undef TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION romp_select_rtx_section\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2068,3 +2072,14 @@ romp_initialize_trampoline (tramp, fnaddr, cxt)\n   addr = memory_address (HImode, plus_constant (tramp, 20));\n   emit_move_insn (gen_rtx_MEM (HImode, addr), gen_lowpart (HImode, temp));\n }\n+\n+/* On ROMP, all constants are in the data area.  */\n+\n+static void\n+romp_select_rtx_section (mode, x, align)\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     rtx x ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  data section ();\n+}"}, {"sha": "fb8cd3587bf4db26d1d6b78451219ea9a773737c", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -700,12 +700,6 @@ struct rt_cargs {int gregs, fregs; };\n   data_offset = ((SIZE) + 12 + 3) / 4;\t\t\t\t\\\n }\n \n-/* Select section for constant in constant pool.\n-\n-   On ROMP, all constants are in the data area.  */\n-\n-#define SELECT_RTX_SECTION(MODE, X, ALIGN)\tdata_section ()\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}, {"sha": "fb45997a48665b5990a6c4c9832221a96ac331ef", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #undef READONLY_DATA_SECTION\n #undef READONLY_DATA_SECTION_ASM_OP\n #undef EXTRA_SECTION_FUNCTIONS\n-#undef SELECT_RTX_SECTION\n+#undef TARGET_ASM_SELECT_RTX_SECTION\n #undef TARGET_ASM_SELECT_SECTION\n #undef USER_LABEL_PREFIX\n #undef ASM_OUTPUT_LABELREF"}, {"sha": "18c03abb558207b83a1d8e1072b9bf56b4cea7a7", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -122,8 +122,6 @@ extern rtx rs6000_legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n extern rtx rs6000_legitimize_reload_address PARAMS ((rtx, enum machine_mode,\n \t\t\t    int, int, int, int *));\n extern int rs6000_legitimate_address PARAMS ((enum machine_mode, rtx, int));\n-extern void rs6000_select_rtx_section PARAMS ((enum machine_mode, rtx));\n-\n extern rtx rs6000_return_addr PARAMS ((int, rtx));\n extern void rs6000_output_symbol_ref PARAMS ((FILE*, rtx));\n "}, {"sha": "49fa94e575f8c0ce5bf4150e7f0ee2b41da63d7e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -166,12 +166,16 @@ static void rs6000_elf_asm_out_destructor PARAMS ((rtx, int));\n static void rs6000_elf_select_section PARAMS ((tree, int,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT));\n static void rs6000_elf_unique_section PARAMS ((tree, int));\n+static void rs6000_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t   unsigned HOST_WIDE_INT));\n #endif\n #ifdef OBJECT_FORMAT_COFF\n static void xcoff_asm_named_section PARAMS ((const char *, unsigned int));\n static void rs6000_xcoff_select_section PARAMS ((tree, int,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT));\n static void rs6000_xcoff_unique_section PARAMS ((tree, int));\n+static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n #endif\n static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n@@ -10928,6 +10932,8 @@ rs6000_longcall_ref (call_ref)\n }\n \n \f\n+#ifdef USING_ELFOS_H\n+\n /* A C statement or statements to switch to the appropriate section\n    for output of RTX in mode MODE.  You can assume that RTX is some\n    kind of constant in RTL.  The argument MODE is redundant except in\n@@ -10937,22 +10943,16 @@ rs6000_longcall_ref (call_ref)\n    Do not define this macro if you put all constants in the read-only\n    data section.  */\n \n-#ifdef USING_ELFOS_H\n-\n-void\n-rs6000_select_rtx_section (mode, x)\n+static void\n+rs6000_elf_select_rtx_section (mode, x, align)\n      enum machine_mode mode;\n      rtx x;\n+     unsigned HOST_WIDE_INT align;\n {\n   if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x, mode))\n     toc_section ();\n-  else if (flag_pic\n-\t   && (GET_CODE (x) == SYMBOL_REF\n-\t       || GET_CODE (x) == LABEL_REF\n-\t       || GET_CODE (x) == CONST))\n-    data_section ();\n   else\n-    readonly_data_section ();\n+    default_elf_select_rtx_section (mode, x, align);\n }\n \n /* A C statement or statements to switch to the appropriate\n@@ -11683,4 +11683,16 @@ rs6000_xcoff_unique_section (decl, reloc)\n       DECL_SECTION_NAME (decl) = build_string (len, string);\n     }\n }\n-#endif\n+\n+static void\n+rs6000_xcoff_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x, mode))\n+    toc_section ();\n+  else\n+    read_only_private_data_section ();\n+}\n+#endif /* OBJECT_FORMAT_COFF */"}, {"sha": "41bce4c5efc4bdbddbf136422b491314352f1dd3", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -547,37 +547,11 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* A C statement or statements to switch to the appropriate section\n-   for output of RTX in mode MODE.  You can assume that RTX is some\n-   kind of constant in RTL.  The argument MODE is redundant except in\n-   the case of a `const_int' rtx.  Select the section by calling\n-   `text_section' or one of the alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n-\n-/* Override elfos.h definition.  */\n-#undef\tSELECT_RTX_SECTION\n-#define\tSELECT_RTX_SECTION(MODE, X, ALIGN) rs6000_select_rtx_section (MODE, X)\n-\n-/* A C statement or statements to switch to the appropriate\n-   section for output of DECL.  DECL is either a `VAR_DECL' node\n-   or a constant of some sort.  RELOC indicates whether forming\n-   the initial value of DECL requires link-time relocations.  */\n-\n-/* Override elfos.h definition.  */\n+/* Override default elf definitions.  */\n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define\tTARGET_ASM_SELECT_RTX_SECTION rs6000_elf_select_rtx_section\n #undef\tTARGET_ASM_SELECT_SECTION\n #define\tTARGET_ASM_SELECT_SECTION  rs6000_elf_select_section\n-\n-/* A C statement to build up a unique section name, expressed as a\n-   STRING_CST node, and assign it to DECL_SECTION_NAME (decl).\n-   RELOC indicates whether the initial value of EXP requires\n-   link-time relocations.  If you do not define this macro, GCC will use\n-   the symbol name prefixed by `.' as the section name.  Note - this\n-   macro can now be called for uninitialized data items as well as\n-   initialised data and functions.  */\n-\n-/* Override default elf definition.  */\n #define TARGET_ASM_UNIQUE_SECTION  rs6000_elf_unique_section\n \n /* Return non-zero if this entry is to be written into the constant pool"}, {"sha": "2c089bdf69d4f7ca94108842346f7c10bd50f4a4", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -135,11 +135,6 @@ toc_section ()\t\t\t\t\t\t\\\n \n #define READONLY_DATA_SECTION read_only_data_section\n \n-/* Select the section for an initialized data object.\n-\n-   On the RS/6000, we have a special section for all variables except those\n-   that are static.  */\n-\n #define TARGET_ASM_SELECT_SECTION  rs6000_xcoff_select_section\n \n /* Return non-zero if this entry is to be written into the constant\n@@ -172,12 +167,7 @@ toc_section ()\t\t\t\t\t\t\\\n    However, if this is being placed in the TOC it must be output as a\n    toc entry.  */\n \n-#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\t\\\n-{ if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (X, MODE))\t\\\n-    toc_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    read_only_private_data_section ();\t\t\t\\\n-}\n+#define TARGET_ASM_SELECT_RTX_SECTION  rs6000_xcoff_select_rtx_section\n \n /* If we are referencing a function that is static or is known to be\n    in this file, make the SYMBOL_REF special.  We can use this to indicate"}, {"sha": "7747e3c0270bf9cb49a3e8cca9b155fe4d6314af", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -215,15 +215,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_GLOBALIZE_LABEL(FILE, NAME)  \\\n   (fputs (\".globl \", FILE), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))\n-\n-/* Select section for constant in constant pool. \n-   We are in the right section. \n-   undef for 64 bit mode (linux64.h).\n- */\n-\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, X, ALIGN)\n-\n \f\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */"}, {"sha": "51fe26d3c773868311593ef0d9ab0c36bd92db11", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -50,6 +50,8 @@ Boston, MA 02111-1307, USA.  */\n static bool s390_assemble_integer PARAMS ((rtx, unsigned int, int));\n static int s390_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int s390_adjust_priority PARAMS ((rtx, int));\n+static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n+\t\t\t\t\t     unsigned HOST_WIDE_INT));\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -70,6 +72,9 @@ static int s390_adjust_priority PARAMS ((rtx, int));\n #undef  TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n+#undef\tTARGET_ASM_SELECT_RTX_SECTION\n+#define\tTARGET_ASM_SELECT_RTX_SECTION  s390_select_rtx_section\n+\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST s390_adjust_cost\n \n@@ -3914,3 +3919,17 @@ s390_function_profiler (file, labelno)\n     }\n }\n \n+/* Select section for constant in constant pool.  In 32-bit mode,\n+   constants go in the function section; in 64-bit mode in .rodata.  */\n+\n+static void\n+s390_select_rtx_section (mode, x, align)\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     rtx x ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  if (TARGET_64BIT)\n+    readonly_data_section ();\n+  else\n+    function_section (current_function_decl);\n+}"}, {"sha": "7532281361d59c23d0388e4895e7424a268c6bd5", "filename": "gcc/config/sparc/aout.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Faout.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n   || !strcmp (STR, \"target\") || !strcmp (STR, \"assert\"))\n \n #define TARGET_ASM_SELECT_SECTION  sparc_aout_select_section\n+#define TARGET_ASM_SELECT_RTX_SECTION  sparc_aout_select_rtx_section\n \n /* Output the label for a function definition.  */\n "}, {"sha": "db72a923476df455f8b6024e28c19644b4607ab8", "filename": "gcc/config/sparc/lynx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flynx.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -19,7 +19,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_IDENT\n-#undef SELECT_RTX_SECTION\n \n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n "}, {"sha": "3444ffc0598c0af3532dcb6fbc39a87a0328efa5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -160,6 +160,9 @@ static void sparc_elf_asm_named_section PARAMS ((const char *, unsigned int));\n static void sparc_aout_select_section PARAMS ((tree, int,\n \t\t\t\t\t       unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n+static void sparc_aout_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t   unsigned HOST_WIDE_INT))\n+     ATTRIBUTE_UNUSED;\n \n static int sparc_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int sparc_issue_rate PARAMS ((void));\n@@ -8056,6 +8059,23 @@ sparc_aout_select_section (t, reloc, align)\n   default_select_section (t, reloc | SUNOS4_SHARED_LIBRARIES, align);\n }\n \n+/* Use text section for a constant unless we need more alignment than\n+   that offers.  */\n+\n+static void\n+sparc_aout_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n+{\n+  if (align <= MAX_TEXT_ALIGN\n+      && ! (flag_pic && (symbolic_operand (x, mode)\n+\t\t\t || SUNOS4_SHARED_LIBRARIES)))\n+    readonly_data_section ();\n+  else\n+    data_section ();\n+}\n+\n int\n sparc_extra_constraint_check (op, c, strict)\n      rtx op;"}, {"sha": "ad19d6ba0820b79ab4eb2795764a7bfb178124cd", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -826,19 +826,6 @@ if (TARGET_ARCH64\t\t\t\t\\\n #ifndef SUNOS4_SHARED_LIBRARIES\n #define SUNOS4_SHARED_LIBRARIES 0\n #endif\n-\n-\n-/* Use text section for a constant\n-   unless we need more alignment than that offers.  */\n-/* This is defined differently for v9 in a cover file.  */\n-#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\\\n-{\t\t\t\t\t\t\\\n-  if (GET_MODE_BITSIZE (MODE) <= MAX_TEXT_ALIGN \\\n-      && ! (flag_pic && (symbolic_operand ((X), (MODE)) || SUNOS4_SHARED_LIBRARIES)))  \\\n-    text_section ();\t\t\t\t\\\n-  else\t\t\t\t\t\t\\\n-    data_section ();\t\t\t\t\\\n-}\n \f\n /* Standard register usage.  */\n "}, {"sha": "513251ce83684ff2bedfbc7f18fe90d7542ef233", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -41,6 +41,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* SunOS has on_exit instead of atexit.  */\n /* The man page says it returns int.  */\n+#ifdef IN_LIBGCC2\n extern int on_exit PARAMS ((void *, void *));\n+#endif\n #define ON_EXIT(FUNC) on_exit ((FUNC), 0)\n #define NEED_ATEXIT"}, {"sha": "666ee6215896795858e997b838742d3741e2ec8c", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -68,16 +68,6 @@ Boston, MA 02111-1307, USA.  */\n   \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n    %{fpic:-K PIC} %{fPIC:-K PIC} %(asm_cpu)\"\n \n-/* Must use data section for relocatable constants when pic.  */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\\\n-    data_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    readonly_data_section ();\t\t\t\t\\\n-}\n-\n /* Define the names of various pseudo-op used by the Sparc/svr4 assembler.\n    Note that many of these are different from the typical pseudo-ops used\n    by most svr4 assemblers.  That is probably due to a (misguided?) attempt"}, {"sha": "880638b50ac84e2c3e5c343258565a33c032bb7f", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -2535,18 +2535,6 @@ do {\t\t\t\t\t\t\t\\\n    Defined in svr4.h.  */\n /* #define EXTRA_SECTION_FUNCTIONS */\n \n-/* A C statement or statements to switch to the appropriate section for output\n-   of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n-   RTL.  The argument MODE is redundant except in the case of a `const_int'\n-   rtx.  Select the section by calling `text_section' or one of the\n-   alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only data\n-   section.\n-\n-   Defined in svr4.h.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n-\n /* Define this macro if jump tables (for `tablejump' insns) should be output in\n    the text section, along with the assembler instructions.  Otherwise, the\n    readonly data section is used."}, {"sha": "5a6f640d925dbf6c63fadf0796099b8607c5b444", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -260,12 +260,3 @@ fini_section ()\t\t\t\t\t\t\t\\\n       in_section = in_fini;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n-\n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-\n-#undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) readonly_data_section()"}, {"sha": "e20e05659f84ceaab5f493b9109bec859866ca77", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -1117,16 +1117,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n #define ZCOMMON_ASM_OP \t       \"\\t.zcomm\\t\"\n #define TCOMMON_ASM_OP \t       \"\\t.tcomm\\t\"\n \n-/* A C statement or statements to switch to the appropriate section\n-   for output of RTX in mode MODE.  You can assume that RTX is some\n-   kind of constant in RTL.  The argument MODE is redundant except in\n-   the case of a `const_int' rtx.  Select the section by calling\n-   `text_section' or one of the alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n-\n /* Output at beginning/end of assembler file.  */\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE) asm_file_start(FILE)"}, {"sha": "611bebfcf2e06842e838e4cc92a1185c1e79c5a6", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -101,10 +101,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    doesn't allow $ in symbol names.  */\n #undef NO_DOLLAR_IN_LABEL\n \n-/* Don't switch sections in the middle of a literal pool! */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\n-  \n /* Do not force \"-fpic\" for this target.  */\n #define XTENSA_ALWAYS_PIC 0\n "}, {"sha": "56e2a5a3aeb748b961d7371b090bd45813ca3657", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -57,10 +57,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\".\"\n \n-/* Don't switch sections in the middle of a literal pool! */\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\n-\n /* Always enable \"-fpic\" for Xtensa Linux.  */\n #define XTENSA_ALWAYS_PIC 1\n "}, {"sha": "4ce5f31e57bba5dffaa83a9ec4f79357f593bfdc", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"optabs.h\"\n+#include \"output.h\"\n #include \"libfuncs.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -185,6 +186,24 @@ enum reg_class xtensa_char_to_class[256] =\n   NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n };\n \n+static int b4const_or_zero PARAMS ((int));\n+static enum internal_test map_test_to_internal_test PARAMS ((enum rtx_code));\n+static rtx gen_int_relational PARAMS ((enum rtx_code, rtx, rtx, int *));\n+static rtx gen_float_relational PARAMS ((enum rtx_code, rtx, rtx));\n+static rtx gen_conditional_move PARAMS ((rtx));\n+static rtx fixup_subreg_mem PARAMS ((rtx x));\n+static enum machine_mode xtensa_find_mode_for_size PARAMS ((unsigned));\n+static void xtensa_init_machine_status PARAMS ((struct function *p));\n+static void xtensa_free_machine_status PARAMS ((struct function *p));\n+static void printx PARAMS ((FILE *, signed int));\n+static void xtensa_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t       unsigned HOST_WIDE_INT));\n+\n+static rtx frame_size_const;\n+static int current_function_arg_words;\n+static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n+  REG_ALLOC_ORDER;\n+\f\n /* This macro generates the assembly code for function entry.\n    FILE is a stdio stream to output the code to.\n    SIZE is an int: how many units of temporary storage to allocate.\n@@ -210,23 +229,11 @@ enum reg_class xtensa_char_to_class[256] =\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n \n-struct gcc_target targetm = TARGET_INITIALIZER;\n-\n-static int b4const_or_zero PARAMS ((int));\n-static enum internal_test map_test_to_internal_test PARAMS ((enum rtx_code));\n-static rtx gen_int_relational PARAMS ((enum rtx_code, rtx, rtx, int *));\n-static rtx gen_float_relational PARAMS ((enum rtx_code, rtx, rtx));\n-static rtx gen_conditional_move PARAMS ((rtx));\n-static rtx fixup_subreg_mem PARAMS ((rtx x));\n-static enum machine_mode xtensa_find_mode_for_size PARAMS ((unsigned));\n-static void xtensa_init_machine_status PARAMS ((struct function *p));\n-static void xtensa_free_machine_status PARAMS ((struct function *p));\n-static void printx PARAMS ((FILE *, signed int));\n-static rtx frame_size_const;\n-static int current_function_arg_words;\n-static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n-  REG_ALLOC_ORDER;\n+#undef TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION  xtensa_select_rtx_section\n \n+struct gcc_target targetm = TARGET_INITIALIZER;\n+\f\n \n /*\n  * Functions to test Xtensa immediate operand validity.\n@@ -1628,7 +1635,7 @@ xtensa_emit_call (callop, operands)\n      int callop;\n      rtx *operands;\n {\n-  char *result = (char *) malloc (64);\n+  static char result[64];\n   rtx tgt = operands[callop];\n \n   if (GET_CODE (tgt) == CONST_INT)\n@@ -2731,3 +2738,14 @@ a7_overlap_mentioned_p (x)\n \n   return 0;\n }\n+\n+/* The literal pool stays with the function.  */\n+\n+static void\n+xtensa_select_rtx_section (mode, x, align)\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     rtx x ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  function_section (current_function_decl);\n+}"}, {"sha": "35350d4c2c9655e139909d02cacb6dcfd95a4f37", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -242,7 +242,6 @@ extern unsigned xtensa_current_frame_size;\n \n /* Size in bits of various types on the target machine.  */\n #define INT_TYPE_SIZE 32\n-#define MAX_INT_TYPE_SIZE 32\n #define SHORT_TYPE_SIZE 16\n #define LONG_TYPE_SIZE 32\n #define MAX_LONG_TYPE_SIZE 32\n@@ -254,7 +253,6 @@ extern unsigned xtensa_current_frame_size;\n /* Tell the preprocessor the maximum size of wchar_t.  */\n #ifndef MAX_WCHAR_TYPE_SIZE\n #ifndef WCHAR_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE MAX_INT_TYPE_SIZE\n #endif\n #endif\n \n@@ -1276,12 +1274,6 @@ typedef struct xtensa_args {\n    Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE */\n \n-/* Specify the tree operation to be used to convert reals to integers.  */\n-#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n-\n-/* This is the kind of divide that is easiest to do in the general case.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* Define this as 1 if 'char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n \n@@ -1654,7 +1646,7 @@ typedef struct xtensa_args {\n #define ASM_OUTPUT_POOL_PROLOGUE(FILE, FUNNAME, FUNDECL, SIZE)          \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     tree fnsection;\t\t\t\t\t\t\t\\\n-    resolve_unique_section ((FUNDECL), 0);\t\t\t\t\\\n+    resolve_unique_section ((FUNDECL), 0, flag_function_sections);\t\\\n     fnsection = DECL_SECTION_NAME (FUNDECL);\t\t\t\t\\\n     if (fnsection != NULL_TREE)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "f1baa212d7767368f36749149dc20e3e207cb165", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -5757,18 +5757,6 @@ functions should do jobs analogous to those of @code{text_section} and\n @code{data_section}, for your additional sections.  Do not define this\n macro if you do not define @code{EXTRA_SECTIONS}.\n \n-@findex SELECT_RTX_SECTION\n-@item SELECT_RTX_SECTION (@var{mode}, @var{rtx}, @var{align})\n-A C statement or statements to switch to the appropriate section for\n-output of @var{rtx} in mode @var{mode}.  You can assume that @var{rtx}\n-is some kind of constant in RTL@.  The argument @var{mode} is redundant\n-except in the case of a @code{const_int} rtx.  Select the section by\n-calling @code{text_section} or one of the alternatives for other\n-sections.  @var{align} is the constant alignment in bits.\n-\n-Do not define this macro if you put all constants in the read-only\n-data section.\n-\n @findex JUMP_TABLES_IN_TEXT_SECTION\n @item JUMP_TABLES_IN_TEXT_SECTION\n Define this macro to be an expression with a nonzero value if jump\n@@ -5838,6 +5826,19 @@ example, the function @code{foo} would be placed in @code{.text.foo}.\n Whatever the actual target object format, this is often good enough.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_SELECT_RTX_SECTION (enum machine_mode @var{mode}, rtx @var{x}, unsigned HOST_WIDE_INT @var{align})\n+Switches to the appropriate section for output of constant pool entry\n+@var{x} in @var{mode}.  You can assume that @var{x} is some kind of\n+constant in RTL@.  The argument @var{mode} is redundant except in the\n+case of a @code{const_int} rtx.  Select the section by calling\n+@code{readonly_data_section} or one of the alternatives for other\n+sections.  @var{align} is the constant alignment in bits.\n+\n+The default version of this function takes care of putting symbolic\n+constants in @code{flag_pic} mode in @code{data_section} and everything\n+else in @code{readonly_data_section}.\n+@end deftypefn\n+\n @node PIC\n @section Position Independent Code\n @cindex position independent code"}, {"sha": "82dc08341ff0516ec457c541b55b56b4ebd235ab", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -548,7 +548,10 @@ extern void default_select_section PARAMS ((tree, int,\n extern void default_elf_select_section PARAMS ((tree, int,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n extern void default_unique_section PARAMS ((tree, int));\n-\n+extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\tunsigned HOST_WIDE_INT));\n+extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n /* Emit data for vtable gc for GNU binutils.  */\n extern void assemble_vtable_entry PARAMS ((struct rtx_def *, HOST_WIDE_INT));\n extern void assemble_vtable_inherit PARAMS ((struct rtx_def *,"}, {"sha": "aa9d5ac39f9b33fc4209e41d1926c34b9f197339", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -595,7 +595,7 @@ typedef char _Bool;\n \tMERGE_MACHINE_TYPE_ATTRIBUTES MERGE_MACHINE_DECL_ATTRIBUTES\t\\\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n-\tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION\n+\tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\n \n /* And other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "c7f2e24233a3515d4b24e6d4a79424973a72bb89", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -67,6 +67,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_UNIQUE_SECTION default_unique_section\n #endif\n \n+#ifndef TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION default_select_rtx_section\n+#endif\n+\n #if !defined(TARGET_ASM_CONSTRUCTOR) && !defined(USE_COLLECT2)\n # ifdef CTORS_SECTION_ASM_OP\n #  define TARGET_ASM_CONSTRUCTOR default_ctor_section_asm_out_constructor\n@@ -140,6 +144,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_EXCEPTION_SECTION,\t\t\\\n \t\t\tTARGET_ASM_EH_FRAME_SECTION,\t\t\\\n \t\t\tTARGET_ASM_SELECT_SECTION,\t\t\\\n+\t\t\tTARGET_ASM_SELECT_RTX_SECTION,\t\t\\\n \t\t\tTARGET_ASM_UNIQUE_SECTION,\t\t\\\n \t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n \t\t\tTARGET_ASM_DESTRUCTOR}"}, {"sha": "9b64875fd942a79b8a66a3b20c6b0651c50611f0", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -98,6 +98,11 @@ struct gcc_target\n        the required alignment of the data.  */\n     void (* select_section) PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n \n+    /* Select and switch to a section for X with MODE.  ALIGN is\n+       the desired alignment of the data.  */\n+    void (* select_rtx_section) PARAMS ((enum machine_mode, rtx,\n+\t\t\t\t\t unsigned HOST_WIDE_INT));\n+\n     /* Select a unique section name for DECL.  RELOC is the same as\n        for SELECT_SECTION.  */\n     void (* unique_section) PARAMS ((tree, int));"}, {"sha": "a5fef332260d6bb6320eb86a02de97f516c64fc6", "filename": "gcc/varasm.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64a1b533c33a7fe86b6fde2dc99009032f9f810/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b64a1b533c33a7fe86b6fde2dc99009032f9f810", "patch": "@@ -3794,11 +3794,7 @@ output_constant_pool (fnname, fndecl)\n \t}\n \n       /* First switch to correct section.  */\n-#ifdef SELECT_RTX_SECTION\n-      SELECT_RTX_SECTION (pool->mode, x, pool->align);\n-#else\n-      readonly_data_section ();\n-#endif\n+      (*targetm.asm_out.select_rtx_section) (pool->mode, x, pool->align);\n \n #ifdef ASM_OUTPUT_SPECIAL_POOL_ENTRY\n       ASM_OUTPUT_SPECIAL_POOL_ENTRY (asm_out_file, x, pool->mode,\n@@ -5495,3 +5491,52 @@ default_unique_section (decl, reloc)\n \n   DECL_SECTION_NAME (decl) = build_string (nlen + plen, string);\n }\n+\n+void\n+default_select_rtx_section (mode, x, align)\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    switch (GET_CODE (x))\n+      {\n+      case CONST:\n+      case SYMBOL_REF:\n+      case LABEL_REF:\n+\tdata_section ();\n+\treturn;\n+\n+      default:\n+\tbreak;\n+      }\n+\n+  readonly_data_section ();\n+}\n+\n+void\n+default_elf_select_rtx_section (mode, x, align)\n+     enum machine_mode mode;\n+     rtx x;\n+     unsigned HOST_WIDE_INT align;\n+{\n+  /* ??? Handle small data here somehow.  */\n+\n+  if (flag_pic)\n+    switch (GET_CODE (x))\n+      {\n+      case CONST:\n+      case SYMBOL_REF:\n+\tnamed_section (NULL_TREE, \".data.rel.ro\", 3);\n+\treturn;\n+\n+      case LABEL_REF:\n+\tnamed_section (NULL_TREE, \".data.rel.ro.local\", 1);\n+\treturn;\n+\n+      default:\n+\tbreak;\n+      }\n+\n+  mergeable_constant_section (mode, align, 0);\n+}"}]}