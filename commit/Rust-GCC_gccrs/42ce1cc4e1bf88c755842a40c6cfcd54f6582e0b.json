{"sha": "42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjZTFjYzRlMWJmODhjNzU1ODQyYTQwYzZjZmNkNTRmNjU4MmUwYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-06-24T23:29:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-06-24T23:29:44Z"}, "message": "ira-int.h (SET_MINMAX_SET_BIT, [...]): Renamed from SET_ALLOCNO_SET_BIT...\n\n\t* ira-int.h (SET_MINMAX_SET_BIT, CLEAR_MINMAX_SET_BIT,\n\tTEST_MINMAX_SET_BIT, minmax_set_iterator, minmax_set_iter_init,\n\tminmax_set_iter_cond, minmax_set_iter_next,\n\tFOR_EACH_BIT_IN_MINMAX_SET): Renamed from SET_ALLOCNO_SET_BIT,\n\tCLEAR_ALLOCNO_SET_BIT, TEST_ALLOCNO_SET_BIT, ira_allocno_set_iterator,\n\tira_allocno_set_iter_init, ira_allocno_set_iter_cond,\n\tira_allocno_set_iter_Next and FOR_EACH_ALLOCNO_IN_ALLOCNO_SET.  All\n\tuses changed.\n\nFrom-SVN: r161349", "tree": {"sha": "1d086d88798270e1f3378e6639d6398931a423e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d086d88798270e1f3378e6639d6398931a423e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/comments", "author": null, "committer": null, "parents": [{"sha": "6300cb73c281c633428bad730b2db71843262a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6300cb73c281c633428bad730b2db71843262a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6300cb73c281c633428bad730b2db71843262a82"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "c73050f78cbc56952e088057dbc3d9552e324b35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "patch": "@@ -36,6 +36,15 @@\n \t* ira-color.c (assign_hard_reg): Improve formatting of multi-line for\n \tstatement.\n \n+\t* ira-int.h (SET_MINMAX_SET_BIT, CLEAR_MINMAX_SET_BIT,\n+\tTEST_MINMAX_SET_BIT, minmax_set_iterator, minmax_set_iter_init,\n+\tminmax_set_iter_cond, minmax_set_iter_next,\n+\tFOR_EACH_BIT_IN_MINMAX_SET): Renamed from SET_ALLOCNO_SET_BIT,\n+\tCLEAR_ALLOCNO_SET_BIT, TEST_ALLOCNO_SET_BIT, ira_allocno_set_iterator,\n+\tira_allocno_set_iter_init, ira_allocno_set_iter_cond,\n+\tira_allocno_set_iter_Next and FOR_EACH_ALLOCNO_IN_ALLOCNO_SET.  All\n+\tuses changed.\n+\n 2010-06-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* thumb2.md (thumb2_tlobits_cbranch): Delete."}, {"sha": "d6b92f4953190a45e8eefa22e2eecf1add386570", "filename": "gcc/ira-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "patch": "@@ -670,7 +670,7 @@ add_to_allocno_conflicts (ira_allocno_t a1, ira_allocno_t a2)\n \t    }\n \t  ALLOCNO_MAX (a1) = id;\n \t}\n-      SET_ALLOCNO_SET_BIT (vec, id, ALLOCNO_MIN (a1), ALLOCNO_MAX (a1));\n+      SET_MINMAX_SET_BIT (vec, id, ALLOCNO_MIN (a1), ALLOCNO_MAX (a1));\n     }\n }\n "}, {"sha": "aae3fa4e77e2035c838cadf9d48c0667271834e5", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "patch": "@@ -54,10 +54,10 @@ static IRA_INT_TYPE **conflicts;\n #define CONFLICT_ALLOCNO_P(A1, A2)\t\t\t\t\t\\\n   (ALLOCNO_MIN (A1) <= ALLOCNO_CONFLICT_ID (A2)\t\t\t\t\\\n    && ALLOCNO_CONFLICT_ID (A2) <= ALLOCNO_MAX (A1)\t\t\t\\\n-   && TEST_ALLOCNO_SET_BIT (conflicts[ALLOCNO_NUM (A1)],\t\t\\\n-\t  \t\t    ALLOCNO_CONFLICT_ID (A2),\t\t\t\\\n-\t\t\t    ALLOCNO_MIN (A1),\t\t\t\t\\\n-\t\t\t    ALLOCNO_MAX (A1)))\n+   && TEST_MINMAX_SET_BIT (conflicts[ALLOCNO_NUM (A1)],\t\t\t\\\n+\t\t\t   ALLOCNO_CONFLICT_ID (A2),\t\t\t\\\n+\t\t\t   ALLOCNO_MIN (A1),\t\t\t\t\\\n+\t\t\t   ALLOCNO_MAX (A1)))\n \n \f\n \n@@ -142,13 +142,13 @@ build_conflict_bit_table (void)\n \t\t  /* Don't set up conflict for the allocno with itself.  */\n \t\t  && num != (int) j)\n \t\t{\n-\t\t  SET_ALLOCNO_SET_BIT (conflicts[num],\n-\t\t\t\t       ALLOCNO_CONFLICT_ID (live_a),\n-\t\t\t\t       ALLOCNO_MIN (allocno),\n-\t\t\t\t       ALLOCNO_MAX (allocno));\n-\t\t  SET_ALLOCNO_SET_BIT (conflicts[j], id,\n-\t\t\t\t       ALLOCNO_MIN (live_a),\n-\t\t\t\t       ALLOCNO_MAX (live_a));\n+\t\t  SET_MINMAX_SET_BIT (conflicts[num],\n+\t\t\t\t      ALLOCNO_CONFLICT_ID (live_a),\n+\t\t\t\t      ALLOCNO_MIN (allocno),\n+\t\t\t\t      ALLOCNO_MAX (allocno));\n+\t\t  SET_MINMAX_SET_BIT (conflicts[j], id,\n+\t\t\t\t      ALLOCNO_MIN (live_a),\n+\t\t\t\t      ALLOCNO_MAX (live_a));\n \t\t}\n \t    }\n \t}\n@@ -560,12 +560,12 @@ build_allocno_conflicts (ira_allocno_t a)\n   ira_allocno_t parent_a, another_a, another_parent_a;\n   ira_allocno_t *vec;\n   IRA_INT_TYPE *allocno_conflicts;\n-  ira_allocno_set_iterator asi;\n+  minmax_set_iterator asi;\n \n   allocno_conflicts = conflicts[ALLOCNO_NUM (a)];\n   px = 0;\n-  FOR_EACH_ALLOCNO_IN_SET (allocno_conflicts,\n-\t\t\t   ALLOCNO_MIN (a), ALLOCNO_MAX (a), i, asi)\n+  FOR_EACH_BIT_IN_MINMAX_SET (allocno_conflicts,\n+\t\t\t      ALLOCNO_MIN (a), ALLOCNO_MAX (a), i, asi)\n     {\n       another_a = ira_conflict_id_allocno_map[i];\n       ira_assert (ira_reg_classes_intersect_p\n@@ -597,8 +597,8 @@ build_allocno_conflicts (ira_allocno_t a)\n     return;\n   ira_assert (ALLOCNO_COVER_CLASS (a) == ALLOCNO_COVER_CLASS (parent_a));\n   parent_num = ALLOCNO_NUM (parent_a);\n-  FOR_EACH_ALLOCNO_IN_SET (allocno_conflicts,\n-\t\t\t   ALLOCNO_MIN (a), ALLOCNO_MAX (a), i, asi)\n+  FOR_EACH_BIT_IN_MINMAX_SET (allocno_conflicts,\n+\t\t\t      ALLOCNO_MIN (a), ALLOCNO_MAX (a), i, asi)\n     {\n       another_a = ira_conflict_id_allocno_map[i];\n       ira_assert (ira_reg_classes_intersect_p\n@@ -609,10 +609,10 @@ build_allocno_conflicts (ira_allocno_t a)\n       ira_assert (ALLOCNO_NUM (another_parent_a) >= 0);\n       ira_assert (ALLOCNO_COVER_CLASS (another_a)\n \t\t  == ALLOCNO_COVER_CLASS (another_parent_a));\n-      SET_ALLOCNO_SET_BIT (conflicts[parent_num],\n-\t\t\t   ALLOCNO_CONFLICT_ID (another_parent_a),\n-\t\t\t   ALLOCNO_MIN (parent_a),\n-\t\t\t   ALLOCNO_MAX (parent_a));\n+      SET_MINMAX_SET_BIT (conflicts[parent_num],\n+\t\t\t  ALLOCNO_CONFLICT_ID (another_parent_a),\n+\t\t\t  ALLOCNO_MIN (parent_a),\n+\t\t\t  ALLOCNO_MAX (parent_a));\n     }\n }\n "}, {"sha": "e17bb3ddaa616ba5c70851cadd95c6e8679af0a4", "filename": "gcc/ira-int.h", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "patch": "@@ -567,10 +567,16 @@ extern int ira_move_loops_num, ira_additional_jumps_num;\n \n /* Maximal value of element of array ira_reg_class_nregs.  */\n extern int ira_max_nregs;\n-\n-/* The number of bits in each element of array used to implement a bit\n-   vector of allocnos and what type that element has.  We use the\n-   largest integer format on the host machine.  */\n+\f\n+/* This page contains a bitset implementation called 'min/max sets' used to\n+   record conflicts in IRA.\n+   They are named min/maxs set since we keep track of a minimum and a maximum\n+   bit number for each set representing the bounds of valid elements.  Otherwise,\n+   the implementation resembles sbitmaps in that we store an array of integers\n+   whose bits directly represent the members of the set.  */\n+\n+/* The type used as elements in the array, and the number of bits in\n+   this type.  */\n #define IRA_INT_BITS HOST_BITS_PER_WIDE_INT\n #define IRA_INT_TYPE HOST_WIDE_INT\n \n@@ -579,7 +585,7 @@ extern int ira_max_nregs;\n    MAX.  */\n #if defined ENABLE_IRA_CHECKING && (GCC_VERSION >= 2007)\n \n-#define SET_ALLOCNO_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n+#define SET_MINMAX_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n   (({ int _min = (MIN), _max = (MAX), _i = (I);\t\t\t\t\\\n      if (_i < _min || _i > _max)\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n@@ -592,7 +598,7 @@ extern int ira_max_nregs;\n       |= ((IRA_INT_TYPE) 1 << ((unsigned) (_i - _min) % IRA_INT_BITS))); }))\n \n \n-#define CLEAR_ALLOCNO_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n+#define CLEAR_MINMAX_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n   (({ int _min = (MIN), _max = (MAX), _i = (I);\t\t\t\t\\\n      if (_i < _min || _i > _max)\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n@@ -604,7 +610,7 @@ extern int ira_max_nregs;\n      ((R)[(unsigned) (_i - _min) / IRA_INT_BITS]\t\t\t\\\n       &= ~((IRA_INT_TYPE) 1 << ((unsigned) (_i - _min) % IRA_INT_BITS))); }))\n \n-#define TEST_ALLOCNO_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n+#define TEST_MINMAX_SET_BIT(R, I, MIN, MAX) __extension__\t        \\\n   (({ int _min = (MIN), _max = (MAX), _i = (I);\t\t\t\t\\\n      if (_i < _min || _i > _max)\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n@@ -618,25 +624,24 @@ extern int ira_max_nregs;\n \n #else\n \n-#define SET_ALLOCNO_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n+#define SET_MINMAX_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n   ((R)[(unsigned) ((I) - (MIN)) / IRA_INT_BITS]\t\t\t\\\n    |= ((IRA_INT_TYPE) 1 << ((unsigned) ((I) - (MIN)) % IRA_INT_BITS)))\n \n-#define CLEAR_ALLOCNO_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n+#define CLEAR_MINMAX_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n   ((R)[(unsigned) ((I) - (MIN)) / IRA_INT_BITS]\t\t\t\\\n    &= ~((IRA_INT_TYPE) 1 << ((unsigned) ((I) - (MIN)) % IRA_INT_BITS)))\n \n-#define TEST_ALLOCNO_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n+#define TEST_MINMAX_SET_BIT(R, I, MIN, MAX)\t\t\t\\\n   ((R)[(unsigned) ((I) - (MIN)) / IRA_INT_BITS]\t\t\t\\\n    & ((IRA_INT_TYPE) 1 << ((unsigned) ((I) - (MIN)) % IRA_INT_BITS)))\n \n #endif\n \n-/* The iterator for allocno set implemented ed as allocno bit\n-   vector.  */\n+/* The iterator for min/max sets.  */\n typedef struct {\n \n-  /* Array containing the allocno bit vector.  */\n+  /* Array containing the bit vector.  */\n   IRA_INT_TYPE *vec;\n \n   /* The number of the current element in the vector.  */\n@@ -653,13 +658,13 @@ typedef struct {\n \n   /* The word of the bit vector currently visited.  */\n   unsigned IRA_INT_TYPE word;\n-} ira_allocno_set_iterator;\n+} minmax_set_iterator;\n \n-/* Initialize the iterator I for allocnos bit vector VEC containing\n-   minimal and maximal values MIN and MAX.  */\n+/* Initialize the iterator I for bit vector VEC containing minimal and\n+   maximal values MIN and MAX.  */\n static inline void\n-ira_allocno_set_iter_init (ira_allocno_set_iterator *i,\n-\t\t\t   IRA_INT_TYPE *vec, int min, int max)\n+minmax_set_iter_init (minmax_set_iterator *i, IRA_INT_TYPE *vec, int min,\n+\t\t      int max)\n {\n   i->vec = vec;\n   i->word_num = 0;\n@@ -669,11 +674,11 @@ ira_allocno_set_iter_init (ira_allocno_set_iterator *i,\n   i->word = i->nel == 0 ? 0 : vec[0];\n }\n \n-/* Return TRUE if we have more allocnos to visit, in which case *N is\n-   set to the allocno number to be visited.  Otherwise, return\n+/* Return TRUE if we have more elements to visit, in which case *N is\n+   set to the number of the element to be visited.  Otherwise, return\n    FALSE.  */\n static inline bool\n-ira_allocno_set_iter_cond (ira_allocno_set_iterator *i, int *n)\n+minmax_set_iter_cond (minmax_set_iterator *i, int *n)\n {\n   /* Skip words that are zeros.  */\n   for (; i->word == 0; i->word = i->vec[i->word_num])\n@@ -695,23 +700,23 @@ ira_allocno_set_iter_cond (ira_allocno_set_iterator *i, int *n)\n   return true;\n }\n \n-/* Advance to the next allocno in the set.  */\n+/* Advance to the next element in the set.  */\n static inline void\n-ira_allocno_set_iter_next (ira_allocno_set_iterator *i)\n+minmax_set_iter_next (minmax_set_iterator *i)\n {\n   i->word >>= 1;\n   i->bit_num++;\n }\n \n-/* Loop over all elements of allocno set given by bit vector VEC and\n+/* Loop over all elements of a min/max set given by bit vector VEC and\n    their minimal and maximal values MIN and MAX.  In each iteration, N\n    is set to the number of next allocno.  ITER is an instance of\n-   ira_allocno_set_iterator used to iterate the allocnos in the set.  */\n-#define FOR_EACH_ALLOCNO_IN_SET(VEC, MIN, MAX, N, ITER)\t\t\\\n-  for (ira_allocno_set_iter_init (&(ITER), (VEC), (MIN), (MAX));\t\\\n-       ira_allocno_set_iter_cond (&(ITER), &(N));\t\t\t\\\n-       ira_allocno_set_iter_next (&(ITER)))\n-\n+   minmax_set_iterator used to iterate over the set.  */\n+#define FOR_EACH_BIT_IN_MINMAX_SET(VEC, MIN, MAX, N, ITER)\t\\\n+  for (minmax_set_iter_init (&(ITER), (VEC), (MIN), (MAX));\t\\\n+       minmax_set_iter_cond (&(ITER), &(N));\t\t\t\\\n+       minmax_set_iter_next (&(ITER)))\n+\f\n /* ira.c: */\n \n /* Map: hard regs X modes -> set of hard registers for storing value"}]}