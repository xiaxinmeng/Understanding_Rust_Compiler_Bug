{"sha": "dbc293c8e4f11e261c89366701fc7a982ef8d39a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjMjkzYzhlNGYxMWUyNjFjODkzNjY3MDFmYzdhOTgyZWY4ZDM5YQ==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-09-06T16:39:58Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2007-09-06T16:39:58Z"}, "message": "boehm.c: Don't use bitmap as gc_descr if pointer is misaligned.\n\ngcc/java/\n\n2007-09-06  Roman Zippel  <zippel@linux-m68k.org>\n\n        * boehm.c: Don't use bitmap as gc_descr if pointer is misaligned.\n\nlibjava/\n\n2007-09-06  Roman Zippel  <zippel@linux-m68k.org>\n\n        * sysdep/m68k/locks.h: New file.\n        * configure.host: Set sysdeps_dir and libgcj_interpreter for m68k.\n        * configure.ac: Set SIGNAL_HANDLER for m68*-*-linux*.\n        * configure: Regenerate.\n\nFrom-SVN: r128191", "tree": {"sha": "347b39da00d758b1bf1ed403b8a4b9f503e5c2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347b39da00d758b1bf1ed403b8a4b9f503e5c2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbc293c8e4f11e261c89366701fc7a982ef8d39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc293c8e4f11e261c89366701fc7a982ef8d39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc293c8e4f11e261c89366701fc7a982ef8d39a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc293c8e4f11e261c89366701fc7a982ef8d39a/comments", "author": null, "committer": null, "parents": [{"sha": "5ffeb913b1a455fe79c1c116fc75f09c21194815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffeb913b1a455fe79c1c116fc75f09c21194815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffeb913b1a455fe79c1c116fc75f09c21194815"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "42b0e49985990f5cc95115a98a56301c9b7c7a40", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -1,3 +1,7 @@\n+2007-09-06  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\t* boehm.c: Don't use bitmap as gc_descr if pointer is misaligned.\n+\n 2007-09-06  Tom Tromey  <tromey@redhat.com>\n \n \t* lang.c (java_post_options): Update."}, {"sha": "c44c620095163f30121c5bbbcdf6c1370cebc1b4", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -97,6 +97,14 @@ mark_reference_fields (tree field,\n \n       offset = int_byte_position (field);\n       size_bytes = int_size_in_bytes (TREE_TYPE (field));\n+\n+      if (offset % (POINTER_SIZE / BITS_PER_UNIT))\n+\t{\n+\t  *all_bits_set = -1;\n+\t  *pointer_after_end = 1;\n+\t  break;\n+\t}\n+\n       if (JREFERENCE_TYPE_P (TREE_TYPE (field))\n \t  /* An `object' of type gnu.gcj.RawData is actually non-Java\n \t     data.  */"}, {"sha": "ab17f017cac8e655f9a545c2e2d30b8f9e96caf3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -1,3 +1,10 @@\n+2007-09-06  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\t* sysdep/m68k/locks.h: New file.\n+\t* configure.host: Set sysdeps_dir and libgcj_interpreter for m68k.\n+\t* configure.ac: Set SIGNAL_HANDLER for m68*-*-linux*.\n+\t* configure: Regenerate.\n+\n 2007-09-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure.host(gnu*): Set use_libgcj_bc to yes."}, {"sha": "77fcb0261e6cdbedcb1e7f6ada86ae41176bb4ab", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -27265,6 +27265,9 @@ case \"${host}\" in\n  mips*-*-linux*)\n     SIGNAL_HANDLER=include/mips-signal.h\n     ;;\n+ m68*-*-linux*)\n+    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    ;;\n  powerpc*-*-darwin*)\n     SIGNAL_HANDLER=include/darwin-signal.h\n     ;;"}, {"sha": "6d06ec6cb286875940793cbb07ec9f5fd02a7b42", "filename": "libjava/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -1543,6 +1543,9 @@ case \"${host}\" in\n  mips*-*-linux*)\n     SIGNAL_HANDLER=include/mips-signal.h\n     ;;\n+ m68*-*-linux*)\n+    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    ;;\n  powerpc*-*-darwin*)\n     SIGNAL_HANDLER=include/darwin-signal.h\n     ;;"}, {"sha": "192272d8c26e661124b94cbd6d62108669d3bf56", "filename": "libjava/configure.host", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -146,6 +146,10 @@ case \"${host}\" in\n \tlibgcj_interpreter=yes\n \tenable_hash_synchronization_default=no\n \t;;\n+  m68k-*)\n+\tsysdeps_dir=m68k\n+\tlibgcj_interpreter=yes\n+\t;;\n   powerpc64*-*)\n \tsysdeps_dir=powerpc\n \tlibgcj_interpreter=yes\n@@ -202,6 +206,7 @@ case \"${host}\" in\n   ia64-* | \\\n   x86_64*-linux* | \\\n   hppa*-linux* | \\\n+  m68k*-linux* | \\\n   sh-linux* | sh[34]*-linux*)\n   \tcan_unwind_signal=yes\n \tlibgcj_ld_symbolic='-Wl,-Bsymbolic'"}, {"sha": "d70757a8cd0ca3b88961af56e1085adf12224341", "filename": "libjava/sysdep/m68k/locks.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fsysdep%2Fm68k%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc293c8e4f11e261c89366701fc7a982ef8d39a/libjava%2Fsysdep%2Fm68k%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fm68k%2Flocks.h?ref=dbc293c8e4f11e261c89366701fc7a982ef8d39a", "patch": "@@ -0,0 +1,72 @@\n+// locks.h - Thread synchronization primitives. m68k implementation.\n+\n+/* Copyright (C) 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+/* Integer type big enough for object address.  */\n+typedef size_t obj_addr_t __attribute__ ((aligned (4)));\n+\n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n+static inline bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+\t\t obj_addr_t old, obj_addr_t new_val)\n+{\n+  char result;\n+  __asm__ __volatile__(\"cas.l %2,%3,%0; seq %1\"\n+\t      \t: \"+m\" (*addr), \"=d\" (result), \"+d\" (old)\n+\t\t: \"d\" (new_val)\n+\t\t: \"memory\");\n+  return (bool) result;\n+}\n+\n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n+// On m68k, the hardware shouldn't reorder reads and writes,\n+// so we just have to convince gcc not to do it either.\n+static inline void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n+  *(addr) = new_val;\n+}\n+\n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n+static inline bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n+{\n+  return compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+// On m68k, the hardware ensures that reads are properly ordered.\n+static inline void\n+read_barrier(void)\n+{\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+static inline void\n+write_barrier(void)\n+{\n+  // m68k does not reorder writes. We just need to ensure that gcc also doesn't.\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n+}\n+#endif"}]}