{"sha": "7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NhOTI3ODc4NjJkMWI2Y2FlM2ZiZGE2ODVjMWRkZjIwMDllNzNiMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-28T13:03:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-28T13:03:31Z"}, "message": "final.c (rest_of_clean_state): Use %m in errors instead of strerror (errno).\n\n\t* final.c (rest_of_clean_state): Use %m in errors instead of\n\tstrerror (errno).\n\t* gengtype.c (read_input_list, close_output_files): Use xstrerror\n\tinstead of strerror.\n\t* toplev.c (process_options): Use %m in errors instead of strerror\n\t(errno).\n\t* tree-dump.c (dump_begin): Use %m in errors instead of strerror\n\t(errno).\n\nfortran:\n\t* cpp.c (gfc_cpp_init_0): Use xstrerror instead of strerror.\n\t* module.c (write_char, gfc_dump_module, gfc_use_module): Use\n\txstrerror instead of strerror.\n\nlto:\n\t* lto-coff.c (coff_errmsg): Remove.\n\t(lto_coff_begin_section_with_type, lto_obj_append_data): Use %m in\n\terrors instead of coff_errmsg (-1).\n\t* lto-macho.c (mach_o_errmsg): Remove.\n\t(lto_obj_begin_section, lto_obj_append_data): Use %m in errors\n\tinstead of mach_o_errmsg (-1).\n\t* lto.c (read_cgraph_and_symbols): Use %m in errors instead of\n\txstrerror (errno).\n\nFrom-SVN: r159969", "tree": {"sha": "065aff3d1d01e48c7777eadaa47358832eb00cb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065aff3d1d01e48c7777eadaa47358832eb00cb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf85f21b3a0180e286e2e32de3dd7f266729baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf85f21b3a0180e286e2e32de3dd7f266729baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf85f21b3a0180e286e2e32de3dd7f266729baf"}], "stats": {"total": 112, "additions": 61, "deletions": 51}, "files": [{"sha": "9afbc7e09a8ab07f3671e9cd98cc980f3e803ce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,3 +1,14 @@\n+2010-05-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* final.c (rest_of_clean_state): Use %m in errors instead of\n+\tstrerror (errno).\n+\t* gengtype.c (read_input_list, close_output_files): Use xstrerror\n+\tinstead of strerror.\n+\t* toplev.c (process_options): Use %m in errors instead of strerror\n+\t(errno).\n+\t* tree-dump.c (dump_begin): Use %m in errors instead of strerror\n+\t(errno).\n+\n 2010-05-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_fn_abi_va_list): Make static."}, {"sha": "44f02adb0f43ebf1de173062fb5150eae140b239", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -4363,8 +4363,8 @@ rest_of_clean_state (void)\n       final_output = fopen (flag_dump_final_insns, \"a\");\n       if (!final_output)\n \t{\n-\t  error (\"could not open final insn dump file %qs: %s\",\n-\t\t flag_dump_final_insns, strerror (errno));\n+\t  error (\"could not open final insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n       else\n@@ -4424,8 +4424,8 @@ rest_of_clean_state (void)\n \n       if (fclose (final_output))\n \t{\n-\t  error (\"could not close final insn dump file %qs: %s\",\n-\t\t flag_dump_final_insns, strerror (errno));\n+\t  error (\"could not close final insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n     }"}, {"sha": "00fc06eff3ab9d16c6ff5f6de3d9d529b532a9ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,3 +1,9 @@\n+2010-05-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpp.c (gfc_cpp_init_0): Use xstrerror instead of strerror.\n+\t* module.c (write_char, gfc_dump_module, gfc_use_module): Use\n+\txstrerror instead of strerror.\n+\n 2010-05-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cpp.c (cb_cpp_error): Save and restore"}, {"sha": "8dbd157deaa8867e76bed025c6fcee811ba08a0a", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -523,7 +523,8 @@ gfc_cpp_init_0 (void)\n \t  print.outf = fopen (gfc_cpp_option.output_filename, \"w\");\n \t  if (print.outf == NULL)\n \t    gfc_fatal_error (\"opening output file %s: %s\",\n-\t\t\t     gfc_cpp_option.output_filename, strerror(errno));\n+\t\t\t     gfc_cpp_option.output_filename,\n+\t\t\t     xstrerror (errno));\n \t}\n       else\n \tprint.outf = stdout;\n@@ -533,7 +534,7 @@ gfc_cpp_init_0 (void)\n       print.outf = fopen (gfc_cpp_option.temporary_filename, \"w\");\n       if (print.outf == NULL)\n \tgfc_fatal_error (\"opening output file %s: %s\",\n-\t\t\t gfc_cpp_option.temporary_filename, strerror(errno));\n+\t\t\t gfc_cpp_option.temporary_filename, xstrerror (errno));\n     }\n \n   gcc_assert(cpp_in);"}, {"sha": "9bdee2a60f0ebdd45cb0959dc5523d0886cbc8e3", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1299,7 +1299,7 @@ static void\n write_char (char out)\n {\n   if (putc (out, module_fp) == EOF)\n-    gfc_fatal_error (\"Error writing modules file: %s\", strerror (errno));\n+    gfc_fatal_error (\"Error writing modules file: %s\", xstrerror (errno));\n \n   /* Add this to our MD5.  */\n   md5_process_bytes (&out, sizeof (out), &ctx);\n@@ -5124,7 +5124,7 @@ gfc_dump_module (const char *name, int dump_flag)\n   module_fp = fopen (filename_tmp, \"w\");\n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for writing at %C: %s\",\n-\t\t     filename_tmp, strerror (errno));\n+\t\t     filename_tmp, xstrerror (errno));\n \n   /* Write the header, including space reserved for the MD5 sum.  */\n   now = time (NULL);\n@@ -5162,7 +5162,7 @@ gfc_dump_module (const char *name, int dump_flag)\n \n   if (fclose (module_fp))\n     gfc_fatal_error (\"Error writing module file '%s' for writing: %s\",\n-\t\t     filename_tmp, strerror (errno));\n+\t\t     filename_tmp, xstrerror (errno));\n \n   /* Read the MD5 from the header of the old module file and compare.  */\n   if (read_md5_from_module_file (filename, md5_old) != 0\n@@ -5171,16 +5171,16 @@ gfc_dump_module (const char *name, int dump_flag)\n       /* Module file have changed, replace the old one.  */\n       if (unlink (filename) && errno != ENOENT)\n \tgfc_fatal_error (\"Can't delete module file '%s': %s\", filename,\n-\t\t\t strerror (errno));\n+\t\t\t xstrerror (errno));\n       if (rename (filename_tmp, filename))\n \tgfc_fatal_error (\"Can't rename module file '%s' to '%s': %s\",\n-\t\t\t filename_tmp, filename, strerror (errno));\n+\t\t\t filename_tmp, filename, xstrerror (errno));\n     }\n   else\n     {\n       if (unlink (filename_tmp))\n \tgfc_fatal_error (\"Can't delete temporary module file '%s': %s\",\n-\t\t\t filename_tmp, strerror (errno));\n+\t\t\t filename_tmp, xstrerror (errno));\n     }\n }\n \n@@ -5530,7 +5530,7 @@ gfc_use_module (void)\n \n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for reading at %C: %s\",\n-\t\t     filename, strerror (errno));\n+\t\t     filename, xstrerror (errno));\n \n   /* Check that we haven't already USEd an intrinsic module with the\n      same name.  */"}, {"sha": "65bb8d1cfc8ad9ccdf02aa491816010d611e3f3f", "filename": "gcc/gengtype.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,5 +1,5 @@\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -392,7 +392,7 @@ read_input_list (const char *listname)\n {\n   FILE *list = fopen (listname, \"r\");\n   if (!list)\n-    fatal (\"cannot open %s: %s\", listname, strerror (errno));\n+    fatal (\"cannot open %s: %s\", listname, xstrerror (errno));\n   else\n     {\n       struct fileloc epos;\n@@ -508,7 +508,7 @@ read_input_list (const char *listname)\n   }\n \n   if (ferror (list))\n-    fatal (\"error reading %s: %s\", listname, strerror (errno));\n+    fatal (\"error reading %s: %s\", listname, xstrerror (errno));\n \n   fclose (list);\n }\n@@ -1838,11 +1838,11 @@ close_output_files (void)\n       {\n         FILE *newfile = fopen (of->name, \"w\");\n         if (newfile == NULL)\n-          fatal (\"opening output file %s: %s\", of->name, strerror (errno));\n+          fatal (\"opening output file %s: %s\", of->name, xstrerror (errno));\n         if (fwrite (of->buf, 1, of->bufused, newfile) != of->bufused)\n-          fatal (\"writing output file %s: %s\", of->name, strerror (errno));\n+          fatal (\"writing output file %s: %s\", of->name, xstrerror (errno));\n         if (fclose (newfile) != 0)\n-          fatal (\"closing output file %s: %s\", of->name, strerror (errno));\n+          fatal (\"closing output file %s: %s\", of->name, xstrerror (errno));\n       }\n       free(of->buf);\n       of->buf = NULL;"}, {"sha": "fd70eff732113d0355780b58250fc7c7aa4c157e", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,3 +1,14 @@\n+2010-05-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-coff.c (coff_errmsg): Remove.\n+\t(lto_coff_begin_section_with_type, lto_obj_append_data): Use %m in\n+\terrors instead of coff_errmsg (-1).\n+\t* lto-macho.c (mach_o_errmsg): Remove.\n+\t(lto_obj_begin_section, lto_obj_append_data): Use %m in errors\n+\tinstead of mach_o_errmsg (-1).\n+\t* lto.c (read_cgraph_and_symbols): Use %m in errors instead of\n+\txstrerror (errno).\n+\n 2010-05-28  Richard Guenther  <rguenther@suse.de>\n \n \t* lto.c (prefix_name_with_star): Removed."}, {"sha": "0eca8936d205b5c72d530fa4886462e2e10696f5", "filename": "gcc/lto/lto-coff.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto-coff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto-coff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-coff.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,5 +1,5 @@\n /* LTO routines for COFF object files.\n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Dave Korn.\n \n This file is part of GCC.\n@@ -133,15 +133,6 @@ lto_file_init (lto_file *file, const char *filename, off_t offset)\n   file->offset = offset;\n }\n \n-/* Return an error string after an error, or a predetermined one\n-   if ERRCODE is not -1.  */\n-\n-static const char *\n-coff_errmsg (int errcode)\n-{\n-  return strerror (errcode == -1 ? errno : errcode);\n-}\n-\n /* Returns a hash code for P.  */\n \n static hashval_t\n@@ -273,7 +264,7 @@ lto_coff_begin_section_with_type (const char *name, size_t type)\n   /* Create a new section.  */\n   file->scn = coff_newsection (file, name, type);\n   if (!file->scn)\n-    fatal_error (\"could not create a new COFF section: %s\", coff_errmsg (-1));\n+    fatal_error (\"could not create a new COFF section: %m\");\n \n   /* Add a string table entry and record the offset.  */\n   gcc_assert (file->shstrtab_stream);\n@@ -312,7 +303,7 @@ lto_obj_append_data (const void *data, size_t len, void *block)\n \n   coff_data = coff_newdata (file->scn);\n   if (!coff_data)\n-    fatal_error (\"could not append data to COFF section: %s\", coff_errmsg (-1));\n+    fatal_error (\"could not append data to COFF section: %m\");\n \n   coff_data->d_buf = CONST_CAST (void *, data);\n   coff_data->d_size = len;"}, {"sha": "1ba74c0a3a0d281a986dc140ea96454a71c7f185", "filename": "gcc/lto/lto-macho.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto-macho.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto-macho.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-macho.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -140,15 +140,6 @@ lto_file_init (lto_file *file, const char *filename, off_t offset)\n   file->offset = offset;\n }\n \n-/* Return an error string after an error, or a predetermined one\n-   if ERRCODE is not -1.  */\n-\n-static const char *\n-mach_o_errmsg (int errcode)\n-{\n-  return strerror (errcode == -1 ? errno : errcode);\n-}\n-\n /* Returns a hash code for P.  */\n \n static hashval_t\n@@ -321,7 +312,7 @@ lto_obj_begin_section (const char *name)\n   /* Create a new section.  */\n   file->scn = mach_o_new_section (file, name);\n   if (!file->scn)\n-    fatal_error (\"could not create a new Mach-O section: %s\", mach_o_errmsg (-1));\n+    fatal_error (\"could not create a new Mach-O section: %m\");\n }\n \n \n@@ -343,7 +334,7 @@ lto_obj_append_data (const void *data, size_t len, void *block)\n \n   mach_o_data = mach_o_new_data (file->scn);\n   if (!mach_o_data)\n-    fatal_error (\"could not append data to Mach-O section: %s\", mach_o_errmsg (-1));\n+    fatal_error (\"could not append data to Mach-O section: %m\");\n \n   mach_o_data->d_buf = CONST_CAST (void *, data);\n   mach_o_data->d_size = len;"}, {"sha": "4ed6e20f690e9238d9c4d5f4091b876caa5866a2", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1481,8 +1481,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n \n       resolution = fopen (resolution_file_name, \"r\");\n       if (resolution == NULL)\n-\tfatal_error (\"could not open symbol resolution file: %s\",\n-\t\t     xstrerror (errno));\n+\tfatal_error (\"could not open symbol resolution file: %m\");\n \n       t = fscanf (resolution, \"%u\", &num_objects);\n       gcc_assert (t == 1);"}, {"sha": "dc677a3080c86649d9b92cd4e1ca64bfbad689ba", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1948,14 +1948,14 @@ process_options (void)\n       FILE *final_output = fopen (flag_dump_final_insns, \"w\");\n       if (!final_output)\n \t{\n-\t  error (\"could not open final insn dump file %qs: %s\",\n-\t\t flag_dump_final_insns, strerror (errno));\n+\t  error (\"could not open final insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n       else if (fclose (final_output))\n \t{\n-\t  error (\"could not close zeroed insn dump file %qs: %s\",\n-\t\t flag_dump_final_insns, strerror (errno));\n+\t  error (\"could not close zeroed insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n     }"}, {"sha": "c159fcadca828b4bd12f13ce4e0216f99111c342", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca92787862d1b6cae3fbda685c1ddf2009e73b3/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=7ca92787862d1b6cae3fbda685c1ddf2009e73b3", "patch": "@@ -1,6 +1,6 @@\n /* Tree-dumping functionality for intermediate representation.\n-   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>\n \n This file is part of GCC.\n@@ -926,7 +926,7 @@ dump_begin (int phase, int *flag_ptr)\n   dfi = get_dump_file_info (phase);\n   stream = fopen (name, dfi->state < 0 ? \"w\" : \"a\");\n   if (!stream)\n-    error (\"could not open dump file %qs: %s\", name, strerror (errno));\n+    error (\"could not open dump file %qs: %m\", name);\n   else\n     dfi->state = 1;\n   free (name);"}]}