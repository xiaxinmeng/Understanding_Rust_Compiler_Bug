{"sha": "f8fb7295298da14f3ae81d27f9c926ede96d466a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmYjcyOTUyOThkYTE0ZjNhZTgxZDI3ZjljOTI2ZWRlOTZkNDY2YQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-01-11T21:20:07Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-01-11T21:20:07Z"}, "message": "re PR debug/46955 (Missing DW_AT_const_value from DW_TAG_template_value_parameter)\n\nFix PR debug/46955\n\ngcc/cp/\n\n\t* cp-lang.c (get_template_innermost_arguments_folded)\n\t(get_template_argument_pack_elems_folded)\n\t(template_arg_needs_folding, fold_cplus_constants): New static\n\tfunctions.\n\t(LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS): Set this hook to\n\tget_template_innermost_arguments_folded.\n\t(LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS): Set this hook to\n\tget_template_argument_pack_elems_folded.\n\ngcc/testsuite/\n\n\t* g++.dg/debug/dwarf2/template-params-8.C: New test.\n\nFrom-SVN: r168681", "tree": {"sha": "b4919cd666c7d15bbfab15b801b4cb125555091a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4919cd666c7d15bbfab15b801b4cb125555091a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8fb7295298da14f3ae81d27f9c926ede96d466a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fb7295298da14f3ae81d27f9c926ede96d466a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8fb7295298da14f3ae81d27f9c926ede96d466a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fb7295298da14f3ae81d27f9c926ede96d466a/comments", "author": null, "committer": null, "parents": [{"sha": "dc6715320db92089b3c1b046157b56b5680738a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6715320db92089b3c1b046157b56b5680738a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6715320db92089b3c1b046157b56b5680738a5"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "95b8d183bf1753b40e2e05caf7e0bf40cbe7e522", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8fb7295298da14f3ae81d27f9c926ede96d466a", "patch": "@@ -1,3 +1,15 @@\n+2011-01-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/46955\n+\t* cp-lang.c (get_template_innermost_arguments_folded)\n+\t(get_template_argument_pack_elems_folded)\n+\t(template_arg_needs_folding, fold_cplus_constants): New static\n+\tfunctions.\n+\t(LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS): Set this hook to\n+\tget_template_innermost_arguments_folded.\n+\t(LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS): Set this hook to\n+\tget_template_argument_pack_elems_folded.\n+\n 2011-01-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46658"}, {"sha": "e5c1c0911df6fc928b4297971501593fe05c08d1", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=f8fb7295298da14f3ae81d27f9c926ede96d466a", "patch": "@@ -38,6 +38,8 @@ static void cp_init_ts (void);\n static const char * cxx_dwarf_name (tree t, int verbosity);\n static enum classify_record cp_classify_record (tree type);\n static tree cp_eh_personality (void);\n+static tree get_template_innermost_arguments_folded (const_tree);\n+static tree get_template_argument_pack_elems_folded (const_tree);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -56,13 +58,13 @@ static tree cp_eh_personality (void);\n \tget_primary_template_innermost_parameters\n #undef LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS\n #define LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS \\\n-\tget_template_innermost_arguments\n+\tget_template_innermost_arguments_folded\n #undef LANG_HOOKS_FUNCTION_PARAMETER_PACK_P\n #define LANG_HOOKS_FUNCTION_PARAMETER_PACK_P \\\n \tfunction_parameter_pack_p\n #undef LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS\n #define LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS \\\n-\tget_template_argument_pack_elems\n+\tget_template_argument_pack_elems_folded\n #undef LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P\n #define LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P \\\n \ttemplate_template_parameter_p\n@@ -165,5 +167,76 @@ cp_eh_personality (void)\n   return cp_eh_personality_decl;\n }\n \n+/* This is a subroutine of fold_cplus_constants.  It returns TRUE if T\n+   is a C++ specific constant that needs to be folded further before\n+   being passed to the debug info emitter.  */\n+\n+static bool\n+template_arg_needs_folding (const_tree t)\n+{\n+  /* For now only PTRMEM_CST nodes are to be folded further.  */\n+  if (TREE_CODE (t) == PTRMEM_CST)\n+    return true;\n+  return false;\n+}\n+\n+/* Fold the elements of the TREE_VEC C which are C++ specific nodes\n+   that would need folding so that they can be processed by the debug\n+   info emitter. This is a subroutine of\n+   get_template_innermost_arguments_folded and\n+   get_template_argument_pack_elems_folded.  */\n+\n+static tree\n+fold_cplus_constants (const_tree c)\n+{\n+  tree folded_elems, elems = CONST_CAST_TREE (c);\n+  int vec_len, i;\n+\n+  if (elems == NULL_TREE || elems == error_mark_node)\n+    return elems;\n+\n+  vec_len = TREE_VEC_LENGTH (elems);\n+\n+  /* First check if there is at least one element that needs\n+     folding. If there is none, we just return ELEMS. Otherwise create\n+     and return a new tree vector that contains the folded versions of\n+     ELEMS. This is to avoid allocating memory if we don't need\n+     to.  */\n+  for (i = 0; i < vec_len; ++i)\n+    {\n+      if (template_arg_needs_folding (TREE_VEC_ELT (elems, i)))\n+\tbreak;\n+    }\n+  if (i == vec_len)\n+    return elems;\n+\n+  folded_elems = make_tree_vec (vec_len);\n+  for (i = 0; i < vec_len; ++i)\n+    {\n+      tree elem = TREE_VEC_ELT (elems, i);\n+      TREE_VEC_ELT (folded_elems, i) =  \n+\t(elem && !TYPE_P (elem)) ? cplus_expand_constant (elem) : elem;\n+\n+    }\n+  return folded_elems;\n+}\n+\n+/* The C++ implementation of the LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS\n+   hook. It returns the innermost template arguments of type T, and\n+   makes sure those arguments are folded enough for the debug info\n+   emitter.  */\n+\n+static tree\n+get_template_innermost_arguments_folded (const_tree t)\n+{\n+  return fold_cplus_constants (get_template_innermost_arguments (t));\n+}\n+\n+static tree\n+get_template_argument_pack_elems_folded (const_tree t)\n+{\n+  return fold_cplus_constants (get_template_argument_pack_elems (t));\n+}\n+\n #include \"gt-cp-cp-lang.h\"\n #include \"gtype-cp.h\""}, {"sha": "4671aaed5b531fe65711bb210f8aad82967e03b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8fb7295298da14f3ae81d27f9c926ede96d466a", "patch": "@@ -1,3 +1,8 @@\n+2011-01-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/46955\n+\t* g++.dg/debug/dwarf2/template-params-8.C: New test.\n+\n 2011-01-11  Richard Henderson  <rth@redhat.com>\n \n \t* gcc-dg/tree-ssa/vrp47.c: Disable for mn10300 as well."}, {"sha": "db4e0580ab8ed7ce34c408fce08a4822d6c7f3e9", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8fb7295298da14f3ae81d27f9c926ede96d466a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-8.C?ref=f8fb7295298da14f3ae81d27f9c926ede96d466a", "patch": "@@ -0,0 +1,15 @@\n+// Origin PR debug/46955\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+\n+struct S { int f; };\n+template<int S::*MP> struct T { };\n+T<&S::f> v;\n+\n+// For the type of v, we should have this DWARF generated:\n+//\t.uleb128 0x6\t# (DIE (0x57) DW_TAG_template_value_param)\n+//\t.ascii \"MP\\0\"\t# DW_AT_name\n+//\t.long\t0x61\t# DW_AT_type\n+//\t.byte\t0\t# DW_AT_const_value\n+// So let's look for that.\n+// { dg-final { scan-assembler-times \"\\[^\\n\\r\\]*DIE \\\\(\\[^\\n\\r\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\r\\]*\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_name\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_type\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_const_value\\[\\n\\r\\]{1,2}\" 1 } }"}]}