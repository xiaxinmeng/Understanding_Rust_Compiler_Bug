{"sha": "c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYTFhZTliZTk1YTlkMDJiMGY1ODQzODdjYmZiNjQ2ZjczODNjZA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-01T06:14:32Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-01T06:14:32Z"}, "message": "re PR libfortran/26136 (List directed input with underfilled  (logicals) array read incorrectly)\n\n2006-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/26136\n\t* gfortran.dg/namelist_23.f90: New test.\n\nFrom-SVN: r111598", "tree": {"sha": "471fc3a2d6c10e8787cea9e77e9d8ee7ffe19c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471fc3a2d6c10e8787cea9e77e9d8ee7ffe19c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd/comments", "author": null, "committer": null, "parents": [{"sha": "c9f15d9c0efac092136e6a02da3aafb5b38e3480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f15d9c0efac092136e6a02da3aafb5b38e3480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f15d9c0efac092136e6a02da3aafb5b38e3480"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "0b27651048b63bcbfd9d76d4e2bd1075b25259da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "patch": "@@ -1,3 +1,8 @@\n+2006-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/26136\n+\t* gfortran.dg/namelist_23.f90: New test.\n+\n 2006-02-28  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/14752"}, {"sha": "70a0080ceb29775b60752f1f8f0bec8e3322cacd", "filename": "gcc/testsuite/gfortran.dg/namelist_23.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fa1ae9be95a9d02b0f584387cbfb646f7383cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_23.f90?ref=c1fa1ae9be95a9d02b0f584387cbfb646f7383cd", "patch": "@@ -0,0 +1,53 @@\n+!{ dg-do run }\n+! PR26136 Filling logical variables from namelist read when object list is not\n+! complete.  Test case derived from PR.\n+! Contributed by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+program read_logical\n+   implicit none\n+   logical, dimension(4) :: truely\n+   integer, dimension(4) :: truely_a_very_long_variable_name\n+   namelist /mynml/ truely\n+   namelist /mynml/ truely_a_very_long_variable_name\n+\n+   truely = .false.\n+   truely_a_very_long_variable_name = 0\n+\n+   open(10, status=\"scratch\")\n+   write(10,*) \"&mynml\"\n+   write(10,*) \"truely       = trouble,    traffic .true\"\n+   write(10,*) \"truely_a_very_long_variable_name  = 4,      4,      4\"\n+   write(10,*) \"/\"\n+   rewind(10)\n+   read (10, nml=mynml, err = 1000)\n+   if (.not.all(truely(1:3))) call abort()\n+   if (.not.all(truely_a_very_long_variable_name(1:3).eq.4)) call abort()\n+   \n+   truely = .false.\n+   truely_a_very_long_variable_name = 0\n+\n+   rewind(10)\n+   write(10,*) \"&mynml\"\n+   write(10,*) \"truely       = .true., .true.,\"\n+   write(10,*) \"truely_a_very_long_variable_name  = 4,      4,      4\"\n+   write(10,*) \"/\"\n+   rewind(10)\n+   read (10, nml=mynml, err = 1000)\n+   if (.not.all(truely(1:2))) call abort()\n+   if (.not.all(truely_a_very_long_variable_name(1:3).eq.4)) call abort()\n+\n+   truely = .true.\n+   truely_a_very_long_variable_name = 0\n+\n+   rewind(10)\n+   write(10,*) \"&mynml\"\n+   write(10,*) \"truely       = .false., .false.,\"\n+   write(10,*) \"truely_a_very_long_variable_name  = 4,      4,      4\"\n+   write(10,*) \"/\"\n+   rewind(10)\n+   read (10, nml=mynml, err = 1000)\n+   if (all(truely(1:2))) call abort()\n+   if (.not.all(truely_a_very_long_variable_name(1:3).eq.4)) call abort()\n+   close(10)\n+   stop\n+1000 call abort()\n+end program read_logical"}]}