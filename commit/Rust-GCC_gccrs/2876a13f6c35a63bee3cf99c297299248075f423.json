{"sha": "2876a13f6c35a63bee3cf99c297299248075f423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3NmExM2Y2YzM1YTYzYmVlM2NmOTljMjk3Mjk5MjQ4MDc1ZjQyMw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-09-28T16:16:43Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-28T16:16:43Z"}, "message": "[AArch64] Revert \"Improve TLS Descriptor pattern to release RTL loop IV opt\"\n\n2015-09-28  Jiong Wang  <jiong.wang@arm.com>\n\n\tRevert:\n\t2015-08-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t\t    Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/aarch64/aarch64.d (tlsdesc_small_pseudo_<mode>): New pattern.\n\t* config/aarch64/aarch64.h (reg_class): New enumeration FIXED_REG0.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_class_max_nregs): Likewise.\n\t(aarch64_register_move_cost): Likewise.\n\t(aarch64_load_symref_appropriately): Invoke the new added pattern if\n\tpossible.\n\t* config/aarch64/constraints.md (Uc0): New constraint.\n\nFrom-SVN: r228211", "tree": {"sha": "abb4c357550f6942f528c286925c9285a94534d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb4c357550f6942f528c286925c9285a94534d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2876a13f6c35a63bee3cf99c297299248075f423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2876a13f6c35a63bee3cf99c297299248075f423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2876a13f6c35a63bee3cf99c297299248075f423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2876a13f6c35a63bee3cf99c297299248075f423/comments", "author": null, "committer": null, "parents": [{"sha": "db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8"}], "stats": {"total": 97, "additions": 24, "deletions": 73}, "files": [{"sha": "dfa382e42652e88708dacde5202bfff2682051bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2876a13f6c35a63bee3cf99c297299248075f423", "patch": "@@ -1,3 +1,19 @@\n+2015-09-28  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tRevert:\n+\t2015-08-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.d (tlsdesc_small_pseudo_<mode>): New pattern.\n+\t* config/aarch64/aarch64.h (reg_class): New enumeration FIXED_REG0.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_class_max_nregs): Likewise.\n+\t(aarch64_register_move_cost): Likewise.\n+\t(aarch64_load_symref_appropriately): Invoke the new added pattern if\n+\tpossible.\n+\t* config/aarch64/constraints.md (Uc0): New constraint.\n+\n 2015-09-28  Daniel Hellstrom  <daniel@gaisler.com>\n \n \t* config/sparc/t-rtems: Remove -muser-mode. Add ut699, at697f and leon."}, {"sha": "034da7c2bf81634d0d4fd74bdd8d3e284a334ea0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2876a13f6c35a63bee3cf99c297299248075f423", "patch": "@@ -1061,39 +1061,22 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       {\n \tmachine_mode mode = GET_MODE (dest);\n \trtx x0 = gen_rtx_REG (mode, R0_REGNUM);\n-\trtx offset;\n \trtx tp;\n \n \tgcc_assert (mode == Pmode || mode == ptr_mode);\n \n-\tif (can_create_pseudo_p ())\n-\t  {\n-\t    rtx reg = gen_reg_rtx (mode);\n-\n-\t    if (TARGET_ILP32)\n-\t      emit_insn (gen_tlsdesc_small_pseudo_si (reg, imm));\n-\t    else\n-\t      emit_insn (gen_tlsdesc_small_pseudo_di (reg, imm));\n-\n-\t    offset = reg;\n-\t  }\n+\t/* In ILP32, the got entry is always of SImode size.  Unlike\n+\t   small GOT, the dest is fixed at reg 0.  */\n+\tif (TARGET_ILP32)\n+\t  emit_insn (gen_tlsdesc_small_si (imm));\n \telse\n-\t  {\n-\t    /* In ILP32, the got entry is always of SImode size.  Unlike\n-\t       small GOT, the dest is fixed at reg 0.  */\n-\t    if (TARGET_ILP32)\n-\t      emit_insn (gen_tlsdesc_small_si (imm));\n-\t    else\n-\t      emit_insn (gen_tlsdesc_small_di (imm));\n-\n-\t    offset = x0;\n-\t  }\n+\t  emit_insn (gen_tlsdesc_small_di (imm));\n \ttp = aarch64_load_tp (NULL);\n \n \tif (mode != Pmode)\n \t  tp = gen_lowpart (mode, tp);\n \n-\temit_insn (gen_rtx_SET (dest, gen_rtx_PLUS (mode, tp, offset)));\n+\temit_insn (gen_rtx_SET (dest, gen_rtx_PLUS (mode, tp, x0)));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n@@ -5084,7 +5067,6 @@ aarch64_class_max_nregs (reg_class_t regclass, machine_mode mode)\n \taarch64_vector_mode_p (mode)\n \t  ? (GET_MODE_SIZE (mode) + UNITS_PER_VREG - 1) / UNITS_PER_VREG\n \t  : (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-    case FIXED_REG0:\n     case STACK_REG:\n       return 1;\n \n@@ -6972,10 +6954,10 @@ aarch64_register_move_cost (machine_mode mode,\n     = aarch64_tune_params.regmove_cost;\n \n   /* Caller save and pointer regs are equivalent to GENERAL_REGS.  */\n-  if (to == CALLER_SAVE_REGS || to == POINTER_REGS || to == FIXED_REG0)\n+  if (to == CALLER_SAVE_REGS || to == POINTER_REGS)\n     to = GENERAL_REGS;\n \n-  if (from == CALLER_SAVE_REGS || from == POINTER_REGS || from == FIXED_REG0)\n+  if (from == CALLER_SAVE_REGS || from == POINTER_REGS)\n     from = GENERAL_REGS;\n \n   /* Moving between GPR and stack cost is the same as GP2GP.  */"}, {"sha": "b2a1394eba2c33b985c6dbace89a88dd438f27cb", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=2876a13f6c35a63bee3cf99c297299248075f423", "patch": "@@ -405,7 +405,6 @@ extern unsigned aarch64_architecture_version;\n enum reg_class\n {\n   NO_REGS,\n-  FIXED_REG0,\n   CALLER_SAVE_REGS,\n   GENERAL_REGS,\n   STACK_REG,\n@@ -421,7 +420,6 @@ enum reg_class\n #define REG_CLASS_NAMES\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   \"NO_REGS\",\t\t\t\t\t\\\n-  \"FIXED_REG0\",\t\t\t\t\t\\\n   \"CALLER_SAVE_REGS\",\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\\\n   \"STACK_REG\",\t\t\t\t\t\\\n@@ -434,7 +432,6 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0x00000001, 0x00000000, 0x00000000 },\t/* FIXED_REG0 */\t\\\n   { 0x0007ffff, 0x00000000, 0x00000000 },\t/* CALLER_SAVE_REGS */\t\\\n   { 0x7fffffff, 0x00000000, 0x00000003 },\t/* GENERAL_REGS */\t\\\n   { 0x80000000, 0x00000000, 0x00000000 },\t/* STACK_REG */\t\t\\"}, {"sha": "c3cd58d7e4e14a5994832cc5b173a1073be3b6b1", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2876a13f6c35a63bee3cf99c297299248075f423", "patch": "@@ -4773,25 +4773,6 @@\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n \n-;; The same as tlsdesc_small_<mode> with hard register hiding.\n-;; The first operand is actually x0, while we wrap it under a delicated\n-;; register class so that before register allocation, it's seen as pseudo\n-;; register.  The reason for doing this is we don't expose hard register X0\n-;; as the destination of set as it will cause trouble for RTL loop iv.\n-;; RTL loop iv will abort ongoing optimization once it finds there is hard reg\n-;; as destination of set.\n-(define_insn \"tlsdesc_small_pseudo_<mode>\"\n-  [(set (match_operand:PTR 0 \"register_operand\" \"=Uc0\")\n-\t(unspec:PTR [(match_operand 1 \"aarch64_valid_symref\" \"S\")]\n-\t\t    UNSPEC_TLSDESC))\n-   (clobber (reg:DI LR_REGNUM))\n-   (clobber (reg:CC CC_REGNUM))\n-   (clobber (match_scratch:DI 2 \"=r\"))]\n-  \"TARGET_TLS_DESC\"\n-  \"adrp\\\\t<w>0, %A1\\;ldr\\\\t%<w>2, [%<w>0, #%L1]\\;add\\\\t%<w>0, %<w>0, %L1\\;.tlsdesccall\\\\t%1\\;blr\\\\t%2\"\n-  [(set_attr \"type\" \"call\")\n-   (set_attr \"length\" \"16\")])\n-\n (define_insn \"stack_tie\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK [(match_operand:DI 0 \"register_operand\" \"rk\")"}, {"sha": "9dc21089154b1f44cbbd24681a710a3752b4ff2c", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2876a13f6c35a63bee3cf99c297299248075f423/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=2876a13f6c35a63bee3cf99c297299248075f423", "patch": "@@ -24,9 +24,6 @@\n (define_register_constraint \"Ucs\" \"CALLER_SAVE_REGS\"\n   \"@internal The caller save registers.\")\n \n-(define_register_constraint \"Uc0\" \"FIXED_REG0\"\n-  \"@internal Represent X0/W0.\")\n-\n (define_register_constraint \"w\" \"FP_REGS\"\n   \"Floating point and SIMD vector registers.\")\n "}, {"sha": "a1fd3b0f09f77fa6fbc4d6e404c2945150ea3813", "filename": "gcc/testsuite/gcc.target/aarch64/tlsdesc_hoist.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c?ref=db7b65ff7233f94a2b9a5ae8bb2c5ab57050e9e8", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target tls_native } */\n-/* { dg-options \"-O2 -fpic -fdump-rtl-loop2_invariant\" } */\n-/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-mcmodel=large\" } { \"\" } } */\n-\n-int cal (int, int);\n-__thread int tls_data;\n-\n-int\n-foo (int bound)\n-{\n-  int i = 0;\n-  int sum = 0;\n-\n-  for (i; i < bound; i++)\n-    sum = cal (sum, tls_data);\n-\n-  return sum;\n-}\n-\n-/* Insn sequences for TLS descriptor should be hoisted out of the loop.  */\n-/* { dg-final { scan-rtl-dump \"Decided\" \"loop2_invariant\" } } */"}]}