{"sha": "945b6e16e23ede6f80ea67634b14e3fd07f51cce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1YjZlMTZlMjNlZGU2ZjgwZWE2NzYzNGIxNGUzZmQwN2Y1MWNjZQ==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2017-03-03T16:55:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-03-03T16:55:31Z"}, "message": "avx512vpopcntdq-check.h: New.\n\n\t* gcc.target/i386/avx512vpopcntdq-check.h: New.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c: Ditto.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-helper.h: Add avx512vpopcntdq-check.h.\n\t* gcc.target/i386/i386.exp\n\t(check_effective_target_avx512vpopcntdq): New.\n\nFrom-SVN: r245879", "tree": {"sha": "f9a8a6b86805ea5ef36d5d79578259dcedb787ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9a8a6b86805ea5ef36d5d79578259dcedb787ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/945b6e16e23ede6f80ea67634b14e3fd07f51cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945b6e16e23ede6f80ea67634b14e3fd07f51cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945b6e16e23ede6f80ea67634b14e3fd07f51cce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945b6e16e23ede6f80ea67634b14e3fd07f51cce/comments", "author": null, "committer": null, "parents": [{"sha": "da7c751ba7725d9fd71eeff9423ae0e0518baa19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7c751ba7725d9fd71eeff9423ae0e0518baa19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7c751ba7725d9fd71eeff9423ae0e0518baa19"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "f4333095a1b6d39c5de92109dd8174ba748224b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -1,3 +1,12 @@\n+2017-03-03  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx512vpopcntdq-check.h: New.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Add avx512vpopcntdq-check.h.\n+\t* gcc.target/i386/i386.exp\n+\t(check_effective_target_avx512vpopcntdq): New.\n+\n 2017-03-03  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* gcc.target/mips/pr68273.c (dg-final): Match SImode registers only for"}, {"sha": "ef4661a3453db3ac942d187a86f33e48ef6a790f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-helper.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -26,6 +26,8 @@\n #include \"avx5124fmaps-check.h\"\n #elif defined (AVX5124VNNIW) && !defined (AVX512VL)\n #include \"avx5124vnniw-check.h\"\n+#elif defined (AVX512VPOPCNTDQ) && !defined (AVX512VL)\n+#include \"avx512vpopcntdq-check.h\"\n #elif defined (AVX512VL)\n #include \"avx512vl-check.h\"\n #endif\n@@ -144,6 +146,9 @@ avx5124fmaps_test (void) { test_512 (); }\n #elif defined (AVX5124VNNIW) && !defined (AVX512VL)\n void\n avx5124vnniw_test (void) { test_512 (); }\n+#elif defined (AVX512VPOPCNTDQ) && !defined (AVX512VL)\n+void\n+avx512vpopcntdq_test (void) { test_512 (); }\n #elif defined (AVX512VL)\n void\n avx512vl_test (void) { test_256 (); test_128 (); }"}, {"sha": "179548bf8cb652626b76850f4127c8a7999f8b67", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-check.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-check.h?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512vpopcntdq_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512vpopcntdq_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX512_VPOPCNTDQ test only if host has the support.  */\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ecx & bit_AVX512VPOPCNTDQ) == bit_AVX512VPOPCNTDQ))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "d9faf0adc4eb5307150d2775e710e0ca8085a340", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-require-effective-target avx512vpopcntdq } */\n+\n+#define AVX512VPOPCNTDQ\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+#define TYPE int\n+\n+static int\n+compute_popcnt (TYPE v)\n+{\n+  int ret;\n+  int i;\n+\n+ ret = 0;\n+ for (i = 0; i < sizeof(v) * 8; i++)\n+   if ((v & ((TYPE)1 << (TYPE) i)))\n+     ret++;\n+\n+ return ret;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src, src0;\n+  MASK_TYPE mask = MASK_VALUE;\n+  TYPE res_ref[SIZE];\n+  src.x = _mm512_set1_epi8 (0x3D);\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+  {\n+    res_ref[i] = compute_popcnt (src.a[i]);\n+    src0.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_popcnt_epi32)       (src.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi32)  (src.x, mask, src0.x);\n+  res3.x = INTRINSIC (_maskz_popcnt_epi32) (mask, src.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "5a628210f6338b669ef3baf73e8bb5e62eddbb3e", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-require-effective-target avx512vpopcntdq } */\n+\n+#define AVX512VPOPCNTDQ\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+#define TYPE long long\n+\n+static int\n+compute_popcnt (TYPE v)\n+{\n+  int ret;\n+  int i;\n+\n+ ret = 0;\n+ for (i = 0; i < sizeof(v) * 8; i++)\n+   if ((v & ((TYPE)1 << (TYPE) i)))\n+     ret++;\n+\n+ return ret;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, src, src0;\n+  MASK_TYPE mask = MASK_VALUE;\n+  TYPE res_ref[SIZE];\n+  src.x = _mm512_set1_epi8 (0x3D);\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+  {\n+    res_ref[i] = compute_popcnt (src.a[i]);\n+    src0.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_popcnt_epi64)       (src.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi64)  (src.x, mask, src0.x);\n+  res3.x = INTRINSIC (_maskz_popcnt_epi64) (mask, src.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "eae253192ad6a1ea959c61a3e65a45b09fe1b537", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945b6e16e23ede6f80ea67634b14e3fd07f51cce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=945b6e16e23ede6f80ea67634b14e3fd07f51cce", "patch": "@@ -408,6 +408,19 @@ proc check_effective_target_avx5124vnniw { } {\n     } \"-mavx5124vnniw\" ]\n }\n \n+# Return 1 if avx512_vpopcntdq instructions can be compiled.\n+proc check_effective_target_avx512vpopcntdq { } {\n+    return [check_no_compiler_messages avx512vpopcntdq object {\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+        __v16si\n+        _mm512_popcnt_epi32 (__v16si __A)\n+        {\n+            return (__v16si) __builtin_ia32_vpopcountd_v16si ((__v16si) __A);\n+        }\n+    } \"-mavx512vpopcntdq\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}]}