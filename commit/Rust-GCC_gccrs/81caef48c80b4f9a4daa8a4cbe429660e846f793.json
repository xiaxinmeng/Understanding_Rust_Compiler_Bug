{"sha": "81caef48c80b4f9a4daa8a4cbe429660e846f793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjYWVmNDhjODBiNGY5YTRkYWE4YTRjYmU0Mjk2NjBlODQ2Zjc5Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-06T19:09:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-06T19:09:08Z"}, "message": "re PR c++/43906 (missing warnings the comparison between an address with a null pointer constant)\n\n/cp\n2014-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/43906\n\t* typeck.c (cp_build_binary_op): Extend to more cases the\n\t-Waddress warning.\n\n/testsuite\n2014-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/43906\n\t* g++.dg/warn/Waddress-1.C: New.\n\nFrom-SVN: r213682", "tree": {"sha": "d997cf661a8a66d9f959ea6a8cf0dd60c37a5013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d997cf661a8a66d9f959ea6a8cf0dd60c37a5013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81caef48c80b4f9a4daa8a4cbe429660e846f793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81caef48c80b4f9a4daa8a4cbe429660e846f793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81caef48c80b4f9a4daa8a4cbe429660e846f793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81caef48c80b4f9a4daa8a4cbe429660e846f793/comments", "author": null, "committer": null, "parents": [{"sha": "c5ff29dae8f2fff20b848df80ab9fa911bc1a2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff29dae8f2fff20b848df80ab9fa911bc1a2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ff29dae8f2fff20b848df80ab9fa911bc1a2f1"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "e4f12b12e2adec9424b0d9631d51653840c12f55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81caef48c80b4f9a4daa8a4cbe429660e846f793", "patch": "@@ -1,3 +1,9 @@\n+2014-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/43906\n+\t* typeck.c (cp_build_binary_op): Extend to more cases the\n+\t-Waddress warning.\n+\n 2014-08-01  Braden Obrzut  <admin@maniacsvault.net>\n \n \tImplement constexpr variable templates"}, {"sha": "353d921131d1c5d1dbc56a08f7054ee2fa07cb26", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=81caef48c80b4f9a4daa8a4cbe429660e846f793", "patch": "@@ -4353,13 +4353,18 @@ cp_build_binary_op (location_t location,\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n \t      || code1 == COMPLEX_TYPE || code1 == ENUMERAL_TYPE))\n \tshort_compare = 1;\n-      else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n-\t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))\n-\tresult_type = composite_pointer_type (type0, type1, op0, op1,\n-\t\t\t\t\t      CPO_COMPARISON, complain);\n-      else if ((code0 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type0))\n-\t       && null_ptr_cst_p (op1))\n-\t{\n+      else if (((code0 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type0))\n+\t\t&& null_ptr_cst_p (op1))\n+\t       /* Handle, eg, (void*)0 (c++/43906), and more.  */\n+\t       || (code0 == POINTER_TYPE\n+\t\t   && TYPE_PTR_P (type1) && integer_zerop (op1)))\n+\t{\n+\t  if (TYPE_PTR_P (type1))\n+\t    result_type = composite_pointer_type (type0, type1, op0, op1,\n+\t\t\t\t\t\t  CPO_COMPARISON, complain);\n+\t  else\n+\t    result_type = type0;\n+\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n \t    {\n@@ -4368,11 +4373,19 @@ cp_build_binary_op (location_t location,\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op0, 0));\n \t    }\n-\t  result_type = type0;\n \t}\n-      else if ((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n-\t       && null_ptr_cst_p (op0))\n+      else if (((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n+\t\t&& null_ptr_cst_p (op0))\n+\t       /* Handle, eg, (void*)0 (c++/43906), and more.  */\n+\t       || (code1 == POINTER_TYPE\n+\t\t   && TYPE_PTR_P (type0) && integer_zerop (op0)))\n \t{\n+\t  if (TYPE_PTR_P (type0))\n+\t    result_type = composite_pointer_type (type0, type1, op0, op1,\n+\t\t\t\t\t\t  CPO_COMPARISON, complain);\n+\t  else\n+\t    result_type = type1;\n+\n \t  if (TREE_CODE (op1) == ADDR_EXPR \n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n \t    {\n@@ -4381,8 +4394,11 @@ cp_build_binary_op (location_t location,\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op1, 0));\n \t    }\n-\t  result_type = type1;\n \t}\n+      else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n+\t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))\n+\tresult_type = composite_pointer_type (type0, type1, op0, op1,\n+\t\t\t\t\t      CPO_COMPARISON, complain);\n       else if (null_ptr_cst_p (op0) && null_ptr_cst_p (op1))\n \t/* One of the operands must be of nullptr_t type.  */\n         result_type = TREE_TYPE (nullptr_node);"}, {"sha": "0c5c386032cdb604fe98f2708181d36c36f279b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81caef48c80b4f9a4daa8a4cbe429660e846f793", "patch": "@@ -1,3 +1,8 @@\n+2014-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/43906\n+\t* g++.dg/warn/Waddress-1.C: New.\n+\n 2014-08-06  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* gcc.dg/pr44194-1.c: Remove an extraneous brace."}, {"sha": "8723ac936ec5713338e1c00f53bcb87b4edbbf7f", "filename": "gcc/testsuite/g++.dg/warn/Waddress-1.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81caef48c80b4f9a4daa8a4cbe429660e846f793/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C?ref=81caef48c80b4f9a4daa8a4cbe429660e846f793", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/43906\n+// { dg-options \"-Waddress -pedantic\" }\n+\n+extern void z();\n+typedef void (*ptrf) ();\n+typedef int (*ptrfn) (int);\n+int n;\n+const int m = 1;\n+struct S { };\n+struct T : S { };\n+struct U;\n+S s;\n+T t;\n+double d;\n+\n+void f()  { if (z) z(); }               // { dg-warning \"address\" }\n+\n+void gl() { if (z != 0) z(); }          // { dg-warning \"address\" }\n+void hl() { if (z != (ptrf)0) z(); }    // { dg-warning \"address\" }\n+void il() { if (z != (void*)0) z(); }   // { dg-warning \"address|comparison\" }\n+void jl() { if (&n != (int*)0) z(); }   // { dg-warning \"address\" }\n+void kl() { if (&m != (int*)0) z(); }   // { dg-warning \"address\" }\n+void ll() { if (&s != (T*)0) z(); }     // { dg-warning \"address\" }\n+void ml() { if (&t != (S*)0) z(); }     // { dg-warning \"address\" }\n+\n+void nl() { if (z != (S*)0) z(); }      // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 26 }\n+void pl() { if (z != (ptrfn)0) z(); }   // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 28 }\n+void ql() { if (&d != (int*)0) z(); }   // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 30 }\n+void rl() { if (&s != (U*)0) z(); }     // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 32 }\n+\n+void gr() { if (0 != z) z(); }          // { dg-warning \"address\" }\n+void hr() { if ((ptrf)0 != z) z(); }    // { dg-warning \"address\" }\n+void ir() { if ((void*)0 != z) z(); }   // { dg-warning \"address|comparison\" }\n+void jr() { if ((int*)0 != &n) z(); }   // { dg-warning \"address\" }\n+void kr() { if ((int*)0 != &m) z(); }   // { dg-warning \"address\" }\n+void lr() { if ((T*)0 != &s) z(); }     // { dg-warning \"address\" }\n+void mr() { if ((S*)0 != &t) z(); }     // { dg-warning \"address\" }\n+\n+void nr() { if ((S*)0 != z) z(); }      // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 43 }\n+void pr() { if ((ptrfn)0 != z) z(); }   // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 45 }\n+void qr() { if ((int*)0 != &d) z(); }   // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 47 }\n+void rr() { if ((U*)0 != &s) z(); }     // { dg-error \"comparison\" }\n+// { dg-warning \"address\" \"\" { target *-*-* } 49 }"}]}