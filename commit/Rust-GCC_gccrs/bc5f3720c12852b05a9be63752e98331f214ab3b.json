{"sha": "bc5f3720c12852b05a9be63752e98331f214ab3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1ZjM3MjBjMTI4NTJiMDVhOWJlNjM3NTJlOTgzMzFmMjE0YWIzYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-03-29T16:11:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-29T16:11:16Z"}, "message": "sem_res.adb (Resolve_Real_Literal): Generate warning if static fixed-point expression has value that is not a...\n\n2005-03-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Resolve_Real_Literal): Generate warning if static\n\tfixed-point expression has value that is not a multiple of the Small\n\tvalue.\n\n\t* opt.ads (Warn_On_Bad_Fixed_Value): New flag\n\n\t* s-taprop-tru64.adb (RT_Resolution): Return an integer number of\n\tnanoseconds.\n\n\t* ug_words: Add entry for [NO_]BAD_FIXED_VALUES for -gnatwb/-gnatwB\n\nFrom-SVN: r97165", "tree": {"sha": "9093ddae4abb2b9415e682ed1702037074a0c767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9093ddae4abb2b9415e682ed1702037074a0c767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc5f3720c12852b05a9be63752e98331f214ab3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5f3720c12852b05a9be63752e98331f214ab3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5f3720c12852b05a9be63752e98331f214ab3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5f3720c12852b05a9be63752e98331f214ab3b/comments", "author": null, "committer": null, "parents": [{"sha": "8bb46326fbe9a12661c8d936622ef09dee0eb6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb46326fbe9a12661c8d936622ef09dee0eb6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb46326fbe9a12661c8d936622ef09dee0eb6d9"}], "stats": {"total": 131, "additions": 109, "deletions": 22}, "files": [{"sha": "29acc92567dd869ce05e5143dc2d61d438ba374b", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=bc5f3720c12852b05a9be63752e98331f214ab3b", "patch": "@@ -1025,6 +1025,11 @@ package Opt is\n    --  Set to True to get verbose mode (full error message text and location\n    --  information sent to standard output, also header, copyright and summary)\n \n+   Warn_On_Bad_Fixed_Value : Boolean := False;\n+   --  GNAT\n+   --  Set to True to generate warnings for static fixed-point expression\n+   --  values that are not an exact multiple of the small value of the type.\n+\n    Warn_On_Constant : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings for variables that could be declared"}, {"sha": "9a0bba98c9c4811d0255182676fc236ea3a5b32d", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=bc5f3720c12852b05a9be63752e98331f214ab3b", "patch": "@@ -612,7 +612,11 @@ package body System.Task_Primitives.Operations is\n \n    function RT_Resolution return Duration is\n    begin\n-      return 1.0 / 1024.0; --  Clock on DEC Alpha ticks at 1024 Hz\n+      --  Returned value must be an integral multiple of Duration'Small (1 ns)\n+      --  The following is the best approximation of 1/1024. The clock on the\n+      --  DEC Alpha ticks at 1024 Hz.\n+\n+      return 0.000_976_563;\n    end RT_Resolution;\n \n    ------------"}, {"sha": "cc55d26d2d511fdd710b5b1a4644382699aa1181", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 97, "deletions": 21, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bc5f3720c12852b05a9be63752e98331f214ab3b", "patch": "@@ -168,7 +168,9 @@ package body Sem_Res is\n    --  by other node rewriting procedures.\n \n    procedure Resolve_Actuals (N : Node_Id; Nam : Entity_Id);\n-   --  Resolve actuals of call, and add default expressions for missing ones\n+   --  Resolve actuals of call, and add default expressions for missing ones.\n+   --  N is the Node_Id for the subprogram call, and Nam is the entity of the\n+   --  called subprogram.\n \n    procedure Resolve_Entry_Call (N : Node_Id; Typ : Entity_Id);\n    --  Called from Resolve_Call, when the prefix denotes an entry or element\n@@ -626,7 +628,6 @@ package body Sem_Res is\n \n          F := First_Formal (Subp);\n          A := First_Actual (N);\n-\n          while Present (F) and then Present (A) loop\n             if not Is_Entity_Name (A)\n               or else Entity (A) /= F\n@@ -787,6 +788,42 @@ package body Sem_Res is\n    procedure Check_Parameterless_Call (N : Node_Id) is\n       Nam : Node_Id;\n \n+      function Prefix_Is_Access_Subp return Boolean;\n+      --  If the prefix is of an access_to_subprogram type, the node must be\n+      --  rewritten as a call. Ditto if the prefix is overloaded and all its\n+      --  interpretations are access to subprograms.\n+\n+      ---------------------------\n+      -- Prefix_Is_Access_Subp --\n+      ---------------------------\n+\n+      function Prefix_Is_Access_Subp return Boolean is\n+         I   : Interp_Index;\n+         It  : Interp;\n+\n+      begin\n+         if not Is_Overloaded (N) then\n+            return\n+              Ekind (Etype (N)) = E_Subprogram_Type\n+                and then Base_Type (Etype (Etype (N))) /= Standard_Void_Type;\n+         else\n+            Get_First_Interp (N, I, It);\n+            while Present (It.Typ) loop\n+               if Ekind (It.Typ) /= E_Subprogram_Type\n+                 or else Base_Type (Etype (It.Typ)) = Standard_Void_Type\n+               then\n+                  return False;\n+               end if;\n+\n+               Get_Next_Interp (I, It);\n+            end loop;\n+\n+            return True;\n+         end if;\n+      end Prefix_Is_Access_Subp;\n+\n+   --  Start of processing for Check_Parameterless_Call\n+\n    begin\n       --  Defend against junk stuff if errors already detected\n \n@@ -832,9 +869,7 @@ package body Sem_Res is\n       --  procedure or entry.\n \n       or else\n-        (Nkind (N) = N_Explicit_Dereference\n-          and then Ekind (Etype (N)) = E_Subprogram_Type\n-          and then Base_Type (Etype (Etype (N))) /= Standard_Void_Type)\n+        (Nkind (N) = N_Explicit_Dereference and then Prefix_Is_Access_Subp)\n \n       --  Rewrite as call if it is a selected component which is a function,\n       --  this is the case of a call to a protected function (which may be\n@@ -858,7 +893,7 @@ package body Sem_Res is\n          then\n             Nam := New_Copy (N);\n \n-            --  If overloaded, overload set belongs to new copy.\n+            --  If overloaded, overload set belongs to new copy\n \n             Save_Interps (N, Nam);\n \n@@ -2515,7 +2550,6 @@ package body Sem_Res is\n    begin\n       A := First_Actual (N);\n       F := First_Formal (Nam);\n-\n       while Present (F) loop\n          if No (A) and then Needs_No_Actuals (Nam) then\n             null;\n@@ -4796,9 +4830,11 @@ package body Sem_Res is\n    ----------------------------------\n \n    procedure Resolve_Explicit_Dereference (N : Node_Id; Typ : Entity_Id) is\n-      P  : constant Node_Id := Prefix (N);\n-      I  : Interp_Index;\n-      It : Interp;\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      New_N : Node_Id;\n+      P     : constant Node_Id := Prefix (N);\n+      I     : Interp_Index;\n+      It    : Interp;\n \n    begin\n       --  Now that we know the type, check that this is not a\n@@ -4824,7 +4860,39 @@ package body Sem_Res is\n             Get_Next_Interp (I, It);\n          end loop;\n \n-         Resolve (P, It.Typ);\n+         if Present (It.Typ) then\n+            Resolve (P, It.Typ);\n+         else\n+            --  If no interpretation covers the designated type of the\n+            --  prefix, this is the pathological case where not all\n+            --  implementations of the prefix allow the interpretation\n+            --  of the node as a call. Now that the expected type is known,\n+            --  Remove other interpretations from prefix, rewrite it as\n+            --  a call, and resolve again, so that the proper call node\n+            --  is generated.\n+\n+            Get_First_Interp (P, I, It);\n+            while Present (It.Typ) loop\n+               if Ekind (It.Typ) /= E_Access_Subprogram_Type then\n+                  Remove_Interp (I);\n+               end if;\n+\n+               Get_Next_Interp (I, It);\n+            end loop;\n+\n+            New_N :=\n+              Make_Function_Call (Loc,\n+                Name =>\n+                  Make_Explicit_Dereference (Loc,\n+                    Prefix => P),\n+                Parameter_Associations => New_List);\n+\n+            Save_Interps (N, New_N);\n+            Rewrite (N, New_N);\n+            Analyze_And_Resolve (N, Typ);\n+            return;\n+         end if;\n+\n          Set_Etype (N, Designated_Type (It.Typ));\n \n       else\n@@ -5667,6 +5735,16 @@ package body Sem_Res is\n                   Error_Msg_N (\"value has extraneous low order digits\", N);\n                end if;\n \n+               --  Generate a warning if literal from source\n+\n+               if Is_Static_Expression (N)\n+                 and then Warn_On_Bad_Fixed_Value\n+               then\n+                  Error_Msg_N\n+                    (\"static fixed-point value is not a multiple of Small?\",\n+                     N);\n+               end if;\n+\n                --  Replace literal by a value that is the exact representation\n                --  of a value of the type, i.e. a multiple of the small value,\n                --  by truncation, since Machine_Rounds is false for all GNAT\n@@ -5678,6 +5756,8 @@ package body Sem_Res is\n                    Realval => Small_Value (Typ) * Cint));\n \n                Set_Is_Static_Expression (N, Stat);\n+\n+\n             end if;\n \n             --  In all cases, set the corresponding integer field\n@@ -6351,8 +6431,7 @@ package body Sem_Res is\n                Set_Etype (Operand, Standard_Duration);\n             end if;\n \n-            --  Resolve the real operand with largest available precision.\n-\n+            --  Resolve the real operand with largest available precision\n             if Etype (Right_Opnd (Operand)) = Universal_Real then\n                Rop := New_Copy_Tree (Right_Opnd (Operand));\n             else\n@@ -6787,7 +6866,7 @@ package body Sem_Res is\n \n       T1 := Standard_Duration;\n \n-      --  Look for fixed-point types in enclosing scopes.\n+      --  Look for fixed-point types in enclosing scopes\n \n       Scop := Current_Scope;\n       while Scop /= Standard_Standard loop\n@@ -7219,19 +7298,16 @@ package body Sem_Res is\n       elsif (Ekind (Target_Type) = E_Access_Subprogram_Type\n                or else\n              Ekind (Target_Type) = E_Anonymous_Access_Subprogram_Type)\n+        and then No (Corresponding_Remote_Type (Opnd_Type))\n         and then Conversion_Check\n                    (Ekind (Base_Type (Opnd_Type)) = E_Access_Subprogram_Type,\n                     \"illegal operand for access subprogram conversion\")\n       then\n          --  Check that the designated types are subtype conformant\n \n-         if not Subtype_Conformant (Designated_Type (Opnd_Type),\n-                                    Designated_Type (Target_Type))\n-         then\n-            Error_Msg_N\n-              (\"operand type is not subtype conformant with target type\",\n-               Operand);\n-         end if;\n+         Check_Subtype_Conformant (New_Id  => Designated_Type (Target_Type),\n+                                   Old_Id  => Designated_Type (Opnd_Type),\n+                                   Err_Loc => N);\n \n          --  Check the static accessibility rule of 4.6(20)\n "}, {"sha": "03e43251eeefe5b05b4a8c2c6648c47eda310bd0", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5f3720c12852b05a9be63752e98331f214ab3b/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=bc5f3720c12852b05a9be63752e98331f214ab3b", "patch": "@@ -105,6 +105,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatw          ^ /WARNINGS\n -gnatwa         ^ /WARNINGS=OPTIONAL\n -gnatwA         ^ /WARNINGS=NOOPTIONAL\n+-gnatwb         ^ /WARNINGS=BAD_FIXED_VALUES\n+-gnatwB         ^ /WARNINGS=NO_BAD_FIXED_VALUES\n -gnatwc         ^ /WARNINGS=CONDITIONALS\n -gnatwC         ^ /WARNINGS=NOCONDITIONALS\n -gnatwd         ^ /WARNINGS=IMPLICIT_DEREFERENCE"}]}