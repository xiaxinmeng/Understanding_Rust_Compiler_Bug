{"sha": "4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0MzBmYjkxNGEwMDc2OGI4NDA2ZjliNmZkYjE1YWU0YTkzYThiOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-06-25T19:17:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-06-25T19:17:49Z"}, "message": "re PR c++/16129 (g++.old-deja/g++.eh/catch[35679]*.C)\n\n\tPR wrong-code/16129\n\t* alias.c (get_alias_set): Adjust setting of\n\tDECL_POINTER_ALIAS_SET for pointers to aggregates.\n\nFrom-SVN: r83674", "tree": {"sha": "60e748bb7322316be3195c7fda414ff981d7fea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e748bb7322316be3195c7fda414ff981d7fea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8/comments", "author": null, "committer": null, "parents": [{"sha": "ed397c43b43b6c81ee2273d5bb5494b8014bcaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed397c43b43b6c81ee2273d5bb5494b8014bcaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed397c43b43b6c81ee2273d5bb5494b8014bcaf5"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "4de541bbb6c9a83bbac9f63c8d85990b2dd03199", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "patch": "@@ -1,3 +1,9 @@\n+2004-06-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR wrong-code/16129\n+\t* alias.c (get_alias_set): Adjust setting of\n+\tDECL_POINTER_ALIAS_SET for pointers to aggregates.\n+\n 2004-06-24  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree-inline.c (remap_type): Arrange to have just one pointer type"}, {"sha": "ce358c41d359f23b6ba3728b3e0b85eb7dae8d04", "filename": "gcc/alias.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f430fb914a00768b8406f9b6fdb15ae4a93a8b8/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4f430fb914a00768b8406f9b6fdb15ae4a93a8b8", "patch": "@@ -507,6 +507,8 @@ get_alias_set (tree t)\n \t      /* If we haven't computed the actual alias set, do it now.  */\n \t      if (DECL_POINTER_ALIAS_SET (decl) == -2)\n \t\t{\n+\t\t  tree pointed_to_type = TREE_TYPE (TREE_TYPE (decl));\n+\n \t\t  /* No two restricted pointers can point at the same thing.\n \t\t     However, a restricted pointer can point at the same thing\n \t\t     as an unrestricted pointer, if that unrestricted pointer\n@@ -515,11 +517,22 @@ get_alias_set (tree t)\n \t\t     alias set for the type pointed to by the type of the\n \t\t     decl.  */\n \t\t  HOST_WIDE_INT pointed_to_alias_set\n-\t\t    = get_alias_set (TREE_TYPE (TREE_TYPE (decl)));\n+\t\t    = get_alias_set (pointed_to_type);\n \n \t\t  if (pointed_to_alias_set == 0)\n \t\t    /* It's not legal to make a subset of alias set zero.  */\n \t\t    DECL_POINTER_ALIAS_SET (decl) = 0;\n+\t\t  else if (AGGREGATE_TYPE_P (pointed_to_type))\n+\t\t    /* For an aggregate, we must treat the restricted\n+\t\t       pointer the same as an ordinary pointer.  If we\n+\t\t       were to make the type pointed to by the\n+\t\t       restricted pointer a subset of the pointed-to\n+\t\t       type, then we would believe that other subsets\n+\t\t       of the pointed-to type (such as fields of that\n+\t\t       type) do not conflict with the type pointed to\n+\t\t       by the restricted pointer.   */\n+\t\t    DECL_POINTER_ALIAS_SET (decl)\n+\t\t      = pointed_to_alias_set;\n \t\t  else\n \t\t    {\n \t\t      DECL_POINTER_ALIAS_SET (decl) = new_alias_set ();"}]}