{"sha": "2724573f24083c08baff5bc6754421ba43f868ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyNDU3M2YyNDA4M2MwOGJhZmY1YmM2NzU0NDIxYmE0M2Y4NjhhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-14T13:06:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-14T13:06:47Z"}, "message": "tree-cfgcleanup.c (remove_forwarder_block): Unshare propagated PHI argument.\n\n2013-01-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfgcleanup.c (remove_forwarder_block): Unshare propagated\n\tPHI argument.\n\t* graphite-sese-to-poly.c (insert_out_of_ssa_copy): Properly\n\tunshare reference.\n\t(insert_out_of_ssa_copy_on_edge): Likewise.\n\t(rewrite_close_phi_out_of_ssa): Likewise.\n\t* tree-ssa.c (insert_debug_temp_for_var_def): Properly unshare\n\tdebug expressions.\n\t* tree-ssa-pre.c (insert_into_preds_of_block): Properly unshare\n\tpropagated constants.\n\t* tree-cfg.c (tree_node_can_be_shared): Handled component-refs\n\tcan not be shared.\n\nFrom-SVN: r195144", "tree": {"sha": "08cce6557bd5a1afa5a7349478aa1958b6201cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08cce6557bd5a1afa5a7349478aa1958b6201cf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2724573f24083c08baff5bc6754421ba43f868ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724573f24083c08baff5bc6754421ba43f868ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2724573f24083c08baff5bc6754421ba43f868ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724573f24083c08baff5bc6754421ba43f868ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a0bbab603878eacaea82fbcb345c0d0736765be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0bbab603878eacaea82fbcb345c0d0736765be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0bbab603878eacaea82fbcb345c0d0736765be"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "7b316199bdd4e494cb3f65d26d0897622562dd41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -1,3 +1,18 @@\n+2013-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Unshare propagated\n+\tPHI argument.\n+\t* graphite-sese-to-poly.c (insert_out_of_ssa_copy): Properly\n+\tunshare reference.\n+\t(insert_out_of_ssa_copy_on_edge): Likewise.\n+\t(rewrite_close_phi_out_of_ssa): Likewise.\n+\t* tree-ssa.c (insert_debug_temp_for_var_def): Properly unshare\n+\tdebug expressions.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Properly unshare\n+\tpropagated constants.\n+\t* tree-cfg.c (tree_node_can_be_shared): Handled component-refs\n+\tcan not be shared.\n+\n 2013-01-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-modes.def: Add GPL copyright notice."}, {"sha": "34057e948dafc65e5c3fcb91413031b04ba2f986", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -2020,7 +2020,7 @@ insert_out_of_ssa_copy (scop_p scop, tree res, tree expr, gimple after_stmt)\n   gimple_seq stmts;\n   gimple_stmt_iterator gsi;\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n-  gimple stmt = gimple_build_assign (res, var);\n+  gimple stmt = gimple_build_assign (unshare_expr (res), var);\n   vec<gimple> x;\n   x.create (3);\n \n@@ -2076,7 +2076,7 @@ insert_out_of_ssa_copy_on_edge (scop_p scop, edge e, tree res, tree expr)\n   gimple_stmt_iterator gsi;\n   gimple_seq stmts = NULL;\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n-  gimple stmt = gimple_build_assign (res, var);\n+  gimple stmt = gimple_build_assign (unshare_expr (res), var);\n   basic_block bb;\n   vec<gimple> x;\n   x.create (3);\n@@ -2232,7 +2232,7 @@ rewrite_close_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n     {\n       tree zero_dim_array = create_zero_dim_array (res, \"Close_Phi\");\n \n-      stmt = gimple_build_assign (res, zero_dim_array);\n+      stmt = gimple_build_assign (res, unshare_expr (zero_dim_array));\n \n       if (TREE_CODE (arg) == SSA_NAME)\n \tinsert_out_of_ssa_copy (scop, zero_dim_array, arg,\n@@ -2258,10 +2258,8 @@ rewrite_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n   gimple phi = gsi_stmt (*psi);\n   basic_block bb = gimple_bb (phi);\n   tree res = gimple_phi_result (phi);\n-  tree var;\n   tree zero_dim_array = create_zero_dim_array (res, \"phi_out_of_ssa\");\n   gimple stmt;\n-  gimple_seq stmts;\n \n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n@@ -2278,13 +2276,10 @@ rewrite_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n \tinsert_out_of_ssa_copy_on_edge (scop, e, zero_dim_array, arg);\n     }\n \n-  var = force_gimple_operand (zero_dim_array, &stmts, true, NULL_TREE);\n-\n-  stmt = gimple_build_assign (res, var);\n+  stmt = gimple_build_assign (res, unshare_expr (zero_dim_array));\n   remove_phi_node (psi, false);\n   SSA_NAME_DEF_STMT (res) = stmt;\n-\n-  insert_stmts (scop, stmt, stmts, gsi_after_labels (bb));\n+  insert_stmts (scop, stmt, NULL, gsi_after_labels (bb));\n }\n \n /* Rewrite the degenerate phi node at position PSI from the degenerate"}, {"sha": "e0bf7ac6b3c1cd57ca75f54de47c4c785758f3fa", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -4449,13 +4449,6 @@ tree_node_can_be_shared (tree t)\n   if (TREE_CODE (t) == CASE_LABEL_EXPR)\n     return true;\n \n-  while (((TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)\n-\t   && is_gimple_min_invariant (TREE_OPERAND (t, 1)))\n-\t || TREE_CODE (t) == COMPONENT_REF\n-\t || TREE_CODE (t) == REALPART_EXPR\n-\t || TREE_CODE (t) == IMAGPART_EXPR)\n-    t = TREE_OPERAND (t, 0);\n-\n   if (DECL_P (t))\n     return true;\n "}, {"sha": "b26281d48f95102351a0ec109f3e1289d0a74ec5", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -412,7 +412,8 @@ remove_forwarder_block (basic_block bb)\n \t    {\n \t      gimple phi = gsi_stmt (gsi);\n \t      source_location l = gimple_phi_arg_location_from_edge (phi, succ);\n-\t      add_phi_arg (phi, gimple_phi_arg_def (phi, succ->dest_idx), s, l);\n+\t      tree def = gimple_phi_arg_def (phi, succ->dest_idx);\n+\t      add_phi_arg (phi, unshare_expr (def), s, l);\n \t    }\n \t}\n     }"}, {"sha": "9ccec2156ebfa7a23239de820c004ce39df0c3ee", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -3246,7 +3246,8 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n       gcc_assert (get_expr_type (ae) == type\n \t\t  || useless_type_conversion_p (type, get_expr_type (ae)));\n       if (ae->kind == CONSTANT)\n-\tadd_phi_arg (phi, PRE_EXPR_CONSTANT (ae), pred, UNKNOWN_LOCATION);\n+\tadd_phi_arg (phi, unshare_expr (PRE_EXPR_CONSTANT (ae)),\n+\t\t     pred, UNKNOWN_LOCATION);\n       else\n \tadd_phi_arg (phi, PRE_EXPR_NAME (ae), pred, UNKNOWN_LOCATION);\n     }"}, {"sha": "f83a9ca80e2b37f8fc362d01e9e35f1773389e8d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724573f24083c08baff5bc6754421ba43f868ab/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=2724573f24083c08baff5bc6754421ba43f868ab", "patch": "@@ -427,7 +427,7 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n \t      && (!gimple_assign_single_p (def_stmt)\n \t\t  || is_gimple_min_invariant (value)))\n \t  || is_gimple_reg (value))\n-\tvalue = unshare_expr (value);\n+\t;\n       else\n \t{\n \t  gimple def_temp;\n@@ -469,7 +469,7 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n \t       that was unshared when we found it had a single debug\n \t       use, or a DEBUG_EXPR_DECL, that can be safely\n \t       shared.  */\n-\t    SET_USE (use_p, value);\n+\t    SET_USE (use_p, unshare_expr (value));\n \t  /* If we didn't replace uses with a debug decl fold the\n \t     resulting expression.  Otherwise we end up with invalid IL.  */\n \t  if (TREE_CODE (value) != DEBUG_EXPR_DECL)"}]}