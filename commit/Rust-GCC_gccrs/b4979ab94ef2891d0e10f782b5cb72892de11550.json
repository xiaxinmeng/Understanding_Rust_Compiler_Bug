{"sha": "b4979ab94ef2891d0e10f782b5cb72892de11550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5NzlhYjk0ZWYyODkxZDBlMTBmNzgyYjVjYjcyODkyZGUxMTU1MA==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2013-02-19T13:50:50Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2013-02-19T13:50:50Z"}, "message": "re PR middle-end/55889 (ICE: in move_op_ascend, at sel-sched.c:6153 with -fschedule-insns -fselective-scheduling)\n\n2012-02-19  Andrey Belevantsev  <abel@ispras.ru>\n\n        PR middle-end/55889\n\n        * sel-sched.c: Include ira.h.\n        (implicit_clobber_conflict_p): New function.\n        (moveup_expr): Use it.\n        * Makefile.in (sel-sched.o): Depend on ira.h.\n\nFrom-SVN: r196137", "tree": {"sha": "143bd883c22bd1741a46dc299fb3b48d02276296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143bd883c22bd1741a46dc299fb3b48d02276296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4979ab94ef2891d0e10f782b5cb72892de11550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4979ab94ef2891d0e10f782b5cb72892de11550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4979ab94ef2891d0e10f782b5cb72892de11550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4979ab94ef2891d0e10f782b5cb72892de11550/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24d630163b15482845ffef8c733653281008016f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d630163b15482845ffef8c733653281008016f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d630163b15482845ffef8c733653281008016f"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "0dbcd007234556e38f501a85943940079ac430cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4979ab94ef2891d0e10f782b5cb72892de11550", "patch": "@@ -1,3 +1,12 @@\n+2012-02-19  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR middle-end/55889\n+\n+\t* sel-sched.c: Include ira.h.\n+\t(implicit_clobber_conflict_p): New function.\n+\t(moveup_expr): Use it.\n+\t* Makefile.in (sel-sched.o): Depend on ira.h. \n+\n 2013-02-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56384"}, {"sha": "557ab08fbfad3ffac1ebf4e2701faab97ac2bad4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b4979ab94ef2891d0e10f782b5cb72892de11550", "patch": "@@ -3338,7 +3338,7 @@ sel-sched.o : sel-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FUNCTION_H) $(INSN_ATTR_H)  $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) output.h $(TARGET_H) $(TREE_PASS_H)  \\\n    $(SCHED_INT_H) $(GGC_H) $(TREE_H) langhooks.h rtlhooks-def.h \\\n-   $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) sel-sched.h $(DBGCNT_H) $(EMIT_RTL_H)\n+   $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) sel-sched.h $(DBGCNT_H) $(EMIT_RTL_H) ira.h\n sel-sched-dump.o : sel-sched-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\"}, {"sha": "11bf2e62c31d9c9ef8414d707028cd0f4e825189", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4979ab94ef2891d0e10f782b5cb72892de11550/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=b4979ab94ef2891d0e10f782b5cb72892de11550", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"rtlhooks-def.h\"\n #include \"emit-rtl.h\"\n+#include \"ira.h\"\n \n #ifdef INSN_SCHEDULING\n #include \"sel-sched-ir.h\"\n@@ -2101,6 +2102,61 @@ moving_insn_creates_bookkeeping_block_p (insn_t insn,\n   return TRUE;\n }\n \n+/* Return true when the conflict with newly created implicit clobbers\n+   between EXPR and THROUGH_INSN is found because of renaming.  */\n+static bool\n+implicit_clobber_conflict_p (insn_t through_insn, expr_t expr)\n+{\n+  HARD_REG_SET temp;\n+  rtx insn, reg, rhs, pat;\n+  hard_reg_set_iterator hrsi;\n+  unsigned regno;\n+  bool valid;\n+\n+  /* Make a new pseudo register.  */\n+  reg = gen_reg_rtx (GET_MODE (EXPR_LHS (expr)));\n+  max_regno = max_reg_num ();\n+  maybe_extend_reg_info_p ();\n+\n+  /* Validate a change and bail out early.  */\n+  insn = EXPR_INSN_RTX (expr);\n+  validate_change (insn, &SET_DEST (PATTERN (insn)), reg, true);\n+  valid = verify_changes (0);\n+  cancel_changes (0);\n+  if (!valid)\n+    {\n+      if (sched_verbose >= 6)\n+\tsel_print (\"implicit clobbers failed validation, \");\n+      return true;\n+    }\n+\n+  /* Make a new insn with it.  */\n+  rhs = copy_rtx (VINSN_RHS (EXPR_VINSN (expr)));\n+  pat = gen_rtx_SET (VOIDmode, reg, rhs);\n+  start_sequence ();\n+  insn = emit_insn (pat);\n+  end_sequence ();\n+\n+  /* Calculate implicit clobbers.  */\n+  extract_insn (insn);\n+  preprocess_constraints ();\n+  ira_implicitly_set_insn_hard_regs (&temp);\n+  AND_COMPL_HARD_REG_SET (temp, ira_no_alloc_regs);\n+\n+  /* If any implicit clobber registers intersect with regular ones in\n+     through_insn, we have a dependency and thus bail out.  */\n+  EXECUTE_IF_SET_IN_HARD_REG_SET (temp, 0, regno, hrsi)\n+    {\n+      vinsn_t vi = INSN_VINSN (through_insn);\n+      if (bitmap_bit_p (VINSN_REG_SETS (vi), regno)\n+\t  || bitmap_bit_p (VINSN_REG_CLOBBERS (vi), regno)\n+\t  || bitmap_bit_p (VINSN_REG_USES (vi), regno))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Modifies EXPR so it can be moved through the THROUGH_INSN,\n    performing necessary transformations.  Record the type of transformation\n    made in PTRANS_TYPE, when it is not NULL.  When INSIDE_INSN_GROUP,\n@@ -2233,6 +2289,17 @@ moveup_expr (expr_t expr, insn_t through_insn, bool inside_insn_group,\n       if (!enable_schedule_as_rhs_p || !EXPR_SEPARABLE_P (expr))\n         return MOVEUP_EXPR_NULL;\n \n+      /* When renaming a hard register to a pseudo before reload, extra\n+\t dependencies can occur from the implicit clobbers of the insn.\n+\t Filter out such cases here.  */\n+      if (!reload_completed && REG_P (EXPR_LHS (expr))\n+\t  && HARD_REGISTER_P (EXPR_LHS (expr))\n+\t  && implicit_clobber_conflict_p (through_insn, expr))\n+\t{\n+\t  if (sched_verbose >= 6)\n+\t    sel_print (\"implicit clobbers conflict detected, \");\n+\t  return MOVEUP_EXPR_NULL;\n+\t}\n       EXPR_TARGET_AVAILABLE (expr) = false;\n       was_target_conflict = true;\n       as_rhs = true;"}]}