{"sha": "1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3YjA3MTJiYzNlYjFhYWNlYjlhMzQ5ZjVmYWFlMWNmYjQxYTFjYg==", "commit": {"author": {"name": "Graham Stott", "email": "graham.stott@btinternet.com", "date": "2002-11-05T00:49:44Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-11-05T00:49:44Z"}, "message": "re PR ada/8358 (Ada accesses freed memory)\n\n\n\tPR ada/8358\n\t* trans.c (gnu_pending_elaboration_lists): New GC root.\n\t(build_unit_elab): Use..\n\nFrom-SVN: r58804", "tree": {"sha": "2981b2159d5f511e06d96effea4338f68a4b6cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2981b2159d5f511e06d96effea4338f68a4b6cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb/comments", "author": {"login": "Graham-stott", "id": 17800827, "node_id": "MDQ6VXNlcjE3ODAwODI3", "avatar_url": "https://avatars.githubusercontent.com/u/17800827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Graham-stott", "html_url": "https://github.com/Graham-stott", "followers_url": "https://api.github.com/users/Graham-stott/followers", "following_url": "https://api.github.com/users/Graham-stott/following{/other_user}", "gists_url": "https://api.github.com/users/Graham-stott/gists{/gist_id}", "starred_url": "https://api.github.com/users/Graham-stott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Graham-stott/subscriptions", "organizations_url": "https://api.github.com/users/Graham-stott/orgs", "repos_url": "https://api.github.com/users/Graham-stott/repos", "events_url": "https://api.github.com/users/Graham-stott/events{/privacy}", "received_events_url": "https://api.github.com/users/Graham-stott/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "11281d42a3296907696aba5bb93413d170657fea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "patch": "@@ -1,3 +1,8 @@\n+2002-11-05  Graham Stott  <graham.stott@btinternet.com>\n+\tPR ada/8358\n+\t* trans.c (gnu_pending_elaboration_lists): New GC root.\n+\t(build_unit_elab): Use.. \n+\n 2002-10-30   Geert Bosch <bosch@gnat.com>\n \tPR ada/6558\n \t* misc.c : Include optabs.h"}, {"sha": "68ebacc735cd5866ce867fc67793d2beec12a4fd", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=1c7b0712bc3eb1aaceb9a349f5faae1cfb41a1cb", "patch": "@@ -88,6 +88,10 @@ tree gnu_block_stack;\n    handler.  Not used in the zero-cost case.  */\n static GTY(()) tree gnu_except_ptr_stack;\n \n+/* List of TREE_LIST nodes containing pending elaborations lists.\n+   used to prevent the elaborations being reclaimed by GC.  */\n+static GTY(()) tree gnu_pending_elaboration_lists;\n+\n /* Map GNAT tree codes to GCC tree codes for simple expressions.  */\n static enum tree_code gnu_codes[Number_Node_Kinds];\n \n@@ -5298,6 +5302,10 @@ build_unit_elab (gnat_unit, body_p, gnu_elab_list)\n   if (gnu_elab_list == 0)\n     return 1;\n \n+  /* Prevent the elaboration list from being reclaimed by the GC.  */\n+  gnu_pending_elaboration_lists = chainon (gnu_pending_elaboration_lists,\n+\t\t\t\t\t   gnu_elab_list);\n+\n   /* Set our file and line number to that of the object and set up the\n      elaboration routine.  */\n   gnu_decl = create_subprog_decl (create_concat_name (gnat_unit,\n@@ -5358,6 +5366,9 @@ build_unit_elab (gnat_unit, body_p, gnu_elab_list)\n   gnu_block_stack = TREE_CHAIN (gnu_block_stack);\n   end_subprog_body ();\n \n+  /* We are finished with the elaboration list it can now be discarded.  */\n+  gnu_pending_elaboration_lists = TREE_CHAIN (gnu_pending_elaboration_lists);\n+\n   /* If there were no insns, we don't need an elab routine.  It would\n      be nice to not output this one, but there's no good way to do that.  */\n   return result;"}]}