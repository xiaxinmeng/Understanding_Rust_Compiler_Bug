{"sha": "8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwMWNiNWUwZGMwYTNiOTQ5YmIyOGYzZmY5ZWU1YmFlOThjNDdmZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-09T18:50:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-09T18:50:43Z"}, "message": "Fix std::visit to support arbitrary callables\n\nThe __visitor_result_type helper didn't use std::invoke and so didn't\ncompile when the visitor was a pointer-to-member rather than a function\nobject. Use std::invoke_result instead.\n\n\t* include/std/variant (__variant_idx_cookie): Add member type.\n\t(__visitor_result_type): Remove.\n\t(__do_visit): Use invoke_result instead of __visitor_result_type.\n\t* testsuite/20_util/variant/visit.cc: New test.\n\nFrom-SVN: r270237", "tree": {"sha": "0bd9c3d6f3251d67f4acf2bfbdd6917989e32da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd9c3d6f3251d67f4acf2bfbdd6917989e32da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc203bf0dab0cdb39370357bc3244999a2f9e419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc203bf0dab0cdb39370357bc3244999a2f9e419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc203bf0dab0cdb39370357bc3244999a2f9e419"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "8fea9b6ccab1273ffee0dea20fe3f2fefb920280", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "patch": "@@ -1,5 +1,10 @@\n 2019-04-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/variant (__variant_idx_cookie): Add member type.\n+\t(__visitor_result_type): Remove.\n+\t(__do_visit): Use invoke_result instead of __visitor_result_type.\n+\t* testsuite/20_util/variant/visit.cc: New test.\n+\n \tPR libstdc++/90008\n \t* include/std/variant (_VARIANT_RELATION_FUNCTION_TEMPLATE): Remove\n \tunused capture."}, {"sha": "43e8d1d17066d4037b9a6e44f04dcea13754e138", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "patch": "@@ -178,7 +178,7 @@ namespace __variant\n   // used for raw visitation\n   struct __variant_cookie {};\n   // used for raw visitation with indices passed in\n-  struct __variant_idx_cookie {};\n+  struct __variant_idx_cookie { using type = __variant_idx_cookie; };\n   // a more explanatory name than 'true'\n   inline constexpr auto __visit_with_index = bool_constant<true>{};\n \n@@ -1613,27 +1613,18 @@ namespace __variant\n       return __detail::__variant::__get<_Np>(std::move(__v));\n     }\n \n-  template<bool __use_index, typename _Visitor, typename... _Variants>\n-    decltype(auto)\n-    __visitor_result_type(_Visitor&& __visitor, _Variants&&... __variants)\n-    {\n-      if constexpr(__use_index)\n-        return __detail::__variant::__variant_idx_cookie{};\n-      else\n-\treturn std::forward<_Visitor>(__visitor)(\n-\t  std::get<0>(std::forward<_Variants>(__variants))...);\n-    }\n-\n   template<bool __use_index,\n \t   bool __same_return_types,\n \t   typename _Visitor, typename... _Variants>\n     constexpr decltype(auto)\n     __do_visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n-      using _Result_type =\n-\tdecltype(__visitor_result_type<__use_index>(\n-\t           std::forward<_Visitor>(__visitor),\n-\t           std::forward<_Variants>(__variants)...));\n+      using _Deduced_type = std::invoke_result<_Visitor,\n+\tdecltype(std::get<0>(std::declval<_Variants>()))...>;\n+\n+      using _Result_type = typename std::conditional_t<__use_index,\n+\t__detail::__variant::__variant_idx_cookie,\n+\t_Deduced_type>::type;\n \n       constexpr auto& __vtable = __detail::__variant::__gen_vtable<\n \t__same_return_types,\n@@ -1663,7 +1654,6 @@ namespace __variant\n       if ((__variants.valueless_by_exception() || ...))\n \t__throw_bad_variant_access(\"Unexpected index\");\n \n-\n       if constexpr (std::is_void_v<_Res>)\n         (void) __do_visit<false, false>(std::forward<_Visitor>(__visitor),\n \t\t\t\t\tstd::forward<_Variants>(__variants)...);"}, {"sha": "5bd5b3d11f709e9be53de81d89dbe8483a478243", "filename": "libstdc++-v3/testsuite/20_util/variant/visit.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit.cc?ref=8701cb5e0dc0a3b949bb28f3ff9ee5bae98c47fe", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <variant>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// N.B. there are more std::visit tests in ./compile.cc and ./run.cc\n+\n+void\n+test01()\n+{\n+  // Verify that visitation uses INVOKE and supports arbitrary callables.\n+\n+  struct X\n+  {\n+    int sum(int i) const { return i + n; }\n+    int product(int i) const { return i * n; }\n+    int n;\n+  };\n+\n+  std::variant<X, X*, std::reference_wrapper<X>> vobj{X{1}};\n+  int res = std::visit(&X::n, vobj);\n+  VERIFY( res == 1 );\n+\n+  std::variant<int, short> varg{2};\n+  res = std::visit(&X::sum, vobj, varg);\n+  VERIFY( res == 3 );\n+\n+  X x{4};\n+  vobj = &x;\n+  res = std::visit(&X::n, vobj);\n+  VERIFY( res == 4 );\n+\n+  varg.emplace<short>(5);\n+  res = std::visit(&X::sum, vobj, varg);\n+  VERIFY( res == 9 );\n+\n+  x.n = 6;\n+  res = std::visit(&X::product, vobj, varg);\n+  VERIFY( res == 30 );\n+\n+  vobj = std::ref(x);\n+  x.n = 7;\n+  res = std::visit(&X::n, vobj);\n+  VERIFY( res == 7 );\n+\n+  res = std::visit(&X::product, vobj, varg);\n+  VERIFY( res == 35 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}