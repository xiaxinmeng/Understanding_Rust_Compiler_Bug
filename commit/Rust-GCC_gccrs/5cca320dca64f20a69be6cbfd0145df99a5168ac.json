{"sha": "5cca320dca64f20a69be6cbfd0145df99a5168ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjYTMyMGRjYTY0ZjIwYTY5YmU2Y2JmZDAxNDVkZjk5YTUxNjhhYw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-28T08:51:06Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-28T08:51:06Z"}, "message": "re PR fortran/31818 (Wrongly accepts namelists with assumed-shape arrays)\n\ngcc/fortran:\n2007-07-28  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31818\n\tPR fortran/32876\n\tPR fortran/32905\n\t* gfortran.h (symbol_attribute): Added bits for pointer_comp, private_comp.\n\t* parse.c (parse_derived): Set pointer_comp/private_comp bits if the derived\n\ttype ultimately contains pointer components or private components.\n\t* module.c (ab_attribute): New values AB_POINTER_COMP, AB_PRIVATE_COMP.\n\t(attr_bits): Added names for new ab_attributes.\n\t(mio_symbol_attribute): Save/restore new attribute bits in modules.\n\t* match.c (gfc_match_namelist): Removed check for namelist objects of assumed\n\tshape.\n\t* resolve.c (resolve_fl_namelist): Added check for pointer or private\n\tcomponents in nested types. Added check for namelist objects of assumed\n\tshape.\n\ngcc/testsuite:\n2007-07-28  Daniel Franke  <franke.daniel@gmail.com>\n\n\t* gfortran.dg/namelist_5.f90: Adjusted error message.\n\t* gfortran.dg/assumed_shape_nml.f90: Renamed to ...\n\t* gfortran.dg/namelist_31.f90: ... this. Removed dg-warning directive.\n\t* gfortran.dg/assumed_size_nml.f90: Renamed to ...\n\t* gfortran.dg/namelist_32.f90: ... this.\n\n\tPR fortran/32876\n\t* gfortran.dg/namelist_33.f90: New test.\n\n\tPR fortran/32905\n\t* gfortran.dg/namelist_34.f90: New test.\n\n\tPR fortran/31818\n\t* gfortran.dg/namelist_35.f90: New test.\n\nFrom-SVN: r127014", "tree": {"sha": "104c0f20c96545cd7c2f19d9fb931ba20274aa9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/104c0f20c96545cd7c2f19d9fb931ba20274aa9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cca320dca64f20a69be6cbfd0145df99a5168ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca320dca64f20a69be6cbfd0145df99a5168ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cca320dca64f20a69be6cbfd0145df99a5168ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca320dca64f20a69be6cbfd0145df99a5168ac/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "758137cd60130053849b6c6258acfd2f81463739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758137cd60130053849b6c6258acfd2f81463739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/758137cd60130053849b6c6258acfd2f81463739"}], "stats": {"total": 242, "additions": 205, "deletions": 37}, "files": [{"sha": "adc065d9168568296eff5b448011ca958e8e403c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -1,3 +1,20 @@\n+2007-07-28  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31818\n+\tPR fortran/32876\n+\tPR fortran/32905\n+\t* gfortran.h (symbol_attribute): Added bits for pointer_comp, private_comp.\n+\t* parse.c (parse_derived): Set pointer_comp/private_comp bits if the derived\n+\ttype ultimately contains pointer components or private components.\n+\t* module.c (ab_attribute): New values AB_POINTER_COMP, AB_PRIVATE_COMP.\n+\t(attr_bits): Added names for new ab_attributes.\n+\t(mio_symbol_attribute): Save/restore new attribute bits in modules.\n+\t* match.c (gfc_match_namelist): Removed check for namelist objects of assumed\n+\tshape.\n+\t* resolve.c (resolve_fl_namelist): Added check for pointer or private\n+\tcomponents in nested types. Added check for namelist objects of assumed\n+\tshape.\n+\n 2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32880"}, {"sha": "a668bf471c2848e025c2904a34a9c97a7b00ebe5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -702,9 +702,9 @@ typedef struct\n   /* Special attributes for Cray pointers, pointees.  */\n   unsigned cray_pointer:1, cray_pointee:1;\n \n-  /* The symbol is a derived type with allocatable components, possibly\n-     nested.  */\n-  unsigned alloc_comp:1;\n+  /* The symbol is a derived type with allocatable components, pointer \n+     components or private components, possibly nested.  */\n+  unsigned alloc_comp:1, pointer_comp:1, private_comp:1;\n \n   /* The namespace where the VOLATILE attribute has been set.  */\n   struct gfc_namespace *volatile_ns;"}, {"sha": "9c524b2a6f3efc54916d5733a73332011fa40014", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -2822,12 +2822,6 @@ gfc_match_namelist (void)\n \t      gfc_error_check ();\n \t    }\n \n-\t  if (sym->as && sym->as->type == AS_ASSUMED_SHAPE\n-\t      && gfc_notify_std (GFC_STD_GNU, \"Assumed shape array '%s' in \"\n-\t\t\t\t \"namelist '%s' at %C is an extension.\",\n-\t\t\t\t sym->name, group_name->name) == FAILURE)\n-\t    gfc_error_check ();\n-\n \t  nl = gfc_get_namelist ();\n \t  nl->sym = sym;\n \t  sym->refs++;"}, {"sha": "447ba0025ac9dbfedfc680aecd2b623508ab2427", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -1512,8 +1512,8 @@ typedef enum\n   AB_IN_NAMELIST, AB_IN_COMMON, AB_FUNCTION, AB_SUBROUTINE, AB_SEQUENCE,\n   AB_ELEMENTAL, AB_PURE, AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT,\n   AB_CRAY_POINTER, AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP,\n-  AB_VALUE, AB_VOLATILE, AB_PROTECTED, AB_IS_BIND_C, AB_IS_C_INTEROP,\n-  AB_IS_ISO_C\n+  AB_POINTER_COMP, AB_PRIVATE_COMP, AB_VALUE, AB_VOLATILE, AB_PROTECTED,\n+  AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C\n }\n ab_attribute;\n \n@@ -1548,6 +1548,8 @@ static const mstring attr_bits[] =\n     minit (\"IS_ISO_C\", AB_IS_ISO_C),\n     minit (\"VALUE\", AB_VALUE),\n     minit (\"ALLOC_COMP\", AB_ALLOC_COMP),\n+    minit (\"POINTER_COMP\", AB_POINTER_COMP),\n+    minit (\"PRIVATE_COMP\", AB_PRIVATE_COMP),\n     minit (\"PROTECTED\", AB_PROTECTED),\n     minit (NULL, -1)\n };\n@@ -1654,6 +1656,10 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME(ab_attribute) (AB_IS_ISO_C, attr_bits);\n       if (attr->alloc_comp)\n \tMIO_NAME (ab_attribute) (AB_ALLOC_COMP, attr_bits);\n+      if (attr->pointer_comp)\n+\tMIO_NAME (ab_attribute) (AB_POINTER_COMP, attr_bits);\n+      if (attr->private_comp)\n+\tMIO_NAME (ab_attribute) (AB_PRIVATE_COMP, attr_bits);\n \n       mio_rparen ();\n \n@@ -1760,6 +1766,12 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_ALLOC_COMP:\n \t      attr->alloc_comp = 1;\n \t      break;\n+\t    case AB_POINTER_COMP:\n+\t      attr->pointer_comp = 1;\n+\t      break;\n+\t    case AB_PRIVATE_COMP:\n+\t      attr->private_comp = 1;\n+\t      break;\n \t    }\n \t}\n     }"}, {"sha": "c8d223a3980701d18fa17f9257579f617fdaf287", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -1615,17 +1615,34 @@ parse_derived (void)\n    */\n   derived_sym = gfc_current_block();\n \n-  /* Look for allocatable components.  */\n   sym = gfc_current_block ();\n   for (c = sym->components; c; c = c->next)\n     {\n+      /* Look for allocatable components.  */\n       if (c->allocatable\n \t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.alloc_comp))\n \t{\n \t  sym->attr.alloc_comp = 1;\n \t  break;\n \t}\n-     }\n+\n+      /* Look for pointer components.  */\n+      if (c->pointer\n+\t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.pointer_comp))\n+\t{\n+\t  sym->attr.pointer_comp = 1;\n+\t  break;\n+\t}\n+\n+      /* Look for private components.  */\n+      if (sym->component_access == ACCESS_PRIVATE\n+\t  || c->access == ACCESS_PRIVATE\n+\t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.private_comp))\n+\t{\n+\t  sym->attr.private_comp = 1;\n+\t  break;\n+\t}\n+    }\n \n   pop_state ();\n }"}, {"sha": "a7edd169105cf9cf48dd33a35c0fa84ac52dd52a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -7027,45 +7027,75 @@ resolve_fl_namelist (gfc_symbol *sym)\n     {\n       for (nl = sym->namelist; nl; nl = nl->next)\n \t{\n-\t  if (!nl->sym->attr.use_assoc\n-\t      && !(sym->ns->parent == nl->sym->ns)\n-\t      && !(sym->ns->parent\n-\t\t   && sym->ns->parent->parent == nl->sym->ns)\n-\t      && !gfc_check_access(nl->sym->attr.access,\n-\t\t\t\t   nl->sym->ns->default_access))\n+\t  if (nl->sym->attr.use_assoc\n+\t      || (sym->ns->parent == nl->sym->ns)\n+\t      || (sym->ns->parent\n+\t\t  && sym->ns->parent->parent == nl->sym->ns))\n+\t    continue;\n+\n+\t  if (!gfc_check_access(nl->sym->attr.access,\n+\t\t\t\tnl->sym->ns->default_access))\n \t    {\n-\t      gfc_error (\"PRIVATE symbol '%s' cannot be member of \"\n-\t\t\t \"PUBLIC namelist at %L\", nl->sym->name,\n-\t\t\t &sym->declared_at);\n+\t      gfc_error (\"NAMELIST object '%s' was declared PRIVATE and \"\n+\t\t\t \"cannot be member of PUBLIC namelist '%s' at %L\",\n+\t\t\t nl->sym->name, sym->name, &sym->declared_at);\n+\t      return FAILURE;\n+\t    }\n+\n+\t  if (nl->sym->ts.type == BT_DERIVED\n+\t      && !gfc_check_access (nl->sym->ts.derived->attr.private_comp\n+\t\t\t\t    ? ACCESS_PRIVATE : ACCESS_UNKNOWN,\n+\t\t\t\t    nl->sym->ns->default_access))\n+\t    {\n+\t      gfc_error (\"NAMELIST object '%s' has PRIVATE components and \"\n+\t\t\t \"cannot be a member of PUBLIC namelist '%s' at %L\",\n+\t\t\t nl->sym->name, sym->name, &sym->declared_at);\n \t      return FAILURE;\n \t    }\n \t}\n     }\n \n-  /* Reject namelist arrays that are not constant shape.  */\n   for (nl = sym->namelist; nl; nl = nl->next)\n     {\n+      /* Reject namelist arrays of assumed shape.  */\n+      if (nl->sym->as && nl->sym->as->type == AS_ASSUMED_SHAPE\n+\t  && gfc_notify_std (GFC_STD_F2003, \"NAMELIST array object '%s' \"\n+\t\t\t     \"must not have assumed shape in namelist \"\n+\t\t\t     \"'%s' at %L\", nl->sym->name, sym->name,\n+\t\t\t     &sym->declared_at) == FAILURE)\n+\t    return FAILURE;\n+\n+      /* Reject namelist arrays that are not constant shape.  */\n       if (is_non_constant_shape_array (nl->sym))\n \t{\n-\t  gfc_error (\"The array '%s' must have constant shape to be \"\n-\t\t     \"a NAMELIST object at %L\", nl->sym->name,\n-\t\t     &sym->declared_at);\n+\t  gfc_error (\"NAMELIST array object '%s' must have constant \"\n+\t\t     \"shape in namelist '%s' at %L\", nl->sym->name,\n+\t\t     sym->name, &sym->declared_at);\n \t  return FAILURE;\n \t}\n-    }\n \n-  /* Namelist objects cannot have allocatable components.  */\n-  for (nl = sym->namelist; nl; nl = nl->next)\n-    {\n-      if (nl->sym->ts.type == BT_DERIVED\n-\t  && nl->sym->ts.derived->attr.alloc_comp)\n+      /* Namelist objects cannot have allocatable or pointer components.  */\n+      if (nl->sym->ts.type != BT_DERIVED)\n+\tcontinue;\n+\n+      if (nl->sym->ts.derived->attr.alloc_comp)\n \t{\n-\t  gfc_error (\"NAMELIST object '%s' at %L cannot have ALLOCATABLE \"\n-\t\t     \"components\", nl->sym->name, &sym->declared_at);\n+\t  gfc_error (\"NAMELIST object '%s' in namelist '%s' at %L cannot \"\n+\t\t     \"have ALLOCATABLE components\",\n+\t\t     nl->sym->name, sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+\n+      if (nl->sym->ts.derived->attr.pointer_comp)\n+\t{\n+\t  gfc_error (\"NAMELIST object '%s' in namelist '%s' at %L cannot \"\n+\t\t     \"have POINTER components\", \n+\t\t     nl->sym->name, sym->name, &sym->declared_at);\n \t  return FAILURE;\n \t}\n     }\n \n+\n   /* 14.1.2 A module or internal procedure represent local entities\n      of the same type as a namelist member and so are not allowed.  */\n   for (nl = sym->namelist; nl; nl = nl->next)"}, {"sha": "5352bce536d06cbed875bc3637482066a29a9852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -1,3 +1,20 @@\n+2007-07-28  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* gfortran.dg/namelist_5.f90: Adjusted error message.\n+\t* gfortran.dg/assumed_shape_nml.f90: Renamed to ...\n+\t* gfortran.dg/namelist_31.f90: ... this. Removed dg-warning directive.\n+\t* gfortran.dg/assumed_size_nml.f90: Renamed to ...\n+\t* gfortran.dg/namelist_32.f90: ... this.\n+\n+\tPR fortran/32876\n+\t* gfortran.dg/namelist_33.f90: New test.\n+\n+\tPR fortran/32905\n+\t* gfortran.dg/namelist_34.f90: New test.\n+\n+\tPR fortran/31818\n+\t* gfortran.dg/namelist_35.f90: New test.\n+\n 2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32880"}, {"sha": "b7aba98b4b396ac260735001d780e8b9f93af07b", "filename": "gcc/testsuite/gfortran.dg/namelist_31.f90", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_31.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_31.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_31.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -10,8 +10,8 @@ program assumed_shape_nml\n   call foo (z)\n contains\n   subroutine foo (y)\n-    real, DIMENSION (1:) :: y\n-    namelist /mynml/ y     ! { dg-warning \"is an extension\" }\n+    real, DIMENSION (:) :: y\n+    namelist /mynml/ y\n     write (*, mynml)\n   end subroutine foo\n end program assumed_shape_nml", "previous_filename": "gcc/testsuite/gfortran.dg/assumed_shape_nml.f90"}, {"sha": "76d51483394bef15369025b2c3f5fd101078b9b1", "filename": "gcc/testsuite/gfortran.dg/namelist_32.f90", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_32.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "previous_filename": "gcc/testsuite/gfortran.dg/assumed_size_nml.f90"}, {"sha": "1642389735a0174439c504f58cf80ce556b81335", "filename": "gcc/testsuite/gfortran.dg/namelist_33.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_33.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+!\n+! PR fortran/32876 - accepts private items in public NAMELISTs\n+!\n+MODULE types\n+  type :: tp4\n+    PRIVATE\n+    real :: x\n+    integer :: i\n+  end type\n+\n+  ! nested type\n+  type :: tp3\n+    real :: x\n+    integer, private :: i\n+  end type\n+\n+  type :: tp2\n+    type(tp3) :: t\n+  end type\n+\n+  type :: tp1\n+    integer :: i\n+    type(tp2) :: t\n+  end type\n+END MODULE\n+\n+MODULE nml\n+USE types\n+   type(tp1) :: t1\n+   type(tp4) :: t4\n+\n+   namelist /a/ t1    ! { dg-error \"has PRIVATE components and cannot be a member of PUBLIC namelist\" }\n+   namelist /b/ t4    ! { dg-error \"has PRIVATE components and cannot be a member of PUBLIC namelist\" }\n+\n+  integer, private :: i\n+  namelist /c/ i      ! { dg-error \"was declared PRIVATE and cannot be member of PUBLIC namelist\" }\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"types nml\" } }"}, {"sha": "be050d954c0ddda9df2136ee3953f433181ba285", "filename": "gcc/testsuite/gfortran.dg/namelist_34.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_34.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_34.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_34.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+!\n+! PR fortran/32905 - accepts types with ultimate POINTER components\n+!\n+MODULE types\n+  type :: tp3\n+    real :: x\n+    integer, pointer :: i\n+  end type\n+\n+  type :: tp2\n+    type(tp3) :: t\n+  end type\n+\n+  type :: tp1\n+    integer :: i\n+    type(tp2) :: t\n+  end type\n+END MODULE\n+\n+MODULE nml\n+USE types\n+   type(tp1) :: t1\n+   type(tp3) :: t3\n+\n+   namelist /a/ t1    ! { dg-error \"cannot have POINTER components\" }\n+   namelist /b/ t3    ! { dg-error \"cannot have POINTER components\" }\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"types nml\" } }"}, {"sha": "531f636d5784cfc0921b7a8a620c11ee19a6f65a", "filename": "gcc/testsuite/gfortran.dg/namelist_35.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_35.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/31818 - accepts namelists with assumed-shape arrays\n+!\n+\n+subroutine test(cha)\n+  implicit none\n+  character(len=10) :: cha(:)\n+  namelist /z/  cha             ! { dg-error \"must not have assumed shape\" }\n+end subroutine test"}, {"sha": "d7ccfd106ca1fd9b62ed186e4293ba39fb6203b5", "filename": "gcc/testsuite/gfortran.dg/namelist_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca320dca64f20a69be6cbfd0145df99a5168ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90?ref=5cca320dca64f20a69be6cbfd0145df99a5168ac", "patch": "@@ -6,7 +6,7 @@\n !\n SUBROUTINE S1(I)\n  integer :: a,b(I)\n- NAMELIST /NLIST/ a,b ! { dg-error \"must have constant shape to be a NAMELIST object\" }\n+ NAMELIST /NLIST/ a,b ! { dg-error \"must have constant shape\" }\n  a=1 ; b=2\n  write(6,NML=NLIST)\n END SUBROUTINE S1"}]}