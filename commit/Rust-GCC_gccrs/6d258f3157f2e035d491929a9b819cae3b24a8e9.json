{"sha": "6d258f3157f2e035d491929a9b819cae3b24a8e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyNThmMzE1N2YyZTAzNWQ0OTE5MjlhOWI4MTljYWUzYjI0YThlOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-27T19:32:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-27T19:32:07Z"}, "message": "re PR c++/47687 ([C++0x] Crash on a lambda returning a lambda (using std::function))\n\n\tPR c++/47687\n\t* pt.c (dependent_type_p_r): Avoid infinite recursion.\n\nFrom-SVN: r174354", "tree": {"sha": "245de3ff34e4cbf3807e4e35e972087b8c824419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245de3ff34e4cbf3807e4e35e972087b8c824419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d258f3157f2e035d491929a9b819cae3b24a8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d258f3157f2e035d491929a9b819cae3b24a8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d258f3157f2e035d491929a9b819cae3b24a8e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d258f3157f2e035d491929a9b819cae3b24a8e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87fd3cf18a7e5d67bbbf9a96c34c5476544a4eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fd3cf18a7e5d67bbbf9a96c34c5476544a4eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fd3cf18a7e5d67bbbf9a96c34c5476544a4eac"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "edc14219e61cafafe0394964f2b86991498d31c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d258f3157f2e035d491929a9b819cae3b24a8e9", "patch": "@@ -1,5 +1,8 @@\n 2011-05-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47687\n+\t* pt.c (dependent_type_p_r): Avoid infinite recursion.\n+\n \tPR c++/48284\n \t* error.c (dump_expr) [COMPONENT_REF]: Use pp_cxx_dot\n \twith INDIRECT_REF of REFERENCE_TYPE."}, {"sha": "ae3d83da39db5f38aa44d4746d1c4080850275ce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6d258f3157f2e035d491929a9b819cae3b24a8e9", "patch": "@@ -18260,8 +18260,15 @@ dependent_type_p_r (tree type)\n   scope = TYPE_CONTEXT (type);\n   if (scope && TYPE_P (scope))\n     return dependent_type_p (scope);\n-  else if (scope && TREE_CODE (scope) == FUNCTION_DECL)\n-    return type_dependent_expression_p (scope);\n+  /* Don't use type_dependent_expression_p here, as it can lead\n+     to infinite recursion trying to determine whether a lambda\n+     nested in a lambda is dependent (c++/47687).  */\n+  else if (scope && TREE_CODE (scope) == FUNCTION_DECL\n+\t   && DECL_LANG_SPECIFIC (scope)\n+\t   && DECL_TEMPLATE_INFO (scope)\n+\t   && (any_dependent_template_arguments_p\n+\t       (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (scope)))))\n+    return true;\n \n   /* Other types are non-dependent.  */\n   return false;"}, {"sha": "841a2023d882033e25215ad1433544d7c64408d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d258f3157f2e035d491929a9b819cae3b24a8e9", "patch": "@@ -1,5 +1,7 @@\n 2011-05-27  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/lambda/lambda-nested4.C: New.\n+\n \t* g++.dg/cpp0x/error6.C: New.\n \n \t* g++.dg/cpp0x/error5.C: New."}, {"sha": "a5bd1a2f4ee27fd22de079ac5d279f3aca1637f9", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nested4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d258f3157f2e035d491929a9b819cae3b24a8e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested4.C?ref=6d258f3157f2e035d491929a9b819cae3b24a8e9", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/47687\n+// { dg-options -std=c++0x }\n+\n+template <class T> struct A { };\n+\n+auto inl = []{ return []{}; }();\n+typedef decltype(inl) inlt;\n+\n+A<inlt> a;"}]}