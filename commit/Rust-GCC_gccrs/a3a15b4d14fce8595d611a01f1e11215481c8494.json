{"sha": "a3a15b4d14fce8595d611a01f1e11215481c8494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhMTViNGQxNGZjZTg1OTVkNjExYTAxZjFlMTEyMTU0ODFjODQ5NA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-08-25T07:27:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-25T07:27:13Z"}, "message": "tm.texi: GNU CC -> GCC conversion.\n\n        * tm.texi: GNU CC -> GCC conversion.\n        (CC1_SPEC): Indicate it is used for all language front ends.\n\nFrom-SVN: r28844", "tree": {"sha": "f9710f031e8ebd607a1dad41984aa104d2a83ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9710f031e8ebd607a1dad41984aa104d2a83ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3a15b4d14fce8595d611a01f1e11215481c8494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a15b4d14fce8595d611a01f1e11215481c8494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a15b4d14fce8595d611a01f1e11215481c8494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a15b4d14fce8595d611a01f1e11215481c8494/comments", "author": null, "committer": null, "parents": [{"sha": "77c9524bad945106df922cd3972f4fc0fb0dff9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c9524bad945106df922cd3972f4fc0fb0dff9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c9524bad945106df922cd3972f4fc0fb0dff9e"}], "stats": {"total": 186, "additions": 96, "deletions": 90}, "files": [{"sha": "9bcbab9e57ae8cd17c6eba79879bb665950a6436", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a15b4d14fce8595d611a01f1e11215481c8494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a15b4d14fce8595d611a01f1e11215481c8494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3a15b4d14fce8595d611a01f1e11215481c8494", "patch": "@@ -1,3 +1,8 @@\n+Wed Aug 25 01:25:14 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* tm.texi: GNU CC -> GCC conversion.\n+\t(CC1_SPEC): Indicate it is used for all language front ends.\n+\n Tue Aug 24 23:43:03 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* flow.c (delete_block): Spell NOTE_INSN_EH_REGION_BEG and"}, {"sha": "e181371bcd096ccdaf93af3120fd0b7550ea2e15", "filename": "gcc/tm.texi", "status": "modified", "additions": 91, "deletions": 90, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a15b4d14fce8595d611a01f1e11215481c8494/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a15b4d14fce8595d611a01f1e11215481c8494/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=a3a15b4d14fce8595d611a01f1e11215481c8494", "patch": "@@ -100,9 +100,9 @@ If this macro is not defined, the default value is @code{\"\"}.\n \n @findex CPP_SPEC\n @item CPP_SPEC\n-A C string constant that tells the GNU CC driver program options to\n+A C string constant that tells the GCC driver program options to\n pass to CPP.  It can also specify how to translate options you\n-give to GNU CC into options for GNU CC to pass to the CPP.\n+give to GCC into options for GCC to pass to the CPP.\n \n Do not define this macro if it does not need to do anything.\n \n@@ -128,7 +128,7 @@ be defined.\n \n @findex SIGNED_CHAR_SPEC\n @item SIGNED_CHAR_SPEC\n-A C string constant that tells the GNU CC driver program options to\n+A C string constant that tells the GCC driver program options to\n pass to CPP.  By default, this macro is defined to pass the option\n @samp{-D__CHAR_UNSIGNED__} to CPP if @code{char} will be treated as\n @code{unsigned char} by @code{cc1}.\n@@ -138,32 +138,33 @@ definition.\n \n @findex CC1_SPEC\n @item CC1_SPEC\n-A C string constant that tells the GNU CC driver program options to\n-pass to @code{cc1}.  It can also specify how to translate options you\n-give to GNU CC into options for GNU CC to pass to the @code{cc1}.\n+A C string constant that tells the GCC driver program options to\n+pass to @code{cc1, cc1plus, f771, and the other language front ends}.\n+It can also specify how to translate options you give to GCC into options\n+for GCC to pass to front ends..\n \n Do not define this macro if it does not need to do anything.\n \n @findex CC1PLUS_SPEC\n @item CC1PLUS_SPEC\n-A C string constant that tells the GNU CC driver program options to\n+A C string constant that tells the GCC driver program options to\n pass to @code{cc1plus}.  It can also specify how to translate options you\n-give to GNU CC into options for GNU CC to pass to the @code{cc1plus}.\n+give to GCC into options for GCC to pass to the @code{cc1plus}.\n \n Do not define this macro if it does not need to do anything.\n \n @findex ASM_SPEC\n @item ASM_SPEC\n-A C string constant that tells the GNU CC driver program options to\n+A C string constant that tells the GCC driver program options to\n pass to the assembler.  It can also specify how to translate options\n-you give to GNU CC into options for GNU CC to pass to the assembler.\n+you give to GCC into options for GCC to pass to the assembler.\n See the file @file{sun3.h} for an example of this.\n \n Do not define this macro if it does not need to do anything.\n \n @findex ASM_FINAL_SPEC\n @item ASM_FINAL_SPEC\n-A C string constant that tells the GNU CC driver program how to\n+A C string constant that tells the GCC driver program how to\n run any programs which cleanup after the normal assembler.\n Normally, this is not needed.  See the file @file{mips.h} for\n an example of this.\n@@ -172,9 +173,9 @@ Do not define this macro if it does not need to do anything.\n \n @findex LINK_SPEC\n @item LINK_SPEC\n-A C string constant that tells the GNU CC driver program options to\n+A C string constant that tells the GCC driver program options to\n pass to the linker.  It can also specify how to translate options you\n-give to GNU CC into options for GNU CC to pass to the linker.\n+give to GCC into options for GCC to pass to the linker.\n \n Do not define this macro if it does not need to do anything.\n \n@@ -189,12 +190,12 @@ loads the standard C library from the usual place.  See @file{gcc.c}.\n \n @findex LIBGCC_SPEC\n @item LIBGCC_SPEC\n-Another C string constant that tells the GNU CC driver program\n+Another C string constant that tells the GCC driver program\n how and when to place a reference to @file{libgcc.a} into the\n linker command line.  This constant is placed both before and after\n the value of @code{LIB_SPEC}.\n \n-If this macro is not defined, the GNU CC driver provides a default that\n+If this macro is not defined, the GCC driver provides a default that\n passes the string @samp{-lgcc} to the linker unless the @samp{-shared}\n option is specified.\n \n@@ -643,7 +644,7 @@ generated code.\n @findex CAN_DEBUG_WITHOUT_FP\n @item CAN_DEBUG_WITHOUT_FP\n Define this macro if debugging can be performed even without a frame\n-pointer.  If this macro is defined, GNU CC will turn on the\n+pointer.  If this macro is defined, GCC will turn on the\n @samp{-fomit-frame-pointer} option whenever @samp{-O} is specified.\n @end table\n \n@@ -678,7 +679,7 @@ word has the lowest number.  This macro need not be a constant.\n @item WORDS_BIG_ENDIAN\n Define this macro to have the value 1 if, in a multiword object, the\n most significant word has the lowest number.  This applies to both\n-memory locations and registers; GNU CC fundamentally assumes that the\n+memory locations and registers; GCC fundamentally assumes that the\n order of words in memory is the same as the order in registers.  This\n macro need not be a constant.\n \n@@ -834,7 +835,7 @@ structure fields only.\n @findex ADJUST_FIELD_ALIGN\n @item ADJUST_FIELD_ALIGN (@var{field}, @var{computed})\n An expression for the alignment of a structure field @var{field} if the\n-alignment computed in the usual way is @var{computed}.  GNU CC uses\n+alignment computed in the usual way is @var{computed}.  GCC uses\n this value instead of the value in @code{BIGGEST_ALIGNMENT} or\n @code{BIGGEST_FIELD_ALIGNMENT}, if defined, for structure fields only.\n \n@@ -941,7 +942,7 @@ Unless the machine has bitfield instructions or you define\n @code{STRUCTURE_SIZE_BOUNDARY} that way, you must define\n @code{PCC_BITFIELD_TYPE_MATTERS} to have a nonzero value.\n \n-If your aim is to make GNU CC use the same conventions for laying out\n+If your aim is to make GCC use the same conventions for laying out\n bitfields as are used by another compiler, here is how to investigate\n what the other compiler does.  Compile and run this program:\n \n@@ -1075,10 +1076,10 @@ machine and @code{HOST_FLOAT_WORDS_BIG_ENDIAN} for the host.\n \n @findex DEFAULT_VTABLE_THUNKS\n @item DEFAULT_VTABLE_THUNKS\n-GNU CC supports two ways of implementing C++ vtables:  traditional or with\n+GCC supports two ways of implementing C++ vtables:  traditional or with\n so-called ``thunks''.  The flag @samp{-fvtable-thunk} chooses between them.\n Define this macro to be a C expression for the default value of that flag.\n-If @code{DEFAULT_VTABLE_THUNKS} is 0, GNU CC uses the traditional\n+If @code{DEFAULT_VTABLE_THUNKS} is 0, GCC uses the traditional\n implementation by default.  The ``thunk'' implementation is more efficient\n (especially if you have provided an implementation of\n @code{ASM_OUTPUT_MI_THUNK}, see @ref{Function Entry}), but is not binary\n@@ -1445,7 +1446,7 @@ Registers are allocated in order.\n @findex REG_ALLOC_ORDER\n @item REG_ALLOC_ORDER\n If defined, an initializer for a vector of integers, containing the\n-numbers of hard registers in the order in which GNU CC should prefer\n+numbers of hard registers in the order in which GCC should prefer\n to use them (from most preferred to least).\n \n If this macro is not defined, registers are used lowest numbered first\n@@ -1580,7 +1581,7 @@ this macro to return zero unless some other mechanism ensures the\n accessibility of the value in a narrower mode.\n \n You should define this macro to return nonzero in as many cases as\n-possible since doing so will allow GNU CC to perform better register\n+possible since doing so will allow GCC to perform better register\n allocation.\n \n @findex AVOID_CCMODE_COPIES\n@@ -1608,7 +1609,7 @@ function'' to mean a function that is suitable for this special\n handling, so that functions with no calls are not necessarily ``leaf\n functions''.\n \n-GNU CC assigns register numbers before it knows whether the function is\n+GCC assigns register numbers before it knows whether the function is\n suitable for leaf function treatment.  So it needs to renumber the\n registers in order to output a leaf function.  The following macros\n accomplish this.\n@@ -1622,7 +1623,7 @@ function treatment.\n \n If leaf function treatment involves renumbering the registers, then the\n registers marked here should be the ones before renumbering---those that\n-GNU CC would ordinarily allocate.  The registers which will actually be\n+GCC would ordinarily allocate.  The registers which will actually be\n used in the assembler code, after renumbering, should not be marked with 1\n in this vector.\n \n@@ -1665,7 +1666,7 @@ There are special features to handle computers where some of the\n Stack registers are normally written by pushing onto the stack, and are\n numbered relative to the top of the stack.\n \n-Currently, GNU CC can only handle one group of stack-like registers, and\n+Currently, GCC can only handle one group of stack-like registers, and\n they must be consecutively numbered.\n \n @table @code\n@@ -1700,7 +1701,7 @@ register number @var{regno} is an overlapping register.  This means a\n hard register which overlaps a hard register with a different number.\n (Such overlap is undesirable, but occasionally it allows a machine to\n be supported which otherwise could not be.)  This macro must return\n-nonzero for @emph{all} the registers which overlap each other.  GNU CC\n+nonzero for @emph{all} the registers which overlap each other.  GCC\n can use an overlapping register only in certain limited ways.  It can\n be used for allocation within a basic block, and may be spilled for\n reloading; that is all.\n@@ -2319,29 +2320,29 @@ debugging information like that provided by DWARF 2.\n @node Stack Checking\n @subsection Specifying How Stack Checking is Done\n \n-GNU CC will check that stack references are within the boundaries of\n+GCC will check that stack references are within the boundaries of\n the stack, if the @samp{-fstack-check} is specified, in one of three ways:\n \n @enumerate\n @item\n-If the value of the @code{STACK_CHECK_BUILTIN} macro is nonzero, GNU CC\n+If the value of the @code{STACK_CHECK_BUILTIN} macro is nonzero, GCC\n will assume that you have arranged for stack checking to be done at\n appropriate places in the configuration files, e.g., in\n-@code{FUNCTION_PROLOGUE}.  GNU CC will do not other special processing.\n+@code{FUNCTION_PROLOGUE}.  GCC will do not other special processing.\n \n @item\n If @code{STACK_CHECK_BUILTIN} is zero and you defined a named pattern\n-called @code{check_stack} in your @file{md} file, GNU CC will call that\n+called @code{check_stack} in your @file{md} file, GCC will call that\n pattern with one argument which is the address to compare the stack\n value against.  You must arrange for this pattern to report an error if\n the stack pointer is out of range.\n \n @item\n-If neither of the above are true, GNU CC will generate code to periodically\n+If neither of the above are true, GCC will generate code to periodically\n ``probe'' the stack pointer using the values of the macros defined below.\n @end enumerate\n \n-Normally, you will use the default values of these macros, so GNU CC\n+Normally, you will use the default values of these macros, so GCC\n will use the third approach.\n \n @table @code\n@@ -2350,20 +2351,20 @@ will use the third approach.\n A nonzero value if stack checking is done by the configuration files in a\n machine-dependent manner.  You should define this macro if stack checking \n is require by the ABI of your machine or if you would like to have to stack \n-checking in some more efficient way than GNU CC's portable approach.\n+checking in some more efficient way than GCC's portable approach.\n The default value of this macro is zero.\n \n @findex STACK_CHECK_PROBE_INTERVAL\n @item STACK_CHECK_PROBE_INTERVAL\n-An integer representing the interval at which GNU CC must generate stack\n+An integer representing the interval at which GCC must generate stack\n probe instructions.  You will normally define this macro to be no larger\n than the size of the ``guard pages'' at the end of a stack area.  The\n default value of 4096 is suitable for most systems.\n \n @findex STACK_CHECK_PROBE_LOAD\n @item STACK_CHECK_PROBE_LOAD\n-A integer which is nonzero if GNU CC should perform the stack probe \n-as a load instruction and zero if GNU CC should use a store instruction.\n+A integer which is nonzero if GCC should perform the stack probe \n+as a load instruction and zero if GCC should use a store instruction.\n The default is zero, which is the most efficient choice on most systems.\n \n @findex STACK_CHECK_PROTECT\n@@ -2374,27 +2375,27 @@ for languages where such a recovery is supported.  The default value of\n \n @findex STACK_CHECK_MAX_FRAME_SIZE\n @item STACK_CHECK_MAX_FRAME_SIZE\n-The maximum size of a stack frame, in bytes.  GNU CC will generate probe\n+The maximum size of a stack frame, in bytes.  GCC will generate probe\n instructions in non-leaf functions to ensure at least this many bytes of\n stack are available.  If a stack frame is larger than this size, stack\n-checking will not be reliable and GNU CC will issue a warning.  The\n-default is chosen so that GNU CC only generates one instruction on most\n+checking will not be reliable and GCC will issue a warning.  The\n+default is chosen so that GCC only generates one instruction on most\n systems.  You should normally not change the default value of this macro.\n \n @findex STACK_CHECK_FIXED_FRAME_SIZE\n @item STACK_CHECK_FIXED_FRAME_SIZE\n-GNU CC uses this value to generate the above warning message.  It\n+GCC uses this value to generate the above warning message.  It\n represents the amount of fixed frame used by a function, not including\n space for any callee-saved registers, temporaries and user variables.\n You need only specify an upper bound for this amount and will normally\n use the default of four words.\n \n @findex STACK_CHECK_MAX_VAR_SIZE\n @item STACK_CHECK_MAX_VAR_SIZE\n-The maximum size, in bytes, of an object that GNU CC will place in the\n+The maximum size, in bytes, of an object that GCC will place in the\n fixed area of the stack frame when the user specifies\n @samp{-fstack-check}.\n-GNU CC computed the default from the values of the above macros and you will\n+GCC computed the default from the values of the above macros and you will\n normally not need to override that default.\n @end table\n \n@@ -2621,7 +2622,7 @@ A C expression that is the number of bytes actually pushed onto the\n stack when an instruction attempts to push @var{npushed} bytes.\n \n If the target machine does not have a push instruction, do not define\n-this macro.  That directs GNU CC to use an alternate strategy: to\n+this macro.  That directs GCC to use an alternate strategy: to\n allocate the entire argument block and then store the arguments into\n it.\n \n@@ -2660,7 +2661,7 @@ registers.\n \n The value of this macro is the size, in bytes, of the area reserved for\n arguments passed in registers for the function represented by @var{fndecl},\n-which can be zero if GNU CC is calling a library function.\n+which can be zero if GCC is calling a library function.\n \n This space can be allocated by the caller, or be a part of the\n machine-dependent stack frame: @code{OUTGOING_REG_PARM_STACK_SPACE} says\n@@ -2693,7 +2694,7 @@ being called when it is known that such stack space must be allocated.\n In each case this value can be easily computed.\n \n When deciding whether a called function needs such stack space, and how\n-much space to reserve, GNU CC uses these two macros instead of\n+much space to reserve, GCC uses these two macros instead of\n @code{REG_PARM_STACK_SPACE}.\n \n @findex OUTGOING_REG_PARM_STACK_SPACE\n@@ -2927,7 +2928,7 @@ finding the arguments for the function being compiled.  If this macro is\n undefined, @code{INIT_CUMULATIVE_ARGS} is used instead.\n \n The value passed for @var{libname} is always 0, since library routines\n-with special calling conventions are never compiled with GNU CC.  The\n+with special calling conventions are never compiled with GCC.  The\n argument @var{libname} exists for symmetry with\n @code{INIT_CUMULATIVE_ARGS}.\n @c could use \"this macro\" in place of @code{INIT_CUMULATIVE_ARGS}, maybe.\n@@ -3183,7 +3184,7 @@ nothing when you use @samp{-freg-struct-return} mode.\n @node Caller Saves\n @subsection Caller-Saves Register Allocation\n \n-If you enable it, GNU CC can save registers around function calls.  This\n+If you enable it, GCC can save registers around function calls.  This\n makes it possible to use call-clobbered registers to hold variables that\n must live across calls.\n \n@@ -3460,7 +3461,7 @@ by the number @var{labelno}, so you would generate the name using\n \n @findex mcount\n The details of how the address should be passed to @code{mcount} are\n-determined by your operating system environment, not by GNU CC.  To\n+determined by your operating system environment, not by GCC.  To\n figure them out, compile a small program for profiling using the\n system's installed C compiler and look at the assembler code that\n results.\n@@ -3643,7 +3644,7 @@ support block profiling.\n @section Implementing the Varargs Macros\n @cindex varargs implementation\n \n-GNU CC comes with an implementation of @file{varargs.h} and\n+GCC comes with an implementation of @file{varargs.h} and\n @file{stdarg.h} that work without change on machines that pass arguments\n on the stack.  Other machines require their own implementations of\n varargs, and the two machine independent header files must have\n@@ -3809,7 +3810,7 @@ Otherwise, you should not define this macro.\n A @dfn{trampoline} is a small piece of code that is created at run time\n when the address of a nested function is taken.  It normally resides on\n the stack, in the stack frame of the containing function.  These macros\n-tell GNU CC how to generate code to allocate and initialize a\n+tell GCC how to generate code to allocate and initialize a\n trampoline.\n \n The instructions in the trampoline must do two things: load a constant\n@@ -3950,7 +3951,7 @@ its cache line.  Look in @file{m68k.h} as a guide.\n @item TRANSFER_FROM_TRAMPOLINE\n Define this macro if trampolines need a special subroutine to do their\n work.  The macro should expand to a series of @code{asm} statements\n-which will be compiled with GNU CC.  They go in a library function named\n+which will be compiled with GCC.  They go in a library function named\n @code{__transfer_from_trampoline}.\n \n If you need to avoid executing the ordinary prologue code of a compiled\n@@ -4059,7 +4060,7 @@ Most ports don't need to define this macro.\n @cindex @code{EDOM}, implicit usage\n @item TARGET_EDOM\n The value of @code{EDOM} on the target machine, as a C integer constant\n-expression.  If you don't define this macro, GNU CC does not attempt to\n+expression.  If you don't define this macro, GCC does not attempt to\n deposit the value of @code{EDOM} into @code{errno} directly.  Look in\n @file{/usr/include/errno.h} to find the value of @code{EDOM} on your\n system.\n@@ -4084,7 +4085,7 @@ macro, a reasonable default is used.\n @cindex @code{bzero}, implicit usage\n @cindex @code{memset}, implicit usage\n @item TARGET_MEM_FUNCTIONS\n-Define this macro if GNU CC should generate calls to the System V\n+Define this macro if GCC should generate calls to the System V\n (and ANSI C) library functions @code{memcpy} and @code{memset}\n rather than the BSD functions @code{bcopy} and @code{bzero}.\n \n@@ -4550,7 +4551,7 @@ and @var{op0} and @var{op1} are the left and right operands of the\n comparison, respectively.  You should modify @var{code}, @var{op0}, and\n @var{op1} as required.\n \n-GNU CC will not assume that the comparison resulting from this macro is\n+GCC will not assume that the comparison resulting from this macro is\n valid but will see if the resulting insn matches a pattern in the\n @file{md} file.\n \n@@ -4697,14 +4698,14 @@ is relative to those in @code{REGISTER_MOVE_COST}.  If moving between\n registers and memory is more expensive than between two registers, you\n should define this macro to express the relative cost.\n \n-If you do not define this macro, GNU CC uses a default cost of 4 plus\n+If you do not define this macro, GCC uses a default cost of 4 plus\n the cost of copying via a secondary reload register, if one is\n needed.  If your machine requires a secondary reload register to copy\n between memory and a register of @var{class} but the reload mechanism is\n more complex than copying via an intermediate, define this macro to\n reflect the actual cost of the move.\n \n-GNU CC defines the function @code{memory_move_secondary_cost} if\n+GCC defines the function @code{memory_move_secondary_cost} if\n secondary reloads are needed.  It computes the costs due to copying via\n a secondary register.  If your machine copies from memory using a\n secondary register in the conventional way but the default base value of\n@@ -4719,7 +4720,7 @@ the default; other values are interpreted relative to that.\n @end table\n \n Here are additional macros which do not specify precise relative costs,\n-but only that certain actions are more expensive than GNU CC would\n+but only that certain actions are more expensive than GCC would\n ordinarily expect.\n \n @table @code\n@@ -4930,7 +4931,7 @@ will be used.\n @item INIT_SECTION_ASM_OP\n If defined, a C expression whose value is a string containing the\n assembler operation to identify the following data as initialization\n-code.  If not defined, GNU CC will assume such a section does not\n+code.  If not defined, GCC will assume such a section does not\n exist.\n \n @findex EXTRA_SECTIONS\n@@ -5030,7 +5031,7 @@ unique sections.\n A C statement to build up a unique section name, expressed as a\n STRING_CST node, and assign it to @samp{DECL_SECTION_NAME (@var{decl})}.\n @var{reloc} indicates whether the initial value of @var{exp} requires\n-link-time relocations.  If you do not define this macro, GNU CC will use\n+link-time relocations.  If you do not define this macro, GCC will use\n the symbol name prefixed by @samp{.} as the section name.\n @end table\n \n@@ -5154,7 +5155,7 @@ see @file{attasm.h}.\n @findex ASM_IDENTIFY_GCC\n @item ASM_IDENTIFY_GCC (@var{file})\n A C statement to output assembler commands which will identify\n-the object file as having been compiled with GNU CC (or another\n+the object file as having been compiled with GCC (or another\n GNU compiler).\n \n If you don't define this macro, the string @samp{gcc_compiled.:}\n@@ -5201,7 +5202,7 @@ for the file format in use is appropriate.\n @item OUTPUT_QUOTED_STRING (@var{stream}, @var{name})\n A C statement to output the string @var{string} to the stdio stream\n @var{stream}.  If you do not call the function @code{output_quoted_string}\n-in your config files, GNU CC will only call it to output filenames to\n+in your config files, GCC will only call it to output filenames to\n the assembler source.  So you can use it to canonicalize the format\n of the filename using this macro.\n \n@@ -5312,10 +5313,10 @@ Berkeley Unix assembler, do not define the macro\n @findex CONSTANT_POOL_BEFORE_FUNCTION\n @item CONSTANT_POOL_BEFORE_FUNCTION\n You may define this macro as a C expression.  You should define the\n-expression to have a non-zero value if GNU CC should output the constant\n+expression to have a non-zero value if GCC should output the constant\n pool for a function before the code for the function, or a zero value if\n-GNU CC should output the constant pool after the function.  If you do\n-not define this macro, the usual case, GNU CC will output the constant\n+GCC should output the constant pool after the function.  If you do\n+not define this macro, the usual case, GCC will output the constant\n pool before the function.\n \n @findex ASM_OUTPUT_POOL_PROLOGUE\n@@ -5371,7 +5372,7 @@ A C statement to output assembler commands to at the end of the constant\n pool for a function.  @var{funname} is a string giving the name of the\n function.  Should the return type of the function be required, you can\n obtain it via @var{fundecl}.  @var{size} is the size, in bytes, of the\n-constant pool that GNU CC wrote immediately before this call.\n+constant pool that GCC wrote immediately before this call.\n \n If no constant-pool epilogue is required, the usual case, you need not\n define this macro.\n@@ -5465,7 +5466,7 @@ as the number of bits.\n @item ASM_OUTPUT_ALIGNED_DECL_COMMON (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n Like @code{ASM_OUTPUT_ALIGNED_COMMON} except that @var{decl} of the\n variable to be output, if there is one, or @code{NULL_TREE} if there\n-is not corresponding variable.  If you define this macro, GNU CC wil use it\n+is not corresponding variable.  If you define this macro, GCC wil use it\n in place of both @code{ASM_OUTPUT_COMMON} and\n @code{ASM_OUTPUT_ALIGNED_COMMON}.  Define this macro when you need to see\n the variable's decl in order to chose what to output.\n@@ -5540,7 +5541,7 @@ as the number of bits.\n @item ASM_OUTPUT_ALIGNED_DECL_LOCAL (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n Like @code{ASM_OUTPUT_ALIGNED_DECL} except that @var{decl} of the\n variable to be output, if there is one, or @code{NULL_TREE} if there\n-is not corresponding variable.  If you define this macro, GNU CC wil use it\n+is not corresponding variable.  If you define this macro, GCC wil use it\n in place of both @code{ASM_OUTPUT_DECL} and\n @code{ASM_OUTPUT_ALIGNED_DECL}.  Define this macro when you need to see\n the variable's decl in order to chose what to output.\n@@ -5641,7 +5642,7 @@ no other definition is available.  Use the expression\n itself; before and after that, output the additional assembler syntax\n for making that name weak, and a newline.\n \n-If you don't define this macro, GNU CC will not support weak\n+If you don't define this macro, GCC will not support weak\n symbols and you should not define the @code{SUPPORTS_WEAK} macro.\n \n @findex SUPPORTS_WEAK\n@@ -5790,7 +5791,7 @@ the tree nodes are available.\n A C statement to output to the stdio stream @var{stream} assembler code\n which defines (equates) the symbol @var{symbol} to have a value equal to\n the difference of the two symbols @var{high} and @var{low}, i.e.\n-@var{high} minus @var{low}.  GNU CC guarantees that the symbols @var{high}\n+@var{high} minus @var{low}.  GCC guarantees that the symbols @var{high}\n and @var{low} are already known by the assembler so that the difference\n resolves into a constant.\n \n@@ -5940,7 +5941,7 @@ this case, @code{ASM_OUTPUT_CONSTRUCTOR} does not produce an\n @code{N_SETT} symbol; initialization and termination functions are\n recognized simply by their names.  This requires an extra program in the\n linkage step, called @code{collect2}.  This program pretends to be the\n-linker, for use with GNU CC; it does its job by running the ordinary\n+linker, for use with GCC; it does its job by running the ordinary\n linker, but also arranges to include the vectors of initialization and\n termination functions.  These functions are called via @code{__main} as\n described above.\n@@ -5983,7 +5984,7 @@ and termination functions:\n @findex INIT_SECTION_ASM_OP\n @item INIT_SECTION_ASM_OP\n If defined, a C string constant for the assembler operation to identify\n-the following data as initialization code.  If not defined, GNU CC will\n+the following data as initialization code.  If not defined, GCC will\n assume such a section does not exist.  When you are using special\n sections for initialization and termination functions, this macro also\n controls how @file{crtstuff.c} and @file{libgcc2.c} arrange to run the\n@@ -6408,7 +6409,7 @@ or @samp{-fPIC} is in effect, the @code{data_section}, otherwise the\n @item EH_FRAME_SECTION_ASM_OP\n If defined, a C string constant for the assembler operation to switch to\n the section for exception handling frame unwind information.  If not\n-defined, GNU CC will provide a default definition if the target supports\n+defined, GCC will provide a default definition if the target supports\n named sections.  @file{crtstuff.c} uses this macro to switch to the\n appropriate section.\n \n@@ -6550,7 +6551,7 @@ registers that the compiler knows about and DBX does not, or vice\n versa.  In such cases, some register may need to have one number in\n the compiler and another for DBX.\n \n-If two registers have consecutive numbers inside GNU CC, and they can be\n+If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have\n consecutive numbers after renumbering with @code{DBX_REGISTER_NUMBER}.\n Otherwise, debuggers will be unable to access such a pair, because they\n@@ -6578,19 +6579,19 @@ having address @var{x} (an RTL expression).  The nominal offset is\n \n @findex PREFERRED_DEBUGGING_TYPE\n @item PREFERRED_DEBUGGING_TYPE\n-A C expression that returns the type of debugging output GNU CC should\n+A C expression that returns the type of debugging output GCC should\n produce when the user specifies just @samp{-g}.  Define\n-this if you have arranged for GNU CC to support more than one format of\n+this if you have arranged for GCC to support more than one format of\n debugging output.  Currently, the allowable values are @code{DBX_DEBUG},\n @code{SDB_DEBUG}, @code{DWARF_DEBUG}, @code{DWARF2_DEBUG}, and\n @code{XCOFF_DEBUG}.\n \n-When the user specifies @samp{-ggdb}, GNU CC normally also uses the\n+When the user specifies @samp{-ggdb}, GCC normally also uses the\n value of this macro to select the debugging output format, but with two\n exceptions.  If @code{DWARF2_DEBUGGING_INFO} is defined and\n-@code{LINKER_DOES_NOT_WORK_WITH_DWARF2} is not defined, GNU CC uses the\n+@code{LINKER_DOES_NOT_WORK_WITH_DWARF2} is not defined, GCC uses the\n value @code{DWARF2_DEBUG}.  Otherwise, if @code{DBX_DEBUGGING_INFO} is\n-defined, GNU CC uses @code{DBX_DEBUG}.\n+defined, GCC uses @code{DBX_DEBUG}.\n \n The value of this macro only affects the default debugging output; the\n user can always get a specific type of output by using @samp{-gstabs},\n@@ -6606,17 +6607,17 @@ These are specific options for DBX output.\n @table @code\n @findex DBX_DEBUGGING_INFO\n @item DBX_DEBUGGING_INFO\n-Define this macro if GNU CC should produce debugging output for DBX\n+Define this macro if GCC should produce debugging output for DBX\n in response to the @samp{-g} option.\n \n @findex XCOFF_DEBUGGING_INFO\n @item XCOFF_DEBUGGING_INFO\n-Define this macro if GNU CC should produce XCOFF format debugging output\n+Define this macro if GCC should produce XCOFF format debugging output\n in response to the @samp{-g} option.  This is a variant of DBX format.\n \n @findex DEFAULT_GDB_EXTENSIONS\n @item DEFAULT_GDB_EXTENSIONS\n-Define this macro to control whether GNU CC should by default generate\n+Define this macro to control whether GCC should by default generate\n GDB's extended version of DBX debugging information (assuming DBX-format\n debugging information is enabled at all).  If you don't define the\n macro, the default is 1: always generate the extended information\n@@ -6902,17 +6903,17 @@ Here are macros for SDB and DWARF output.\n @table @code\n @findex SDB_DEBUGGING_INFO\n @item SDB_DEBUGGING_INFO\n-Define this macro if GNU CC should produce COFF-style debugging output\n+Define this macro if GCC should produce COFF-style debugging output\n for SDB in response to the @samp{-g} option.\n \n @findex DWARF_DEBUGGING_INFO\n @item DWARF_DEBUGGING_INFO\n-Define this macro if GNU CC should produce dwarf format debugging output\n+Define this macro if GCC should produce dwarf format debugging output\n in response to the @samp{-g} option.\n \n @findex DWARF2_DEBUGGING_INFO\n @item DWARF2_DEBUGGING_INFO\n-Define this macro if GNU CC should produce dwarf version 2 format\n+Define this macro if GCC should produce dwarf version 2 format\n debugging output in response to the @samp{-g} option.\n \n To support optional call frame debugging information, you must also\n@@ -6923,15 +6924,15 @@ as appropriate from @code{FUNCTION_PROLOGUE} if you don't.\n \n @findex DWARF2_FRAME_INFO\n @item DWARF2_FRAME_INFO\n-Define this macro to a nonzero value if GNU CC should always output\n+Define this macro to a nonzero value if GCC should always output\n Dwarf 2 frame information.  If @code{DWARF2_UNWIND_INFO}\n-(@pxref{Exception Region Output} is nonzero, GNU CC will output this\n+(@pxref{Exception Region Output} is nonzero, GCC will output this\n information not matter how you define @code{DWARF2_FRAME_INFO}.\n \n @findex LINKER_DOES_NOT_WORK_WITH_DWARF2\n @item LINKER_DOES_NOT_WORK_WITH_DWARF2\n Define this macro if the linker does not work with Dwarf version 2.\n-Normally, if the user specifies only @samp{-ggdb} GNU CC will use Dwarf\n+Normally, if the user specifies only @samp{-ggdb} GCC will use Dwarf\n version 2 if available; this macro disables this.  See the description\n of the @code{PREFERRED_DEBUGGING_TYPE} macro for more details.\n \n@@ -7366,7 +7367,7 @@ tested into the sign bit.\n There is no way to describe a machine that always sets the low-order bit\n for a true value, but does not guarantee the value of any other bits,\n but we do not know of any machine that has such an instruction.  If you\n-are trying to port GNU CC to such a machine, include an instruction to\n+are trying to port GCC to such a machine, include an instruction to\n perform a logical-and of the result with 1 in the pattern for the\n comparison operators and let us know\n @ifset USING\n@@ -7640,7 +7641,7 @@ only needed if neither @code{HAVE_ATEXIT} nor\n Define this macro as a C expression that is nonzero if it is safe for the\n delay slot scheduler to place instructions in the delay slot of @var{insn},\n even if they appear to use a resource set or clobbered in @var{insn}.\n-@var{insn} is always a @code{jump_insn} or an @code{insn}; GNU CC knows that\n+@var{insn} is always a @code{jump_insn} or an @code{insn}; GCC knows that\n every @code{call_insn} has this behavior.  On machines where some @code{insn}\n or @code{jump_insn} is really a function call and hence has this behavior,\n you should define this macro."}]}