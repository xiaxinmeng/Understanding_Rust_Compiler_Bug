{"sha": "71837f64ab07ed915ac333f620826668566b9cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4MzdmNjRhYjA3ZWQ5MTVhYzMzM2Y2MjA4MjY2Njg1NjZiOWNmYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T08:02:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-25T08:02:57Z"}, "message": "Fix typo: paramter -> parameter [PR93864]\n\n2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR translation/93864\n\t* config/lm32/lm32.c (lm32_setup_incoming_varargs): Fix comment typo\n\tparamter -> parameter.\n\t* config/aarch64/aarch64.c (aarch64_is_extend_from_extract): Likewise.\n\t* ipa-prop.h (struct ipa_agg_replacement_value): Likewise.\n\n\t* intrinsic.texi (CO_BROADCAST): Fix typo, paramter -> parameter.\n\t* trans-array.c (gfc_allocate_pdt_comp, gfc_deallocate_pdt_comp,\n\tgfc_check_pdt_dummy): Fix comment typo paramter -> parameter.\n\n\t* objc.dg/encode-2.m: Fix comment typo paramter -> parameter.\n\t* obj-c++.dg/encode-4.mm: Likewise.\n\t* gfortran.dg/data_array_5.f90: Likewise.\n\t* gcc.dg/decl-1.c: Likewise.", "tree": {"sha": "f9b75100600d6ff5b653cc6c19b6c3e5757292dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b75100600d6ff5b653cc6c19b6c3e5757292dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71837f64ab07ed915ac333f620826668566b9cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71837f64ab07ed915ac333f620826668566b9cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71837f64ab07ed915ac333f620826668566b9cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71837f64ab07ed915ac333f620826668566b9cfb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267cca3d20139ecea6b023ef0d5767ecf703e93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267cca3d20139ecea6b023ef0d5767ecf703e93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267cca3d20139ecea6b023ef0d5767ecf703e93a"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "0d6cf71cb04be919297c84ce37e747458fbe81e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -1,3 +1,11 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/93864\n+\t* config/lm32/lm32.c (lm32_setup_incoming_varargs): Fix comment typo\n+\tparamter -> parameter.\n+\t* config/aarch64/aarch64.c (aarch64_is_extend_from_extract): Likewise.\n+\t* ipa-prop.h (struct ipa_agg_replacement_value): Likewise.\n+\n 2020-02-24  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* doc/install.texi (--enable-checking): Properly document current"}, {"sha": "f53c98e73765387974cc14f3d3ab4840a9331a08", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -2294,7 +2294,7 @@ aarch64_is_noplt_call_p (rtx sym)\n \n /* Return true if the offsets to a zero/sign-extract operation\n    represent an expression that matches an extend operation.  The\n-   operands represent the paramters from\n+   operands represent the parameters from\n \n    (extract:MODE (mult (reg) (MULT_IMM)) (EXTRACT_IMM) (const_int 0)).  */\n bool"}, {"sha": "9bc3824d506d24721e35cceddaf71a58c0b78025", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -691,10 +691,10 @@ lm32_setup_incoming_varargs (cumulative_args_t cum_v,\n   else\n     {\n       /* this is the common case, we have been passed details setup\n-         for the last named argument, we want to skip over the\n-         registers, if any used in passing this named paramter in\n-         order to determine which is the first registers used to pass\n-         anonymous arguments.  */\n+\t for the last named argument, we want to skip over the\n+\t registers, if any used in passing this named parameter in\n+\t order to determine which is the first registers used to pass\n+\t anonymous arguments.  */\n       int size = arg.promoted_size_in_bytes ();\n \n       first_anon_arg ="}, {"sha": "bb273563cc00a41a478f6e2bdb0860ca86ac4597", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -1,5 +1,12 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/93864\n+\t* intrinsic.texi (CO_BROADCAST): Fix typo, paramter -> parameter.\n+\t* trans-array.c (gfc_allocate_pdt_comp, gfc_deallocate_pdt_comp,\n+\tgfc_check_pdt_dummy): Fix comment typo paramter -> parameter.\n+\n 2020-02-24  Mark Eggleston  <mark.eggleston@codethink.com>\n-\tSteven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93835\n \t* decl.c (gfc_match_data) : Check whether the data expression"}, {"sha": "a1ecf5933ba703b93b7f6f0abdbf77d65f06a5cc", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -3693,7 +3693,7 @@ Collective subroutine\n @item @emph{Arguments}:\n @multitable @columnfractions .20 .65\n @item @var{A}            @tab INTENT(INOUT) argument; shall have the same\n-dynamic type and type paramters on all images of the current team. If it\n+dynamic type and type parameters on all images of the current team. If it\n is an array, it shall have the same shape on all images.\n @item @var{SOURCE_IMAGE} @tab a scalar integer expression.\n It shall have the same the same value on all images and refer to an"}, {"sha": "65ba84c672fc4258b22ebc580ef0a0700bf8da62", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -9846,7 +9846,7 @@ gfc_copy_only_alloc_comp (gfc_symbol * der_type, tree decl, tree dest, int rank)\n }\n \n \n-/* Recursively traverse an object of paramterized derived type, generating\n+/* Recursively traverse an object of parameterized derived type, generating\n    code to allocate parameterized components.  */\n \n tree\n@@ -9862,7 +9862,7 @@ gfc_allocate_pdt_comp (gfc_symbol * der_type, tree decl, int rank,\n   return res;\n }\n \n-/* Recursively traverse an object of paramterized derived type, generating\n+/* Recursively traverse an object of parameterized derived type, generating\n    code to deallocate parameterized components.  */\n \n tree\n@@ -9873,7 +9873,7 @@ gfc_deallocate_pdt_comp (gfc_symbol * der_type, tree decl, int rank)\n }\n \n \n-/* Recursively traverse a dummy of paramterized derived type to check the\n+/* Recursively traverse a dummy of parameterized derived type to check the\n    values of LEN parameters.  */\n \n tree"}, {"sha": "ea5043acf4f8ac6d77b60e775614508a7504d9e4", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -738,7 +738,7 @@ struct GTY(()) ipa_agg_replacement_value\n   HOST_WIDE_INT offset;\n   /* The constant value.  */\n   tree value;\n-  /* The paramter index.  */\n+  /* The parameter index.  */\n   int index;\n   /* Whether the value was passed by reference.  */\n   bool by_ref;"}, {"sha": "fca49c36c194349426a1a5bc6aefd4ecd6277266", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -1,3 +1,11 @@\n+2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/93864\n+\t* objc.dg/encode-2.m: Fix comment typo paramter -> parameter.\n+\t* obj-c++.dg/encode-4.mm: Likewise.\n+\t* gfortran.dg/data_array_5.f90: Likewise.\n+\t* gcc.dg/decl-1.c: Likewise.\n+\n 2020-02-24  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93032"}, {"sha": "8bad2d368ba00886c9cb8011163c32551baf4a6b", "filename": "gcc/testsuite/gcc.dg/decl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -6,7 +6,7 @@\n    6.7.5.3 p11.  Also see C89 DR #009, which was erroneously omitted\n    from C99, and resubmitted as DR #249: if in a parameter\n    declaration, an identifier can be read as a typedef name or a\n-   paramter name, it is read as a typedef name).  */\n+   parameter name, it is read as a typedef name).  */\n \n /* { dg-do compile } */\n "}, {"sha": "9f62b93dd3800f23b42786a6455ed6bd1d261a6f", "filename": "gcc/testsuite/gfortran.dg/data_array_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_array_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_array_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_array_5.f90?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! Tests the fix for PR36371, in which the locus for the errors pointed to\n-! the paramter declaration rather than the data statement.\n+! the parameter declaration rather than the data statement.\n !\n ! Contributed by Dominique d'Humieres <dominiq@lps.ens.fr>\n !"}, {"sha": "ac398c8c715a349c112bd097468e0135f2526a3a", "filename": "gcc/testsuite/obj-c++.dg/encode-4.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -2,10 +2,10 @@\n \n /* The _encoded_ parameter offsets for Objective-C methods are \n    computed inductively as follows:\n-    - The first paramter (self) has offset 0;\n+    - The first parameter (self) has offset 0;\n     - The k-th parameter (k > 1) has offset equal to the\n       sum of:\n-        - the offset of the k-1-st paramter\n+        - the offset of the k-1-st parameter\n         - the (void *)-promoted size of the k-1-st parameter.\n \n    Note that the encoded offsets need not correspond"}, {"sha": "1f496c1a961cb28ae6413779019a4446ab563efb", "filename": "gcc/testsuite/objc.dg/encode-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71837f64ab07ed915ac333f620826668566b9cfb/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m?ref=71837f64ab07ed915ac333f620826668566b9cfb", "patch": "@@ -2,10 +2,10 @@\n \n /* The _encoded_ parameter offsets for Objective-C methods are \n    computed inductively as follows:\n-    - The first paramter (self) has offset 0;\n+    - The first parameter (self) has offset 0;\n     - The k-th parameter (k > 1) has offset equal to the\n       sum of:\n-        - the offset of the k-1-st paramter\n+        - the offset of the k-1-st parameter\n         - the (void *)-promoted size of the k-1-st parameter.\n \n    Note that the encoded offsets need not correspond"}]}