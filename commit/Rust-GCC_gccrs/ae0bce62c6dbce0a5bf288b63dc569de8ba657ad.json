{"sha": "ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwYmNlNjJjNmRiY2UwYTViZjI4OGI2M2RjNTY5ZGU4YmE2NTdhZA==", "commit": {"author": {"name": "Razya Ladelsky", "email": "razya@il.ibm.com", "date": "2007-12-18T11:21:48Z"}, "committer": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2007-12-18T11:21:48Z"}, "message": "tree-parloops.c (reduiction_info): Change documentation of reduction_initial field.\n\n2007-12-18  Razya Ladelsky <razya@il.ibm.com>\n\n        * tree-parloops.c (reduiction_info): Change documentation of\n        reduction_initial field.\n        (initialize_reductions): Remove creation of reduction_initial\n        variable.\n        (create_loads_for_reductions): don't join reduction_initial to\n        the loaded value.\n\nFrom-SVN: r131035", "tree": {"sha": "43b95a9956436ddf3bf386a10378a8e88beec0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b95a9956436ddf3bf386a10378a8e88beec0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad/comments", "author": null, "committer": null, "parents": [{"sha": "cd55ac9b9d053997b8c0e2eeaab95d0f779c0a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd55ac9b9d053997b8c0e2eeaab95d0f779c0a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd55ac9b9d053997b8c0e2eeaab95d0f779c0a1e"}], "stats": {"total": 86, "additions": 32, "deletions": 54}, "files": [{"sha": "ee3304e3023f037ea2d456c5ba3b71f3c1c60188", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "patch": "@@ -1,3 +1,12 @@\n+2007-12-18  Razya Ladelsky <razya@il.ibm.com>\n+\n+        * tree-parloops.c (reduiction_info): Change documentation of\n+        reduction_initial field.\n+        (initialize_reductions): Remove creation of reduction_initial\n+        variable.\n+        (create_loads_for_reductions): don't join reduction_initial to\n+        the loaded value.\n+\n 2007-12-18  Kaz Kylheku  <kaz@zeugmasystems.com>\n \n \tPR rtl-optimization/34456"}, {"sha": "550c2e5e1e485ef35864812038a6829c7da8cc71", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 23, "deletions": 54, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0bce62c6dbce0a5bf288b63dc569de8ba657ad/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=ae0bce62c6dbce0a5bf288b63dc569de8ba657ad", "patch": "@@ -106,25 +106,22 @@ parloop\n ....\n \n \n-  # A new variable is created for each reduction:\n-  \"reduction_initial\" is the initial value given by the user.\n-  It is kept and will be used after the parallel computing is done.  #\n+  # Storing the the initial value given by the user.  #\n \n-  reduction_initial.24_46 = 1;\n-  \n-  # Storing the neutral value of the\n-  particular reduction's operation, e.g. 0 for PLUS_EXPR, \n-  1 for MULT_EXPR, etc. into the reduction field.\n-  This is done in create_stores_for_reduction.  #\n+  .paral_data_store.32.sum.27 = 1;\n  \n-  .paral_data_store.32.sum.27 = 0;\n-  \n   #pragma omp parallel num_threads(4) \n \n   #pragma omp for schedule(static)\n-  # sum.27_29 = PHI <sum.27_11, 0> # The neutral element replaces\n- \t\t\t           the user's inital value.  #\n+\n+  # The neutral element corresponding to the particular\n+  reduction's operation, e.g. 0 for PLUS_EXPR,\n+  1 for MULT_EXPR, etc. replaces the user's initial value.  #\n+\n+  # sum.27_29 = PHI <sum.27_11, 0>\n+\n   sum.27_11 = D.1827_8 + sum.27_29;\n+\n   OMP_CONTINUE\n \n   # Adding this reduction phi is done at create_phi_for_local_result() #\n@@ -143,12 +140,12 @@ parloop\n   \n  # collecting the result after the join of the threads is done at\n   create_loads_for_reductions().\n-  a new variable \"reduction_final\" is created.  It calculates the final\n-  value from the initial value and the value computed by the threads #\n+  The value computed by the threads is loaded from the\n+  shared struct.  #\n+\n  \n   .paral_data_load.33_52 = &.paral_data_store.32;\n-  reduction_final.34_53 = .paral_data_load.33_52->sum.27;\n-  sum_37 = reduction_initial.24_46 + reduction_final.34_53;\n+  sum_37 =  .paral_data_load.33_52->sum.27;\n   sum_43 = D.1795_41 + sum_37;\n \n   exit bb:\n@@ -174,8 +171,7 @@ struct reduction_info\n   enum tree_code reduction_code;\t/* code for the reduction operation.  */\n   tree keep_res;\t\t/* The PHI_RESULT of this phi is the resulting value \n \t\t\t\t   of the reduction variable when existing the loop. */\n-  tree initial_value;\t\t/* An ssa name representing a new variable holding\n-\t\t\t\t   the initial value of the reduction var before entering the loop.   */\n+  tree initial_value;\t\t/* The initial value of the reduction var before entering the loop.  */\n   tree field;\t\t\t/*  the name of the field in the parloop data structure intended for reduction.  */\n   tree init;\t\t\t/* reduction initialization value.  */\n   tree new_phi;\t\t\t/* (helper field) Newly created phi node whose result \n@@ -490,9 +486,7 @@ take_address_of (tree var, tree type, struct loop *loop, htab_t decl_address)\n static int\n initialize_reductions (void **slot, void *data)\n {\n-  tree stmt;\n   tree init, c;\n-  tree name1;\n   tree bvar, type, arg;\n   edge e;\n \n@@ -529,19 +523,10 @@ initialize_reductions (void **slot, void *data)\n   e = loop_preheader_edge (loop);\n   arg = PHI_ARG_DEF_FROM_EDGE (reduc->reduc_phi, e);\n   /* Create new variable to hold the initial value.  */\n-  type = TREE_TYPE (bvar);\n-  bvar = create_tmp_var (type, \"reduction_initial\");\n-  add_referenced_var (bvar);\n \n-  stmt = build_gimple_modify_stmt (bvar, arg);\n-  name1 = make_ssa_name (bvar, stmt);\n-  GIMPLE_STMT_OPERAND (stmt, 0) = name1;\n-  SSA_NAME_DEF_STMT (name1) = stmt;\n-\n-  bsi_insert_on_edge_immediate (e, stmt);\n   SET_USE (PHI_ARG_DEF_PTR_FROM_EDGE\n \t   (reduc->reduc_phi, loop_preheader_edge (loop)), init);\n-  reduc->initial_value = name1;\n+  reduc->initial_value = arg;\n   return 1;\n }\n \n@@ -928,11 +913,8 @@ create_call_for_reduction (struct loop *loop, htab_t reduction_list,\n   htab_traverse (reduction_list, create_call_for_reduction_1, ld_st_data);\n }\n \n-/* Callback for htab_traverse.  Create a new variable that loads the \n-   final reduction value at the  \n-   join point of all threads, adds the initial value the reduction \n-   variable had before the parallel computation started, and \n-   inserts it in the right place.  */\n+/* Callback for htab_traverse.  Loads the final reduction value at the\n+   join point of all threads, and inserts it in the right place.  */\n \n static int\n create_loads_for_reductions (void **slot, void *data)\n@@ -944,28 +926,15 @@ create_loads_for_reductions (void **slot, void *data)\n   tree type = TREE_TYPE (GIMPLE_STMT_OPERAND (red->reduc_stmt, 0));\n   tree struct_type = TREE_TYPE (TREE_TYPE (clsn_data->load));\n   tree load_struct;\n-  tree bvar, name;\n+  tree name;\n   tree x;\n \n   bsi = bsi_after_labels (clsn_data->load_bb);\n   load_struct = fold_build1 (INDIRECT_REF, struct_type, clsn_data->load);\n   load_struct = build3 (COMPONENT_REF, type, load_struct, red->field,\n \t\t\tNULL_TREE);\n-  bvar = create_tmp_var (type, \"reduction_final\");\n-  add_referenced_var (bvar);\n-\n-  /* Apply operation between the new variable which is the result\n-     of computation all threads, and the initial value which is kept\n-     at reduction->inital_value.  */\n \n-  stmt = build_gimple_modify_stmt (bvar, load_struct);\n-  name = make_ssa_name (bvar, stmt);\n-  GIMPLE_STMT_OPERAND (stmt, 0) = name;\n-  SSA_NAME_DEF_STMT (name) = stmt;\n-  bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);\n-  x =\n-    fold_build2 (red->reduction_code, TREE_TYPE (load_struct),\n-\t\t name, red->initial_value);\n+  x = load_struct;\n   name = PHI_RESULT (red->keep_res);\n   stmt = build_gimple_modify_stmt (name, x);\n   GIMPLE_STMT_OPERAND (stmt, 0) = name;\n@@ -1022,7 +991,7 @@ create_stores_for_reduction (void **slot, void *data)\n     build_gimple_modify_stmt (build3\n                               (COMPONENT_REF, type, clsn_data->store,\n                                red->field, NULL_TREE),\n-                               red->init );\n+                               red->initial_value);\n   mark_virtual_ops_for_renaming (stmt);\n   bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);\n \n@@ -1169,8 +1138,8 @@ separate_decls_in_loop (struct loop *loop, htab_t reduction_list,\n       htab_traverse (name_copies, create_loads_and_stores_for_name,\n \t\t     ld_st_data);\n \n-      /* Load the calculation from memory into a new \n-         reduction variable (after the join of the threads).  */\n+      /* Load the calculation from memory (after the join of the threads).  */\n+\n       if (htab_elements (reduction_list) > 0)\n \t{\n \t  htab_traverse (reduction_list, create_stores_for_reduction,"}]}