{"sha": "0a1138af63725af5098e259237492b819631e05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExMTM4YWY2MzcyNWFmNTA5OGUyNTkyMzc0OTJiODE5NjMxZTA1Yg==", "commit": {"author": {"name": "Daniel Carrera", "email": "dcarrera@gmail.com", "date": "2011-06-16T23:09:36Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-06-16T23:09:36Z"}, "message": "single.c (_gfortran_caf_register): Store the address of all static coarrays in a linked list.\n\n2011-06-17  Daniel Carrera  <dcarrera@gmail.com>\n\n        * caf/single.c (_gfortran_caf_register): Store the address\n        of all static coarrays in a linked list.\n        (_gfortran_caf_finalize): Free memory of staic coarrays.\n        * caf/mpi.c (_gfortran_caf_register): Store the address\n        of all static coarrays in a linked list. Initialize MPI\n        if necessary.\n        (_gfortran_caf_finalize): Free memory of staic coarrays.\n        (_gfortran_caf_init): Check if MPI is already initialized\n        before initializing again.\n        * caf/libcaf.h: Add a type to caf_register_t to distinguish\n        static coarrays and add the type caf_static_t to make the\n        linked list of static coarrays.\n\nFrom-SVN: r175124", "tree": {"sha": "1a0780f50a63ba3471f12fc0843bb7bd1dcd422b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0780f50a63ba3471f12fc0843bb7bd1dcd422b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a1138af63725af5098e259237492b819631e05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1138af63725af5098e259237492b819631e05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1138af63725af5098e259237492b819631e05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1138af63725af5098e259237492b819631e05b/comments", "author": {"login": "dcarrera", "id": 89128, "node_id": "MDQ6VXNlcjg5MTI4", "avatar_url": "https://avatars.githubusercontent.com/u/89128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcarrera", "html_url": "https://github.com/dcarrera", "followers_url": "https://api.github.com/users/dcarrera/followers", "following_url": "https://api.github.com/users/dcarrera/following{/other_user}", "gists_url": "https://api.github.com/users/dcarrera/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcarrera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcarrera/subscriptions", "organizations_url": "https://api.github.com/users/dcarrera/orgs", "repos_url": "https://api.github.com/users/dcarrera/repos", "events_url": "https://api.github.com/users/dcarrera/events{/privacy}", "received_events_url": "https://api.github.com/users/dcarrera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9f389f0da308bdb9259afc8be4b7b207acd3900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f389f0da308bdb9259afc8be4b7b207acd3900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f389f0da308bdb9259afc8be4b7b207acd3900"}], "stats": {"total": 117, "additions": 97, "deletions": 20}, "files": [{"sha": "bd95cd355c1fb00c7ea977a16e388fa9bdde338f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1138af63725af5098e259237492b819631e05b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1138af63725af5098e259237492b819631e05b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0a1138af63725af5098e259237492b819631e05b", "patch": "@@ -1,3 +1,18 @@\n+2011-06-17  Daniel Carrera  <dcarrera@gmail.com>\n+\n+\t* caf/single.c (_gfortran_caf_register): Store the address\n+\tof all static coarrays in a linked list.\n+\t(_gfortran_caf_finalize): Free memory of staic coarrays.\n+\t* caf/mpi.c (_gfortran_caf_register): Store the address\n+\tof all static coarrays in a linked list. Initialize MPI\n+\tif necessary.\n+\t(_gfortran_caf_finalize): Free memory of staic coarrays.\n+\t(_gfortran_caf_init): Check if MPI is already initialized\n+\tbefore initializing again.\n+\t* caf/libcaf.h: Add a type to caf_register_t to distinguish\n+\tstatic coarrays and add the type caf_static_t to make the\n+\tlinked list of static coarrays.\n+\n 2011-06-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/unix.c (buf_seek): Return error if file is not seekable."}, {"sha": "4177985536dc7e36c41f9f23565b6a510e056edd", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=0a1138af63725af5098e259237492b819631e05b", "patch": "@@ -38,14 +38,22 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define STAT_LOCKED_OTHER_IMAGE\t2\n #define STAT_STOPPED_IMAGE \t3\n \n-\n+/* Describes what type of array we are registerring.  */\n typedef enum caf_register_t {\n-  CAF_REGTYPE_COARRAY,\n+  CAF_REGTYPE_COARRAY_STATIC,\n+  CAF_REGTYPE_COARRAY_ALLOC,\n   CAF_REGTYPE_LOCK,\n-  CAF_REGTYPE_LOCK_COMP \n+  CAF_REGTYPE_LOCK_COMP\n }\n caf_register_t;\n \n+/* Linked list of static coarrays registered.  */\n+typedef struct caf_static_t {\n+  void **token;\n+  struct caf_static_t *prev;\n+}\n+caf_static_t;\n+\n \n void _gfortran_caf_init (int *, char ***, int *, int *);\n void _gfortran_caf_finalize (void);"}, {"sha": "83f39f6f88c802af65b18dd7d89b6670ada41a6e", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=0a1138af63725af5098e259237492b819631e05b", "patch": "@@ -42,6 +42,8 @@ static int caf_mpi_initialized;\n static int caf_this_image;\n static int caf_num_images;\n \n+caf_static_t *caf_static_list = NULL;\n+\n \n /* Initialize coarray program.  This routine assumes that no other\n    MPI initialization happened before; otherwise MPI_Initialized\n@@ -52,16 +54,23 @@ static int caf_num_images;\n void\n _gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n {\n-  /* caf_mpi_initialized is only true if the main program is not written in\n-     Fortran.  */\n-  MPI_Initialized (&caf_mpi_initialized);\n-  if (!caf_mpi_initialized)\n-    MPI_Init (argc, argv);\n+  if (caf_num_images == 0)\n+    {\n+      /* caf_mpi_initialized is only true if the main program is\n+       not written in Fortran.  */\n+      MPI_Initialized (&caf_mpi_initialized);\n+      if (!caf_mpi_initialized)\n+\tMPI_Init (argc, argv);\n+\n+      MPI_Comm_size (MPI_COMM_WORLD, &caf_num_images);\n+      MPI_Comm_rank (MPI_COMM_WORLD, &caf_this_image);\n+      caf_this_image++;\n+    }\n \n-  MPI_Comm_rank (MPI_COMM_WORLD, &caf_this_image);\n-  *this_image = ++caf_this_image;\n-  MPI_Comm_size (MPI_COMM_WORLD, &caf_num_images);\n-  *num_images = caf_num_images;\n+  if (this_image)\n+    *this_image = caf_this_image;\n+  if (num_images)\n+    *num_images = caf_num_images;\n }\n \n \n@@ -70,18 +79,43 @@ _gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n void\n _gfortran_caf_finalize (void)\n {\n+  while (caf_static_list != NULL)\n+    {\n+      free(caf_static_list->token[caf_this_image-1]);\n+      caf_static_list = caf_static_list->prev;\n+    }\n+\n   if (!caf_mpi_initialized)\n     MPI_Finalize ();\n }\n \n \n void *\n-_gfortran_caf_register (ptrdiff_t size,\n-                        caf_register_t type __attribute__ ((unused)),\n+_gfortran_caf_register (ptrdiff_t size, caf_register_t type,\n                         void **token)\n {\n-  *token = NULL;\n-  return malloc (size);\n+  void *local;\n+\n+  /* Start MPI if not already started.  */\n+  if (caf_num_images == 0)\n+    _gfortran_caf_init (NULL, NULL, NULL, NULL);\n+\n+  /* Token contains only a list of pointers.  */\n+  local = malloc (size);\n+  token = malloc (sizeof (void*) * caf_num_images);\n+\n+  /* token[img-1] is the address of the token in image \"img\".  */\n+  MPI_Allgather (&local, sizeof (void*), MPI_BYTE,\n+\t\t token,  sizeof (void*), MPI_BYTE, MPI_COMM_WORLD);\n+\n+  if (type == CAF_REGTYPE_COARRAY_STATIC)\n+    {\n+      caf_static_t *tmp = malloc (sizeof (caf_static_t));\n+      tmp->prev  = caf_static_list;\n+      tmp->token = token;\n+      caf_static_list = tmp;\n+    }\n+  return local;\n }\n \n "}, {"sha": "53927977d52515b06200c8e42acc7e7db1dd4fd8", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1138af63725af5098e259237492b819631e05b/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=0a1138af63725af5098e259237492b819631e05b", "patch": "@@ -35,6 +35,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    Note: For performance reasons -fcoarry=single should be used\n    rather than this library.  */\n \n+/* Global variables.  */\n+caf_static_t *caf_static_list = NULL;\n+\n \n void\n _gfortran_caf_init (int *argc __attribute__ ((unused)),\n@@ -49,16 +52,32 @@ _gfortran_caf_init (int *argc __attribute__ ((unused)),\n void\n _gfortran_caf_finalize (void)\n {\n+  while (caf_static_list != NULL)\n+    {\n+      free(caf_static_list->token[0]);\n+      caf_static_list = caf_static_list->prev;\n+    }\n }\n \n \n void *\n-_gfortran_caf_register (ptrdiff_t size,\n-\t\t\tcaf_register_t type __attribute__ ((unused)),\n+_gfortran_caf_register (ptrdiff_t size, caf_register_t type,\n \t\t\tvoid **token)\n {\n-  *token = NULL;\n-  return malloc (size);\n+  void *local;\n+\n+  local = malloc (size);\n+  token = malloc (sizeof (void*) * 1);\n+  token[0] = local;\n+\n+  if (type == CAF_REGTYPE_COARRAY_STATIC)\n+    {\n+      caf_static_t *tmp = malloc (sizeof (caf_static_t));\n+      tmp->prev  = caf_static_list;\n+      tmp->token = token;\n+      caf_static_list = tmp;\n+    }\n+  return local;\n }\n \n \n@@ -78,6 +97,7 @@ _gfortran_caf_sync_all (int *stat,\n     *stat = 0;\n }\n \n+\n void\n _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n \t\t\t   int images[] __attribute__ ((unused)),"}]}