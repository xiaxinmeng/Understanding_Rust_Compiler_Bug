{"sha": "54ece5e2954831a12f2ad6fe82c320add6dc870a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlY2U1ZTI5NTQ4MzFhMTJmMmFkNmZlODJjMzIwYWRkNmRjODcwYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-05-13T20:27:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-05-13T20:27:50Z"}, "message": "jit: use FINAL and OVERRIDE throughout\n\nMark most virtual functions in gcc/jit as being FINAL OVERRIDE.\ngcc::jit::recording::lvalue::access_as_rvalue is the sole OVERRIDE\nthat isn't a FINAL.\n\ngcc/jit/ChangeLog:\n\t* jit-playback.h: Within namespace gcc:jit::playback...\n\t(compile_to_memory::postprocess): Mark with FINAL OVERRIDE.\n\t(compile_to_file::postprocess): Likewise.\n\t(function::finalizer): Likewise.\n\t(block::finalizer): Likewise.\n\t(source_file::finalizer): Likewise.\n\t(source_line::finalizer): Likewise.\n\t* jit-recording.c (gcc::jit::rvalue_usage_validator):: Likewise.\n\t* jit-recording.h: Within namespace gcc::jit::recording...\n\t(string::replay_into): Mark with FINAL OVERRIDE.\n\t(string::make_debug_string): Likewise.\n\t(string::write_reproducer): Likewise.\n\t(location::replay_into): Likewise.\n\t(location::dyn_cast_location): Likewise.\n\t(location::make_debug_string): Likewise.\n\t(location::write_reproducer): Likewise.\n\t(memento_of_get_type::dereference): Likewise.\n\t(memento_of_get_type::accepts_writes_from): Likewise.\n\t(memento_of_get_type::is_int): Likewise.\n\t(memento_of_get_type::is_float): Likewise.\n\t(memento_of_get_type::is_bool): Likewise.\n\t(memento_of_get_type::is_pointer): Likewise.\n\t(memento_of_get_type::is_array): Likewise.\n\t(memento_of_get_type::is_void): Likewise.\n\t(memento_of_get_type::replay_into): Likewise.\n\t(memento_of_get_type::make_debug_string): Likewise.\n\t(memento_of_get_type::write_reproducer): Likewise.\n\t(memento_of_get_pointer::dereference): Likewise.\n\t(memento_of_get_pointer::accepts_writes_from): Likewise.\n\t(memento_of_get_pointer::replay_into): Likewise.\n\t(memento_of_get_pointer::is_int): Likewise.\n\t(memento_of_get_pointer::is_float): Likewise.\n\t(memento_of_get_pointer::is_bool): Likewise.\n\t(memento_of_get_pointer::is_pointer): Likewise.\n\t(memento_of_get_pointer::is_array): Likewise.\n\t(memento_of_get_pointer::make_debug_string): Likewise.\n\t(memento_of_get_pointer::write_reproducer): Likewise.\n\t(memento_of_get_const::dereference): Likewise.\n\t(memento_of_get_const::accepts_writes_from): Likewise.\n\t(memento_of_get_const::unqualified): Likewise.\n\t(memento_of_get_const::is_int): Likewise.\n\t(memento_of_get_const::is_float): Likewise.\n\t(memento_of_get_const::is_bool): Likewise.\n\t(memento_of_get_const::is_pointer): Likewise.\n\t(memento_of_get_const::is_array): Likewise.\n\t(memento_of_get_const::void replay_into): Likewise;\n\t(memento_of_get_const::make_debug_string): Likewise.\n\t(memento_of_get_const::write_reproducer): Likewise.\n\t(memento_of_get_volatile::dereference): Likewise.\n\t(memento_of_get_volatile::unqualified): Likewise.\n\t(memento_of_get_volatile::is_int): Likewise.\n\t(memento_of_get_volatile::is_float): Likewise.\n\t(memento_of_get_volatile::is_bool): Likewise.\n\t(memento_of_get_volatile::is_pointer): Likewise.\n\t(memento_of_get_volatile::is_array): Likewise.\n\t(memento_of_get_volatile::replay_into): Likewise;\n\t(memento_of_get_volatile::make_debug_string): Likewise.\n\t(memento_of_get_volatile::write_reproducer): Likewise.\n\t(array_type::dereference): Likewise.\n\t(array_type::is_int): Likewise.\n\t(array_type::is_float): Likewise.\n\t(array_type::is_bool): Likewise.\n\t(array_type::is_pointer): Likewise.\n\t(array_type::is_array): Likewise.\n\t(array_type::replay_into): Likewise;\n\t(array_type::make_debug_string): Likewise.\n\t(array_type::write_reproducer): Likewise.\n\t(function_type::dereference): Likewise.\n\t(function_type::function_dyn_cast_function_type): Likewise.\n\t(function_type::function_as_a_function_type): Likewise.\n\t(function_type::is_int): Likewise.\n\t(function_type::is_float): Likewise.\n\t(function_type::is_bool): Likewise.\n\t(function_type::is_pointer): Likewise.\n\t(function_type::is_array): Likewise.\n\t(function_type::replay_into): Likewise;\n\t(function_type::make_debug_string): Likewise.\n\t(function_type::write_reproducer): Likewise.\n\t(field::replay_into): Likewise;\n\t(field::write_to_dump): Likewise.\n\t(field::make_debug_string): Likewise.\n\t(field::write_reproducer): Likewise.\n\t(compound_type::dereference): Likewise.\n\t(compound_type::is_int): Likewise.\n\t(compound_type::is_float): Likewise.\n\t(compound_type::is_bool): Likewise.\n\t(compound_type::is_pointer): Likewise.\n\t(compound_type::is_array): Likewise.\n\t(compound_type::has_known_size): Likewise.\n\t(struct_::dyn_cast_struct): Likewise.\n\t(struct_::replay_into): Likewise.\n\t(struct_::access_as_type): Likewise.\n\t(struct_::make_debug_string): Likewise.\n\t(struct_::write_reproducer): Likewise.\n\t(fields::replay_into): Likewise.\n\t(fields::write_to_dump): Likewise.\n\t(fields::make_debug_string): Likewise.\n\t(fields::write_reproducer): Likewise.\n\t(union_::replay_into): Likewise.\n\t(union_::make_debug_string): Likewise.\n\t(union_::write_reproducer): Likewise.\n\t(lvalue::access_as_rvalue): Mark with OVERRIDE.\n\t(param::replay_into): Mark with FINAL OVERRIDE.\n\t(param::visit_children): Likewise.\n\t(param::dyn_cast_param): Likewise.\n\t(param::access_as_rvalue): Likewise.\n\t(param::access_as_lvalue): Likewise.\n\t(param::make_debug_string): Likewise.\n\t(param::write_reproducer): Likewise.\n\t(param::get_precedence): Likewise.\n\t(function::replay_into): Likewise.\n\t(function::write_to_dump): Likewise.\n\t(function::make_debug_string): Likewise.\n\t(function::write_reproducer): Likewise.\n\t(block::write_to_dump): Likewise.\n\t(block::make_debug_string): Likewise.\n\t(block::write_reproducer): Likewise.\n\t(block::replay_into): Likewise.\n\t(global::replay_into): Likewise;\n\t(global::visit_children): Likewise.\n\t(global::write_to_dump): Likewise.\n\t(global::make_debug_string): Likewise.\n\t(global::write_reproducer): Likewise.\n\t(global::get_precedence): Likewise.\n\t(memento_of_new_rvalue_from_const::replay_into): Likewise.\n\t(memento_of_new_rvalue_from_const::visit_children): Likewise.\n\t(memento_of_new_rvalue_from_const::is_constant): Likewise.\n\t(memento_of_new_rvalue_from_const::get_wide_int): Likewise.\n\t(memento_of_new_rvalue_from_const::make_debug_string): Likewise.\n\t(memento_of_new_rvalue_from_const::write_reproducer): Likewise.\n\t(memento_of_new_rvalue_from_const::get_precedence): Likewise.\n\t(memento_of_new_string_literal::replay_into): Likewise.\n\t(memento_of_new_string_literal::visit_children): Likewise.\n\t(memento_of_new_string_literal::make_debug_string): Likewise.\n\t(memento_of_new_string_literal::write_reproducer): Likewise.\n\t(memento_of_new_string_literal::get_precedence): Likewise.\n\t(unary_op::replay_into): Likewise.\n\t(unary_op::visit_children): Likewise.\n\t(unary_op::make_debug_string): Likewise.\n\t(unary_op::write_reproducer): Likewise.\n\t(unary_op::get_precedence): Likewise.\n\t(binary_op::replay_into): Likewise.\n\t(binary_op::visit_children): Likewise.\n\t(binary_op::make_debug_string): Likewise.\n\t(binary_op::write_reproducer): Likewise.\n\t(binary_op::get_precedence): Likewise.\n\t(comparison::replay_into): Likewise.\n\t(comparison::visit_children): Likewise.\n\t(comparison::make_debug_string): Likewise.\n\t(comparison::write_reproducer): Likewise.\n\t(comparison::get_precedence): Likewise.\n\t(cast::replay_into): Likewise.\n\t(cast::visit_children): Likewise.\n\t(cast::make_debug_string): Likewise.\n\t(cast::write_reproducer): Likewise.\n\t(cast::get_precedence): Likewise.\n\t(call::replay_into): Likewise.\n\t(call::visit_children): Likewise.\n\t(call::make_debug_string): Likewise.\n\t(call::write_reproducer): Likewise.\n\t(call::get_precedence): Likewise.\n\t(call_through_ptr::replay_into): Likewise.\n\t(call_through_ptr::visit_children): Likewise.\n\t(call_through_ptr::make_debug_string): Likewise.\n\t(call_through_ptr::write_reproducer): Likewise.\n\t(call_through_ptr::get_precedence): Likewise.\n\t(array_access::replay_into): Likewise.\n\t(array_access::visit_children): Likewise.\n\t(array_access::make_debug_string): Likewise.\n\t(array_access::write_reproducer): Likewise.\n\t(array_access::get_precedence): Likewise.\n\t(access_field_of_lvalue::replay_into): Likewise.\n\t(access_field_of_lvalue::visit_children): Likewise.\n\t(access_field_of_lvalue::make_debug_string): Likewise.\n\t(access_field_of_lvalue::write_reproducer): Likewise.\n\t(access_field_of_lvalue::get_precedence): Likewise.\n\t(access_field_rvalue::replay_into): Likewise.\n\t(access_field_rvalue::visit_children): Likewise.\n\t(access_field_rvalue::make_debug_string): Likewise.\n\t(access_field_rvalue::write_reproducer): Likewise.\n\t(access_field_rvalue::get_precedence): Likewise.\n\t(dereference_field_rvalue::replay_into): Likewise.\n\t(dereference_field_rvalue::visit_children): Likewise.\n\t(dereference_field_rvalue::make_debug_string): Likewise.\n\t(dereference_field_rvalue::write_reproducer): Likewise.\n\t(dereference_field_rvalue::get_precedence): Likewise.\n\t(dereference_rvalue::replay_into): Likewise.\n\t(dereference_rvalue::visit_children): Likewise.\n\t(dereference_rvalue::make_debug_string): Likewise.\n\t(dereference_rvalue::write_reproducer): Likewise.\n\t(dereference_rvalue::get_precedence): Likewise.\n\t(get_address_of_lvalue::replay_into): Likewise.\n\t(get_address_of_lvalue::visit_children): Likewise.\n\t(get_address_of_lvalue::make_debug_string): Likewise.\n\t(get_address_of_lvalue::write_reproducer): Likewise.\n\t(get_address_of_lvalue::get_precedence): Likewise.\n\t(local::replay_into): Likewise.\n\t(local::visit_children): Likewise.\n\t(local::write_to_dump): Likewise.\n\t(local::make_debug_string): Likewise.\n\t(local::write_reproducer): Likewise.\n\t(local::get_precedence): Likewise.\n\t(statement::write_to_dump): Likewise.\n\t(eval::replay_into): Likewise.\n\t(eval::make_debug_string): Likewise.\n\t(eval::write_reproducer): Likewise.\n\t(assignment::replay_into): Likewise.\n\t(assignment::make_debug_string): Likewise.\n\t(assignment::write_reproducer): Likewise.\n\t(assignment_op::replay_into): Likewise.\n\t(assignment_op::make_debug_string): Likewise.\n\t(assignment_op::write_reproducer): Likewise.\n\t(comment::replay_into): Likewise.\n\t(comment::make_debug_string): Likewise.\n\t(comment::write_reproducer): Likewise.\n\t(conditional::replay_into): Likewise.\n\t(conditional::get_successor_blocks): Likewise.\n\t(conditional::make_debug_string): Likewise.\n\t(conditional::write_reproducer): Likewise.\n\t(jump::replay_into): Likewise.\n\t(jump::get_successor_blocks): Likewise.\n\t(jump::make_debug_string): Likewise.\n\t(jump::write_reproducer): Likewise.\n\t(return_::replay_into): Likewise.\n\t(return_::get_successor_blocks): Likewise.\n\t(return_::make_debug_string): Likewise.\n\t(return_::write_reproducer): Likewise.\n\t(case_::replay_into): Likewise.\n\t(case_::write_reproducer): Likewise.\n\t(case_::make_debug_string): Likewise.\n\t(switch_::replay_into): Likewise.\n\t(switch_::get_successor_blocks): Likewise.\n\t(switch_::make_debug_string): Likewise.\n\t(switch_::write_reproducer): Likewise.\n\nFrom-SVN: r236223", "tree": {"sha": "c7748ef173ddee24b971dd51c728644ac3a854e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7748ef173ddee24b971dd51c728644ac3a854e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ece5e2954831a12f2ad6fe82c320add6dc870a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ece5e2954831a12f2ad6fe82c320add6dc870a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ece5e2954831a12f2ad6fe82c320add6dc870a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ece5e2954831a12f2ad6fe82c320add6dc870a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e37582dfb2ec9e0bc9f0b5d76aa13cd142d6cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e37582dfb2ec9e0bc9f0b5d76aa13cd142d6cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e37582dfb2ec9e0bc9f0b5d76aa13cd142d6cf0"}], "stats": {"total": 746, "additions": 514, "deletions": 232}, "files": [{"sha": "d7a06398adb792addfa321d4ce74ae067dfee451", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=54ece5e2954831a12f2ad6fe82c320add6dc870a", "patch": "@@ -1,3 +1,240 @@\n+2016-05-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-playback.h: Within namespace gcc:jit::playback...\n+\t(compile_to_memory::postprocess): Mark with FINAL OVERRIDE.\n+\t(compile_to_file::postprocess): Likewise.\n+\t(function::finalizer): Likewise.\n+\t(block::finalizer): Likewise.\n+\t(source_file::finalizer): Likewise.\n+\t(source_line::finalizer): Likewise.\n+\t* jit-recording.c (gcc::jit::rvalue_usage_validator):: Likewise.\n+\t* jit-recording.h: Within namespace gcc::jit::recording...\n+\t(string::replay_into): Mark with FINAL OVERRIDE.\n+\t(string::make_debug_string): Likewise.\n+\t(string::write_reproducer): Likewise.\n+\t(location::replay_into): Likewise.\n+\t(location::dyn_cast_location): Likewise.\n+\t(location::make_debug_string): Likewise.\n+\t(location::write_reproducer): Likewise.\n+\t(memento_of_get_type::dereference): Likewise.\n+\t(memento_of_get_type::accepts_writes_from): Likewise.\n+\t(memento_of_get_type::is_int): Likewise.\n+\t(memento_of_get_type::is_float): Likewise.\n+\t(memento_of_get_type::is_bool): Likewise.\n+\t(memento_of_get_type::is_pointer): Likewise.\n+\t(memento_of_get_type::is_array): Likewise.\n+\t(memento_of_get_type::is_void): Likewise.\n+\t(memento_of_get_type::replay_into): Likewise.\n+\t(memento_of_get_type::make_debug_string): Likewise.\n+\t(memento_of_get_type::write_reproducer): Likewise.\n+\t(memento_of_get_pointer::dereference): Likewise.\n+\t(memento_of_get_pointer::accepts_writes_from): Likewise.\n+\t(memento_of_get_pointer::replay_into): Likewise.\n+\t(memento_of_get_pointer::is_int): Likewise.\n+\t(memento_of_get_pointer::is_float): Likewise.\n+\t(memento_of_get_pointer::is_bool): Likewise.\n+\t(memento_of_get_pointer::is_pointer): Likewise.\n+\t(memento_of_get_pointer::is_array): Likewise.\n+\t(memento_of_get_pointer::make_debug_string): Likewise.\n+\t(memento_of_get_pointer::write_reproducer): Likewise.\n+\t(memento_of_get_const::dereference): Likewise.\n+\t(memento_of_get_const::accepts_writes_from): Likewise.\n+\t(memento_of_get_const::unqualified): Likewise.\n+\t(memento_of_get_const::is_int): Likewise.\n+\t(memento_of_get_const::is_float): Likewise.\n+\t(memento_of_get_const::is_bool): Likewise.\n+\t(memento_of_get_const::is_pointer): Likewise.\n+\t(memento_of_get_const::is_array): Likewise.\n+\t(memento_of_get_const::void replay_into): Likewise;\n+\t(memento_of_get_const::make_debug_string): Likewise.\n+\t(memento_of_get_const::write_reproducer): Likewise.\n+\t(memento_of_get_volatile::dereference): Likewise.\n+\t(memento_of_get_volatile::unqualified): Likewise.\n+\t(memento_of_get_volatile::is_int): Likewise.\n+\t(memento_of_get_volatile::is_float): Likewise.\n+\t(memento_of_get_volatile::is_bool): Likewise.\n+\t(memento_of_get_volatile::is_pointer): Likewise.\n+\t(memento_of_get_volatile::is_array): Likewise.\n+\t(memento_of_get_volatile::replay_into): Likewise;\n+\t(memento_of_get_volatile::make_debug_string): Likewise.\n+\t(memento_of_get_volatile::write_reproducer): Likewise.\n+\t(array_type::dereference): Likewise.\n+\t(array_type::is_int): Likewise.\n+\t(array_type::is_float): Likewise.\n+\t(array_type::is_bool): Likewise.\n+\t(array_type::is_pointer): Likewise.\n+\t(array_type::is_array): Likewise.\n+\t(array_type::replay_into): Likewise;\n+\t(array_type::make_debug_string): Likewise.\n+\t(array_type::write_reproducer): Likewise.\n+\t(function_type::dereference): Likewise.\n+\t(function_type::function_dyn_cast_function_type): Likewise.\n+\t(function_type::function_as_a_function_type): Likewise.\n+\t(function_type::is_int): Likewise.\n+\t(function_type::is_float): Likewise.\n+\t(function_type::is_bool): Likewise.\n+\t(function_type::is_pointer): Likewise.\n+\t(function_type::is_array): Likewise.\n+\t(function_type::replay_into): Likewise;\n+\t(function_type::make_debug_string): Likewise.\n+\t(function_type::write_reproducer): Likewise.\n+\t(field::replay_into): Likewise;\n+\t(field::write_to_dump): Likewise.\n+\t(field::make_debug_string): Likewise.\n+\t(field::write_reproducer): Likewise.\n+\t(compound_type::dereference): Likewise.\n+\t(compound_type::is_int): Likewise.\n+\t(compound_type::is_float): Likewise.\n+\t(compound_type::is_bool): Likewise.\n+\t(compound_type::is_pointer): Likewise.\n+\t(compound_type::is_array): Likewise.\n+\t(compound_type::has_known_size): Likewise.\n+\t(struct_::dyn_cast_struct): Likewise.\n+\t(struct_::replay_into): Likewise.\n+\t(struct_::access_as_type): Likewise.\n+\t(struct_::make_debug_string): Likewise.\n+\t(struct_::write_reproducer): Likewise.\n+\t(fields::replay_into): Likewise.\n+\t(fields::write_to_dump): Likewise.\n+\t(fields::make_debug_string): Likewise.\n+\t(fields::write_reproducer): Likewise.\n+\t(union_::replay_into): Likewise.\n+\t(union_::make_debug_string): Likewise.\n+\t(union_::write_reproducer): Likewise.\n+\t(lvalue::access_as_rvalue): Mark with OVERRIDE.\n+\t(param::replay_into): Mark with FINAL OVERRIDE.\n+\t(param::visit_children): Likewise.\n+\t(param::dyn_cast_param): Likewise.\n+\t(param::access_as_rvalue): Likewise.\n+\t(param::access_as_lvalue): Likewise.\n+\t(param::make_debug_string): Likewise.\n+\t(param::write_reproducer): Likewise.\n+\t(param::get_precedence): Likewise.\n+\t(function::replay_into): Likewise.\n+\t(function::write_to_dump): Likewise.\n+\t(function::make_debug_string): Likewise.\n+\t(function::write_reproducer): Likewise.\n+\t(block::write_to_dump): Likewise.\n+\t(block::make_debug_string): Likewise.\n+\t(block::write_reproducer): Likewise.\n+\t(block::replay_into): Likewise.\n+\t(global::replay_into): Likewise;\n+\t(global::visit_children): Likewise.\n+\t(global::write_to_dump): Likewise.\n+\t(global::make_debug_string): Likewise.\n+\t(global::write_reproducer): Likewise.\n+\t(global::get_precedence): Likewise.\n+\t(memento_of_new_rvalue_from_const::replay_into): Likewise.\n+\t(memento_of_new_rvalue_from_const::visit_children): Likewise.\n+\t(memento_of_new_rvalue_from_const::is_constant): Likewise.\n+\t(memento_of_new_rvalue_from_const::get_wide_int): Likewise.\n+\t(memento_of_new_rvalue_from_const::make_debug_string): Likewise.\n+\t(memento_of_new_rvalue_from_const::write_reproducer): Likewise.\n+\t(memento_of_new_rvalue_from_const::get_precedence): Likewise.\n+\t(memento_of_new_string_literal::replay_into): Likewise.\n+\t(memento_of_new_string_literal::visit_children): Likewise.\n+\t(memento_of_new_string_literal::make_debug_string): Likewise.\n+\t(memento_of_new_string_literal::write_reproducer): Likewise.\n+\t(memento_of_new_string_literal::get_precedence): Likewise.\n+\t(unary_op::replay_into): Likewise.\n+\t(unary_op::visit_children): Likewise.\n+\t(unary_op::make_debug_string): Likewise.\n+\t(unary_op::write_reproducer): Likewise.\n+\t(unary_op::get_precedence): Likewise.\n+\t(binary_op::replay_into): Likewise.\n+\t(binary_op::visit_children): Likewise.\n+\t(binary_op::make_debug_string): Likewise.\n+\t(binary_op::write_reproducer): Likewise.\n+\t(binary_op::get_precedence): Likewise.\n+\t(comparison::replay_into): Likewise.\n+\t(comparison::visit_children): Likewise.\n+\t(comparison::make_debug_string): Likewise.\n+\t(comparison::write_reproducer): Likewise.\n+\t(comparison::get_precedence): Likewise.\n+\t(cast::replay_into): Likewise.\n+\t(cast::visit_children): Likewise.\n+\t(cast::make_debug_string): Likewise.\n+\t(cast::write_reproducer): Likewise.\n+\t(cast::get_precedence): Likewise.\n+\t(call::replay_into): Likewise.\n+\t(call::visit_children): Likewise.\n+\t(call::make_debug_string): Likewise.\n+\t(call::write_reproducer): Likewise.\n+\t(call::get_precedence): Likewise.\n+\t(call_through_ptr::replay_into): Likewise.\n+\t(call_through_ptr::visit_children): Likewise.\n+\t(call_through_ptr::make_debug_string): Likewise.\n+\t(call_through_ptr::write_reproducer): Likewise.\n+\t(call_through_ptr::get_precedence): Likewise.\n+\t(array_access::replay_into): Likewise.\n+\t(array_access::visit_children): Likewise.\n+\t(array_access::make_debug_string): Likewise.\n+\t(array_access::write_reproducer): Likewise.\n+\t(array_access::get_precedence): Likewise.\n+\t(access_field_of_lvalue::replay_into): Likewise.\n+\t(access_field_of_lvalue::visit_children): Likewise.\n+\t(access_field_of_lvalue::make_debug_string): Likewise.\n+\t(access_field_of_lvalue::write_reproducer): Likewise.\n+\t(access_field_of_lvalue::get_precedence): Likewise.\n+\t(access_field_rvalue::replay_into): Likewise.\n+\t(access_field_rvalue::visit_children): Likewise.\n+\t(access_field_rvalue::make_debug_string): Likewise.\n+\t(access_field_rvalue::write_reproducer): Likewise.\n+\t(access_field_rvalue::get_precedence): Likewise.\n+\t(dereference_field_rvalue::replay_into): Likewise.\n+\t(dereference_field_rvalue::visit_children): Likewise.\n+\t(dereference_field_rvalue::make_debug_string): Likewise.\n+\t(dereference_field_rvalue::write_reproducer): Likewise.\n+\t(dereference_field_rvalue::get_precedence): Likewise.\n+\t(dereference_rvalue::replay_into): Likewise.\n+\t(dereference_rvalue::visit_children): Likewise.\n+\t(dereference_rvalue::make_debug_string): Likewise.\n+\t(dereference_rvalue::write_reproducer): Likewise.\n+\t(dereference_rvalue::get_precedence): Likewise.\n+\t(get_address_of_lvalue::replay_into): Likewise.\n+\t(get_address_of_lvalue::visit_children): Likewise.\n+\t(get_address_of_lvalue::make_debug_string): Likewise.\n+\t(get_address_of_lvalue::write_reproducer): Likewise.\n+\t(get_address_of_lvalue::get_precedence): Likewise.\n+\t(local::replay_into): Likewise.\n+\t(local::visit_children): Likewise.\n+\t(local::write_to_dump): Likewise.\n+\t(local::make_debug_string): Likewise.\n+\t(local::write_reproducer): Likewise.\n+\t(local::get_precedence): Likewise.\n+\t(statement::write_to_dump): Likewise.\n+\t(eval::replay_into): Likewise.\n+\t(eval::make_debug_string): Likewise.\n+\t(eval::write_reproducer): Likewise.\n+\t(assignment::replay_into): Likewise.\n+\t(assignment::make_debug_string): Likewise.\n+\t(assignment::write_reproducer): Likewise.\n+\t(assignment_op::replay_into): Likewise.\n+\t(assignment_op::make_debug_string): Likewise.\n+\t(assignment_op::write_reproducer): Likewise.\n+\t(comment::replay_into): Likewise.\n+\t(comment::make_debug_string): Likewise.\n+\t(comment::write_reproducer): Likewise.\n+\t(conditional::replay_into): Likewise.\n+\t(conditional::get_successor_blocks): Likewise.\n+\t(conditional::make_debug_string): Likewise.\n+\t(conditional::write_reproducer): Likewise.\n+\t(jump::replay_into): Likewise.\n+\t(jump::get_successor_blocks): Likewise.\n+\t(jump::make_debug_string): Likewise.\n+\t(jump::write_reproducer): Likewise.\n+\t(return_::replay_into): Likewise.\n+\t(return_::get_successor_blocks): Likewise.\n+\t(return_::make_debug_string): Likewise.\n+\t(return_::write_reproducer): Likewise.\n+\t(case_::replay_into): Likewise.\n+\t(case_::write_reproducer): Likewise.\n+\t(case_::make_debug_string): Likewise.\n+\t(switch_::replay_into): Likewise.\n+\t(switch_::get_successor_blocks): Likewise.\n+\t(switch_::make_debug_string): Likewise.\n+\t(switch_::write_reproducer): Likewise.\n+\n 2016-02-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dummy-frontend.c (jit_langhook_init): Remove"}, {"sha": "905747c14cb2043aa427e48db5734b75b96df603", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=54ece5e2954831a12f2ad6fe82c320add6dc870a", "patch": "@@ -314,7 +314,7 @@ class compile_to_memory : public context\n {\n  public:\n   compile_to_memory (recording::context *ctxt);\n-  void postprocess (const char *ctxt_progname);\n+  void postprocess (const char *ctxt_progname) FINAL OVERRIDE;\n \n   result *get_result_obj () const { return m_result; }\n \n@@ -328,7 +328,7 @@ class compile_to_file : public context\n   compile_to_file (recording::context *ctxt,\n \t\t   enum gcc_jit_output_kind output_kind,\n \t\t   const char *output_path);\n-  void postprocess (const char *ctxt_progname);\n+  void postprocess (const char *ctxt_progname) FINAL OVERRIDE;\n \n  private:\n   void\n@@ -414,7 +414,7 @@ class function : public wrapper\n   function(context *ctxt, tree fndecl, enum gcc_jit_function_kind kind);\n \n   void gt_ggc_mx ();\n-  void finalizer ();\n+  void finalizer () FINAL OVERRIDE;\n \n   tree get_return_type_as_tree () const;\n \n@@ -475,7 +475,7 @@ class block : public wrapper\n   block (function *func,\n \t const char *name);\n \n-  void finalizer ();\n+  void finalizer () FINAL OVERRIDE;\n \n   tree as_label_decl () const { return m_label_decl; }\n \n@@ -619,7 +619,7 @@ class source_file : public wrapper\n {\n public:\n   source_file (tree filename);\n-  void finalizer ();\n+  void finalizer () FINAL OVERRIDE;\n \n   source_line *\n   get_source_line (int line_num);\n@@ -640,7 +640,7 @@ class source_line : public wrapper\n {\n public:\n   source_line (source_file *file, int line_num);\n-  void finalizer ();\n+  void finalizer () FINAL OVERRIDE;\n \n   location *\n   get_location (recording::location *rloc, int column_num);"}, {"sha": "8f5f914277c99b41079600fb11856be55858d4e4", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=54ece5e2954831a12f2ad6fe82c320add6dc870a", "patch": "@@ -3015,7 +3015,7 @@ class rvalue_usage_validator : public recording::rvalue_visitor\n \t\t\t  recording::statement *stmt);\n \n   void\n-  visit (recording::rvalue *rvalue);\n+  visit (recording::rvalue *rvalue) FINAL OVERRIDE;\n \n  private:\n   const char *m_api_funcname;"}, {"sha": "1c3e76342090f7e55b7997bf3bbd1e0deda2cc91", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 270, "deletions": 225, "changes": 495, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ece5e2954831a12f2ad6fe82c320add6dc870a/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=54ece5e2954831a12f2ad6fe82c320add6dc870a", "patch": "@@ -401,11 +401,11 @@ class string : public memento\n   static string * from_printf (context *ctxt, const char *fmt, ...)\n     GNU_PRINTF(2, 3);\n \n-  void replay_into (replayer *) {}\n+  void replay_into (replayer *) FINAL OVERRIDE {}\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   size_t m_len;\n@@ -424,7 +424,7 @@ class location : public memento\n     m_created_by_user (created_by_user)\n  {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n   playback::location *\n   playback_location (replayer *r)\n@@ -453,12 +453,12 @@ class location : public memento\n     return static_cast <playback::location *> (m_playback_obj);\n   }\n \n-  location *dyn_cast_location () { return this; }\n+  location *dyn_cast_location () FINAL OVERRIDE { return this; }\n   bool created_by_user () const { return m_created_by_user; }\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   string *m_filename;\n@@ -538,9 +538,9 @@ class memento_of_get_type : public type\n   : type (ctxt),\n     m_kind (kind) {}\n \n-  type *dereference ();\n+  type *dereference () FINAL OVERRIDE;\n \n-  bool accepts_writes_from (type *rtype)\n+  bool accepts_writes_from (type *rtype) FINAL OVERRIDE\n   {\n     if (m_kind == GCC_JIT_TYPE_VOID_PTR)\n       if (rtype->is_pointer ())\n@@ -553,19 +553,19 @@ class memento_of_get_type : public type\n     return type::accepts_writes_from (rtype);\n   }\n \n-  bool is_int () const;\n-  bool is_float () const;\n-  bool is_bool () const;\n-  type *is_pointer () { return dereference (); }\n-  type *is_array () { return NULL; }\n-  bool is_void () const { return m_kind == GCC_JIT_TYPE_VOID; }\n+  bool is_int () const FINAL OVERRIDE;\n+  bool is_float () const FINAL OVERRIDE;\n+  bool is_bool () const FINAL OVERRIDE;\n+  type *is_pointer () FINAL OVERRIDE { return dereference (); }\n+  type *is_array () FINAL OVERRIDE { return NULL; }\n+  bool is_void () const FINAL OVERRIDE { return m_kind == GCC_JIT_TYPE_VOID; }\n \n public:\n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   enum gcc_jit_types m_kind;\n@@ -579,21 +579,21 @@ class memento_of_get_pointer : public type\n   : type (other_type->m_ctxt),\n     m_other_type (other_type) {}\n \n-  type *dereference () { return m_other_type; }\n+  type *dereference () FINAL OVERRIDE { return m_other_type; }\n \n-  bool accepts_writes_from (type *rtype);\n+  bool accepts_writes_from (type *rtype) FINAL OVERRIDE;\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  bool is_int () const { return false; }\n-  bool is_float () const { return false; }\n-  bool is_bool () const { return false; }\n-  type *is_pointer () { return m_other_type; }\n-  type *is_array () { return NULL; }\n+  bool is_int () const FINAL OVERRIDE { return false; }\n+  bool is_float () const FINAL OVERRIDE { return false; }\n+  bool is_bool () const FINAL OVERRIDE { return false; }\n+  type *is_pointer () FINAL OVERRIDE { return m_other_type; }\n+  type *is_array () FINAL OVERRIDE { return NULL; }\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   type *m_other_type;\n@@ -607,28 +607,28 @@ class memento_of_get_const : public type\n   : type (other_type->m_ctxt),\n     m_other_type (other_type) {}\n \n-  type *dereference () { return m_other_type->dereference (); }\n+  type *dereference () FINAL OVERRIDE { return m_other_type->dereference (); }\n \n-  bool accepts_writes_from (type */*rtype*/)\n+  bool accepts_writes_from (type */*rtype*/) FINAL OVERRIDE\n   {\n     /* Can't write to a \"const\".  */\n     return false;\n   }\n \n   /* Strip off the \"const\", giving the underlying type.  */\n-  type *unqualified () { return m_other_type; }\n+  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n \n-  bool is_int () const { return m_other_type->is_int (); }\n-  bool is_float () const { return m_other_type->is_float (); }\n-  bool is_bool () const { return m_other_type->is_bool (); }\n-  type *is_pointer () { return m_other_type->is_pointer (); }\n-  type *is_array () { return m_other_type->is_array (); }\n+  bool is_int () const FINAL OVERRIDE { return m_other_type->is_int (); }\n+  bool is_float () const FINAL OVERRIDE { return m_other_type->is_float (); }\n+  bool is_bool () const FINAL OVERRIDE { return m_other_type->is_bool (); }\n+  type *is_pointer () FINAL OVERRIDE { return m_other_type->is_pointer (); }\n+  type *is_array () FINAL OVERRIDE { return m_other_type->is_array (); }\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   type *m_other_type;\n@@ -642,22 +642,22 @@ class memento_of_get_volatile : public type\n   : type (other_type->m_ctxt),\n     m_other_type (other_type) {}\n \n-  type *dereference () { return m_other_type->dereference (); }\n+  type *dereference () FINAL OVERRIDE { return m_other_type->dereference (); }\n \n   /* Strip off the \"volatile\", giving the underlying type.  */\n-  type *unqualified () { return m_other_type; }\n+  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n \n-  bool is_int () const { return m_other_type->is_int (); }\n-  bool is_float () const { return m_other_type->is_float (); }\n-  bool is_bool () const { return m_other_type->is_bool (); }\n-  type *is_pointer () { return m_other_type->is_pointer (); }\n-  type *is_array () { return m_other_type->is_array (); }\n+  bool is_int () const FINAL OVERRIDE { return m_other_type->is_int (); }\n+  bool is_float () const FINAL OVERRIDE { return m_other_type->is_float (); }\n+  bool is_bool () const FINAL OVERRIDE { return m_other_type->is_bool (); }\n+  type *is_pointer () FINAL OVERRIDE { return m_other_type->is_pointer (); }\n+  type *is_array () FINAL OVERRIDE { return m_other_type->is_array (); }\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   type *m_other_type;\n@@ -676,19 +676,19 @@ class array_type : public type\n     m_num_elements (num_elements)\n   {}\n \n-  type *dereference ();\n+  type *dereference () FINAL OVERRIDE;\n \n-  bool is_int () const { return false; }\n-  bool is_float () const { return false; }\n-  bool is_bool () const { return false; }\n-  type *is_pointer () { return NULL; }\n-  type *is_array () { return m_element_type; }\n+  bool is_int () const FINAL OVERRIDE { return false; }\n+  bool is_float () const FINAL OVERRIDE { return false; }\n+  bool is_bool () const FINAL OVERRIDE { return false; }\n+  type *is_pointer () FINAL OVERRIDE { return NULL; }\n+  type *is_array () FINAL OVERRIDE { return m_element_type; }\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n  private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n  private:\n   location *m_loc;\n@@ -705,17 +705,17 @@ class function_type : public type\n \t\t type **param_types,\n \t\t int is_variadic);\n \n-  type *dereference ();\n-  function_type *dyn_cast_function_type () { return this; }\n-  function_type *as_a_function_type () { return this; }\n+  type *dereference () FINAL OVERRIDE;\n+  function_type *dyn_cast_function_type () FINAL OVERRIDE { return this; }\n+  function_type *as_a_function_type () FINAL OVERRIDE { return this; }\n \n-  bool is_int () const { return false; }\n-  bool is_float () const { return false; }\n-  bool is_bool () const { return false; }\n-  type *is_pointer () { return NULL; }\n-  type *is_array () { return NULL; }\n+  bool is_int () const FINAL OVERRIDE { return false; }\n+  bool is_float () const FINAL OVERRIDE { return false; }\n+  bool is_bool () const FINAL OVERRIDE { return false; }\n+  type *is_pointer () FINAL OVERRIDE { return NULL; }\n+  type *is_array () FINAL OVERRIDE { return NULL; }\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n   type * get_return_type () const { return m_return_type; }\n   const vec<type *> &get_param_types () const { return m_param_types; }\n@@ -728,9 +728,9 @@ class function_type : public type\n \t\t\t     memento *ptr_type);\n \n  private:\n-  string * make_debug_string ();\n+  string * make_debug_string () FINAL OVERRIDE;\n   string * make_debug_string_with (const char *);\n-  void write_reproducer (reproducer &r);\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   type *m_return_type;\n@@ -757,9 +757,9 @@ class field : public memento\n   compound_type * get_container () const { return m_container; }\n   void set_container (compound_type *c) { m_container = c; }\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n   playback::field *\n   playback_field () const\n@@ -768,8 +768,8 @@ class field : public memento\n   }\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   location *m_loc;\n@@ -795,15 +795,15 @@ class compound_type : public type\n \t      int num_fields,\n \t      field **fields);\n \n-  type *dereference ();\n+  type *dereference () FINAL OVERRIDE;\n \n-  bool is_int () const { return false; }\n-  bool is_float () const { return false; }\n-  bool is_bool () const { return false; }\n-  type *is_pointer () { return NULL; }\n-  type *is_array () { return NULL; }\n+  bool is_int () const FINAL OVERRIDE { return false; }\n+  bool is_float () const FINAL OVERRIDE { return false; }\n+  bool is_bool () const FINAL OVERRIDE { return false; }\n+  type *is_pointer () FINAL OVERRIDE { return NULL; }\n+  type *is_array () FINAL OVERRIDE { return NULL; }\n \n-  bool has_known_size () const { return m_fields != NULL; }\n+  bool has_known_size () const FINAL OVERRIDE { return m_fields != NULL; }\n \n   playback::compound_type *\n   playback_compound_type ()\n@@ -824,18 +824,18 @@ class struct_ : public compound_type\n \t   location *loc,\n \t   string *name);\n \n-  struct_ *dyn_cast_struct () { return this; }\n+  struct_ *dyn_cast_struct () FINAL OVERRIDE { return this; }\n \n   type *\n   as_type () { return this; }\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  const char *access_as_type (reproducer &r);\n+  const char *access_as_type (reproducer &r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n };\n \n // memento of struct_::set_fields\n@@ -846,16 +846,16 @@ class fields : public memento\n \t  int num_fields,\n \t  field **fields);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n   int length () const { return m_fields.length (); }\n   field *get_field (int i) const { return m_fields[i]; }\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   compound_type *m_struct_or_union;\n@@ -869,11 +869,11 @@ class union_ : public compound_type\n \t  location *loc,\n \t  string *name);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   location *m_loc;\n@@ -1009,7 +1009,7 @@ class lvalue : public rvalue\n   rvalue *\n   as_rvalue () { return this; }\n \n-  const char *access_as_rvalue (reproducer &r);\n+  const char *access_as_rvalue (reproducer &r) OVERRIDE;\n   virtual const char *access_as_lvalue (reproducer &r);\n };\n \n@@ -1026,25 +1026,28 @@ class param : public lvalue\n   lvalue *\n   as_lvalue () { return this; }\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *) {}\n+  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n   playback::param *\n   playback_param () const\n   {\n     return static_cast <playback::param *> (m_playback_obj);\n   }\n \n-  param *dyn_cast_param () { return this; }\n+  param *dyn_cast_param () FINAL OVERRIDE { return this; }\n \n-  const char *access_as_rvalue (reproducer &r);\n-  const char *access_as_lvalue (reproducer &r);\n+  const char *access_as_rvalue (reproducer &r) FINAL OVERRIDE;\n+  const char *access_as_lvalue (reproducer &r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string () { return m_name; }\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n+  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_PRIMARY;\n+  }\n \n private:\n   string *m_name;\n@@ -1063,7 +1066,7 @@ class function : public memento\n \t    int is_variadic,\n \t    enum built_in_function builtin_id);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n   playback::function *\n   playback_function () const\n@@ -1093,15 +1096,15 @@ class function : public memento\n \n   bool is_variadic () const { return m_is_variadic; }\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n   void validate ();\n \n   void dump_to_dot (const char *path);\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   location *m_loc;\n@@ -1183,7 +1186,7 @@ class block : public memento\n     return static_cast <playback::block *> (m_playback_obj);\n   }\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n   bool validate ();\n \n@@ -1195,10 +1198,10 @@ class block : public memento\n   vec <block *> get_successor_blocks () const;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n   void dump_to_dot (pretty_printer *pp);\n   void dump_edges_to_dot (pretty_printer *pp);\n@@ -1227,16 +1230,19 @@ class global : public lvalue\n     m_name (name)\n   {}\n \n-  void replay_into (replayer *);\n+  void replay_into (replayer *) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *) {}\n+  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string () { return m_name; }\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n+  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_PRIMARY;\n+  }\n \n private:\n   enum gcc_jit_global_kind m_kind;\n@@ -1254,18 +1260,21 @@ class memento_of_new_rvalue_from_const : public rvalue\n   : rvalue (ctxt, loc, type),\n     m_value (value) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *) {}\n+  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n-  bool is_constant () const { return true; }\n+  bool is_constant () const FINAL OVERRIDE { return true; }\n \n-  bool get_wide_int (wide_int *out) const;\n+  bool get_wide_int (wide_int *out) const FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_PRIMARY;\n+  }\n \n private:\n   HOST_TYPE m_value;\n@@ -1280,14 +1289,17 @@ class memento_of_new_string_literal : public rvalue\n   : rvalue (ctxt, loc, ctxt->get_type (GCC_JIT_TYPE_CONST_CHAR_PTR)),\n     m_value (value) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *) {}\n+  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_PRIMARY;\n+  }\n \n private:\n   string *m_value;\n@@ -1306,14 +1318,17 @@ class unary_op : public rvalue\n     m_a (a)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const {return PRECEDENCE_UNARY;}\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_UNARY;\n+  }\n \n private:\n   enum gcc_jit_unary_op m_op;\n@@ -1333,14 +1348,14 @@ class binary_op : public rvalue\n     m_a (a),\n     m_b (b) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const;\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE;\n \n private:\n   enum gcc_jit_binary_op m_op;\n@@ -1361,14 +1376,14 @@ class comparison : public rvalue\n     m_b (b)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const;\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE;\n \n private:\n   enum gcc_jit_comparison m_op;\n@@ -1387,14 +1402,17 @@ class cast : public rvalue\n     m_rvalue (a)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_CAST; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_CAST;\n+  }\n \n private:\n   rvalue *m_rvalue;\n@@ -1409,14 +1427,17 @@ class call : public rvalue\n \tint numargs,\n \trvalue **args);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   function *m_func;\n@@ -1432,14 +1453,17 @@ class call_through_ptr : public rvalue\n \t\t    int numargs,\n \t\t    rvalue **args);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   rvalue *m_fn_ptr;\n@@ -1458,14 +1482,17 @@ class array_access : public lvalue\n     m_index (index)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   rvalue *m_ptr;\n@@ -1484,14 +1511,17 @@ class access_field_of_lvalue : public lvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   lvalue *m_lvalue;\n@@ -1510,14 +1540,17 @@ class access_field_rvalue : public rvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   rvalue *m_rvalue;\n@@ -1536,14 +1569,17 @@ class dereference_field_rvalue : public lvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_POSTFIX; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n \n private:\n   rvalue *m_rvalue;\n@@ -1559,14 +1595,17 @@ class dereference_rvalue : public lvalue\n   : lvalue (ctxt, loc, val->get_type ()->dereference ()),\n     m_rvalue (val) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_UNARY; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_UNARY;\n+  }\n \n private:\n   rvalue *m_rvalue;\n@@ -1582,14 +1621,17 @@ class get_address_of_lvalue : public rvalue\n     m_lvalue (val)\n   {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *v);\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_UNARY; }\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_UNARY;\n+  }\n \n private:\n   lvalue *m_lvalue;\n@@ -1606,16 +1648,19 @@ class local : public lvalue\n     set_scope (func);\n   }\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  void visit_children (rvalue_visitor *) {}\n+  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string () { return m_name; }\n-  void write_reproducer (reproducer &r);\n-  enum precedence get_precedence () const { return PRECEDENCE_PRIMARY; }\n+  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_PRIMARY;\n+  }\n \n private:\n   function *m_func;\n@@ -1627,7 +1672,7 @@ class statement : public memento\n public:\n   virtual vec <block *> get_successor_blocks () const;\n \n-  void write_to_dump (dump &d);\n+  void write_to_dump (dump &d) FINAL OVERRIDE;\n \n   block *get_block () const { return m_block; }\n   location *get_loc () const { return m_loc; }\n@@ -1658,11 +1703,11 @@ class eval : public statement\n   : statement (b, loc),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   rvalue *m_rvalue;\n@@ -1679,11 +1724,11 @@ class assignment : public statement\n     m_lvalue (lvalue),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   lvalue *m_lvalue;\n@@ -1703,11 +1748,11 @@ class assignment_op : public statement\n     m_op (op),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   lvalue *m_lvalue;\n@@ -1724,11 +1769,11 @@ class comment : public statement\n   : statement (b, loc),\n     m_text (text) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   string *m_text;\n@@ -1747,13 +1792,13 @@ class conditional : public statement\n     m_on_true (on_true),\n     m_on_false (on_false) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  vec <block *> get_successor_blocks () const;\n+  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   rvalue *m_boolval;\n@@ -1770,13 +1815,13 @@ class jump : public statement\n   : statement (b, loc),\n     m_target (target) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  vec <block *> get_successor_blocks () const;\n+  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   block *m_target;\n@@ -1791,13 +1836,13 @@ class return_ : public statement\n   : statement (b, loc),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  vec <block *> get_successor_blocks () const;\n+  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   rvalue *m_rvalue;\n@@ -1820,12 +1865,12 @@ class case_ : public memento\n   rvalue *get_max_value () const { return m_max_value; }\n   block *get_dest_block () const { return m_dest_block; }\n \n-  void replay_into (replayer *) { /* empty */ }\n+  void replay_into (replayer *) FINAL OVERRIDE { /* empty */ }\n \n-  void write_reproducer (reproducer &r);\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n+  string * make_debug_string () FINAL OVERRIDE;\n \n  private:\n   rvalue *m_min_value;\n@@ -1843,13 +1888,13 @@ class switch_ : public statement\n \t   int num_cases,\n \t   case_ **cases);\n \n-  void replay_into (replayer *r);\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n \n-  vec <block *> get_successor_blocks () const;\n+  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n \n private:\n-  string * make_debug_string ();\n-  void write_reproducer (reproducer &r);\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n \n private:\n   rvalue *m_expr;"}]}