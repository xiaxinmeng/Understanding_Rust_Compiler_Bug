{"sha": "648a616b30ab2be76103519a3ed4f7f77a00c947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4YTYxNmIzMGFiMmJlNzYxMDM1MTlhM2VkNGY3Zjc3YTAwYzk0Nw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-12T02:18:41Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-12T02:18:41Z"}, "message": "tree.h (struct typed_tree): New.\n\n\t* tree.h (struct typed_tree): New.\n\t(struct tree_common): Include it instead of tree_base.\n\t(TREE_TYPE): Update for new location of type field.\n\t(TYPE_USER_ALIGN, TYPE_PACKED): Refer to base field directly.\n\t(DECL_USER_ALIGN, DECL_PACKED): Likewise.\n\t(union tree_node): Add typed field.\n\t* treestruct.def (TS_TYPED): New.\n\t* lto-streamer.c (check_handled_ts_structures): Handle it.\n\t* tree.c (MARK_TS_TYPED): New macro.\n\t(MARK_TS_COMMON): Call it instead of MARK_TS_BASE.\n\nFrom-SVN: r172295", "tree": {"sha": "0762d9aa5de6a834979e056a73c5dbb8f85cf02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0762d9aa5de6a834979e056a73c5dbb8f85cf02a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/648a616b30ab2be76103519a3ed4f7f77a00c947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648a616b30ab2be76103519a3ed4f7f77a00c947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648a616b30ab2be76103519a3ed4f7f77a00c947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648a616b30ab2be76103519a3ed4f7f77a00c947/comments", "author": null, "committer": null, "parents": [{"sha": "fa21c1fab12bf1a278cd6fce6caec6c47f116318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa21c1fab12bf1a278cd6fce6caec6c47f116318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa21c1fab12bf1a278cd6fce6caec6c47f116318"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "b034a2eb521f1537a969efc437f468d2966aaf4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=648a616b30ab2be76103519a3ed4f7f77a00c947", "patch": "@@ -1,3 +1,16 @@\n+2011-04-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (struct typed_tree): New.\n+\t(struct tree_common): Include it instead of tree_base.\n+\t(TREE_TYPE): Update for new location of type field.\n+\t(TYPE_USER_ALIGN, TYPE_PACKED): Refer to base field directly.\n+\t(DECL_USER_ALIGN, DECL_PACKED): Likewise.\n+\t(union tree_node): Add typed field.\n+\t* treestruct.def (TS_TYPED): New.\n+\t* lto-streamer.c (check_handled_ts_structures): Handle it.\n+\t* tree.c (MARK_TS_TYPED): New macro.\n+\t(MARK_TS_COMMON): Call it instead of MARK_TS_BASE.\n+\n 2011-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cfghooks.c (redirect_edge_and_branch_force): Localize variable."}, {"sha": "74034b0748564a09dd57d48252ece3846dc17d92", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=648a616b30ab2be76103519a3ed4f7f77a00c947", "patch": "@@ -270,6 +270,7 @@ check_handled_ts_structures (void)\n   /* These are the TS_* structures that are either handled or\n      explicitly ignored by the streamer routines.  */\n   handled_p[TS_BASE] = true;\n+  handled_p[TS_TYPED] = true;\n   handled_p[TS_COMMON] = true;\n   handled_p[TS_INT_CST] = true;\n   handled_p[TS_REAL_CST] = true;"}, {"sha": "e137aadb9cbf25af4447d28ea79c6a27c4fcf94a", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=648a616b30ab2be76103519a3ed4f7f77a00c947", "patch": "@@ -357,9 +357,15 @@ initialize_tree_contains_struct (void)\n     tree_contains_struct[C][TS_BASE] = 1;\t\t\\\n   } while (0)\n \n-#define MARK_TS_COMMON(C)\t\t\t\t\\\n+#define MARK_TS_TYPED(C)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n     MARK_TS_BASE (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_TYPED] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_COMMON(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_TYPED (C);\t\t\t\t\t\\\n     tree_contains_struct[C][TS_COMMON] = 1;\t\t\\\n   } while (0)\n "}, {"sha": "149ba75ef11edac09de3b8f0fec4ff052b46c578", "filename": "gcc/tree.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=648a616b30ab2be76103519a3ed4f7f77a00c947", "patch": "@@ -407,12 +407,16 @@ struct GTY(()) tree_base {\n   unsigned address_space : 8;\n };\n \n-struct GTY(()) tree_common {\n+struct GTY(()) tree_typed {\n   struct tree_base base;\n-  tree chain;\n   tree type;\n };\n \n+struct GTY(()) tree_common {\n+  struct tree_typed typed;\n+  tree chain;\n+};\n+\n /* The following table lists the uses of each of the above flags and\n    for which types of nodes they are defined.\n \n@@ -869,7 +873,7 @@ enum tree_node_structure_enum {\n    In VECTOR_TYPE nodes, this is the type of the elements.  */\n #define TREE_TYPE(NODE) __extension__ \\\n (*({__typeof (NODE) const __t = (NODE);\t\t\t\t\t\\\n-    &__t->common.type; }))\n+    &__t->typed.type; }))\n \n extern void tree_contains_struct_check_failed (const_tree,\n \t\t\t\t\t       const enum tree_node_structure_enum,\n@@ -936,7 +940,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define OMP_CLAUSE_SUBCODE_CHECK(T, CODE)\t(T)\n \n #define TREE_CHAIN(NODE) ((NODE)->common.chain)\n-#define TREE_TYPE(NODE) ((NODE)->common.type)\n+#define TREE_TYPE(NODE) ((NODE)->typed.type)\n \n #endif\n \n@@ -2151,7 +2155,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n /* 1 if the alignment for this type was requested by \"aligned\" attribute,\n    0 if it is the default for this type.  */\n-#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->common.base.user_align)\n+#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->base.user_align)\n \n /* The alignment for NODE, in bytes.  */\n #define TYPE_ALIGN_UNIT(NODE) (TYPE_ALIGN (NODE) / BITS_PER_UNIT)\n@@ -2289,7 +2293,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n-#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->common.base.packed_flag)\n+#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->base.packed_flag)\n \n /* Used by type_contains_placeholder_p to avoid recomputation.\n    Values are: 0 (unknown), 1 (false), 2 (true).  Never access\n@@ -2632,7 +2636,7 @@ struct GTY(()) tree_decl_minimal {\n /* Set if the alignment of this DECL has been set by the user, for\n    example with an 'aligned' attribute.  */\n #define DECL_USER_ALIGN(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->common.base.user_align)\n+  (DECL_COMMON_CHECK (NODE)->base.user_align)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -2900,7 +2904,7 @@ struct GTY(()) tree_decl_with_rtl {\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->field_decl.fcontext)\n \n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n-#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->common.base.packed_flag)\n+#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->base.packed_flag)\n \n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n@@ -3505,6 +3509,7 @@ extern tree build_target_option_node (void);\n union GTY ((ptr_alias (union lang_tree_node),\n \t    desc (\"tree_node_structure (&%h)\"), variable_size)) tree_node {\n   struct tree_base GTY ((tag (\"TS_BASE\"))) base;\n+  struct tree_typed GTY ((tag (\"TS_TYPED\"))) typed;\n   struct tree_common GTY ((tag (\"TS_COMMON\"))) common;\n   struct tree_int_cst GTY ((tag (\"TS_INT_CST\"))) int_cst;\n   struct tree_real_cst GTY ((tag (\"TS_REAL_CST\"))) real_cst;"}, {"sha": "b65bdc2819a28493318bde1f7b28a25811e4eac7", "filename": "gcc/treestruct.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftreestruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648a616b30ab2be76103519a3ed4f7f77a00c947/gcc%2Ftreestruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreestruct.def?ref=648a616b30ab2be76103519a3ed4f7f77a00c947", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n    specifying what structures contain what other structures in the\n    tree_contains_struct array.  */\n DEFTREESTRUCT(TS_BASE, \"base\")\n+DEFTREESTRUCT(TS_TYPED, \"typed\")\n DEFTREESTRUCT(TS_COMMON, \"common\")\n DEFTREESTRUCT(TS_INT_CST, \"integer cst\")\n DEFTREESTRUCT(TS_REAL_CST, \"real cst\")"}]}