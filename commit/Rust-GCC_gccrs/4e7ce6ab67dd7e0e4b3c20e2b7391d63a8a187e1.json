{"sha": "4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3Y2U2YWI2N2RkN2UwZTRiM2MyMGUyYjczOTFkNjNhOGExODdlMQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2005-07-07T09:46:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:46:29Z"}, "message": "re PR ada/22301 (Ada does not build into a clean prefix when unwind.h is not installed)\n\n2005-07-07  Olivier Hainque  <hainque@adacore.com>\n\n\tPR ada/22301\n\n\t* raise.c: Only include unwind.h if IN_RTS, and provide dummy type\n\tdefinitions for the Unwind wrappers in the compiler case.\n\nFrom-SVN: r101696", "tree": {"sha": "561160b0f19aaac76bfb79562f400f2aa44f80b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/561160b0f19aaac76bfb79562f400f2aa44f80b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "48d94232a232bdf07d6cdb4dc003559f31449293", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=4e7ce6ab67dd7e0e4b3c20e2b7391d63a8a187e1", "patch": "@@ -95,16 +95,37 @@ __gnat_unhandled_terminate (void)\n /* Below is the code related to the integration of the GCC mechanism for\n    exception handling.  */\n \n-#include \"unwind.h\"\n-\n /* The names of a couple of \"standard\" routines for unwinding/propagation\n    actually vary depending on the underlying GCC scheme for exception handling\n    (SJLJ or DWARF). We need a consistently named interface to import from\n-   a-except, so stubs are defined here.  */\n+   a-except, so wrappers are defined here.\n+\n+   Besides, eventhough the compiler is never setup to use the GCC propagation\n+   circuitry, it still relies on exceptions internally and part of the sources\n+   to handle to exceptions are shared with the run-time library.  We need\n+   dummy definitions for the wrappers to satisfy the linker in this case.\n+\n+   The types to be used by those wrappers in the run-time library are target\n+   types exported by unwind.h.  We used to piggyback on them for the compiler\n+   stubs, but there is no guarantee that unwind.h is always in sight so we\n+   define our own set below.  These are dummy types as the wrappers are never\n+   called in the compiler case.  */\n+\n+#ifdef IN_RTS\n+\n+#include \"unwind.h\"\n \n typedef struct _Unwind_Context _Unwind_Context;\n typedef struct _Unwind_Exception _Unwind_Exception;\n \n+#else\n+\n+typedef void _Unwind_Context;\n+typedef void _Unwind_Exception;\n+typedef int  _Unwind_Reason_Code;\n+\n+#endif\n+\n _Unwind_Reason_Code\n __gnat_Unwind_RaiseException (_Unwind_Exception *);\n \n@@ -1088,7 +1109,7 @@ __gnat_eh_personality (int uw_version,\n   return _URC_INSTALL_CONTEXT;\n }\n \n-/* Define the consistently named stubs imported by Propagate_Exception.  */\n+/* Define the consistently named wrappers imported by Propagate_Exception.  */\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n \n@@ -1133,14 +1154,7 @@ __gnat_Unwind_ForcedUnwind (_Unwind_Exception *e,\n #else\n /* ! IN_RTS  */\n \n-/* The calls to the GCC runtime interface for exception raising are currently\n-   issued from a-exexpr.adb, which is used by both the runtime library and the\n-   compiler.\n-\n-   As the compiler binary is not linked against the GCC runtime library, we\n-   need also need stubs for this interface in the compiler case. We should not\n-   be using the GCC eh mechanism for the compiler, however, so expect these\n-   functions never to be called.  */\n+/* Define the corresponding stubs for the compiler.  */\n \n /* We don't want fancy_abort here.  */\n #undef abort"}]}