{"sha": "9174343256c06f7879f480c59203c1615601055c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3NDM0MzI1NmMwNmY3ODc5ZjQ4MGM1OTIwM2MxNjE1NjAxMDU1Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2021-05-04T12:35:17Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2021-05-04T12:39:04Z"}, "message": "Replace AC_PROG_CC with AC_PROG_CC_C99 in top level configure file.\n\n2021-05-04  Nick Clifton  <nickc@redhat.com>\n\n\t* configure.ac (AC_PROG_CC): Replace with AC_PROG_CC_C99.\n\t* configure: Regenerate.", "tree": {"sha": "2f31b31e3a5ad9faafc89db8dc0c0917f9ba57dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f31b31e3a5ad9faafc89db8dc0c0917f9ba57dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9174343256c06f7879f480c59203c1615601055c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9174343256c06f7879f480c59203c1615601055c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9174343256c06f7879f480c59203c1615601055c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9174343256c06f7879f480c59203c1615601055c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5b2b911dd80ae9cc87404b7e7ab807cf6655d4"}], "stats": {"total": 179, "additions": 178, "deletions": 1}, "files": [{"sha": "c553b18b494a712825c20e0a990056155f328edc", "filename": "configure", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9174343256c06f7879f480c59203c1615601055c/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9174343256c06f7879f480c59203c1615601055c/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=9174343256c06f7879f480c59203c1615601055c", "patch": "@@ -4921,6 +4921,183 @@ ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n+   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C99\" >&5\n+$as_echo_n \"checking for $CC option to accept ISO C99... \" >&6; }\n+if ${ac_cv_prog_cc_c99+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_cv_prog_cc_c99=no\n+ac_save_CC=$CC\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdarg.h>\n+#include <stdbool.h>\n+#include <stdlib.h>\n+#include <wchar.h>\n+#include <stdio.h>\n+\n+// Check varargs macros.  These examples are taken from C99 6.10.3.5.\n+#define debug(...) fprintf (stderr, __VA_ARGS__)\n+#define showlist(...) puts (#__VA_ARGS__)\n+#define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))\n+static void\n+test_varargs_macros (void)\n+{\n+  int x = 1234;\n+  int y = 5678;\n+  debug (\"Flag\");\n+  debug (\"X = %d\\n\", x);\n+  showlist (The first, second, and third items.);\n+  report (x>y, \"x is %d but y is %d\", x, y);\n+}\n+\n+// Check long long types.\n+#define BIG64 18446744073709551615ull\n+#define BIG32 4294967295ul\n+#define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)\n+#if !BIG_OK\n+  your preprocessor is broken;\n+#endif\n+#if BIG_OK\n+#else\n+  your preprocessor is broken;\n+#endif\n+static long long int bignum = -9223372036854775807LL;\n+static unsigned long long int ubignum = BIG64;\n+\n+struct incomplete_array\n+{\n+  int datasize;\n+  double data[];\n+};\n+\n+struct named_init {\n+  int number;\n+  const wchar_t *name;\n+  double average;\n+};\n+\n+typedef const char *ccp;\n+\n+static inline int\n+test_restrict (ccp restrict text)\n+{\n+  // See if C++-style comments work.\n+  // Iterate through items via the restricted pointer.\n+  // Also check for declarations in for loops.\n+  for (unsigned int i = 0; *(text+i) != '\\0'; ++i)\n+    continue;\n+  return 0;\n+}\n+\n+// Check varargs and va_copy.\n+static void\n+test_varargs (const char *format, ...)\n+{\n+  va_list args;\n+  va_start (args, format);\n+  va_list args_copy;\n+  va_copy (args_copy, args);\n+\n+  const char *str;\n+  int number;\n+  float fnumber;\n+\n+  while (*format)\n+    {\n+      switch (*format++)\n+\t{\n+\tcase 's': // string\n+\t  str = va_arg (args_copy, const char *);\n+\t  break;\n+\tcase 'd': // int\n+\t  number = va_arg (args_copy, int);\n+\t  break;\n+\tcase 'f': // float\n+\t  fnumber = va_arg (args_copy, double);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  va_end (args_copy);\n+  va_end (args);\n+}\n+\n+int\n+main ()\n+{\n+\n+  // Check bool.\n+  _Bool success = false;\n+\n+  // Check restrict.\n+  if (test_restrict (\"String literal\") == 0)\n+    success = true;\n+  char *restrict newvar = \"Another string\";\n+\n+  // Check varargs.\n+  test_varargs (\"s, d' f .\", \"string\", 65, 34.234);\n+  test_varargs_macros ();\n+\n+  // Check flexible array members.\n+  struct incomplete_array *ia =\n+    malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));\n+  ia->datasize = 10;\n+  for (int i = 0; i < ia->datasize; ++i)\n+    ia->data[i] = i * 1.234;\n+\n+  // Check named initializers.\n+  struct named_init ni = {\n+    .number = 34,\n+    .name = L\"Test wide string\",\n+    .average = 543.34343,\n+  };\n+\n+  ni.number = 58;\n+\n+  int dynamic_array[ni.number];\n+  dynamic_array[ni.number - 1] = 543;\n+\n+  // work around unused variable warnings\n+  return (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'\n+\t  || dynamic_array[ni.number - 1] != 543);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_arg in '' -std=gnu99 -std=c99 -c99 -AC99 -D_STDC_C99= -qlanglvl=extc99\n+do\n+  CC=\"$ac_save_CC $ac_arg\"\n+  if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_prog_cc_c99=$ac_arg\n+fi\n+rm -f core conftest.err conftest.$ac_objext\n+  test \"x$ac_cv_prog_cc_c99\" != \"xno\" && break\n+done\n+rm -f conftest.$ac_ext\n+CC=$ac_save_CC\n+\n+fi\n+# AC_CACHE_VAL\n+case \"x$ac_cv_prog_cc_c99\" in\n+  x)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: none needed\" >&5\n+$as_echo \"none needed\" >&6; } ;;\n+  xno)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: unsupported\" >&5\n+$as_echo \"unsupported\" >&6; } ;;\n+  *)\n+    CC=\"$CC $ac_cv_prog_cc_c99\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c99\" >&5\n+$as_echo \"$ac_cv_prog_cc_c99\" >&6; } ;;\n+esac\n+if test \"x$ac_cv_prog_cc_c99\" != xno; then :\n+\n+fi\n+\n+\n ac_ext=cpp\n ac_cpp='$CXXCPP $CPPFLAGS'\n ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "1ba58723b14e06c911d3acd88c30a8318bdcaf2a", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9174343256c06f7879f480c59203c1615601055c/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9174343256c06f7879f480c59203c1615601055c/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=9174343256c06f7879f480c59203c1615601055c", "patch": "@@ -1381,7 +1381,7 @@ else\n   WINDMC_FOR_BUILD=\"\\$(WINDMC)\"\n fi\n \n-AC_PROG_CC\n+AC_PROG_CC_C99\n AC_PROG_CXX\n \n # We must set the default linker to the linker used by gcc for the correct"}]}