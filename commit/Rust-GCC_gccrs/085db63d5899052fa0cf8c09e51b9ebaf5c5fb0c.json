{"sha": "085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1ZGI2M2Q1ODk5MDUyZmEwY2Y4YzA5ZTUxYjllYmFmNWM1ZmIwYw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T13:52:30Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T13:52:30Z"}, "message": "S/390: PR79904: Disallow reg + sym_ref literal pool addresses.\n\nWe accept reg + sym_ref as valid address if sym_ref is a literal pool\nreference knowing that it will be rewritten as r13 + reg + offset.\nHowever, annotate_constant_pool_refs was never able to handle that.\n\nWith the patch only single sym_refs are accepted.\n\nRegression tested on s390x.\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/79904\n\t* config/s390/s390.c (s390_decompose_address): Reject reg +\n\tsym_ref literal pool references.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.dg/ubsan/pr79904-2.c: New test.\n\nFrom-SVN: r246443", "tree": {"sha": "b131b32e8a988e3abb690c01244ae7791152812e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b131b32e8a988e3abb690c01244ae7791152812e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/comments", "author": null, "committer": null, "parents": [{"sha": "dc4f29bc9a9dfcc68b20c0ce767cc3d6fb7409d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4f29bc9a9dfcc68b20c0ce767cc3d6fb7409d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4f29bc9a9dfcc68b20c0ce767cc3d6fb7409d4"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "27640adfaec538200d0d15d1463f1b50e562546e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "patch": "@@ -2842,13 +2842,10 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n      displacements by basing them off the base register.  */\n   if (disp && GET_CODE (disp) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (disp))\n     {\n-      /* Either base or index must be free to hold the base register.  */\n-      if (!base)\n-        base = fake_pool_base, literal_pool = true;\n-      else if (!indx)\n-        indx = fake_pool_base, literal_pool = true;\n-      else\n-        return false;\n+      if (base || indx)\n+\treturn false;\n+\n+      base = fake_pool_base, literal_pool = true;\n \n       /* Mark up the displacement.  */\n       disp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, disp),"}, {"sha": "316efb472775fe5e89800350848b84124cf566d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "patch": "@@ -1,3 +1,7 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/ubsan/pr79904-2.c: New test.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/79893"}, {"sha": "c99c43df18389190af72f7a91f3bb4d6c064bc17", "filename": "gcc/testsuite/gcc.dg/ubsan/pr79904-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr79904-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr79904-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr79904-2.c?ref=085db63d5899052fa0cf8c09e51b9ebaf5c5fb0c", "patch": "@@ -0,0 +1,11 @@\n+/* PR sanitizer/79904 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+typedef signed char V __attribute__((vector_size (8))); \n+\n+void\n+foo (V *a) \n+{ \n+  *a = *a * (V) { 3, 4, 5, 6, 7, 8, 9, 10 }; \n+}"}]}