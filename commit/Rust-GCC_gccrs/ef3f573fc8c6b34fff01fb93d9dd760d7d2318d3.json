{"sha": "ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzZjU3M2ZjOGM2YjM0ZmZmMDFmYjkzZDlkZDc2MGQ3ZDIzMThkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-17T14:09:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-17T14:09:35Z"}, "message": "h8300.h (FIXED_REGISTERS): Add the soft frame pointer.\n\n\t* config/h8300/h8300.h (FIXED_REGISTERS): Add the soft frame\n\tpointer.\n\t(CALL_USED_REGISTERS): Likewise.\n\t(REG_ALLOC_ORDER): Likewise.\n\t(REG_CLASS) <GENERAL_REGS>: Likewise.\n\nFrom-SVN: r77949", "tree": {"sha": "97b9a30e4f04f4b684c173ebedd013aed9a3e6a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97b9a30e4f04f4b684c173ebedd013aed9a3e6a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3/comments", "author": null, "committer": null, "parents": [{"sha": "6d4925e368e2d16f276317788fa797ed43b74cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4925e368e2d16f276317788fa797ed43b74cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4925e368e2d16f276317788fa797ed43b74cfe"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "795460c2d67773995f1ec9fc269190f96c1c4740", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "patch": "@@ -1,3 +1,11 @@\n+2004-02-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (FIXED_REGISTERS): Add the soft frame\n+\tpointer.\n+\t(CALL_USED_REGISTERS): Likewise.\n+\t(REG_ALLOC_ORDER): Likewise.\n+\t(REG_CLASS) <GENERAL_REGS>: Likewise.\n+\n 2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/md.texi (Insn Canonicalizations): Document left-chaining"}, {"sha": "52b3a70bdcf0c5b23a1d6217613d5cc56ecee746", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "patch": "@@ -288,8 +288,9 @@ extern int target_flags;\n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n-#define FIXED_REGISTERS \\\n-  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1}\n+#define FIXED_REGISTERS\t\t\t\t\\\n+/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */\t\\\n+  { 0, 0, 0, 0, 0, 0, 0, 1,  0, 1,  1, 1 }\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -301,11 +302,13 @@ extern int target_flags;\n \n    H8 destroys r0,r1,r2,r3.  */\n \n-#define CALL_USED_REGISTERS \\\n-  { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 }\n+#define CALL_USED_REGISTERS\t\t\t\\\n+/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */\t\\\n+  { 1, 1, 1, 1, 0, 0, 0, 1,  1, 1,  1, 1 }\n \n-#define REG_ALLOC_ORDER \\\n-  { 2, 3, 0, 1, 4, 5, 6, 8, 7, 9, 10}\n+#define REG_ALLOC_ORDER\t\t\t\t\\\n+/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap  fp */\t\\\n+  { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11 }\n \n #define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n {\t\t\t\t\t\t\t\\\n@@ -429,9 +432,9 @@ enum reg_class {\n \n #define REG_CLASS_CONTENTS\t\t\t\\\n {      {0},\t\t/* No regs      */\t\\\n-   {0x6ff},\t\t/* GENERAL_REGS */\t\\\n+   {0xeff},\t\t/* GENERAL_REGS */\t\\\n    {0x100},\t\t/* MAC_REGS */\t\\\n-   {0x7ff},\t\t/* ALL_REGS\t*/\t\\\n+   {0xfff},\t\t/* ALL_REGS\t*/\t\\\n }\n \n /* The same information, inverted:"}]}