{"sha": "9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMyNjliZjhlNTdhMWEyZjJjMjkzYzE4MjVkOGIzOWJhNWE1ZTIzNA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2007-04-06T16:51:18Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-04-06T16:51:18Z"}, "message": "langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove LANG_HOOKS_SAFE_FROM_P.\n\n2007-04-06  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove\n\tLANG_HOOKS_SAFE_FROM_P.\n\t* expr.c (safe_from_p): Remove langhook call.\n\t* langhooks.h (lang_hooks): Remove safe_from_p.\n\t(lhd_safe_from_p): Remove prototype.\n\t* langhooks.c (lhd_safe_from_p): Remove.\n\nFrom-SVN: r123624", "tree": {"sha": "d5d20259cbddf8ebf8fde8b11874e9baa24fbf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d20259cbddf8ebf8fde8b11874e9baa24fbf0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e9f08ba5d00da123b200fd2d8c3ce9cd01ea9c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9f08ba5d00da123b200fd2d8c3ce9cd01ea9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9f08ba5d00da123b200fd2d8c3ce9cd01ea9c8"}], "stats": {"total": 35, "additions": 9, "deletions": 26}, "files": [{"sha": "70befba11294807d5e52a404211947f538a4b00e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "patch": "@@ -1,3 +1,12 @@\n+2007-04-06  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove\n+\tLANG_HOOKS_SAFE_FROM_P.\n+\t* expr.c (safe_from_p): Remove langhook call.\n+\t* langhooks.h (lang_hooks): Remove safe_from_p.\n+\t(lhd_safe_from_p): Remove prototype.\n+\t* langhooks.c (lhd_safe_from_p): Remove.\n+\t\n 2007-04-06  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (decide_is_function_needed): Do not keep always_inline"}, {"sha": "24dfbf5bd2793c792bf3b865112c394175e28099", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "patch": "@@ -6302,12 +6302,6 @@ safe_from_p (rtx x, tree exp, int top_p)\n \t    && ! safe_from_p (x, TREE_OPERAND (exp, i), 0))\n \t  return 0;\n \n-      /* If this is a language-specific tree code, it may require\n-\t special handling.  */\n-      if ((unsigned int) TREE_CODE (exp)\n-\t  >= (unsigned int) LAST_AND_UNUSED_TREE_CODE\n-\t  && !lang_hooks.safe_from_p (x, exp))\n-\treturn 0;\n       break;\n \n     case tcc_type:"}, {"sha": "004b3c56f42f1eb018a8b4efd3f8629845894a3e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "patch": "@@ -49,7 +49,6 @@ extern tree lhd_return_tree (tree);\n extern tree lhd_return_null_tree_v (void);\n extern tree lhd_return_null_tree (tree);\n extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);\n-extern int lhd_safe_from_p (rtx, tree);\n extern tree lhd_staticp (tree);\n extern void lhd_print_tree_nothing (FILE *, tree, int);\n extern const char *lhd_decl_printable_name (tree, int);\n@@ -110,7 +109,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr\n #define LANG_HOOKS_EXPAND_DECL\t\tlhd_expand_decl\n-#define LANG_HOOKS_SAFE_FROM_P\t\tlhd_safe_from_p\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL lhd_do_nothing_t\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n@@ -296,7 +294,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_EXPAND_CONSTANT, \\\n   LANG_HOOKS_EXPAND_EXPR, \\\n   LANG_HOOKS_EXPAND_DECL, \\\n-  LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\\n   LANG_HOOKS_MARK_ADDRESSABLE, \\\n   LANG_HOOKS_STATICP, \\"}, {"sha": "919f05dea7d0c6a993539fd8808bea07d2cf14db", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "patch": "@@ -117,14 +117,6 @@ lhd_print_tree_nothing (FILE * ARG_UNUSED (file),\n {\n }\n \n-/* Called from safe_from_p.  */\n-\n-int\n-lhd_safe_from_p (rtx ARG_UNUSED (x), tree ARG_UNUSED (exp))\n-{\n-  return 1;\n-}\n-\n /* Called from staticp.  */\n \n tree"}, {"sha": "f0220fc91c3607d2e858bdecf405168f21fef35d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=9c269bf8e57a1a2f2c293c1825d8b39ba5a5e234", "patch": "@@ -315,15 +315,6 @@ struct lang_hooks\n      1 if handled, 0 otherwise.  */\n   int (*expand_decl) (tree);\n \n-  /* Hook called by safe_from_p for language-specific tree codes.  It is\n-     up to the language front-end to install a hook if it has any such\n-     codes that safe_from_p needs to know about.  Since same_from_p will\n-     recursively explore the TREE_OPERANDs of an expression, this hook\n-     should not reexamine those pieces.  This routine may recursively\n-     call safe_from_p; it should always pass `0' as the TOP_P\n-     parameter.  */\n-  int (*safe_from_p) (rtx, tree);\n-\n   /* Function to finish handling an incomplete decl at the end of\n      compilation.  Default hook is does nothing.  */\n   void (*finish_incomplete_decl) (tree);"}]}