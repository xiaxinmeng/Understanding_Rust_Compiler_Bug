{"sha": "e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNGY5Y2I5MjEyMzRiODBjODA5ZjhmZmJkN2VmMmQ1NWQ1ODNiYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-11-20T22:30:28Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-11-20T22:30:28Z"}, "message": "streambuf_iterator.h (istreambuf_iterator<>): Declare std::advance for istreambuf_iterator of char types to be friend.\n\n2017-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator<>): Declare\n\tstd::advance for istreambuf_iterator of char types to be friend.\n\t(std::advance(istreambuf_iterator&, _Distance)): New overload.\n\t* include/std/streambuf (basic_streambuf<>): Declare std::advance for\n\tistreambuf_iterator of char types to be friend.\n\t* testsuite/22_locale/money_get/get/char/9.cc: Have\n\tistreambuf_iterator created on the fly when calling money_get<>::get.\n\t* testsuite/22_locale/money_get/get/wchar_t/9.cc: Likewise.\n\t* testsuite/24_iterators/istreambuf_iterator/debug/1_neg.cc: New.\n\t* testsuite/24_iterators/istreambuf_iterator/debug/2_neg.cc: New.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/1.cc: New.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/1_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/2.cc: New.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/2_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/3_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/3_neg.cc:\n\tNew.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: Leverage\n\ton std::advance overload.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc:\n\tLikewise.\n\nFrom-SVN: r254972", "tree": {"sha": "d38add252c2ed6e4905d28d1855e6e3306405a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38add252c2ed6e4905d28d1855e6e3306405a91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/comments", "author": null, "committer": null, "parents": [{"sha": "9be0a9d6d20e5cb3c50f64b5a9a49070b9a0f267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be0a9d6d20e5cb3c50f64b5a9a49070b9a0f267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be0a9d6d20e5cb3c50f64b5a9a49070b9a0f267"}], "stats": {"total": 740, "additions": 706, "deletions": 34}, "files": [{"sha": "40f0076002c6a2f0370f34794632f25f0c55fb5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -1,3 +1,38 @@\n+2017-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator<>): Declare\n+\tstd::advance for istreambuf_iterator of char types to be friend.\n+\t(std::advance(istreambuf_iterator&, _Distance)): New overload.\n+\t* include/std/streambuf (basic_streambuf<>): Declare std::advance for\n+\tistreambuf_iterator of char types to be friend.\n+\t* testsuite/22_locale/money_get/get/char/9.cc: Have\n+\tistreambuf_iterator created on the fly when calling money_get<>::get.\n+\t* testsuite/22_locale/money_get/get/wchar_t/9.cc: Likewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/debug/1_neg.cc: New.\n+\t* testsuite/24_iterators/istreambuf_iterator/debug/2_neg.cc: New.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/1.cc: New.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/1_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/2.cc: New.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/2_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/char/3_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/3_neg.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: Leverage\n+\ton std::advance overload.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc:\n+\tLikewise.\n+\n 2017-11-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/special_functions/18_riemann_zeta/check_value.cc: Fix"}, {"sha": "98f29b488d145acdb693083601f39de51cb7cca9", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -38,7 +38,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-     \n+\n   /**\n    * @addtogroup iterators\n    * @{\n@@ -49,7 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     class istreambuf_iterator\n     : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,\n-                      _CharT*,\n+\t\t      _CharT*,\n #if __cplusplus >= 201103L\n     // LWG 445.\n \t\t      _CharT>\n@@ -70,22 +70,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n-\t\t                    ostreambuf_iterator<_CharT2> >::__type\n+\t\t\t\t    ostreambuf_iterator<_CharT2> >::__type\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n       template<bool _IsMove, typename _CharT2>\n-\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n \t\t\t\t\t       _CharT2*>::__type\n \t__copy_move_a2(istreambuf_iterator<_CharT2>,\n \t\t       istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n-\t\t\t            istreambuf_iterator<_CharT2> >::__type\n+\t\t\t\t    istreambuf_iterator<_CharT2> >::__type\n \tfind(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     const _CharT2&);\n \n+      template<typename _CharT2, typename _Distance>\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t\t\t\t       void>::__type\n+\tadvance(istreambuf_iterator<_CharT2>&, _Distance);\n+\n     private:\n       // 24.5.3 istreambuf_iterator\n       // p 1\n@@ -214,15 +219,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Types:\n       //@{\n       /// Public typedefs\n-      typedef _CharT                           char_type;\n-      typedef _Traits                          traits_type;\n+      typedef _CharT\t\t\t       char_type;\n+      typedef _Traits\t\t\t       traits_type;\n       typedef basic_streambuf<_CharT, _Traits> streambuf_type;\n       typedef basic_ostream<_CharT, _Traits>   ostream_type;\n       //@}\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n-\t\t                    ostreambuf_iterator<_CharT2> >::__type\n+\t\t\t\t    ostreambuf_iterator<_CharT2> >::__type\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n@@ -283,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Overloads for streambuf iterators.\n   template<typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n-    \t                 \t    ostreambuf_iterator<_CharT> >::__type\n+\t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n     copy(istreambuf_iterator<_CharT> __first,\n \t istreambuf_iterator<_CharT> __last,\n \t ostreambuf_iterator<_CharT> __result)\n@@ -299,8 +304,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<bool _IsMove, typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n-    \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n     __copy_move_a2(_CharT* __first, _CharT* __last,\n \t\t   ostreambuf_iterator<_CharT> __result)\n     {\n@@ -323,15 +328,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<bool _IsMove, typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n-    \t\t\t\t    _CharT*>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    _CharT*>::__type\n     __copy_move_a2(istreambuf_iterator<_CharT> __first,\n \t\t   istreambuf_iterator<_CharT> __last, _CharT* __result)\n     {\n-      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n-      typedef typename __is_iterator_type::traits_type     traits_type;\n+      typedef istreambuf_iterator<_CharT>\t\t   __is_iterator_type;\n+      typedef typename __is_iterator_type::traits_type\t   traits_type;\n       typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n-      typedef typename traits_type::int_type               int_type;\n+      typedef typename traits_type::int_type\t\t   int_type;\n \n       if (__first._M_sbuf && !__last._M_sbuf)\n \t{\n@@ -363,10 +368,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     find(istreambuf_iterator<_CharT> __first,\n \t istreambuf_iterator<_CharT> __last, const _CharT& __val)\n     {\n-      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n+      typedef istreambuf_iterator<_CharT>\t\t   __is_iterator_type;\n       typedef typename __is_iterator_type::traits_type     traits_type;\n       typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n-      typedef typename traits_type::int_type               int_type;\n+      typedef typename traits_type::int_type\t\t   int_type;\n       const int_type __eof = traits_type::eof();\n \n       if (__first._M_sbuf && !__last._M_sbuf)\n@@ -397,6 +402,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __first;\n     }\n \n+  template<typename _CharT, typename _Distance>\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    void>::__type\n+    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)\n+    {\n+      if (__n == 0)\n+\treturn;\n+\n+      __glibcxx_assert(__n > 0);\n+      __glibcxx_requires_cond(!__i._M_at_eof(),\n+\t\t\t      _M_message(__gnu_debug::__msg_inc_istreambuf)\n+\t\t\t      ._M_iterator(__i));\n+\n+      typedef istreambuf_iterator<_CharT>\t\t   __is_iterator_type;\n+      typedef typename __is_iterator_type::traits_type\t   traits_type;\n+      typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n+      typedef typename traits_type::int_type\t\t   int_type;\n+      const int_type __eof = traits_type::eof();\n+\n+      streambuf_type* __sb = __i._M_sbuf;\n+      while (__n > 0)\n+\t{\n+\t  streamsize __size = __sb->egptr() - __sb->gptr();\n+\t  if (__size > __n)\n+\t    {\n+\t      __sb->__safe_gbump(__n);\n+\t      break;\n+\t    }\n+\n+\t  __sb->__safe_gbump(__size);\n+\t  __n -= __size;\n+\t  if (traits_type::eq_int_type(__sb->underflow(), __eof))\n+\t    {\n+\t      __glibcxx_requires_cond(__n == 0,\n+\t\t\t\t_M_message(__gnu_debug::__msg_inc_istreambuf)\n+\t\t\t\t._M_iterator(__i));\n+\t      break;\n+\t    }\n+\t}\n+\n+      __i._M_c = __eof;\n+    }\n+\n // @} group iterators\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c1fd395b827026a12c38d5a740acc437510724ad", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -159,6 +159,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     const _CharT2&);\n \n+      template<typename _CharT2, typename _Distance>\n+        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t\t\t\t       void>::__type\n+        advance(istreambuf_iterator<_CharT2>&, _Distance);\n+\n       template<typename _CharT2, typename _Traits2>\n         friend basic_istream<_CharT2, _Traits2>&\n         operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);"}, {"sha": "476e38fadc2870011717b4c1d6b3cfe6134af5ab", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/9.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -41,7 +41,6 @@ int main()\n     = std::use_facet<std::money_get<char> >(liffey.getloc());\n \n   typedef std::istreambuf_iterator<char> iterator_type;\n-  iterator_type is(liffey);\n   iterator_type end;\n \n   std::ios_base::iostate err01 = std::ios_base::goodbit;\n@@ -50,39 +49,39 @@ int main()\n \n   // Feed it 1 digit too many, which should fail.\n   liffey.str(\"12.3456\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! (err01 & std::ios_base::failbit ))\n     fails |= 0x01;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it exactly what it wants, which should succeed.\n   liffey.str(\"12.345\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if ( err01 & std::ios_base::failbit )\n     fails |= 0x02;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it 1 digit too few, which should fail.\n   liffey.str(\"12.34\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! ( err01 & std::ios_base::failbit ))\n     fails |= 0x04;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it only a decimal-point, which should fail.\n   liffey.str(\"12.\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! (err01 & std::ios_base::failbit ))\n     fails |= 0x08;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it no decimal-point at all, which should succeed.\n   liffey.str(\"12\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if ( err01 & std::ios_base::failbit )\n     fails |= 0x10;\n "}, {"sha": "e5f8defdb0a19d834e3f9cf4576b400bdb6fb967", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/9.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -41,7 +41,6 @@ int main()\n     = std::use_facet<std::money_get<wchar_t> >(liffey.getloc());\n \n   typedef std::istreambuf_iterator<wchar_t> iterator_type;\n-  iterator_type is(liffey);\n   iterator_type end;\n \n   std::ios_base::iostate err01 = std::ios_base::goodbit;\n@@ -50,39 +49,39 @@ int main()\n \n   // Feed it 1 digit too many, which should fail.\n   liffey.str(L\"12.3456\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! (err01 & std::ios_base::failbit ))\n     fails |= 0x01;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it exactly what it wants, which should succeed.\n   liffey.str(L\"12.345\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if ( err01 & std::ios_base::failbit )\n     fails |= 0x02;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it 1 digit too few, which should fail.\n   liffey.str(L\"12.34\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! ( err01 & std::ios_base::failbit ))\n     fails |= 0x04;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it only a decimal-point, which should fail.\n   liffey.str(L\"12.\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if (! (err01 & std::ios_base::failbit ))\n     fails |= 0x08;\n \n   err01 = std::ios_base::goodbit;\n \n   // Feed it no decimal-point at all, which should succeed.\n   liffey.str(L\"12\");\n-  greed.get(is, end, false, liffey, err01, coins);\n+  greed.get(liffey, end, false, liffey, err01, coins);\n   if ( err01 & std::ios_base::failbit )\n     fails |= 0x10;\n "}, {"sha": "241fc583b902d91b5ba2480f485ef3bf775aeb63", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/debug/1_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F1_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+\n+void test01()\n+{\n+  typedef std::istreambuf_iterator<char> cistreambuf_iter;\n+\n+  cistreambuf_iter eof;\n+  ++eof; // Invalid.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "407f00b10b69000cf593364ef7ebe52c36bc7ce1", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/debug/2_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Fdebug%2F2_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+\n+void test01()\n+{\n+  typedef std::istreambuf_iterator<char> cistreambuf_iter;\n+\n+  cistreambuf_iter eof;\n+  eof++; // Invalid.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7c3f882e8a61c72c89cbbfffe2f21dbd6706b6ff", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/char/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  VERIFY( *beg1 == 'D' );\n+\n+  advance(beg1, 1);\n+\n+  VERIFY( beg1 != end1 );\n+  VERIFY( *beg1 == 'r' );\n+\n+  advance(beg1, 0);\n+  VERIFY( *beg1 == 'r' );\n+\n+  advance(beg1, 38);\n+  VERIFY( *beg1 == 'n' );\n+\n+  advance(beg1, 1);\n+  VERIFY( beg1 == end1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d1b8cde3e983cef7e8d0097174265799a47bd28b", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/char/1_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F1_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+  in_iterator_type end1;\n+\n+  advance(end1, -1); // Invalid -1 value.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c99111eca8358a504e034bbc0f5eeb77b8d73cf9", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/char/2.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  unsigned found = 0;\n+\n+  {\n+    ifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+    in_iterator_type beg(fbuf);\n+    in_iterator_type end;\n+\n+    for (;;)\n+      {\n+\tbeg = find(beg, end, '1');\n+\tif (beg == end)\n+\t  break;\n+\n+\t++found;\n+\tVERIFY( *beg == '1' );\n+\n+\tadvance(beg, 9);\n+\tVERIFY( *beg == '0' );\n+      }\n+  }\n+\n+  {\n+    ifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+    in_iterator_type beg(fbuf);\n+    in_iterator_type end;\n+\n+    beg = find(beg, end, '1');\n+    VERIFY( beg != end );\n+    VERIFY( *beg == '1' );\n+\n+    advance(beg, 9);\n+    VERIFY( *beg == '0' );\n+\n+    unsigned line_length = 10;\n+    while (*++beg != '1')\n+      ++line_length;\n+\n+    // Try to jump directly to the end through advance.\n+    advance(beg, (found - 2) * line_length + 9);\n+    VERIFY( *beg == '0' );\n+    VERIFY( find(beg, end, '1') == end );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d187785f7b96611d328764335ef00812df5500a", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/char/2_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F2_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+  in_iterator_type end1;\n+\n+  advance(end1, 0); // Ok.\n+\n+  advance(end1, 1); // Invalid.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "af2bed6d3471283c634bd167517e5f01eb0f8184", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/char/3_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fchar%2F3_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <sstream>\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+\n+  advance(beg1, 50); // Invalid\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "18839ca25d08345568c79650e28c69807b49c193", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  wistringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  VERIFY( *beg1 == L'D' );\n+\n+  advance(beg1, 1);\n+\n+  VERIFY( beg1 != end1 );\n+  VERIFY( *beg1 == L'r' );\n+\n+  advance(beg1, 0);\n+  VERIFY( *beg1 == L'r' );\n+\n+  advance(beg1, 38);\n+  VERIFY( *beg1 == L'n' );\n+\n+  advance(beg1, 1);\n+  VERIFY( beg1 == end1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cd1b7a198323a727d992db712f2a8d18d3482fae", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/1_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F1_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+  in_iterator_type end1;\n+\n+  advance(end1, -1); // Invalid -1 value.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "91cc93991a32927cf0ea60a19f5faf71b1dca8e0", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  unsigned found = 0;\n+\n+  {\n+    wifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+    in_iterator_type beg(fbuf);\n+    in_iterator_type end;\n+\n+    for (;;)\n+      {\n+\tbeg = find(beg, end, L'1');\n+\tif (beg == end)\n+\t  break;\n+\n+\t++found;\n+\tVERIFY( *beg == L'1' );\n+\n+\tadvance(beg, 9);\n+\tVERIFY( *beg == L'0' );\n+      }\n+  }\n+\n+  {\n+    wifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+    in_iterator_type beg(fbuf);\n+    in_iterator_type end;\n+\n+    beg = find(beg, end, L'1');\n+    VERIFY( beg != end );\n+    VERIFY( *beg == L'1' );\n+\n+    advance(beg, 9);\n+    VERIFY( *beg == L'0' );\n+\n+    unsigned line_length = 10;\n+    while (*++beg != L'1')\n+      ++line_length;\n+\n+    // Try to jump directly to the end through advance.\n+    advance(beg, (found - 2) * line_length + 9);\n+    VERIFY( *beg == L'0' );\n+    VERIFY( find(beg, end, L'1') == end );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ea280f9a689b65033a91229a132204ceeebcfbd1", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/2_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F2_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+  in_iterator_type end1;\n+\n+  advance(end1, 0); // Ok.\n+\n+  advance(end1, 1); // Invalid.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c5bf1227a86ae79975638d0914c90e131fd4072f", "filename": "libstdc++-v3/testsuite/25_algorithms/advance/istreambuf_iterators/wchar_t/3_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadvance%2Fistreambuf_iterators%2Fwchar_t%2F3_neg.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <sstream>\n+#include <iterator>\n+#include <algorithm>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  wistringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+\n+  advance(beg1, 50); // Invalid\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b288787132b93bc37bf003bc626e4865829b69ea", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -46,8 +46,7 @@ void test01()\n       ++found;\n       VERIFY( *beg == '1' );\n \n-      for (unsigned sk = 0; sk < 9; sk++)\n-\t++beg;\n+      advance(beg, 9);\n       VERIFY( *beg == '0' );\n     }\n   VERIFY( found == 1500 );"}, {"sha": "6393f49088e5be87dfe6d1fb1c92aca38ea1a75e", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e324f9cb921234b80c809f8ffbd7ef2d55d583bc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc?ref=e324f9cb921234b80c809f8ffbd7ef2d55d583bc", "patch": "@@ -44,8 +44,7 @@ void test01()\n       ++found;\n       VERIFY( *beg == L'1' );\n \n-      for (unsigned sk = 0; sk < 9; sk++)\n-\t++beg;\n+      advance(beg, 9);\n       VERIFY( *beg == L'0' );\n     }\n   VERIFY( found == 1500 );"}]}