{"sha": "04d57dd504394cbdc94281c244bb2c1f1fda8a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkNTdkZDUwNDM5NGNiZGM5NDI4MWMyNDRiYjJjMWYxZmRhOGE5MQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-11-02T02:17:41Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-11-02T02:17:41Z"}, "message": "PR c/7353 redux\n\n\tPR c/7353 redux\ncp:\n\t* decl2.c (grokfield): Reject TYPE_DECLs with initializers.\ntestsuite:\n\t* g++.dg/ext/typedef-init.C, gcc.dg/typedef-init.C:\n\tAdd some more cases.\n\nFrom-SVN: r58737", "tree": {"sha": "42b0a17506b8b37f0d7d50420e1402075faa74f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42b0a17506b8b37f0d7d50420e1402075faa74f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d57dd504394cbdc94281c244bb2c1f1fda8a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d57dd504394cbdc94281c244bb2c1f1fda8a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d57dd504394cbdc94281c244bb2c1f1fda8a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d57dd504394cbdc94281c244bb2c1f1fda8a91/comments", "author": null, "committer": null, "parents": [{"sha": "46be79e78967a0dea39910f0703c0c439748b2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46be79e78967a0dea39910f0703c0c439748b2a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46be79e78967a0dea39910f0703c0c439748b2a5"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "ce94b3a11b8ec451fb52cb73d4d81e11a27616e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04d57dd504394cbdc94281c244bb2c1f1fda8a91", "patch": "@@ -1,3 +1,8 @@\n+2002-11-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR c/7353 redux\n+\t* decl2.c (grokfield): Reject TYPE_DECLs with initializers.\n+\n 2002-10-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/8186\n@@ -21,7 +26,7 @@\n \n \tPR c++/8149\n \t* decl.c (make_typename_type): Issue errors about invalid results.\n-\t\n+\n 2002-10-30  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tCore issue 287, PR c++/7639\n@@ -77,7 +82,7 @@\n \t* pt.c (build_template_decl): Don't set it.\n \t(tsubst_decl): Likewise.\n \t* typeck.c (expand_ptrmemfunc_cst): Don't use it.\n-\t\t\n+\n \t* class.c (build_vtbl_initializer): Don't use build_vtable_entry.\n \t(build_vtable_entry): Remove.\n \t* cp-tree.h (BINFO_VIRTUALS): Expand documentation."}, {"sha": "93b643f7bac2c5b8abb254cf29f176f2787fe7b7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=04d57dd504394cbdc94281c244bb2c1f1fda8a91", "patch": "@@ -915,7 +915,13 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n     /* friend or constructor went bad.  */\n     return value;\n   if (TREE_TYPE (value) == error_mark_node)\n-    return error_mark_node;  \n+    return error_mark_node;\n+\n+  if (TREE_CODE (value) == TYPE_DECL && init)\n+    {\n+      error (\"typedef `%D' is initialized (use __typeof__ instead)\", value);\n+      init = NULL_TREE;\n+    }\n \n   /* Pass friendly classes back.  */\n   if (TREE_CODE (value) == VOID_TYPE)"}, {"sha": "2b88c1f85d3fb7daf4df56607422ccfcd7118f02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04d57dd504394cbdc94281c244bb2c1f1fda8a91", "patch": "@@ -1,3 +1,8 @@\n+2002-11-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* g++.dg/ext/typedef-init.C, gcc.dg/typedef-init.C:\n+\tAdd some more cases.\n+\n 2002-11-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8391"}, {"sha": "1b2a05db63c810826bbd5f75000b2106309cb9ac", "filename": "gcc/testsuite/g++.dg/ext/typedef-init.C", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C?ref=04d57dd504394cbdc94281c244bb2c1f1fda8a91", "patch": "@@ -5,10 +5,29 @@\n    it's been broken since GCC 3.0 (caused ICE) and we have now removed\n    the extension.  See PR c/7353.\n \n-   C++ issues a warning in addition to the error, since this construct\n-   appears to be a case of implicit int (forbidden in std. C++) until\n-   we get to the equals sign.  */\n+   For cases A and C, C++ issues a warning in addition to the error,\n+   since this construct appears to be a case of implicit int\n+   (forbidden in std. C++) until we get to the equals sign.  */\n \n-typedef A = 0;  /* { dg-error \"initialized\" \"typedef A = B\" } */\n-                /* { dg-warning \"no type\" \"also warns\" { target *-*-* } 12 } */\n-A a;            /* { dg-bogus \"\" \"no error cascade\" } */\n+/* Case A: just the bare name = initializer.  */\n+\n+typedef A = 0;  /* { dg-error \"initialized\" \"A\" } */\n+                /* { dg-warning \"no type\" \"A warns\" { target *-*-* } 14 } */\n+A a;            /* { dg-bogus \"\" \"A error cascade\" } */\n+\n+/* Case B: with a type also.  */\n+\n+typedef int B = 0;  /* { dg-error \"initialized\" \"B\" } */\n+B b;\t\t    /* { dg-bogus \"\" \"B error cascade\" } */\n+\n+/* C and D are the same as A and B, but wrapped in a structure;\n+   field declarations go by a different code path in C++ (ick).  */\n+\n+struct S {\n+  typedef C = 0; /* { dg-error \"initialized\" \"C\" } */\n+                 /* { dg-warning \"no type\" \"C warns\" { target *-*-* } 27 } */\n+  C c;\t\t /* { dg-bogus \"\" \"C error cascade\" } */\n+\n+  typedef int D = 0; /* { dg-error \"initialized\" \"D\" } */\n+  D d;\t\t     /* { dg-bogus \"\" \"D error cascade\" } */\n+};"}, {"sha": "52928da9a6916265a0bd10102a3ded45d60023f6", "filename": "gcc/testsuite/gcc.dg/typedef-init.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d57dd504394cbdc94281c244bb2c1f1fda8a91/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypedef-init.c?ref=04d57dd504394cbdc94281c244bb2c1f1fda8a91", "patch": "@@ -5,5 +5,12 @@\n    it's been broken since GCC 3.0 (caused ICE) and we have now removed\n    the extension.  See PR c/7353.  */\n \n-typedef A = 0;  /* { dg-error \"initialized\" \"typedef A = B\" } */\n-A a;            /* { dg-bogus \"\" \"no error cascade\" } */\n+/* Case A: just the bare name = initializer.  */\n+\n+typedef A = 0;  /* { dg-error \"initialized\" \"A\" } */\n+A a;            /* { dg-bogus \"\" \"A error cascade\" } */\n+\n+/* Case B: with a type also.  */\n+\n+typedef int B = 0;  /* { dg-error \"initialized\" \"B\" } */\n+B b;\t\t    /* { dg-bogus \"\" \"B error cascade\" } */"}]}