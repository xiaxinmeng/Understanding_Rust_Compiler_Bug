{"sha": "ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0ZGE5ZGJjYzM3N2RmODlkMjFlYWZhNmUwZTQwZjNlMTc2ZDA5OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@cygnus.com", "date": "2000-05-24T19:49:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-05-24T19:49:28Z"}, "message": "expr.c (expand_assignment, [...]): Set in_check_memory_usage while emitting chkr_check_addr libcall.\n\n* expr.c (expand_assignment, store_expr, expand_expr,\nexpand_expr_unaligned): Set in_check_memory_usage while emitting\nchkr_check_addr libcall.\n\nFrom-SVN: r34140", "tree": {"sha": "1d1b1c0083d6b5a83a610bad1447dbe02643a51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d1b1c0083d6b5a83a610bad1447dbe02643a51c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4da9dbcc377df89d21eafa6e0e40f3e176d099/comments", "author": null, "committer": null, "parents": [{"sha": "55760a0c83f63a3d0c1fd9c108f2a42b93d78c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55760a0c83f63a3d0c1fd9c108f2a42b93d78c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55760a0c83f63a3d0c1fd9c108f2a42b93d78c9c"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "76346586db538c9d0d808f3c5908c4ae692fdf8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4da9dbcc377df89d21eafa6e0e40f3e176d099/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4da9dbcc377df89d21eafa6e0e40f3e176d099/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "patch": "@@ -1,3 +1,9 @@\n+2000-05-24  Alexandre Oliva  <aoliva@cygnus.com>\n+\n+\t* expr.c (expand_assignment, store_expr, expand_expr,\n+\texpand_expr_unaligned): Set in_check_memory_usage while emitting\n+\tchkr_check_addr libcall.\n+\n 2000-05-24  Nick Clifton  <nickc@cygnus.com>\n \n \t* fold-const.c (extract_muldiv): When constructing a"}, {"sha": "fcd4845a7acc20a86f4df45a2349545872c50cf2", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4da9dbcc377df89d21eafa6e0e40f3e176d099/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4da9dbcc377df89d21eafa6e0e40f3e176d099/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "patch": "@@ -3495,12 +3495,14 @@ expand_assignment (to, from, want_value, suggest_reg)\n \t  size *= GET_MODE_SIZE (best_mode);\n \n \t  /* Check the access right of the pointer.  */\n+\t  in_check_memory_usage = 1;\n \t  if (size)\n \t    emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n \t\t\t       to_addr, Pmode,\n \t\t\t       GEN_INT (size), TYPE_MODE (sizetype),\n \t\t\t       GEN_INT (MEMORY_USE_WO),\n \t\t\t       TYPE_MODE (integer_type_node));\n+\t  in_check_memory_usage = 0;\n \t}\n \n       /* If this is a varying-length object, we must get the address of\n@@ -3877,6 +3879,7 @@ store_expr (exp, target, want_value)\n       && GET_CODE (target) == MEM\n       && AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n     {\n+      in_check_memory_usage = 1;\n       if (GET_CODE (temp) == MEM)\n         emit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n \t\t\t   XEXP (target, 0), Pmode,\n@@ -3888,6 +3891,7 @@ store_expr (exp, target, want_value)\n \t\t\t   expr_size (exp), TYPE_MODE (sizetype),\n \t\t\t   GEN_INT (MEMORY_USE_WO), \n \t\t\t   TYPE_MODE (integer_type_node));\n+      in_check_memory_usage = 0;\n     }\n \n   /* If value was not generated in the target, store it there.\n@@ -3991,12 +3995,14 @@ store_expr (exp, target, want_value)\n \t      if (size != const0_rtx)\n \t\t{\n \t\t  /* Be sure we can write on ADDR.  */\n+\t\t  in_check_memory_usage = 1;\n \t\t  if (current_function_check_memory_usage)\n \t\t    emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n \t\t\t\t       addr, Pmode,\n \t\t\t\t       size, TYPE_MODE (sizetype),\n  \t\t\t\t       GEN_INT (MEMORY_USE_WO), \n \t\t\t\t       TYPE_MODE (integer_type_node));\n+\t\t  in_check_memory_usage = 0;\n \t\t  clear_storage (gen_rtx_MEM (BLKmode, addr), size, align);\n \t\t}\n \n@@ -5919,13 +5925,15 @@ expand_expr (exp, target, tmode, modifier)\n \t  enum memory_use_mode memory_usage;\n \t  memory_usage = get_memory_usage_from_modifier (modifier);\n \n+\t  in_check_memory_usage = 1;\n \t  if (memory_usage != MEMORY_USE_DONT)\n \t    emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n \t\t\t       XEXP (DECL_RTL (exp), 0), Pmode,\n \t\t\t       GEN_INT (int_size_in_bytes (type)),\n \t\t\t       TYPE_MODE (sizetype),\n \t\t\t       GEN_INT (memory_usage),\n \t\t\t       TYPE_MODE (integer_type_node));\n+\t  in_check_memory_usage = 0;\n \t}\n \n       /* ... fall through ...  */\n@@ -6755,13 +6763,15 @@ expand_expr (exp, target, tmode, modifier)\n \t\tsize = (bitpos % BITS_PER_UNIT) + bitsize + BITS_PER_UNIT - 1;\n \n         \t/* Check the access right of the pointer.  */\n+\t\tin_check_memory_usage = 1;\n \t\tif (size > BITS_PER_UNIT)\n \t\t  emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n \t\t\t\t     to, Pmode,\n \t\t\t\t     GEN_INT (size / BITS_PER_UNIT),\n \t\t\t\t     TYPE_MODE (sizetype),\n \t\t\t\t     GEN_INT (memory_usage), \n \t\t\t\t     TYPE_MODE (integer_type_node));\n+\t\tin_check_memory_usage = 0;\n \t      }\n \t  }\n \n@@ -8717,12 +8727,14 @@ expand_expr_unaligned (exp, palign)\n \t    size = (bitpos % BITS_PER_UNIT) + bitsize + BITS_PER_UNIT - 1;\n \n \t    /* Check the access right of the pointer.  */\n+\t    in_check_memory_usage = 1;\n \t    if (size > BITS_PER_UNIT)\n \t      emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n \t\t\t\t to, ptr_mode, GEN_INT (size / BITS_PER_UNIT),\n \t\t\t\t TYPE_MODE (sizetype),\n \t\t\t\t GEN_INT (MEMORY_USE_RO), \n \t\t\t\t TYPE_MODE (integer_type_node));\n+\t    in_check_memory_usage = 0;\n \t  }\n \n \t/* In cases where an aligned union has an unaligned object"}]}