{"sha": "bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2ZDQ3NzdkZDcwN2FiZTkxMWEwNGVjOWYwNTBhMjZkNDFmZGQ1Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-04-10T10:36:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-04-10T10:36:50Z"}, "message": "mips.c (mips_va_arg): When using the struct version of the EABI va_list...\n\n\t* config/mips/mips.c (mips_va_arg): When using the struct version\n\tof the EABI va_list, allow arguments in the register save area to\n\ttake up less room than a stack argument.\n\nFrom-SVN: r52125", "tree": {"sha": "95ebb9fddcd53d748828d51d46c8a9bbe1e8e66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95ebb9fddcd53d748828d51d46c8a9bbe1e8e66d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6d4777dd707abe911a04ec9f050a26d41fdd5b/comments", "author": null, "committer": null, "parents": [{"sha": "ba3307c092fce730120657ab5c89ff4d0936244e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3307c092fce730120657ab5c89ff4d0936244e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3307c092fce730120657ab5c89ff4d0936244e"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "5ce2348093c185a73537c9280daedaf770a993e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6d4777dd707abe911a04ec9f050a26d41fdd5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6d4777dd707abe911a04ec9f050a26d41fdd5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "patch": "@@ -1,3 +1,9 @@\n+2002-04-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_va_arg): When using the struct version\n+\tof the EABI va_list, allow arguments in the register save area to\n+\ttake up less room than a stack argument.\n+\n 2002-04-10  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (expand_expr) [INTEGER_CST]: Don't force into registers"}, {"sha": "8188c7bbc1fb81a03c79313b21cb92dd13df2efb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6d4777dd707abe911a04ec9f050a26d41fdd5b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6d4777dd707abe911a04ec9f050a26d41fdd5b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bf6d4777dd707abe911a04ec9f050a26d41fdd5b", "patch": "@@ -4582,6 +4582,7 @@ mips_va_arg (valist, type)\n \t  tree f_ovfl, f_gtop, f_ftop, f_goff, f_foff;\n \t  tree ovfl, top, off;\n \t  rtx lab_over = NULL_RTX, lab_false;\n+\t  HOST_WIDE_INT osize;\n \n \t  f_ovfl = TYPE_FIELDS (va_list_type_node);\n \t  f_gtop = TREE_CHAIN (f_ovfl);\n@@ -4596,7 +4597,11 @@ mips_va_arg (valist, type)\n \t\t TOP be the top of the register save area;\n \t\t OFF be the offset from TOP of the next register;\n \t\t ADDR_RTX be the address of the argument; and\n-\t\t RSIZE be the number of bytes used to store the argument.\n+\t\t RSIZE be the number of bytes used to store the argument\n+\t\t   when it's in the register save area\n+\t\t OSIZE be the number of bytes used to store it when it's\n+\t\t   in the stack overflow area\n+\t\t PADDING be (BYTES_BIG_ENDIAN ? OSIZE - RSIZE : 0)\n \n \t     The code we want is:\n \n@@ -4608,10 +4613,10 @@ mips_va_arg (valist, type)\n \t\t  6:   }\n \t\t  7: else\n \t\t  8:   {\n-\t\t  9:\t ovfl += ((intptr_t) ovfl + rsize - 1) & -rsize;\n-\t\t 10:\t addr_rtx = ovfl;\n-\t\t 11:\t ovfl += rsize;\n-\t\t 12:   }\n+\t\t  9:\t ovfl += ((intptr_t) ovfl + osize - 1) & -osize;\n+\t\t 10:\t addr_rtx = ovfl + PADDING;\n+\t\t 11:\t ovfl += osize;\n+\t\t 14:   }\n \n \t     [1] and [9] can sometimes be optimized away.  */\n \n@@ -4643,6 +4648,13 @@ mips_va_arg (valist, type)\n \t\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t\t}\n \t    }\n+\t  /* Every overflow argument must take up at least UNITS_PER_WORD\n+\t     bytes (= PARM_BOUNDARY bits).  RSIZE can sometimes be smaller\n+\t     than that, such as in the combination -mgp64 -msingle-float\n+\t     -fshort-double.  Doubles passed in registers will then take\n+\t     up UNITS_PER_FPVALUE bytes, but those passed on the stack\n+\t     take up UNITS_PER_WORD bytes.  */\n+\t  osize = MAX (rsize, UNITS_PER_WORD);\n \n \t  /* [2] Emit code to branch if off == 0.  */\n \t  r = expand_expr (off, NULL_RTX, TYPE_MODE (TREE_TYPE (off)),\n@@ -4668,21 +4680,25 @@ mips_va_arg (valist, type)\n \t  emit_barrier ();\n \t  emit_label (lab_false);\n \n-\t  if (rsize > UNITS_PER_WORD)\n+\t  if (osize > UNITS_PER_WORD)\n \t    {\n-\t      /* [9] Emit: ovfl += ((intptr_t) ovfl + rsize - 1) & -rsize.  */\n+\t      /* [9] Emit: ovfl += ((intptr_t) ovfl + osize - 1) & -osize.  */\n \t      t = build (PLUS_EXPR, TREE_TYPE (ovfl), ovfl,\n-\t\t\t build_int_2 (rsize - 1, 0));\n+\t\t\t build_int_2 (osize - 1, 0));\n \t      t = build (BIT_AND_EXPR, TREE_TYPE (ovfl), t,\n-\t\t\t build_int_2 (-rsize, -1));\n+\t\t\t build_int_2 (-osize, -1));\n \t      t = build (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n \t      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t    }\n \n \t  /* [10, 11].\tEmit code to store ovfl in addr_rtx, then\n-\t     post-increment ovfl by rsize.  */\n+\t     post-increment ovfl by osize.  On big-endian machines,\n+\t     the argument has OSIZE - RSIZE bytes of leading padding.  */\n \t  t = build (POSTINCREMENT_EXPR, TREE_TYPE (ovfl), ovfl,\n-\t\t     size_int (rsize));\n+\t\t     size_int (osize));\n+\t  if (BYTES_BIG_ENDIAN && osize > rsize)\n+\t    t = build (PLUS_EXPR, TREE_TYPE (t), t,\n+\t\t       build_int_2 (osize - rsize, 0));\n \t  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n \t  if (r != addr_rtx)\n \t    emit_move_insn (addr_rtx, r);"}]}