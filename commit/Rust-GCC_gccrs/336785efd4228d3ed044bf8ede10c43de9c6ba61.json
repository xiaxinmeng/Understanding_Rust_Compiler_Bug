{"sha": "336785efd4228d3ed044bf8ede10c43de9c6ba61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2Nzg1ZWZkNDIyOGQzZWQwNDRiZjhlZGUxMGM0M2RlOWM2YmE2MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T18:55:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T18:55:56Z"}, "message": "compiler: change Expression export to use Export_function_body\n    \n    In preparation for writing expressions to inline function bodies,\n    change the existing expression export code to use Export_function_body\n    rather than Export.  Adjust existing expression exporters accordingly.\n    \n    This is a refactoring that doesn't affect compiler output.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150063\n\nFrom-SVN: r266523", "tree": {"sha": "2faff4665b784c50a7779309159027fe2d3718f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2faff4665b784c50a7779309159027fe2d3718f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336785efd4228d3ed044bf8ede10c43de9c6ba61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336785efd4228d3ed044bf8ede10c43de9c6ba61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336785efd4228d3ed044bf8ede10c43de9c6ba61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336785efd4228d3ed044bf8ede10c43de9c6ba61/comments", "author": null, "committer": null, "parents": [{"sha": "ba28599caf0c45ea4552a3228c15b1d99e572007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba28599caf0c45ea4552a3228c15b1d99e572007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba28599caf0c45ea4552a3228c15b1d99e572007"}], "stats": {"total": 268, "additions": 157, "deletions": 111}, "files": [{"sha": "144d28545b57c369544ccd8ea893fc3b6ee8aa27", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -1,4 +1,4 @@\n-f551ab95f46c3d7bb7c032711e10b03bfa995ee2\n+db5240278b3b62a919dd88f857e718a66be50346\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "fde240380da88bf31822e168f4e44315917065a9", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -936,21 +936,41 @@ Export::write_unsigned(unsigned value)\n   this->write_c_string(buf);\n }\n \n-// Export a type.\n+// Return the index of a type.\n \n-void\n-Export::write_type(const Type* type)\n+int\n+Export::type_index(const Type* type)\n {\n   type = type->forwarded();\n   Type_refs::const_iterator p = type_refs.find(type);\n   go_assert(p != type_refs.end());\n   int index = p->second;\n   go_assert(index != 0);\n+  return index;\n+}\n+\n+// Export a type.\n+\n+void\n+Export::write_type(const Type* type)\n+{\n+  int index = this->type_index(type);\n   char buf[30];\n   snprintf(buf, sizeof buf, \"<type %d>\", index);\n   this->write_c_string(buf);\n }\n \n+// Export a type to a function body.\n+\n+void\n+Export::write_type_to(const Type* type, Export_function_body* efb)\n+{\n+  int index = this->type_index(type);\n+  char buf[30];\n+  snprintf(buf, sizeof buf, \"<type %d>\", index);\n+  efb->write_c_string(buf);\n+}\n+\n // Export escape note.\n \n void"}, {"sha": "3cbf8e16e8cee18a33573649ff2f7dac7b77aff5", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -12,6 +12,7 @@\n class Go_sha1_helper;\n class Gogo;\n class Named_object;\n+class Export_function_body;\n class Import_init;\n class Named_object;\n class Bindings;\n@@ -183,6 +184,10 @@ class Export : public String_dump\n   void\n   write_type(const Type*);\n \n+  // Write a type to an exported function body.\n+  void\n+  write_type_to(const Type*, Export_function_body*);\n+\n   // Write the escape note to the export stream.  If NOTE is NULL, write\n   // nothing.\n   void\n@@ -241,6 +246,10 @@ class Export : public String_dump\n   void\n   register_builtin_type(Gogo*, const char* name, Builtin_code);\n \n+  // Return the index of a type in the export data.\n+  int\n+  type_index(const Type*);\n+\n   // The stream to which we are writing data.\n   Stream* stream_;\n   // Index number of next type.\n@@ -290,11 +299,11 @@ class Stream_to_string : public Export::Stream\n // to Statements and Expressions.  It builds up the export data for\n // the function.\n \n-class Export_function_body\n+class Export_function_body : public String_dump\n {\n  public:\n-  Export_function_body(int indent)\n-    : indent_(indent)\n+  Export_function_body(Export* exp, int indent)\n+    : exp_(exp), indent_(indent)\n   { }\n \n   // Write a character to the body.\n@@ -312,6 +321,11 @@ class Export_function_body\n   write_string(const std::string& str)\n   { this->body_.append(str); }\n \n+  // Write a type reference to the body.\n+  void\n+  write_type(const Type* type)\n+  { this->exp_->write_type_to(type, this); }\n+\n   // Append as many spaces as the current indentation level.\n   void\n   indent()\n@@ -336,6 +350,8 @@ class Export_function_body\n   { return this->body_; }\n \n  private:\n+  // The overall export data.\n+  Export* exp_;\n   // The body we are building.\n   std::string body_;\n   // Current indentation level: the number of spaces before each statement."}, {"sha": "0e2d4fb7b007a900d35561d800f301cb1c4ba6f1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 83, "deletions": 83, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -82,7 +82,7 @@ Expression::do_discarding_value()\n // only be used by expressions which may be constant.\n \n void\n-Expression::do_export(Export*) const\n+Expression::do_export(Export_function_body*) const\n {\n   go_unreachable();\n }\n@@ -1609,8 +1609,8 @@ class Boolean_expression : public Expression\n   { return context->backend()->boolean_constant_expression(this->val_); }\n \n   void\n-  do_export(Export* exp) const\n-  { exp->write_c_string(this->val_ ? \"true\" : \"false\"); }\n+  do_export(Export_function_body* efb) const\n+  { efb->write_c_string(this->val_ ? \"true\" : \"false\"); }\n \n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n@@ -1760,9 +1760,9 @@ String_expression::export_string(String_dump* exp,\n // Export a string expression.\n \n void\n-String_expression::do_export(Export* exp) const\n+String_expression::do_export(Export_function_body* efb) const\n {\n-  String_expression::export_string(exp, this);\n+  String_expression::export_string(efb, this);\n }\n \n // Import a string expression.\n@@ -1996,7 +1996,7 @@ class Integer_expression : public Expression\n   }\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2138,13 +2138,13 @@ Integer_expression::export_integer(String_dump* exp, const mpz_t val)\n // Export an integer in a constant expression.\n \n void\n-Integer_expression::do_export(Export* exp) const\n+Integer_expression::do_export(Export_function_body* efb) const\n {\n-  Integer_expression::export_integer(exp, this->val_);\n+  Integer_expression::export_integer(efb, this->val_);\n   if (this->is_character_constant_)\n-    exp->write_c_string(\"'\");\n+    efb->write_c_string(\"'\");\n   // A trailing space lets us reliably identify the end of the number.\n-  exp->write_c_string(\" \");\n+  efb->write_c_string(\" \");\n }\n \n // Import an integer, floating point, or complex value.  This handles\n@@ -2393,7 +2393,7 @@ class Float_expression : public Expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2505,11 +2505,11 @@ Float_expression::export_float(String_dump *exp, const mpfr_t val)\n // Export a floating point number in a constant expression.\n \n void\n-Float_expression::do_export(Export* exp) const\n+Float_expression::do_export(Export_function_body* efb) const\n {\n-  Float_expression::export_float(exp, this->val_);\n+  Float_expression::export_float(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n-  exp->write_c_string(\" \");\n+  efb->write_c_string(\" \");\n }\n \n // Dump a floating point number to the dump file.\n@@ -2588,7 +2588,7 @@ class Complex_expression : public Expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2695,11 +2695,11 @@ Complex_expression::export_complex(String_dump* exp, const mpc_t val)\n // Export a complex number in a constant expression.\n \n void\n-Complex_expression::do_export(Export* exp) const\n+Complex_expression::do_export(Export_function_body* efb) const\n {\n-  Complex_expression::export_complex(exp, this->val_);\n+  Complex_expression::export_complex(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n-  exp->write_c_string(\" \");\n+  efb->write_c_string(\" \");\n }\n \n // Dump a complex expression to the dump file.\n@@ -2804,8 +2804,8 @@ class Const_expression : public Expression\n   // expression, we export the value.  We ignore the fact that it has\n   // a name.\n   void\n-  do_export(Export* exp) const\n-  { this->constant_->const_value()->expr()->export_expression(exp); }\n+  do_export(Export_function_body* efb) const\n+  { this->constant_->const_value()->expr()->export_expression(efb); }\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -3161,8 +3161,8 @@ class Nil_expression : public Expression\n   { return context->backend()->nil_pointer_expression(); }\n \n   void\n-  do_export(Export* exp) const\n-  { exp->write_c_string(\"nil\"); }\n+  do_export(Export_function_body* efb) const\n+  { efb->write_c_string(\"nil\"); }\n \n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n@@ -3611,13 +3611,13 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n // Output a type conversion in a constant expression.\n \n void\n-Type_conversion_expression::do_export(Export* exp) const\n+Type_conversion_expression::do_export(Export_function_body* efb) const\n {\n-  exp->write_c_string(\"convert(\");\n-  exp->write_type(this->type_);\n-  exp->write_c_string(\", \");\n-  this->expr_->export_expression(exp);\n-  exp->write_c_string(\")\");\n+  efb->write_c_string(\"convert(\");\n+  efb->write_type(this->type_);\n+  efb->write_c_string(\", \");\n+  this->expr_->export_expression(efb);\n+  efb->write_c_string(\")\");\n }\n \n // Import a type conversion or a struct construction.\n@@ -4607,28 +4607,28 @@ Unary_expression::do_get_backend(Translate_context* context)\n // Export a unary expression.\n \n void\n-Unary_expression::do_export(Export* exp) const\n+Unary_expression::do_export(Export_function_body* efb) const\n {\n   switch (this->op_)\n     {\n     case OPERATOR_PLUS:\n-      exp->write_c_string(\"+ \");\n+      efb->write_c_string(\"+ \");\n       break;\n     case OPERATOR_MINUS:\n-      exp->write_c_string(\"- \");\n+      efb->write_c_string(\"- \");\n       break;\n     case OPERATOR_NOT:\n-      exp->write_c_string(\"! \");\n+      efb->write_c_string(\"! \");\n       break;\n     case OPERATOR_XOR:\n-      exp->write_c_string(\"^ \");\n+      efb->write_c_string(\"^ \");\n       break;\n     case OPERATOR_AND:\n     case OPERATOR_MULT:\n     default:\n       go_unreachable();\n     }\n-  this->expr_->export_expression(exp);\n+  this->expr_->export_expression(efb);\n }\n \n // Import a unary expression.\n@@ -6330,74 +6330,74 @@ Binary_expression::do_get_backend(Translate_context* context)\n // Export a binary expression.\n \n void\n-Binary_expression::do_export(Export* exp) const\n+Binary_expression::do_export(Export_function_body* efb) const\n {\n-  exp->write_c_string(\"(\");\n-  this->left_->export_expression(exp);\n+  efb->write_c_string(\"(\");\n+  this->left_->export_expression(efb);\n   switch (this->op_)\n     {\n     case OPERATOR_OROR:\n-      exp->write_c_string(\" || \");\n+      efb->write_c_string(\" || \");\n       break;\n     case OPERATOR_ANDAND:\n-      exp->write_c_string(\" && \");\n+      efb->write_c_string(\" && \");\n       break;\n     case OPERATOR_EQEQ:\n-      exp->write_c_string(\" == \");\n+      efb->write_c_string(\" == \");\n       break;\n     case OPERATOR_NOTEQ:\n-      exp->write_c_string(\" != \");\n+      efb->write_c_string(\" != \");\n       break;\n     case OPERATOR_LT:\n-      exp->write_c_string(\" < \");\n+      efb->write_c_string(\" < \");\n       break;\n     case OPERATOR_LE:\n-      exp->write_c_string(\" <= \");\n+      efb->write_c_string(\" <= \");\n       break;\n     case OPERATOR_GT:\n-      exp->write_c_string(\" > \");\n+      efb->write_c_string(\" > \");\n       break;\n     case OPERATOR_GE:\n-      exp->write_c_string(\" >= \");\n+      efb->write_c_string(\" >= \");\n       break;\n     case OPERATOR_PLUS:\n-      exp->write_c_string(\" + \");\n+      efb->write_c_string(\" + \");\n       break;\n     case OPERATOR_MINUS:\n-      exp->write_c_string(\" - \");\n+      efb->write_c_string(\" - \");\n       break;\n     case OPERATOR_OR:\n-      exp->write_c_string(\" | \");\n+      efb->write_c_string(\" | \");\n       break;\n     case OPERATOR_XOR:\n-      exp->write_c_string(\" ^ \");\n+      efb->write_c_string(\" ^ \");\n       break;\n     case OPERATOR_MULT:\n-      exp->write_c_string(\" * \");\n+      efb->write_c_string(\" * \");\n       break;\n     case OPERATOR_DIV:\n-      exp->write_c_string(\" / \");\n+      efb->write_c_string(\" / \");\n       break;\n     case OPERATOR_MOD:\n-      exp->write_c_string(\" % \");\n+      efb->write_c_string(\" % \");\n       break;\n     case OPERATOR_LSHIFT:\n-      exp->write_c_string(\" << \");\n+      efb->write_c_string(\" << \");\n       break;\n     case OPERATOR_RSHIFT:\n-      exp->write_c_string(\" >> \");\n+      efb->write_c_string(\" >> \");\n       break;\n     case OPERATOR_AND:\n-      exp->write_c_string(\" & \");\n+      efb->write_c_string(\" & \");\n       break;\n     case OPERATOR_BITCLEAR:\n-      exp->write_c_string(\" &^ \");\n+      efb->write_c_string(\" &^ \");\n       break;\n     default:\n       go_unreachable();\n     }\n-  this->right_->export_expression(exp);\n-  exp->write_c_string(\")\");\n+  this->right_->export_expression(efb);\n+  efb->write_c_string(\")\");\n }\n \n // Import a binary expression.\n@@ -9454,7 +9454,7 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n // code can set a constant to the result of a builtin expression.\n \n void\n-Builtin_call_expression::do_export(Export* exp) const\n+Builtin_call_expression::do_export(Export_function_body* efb) const\n {\n   Numeric_constant nc;\n   if (!this->numeric_constant_value(&nc))\n@@ -9467,28 +9467,28 @@ Builtin_call_expression::do_export(Export* exp) const\n     {\n       mpz_t val;\n       nc.get_int(&val);\n-      Integer_expression::export_integer(exp, val);\n+      Integer_expression::export_integer(efb, val);\n       mpz_clear(val);\n     }\n   else if (nc.is_float())\n     {\n       mpfr_t fval;\n       nc.get_float(&fval);\n-      Float_expression::export_float(exp, fval);\n+      Float_expression::export_float(efb, fval);\n       mpfr_clear(fval);\n     }\n   else if (nc.is_complex())\n     {\n       mpc_t cval;\n       nc.get_complex(&cval);\n-      Complex_expression::export_complex(exp, cval);\n+      Complex_expression::export_complex(efb, cval);\n       mpc_clear(cval);\n     }\n   else\n     go_unreachable();\n \n   // A trailing space lets us reliably identify the end of the number.\n-  exp->write_c_string(\" \");\n+  efb->write_c_string(\" \");\n }\n \n // Class Call_expression.\n@@ -12957,19 +12957,19 @@ Struct_construction_expression::do_get_backend(Translate_context* context)\n // Export a struct construction.\n \n void\n-Struct_construction_expression::do_export(Export* exp) const\n+Struct_construction_expression::do_export(Export_function_body* efb) const\n {\n-  exp->write_c_string(\"convert(\");\n-  exp->write_type(this->type_);\n+  efb->write_c_string(\"convert(\");\n+  efb->write_type(this->type_);\n   for (Expression_list::const_iterator pv = this->vals()->begin();\n        pv != this->vals()->end();\n        ++pv)\n     {\n-      exp->write_c_string(\", \");\n+      efb->write_c_string(\", \");\n       if (*pv != NULL)\n-\t(*pv)->export_expression(exp);\n+\t(*pv)->export_expression(efb);\n     }\n-  exp->write_c_string(\")\");\n+  efb->write_c_string(\")\");\n }\n \n // Dump ast representation of a struct construction expression.\n@@ -13190,10 +13190,10 @@ Array_construction_expression::get_constructor(Translate_context* context,\n // Export an array construction.\n \n void\n-Array_construction_expression::do_export(Export* exp) const\n+Array_construction_expression::do_export(Export_function_body* efb) const\n {\n-  exp->write_c_string(\"convert(\");\n-  exp->write_type(this->type_);\n+  efb->write_c_string(\"convert(\");\n+  efb->write_type(this->type_);\n   if (this->vals() != NULL)\n     {\n       std::vector<unsigned long>::const_iterator pi;\n@@ -13203,24 +13203,24 @@ Array_construction_expression::do_export(Export* exp) const\n \t   pv != this->vals()->end();\n \t   ++pv)\n \t{\n-\t  exp->write_c_string(\", \");\n+\t  efb->write_c_string(\", \");\n \n \t  if (this->indexes_ != NULL)\n \t    {\n \t      char buf[100];\n \t      snprintf(buf, sizeof buf, \"%lu\", *pi);\n-\t      exp->write_c_string(buf);\n-\t      exp->write_c_string(\":\");\n+\t      efb->write_c_string(buf);\n+\t      efb->write_c_string(\":\");\n \t    }\n \n \t  if (*pv != NULL)\n-\t    (*pv)->export_expression(exp);\n+\t    (*pv)->export_expression(efb);\n \n \t  if (this->indexes_ != NULL)\n \t    ++pi;\n \t}\n     }\n-  exp->write_c_string(\")\");\n+  efb->write_c_string(\")\");\n }\n \n // Dump ast representation of an array construction expression.\n@@ -13707,18 +13707,18 @@ Map_construction_expression::do_get_backend(Translate_context* context)\n // Export an array construction.\n \n void\n-Map_construction_expression::do_export(Export* exp) const\n+Map_construction_expression::do_export(Export_function_body* efb) const\n {\n-  exp->write_c_string(\"convert(\");\n-  exp->write_type(this->type_);\n+  efb->write_c_string(\"convert(\");\n+  efb->write_type(this->type_);\n   for (Expression_list::const_iterator pv = this->vals_->begin();\n        pv != this->vals_->end();\n        ++pv)\n     {\n-      exp->write_c_string(\", \");\n-      (*pv)->export_expression(exp);\n+      efb->write_c_string(\", \");\n+      (*pv)->export_expression(efb);\n     }\n-  exp->write_c_string(\")\");\n+  efb->write_c_string(\")\");\n }\n \n // Dump ast representation for a map construction expression."}, {"sha": "9c3122aed61717c2a5100f7dc79f80f79fdeac30", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -65,7 +65,7 @@ class Conditional_expression;\n class Compound_expression;\n class Numeric_constant;\n class Named_object;\n-class Export;\n+class Export_function_body;\n class Import;\n class Temporary_statement;\n class Label;\n@@ -1009,12 +1009,10 @@ class Expression\n   backend_numeric_constant_expression(Translate_context*,\n                                       Numeric_constant* val);\n \n-  // Export the expression.  This is only used for constants.  It will\n-  // be used for things like values of named constants and sizes of\n-  // arrays.\n+  // Export the expression.\n   void\n-  export_expression(Export* exp) const\n-  { this->do_export(exp); }\n+  export_expression(Export_function_body* efb) const\n+  { this->do_export(efb); }\n \n   // Import an expression.\n   static Expression*\n@@ -1130,7 +1128,7 @@ class Expression\n \n   // Child class implements export.\n   virtual void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   // For children to call to give an error for an unused value.\n   void\n@@ -1603,7 +1601,7 @@ class String_expression : public Expression\n   export_string(String_dump* exp, const String_expression* str);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -1687,7 +1685,7 @@ class Type_conversion_expression : public Expression\n   do_get_backend(Translate_context* context);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -1878,7 +1876,7 @@ class Unary_expression : public Expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2023,7 +2021,7 @@ class Binary_expression : public Expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2130,7 +2128,7 @@ class String_concat_expression : public Expression\n   { go_unreachable(); }\n \n   void\n-  do_export(Export*) const\n+  do_export(Export_function_body*) const\n   { go_unreachable(); }\n \n   void\n@@ -2456,7 +2454,7 @@ class Builtin_call_expression : public Call_expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   virtual bool\n   do_is_recover_call() const;\n@@ -3551,7 +3549,7 @@ class Struct_construction_expression : public Expression,\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -3606,7 +3604,7 @@ class Array_construction_expression : public Expression,\n   do_check_types(Gogo*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   // The indexes.\n   const std::vector<unsigned long>*\n@@ -3744,7 +3742,7 @@ class Map_construction_expression : public Expression\n   do_get_backend(Translate_context*);\n \n   void\n-  do_export(Export*) const;\n+  do_export(Export_function_body*) const;\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -3859,7 +3857,7 @@ class Heap_expression : public Expression\n   // We only export global objects, and the parser does not generate\n   // this in global scope.\n   void\n-  do_export(Export*) const\n+  do_export(Export_function_body*) const\n   { go_unreachable(); }\n \n   void"}, {"sha": "cc2c65454fc6cbd619609c49a7d3f9ddba123c9e", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -5572,7 +5572,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n       if (fntype->is_method())\n \tindent++;\n \n-      Export_function_body efb(indent);\n+      Export_function_body efb(exp, indent);\n \n       efb.indent();\n       efb.write_c_string(\"// \");\n@@ -7606,7 +7606,11 @@ Named_constant::export_const(Export* exp, const std::string& name) const\n       exp->write_c_string(\" \");\n     }\n   exp->write_c_string(\"= \");\n-  this->expr()->export_expression(exp);\n+\n+  Export_function_body efb(exp, 0);\n+  this->expr()->export_expression(&efb);\n+  exp->write_string(efb.body());\n+\n   exp->write_c_string(\"\\n\");\n }\n "}, {"sha": "d4cf4ed770063edaa90e61fb4c23f0261c820956", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336785efd4228d3ed044bf8ede10c43de9c6ba61/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=336785efd4228d3ed044bf8ede10c43de9c6ba61", "patch": "@@ -6566,7 +6566,11 @@ Struct_type::do_export(Export* exp) const\n \t  exp->write_c_string(\" \");\n \t  Expression* expr =\n             Expression::make_string(p->tag(), Linemap::predeclared_location());\n-\t  expr->export_expression(exp);\n+\n+\t  Export_function_body efb(exp, 0);\n+\t  expr->export_expression(&efb);\n+\t  exp->write_string(efb.body());\n+\n \t  delete expr;\n \t}\n \n@@ -7545,7 +7549,11 @@ Array_type::do_export(Export* exp) const\n {\n   exp->write_c_string(\"[\");\n   if (this->length_ != NULL)\n-    this->length_->export_expression(exp);\n+    {\n+      Export_function_body efb(exp, 0);\n+      this->length_->export_expression(&efb);\n+      exp->write_string(efb.body());\n+    }\n   exp->write_c_string(\"] \");\n   exp->write_type(this->element_type_);\n }"}]}