{"sha": "e7ff0319f3736617c70742d8233d73faad523aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmZjAzMTlmMzczNjYxN2M3MDc0MmQ4MjMzZDczZmFhZDUyM2FhMw==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-04-29T17:42:04Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-04-29T17:42:04Z"}, "message": "re PR middle-end/70626 (bogus results in 'acc parallel loop' reductions)\n\n\tgcc/c-family/\n\tPR middle-end/70626\n\t* c-common.h (c_oacc_split_loop_clauses): Add boolean argument.\n\t* c-omp.c (c_oacc_split_loop_clauses): Use it to duplicate\n\treduction clauses in acc parallel loops.\n\n\tgcc/c/\n\tPR middle-end/70626\n\t* c-parser.c (c_parser_oacc_loop): Don't augment mask with\n\tOACC_LOOP_CLAUSE_MASK.\n\t(c_parser_oacc_kernels_parallel): Update call to\n\tc_oacc_split_loop_clauses.\n\n\tgcc/cp/\n\tPR middle-end/70626\n\t* parser.c (cp_parser_oacc_loop): Don't augment mask with\n\tOACC_LOOP_CLAUSE_MASK.\n\t(cp_parser_oacc_kernels_parallel): Update call to\n\tc_oacc_split_loop_clauses.\n\n\tgcc/fortran/\n\tPR middle-end/70626\n\t* trans-openmp.c (gfc_trans_oacc_combined_directive): Duplicate\n\tthe reduction clause in both parallel and loop directives.\n\n\tgcc/testsuite/\n\tPR middle-end/70626\n\t* c-c++-common/goacc/combined-reduction.c: New test.\n\t* gfortran.dg/goacc/reduction-2.f95: Add check for kernels reductions.\n\n\tlibgomp/\n\tPR middle-end/70626\n\t* testsuite/libgomp.oacc-c++/template-reduction.C: Adjust test.\n\t* testsuite/libgomp.oacc-c-c++-common/combined-reduction.c: New test.\n\t* testsuite/libgomp.oacc-fortran/combined-reduction.f90: New test.\n\nFrom-SVN: r235651", "tree": {"sha": "e916d372dc0f2cd85d00c0e3d0572f145a5da73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e916d372dc0f2cd85d00c0e3d0572f145a5da73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ff0319f3736617c70742d8233d73faad523aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ff0319f3736617c70742d8233d73faad523aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ff0319f3736617c70742d8233d73faad523aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ff0319f3736617c70742d8233d73faad523aa3/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e49aacaf3083a99dc266209ed91183e91b11ffad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49aacaf3083a99dc266209ed91183e91b11ffad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49aacaf3083a99dc266209ed91183e91b11ffad"}], "stats": {"total": 161, "additions": 146, "deletions": 15}, "files": [{"sha": "834950ef422a240c4aa66360875d1e7cba115536", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,10 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* c-common.h (c_oacc_split_loop_clauses): Add boolean argument.\n+\t* c-omp.c (c_oacc_split_loop_clauses): Use it to duplicate\n+\treduction clauses in acc parallel loops.\n+\n 2016-04-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70852"}, {"sha": "99fa3ab29376432ea8681fdbf2c0163381e62c7d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1278,7 +1278,7 @@ extern bool c_omp_check_loop_iv (tree, tree, walk_tree_lh);\n extern bool c_omp_check_loop_iv_exprs (location_t, tree, tree, tree, tree,\n \t\t\t\t       walk_tree_lh);\n extern tree c_finish_oacc_wait (location_t, tree, tree);\n-extern tree c_oacc_split_loop_clauses (tree, tree *);\n+extern tree c_oacc_split_loop_clauses (tree, tree *, bool);\n extern void c_omp_split_clauses (location_t, enum tree_code, omp_clause_mask,\n \t\t\t\t tree, tree *);\n extern tree c_omp_declare_simd_clauses_to_numbers (tree, tree);"}, {"sha": "be401bbb6b411c3dbab87b5c88ceb1ef75416d96", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -861,9 +861,10 @@ c_omp_check_loop_iv_exprs (location_t stmt_loc, tree declv, tree decl,\n    #pragma acc parallel loop  */\n \n tree\n-c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses)\n+c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses,\n+\t\t\t   bool is_parallel)\n {\n-  tree next, loop_clauses;\n+  tree next, loop_clauses, nc;\n \n   loop_clauses = *not_loop_clauses = NULL_TREE;\n   for (; clauses ; clauses = next)\n@@ -882,7 +883,23 @@ c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses)\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_PRIVATE:\n+\t  OMP_CLAUSE_CHAIN (clauses) = loop_clauses;\n+\t  loop_clauses = clauses;\n+\t  break;\n+\n+\t  /* Reductions must be duplicated on both constructs.  */\n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (is_parallel)\n+\t    {\n+\t      nc = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\t\t     OMP_CLAUSE_REDUCTION);\n+\t      OMP_CLAUSE_DECL (nc) = OMP_CLAUSE_DECL (clauses);\n+\t      OMP_CLAUSE_REDUCTION_CODE (nc)\n+\t\t= OMP_CLAUSE_REDUCTION_CODE (clauses);\n+\t      OMP_CLAUSE_CHAIN (nc) = *not_loop_clauses;\n+\t      *not_loop_clauses = nc;\n+\t    }\n+\n \t  OMP_CLAUSE_CHAIN (clauses) = loop_clauses;\n \t  loop_clauses = clauses;\n \t  break;"}, {"sha": "f02fbdb3399e60d8739e8dc0792747e8532414c4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,11 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* c-parser.c (c_parser_oacc_loop): Don't augment mask with\n+\tOACC_LOOP_CLAUSE_MASK.\n+\t(c_parser_oacc_kernels_parallel): Update call to\n+\tc_oacc_split_loop_clauses.\n+\n 2016-04-28  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-array-notation.c (fix_builtin_array_notation_fn): Fix final"}, {"sha": "832b8dda486525debff1056d7ce776afd22144a4", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -13828,14 +13828,16 @@ static tree\n c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t\t    omp_clause_mask mask, tree *cclauses, bool *if_p)\n {\n+  bool is_parallel = ((mask >> PRAGMA_OACC_CLAUSE_REDUCTION) & 1) == 1;\n+\n   strcat (p_name, \" loop\");\n   mask |= OACC_LOOP_CLAUSE_MASK;\n \n   tree clauses = c_parser_oacc_all_clauses (parser, mask, p_name,\n \t\t\t\t\t    cclauses == NULL);\n   if (cclauses)\n     {\n-      clauses = c_oacc_split_loop_clauses (clauses, cclauses);\n+      clauses = c_oacc_split_loop_clauses (clauses, cclauses, is_parallel);\n       if (*cclauses)\n \t*cclauses = c_finish_omp_clauses (*cclauses, false);\n       if (clauses)\n@@ -13930,8 +13932,6 @@ c_parser_oacc_kernels_parallel (location_t loc, c_parser *parser,\n       if (strcmp (p, \"loop\") == 0)\n \t{\n \t  c_parser_consume_token (parser);\n-\t  mask |= OACC_LOOP_CLAUSE_MASK;\n-\n \t  tree block = c_begin_omp_parallel ();\n \t  tree clauses;\n \t  c_parser_oacc_loop (loc, parser, p_name, mask, &clauses, if_p);"}, {"sha": "bb2b7cf5d12dcdeab423d958798cc628c2e179ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,11 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* parser.c (cp_parser_oacc_loop): Don't augment mask with\n+\tOACC_LOOP_CLAUSE_MASK.\n+\t(cp_parser_oacc_kernels_parallel): Update call to\n+\tc_oacc_split_loop_clauses.\n+\n 2016-04-28  Jason Merrill  <jason@redhat.com>\n \n \tImplement C++17 [[nodiscard]] attribute."}, {"sha": "ded0dee6b5fac4133868dc29dd190ad3d121e2ac", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -35408,14 +35408,16 @@ static tree\n cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t\t     omp_clause_mask mask, tree *cclauses, bool *if_p)\n {\n+  bool is_parallel = ((mask >> PRAGMA_OACC_CLAUSE_REDUCTION) & 1) == 1;\n+\n   strcat (p_name, \" loop\");\n   mask |= OACC_LOOP_CLAUSE_MASK;\n \n   tree clauses = cp_parser_oacc_all_clauses (parser, mask, p_name, pragma_tok,\n \t\t\t\t\t     cclauses == NULL);\n   if (cclauses)\n     {\n-      clauses = c_oacc_split_loop_clauses (clauses, cclauses);\n+      clauses = c_oacc_split_loop_clauses (clauses, cclauses, is_parallel);\n       if (*cclauses)\n \t*cclauses = finish_omp_clauses (*cclauses, false);\n       if (clauses)\n@@ -35508,8 +35510,6 @@ cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n       if (strcmp (p, \"loop\") == 0)\n \t{\n \t  cp_lexer_consume_token (parser->lexer);\n-\t  mask |= OACC_LOOP_CLAUSE_MASK;\n-\n \t  tree block = begin_omp_parallel ();\n \t  tree clauses;\n \t  cp_parser_oacc_loop (parser, pragma_tok, p_name, mask, &clauses,"}, {"sha": "6a6b85ea1fcc9e2192d70e9abd55497b17a3cdb6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,9 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* trans-openmp.c (gfc_trans_oacc_combined_directive): Duplicate\n+\tthe reduction clause in both parallel and loop directives.\n+\n 2016-04-18  Michael Matz  <matz@suse.de>\n \n \t* trans-io.c (gfc_build_io_library_fndecls): Use SET_TYPE_ALIGN."}, {"sha": "c2d89eb3effb84b8c2794fb4daa350bda0e9e066", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -3497,7 +3497,8 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n       construct_clauses.independent = false;\n       construct_clauses.tile_list = NULL;\n       construct_clauses.lists[OMP_LIST_PRIVATE] = NULL;\n-      construct_clauses.lists[OMP_LIST_REDUCTION] = NULL;\n+      if (construct_code == OACC_KERNELS)\n+\tconstruct_clauses.lists[OMP_LIST_REDUCTION] = NULL;\n       oacc_clauses = gfc_trans_omp_clauses (&block, &construct_clauses,\n \t\t\t\t\t    code->loc);\n     }"}, {"sha": "addef50175a7810b504205e0e22089e514927292", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,9 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* c-c++-common/goacc/combined-reduction.c: New test.\n+\t* gfortran.dg/goacc/reduction-2.f95: Add check for kernels reductions.\n+\n 2016-04-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr70155-1.c: Check for nonexistence of the"}, {"sha": "ecf23f59d66073b8fe44a06222a93bf92bc8df78", "filename": "gcc/testsuite/c-c++-common/goacc/combined-reduction.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenacc -fdump-tree-gimple\" } */\n+\n+#include <assert.h>\n+\n+int\n+main ()\n+{\n+  int i, v1 = 0, n = 100;\n+\n+#pragma acc parallel loop reduction(+:v1)\n+  for (i = 0; i < n; i++)\n+    v1++;\n+\n+  assert (v1 == n);\n+\n+#pragma acc kernels loop reduction(+:v1)\n+  for (i = 0; i < n; i++)\n+    v1++;\n+\n+  assert (v1 == n);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"omp target oacc_parallel reduction.+:v1. map.tofrom:v1\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"acc loop reduction.+:v1. private.i.\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp target oacc_kernels map.force_tofrom:n .len: 4.. map.force_tofrom:v1 .len: 4..\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"acc loop reduction.+:v1. private.i.\" 1 \"gimple\" } } */"}, {"sha": "4d40998958c9eff0db1a804811c0c030daadd00b", "filename": "gcc/testsuite/gfortran.dg/goacc/reduction-2.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-2.f95?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -15,7 +15,7 @@ subroutine foo ()\n   !$acc end kernels loop\n end subroutine\n \n-! { dg-final { scan-tree-dump-times \"target oacc_parallel firstprivate.a.\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"target oacc_parallel reduction..:a. map.tofrom.a.\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"acc loop private.p. reduction..:a.\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"target oacc_kernels map.force_tofrom:a .len: 4..\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"acc loop private.k. reduction..:a.\" 1 \"gimple\" } }"}, {"sha": "351c23925309b7d244a26f151cb7ca65ad655153", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -1,3 +1,10 @@\n+2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/70626\n+\t* testsuite/libgomp.oacc-c++/template-reduction.C: Adjust test.\n+\t* testsuite/libgomp.oacc-c-c++-common/combined-reduction.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/combined-reduction.f90: New test.\n+\n 2016-04-21  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* plugin/plugin-nvptx.c (map_fini): Make cuMemFreeHost error"}, {"sha": "6c85fba7a92ddbfd4fb2e3c171b4e7fb35da9a2a", "filename": "libgomp/testsuite/libgomp.oacc-c++/template-reduction.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ftemplate-reduction.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ftemplate-reduction.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ftemplate-reduction.C?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -7,7 +7,7 @@ sum (T array[])\n {\n    T s = 0;\n \n-#pragma acc parallel loop num_gangs (10) gang reduction (+:s) copy (s, array[0:n])\n+#pragma acc parallel loop num_gangs (10) gang reduction (+:s) copy (array[0:n])\n   for (int i = 0; i < n; i++)\n     s += array[i];\n \n@@ -25,7 +25,7 @@ sum ()\n   for (int i = 0; i < n; i++)\n     array[i] = i+1;\n \n-#pragma acc parallel loop num_gangs (10) gang reduction (+:s) copy (s)\n+#pragma acc parallel loop num_gangs (10) gang reduction (+:s)\n   for (int i = 0; i < n; i++)\n     s += array[i];\n \n@@ -43,7 +43,7 @@ async_sum (T array[])\n    for (int i = 0; i < n; i++)\n      array[i] = i+1;\n \n-#pragma acc parallel loop num_gangs (10) gang reduction (+:s) present (array[0:n]) copy (s) async wait (1)\n+#pragma acc parallel loop num_gangs (10) gang reduction (+:s) present (array[0:n]) async wait (1)\n   for (int i = 0; i < n; i++)\n     s += array[i];\n \n@@ -59,7 +59,7 @@ async_sum (int c)\n {\n    T s = 0;\n \n-#pragma acc parallel loop num_gangs (10) gang reduction (+:s) copy(s) firstprivate (c) async wait (1)\n+#pragma acc parallel loop num_gangs (10) gang reduction (+:s) firstprivate (c) async wait (1)\n   for (int i = 0; i < n; i++)\n     s += i+c;\n "}, {"sha": "b5ce4ed7b3d46fb951f44d472b7bd6e2050f3abd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/combined-reduction.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombined-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombined-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombined-reduction.c?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -0,0 +1,23 @@\n+/* Test a combined acc parallel loop reduction.  */\n+\n+/* { dg-do run } */\n+\n+#include <assert.h>\n+\n+int\n+main ()\n+{\n+  int i, v1 = 0, v2 = 0, n = 100;\n+\n+#pragma acc parallel loop reduction(+:v1, v2)\n+  for (i = 0; i < n; i++)\n+    {\n+      v1++;\n+      v2++;\n+    }\n+\n+  assert (v1 == n);\n+  assert (v2 == n);\n+\n+  return 0;\n+}"}, {"sha": "d3a61b57f13bd7770f0c376c1bd312ae7c9c2826", "filename": "libgomp/testsuite/libgomp.oacc-fortran/combined-reduction.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombined-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ff0319f3736617c70742d8233d73faad523aa3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombined-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombined-reduction.f90?ref=e7ff0319f3736617c70742d8233d73faad523aa3", "patch": "@@ -0,0 +1,19 @@\n+! Test a combined acc parallel loop reduction.\n+\n+! { dg-do run }\n+\n+program test\n+  implicit none\n+  integer i, n, var\n+\n+  n = 100\n+  var = 0\n+\n+  !$acc parallel loop reduction(+:var)\n+  do i = 1, 100\n+     var = var + 1\n+  end do\n+  !$acc end parallel loop\n+\n+  if (var .ne. n) call abort\n+end program test"}]}