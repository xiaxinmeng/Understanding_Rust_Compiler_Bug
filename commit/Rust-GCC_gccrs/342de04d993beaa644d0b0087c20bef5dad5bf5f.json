{"sha": "342de04d993beaa644d0b0087c20bef5dad5bf5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyZGUwNGQ5OTNiZWFhNjQ0ZDBiMDA4N2MyMGJlZjVkYWQ1YmY1Zg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-16T03:29:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-23T01:19:03Z"}, "message": "MASK_AVX256_SPLIT_UNALIGNED_STORE/LOAD should be cleared in opts->x_target_flags when X86_TUNE_AVX256_UNALIGNED_LOAD/STORE_OPTIMAL is enabled by target attribute.\n\ngcc/ChangeLog:\n\n\tPR target/100093\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tClear MASK_AVX256_SPLIT_UNALIGNED_LOAD/STORE in x_target_flags\n\twhen X86_TUNE_AVX256_UNALIGNED_LOAD/STORE_OPTIMAL is enabled\n\tby target attribute.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100093\n\t* gcc.target/i386/pr100093.c: New test.", "tree": {"sha": "00ad638566e57e86459401490f633a5bc7bba902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ad638566e57e86459401490f633a5bc7bba902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342de04d993beaa644d0b0087c20bef5dad5bf5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342de04d993beaa644d0b0087c20bef5dad5bf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342de04d993beaa644d0b0087c20bef5dad5bf5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342de04d993beaa644d0b0087c20bef5dad5bf5f/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3948473e927a7c3197ce1a63628fe427f15f6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3948473e927a7c3197ce1a63628fe427f15f6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3948473e927a7c3197ce1a63628fe427f15f6c6"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "2f3d40ca202c618db63168175bc71620bec6adff", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342de04d993beaa644d0b0087c20bef5dad5bf5f/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342de04d993beaa644d0b0087c20bef5dad5bf5f/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=342de04d993beaa644d0b0087c20bef5dad5bf5f", "patch": "@@ -2618,9 +2618,16 @@ ix86_option_override_internal (bool main_args_p,\n   if (!ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL]\n       && !(opts_set->x_target_flags & MASK_AVX256_SPLIT_UNALIGNED_LOAD))\n     opts->x_target_flags |= MASK_AVX256_SPLIT_UNALIGNED_LOAD;\n+  else if (!main_args_p\n+\t   && ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL])\n+    opts->x_target_flags &= ~MASK_AVX256_SPLIT_UNALIGNED_LOAD;\n+\n   if (!ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL]\n       && !(opts_set->x_target_flags & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n     opts->x_target_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n+  else if (!main_args_p\n+\t   && ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL])\n+    opts->x_target_flags &= ~MASK_AVX256_SPLIT_UNALIGNED_STORE;\n \n   /* Enable 128-bit AVX instruction generation\n      for the auto-vectorizer.  */"}, {"sha": "f32a4bc8f2e88f872044282f788288d7b33a52fc", "filename": "gcc/testsuite/gcc.target/i386/pr100093.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342de04d993beaa644d0b0087c20bef5dad5bf5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100093.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342de04d993beaa644d0b0087c20bef5dad5bf5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100093.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100093.c?ref=342de04d993beaa644d0b0087c20bef5dad5bf5f", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/100093  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=znver1\" } */\n+/* { dg-final { scan-assembler-not \"vextractf128\" } } */\n+\n+__attribute__((target(\"tune=skylake-avx512\")))\n+void fill_avx2(double *__restrict__ data, int n, double value)\n+{\n+    for (int i = 0; i < n * 16; i++) {\n+        data[i] = value;\n+    }\n+}"}]}