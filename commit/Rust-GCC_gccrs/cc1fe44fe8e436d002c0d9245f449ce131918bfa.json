{"sha": "cc1fe44fe8e436d002c0d9245f449ce131918bfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxZmU0NGZlOGU0MzZkMDAyYzBkOTI0NWY0NDljZTEzMTkxOGJmYQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-01-05T21:13:42Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-01-05T21:13:42Z"}, "message": "function.c (reorder_blocks): Make sure the flags are all reset before using them to mark blocks...\n\n* function.c (reorder_blocks): Make sure the flags are all reset\nbefore using them to mark blocks, else a second invocation will\ncorrupt the block chain.\n(reorder_blocks_0): New, resets the flags.\n\nFrom-SVN: r38724", "tree": {"sha": "266940bd84b12c6fb47ca4f802ecf3412a8b8fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266940bd84b12c6fb47ca4f802ecf3412a8b8fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1fe44fe8e436d002c0d9245f449ce131918bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1fe44fe8e436d002c0d9245f449ce131918bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1fe44fe8e436d002c0d9245f449ce131918bfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1fe44fe8e436d002c0d9245f449ce131918bfa/comments", "author": null, "committer": null, "parents": [{"sha": "8b03b9843b8129d41b806a5e26f0da6142cc7468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b03b9843b8129d41b806a5e26f0da6142cc7468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b03b9843b8129d41b806a5e26f0da6142cc7468"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "649c3914d9ccc98e420a6738e78aaf8eb4cfc731", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1fe44fe8e436d002c0d9245f449ce131918bfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1fe44fe8e436d002c0d9245f449ce131918bfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc1fe44fe8e436d002c0d9245f449ce131918bfa", "patch": "@@ -1,3 +1,10 @@\n+2001-01-05  DJ Delorie  <dj@redhat.com>\n+\n+\t* function.c (reorder_blocks): Make sure the flags are all reset\n+\tbefore using them to mark blocks, else a second invocation will\n+\tcorrupt the block chain.\n+\t(reorder_blocks_0): New, resets the flags.\n+\n Fri Jan  5 20:34:06 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* cse.c (find_comparison_args): Stop if the argument is known to"}, {"sha": "385dbc3d931770ca8c80565b46cd3e79649e76dd", "filename": "gcc/function.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1fe44fe8e436d002c0d9245f449ce131918bfa/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1fe44fe8e436d002c0d9245f449ce131918bfa/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=cc1fe44fe8e436d002c0d9245f449ce131918bfa", "patch": "@@ -275,6 +275,7 @@ static void pad_below\t\tPARAMS ((struct args_size *, enum machine_mode,\n static rtx round_trampoline_addr PARAMS ((rtx));\n static rtx adjust_trampoline_addr PARAMS ((rtx));\n static tree *identify_blocks_1\tPARAMS ((rtx, tree *, tree *, tree *));\n+static void reorder_blocks_0\tPARAMS ((rtx));\n static void reorder_blocks_1\tPARAMS ((rtx, tree, varray_type *));\n static tree blocks_nreverse\tPARAMS ((tree));\n static int all_blocks\t\tPARAMS ((tree, tree *));\n@@ -5789,6 +5790,7 @@ reorder_blocks ()\n   BLOCK_SUBBLOCKS (block) = NULL_TREE;\n   BLOCK_CHAIN (block) = NULL_TREE;\n \n+  reorder_blocks_0 (get_insns ());\n   reorder_blocks_1 (get_insns (), block, &block_stack);\n \n   BLOCK_SUBBLOCKS (block) = blocks_nreverse (BLOCK_SUBBLOCKS (block));\n@@ -5799,6 +5801,35 @@ reorder_blocks ()\n /* Helper function for reorder_blocks.  Process the insn chain beginning\n    at INSNS.  Recurse for CALL_PLACEHOLDER insns.  */\n \n+static void\n+reorder_blocks_0 (insns)\n+     rtx insns;\n+{\n+  rtx insn;\n+\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    {\n+      if (GET_CODE (insn) == NOTE)\n+\t{\n+\t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG)\n+\t    {\n+\t      tree block = NOTE_BLOCK (insn);\n+\t      TREE_ASM_WRITTEN (block) = 0;\n+\t    }\n+\t}\n+      else if (GET_CODE (insn) == CALL_INSN\n+\t       && GET_CODE (PATTERN (insn)) == CALL_PLACEHOLDER)\n+\t{\n+\t  rtx cp = PATTERN (insn);\n+\t  reorder_blocks_0 (XEXP (cp, 0));\n+\t  if (XEXP (cp, 1))\n+\t    reorder_blocks_0 (XEXP (cp, 1));\n+\t  if (XEXP (cp, 2))\n+\t    reorder_blocks_0 (XEXP (cp, 2));\n+\t}\n+    }\n+}\n+\n static void\n reorder_blocks_1 (insns, current_block, p_block_stack)\n      rtx insns;"}]}