{"sha": "31a33125871e198b6a7e48310b919fb9c65c4fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhMzMxMjU4NzFlMTk4YjZhN2U0ODMxMGI5MTlmYjljNjVjNGZjYQ==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2006-10-31T18:13:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:13:06Z"}, "message": "makegpr.adb (Check_Compilation_Needed): Take into account path names with spaces.\n\n2006-10-31  Vincent Celier  <celier@adacore.com>\n\n\t* makegpr.adb (Check_Compilation_Needed): Take into account path names\n\twith spaces.\n\t(Check_Compilation_Needed): When checking a C or C++ source, do not\n\tresolve symbolic links.\n\t(Display_Command): New Boolean parameter Ellipse, defaulted to False.\n\tWhen not in verbose mode and Ellipse is True, display \"...\" for the\n\tfirst argument with Display set to False.\n\t(Build_Global_Archive): Always set Display True for the first object\n\tfile. Call Display_Command with Ellipse set to True.\n\nFrom-SVN: r118323", "tree": {"sha": "1c9d0f1a7571f8253fe414b6dbdde4a16d04439b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9d0f1a7571f8253fe414b6dbdde4a16d04439b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31a33125871e198b6a7e48310b919fb9c65c4fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a33125871e198b6a7e48310b919fb9c65c4fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a33125871e198b6a7e48310b919fb9c65c4fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a33125871e198b6a7e48310b919fb9c65c4fca/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57d9e177cce10214c082971155459b7f0aefd953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d9e177cce10214c082971155459b7f0aefd953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d9e177cce10214c082971155459b7f0aefd953"}], "stats": {"total": 233, "additions": 129, "deletions": 104}, "files": [{"sha": "ea95216cedaba044a9b7b479744555d0c2a947f3", "filename": "gcc/ada/makegpr.adb", "status": "modified", "additions": 129, "deletions": 104, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a33125871e198b6a7e48310b919fb9c65c4fca/gcc%2Fada%2Fmakegpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a33125871e198b6a7e48310b919fb9c65c4fca/gcc%2Fada%2Fmakegpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakegpr.adb?ref=31a33125871e198b6a7e48310b919fb9c65c4fca", "patch": "@@ -234,7 +234,7 @@ package body Makegpr is\n      (Table_Component_Type => String_Access,\n       Table_Index_Type     => Integer,\n       Table_Low_Bound      => 1,\n-      Table_Initial        => 2,\n+      Table_Initial        => 10,\n       Table_Increment      => 100,\n       Table_Name           => \"Makegpr.X_Switches\");\n    --  Table to store the -X switches to be passed to gnatmake\n@@ -262,7 +262,7 @@ package body Makegpr is\n       Table_Index_Type     => Integer,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 200,\n-      Table_Increment      => 50,\n+      Table_Increment      => 100,\n       Table_Name           => \"Makegpr.Cache_Args\");\n    --  A table to cache arguments, to avoid multiple allocation of the same\n    --  strings. It is not possible to use a hash table, because String is\n@@ -346,7 +346,7 @@ package body Makegpr is\n       Table_Index_Type     => Integer,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 200,\n-      Table_Increment      => 50,\n+      Table_Increment      => 100,\n       Table_Name           => \"Makegpr.Lib_Path\");\n    --  A table to compute the path to put in the path option switch, when it\n    --  is supported.\n@@ -440,27 +440,29 @@ package body Makegpr is\n    --  Create the archive depenency file for the main project\n \n    procedure Display_Command\n-     (Name  : String;\n-      Path  : String_Access;\n-      CPATH : String_Access := null);\n-   --  Display the command for a spawned process, if in Verbose_Mode or\n-   --  not in Quiet_Output.\n+     (Name    : String;\n+      Path    : String_Access;\n+      CPATH   : String_Access := null;\n+      Ellipse : Boolean := False);\n+   --  Display the command for a spawned process, if in Verbose_Mode or not in\n+   --  Quiet_Output. In non verbose mode, when Ellipse is True, display \"...\"\n+   --  in place of the first argument that has Display set to False.\n \n    procedure Get_Compiler (For_Language : First_Language_Indexes);\n    --  Find the compiler name and path name for a specified programming\n-   --  language, if not already done. Results are in the corresponding\n-   --  elements of arrays Compiler_Names and Compiler_Paths. Name of compiler\n-   --  is found in package IDE of the main project, or defaulted.\n-   --  Fail if compiler cannot be found on the path. For the Ada language,\n-   --  gnatmake, rather than the Ada compiler is returned.\n+   --  language, if not already done. Results are in the corresponding elements\n+   --  of arrays Compiler_Names and Compiler_Paths. Name of compiler is found\n+   --  in package IDE of the main project, or defaulted. Fail if compiler\n+   --  cannot be found on the path. For the Ada language, gnatmake, rather than\n+   --  the Ada compiler is returned.\n \n    procedure Get_Imported_Directories\n      (Project : Project_Id;\n       Data    : in out Project_Data);\n-   --  Find the necessary switches -I to be used when compiling sources\n-   --  of languages other than Ada, in a specified project file. Cache the\n-   --  result in component Imported_Directories_Switches of the project data.\n-   --  For gcc/g++ compilers, get the value of the C*_INCLUDE_PATH, instead.\n+   --  Find the necessary switches -I to be used when compiling sources of\n+   --  languages other than Ada, in a specified project file. Cache the result\n+   --  in component Imported_Directories_Switches of the project data. For\n+   --  gcc/g++ compilers, get the value of the C*_INCLUDE_PATH, instead.\n \n    procedure Initialize;\n    --  Do the necessary package initialization and process the command line\n@@ -476,9 +478,9 @@ package body Makegpr is\n    --  Link executables\n \n    procedure Report_Error (S1 : String; S2 : String := \"\"; S3 : String := \"\");\n-   --  Report an error. If Keep_Going is False, just call Osint.Fail.\n-   --  If Keep_Going is True, display the error and increase the total number\n-   --  of errors.\n+   --  Report an error. If Keep_Going is False, just call Osint.Fail. If\n+   --  Keep_Going is True, display the error and increase the total number of\n+   --  errors.\n \n    procedure Report_Total_Errors (Kind : String);\n    --  If Total_Number_Of_Errors is not zero, report it, and fail\n@@ -498,9 +500,9 @@ package body Makegpr is\n \n    procedure Add_Archives (For_Gnatmake : Boolean) is\n       Last_Arg : constant Natural := Last_Argument;\n-      --  The position of the last argument before adding the archives.\n-      --  Used to reverse the order of the arguments added when processing\n-      --  the archives.\n+      --  The position of the last argument before adding the archives. Used to\n+      --  reverse the order of the arguments added when processing the\n+      --  archives.\n \n       procedure Recursive_Add_Archives (Project : Project_Id);\n       --  Recursive procedure to add the archive of a project file, if any,\n@@ -530,9 +532,9 @@ package body Makegpr is\n          begin\n             if Data.Library then\n \n-               --  If it is a library project file, nothing to do if\n-               --  gnatmake will be invoked, because gnatmake will take\n-               --  care of it, even if the library is not an Ada library.\n+               --  If it is a library project file, nothing to do if gnatmake\n+               --  will be invoked, because gnatmake will take care of it, even\n+               --  if the library is not an Ada library.\n \n                if not For_Gnatmake then\n                   if Data.Library_Kind = Static then\n@@ -557,18 +559,17 @@ package body Makegpr is\n                        (\"-L\" & Name_Buffer (1 .. Name_Len),\n                         Verbose_Mode);\n \n-                     --  If there is a run path option, prepend this\n-                     --  directory to the library path. It is probable\n-                     --  that the order of the directories in the path\n-                     --  option is not important, but just in case\n-                     --  put the directories in the same order as the\n-                     --  libraries.\n+                     --  If there is a run path option, prepend this directory\n+                     --  to the library path. It is probable that the order of\n+                     --  the directories in the path option is not important,\n+                     --  but just in case put the directories in the same order\n+                     --  as the libraries.\n \n                      if Path_Option /= null then\n \n-                        --  If it is not the first directory, make room\n-                        --  at the beginning of the table, including\n-                        --  for a path separator.\n+                        --  If it is not the first directory, make room at the\n+                        --  beginning of the table, including for a path\n+                        --  separator.\n \n                         if Lib_Path.Last > 0 then\n                            Increment := Name_Len + 1;\n@@ -599,8 +600,8 @@ package body Makegpr is\n                   end if;\n                end if;\n \n-            --  For a non-library project, the only archive needed\n-            --  is the one for the main project, if there is one.\n+            --  For a non-library project, the only archive needed is the one\n+            --  for the main project, if there is one.\n \n             elsif Project = Main_Project and then Global_Archive_Exists then\n                Add_Argument\n@@ -689,11 +690,13 @@ package body Makegpr is\n       --  And reverse the order\n \n       declare\n-         First : Positive := Last_Arg + 1;\n-         Last  : Natural  := Last_Argument;\n+         First : Positive;\n+         Last  : Natural;\n          Temp  : String_Access;\n \n       begin\n+         First := Last_Arg + 1;\n+         Last  := Last_Argument;\n          while First < Last loop\n             Temp := Arguments (First);\n             Arguments (First) := Arguments (Last);\n@@ -761,6 +764,7 @@ package body Makegpr is\n       --  Nothing to do if argument is empty\n \n       if Arg'Length > 0 then\n+\n          --  Check if the argument is already in the Cache_Args table.\n          --  If it is already there, reuse the allocated value.\n \n@@ -1072,7 +1076,7 @@ package body Makegpr is\n             Open (File, Archive_Dep_Name);\n \n             --  If the archive dependency file does not exist, we need to\n-            --  to rebuild the archive and to create its dependency file.\n+            --  rebuild the archive and to create its dependency file.\n \n             if not Is_Valid (File) then\n                Need_To_Rebuild := True;\n@@ -1084,8 +1088,7 @@ package body Makegpr is\n                end if;\n \n             else\n-               --  Put all sources of language other than Ada in\n-               --  Source_Indexes.\n+               --  Put all sources of language other than Ada in Source_Indexes\n \n                declare\n                   Local_Data : Project_Data;\n@@ -1100,7 +1103,6 @@ package body Makegpr is\n \n                      if not Local_Data.Library then\n                         Source_Id := Local_Data.First_Other_Source;\n-\n                         while Source_Id /= No_Other_Source loop\n                            Add_Source_Id (Proj, Source_Id);\n                            Source_Id := Project_Tree.Other_Sources.Table\n@@ -1129,8 +1131,8 @@ package body Makegpr is\n                      if (not Source_Indexes (S).Found)\n                        and then Source.Object_Path = Object_Path\n                      then\n-                        --  We have found the object file: get the source\n-                        --  data, and mark it as found.\n+                        --  We have found the object file: get the source data,\n+                        --  and mark it as found.\n \n                         Source_Id := S_Id;\n                         Source_Indexes (S).Found := True;\n@@ -1152,8 +1154,8 @@ package body Makegpr is\n                      exit;\n                   end if;\n \n-                  --  The second line is the time stamp of the object file.\n-                  --  If there is no next line, then the dependency file is\n+                  --  The second line is the time stamp of the object file. If\n+                  --  there is no next line, then the dependency file is\n                   --  truncated, and the archive need to be rebuilt.\n \n                   if End_Of_File (File) then\n@@ -1251,7 +1253,6 @@ package body Makegpr is\n \n             if not Data.Library then\n                Source_Id := Data.First_Other_Source;\n-\n                while Source_Id /= No_Other_Source loop\n                   Source :=\n                     Project_Tree.Other_Sources.Table (Source_Id);\n@@ -1263,7 +1264,8 @@ package body Makegpr is\n                        (Source.Object_Name, Proj)\n                   then\n                      Add_Argument\n-                       (Get_Name_String (Source.Object_Path), Verbose_Mode);\n+                       (Get_Name_String (Source.Object_Path),\n+                        Verbose_Mode or (First_Object = Last_Argument));\n                   end if;\n \n                   Source_Id := Source.Next;\n@@ -1292,7 +1294,10 @@ package body Makegpr is\n                   Last_Argument := Saved_Last_Argument;\n                end if;\n \n-               Display_Command (Archive_Builder, Archive_Builder_Path);\n+               Display_Command\n+                 (Archive_Builder,\n+                  Archive_Builder_Path,\n+                  Ellipse => True);\n \n                Spawn\n                  (Archive_Builder_Path.all,\n@@ -1424,7 +1429,7 @@ package body Makegpr is\n             Open (File, Archive_Dep_Name);\n \n             --  If the archive dependency file does not exist, we need to\n-            --  to rebuild the archive and to create its dependency file.\n+            --  rebuild the archive and to create its dependency file.\n \n             if not Is_Valid (File) then\n                Need_To_Rebuild := True;\n@@ -1439,12 +1444,12 @@ package body Makegpr is\n                --  Put all sources of language other than Ada in Source_Indexes\n \n                Last_Source := 0;\n-               Source_Id := Data.First_Other_Source;\n \n+               Source_Id := Data.First_Other_Source;\n                while Source_Id /= No_Other_Source loop\n                   Add_Source_Id (Project, Source_Id);\n-                  Source_Id := Project_Tree.Other_Sources.Table\n-                                 (Source_Id).Next;\n+                  Source_Id :=\n+                    Project_Tree.Other_Sources.Table (Source_Id).Next;\n                end loop;\n \n                --  Read the dependency file, line by line\n@@ -1588,24 +1593,23 @@ package body Makegpr is\n \n          Last_Argument := 0;\n \n-         --  If there are sources in Ada, then gnatmake will build the\n-         --  library, so nothing to do.\n+         --  If there are sources in Ada, then gnatmake will build the library,\n+         --  so nothing to do.\n \n          if not Data.Languages (Ada_Language_Index) then\n \n             --  Get all the object files of the project\n \n             Source_Id := Data.First_Other_Source;\n-\n             while Source_Id /= No_Other_Source loop\n                Source := Project_Tree.Other_Sources.Table (Source_Id);\n                Add_Argument\n                  (Get_Name_String (Source.Object_Name), Verbose_Mode);\n                Source_Id := Source.Next;\n             end loop;\n \n-            --  If it is a library, it need to be built it the same way\n-            --  Ada libraries are built.\n+            --  If it is a library, it need to be built it the same way Ada\n+            --  libraries are built.\n \n             if Data.Library_Kind = Static then\n                MLib.Build_Library\n@@ -1643,13 +1647,14 @@ package body Makegpr is\n                begin\n                   if not Library_Options.Default then\n                      declare\n-                        Current : String_List_Id := Library_Options.Values;\n+                        Current : String_List_Id;\n                         Element : String_Element;\n \n                      begin\n+                        Current := Library_Options.Values;\n                         while Current /= Nil_String loop\n-                           Element := Project_Tree.String_Elements.\n-                                        Table (Current);\n+                           Element :=\n+                             Project_Tree.String_Elements.Table (Current);\n                            Get_Name_String (Element.Value);\n \n                            if Name_Len /= 0 then\n@@ -1928,8 +1933,8 @@ package body Makegpr is\n \n          Line_Loop : loop\n             declare\n-               Line : constant String  := Name_Buffer (1 .. Name_Len);\n-               Last : constant Natural := Name_Len;\n+               Line : String  := Name_Buffer (1 .. Name_Len);\n+               Last : Natural := Name_Len;\n \n             begin\n                Name_Loop : loop\n@@ -1963,8 +1968,24 @@ package body Makegpr is\n                   --  Look for the end of the source path name\n \n                   Finish := Start;\n-                  while Finish < Last and then Line (Finish + 1) /= ' ' loop\n-                     Finish := Finish + 1;\n+                  while Finish < Last loop\n+                     if Line (Finish) = '\\' then\n+\n+                        --  When we are getting a '\\' that is not the last\n+                        --  character of the line, the next character is part\n+                        --  of the path name, even if it is a space.\n+\n+                        Line (Finish .. Last - 1) := Line (Finish + 1 .. Last);\n+                        Last := Last - 1;\n+\n+                     else\n+                        --  A space that is not preceded by '\\' indicates the\n+                        --  end of the path name.\n+\n+                        exit when Line (Finish + 1) = ' ';\n+\n+                        Finish := Finish + 1;\n+                     end if;\n                   end loop;\n \n                   --  Check this source\n@@ -1973,6 +1994,7 @@ package body Makegpr is\n                      Src_Name : constant String :=\n                                   Normalize_Pathname\n                                     (Name           => Line (Start .. Finish),\n+                                     Resolve_Links  => False,\n                                      Case_Sensitive => False);\n                      Src_TS   : Time_Stamp_Type;\n \n@@ -2049,8 +2071,7 @@ package body Makegpr is\n          return;\n       end if;\n \n-      --  If we are here, then everything is OK, and we don't need\n-      --  to recompile.\n+      --  If we are here, then everything is OK, no need to recompile\n \n       if Verbose_Mode then\n          Write_Line (\"      -> up to date\");\n@@ -2090,7 +2111,7 @@ package body Makegpr is\n       Local_Errors : in out Boolean)\n    is\n       Source  : Other_Source :=\n-        Project_Tree.Other_Sources.Table (Source_Id);\n+                  Project_Tree.Other_Sources.Table (Source_Id);\n       Success : Boolean;\n       CPATH   : String_Access := null;\n \n@@ -2229,8 +2250,8 @@ package body Makegpr is\n \n       Add_Argument (Dash_c, True);\n \n-      --  Add the compiling switches for this source found in\n-      --  package Compiler of the project file, if they exist.\n+      --  Add the compiling switches for this source found in package Compiler\n+      --  of the project file, if they exist.\n \n       Add_Switches\n         (Data, Compiler, Source.Language, Source.File_Name);\n@@ -2240,9 +2261,8 @@ package body Makegpr is\n       Add_Argument (Get_Name_String (Source.Path_Name), True);\n \n       --  If non static library project, compile with the PIC option if there\n-      --  is one (when there is no PIC option, function MLib.Tgt.PIC_Option\n-      --  returns an empty string, and Add_Argument with an empty string has\n-      --  no effect).\n+      --  is one (when there is no PIC option, MLib.Tgt.PIC_Option returns an\n+      --  empty string, and Add_Argument with an empty string has no effect).\n \n       if Data.Library and then Data.Library_Kind /= Static then\n          Add_Argument (PIC_Option, True);\n@@ -2253,25 +2273,24 @@ package body Makegpr is\n       Add_Argument (Dash_o, True);\n       Add_Argument (Get_Name_String (Source.Object_Name), True);\n \n-      --  When compiler is GCC, use the magic switch that creates\n-      --  the dependency file in the correct format.\n+      --  When compiler is GCC, use the magic switch that creates the\n+      --  dependency file in the correct format.\n \n       if Compiler_Is_Gcc (Source.Language) then\n          Add_Argument\n            (\"-Wp,-MD,\" & Get_Name_String (Source.Dep_Name),\n             Verbose_Mode);\n       end if;\n \n-      --  Add the compiling switches for the language specified\n-      --  on the command line, if any.\n+      --  Add the compiling switches for the language specified on the command\n+      --  line, if any.\n \n       for J in 1 .. Comp_Opts.Last (Options (Source.Language)) loop\n          Add_Argument (Options (Source.Language).Table (J), True);\n       end loop;\n \n-      --  Finally, add the imported directory switches for this\n-      --  project file (or, for gcc compilers, set up the CPATH env var\n-      --  if needed).\n+      --  Finally, add the imported directory switches for this project file\n+      --  (or, for gcc compilers, set up the CPATH env var if needed).\n \n       Add_Search_Directories (Data, Source.Language);\n \n@@ -2396,11 +2415,10 @@ package body Makegpr is\n \n                if not Sources_Compiled.Get (Source_Name) then\n                   Sources_Compiled.Set (Source_Name, True);\n-                  Source_Id := Data.First_Other_Source;\n \n+                  Source_Id := Data.First_Other_Source;\n                   while Source_Id /= No_Other_Source loop\n-                     Source :=\n-                       Project_Tree.Other_Sources.Table (Source_Id);\n+                     Source := Project_Tree.Other_Sources.Table (Source_Id);\n                      exit when Source.File_Name = Source_Name;\n                      Source_Id := Source.Next;\n                   end loop;\n@@ -2626,7 +2644,7 @@ package body Makegpr is\n       loop\n          Data := Project_Tree.Projects.Table (Project);\n \n-         if (not Data.Virtual) and then Data.Other_Sources_Present then\n+         if not Data.Virtual and then Data.Other_Sources_Present then\n             Source_Id := Data.First_Other_Source;\n             while Source_Id /= No_Other_Source loop\n                Source := Project_Tree.Other_Sources.Table (Source_Id);\n@@ -2662,12 +2680,10 @@ package body Makegpr is\n \n             Change_Dir (Get_Name_String (Data.Object_Directory));\n \n-            Source_Id := Data.First_Other_Source;\n-\n             --  Process each source one by one\n \n+            Source_Id := Data.First_Other_Source;\n             while Source_Id /= No_Other_Source loop\n-\n                Source := Project_Tree.Other_Sources.Table (Source_Id);\n                Current_Source_Number := Current_Source_Number + 1;\n                Need_To_Compile := Force_Compilations;\n@@ -2750,7 +2766,7 @@ package body Makegpr is\n      (Name         : String;\n       First_Source : Other_Source_Id)\n    is\n-      Source_Id : Other_Source_Id := First_Source;\n+      Source_Id : Other_Source_Id;\n       Source    : Other_Source;\n       Dep_File  : Ada.Text_IO.File_Type;\n \n@@ -2760,6 +2776,7 @@ package body Makegpr is\n \n       Create (Dep_File, Append_File, Name);\n \n+      Source_Id := First_Source;\n       while Source_Id /= No_Other_Source loop\n          Source := Project_Tree.Other_Sources.Table (Source_Id);\n          Put_Line (Dep_File, Get_Name_String (Source.Object_Name));\n@@ -2799,7 +2816,6 @@ package body Makegpr is\n          if not Project_Tree.Projects.Table (Project).Library then\n             Source_Id :=\n               Project_Tree.Projects.Table (Project).First_Other_Source;\n-\n             while Source_Id /= No_Other_Source loop\n                Source := Project_Tree.Other_Sources.Table (Source_Id);\n \n@@ -2831,10 +2847,13 @@ package body Makegpr is\n    ---------------------\n \n    procedure Display_Command\n-     (Name  : String;\n-      Path  : String_Access;\n-      CPATH : String_Access := null)\n+     (Name    : String;\n+      Path    : String_Access;\n+      CPATH   : String_Access := null;\n+      Ellipse : Boolean := False)\n    is\n+      Display_Ellipse : Boolean := Ellipse;\n+\n    begin\n       --  Only display the command in Verbose Mode (-v) or when\n       --  not in Quiet Output (no -q).\n@@ -2862,6 +2881,10 @@ package body Makegpr is\n             if Arguments_Displayed (Arg) then\n                Write_Char (' ');\n                Write_Str (Arguments (Arg).all);\n+\n+            elsif Display_Ellipse then\n+               Write_Str (\" ...\");\n+               Display_Ellipse := False;\n             end if;\n          end loop;\n \n@@ -2982,20 +3005,22 @@ package body Makegpr is\n       ---------\n \n       procedure Add (Source_Dirs : String_List_Id) is\n-         Element_Id : String_List_Id := Source_Dirs;\n+         Element_Id : String_List_Id;\n          Element    : String_Element;\n          Add_Arg    : Boolean := True;\n \n       begin\n          --  Add each source directory path name, preceded by \"-I\" to Arguments\n \n+         Element_Id := Source_Dirs;\n          while Element_Id /= Nil_String loop\n             Element := Project_Tree.String_Elements.Table (Element_Id);\n \n             if Element.Value /= No_Name then\n                Get_Name_String (Element.Value);\n \n                if Name_Len > 0 then\n+\n                   --  Remove a trailing directory separator: this may cause\n                   --  problems on Windows.\n \n@@ -3009,8 +3034,8 @@ package body Makegpr is\n                      Arg : constant String :=\n                              \"-I\" & Name_Buffer (1 .. Name_Len);\n                   begin\n-                     --  Check if directory is already in the list.\n-                     --  If it is, no need to put it again.\n+                     --  Check if directory is already in the list. If it is,\n+                     --  no need to put it there again.\n \n                      for Index in 1 .. Last_Argument loop\n                         if Arguments (Index).all = Arg then\n@@ -3067,10 +3092,9 @@ package body Makegpr is\n \n                Recursive_Get_Dirs (Data.Extends);\n \n-               Imported := Data.Imported_Projects;\n-\n                --  Call itself for all imported projects, if any\n \n+               Imported := Data.Imported_Projects;\n                while Imported /= Empty_Project_List loop\n                   Recursive_Get_Dirs\n                     (Project_Tree.Project_Lists.Table\n@@ -3604,13 +3628,13 @@ package body Makegpr is\n \n       if not Mains_Specified then\n          declare\n-            Element_Id : String_List_Id := Data.Mains;\n+            Element_Id : String_List_Id;\n             Element    : String_Element;\n \n          begin\n+            Element_Id := Data.Mains;\n             while Element_Id /= Nil_String loop\n-               Element := Project_Tree.String_Elements.Table\n-                            (Element_Id);\n+               Element := Project_Tree.String_Elements.Table (Element_Id);\n \n                if Element.Value /= No_Name then\n                   Mains.Add_Main (Get_Name_String (Element.Value));\n@@ -3702,10 +3726,10 @@ package body Makegpr is\n                   Add_Str_To_Name_Buffer (Main);\n                   Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n                   Main_Id := Name_Find;\n-                  Source_Id := Data.First_Other_Source;\n \n                   --  Check if it is a source of a language other than Ada\n \n+                  Source_Id := Data.First_Other_Source;\n                   while Source_Id /= No_Other_Source loop\n                      Source :=\n                        Project_Tree.Other_Sources.Table (Source_Id);\n@@ -3838,8 +3862,9 @@ package body Makegpr is\n \n             loop\n                declare\n-                  Main : constant String := Mains.Next_Main;\n+                  Main    : constant String := Mains.Next_Main;\n                   Main_Id : Name_Id;\n+\n                begin\n                   exit when Main'Length = 0;\n \n@@ -3849,10 +3874,10 @@ package body Makegpr is\n                   Add_Str_To_Name_Buffer (Main);\n                   Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n                   Main_Id := Name_Find;\n-                  Source_Id := Data.First_Other_Source;\n \n                   --  Check if it is a source of the main project file\n \n+                  Source_Id := Data.First_Other_Source;\n                   while Source_Id /= No_Other_Source loop\n                      Source :=\n                        Project_Tree.Other_Sources.Table (Source_Id);"}]}