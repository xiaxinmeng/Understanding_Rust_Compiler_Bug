{"sha": "bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzNWZkZDA0YTk3ZGMwOGViN2NjMzkxZGZjZjBiYmUyYTkwNTAxYQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-10-21T11:50:42Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-10-21T11:50:42Z"}, "message": "branch-cost1.c: New test.\n\n        * gcc.target/i386/branch-cost1.c: New test.\n        * gcc.target/i386/branch-cost2.c: New test.\n        * gcc.target/i386/branch-cost3.c: New test.\n        * gcc.target/i386/branch-cost4.c: New test.\n\n        * fold-const.c (simple_operand_p_2): Handle integral\n        casts from boolean-operands.\n\nFrom-SVN: r180295", "tree": {"sha": "9ac919557fdac1b5fb2da7af700ccda6d7a9e938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac919557fdac1b5fb2da7af700ccda6d7a9e938"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/comments", "author": null, "committer": null, "parents": [{"sha": "b867358a067a4a6b8d1a53222f562ab9f6b616c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b867358a067a4a6b8d1a53222f562ab9f6b616c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b867358a067a4a6b8d1a53222f562ab9f6b616c5"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "49c9a3077c22b1fdf82d802987725051cc8f96f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -1,3 +1,8 @@\n+2011-10-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* fold-const.c (simple_operand_p_2): Handle integral\n+\tcasts from boolean-operands.\n+\n 2011-10-21  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (dump_cgraph_node): Dump alias flag."}, {"sha": "a838c3458819836a03585d3a4f23b0d952b2927e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -3695,23 +3695,23 @@ simple_operand_p (const_tree exp)\n \n /* Subroutine for fold_truth_andor: determine if an operand is simple enough\n    to be evaluated unconditionally.\n-   I addition to simple_operand_p, we assume that comparisons and logic-not\n-   operations are simple, if their operands are simple, too.  */\n+   I addition to simple_operand_p, we assume that comparisons, conversions,\n+   and logic-not operations are simple, if their operands are simple, too.  */\n \n static bool\n simple_operand_p_2 (tree exp)\n {\n   enum tree_code code;\n \n-  /* Strip any conversions that don't change the machine mode.  */\n-  STRIP_NOPS (exp);\n-\n-  code = TREE_CODE (exp);\n-\n   if (TREE_SIDE_EFFECTS (exp)\n       || tree_could_trap_p (exp))\n     return false;\n \n+  while (CONVERT_EXPR_P (exp))\n+    exp = TREE_OPERAND (exp, 0);\n+\n+  code = TREE_CODE (exp);\n+\n   if (TREE_CODE_CLASS (code) == tcc_comparison)\n     return (simple_operand_p (TREE_OPERAND (exp, 0))\n \t    && simple_operand_p (TREE_OPERAND (exp, 1)));"}, {"sha": "c5e52a3715e5e6813916a914d03ba72841b8b1bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -1,3 +1,10 @@\n+2011-10-21  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.target/i386/branch-cost1.c: New test.\n+\t* gcc.target/i386/branch-cost2.c: New test.\n+\t* gcc.target/i386/branch-cost3.c: New test.\n+\t* gcc.target/i386/branch-cost4.c: New test.\n+\n 2011-10-20  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc.dg/vect/vect-120.c: Add vect_floatint_cvt requirement."}, {"sha": "ed873fa71369750c36a783df1635f87ca8d8e2ce", "filename": "gcc/testsuite/gcc.target/i386/branch-cost1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost1.c?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple -mbranch-cost=0\" } */\n+\n+extern int doo (void);\n+\n+int\n+foo (int a, int b)\n+{\n+  if (a && b)\n+   return doo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \" & \" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "4d754d57b964dd3ca384ef00ac816bec0e3d1f9e", "filename": "gcc/testsuite/gcc.target/i386/branch-cost2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost2.c?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple -mbranch-cost=2\" } */\n+\n+extern int doo (void);\n+\n+int\n+foo (int a, int b)\n+{\n+  if (a && b)\n+   return doo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \" & \" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "3b69f503fcc434dedaf8576ea9cbc06467993547", "filename": "gcc/testsuite/gcc.target/i386/branch-cost3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost3.c?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple -mbranch-cost=2\" } */\n+\n+extern int doo (void);\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  if (a && b)\n+   return doo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \" & \" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "5904b0da2b277cdb2c6c8fd12bfc1f7e47db622e", "filename": "gcc/testsuite/gcc.target/i386/branch-cost4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbranch-cost4.c?ref=bb35fdd04a97dc08eb7cc391dfcf0bbe2a90501a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple -mbranch-cost=0\" } */\n+\n+extern int doo (void);\n+\n+int\n+foo (_Bool a, _Bool b)\n+{\n+  if (a && b)\n+   return doo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \" & \" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}