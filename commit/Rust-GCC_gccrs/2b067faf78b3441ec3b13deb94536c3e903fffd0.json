{"sha": "2b067faf78b3441ec3b13deb94536c3e903fffd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwNjdmYWY3OGIzNDQxZWMzYjEzZGViOTQ1MzZjM2U5MDNmZmZkMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-19T04:42:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-19T04:42:55Z"}, "message": "(volatile_insn_p): New function.\n\nFrom-SVN: r5803", "tree": {"sha": "cd9a9a35fd671ec307b152f7f3ffe2f48f754058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9a9a35fd671ec307b152f7f3ffe2f48f754058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b067faf78b3441ec3b13deb94536c3e903fffd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b067faf78b3441ec3b13deb94536c3e903fffd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b067faf78b3441ec3b13deb94536c3e903fffd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b067faf78b3441ec3b13deb94536c3e903fffd0/comments", "author": null, "committer": null, "parents": [{"sha": "4b2cb4a29542e58e001ac110a9969925ece7065a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2cb4a29542e58e001ac110a9969925ece7065a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2cb4a29542e58e001ac110a9969925ece7065a"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "48aa6f9d6887856e9b1b5d4a2cd41a3ae21ec23f", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b067faf78b3441ec3b13deb94536c3e903fffd0/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b067faf78b3441ec3b13deb94536c3e903fffd0/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2b067faf78b3441ec3b13deb94536c3e903fffd0", "patch": "@@ -1259,6 +1259,71 @@ remove_note (insn, note)\n   abort ();\n }\n \f\n+/* Nonzero if X contains any volatile instructions.  These are instructions\n+   which may cause unpredictable machine state instructions, and thus no\n+   instructions should be moved or combined across them.  This includes\n+   only volatile asms and UNSPEC_VOLATILE instructions.  */\n+\n+int\n+volatile_insn_p (x)\n+     rtx x;\n+{\n+  register RTX_CODE code;\n+\n+  code = GET_CODE (x);\n+  switch (code)\n+    {\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+    case CONST_INT:\n+    case CONST:\n+    case CONST_DOUBLE:\n+    case CC0:\n+    case PC:\n+    case REG:\n+    case SCRATCH:\n+    case CLOBBER:\n+    case ASM_INPUT:\n+    case ADDR_VEC:\n+    case ADDR_DIFF_VEC:\n+    case CALL:\n+    case MEM:\n+      return 0;\n+\n+    case UNSPEC_VOLATILE:\n+ /* case TRAP_IF: This isn't clear yet.  */\n+      return 1;\n+\n+    case ASM_OPERANDS:\n+      if (MEM_VOLATILE_P (x))\n+\treturn 1;\n+    }\n+\n+  /* Recursively scan the operands of this expression.  */\n+\n+  {\n+    register char *fmt = GET_RTX_FORMAT (code);\n+    register int i;\n+    \n+    for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+      {\n+\tif (fmt[i] == 'e')\n+\t  {\n+\t    if (volatile_refs_p (XEXP (x, i)))\n+\t      return 1;\n+\t  }\n+\tif (fmt[i] == 'E')\n+\t  {\n+\t    register int j;\n+\t    for (j = 0; j < XVECLEN (x, i); j++)\n+\t      if (volatile_refs_p (XVECEXP (x, i, j)))\n+\t\treturn 1;\n+\t  }\n+      }\n+  }\n+  return 0;\n+}\n+\n /* Nonzero if X contains any volatile memory references\n    UNSPEC_VOLATILE operations or volatile ASM_OPERANDS expressions.  */\n "}]}