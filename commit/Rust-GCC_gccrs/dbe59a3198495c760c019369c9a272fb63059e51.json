{"sha": "dbe59a3198495c760c019369c9a272fb63059e51", "node_id": "C_kwDOANBUbNoAKGRiZTU5YTMxOTg0OTVjNzYwYzAxOTM2OWM5YTI3MmZiNjMwNTllNTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-11T10:10:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T10:10:58Z"}, "message": "Merge #1007\n\n1007: Add missing canonicalization of slices and raw pointer types r=philberty a=philberty\n\nThis is part of my patch series for slices. This adds the missing visitors\r\nfor name canonicalization. More information in the patch, once we get\r\nslice support in we need to start taking advantage of `@dkm's` HIR\r\nvisitor refactoring to avoid these issues with missing visitors making\r\nsimple bugs hard to track down.\r\n\r\nFixes #1005\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "a1943727e046a2fd8e9ff73b2b7d83207e72d463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1943727e046a2fd8e9ff73b2b7d83207e72d463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe59a3198495c760c019369c9a272fb63059e51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKyAyCRBK7hj4Ov3rIwAAxm0IAGPuBgK7FAfafSD74WRoRt0z\nI3XROoQ3TysflVfsK8OXoDV0yOywPYmky6w8OdoJS507HeXCrSFHRo3QB3auPBj7\nrkNV6iQbWvl2QsvnxLQ7QQPDprh0tjhDL0UIWMQlik9xAoXsO34kQ1R1HrMliRl/\nTEnuwAEabusqoHcWqS2uuNOchq7eWf3nKVl0OpebOwCaDkyv5L4/nfVxNnT/91xd\n4A6Yr48RaEV+ISZuhnKNTpHrzYvmBi31bUocBr9GzFdtf54tAXZO0fphQlu4ZIm7\n+YMpwMtjdX/kWG9GYoluNx9TdJrugq3BScZ5Hpm+88q4IKVCZb8D4lp5D38qLmM=\n=m8SE\n-----END PGP SIGNATURE-----\n", "payload": "tree a1943727e046a2fd8e9ff73b2b7d83207e72d463\nparent ddd087b0efa734cd166231b5812a201f30a4fd2b\nparent 31413ebacfec0f8d7b8c01b1903b76563b965177\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646993458 +0000\ncommitter GitHub <noreply@github.com> 1646993458 +0000\n\nMerge #1007\n\n1007: Add missing canonicalization of slices and raw pointer types r=philberty a=philberty\n\nThis is part of my patch series for slices. This adds the missing visitors\r\nfor name canonicalization. More information in the patch, once we get\r\nslice support in we need to start taking advantage of `@dkm's` HIR\r\nvisitor refactoring to avoid these issues with missing visitors making\r\nsimple bugs hard to track down.\r\n\r\nFixes #1005\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe59a3198495c760c019369c9a272fb63059e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe59a3198495c760c019369c9a272fb63059e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe59a3198495c760c019369c9a272fb63059e51/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddd087b0efa734cd166231b5812a201f30a4fd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd087b0efa734cd166231b5812a201f30a4fd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd087b0efa734cd166231b5812a201f30a4fd2b"}, {"sha": "31413ebacfec0f8d7b8c01b1903b76563b965177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31413ebacfec0f8d7b8c01b1903b76563b965177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31413ebacfec0f8d7b8c01b1903b76563b965177"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "29b5edf94f64ae3f22e91221743df8d5f5c948f0", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=dbe59a3198495c760c019369c9a272fb63059e51", "patch": "@@ -167,6 +167,45 @@ ResolveTypeToCanonicalPath::visit (AST::ReferenceType &ref)\n   result = result.append (ident_seg);\n }\n \n+void\n+ResolveTypeToCanonicalPath::visit (AST::RawPointerType &ref)\n+{\n+  auto inner_type\n+    = ResolveTypeToCanonicalPath::resolve (*ref.get_type_pointed_to ().get (),\n+\t\t\t\t\t   include_generic_args_flag,\n+\t\t\t\t\t   type_resolve_generic_args_flag);\n+\n+  std::string segment_string (\"*\");\n+  switch (ref.get_pointer_type ())\n+    {\n+    case AST::RawPointerType::PointerType::MUT:\n+      segment_string += \"mut \";\n+      break;\n+\n+    case AST::RawPointerType::PointerType::CONST:\n+      segment_string += \"const \";\n+      break;\n+    }\n+\n+  segment_string += inner_type.get ();\n+\n+  auto ident_seg = CanonicalPath::new_seg (ref.get_node_id (), segment_string);\n+  result = result.append (ident_seg);\n+}\n+\n+void\n+ResolveTypeToCanonicalPath::visit (AST::SliceType &slice)\n+{\n+  auto inner_type\n+    = ResolveTypeToCanonicalPath::resolve (*slice.get_elem_type ().get (),\n+\t\t\t\t\t   include_generic_args_flag,\n+\t\t\t\t\t   type_resolve_generic_args_flag);\n+  std::string segment_string = \"[\" + inner_type.get () + \"]\";\n+  auto ident_seg\n+    = CanonicalPath::new_seg (slice.get_node_id (), segment_string);\n+  result = result.append (ident_seg);\n+}\n+\n void\n ResolveType::visit (AST::ReferenceType &type)\n {"}, {"sha": "4920e2bb6c1b4f9c0453d2e5403c4be82c51f84d", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=dbe59a3198495c760c019369c9a272fb63059e51", "patch": "@@ -122,6 +122,10 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n       }\n   }\n \n+  void visit (AST::SliceType &slice) override;\n+\n+  void visit (AST::RawPointerType &ptr) override;\n+\n   void visit (AST::ReferenceType &ref) override;\n \n   void visit (AST::TypePathSegmentGeneric &seg) override;"}, {"sha": "46c85eea91e8aba738f961e2e844ac67d099aee3", "filename": "gcc/testsuite/rust/compile/issue-1005.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe59a3198495c760c019369c9a272fb63059e51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs?ref=dbe59a3198495c760c019369c9a272fb63059e51", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+impl<T> *const T {\n+    fn test(self) {}\n+}"}]}