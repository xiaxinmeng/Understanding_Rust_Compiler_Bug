{"sha": "252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyYzk5NjdiYTc4NWFlZGYzYjM5ZTJjZDUwMjM3ZDBmMzJmZTNiZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-14T11:10:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-14T11:52:47Z"}, "message": "libstdc++: Define some std::string constructors inline\n\nThere are a lot of very simple constructors for the old string which are\nnot defined inline. I don't see any reason for this and it probably\nmakes them less likely to be optimized away. Move the definitions into\nthe class body.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (basic_string(const Alloc&))\n\t(basic_string(const basic_string&)\n\t(basic_string(const CharT*, size_type, const Alloc&))\n\t(basic_string(const CharT*, const Alloc&))\n\t(basic_string(size_type, CharT, const Alloc&))\n\t(basic_string(initializer_list<CharT>, const Alloc&))\n\t(basic_string(InputIterator, InputIterator, const Alloc&)):\n\tDefine inline in class body.\n\t* include/bits/basic_string.tcc (basic_string(const Alloc&))\n\t(basic_string(const basic_string&)\n\t(basic_string(const CharT*, size_type, const Alloc&))\n\t(basic_string(const CharT*, const Alloc&))\n\t(basic_string(size_type, CharT, const Alloc&))\n\t(basic_string(initializer_list<CharT>, const Alloc&))\n\t(basic_string(InputIterator, InputIterator, const Alloc&)):\n\tMove definitions into class body.", "tree": {"sha": "4339807dd324b6445d5a8195715e3a575784ad06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4339807dd324b6445d5a8195715e3a575784ad06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c9967ba785aedf3b39e2cd50237d0f32fe3bd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b6b013615082f0837ea34c5a65136822523be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b6b013615082f0837ea34c5a65136822523be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b6b013615082f0837ea34c5a65136822523be7"}], "stats": {"total": 90, "additions": 28, "deletions": 62}, "files": [{"sha": "372302ba6a18af57ae69beec67f3b08fe6dd8f29", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c9967ba785aedf3b39e2cd50237d0f32fe3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c9967ba785aedf3b39e2cd50237d0f32fe3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "patch": "@@ -548,7 +548,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  The newly-created string contains the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n-       **/\n+       */\n       basic_string(basic_string&& __str) noexcept\n       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))\n       {\n@@ -696,7 +696,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  The contents of @a str are moved into this string (without copying).\n        *  @a str is a valid, but unspecified string.\n-       **/\n+       */\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2063. Contradictory requirements for string move assignment\n       basic_string&\n@@ -3563,14 +3563,20 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @brief  Construct an empty string using allocator @a a.\n        */\n       explicit\n-      basic_string(const _Alloc& __a);\n+      basic_string(const _Alloc& __a)\n+      : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)\n+      { }\n \n       // NB: per LWG issue 42, semantics different from IS:\n       /**\n        *  @brief  Construct string with copy of value of @a str.\n        *  @param  __str  Source string.\n        */\n-      basic_string(const basic_string& __str);\n+      basic_string(const basic_string& __str)\n+      : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),\n+\t\t\t\t\t    __str.get_allocator()),\n+\t\t    __str.get_allocator())\n+      { }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2583. no way to supply an allocator for basic_string(str, pos)\n@@ -3611,7 +3617,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  has no special meaning.\n        */\n       basic_string(const _CharT* __s, size_type __n,\n-\t\t   const _Alloc& __a = _Alloc());\n+\t\t   const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)\n+      { }\n \n       /**\n        *  @brief  Construct string as copy of a C string.\n@@ -3623,15 +3631,20 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       // 3076. basic_string CTAD ambiguity\n       template<typename = _RequireAllocator<_Alloc>>\n #endif\n-      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());\n+      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :\n+\t\t\t\t __s + npos, __a), __a)\n+      { }\n \n       /**\n        *  @brief  Construct string as multiple characters.\n        *  @param  __n  Number of characters.\n        *  @param  __c  Character to use.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n-      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());\n+      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_S_construct(__n, __c, __a), __a)\n+      { }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -3640,7 +3653,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *\n        *  The newly-created string contains the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n-       **/\n+       */\n       basic_string(basic_string&& __str)\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       noexcept // FIXME C++11: should always be noexcept.\n@@ -3659,7 +3672,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @param  __l  std::initializer_list of characters.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n-      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());\n+      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)\n+      { }\n \n       basic_string(const basic_string& __str, const _Alloc& __a)\n       : _M_dataplus(__str._M_rep()->_M_grab(__a, __str.get_allocator()), __a)\n@@ -3689,7 +3704,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        */\n       template<class _InputIterator>\n         basic_string(_InputIterator __beg, _InputIterator __end,\n-\t\t     const _Alloc& __a = _Alloc());\n+\t\t     const _Alloc& __a = _Alloc())\n+\t: _M_dataplus(_S_construct(__beg, __end, __a), __a)\n+\t{ }\n \n #if __cplusplus >= 201703L\n       /**\n@@ -3758,7 +3775,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *\n        *  The contents of @a str are moved into this string (without copying).\n        *  @a str is a valid, but unspecified string.\n-       **/\n+       */\n       basic_string&\n       operator=(basic_string&& __str)\n       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)"}, {"sha": "6c7896651609634f159409349b203b36dc6a8ab1", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c9967ba785aedf3b39e2cd50237d0f32fe3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c9967ba785aedf3b39e2cd50237d0f32fe3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "patch": "@@ -632,20 +632,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __r->_M_refdata();\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(const basic_string& __str)\n-    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),\n-\t\t\t\t\t  __str.get_allocator()),\n-\t\t  __str.get_allocator())\n-    { }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(const _Alloc& __a)\n-    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)\n-    { }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a)\n@@ -677,43 +663,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t       + __pos, __a), __a)\n     { }\n \n-  // TBD: DPG annotate\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)\n-    { }\n-\n-  // TBD: DPG annotate\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(const _CharT* __s, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :\n-\t\t\t       __s + npos, __a), __a)\n-    { }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(size_type __n, _CharT __c, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__n, __c, __a), __a)\n-    { }\n-\n-  // TBD: DPG annotate\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _InputIterator>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n-    { }\n-\n-#if __cplusplus >= 201103L\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)\n-    { }\n-#endif\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::"}]}