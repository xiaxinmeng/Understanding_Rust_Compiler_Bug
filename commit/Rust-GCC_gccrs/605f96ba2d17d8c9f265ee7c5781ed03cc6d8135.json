{"sha": "605f96ba2d17d8c9f265ee7c5781ed03cc6d8135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1Zjk2YmEyZDE3ZDhjOWYyNjVlZTdjNTc4MWVkMDNjYzZkODEzNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-08T01:09:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-08T01:09:14Z"}, "message": "Add new jit testcase accidentally omitted from r219320\n\nFrom-SVN: r219334", "tree": {"sha": "08ef9268ffbbc311501b65468f2d5f46df0aca04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ef9268ffbbc311501b65468f2d5f46df0aca04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135/comments", "author": null, "committer": null, "parents": [{"sha": "c211cd236cb0b4cda31657cd96668aace2e8e4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c211cd236cb0b4cda31657cd96668aace2e8e4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c211cd236cb0b4cda31657cd96668aace2e8e4ac"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "8d130b21d84a44c7a26acf81fd12c89bc5d5f0f4", "filename": "gcc/testsuite/jit.dg/test-arith-overflow.c", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135/gcc%2Ftestsuite%2Fjit.dg%2Ftest-arith-overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f96ba2d17d8c9f265ee7c5781ed03cc6d8135/gcc%2Ftestsuite%2Fjit.dg%2Ftest-arith-overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-arith-overflow.c?ref=605f96ba2d17d8c9f265ee7c5781ed03cc6d8135", "patch": "@@ -0,0 +1,223 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <limits.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+static void\n+create_overflow_fn (gcc_jit_context *ctxt,\n+\t\t    gcc_jit_type *type,\n+\t\t    const char *funcname,\n+\t\t    const char *builtin_name)\n+{\n+  /* Create the equivalent of this C:\n+\n+       int\n+       test_overflow_T_OP (T x, T y, int *ovf)\n+       {\n+\t T result;\n+\t result = x OP y;\n+\t *ovf = ...; // did overflow happen?\n+\t return result;\n+       }\n+\n+  */\n+  gcc_jit_type *t_bool =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_BOOL);\n+  gcc_jit_type *t_bool_star =\n+    gcc_jit_type_get_pointer (t_bool);\n+\n+  gcc_jit_param *x =\n+    gcc_jit_context_new_param (\n+      ctxt,\n+      NULL,\n+      type, \"x\");\n+  gcc_jit_param *y =\n+    gcc_jit_context_new_param (\n+      ctxt,\n+      NULL,\n+      type, \"y\");\n+  gcc_jit_param *ovf =\n+    gcc_jit_context_new_param (\n+      ctxt,\n+      NULL,\n+      t_bool_star, \"ovf\");\n+  gcc_jit_param *params[3] = {x, y, ovf};\n+\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt,\n+\t\t\t\t  NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  type,\n+\t\t\t\t  funcname,\n+\t\t\t\t  3, params, 0);\n+\n+  gcc_jit_lvalue *result =\n+    gcc_jit_function_new_local (func, NULL, type, \"result\");\n+\n+  gcc_jit_block *b_initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+\n+  /* The builtins are listed in builtins.def as being variadic, but\n+     the have these signatures:\n+       bool __builtin_add_overflow (type1 a, type2 b, type3 *res);\n+       bool __builtin_sub_overflow (type1 a, type2 b, type3 *res);\n+       bool __builtin_mul_overflow (type1 a, type2 b, type3 *res);  */\n+\n+  gcc_jit_function *builtin_fn =\n+    gcc_jit_context_get_builtin_function (ctxt, builtin_name);\n+\n+  /* Construct a call of the form:\n+       (returns bool) __builtin_add_overflow (x, y, &result).  */\n+  gcc_jit_rvalue *args[3] = {gcc_jit_param_as_rvalue (x),\n+\t\t\t     gcc_jit_param_as_rvalue (y),\n+\t\t\t     gcc_jit_lvalue_get_address (result, NULL)};\n+  gcc_jit_rvalue *call =\n+    gcc_jit_context_new_call (ctxt,\n+\t\t\t      NULL,\n+\t\t\t      builtin_fn,\n+\t\t\t      3, args);\n+\n+  /* \"*ovf = BUILTIN_CALL ();\" */\n+  gcc_jit_block_add_assignment (\n+    b_initial, NULL,\n+    gcc_jit_rvalue_dereference (gcc_jit_param_as_rvalue (ovf),\n+\t\t\t\tNULL),\n+    call);\n+\n+  /* \"return result;\" */\n+  gcc_jit_block_end_with_return (\n+    b_initial, NULL,\n+    gcc_jit_lvalue_as_rvalue (result));\n+}\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* int */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  create_overflow_fn (ctxt, int_type,\n+\t\t      \"test_overflow_int_add\",\n+\t\t      \"__builtin_add_overflow\");\n+  create_overflow_fn (ctxt, int_type,\n+\t\t      \"test_overflow_int_sub\",\n+\t\t      \"__builtin_sub_overflow\");\n+  create_overflow_fn (ctxt, int_type,\n+\t\t      \"test_overflow_int_mul\",\n+\t\t      \"__builtin_mul_overflow\");\n+\n+  /* uint */\n+  gcc_jit_type *uint_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_INT);\n+  create_overflow_fn (ctxt, uint_type,\n+\t\t      \"test_overflow_uint_add\",\n+\t\t      \"__builtin_add_overflow\");\n+  create_overflow_fn (ctxt, uint_type,\n+\t\t      \"test_overflow_uint_sub\",\n+\t\t      \"__builtin_sub_overflow\");\n+  create_overflow_fn (ctxt, uint_type,\n+\t\t      \"test_overflow_uint_mul\",\n+\t\t      \"__builtin_mul_overflow\");\n+}\n+\n+void\n+verify_int_overflow_fn (gcc_jit_result *jit_result,\n+\t\t\tconst char *funcname,\n+\t\t\tint x, int y,\n+\t\t\tint expected_result,\n+\t\t\tint expected_ovf)\n+{\n+  CHECK_NON_NULL (jit_result);\n+  typedef int (*overflow_fn_type) (int, int, int *);\n+  overflow_fn_type fn =\n+    (overflow_fn_type)gcc_jit_result_get_code (jit_result, funcname);\n+  CHECK_NON_NULL (fn);\n+\n+  /* Call the function:  */\n+  int actual_ovf = 0;\n+  int actual_result = fn (x, y, &actual_ovf);\n+  note (\"%s (%d, %d) returned: %d with ovf: %d\",\n+\tfuncname, x, y, actual_result, actual_ovf);\n+  CHECK_VALUE (actual_result, expected_result);\n+  CHECK_VALUE (actual_ovf, expected_ovf);\n+}\n+\n+void\n+verify_uint_overflow_fn (gcc_jit_result *jit_result,\n+\t\t\t const char *funcname,\n+\t\t\t unsigned int x, unsigned int y,\n+\t\t\t unsigned int expected_result,\n+\t\t\t int expected_ovf)\n+{\n+  CHECK_NON_NULL (jit_result);\n+  typedef unsigned int (*overflow_fn_type) (unsigned int, unsigned int, int *);\n+  overflow_fn_type fn =\n+    (overflow_fn_type)gcc_jit_result_get_code (jit_result, funcname);\n+  CHECK_NON_NULL (fn);\n+\n+  /* Call the function:  */\n+  int actual_ovf = 0;\n+  unsigned int actual_result = fn (x, y, &actual_ovf);\n+  note (\"%s (%d, %d) returned: %d with ovf: %d\",\n+\tfuncname, x, y, actual_result, actual_ovf);\n+  CHECK_VALUE (actual_result, expected_result);\n+  CHECK_VALUE (actual_ovf, expected_ovf);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  verify_int_overflow_fn (result, \"test_overflow_int_add\",\n+\t\t\t  5, 15,\n+\t\t\t  20, 0);\n+  verify_int_overflow_fn (result, \"test_overflow_int_add\",\n+\t\t\t  INT_MAX, 1,\n+\t\t\t  INT_MIN, 1);\n+  verify_int_overflow_fn (result, \"test_overflow_int_sub\",\n+\t\t\t  5, 15,\n+\t\t\t  -10, 0);\n+  verify_int_overflow_fn (result, \"test_overflow_int_sub\",\n+\t\t\t  INT_MIN, 1,\n+\t\t\t  INT_MAX, 1);\n+  verify_int_overflow_fn (result, \"test_overflow_int_mul\",\n+\t\t\t  5, 15,\n+\t\t\t  75, 0);\n+  verify_int_overflow_fn (result, \"test_overflow_int_mul\",\n+\t\t\t  INT_MAX, 1,\n+\t\t\t  INT_MAX, 0);\n+  verify_int_overflow_fn (result, \"test_overflow_int_mul\",\n+\t\t\t  INT_MAX, 2,\n+\t\t\t  -2, 1);\n+\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_add\",\n+\t\t\t   5, 15,\n+\t\t\t   20, 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_add\",\n+\t\t\t   INT_MAX, 1,\n+\t\t\t   (((unsigned int)INT_MAX) + 1), 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_add\",\n+\t\t\t   UINT_MAX, 1,\n+\t\t\t   0, 1);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_sub\",\n+\t\t\t   5, 15,\n+\t\t\t   (UINT_MAX - 9), 1);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_sub\",\n+\t\t\t   INT_MIN, 1,\n+\t\t\t   ((unsigned int)INT_MIN - 1), 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_mul\",\n+\t\t\t   5, 15,\n+\t\t\t   75, 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_mul\",\n+\t\t\t   INT_MAX, 1,\n+\t\t\t   INT_MAX, 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_mul\",\n+\t\t\t   INT_MAX, 2,\n+\t\t\t   (unsigned int)INT_MAX * 2, 0);\n+  verify_uint_overflow_fn (result, \"test_overflow_uint_mul\",\n+\t\t\t   UINT_MAX, 2,\n+\t\t\t   -2/*(unsigned int)INT_MAX * 2*/, 1);\n+}"}]}