{"sha": "d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNjYjhjM2NkOTI3ODY5M2RiODczNzYxNGJkYzJkZWFhNmI1ZDNjYw==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-21T16:53:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "We need to analyse and store the locals per block for compilation", "tree": {"sha": "d2a2999a6daa188453f7b21649c608d7c5aa60e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2a2999a6daa188453f7b21649c608d7c5aa60e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f641587ed0683d6ff2479f59576f4c95eac2bf61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f641587ed0683d6ff2479f59576f4c95eac2bf61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f641587ed0683d6ff2479f59576f4c95eac2bf61"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "9ad2c4c5a36babb95663ed0cdd456e68726871ea", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "patch": "@@ -804,6 +804,10 @@ class Stmt\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  // HACK: slow way of getting location from base expression through virtual\n+  // methods.\n+  virtual Location get_locus_slow () const { return Location (); }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual Stmt *clone_stmt_impl () const = 0;"}, {"sha": "e8eb21569daf117457870a0edc3a97bbf53f5d5a", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "patch": "@@ -1306,6 +1306,8 @@ class UseDeclaration : public VisItem\n     ::std::vector<FunctionParam> function_params;\n };*/\n \n+class LetStmt;\n+\n // Rust function declaration AST node\n class Function : public VisItem, public InherentImplItem, public TraitImplItem\n {\n@@ -1334,6 +1336,8 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \n   Location locus;\n \n+  ::std::vector<LetStmt *> locals;\n+\n   /*~Function() {\n       delete function_body;\n   }*/"}, {"sha": "addb5f9866d763c56d67f7c71a0cbbef7dc7af9c", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "patch": "@@ -213,6 +213,8 @@ class ExprStmtWithBlock : public ExprStmt\n \n   ::std::string as_string () const;\n \n+  ::std::vector<LetStmt *> locals;\n+\n   ExprStmtWithBlock (::std::unique_ptr<ExprWithBlock> expr, Location locus)\n     : ExprStmt (locus), expr (::std::move (expr))\n   {}"}]}