{"sha": "4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4YThhMGEyMjNmOGU2NWE4MTBiZGI0ZWMzZmU3NDk2YTk2NDY5OQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-05-21T12:53:08Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-05-21T12:53:08Z"}, "message": "defaults.h (IBM_FLOAT_FORMAT): Macro definition removed.\n\n2007-05-21  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* defaults.h (IBM_FLOAT_FORMAT): Macro definition removed.\n\t* doc/tm.texi (IBM_FLOAT_FORMAT): Documentation entry removed.\n\t* real.c (encode_i370_single, decode_i370_single,\n\tencode_i370_double, decode_i370_double): Functions removed.\n\t(i370_single_format, i370_double_format): Initializations removed.\n\t(real_maxval, round_for_format, exact_real_truncate, significand_size):\n\tConsider the log2_b field to always be one.\n\t(ieee_single_format, mips_single_format, coldfire_single_format,\n\tieee_double_format, mips_double_format,\tcoldfire_double_format,\n\tieee_extended_motorola_format, ieee_extended_intel_96_format,\n\tieee_extended_intel_128_format, ieee_extended_intel_96_round_53_format,\n\tibm_extended_format, mips_extended_format, ieee_quad_format,\n\tmips_quad_format, vax_f_format, vax_d_format, vax_g_format,\n\tdecimal_single_format, decimal_double_format, decimal_quad_format,\n\tc4x_single_format, c4x_extended_format, real_internal_format): Remove\n\tinitialization of log2_b.\n\t* real.h (i370_single_format, i370_double_format): Declarations removed.\n\t* c-cppbuiltin.c (builtin_define_float_constants): Consider the log2_b\n\tfield to always be one.\n\nFrom-SVN: r124901", "tree": {"sha": "93f3471f9ba54489407fddb33fb8858923ba89bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93f3471f9ba54489407fddb33fb8858923ba89bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/comments", "author": null, "committer": null, "parents": [{"sha": "740aeb384d7e15ac53e40559852903a160b4541d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740aeb384d7e15ac53e40559852903a160b4541d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740aeb384d7e15ac53e40559852903a160b4541d"}], "stats": {"total": 317, "additions": 38, "deletions": 279}, "files": [{"sha": "32ff87bdb897d4c709213f1b206c7eed343ea23d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -1,3 +1,25 @@\n+2007-05-21  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* defaults.h (IBM_FLOAT_FORMAT): Macro definition removed.\n+\t* doc/tm.texi (IBM_FLOAT_FORMAT): Documentation entry removed.\n+\t* real.c (encode_i370_single, decode_i370_single,\n+\tencode_i370_double, decode_i370_double): Functions removed.\n+\t(i370_single_format, i370_double_format): Initializations removed.\n+\t(real_maxval, round_for_format, exact_real_truncate, significand_size):\n+\tConsider the log2_b field to always be one.\n+\t(ieee_single_format, mips_single_format, coldfire_single_format,\n+\tieee_double_format, mips_double_format,\tcoldfire_double_format,\n+\tieee_extended_motorola_format, ieee_extended_intel_96_format,\n+\tieee_extended_intel_128_format, ieee_extended_intel_96_round_53_format,\n+\tibm_extended_format, mips_extended_format, ieee_quad_format,\n+\tmips_quad_format, vax_f_format, vax_d_format, vax_g_format,\n+\tdecimal_single_format, decimal_double_format, decimal_quad_format,\n+\tc4x_single_format, c4x_extended_format, real_internal_format): Remove\n+\tinitialization of log2_b.\n+\t* real.h (i370_single_format, i370_double_format): Declarations removed.\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Consider the log2_b\n+\tfield to always be one.\n+\n 2007-05-21  Andreas Schwab  <schwab@suse.de>\n \n \t* config/ia64/ia64.c (emit_predicate_relation_info): Fix use of"}, {"sha": "544050a4878e3c294472e2e6b6381bfb9e07c562", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -111,7 +111,7 @@ builtin_define_float_constants (const char *name_prefix,\n   /* The radix of the exponent representation.  */\n   if (type == float_type_node)\n     builtin_define_with_int_value (\"__FLT_RADIX__\", fmt->b);\n-  log10_b = log10_2 * fmt->log2_b;\n+  log10_b = log10_2;\n \n   /* The number of radix digits, p, in the floating-point significand.  */\n   sprintf (name, \"__%s_MANT_DIG__\", name_prefix);\n@@ -208,12 +208,12 @@ builtin_define_float_constants (const char *name_prefix,\n     char *p;\n \n     strcpy (buf, \"0x0.\");\n-    n = fmt->p * fmt->log2_b;\n+    n = fmt->p;\n     for (i = 0, p = buf + 4; i + 3 < n; i += 4)\n       *p++ = 'f';\n     if (i < n)\n       *p++ = \"08ce\"[n - i];\n-    sprintf (p, \"p%d\", fmt->emax * fmt->log2_b);\n+    sprintf (p, \"p%d\", fmt->emax);\n     if (fmt->pnan < fmt->p)\n       {\n \t/* This is an IBM extended double format made up of two IEEE\n@@ -231,7 +231,7 @@ builtin_define_float_constants (const char *name_prefix,\n   /* The minimum normalized positive floating-point number,\n      b**(emin-1).  */\n   sprintf (name, \"__%s_MIN__\", name_prefix);\n-  sprintf (buf, \"0x1p%d\", (fmt->emin - 1) * fmt->log2_b);\n+  sprintf (buf, \"0x1p%d\", fmt->emin - 1);\n   builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n   /* The difference between 1 and the least value greater than 1 that is\n@@ -240,9 +240,9 @@ builtin_define_float_constants (const char *name_prefix,\n   if (fmt->pnan < fmt->p)\n     /* This is an IBM extended double format, so 1.0 + any double is\n        representable precisely.  */\n-      sprintf (buf, \"0x1p%d\", (fmt->emin - fmt->p) * fmt->log2_b);\n+      sprintf (buf, \"0x1p%d\", fmt->emin - fmt->p);\n     else\n-      sprintf (buf, \"0x1p%d\", (1 - fmt->p) * fmt->log2_b);\n+      sprintf (buf, \"0x1p%d\", 1 - fmt->p);\n   builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n   /* For C++ std::numeric_limits<T>::denorm_min.  The minimum denormalized\n@@ -251,7 +251,7 @@ builtin_define_float_constants (const char *name_prefix,\n   sprintf (name, \"__%s_DENORM_MIN__\", name_prefix);\n   if (fmt->has_denorm)\n     {\n-      sprintf (buf, \"0x1p%d\", (fmt->emin - fmt->p) * fmt->log2_b);\n+      sprintf (buf, \"0x1p%d\", fmt->emin - fmt->p);\n       builtin_define_with_hex_fp_value (name, type, decimal_dig,\n \t\t\t\t\tbuf, fp_suffix, fp_cast);\n     }"}, {"sha": "e3de82a5aac0a60a08cee6777c20c1a2c930cf95", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -623,8 +623,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define UNKNOWN_FLOAT_FORMAT 0\n #define IEEE_FLOAT_FORMAT 1\n #define VAX_FLOAT_FORMAT 2\n-#define IBM_FLOAT_FORMAT 3\n-#define C4X_FLOAT_FORMAT 4\n+#define C4X_FLOAT_FORMAT 3\n \n /* Default to IEEE float if not specified.  Nearly all machines use it.  */\n #ifndef TARGET_FLOAT_FORMAT"}, {"sha": "98fe8bbc54dfd068b69af9c4fcbdfee2d51eeb4a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -1340,9 +1340,6 @@ need to define @code{TARGET_FLOAT_FORMAT} when the format is IEEE@.\n This code indicates the ``F float'' (for @code{float}) and ``D float''\n or ``G float'' formats (for @code{double}) used on the VAX and PDP-11@.\n \n-@item IBM_FLOAT_FORMAT\n-This code indicates the format used on the IBM System/370.\n-\n @item C4X_FLOAT_FORMAT\n This code indicates the format used on the TMS320C3x/C4x.\n @end ftable"}, {"sha": "f5d842e24b58f81fa712e649320ea07631ac06b3", "filename": "gcc/real.c", "status": "modified", "additions": 8, "deletions": 262, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -65,12 +65,7 @@\n    have guard digits or rounding, the computation of 10**exp can\n    accumulate more than a few digits of error.  The previous incarnation\n    of real.c successfully used a 144-bit fraction; given the current\n-   layout of REAL_VALUE_TYPE we're forced to expand to at least 160 bits.\n-\n-   Target floating point models that use base 16 instead of base 2\n-   (i.e. IBM 370), are handled during round_for_format, in which we\n-   canonicalize the exponent to be a multiple of 4 (log2(16)), and\n-   adjust the significand to match.  */\n+   layout of REAL_VALUE_TYPE we're forced to expand to at least 160 bits.  */\n \n \n /* Used to classify two numbers simultaneously.  */\n@@ -2282,9 +2277,9 @@ real_maxval (REAL_VALUE_TYPE *r, int sign, enum machine_mode mode)\n     {\n       r->cl = rvc_normal;\n       r->sign = sign;\n-      SET_REAL_EXP (r, fmt->emax * fmt->log2_b);\n+      SET_REAL_EXP (r, fmt->emax);\n \n-      np2 = SIGNIFICAND_BITS - fmt->p * fmt->log2_b;\n+      np2 = SIGNIFICAND_BITS - fmt->p;\n       memset (r->sig, -1, SIGSZ * sizeof (unsigned long));\n       clear_significand_below (r, np2);\n \n@@ -2342,9 +2337,9 @@ round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n       decimal_real_convert (r, DFmode, r);\n     }\n \n-  p2 = fmt->p * fmt->log2_b;\n-  emin2m1 = (fmt->emin - 1) * fmt->log2_b;\n-  emax2 = fmt->emax * fmt->log2_b;\n+  p2 = fmt->p;\n+  emin2m1 = fmt->emin - 1;\n+  emax2 = fmt->emax;\n \n   np2 = SIGNIFICAND_BITS - p2;\n   switch (r->cl)\n@@ -2372,22 +2367,6 @@ round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n       gcc_unreachable ();\n     }\n \n-  /* If we're not base2, normalize the exponent to a multiple of\n-     the true base.  */\n-  if (fmt->log2_b != 1)\n-    {\n-      int shift;\n-\n-      gcc_assert (fmt->b != 10);\n-      shift = REAL_EXP (r) & (fmt->log2_b - 1);\n-      if (shift)\n-\t{\n-\t  shift = fmt->log2_b - shift;\n-\t  r->sig[0] |= sticky_rshift_significand (r, r, shift);\n-\t  SET_REAL_EXP (r, REAL_EXP (r) + shift);\n-\t}\n-    }\n-\n   /* Check the range of the exponent.  If we're out of range,\n      either underflow or overflow.  */\n   if (REAL_EXP (r) > emax2)\n@@ -2443,19 +2422,6 @@ round_for_format (const struct real_format *fmt, REAL_VALUE_TYPE *r)\n \t  if (REAL_EXP (r) > emax2)\n \t    goto overflow;\n \t  r->sig[SIGSZ-1] = SIG_MSB;\n-\n-\t  if (fmt->log2_b != 1)\n-\t    {\n-\t      int shift = REAL_EXP (r) & (fmt->log2_b - 1);\n-\t      if (shift)\n-\t\t{\n-\t\t  shift = fmt->log2_b - shift;\n-\t\t  rshift_significand (r, r, shift);\n-\t\t  SET_REAL_EXP (r, REAL_EXP (r) + shift);\n-\t\t  if (REAL_EXP (r) > emax2)\n-\t\t    goto overflow;\n-\t\t}\n-\t    }\n \t}\n     }\n \n@@ -2513,7 +2479,7 @@ exact_real_truncate (enum machine_mode mode, const REAL_VALUE_TYPE *a)\n   gcc_assert (fmt);\n \n   /* Don't allow conversion to denormals.  */\n-  emin2m1 = (fmt->emin - 1) * fmt->log2_b;\n+  emin2m1 = fmt->emin - 1;\n   if (REAL_EXP (a) <= emin2m1)\n     return false;\n \n@@ -2604,7 +2570,7 @@ significand_size (enum machine_mode mode)\n       double log2_10 = 3.3219281;\n       return fmt->p * log2_10;\n     }\n-  return fmt->p * fmt->log2_b;\n+  return fmt->p;\n }\n \n /* Return a hash value for the given real value.  */\n@@ -2775,7 +2741,6 @@ const struct real_format ieee_single_format =\n     encode_ieee_single,\n     decode_ieee_single,\n     2,\n-    1,\n     24,\n     24,\n     -125,\n@@ -2795,7 +2760,6 @@ const struct real_format mips_single_format =\n     encode_ieee_single,\n     decode_ieee_single,\n     2,\n-    1,\n     24,\n     24,\n     -125,\n@@ -2815,7 +2779,6 @@ const struct real_format coldfire_single_format =\n     encode_ieee_single,\n     decode_ieee_single,\n     2,\n-    1,\n     24,\n     24,\n     -125,\n@@ -3023,7 +2986,6 @@ const struct real_format ieee_double_format =\n     encode_ieee_double,\n     decode_ieee_double,\n     2,\n-    1,\n     53,\n     53,\n     -1021,\n@@ -3043,7 +3005,6 @@ const struct real_format mips_double_format =\n     encode_ieee_double,\n     decode_ieee_double,\n     2,\n-    1,\n     53,\n     53,\n     -1021,\n@@ -3063,7 +3024,6 @@ const struct real_format coldfire_double_format =\n     encode_ieee_double,\n     decode_ieee_double,\n     2,\n-    1,\n     53,\n     53,\n     -1021,\n@@ -3393,7 +3353,6 @@ const struct real_format ieee_extended_motorola_format =\n     encode_ieee_extended_motorola,\n     decode_ieee_extended_motorola,\n     2,\n-    1,\n     64,\n     64,\n     -16382,\n@@ -3413,7 +3372,6 @@ const struct real_format ieee_extended_intel_96_format =\n     encode_ieee_extended_intel_96,\n     decode_ieee_extended_intel_96,\n     2,\n-    1,\n     64,\n     64,\n     -16381,\n@@ -3433,7 +3391,6 @@ const struct real_format ieee_extended_intel_128_format =\n     encode_ieee_extended_intel_128,\n     decode_ieee_extended_intel_128,\n     2,\n-    1,\n     64,\n     64,\n     -16381,\n@@ -3455,7 +3412,6 @@ const struct real_format ieee_extended_intel_96_round_53_format =\n     encode_ieee_extended_intel_96,\n     decode_ieee_extended_intel_96,\n     2,\n-    1,\n     53,\n     53,\n     -16381,\n@@ -3542,7 +3498,6 @@ const struct real_format ibm_extended_format =\n     encode_ibm_extended,\n     decode_ibm_extended,\n     2,\n-    1,\n     53 + 53,\n     53,\n     -1021 + 53,\n@@ -3562,7 +3517,6 @@ const struct real_format mips_extended_format =\n     encode_ibm_extended,\n     decode_ibm_extended,\n     2,\n-    1,\n     53 + 53,\n     53,\n     -1021 + 53,\n@@ -3824,7 +3778,6 @@ const struct real_format ieee_quad_format =\n     encode_ieee_quad,\n     decode_ieee_quad,\n     2,\n-    1,\n     113,\n     113,\n     -16381,\n@@ -3844,7 +3797,6 @@ const struct real_format mips_quad_format =\n     encode_ieee_quad,\n     decode_ieee_quad,\n     2,\n-    1,\n     113,\n     113,\n     -16381,\n@@ -4143,7 +4095,6 @@ const struct real_format vax_f_format =\n     encode_vax_f,\n     decode_vax_f,\n     2,\n-    1,\n     24,\n     24,\n     -127,\n@@ -4163,7 +4114,6 @@ const struct real_format vax_d_format =\n     encode_vax_d,\n     decode_vax_d,\n     2,\n-    1,\n     56,\n     56,\n     -127,\n@@ -4183,7 +4133,6 @@ const struct real_format vax_g_format =\n     encode_vax_g,\n     decode_vax_g,\n     2,\n-    1,\n     53,\n     53,\n     -1023,\n@@ -4198,203 +4147,6 @@ const struct real_format vax_g_format =\n     false\n   };\n \f\n-/* A good reference for these can be found in chapter 9 of\n-   \"ESA/390 Principles of Operation\", IBM document number SA22-7201-01.\n-   An on-line version can be found here:\n-\n-   http://publibz.boulder.ibm.com/cgi-bin/bookmgr_OS390/BOOKS/DZ9AR001/9.1?DT=19930923083613\n-*/\n-\n-static void encode_i370_single (const struct real_format *fmt,\n-\t\t\t\tlong *, const REAL_VALUE_TYPE *);\n-static void decode_i370_single (const struct real_format *,\n-\t\t\t\tREAL_VALUE_TYPE *, const long *);\n-static void encode_i370_double (const struct real_format *fmt,\n-\t\t\t\tlong *, const REAL_VALUE_TYPE *);\n-static void decode_i370_double (const struct real_format *,\n-\t\t\t\tREAL_VALUE_TYPE *, const long *);\n-\n-static void\n-encode_i370_single (const struct real_format *fmt ATTRIBUTE_UNUSED,\n-\t\t    long *buf, const REAL_VALUE_TYPE *r)\n-{\n-  unsigned long sign, exp, sig, image;\n-\n-  sign = r->sign << 31;\n-\n-  switch (r->cl)\n-    {\n-    case rvc_zero:\n-      image = 0;\n-      break;\n-\n-    case rvc_inf:\n-    case rvc_nan:\n-      image = 0x7fffffff | sign;\n-      break;\n-\n-    case rvc_normal:\n-      sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 24)) & 0xffffff;\n-      exp = ((REAL_EXP (r) / 4) + 64) << 24;\n-      image = sign | exp | sig;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  buf[0] = image;\n-}\n-\n-static void\n-decode_i370_single (const struct real_format *fmt ATTRIBUTE_UNUSED,\n-\t\t    REAL_VALUE_TYPE *r, const long *buf)\n-{\n-  unsigned long sign, sig, image = buf[0];\n-  int exp;\n-\n-  sign = (image >> 31) & 1;\n-  exp = (image >> 24) & 0x7f;\n-  sig = image & 0xffffff;\n-\n-  memset (r, 0, sizeof (*r));\n-\n-  if (exp || sig)\n-    {\n-      r->cl = rvc_normal;\n-      r->sign = sign;\n-      SET_REAL_EXP (r, (exp - 64) * 4);\n-      r->sig[SIGSZ-1] = sig << (HOST_BITS_PER_LONG - 24);\n-      normalize (r);\n-    }\n-}\n-\n-static void\n-encode_i370_double (const struct real_format *fmt ATTRIBUTE_UNUSED,\n-\t\t    long *buf, const REAL_VALUE_TYPE *r)\n-{\n-  unsigned long sign, exp, image_hi, image_lo;\n-\n-  sign = r->sign << 31;\n-\n-  switch (r->cl)\n-    {\n-    case rvc_zero:\n-      image_hi = image_lo = 0;\n-      break;\n-\n-    case rvc_inf:\n-    case rvc_nan:\n-      image_hi = 0x7fffffff | sign;\n-      image_lo = 0xffffffff;\n-      break;\n-\n-    case rvc_normal:\n-      if (HOST_BITS_PER_LONG == 64)\n-\t{\n-\t  image_hi = r->sig[SIGSZ-1];\n-\t  image_lo = (image_hi >> (64 - 56)) & 0xffffffff;\n-\t  image_hi = (image_hi >> (64 - 56 + 1) >> 31) & 0xffffff;\n-\t}\n-      else\n-\t{\n-\t  image_hi = r->sig[SIGSZ-1];\n-\t  image_lo = r->sig[SIGSZ-2];\n-\t  image_lo = (image_lo >> 8) | (image_hi << 24);\n-\t  image_hi >>= 8;\n-\t}\n-\n-      exp = ((REAL_EXP (r) / 4) + 64) << 24;\n-      image_hi |= sign | exp;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  if (FLOAT_WORDS_BIG_ENDIAN)\n-    buf[0] = image_hi, buf[1] = image_lo;\n-  else\n-    buf[0] = image_lo, buf[1] = image_hi;\n-}\n-\n-static void\n-decode_i370_double (const struct real_format *fmt ATTRIBUTE_UNUSED,\n-\t\t    REAL_VALUE_TYPE *r, const long *buf)\n-{\n-  unsigned long sign, image_hi, image_lo;\n-  int exp;\n-\n-  if (FLOAT_WORDS_BIG_ENDIAN)\n-    image_hi = buf[0], image_lo = buf[1];\n-  else\n-    image_lo = buf[0], image_hi = buf[1];\n-\n-  sign = (image_hi >> 31) & 1;\n-  exp = (image_hi >> 24) & 0x7f;\n-  image_hi &= 0xffffff;\n-  image_lo &= 0xffffffff;\n-\n-  memset (r, 0, sizeof (*r));\n-\n-  if (exp || image_hi || image_lo)\n-    {\n-      r->cl = rvc_normal;\n-      r->sign = sign;\n-      SET_REAL_EXP (r, (exp - 64) * 4 + (SIGNIFICAND_BITS - 56));\n-\n-      if (HOST_BITS_PER_LONG == 32)\n-\t{\n-\t  r->sig[0] = image_lo;\n-\t  r->sig[1] = image_hi;\n-\t}\n-      else\n-\tr->sig[0] = image_lo | (image_hi << 31 << 1);\n-\n-      normalize (r);\n-    }\n-}\n-\n-const struct real_format i370_single_format =\n-  {\n-    encode_i370_single,\n-    decode_i370_single,\n-    16,\n-    4,\n-    6,\n-    6,\n-    -64,\n-    63,\n-    31,\n-    31,\n-    false,\n-    false,\n-    false, /* ??? The encoding does allow for \"unnormals\".  */\n-    false, /* ??? The encoding does allow for \"unnormals\".  */\n-    false,\n-    false\n-  };\n-\n-const struct real_format i370_double_format =\n-  {\n-    encode_i370_double,\n-    decode_i370_double,\n-    16,\n-    4,\n-    14,\n-    14,\n-    -64,\n-    63,\n-    63,\n-    63,\n-    false,\n-    false,\n-    false, /* ??? The encoding does allow for \"unnormals\".  */\n-    false, /* ??? The encoding does allow for \"unnormals\".  */\n-    false,\n-    false\n-  };\n-\f\n /* Encode real R into a single precision DFP value in BUF.  */\n static void\n encode_decimal_single (const struct real_format *fmt ATTRIBUTE_UNUSED,\n@@ -4455,7 +4207,6 @@ const struct real_format decimal_single_format =\n     encode_decimal_single,\n     decode_decimal_single,\n     10, \n-    1,  /* log10 */\n     7,\n     7,\n     -95,\n@@ -4476,7 +4227,6 @@ const struct real_format decimal_double_format =\n     encode_decimal_double,\n     decode_decimal_double,\n     10,\n-    1,  /* log10 */\n     16,\n     16,\n     -383,\n@@ -4497,7 +4247,6 @@ const struct real_format decimal_quad_format =\n     encode_decimal_quad,\n     decode_decimal_quad,\n     10,\n-    1,  /* log10 */\n     34,\n     34,\n     -6143,\n@@ -4707,7 +4456,6 @@ const struct real_format c4x_single_format =\n     encode_c4x_single,\n     decode_c4x_single,\n     2,\n-    1,\n     24,\n     24,\n     -126,\n@@ -4727,7 +4475,6 @@ const struct real_format c4x_extended_format =\n     encode_c4x_extended,\n     decode_c4x_extended,\n     2,\n-    1,\n     32,\n     32,\n     -126,\n@@ -4772,7 +4519,6 @@ const struct real_format real_internal_format =\n     encode_internal,\n     decode_internal,\n     2,\n-    1,\n     SIGNIFICAND_BITS - 2,\n     SIGNIFICAND_BITS - 2,\n     -MAX_EXP,"}, {"sha": "f050dafd48c96121d7ef4550f4f3786f4d00da83", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d8a8a0a223f8e65a810bdb4ec3fe7496a964699/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=4d8a8a0a223f8e65a810bdb4ec3fe7496a964699", "patch": "@@ -126,9 +126,6 @@ struct real_format\n   /* The radix of the exponent and digits of the significand.  */\n   int b;\n \n-  /* log2(b).  */\n-  int log2_b;\n-\n   /* Size of the significand in digits of radix B.  */\n   int p;\n \n@@ -272,8 +269,6 @@ extern const struct real_format mips_quad_format;\n extern const struct real_format vax_f_format;\n extern const struct real_format vax_d_format;\n extern const struct real_format vax_g_format;\n-extern const struct real_format i370_single_format;\n-extern const struct real_format i370_double_format;\n extern const struct real_format c4x_single_format;\n extern const struct real_format c4x_extended_format;\n extern const struct real_format real_internal_format;"}]}