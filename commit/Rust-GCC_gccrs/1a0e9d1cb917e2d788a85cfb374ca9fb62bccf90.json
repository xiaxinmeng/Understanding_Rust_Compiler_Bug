{"sha": "1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwZTlkMWNiOTE3ZTJkNzg4YTg1Y2ZiMzc0Y2E5ZmI2MmJjY2Y5MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-10-23T11:48:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-23T11:48:26Z"}, "message": "re PR libstdc++/58815 (Casting/Conversion operator for std::decimal not supported)\n\n2013-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/58815\n\t* include/decimal/decimal (decimal32::operator long long(),\n\tdecimal64::operator long long(), decimal128::operator long long()):\n\tAdd in c++11 mode per n3407.\n\t* testsuite/decimal/pr58815.cc: New.\n\nFrom-SVN: r203956", "tree": {"sha": "abfafd40add6d5022e14f389c0552911026b882f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abfafd40add6d5022e14f389c0552911026b882f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/comments", "author": null, "committer": null, "parents": [{"sha": "fe15a1a7eb43bf486577d55e650222fb3479554f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe15a1a7eb43bf486577d55e650222fb3479554f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe15a1a7eb43bf486577d55e650222fb3479554f"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "48243930d479c39dd46b2a5fb61f1285def92db7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "patch": "@@ -1,3 +1,11 @@\n+2013-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/58815\n+\t* include/decimal/decimal (decimal32::operator long long(),\n+\tdecimal64::operator long long(), decimal128::operator long long()):\n+\tAdd in c++11 mode per n3407.\n+\t* testsuite/decimal/pr58815.cc: New.\n+\n 2013-10-22  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/bits/basic_string.h (operator\"\"s): Remove space between quotes"}, {"sha": "c1601180e75ec31d969459371f5bf56df719ffa9", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "patch": "@@ -250,8 +250,11 @@ namespace decimal\n     /// Conforming extension: Conversion from scalar decimal type.\n     decimal32(__decfloat32 __z)\t\t\t: __val(__z) {}\n \n-    // 3.2.2.5  Conversion to integral type. (DISABLED)\n-    //operator long long() const { return (long long)__val; }\n+#if __cplusplus >= 201103L\n+    // 3.2.2.5  Conversion to integral type.\n+    // Note: explicit per n3407.\n+    explicit operator long long() const { return (long long)__val; }\n+#endif\n \n     // 3.2.2.6  Increment and decrement operators.\n     decimal32& operator++()\n@@ -333,8 +336,11 @@ namespace decimal\n     /// Conforming extension: Conversion from scalar decimal type.\n     decimal64(__decfloat64 __z)\t\t\t: __val(__z) {}\n \n-    // 3.2.3.5  Conversion to integral type. (DISABLED)\n-    //operator long long() const { return (long long)__val; }\n+#if __cplusplus >= 201103L\n+    // 3.2.3.5  Conversion to integral type.\n+    // Note: explicit per n3407.\n+    explicit operator long long() const { return (long long)__val; }\n+#endif\n \n     // 3.2.3.6  Increment and decrement operators.\n     decimal64& operator++()\n@@ -417,8 +423,11 @@ namespace decimal\n     /// Conforming extension: Conversion from scalar decimal type.\n     decimal128(__decfloat128 __z)\t\t: __val(__z) {}\n \n-    // 3.2.4.5  Conversion to integral type. (DISABLED)\n-    //operator long long() const { return (long long)__val; }\n+#if __cplusplus >= 201103L\n+    // 3.2.4.5  Conversion to integral type.\n+    // Note: explicit per n3407.\n+    explicit operator long long() const { return (long long)__val; }\n+#endif\n \n     // 3.2.4.6  Increment and decrement operators.\n     decimal128& operator++()"}, {"sha": "b805d75f4eb5a99c3d58c43a84f8416042bf0e68", "filename": "libstdc++-v3/testsuite/decimal/pr58815.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr58815.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr58815.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr58815.cc?ref=1a0e9d1cb917e2d788a85cfb374ca9fb62bccf90", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-require-effective-target dfp }\n+\n+#include <decimal/decimal>\n+\n+void\n+test01 ()\n+{\n+  std::decimal::decimal32 d32;\n+  std::decimal::decimal64 d64;\n+  std::decimal::decimal128 d128;\n+\n+  static_cast<long long>(d32);\n+  static_cast<long long>(d64);\n+  static_cast<long long>(d128);\n+}"}]}