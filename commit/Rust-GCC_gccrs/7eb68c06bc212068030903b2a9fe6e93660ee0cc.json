{"sha": "7eb68c06bc212068030903b2a9fe6e93660ee0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViNjhjMDZiYzIxMjA2ODAzMDkwM2IyYTlmZTZlOTM2NjBlZTBjYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-13T09:59:13Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-13T09:59:13Z"}, "message": "i386-opts.h: New.\n\n\t* config/i386/i386-opts.h: New.\n\t* gcc/config/i386/i386.c (stringop_alg, ix86_cmodel,\n\tix86_asm_dialect, ix86_regparm, ix86_abi, ix86_branch_cost,\n\tix86_section_threshold): Remove.\n\t(ix86_handle_option): Move MAX_CODE_ALIGN define here.  Handle\n\tOPT_malign_loops_, OPT_malign_jumps_, OPT_malign_functions_ and\n\tOPT_mbranch_cost_.\n\t(ix86_option_override_internal): Don't decode strings for options\n\tother than -march=, -mtune= and -mfpmath=.  Don't allow for\n\t__attribute__ uses in remaining diagnostics for options with\n\tstring arguments.  Don't check for integer arguments being\n\tnegative.\n\t* gcc/config/i386/i386.h (enum stringop_alg, enum calling_abi,\n\tenum tls_dialect, enum cmodel, enum asm_dialect): Move to\n\ti386-opts.h.\n\t(ix86_abi, ix86_tls_dialect, ix86_cmodel, ix86_asm_dialect,\n\tix86_branch_cost, ix86_section_threshold): Remove.\n\t* gcc/config/i386/i386.opt (config/i386/i386-opts.h): New\n\tHeaderInclude.\n\t(malign-functions=, malign-jumps=, malign-loops=): Use UInteger\n\tbut not Var.\n\t(masm=): Use Enum and Init.\n\t(asm_dialect): New Enum and EnumValue entries.\n\t(mbranch-cost=): Use UInteger.\n\t(mlarge-data-threshold=): Use UInteger and Init.\n\t(mcmodel=): Use Enum and Init.\n\t(cmodel): New Enum and EnumValue entries.\n\t(mpc): Replace with separate mpc32, mpc64 and mpc80 entries.\n\t(mpreferred-stack-boundary=, mincoming-stack-boundary=,\n\tmregparm=): Use UInteger.\n\t(mstringop-strategy=): Use Enum and Init.\n\t(stringop_alg): New Enum and EnumValue entries.\n\t(mtls-dialect=): Use Enum and Init.\n\t(tls_dialect): New Enum and EnumValue entries.\n\t(mabi=): Use Enum and Init.\n\t(calling_abi): New Enum and EnumValue entries.\n\t(mveclibabi=): Use Enum and Init.\n\t(ix86_veclibabi): New Enum and EnumValue entries.\n\nFrom-SVN: r173728", "tree": {"sha": "a381603c36392d88ee09ae2611483f2bda2cdd89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a381603c36392d88ee09ae2611483f2bda2cdd89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb68c06bc212068030903b2a9fe6e93660ee0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb68c06bc212068030903b2a9fe6e93660ee0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb68c06bc212068030903b2a9fe6e93660ee0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb68c06bc212068030903b2a9fe6e93660ee0cc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67e203c1f35b76c2d1a09337a4ad522eb836501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67e203c1f35b76c2d1a09337a4ad522eb836501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67e203c1f35b76c2d1a09337a4ad522eb836501"}], "stats": {"total": 646, "additions": 374, "deletions": 272}, "files": [{"sha": "6ca7e8d9c60957444f1af3f8dc120b1a9a3f5257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7eb68c06bc212068030903b2a9fe6e93660ee0cc", "patch": "@@ -1,3 +1,44 @@\n+2011-05-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/i386-opts.h: New.\n+\t* gcc/config/i386/i386.c (stringop_alg, ix86_cmodel,\n+\tix86_asm_dialect, ix86_regparm, ix86_abi, ix86_branch_cost,\n+\tix86_section_threshold): Remove.\n+\t(ix86_handle_option): Move MAX_CODE_ALIGN define here.  Handle\n+\tOPT_malign_loops_, OPT_malign_jumps_, OPT_malign_functions_ and\n+\tOPT_mbranch_cost_.\n+\t(ix86_option_override_internal): Don't decode strings for options\n+\tother than -march=, -mtune= and -mfpmath=.  Don't allow for\n+\t__attribute__ uses in remaining diagnostics for options with\n+\tstring arguments.  Don't check for integer arguments being\n+\tnegative.\n+\t* gcc/config/i386/i386.h (enum stringop_alg, enum calling_abi,\n+\tenum tls_dialect, enum cmodel, enum asm_dialect): Move to\n+\ti386-opts.h.\n+\t(ix86_abi, ix86_tls_dialect, ix86_cmodel, ix86_asm_dialect,\n+\tix86_branch_cost, ix86_section_threshold): Remove.\n+\t* gcc/config/i386/i386.opt (config/i386/i386-opts.h): New\n+\tHeaderInclude.\n+\t(malign-functions=, malign-jumps=, malign-loops=): Use UInteger\n+\tbut not Var.\n+\t(masm=): Use Enum and Init.\n+\t(asm_dialect): New Enum and EnumValue entries.\n+\t(mbranch-cost=): Use UInteger.\n+\t(mlarge-data-threshold=): Use UInteger and Init.\n+\t(mcmodel=): Use Enum and Init.\n+\t(cmodel): New Enum and EnumValue entries.\n+\t(mpc): Replace with separate mpc32, mpc64 and mpc80 entries.\n+\t(mpreferred-stack-boundary=, mincoming-stack-boundary=,\n+\tmregparm=): Use UInteger.\n+\t(mstringop-strategy=): Use Enum and Init.\n+\t(stringop_alg): New Enum and EnumValue entries.\n+\t(mtls-dialect=): Use Enum and Init.\n+\t(tls_dialect): New Enum and EnumValue entries.\n+\t(mabi=): Use Enum and Init.\n+\t(calling_abi): New Enum and EnumValue entries.\n+\t(mveclibabi=): Use Enum and Init.\n+\t(ix86_veclibabi): New Enum and EnumValue entries.\n+\n 2011-05-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.md (mov expander): Fix use of"}, {"sha": "791304d931ab9c1e1bc34fa9c2afa46162bebec4", "filename": "gcc/config/i386/i386-opts.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=7eb68c06bc212068030903b2a9fe6e93660ee0cc", "patch": "@@ -0,0 +1,79 @@\n+/* Definitions for option handling for IA-32.\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef I386_OPTS_H\n+#define I386_OPTS_H\n+\n+/* Algorithm to expand string function with.  */\n+enum stringop_alg\n+{\n+   no_stringop,\n+   libcall,\n+   rep_prefix_1_byte,\n+   rep_prefix_4_byte,\n+   rep_prefix_8_byte,\n+   loop_1_byte,\n+   loop,\n+   unrolled_loop\n+};\n+\n+/* Available call abi.  */\n+enum calling_abi\n+{\n+  SYSV_ABI = 0,\n+  MS_ABI = 1\n+};\n+\n+enum tls_dialect\n+{\n+  TLS_DIALECT_GNU,\n+  TLS_DIALECT_GNU2,\n+  TLS_DIALECT_SUN\n+};\n+\n+enum cmodel {\n+  CM_32,\t/* The traditional 32-bit ABI.  */\n+  CM_SMALL,\t/* Assumes all code and data fits in the low 31 bits.  */\n+  CM_KERNEL,\t/* Assumes all code and data fits in the high 31 bits.  */\n+  CM_MEDIUM,\t/* Assumes code fits in the low 31 bits; data unlimited.  */\n+  CM_LARGE,\t/* No assumptions.  */\n+  CM_SMALL_PIC,\t/* Assumes code+data+got/plt fits in a 31 bit region.  */\n+  CM_MEDIUM_PIC,/* Assumes code+got/plt fits in a 31 bit region.  */\n+  CM_LARGE_PIC\t/* No assumptions.  */\n+};\n+\n+enum asm_dialect {\n+  ASM_ATT,\n+  ASM_INTEL\n+};\n+\n+enum ix86_veclibabi {\n+  ix86_veclibabi_type_none,\n+  ix86_veclibabi_type_svml,\n+  ix86_veclibabi_type_acml\n+};\n+\n+#endif"}, {"sha": "45399119077c78390d6811aba4fcaf7b4009341e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 141, "deletions": 204, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7eb68c06bc212068030903b2a9fe6e93660ee0cc", "patch": "@@ -2120,8 +2120,6 @@ static const unsigned int x86_arch_always_fancy_math_387\n   = m_PENT | m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_PENT4\n     | m_NOCONA | m_CORE2I7 | m_GENERIC;\n \n-static enum stringop_alg stringop_alg = no_stringop;\n-\n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n    epilogue code.  */\n@@ -2327,13 +2325,6 @@ struct ix86_frame\n   bool save_regs_using_mov;\n };\n \n-/* Code model option.  */\n-enum cmodel ix86_cmodel;\n-/* Asm dialect.  */\n-enum asm_dialect ix86_asm_dialect = ASM_ATT;\n-/* TLS dialects.  */\n-enum tls_dialect ix86_tls_dialect = TLS_DIALECT_GNU;\n-\n /* Which unit we are generating floating point math for.  */\n enum fpmath_unit ix86_fpmath;\n \n@@ -2349,9 +2340,6 @@ enum processor_type ix86_arch;\n /* true if sse prefetch instruction is not NOOP.  */\n int x86_prefetch_sse;\n \n-/* ix86_regparm_string as a number */\n-static int ix86_regparm;\n-\n /* -mstackrealign option */\n static const char ix86_force_align_arg_pointer_string[]\n   = \"force_align_arg_pointer\";\n@@ -2380,21 +2368,10 @@ static unsigned int ix86_default_incoming_stack_boundary;\n /* Alignment for incoming stack boundary in bits.  */\n unsigned int ix86_incoming_stack_boundary;\n \n-/* The abi used by target.  */\n-enum calling_abi ix86_abi;\n-\n-/* Values 1-5: see jump.c */\n-int ix86_branch_cost;\n-\n /* Calling abi specific va_list type nodes.  */\n static GTY(()) tree sysv_va_list_type_node;\n static GTY(()) tree ms_va_list_type_node;\n \n-/* Variables which are this size or smaller are put in the data/bss\n-   or ldata/lbss sections.  */\n-\n-int ix86_section_threshold = 65536;\n-\n /* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n char internal_label_prefix[16];\n int internal_label_prefix_len;\n@@ -2688,7 +2665,7 @@ static bool\n ix86_handle_option (struct gcc_options *opts,\n \t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n   int value = decoded->value;\n@@ -3059,6 +3036,45 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+  /* Comes from final.c -- no real reason to change it.  */\n+#define MAX_CODE_ALIGN 16\n+\n+    case OPT_malign_loops_:\n+      warning_at (loc, 0, \"-malign-loops is obsolete, use -falign-loops\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-loops=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_loops = 1 << value;\n+      return true;\n+\n+    case OPT_malign_jumps_:\n+      warning_at (loc, 0, \"-malign-jumps is obsolete, use -falign-jumps\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-jumps=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_jumps = 1 << value;\n+      return true;\n+\n+    case OPT_malign_functions_:\n+      warning_at (loc, 0,\n+\t\t  \"-malign-functions is obsolete, use -falign-functions\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-functions=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_functions = 1 << value;\n+      return true;\n+\n+    case OPT_mbranch_cost_:\n+      if (value > 5)\n+\t{\n+\t  error_at (loc, \"-mbranch-cost=%d is not between 0 and 5\", value);\n+\t  opts->x_ix86_branch_cost = 5;\n+\t}\n+      return true;\n+\n     default:\n       return true;\n     }\n@@ -3305,9 +3321,6 @@ ix86_option_override_internal (bool main_args_p)\n   const char *suffix;\n   const char *sw;\n \n-  /* Comes from final.c -- no real reason to change it.  */\n-#define MAX_CODE_ALIGN 16\n-\n   enum pta_flags\n     {\n       PTA_SSE = 1 << 0,\n@@ -3530,65 +3543,74 @@ ix86_option_override_internal (bool main_args_p)\n \t}\n     }\n \n-  if (ix86_stringop_string)\n-    {\n-      if (!strcmp (ix86_stringop_string, \"rep_byte\"))\n-\tstringop_alg = rep_prefix_1_byte;\n-      else if (!strcmp (ix86_stringop_string, \"libcall\"))\n-\tstringop_alg = libcall;\n-      else if (!strcmp (ix86_stringop_string, \"rep_4byte\"))\n-\tstringop_alg = rep_prefix_4_byte;\n-      else if (!strcmp (ix86_stringop_string, \"rep_8byte\")\n-\t       && TARGET_64BIT)\n-\t/* rep; movq isn't available in 32-bit code.  */\n-\tstringop_alg = rep_prefix_8_byte;\n-      else if (!strcmp (ix86_stringop_string, \"byte_loop\"))\n-\tstringop_alg = loop_1_byte;\n-      else if (!strcmp (ix86_stringop_string, \"loop\"))\n-\tstringop_alg = loop;\n-      else if (!strcmp (ix86_stringop_string, \"unrolled_loop\"))\n-\tstringop_alg = unrolled_loop;\n-      else\n-\terror (\"bad value (%s) for %sstringop-strategy=%s %s\",\n-\t       ix86_stringop_string, prefix, suffix, sw);\n+  if (ix86_stringop_alg == rep_prefix_8_byte && !TARGET_64BIT)\n+    {\n+      /* rep; movq isn't available in 32-bit code.  */\n+      error (\"-mstringop-strategy=rep_8byte not supported for 32-bit code\");\n+      ix86_stringop_alg = no_stringop;\n     }\n \n   if (!ix86_arch_string)\n     ix86_arch_string = TARGET_64BIT ? \"x86-64\" : SUBTARGET32_DEFAULT_CPU;\n   else\n     ix86_arch_specified = 1;\n \n-  /* Validate -mabi= value.  */\n-  if (ix86_abi_string)\n-    {\n-      if (strcmp (ix86_abi_string, \"sysv\") == 0)\n-\tix86_abi = SYSV_ABI;\n-      else if (strcmp (ix86_abi_string, \"ms\") == 0)\n-\tix86_abi = MS_ABI;\n-      else\n-\terror (\"unknown ABI (%s) for %sabi=%s %s\",\n-\t       ix86_abi_string, prefix, suffix, sw);\n-    }\n-  else\n+  if (!global_options_set.x_ix86_abi)\n     ix86_abi = DEFAULT_ABI;\n \n-  if (ix86_cmodel_string != 0)\n+  if (global_options_set.x_ix86_cmodel)\n     {\n-      if (!strcmp (ix86_cmodel_string, \"small\"))\n-\tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n-      else if (!strcmp (ix86_cmodel_string, \"medium\"))\n-\tix86_cmodel = flag_pic ? CM_MEDIUM_PIC : CM_MEDIUM;\n-      else if (!strcmp (ix86_cmodel_string, \"large\"))\n-\tix86_cmodel = flag_pic ? CM_LARGE_PIC : CM_LARGE;\n-      else if (flag_pic)\n-\terror (\"code model %s does not support PIC mode\", ix86_cmodel_string);\n-      else if (!strcmp (ix86_cmodel_string, \"32\"))\n-\tix86_cmodel = CM_32;\n-      else if (!strcmp (ix86_cmodel_string, \"kernel\") && !flag_pic)\n-\tix86_cmodel = CM_KERNEL;\n-      else\n-\terror (\"bad value (%s) for %scmodel=%s %s\",\n-\t       ix86_cmodel_string, prefix, suffix, sw);\n+      switch (ix86_cmodel)\n+\t{\n+\tcase CM_SMALL:\n+\tcase CM_SMALL_PIC:\n+\t  if (flag_pic)\n+\t    ix86_cmodel = CM_SMALL_PIC;\n+\t  if (!TARGET_64BIT)\n+\t    error (\"code model %qs not supported in the %s bit mode\",\n+\t\t   \"small\", \"32\");\n+\t  break;\n+\n+\tcase CM_MEDIUM:\n+\tcase CM_MEDIUM_PIC:\n+\t  if (flag_pic)\n+\t    ix86_cmodel = CM_MEDIUM_PIC;\n+\t  if (!TARGET_64BIT)\n+\t    error (\"code model %qs not supported in the %s bit mode\",\n+\t\t   \"medium\", \"32\");\n+\t  break;\n+\n+\tcase CM_LARGE:\n+\tcase CM_LARGE_PIC:\n+\t  if (flag_pic)\n+\t    ix86_cmodel = CM_LARGE_PIC;\n+\t  if (!TARGET_64BIT)\n+\t    error (\"code model %qs not supported in the %s bit mode\",\n+\t\t   \"large\", \"32\");\n+\t  break;\n+\n+\tcase CM_32:\n+\t  if (flag_pic)\n+\t    error (\"code model %s does not support PIC mode\", \"32\");\n+\t  if (TARGET_64BIT)\n+\t    error (\"code model %qs not supported in the %s bit mode\",\n+\t\t   \"32\", \"64\");\n+\t  break;\n+\n+\tcase CM_KERNEL:\n+\t  if (flag_pic)\n+\t    {\n+\t      error (\"code model %s does not support PIC mode\", \"kernel\");\n+\t      ix86_cmodel = CM_32;\n+\t    }\n+\t  if (!TARGET_64BIT)\n+\t    error (\"code model %qs not supported in the %s bit mode\",\n+\t\t   \"kernel\", \"32\");\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n     }\n   else\n     {\n@@ -3603,20 +3625,11 @@ ix86_option_override_internal (bool main_args_p)\n       else\n         ix86_cmodel = CM_32;\n     }\n-  if (ix86_asm_string != 0)\n+  if (TARGET_MACHO && ix86_asm_dialect == ASM_INTEL)\n     {\n-      if (! TARGET_MACHO\n-\t  && !strcmp (ix86_asm_string, \"intel\"))\n-\tix86_asm_dialect = ASM_INTEL;\n-      else if (!strcmp (ix86_asm_string, \"att\"))\n-\tix86_asm_dialect = ASM_ATT;\n-      else\n-\terror (\"bad value (%s) for %sasm=%s %s\",\n-\t       ix86_asm_string, prefix, suffix, sw);\n+      error (\"-masm=intel not supported in this configuration\");\n+      ix86_asm_dialect = ASM_ATT;\n     }\n-  if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n-    error (\"code model %qs not supported in the %s bit mode\",\n-\t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n   if ((TARGET_64BIT != 0) != ((ix86_isa_flags & OPTION_MASK_ISA_64BIT) != 0))\n     sorry (\"%i-bit mode not compiled in\",\n \t   (ix86_isa_flags & OPTION_MASK_ISA_64BIT) ? 64 : 32);\n@@ -3836,67 +3849,19 @@ ix86_option_override_internal (bool main_args_p)\n   init_machine_status = ix86_init_machine_status;\n \n   /* Validate -mregparm= value.  */\n-  if (ix86_regparm_string)\n+  if (global_options_set.x_ix86_regparm)\n     {\n       if (TARGET_64BIT)\n-\twarning (0, \"%sregparm%s is ignored in 64-bit mode\", prefix, suffix);\n-      i = atoi (ix86_regparm_string);\n-      if (i < 0 || i > REGPARM_MAX)\n-\terror (\"%sregparm=%d%s is not between 0 and %d\",\n-\t       prefix, i, suffix, REGPARM_MAX);\n-      else\n-\tix86_regparm = i;\n-    }\n-  if (TARGET_64BIT)\n-    ix86_regparm = REGPARM_MAX;\n-\n-  /* If the user has provided any of the -malign-* options,\n-     warn and use that value only if -falign-* is not set.\n-     Remove this code in GCC 3.2 or later.  */\n-  if (ix86_align_loops_string)\n-    {\n-      warning (0, \"%salign-loops%s is obsolete, use -falign-loops%s\",\n-\t       prefix, suffix, suffix);\n-      if (align_loops == 0)\n-\t{\n-\t  i = atoi (ix86_align_loops_string);\n-\t  if (i < 0 || i > MAX_CODE_ALIGN)\n-\t    error (\"%salign-loops=%d%s is not between 0 and %d\",\n-\t\t   prefix, i, suffix, MAX_CODE_ALIGN);\n-\t  else\n-\t    align_loops = 1 << i;\n-\t}\n-    }\n-\n-  if (ix86_align_jumps_string)\n-    {\n-      warning (0, \"%salign-jumps%s is obsolete, use -falign-jumps%s\",\n-\t       prefix, suffix, suffix);\n-      if (align_jumps == 0)\n+\twarning (0, \"-mregparm is ignored in 64-bit mode\");\n+      if (ix86_regparm > REGPARM_MAX)\n \t{\n-\t  i = atoi (ix86_align_jumps_string);\n-\t  if (i < 0 || i > MAX_CODE_ALIGN)\n-\t    error (\"%salign-loops=%d%s is not between 0 and %d\",\n-\t\t   prefix, i, suffix, MAX_CODE_ALIGN);\n-\t  else\n-\t    align_jumps = 1 << i;\n-\t}\n-    }\n-\n-  if (ix86_align_funcs_string)\n-    {\n-      warning (0, \"%salign-functions%s is obsolete, use -falign-functions%s\",\n-\t       prefix, suffix, suffix);\n-      if (align_functions == 0)\n-\t{\n-\t  i = atoi (ix86_align_funcs_string);\n-\t  if (i < 0 || i > MAX_CODE_ALIGN)\n-\t    error (\"%salign-loops=%d%s is not between 0 and %d\",\n-\t\t   prefix, i, suffix, MAX_CODE_ALIGN);\n-\t  else\n-\t    align_functions = 1 << i;\n+\t  error (\"-mregparm=%d is not between 0 and %d\",\n+\t\t ix86_regparm, REGPARM_MAX);\n+\t  ix86_regparm = 0;\n \t}\n     }\n+  if (TARGET_64BIT)\n+    ix86_regparm = REGPARM_MAX;\n \n   /* Default align_* from the processor table.  */\n   if (align_loops == 0)\n@@ -3914,42 +3879,9 @@ ix86_option_override_internal (bool main_args_p)\n       align_functions = processor_target_table[ix86_tune].align_func;\n     }\n \n-  /* Validate -mbranch-cost= value, or provide default.  */\n-  ix86_branch_cost = ix86_cost->branch_cost;\n-  if (ix86_branch_cost_string)\n-    {\n-      i = atoi (ix86_branch_cost_string);\n-      if (i < 0 || i > 5)\n-\terror (\"%sbranch-cost=%d%s is not between 0 and 5\", prefix, i, suffix);\n-      else\n-\tix86_branch_cost = i;\n-    }\n-  if (ix86_section_threshold_string)\n-    {\n-      i = atoi (ix86_section_threshold_string);\n-      if (i < 0)\n-\terror (\"%slarge-data-threshold=%d%s is negative\", prefix, i, suffix);\n-      else\n-\tix86_section_threshold = i;\n-    }\n-\n-  if (ix86_tls_dialect_string)\n-    {\n-      if (strcmp (ix86_tls_dialect_string, \"gnu\") == 0)\n-\tix86_tls_dialect = TLS_DIALECT_GNU;\n-      else if (strcmp (ix86_tls_dialect_string, \"gnu2\") == 0)\n-\tix86_tls_dialect = TLS_DIALECT_GNU2;\n-      else\n-\terror (\"bad value (%s) for %stls-dialect=%s %s\",\n-\t       ix86_tls_dialect_string, prefix, suffix, sw);\n-    }\n-\n-  if (ix87_precision_string)\n-    {\n-      i = atoi (ix87_precision_string);\n-      if (i != 32 && i != 64 && i != 80)\n-\terror (\"pc%d is not valid precision setting (32, 64 or 80)\", i);\n-    }\n+  /* Provide default for -mbranch-cost= value.  */\n+  if (!global_options_set.x_ix86_branch_cost)\n+    ix86_branch_cost = ix86_cost->branch_cost;\n \n   if (TARGET_64BIT)\n     {\n@@ -4015,23 +3947,24 @@ ix86_option_override_internal (bool main_args_p)\n   /* Validate -mpreferred-stack-boundary= value or default it to\n      PREFERRED_STACK_BOUNDARY_DEFAULT.  */\n   ix86_preferred_stack_boundary = PREFERRED_STACK_BOUNDARY_DEFAULT;\n-  if (ix86_preferred_stack_boundary_string)\n+  if (global_options_set.x_ix86_preferred_stack_boundary_arg)\n     {\n       int min = (TARGET_64BIT ? 4 : 2);\n       int max = (TARGET_SEH ? 4 : 12);\n \n-      i = atoi (ix86_preferred_stack_boundary_string);\n-      if (i < min || i > max)\n+      if (ix86_preferred_stack_boundary_arg < min\n+\t  || ix86_preferred_stack_boundary_arg > max)\n \t{\n \t  if (min == max)\n-\t    error (\"%spreferred-stack-boundary%s is not supported \"\n-\t\t   \"for this target\", prefix, suffix);\n+\t    error (\"-mpreferred-stack-boundary is not supported \"\n+\t\t   \"for this target\");\n \t  else\n-\t    error (\"%spreferred-stack-boundary=%d%s is not between %d and %d\",\n-\t\t   prefix, i, suffix, min, max);\n+\t    error (\"-mpreferred-stack-boundary=%d is not between %d and %d\",\n+\t\t   ix86_preferred_stack_boundary_arg, min, max);\n \t}\n       else\n-\tix86_preferred_stack_boundary = (1 << i) * BITS_PER_UNIT;\n+\tix86_preferred_stack_boundary\n+\t  = (1 << ix86_preferred_stack_boundary_arg) * BITS_PER_UNIT;\n     }\n \n   /* Set the default value for -mstackrealign.  */\n@@ -4043,15 +3976,16 @@ ix86_option_override_internal (bool main_args_p)\n   /* Validate -mincoming-stack-boundary= value or default it to\n      MIN_STACK_BOUNDARY/PREFERRED_STACK_BOUNDARY.  */\n   ix86_incoming_stack_boundary = ix86_default_incoming_stack_boundary;\n-  if (ix86_incoming_stack_boundary_string)\n+  if (global_options_set.x_ix86_incoming_stack_boundary_arg)\n     {\n-      i = atoi (ix86_incoming_stack_boundary_string);\n-      if (i < (TARGET_64BIT ? 4 : 2) || i > 12)\n+      if (ix86_incoming_stack_boundary_arg < (TARGET_64BIT ? 4 : 2)\n+\t  || ix86_incoming_stack_boundary_arg > 12)\n \terror (\"-mincoming-stack-boundary=%d is not between %d and 12\",\n-\t       i, TARGET_64BIT ? 4 : 2);\n+\t       ix86_incoming_stack_boundary_arg, TARGET_64BIT ? 4 : 2);\n       else\n \t{\n-\t  ix86_user_incoming_stack_boundary = (1 << i) * BITS_PER_UNIT;\n+\t  ix86_user_incoming_stack_boundary\n+\t    = (1 << ix86_incoming_stack_boundary_arg) * BITS_PER_UNIT;\n \t  ix86_incoming_stack_boundary\n \t    = ix86_user_incoming_stack_boundary;\n \t}\n@@ -4106,17 +4040,20 @@ ix86_option_override_internal (bool main_args_p)\n     target_flags &= ~MASK_FLOAT_RETURNS;\n \n   /* Use external vectorized library in vectorizing intrinsics.  */\n-  if (ix86_veclibabi_string)\n-    {\n-      if (strcmp (ix86_veclibabi_string, \"svml\") == 0)\n+  if (global_options_set.x_ix86_veclibabi_type)\n+    switch (ix86_veclibabi_type)\n+      {\n+      case ix86_veclibabi_type_svml:\n \tix86_veclib_handler = ix86_veclibabi_svml;\n-      else if (strcmp (ix86_veclibabi_string, \"acml\") == 0)\n+\tbreak;\n+\n+      case ix86_veclibabi_type_acml:\n \tix86_veclib_handler = ix86_veclibabi_acml;\n-      else\n-\terror (\"unknown vectorization library ABI type (%s) for \"\n-\t       \"%sveclibabi=%s %s\", ix86_veclibabi_string,\n-\t       prefix, suffix, sw);\n-    }\n+\tbreak;\n+\n+      default:\n+\tgcc_unreachable ();\n+      }\n \n   if ((!USE_IX86_FRAME_POINTER\n        || (x86_accumulate_outgoing_args & ix86_tune_mask))\n@@ -20874,8 +20811,8 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n     algs = &cost->memset[TARGET_64BIT != 0];\n   else\n     algs = &cost->memcpy[TARGET_64BIT != 0];\n-  if (stringop_alg != no_stringop && ALG_USABLE_P (stringop_alg))\n-    return stringop_alg;\n+  if (ix86_stringop_alg != no_stringop && ALG_USABLE_P (ix86_stringop_alg))\n+    return ix86_stringop_alg;\n   /* rep; movq or rep; movl is the smallest variant.  */\n   else if (!optimize_for_speed)\n     {"}, {"sha": "f3b0cb9acd1c2be371d85a0324e41efee9d8c828", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7eb68c06bc212068030903b2a9fe6e93660ee0cc", "patch": "@@ -79,18 +79,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"config/vxworks-dummy.h\"\n \n-/* Algorithm to expand string function with.  */\n-enum stringop_alg\n-{\n-   no_stringop,\n-   libcall,\n-   rep_prefix_1_byte,\n-   rep_prefix_4_byte,\n-   rep_prefix_8_byte,\n-   loop_1_byte,\n-   loop,\n-   unrolled_loop\n-};\n+#include \"config/i386/i386-opts.h\"\n \n #define MAX_STRINGOP_ALGS 4\n \n@@ -506,16 +495,6 @@ extern tree x86_mfence;\n /* This is re-defined by cygming.h.  */\n #define TARGET_SEH 0\n \n-/* Available call abi.  */\n-enum calling_abi\n-{\n-  SYSV_ABI = 0,\n-  MS_ABI = 1\n-};\n-\n-/* The abi used by target.  */\n-extern enum calling_abi ix86_abi;\n-\n /* The default abi used by target.  */\n #define DEFAULT_ABI SYSV_ABI\n \n@@ -2058,42 +2037,13 @@ enum fpmath_unit\n \n extern enum fpmath_unit ix86_fpmath;\n \n-enum tls_dialect\n-{\n-  TLS_DIALECT_GNU,\n-  TLS_DIALECT_GNU2,\n-  TLS_DIALECT_SUN\n-};\n-\n-extern enum tls_dialect ix86_tls_dialect;\n-\n-enum cmodel {\n-  CM_32,\t/* The traditional 32-bit ABI.  */\n-  CM_SMALL,\t/* Assumes all code and data fits in the low 31 bits.  */\n-  CM_KERNEL,\t/* Assumes all code and data fits in the high 31 bits.  */\n-  CM_MEDIUM,\t/* Assumes code fits in the low 31 bits; data unlimited.  */\n-  CM_LARGE,\t/* No assumptions.  */\n-  CM_SMALL_PIC,\t/* Assumes code+data+got/plt fits in a 31 bit region.  */\n-  CM_MEDIUM_PIC,/* Assumes code+got/plt fits in a 31 bit region.  */\n-  CM_LARGE_PIC\t/* No assumptions.  */\n-};\n-\n-extern enum cmodel ix86_cmodel;\n-\n /* Size of the RED_ZONE area.  */\n #define RED_ZONE_SIZE 128\n /* Reserved area of the red zone for temporaries.  */\n #define RED_ZONE_RESERVE 8\n \n-enum asm_dialect {\n-  ASM_ATT,\n-  ASM_INTEL\n-};\n-\n-extern enum asm_dialect ix86_asm_dialect;\n extern unsigned int ix86_preferred_stack_boundary;\n extern unsigned int ix86_incoming_stack_boundary;\n-extern int ix86_branch_cost, ix86_section_threshold;\n \n /* Smallest class containing REGNO.  */\n extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER];"}, {"sha": "ea40dd7e5c9f40d34473d8339fd6ff75b3e9ef3a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 112, "deletions": 17, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb68c06bc212068030903b2a9fe6e93660ee0cc/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=7eb68c06bc212068030903b2a9fe6e93660ee0cc", "patch": "@@ -19,6 +19,9 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/i386/i386-opts.h\n+\n ; Bit flags that specify the ISA we are compiling for.\n Variable\n int ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT\n@@ -87,15 +90,15 @@ Target Report Mask(ALIGN_DOUBLE) Save\n Align some doubles on dword boundary\n \n malign-functions=\n-Target RejectNegative Joined Var(ix86_align_funcs_string)\n+Target RejectNegative Joined UInteger\n Function starts are aligned to this power of 2\n \n malign-jumps=\n-Target RejectNegative Joined Var(ix86_align_jumps_string)\n+Target RejectNegative Joined UInteger\n Jump targets are aligned to this power of 2\n \n malign-loops=\n-Target RejectNegative Joined Var(ix86_align_loops_string)\n+Target RejectNegative Joined UInteger\n Loop code aligned to this power of 2\n \n malign-stringops\n@@ -107,21 +110,50 @@ Target RejectNegative Joined Var(ix86_arch_string)\n Generate code for given CPU\n \n masm=\n-Target RejectNegative Joined Var(ix86_asm_string)\n+Target RejectNegative Joined Enum(asm_dialect) Var(ix86_asm_dialect) Init(ASM_ATT)\n Use given assembler dialect\n \n+Enum\n+Name(asm_dialect) Type(enum asm_dialect)\n+Known assembler dialects (for use with the -masm-dialect= option):\n+\n+EnumValue\n+Enum(asm_dialect) String(intel) Value(ASM_INTEL)\n+\n+EnumValue\n+Enum(asm_dialect) String(att) Value(ASM_ATT)\n+\n mbranch-cost=\n-Target RejectNegative Joined Var(ix86_branch_cost_string)\n+Target RejectNegative Joined UInteger Var(ix86_branch_cost)\n Branches are this expensive (1-5, arbitrary units)\n \n mlarge-data-threshold=\n-Target RejectNegative Joined Var(ix86_section_threshold_string)\n+Target RejectNegative Joined UInteger Var(ix86_section_threshold) Init(65536)\n Data greater than given threshold will go into .ldata section in x86-64 medium model\n \n mcmodel=\n-Target RejectNegative Joined Var(ix86_cmodel_string)\n+Target RejectNegative Joined Enum(cmodel) Var(ix86_cmodel) Init(CM_32)\n Use given x86-64 code model\n \n+Enum\n+Name(cmodel) Type(enum cmodel)\n+Known code models (for use with the -mcmodel= option):\n+\n+EnumValue\n+Enum(cmodel) String(small) Value(CM_SMALL)\n+\n+EnumValue\n+Enum(cmodel) String(medium) Value(CM_MEDIUM)\n+\n+EnumValue\n+Enum(cmodel) String(large) Value(CM_LARGE)\n+\n+EnumValue\n+Enum(cmodel) String(32) Value(CM_32)\n+\n+EnumValue\n+Enum(cmodel) String(kernel) Value(CM_KERNEL)\n+\n mcpu=\n Target RejectNegative Joined Undocumented Alias(mtune=) Warn(%<-mcpu=%> is deprecated; use %<-mtune=%> or %<-march=%> instead)\n \n@@ -181,16 +213,24 @@ momit-leaf-frame-pointer\n Target Report Mask(OMIT_LEAF_FRAME_POINTER) Save\n Omit the frame pointer in leaf functions\n \n-mpc\n-Target RejectNegative Report Joined Var(ix87_precision_string)\n-Set 80387 floating-point precision (-mpc32, -mpc64, -mpc80)\n+mpc32\n+Target RejectNegative Report\n+Set 80387 floating-point precision to 32-bit\n+\n+mpc64\n+Target RejectNegative Report\n+Set 80387 floating-point precision to 64-bit\n+\n+mpc80\n+Target RejectNegative Report\n+Set 80387 floating-point precision to 80-bit\n \n mpreferred-stack-boundary=\n-Target RejectNegative Joined Var(ix86_preferred_stack_boundary_string)\n+Target RejectNegative Joined UInteger Var(ix86_preferred_stack_boundary_arg)\n Attempt to keep stack aligned to this power of 2\n \n mincoming-stack-boundary=\n-Target RejectNegative Joined Var(ix86_incoming_stack_boundary_string)\n+Target RejectNegative Joined UInteger Var(ix86_incoming_stack_boundary_arg)\n Assume incoming stack aligned to this power of 2\n \n mpush-args\n@@ -202,7 +242,7 @@ Target RejectNegative Report InverseMask(NO_RED_ZONE, RED_ZONE) Save\n Use red-zone in the x86-64 code\n \n mregparm=\n-Target RejectNegative Joined Var(ix86_regparm_string)\n+Target RejectNegative Joined UInteger Var(ix86_regparm)\n Number of registers used to pass integer arguments\n \n mrtd\n@@ -226,13 +266,48 @@ Target Report Mask(STACK_PROBE) Save\n Enable stack probing\n \n mstringop-strategy=\n-Target RejectNegative Joined Var(ix86_stringop_string)\n+Target RejectNegative Joined Enum(stringop_alg) Var(ix86_stringop_alg) Init(no_stringop)\n Chose strategy to generate stringop using\n \n+Enum\n+Name(stringop_alg) Type(enum stringop_alg)\n+Valid arguments to -mstringop-strategy=:\n+\n+EnumValue\n+Enum(stringop_alg) String(rep_byte) Value(rep_prefix_1_byte)\n+\n+EnumValue\n+Enum(stringop_alg) String(libcall) Value(libcall)\n+\n+EnumValue\n+Enum(stringop_alg) String(rep_4byte) Value(rep_prefix_4_byte)\n+\n+EnumValue\n+Enum(stringop_alg) String(rep_8byte) Value(rep_prefix_8_byte)\n+\n+EnumValue\n+Enum(stringop_alg) String(byte_loop) Value(loop_1_byte)\n+\n+EnumValue\n+Enum(stringop_alg) String(loop) Value(loop)\n+\n+EnumValue\n+Enum(stringop_alg) String(unrolled_loop) Value(unrolled_loop)\n+\n mtls-dialect=\n-Target RejectNegative Joined Var(ix86_tls_dialect_string)\n+Target RejectNegative Joined Var(ix86_tls_dialect) Enum(tls_dialect) Init(TLS_DIALECT_GNU)\n Use given thread-local storage dialect\n \n+Enum\n+Name(tls_dialect) Type(enum tls_dialect)\n+Known TLS dialects (for use with the -mtls-dialect= option):\n+\n+EnumValue\n+Enum(tls_dialect) String(gnu) Value(TLS_DIALECT_GNU)\n+\n+EnumValue\n+Enum(tls_dialect) String(gnu2) Value(TLS_DIALECT_GNU2)\n+\n mtls-direct-seg-refs\n Target Report Mask(TLS_DIRECT_SEG_REFS)\n Use direct references against %gs when accessing tls data\n@@ -242,13 +317,33 @@ Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n mabi=\n-Target RejectNegative Joined Var(ix86_abi_string)\n+Target RejectNegative Joined Var(ix86_abi) Enum(calling_abi) Init(SYSV_ABI)\n Generate code that conforms to the given ABI\n \n+Enum\n+Name(calling_abi) Type(enum calling_abi)\n+Known ABIs (for use with the -mabi= option):\n+\n+EnumValue\n+Enum(calling_abi) String(sysv) Value(SYSV_ABI)\n+\n+EnumValue\n+Enum(calling_abi) String(ms) Value(MS_ABI)\n+\n mveclibabi=\n-Target RejectNegative Joined Var(ix86_veclibabi_string)\n+Target RejectNegative Joined Var(ix86_veclibabi_type) Enum(ix86_veclibabi) Init(ix86_veclibabi_type_none)\n Vector library ABI to use\n \n+Enum\n+Name(ix86_veclibabi) Type(enum ix86_veclibabi)\n+Known vectorization library ABIs (for use with the -mveclibabi= option):\n+\n+EnumValue\n+Enum(ix86_veclibabi) String(svml) Value(ix86_veclibabi_type_svml)\n+\n+EnumValue\n+Enum(ix86_veclibabi) String(acml) Value(ix86_veclibabi_type_acml)\n+\n mvect8-ret-in-mem\n Target Report Mask(VECT8_RETURNS) Save\n Return 8-byte vectors in memory"}]}