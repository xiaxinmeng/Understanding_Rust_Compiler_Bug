{"sha": "801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxYjIyNjZkZWU3YmM2NjliY2FiMGZmNjQ1YTBiMzZmYTlkY2ZkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-12T14:52:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-12T14:52:09Z"}, "message": "Improve static_assert messages for std::variant\n\nAlso fix a warning with -Wunused-parameter -Wsystem-headers.\n\n\t* include/std/variant (get<T>, get<N>, get_if<N>, get_if<T>)\n\t(variant::emplace): Change static_assert messages from \"should be\"\n\tto \"must be\".\n\t(hash<monostate>::operator()): Remove name of unused parameter.\n\nFrom-SVN: r272188", "tree": {"sha": "c1bd3ea63d649ed705d2067d502bc318cef4dcac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1bd3ea63d649ed705d2067d502bc318cef4dcac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce657a74143a11bfa43f5d334b11b57954568f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce657a74143a11bfa43f5d334b11b57954568f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce657a74143a11bfa43f5d334b11b57954568f12"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "8895dca06deed33b53b93c86df6b635396d3c20f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "patch": "@@ -1,5 +1,10 @@\n 2019-06-12  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/variant (get<T>, get<N>, get_if<N>, get_if<T>)\n+\t(variant::emplace): Change static_assert messages from \"should be\"\n+\tto \"must be\".\n+\t(hash<monostate>::operator()): Remove name of unused parameter.\n+\n \t* include/std/mutex (scoped_lock::~scoped_lock()): Use fold\n \texpression.\n "}, {"sha": "c86b0c8ccf31669347e82ee6263f7cbcbe7bbb77", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801b2266dee7bc669bcab0ff645a0b36fa9dcfd5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=801b2266dee7bc669bcab0ff645a0b36fa9dcfd5", "patch": "@@ -1074,7 +1074,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n \n@@ -1083,7 +1083,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n     }\n@@ -1093,7 +1093,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n \n@@ -1102,7 +1102,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n     }\n@@ -1113,8 +1113,8 @@ namespace __variant\n     {\n       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n-      static_assert(!is_void_v<_Alternative_type>, \"_Tp should not be void\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n+      static_assert(!is_void_v<_Alternative_type>, \"_Tp must not be void\");\n       if (__ptr && __ptr->index() == _Np)\n \treturn std::addressof(__detail::__variant::__get<_Np>(*__ptr));\n       return nullptr;\n@@ -1127,8 +1127,8 @@ namespace __variant\n     {\n       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n-      static_assert(!is_void_v<_Alternative_type>, \"_Tp should not be void\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n+      static_assert(!is_void_v<_Alternative_type>, \"_Tp must not be void\");\n       if (__ptr && __ptr->index() == _Np)\n \treturn std::addressof(__detail::__variant::__get<_Np>(*__ptr));\n       return nullptr;\n@@ -1140,7 +1140,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \t  __ptr);\n     }\n@@ -1151,7 +1151,7 @@ namespace __variant\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T must occur exactly once in alternatives\");\n-      static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n+      static_assert(!is_void_v<_Tp>, \"_Tp must not be void\");\n       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \t  __ptr);\n     }\n@@ -1421,7 +1421,7 @@ namespace __variant\n \templace(_Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n-\t\t\t\"The index should be in [0, number of alternatives)\");\n+\t\t\t\"The index must be in [0, number of alternatives)\");\n \t  using type = variant_alternative_t<_Np, variant>;\n \t  // Provide the strong exception-safety guarantee when possible,\n \t  // to avoid becoming valueless.\n@@ -1474,7 +1474,7 @@ namespace __variant\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n-\t\t\t\"The index should be in [0, number of alternatives)\");\n+\t\t\t\"The index must be in [0, number of alternatives)\");\n \t  using type = variant_alternative_t<_Np, variant>;\n \t  // Provide the strong exception-safety guarantee when possible,\n \t  // to avoid becoming valueless.\n@@ -1602,7 +1602,7 @@ namespace __variant\n     get(variant<_Types...>& __v)\n     {\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n \t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(__v);\n@@ -1613,7 +1613,7 @@ namespace __variant\n     get(variant<_Types...>&& __v)\n     {\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n \t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(std::move(__v));\n@@ -1624,7 +1624,7 @@ namespace __variant\n     get(const variant<_Types...>& __v)\n     {\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n \t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(__v);\n@@ -1635,7 +1635,7 @@ namespace __variant\n     get(const variant<_Types...>&& __v)\n     {\n       static_assert(_Np < sizeof...(_Types),\n-\t\t    \"The index should be in [0, number of alternatives)\");\n+\t\t    \"The index must be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n \t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(std::move(__v));\n@@ -1730,7 +1730,7 @@ namespace __variant\n       using argument_type [[__deprecated__]] = monostate;\n \n       size_t\n-      operator()(const monostate& __t) const noexcept\n+      operator()(const monostate&) const noexcept\n       {\n \tconstexpr size_t __magic_monostate_hash = -7777;\n \treturn __magic_monostate_hash;"}]}