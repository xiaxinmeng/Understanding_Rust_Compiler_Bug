{"sha": "077438933cf94f00cc5edf974338c11ba4bf7a39", "node_id": "C_kwDOANBUbNoAKDA3NzQzODkzM2NmOTRmMDBjYzVlZGY5NzQzMzhjMTFiYTRiZjdhMzk", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-13T16:28:43Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-14T00:25:48Z"}, "message": "xtensa: Optimize bitwise AND operation with some specific forms of constants\n\nThis patch offers several insn-and-split patterns for bitwise AND with\nregister and constant that can be represented as:\n\ni.   1's least significant N bits and the others 0's (17 <= N <= 31)\nii.  1's most significant N bits and the others 0's (12 <= N <= 31)\niii. M 1's sequence of bits and trailing N 0's bits, that cannot fit into a\n\t\"MOVI Ax, simm12\" instruction (1 <= M <= 16, 1 <= N <= 30)\n\nAnd also offers shortcuts for conditional branch if each of the abovementioned\noperations is (not) equal to zero.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/predicates.md (shifted_mask_operand):\n\tNew predicate.\n\t* config/xtensa/xtensa.md (*andsi3_const_pow2_minus_one):\n\tNew insn-and-split pattern.\n\t(*andsi3_const_negative_pow2, *andsi3_const_shifted_mask,\n\t*masktrue_const_pow2_minus_one, *masktrue_const_negative_pow2,\n\t*masktrue_const_shifted_mask): Ditto.", "tree": {"sha": "3aaa6644fecdbe2930ae77cfe889f41fa938acc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aaa6644fecdbe2930ae77cfe889f41fa938acc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077438933cf94f00cc5edf974338c11ba4bf7a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077438933cf94f00cc5edf974338c11ba4bf7a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077438933cf94f00cc5edf974338c11ba4bf7a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077438933cf94f00cc5edf974338c11ba4bf7a39/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ce04ca353bb0cda8321b91a77c2477e26d339b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ce04ca353bb0cda8321b91a77c2477e26d339b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ce04ca353bb0cda8321b91a77c2477e26d339b"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "d63a6cf034c6103cbdeb255dfb49ba556ebb22aa", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077438933cf94f00cc5edf974338c11ba4bf7a39/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077438933cf94f00cc5edf974338c11ba4bf7a39/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=077438933cf94f00cc5edf974338c11ba4bf7a39", "patch": "@@ -52,6 +52,16 @@\n \t    (match_test \"xtensa_mask_immediate (INTVAL (op))\"))\n        (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"shifted_mask_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT mask = INTVAL (op);\n+  int shift = ctz_hwi (mask);\n+\n+  return IN_RANGE (shift, 1, 31)\n+\t && xtensa_mask_immediate ((uint32_t)mask >> shift);\n+})\n+\n (define_predicate \"extui_fldsz_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, 16)\")))"}, {"sha": "5d0f346b01a803d34773f3376e1398b982184b27", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077438933cf94f00cc5edf974338c11ba4bf7a39/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077438933cf94f00cc5edf974338c11ba4bf7a39/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=077438933cf94f00cc5edf974338c11ba4bf7a39", "patch": "@@ -645,6 +645,83 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6\")])\n \n+(define_insn_and_split \"*andsi3_const_pow2_minus_one\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"i\")))]\n+  \"IN_RANGE (exact_log2 (INTVAL (operands[2]) + 1), 17, 31)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(ashift:SI (match_dup 1)\n+\t\t   (match_dup 2)))\n+   (set (match_dup 0)\n+\t(lshiftrt:SI (match_dup 0)\n+\t\t     (match_dup 2)))]\n+{\n+  operands[2] = GEN_INT (32 - floor_log2 (INTVAL (operands[2]) + 1));\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\n+\t\t\t\t   && INTVAL (operands[2]) == 0x7FFFFFFF\")\n+\t\t      (const_int 5)\n+\t\t      (const_int 6)))])\n+\n+(define_insn_and_split \"*andsi3_const_negative_pow2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"i\")))]\n+  \"IN_RANGE (exact_log2 (-INTVAL (operands[2])), 12, 31)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(lshiftrt:SI (match_dup 1)\n+\t\t     (match_dup 2)))\n+   (set (match_dup 0)\n+\t(ashift:SI (match_dup 0)\n+\t\t   (match_dup 2)))]\n+{\n+  operands[2] = GEN_INT (floor_log2 (-INTVAL (operands[2])));\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn_and_split \"*andsi3_const_shifted_mask\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"shifted_mask_operand\" \"i\")))]\n+  \"! xtensa_simm12b (INTVAL (operands[2]))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(zero_extract:SI (match_dup 1)\n+\t\t\t (match_dup 3)\n+\t\t\t (match_dup 4)))\n+   (set (match_dup 0)\n+\t(ashift:SI (match_dup 0)\n+\t\t   (match_dup 2)))]\n+{\n+  HOST_WIDE_INT mask = INTVAL (operands[2]);\n+  int shift = ctz_hwi (mask);\n+  int mask_size = floor_log2 (((uint32_t)mask >> shift) + 1);\n+  int mask_pos = shift;\n+  if (BITS_BIG_ENDIAN)\n+    mask_pos = (32 - (mask_size + shift)) & 0x1f;\n+  operands[2] = GEN_INT (shift);\n+  operands[3] = GEN_INT (mask_size);\n+  operands[4] = GEN_INT (mask_pos);\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\n+\t\t\t\t   && ctz_hwi (INTVAL (operands[2])) == 1\")\n+\t\t      (const_int 5)\n+\t\t      (const_int 6)))])\n+\n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n@@ -1649,6 +1726,108 @@\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n+(define_insn_and_split \"*masktrue_const_pow2_minus_one\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"boolean_operator\"\n+\t\t\t[(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"IN_RANGE (exact_log2 (INTVAL (operands[1]) + 1), 17, 31)\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 4)\n+\t(ashift:SI (match_dup 0)\n+\t\t   (match_dup 1)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3\n+\t\t\t[(match_dup 4)\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+{\n+  operands[1] = GEN_INT (32 - floor_log2 (INTVAL (operands[1]) + 1));\n+  operands[4] = gen_reg_rtx (SImode);\n+}\n+  [(set_attr \"type\"\t\"jump\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\n+\t\t\t\t   && INTVAL (operands[1]) == 0x7FFFFFFF\")\n+\t\t      (const_int 5)\n+\t\t      (const_int 6)))])\n+\n+(define_insn_and_split \"*masktrue_const_negative_pow2\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"boolean_operator\"\n+\t\t\t[(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"IN_RANGE (exact_log2 (-INTVAL (operands[1])), 12, 30)\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 4)\n+\t(lshiftrt:SI (match_dup 0)\n+\t\t     (match_dup 1)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3\n+\t\t\t[(match_dup 4)\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+{\n+  operands[1] = GEN_INT (floor_log2 (-INTVAL (operands[1])));\n+  operands[4] = gen_reg_rtx (SImode);\n+}\n+  [(set_attr \"type\"\t\"jump\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn_and_split \"*masktrue_const_shifted_mask\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 4 \"boolean_operator\"\n+\t\t\t[(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:SI 1 \"shifted_mask_operand\" \"i\"))\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(INTVAL (operands[2]) & ((1 << ctz_hwi (INTVAL (operands[1]))) - 1)) == 0\n+   && xtensa_b4const_or_zero ((uint32_t)INTVAL (operands[2]) >> ctz_hwi (INTVAL (operands[1])))\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 6)\n+\t(zero_extract:SI (match_dup 0)\n+\t\t\t (match_dup 5)\n+\t\t\t (match_dup 1)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 4\n+\t\t\t[(match_dup 6)\n+\t\t\t (match_dup 2)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  HOST_WIDE_INT mask = INTVAL (operands[1]);\n+  int shift = ctz_hwi (mask);\n+  int mask_size = floor_log2 (((uint32_t)mask >> shift) + 1);\n+  int mask_pos = shift;\n+  if (BITS_BIG_ENDIAN)\n+    mask_pos = (32 - (mask_size + shift)) & 0x1f;\n+  operands[1] = GEN_INT (mask_pos);\n+  operands[2] = GEN_INT ((uint32_t)INTVAL (operands[2]) >> shift);\n+  operands[5] = GEN_INT (mask_size);\n+  operands[6] = gen_reg_rtx (SImode);\n+}\n+  [(set_attr \"type\"\t\"jump\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\n+\t\t\t\t   && (uint32_t)INTVAL (operands[2]) >> ctz_hwi (INTVAL (operands[1])) == 0\")\n+\t\t      (const_int 5)\n+\t\t      (const_int 6)))])\n+\n \n ;; Zero-overhead looping support.\n "}]}