{"sha": "95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4MzFjMDFhMjFhMmI2YWFkMTZmN2I2ZTFhYTQyYTA2MmMyYWI0ZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2016-02-03T17:58:34Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2016-02-03T17:58:34Z"}, "message": "re PR target/69461 (ICE in lra_set_insn_recog_data, at lra.c:964)\n\n2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n\t    Alexandre Oliva  <aoliva@redhat.com>\n\n\tPR target/69461\n\t* lra-constraints.c (simplify_operand_subreg): Check additionally\n\taddress validity after potential reloading.\n\t(process_address_1): Check insns validity.  In case of failure do\n\tnothing.\n\n2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n\t    Alexandre Oliva  <aoliva@redhat.com>\n\n\tPR target/69461\n\t* gcc.target/powerpc/pr69461.c: New.\n\n\nCo-Authored-By: Alexandre Oliva <aoliva@redhat.com>\n\nFrom-SVN: r233107", "tree": {"sha": "1f5494807f8318b08e22017de985210f062be336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f5494807f8318b08e22017de985210f062be336"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccc71ab85a5737ed554c8586d7e1900897c16b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc71ab85a5737ed554c8586d7e1900897c16b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc71ab85a5737ed554c8586d7e1900897c16b86"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "720dfeb1a9273a25f03ceee8defba0d6b09308b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "patch": "@@ -1,3 +1,12 @@\n+2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/69461\n+\t* lra-constraints.c (simplify_operand_subreg): Check additionally\n+\taddress validity after potential reloading.\n+\t(process_address_1): Check insns validity.  In case of failure do\n+\tnothing.\n+\n 2016-02-03  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/69118"}, {"sha": "08cf0aa6c4208bb60ba5071bad1255d587f1cb4a", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "patch": "@@ -1411,6 +1411,21 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t  || valid_address_p (GET_MODE (subst), XEXP (subst, 0),\n \t\t\t      MEM_ADDR_SPACE (subst)))\n \treturn true;\n+      else if ((get_constraint_type (lookup_constraint\n+\t\t\t\t     (curr_static_id->operand[nop].constraint))\n+\t\t!= CT_SPECIAL_MEMORY)\n+\t       /* We still can reload address and if the address is\n+\t\t  valid, we can remove subreg without reloading its\n+\t\t  inner memory.  */\n+\t       && valid_address_p (GET_MODE (subst),\n+\t\t\t\t   regno_reg_rtx\n+\t\t\t\t   [ira_class_hard_regs\n+\t\t\t\t    [base_reg_class (GET_MODE (subst),\n+\t\t\t\t\t\t     MEM_ADDR_SPACE (subst),\n+\t\t\t\t\t\t     ADDRESS, SCRATCH)][0]],\n+\t\t\t\t   MEM_ADDR_SPACE (subst)))\n+\treturn true;\n+\n       /* If the address was valid and became invalid, prefer to reload\n \t the memory.  Typical case is when the index scale should\n \t correspond the memory.  */\n@@ -2958,6 +2973,8 @@ process_address_1 (int nop, bool check_only_p,\n     {\n       if (ad.index == NULL)\n \t{\n+\t  rtx_insn *insn;\n+\t  rtx_insn *last = get_last_insn ();\n \t  int code = -1;\n \t  enum reg_class cl = base_reg_class (ad.mode, ad.as,\n \t\t\t\t\t      SCRATCH, SCRATCH);\n@@ -2966,9 +2983,6 @@ process_address_1 (int nop, bool check_only_p,\n \t  new_reg = lra_create_new_reg (Pmode, NULL_RTX, cl, \"addr\");\n \t  if (HAVE_lo_sum)\n \t    {\n-\t      rtx_insn *insn;\n-\t      rtx_insn *last = get_last_insn ();\n-\n \t      /* addr => lo_sum (new_base, addr), case (2) above.  */\n \t      insn = emit_insn (gen_rtx_SET\n \t\t\t\t(new_reg,\n@@ -3004,6 +3018,20 @@ process_address_1 (int nop, bool check_only_p,\n \t    {\n \t      /* addr => new_base, case (2) above.  */\n \t      lra_emit_move (new_reg, addr);\n+\n+\t      for (insn = last == NULL_RTX ? get_insns () : NEXT_INSN (last);\n+\t\t   insn != NULL_RTX;\n+\t\t   insn = NEXT_INSN (insn))\n+\t\tif (recog_memoized (insn) < 0)\n+\t\t  break;\n+\t      if (insn != NULL_RTX)\n+\t\t{\n+\t\t  /* Do nothing if we cannot generate right insns.\n+\t\t     This is analogous to reload pass behaviour.  */\n+\t\t  delete_insns_since (last);\n+\t\t  end_sequence ();\n+\t\t  return false;\n+\t\t}\n \t      *ad.inner = new_reg;\n \t    }\n \t}"}, {"sha": "5bee4474de791d9e59dd061d8dc00c61b9c91151", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "patch": "@@ -1,3 +1,9 @@\n+2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/69461\n+\t* gcc.target/powerpc/pr69461.c: New.\n+\n 2016-02-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/tsan-dg.exp (tsan_init): Move check if tsan executable"}, {"sha": "406e7049d2994f381c911621c39404680ceed21b", "filename": "gcc/testsuite/gcc.target/powerpc/pr69461.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69461.c?ref=95831c01a21a2b6aad16f7b6e1aa42a062c2ab4e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mlra\" } */\n+\n+extern void _setjmp (void);\n+typedef struct {\n+  double real;\n+  double imag;\n+} Py_complex;\n+Py_complex a;\n+Py_complex fn1();\n+Py_complex fn2() { return fn1(); }\n+void fn3() {\n+  _setjmp();\n+  a = fn2();\n+}"}]}