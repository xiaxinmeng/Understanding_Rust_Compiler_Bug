{"sha": "57517ca4262d733e93469658231209def4bd83fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1MTdjYTQyNjJkNzMzZTkzNDY5NjU4MjMxMjA5ZGVmNGJkODNmYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-03-10T18:39:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-03-10T18:39:52Z"}, "message": "Fix out-of-bounds write in RTL function reader (PR bootstrap/79952)\n\ngcc/ChangeLog:\n\tPR bootstrap/79952\n\t* read-rtl-function.c (function_reader::read_rtx_operand): Update\n\tx with result of extra_parsing_for_operand_code_0.\n\t(function_reader::extra_parsing_for_operand_code_0): Convert\n\treturn type from void to rtx, returning x.  When reading\n\tSYMBOL_REF with SYMBOL_FLAG_HAS_BLOCK_INFO, reallocate x to the\n\tlarger size containing struct block_symbol.\n\nFrom-SVN: r246044", "tree": {"sha": "96eb6f4b76de81ad43ddb472cc8b3b05b62e1832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96eb6f4b76de81ad43ddb472cc8b3b05b62e1832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57517ca4262d733e93469658231209def4bd83fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57517ca4262d733e93469658231209def4bd83fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57517ca4262d733e93469658231209def4bd83fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57517ca4262d733e93469658231209def4bd83fc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7502c5970d0af6cc71c2a906d55d95a31322bc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7502c5970d0af6cc71c2a906d55d95a31322bc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7502c5970d0af6cc71c2a906d55d95a31322bc07"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "25737a3567956d73fa7c64837f976d807558e74e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57517ca4262d733e93469658231209def4bd83fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57517ca4262d733e93469658231209def4bd83fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57517ca4262d733e93469658231209def4bd83fc", "patch": "@@ -1,3 +1,13 @@\n+2017-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR bootstrap/79952\n+\t* read-rtl-function.c (function_reader::read_rtx_operand): Update\n+\tx with result of extra_parsing_for_operand_code_0.\n+\t(function_reader::extra_parsing_for_operand_code_0): Convert\n+\treturn type from void to rtx, returning x.  When reading\n+\tSYMBOL_REF with SYMBOL_FLAG_HAS_BLOCK_INFO, reallocate x to the\n+\tlarger size containing struct block_symbol.\n+\n 2017-03-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Disallow"}, {"sha": "c50279719542c5a631d97dadf26d2e3d782ef341", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57517ca4262d733e93469658231209def4bd83fc/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57517ca4262d733e93469658231209def4bd83fc/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=57517ca4262d733e93469658231209def4bd83fc", "patch": "@@ -103,7 +103,7 @@ class function_reader : public rtx_reader\n   void read_rtx_operand_u (rtx x, int idx);\n   void read_rtx_operand_i_or_n (rtx x, int idx, char format_char);\n   rtx read_rtx_operand_r (rtx x);\n-  void extra_parsing_for_operand_code_0 (rtx x, int idx);\n+  rtx extra_parsing_for_operand_code_0 (rtx x, int idx);\n \n   void add_fixup_insn_uid (file_location loc, rtx insn, int operand_idx,\n \t\t\t   int insn_uid);\n@@ -923,7 +923,7 @@ function_reader::read_rtx_operand (rtx x, int idx)\n   switch (format_char)\n     {\n     case '0':\n-      extra_parsing_for_operand_code_0 (x, idx);\n+      x = extra_parsing_for_operand_code_0 (x, idx);\n       break;\n \n     case 'w':\n@@ -1116,9 +1116,10 @@ function_reader::read_rtx_operand_r (rtx x)\n }\n \n /* Additional parsing for format code '0' in dumps, handling a variety\n-   of special-cases in print_rtx, when parsing operand IDX of X.  */\n+   of special-cases in print_rtx, when parsing operand IDX of X.\n+   Return X, or possibly a reallocated copy of X.  */\n \n-void\n+rtx\n function_reader::extra_parsing_for_operand_code_0 (rtx x, int idx)\n {\n   RTX_CODE code = GET_CODE (x);\n@@ -1137,9 +1138,26 @@ function_reader::extra_parsing_for_operand_code_0 (rtx x, int idx)\n \t  read_name (&name);\n \t  SYMBOL_REF_FLAGS (x) = strtol (name.string, NULL, 16);\n \n-\t  /* We can't reconstruct SYMBOL_REF_BLOCK; set it to NULL.  */\n+\t  /* The standard RTX_CODE_SIZE (SYMBOL_REF) used when allocating\n+\t     x doesn't have space for the block_symbol information, so\n+\t     we must reallocate it if this flag is set.  */\n \t  if (SYMBOL_REF_HAS_BLOCK_INFO_P (x))\n-\t    SYMBOL_REF_BLOCK (x) = NULL;\n+\t    {\n+\t      /* Emulate the allocation normally done by\n+\t\t varasm.c:create_block_symbol.  */\n+\t      unsigned int size = RTX_HDR_SIZE + sizeof (struct block_symbol);\n+\t      rtx new_x = (rtx) ggc_internal_alloc (size);\n+\n+\t      /* Copy data over from the smaller SYMBOL_REF.  */\n+\t      memcpy (new_x, x, RTX_CODE_SIZE (SYMBOL_REF));\n+\t      x = new_x;\n+\n+\t      /* We can't reconstruct SYMBOL_REF_BLOCK; set it to NULL.  */\n+\t      SYMBOL_REF_BLOCK (x) = NULL;\n+\n+\t      /* Zero the offset.  */\n+\t      SYMBOL_REF_BLOCK_OFFSET (x) = 0;\n+\t    }\n \n \t  require_char (']');\n \t}\n@@ -1185,6 +1203,8 @@ function_reader::extra_parsing_for_operand_code_0 (rtx x, int idx)\n       else\n \tunread_char (c);\n     }\n+\n+  return x;\n }\n \n /* Implementation of rtx_reader::handle_any_trailing_information."}]}