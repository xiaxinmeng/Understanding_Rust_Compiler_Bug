{"sha": "24c72fb0eedfe7c67f9b15aa31b474a999cc4723", "node_id": "C_kwDOANBUbNoAKDI0YzcyZmIwZWVkZmU3YzY3ZjliMTVhYTMxYjQ3NGE5OTljYzQ3MjM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-24T14:26:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-04T11:54:35Z"}, "message": "Adjust LSHIFT_EXPR handling of multiple_of_p\n\nThis removes the odd check of size_type_node when handling left-shifts\nas multiplications of 1 << N and instead uses the type as specified.\nIt also moves left-shift handling next to multiplications where it\nsemantically belongs.\n\n2022-01-24  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.cc (multiple_of_p): Re-write and move LSHIFT_EXPR\n\thandling.", "tree": {"sha": "e37bf8a72449e7e5cc59a280b791c037f681d5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37bf8a72449e7e5cc59a280b791c037f681d5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c72fb0eedfe7c67f9b15aa31b474a999cc4723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c72fb0eedfe7c67f9b15aa31b474a999cc4723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c72fb0eedfe7c67f9b15aa31b474a999cc4723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c72fb0eedfe7c67f9b15aa31b474a999cc4723/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38948b77dbc16f4c6cf6cff8661bab699b306f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38948b77dbc16f4c6cf6cff8661bab699b306f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38948b77dbc16f4c6cf6cff8661bab699b306f03"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "12732d39c79355f55aa63e5f63245619f032aaa4", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c72fb0eedfe7c67f9b15aa31b474a999cc4723/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c72fb0eedfe7c67f9b15aa31b474a999cc4723/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=24c72fb0eedfe7c67f9b15aa31b474a999cc4723", "patch": "@@ -14079,7 +14079,7 @@ int\n multiple_of_p (tree type, const_tree top, const_tree bottom)\n {\n   gimple *stmt;\n-  tree t1, op1, op2;\n+  tree op1, op2;\n \n   if (operand_equal_p (top, bottom, 0))\n     return 1;\n@@ -14125,6 +14125,21 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n       return (multiple_of_p (type, TREE_OPERAND (top, 1), bottom)\n \t      || multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n \n+    case LSHIFT_EXPR:\n+      /* Handle X << CST as X * (1 << CST) and only process the constant.  */\n+      if (TREE_CODE (TREE_OPERAND (top, 1)) == INTEGER_CST)\n+\t{\n+\t  op1 = TREE_OPERAND (top, 1);\n+\t  if (wi::to_widest (op1) < TYPE_PRECISION (type))\n+\t    {\n+\t      wide_int mul_op\n+\t\t= wi::one (TYPE_PRECISION (type)) << wi::to_wide (op1);\n+\t      return multiple_of_p (type,\n+\t\t\t\t    wide_int_to_tree (type, mul_op), bottom);\n+\t    }\n+\t}\n+      return 0;\n+\n     case MINUS_EXPR:\n       /* It is impossible to prove if op0 - op1 is multiple of bottom\n \t precisely, so be conservative here checking if both op0 and op1\n@@ -14144,22 +14159,6 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n       return (multiple_of_p (type, op1, bottom)\n \t      && multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n \n-    case LSHIFT_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (top, 1)) == INTEGER_CST)\n-\t{\n-\t  op1 = TREE_OPERAND (top, 1);\n-\t  /* const_binop may not detect overflow correctly,\n-\t     so check for it explicitly here.  */\n-\t  if (wi::gtu_p (TYPE_PRECISION (TREE_TYPE (size_one_node)),\n-\t\t\t wi::to_wide (op1))\n-\t      && (t1 = fold_convert (type,\n-\t\t\t\t     const_binop (LSHIFT_EXPR, size_one_node,\n-\t\t\t\t\t\t  op1))) != 0\n-\t      && !TREE_OVERFLOW (t1))\n-\t    return multiple_of_p (type, t1, bottom);\n-\t}\n-      return 0;\n-\n     CASE_CONVERT:\n       /* Can't handle conversions from non-integral or wider integral type.  */\n       if ((TREE_CODE (TREE_TYPE (TREE_OPERAND (top, 0))) != INTEGER_TYPE)"}]}