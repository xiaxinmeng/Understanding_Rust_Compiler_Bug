{"sha": "24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkZGI3OWMyZGJlNzdjN2Q0ZWI3NzRkYzQ3OTNjZGU2Y2Q4YTUwNg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2012-07-16T03:11:31Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-07-16T03:11:31Z"}, "message": "cris.c (cris_print_operand): New cases.\n\n\t* config/cris/cris.c (cris_print_operand) <case 'P', 'q'>: New cases.\n\t* config/cris/sync.md (atomic_op_op_cnstr): New code_attr.\n\t(atomic_op_op_pred): Ditto.\n\t(atomic_op_mnem_pre_op2): Renamed from atomic_op_mnem_pre; to\n\treflect the change to include %2 in expansion.  All callers changed.\n\t(qm3): New mode_attr.\n\t(\"atomic_fetch_<atomic_op_name><mode>\"): Use <atomic_op_op_pred>\n\tas predicate for operand 2. \n\t(\"cris_atomic_fetch_<atomic_op_name><mode>_1\"): Update FIXME.  Use\n\t\"<atomic_op_op_pred>\" \"<atomic_op_op_cnstr>\" for predicate and\n\tconstraint for operand 2.\n\t(\"atomic_compare_and_swap<mode>\"): Add FIXME.  Change predicate to\n\tnonmemory_operand for operand 3.\n\t(\"cris_atomic_compare_and_swap<mode>_1\"): Change operand 3 to\n\texclude memory.  Improve emitted sync code for v10 and v32.  Use\n\t<qm3> instead of <m> for size designator for cmp.\n\nFrom-SVN: r189503", "tree": {"sha": "95852ac2a4dd58be6e832f6ef73a96e45b8f50c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95852ac2a4dd58be6e832f6ef73a96e45b8f50c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a3b5b55d024d5e130e30239990e4a453427a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a3b5b55d024d5e130e30239990e4a453427a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a3b5b55d024d5e130e30239990e4a453427a36"}], "stats": {"total": 137, "additions": 107, "deletions": 30}, "files": [{"sha": "5d08b5ab93dae20c24cde5541afb2a4efdc65bfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "patch": "@@ -1,7 +1,23 @@\n 2012-07-16  Hans-Peter Nilsson  <hp@axis.com>\n \n-\t* config/cris/sync.md (\"atomic_compare_and_swap<mode>\"): Change\n-\tpredicate to nonmemory_operand for operand 3.  Add FIXME.\n+\t* config/cris/cris.c (cris_print_operand) <case 'P', 'q'>: New cases.\n+\t* config/cris/sync.md (atomic_op_op_cnstr): New code_attr.\n+\t(atomic_op_op_pred): Ditto.\n+\t(atomic_op_mnem_pre_op2): Renamed from atomic_op_mnem_pre; to\n+\treflect the change to include %2 in expansion.  All callers changed.\n+\t(qm3): New mode_attr.\n+\t(\"atomic_fetch_<atomic_op_name><mode>\"): Use <atomic_op_op_pred>\n+\tas predicate for operand 2. \n+\t(\"cris_atomic_fetch_<atomic_op_name><mode>_1\"): Update FIXME.  Use\n+\t\"<atomic_op_op_pred>\" \"<atomic_op_op_cnstr>\" for predicate and\n+\tconstraint for operand 2.\n+\t(\"atomic_compare_and_swap<mode>\"): Add FIXME.  Change predicate to\n+\tnonmemory_operand for operand 3.\n+\t(\"cris_atomic_compare_and_swap<mode>_1\"): Change operand 3 to\n+\texclude memory.  Improve emitted sync code for v10 and v32.  Use\n+\t<qm3> instead of <m> for size designator for cmp.\n+\t(\"atomic_compare_and_swap<mode>\"): Change predicate to\n+\tnonmemory_operand for operand 3.  Add FIXME.\n \t(\"cris_atomic_compare_and_swap<mode>_1\"): Change predicates and\n \tconstraints for operand 3 to exclude memory.\n \t(\"atomic_fetch_<atomic_op_name><mode>\")"}, {"sha": "44e328bfb2ac84f5573401be336cd8852f17da3f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "patch": "@@ -981,6 +981,53 @@ cris_print_operand (FILE *file, rtx x, int code)\n       fprintf (file, INTVAL (operand) < 0 ? \"adds.w\" : \"addq\");\n       return;\n \n+    case 'P':\n+      /* For const_int operands, print the additive mnemonic and the\n+\t modified operand (byte-sized operands don't save anything):\n+          N=MIN_INT..-65536: add.d N\n+          -65535..-64: subu.w -N\n+          -63..-1: subq -N\n+          0..63: addq N\n+          64..65535: addu.w N\n+          65536..MAX_INT: add.d N.\n+\t (Emitted mnemonics are capitalized to simplify testing.)\n+\t For anything else (N.B: only register is valid), print \"add.d\".  */\n+      if (REG_P (operand))\n+\t{\n+\t  fprintf (file, \"Add.d \");\n+\n+\t  /* Deal with printing the operand by dropping through to the\n+\t     normal path.  */\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  int val;\n+\t  gcc_assert (CONST_INT_P (operand));\n+\n+\t  val = INTVAL (operand);\n+\t  if (!IN_RANGE (val, -65535, 65535))\n+\t      fprintf (file, \"Add.d %d\", val);\n+\t  else if (val <= -64)\n+\t    fprintf (file, \"Subu.w %d\", -val);\n+\t  else if (val <= -1)\n+\t    fprintf (file, \"Subq %d\", -val);\n+\t  else if (val <= 63)\n+\t      fprintf (file, \"Addq %d\", val);\n+\t  else if (val <= 65535)\n+\t    fprintf (file, \"Addu.w %d\", val);\n+\t  return;\n+\t}\n+      break;\n+\n+    case 'q':\n+      /* If the operand is an integer -31..31, print \"q\" else \".d\".  */\n+      if (CONST_INT_P (operand) && IN_RANGE (INTVAL (operand), -31, 31))\n+\tfprintf (file, \"q\");\n+      else\n+\tfprintf (file, \".d\");\n+      return;\n+\n     case 'd':\n       /* If this is a GOT symbol, force it to be emitted as :GOT and\n \t :GOTPLT regardless of -fpic (i.e. not as :GOT16, :GOTPLT16)."}, {"sha": "b1dac815ddaf1be9989e73307a09d17d2faf1763", "filename": "gcc/config/cris/sync.md", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2Fconfig%2Fcris%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506/gcc%2Fconfig%2Fcris%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fsync.md?ref=24ddb79c2dbe77c7d4eb774dc4793cde6cd8a506", "patch": "@@ -73,17 +73,32 @@\n (define_code_attr atomic_op_name\n  [(plus \"add\") (minus \"sub\") (and \"and\") (ior \"or\") (xor \"xor\") (mult \"nand\")])\n \n+;; The operator nonatomic-operand can be memory, constant or register\n+;; for all but xor.  We can't use memory or addressing modes with\n+;; side-effects though, so just use registers and literal constants.\n+(define_code_attr atomic_op_op_cnstr\n+ [(plus \"ri\") (minus \"ri\") (and \"ri\") (ior \"ri\") (xor \"r\") (mult \"ri\")])\n+\n+(define_code_attr atomic_op_op_pred\n+ [(plus \"nonmemory_operand\") (minus \"nonmemory_operand\")\n+  (and \"nonmemory_operand\") (ior \"nonmemory_operand\")\n+  (xor \"register_operand\") (mult \"nonmemory_operand\")])\n+\n ;; Pairs of these are used to insert the \"not\" after the \"and\" for nand.\n-(define_code_attr atomic_op_mnem_pre ;; Upper-case only to sinplify testing.\n- [(plus \"Add.d\") (minus \"Sub.d\") (and \"And.d\") (ior \"Or.d\") (xor \"Xor\")\n-  (mult \"aNd.d\")])\n+(define_code_attr atomic_op_mnem_pre_op2 ;; Upper-case only to simplify testing.\n+ [(plus \"%P2\") (minus \"Sub.d %2\") (and \"And%q2 %2\") (ior \"Or%q2 %2\") (xor \"Xor %2\")\n+  (mult \"aNd%q2 %2\")])\n+\n (define_code_attr atomic_op_mnem_post_op3\n  [(plus \"\") (minus \"\") (and \"\") (ior \"\") (xor \"\") (mult \"not %3\\;\")])\n \n+;; For SImode, emit \"q\" for operands -31..31.\n+(define_mode_attr qm3 [(SI \"%q3\") (HI \".w\") (QI \".b\")])\n+\n (define_expand \"atomic_fetch_<atomic_op_name><mode>\"\n   [(match_operand:BWD 0 \"register_operand\")\n    (match_operand:BWD 1 \"memory_operand\")\n-   (match_operand:BWD 2 \"register_operand\")\n+   (match_operand:BWD 2 \"<atomic_op_op_pred>\")\n    (match_operand 3)\n    (atomic_op:BWD (match_dup 0) (match_dup 1))]\n   \"\"\n@@ -109,8 +124,9 @@\n   [(set (match_operand:BWD 1 \"memory_operand\" \"+Q\")\n \t(atomic_op:BWD\n \t (unspec_volatile:BWD [(match_dup 1)] CRIS_UNSPEC_ATOMIC_OP)\n-\t ;; FIXME: relax this for plus, minus, and, ior.\n-\t (match_operand:BWD 2 \"register_operand\" \"r\")))\n+\t ;; FIXME: improve constants more for plus, minus, and, ior.\n+\t ;; FIXME: handle memory operands without side-effects.\n+\t (match_operand:BWD 2 \"<atomic_op_op_pred>\" \"<atomic_op_op_cnstr>\")))\n    (set (match_operand:BWD 0 \"register_operand\" \"=&r\")\n \t(match_dup 1))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n@@ -125,7 +141,7 @@\n       \".Lsync.%=:\\;\"\n       \"move<m> %1,%0\\;\"\n       \"move.d %0,%3\\;\"\n-      \"<atomic_op_mnem_pre> %2,%3\\;<atomic_op_mnem_post_op3>\"\n+      \"<atomic_op_mnem_pre_op2>,%3\\;<atomic_op_mnem_post_op3>\"\n       \"ax\\;\"\n       \"move<m> %3,%1\\;\"\n       \"bcs .Lsync.%=\\;\"\n@@ -136,7 +152,7 @@\n       \".Lsync.%=:\\;\"\n       \"move<m> %1,%0\\;\"\n       \"move.d %0,%3\\;\"\n-      \"<atomic_op_mnem_pre> %2,%3\\;<atomic_op_mnem_post_op3>\"\n+      \"<atomic_op_mnem_pre_op2>,%3\\;<atomic_op_mnem_post_op3>\"\n       \"ax\\;\"\n       \"move<m> %3,%1\\;\"\n       \"bwf .Lsync.%=\\;\"\n@@ -167,12 +183,12 @@\n \t\"bmi .Lsync.irqon.%=\\;\"\n \t\"move.d %0,%3\\;\"\n \n-\t\"<atomic_op_mnem_pre> %2,%3\\;<atomic_op_mnem_post_op3>\"\n+\t\"<atomic_op_mnem_pre_op2>,%3\\;<atomic_op_mnem_post_op3>\"\n \t\"ba .Lsync.irqoff.%=\\;\"\n \t\"move<m> %3,%1\\n\"\n \n \t\".Lsync.irqon.%=:\\;\"\n-\t\"<atomic_op_mnem_pre> %2,%3\\;<atomic_op_mnem_post_op3>\"\n+\t\"<atomic_op_mnem_pre_op2>,%3\\;<atomic_op_mnem_post_op3>\"\n \t\"move<m> %3,%1\\;\"\n \t\"ei\\n\"\n \t\".Lsync.irqoff.%=:\";\n@@ -232,32 +248,30 @@\n {\n   if (TARGET_V32)\n     return\n-      \"clearf p\\n\"\n-      \".Lsync.repeat.%=:\\;\"\n+      \"\\n.Lsync.repeat.%=:\\;\"\n+      \"clearf p\\;\"\n       \"move<m> %2,%1\\;\"\n-      \"cmp<m> %3,%1\\;\"\n+      \"cmp<qm3> %3,%1\\;\"\n       \"bne .Lsync.after.%=\\;\"\n-      \"seq %0\\;\"\n-\n       \"ax\\;\"\n+\n       \"move<m> %4,%2\\;\"\n-      \"bcs .Lsync.repeat.%=\\;\"\n-      \"clearf p\\n\"\n-      \".Lsync.after.%=:\";\n+      \"bcs .Lsync.repeat.%=\\n\"\n+      \".Lsync.after.%=:\\;\"\n+      \"seq %0\";\n   else if (cris_cpu_version == 10)\n     return\n-      \"clearf\\n\"\n-      \".Lsync.repeat.%=:\\;\"\n+      \"\\n.Lsync.repeat.%=:\\;\"\n+      \"clearf\\;\"\n       \"move<m> %2,%1\\;\"\n-      \"cmp<m> %3,%1\\;\"\n+      \"cmp<qm3> %3,%1\\;\"\n       \"bne .Lsync.after.%=\\;\"\n-      \"seq %0\\;\"\n-\n       \"ax\\;\"\n+\n       \"move<m> %4,%2\\;\"\n-      \"bwf .Lsync.repeat.%=\\;\"\n-      \"clearf\\n\"\n-      \".Lsync.after.%=:\";\n+      \"bwf .Lsync.repeat.%=\\n\"\n+      \".Lsync.after.%=:\\;\"\n+      \"seq %0\";\n   else\n     {\n       /* This one is for CRIS versions without load-locked-store-conditional\n@@ -284,14 +298,14 @@\n \t\"bmi .Lsync.irqon.%=\\;\"\n \t\"nop\\;\"\n \n-\t\"cmp<m> %3,%1\\;\"\n+\t\"cmp<qm3> %3,%1\\;\"\n \t\"bne .Lsync.after.%=\\;\"\n \t\"seq %0\\;\"\n \t\"ba .Lsync.after.%=\\;\"\n \t\"move<m> %4,%2\\n\"\n \n \t\".Lsync.irqon.%=:\\;\"\n-\t\"cmp<m> %3,%1\\;\"\n+\t\"cmp<qm3> %3,%1\\;\"\n \t\"bne .Lsync.after.%=\\;\"\n \t\"seq %0\\;\"\n \t\"move<m> %4,%2\\;\""}]}