{"sha": "2778d7667c9ef15520b1679417467934e24ffa0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3OGQ3NjY3YzllZjE1NTIwYjE2Nzk0MTc0Njc5MzRlMjRmZmEwZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-04-25T21:54:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-04-25T21:54:22Z"}, "message": "c-common.c (flag_isoc1x): New.\n\ngcc:\n\t* c-common.c (flag_isoc1x): New.\n\t(flag_isoc99): Update comment.\n\t* c-common.h (flag_isoc1x): New.\n\t(flag_isoc99): Update comment.\n\t* c-cppbuiltin.c (builtin_define_float_constants): Also define\n\t__<type>_DECIMAL_DIG__.\n\t* c-opts.c (set_std_c1x): New.\n\t(c_common_handle_option): Handle -std=c1x and -std=gnu1x.\n\t(set_std_c89, set_std_c99): Also set flag_isoc1x to 0.\n\t* c.opt (-std=c1x, -std=gnu1x): New options.\n\t* doc/cpp.texi: Mention -std=c1x.\n\t* doc/cppopts.texi (-std=c1x, -std=gnu1x): Document.\n\t* doc/extend.texi: Mention -std=c1x and -std=gnu1x.\n\t* doc/invoke.texi (-std=c1x, -std=gnu1x): Document.\n\t* doc/standards.texi: Mention C1X.\n\t* ginclude/float.h (FLT_DECIMAL_DIG, DBL_DECIMAL_DIG,\n\tLDBL_DECIMAL_DIG, FLT_HAS_SUBNORM, DBL_HAS_SUBNORM,\n\tLDBL_HAS_SUBNORM, FLT_TRUE_MIN, DBL_TRUE_MIN, LDBL_TRUE_MIN):\n\tDefine for C1X.\n\ngcc/testsuite:\n\t* gcc.dg/c90-float-1.c: Also test that C1X macros are not defined.\n\t* gcc.dg/c99-float-1.c: Also test that C1X macros are not defined.\n\t* gcc.dg/c1x-float-1.c: New test.\n\nlibcpp:\n\t* include/cpplib.h (enum c_lang): Add CLK_GNUC1X and CLK_STDC1X.\n\t* init.c (lang_defaults): Add entries for new language variants.\n\t(cpp_init_builtins): Define __STDC_VERSION__ to 201000L for C1X\n\tvariants.\n\nFrom-SVN: r158711", "tree": {"sha": "feff2a16895d1da5319551fc1b48b05b2a464692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feff2a16895d1da5319551fc1b48b05b2a464692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2778d7667c9ef15520b1679417467934e24ffa0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778d7667c9ef15520b1679417467934e24ffa0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2778d7667c9ef15520b1679417467934e24ffa0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778d7667c9ef15520b1679417467934e24ffa0f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045d4002b76c990d99a66dc6f6c1c014808a2e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045d4002b76c990d99a66dc6f6c1c014808a2e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045d4002b76c990d99a66dc6f6c1c014808a2e79"}], "stats": {"total": 436, "additions": 421, "deletions": 15}, "files": [{"sha": "a6fd13b178245f93c85e35d68d07d37c2884030b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -1,3 +1,25 @@\n+2010-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (flag_isoc1x): New.\n+\t(flag_isoc99): Update comment.\n+\t* c-common.h (flag_isoc1x): New.\n+\t(flag_isoc99): Update comment.\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Also define\n+\t__<type>_DECIMAL_DIG__.\n+\t* c-opts.c (set_std_c1x): New.\n+\t(c_common_handle_option): Handle -std=c1x and -std=gnu1x.\n+\t(set_std_c89, set_std_c99): Also set flag_isoc1x to 0.\n+\t* c.opt (-std=c1x, -std=gnu1x): New options.\n+\t* doc/cpp.texi: Mention -std=c1x.\n+\t* doc/cppopts.texi (-std=c1x, -std=gnu1x): Document.\n+\t* doc/extend.texi: Mention -std=c1x and -std=gnu1x.\n+\t* doc/invoke.texi (-std=c1x, -std=gnu1x): Document.\n+\t* doc/standards.texi: Mention C1X.\n+\t* ginclude/float.h (FLT_DECIMAL_DIG, DBL_DECIMAL_DIG,\n+\tLDBL_DECIMAL_DIG, FLT_HAS_SUBNORM, DBL_HAS_SUBNORM,\n+\tLDBL_HAS_SUBNORM, FLT_TRUE_MIN, DBL_TRUE_MIN, LDBL_TRUE_MIN):\n+\tDefine for C1X.\n+\n 2010-04-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/gmon-sol2.c (_mcleanup): Change format string"}, {"sha": "25ce2d704a68ecf3e8c1af59c389566acf232200", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -280,10 +280,14 @@ int flag_cond_mismatch;\n \n int flag_isoc94;\n \n-/* Nonzero means use the ISO C99 dialect of C.  */\n+/* Nonzero means use the ISO C99 (or C1X) dialect of C.  */\n \n int flag_isoc99;\n \n+/* Nonzero means use the ISO C1X dialect of C.  */\n+\n+int flag_isoc1x;\n+\n /* Nonzero means that we have builtin functions, and main is an int.  */\n \n int flag_hosted = 1;"}, {"sha": "8dadc247f8680f26fe3b1d9cb60ddc110b37d2eb", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -595,10 +595,14 @@ extern int flag_cond_mismatch;\n \n extern int flag_isoc94;\n \n-/* Nonzero means use the ISO C99 dialect of C.  */\n+/* Nonzero means use the ISO C99 (or C1X) dialect of C.  */\n \n extern int flag_isoc99;\n \n+/* Nonzero means use the ISO C1X dialect of C.  */\n+\n+extern int flag_isoc1x;\n+\n /* Nonzero means that we have builtin functions, and main is an int.  */\n \n extern int flag_hosted;"}, {"sha": "fa4d9a1ca01b739b7e337fcbd0a316c539377843", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -105,6 +105,7 @@ builtin_define_float_constants (const char *name_prefix,\n   char name[64], buf[128];\n   int dig, min_10_exp, max_10_exp;\n   int decimal_dig;\n+  int type_decimal_dig;\n \n   fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n   gcc_assert (fmt->b != 10);\n@@ -198,8 +199,20 @@ builtin_define_float_constants (const char *name_prefix,\n     if (decimal_dig < d_decimal_dig)\n       decimal_dig++;\n   }\n+  /* Similar, for this type rather than long double.  */\n+  {\n+    double type_d_decimal_dig = 1 + fmt->p * log10_b;\n+    type_decimal_dig = type_d_decimal_dig;\n+    if (type_decimal_dig < type_d_decimal_dig)\n+      type_decimal_dig++;\n+  }\n   if (type == long_double_type_node)\n     builtin_define_with_int_value (\"__DECIMAL_DIG__\", decimal_dig);\n+  else\n+    {\n+      sprintf (name, \"__%s_DECIMAL_DIG__\", name_prefix);\n+      builtin_define_with_int_value (name, type_decimal_dig);\n+    }\n \n   /* Since, for the supported formats, B is always a power of 2, we\n      construct the following numbers directly as a hexadecimal"}, {"sha": "66101b7eded66d995144ef345197dbea7ff22a2e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -112,6 +112,7 @@ static void set_std_cxx98 (int);\n static void set_std_cxx0x (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n+static void set_std_c1x (int);\n static void check_deps_environment_vars (void);\n static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n@@ -1066,6 +1067,16 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \tset_std_c99 (false /* ISO */);\n       break;\n \n+    case OPT_std_c1x:\n+      if (!preprocessing_asm_p)\n+\tset_std_c1x (true /* ISO */);\n+      break;\n+\n+    case OPT_std_gnu1x:\n+      if (!preprocessing_asm_p)\n+\tset_std_c1x (false /* ISO */);\n+      break;\n+\n     case OPT_trigraphs:\n       cpp_opts->trigraphs = 1;\n       break;\n@@ -1704,6 +1715,7 @@ set_std_c89 (int c94, int iso)\n   flag_no_nonansi_builtin = iso;\n   flag_isoc94 = c94;\n   flag_isoc99 = 0;\n+  flag_isoc1x = 0;\n }\n \n /* Set the C 99 standard (without GNU extensions if ISO).  */\n@@ -1714,6 +1726,20 @@ set_std_c99 (int iso)\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  flag_isoc1x = 0;\n+  flag_isoc99 = 1;\n+  flag_isoc94 = 1;\n+}\n+\n+/* Set the C 1X standard draft (without GNU extensions if ISO).  */\n+static void\n+set_std_c1x (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_STDC1X: CLK_GNUC1X);\n+  flag_no_asm = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  flag_isoc1x = 1;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n }"}, {"sha": "2e1933cd0d1717321860701ef85c6f26c9732e2a", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -961,6 +961,10 @@ become a part of the upcoming ISO C++ standard, dubbed C++0x. Note that the\n extensions enabled by this mode are experimental and may be removed in\n future releases of GCC.\n \n+std=c1x\n+C ObjC\n+Conform to the ISO 201X C standard draft (experimental and incomplete support)\n+\n std=c89\n C ObjC\n Conform to the ISO 1990 C standard\n@@ -988,6 +992,10 @@ extensions that are likely to become a part of the upcoming ISO C++\n standard, dubbed C++0x. Note that the extensions enabled by this mode\n are experimental and may be removed in future releases of GCC.\n \n+std=gnu1x\n+C ObjC\n+Conform to the ISO 201X C standard draft with GNU extensions (experimental and incomplete support)\n+\n std=gnu89\n C ObjC\n Conform to the ISO 1990 C standard with GNU extensions"}, {"sha": "7a250bd72ecb4e2a769ea8715b4f79ec4407ce32", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -215,7 +215,8 @@ Standard C@.  In its default mode, the GNU C preprocessor does not do a\n few things required by the standard.  These are features which are\n rarely, if ever, used, and may cause surprising changes to the meaning\n of a program which does not expect them.  To get strict ISO Standard C,\n-you should use the @option{-std=c90} or @option{-std=c99} options, depending\n+you should use the @option{-std=c90}, @option{-std=c99} or\n+@option{-std=c1x} options, depending\n on which version of the standard you want.  To get all the mandatory\n diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n "}, {"sha": "b5c77c7e9902b8e026005c6349042d62d486e0cb", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -392,6 +392,9 @@ The 1990 C standard, as amended in 1994.\n The revised ISO C standard, published in December 1999.  Before\n publication, this was known as C9X@.\n \n+@item c1x\n+The next version of the ISO C standard, still under development.\n+\n @item gnu90\n @itemx gnu89\n The 1990 C standard plus GNU extensions.  This is the default.\n@@ -400,6 +403,10 @@ The 1990 C standard plus GNU extensions.  This is the default.\n @itemx gnu9x\n The 1999 C standard plus GNU extensions.\n \n+@item gnu1x\n+The next version of the ISO C standard, still under development, plus\n+GNU extensions.\n+\n @item c++98\n The 1998 ISO C++ standard plus amendments.\n "}, {"sha": "e7880a3310486b3a7204843d3fad8fe9b9ef8a04", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -4936,8 +4936,10 @@ into their callers with the option @option{-finline-functions}.\n GCC implements three different semantics of declaring a function\n inline.  One is available with @option{-std=gnu89} or\n @option{-fgnu89-inline} or when @code{gnu_inline} attribute is present\n-on all inline declarations, another when @option{-std=c99} or\n-@option{-std=gnu99} (without @option{-fgnu89-inline}), and the third\n+on all inline declarations, another when\n+@option{-std=c99}, @option{-std=c1x},\n+@option{-std=gnu99} or @option{-std=gnu1x}\n+(without @option{-fgnu89-inline}), and the third\n is used when compiling C++.\n \n To declare a function inline, use the @code{inline} keyword in its\n@@ -5868,10 +5870,12 @@ a general-purpose header file that should be usable by all programs,\n including ISO C programs.  The keywords @code{asm}, @code{typeof} and\n @code{inline} are not available in programs compiled with\n @option{-ansi} or @option{-std} (although @code{inline} can be used in a\n-program compiled with @option{-std=c99}).  The ISO C99 keyword\n+program compiled with @option{-std=c99} or @option{-std=c1x}).  The\n+ISO C99 keyword\n @code{restrict} is only available when @option{-std=gnu99} (which will\n eventually be the default) or @option{-std=c99} (or the equivalent\n-@option{-std=iso9899:1999}) is used.\n+@option{-std=iso9899:1999}), or an option for a later standard\n+version, is used.\n \n The way to solve these problems is to put @samp{__} at the beginning and\n end of each problematical keyword.  For example, use @code{__asm__}\n@@ -6857,8 +6861,8 @@ be emitted.\n \n @opindex ansi\n @opindex std\n-Outside strict ISO C mode (@option{-ansi}, @option{-std=c90} or\n-@option{-std=c99}), the functions\n+Outside strict ISO C mode (@option{-ansi}, @option{-std=c90},\n+@option{-std=c99} or @option{-std=c1x}), the functions\n @code{_exit}, @code{alloca}, @code{bcmp}, @code{bzero},\n @code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n @code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},"}, {"sha": "9829c1f35b66e7eda01d39a45b5a0b8bd4b5e54d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -1500,6 +1500,12 @@ ISO C99.  Note that this standard is not yet fully supported; see\n @w{@uref{http://gcc.gnu.org/c99status.html}} for more information.  The\n names @samp{c9x} and @samp{iso9899:199x} are deprecated.\n \n+@item c1x\n+ISO C1X, the draft of the next revision of the ISO C standard.\n+Support is limited and experimental and features enabled by this\n+option may be changed or removed if changed in or removed from the\n+standard draft.\n+\n @item gnu90\n @itemx gnu89\n GNU dialect of ISO C90 (including some C99 features). This\n@@ -1510,6 +1516,11 @@ is the default for C code.\n GNU dialect of ISO C99.  When ISO C99 is fully implemented in GCC,\n this will become the default.  The name @samp{gnu9x} is deprecated.\n \n+@item gnu1x\n+GNU dialect of ISO C1X.  Support is limited and experimental and\n+features enabled by this option may be changed or removed if changed\n+in or removed from the standard draft.\n+\n @item c++98\n The 1998 ISO C++ standard plus amendments. Same as @option{-ansi} for\n C++ code."}, {"sha": "f6d8acd6a72450f88886182c6d3b34acc74168d7", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -33,6 +33,8 @@ with some exceptions, and possibly with some extensions.\n @cindex C99\n @cindex ISO C9X\n @cindex C9X\n+@cindex ISO C1X\n+@cindex C1X\n @cindex Technical Corrigenda\n @cindex TC1\n @cindex Technical Corrigendum 1\n@@ -93,14 +95,19 @@ Errors in the 1999 ISO C standard were corrected in three Technical\n Corrigenda published in 2001, 2004 and 2007.  GCC does not support the\n uncorrected version.\n \n+A fourth version of the C standard, known as @dfn{C1X}, is under\n+development; GCC has limited preliminary support for parts of this\n+standard, enabled with @option{-std=c1x}.\n+\n By default, GCC provides some extensions to the C language that on\n rare occasions conflict with the C standard.  @xref{C\n Extensions,,Extensions to the C Language Family}.  Use of the\n @option{-std} options listed above will disable these extensions where\n they conflict with the C standard version selected.  You may also\n select an extended version of the C language explicitly with\n-@option{-std=gnu90} (for C90 with GNU extensions) or @option{-std=gnu99}\n-(for C99 with GNU extensions).  The default, if no C language dialect\n+@option{-std=gnu90} (for C90 with GNU extensions), @option{-std=gnu99}\n+(for C99 with GNU extensions) or @option{-std=gnu1x} (for C1X with GNU\n+extensions).  The default, if no C language dialect\n options are given, is @option{-std=gnu90}; this will change to\n @option{-std=gnu99} in some future release when the C99 support is\n complete.  Some features that are part of the C99 standard are"}, {"sha": "5c472c54375c21d36911c6cfba34f2049b7ae434", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -157,6 +157,45 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* C99 */\n \n+#if defined (__STDC_VERSION__) && __STDC_VERSION__ > 199901L\n+/* Versions of DECIMAL_DIG for each floating-point type.  */\n+#undef FLT_DECIMAL_DIG\n+#undef DBL_DECIMAL_DIG\n+#undef LDBL_DECIMAL_DIG\n+#define FLT_DECIMAL_DIG\t\t__FLT_DECIMAL_DIG__\n+#define DBL_DECIMAL_DIG\t\t__DBL_DECIMAL_DIG__\n+#define LDBL_DECIMAL_DIG\t__DECIMAL_DIG__\n+\n+/* Whether types support subnormal numbers.  */\n+#undef FLT_HAS_SUBNORM\n+#undef DBL_HAS_SUBNORM\n+#undef LDBL_HAS_SUBNORM\n+#define FLT_HAS_SUBNORM\t\t__FLT_HAS_DENORM__\n+#define DBL_HAS_SUBNORM\t\t__DBL_HAS_DENORM__\n+#define LDBL_HAS_SUBNORM\t__LDBL_HAS_DENORM__\n+\n+/* Minimum positive values, including subnormals.  */\n+#undef FLT_TRUE_MIN\n+#undef DBL_TRUE_MIN\n+#undef LDBL_TRUE_MIN\n+#if __FLT_HAS_DENORM__\n+#define FLT_TRUE_MIN\t__FLT_DENORM_MIN__\n+#else\n+#define FLT_TRUE_MIN\t__FLT_MIN__\n+#endif\n+#if __DBL_HAS_DENORM__\n+#define DBL_TRUE_MIN\t__DBL_DENORM_MIN__\n+#else\n+#define DBL_TRUE_MIN\t__DBL_MIN__\n+#endif\n+#if __LDBL_HAS_DENORM__\n+#define LDBL_TRUE_MIN\t__LDBL_DENORM_MIN__\n+#else\n+#define LDBL_TRUE_MIN\t__LDBL_MIN__\n+#endif\n+\n+#endif /* C1X */\n+\n #ifdef __STDC_WANT_DEC_FP__\n /* Draft Technical Report 24732, extension for decimal floating-point\n    arithmetic: Characteristic of decimal floating types <float.h>.  */"}, {"sha": "c4a24bb0b4453b54508f79833028ff4e0ee154c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -1,3 +1,9 @@\n+2010-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c90-float-1.c: Also test that C1X macros are not defined.\n+\t* gcc.dg/c99-float-1.c: Also test that C1X macros are not defined.\n+\t* gcc.dg/c1x-float-1.c: New test.\n+\n 2010-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr43766.c: Scan \"lea\\[lq\\]?\\[ \\t\\]\" instead"}, {"sha": "75233ac82277484b5bacc0c0ce764fe4a69cab0d", "filename": "gcc/testsuite/gcc.dg/c1x-float-1.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-float-1.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -0,0 +1,169 @@\n+/* Test for <float.h> C1X macros.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+/* This test checks that the C1X macros are defined;\n+   it does not check the correctness of their values.  */\n+\n+#include <float.h>\n+\n+#ifndef FLT_ROUNDS\n+#error \"FLT_ROUNDS undefined\"\n+#endif\n+\n+#ifndef FLT_RADIX\n+#error \"FLT_RADIX undefined\"\n+#endif\n+\n+#ifndef FLT_MANT_DIG\n+#error \"FLT_MANT_DIG undefined\"\n+#endif\n+\n+#ifndef FLT_DIG\n+#error \"FLT_DIG undefined\"\n+#endif\n+\n+#ifndef FLT_MIN_EXP\n+#error \"FLT_MIN_EXP undefined\"\n+#endif\n+\n+#ifndef FLT_MIN_10_EXP\n+#error \"FLT_MIN_10_EXP undefined\"\n+#endif\n+\n+#ifndef FLT_MAX_EXP\n+#error \"FLT_MAX_EXP undefined\"\n+#endif\n+\n+#ifndef FLT_MAX_10_EXP\n+#error \"FLT_MAX_10_EXP undefined\"\n+#endif\n+\n+#ifndef FLT_MAX\n+#error \"FLT_MAX undefined\"\n+#endif\n+\n+#ifndef FLT_EPSILON\n+#error \"FLT_EPSILON undefined\"\n+#endif\n+\n+#ifndef FLT_MIN\n+#error \"FLT_MIN undefined\"\n+#endif\n+\n+#ifndef DBL_MANT_DIG\n+#error \"DBL_MANT_DIG undefined\"\n+#endif\n+\n+#ifndef DBL_DIG\n+#error \"DBL_DIG undefined\"\n+#endif\n+\n+#ifndef DBL_MIN_EXP\n+#error \"DBL_MIN_EXP undefined\"\n+#endif\n+\n+#ifndef DBL_MIN_10_EXP\n+#error \"DBL_MIN_10_EXP undefined\"\n+#endif\n+\n+#ifndef DBL_MAX_EXP\n+#error \"DBL_MAX_EXP undefined\"\n+#endif\n+\n+#ifndef DBL_MAX_10_EXP\n+#error \"DBL_MAX_10_EXP undefined\"\n+#endif\n+\n+#ifndef DBL_MAX\n+#error \"DBL_MAX undefined\"\n+#endif\n+\n+#ifndef DBL_EPSILON\n+#error \"DBL_EPSILON undefined\"\n+#endif\n+\n+#ifndef DBL_MIN\n+#error \"DBL_MIN undefined\"\n+#endif\n+\n+#ifndef LDBL_MANT_DIG\n+#error \"LDBL_MANT_DIG undefined\"\n+#endif\n+\n+#ifndef LDBL_DIG\n+#error \"LDBL_DIG undefined\"\n+#endif\n+\n+#ifndef LDBL_MIN_EXP\n+#error \"LDBL_MIN_EXP undefined\"\n+#endif\n+\n+#ifndef LDBL_MIN_10_EXP\n+#error \"LDBL_MIN_10_EXP undefined\"\n+#endif\n+\n+#ifndef LDBL_MAX_EXP\n+#error \"LDBL_MAX_EXP undefined\"\n+#endif\n+\n+#ifndef LDBL_MAX_10_EXP\n+#error \"LDBL_MAX_10_EXP undefined\"\n+#endif\n+\n+#ifndef LDBL_MAX\n+#error \"LDBL_MAX undefined\"\n+#endif\n+\n+#ifndef LDBL_EPSILON\n+#error \"LDBL_EPSILON undefined\"\n+#endif\n+\n+#ifndef LDBL_MIN\n+#error \"LDBL_MIN undefined\"\n+#endif\n+\n+#ifndef FLT_EVAL_METHOD\n+#error \"FLT_EVAL_METHOD undefined\"\n+#endif\n+\n+#ifndef DECIMAL_DIG\n+#error \"DECIMAL_DIG undefined\"\n+#endif\n+\n+#ifndef FLT_DECIMAL_DIG\n+#error \"FLT_DECIMAL_DIG undefined\"\n+#endif\n+\n+#ifndef DBL_DECIMAL_DIG\n+#error \"DBL_DECIMAL_DIG undefined\"\n+#endif\n+\n+#ifndef LDBL_DECIMAL_DIG\n+#error \"LDBL_DECIMAL_DIG undefined\"\n+#endif\n+\n+#ifndef FLT_HAS_SUBNORM\n+#error \"FLT_HAS_SUBNORM undefined\"\n+#endif\n+\n+#ifndef DBL_HAS_SUBNORM\n+#error \"DBL_HAS_SUBNORM undefined\"\n+#endif\n+\n+#ifndef LDBL_HAS_SUBNORM\n+#error \"LDBL_HAS_SUBNORM undefined\"\n+#endif\n+\n+#ifndef FLT_TRUE_MIN\n+#error \"FLT_TRUE_MIN undefined\"\n+#endif\n+\n+#ifndef DBL_TRUE_MIN\n+#error \"DBL_TRUE_MIN undefined\"\n+#endif\n+\n+#ifndef LDBL_TRUE_MIN\n+#error \"LDBL_TRUE_MIN undefined\"\n+#endif"}, {"sha": "5a2cab657a3ca8c75149402602004960fc5eb304", "filename": "gcc/testsuite/gcc.dg/c90-float-1.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-float-1.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -3,8 +3,8 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n-/* This test checks that the C90 macros (but not the C99 ones) are defined;\n-   it does not check the correctness of their values.  */\n+/* This test checks that the C90 macros (but not the C99 or C1X ones)\n+   are defined; it does not check the correctness of their values.  */\n \n #include <float.h>\n \n@@ -131,3 +131,39 @@\n #ifdef DECIMAL_DIG\n #error \"DECIMAL_DIG defined\"\n #endif\n+\n+#ifdef FLT_DECIMAL_DIG\n+#error \"FLT_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef DBL_DECIMAL_DIG\n+#error \"DBL_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef LDBL_DECIMAL_DIG\n+#error \"LDBL_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef FLT_HAS_SUBNORM\n+#error \"FLT_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef DBL_HAS_SUBNORM\n+#error \"DBL_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef LDBL_HAS_SUBNORM\n+#error \"LDBL_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef FLT_TRUE_MIN\n+#error \"FLT_TRUE_MIN defined\"\n+#endif\n+\n+#ifdef DBL_TRUE_MIN\n+#error \"DBL_TRUE_MIN defined\"\n+#endif\n+\n+#ifdef LDBL_TRUE_MIN\n+#error \"LDBL_TRUE_MIN defined\"\n+#endif"}, {"sha": "f0dc39136e964a61736882dde965f72cfcc04c34", "filename": "gcc/testsuite/gcc.dg/c99-float-1.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-float-1.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n \n-/* This test checks that the C99 macros are defined;\n+/* This test checks that the C99 macros (but not the C1X ones) are defined;\n    it does not check the correctness of their values.  */\n \n #include <float.h>\n@@ -131,3 +131,39 @@\n #ifndef DECIMAL_DIG\n #error \"DECIMAL_DIG undefined\"\n #endif\n+\n+#ifdef FLT_DECIMAL_DIG\n+#error \"FLT_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef DBL_DECIMAL_DIG\n+#error \"DBL_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef LDBL_DECIMAL_DIG\n+#error \"LDBL_DECIMAL_DIG defined\"\n+#endif\n+\n+#ifdef FLT_HAS_SUBNORM\n+#error \"FLT_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef DBL_HAS_SUBNORM\n+#error \"DBL_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef LDBL_HAS_SUBNORM\n+#error \"LDBL_HAS_SUBNORM defined\"\n+#endif\n+\n+#ifdef FLT_TRUE_MIN\n+#error \"FLT_TRUE_MIN defined\"\n+#endif\n+\n+#ifdef DBL_TRUE_MIN\n+#error \"DBL_TRUE_MIN defined\"\n+#endif\n+\n+#ifdef LDBL_TRUE_MIN\n+#error \"LDBL_TRUE_MIN defined\"\n+#endif"}, {"sha": "cc77ca013bc8de2feb60d03175ab464b81201e53", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -1,3 +1,10 @@\n+2010-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (enum c_lang): Add CLK_GNUC1X and CLK_STDC1X.\n+\t* init.c (lang_defaults): Add entries for new language variants.\n+\t(cpp_init_builtins): Define __STDC_VERSION__ to 201000L for C1X\n+\tvariants.\n+\n 2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n \n \tPR cpp/43195"}, {"sha": "0828ea40f9314e09344675f48a9e89757c3c3814", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -155,7 +155,8 @@ enum cpp_ttype\n #undef TK\n \n /* C language kind, used when calling cpp_create_reader.  */\n-enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_STDC89, CLK_STDC94, CLK_STDC99,\n+enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC1X,\n+\t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC1X,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX0X, CLK_CXX0X, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */"}, {"sha": "ae5ae4548c8766e9386e024e546ed1d8c908774f", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778d7667c9ef15520b1679417467934e24ffa0f/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=2778d7667c9ef15520b1679417467934e24ffa0f", "patch": "@@ -84,9 +84,11 @@ static const struct lang_flags lang_defaults[] =\n { /*              c99 c++ xnum xid std  //   digr ulit */\n   /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0 },\n   /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1 },\n+  /* GNUC1X   */  { 1,  0,  1,   0,  0,   1,   1,   1 },\n   /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0 },\n   /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0 },\n   /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0 },\n+  /* STDC1X   */  { 1,  0,  1,   0,  1,   1,   1,   0 },\n   /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0 },\n   /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0 },\n   /* GNUCXX0X */  { 1,  1,  1,   0,  0,   1,   1,   1 },\n@@ -457,6 +459,9 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_STDC1X\n+\t   || CPP_OPTION (pfile, lang) == CLK_GNUC1X)\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201000L\");\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n "}]}