{"sha": "93868d11a61ed7c903a112b9a29b43907220f51a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4NjhkMTFhNjFlZDdjOTAzYTExMmI5YTI5YjQzOTA3MjIwZjUxYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-03T16:08:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-03T16:08:31Z"}, "message": "alias.c (nonlocal_reference_p): Add static prototype.\n\n        * alias.c (nonlocal_reference_p): Add static prototype.\n\n        * bitmap.c (bitmap_element_allocate): Prototype args in function\n        pointer cast.\n\n        * builtins.c (stabilize_va_list): Add static prototype.\n        (expand_builtin_va_arg): Constify a char*.\n\n        * c-lex.c (getch, put_back, extend_token_buffer_to,\n        read_line_number, token_getch, token_put_back): Add static\n        prototypes.\n\n        * c-parse.gperf (hash, is_reserved_word): Likewise.\n\n        * cccp.c (is_dir_separator): Likewise.\n\nFrom-SVN: r29782", "tree": {"sha": "9f17d331eaad83eee979c2f468cf2533e2d5fe61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f17d331eaad83eee979c2f468cf2533e2d5fe61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93868d11a61ed7c903a112b9a29b43907220f51a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93868d11a61ed7c903a112b9a29b43907220f51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93868d11a61ed7c903a112b9a29b43907220f51a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93868d11a61ed7c903a112b9a29b43907220f51a/comments", "author": null, "committer": null, "parents": [{"sha": "807625cf45d49ff58c333a0ad826f267d1f45a04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807625cf45d49ff58c333a0ad826f267d1f45a04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807625cf45d49ff58c333a0ad826f267d1f45a04"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "803a8c1853c9705df6c471e7ffcbb49a53106893", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -1,3 +1,21 @@\n+Sun Oct  3 12:05:28 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c (nonlocal_reference_p): Add static prototype.\n+\n+\t* bitmap.c (bitmap_element_allocate): Prototype args in function\n+\tpointer cast.\n+\n+\t* builtins.c (stabilize_va_list): Add static prototype.\n+\t(expand_builtin_va_arg): Constify a char*.\n+\t\n+\t* c-lex.c (getch, put_back, extend_token_buffer_to,\n+\tread_line_number, token_getch, token_put_back): Add static\n+\tprototypes.\n+\n+\t* c-parse.gperf (hash, is_reserved_word): Likewise.\n+\n+\t* cccp.c (is_dir_separator): Likewise.\n+\n Sat Oct  2 16:07:56 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* graph.h: New file to prototype functions exported by graph.c."}, {"sha": "fbd0e7d220781d1a47053e6baef5171741a07b8b", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -93,6 +93,7 @@ static alias_set_entry get_alias_set_entry PROTO((int));\n static rtx fixed_scalar_and_varying_struct_p PROTO((rtx, rtx, int (*)(rtx)));\n static int aliases_everything_p         PROTO((rtx));\n static int write_dependence_p           PROTO((rtx, rtx, int));\n+static int nonlocal_reference_p         PROTO((rtx));\n \n /* Set up all info needed to perform alias analysis on memory references.  */\n "}, {"sha": "4e448ac58865a5aee7eda79f1f96fb0c2d4d661d", "filename": "gcc/bitmap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -118,8 +118,8 @@ bitmap_element_allocate ()\n \n \t  obstack_specify_allocation (&bitmap_obstack, OBSTACK_CHUNK_SIZE,\n \t\t\t\t      __alignof__ (bitmap_element),\n-\t\t\t\t      (void *(*) ()) OBSTACK_CHUNK_ALLOC,\n-\t\t\t\t      (void (*) ()) OBSTACK_CHUNK_FREE);\n+\t\t\t\t      (void *(*) PARAMS ((long))) OBSTACK_CHUNK_ALLOC,\n+\t\t\t\t      (void (*) PARAMS ((void *))) OBSTACK_CHUNK_FREE);\n \t}\n \n       element = (bitmap_element *) obstack_alloc (&bitmap_obstack,"}, {"sha": "7375fc21ee6c20ad920224816141146013d61604", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -84,6 +84,7 @@ static rtx expand_builtin_strlen\tPROTO((tree, rtx, enum machine_mode));\n static rtx expand_builtin_alloca\tPROTO((tree, rtx));\n static rtx expand_builtin_ffs\t\tPROTO((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPROTO((tree));\n+static tree stabilize_va_list\t\tPROTO((tree, int));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -2028,7 +2029,7 @@ expand_builtin_va_arg (valist, type)\n      be passed through `...' due to type promotion at the call site.  */\n   else if ((promoted_type = (*lang_type_promotes_to) (type)) != NULL_TREE)\n     {\n-      const char *name = \"<anonymous type>\", *pname;\n+      const char *name = \"<anonymous type>\", *pname = 0;\n       static int gave_help;\n \n       if (TYPE_NAME (type))"}, {"sha": "4d85b1bd8b1eeb3b2f9ad11e0b085a68867b69d7", "filename": "gcc/c-gperf.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -1,7 +1,15 @@\n /* C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ /home/law/egcs/egcs/gcc/c-parse.gperf  */\n-/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */\n+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { const char *name; short token; enum rid rid; };\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash PARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n \n #define TOTAL_KEYWORDS 84\n #define MIN_WORD_LENGTH 2"}, {"sha": "f8c9158f548c893350ac221e0f96d9f4a1da29c9", "filename": "gcc/c-lex.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -90,6 +90,8 @@ struct putback_buffer {\n \n static struct putback_buffer putback = {NULL, 0, -1};\n \n+static inline int getch PROTO ((void));\n+\n static inline int\n getch ()\n {\n@@ -102,6 +104,8 @@ getch ()\n   return getc (finput);\n }\n \n+static inline void put_back PROTO ((int));\n+\n static inline void\n put_back (ch)\n      int ch;\n@@ -162,6 +166,8 @@ static int skip_white_space\t\tPROTO((int));\n static char *extend_token_buffer\tPROTO((const char *));\n static int readescape\t\t\tPROTO((int *));\n static void parse_float\t\t\tPROTO((PTR));\n+static void extend_token_buffer_to\tPROTO((int));\n+static int read_line_number\t\tPROTO((int *));\n \f\n /* Do not insert generated code into the source, instead, include it.\n    This allows us to build gcc automatically even for targets that\n@@ -1197,7 +1203,9 @@ parse_float (data)\n    next token, which screws up feed_input.  So just return a null\n    character.  */\n \n-inline int\n+static inline int token_getch PROTO ((void));\n+\n+static inline int\n token_getch ()\n {\n #if USE_CPPLIB\n@@ -1207,7 +1215,9 @@ token_getch ()\n   return GETC ();\n }\n \n-inline void\n+static inline void token_put_back PROTO ((int));\n+\n+static inline void\n token_put_back (ch)\n      int ch;\n {"}, {"sha": "8f272c457dd1e668b96d07dac2b03b6b6d252ff5", "filename": "gcc/c-parse.gperf", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-parse.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fc-parse.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.gperf?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -1,7 +1,15 @@\n %{\n-/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n %}\n struct resword { const char *name; short token; enum rid rid; };\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash PARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n %%\n @class, CLASS, NORID\n @compatibility_alias, ALIAS, NORID"}, {"sha": "003d7f08d316afccf3ec3a0ce47eb7c04d93c6e5", "filename": "gcc/cccp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93868d11a61ed7c903a112b9a29b43907220f51a/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=93868d11a61ed7c903a112b9a29b43907220f51a", "patch": "@@ -4850,6 +4850,8 @@ absolute_filename (filename)\n \n /* Returns whether or not a given character is a directory separator.\n    Used by simplify_filename.  */\n+static inline int is_dir_separator PROTO ((int));\n+\n static inline\n int\n is_dir_separator(ch)"}]}