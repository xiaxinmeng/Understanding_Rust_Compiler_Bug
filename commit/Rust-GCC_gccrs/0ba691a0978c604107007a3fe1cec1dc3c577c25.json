{"sha": "0ba691a0978c604107007a3fe1cec1dc3c577c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhNjkxYTA5NzhjNjA0MTA3MDA3YTNmZTFjZWMxZGMzYzU3N2MyNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-04-30T22:12:31Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-04-30T22:12:31Z"}, "message": "re PR fortran/37131 (inline matmul for small matrix sizes)\n\n2015-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37131\n\t* simplify.c (simplify_bound): Get constant lower bounds of one\n\tfrom array spec for assumed and explicit shape shape arrays if\n\tthe lower bounds are indeed one.\n\n2015-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37131\n\t* gfortran.dg/coarray_lib_this_image_2.f90:  Adjust\n\tscan pattern.\n\t* gfortran.dg/bound_9.f90:  New test case.\n\nFrom-SVN: r222661", "tree": {"sha": "b5190b6aac7c48a4a16f97103c82929fba8919a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5190b6aac7c48a4a16f97103c82929fba8919a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba691a0978c604107007a3fe1cec1dc3c577c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba691a0978c604107007a3fe1cec1dc3c577c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba691a0978c604107007a3fe1cec1dc3c577c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba691a0978c604107007a3fe1cec1dc3c577c25/comments", "author": null, "committer": null, "parents": [{"sha": "6f3d1a5e66b208f9e6599331940ff0cc88df4aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3d1a5e66b208f9e6599331940ff0cc88df4aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3d1a5e66b208f9e6599331940ff0cc88df4aa0"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "021d20d22b1094401e54ebfbfcafa81657c05f60", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0ba691a0978c604107007a3fe1cec1dc3c577c25", "patch": "@@ -1,3 +1,10 @@\n+2015-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* simplify.c (simplify_bound): Get constant lower bounds of one\n+\tfrom array spec for assumed and explicit shape shape arrays if\n+\tthe lower bounds are indeed one.\n+\n 2015-04-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* options.c (gfc_init_options): Remove spurious second"}, {"sha": "f631ac80cdca3f17f73abeab7ba42b8740a0523a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=0ba691a0978c604107007a3fe1cec1dc3c577c25", "patch": "@@ -3445,6 +3445,39 @@ simplify_bound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind, int upper)\n \n  done:\n \n+  /* If the array shape is assumed shape or explicit, we can simplify lbound\n+     to 1 if the given lower bound is one because this matches what lbound\n+     should return for an empty array.  */\n+\n+  if (!upper && as && dim && dim->expr_type == EXPR_CONSTANT\n+      && (as->type == AS_ASSUMED_SHAPE || as->type == AS_EXPLICIT) \n+      && ref->u.ar.type != AR_SECTION)\n+    {\n+      /* Watch out for allocatable or pointer dummy arrays, they can have\n+\t lower bounds that are not equal to one.  */\n+      if (!(array->symtree && array->symtree->n.sym\n+\t    && (array->symtree->n.sym->attr.allocatable\n+\t\t|| array->symtree->n.sym->attr.pointer)))\n+\t{\n+\t  unsigned long int ndim;\n+\t  gfc_expr *lower, *res;\n+\n+\t  ndim = mpz_get_si (dim->value.integer) - 1;\n+\t  lower = as->lower[ndim];\n+\t  if (lower->expr_type == EXPR_CONSTANT\n+\t      && mpz_cmp_si (lower->value.integer, 1) == 0)\n+\t    {\n+\t      res = gfc_copy_expr (lower);\n+\t      if (kind)\n+\t\t{\n+\t\t  int nkind = mpz_get_si (kind->value.integer);\n+\t\t  res->ts.kind = nkind;\n+\t\t}\n+\t      return res;\n+\t    }\n+\t}\n+    }\n+\n   if (as && (as->type == AS_DEFERRED || as->type == AS_ASSUMED_SHAPE\n \t     || as->type == AS_ASSUMED_RANK))\n     return NULL;"}, {"sha": "fdf9c4f9b0889fd1a8bb95fc07cfed664b701b55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ba691a0978c604107007a3fe1cec1dc3c577c25", "patch": "@@ -1,3 +1,10 @@\n+2015-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* gfortran.dg/coarray_lib_this_image_2.f90:  Adjust\n+\tscan pattern.\n+\t* gfortran.dg/bound_9.f90:  New test case.\n+\n 2015-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/ipa/devirt-28a.C: Require LTO effective target."}, {"sha": "d413ca49eb068e481b8008593930a918e9b73bba", "filename": "gcc/testsuite/gfortran.dg/bound_9.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_9.f90?ref=0ba691a0978c604107007a3fe1cec1dc3c577c25", "patch": "@@ -0,0 +1,70 @@\n+! { dg-do  run }\n+! { dg-options \"-fdump-tree-original\" }\n+! Check for different combinations of lbound for dummy arrays,\n+! stressing empty arrays.  The assignments with \"one =\" should\n+! be simplified at compile time.\n+module tst\n+  implicit none\n+contains\n+  subroutine foo (a, b, one, m)\n+    integer, dimension(:), intent(in) :: a\n+    integer, dimension (-2:), intent(in) :: b\n+    integer, intent(out) :: one, m\n+    one = lbound(a,1)\n+    m = lbound(b,1)\n+  end subroutine foo\n+\n+  subroutine bar (a, b, n, m)\n+    integer, dimension(:), allocatable, intent(inout) :: a\n+    integer, dimension(:), pointer, intent(inout) :: b\n+    integer, intent(out) :: n, m\n+    n = lbound(a,1)\n+    m = lbound(b,1)\n+  end subroutine bar\n+\n+  subroutine baz (a, n, m, s)\n+    integer, intent(in) :: n,m\n+    integer, intent(out) :: s\n+    integer, dimension(n:m) :: a\n+    s = lbound(a,1)\n+  end subroutine baz\n+\n+  subroutine qux (a, s, one)\n+    integer, intent(in) :: s\n+    integer, dimension(s) :: a\n+    integer, intent(out) :: one\n+    one = lbound(a,1)\n+  end subroutine qux\n+end module tst\n+\n+program main\n+  use tst\n+  implicit none\n+  integer, dimension(3), target :: a, b\n+  integer, dimension(0) :: empty\n+  integer, dimension(:), allocatable :: x\n+  integer, dimension(:), pointer :: y\n+  integer :: n,m\n+  \n+\n+  call foo(a,b,n,m)\n+  if (n .ne. 1 .or. m .ne. -2) call abort\n+  call foo(a(2:0), empty, n, m)\n+  if (n .ne. 1 .or. m .ne. 1) call abort\n+  call foo(empty, a(2:0), n, m)\n+  if (n .ne. 1 .or. m .ne. 1) call abort\n+  allocate (x(0))\n+  call bar (x, y, n, m)\n+  if (n .ne. 1 .or. m .ne. 1) call abort\n+\n+  call baz(a,3,2,n)\n+  if (n .ne. 1) call abort\n+\n+  call baz(a,2,3,n)\n+  if (n .ne. 2) call abort\n+\n+  call qux(a, -3, n)\n+  if (n .ne. 1) call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"\\\\*one = 1\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "6e72a153a25c9e572acb528d4439c048bb6bfa05", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_this_image_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba691a0978c604107007a3fe1cec1dc3c577c25/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90?ref=0ba691a0978c604107007a3fe1cec1dc3c577c25", "patch": "@@ -20,7 +20,7 @@ end subroutine bar\n ! { dg-final { scan-tree-dump-times \"mylcobound = 5;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"parm...dim\\\\\\[1\\\\\\].lbound = 5;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"myucobound =\\[^\\n\\r\\]* parm...dim\\\\\\[1\\\\\\].lbound \\\\+ \\[^\\n\\r\\]*_gfortran_caf_num_images \\\\(0, -1\\\\).? \\\\+ -?\\[0-9\\]+\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"mylbound = parm...dim\\\\\\[0\\\\\\].stride >= 0 && parm...dim\\\\\\[0\\\\\\].ubound >= parm...dim\\\\\\[0\\\\\\].lbound \\\\|\\\\| parm...dim\\\\\\[0\\\\\\].stride < 0 \\\\?\\[^\\n\\r\\]* parm...dim\\\\\\[0\\\\\\].lbound : 1;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mylbound = 1;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"mythis_image = _gfortran_caf_this_image \\\\(0\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"bar \\\\(&parm.\\[0-9\\]+, caf_token.\\[0-9\\]+, \\\\(integer\\\\(kind=\\[48\\]\\\\)\\\\) parm.\\[0-9\\]+.data - \\\\(integer\\\\(kind=\\[48\\]\\\\)\\\\) x\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_init \\\\(&argc, &argv\\\\);\" 1 \"original\" } }"}]}