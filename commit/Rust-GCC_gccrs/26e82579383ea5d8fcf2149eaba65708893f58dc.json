{"sha": "26e82579383ea5d8fcf2149eaba65708893f58dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlODI1NzkzODNlYTVkOGZjZjIxNDllYWJhNjU3MDg4OTNmNThkYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-09-20T03:06:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-20T03:06:26Z"}, "message": "diagnostic.c (warning_n): New function.\n\n\n\t* diagnostic.c (warning_n): New function.\n\t* diagnostic-core.h (warning_n): Declare.\n\t* ipa-devirt.c (ipa_devirt): Handle singulars correctly;\n\toutput dynamic counts when available.\n\nFrom-SVN: r215416", "tree": {"sha": "2944385c8add22c4bd448d6f39c1915d60932eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2944385c8add22c4bd448d6f39c1915d60932eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e82579383ea5d8fcf2149eaba65708893f58dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e82579383ea5d8fcf2149eaba65708893f58dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e82579383ea5d8fcf2149eaba65708893f58dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e82579383ea5d8fcf2149eaba65708893f58dc/comments", "author": null, "committer": null, "parents": [{"sha": "1acc55917e1afae9eed569f45653a122fd99af99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acc55917e1afae9eed569f45653a122fd99af99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acc55917e1afae9eed569f45653a122fd99af99"}], "stats": {"total": 114, "additions": 95, "deletions": 19}, "files": [{"sha": "4c03408368fea24e4e53b41f2a0e0a10de90e747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26e82579383ea5d8fcf2149eaba65708893f58dc", "patch": "@@ -1,3 +1,10 @@\n+2014-09-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* diagnostic.c (warning_n): New function.\n+\t* diagnostic-core.h (warning_n): Declare.\n+\t* ipa-devirt.c (ipa_devirt): Handle singulars correctly;\n+\toutput dynamic counts when available.\n+\n 2014-09-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR tree-optimization/63255"}, {"sha": "a8245de8985c08391fedb9f52878c4cb63c806e9", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=26e82579383ea5d8fcf2149eaba65708893f58dc", "patch": "@@ -58,6 +58,8 @@ extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern bool warning_n (location_t, int, int, const char *, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(4,6) ATTRIBUTE_GCC_DIAG(5,6);\n extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);"}, {"sha": "881da0b80455b2c629a07a6370317ef2c2647be3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=26e82579383ea5d8fcf2149eaba65708893f58dc", "patch": "@@ -997,6 +997,28 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n   return ret;\n }\n \n+/* A warning at LOCATION.  Use this for code which is correct according to the\n+   relevant language specification but is likely to be buggy anyway.\n+   Returns true if the warning was printed, false if it was inhibited.  */\n+\n+bool\n+warning_n (location_t location, int opt, int n, const char *singular_gmsgid,\n+\t   const char *plural_gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, plural_gmsgid);\n+  diagnostic_set_info_translated (&diagnostic,\n+                                  ngettext (singular_gmsgid, plural_gmsgid, n),\n+                                  &ap, location, DK_WARNING);\n+  diagnostic.option_index = opt;\n+  ret = report_diagnostic (&diagnostic);\n+  va_end (ap);\n+  return ret;\n+}\n+\n /* A \"pedantic\" warning at LOCATION: issues a warning unless\n    -pedantic-errors was given on the command line, in which case it\n    issues an error.  Use this for diagnostics required by the relevant"}, {"sha": "774275b22690ecdc223328e27c66dc730b6066b9", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 64, "deletions": 19, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e82579383ea5d8fcf2149eaba65708893f58dc/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=26e82579383ea5d8fcf2149eaba65708893f58dc", "patch": "@@ -4137,12 +4137,31 @@ ipa_devirt (void)\n \t    if (final_warning_records->type_warnings[i].count)\n \t      {\n \t        tree type = final_warning_records->type_warnings[i].type;\n-\t\twarning_at (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n-\t\t\t    OPT_Wsuggest_final_types,\n-\t\t\t    \"Declaring type %qD final \"\n-\t\t\t    \"would enable devirtualization of %i calls\",\n-\t\t\t    type,\n-\t\t\t    final_warning_records->type_warnings[i].count);\n+\t        int count = final_warning_records->type_warnings[i].count;\n+\t        long long dyn_count\n+\t\t  = final_warning_records->type_warnings[i].dyn_count;\n+\n+\t\tif (!dyn_count)\n+\t\t  warning_n (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n+\t\t\t     OPT_Wsuggest_final_types, count,\n+\t\t\t     \"Declaring type %qD final \"\n+\t\t\t     \"would enable devirtualization of %i call\",\n+\t\t\t     \"Declaring type %qD final \"\n+\t\t\t     \"would enable devirtualization of %i calls\",\n+\t\t\t     type,\n+\t\t\t     count);\n+\t\telse\n+\t\t  warning_n (DECL_SOURCE_LOCATION (TYPE_NAME (type)),\n+\t\t\t     OPT_Wsuggest_final_types, count,\n+\t\t\t     \"Declaring type %qD final \"\n+\t\t\t     \"would enable devirtualization of %i call \"\n+\t\t\t     \"executed %lli times\",\n+\t\t\t     \"Declaring type %qD final \"\n+\t\t\t     \"would enable devirtualization of %i calls \"\n+\t\t\t     \"executed %lli times\",\n+\t\t\t     type,\n+\t\t\t     count,\n+\t\t\t     dyn_count);\n \t      }\n \t}\n \n@@ -4157,19 +4176,45 @@ ipa_devirt (void)\n \t    {\n \t      tree decl = decl_warnings_vec[i]->decl;\n \t      int count = decl_warnings_vec[i]->count;\n-\n-\t      if (DECL_CXX_DESTRUCTOR_P (decl))\n-\t\twarning_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\t    OPT_Wsuggest_final_methods,\n-\t\t\t    \"Declaring virtual destructor of %qD final \"\n-\t\t\t    \"would enable devirtualization of %i calls\",\n-\t\t\t    DECL_CONTEXT (decl), count);\n-\t      else\n-\t\twarning_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\t    OPT_Wsuggest_final_methods,\n-\t\t\t    \"Declaring method %qD final \"\n-\t\t\t    \"would enable devirtualization of %i calls\",\n-\t\t\t    decl, count);\n+\t      long long dyn_count = decl_warnings_vec[i]->dyn_count;\n+\n+\t      if (!dyn_count)\n+\t\tif (DECL_CXX_DESTRUCTOR_P (decl))\n+\t\t  warning_n (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      OPT_Wsuggest_final_methods, count,\n+\t\t\t      \"Declaring virtual destructor of %qD final \"\n+\t\t\t      \"would enable devirtualization of %i call\",\n+\t\t\t      \"Declaring virtual destructor of %qD final \"\n+\t\t\t      \"would enable devirtualization of %i calls\",\n+\t\t\t      DECL_CONTEXT (decl), count);\n+\t\telse\n+\t\t  warning_n (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      OPT_Wsuggest_final_methods, count,\n+\t\t\t      \"Declaring method %qD final \"\n+\t\t\t      \"would enable devirtualization of %i call\",\n+\t\t\t      \"Declaring method %qD final \"\n+\t\t\t      \"would enable devirtualization of %i calls\",\n+\t\t\t      decl, count);\n+\t       else if (DECL_CXX_DESTRUCTOR_P (decl))\n+\t\t  warning_n (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      OPT_Wsuggest_final_methods, count,\n+\t\t\t      \"Declaring virtual destructor of %qD final \"\n+\t\t\t      \"would enable devirtualization of %i call \"\n+\t\t\t      \"executed %lli times\",\n+\t\t\t      \"Declaring virtual destructor of %qD final \"\n+\t\t\t      \"would enable devirtualization of %i calls \"\n+\t\t\t      \"executed %lli times\",\n+\t\t\t      DECL_CONTEXT (decl), count, dyn_count);\n+\t\telse\n+\t\t  warning_n (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      OPT_Wsuggest_final_methods, count,\n+\t\t\t      \"Declaring method %qD final \"\n+\t\t\t      \"would enable devirtualization of %i call \"\n+\t\t\t      \"executed %lli times\",\n+\t\t\t      \"Declaring method %qD final \"\n+\t\t\t      \"would enable devirtualization of %i calls \"\n+\t\t\t      \"executed %lli times\",\n+\t\t\t      decl, count, dyn_count);\n \t    }\n \t}\n \t"}]}