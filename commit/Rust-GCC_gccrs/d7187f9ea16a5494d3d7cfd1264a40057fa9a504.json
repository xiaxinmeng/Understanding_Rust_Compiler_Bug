{"sha": "d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxODdmOWVhMTZhNTQ5NGQzZDdjZmQxMjY0YTQwMDU3ZmE5YTUwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-05-10T11:25:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-05-10T11:25:06Z"}, "message": "libstdc++/71005 fix post-increment for filesystem iterators\n\n\tPR libstdc++/71005\n\t* include/experimental/bits/fs_dir.h (__directory_iterator_proxy):\n\tNew type.\n\t(directory_iterator::operator++(int)): Return proxy.\n\t(recursive_directory_iterator::operator++(int)): Likewise.\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tTest post-increment.\n\t* testsuite/experimental/filesystem/iterators/\n\trecursive_directory_iterator.cc: Likewise.\n\nFrom-SVN: r236072", "tree": {"sha": "17e298208a900930d88a077df9aa7e7d5a57a74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e298208a900930d88a077df9aa7e7d5a57a74a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf68d92c7bb339d89426558cae2ad731ae8f0508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf68d92c7bb339d89426558cae2ad731ae8f0508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf68d92c7bb339d89426558cae2ad731ae8f0508"}], "stats": {"total": 150, "additions": 137, "deletions": 13}, "files": [{"sha": "58f6646b8546ff60632d68fa9c6d90b19bc9bfff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "patch": "@@ -1,3 +1,15 @@\n+2016-05-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71005\n+\t* include/experimental/bits/fs_dir.h (__directory_iterator_proxy):\n+\tNew type.\n+\t(directory_iterator::operator++(int)): Return proxy.\n+\t(recursive_directory_iterator::operator++(int)): Likewise.\n+\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n+\tTest post-increment.\n+\t* testsuite/experimental/filesystem/iterators/\n+\trecursive_directory_iterator.cc: Likewise.\n+\n 2016-05-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/71004\n@@ -20,7 +32,7 @@\n \t* include/experimental/bits/fs_dir.h (recursive_directory_iterator):\n \tInitialize scalar member variables in default constructor.\n \t* testsuite/experimental/filesystem/iterators/\n-\trecursive_directory_iterator.cc: Teste default construction.\n+\trecursive_directory_iterator.cc: Test default construction.\n \n 2016-05-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "5fd41c2127fdaa2acdd353898d6ea7cd55a6ec98", "filename": "libstdc++-v3/include/experimental/bits/fs_dir.h", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h?ref=d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "patch": "@@ -153,8 +153,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   };\n \n   struct _Dir;\n+  class directory_iterator;\n   class recursive_directory_iterator;\n \n+  struct __directory_iterator_proxy\n+  {\n+    const directory_entry& operator*() const noexcept { return _M_entry; }\n+\n+  private:\n+    friend class directory_iterator;\n+    friend class recursive_directory_iterator;\n+\n+    explicit\n+    __directory_iterator_proxy(const directory_entry& __e) : _M_entry(__e) { }\n+\n+    directory_entry _M_entry;\n+  };\n+\n   class directory_iterator\n   {\n   public:\n@@ -177,7 +192,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     : directory_iterator(__p, directory_options::none, __ec) { }\n \n     directory_iterator(const path& __p,\n-      directory_options __options, error_code& __ec) noexcept\n+\t\t       directory_options __options,\n+\t\t       error_code& __ec) noexcept\n     : directory_iterator(__p, __options, &__ec) { }\n \n     directory_iterator(const directory_iterator& __rhs) = default;\n@@ -186,19 +202,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     ~directory_iterator() = default;\n \n-    directory_iterator& operator=(const directory_iterator& __rhs) = default;\n-    directory_iterator& operator=(directory_iterator&& __rhs) noexcept = default;\n+    directory_iterator&\n+    operator=(const directory_iterator& __rhs) = default;\n+\n+    directory_iterator&\n+    operator=(directory_iterator&& __rhs) noexcept = default;\n \n     const directory_entry& operator*() const;\n     const directory_entry* operator->() const { return &**this; }\n     directory_iterator&    operator++();\n     directory_iterator&    increment(error_code& __ec) noexcept;\n \n-    directory_iterator operator++(int)\n+    __directory_iterator_proxy operator++(int)\n     {\n-      auto __tmp = *this;\n+      __directory_iterator_proxy __pr{**this};\n       ++*this;\n-      return __tmp;\n+      return __pr;\n     }\n \n   private:\n@@ -274,18 +293,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     // modifiers\n     recursive_directory_iterator&\n-      operator=(const recursive_directory_iterator& __rhs) noexcept;\n+    operator=(const recursive_directory_iterator& __rhs) noexcept;\n     recursive_directory_iterator&\n-      operator=(recursive_directory_iterator&& __rhs) noexcept;\n+    operator=(recursive_directory_iterator&& __rhs) noexcept;\n \n     recursive_directory_iterator& operator++();\n     recursive_directory_iterator& increment(error_code& __ec) noexcept;\n \n-    recursive_directory_iterator operator++(int)\n+    __directory_iterator_proxy operator++(int)\n     {\n-      auto __tmp = *this;\n+      __directory_iterator_proxy __pr{**this};\n       ++*this;\n-      return __tmp;\n+      return __pr;\n     }\n \n     void pop();"}, {"sha": "ce9f437b0df06080e40859779d9fc094e045a49e", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "patch": "@@ -70,8 +70,53 @@ test01()\n   remove_all(p, ec);\n }\n \n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  std::error_code ec;\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directory(p, fs::current_path(), ec);\n+  create_directory_symlink(p, p / \"l\", ec);\n+  VERIFY( !ec );\n+\n+  // Test post-increment (libstdc++/71005)\n+  auto iter = fs::directory_iterator(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( iter != fs::directory_iterator() );\n+  const auto entry1 = *iter;\n+  const auto entry2 = *iter++;\n+  VERIFY( entry1 == entry2 );\n+  VERIFY( entry1.path() == p/\"l\" );\n+  VERIFY( iter == fs::directory_iterator() );\n+\n+  remove_all(p, ec);\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  std::error_code ec;\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directories(p / \"longer_than_small_string_buffer\", ec);\n+  VERIFY( !ec );\n+\n+  // Test for no reallocation on each dereference (this is a GNU extension)\n+  auto iter = fs::directory_iterator(p, ec);\n+  const auto* s1 = iter->path().c_str();\n+  const auto* s2 = iter->path().c_str();\n+  VERIFY( s1 == s2 );\n+\n+  remove_all(p, ec);\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "fb4c31ec9add7e33dba9898e1716dcc97f6706d9", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7187f9ea16a5494d3d7cfd1264a40057fa9a504/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=d7187f9ea16a5494d3d7cfd1264a40057fa9a504", "patch": "@@ -102,7 +102,53 @@ test02()\n {\n   bool test __attribute__((unused)) = false;\n \n-  // libstdc++71004\n+  std::error_code ec;\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directories(p / \"d1/d2\", ec);\n+  VERIFY( !ec );\n+\n+  // Test post-increment (libstdc++/71005)\n+  auto iter = fs::recursive_directory_iterator(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( iter != fs::recursive_directory_iterator() );\n+  const auto entry1 = *iter;\n+  const auto entry2 = *iter++;\n+  VERIFY( entry1 == entry2 );\n+  VERIFY( entry1.path() == p/\"d1\" );\n+  const auto entry3 = *iter;\n+  const auto entry4 = *iter++;\n+  VERIFY( entry3 == entry4 );\n+  VERIFY( entry3.path() == p/\"d1/d2\" );\n+  VERIFY( iter == fs::recursive_directory_iterator() );\n+\n+  remove_all(p, ec);\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  std::error_code ec;\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directories(p / \"longer_than_small_string_buffer\", ec);\n+  VERIFY( !ec );\n+\n+  // Test for no reallocation on each dereference (this is a GNU extension)\n+  auto iter = fs::recursive_directory_iterator(p, ec);\n+  const auto* s1 = iter->path().c_str();\n+  const auto* s2 = iter->path().c_str();\n+  VERIFY( s1 == s2 );\n+\n+  remove_all(p, ec);\n+}\n+\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  // libstdc++/71004\n   const fs::recursive_directory_iterator it;\n   VERIFY( it == fs::recursive_directory_iterator() );\n }\n@@ -112,4 +158,6 @@ main()\n {\n   test01();\n   test02();\n+  test03();\n+  test04();\n }"}]}