{"sha": "edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjZjU5ODNiNjlhMjFjZGM3NmZjMzFmZmJiODI1OTg0NDFjNmJhMw==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2011-10-13T10:51:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-13T10:51:39Z"}, "message": "a-ngrear.adb, [...] (Sqrt): Make generic and move to System.Generic_Array_Operations.\n\n2011-10-13  Geert Bosch  <bosch@adacore.com>\n\n\t* a-ngrear.adb, s-gearop.adb, s-gearop.ads (Sqrt): Make generic and\n\tmove to System.Generic_Array_Operations.\n\nFrom-SVN: r179909", "tree": {"sha": "9e509c3f676ecad5d2dfecae5bc84304c937b8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e509c3f676ecad5d2dfecae5bc84304c937b8ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/comments", "author": null, "committer": null, "parents": [{"sha": "a4935dea3fa78cd019774991efe03ffbf96aecb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4935dea3fa78cd019774991efe03ffbf96aecb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4935dea3fa78cd019774991efe03ffbf96aecb7"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "24fd5821f83d01d6315cd7f8e2bd27dc57001fad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "patch": "@@ -1,3 +1,8 @@\n+2011-10-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* a-ngrear.adb, s-gearop.adb, s-gearop.ads (Sqrt): Make generic and\n+\tmove to System.Generic_Array_Operations.\n+\n 2011-10-13  Geert Bosch  <bosch@adacore.com>\n \n \t* a-ngrear.adb (\"abs\"): Adjust for modified L2_Norm generic"}, {"sha": "85c949eebb90e65f6656bf7e957dc09d1983e93b", "filename": "gcc/ada/a-ngrear.adb", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fa-ngrear.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fa-ngrear.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngrear.adb?ref=edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "patch": "@@ -102,10 +102,10 @@ package body Ada.Numerics.Generic_Real_Arrays is\n    procedure Swap (Left, Right : in out Real);\n    --  Exchange Left and Right\n \n-   function Sqrt (X : Real) return Real;\n-   --  Sqrt is implemented locally here, in order to avoid dragging in all of\n-   --  the elementary functions. Speed of the square root is not a big concern\n-   --  here. This also avoids depending on a specific floating point type.\n+   function Sqrt is new Ops.Sqrt (Real);\n+   --  Instant a generic square root implementation here, in order to avoid\n+   --  instantiating a complete copy of Generic_Elementary_Functions.\n+   --  Speed of the square root is not a big concern here.\n \n    ------------\n    -- Rotate --\n@@ -119,51 +119,6 @@ package body Ada.Numerics.Generic_Real_Arrays is\n       Y := Old_Y + Sin * (Old_X - Old_Y * Tau);\n    end Rotate;\n \n-   ----------\n-   -- Sqrt --\n-   ----------\n-\n-   function Sqrt (X : Real) return Real is\n-      Root, Next : Real;\n-\n-   begin\n-      --  Be defensive: any comparisons with NaN values will yield False.\n-\n-      if not (X > 0.0) then\n-         if X = 0.0 then\n-            return X;\n-         else\n-            raise Argument_Error;\n-         end if;\n-      end if;\n-\n-      --  Compute an initial estimate based on:\n-\n-      --     X = M * R**E and Sqrt (X) = Sqrt (M) * R**(E / 2.0),\n-\n-      --  where M is the mantissa, R is the radix and E the exponent.\n-\n-      --  By ignoring the mantissa and ignoring the case of an odd\n-      --  exponent, we get a final error that is at most R. In other words,\n-      --  the result has about a single bit precision.\n-\n-      Root := Real (Real'Machine_Radix) ** (Real'Exponent (X) / 2);\n-\n-      --  Because of the poor initial estimate, use the Babylonian method of\n-      --  computing the square root, as it is stable for all inputs. Every step\n-      --  will roughly double the precision of the result. Just a few steps\n-      --  suffice in most cases. Eight iterations should give about 2**8 bits\n-      --  of precision.\n-\n-      for J in 1 .. 8 loop\n-         Next := (Root + X / Root) / 2.0;\n-         exit when Root = Next;\n-         Root := Next;\n-      end loop;\n-\n-      return Root;\n-   end Sqrt;\n-\n    ----------\n    -- Swap --\n    ----------"}, {"sha": "1380cd449cdae5120c7c5022098b25786b2de1b1", "filename": "gcc/ada/s-gearop.adb", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.adb?ref=edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "patch": "@@ -29,6 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Numerics; use Ada.Numerics;\n+\n package body System.Generic_Array_Operations is\n \n    --  The local function Check_Unit_Last computes the index\n@@ -567,6 +569,56 @@ package body System.Generic_Array_Operations is\n       return R;\n    end Scalar_Vector_Elementwise_Operation;\n \n+   ----------\n+   -- Sqrt --\n+   ----------\n+\n+   function Sqrt (X : Real'Base) return Real'Base is\n+      Root, Next : Real'Base;\n+\n+   begin\n+      --  Be defensive: any comparisons with NaN values will yield False.\n+\n+      if not (X > 0.0) then\n+         if X = 0.0 then\n+            return X;\n+         else\n+            raise Argument_Error;\n+         end if;\n+\n+      elsif X > Real'Base'Last then\n+         --  X is infinity, which is its own square root\n+\n+         return X;\n+      end if;\n+\n+      --  Compute an initial estimate based on:\n+\n+      --     X = M * R**E and Sqrt (X) = Sqrt (M) * R**(E / 2.0),\n+\n+      --  where M is the mantissa, R is the radix and E the exponent.\n+\n+      --  By ignoring the mantissa and ignoring the case of an odd\n+      --  exponent, we get a final error that is at most R. In other words,\n+      --  the result has about a single bit precision.\n+\n+      Root := Real'Base (Real'Machine_Radix) ** (Real'Exponent (X) / 2);\n+\n+      --  Because of the poor initial estimate, use the Babylonian method of\n+      --  computing the square root, as it is stable for all inputs. Every step\n+      --  will roughly double the precision of the result. Just a few steps\n+      --  suffice in most cases. Eight iterations should give about 2**8 bits\n+      --  of precision.\n+\n+      for J in 1 .. 8 loop\n+         Next := (Root + X / Root) / 2.0;\n+         exit when Root = Next;\n+         Root := Next;\n+      end loop;\n+\n+      return Root;\n+   end Sqrt;\n+\n    ---------------------------\n    -- Matrix_Matrix_Product --\n    ---------------------------"}, {"sha": "c8eea4f94401ee043895181ac59119fd245d3860", "filename": "gcc/ada/s-gearop.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fs-gearop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edcf5983b69a21cdc76fc31ffbb82598441c6ba3/gcc%2Fada%2Fs-gearop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.ads?ref=edcf5983b69a21cdc76fc31ffbb82598441c6ba3", "patch": "@@ -388,6 +388,14 @@ pragma Pure (Generic_Array_Operations);\n      (Left  : Left_Matrix;\n       Right : Right_Matrix) return Result_Matrix;\n \n+   ----------\n+   -- Sqrt --\n+   ----------\n+\n+   generic\n+      type Real is digits <>;\n+   function Sqrt (X : Real'Base) return Real'Base;\n+\n    -----------------\n    -- Swap_Column --\n    -----------------"}]}