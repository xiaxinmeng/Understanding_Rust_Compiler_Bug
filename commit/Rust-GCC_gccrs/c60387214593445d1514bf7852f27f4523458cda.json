{"sha": "c60387214593445d1514bf7852f27f4523458cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYwMzg3MjE0NTkzNDQ1ZDE1MTRiZjc4NTJmMjdmNDUyMzQ1OGNkYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-09T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-09T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "f604ce71a7148480e4f7e7407172fec02ef18d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f604ce71a7148480e4f7e7407172fec02ef18d61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c60387214593445d1514bf7852f27f4523458cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60387214593445d1514bf7852f27f4523458cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60387214593445d1514bf7852f27f4523458cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60387214593445d1514bf7852f27f4523458cda/comments", "author": null, "committer": null, "parents": [{"sha": "25e5ecdf82b49977e86bfaded236fb34af2705ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e5ecdf82b49977e86bfaded236fb34af2705ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e5ecdf82b49977e86bfaded236fb34af2705ed"}], "stats": {"total": 478, "additions": 477, "deletions": 1}, "files": [{"sha": "aeec6b4a69c593305a974f479cde0273315cdb75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,143 @@\n+2021-06-08  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/25290\n+\t* tree-ssa-phiopt.c (xor_replacement): Delete.\n+\t(tree_ssa_phiopt_worker): Delete use of xor_replacement.\n+\t(match_simplify_replacement): Allow one cheap preparation\n+\tstatement that can be moved to before the if.\n+\n+2021-06-08  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/power10.md (power10-fused-load, power10-fused-store,\n+\tpower10-fused_alu, power10-fused-vec, power10-fused-branch): New.\n+\n+2021-06-08  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/logical.md (andqi3_1): Move BCLR case into define_insn_and_split.\n+\tCreate length attribute on define_insn_and_split.  Only split for cases which we\n+\tknow will use AND.\n+\t(andqi3_1<cczn>): Renamed from andqi3_1_clobber_flags.  Only handle AND here and\n+\tfix length computation.\n+\t(b<code><mode>msx): Combine QImode and HImode H8/SX patterns using iterator.\n+\n+2021-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100923\n+\t* tree-ssa-sccvn.c (valueize_refs_1): Take a pointer to\n+\tthe operand vector to be valueized.\n+\t(valueize_refs): Likewise.\n+\t(valueize_shared_reference_ops_from_ref): Adjust.\n+\t(valueize_shared_reference_ops_from_call): Likewise.\n+\t(vn_reference_lookup_3): Likewise.\n+\t(vn_reference_lookup_pieces): Likewise.  Re-valueize\n+\twith honoring availability when we are about to create\n+\tthe ao_ref and valueized before.\n+\t(vn_reference_lookup): Likewise.\n+\t(vn_reference_insert_pieces): Adjust.\n+\n+2021-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_slp_instance::root_stmt): Change to...\n+\t(_slp_instance::root_stmts): ... a vector.\n+\t(SLP_INSTANCE_ROOT_STMT): Rename to ...\n+\t(SLP_INSTANCE_ROOT_STMTS): ... this.\n+\t(slp_root::root): Change to...\n+\t(slp_root::roots): ... a vector.\n+\t(slp_root::slp_root): Adjust.\n+\t* tree-vect-slp.c (_slp_instance::location): Adjust.\n+\t(vect_free_slp_instance): Release the root stmt vector.\n+\t(vect_build_slp_instance): Adjust.\n+\t(vect_analyze_slp): Likewise.\n+\t(_bb_vec_info::~_bb_vec_info): Likewise.\n+\t(vect_slp_analyze_operations): Likewise.\n+\t(vect_bb_vectorization_profitable_p): Likewise.  Adjust\n+\tcosts for the root stmt.\n+\t(vect_slp_check_for_constructors): Gather all BIT_INSERT_EXPRs\n+\tas root stmts.\n+\t(vect_slp_analyze_bb_1): Simplify by marking all root stmts\n+\tas pure_slp.\n+\t(vectorize_slp_instance_root_stmt): Adjust.\n+\t(vect_schedule_slp): Likewise.\n+\n+2021-06-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (class ssa_equiv_stack): New.\n+\t(ssa_equiv_stack::ssa_equiv_stack): New.\n+\t(ssa_equiv_stack::~ssa_equiv_stack): New.\n+\t(ssa_equiv_stack::enter): New.\n+\t(ssa_equiv_stack::leave): New.\n+\t(ssa_equiv_stack::push_replacement): New.\n+\t(ssa_equiv_stack::get_replacement): New.\n+\t(is_pointer_ssa): New.\n+\t(class pointer_equiv_analyzer): New.\n+\t(pointer_equiv_analyzer::pointer_equiv_analyzer): New.\n+\t(pointer_equiv_analyzer::~pointer_equiv_analyzer): New.\n+\t(pointer_equiv_analyzer::set_global_equiv): New.\n+\t(pointer_equiv_analyzer::set_cond_equiv): New.\n+\t(pointer_equiv_analyzer::get_equiv): New.\n+\t(pointer_equiv_analyzer::enter): New.\n+\t(pointer_equiv_analyzer::leave): New.\n+\t(pointer_equiv_analyzer::get_equiv_expr): New.\n+\t(pta_valueize): New.\n+\t(pointer_equiv_analyzer::visit_stmt): New.\n+\t(pointer_equiv_analyzer::visit_edge): New.\n+\t(hybrid_folder::value_of_expr): Call PTA.\n+\t(hybrid_folder::value_on_edge): Same.\n+\t(hybrid_folder::pre_fold_bb): New.\n+\t(hybrid_folder::post_fold_bb): New.\n+\t(hybrid_folder::pre_fold_stmt): New.\n+\t(rvrp_folder::pre_fold_bb): New.\n+\t(rvrp_folder::post_fold_bb): New.\n+\t(rvrp_folder::pre_fold_stmt): New.\n+\t(rvrp_folder::value_of_expr): Call PTA.\n+\t(rvrp_folder::value_on_edge): Same.\n+\n+2021-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100957\n+\t* tree-inline.c (copy_tree_body_r): For OMP_CLAUSE_DEPEND don't\n+\tcheck TREE_CODE if OMP_CLAUSE_DECL is NULL.\n+\n+2021-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100951\n+\t* tree-vect-generic.c (expand_vector_piecewise): Build a\n+\tVECTOR_CST if all elements are constant.\n+\t(expand_vector_condition): Likewise.\n+\t(lower_vec_perm): Likewise.\n+\t(expand_vector_conversion): Likewise.\n+\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Document new param evrp-sparse-threshold.\n+\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* genautomata.c (create_automata): Fix typo.\n+\n+2021-06-08  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/100794\n+\t* tree-predcom.c (tree_predictive_commoning_loop): Add parameter\n+\tallow_unroll_p and only allow unrolling when it's true.\n+\t(tree_predictive_commoning): Add parameter allow_unroll_p and\n+\tadjust for it.\n+\t(run_tree_predictive_commoning): Likewise.\n+\t(pass_predcom::gate): Check flag_tree_loop_vectorize and\n+\tglobal_options_set.x_flag_predictive_commoning.\n+\t(pass_predcom::execute): Adjust for allow_unroll_p.\n+\n+2021-06-08  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-predcom.c (execute_pred_commoning): Remove update_ssa call.\n+\t(tree_predictive_commoning_loop): Factor some cleanup stuffs into\n+\tlambda function cleanup, remove scev_reset call, and adjust return\n+\tvalue.\n+\t(tree_predictive_commoning): Adjust for different changed values,\n+\tonly set flag TODO_update_ssa_only_virtuals if changed.\n+\t(pass_data pass_data_predcom): Remove TODO_update_ssa_only_virtuals\n+\tfrom todo_flags_finish.\n+\n 2021-06-07  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-cache.cc (class sbr_sparse_bitmap): New."}, {"sha": "217a88045db76b9636c5f70b8f321d019680ddde", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1 +1 @@\n-20210608\n+20210609"}, {"sha": "c3a3d3995ad39b783311d89e3b9da881aef16884", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,49 @@\n+2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99212\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_binop): Add support for folding\n+\tBIT_AND_EXPR of compound_svalue and a mask constant.\n+\t* region-model.cc (region_model::get_rvalue_1): Implement\n+\tBIT_FIELD_REF in terms of...\n+\t(region_model::get_rvalue_for_bits): New function.\n+\t* region-model.h (region_model::get_rvalue_for_bits): New decl.\n+\t* store.cc (bit_range::from_mask): New function.\n+\t(selftest::test_bit_range_intersects_p): New selftest.\n+\t(selftest::assert_bit_range_from_mask_eq): New.\n+\t(ASSERT_BIT_RANGE_FROM_MASK_EQ): New macro.\n+\t(selftest::assert_no_bit_range_from_mask_eq): New.\n+\t(ASSERT_NO_BIT_RANGE_FROM_MASK): New macro.\n+\t(selftest::test_bit_range_from_mask): New selftest.\n+\t(selftest::analyzer_store_cc_tests): Call the new selftests.\n+\t* store.h (bit_range::intersects_p): New.\n+\t(bit_range::from_mask): New decl.\n+\t(concrete_binding::get_bit_range): New accessor.\n+\t(store_manager::get_concrete_binding): New overload taking\n+\tconst bit_range &.\n+\n+2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (int_size_in_bits): New decl.\n+\t* region.cc (int_size_in_bits): New function.\n+\t(region::get_bit_size): Reimplement in terms of the above.\n+\n+2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* store.cc (concrete_binding::dump_to_pp): Move bulk of\n+\timplementation to...\n+\t(bit_range::dump_to_pp): ...this new function.\n+\t(bit_range::cmp): New.\n+\t(concrete_binding::overlaps_p): Update for use of bit_range.\n+\t(concrete_binding::cmp_ptr_ptr): Likewise.\n+\t* store.h (struct bit_range): New.\n+\t(class concrete_binding): Replace fields m_start_bit_offset and\n+\tm_size_in_bits with new field m_bit_range.\n+\n+2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* svalue.h (conjured_svalue::iterator_t): Delete.\n+\n 2021-06-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* store.h (store::get_direct_binding): Remove unused decl."}, {"sha": "5a97fc84264e85b60adfdc50187ce7faeeb6f86f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,43 @@\n+2021-06-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100065\n+\t* decl.c (grokdeclarator): Store a value-dependent\n+\texplicit-specifier even for deduction guides.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_string_literal): Adjust diagnostic.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100963\n+\t* call.c (perfect_conversion_p): Check check_narrowing.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91706\n+\t* name-lookup.c (get_class_binding): Keep a BASELINK.\n+\t(set_inherited_value_binding_p): Adjust.\n+\t* lambda.c (is_lambda_ignored_entity): Adjust.\n+\t* pt.c (lookup_template_function): Copy a BASELINK before\n+\tmodifying it.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91706\n+\t* semantics.c (baselink_for_fns): Fix BASELINK_BINFO.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* module.cc (duplicate_hash::hash): Comment out.\n+\t(trees_in::tree_value): Adjust loop counter.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100102\n+\t* init.c (build_offset_ref): Return the BASELINK for a static\n+\tmember function.\n+\n 2021-06-07  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100918"}, {"sha": "554afaafa85c5fe074910253602058adc7f31d0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,19 @@\n+2021-06-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* trans-openmp.c (gfc_add_clause_implicitly): New.\n+\t(gfc_split_omp_clauses): Use it.\n+\t(gfc_free_split_omp_clauses): New.\n+\t(gfc_trans_omp_do_simd, gfc_trans_omp_parallel_do,\n+\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_distribute,\n+\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_taskloop,\n+\tgfc_trans_omp_master_taskloop, gfc_trans_omp_parallel_master): Use it.\n+\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* intrinsic.texi: Fix typo.\n+\t* trans-expr.c (gfc_trans_pointer_assignment): Likewise.\n+\n 2021-06-05  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100120"}, {"sha": "693146dba2c708f2bc7b48987b2b7e032c052e4c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,8 @@\n+2021-06-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* Make-lang.in (cc1-obj-checksum.c): Check previous\n+\tstage checksum exists.\n+\n 2021-06-07  Bernd Edlinger  <bernd.edlinger@softing.com>\n \n \t* Make-lang.in (cc1obj-checksum.c): For stage-final re-use"}, {"sha": "5e6802db46efc5f6be28cb93b3c53d2112ef3257", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,8 @@\n+2021-06-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* Make-lang.in (cc1objplus-checksum.c): Check previous\n+\tstage checksum exists.\n+\n 2021-06-07  Bernd Edlinger  <bernd.edlinger@softing.com>\n \n \t* Make-lang.in (cc1objplus-checksum.c): For stage-final re-use"}, {"sha": "640fcbed0ebb9ed5e0b0ab12c52e1950284f9ee9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,99 @@\n+2021-06-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100065\n+\t* g++.dg/cpp2a/explicit18.C: New test.\n+\n+2021-06-08  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/tree-ssa/pr96928-1.c: Fix testcase for now that ~\n+\thappens on the outside of the bit_xor.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/pr60209-neg.C: Update diagnostic.\n+\t* g++.dg/diagnostic/string-literal-concat.C: Likewise.\n+\t* g++.dg/ext/utf-badconcat.C: Likewise.\n+\t* g++.dg/ext/utf-badconcat2.C: Likewise.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/mixed-concat1.C: New test.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/whitespace-splice1.C: New test.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/narrowing-bool1.C: New test.\n+\n+2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99212\n+\t* gcc.dg/analyzer/bitfields-1.c: New test.\n+\t* gcc.dg/analyzer/data-model-1.c (struct sbits): Make bitfields\n+\texplicitly signed.\n+\t(test_44): Update test values assigned to the bits to ones that\n+\tfit in the range of the bitfield type.  Remove xfails.\n+\t(test_45): Remove xfails.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100963\n+\t* g++.dg/cpp0x/initlist124.C: New test.\n+\n+2021-06-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100923\n+\t* gcc.dg/torture/pr100923.c: New testcase.\n+\n+2021-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100957\n+\t* g++.dg/gomp/doacross-2.C: New test.\n+\n+2021-06-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/100951\n+\t* gcc.target/i386/pr100951.c: New test.\n+\n+2021-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100887\n+\tPR testsuite/100943\n+\t* gcc.dg/pr100887.c: Add -Wno-psabi -w to dg-options.\n+\n+2021-06-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* gfortran.dg/gomp/openmp-simd-6.f90: Update scan-tree-dump.\n+\t* gfortran.dg/gomp/scan-5.f90: Likewise.\n+\t* gfortran.dg/gomp/loop-1.f90: Likewise; remove xfail.\n+\t* gfortran.dg/gomp/pr99928-1.f90: Remove xfail.\n+\t* gfortran.dg/gomp/pr99928-2.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-3.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-8.f90: Likewise.\n+\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/format/strfmon-1.c: Fix typo.\n+\t* gfortran.dg/char4-subscript.f90: Likewise.\n+\n+2021-06-08  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/100794\n+\t* gcc.dg/tree-ssa/pr100794.c: New test.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91706\n+\t* g++.dg/template/lookup17.C: New test.\n+\n+2021-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100102\n+\t* g++.dg/cpp0x/alias-decl-73.C: New test.\n+\n 2021-06-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/100637"}, {"sha": "97bc03559777494926fe70141f88f00cc4338671", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,8 @@\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* intrinsics/chmod.c (chmod_internal): Fix typo.\n+\t* io/transfer.c (read_sf): Likewise.\n+\n 2021-06-05  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100120"}, {"sha": "5ad269346fb0587a86597f184400e55dbe455811", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,104 @@\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (gcn_exec): Force 'num_workers (1)'\n+\tunconditionally.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c:\n+\tUpdate.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Likewise.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-11.c: Enable for all but\n+\t'-DACC_MEM_SHARED=0'.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-13.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-14.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-15.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-20.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-23.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-24.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-34.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-42.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-44.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-48.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-88.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-89.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-92.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-14.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-5.c: Add\n+\t'acc_device_radeon' testing.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-6.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-5.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-7.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-52.c: Enable for all.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-53.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-54.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-86.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-87.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-10.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-8.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-57.c: Improve checking\n+\tfor non-'openacc_nvidia_accel_selected'.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-58.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-62.c: Clarify that \"Not\n+\tall implement this checking\".\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-63.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-64.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-65.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-67.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-68.c: Likewise.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Simplify.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims-aux.c: Update.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c: Fix\n+\tfor 'acc_device_radeon'.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Enhance\n+\tfor non-'acc_device_nvidia'.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_on_device-1.c: Add\n+\t'acc_device_radeon' testing.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Don't\n+\trequire 'openacc_nvidia_accel_selected'.  Fix up for\n+\t'ACC_DEVICE_TYPE_radeon'.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c++/declare-1.C: Don't require\n+\t'openacc_nvidia_accel_selected'.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-3.c: Likewise.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_openacc_radeon_accel_selected):\n+\tStreamline.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Revert\n+\tPR80547 workaround.\n+\n+2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c\n+\t<acc_device_nvidia>: Update comment.\n+\n 2021-05-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/depend-iterator-2.f90: New test."}, {"sha": "86caab8b4a571c66ab3c06b25627147f5bb79d6c", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,7 @@\n+2021-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* libquadmath.texi: Fix typo.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "f5febd3b484d9f0eb7df0cc18969ec42e8bbb013", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60387214593445d1514bf7852f27f4523458cda/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60387214593445d1514bf7852f27f4523458cda/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c60387214593445d1514bf7852f27f4523458cda", "patch": "@@ -1,3 +1,21 @@\n+2021-06-08  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\tPR libstdc++/100889\n+\t* include/bits/atomic_base.h (atomic_ref<_Tp*>::wait):\n+\tChange parameter type from _Tp to _Tp*.\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Extend\n+\tcoverage of types tested.\n+\n+2021-06-08  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\t* include/std/barrier (__tree_barrier::_M_arrive): Remove\n+\tunnecessary hasher instantiation.\n+\n+2021-06-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/propagate_const (swap): Constrain.\n+\t* testsuite/experimental/propagate_const/swap/lwg3413.cc: New test.\n+\n 2021-06-07  Avi Kivity  <avi@scylladb.com>\n \n \tPR libstdc++/100900"}]}