{"sha": "83dad10cd4b91158e8dbf152c7346e41fec3de05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNkYWQxMGNkNGI5MTE1OGU4ZGJmMTUyYzczNDZlNDFmZWMzZGUwNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-06T05:46:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-06T05:46:02Z"}, "message": "Makefile.in (NM_FOR_TARGET): New.\n\n        * Makefile.in (NM_FOR_TARGET): New.\n        (libgcc.mk): Pass SHLIB_MKMAP, SHLIB_MAPFILES.\n        (libgcc.a, stmp-multilib): Pass NM_FOR_TARGET.\n        * mklibgcc.in: If SHLIB_MKMAP, build libgcc.map.  Depend the\n        shared library build on that and EXTRA_MULTILIB_PARTS.\n        * mkmap-flat.awk: New file.\n        * mkmap-symver.awk: New file.\n        * libgcc-std.ver: New file.\n        * config/libgcc-glibc.ver: New file.\n        * config/ia64/libgcc-ia64.ver: New file.\n        * config/t-linux (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n        (SHLIB_LINK): Add --version-script.\n        * config/ia64/t-ia64 (SHLIB_MAPFILES): Add libgcc-ia64.ver.\n        * config/mips/t-iris6 (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n        * config/sparc/t-sol2 (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n        (SHLIB_LINK): Add -M.\n\nFrom-SVN: r36746", "tree": {"sha": "be4a2f085ae65cf6912abaacdb552d587cf5422f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be4a2f085ae65cf6912abaacdb552d587cf5422f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83dad10cd4b91158e8dbf152c7346e41fec3de05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83dad10cd4b91158e8dbf152c7346e41fec3de05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83dad10cd4b91158e8dbf152c7346e41fec3de05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83dad10cd4b91158e8dbf152c7346e41fec3de05/comments", "author": null, "committer": null, "parents": [{"sha": "29279975b86791aeb42b8d3e6bc8c001c7bb030b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29279975b86791aeb42b8d3e6bc8c001c7bb030b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29279975b86791aeb42b8d3e6bc8c001c7bb030b"}], "stats": {"total": 419, "additions": 411, "deletions": 8}, "files": [{"sha": "88c612020d43d652736346e9fc49752eb01eb5c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -1,3 +1,22 @@\n+2000-10-05  Richard Henderson  <rth@cygnus.com>\n+\n+\t* Makefile.in (NM_FOR_TARGET): New.\n+\t(libgcc.mk): Pass SHLIB_MKMAP, SHLIB_MAPFILES.\n+\t(libgcc.a, stmp-multilib): Pass NM_FOR_TARGET.\n+\t* mklibgcc.in: If SHLIB_MKMAP, build libgcc.map.  Depend the\n+\tshared library build on that and EXTRA_MULTILIB_PARTS.\n+\t* mkmap-flat.awk: New file.\n+\t* mkmap-symver.awk: New file.\n+\t* libgcc-std.ver: New file.\n+\t* config/libgcc-glibc.ver: New file.\n+\t* config/ia64/libgcc-ia64.ver: New file.\n+\t* config/t-linux (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n+\t(SHLIB_LINK): Add --version-script.\n+\t* config/ia64/t-ia64 (SHLIB_MAPFILES): Add libgcc-ia64.ver.\n+\t* config/mips/t-iris6 (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n+\t* config/sparc/t-sol2 (SHLIB_MKMAP, SHLIB_MAPFILES): New.\n+\t(SHLIB_LINK): Add -M.\n+\n 2000-10-05  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (LIB2FUNCS): Add _clz."}, {"sha": "4fa487ca98693e70bc102a769ba8739a3c430741", "filename": "gcc/Makefile.in", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -221,6 +221,16 @@ RANLIB_TEST_FOR_TARGET = \\\n   [ -f $(RANLIB_FOR_TARGET) ] \\\n   || ( [ \"$(host_canonical)\" = \"$(target)\" ] \\\n        && [ -f /usr/bin/ranlib -o -f /bin/ranlib ] )\n+NM_FOR_TARGET = ` \\\n+  if [ -f $(objdir)/../binutils/nm ] ; then \\\n+    echo $(objdir)/../binutils/nm ; \\\n+  else \\\n+    if [ \"$(host_canonical)\" = \"$(target)\" ] ; then \\\n+      echo nm; \\\n+    else \\\n+       t='$(program_transform_cross_name)'; echo nm | sed -e $$t ; \\\n+    fi; \\\n+  fi`\n \n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n@@ -972,6 +982,8 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) xgcc$(exeext)\n \tSHLIB_LINK='$(SHLIB_LINK)' \\\n \tSHLIB_LIBS='$(SHLIB_LIBS)' \\\n \tSHLIB_MULTILIB='$(SHLIB_MULTILIB)' \\\n+\tSHLIB_MKMAP='$(SHLIB_MKMAP)' \\\n+\tSHLIB_MAPFILES='$(SHLIB_MAPFILES)' \\\n \t  $(SHELL) mklibgcc > tmp-libgcc.mk\n \tmv tmp-libgcc.mk libgcc.mk\n \n@@ -991,6 +1003,7 @@ libgcc.a: $(LIBGCC_DEPS)\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n+\t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n \t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n \t  CONFIG_H=\"$(CONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\\n@@ -1023,6 +1036,7 @@ stmp-multilib: $(LIBGCC_DEPS)\n \t  CFLAGS=\"$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t  RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n+\t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n \t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n \t  CONFIG_H=\"$(CONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\"}, {"sha": "a03799f0d0932621980e53fedcc7378988b7464b", "filename": "gcc/config/ia64/libgcc-ia64.ver", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fia64%2Flibgcc-ia64.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fia64%2Flibgcc-ia64.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flibgcc-ia64.ver?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -0,0 +1,8 @@\n+GCC_3.0 {\n+  # IA-64 symbols\n+  __ia64_nonlocal_goto\n+  __ia64_personality_v1\n+  __ia64_restore_stack_nonlocal\n+  __ia64_save_stack_nonlocal\n+  __ia64_trampoline\n+}"}, {"sha": "f27c72957d0d8cea4df6b411dd9b929358c6f51e", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -20,6 +20,8 @@ LIB1ASMFUNCS  = __divtf3 __divdf3 __divsf3 \\\n # to support the Intel assembler.\n #LIBGCC2_DEBUG_CFLAGS = -g1 -P\n \n+SHLIB_MAPFILES += $(srcdir)/config/ia64/libgcc-ia64.ver\n+\n # For svr4 we build crtbegin.o and crtend.o which serve to add begin and\n # end labels to the .ctors and .dtors section when we link using gcc.\n "}, {"sha": "837c1a7ee56490e03ad7cbfd07f011eb57860fbb", "filename": "gcc/config/libgcc-glibc.ver", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flibgcc-glibc.ver?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -0,0 +1,23 @@\n+# In order to work around the very problems that force us to now generally\n+# create a libgcc.so, glibc reexported a number of routines from libgcc.a.\n+# By now choosing the same version tags for these specific routines, we\n+# maintain enough binary compatibility to allow future versions of glibc\n+# to defer implementation of these routines to libgcc.so via DT_AUXILIARY.\n+\n+%inherit GCC_3.0 GLIBC_2.0\n+GLIBC_2.0 {\n+  # Sampling of DImode arithmetic used by (at least) i386 and m68k.\n+  __divdi3\n+  __moddi3\n+  __udivdi3\n+  __umoddi3\n+\n+  # Exception handling support functions used by most everyone.\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}"}, {"sha": "24e385d46061b113c12837e35be59a9ea928aec7", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -22,4 +22,10 @@ CRTSTUFF_T_CFLAGS=-g1\n # Build a shared libgcc library.\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n         -Wl,-soname,@shlib_base_name@.so.0\n+# ??? Irix 6.5 seems to eat the option fine (if we somehow remove the\n+# -hidden_symbol option, which is documented to be ignored in conjunction\n+# with -exports_file), but fails to actually hide any symbols.\n+# -Wl,-exports_file,libgcc.map\n SHLIB_LIBS = -lc\n+SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver "}, {"sha": "7a44631429babf774dcf7e55d4e70ea54c1566e1", "filename": "gcc/config/sparc/t-sol2", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fsparc%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Fsparc%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sol2?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -31,5 +31,8 @@ TARGET_LIBGCC2_CFLAGS = -fPIC\n \n # Build a shared libgcc library.\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n-\t-Wl,-h,@shlib_base_name@.so.0 -Wl,-z,text -Wl,-z,defs\n+\t-Wl,-h,@shlib_base_name@.so.0 -Wl,-z,text -Wl,-z,defs \\\n+\t-Wl,-M,libgcc.map\n SHLIB_LIBS = -lc\n+SHLIB_MKMAP = $(srcdir)/mkmap-symver.awk\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver"}, {"sha": "858faa9619c5fee195a68159fb527fc48076ac6b", "filename": "gcc/config/t-linux", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -10,14 +10,14 @@ CRTSTUFF_T_CFLAGS_S = -fPIC\n TARGET_LIBGCC2_CFLAGS = -fPIC\n # Build a shared libgcc library.\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n-\t-Wl,--soname=@shlib_base_name@.so.0\n-# ??? Do versioning later -- need to figure out how to post-process\n-# the script and allow for target-specific additions.\n-# -Wl,--version-script=$(srcdir)/config/ver-glibc.map\n+\t-Wl,--soname=@shlib_base_name@.so.0 \\\n+\t-Wl,--version-script=libgcc.map\n SHLIB_LIBS = -lc\n+SHLIB_MKMAP = $(srcdir)/mkmap-symver.awk\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver $(srcdir)/config/libgcc-glibc.ver\n \n # Do not build libgcc1. Let gcc generate those functions. The GNU/Linux\n # C library can handle them.\n-LIBGCC1 = \n+LIBGCC1 =\n CROSS_LIBGCC1 =\n LIBGCC1_TEST ="}, {"sha": "b3bf25fcbf6d05de697e4724380b2ef0d99e784a", "filename": "gcc/libgcc-std.ver", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -0,0 +1,129 @@\n+GCC_3.0 {\n+  # libgcc1 symbols\n+  __adddf3\n+  __addsf3\n+  __ashlsi3\n+  __ashrsi3\n+  __divdf3\n+  __divsf3\n+  __divsi3\n+  __divtf3\n+  __eqdf2\n+  __eqsf2\n+  __extendsfdf2\n+  __fixdfsi\n+  __fixsfsi\n+  __floatsidf\n+  __floatsisf\n+  __gedf2\n+  __gesf2\n+  __gtdf2\n+  __gtsf2\n+  __ledf2\n+  __lesf2\n+  __lshrsi3\n+  __ltdf2\n+  __ltsf2\n+  __modsi3\n+  __muldf3\n+  __mulsf3\n+  __mulsi3\n+  __nedf2\n+  __negdf2\n+  __negsf2\n+  __nesf2\n+  __subdf3\n+  __subsf3\n+  __truncdfsf2\n+  __udivsi3\n+  __umodsi3\n+\n+  # libgcc2 DImode arithmetic (for 32-bit targets).\n+  __ashldi3\n+  __ashrdi3\n+  __cmpdi2\n+  __divdi3\n+  __ffsdi2\n+  __fixdfdi\n+  __fixsfdi\n+  __fixunsdfdi\n+  __fixunssfdi\n+  __floatdidf\n+  __floatdisf\n+  __lshrdi3\n+  __moddi3\n+  __muldi3\n+  __negdi2\n+  __ucmpdi2\n+  __udivdi3\n+  __udivmoddi4\n+  __umoddi3\n+\n+  # libgcc2 TImode arithmetic (for 64-bit targets).\n+  __ashlti3\n+  __ashrti3\n+  __cmpti2\n+  __divti3\n+  __ffsti2\n+  __fixdfti\n+  __fixsfti\n+  __lshrti3\n+  __modti3\n+  __multi3\n+  __negti2\n+  __ucmpti2\n+  __udivmodti4\n+  __udivti3\n+  __umodti3\n+  __fixunsdfti\n+  __fixunssfti\n+  __floattidf\n+  __floattisf\n+  __fixtfti\n+  __fixunstfti\n+  __floattitf\n+\n+  # Basic block profile symbols.\n+  # ??? Some of these are for `-a', which ought to die.\n+  __bb\n+  __bb_exit_func\n+  __bb_fork_func\n+  __bb_init_func\n+  __bb_init_trace_func\n+  __bb_trace_func\n+  __bb_trace_ret\n+\n+  # ??? Symbols that perhaps unused should be nuked.\n+  __builtin_saveregs\n+  __clear_cache\n+  __dummy\n+  __empty\n+  __eprintf\n+  __gcc_bcmp\n+  __shtab\n+\n+  # EH symbols\n+  __default_terminate\n+  __deregister_frame\n+  __deregister_frame_info\n+  __eh_alloc\n+  __eh_free\n+  __eh_rtime_match\n+  __frame_state_for\n+  __get_dynamic_handler_chain\n+  __get_eh_context\n+  __get_eh_info\n+  __get_eh_table_language\n+  __get_eh_table_version\n+  __register_frame\n+  __register_frame_info\n+  __register_frame_info_table\n+  __register_frame_table\n+  __rethrow\n+  __sjpopnthrow\n+  __sjthrow\n+  __terminate\n+  __throw\n+  __throw_type_match\n+  __unwinding_cleanup\n+}"}, {"sha": "43dac4f75b3eefa9526c834c58ae8170662e26fc", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -26,6 +26,8 @@\n # SHLIB_LINK\n # SHLIB_LIBS\n # SHLIB_MULTILIB\n+# SHLIB_MKMAP\n+# SHLIB_MAPFILES\n \n # Make needs VPATH to be literal.\n echo 'srcdir = @srcdir@'\n@@ -263,6 +265,8 @@ for file in $LIB2ADD; do\n   fi\n done\n \n+# SHLIB_MKMAP\n+# SHLIB_MAPFILES\n for ml in $MULTILIBS; do\n   dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n   flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n@@ -278,6 +282,22 @@ for ml in $MULTILIBS; do\n   for o in $libgcc2_objs; do\n     libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n   done\n+  shlib_deps=\"$libgcc_objs\"\n+\n+  if [ \"$SHLIB_LINK\" -a \"$SHLIB_MKMAP\" -a -z \"$mapfile\" ]; then\n+    mapfile=\"libgcc.map\"\n+    shlib_deps=\"$shlib_deps $mapfile\"\n+    echo \"\"\n+    echo \"${mapfile}: $SHLIB_MKMAP $SHLIB_MAPFILES $libgcc_objs\"\n+    echo '\t{ $(NM_FOR_TARGET) -pg'\" $libgcc_objs; echo %%; cat $SHLIB_MAPFILES; } | \"'$(AWK)'\" -f $SHLIB_MKMAP > \"'tmp-$@'\n+    echo '\tmv tmp-$@ $@'\n+  fi\n+\n+  # Depend on EXTRA_MULTILIB_PARTS, since that's where crtbegin/end\n+  # usually are put in a true multilib situation.\n+  for f in $EXTRA_MULTILIB_PARTS; do\n+    shlib_deps=\"$shlib_deps $dir/$f\"\n+  done\n \n   echo \"\"\n   echo \"${dir}/libgcc.a: $libgcc_objs\"\n@@ -295,12 +315,12 @@ for ml in $MULTILIBS; do\n \tshlib_base_name=libgcc_s_`echo $dir | sed s,/,_,g`\n       fi\n       echo \"\"\n-      echo \"${dir}/${shlib_base_name}.so: $libgcc_objs\"\n+      echo \"${dir}/${shlib_base_name}.so: $shlib_deps\"\n       echo \"\t$SHLIB_LINK $flags -o ${shlib_base_name}.so $libgcc_objs $SHLIB_LIBS\" | sed \"s/@shlib_base_name@/$shlib_base_name/g\"\n     elif [ \"$SHLIB_MULTILIB\" = \"$dir\" ]; then\n       shlib_base_name=\"libgcc_s\";\n       echo \"\"\n-      echo \"${shlib_base_name}.so: $libgcc_objs\"\n+      echo \"${shlib_base_name}.so: $shlib_deps\"\n       echo \"\t$SHLIB_LINK $flags -o ${shlib_base_name}.so $libgcc_objs $SHLIB_LIBS\" | sed \"s/@shlib_base_name@/$shlib_base_name/g\"\n     fi\n   fi"}, {"sha": "de22d7c33e16fed5b473d1b6dfad3616f12992fe", "filename": "gcc/mkmap-flat.awk", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmkmap-flat.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmkmap-flat.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkmap-flat.awk?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -0,0 +1,78 @@\n+# Generate a flat list of symbols to export.\n+#\tContributed by Richard Henderson <rth@cygnus.com>\n+#\n+# This file is part of GNU CC.\n+#\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston MA 02111-1307, USA.\n+\n+BEGIN {\n+  state = \"nm\";\n+}\n+\n+# Remove comment and blank lines.\n+/^ *#/ || /^ *$/ {\n+  next;\n+}\n+\n+# We begin with nm input.  Collect the set of symbols that are present\n+# so that we can elide undefined symbols.\n+\n+state == \"nm\" && /^%%/ {\n+  state = \"ver\";\n+  next;\n+}\n+\n+state == \"nm\" && ($1 == \"U\" || $2 == \"U\") {\n+  next;\n+}\n+\n+state == \"nm\" && NF == 3 {\n+  def[$3] = 1;\n+  next;\n+}\n+\n+state == \"nm\" {\n+  next;\n+}\n+\n+# Now we process a simplified variant of the Solaris symbol version\n+# script.  We have one symbol per line, no semicolons, simple markers\n+# for beginning and ending each section, and %inherit markers for\n+# describing version inheritence.  A symbol may appear in more than\n+# one symbol version, and the last seen takes effect.\n+\n+NF == 3 && $1 == \"%inherit\" {\n+  next;\n+}\n+\n+NF == 2 && $2 == \"{\" {\n+  next;\n+}\n+\n+$1 == \"}\" {\n+  next;\n+}\n+\n+{\n+  export[$1] = 1;\n+  next;\n+}\n+\n+END {\n+  for (sym in export)\n+    if (def[sym])\n+      print sym;\n+}"}, {"sha": "5ea676923fea5cbcdeb0032e1bb333a83fdd821d", "filename": "gcc/mkmap-symver.awk", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmkmap-symver.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83dad10cd4b91158e8dbf152c7346e41fec3de05/gcc%2Fmkmap-symver.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkmap-symver.awk?ref=83dad10cd4b91158e8dbf152c7346e41fec3de05", "patch": "@@ -0,0 +1,101 @@\n+# Generate an ELF symbol version map a-la Solaris and GNU ld.\n+#\tContributed by Richard Henderson <rth@cygnus.com>\n+#\n+# This file is part of GNU CC.\n+#\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston MA 02111-1307, USA.\n+\n+BEGIN {\n+  state = \"nm\";\n+}\n+\n+# Remove comment and blank lines.\n+/^ *#/ || /^ *$/ {\n+  next;\n+}\n+\n+# We begin with nm input.  Collect the set of symbols that are present\n+# so that we can not emit them into the final version script -- Solaris\n+# complains at us if we do.\n+\n+state == \"nm\" && /^%%/ {\n+  state = \"ver\";\n+  next;\n+}\n+\n+state == \"nm\" && ($1 == \"U\" || $2 == \"U\") {\n+  next;\n+}\n+\n+state == \"nm\" && NF == 3 {\n+  def[$3] = 1;\n+  next;\n+}\n+\n+state == \"nm\" {\n+  next;\n+}\n+\n+# Now we process a simplified variant of the Solaris symbol version\n+# script.  We have one symbol per line, no semicolons, simple markers\n+# for beginning and ending each section, and %inherit markers for\n+# describing version inheritence.  A symbol may appear in more than\n+# one symbol version, and the last seen takes effect.\n+\n+NF == 3 && $1 == \"%inherit\" {\n+  inherit[$2] = $3;\n+  next;\n+}\n+\n+NF == 2 && $2 == \"{\" {\n+  libs[$1] = 1;\n+  thislib = $1;\n+  next;\n+}\n+\n+$1 == \"}\" {\n+  thislib = \"\";\n+  next;\n+}\n+\n+{\n+  ver[$1] = thislib;\n+  next;\n+}\n+\n+END {\n+  for (l in libs)\n+    output(l);\n+}\n+\n+function output(lib) {\n+  if (done[lib])\n+    return;\n+  done[lib] = 1;\n+  if (inherit[lib])\n+    output(inherit[lib]);\n+\n+  printf(\"%s {\\n\", lib);\n+  printf(\"  global:\\n\");\n+  for (sym in ver)\n+    if ((ver[sym] == lib) && (sym in def))\n+      printf(\"\\t%s;\\n\", sym);\n+\n+  if (inherit[lib])\n+    printf(\"} %s;\\n\", inherit[lib]);\n+  else\n+    printf (\"\\n  local:\\n\\t*;\\n};\\n\");\n+}"}]}