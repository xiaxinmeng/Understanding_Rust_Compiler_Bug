{"sha": "a1bfb5b16b4b55ae875d346a7b462a18316ad959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiZmI1YjE2YjRiNTVhZTg3NWQzNDZhN2I0NjJhMTgzMTZhZDk1OQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-10-01T14:04:08Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-10-01T14:04:08Z"}, "message": "S/390: Remove code duplication in vec_* comparison expanders\n\ns390.md uses a lot of near-identical expanders that perform dispatching\nto other expanders based on operand types. Since the following patch\nwould require even more of these, avoid copy-pasting the code by\ngenerating these expanders using an iterator.\n\ngcc/ChangeLog:\n\n2019-10-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/77918\n\t* config/s390/s390.c (s390_expand_vec_compare): Use\n\tgen_vec_cmpordered and gen_vec_cmpunordered.\n\t* config/s390/vector.md (vec_cmpuneq, vec_cmpltgt, vec_ordered,\n\tvec_unordered): Delete.\n\t(vec_ordered<mode>): Rename to vec_cmpordered<mode>.\n\t(vec_unordered<mode>): Rename to vec_cmpunordered<mode>.\n\t(VEC_CMP_EXPAND): New iterator for the generic dispatcher.\n\t(vec_cmp<code>): Generic dispatcher.\n\nFrom-SVN: r276409", "tree": {"sha": "0a71ede7534cb8275fe7542bfdb932cc77db37ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a71ede7534cb8275fe7542bfdb932cc77db37ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1bfb5b16b4b55ae875d346a7b462a18316ad959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bfb5b16b4b55ae875d346a7b462a18316ad959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bfb5b16b4b55ae875d346a7b462a18316ad959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bfb5b16b4b55ae875d346a7b462a18316ad959/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4363c5a269b8ac870921177e8024e3bf9eb0c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4363c5a269b8ac870921177e8024e3bf9eb0c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4363c5a269b8ac870921177e8024e3bf9eb0c23"}], "stats": {"total": 83, "additions": 25, "deletions": 58}, "files": [{"sha": "c32bf8460114eca56b4344ca79cfa529dab2259a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1bfb5b16b4b55ae875d346a7b462a18316ad959", "patch": "@@ -1,3 +1,15 @@\n+2019-10-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/77918\n+\t* config/s390/s390.c (s390_expand_vec_compare): Use\n+\tgen_vec_cmpordered and gen_vec_cmpunordered.\n+\t* config/s390/vector.md (vec_cmpuneq, vec_cmpltgt, vec_ordered,\n+\tvec_unordered): Delete.\n+\t(vec_ordered<mode>): Rename to vec_cmpordered<mode>.\n+\t(vec_unordered<mode>): Rename to vec_cmpunordered<mode>.\n+\t(VEC_CMP_EXPAND): New iterator for the generic dispatcher.\n+\t(vec_cmp<code>): Generic dispatcher.\n+\n 2019-10-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR target/77918"}, {"sha": "062cbd8099d2eaa1e918ee8593325005f74d3763", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a1bfb5b16b4b55ae875d346a7b462a18316ad959", "patch": "@@ -6523,10 +6523,10 @@ s390_expand_vec_compare (rtx target, enum rtx_code cond,\n \t  emit_insn (gen_vec_cmpltgt (target, cmp_op1, cmp_op2));\n \t  return;\n \tcase ORDERED:\n-\t  emit_insn (gen_vec_ordered (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_cmpordered (target, cmp_op1, cmp_op2));\n \t  return;\n \tcase UNORDERED:\n-\t  emit_insn (gen_vec_unordered (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_cmpunordered (target, cmp_op1, cmp_op2));\n \t  return;\n \tdefault: break;\n \t}"}, {"sha": "451d07de28791d0454f407a800af9bd7a28332bd", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bfb5b16b4b55ae875d346a7b462a18316ad959/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=a1bfb5b16b4b55ae875d346a7b462a18316ad959", "patch": "@@ -1472,22 +1472,6 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n-(define_expand \"vec_cmpuneq\"\n-  [(match_operand 0 \"register_operand\" \"\")\n-   (match_operand 1 \"register_operand\" \"\")\n-   (match_operand 2 \"register_operand\" \"\")]\n-  \"TARGET_VX\"\n-{\n-  if (GET_MODE (operands[1]) == V4SFmode)\n-    emit_insn (gen_vec_cmpuneqv4sf (operands[0], operands[1], operands[2]));\n-  else if (GET_MODE (operands[1]) == V2DFmode)\n-    emit_insn (gen_vec_cmpuneqv2df (operands[0], operands[1], operands[2]));\n-  else\n-    gcc_unreachable ();\n-\n-  DONE;\n-})\n-\n ; LTGT a <> b -> a > b | b > a\n (define_expand \"vec_cmpltgt<mode>\"\n   [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n@@ -1500,24 +1484,8 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n-(define_expand \"vec_cmpltgt\"\n-  [(match_operand 0 \"register_operand\" \"\")\n-   (match_operand 1 \"register_operand\" \"\")\n-   (match_operand 2 \"register_operand\" \"\")]\n-  \"TARGET_VX\"\n-{\n-  if (GET_MODE (operands[1]) == V4SFmode)\n-    emit_insn (gen_vec_cmpltgtv4sf (operands[0], operands[1], operands[2]));\n-  else if (GET_MODE (operands[1]) == V2DFmode)\n-    emit_insn (gen_vec_cmpltgtv2df (operands[0], operands[1], operands[2]));\n-  else\n-    gcc_unreachable ();\n-\n-  DONE;\n-})\n-\n ; ORDERED (a, b): a >= b | b > a\n-(define_expand \"vec_ordered<mode>\"\n+(define_expand \"vec_cmpordered<mode>\"\n   [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n \t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n \t\t (match_operand:VFT 2 \"register_operand\"  \"v\")))\n@@ -1528,45 +1496,32 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n-(define_expand \"vec_ordered\"\n-  [(match_operand 0 \"register_operand\" \"\")\n-   (match_operand 1 \"register_operand\" \"\")\n-   (match_operand 2 \"register_operand\" \"\")]\n-  \"TARGET_VX\"\n-{\n-  if (GET_MODE (operands[1]) == V4SFmode)\n-    emit_insn (gen_vec_orderedv4sf (operands[0], operands[1], operands[2]));\n-  else if (GET_MODE (operands[1]) == V2DFmode)\n-    emit_insn (gen_vec_orderedv2df (operands[0], operands[1], operands[2]));\n-  else\n-    gcc_unreachable ();\n-\n-  DONE;\n-})\n-\n ; UNORDERED (a, b): !ORDERED (a, b)\n-(define_expand \"vec_unordered<mode>\"\n+(define_expand \"vec_cmpunordered<mode>\"\n   [(match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n    (match_operand:VFT        1 \"register_operand\" \"v\")\n    (match_operand:VFT        2 \"register_operand\" \"v\")]\n   \"TARGET_VX\"\n {\n-  emit_insn (gen_vec_ordered<mode> (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_vec_cmpordered<mode> (operands[0], operands[1], operands[2]));\n   emit_insn (gen_rtx_SET (operands[0],\n \t     gen_rtx_NOT (<tointvec>mode, operands[0])));\n   DONE;\n })\n \n-(define_expand \"vec_unordered\"\n+(define_code_iterator VEC_CMP_EXPAND\n+  [uneq ltgt ordered unordered])\n+\n+(define_expand \"vec_cmp<code>\"\n   [(match_operand 0 \"register_operand\" \"\")\n-   (match_operand 1 \"register_operand\" \"\")\n-   (match_operand 2 \"register_operand\" \"\")]\n+   (VEC_CMP_EXPAND (match_operand 1 \"register_operand\" \"\")\n+                   (match_operand 2 \"register_operand\" \"\"))]\n   \"TARGET_VX\"\n {\n   if (GET_MODE (operands[1]) == V4SFmode)\n-    emit_insn (gen_vec_unorderedv4sf (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_vec_cmp<code>v4sf (operands[0], operands[1], operands[2]));\n   else if (GET_MODE (operands[1]) == V2DFmode)\n-    emit_insn (gen_vec_unorderedv2df (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_vec_cmp<code>v2df (operands[0], operands[1], operands[2]));\n   else\n     gcc_unreachable ();\n "}]}