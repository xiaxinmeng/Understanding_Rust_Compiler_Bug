{"sha": "71b31d13757ae0f544651c29b113ccf120573760", "node_id": "C_kwDOANBUbNoAKDcxYjMxZDEzNzU3YWUwZjU0NDY1MWMyOWIxMTNjY2YxMjA1NzM3NjA", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-12-09T05:50:37Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-12-09T11:19:39Z"}, "message": "rs6000: Remove useless copy_rtx in rs6000_emit_set_{,long}_const\n\nFunction rs6000_emit_set_const/rs6000_emit_set_long_const are only invoked from\ntwo \"define_split\"s where the target operand is limited to gpc_reg_operand or\nint_reg_operand, then the operand must be REG_P.\nAnd in rs6000_emit_set_const/rs6000_emit_set_long_const, to create temp rtx,\nit is using code like \"gen_reg_rtx({S|D}Imode)\", it must also be REG_P.\nSo, copy_rtx is not needed for temp and dest.\n\nThis patch removes those \"copy_rtx\" for rs6000_emit_set_const and\nrs6000_emit_set_long_const.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_emit_set_const): Remove copy_rtx.\n\t(rs6000_emit_set_long_const): Likewise.", "tree": {"sha": "d5db2dbc11f6943119103a3aa5eb28f4653cfaf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5db2dbc11f6943119103a3aa5eb28f4653cfaf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b31d13757ae0f544651c29b113ccf120573760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b31d13757ae0f544651c29b113ccf120573760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b31d13757ae0f544651c29b113ccf120573760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b31d13757ae0f544651c29b113ccf120573760/comments", "author": null, "committer": null, "parents": [{"sha": "96cb786b754919f41dc7de9566a68ed25a4bf3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96cb786b754919f41dc7de9566a68ed25a4bf3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96cb786b754919f41dc7de9566a68ed25a4bf3fa"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "b3a609f3aa3b39c2183d195dd2b00acd75201465", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b31d13757ae0f544651c29b113ccf120573760/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b31d13757ae0f544651c29b113ccf120573760/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=71b31d13757ae0f544651c29b113ccf120573760", "patch": "@@ -10186,10 +10186,9 @@ rs6000_emit_set_const (rtx dest, rtx source)\n     case E_SImode:\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (SImode);\n \n-      emit_insn (gen_rtx_SET (copy_rtx (temp),\n-\t\t\t      GEN_INT (c & ~(HOST_WIDE_INT) 0xffff)));\n+      emit_insn (gen_rtx_SET (temp, GEN_INT (c & ~(HOST_WIDE_INT) 0xffff)));\n       emit_insn (gen_rtx_SET (dest,\n-\t\t\t      gen_rtx_IOR (SImode, copy_rtx (temp),\n+\t\t\t      gen_rtx_IOR (SImode, temp,\n \t\t\t\t\t   GEN_INT (c & 0xffff))));\n       break;\n \n@@ -10198,10 +10197,8 @@ rs6000_emit_set_const (rtx dest, rtx source)\n \t{\n \t  rtx hi, lo;\n \n-\t  hi = operand_subword_force (copy_rtx (dest), WORDS_BIG_ENDIAN == 0,\n-\t\t\t\t      DImode);\n-\t  lo = operand_subword_force (dest, WORDS_BIG_ENDIAN != 0,\n-\t\t\t\t      DImode);\n+\t  hi = operand_subword_force (dest, WORDS_BIG_ENDIAN == 0, DImode);\n+\t  lo = operand_subword_force (dest, WORDS_BIG_ENDIAN != 0, DImode);\n \t  emit_move_insn (hi, GEN_INT (c >> 32));\n \t  c = sext_hwi (c, 32);\n \t  emit_move_insn (lo, GEN_INT (c));\n@@ -10249,27 +10246,22 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n-      emit_move_insn (ud1 != 0 ? copy_rtx (temp) : dest,\n+      emit_move_insn (ud1 != 0 ? temp : dest,\n \t\t      GEN_INT (sext_hwi (ud2 << 16, 32)));\n       if (ud1 != 0)\n-\temit_move_insn (dest,\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud1)));\n+\temit_move_insn (dest, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n     }\n   else if (ud3 == 0 && ud4 == 0)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n       gcc_assert (ud2 & 0x8000);\n-      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud2 << 16, 32)));\n+      emit_move_insn (temp, GEN_INT (sext_hwi (ud2 << 16, 32)));\n       if (ud1 != 0)\n-\temit_move_insn (copy_rtx (temp),\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud1)));\n+\temit_move_insn (temp, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n       emit_move_insn (dest,\n \t\t      gen_rtx_ZERO_EXTEND (DImode,\n-\t\t\t\t\t   gen_lowpart (SImode,\n-\t\t\t\t\t\t\tcopy_rtx (temp))));\n+\t\t\t\t\t   gen_lowpart (SImode,temp)));\n     }\n   else if (ud1 == ud3 && ud2 == ud4)\n     {\n@@ -10285,18 +10277,13 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n-      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud3 << 16, 32)));\n+      emit_move_insn (temp, GEN_INT (sext_hwi (ud3 << 16, 32)));\n       if (ud2 != 0)\n-\temit_move_insn (copy_rtx (temp),\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud2)));\n-      emit_move_insn (ud1 != 0 ? copy_rtx (temp) : dest,\n-\t\t      gen_rtx_ASHIFT (DImode, copy_rtx (temp),\n-\t\t\t\t      GEN_INT (16)));\n+\temit_move_insn (temp, gen_rtx_IOR (DImode, temp, GEN_INT (ud2)));\n+      emit_move_insn (ud1 != 0 ? temp : dest,\n+\t\t      gen_rtx_ASHIFT (DImode, temp, GEN_INT (16)));\n       if (ud1 != 0)\n-\temit_move_insn (dest,\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud1)));\n+\temit_move_insn (dest, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n     }\n   else if (TARGET_PREFIXED)\n     {\n@@ -10337,23 +10324,17 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n-      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud4 << 16, 32)));\n+      emit_move_insn (temp, GEN_INT (sext_hwi (ud4 << 16, 32)));\n       if (ud3 != 0)\n-\temit_move_insn (copy_rtx (temp),\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud3)));\n+\temit_move_insn (temp, gen_rtx_IOR (DImode, temp, GEN_INT (ud3)));\n \n-      emit_move_insn (ud2 != 0 || ud1 != 0 ? copy_rtx (temp) : dest,\n-\t\t      gen_rtx_ASHIFT (DImode, copy_rtx (temp),\n-\t\t\t\t      GEN_INT (32)));\n+      emit_move_insn (ud2 != 0 || ud1 != 0 ? temp : dest,\n+\t\t      gen_rtx_ASHIFT (DImode, temp, GEN_INT (32)));\n       if (ud2 != 0)\n-\temit_move_insn (ud1 != 0 ? copy_rtx (temp) : dest,\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud2 << 16)));\n+\temit_move_insn (ud1 != 0 ? temp : dest,\n+\t\t\tgen_rtx_IOR (DImode, temp, GEN_INT (ud2 << 16)));\n       if (ud1 != 0)\n-\temit_move_insn (dest,\n-\t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n-\t\t\t\t     GEN_INT (ud1)));\n+\temit_move_insn (dest, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n     }\n }\n "}]}