{"sha": "548b75d82229cf30052db3ad13e34115335cd9d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4Yjc1ZDgyMjI5Y2YzMDA1MmRiM2FkMTNlMzQxMTUzMzVjZDlkOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-03T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-03T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "ad1a25a23373cdd4eb47762b962317a88f8ce250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad1a25a23373cdd4eb47762b962317a88f8ce250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548b75d82229cf30052db3ad13e34115335cd9d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548b75d82229cf30052db3ad13e34115335cd9d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548b75d82229cf30052db3ad13e34115335cd9d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548b75d82229cf30052db3ad13e34115335cd9d8/comments", "author": null, "committer": null, "parents": [{"sha": "8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4a738d2540ab6aff77506d368bf4e3fa6963bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4a738d2540ab6aff77506d368bf4e3fa6963bd"}], "stats": {"total": 207, "additions": 206, "deletions": 1}, "files": [{"sha": "fc67dd48976f242a5d7c6c1b657ef7f586051a14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,98 @@\n+2021-02-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-loop-interchange.cc (prepare_data_references):\n+\tRelease vectors.\n+\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): Likewise.\n+\t* tree-ssa-loop-im.c (hoist_memory_references): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_condition): Do not\n+\tallocate vectors.\n+\t(vectorizable_comparison): Likewise.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (ursqrte): Define builtin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_ursqrte<mode>): New pattern.\n+\t* config/aarch64/arm_neon.h (vrsqrte_u32): Reimplement using builtin.\n+\t(vrsqrteq_u32): Likewise.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (sqxtun2): Define builtin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_sqxtun2<mode>_le): Define.\n+\t(aarch64_sqxtun2<mode>_be): Likewise.\n+\t(aarch64_sqxtun2<mode>): Likewise.\n+\t* config/aarch64/arm_neon.h (vqmovun_high_s16): Reimplement using builtin.\n+\t(vqmovun_high_s32): Likewise.\n+\t(vqmovun_high_s64): Likewise.\n+\t* config/aarch64/iterators.md (UNSPEC_SQXTUN2): Define.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (bfdot_lane, bfdot_laneq): Use\n+\tAUTO_FP flags.\n+\t(bfmlalb_lane, bfmlalt_lane, bfmlalb_lane_q, bfmlalt_lane_q): Use FP flags.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (fcmla_lane0, fcmla_lane90,\n+\tfcmla_lane180, fcmla_lane270, fcmlaq_lane0, fcmlaq_lane90, fcmlaq_lane180,\n+\tfcmlaq_lane270, scvtf, ucvtf, fcvtzs, fcvtzu, scvtfsi, scvtfdi, ucvtfsi,\n+\tucvtfdi, fcvtzshf, fcvtzuhf, fmlal_lane_low, fmlsl_lane_low,\n+\tfmlal_laneq_low, fmlsl_laneq_low, fmlalq_lane_low, fmlslq_lane_low,\n+\tfmlalq_laneq_low, fmlslq_laneq_low, fmlal_lane_high, fmlsl_lane_high,\n+\tfmlal_laneq_high, fmlsl_laneq_high, fmlalq_lane_high, fmlslq_lane_high,\n+\tfmlalq_laneq_high, fmlslq_laneq_high): Use FP flags.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (FLAG_LOAD): Define.\n+\t* config/aarch64/aarch64-simd-builtins.def (ld1x2, ld2, ld3, ld4, ld2r,\n+\tld3r, ld4r, ld1, ld1x3, ld1x4): Use LOAD flags.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (combine, zip1, zip2,\n+\tuzp1, uzp2, trn1, trn2, simd_bsl): Use AUTO_FP flags.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (clrsb, clz, ctz, popcount,\n+\tvec_smult_lane_, vec_smlal_lane_, vec_smult_laneq_, vec_smlal_laneq_,\n+\tvec_umult_lane_, vec_umlal_lane_, vec_umult_laneq_, vec_umlal_laneq_,\n+\tashl, sshl, ushl, srshl, urshl, sdot_lane, udot_lane, sdot_laneq,\n+\tudot_laneq, usdot_lane, usdot_laneq, sudot_lane, sudot_laneq, ashr,\n+\tashr_simd, lshr, lshr_simd, srshr_n, urshr_n, ssra_n, usra_n, srsra_n,\n+\tursra_n, sshll_n, ushll_n, sshll2_n, ushll2_n, ssri_n, usri_n, ssli_n,\n+\tssli_n, usli_n, bswap, rbit, simd_bsl, eor3q, rax1q, xarq, bcaxq): Use\n+\tNONE builtin flags.\n+\n+2021-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98848\n+\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Punt if\n+\tSTMT_VINFO_DEF_TYPE (last_stmt_info) is vect_reduction_def.\n+\n+2021-02-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/98743\n+\t* expr.c: Check mode before calling store_expr.\n+\n+2021-02-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (supf): Remove VORNQ_S and VORNQ_U.\n+\t(VORNQ): Remove.\n+\t* config/arm/mve.md (mve_vornq_s<mode>): New entry for vorn\n+\tinstruction using expression ior.\n+\t(mve_vornq_u<mode>): New expander.\n+\t(mve_vornq_f<mode>): Use ior code instead of unspec.\n+\t* config/arm/unspecs.md (VORNQ_S, VORNQ_U, VORNQ_F): Remove.\n+\n+2021-02-02  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-nested.c (convert_nonlocal_reference_op): Move\n+\tcurrent_function_decl restore after re-gimplification.\n+\t(convert_local_reference_op): Likewise.\n+\n 2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (rshrn, rshrn2):"}, {"sha": "465eb04999fff4da322970c439e2bffe3c825642", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1 +1 @@\n-20210202\n+20210203"}, {"sha": "f9768483b83072c686fbf5e194e974333166409d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,16 @@\n+2021-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93355\n+\tPR analyzer/96374\n+\t* engine.cc (toplevel_function_p): Simplify so that\n+\twe only reject functions with a \"__analyzer_\" prefix.\n+\t(add_any_callbacks): Delete.\n+\t(exploded_graph::build_initial_worklist): Update for\n+\tdropped param of toplevel_function_p.\n+\t(exploded_graph::build_initial_worklist): Don't bother\n+\tlooking for callbacks that are reachable from global\n+\tinitializers.\n+\n 2021-02-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/98918"}, {"sha": "de694763f72b55557b2b78163513933f2db2453e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,10 @@\n+2021-02-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98929\n+\tPR c++/96199\n+\t* error.c (dump_expr): Ignore dummy object.\n+\t* pt.c (tsubst_baselink): Handle dependent scope.\n+\n 2021-02-01  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98295"}, {"sha": "354f65f172a3fbb9037eeb04b99a09785206d1d1", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,8 @@\n+2021-02-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98921\n+\t* dmd/MERGE: Merge upstream dmd 5e2a81d9c.\n+\n 2021-01-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoDeclaration *)): Don't"}, {"sha": "a0c6e7319c7ff9bc7c148bac2731b9c48d8ac3f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,73 @@\n+2021-02-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/97510\n+\t* gcc.target/i386/pr97510.c: New test.\n+\n+2021-02-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98929\n+\t* g++.dg/cpp1z/class-deduction-decltype1.C: New test.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust sqxtun2 scan.\n+\n+2021-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91862\n+\t* gfortran.dg/pr91862.f90: New test.\n+\n+2021-02-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/arg-type-diagnostics-1.c: Return result from foo.\n+\n+2021-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98848\n+\t* gcc.dg/vect/pr98848.c: New test.\n+\t* gcc.dg/vect/pr92205.c: Remove xfail.\n+\n+2021-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97960\n+\t* g++.dg/torture/pr97960.C: New test.\n+\n+2021-02-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/98743\n+\t* g++.dg/opt/pr98743.C: New.\n+\n+2021-02-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vorn.c: Add vorn tests.\n+\n+2021-02-02  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/asan/nested-1.c: New.\n+\n+2021-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93355\n+\tPR analyzer/96374\n+\t* gcc.dg/analyzer/conditionals-3.c: Add \"__analyzer_\"\n+\tprefix to support subroutines where necessary.\n+\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n+\t* gcc.dg/analyzer/feasibility-1.c (called_by_test_6a): New.\n+\t(test_6a): New.\n+\t* gcc.dg/analyzer/params.c: Add \"__analyzer_\" prefix to support\n+\tsubroutines where necessary.\n+\t* gcc.dg/analyzer/pr96651-2.c: Likewise.\n+\t* gcc.dg/analyzer/signal-4b.c: Likewise.\n+\t* gcc.dg/analyzer/single-field.c: Likewise.\n+\t* gcc.dg/analyzer/torture/conditionals-2.c: Likewise.\n+\n+2021-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93355\n+\tPR analyzer/96374\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility-2.c: New test.\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility-3.c: New test.\n+\n 2021-02-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust rshrn2"}, {"sha": "e8e2495ae59e2c2fde38b5e6e72b92a9524011b1", "filename": "gotools/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,11 @@\n+2021-02-02  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (check-embed): New target.\n+\t(check): Depend on check-embed.  Examine embed-testlog.\n+\t(mostlyclean-local): Add check-embed-dir.\n+\t(.PHONY): Add check-embed.\n+\t* Makefile.in: Regenerate.\n+\n 2020-12-30  Ian Lance Taylor  <iant@golang.org>\n \n \t* Makefile.am (check-runtime): Don't create check-runtime-dir."}, {"sha": "ee36cba49707c63256accf75f7fff853b4813782", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548b75d82229cf30052db3ad13e34115335cd9d8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548b75d82229cf30052db3ad13e34115335cd9d8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=548b75d82229cf30052db3ad13e34115335cd9d8", "patch": "@@ -1,3 +1,10 @@\n+2021-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2011.xml: Remove stray table cell.\n+\t* doc/xml/manual/status_cxx2014.xml: Likewise.\n+\t* doc/xml/manual/status_cxx2017.xml: Likewise.\n+\t* doc/html/manual/status.html: Regenerate.\n+\n 2021-02-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/70303"}]}