{"sha": "110532c838d2302c88de13ad88f81ec975ed4b1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwNTMyYzgzOGQyMzAyYzg4ZGUxM2FkODhmODFlYzk3NWVkNGIxZQ==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2009-11-11T17:52:46Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2009-11-11T17:52:46Z"}, "message": "plugins.texi (Registering custom attributes): section renamed as (Registering custom attributes or pragmas).\n\n2009-11-11  Basile Starynkevitch  <basile@starynkevitch.net>\n\t* gcc/doc/plugins.texi (Registering custom attributes): section\n\trenamed as (Registering custom attributes or pragmas).\n\tMentions custom attributes & pragmas, and c_register_pragma, with\n\ta small example.\n\t* gcc/doc/cpp.texi (Pragmas): Mentions that plugins can provide their\n\tpragmas.\n\t* gcc/doc/extend.texi (Function Attributes): Mentions that plugin can\n\tprovide their attributes.\n\nFrom-SVN: r154097", "tree": {"sha": "2e23eef008b87369839ee61ff1953cd2fd1036af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e23eef008b87369839ee61ff1953cd2fd1036af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/110532c838d2302c88de13ad88f81ec975ed4b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110532c838d2302c88de13ad88f81ec975ed4b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110532c838d2302c88de13ad88f81ec975ed4b1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110532c838d2302c88de13ad88f81ec975ed4b1e/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa4945c138ce494613b711ede795a489bceaf62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4945c138ce494613b711ede795a489bceaf62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4945c138ce494613b711ede795a489bceaf62f"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "0de0981266d8feadf4a5484bdd3bf8636f6d2a55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=110532c838d2302c88de13ad88f81ec975ed4b1e", "patch": "@@ -1,4 +1,13 @@\n-gcc/\n+2009-11-11  Basile Starynkevitch  <basile@starynkevitch.net>\n+\t* doc/plugins.texi (Registering custom attributes): section\n+\trenamed as (Registering custom attributes or pragmas).\n+\tMentions custom attributes & pragmas, and c_register_pragma, with\n+\ta small example.\n+\t* doc/cpp.texi (Pragmas): Mentions that plugins can provide their\n+\tpragmas.\n+\t* doc/extend.texi (Function Attributes): Mentions that plugin can\n+\tprovide their attributes.\n+\n 2009-11-11  Jon Beniston <jon@beniston.com>\n \n         * config.gcc: Add lm32 elf and uclinux targets."}, {"sha": "1a322ba7aa4ddc804c5b68e8358783d8208462ff", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=110532c838d2302c88de13ad88f81ec975ed4b1e", "patch": "@@ -3541,6 +3541,8 @@ This manual documents the pragmas which are meaningful to the\n preprocessor itself.  Other pragmas are meaningful to the C or C++\n compilers.  They are documented in the GCC manual.\n \n+GCC plugins may provide their own pragmas.\n+\n @ftable @code\n @item #pragma GCC dependency\n @code{#pragma GCC dependency} allows you to check the relative dates of"}, {"sha": "dd5a89c1002be7489bf20d1867bbf41b823e7214", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=110532c838d2302c88de13ad88f81ec975ed4b1e", "patch": "@@ -1922,6 +1922,8 @@ particular target systems.  Other attributes, including @code{section}\n are supported for variables declarations (@pxref{Variable Attributes})\n and for types (@pxref{Type Attributes}).\n \n+GCC plugins may provide their own attributes.\n+\n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n being concerned about a possible macro of the same name.  For example,"}, {"sha": "6639a4e209ae7f4069214a53499e4e0e2f034257", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110532c838d2302c88de13ad88f81ec975ed4b1e/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=110532c838d2302c88de13ad88f81ec975ed4b1e", "patch": "@@ -261,9 +261,10 @@ Such a structure is passed as the @code{user_data} by the plugin's\n init routine using @code{register_callback} with the\n @code{PLUGIN_INFO} pseudo-event and a null callback.\n \n-@section Registering custom attributes\n+@section Registering custom attributes or pragmas\n \n-For analysis purposes it is useful to be able to add custom attributes.\n+For analysis (or other) purposes it is useful to be able to add custom\n+attributes or pragmas.\n \n The @code{PLUGIN_ATTRIBUTES} callback is called during attribute\n registration. Use the @code{register_attribute} function to register\n@@ -295,6 +296,28 @@ register_attributes (void *event_data, void *data)\n @end smallexample\n \n \n+The @code{PLUGIN_PRAGMAS} callback is called during pragmas\n+registration. Use the @code{c_register_pragma} or\n+@code{c_register_pragma_with_expansion} functions to register custom\n+pragmas.\n+\n+@smallexample\n+/* Plugin callback called during pragmas registration. Registered with\n+     register_callback (plugin_name, PLUGIN_PRAGMAS,\n+                        register_my_pragma, NULL);\n+*/\n+static void \n+register_my_pragma (void *event_data, void *data) \n+@{\n+  warning (0, G_(\"Callback to register pragmas\"));\n+  c_register_pragma (\"GCCPLUGIN\", \"sayhello\", handle_pragma_sayhello);\n+@}\n+@end smallexample\n+\n+It is suggested to pass @code{\"GCCPLUGIN\"} (or a short name identifying\n+your plugin) as the ``space'' argument of your pragma. \n+\n+\n @section Building GCC plugins\n \n If plugins are enabled, GCC installs the headers needed to build a"}]}