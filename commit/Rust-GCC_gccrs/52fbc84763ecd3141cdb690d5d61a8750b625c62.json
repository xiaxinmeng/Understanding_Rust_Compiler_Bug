{"sha": "52fbc84763ecd3141cdb690d5d61a8750b625c62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmYmM4NDc2M2VjZDMxNDFjZGI2OTBkNWQ2MWE4NzUwYjYyNWM2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-18T03:10:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-18T03:10:53Z"}, "message": "parse.y (fn.def2): Fix 'attrs' format.\n\n\t* parse.y (fn.def2): Fix 'attrs' format.\n\t* Makefile.in (CONFLICTS): Update.\n\t* parse.y (expr_or_declarator_intern): New rule.\n\t(expr_or_declarator, direct_notype_declarator, primary,\n\tfunctional_cast): Use it.\n\t(notype_declarator_intern): New rule.\n\t(notype_declarator, complex_notype_declarator): Use it.\n\nFrom-SVN: r23159", "tree": {"sha": "8c50557f07c00055f402e99590b4eee708844f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c50557f07c00055f402e99590b4eee708844f77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52fbc84763ecd3141cdb690d5d61a8750b625c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fbc84763ecd3141cdb690d5d61a8750b625c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fbc84763ecd3141cdb690d5d61a8750b625c62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fbc84763ecd3141cdb690d5d61a8750b625c62/comments", "author": null, "committer": null, "parents": [{"sha": "176b6042f7fd568dcd1a5a79dac567fe10ae6e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176b6042f7fd568dcd1a5a79dac567fe10ae6e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176b6042f7fd568dcd1a5a79dac567fe10ae6e4a"}], "stats": {"total": 8589, "additions": 4348, "deletions": 4241}, "files": [{"sha": "591a84a741294d32a34740a9dedfe9f894c07e57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62", "patch": "@@ -1,3 +1,16 @@\n+1998-10-18  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (fn.def2): Fix 'attrs' format.\n+\n+1998-10-18  Alastair J. Houghton <ajh8@doc.ic.ac.uk>\n+\n+\t* Makefile.in (CONFLICTS): Update.\n+\t* parse.y (expr_or_declarator_intern): New rule.\n+\t(expr_or_declarator, direct_notype_declarator, primary,\n+\tfunctional_cast): Use it.\n+\t(notype_declarator_intern): New rule.\n+\t(notype_declarator, complex_notype_declarator): Use it.\n+\n 1998-10-17  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokfndecl): Set DECL_CONTEXT to namespace if appropriate."}, {"sha": "96e8f654c46d257c9361e427326c97c10686e1a3", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62", "patch": "@@ -219,7 +219,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 25 shift/reduce conflicts and 42 reduce/reduce conflicts.\n+CONFLICTS = expect 35 shift/reduce conflicts and 42 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "20fa7b20b2de20ec5cfb33974f969f4213dfd3f3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62", "patch": "@@ -8555,6 +8555,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \tdecl = *next;\n \tswitch (TREE_CODE (decl))\n \t  {\n+\t  case TREE_LIST:\n+\t    /* For attributes.  */\n+\t    next = &TREE_VALUE (decl);\n+\t    break;\n+\n \t  case COND_EXPR:\n \t    ctype = NULL_TREE;\n \t    next = &TREE_OPERAND (decl, 0);\n@@ -9432,6 +9437,16 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t}\n       switch (TREE_CODE (declarator))\n \t{\n+\tcase TREE_LIST:\n+\t  {\n+\t    /* We encode a declarator with embedded attributes using\n+\t       a TREE_LIST.  */\n+\t    tree attrs = TREE_PURPOSE (declarator);\n+\t    declarator = TREE_VALUE (declarator);\n+\t    decl_attributes (type, attrs, NULL_TREE);\n+\t  }\n+\t  break;\n+\n \tcase ARRAY_REF:\n \t  {\n \t    register tree itype = NULL_TREE;"}, {"sha": "b7dd7329c69c30486d3708964124cc1a58d893cc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62", "patch": "@@ -3939,6 +3939,10 @@ finish_decl_parsing (decl)\n     case ARRAY_REF:\n       TREE_OPERAND (decl, 0) = finish_decl_parsing (TREE_OPERAND (decl, 0));\n       return decl;\n+    case TREE_LIST:\n+      /* For attribute handling.  */\n+      TREE_VALUE (decl) = finish_decl_parsing (TREE_VALUE (decl));\n+      return decl;\n     default:\n       my_friendly_abort (5);\n       return NULL_TREE;"}, {"sha": "f7bfb100ba1622aa3f9a26df98a29c556abe2d12", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 4274, "deletions": 4224, "changes": 8498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62"}, {"sha": "d654f5a90cc12179ce1e85e94b026f9051dfd720", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbc84763ecd3141cdb690d5d61a8750b625c62/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=52fbc84763ecd3141cdb690d5d61a8750b625c62", "patch": "@@ -203,6 +203,7 @@ empty_parms ()\n %type <ttype> compstmt implicitly_scoped_stmt\n \n %type <ttype> declarator notype_declarator after_type_declarator\n+%type <ttype> notype_declarator_intern\n %type <ttype> direct_notype_declarator direct_after_type_declarator\n %type <itype> components notype_components\n %type <ttype> component_decl component_decl_1 \n@@ -216,7 +217,8 @@ empty_parms ()\n %type <ttype> xexpr parmlist parms bad_parm \n %type <ttype> identifiers_or_typenames\n %type <ttype> fcast_or_absdcl regcast_or_absdcl\n-%type <ttype> expr_or_declarator complex_notype_declarator\n+%type <ttype> expr_or_declarator expr_or_declarator_intern\n+%type <ttype> complex_notype_declarator\n %type <ttype> notype_unqualified_id unqualified_id qualified_id\n %type <ttype> template_id do_id object_template_id notype_template_declarator\n %type <ttype> overqualified_id notype_qualified_id any_id\n@@ -725,17 +727,20 @@ fn.def2:\n \t| typed_declspecs declarator\n \t\t{ tree specs, attrs;\n \t\t  split_specs_attrs ($1.t, &specs, &attrs);\n+\t\t  attrs = build_tree_list (attrs, NULL_TREE);\n \t\t  $$ = start_method (specs, $2, attrs); goto rest_of_mdef; }\n \t| declmods notype_declarator\n \t\t{ tree specs, attrs;\n \t\t  split_specs_attrs ($1, &specs, &attrs);\n+\t\t  attrs = build_tree_list (attrs, NULL_TREE);\n \t\t  $$ = start_method (specs, $2, attrs); goto rest_of_mdef; }\n \t| notype_declarator\n \t\t{ $$ = start_method (NULL_TREE, $$, NULL_TREE); \n \t\t  goto rest_of_mdef; }\n \t| declmods constructor_declarator\n \t\t{ tree specs, attrs;\n \t\t  split_specs_attrs ($1, &specs, &attrs);\n+\t\t  attrs = build_tree_list (attrs, NULL_TREE);\n \t\t  $$ = start_method (specs, $2, attrs); goto rest_of_mdef; }\n \t| constructor_declarator\n \t\t{ $$ = start_method (NULL_TREE, $$, NULL_TREE); \n@@ -1325,13 +1330,23 @@ unqualified_id:\n \t| SELFNAME\n \t;\n \n+expr_or_declarator_intern:\n+\t  expr_or_declarator\n+\t| attributes expr_or_declarator\n+\t\t{\n+\t\t  /* Provide support for '(' attributes '*' declarator ')'\n+\t\t     etc */\n+\t\t  $$ = decl_tree_cons ($1, $2, NULL_TREE);\n+\t\t}\n+\t;\n+\n expr_or_declarator:\n \t  notype_unqualified_id\n-\t| '*' expr_or_declarator  %prec UNARY\n+\t| '*' expr_or_declarator_intern  %prec UNARY\n \t\t{ $$ = build_parse_node (INDIRECT_REF, $2); }\n-\t| '&' expr_or_declarator  %prec UNARY\n+\t| '&' expr_or_declarator_intern  %prec UNARY\n \t\t{ $$ = build_parse_node (ADDR_EXPR, $2); }\n-\t| '(' expr_or_declarator ')'\n+\t| '(' expr_or_declarator_intern ')'\n \t\t{ $$ = $2; }\n \t;\n \n@@ -1348,8 +1363,8 @@ direct_notype_declarator:\n \t   to the Koenig lookup shift in primary, below.  I hate yacc.  */\n \t| notype_unqualified_id %prec '('\n \t| notype_template_declarator\n-\t| '(' expr_or_declarator ')'\n-\t\t{ $$ = finish_decl_parsing ($2); }\n+\t| '(' expr_or_declarator_intern ')'\n+                { $$ = finish_decl_parsing ($2); }\n \t;\n \n primary:\n@@ -1378,7 +1393,7 @@ primary:\n \t\t}\n \t| '(' expr ')'\n \t\t{ $$ = finish_parenthesized_expr ($2); }\n-\t| '(' expr_or_declarator ')'\n+\t| '(' expr_or_declarator_intern ')'\n \t\t{ $2 = reparse_decl_as_expr (NULL_TREE, $2);\n \t\t  $$ = finish_parenthesized_expr ($2); }\n \t| '(' error ')'\n@@ -2774,32 +2789,42 @@ direct_after_type_declarator:\n /* A declarator allowed whether or not there has been\n    an explicit typespec.  These cannot redeclare a typedef-name.  */\n \n+notype_declarator_intern:\n+\t  notype_declarator\n+\t| attributes notype_declarator\n+                {\n+\t\t  /* Provide support for '(' attributes '*' declarator ')'\n+\t\t     etc */\n+\t\t  $$ = decl_tree_cons ($1, $2, NULL_TREE);\n+\t\t}\n+\t;\n+\t\n notype_declarator:\n-\t  '*' nonempty_cv_qualifiers notype_declarator  %prec UNARY\n+\t  '*' nonempty_cv_qualifiers notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2.t, $3); }\n-\t| '&' nonempty_cv_qualifiers notype_declarator  %prec UNARY\n+\t| '&' nonempty_cv_qualifiers notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_reference_declarator ($2.t, $3); }\n-\t| '*' notype_declarator  %prec UNARY\n+\t| '*' notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_pointer_declarator (NULL_TREE, $2); }\n-\t| '&' notype_declarator  %prec UNARY\n+\t| '&' notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n-\t| ptr_to_mem cv_qualifiers notype_declarator\n+\t| ptr_to_mem cv_qualifiers notype_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n \t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n \t\t}\n \t| direct_notype_declarator\n \t;\n \n complex_notype_declarator:\n-\t  '*' nonempty_cv_qualifiers notype_declarator  %prec UNARY\n+\t  '*' nonempty_cv_qualifiers notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2.t, $3); }\n-\t| '&' nonempty_cv_qualifiers notype_declarator  %prec UNARY\n+\t| '&' nonempty_cv_qualifiers notype_declarator_intern  %prec UNARY\n \t\t{ $$ = make_reference_declarator ($2.t, $3); }\n \t| '*' complex_notype_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator (NULL_TREE, $2); }\n \t| '&' complex_notype_declarator  %prec UNARY\n \t\t{ $$ = make_reference_declarator (NULL_TREE, $2); }\n-\t| ptr_to_mem cv_qualifiers notype_declarator\n+\t| ptr_to_mem cv_qualifiers notype_declarator_intern\n \t\t{ tree arg = make_pointer_declarator ($2, $3);\n \t\t  $$ = build_parse_node (SCOPE_REF, $1, arg);\n \t\t}\n@@ -2851,7 +2876,7 @@ overqualified_id:\n functional_cast:\n \t  typespec '(' nonnull_exprlist ')'\n \t\t{ $$ = build_functional_cast ($1.t, $3); }\n-\t| typespec '(' expr_or_declarator ')'\n+\t| typespec '(' expr_or_declarator_intern ')'\n \t\t{ $$ = reparse_decl_as_expr ($1.t, $3); }\n \t| typespec fcast_or_absdcl  %prec EMPTY\n \t\t{ $$ = reparse_absdcl_as_expr ($1.t, $2); }"}]}