{"sha": "5dea0c1939a51ebb53cab4466bd49f3f828f740d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlYTBjMTkzOWE1MWViYjUzY2FiNDQ2NmJkNDlmM2Y4MjhmNzQwZA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-03-13T00:39:34Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-13T00:39:34Z"}, "message": "arm.c (output_move_double): Prefer LDRD to LDM.\n\n2008-03-12  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.c (output_move_double): Prefer LDRD to LDM.\n\nFrom-SVN: r133160", "tree": {"sha": "938b992f5cf90bf9866fe475964fb05480b1b276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/938b992f5cf90bf9866fe475964fb05480b1b276"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dea0c1939a51ebb53cab4466bd49f3f828f740d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dea0c1939a51ebb53cab4466bd49f3f828f740d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dea0c1939a51ebb53cab4466bd49f3f828f740d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dea0c1939a51ebb53cab4466bd49f3f828f740d/comments", "author": null, "committer": null, "parents": [{"sha": "e066eba77476b4a40cdfd232617c2397dedf0bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e066eba77476b4a40cdfd232617c2397dedf0bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e066eba77476b4a40cdfd232617c2397dedf0bb1"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "d64295d7ce9c3853955908cefbef06a52a88706f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dea0c1939a51ebb53cab4466bd49f3f828f740d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dea0c1939a51ebb53cab4466bd49f3f828f740d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dea0c1939a51ebb53cab4466bd49f3f828f740d", "patch": "@@ -1,3 +1,7 @@\n+2008-03-12  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.c (output_move_double): Prefer LDRD to LDM.\n+\n 2008-03-12  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/thumb2.md: Extend peephole to cover 3-arg subs."}, {"sha": "f3febf6c4192f24a1ac2d2af016902d40ba0903a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dea0c1939a51ebb53cab4466bd49f3f828f740d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dea0c1939a51ebb53cab4466bd49f3f828f740d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5dea0c1939a51ebb53cab4466bd49f3f828f740d", "patch": "@@ -9869,7 +9869,10 @@ output_move_double (rtx *operands)\n       switch (GET_CODE (XEXP (operands[1], 0)))\n \t{\n \tcase REG:\n-\t  output_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n+\t  if (TARGET_LDRD)\n+\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1]\", operands);\n+\t  else\n+\t    output_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n \t  break;\n \n \tcase PRE_INC:\n@@ -9885,7 +9888,10 @@ output_move_double (rtx *operands)\n \t  break;\n \n \tcase POST_INC:\n-\t  output_asm_insn (\"ldm%(ia%)\\t%m1!, %M0\", operands);\n+\t  if (TARGET_LDRD)\n+\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1], #8\", operands);\n+\t  else\n+\t    output_asm_insn (\"ldm%(ia%)\\t%m1!, %M0\", operands);\n \t  break;\n \n \tcase POST_DEC:\n@@ -9944,8 +9950,14 @@ output_move_double (rtx *operands)\n \n \tcase LABEL_REF:\n \tcase CONST:\n+\t  /* We might be able to use ldrd %0, %1 here.  However the range is\n+\t     different to ldr/adr, and it is broken on some ARMv7-M\n+\t     implementations.  */\n \t  output_asm_insn (\"adr%?\\t%0, %1\", operands);\n-\t  output_asm_insn (\"ldm%(ia%)\\t%0, %M0\", operands);\n+\t  if (TARGET_LDRD)\n+\t    output_asm_insn (\"ldr%(d%)\\t%0, [%0]\", operands);\n+\t  else\n+\t    output_asm_insn (\"ldm%(ia%)\\t%0, %M0\", operands);\n \t  break;\n \n \t  /* ??? This needs checking for thumb2.  */\n@@ -9959,7 +9971,7 @@ output_move_double (rtx *operands)\n \n \t      if (GET_CODE (XEXP (operands[1], 0)) == PLUS)\n \t\t{\n-\t\t  if (GET_CODE (otherops[2]) == CONST_INT)\n+\t\t  if (GET_CODE (otherops[2]) == CONST_INT && !TARGET_LDRD)\n \t\t    {\n \t\t      switch ((int) INTVAL (otherops[2]))\n \t\t\t{\n@@ -10018,6 +10030,9 @@ output_move_double (rtx *operands)\n \t      else\n \t\toutput_asm_insn (\"sub%?\\t%0, %1, %2\", otherops);\n \n+\t      if (TARGET_LDRD)\n+\t\treturn \"ldr%(d%)\\t%0, [%0]\";\n+\n \t      return \"ldm%(ia%)\\t%0, %M0\";\n \t    }\n \t  else\n@@ -10046,7 +10061,10 @@ output_move_double (rtx *operands)\n       switch (GET_CODE (XEXP (operands[0], 0)))\n         {\n \tcase REG:\n-\t  output_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n+\t  if (TARGET_LDRD)\n+\t    output_asm_insn (\"str%(d%)\\t%1, [%m0]\", operands);\n+\t  else\n+\t    output_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n \t  break;\n \n         case PRE_INC:\n@@ -10062,7 +10080,10 @@ output_move_double (rtx *operands)\n \t  break;\n \n         case POST_INC:\n-\t  output_asm_insn (\"stm%(ia%)\\t%m0!, %M1\", operands);\n+\t  if (TARGET_LDRD)\n+\t    output_asm_insn (\"str%(d%)\\t%1, [%m0], #8\", operands);\n+\t  else\n+\t    output_asm_insn (\"stm%(ia%)\\t%m0!, %M1\", operands);\n \t  break;\n \n         case POST_DEC:\n@@ -10106,7 +10127,7 @@ output_move_double (rtx *operands)\n \n \tcase PLUS:\n \t  otherops[2] = XEXP (XEXP (operands[0], 0), 1);\n-\t  if (GET_CODE (otherops[2]) == CONST_INT)\n+\t  if (GET_CODE (otherops[2]) == CONST_INT && !TARGET_LDRD)\n \t    {\n \t      switch ((int) INTVAL (XEXP (XEXP (operands[0], 0), 1)))\n \t\t{"}]}