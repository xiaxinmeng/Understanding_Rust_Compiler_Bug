{"sha": "bebe00865b2220d5422a461da9ba00dd996faed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViZTAwODY1YjIyMjBkNTQyMmE0NjFkYTliYTAwZGQ5OTZmYWVkNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-09-27T13:22:04Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-09-27T13:22:04Z"}, "message": "re PR gcov-profile/46266 (gcov generates data for non-existing file <built-in>)\n\nFix PR gcov-profile/46266\n\n\tPR gcov-profile/46266\n\t* lib/gcov.exp: Verify that <built-in>.gcov file is not\n\tconsidered.\n\t* input.h (RESERVED_LOCATION_P): New macro.\n\t* profile.c (branch_prob): Use RESERVED_LOCATION_P and\n\tinstread of comparison with UNKNOWN_LOCATION.\n\nFrom-SVN: r240536", "tree": {"sha": "a350b8ac8a20df6b4c2255393b3c04ce3e4310f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a350b8ac8a20df6b4c2255393b3c04ce3e4310f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bebe00865b2220d5422a461da9ba00dd996faed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebe00865b2220d5422a461da9ba00dd996faed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebe00865b2220d5422a461da9ba00dd996faed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebe00865b2220d5422a461da9ba00dd996faed6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b51fe6a98e93c424e709759cf78452e2e701362e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51fe6a98e93c424e709759cf78452e2e701362e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51fe6a98e93c424e709759cf78452e2e701362e"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "2fe256cc63caf46c1989ebec4442586c5c93ae03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bebe00865b2220d5422a461da9ba00dd996faed6", "patch": "@@ -1,3 +1,10 @@\n+2016-09-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/46266\n+\t* input.h (RESERVED_LOCATION_P): New macro.\n+\t* profile.c (branch_prob): Use RESERVED_LOCATION_P and\n+\tinstread of comparison with UNKNOWN_LOCATION.\n+\n 2016-09-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77745"}, {"sha": "6ce0b812b5eb6a8e6e0045e9955feab3fc00618a", "filename": "gcc/input.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=bebe00865b2220d5422a461da9ba00dd996faed6", "patch": "@@ -61,6 +61,8 @@ extern location_t input_location;\n #define LOCATION_BLOCK(LOC) \\\n   ((tree) ((IS_ADHOC_LOC (LOC)) ? get_data_from_adhoc_loc (line_table, (LOC)) \\\n    : NULL))\n+#define RESERVED_LOCATION_P(LOC) \\\n+  (LOCATION_LOCUS (LOC) < RESERVED_LOCATION_COUNT)\n \n /* Return a positive value if LOCATION is the locus of a token that is\n    located in a system header, O otherwise. It returns 1 if LOCATION"}, {"sha": "2564f07abf7bd1c4ad70441e445b1b9128530c3b", "filename": "gcc/profile.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=bebe00865b2220d5422a461da9ba00dd996faed6", "patch": "@@ -1042,7 +1042,7 @@ branch_prob (void)\n \t       gsi_prev_nondebug (&gsi))\n \t    {\n \t      last = gsi_stmt (gsi);\n-\t      if (gimple_has_location (last))\n+\t      if (!RESERVED_LOCATION_P (gimple_location (last)))\n \t\tbreak;\n \t    }\n \n@@ -1053,7 +1053,7 @@ branch_prob (void)\n \t     is not computed twice.  */\n \t  if (last\n \t      && gimple_has_location (last)\n-\t      && LOCATION_LOCUS (e->goto_locus) != UNKNOWN_LOCATION\n+\t      && !RESERVED_LOCATION_P (e->goto_locus)\n \t      && !single_succ_p (bb)\n \t      && (LOCATION_FILE (e->goto_locus)\n \t          != LOCATION_FILE (gimple_location (last))\n@@ -1262,15 +1262,14 @@ branch_prob (void)\n \t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n \t      gimple *stmt = gsi_stmt (gsi);\n-\t      if (gimple_has_location (stmt))\n+\t      if (!RESERVED_LOCATION_P (gimple_location (stmt)))\n \t\toutput_location (gimple_filename (stmt), gimple_lineno (stmt),\n \t\t\t\t &offset, bb);\n \t    }\n \n \t  /* Notice GOTO expressions eliminated while constructing the CFG.  */\n \t  if (single_succ_p (bb)\n-\t      && LOCATION_LOCUS (single_succ_edge (bb)->goto_locus)\n-\t\t != UNKNOWN_LOCATION)\n+\t      && !RESERVED_LOCATION_P (single_succ_edge (bb)->goto_locus))\n \t    {\n \t      expanded_location curr_location\n \t\t= expand_location (single_succ_edge (bb)->goto_locus);"}, {"sha": "5696366367ed4ed9b59af3e45f26f2a8b0291223", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bebe00865b2220d5422a461da9ba00dd996faed6", "patch": "@@ -1,3 +1,9 @@\n+2016-09-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/46266\n+\t* lib/gcov.exp: Verify that <built-in>.gcov file is not\n+\tconsidered.\n+\n 2016-09-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77745"}, {"sha": "91f14e2bdc7a27c5351a8c82ff0206489fc9ce54", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebe00865b2220d5422a461da9ba00dd996faed6/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=bebe00865b2220d5422a461da9ba00dd996faed6", "patch": "@@ -364,13 +364,20 @@ proc run-gcov { args } {\n \treturn\n     }\n \n+    set builtin_index [string first \"File '<built-in>'\" $result]\n+    if { $builtin_index != -1 } {\n+        fail \"$testname gcov failed: <built-in>.gcov should not be created\"\n+        clean-gcov $testcase\n+        return\n+    }\n+\n     # Get the gcov output file after making sure it exists.\n     set files [glob -nocomplain $testcase.gcov]\n     if { $files == \"\" } {\n \tif { $xfailed } {\n \t    setup_xfail \"*-*-*\"\n \t}\n-        fail \"$testname gcov failed: $testcase.gov does not exist\"\n+        fail \"$testname gcov failed: $testcase.gcov does not exist\"\n         clean-gcov $testcase\n         return\n     }"}]}