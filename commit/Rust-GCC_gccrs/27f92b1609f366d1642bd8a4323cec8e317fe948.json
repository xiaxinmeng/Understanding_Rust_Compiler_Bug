{"sha": "27f92b1609f366d1642bd8a4323cec8e317fe948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmOTJiMTYwOWYzNjZkMTY0MmJkOGE0MzIzY2VjOGUzMTdmZTk0OA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-06-06T10:36:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:36:28Z"}, "message": "initialize.c (__gnat_initialize for vxworks): Update documentation on the ZCX support...\n\n2007-04-20  Olivier Hainque  <hainque@adacore.com>\n\n\t* initialize.c (__gnat_initialize for vxworks):  Update documentation\n\ton the ZCX support, using different sets of crtstuff objects than with\n\tGCC 3.4.\n\nFrom-SVN: r125429", "tree": {"sha": "621e8795ee8aab55c554bca74038d26e3f83892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/621e8795ee8aab55c554bca74038d26e3f83892e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f92b1609f366d1642bd8a4323cec8e317fe948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f92b1609f366d1642bd8a4323cec8e317fe948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f92b1609f366d1642bd8a4323cec8e317fe948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f92b1609f366d1642bd8a4323cec8e317fe948/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc64221190662aa24a3f3971f2944827151715e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc64221190662aa24a3f3971f2944827151715e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc64221190662aa24a3f3971f2944827151715e5"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "2fa0d0260995870b30c8b87d0d3a816976731a43", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f92b1609f366d1642bd8a4323cec8e317fe948/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f92b1609f366d1642bd8a4323cec8e317fe948/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=27f92b1609f366d1642bd8a4323cec8e317fe948", "patch": "@@ -115,37 +115,38 @@ __gnat_initialize (void *eh)\n {\n   __gnat_init_float ();\n \n-  /* On targets where we might be using the ZCX scheme, we need to register\n-     the frame tables.\n+  /* On targets where we use the ZCX scheme, we need to register the frame\n+     tables at load/startup time.\n \n      For applications loaded as a set of \"modules\", the crtstuff objects\n-     linked in (crtbegin/end) are tailored to provide this service a-la C++\n-     constructor fashion, typically triggered by the VxWorks loader.  This is\n-     achieved by way of a special variable declaration in the crt object, the\n-     name of which has been deduced by analyzing the output of the \"munching\"\n-     step documented for C++.  The de-registration is handled symmetrically,\n-     a-la C++ destructor fashion and typically triggered by the dynamic\n-     unloader.  Note that since the tables shall be registered against a\n-     common datastructure, libgcc should be one of the modules (vs being\n-     partially linked against all the others at build time) and shall be\n-     loaded first.\n+     linked in (crtbegin.o/end.o) are tailored to provide this service\n+     automatically, a-la C++ constructor fashion, triggered by the VxWorks\n+     loader thanks to a special variable declaration in crtbegin.o (_ctors).\n+\n+     Automatic de-registration is handled symmetrically, a-la C++ destructor\n+     fashion (with a _dtors variable also in crtbegin.o) triggered by the\n+     dynamic unloader.\n+\n+     Note that since the tables shall be registered against a common\n+     datastructure, libgcc should be one of the modules (vs being partially\n+     linked against all the others at build time) and shall be loaded first.\n \n      For applications linked with the kernel, the scheme above would lead to\n-     duplicated symbols because the VxWorks kernel build \"munches\" by default.\n-     To prevent those conflicts, we link against crtbegin/endS objects that\n-     don't include the special variable and directly call the appropriate\n-     function here. We'll never unload that, so there is no de-registration to\n-     worry about.\n+     duplicated symbols because the VxWorks kernel build \"munches\" by default,\n+     so we link against crtbeginT.o instead of crtbegin.o, which doesn't\n+     include the special variables. We know which set of crt objects is used\n+     thanks to a boolean indicator present in both sets (__module_has_ctors),\n+     and directly call the appropriate function here in the not-automatic\n+     case. We'll never unload that, so there is no de-registration to worry\n+     about.\n \n      For whole applications loaded as a single module, we may use one scheme\n      or the other, except for the mixed Ada/C++ case in which the first scheme\n      would fail for the same reason as in the linked-with-kernel situation.\n \n-     We can differentiate by looking at the __module_has_ctors value provided\n-     by each class of crt objects. As of today, selecting the crt set with the\n-     ctors/dtors capabilities (first scheme above) is triggered by adding\n-     \"-dynamic\" to the gcc *link* command line options. Selecting the other\n-     set of crt objects is achieved by \"-static\" instead.\n+     Selecting the crt set with the ctors/dtors capabilities (first scheme\n+     above) is triggered by adding \"-dynamic\" to the gcc *link* command line\n+     options. Selecting the other set is achieved by using \"-static\" instead.\n \n      This is a first approach, tightly synchronized with a number of GCC\n      configuration and crtstuff changes. We need to ensure that those changes"}]}