{"sha": "2fd74bffecf5255a07b42e935c8e44cb55414841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkNzRiZmZlY2Y1MjU1YTA3YjQyZTkzNWM4ZTQ0Y2I1NTQxNDg0MQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2009-08-20T01:36:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2009-08-20T01:36:11Z"}, "message": "pa.md (reload_inhi, [...]): New patterns.\n\n\t* pa.md (reload_inhi, reload_outhi, reload_inqi, reload_outqi): New\n\tpatterns.\n\t* pa.c (emit_move_sequence): Check if address of operand1 is valid\n\tfor mode mode of operand0 when doing secondary reload for SAR.\n\nFrom-SVN: r150951", "tree": {"sha": "962cbd2c93724b3b36ee41db76d0983c4e85960c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/962cbd2c93724b3b36ee41db76d0983c4e85960c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fd74bffecf5255a07b42e935c8e44cb55414841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd74bffecf5255a07b42e935c8e44cb55414841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd74bffecf5255a07b42e935c8e44cb55414841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd74bffecf5255a07b42e935c8e44cb55414841/comments", "author": null, "committer": null, "parents": [{"sha": "d39440134983c1f3273174c68db3662addc79008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39440134983c1f3273174c68db3662addc79008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39440134983c1f3273174c68db3662addc79008"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "37498813861e97ed4ab34d44691a05cb16869aaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fd74bffecf5255a07b42e935c8e44cb55414841", "patch": "@@ -1,3 +1,10 @@\n+2009-08-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.md (reload_inhi, reload_outhi, reload_inqi, reload_outqi): New\n+\tpatterns.\n+\t* pa.c (emit_move_sequence): Check if address of operand1 is valid\n+\tfor mode mode of operand0 when doing secondary reload for SAR.\n+\n 2009-08-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/41123"}, {"sha": "4355d0a2ac70d6fd45d8681f7ac0413ae67ede9a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2fd74bffecf5255a07b42e935c8e44cb55414841", "patch": "@@ -1619,7 +1619,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n       /* D might not fit in 14 bits either; for such cases load D into\n \t scratch reg.  */\n       if (GET_CODE (operand1) == MEM\n-\t  && !memory_address_p (Pmode, XEXP (operand1, 0)))\n+\t  && !memory_address_p (GET_MODE (operand0), XEXP (operand1, 0)))\n \t{\n \t  /* We are reloading the address into the scratch register, so we\n \t     want to make sure the scratch register is a full register.  */"}, {"sha": "20f64449097399c46b6e9fd6e2fc1480ff0caea7", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd74bffecf5255a07b42e935c8e44cb55414841/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2fd74bffecf5255a07b42e935c8e44cb55414841", "patch": "@@ -2740,6 +2740,40 @@\n     DONE;\n }\")\n \n+;; Handle HImode input reloads requiring a general register as a\n+;; scratch register.\n+(define_expand \"reload_inhi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=Z\")\n+\t(match_operand:HI 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:HI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, HImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+;; Handle HImode output reloads requiring a general register as a\n+;; scratch register.\n+(define_expand \"reload_outhi\"\n+  [(set (match_operand:HI 0 \"non_hard_reg_operand\" \"\")\n+\t(match_operand:HI 1  \"register_operand\" \"Z\"))\n+   (clobber (match_operand:HI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, HImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"move_dest_operand\"\n \t \t\t  \"=r,r,r,r,r,Q,!*q,!r\")\n@@ -2864,6 +2898,40 @@\n     DONE;\n }\")\n \n+;; Handle QImode input reloads requiring a general register as a\n+;; scratch register.\n+(define_expand \"reload_inqi\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=Z\")\n+\t(match_operand:QI 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:QI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, QImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+;; Handle QImode output reloads requiring a general register as a\n+;; scratch register.\n+(define_expand \"reload_outqi\"\n+  [(set (match_operand:QI 0 \"non_hard_reg_operand\" \"\")\n+\t(match_operand:QI 1  \"register_operand\" \"Z\"))\n+   (clobber (match_operand:QI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, QImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"move_dest_operand\"\n \t\t\t  \"=r,r,r,r,r,Q,!*q,!r\")"}]}