{"sha": "e467c9d25782edea98d2cd66956d5abb82e847e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2N2M5ZDI1NzgyZWRlYTk4ZDJjZDY2OTU2ZDVhYmI4MmU4NDdlOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-31T02:50:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-08-31T02:50:18Z"}, "message": "semantics.c (finish_qualified_id_expr): Handle building up a non-dependent SCOPE_REF here.\n\n\t* semantics.c (finish_qualified_id_expr): Handle building up a\n\tnon-dependent SCOPE_REF here.\n\t(finish_id_expression): Not here.\n\t* error.c (dump_decl) [SCOPE_REF]: Only pass TFF_UNQUALIFIED_NAME.\n\nFrom-SVN: r190829", "tree": {"sha": "6ecc82815289eebd6a77e97ed6cd46d01aa3ce7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecc82815289eebd6a77e97ed6cd46d01aa3ce7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e467c9d25782edea98d2cd66956d5abb82e847e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e467c9d25782edea98d2cd66956d5abb82e847e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e467c9d25782edea98d2cd66956d5abb82e847e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e467c9d25782edea98d2cd66956d5abb82e847e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "091bffba90e0c70f76ee138f92024a6f3b7aa2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091bffba90e0c70f76ee138f92024a6f3b7aa2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091bffba90e0c70f76ee138f92024a6f3b7aa2bc"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "c202dc4f0276e9c01dbc836ff5203c931b7518ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e467c9d25782edea98d2cd66956d5abb82e847e9", "patch": "@@ -1,5 +1,10 @@\n 2012-08-30  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_qualified_id_expr): Handle building up a\n+\tnon-dependent SCOPE_REF here.\n+\t(finish_id_expression): Not here.\n+\t* error.c (dump_decl) [SCOPE_REF]: Only pass TFF_UNQUALIFIED_NAME.\n+\n \t* friend.c (make_friend_class): Handle template template parameters.\n \t* parser.c (cp_parser_template_declaration_after_export): Likewise.\n \t* pt.c (tsubst_friend_class): Likewise."}, {"sha": "7d60fe00c1862e5d47e47e6a19e5d2e5ccb69caa", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e467c9d25782edea98d2cd66956d5abb82e847e9", "patch": "@@ -1042,7 +1042,7 @@ dump_decl (tree t, int flags)\n     case SCOPE_REF:\n       dump_type (TREE_OPERAND (t, 0), flags);\n       pp_string (cxx_pp, \"::\");\n-      dump_decl (TREE_OPERAND (t, 1), flags|TFF_UNQUALIFIED_NAME);\n+      dump_decl (TREE_OPERAND (t, 1), TFF_UNQUALIFIED_NAME);\n       break;\n \n     case ARRAY_REF:"}, {"sha": "6d7004b98a7845edb53bbf07e053dd5983166af9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e467c9d25782edea98d2cd66956d5abb82e847e9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e467c9d25782edea98d2cd66956d5abb82e847e9", "patch": "@@ -1792,6 +1792,23 @@ finish_qualified_id_expr (tree qualifying_class,\n \t   being taken.  */\n \texpr = build_offset_ref (qualifying_class, expr, /*address_p=*/false);\n     }\n+  else if (BASELINK_P (expr))\n+    ;\n+  else\n+    {\n+      expr = convert_from_reference (expr);\n+\n+      /* In a template, return a SCOPE_REF for most qualified-ids\n+\t so that we can check access at instantiation time.  But if\n+\t we're looking at a member of the current instantiation, we\n+\t know we have access and building up the SCOPE_REF confuses\n+\t non-type template argument handling.  */\n+      if (processing_template_decl\n+\t  && !currently_open_class (qualifying_class))\n+\texpr = build_qualified_name (TREE_TYPE (expr),\n+\t\t\t\t     qualifying_class, expr,\n+\t\t\t\t     template_p);\n+    }\n \n   return expr;\n }\n@@ -3253,29 +3270,15 @@ finish_id_expression (tree id_expression,\n \t  if (TREE_CODE (decl) == FUNCTION_DECL)\n \t    mark_used (decl);\n \n-\t  if (TREE_CODE (decl) == FIELD_DECL || BASELINK_P (decl))\n+\t  if (TYPE_P (scope))\n \t    decl = finish_qualified_id_expr (scope,\n \t\t\t\t\t     decl,\n \t\t\t\t\t     done,\n \t\t\t\t\t     address_p,\n \t\t\t\t\t     template_p,\n \t\t\t\t\t     template_arg_p);\n \t  else\n-\t    {\n-\t      tree r = convert_from_reference (decl);\n-\n-\t      /* In a template, return a SCOPE_REF for most qualified-ids\n-\t\t so that we can check access at instantiation time.  But if\n-\t\t we're looking at a member of the current instantiation, we\n-\t\t know we have access and building up the SCOPE_REF confuses\n-\t\t non-type template argument handling.  */\n-\t      if (processing_template_decl && TYPE_P (scope)\n-\t\t  && !currently_open_class (scope))\n-\t\tr = build_qualified_name (TREE_TYPE (r),\n-\t\t\t\t\t  scope, decl,\n-\t\t\t\t\t  template_p);\n-\t      decl = r;\n-\t    }\n+\t    decl = convert_from_reference (decl);\n \t}\n       else if (TREE_CODE (decl) == FIELD_DECL)\n \t{"}]}