{"sha": "7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2YzMxZjBmODRhNzI5NTQzM2ViYWMwOWI5NGZhZTJkNWNjMjg5Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-31T11:19:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-24T11:08:25Z"}, "message": "Add x86 addsub SLP pattern\n\nThis addds SLP pattern recognition for the SSE3/AVX [v]addsubp{ds} v0, v1\ninstructions which compute { v0[0] - v1[0], v0[1], + v1[1], ... }\nthus subtract, add alternating on lanes, starting with subtract.\n\nIt adds a corresponding optab and direct internal function,\nvec_addsub$a3 and renames the existing i386 backend patterns to\nthe new canonical name.\n\nThe SLP pattern matches the exact alternating lane sequence rather\nthan trying to be clever and anticipating incoming permutes - we\ncould permute the two input vectors to the needed lane alternation,\ndo the addsub and then permute the result vector back but that's\nonly profitable in case the two input or the output permute will\nvanish - something Tamars refactoring of SLP pattern recog should\nmake possible.\n\n2021-06-17  Richard Biener  <rguenther@suse.de>\n\n\t* config/i386/sse.md (avx_addsubv4df3): Rename to\n\tvec_addsubv4df3.\n\t(avx_addsubv8sf3): Rename to vec_addsubv8sf3.\n\t(sse3_addsubv2df3): Rename to vec_addsubv2df3.\n\t(sse3_addsubv4sf3): Rename to vec_addsubv4sf3.\n\t* config/i386/i386-builtin.def: Adjust.\n\t* internal-fn.def (VEC_ADDSUB): New internal optab fn.\n\t* optabs.def (vec_addsub_optab): New optab.\n\t* tree-vect-slp-patterns.c (class addsub_pattern): New.\n\t(slp_patterns): Add addsub_pattern.\n\t* tree-vect-slp.c (vect_optimize_slp): Disable propagation\n\tacross CFN_VEC_ADDSUB.\n\t* tree-vectorizer.h (vect_pattern::vect_pattern): Make\n\tm_ops optional.\n\t* doc/md.texi (vec_addsub<mode>3): Document.\n\n\t* gcc.target/i386/vect-addsubv2df.c: New testcase.\n\t* gcc.target/i386/vect-addsubv4sf.c: Likewise.\n\t* gcc.target/i386/vect-addsubv4df.c: Likewise.\n\t* gcc.target/i386/vect-addsubv8sf.c: Likewise.\n\t* gcc.target/i386/vect-addsub-2.c: Likewise.\n\t* gcc.target/i386/vect-addsub-3.c: Likewise.", "tree": {"sha": "ae70aac1f6e8305d23a8ee08ce92d3b57d4a3100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae70aac1f6e8305d23a8ee08ce92d3b57d4a3100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9872bd8c35be0f4d475fac739115cf5b82cdabc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9872bd8c35be0f4d475fac739115cf5b82cdabc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9872bd8c35be0f4d475fac739115cf5b82cdabc0"}], "stats": {"total": 359, "additions": 350, "deletions": 9}, "files": [{"sha": "ea79e0bdda270db93c426bb0ae64746d30a1e520", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -855,8 +855,8 @@ BDESC (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_subv1di3, \"__\n BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_movshdup, \"__builtin_ia32_movshdup\", IX86_BUILTIN_MOVSHDUP, UNKNOWN, (int) V4SF_FTYPE_V4SF)\n BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_movsldup, \"__builtin_ia32_movsldup\", IX86_BUILTIN_MOVSLDUP, UNKNOWN, (int) V4SF_FTYPE_V4SF)\n \n-BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_addsubv4sf3, \"__builtin_ia32_addsubps\", IX86_BUILTIN_ADDSUBPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n-BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_addsubv2df3, \"__builtin_ia32_addsubpd\", IX86_BUILTIN_ADDSUBPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n+BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_vec_addsubv4sf3, \"__builtin_ia32_addsubps\", IX86_BUILTIN_ADDSUBPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n+BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_vec_addsubv2df3, \"__builtin_ia32_addsubpd\", IX86_BUILTIN_ADDSUBPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_haddv4sf3, \"__builtin_ia32_haddps\", IX86_BUILTIN_HADDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_haddv2df3, \"__builtin_ia32_haddpd\", IX86_BUILTIN_HADDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n BDESC (OPTION_MASK_ISA_SSE3, 0, CODE_FOR_sse3_hsubv4sf3, \"__builtin_ia32_hsubps\", IX86_BUILTIN_HSUBPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n@@ -996,8 +996,8 @@ BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_pclmulqdq, 0, IX86_BUILTIN_PCLMULQDQ128\n /* AVX */\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_addv4df3, \"__builtin_ia32_addpd256\", IX86_BUILTIN_ADDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_addv8sf3, \"__builtin_ia32_addps256\", IX86_BUILTIN_ADDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF)\n-BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_addsubv4df3, \"__builtin_ia32_addsubpd256\", IX86_BUILTIN_ADDSUBPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF)\n-BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_addsubv8sf3, \"__builtin_ia32_addsubps256\", IX86_BUILTIN_ADDSUBPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF)\n+BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_vec_addsubv4df3, \"__builtin_ia32_addsubpd256\", IX86_BUILTIN_ADDSUBPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF)\n+BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_vec_addsubv8sf3, \"__builtin_ia32_addsubps256\", IX86_BUILTIN_ADDSUBPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_andv4df3, \"__builtin_ia32_andpd256\", IX86_BUILTIN_ANDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_andv8sf3, \"__builtin_ia32_andps256\", IX86_BUILTIN_ANDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_andnotv4df3, \"__builtin_ia32_andnpd256\", IX86_BUILTIN_ANDNPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF)"}, {"sha": "1f1db8214ccfc621ea87edab978c269899cc99af", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -2410,7 +2410,7 @@\n    (set_attr \"prefix\" \"<round_saeonly_scalar_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx_addsubv4df3\"\n+(define_insn \"vec_addsubv4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4DF\n \t  (minus:V4DF\n@@ -2424,7 +2424,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n-(define_insn \"sse3_addsubv2df3\"\n+(define_insn \"vec_addsubv2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DF\n \t  (minus:V2DF\n@@ -2442,7 +2442,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"avx_addsubv8sf3\"\n+(define_insn \"vec_addsubv8sf3\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V8SF\n \t  (minus:V8SF\n@@ -2456,7 +2456,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"sse3_addsubv4sf3\"\n+(define_insn \"vec_addsubv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n \t  (minus:V4SF"}, {"sha": "1b91814433057b1b377283fd1f40cb970dc3d243", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -5682,6 +5682,14 @@ signed/unsigned elements of size S@.  Subtract the high/low elements of 2 from\n 1 and widen the resulting elements. Put the N/2 results of size 2*S in the\n output vector (operand 0).\n \n+@cindex @code{vec_addsub@var{m}3} instruction pattern\n+@item @samp{vec_addsub@var{m}3}\n+Alternating subtract, add with even lanes doing subtract and odd\n+lanes doing addition.  Operands 1 and 2 and the outout operand are vectors\n+with mode @var{m}.\n+\n+These instructions are not allowed to @code{FAIL}.\n+\n @cindex @code{mulhisi3} instruction pattern\n @item @samp{mulhisi3}\n Multiply operands 1 and 2, which have mode @code{HImode}, and store"}, {"sha": "c3b8e730960c5f95b90a4dad4a451bd0240257bd", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -281,6 +281,7 @@ DEF_INTERNAL_OPTAB_FN (COMPLEX_ADD_ROT90, ECF_CONST, cadd90, binary)\n DEF_INTERNAL_OPTAB_FN (COMPLEX_ADD_ROT270, ECF_CONST, cadd270, binary)\n DEF_INTERNAL_OPTAB_FN (COMPLEX_MUL, ECF_CONST, cmul, binary)\n DEF_INTERNAL_OPTAB_FN (COMPLEX_MUL_CONJ, ECF_CONST, cmul_conj, binary)\n+DEF_INTERNAL_OPTAB_FN (VEC_ADDSUB, ECF_CONST, vec_addsub, binary)\n \n \n /* FP scales.  */"}, {"sha": "41ab2598eb6c32c003cbed490796abf25d2ee315", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -407,6 +407,7 @@ OPTAB_D (vec_widen_usubl_hi_optab, \"vec_widen_usubl_hi_$a\")\n OPTAB_D (vec_widen_usubl_lo_optab, \"vec_widen_usubl_lo_$a\")\n OPTAB_D (vec_widen_uaddl_hi_optab, \"vec_widen_uaddl_hi_$a\")\n OPTAB_D (vec_widen_uaddl_lo_optab, \"vec_widen_uaddl_lo_$a\")\n+OPTAB_D (vec_addsub_optab, \"vec_addsub$a3\")\n \n OPTAB_D (sync_add_optab, \"sync_add$I$a\")\n OPTAB_D (sync_and_optab, \"sync_and$I$a\")"}, {"sha": "a6b941461e8e9fd8a9cad899d87c9e919d19529a", "filename": "gcc/testsuite/gcc.target/i386/vect-addsub-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-2.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse3 } */\n+/* { dg-options \"-O3 -msse3\" } */\n+\n+float a[1024], b[1024];\n+\n+void foo()\n+{\n+  for (int i = 0; i < 256; i++)\n+    {\n+      a[4*i+0] = a[4*i+0] - b[4*i+0];\n+      a[4*i+1] = a[4*i+1] + b[4*i+1];\n+      a[4*i+2] = a[4*i+2] - b[4*i+2];\n+      a[4*i+3] = a[4*i+3] + b[4*i+3];\n+    }\n+}\n+\n+/* We should be able to vectorize this with SLP using the addsub\n+   SLP pattern.  */\n+/* { dg-final { scan-assembler \"addsubps\" } } */\n+/* { dg-final { scan-assembler-not \"shuf\" } } */"}, {"sha": "b27ee56bd73ee1c30ad663a960e544741b17a71b", "filename": "gcc/testsuite/gcc.target/i386/vect-addsub-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsub-3.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse3 } */\n+/* { dg-options \"-O3 -msse3\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+double a[2], b[2], c[2];\n+\n+void __attribute__((noipa))\n+foo ()\n+{\n+  /* When we want to use addsubpd we have to keep permuting both\n+     loads, if instead we blend the result of an add and a sub we\n+     can combine the blend with the permute.  Both are similar in cost,\n+     verify we did not wrongly apply both.  */\n+  double tem0 = a[1] - b[1];\n+  double tem1 = a[0] + b[0];\n+  c[0] = tem0;\n+  c[1] = tem1;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  a[0] = 1.; a[1] = 2.;\n+  b[0] = 2.; b[1] = 4.;\n+  foo ();\n+  if (c[0] != -2. || c[1] != 3.)\n+    __builtin_abort ();\n+}"}, {"sha": "547485d5519df8f53f9dd30e3b9e0bf17d6d740c", "filename": "gcc/testsuite/gcc.target/i386/vect-addsubv2df.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv2df.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse3 } */\n+/* { dg-options \"-O3 -msse3 -fdump-tree-slp2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+double x[2], y[2], z[2];\n+void __attribute__((noipa)) foo ()\n+{\n+  x[0] = y[0] - z[0];\n+  x[1] = y[1] + z[1];\n+}\n+void __attribute__((noipa)) bar ()\n+{\n+  x[0] = y[0] + z[0];\n+  x[1] = y[1] - z[1];\n+}\n+static void\n+TEST (void)\n+{\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      y[i] = i + 1;\n+      z[i] = 2 * i + 1;\n+    }\n+  foo ();\n+  if (x[0] != 0 || x[1] != 5)\n+    __builtin_abort ();\n+  bar ();\n+  if (x[0] != 2 || x[1] != -1)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ADDSUB\" 1 \"slp2\" } } */"}, {"sha": "e0a1b3d9d00f579efe0c45e399ba736fb46466e3", "filename": "gcc/testsuite/gcc.target/i386/vect-addsubv4df.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4df.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target avx_runtime } } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx -fdump-tree-slp2\" } */\n+\n+double x[4], y[4], z[4];\n+void __attribute__((noipa)) foo ()\n+{\n+  x[0] = y[0] - z[0];\n+  x[1] = y[1] + z[1];\n+  x[2] = y[2] - z[2];\n+  x[3] = y[3] + z[3];\n+}\n+void __attribute__((noipa)) bar ()\n+{\n+  x[0] = y[0] + z[0];\n+  x[1] = y[1] - z[1];\n+  x[2] = y[2] + z[2];\n+  x[3] = y[3] - z[3];\n+}\n+int main()\n+{\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      y[i] = i + 1;\n+      z[i] = 2 * i + 1;\n+    }\n+  foo ();\n+  if (x[0] != 0 || x[1] != 5 || x[2] != -2 || x[3] != 11)\n+    __builtin_abort ();\n+  bar ();\n+  if (x[0] != 2 || x[1] != -1 || x[2] != 8 || x[3] != -3)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ADDSUB\" 1 \"slp2\" } } */"}, {"sha": "b524f0c35a809cfdb654d66edf3ee95aa8ccd8d7", "filename": "gcc/testsuite/gcc.target/i386/vect-addsubv4sf.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv4sf.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse3 } */\n+/* { dg-options \"-O3 -msse3 -fdump-tree-slp2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+float x[4], y[4], z[4];\n+void __attribute__((noipa)) foo ()\n+{\n+  x[0] = y[0] - z[0];\n+  x[1] = y[1] + z[1];\n+  x[2] = y[2] - z[2];\n+  x[3] = y[3] + z[3];\n+}\n+void __attribute__((noipa)) bar ()\n+{\n+  x[0] = y[0] + z[0];\n+  x[1] = y[1] - z[1];\n+  x[2] = y[2] + z[2];\n+  x[3] = y[3] - z[3];\n+}\n+static void\n+TEST (void)\n+{\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      y[i] = i + 1;\n+      z[i] = 2 * i + 1;\n+    }\n+  foo ();\n+  if (x[0] != 0 || x[1] != 5 || x[2] != -2 || x[3] != 11)\n+    __builtin_abort ();\n+  bar ();\n+  if (x[0] != 2 || x[1] != -1 || x[2] != 8 || x[3] != -3)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ADDSUB\" 1 \"slp2\" } } */"}, {"sha": "0eed33b65319ddb7404061ee37f0afdccb3da91a", "filename": "gcc/testsuite/gcc.target/i386/vect-addsubv8sf.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv8sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv8sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-addsubv8sf.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target avx_runtime } } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx -fdump-tree-slp2\" } */\n+\n+float x[8], y[8], z[8];\n+void __attribute__((noipa)) foo ()\n+{\n+  x[0] = y[0] - z[0];\n+  x[1] = y[1] + z[1];\n+  x[2] = y[2] - z[2];\n+  x[3] = y[3] + z[3];\n+  x[4] = y[4] - z[4];\n+  x[5] = y[5] + z[5];\n+  x[6] = y[6] - z[6];\n+  x[7] = y[7] + z[7];\n+}\n+void __attribute__((noipa)) bar ()\n+{\n+  x[0] = y[0] + z[0];\n+  x[1] = y[1] - z[1];\n+  x[2] = y[2] + z[2];\n+  x[3] = y[3] - z[3];\n+  x[4] = y[4] + z[4];\n+  x[5] = y[5] - z[5];\n+  x[6] = y[6] + z[6];\n+  x[7] = y[7] - z[7];\n+}\n+int main()\n+{\n+  for (int i = 0; i < 8; ++i)\n+    {\n+      y[i] = i + 1;\n+      z[i] = 2 * i + 1;\n+    }\n+  foo ();\n+  if (x[0] != 0 || x[1] != 5 || x[2] != -2 || x[3] != 11\n+      || x[4] != -4 || x[5] != 17 || x[6] != -6 || x[7] != 23)\n+    __builtin_abort ();\n+  bar ();\n+  if (x[0] != 2 || x[1] != -1 || x[2] != 8 || x[3] != -3\n+      || x[4] != 14 || x[5] != -5 || x[6] != 20 || x[7] != -7)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ADDSUB\" 1 \"slp2\" } } */"}, {"sha": "d536494a1bd780b41b90f2d2e5b109144c96b1a0", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -1490,6 +1490,105 @@ complex_operations_pattern::build (vec_info * /* vinfo */)\n   gcc_unreachable ();\n }\n \n+\n+/* The addsub_pattern.  */\n+\n+class addsub_pattern : public vect_pattern\n+{\n+  public:\n+    addsub_pattern (slp_tree *node)\n+\t: vect_pattern (node, NULL, IFN_VEC_ADDSUB) {};\n+\n+    void build (vec_info *);\n+\n+    static vect_pattern*\n+    recognize (slp_tree_to_load_perm_map_t *, slp_tree *);\n+};\n+\n+vect_pattern *\n+addsub_pattern::recognize (slp_tree_to_load_perm_map_t *, slp_tree *node_)\n+{\n+  slp_tree node = *node_;\n+  if (SLP_TREE_CODE (node) != VEC_PERM_EXPR\n+      || SLP_TREE_CHILDREN (node).length () != 2)\n+    return NULL;\n+\n+  /* Match a blend of a plus and a minus op with the same number of plus and\n+     minus lanes on the same operands.  */\n+  slp_tree sub = SLP_TREE_CHILDREN (node)[0];\n+  slp_tree add = SLP_TREE_CHILDREN (node)[1];\n+  bool swapped_p = false;\n+  if (vect_match_expression_p (sub, PLUS_EXPR))\n+    {\n+      std::swap (add, sub);\n+      swapped_p = true;\n+    }\n+  if (!(vect_match_expression_p (add, PLUS_EXPR)\n+\t&& vect_match_expression_p (sub, MINUS_EXPR)))\n+    return NULL;\n+  if (!((SLP_TREE_CHILDREN (sub)[0] == SLP_TREE_CHILDREN (add)[0]\n+\t && SLP_TREE_CHILDREN (sub)[1] == SLP_TREE_CHILDREN (add)[1])\n+\t|| (SLP_TREE_CHILDREN (sub)[0] == SLP_TREE_CHILDREN (add)[1]\n+\t    && SLP_TREE_CHILDREN (sub)[1] == SLP_TREE_CHILDREN (add)[0])))\n+    return NULL;\n+\n+  for (unsigned i = 0; i < SLP_TREE_LANE_PERMUTATION (node).length (); ++i)\n+    {\n+      std::pair<unsigned, unsigned> perm = SLP_TREE_LANE_PERMUTATION (node)[i];\n+      if (swapped_p)\n+\tperm.first = perm.first == 0 ? 1 : 0;\n+      /* It has to be alternating -, +, -, ...\n+\t While we could permute the .ADDSUB inputs and the .ADDSUB output\n+\t that's only profitable over the add + sub + blend if at least\n+\t one of the permute is optimized which we can't determine here.  */\n+      if (perm.first != (i & 1)\n+\t  || perm.second != i)\n+\treturn NULL;\n+    }\n+\n+  if (!vect_pattern_validate_optab (IFN_VEC_ADDSUB, node))\n+    return NULL;\n+\n+  return new addsub_pattern (node_);\n+}\n+\n+void\n+addsub_pattern::build (vec_info *vinfo)\n+{\n+  slp_tree node = *m_node;\n+\n+  slp_tree sub = SLP_TREE_CHILDREN (node)[0];\n+  slp_tree add = SLP_TREE_CHILDREN (node)[1];\n+  if (vect_match_expression_p (sub, PLUS_EXPR))\n+    std::swap (add, sub);\n+\n+  /* Modify the blend node in-place.  */\n+  SLP_TREE_CHILDREN (node)[0] = SLP_TREE_CHILDREN (sub)[0];\n+  SLP_TREE_CHILDREN (node)[1] = SLP_TREE_CHILDREN (sub)[1];\n+  SLP_TREE_REF_COUNT (SLP_TREE_CHILDREN (node)[0])++;\n+  SLP_TREE_REF_COUNT (SLP_TREE_CHILDREN (node)[1])++;\n+\n+  /* Build IFN_VEC_ADDSUB from the sub representative operands.  */\n+  stmt_vec_info rep = SLP_TREE_REPRESENTATIVE (sub);\n+  gcall *call = gimple_build_call_internal (IFN_VEC_ADDSUB, 2,\n+\t\t\t\t\t    gimple_assign_rhs1 (rep->stmt),\n+\t\t\t\t\t    gimple_assign_rhs2 (rep->stmt));\n+  gimple_call_set_lhs (call, make_ssa_name\n+\t\t\t       (TREE_TYPE (gimple_assign_lhs (rep->stmt))));\n+  gimple_call_set_nothrow (call, true);\n+  gimple_set_bb (call, gimple_bb (rep->stmt));\n+  SLP_TREE_REPRESENTATIVE (node) = vinfo->add_pattern_stmt (call, rep);\n+  STMT_VINFO_RELEVANT (SLP_TREE_REPRESENTATIVE (node)) = vect_used_in_scope;\n+  STMT_SLP_TYPE (SLP_TREE_REPRESENTATIVE (node)) = pure_slp;\n+  STMT_VINFO_VECTYPE (SLP_TREE_REPRESENTATIVE (node)) = SLP_TREE_VECTYPE (node);\n+  STMT_VINFO_SLP_VECT_ONLY_PATTERN (SLP_TREE_REPRESENTATIVE (node)) = true;\n+  SLP_TREE_CODE (node) = ERROR_MARK;\n+  SLP_TREE_LANE_PERMUTATION (node).release ();\n+\n+  vect_free_slp_tree (sub);\n+  vect_free_slp_tree (add);\n+}\n+\n /*******************************************************************************\n  * Pattern matching definitions\n  ******************************************************************************/\n@@ -1502,6 +1601,7 @@ vect_pattern_decl_t slp_patterns[]\n      overlap in what they can detect.  */\n \n   SLP_PATTERN (complex_operations_pattern),\n+  SLP_PATTERN (addsub_pattern)\n };\n #undef SLP_PATTERN\n "}, {"sha": "227d6aa3ee870d8da8859a2a7a5d2b7a506d6b24", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -3705,6 +3705,7 @@ vect_optimize_slp (vec_info *vinfo)\n \t      case CFN_COMPLEX_ADD_ROT270:\n \t      case CFN_COMPLEX_MUL:\n \t      case CFN_COMPLEX_MUL_CONJ:\n+\t      case CFN_VEC_ADDSUB:\n \t\tcontinue;\n \t      default:;\n \t      }"}, {"sha": "fa28336d42950051b5e51d4fc1beebbc04297ff2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6c31f0f84a7295433ebac09b94fae2d5cc2892/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=7a6c31f0f84a7295433ebac09b94fae2d5cc2892", "patch": "@@ -2100,7 +2100,8 @@ class vect_pattern\n       this->m_ifn = ifn;\n       this->m_node = node;\n       this->m_ops.create (0);\n-      this->m_ops.safe_splice (*m_ops);\n+      if (m_ops)\n+\tthis->m_ops.safe_splice (*m_ops);\n     }\n \n   public:"}]}