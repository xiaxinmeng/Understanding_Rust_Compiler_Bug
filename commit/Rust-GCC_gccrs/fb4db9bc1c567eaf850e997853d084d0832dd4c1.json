{"sha": "fb4db9bc1c567eaf850e997853d084d0832dd4c1", "node_id": "C_kwDOANBUbNoAKGZiNGRiOWJjMWM1NjdlYWY4NTBlOTk3ODUzZDA4NGQwODMyZGQ0YzE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-19T19:43:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-19T19:43:13Z"}, "message": "libstdc++: Implement remaining P2474R2 changes to views::take/drop\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (views::__detail::__is_repeat_view): Define\n\tand later define a partial specialization.\n\t(views::__detail::__take_of_repeat_view): Declare and later define.\n\t(views::__detail::__drop_of_repeat_view): Likewise.\n\t(views::_Take::operator()): Return a repeat_view if the argument\n\tis a repeat_view as per P2474R2.\n\t(views::_Drop::operator()): Likewise.\n\t(repeat_view): Befriend __take/drop_of_repeat_view.\n\t* testsuite/std/ranges/repeat/1.cc (test04): New test.", "tree": {"sha": "11ca7676c367103a5027b81cc1fa8693164c02b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ca7676c367103a5027b81cc1fa8693164c02b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb4db9bc1c567eaf850e997853d084d0832dd4c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4db9bc1c567eaf850e997853d084d0832dd4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4db9bc1c567eaf850e997853d084d0832dd4c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4db9bc1c567eaf850e997853d084d0832dd4c1/comments", "author": null, "committer": null, "parents": [{"sha": "b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "a55e9e7f760fc8f7ddb0b1eedf6a3aada8be4c81", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4db9bc1c567eaf850e997853d084d0832dd4c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4db9bc1c567eaf850e997853d084d0832dd4c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=fb4db9bc1c567eaf850e997853d084d0832dd4c1", "patch": "@@ -2257,6 +2257,13 @@ namespace views::__adaptor\n       template<typename _Winc, typename _Bound>\n \tinline constexpr bool __is_iota_view<iota_view<_Winc, _Bound>> = true;\n \n+      template<typename _Range>\n+\tinline constexpr bool __is_repeat_view = false;\n+\n+      template<typename _Range>\n+\tconstexpr auto\n+\t__take_of_repeat_view(_Range&&, range_difference_t<_Range>); // defined later\n+\n       template<typename _Range, typename _Dp>\n \tconcept __can_take_view\n \t  = requires { take_view(std::declval<_Range>(), std::declval<_Dp>()); };\n@@ -2291,6 +2298,8 @@ namespace views::__adaptor\n \t      else\n \t\treturn iota_view(*__begin, *__end);\n \t    }\n+\t  else if constexpr (__detail::__is_repeat_view<_Tp>)\n+\t    return __detail::__take_of_repeat_view(std::forward<_Range>(__r), __n);\n \t  else\n \t    return take_view(std::forward<_Range>(__r), __n);\n \t}\n@@ -2527,6 +2536,10 @@ namespace views::__adaptor\n   {\n     namespace __detail\n     {\n+      template<typename _Range>\n+\tconstexpr auto\n+\t__drop_of_repeat_view(_Range&&, range_difference_t<_Range>); // defined later\n+\n       template<typename _Range, typename _Dp>\n \tconcept __can_drop_view\n \t  = requires { drop_view(std::declval<_Range>(), std::declval<_Dp>()); };\n@@ -2568,6 +2581,8 @@ namespace views::__adaptor\n \t      else\n \t\treturn _Tp(__begin, __end);\n \t    }\n+\t  else if constexpr (__detail::__is_repeat_view<_Tp>)\n+\t    return __detail::__drop_of_repeat_view(std::forward<_Range>(__r), __n);\n \t  else\n \t    return drop_view(std::forward<_Range>(__r), __n);\n \t}\n@@ -7367,6 +7382,14 @@ namespace views::__adaptor\n \n     struct _Iterator;\n \n+    template<typename _Range>\n+    friend constexpr auto\n+    views::__detail::__take_of_repeat_view(_Range&&, range_difference_t<_Range>);\n+\n+    template<typename _Range>\n+    friend constexpr auto\n+    views::__detail::__drop_of_repeat_view(_Range&&, range_difference_t<_Range>);\n+\n   public:\n     repeat_view() requires default_initializable<_Tp> = default;\n \n@@ -7540,6 +7563,9 @@ namespace views::__adaptor\n   {\n     namespace __detail\n     {\n+      template<typename _Tp, typename _Bound>\n+\tinline constexpr bool __is_repeat_view<repeat_view<_Tp, _Bound>> = true;\n+\n       template<typename _Tp>\n \tconcept __can_repeat_view\n \t  = requires { repeat_view(std::declval<_Tp>()); };\n@@ -7565,6 +7591,36 @@ namespace views::__adaptor\n     };\n \n     inline constexpr _Repeat repeat;\n+\n+    namespace __detail\n+    {\n+      template<typename _Range>\n+\tconstexpr auto\n+\t__take_of_repeat_view(_Range&& __r, range_difference_t<_Range> __n)\n+\t{\n+\t  using _Tp = remove_cvref_t<_Range>;\n+\t  static_assert(__is_repeat_view<_Tp>);\n+\t  if constexpr (sized_range<_Tp>)\n+\t    return views::repeat(*__r._M_value, std::min(ranges::distance(__r), __n));\n+\t  else\n+\t    return views::repeat(*__r._M_value, __n);\n+\t}\n+\n+      template<typename _Range>\n+\tconstexpr auto\n+\t__drop_of_repeat_view(_Range&& __r, range_difference_t<_Range> __n)\n+\t{\n+\t  using _Tp = remove_cvref_t<_Range>;\n+\t  static_assert(__is_repeat_view<_Tp>);\n+\t  if constexpr (sized_range<_Tp>)\n+\t    {\n+\t      auto __sz = ranges::distance(__r);\n+\t      return views::repeat(*__r._M_value, __sz - std::min(__sz, __n));\n+\t    }\n+\t  else\n+\t    return __r;\n+\t}\n+    }\n   }\n \n   template<input_range _Vp>"}, {"sha": "f9817c99600aadc7d68f62a1be55771aacde1647", "filename": "libstdc++-v3/testsuite/std/ranges/repeat/1.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4db9bc1c567eaf850e997853d084d0832dd4c1/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4db9bc1c567eaf850e997853d084d0832dd4c1/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc?ref=fb4db9bc1c567eaf850e997853d084d0832dd4c1", "patch": "@@ -84,10 +84,43 @@ test03()\n   return true;\n }\n \n+constexpr bool\n+test04()\n+{\n+  // Verify P2474R2 changes to views::take/drop.\n+  auto r = views::repeat(42);\n+\n+  auto rt = r | views::take(10);\n+  static_assert(views::__detail::__is_repeat_view<decltype(rt)>);\n+  VERIFY( ranges::equal(rt, views::repeat(42, 10)) );\n+\n+  auto rd = r | views::drop(10);\n+  static_assert(std::same_as<decltype(rd), decltype(r)>);\n+\n+  auto br = views::repeat(42, 37);\n+\n+  auto brt = br | views::take(10);\n+  static_assert(std::same_as<decltype(brt), decltype(br)>);\n+  VERIFY( ranges::equal(brt, views::repeat(42, 10)) );\n+\n+  auto brt100 = br | views::take(100);\n+  VERIFY( ranges::equal(brt100, br) );\n+\n+  auto brd = br | views::drop(10);\n+  static_assert(std::same_as<decltype(brd), decltype(br)>);\n+  VERIFY( ranges::equal(brd, views::repeat(42, 27)) );\n+\n+  auto brd100 = br | views::drop(100);\n+  VERIFY( ranges::empty(brd100) );\n+\n+  return true;\n+}\n+\n int\n main()\n {\n   static_assert(test01());\n   static_assert(test02());\n   static_assert(test03());\n+  static_assert(test04());\n }"}]}