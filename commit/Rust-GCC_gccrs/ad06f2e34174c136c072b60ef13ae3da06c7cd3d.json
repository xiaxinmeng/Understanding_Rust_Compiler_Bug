{"sha": "ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwNmYyZTM0MTc0YzEzNmMwNzJiNjBlZjEzYWUzZGEwNmM3Y2QzZA==", "commit": {"author": {"name": "James E. Wilson", "email": "wilson@cygnus.com", "date": "2000-06-29T18:42:35Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-06-29T18:42:35Z"}, "message": "Fix java build failure.\n\n\t* config/ia64/ia64.h (MODES_TIEABLE_P): Only tie if mode class is the\n\tsame.  Only tie XFmode with XFmode.\n\nFrom-SVN: r34787", "tree": {"sha": "7dba8f518c0e4cc0ea403b826c1a16792730a791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dba8f518c0e4cc0ea403b826c1a16792730a791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad06f2e34174c136c072b60ef13ae3da06c7cd3d/comments", "author": null, "committer": null, "parents": [{"sha": "ab30ba5c2396eb7cc4857e40eb10a72c2f9e2e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab30ba5c2396eb7cc4857e40eb10a72c2f9e2e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab30ba5c2396eb7cc4857e40eb10a72c2f9e2e42"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "540f4747ed4de8ddfbcfa3aef8d329366550e40b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad06f2e34174c136c072b60ef13ae3da06c7cd3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad06f2e34174c136c072b60ef13ae3da06c7cd3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "patch": "@@ -1,3 +1,8 @@\n+2000-06-29  James E. Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64.h (MODES_TIEABLE_P): Only tie if mode class is the\n+\tsame.  Only tie XFmode with XFmode.\n+\n 2000-06-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* c-decl.c, timevar.c, tlink.c: Include intl.h."}, {"sha": "88257b72cf0b299ed198f2212f2f075d37e29fc1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad06f2e34174c136c072b60ef13ae3da06c7cd3d/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad06f2e34174c136c072b60ef13ae3da06c7cd3d/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ad06f2e34174c136c072b60ef13ae3da06c7cd3d", "patch": "@@ -810,7 +810,7 @@ while (0)\n /* A C expression that is nonzero if it is permissible to store a value of mode\n    MODE in hard register number REGNO (or in several registers starting with\n    that one).  */\n-\n+/* ??? movxf_internal does not support XFmode values in integer registers.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n   (PR_REGNO_P (REGNO) ? (MODE) == CCmode : 1)\n \n@@ -824,7 +824,12 @@ while (0)\n /* ??? If the comments are true, then this must be zero if one mode is CCmode,\n    INTEGRAL_MODE_P or FLOAT_MODE_P and the other is not.  Otherwise, it is\n    true.  */\n-#define MODES_TIEABLE_P(MODE1, MODE2) 1\n+/* Don't tie integer and FP modes, as that causes us to get integer registers\n+   allocated for FP instructions.  XFmode only supported in FP registers at\n+   the moment, so we can't tie it with any other modes.  */\n+#define MODES_TIEABLE_P(MODE1, MODE2) \\\n+  ((GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2)) \\\n+   && (((MODE1) == XFmode) == ((MODE2) == XFmode)))\n \n /* Define this macro if the compiler should avoid copies to/from CCmode\n    registers.  You should only define this macro if support fo copying to/from"}]}