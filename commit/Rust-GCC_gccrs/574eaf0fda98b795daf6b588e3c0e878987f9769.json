{"sha": "574eaf0fda98b795daf6b588e3c0e878987f9769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0ZWFmMGZkYTk4Yjc5NWRhZjZiNTg4ZTNjMGU4Nzg5ODdmOTc2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-02T08:06:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-02T08:06:57Z"}, "message": "re PR c++/71446 (Incorrect overload resolution when using designated initializers)\n\n\tPR c++/71446\n\t* cp-tree.h (CONSTRUCTOR_IS_DESIGNATED_INIT): Define.\n\t* parser.c (cp_parser_braced_list): Adjust cp_parser_initializer_list\n\tcaller, set CONSTRUCTOR_IS_DESIGNATED_INIT.\n\t(cp_parser_initializer_list): Add designated parameter, set *designated\n\tto a bool whether any designators were parsed.\n\t* decl.c (reshape_init): Copy over CONSTRUCTOR_IS_DESIGNATED_INIT if\n\tneeded.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* call.c (implicit_conversion): If CONSTRUCTOR_IS_DESIGNATED_INIT,\n\tdon't call build_list_conv, nor build_complex_conv, nor attempt to\n\tconvert a single element initializer to scalar.\n\n\t* g++.dg/cpp2a/desig10.C: New test.\n\t* g++.dg/cpp2a/desig11.C: New test.\n\t* g++.dg/ext/desig4.C: Expect 4 new errors.\n\nFrom-SVN: r269340", "tree": {"sha": "999a0ff1961dfb213965506f95467552114d19cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/999a0ff1961dfb213965506f95467552114d19cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574eaf0fda98b795daf6b588e3c0e878987f9769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574eaf0fda98b795daf6b588e3c0e878987f9769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574eaf0fda98b795daf6b588e3c0e878987f9769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574eaf0fda98b795daf6b588e3c0e878987f9769/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73ba6c712005892fbddb3e4dd7160d218e1b8c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ba6c712005892fbddb3e4dd7160d218e1b8c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ba6c712005892fbddb3e4dd7160d218e1b8c50"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "e17537a52f0ad00c8c4f5304c56c7e50434750ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -1,3 +1,18 @@\n+2019-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71446\n+\t* cp-tree.h (CONSTRUCTOR_IS_DESIGNATED_INIT): Define.\n+\t* parser.c (cp_parser_braced_list): Adjust cp_parser_initializer_list\n+\tcaller, set CONSTRUCTOR_IS_DESIGNATED_INIT.\n+\t(cp_parser_initializer_list): Add designated parameter, set *designated\n+\tto a bool whether any designators were parsed.\n+\t* decl.c (reshape_init): Copy over CONSTRUCTOR_IS_DESIGNATED_INIT if\n+\tneeded.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* call.c (implicit_conversion): If CONSTRUCTOR_IS_DESIGNATED_INIT,\n+\tdon't call build_list_conv, nor build_complex_conv, nor attempt to\n+\tconvert a single element initializer to scalar.\n+\n 2019-03-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89537 - missing location for error with non-static member fn."}, {"sha": "1a9cf7e9abe4ef8d48cdd9349701add82d0ae2b8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -1876,11 +1876,12 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \n   if (expr && BRACE_ENCLOSED_INITIALIZER_P (expr))\n     {\n-      if (is_std_init_list (to))\n+      if (is_std_init_list (to) && !CONSTRUCTOR_IS_DESIGNATED_INIT (expr))\n \treturn build_list_conv (to, expr, flags, complain);\n \n       /* As an extension, allow list-initialization of _Complex.  */\n-      if (TREE_CODE (to) == COMPLEX_TYPE)\n+      if (TREE_CODE (to) == COMPLEX_TYPE\n+\t  && !CONSTRUCTOR_IS_DESIGNATED_INIT (expr))\n \t{\n \t  conv = build_complex_conv (to, expr, flags, complain);\n \t  if (conv)\n@@ -1896,7 +1897,7 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \n \t  if (nelts == 0)\n \t    elt = build_value_init (to, tf_none);\n-\t  else if (nelts == 1)\n+\t  else if (nelts == 1 && !CONSTRUCTOR_IS_DESIGNATED_INIT (expr))\n \t    elt = CONSTRUCTOR_ELT (expr, 0)->value;\n \t  else\n \t    elt = error_mark_node;"}, {"sha": "663a23b4043a783f94b19dbd31fa6aba349b10eb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -471,6 +471,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       TYPE_MARKED_P (in _TYPE)\n       RANGE_FOR_IVDEP (in RANGE_FOR_STMT)\n       CALL_EXPR_OPERATOR_SYNTAX (in CALL_EXPR, AGGR_INIT_EXPR)\n+      CONSTRUCTOR_IS_DESIGNATED_INIT (in CONSTRUCTOR)\n \n    Usage of TYPE_LANG_FLAG_?:\n    0: TYPE_DEPENDENT_P\n@@ -4235,6 +4236,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DIRECT_LIST_INIT_P(NODE) \\\n    (BRACE_ENCLOSED_INITIALIZER_P (NODE) && CONSTRUCTOR_IS_DIRECT_INIT (NODE))\n \n+/* True if this is a designated initializer (when we allow initializer-clauses\n+   mixed with designated-initializer-clauses set whenever there is at least\n+   one designated-initializer-clause), or a C99 designator.  */\n+#define CONSTRUCTOR_IS_DESIGNATED_INIT(NODE) \\\n+  (TREE_LANG_FLAG_6 (CONSTRUCTOR_CHECK (NODE)))\n+\n /* True if NODE represents a conversion for direct-initialization in a\n    template.  Set by perform_implicit_conversion_flags.  */\n #define IMPLICIT_CONV_EXPR_DIRECT_INIT(NODE) \\"}, {"sha": "173758feddf1a6275303162c458558d305b96afe", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -6278,6 +6278,9 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n   if (CONSTRUCTOR_IS_DIRECT_INIT (init)\n       && BRACE_ENCLOSED_INITIALIZER_P (new_init))\n     CONSTRUCTOR_IS_DIRECT_INIT (new_init) = true;\n+  if (CONSTRUCTOR_IS_DESIGNATED_INIT (init)\n+      && BRACE_ENCLOSED_INITIALIZER_P (new_init))\n+    CONSTRUCTOR_IS_DESIGNATED_INIT (new_init) = true;\n \n   return new_init;\n }"}, {"sha": "580426780ea67bada91e9fbb6c464151266e79a8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -2251,7 +2251,7 @@ static cp_expr cp_parser_initializer_clause\n static cp_expr cp_parser_braced_list\n   (cp_parser*, bool*);\n static vec<constructor_elt, va_gc> *cp_parser_initializer_list\n-  (cp_parser *, bool *);\n+  (cp_parser *, bool *, bool *);\n \n static void cp_parser_ctor_initializer_opt_and_function_body\n   (cp_parser *, bool);\n@@ -22768,9 +22768,11 @@ cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)\n   /* If it's not a `}', then there is a non-trivial initializer.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE))\n     {\n+      bool designated;\n       /* Parse the initializer list.  */\n       CONSTRUCTOR_ELTS (initializer)\n-\t= cp_parser_initializer_list (parser, non_constant_p);\n+\t= cp_parser_initializer_list (parser, non_constant_p, &designated);\n+      CONSTRUCTOR_IS_DESIGNATED_INIT (initializer) = designated;\n       /* A trailing `,' token is allowed.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n \tcp_lexer_consume_token (parser->lexer);\n@@ -22890,10 +22892,12 @@ cp_parser_array_designator_p (cp_parser *parser)\n    Returns a vec of constructor_elt.  The VALUE of each elt is an expression\n    for the initializer.  If the INDEX of the elt is non-NULL, it is the\n    IDENTIFIER_NODE naming the field to initialize.  NON_CONSTANT_P is\n-   as for cp_parser_initializer.  */\n+   as for cp_parser_initializer.  Set *DESIGNATED to a boolean whether there\n+   are any designators.  */\n \n static vec<constructor_elt, va_gc> *\n-cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n+cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n+\t\t\t    bool *designated)\n {\n   vec<constructor_elt, va_gc> *v = NULL;\n   bool first_p = true;\n@@ -23070,6 +23074,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \t  IDENTIFIER_MARKED (designator) = 0;\n     }\n \n+  *designated = first_designator != NULL_TREE;\n   return v;\n }\n "}, {"sha": "8a5a0b38b2d1a24bce28c44e2df1bd827a64f647", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -19359,6 +19359,8 @@ tsubst_copy_and_build (tree t,\n \n \tr = build_constructor (init_list_type_node, n);\n \tCONSTRUCTOR_IS_DIRECT_INIT (r) = CONSTRUCTOR_IS_DIRECT_INIT (t);\n+\tCONSTRUCTOR_IS_DESIGNATED_INIT (r)\n+\t  = CONSTRUCTOR_IS_DESIGNATED_INIT (t);\n \n \tif (TREE_HAS_CONSTRUCTOR (t))\n \t  {"}, {"sha": "e6a83b083c841a2269ba5a6bc23ac88e8806b41c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -1,5 +1,10 @@\n 2019-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/71446\n+\t* g++.dg/cpp2a/desig10.C: New test.\n+\t* g++.dg/cpp2a/desig11.C: New test.\n+\t* g++.dg/ext/desig4.C: Expect 4 new errors.\n+\n \tPR target/89506\n \t* gcc.dg/pr89506.c: New test.\n "}, {"sha": "7fb68683853a3030b3b8e126fdd92e9eea1378cd", "filename": "gcc/testsuite/g++.dg/cpp2a/desig10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig10.C?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/71446\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+#include <initializer_list>\n+\n+struct S { int value; };\n+\n+int foo (S);\n+char *foo (std::initializer_list<int>);\n+\n+int x = foo ({.value = 0});"}, {"sha": "d6895a7be56ec866ad2a2d6fd007d40caf34786d", "filename": "gcc/testsuite/g++.dg/cpp2a/desig11.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/71446\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+#include <initializer_list>\n+\n+int foo (int);\t\t\t\t// { dg-message \"initializing argument 1 of\" }\n+int x = foo ({.foo = 0});\t\t// { dg-error \"cannot convert\" }\n+\n+int bar (_Complex int);\t\t\t// { dg-message \"initializing argument 1 of\" }\n+int y = bar ({.real = 0, .imag = 1});\t// { dg-error \"cannot convert\" }\n+\n+int baz (std::initializer_list<int>);\n+int z = baz ({.one = 1, .two = 2, .three = 3});\t// { dg-error \"could not convert\" }"}, {"sha": "62c3c581b59b06d7a7bd8635232fc60704d0e4fb", "filename": "gcc/testsuite/g++.dg/ext/desig4.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574eaf0fda98b795daf6b588e3c0e878987f9769/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C?ref=574eaf0fda98b795daf6b588e3c0e878987f9769", "patch": "@@ -6,9 +6,13 @@ int a = { .foo = 6 };\t\t     // { dg-error \"designator\" }\n int b = { [0] = 1 };\t\t     // { dg-error \"designator\" }\n _Complex float c = { .foo = 0,  1 }; // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n+\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float d = { [0] = 0,  1 };  // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n+\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float e = { 0, .foo = 1 };  // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n+\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float f = { 0, [0] = 1 };   // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n+\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }"}]}