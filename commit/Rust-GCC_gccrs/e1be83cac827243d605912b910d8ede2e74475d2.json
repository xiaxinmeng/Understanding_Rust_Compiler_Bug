{"sha": "e1be83cac827243d605912b910d8ede2e74475d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiZTgzY2FjODI3MjQzZDYwNTkxMmI5MTBkOGVkZTJlNzQ0NzVkMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-03-16T03:29:36Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-03-16T03:29:36Z"}, "message": "re PR regression/63150 (FAIL: gcc.target/powerpc/pr53199.c scan-assembler-times *)\n\n\tPR target/63150\ngcc/\n\t* config/rs6000/rs6000.md (bswapdi2): Remove one scratch reg.\n\tModify Z->r bswapdi splitter to use dest in place of scratch.\n\tIn r->Z and Z->r bswapdi splitter rename word_high, word_low\n\tto word1, word2 and rearrange logic to suit.\n\t(bswapdi2_64bit): Remove early clobber on Z->r alternative.\n\t(bswapdi2_ldbrx): Likewise.  Remove '??' on r->r.\n\t(bswapdi2_32bit): Remove early clobber on Z->r alternative.\n\tAdd one '?' on r->r.  Modify Z->r splitter to avoid need for\n\tearly clobber.\ngcc/testsuite/\n\t* gcc.target/powerpc/pr53199.c: Add extra functions.  Revert\n\t2014-12-05 change.\n\nFrom-SVN: r221445", "tree": {"sha": "01c9d25d874f258a1487f3d6c63408347d9989cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01c9d25d874f258a1487f3d6c63408347d9989cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1be83cac827243d605912b910d8ede2e74475d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1be83cac827243d605912b910d8ede2e74475d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1be83cac827243d605912b910d8ede2e74475d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1be83cac827243d605912b910d8ede2e74475d2/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b96a30bba88bf6e5b1fb7ff4dcbf1c2e5f137bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b96a30bba88bf6e5b1fb7ff4dcbf1c2e5f137bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b96a30bba88bf6e5b1fb7ff4dcbf1c2e5f137bc"}], "stats": {"total": 124, "additions": 83, "deletions": 41}, "files": [{"sha": "7f7297fe7694e346730e797ac0c858ab009923ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1be83cac827243d605912b910d8ede2e74475d2", "patch": "@@ -1,3 +1,16 @@\n+2015-03-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/63150\n+\t* config/rs6000/rs6000.md (bswapdi2): Remove one scratch reg.\n+\tModify Z->r bswapdi splitter to use dest in place of scratch.\n+\tIn r->Z and Z->r bswapdi splitter rename word_high, word_low\n+\tto word1, word2 and rearrange logic to suit.\n+\t(bswapdi2_64bit): Remove early clobber on Z->r alternative.\n+\t(bswapdi2_ldbrx): Likewise.  Remove '??' on r->r.\n+\t(bswapdi2_32bit): Remove early clobber on Z->r alternative.\n+\tAdd one '?' on r->r.  Modify Z->r splitter to avoid need for\n+\tearly clobber.\n+\n 2015-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65369"}, {"sha": "001884cbe58e226d6bab5dfdd27fa91ab15fcc3b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e1be83cac827243d605912b910d8ede2e74475d2", "patch": "@@ -2264,8 +2264,7 @@\n \t\t   (bswap:DI\n \t\t    (match_operand:DI 1 \"reg_or_mem_operand\" \"\")))\n \t      (clobber (match_scratch:DI 2 \"\"))\n-\t      (clobber (match_scratch:DI 3 \"\"))\n-\t      (clobber (match_scratch:DI 4 \"\"))])]\n+\t      (clobber (match_scratch:DI 3 \"\"))])]\n   \"\"\n {\n   if (!REG_P (operands[0]) && !REG_P (operands[1]))\n@@ -2283,11 +2282,10 @@\n \n ;; Power7/cell has ldbrx/stdbrx, so use it directly\n (define_insn \"*bswapdi2_ldbrx\"\n-  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=&r,Z,??&r\")\n+  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=r,Z,&r\")\n \t(bswap:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"Z,r,r\")))\n    (clobber (match_scratch:DI 2 \"=X,X,&r\"))\n-   (clobber (match_scratch:DI 3 \"=X,X,&r\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,&r\"))]\n+   (clobber (match_scratch:DI 3 \"=X,X,&r\"))]\n   \"TARGET_POWERPC64 && TARGET_LDBRX\n    && (REG_P (operands[0]) || REG_P (operands[1]))\"\n   \"@\n@@ -2299,11 +2297,10 @@\n \n ;; Non-power7/cell, fall back to use lwbrx/stwbrx\n (define_insn \"*bswapdi2_64bit\"\n-  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=&r,Z,&r\")\n+  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=r,Z,&r\")\n \t(bswap:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"Z,r,r\")))\n    (clobber (match_scratch:DI 2 \"=&b,&b,&r\"))\n-   (clobber (match_scratch:DI 3 \"=&r,&r,&r\"))\n-   (clobber (match_scratch:DI 4 \"=&r,X,&r\"))]\n+   (clobber (match_scratch:DI 3 \"=&r,&r,&r\"))]\n   \"TARGET_POWERPC64 && !TARGET_LDBRX\n    && (REG_P (operands[0]) || REG_P (operands[1]))\n    && !(MEM_P (operands[0]) && MEM_VOLATILE_P (operands[0]))\n@@ -2315,8 +2312,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"\"))]\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n   \"TARGET_POWERPC64 && !TARGET_LDBRX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -2325,15 +2321,14 @@\n   rtx src    = operands[1];\n   rtx op2    = operands[2];\n   rtx op3    = operands[3];\n-  rtx op4    = operands[4];\n   rtx op3_32 = simplify_gen_subreg (SImode, op3, DImode,\n \t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n-  rtx op4_32 = simplify_gen_subreg (SImode, op4, DImode,\n-\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n+  rtx dest_32 = simplify_gen_subreg (SImode, dest, DImode,\n+\t\t\t\t     BYTES_BIG_ENDIAN ? 4 : 0);\n   rtx addr1;\n   rtx addr2;\n-  rtx word_high;\n-  rtx word_low;\n+  rtx word1;\n+  rtx word2;\n \n   addr1 = XEXP (src, 0);\n   if (GET_CODE (addr1) == PLUS)\n@@ -2358,30 +2353,30 @@\n       addr2 = gen_rtx_PLUS (Pmode, op2, addr1);\n     }\n \n+  word1 = change_address (src, SImode, addr1);\n+  word2 = change_address (src, SImode, addr2);\n+\n   if (BYTES_BIG_ENDIAN)\n     {\n-      word_high = change_address (src, SImode, addr1);\n-      word_low  = change_address (src, SImode, addr2);\n+      emit_insn (gen_bswapsi2 (op3_32, word2));\n+      emit_insn (gen_bswapsi2 (dest_32, word1));\n     }\n   else\n     {\n-      word_high = change_address (src, SImode, addr2);\n-      word_low  = change_address (src, SImode, addr1);\n+      emit_insn (gen_bswapsi2 (op3_32, word1));\n+      emit_insn (gen_bswapsi2 (dest_32, word2));\n     }\n \n-  emit_insn (gen_bswapsi2 (op3_32, word_low));\n-  emit_insn (gen_bswapsi2 (op4_32, word_high));\n-  emit_insn (gen_ashldi3 (dest, op3, GEN_INT (32)));\n-  emit_insn (gen_iordi3 (dest, dest, op4));\n+  emit_insn (gen_ashldi3 (op3, op3, GEN_INT (32)));\n+  emit_insn (gen_iordi3 (dest, dest, op3));\n   DONE;\n }\")\n \n (define_split\n   [(set (match_operand:DI 0 \"indexed_or_indirect_operand\" \"\")\n \t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 4 \"\" \"\"))]\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n   \"TARGET_POWERPC64 && !TARGET_LDBRX && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -2396,8 +2391,8 @@\n \t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n   rtx addr1;\n   rtx addr2;\n-  rtx word_high;\n-  rtx word_low;\n+  rtx word1;\n+  rtx word2;\n \n   addr1 = XEXP (dest, 0);\n   if (GET_CODE (addr1) == PLUS)\n@@ -2422,28 +2417,29 @@\n       addr2 = gen_rtx_PLUS (Pmode, op2, addr1);\n     }\n \n+  word1 = change_address (dest, SImode, addr1);\n+  word2 = change_address (dest, SImode, addr2);\n+\n   emit_insn (gen_lshrdi3 (op3, src, GEN_INT (32)));\n+\n   if (BYTES_BIG_ENDIAN)\n     {\n-      word_high = change_address (dest, SImode, addr1);\n-      word_low  = change_address (dest, SImode, addr2);\n+      emit_insn (gen_bswapsi2 (word1, src_si));\n+      emit_insn (gen_bswapsi2 (word2, op3_si));\n     }\n   else\n     {\n-      word_high = change_address (dest, SImode, addr2);\n-      word_low  = change_address (dest, SImode, addr1);\n+      emit_insn (gen_bswapsi2 (word2, src_si));\n+      emit_insn (gen_bswapsi2 (word1, op3_si));\n     }\n-  emit_insn (gen_bswapsi2 (word_high, src_si));\n-  emit_insn (gen_bswapsi2 (word_low, op3_si));\n   DONE;\n }\")\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 4 \"\" \"\"))]\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -2467,7 +2463,7 @@\n }\")\n \n (define_insn \"bswapdi2_32bit\"\n-  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=&r,Z,&r\")\n+  [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=r,Z,?&r\")\n \t(bswap:DI (match_operand:DI 1 \"reg_or_mem_operand\" \"Z,r,r\")))\n    (clobber (match_scratch:SI 2 \"=&b,&b,X\"))]\n   \"!TARGET_POWERPC64 && (REG_P (operands[0]) || REG_P (operands[1]))\"\n@@ -2496,15 +2492,17 @@\n   if (GET_CODE (addr1) == PLUS)\n     {\n       emit_insn (gen_add3_insn (op2, XEXP (addr1, 0), GEN_INT (4)));\n-      if (TARGET_AVOID_XFORM)\n+      if (TARGET_AVOID_XFORM\n+\t  || REGNO (XEXP (addr1, 1)) == REGNO (dest2))\n \t{\n \t  emit_insn (gen_add3_insn (op2, XEXP (addr1, 1), op2));\n \t  addr2 = op2;\n \t}\n       else\n \taddr2 = gen_rtx_PLUS (SImode, op2, XEXP (addr1, 1));\n     }\n-  else if (TARGET_AVOID_XFORM)\n+  else if (TARGET_AVOID_XFORM\n+\t   || REGNO (addr1) == REGNO (dest2))\n     {\n       emit_insn (gen_add3_insn (op2, addr1, GEN_INT (4)));\n       addr2 = op2;\n@@ -2519,6 +2517,8 @@\n   word2 = change_address (src, SImode, addr2);\n \n   emit_insn (gen_bswapsi2 (dest2, word1));\n+  /* The REGNO (dest2) tests above ensure that addr2 has not been trashed,\n+     thus allowing us to omit an early clobber on the output.  */\n   emit_insn (gen_bswapsi2 (dest1, word2));\n   DONE;\n }\")"}, {"sha": "9c8532aa05a9171616db09bb8ba63cb4740f2dd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1be83cac827243d605912b910d8ede2e74475d2", "patch": "@@ -1,3 +1,8 @@\n+2015-03-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/pr53199.c: Add extra functions.  Revert\n+\t2014-12-05 change.\n+\n 2015-03-15  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/torture/pr65270-1.c: Add -fno-common to dg-options on"}, {"sha": "eede1dcb4f353e63292540ce9afc2026b04d0d07", "filename": "gcc/testsuite/gcc.target/powerpc/pr53199.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1be83cac827243d605912b910d8ede2e74475d2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c?ref=e1be83cac827243d605912b910d8ede2e74475d2", "patch": "@@ -1,8 +1,8 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n /* { dg-options \"-O2 -mcpu=power6 -mavoid-indexed-addresses\" } */\n-/* { dg-final { scan-assembler-times \"lwbrx\" 6 } } */\n+/* { dg-final { scan-assembler-times \"lwbrx\" 12 } } */\n /* { dg-final { scan-assembler-times \"stwbrx\" 6 } } */\n \n /* PR 51399: bswap gets an error if -mavoid-indexed-addresses was used in\n@@ -26,6 +26,24 @@ load64_reverse_3 (long long *p, int i)\n   return __builtin_bswap64 (p[i]);\n }\n \n+long long\n+load64_reverse_4 (long long dummy __attribute__ ((unused)), long long *p)\n+{\n+  return __builtin_bswap64 (*p);\n+}\n+\n+long long\n+load64_reverse_5 (long long dummy __attribute__ ((unused)), long long *p)\n+{\n+  return __builtin_bswap64 (p[1]);\n+}\n+\n+long long\n+load64_reverse_6 (long long dummy __attribute__ ((unused)), long long *p, int i)\n+{\n+  return __builtin_bswap64 (p[i]);\n+}\n+\n void\n store64_reverse_1 (long long *p, long long x)\n {\n@@ -45,7 +63,13 @@ store64_reverse_3 (long long *p, long long x, int i)\n }\n \n long long\n-reg_reverse (long long x)\n+reg_reverse_1 (long long x)\n+{\n+  return __builtin_bswap64 (x);\n+}\n+\n+long long\n+reg_reverse_2 (long long dummy __attribute__ ((unused)), long long x)\n {\n   return __builtin_bswap64 (x);\n }"}]}