{"sha": "21faa10189001f70361ca13133b01a815d2b342c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmYWExMDE4OTAwMWY3MDM2MWNhMTMxMzNiMDFhODE1ZDJiMzQyYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-11-14T16:02:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-11-14T16:02:57Z"}, "message": "Support GTY((cache)) on hash_map.\n\ngcc/\n\t* hash-traits.h (ggc_remove): Add ggc_maybe_mx member function.\n\t(ggc_cache_remove): Override it instead of ggc_mx.\n\t* hash-table.h (gt_ggc_mx): Call it instead of ggc_mx.\n\t(gt_cleare_cache): Call ggc_mx instead of gt_ggc_mx.\n\t* hash-map-traits.h (simple_hashmap_traits): Add maybe_mx member.\n\t(simple_cache_map_traits): Override maybe_mx.\n\t* hash-map.h (hash_entry): Add ggc_maybe_mx and keep_cache_entry.\n\t(hash_map): Friend gt_cleare_cache.\n\t(gt_cleare_cache): New.\n\t* tree.h (tree_cache_traits): New hash_map traits class.\n\t(tree_cache_map): New typedef.\ngcc/cp/\n\t* decl.c (decomp_type_table): Use tree_cache_map.\n\t* init.c (nsdmi_inst): Likewise.\n\t* pt.c (defarg_ints): Likewise.\n\t* cp-objcp-common.c (cp_get_debug_type): Likewise.\n\nFrom-SVN: r254731", "tree": {"sha": "931e4ec35ba245c1ce72ae664a03ce5b25f38cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/931e4ec35ba245c1ce72ae664a03ce5b25f38cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21faa10189001f70361ca13133b01a815d2b342c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21faa10189001f70361ca13133b01a815d2b342c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21faa10189001f70361ca13133b01a815d2b342c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21faa10189001f70361ca13133b01a815d2b342c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55518e0f5df1f1693e060ddd595a86ac816ec291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55518e0f5df1f1693e060ddd595a86ac816ec291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55518e0f5df1f1693e060ddd595a86ac816ec291"}], "stats": {"total": 149, "additions": 96, "deletions": 53}, "files": [{"sha": "199ac5c30cb07aea05666b34108f29e71c4bdb99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -1,3 +1,18 @@\n+2017-11-14  Jason Merrill  <jason@redhat.com>\n+\n+\tSupport GTY((cache)) on hash_map.\n+\t* hash-traits.h (ggc_remove): Add ggc_maybe_mx member function.\n+\t(ggc_cache_remove): Override it instead of ggc_mx.\n+\t* hash-table.h (gt_ggc_mx): Call it instead of ggc_mx.\n+\t(gt_cleare_cache): Call ggc_mx instead of gt_ggc_mx.\n+\t* hash-map-traits.h (simple_hashmap_traits): Add maybe_mx member.\n+\t(simple_cache_map_traits): Override maybe_mx.\n+\t* hash-map.h (hash_entry): Add ggc_maybe_mx and keep_cache_entry.\n+\t(hash_map): Friend gt_cleare_cache.\n+\t(gt_cleare_cache): New.\n+\t* tree.h (tree_cache_traits): New hash_map traits class.\n+\t(tree_cache_map): New typedef.\n+\n 2017-11-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfgcleanup.c (cleanup_control_expr_graph): Remove first_p"}, {"sha": "8ba5b78aac23d62ca8ef97b8083e66387e855374", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -1,3 +1,11 @@\n+2017-11-14  Jason Merrill  <jason@redhat.com>\n+\n+\tUse GTY((cache)) on some hash tables.\n+\t* decl.c (decomp_type_table): Use tree_cache_map.\n+\t* init.c (nsdmi_inst): Likewise.\n+\t* pt.c (defarg_ints): Likewise.\n+\t* cp-objcp-common.c (cp_get_debug_type): Likewise.\n+\n 2017-11-13  Jason Merrill  <jason@redhat.com>\n \n \tCapture adjustments for P0588R1."}, {"sha": "9a398e0218cbab2ea4984aad4e69bbd2305ee45d", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 20, "deletions": 41, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -122,58 +122,37 @@ cxx_types_compatible_p (tree x, tree y)\n   return same_type_ignoring_top_level_qualifiers_p (x, y);\n }\n \n-struct debug_type_hasher : ggc_cache_ptr_hash<tree_map>\n-{\n-  static hashval_t hash (tree_map *m) { return tree_map_hash (m); }\n-  static bool equal (tree_map *a, tree_map *b) { return tree_map_eq (a, b); }\n-\n-  static int\n-  keep_cache_entry (tree_map *&e)\n-  {\n-    return ggc_marked_p (e->base.from);\n-  }\n-};\n-\n-static GTY((cache)) hash_table<debug_type_hasher> *debug_type_hash;\n+static GTY((cache)) tree_cache_map *debug_type_map;\n \n /* Return a type to use in the debug info instead of TYPE, or NULL_TREE to\n    keep TYPE.  */\n \n tree\n cp_get_debug_type (const_tree type)\n {\n+  tree dtype = NULL_TREE;\n+\n   if (TYPE_PTRMEMFUNC_P (type) && !typedef_variant_p (type))\n+    dtype = build_offset_type (TYPE_PTRMEMFUNC_OBJECT_TYPE (type),\n+\t\t\t       TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type)));\n+\n+  /* We cannot simply return the debug type here because the function uses\n+     the type canonicalization hashtable, which is GC-ed, so its behavior\n+     depends on the actual collection points.  Since we are building these\n+     types on the fly for the debug info only, they would not be attached\n+     to any GC root and always be swept, so we would make the contents of\n+     the debug info depend on the collection points.  */\n+  if (dtype)\n     {\n-      if (debug_type_hash == NULL)\n-\tdebug_type_hash = hash_table<debug_type_hasher>::create_ggc (512);\n-\n-      /* We cannot simply use build_offset_type here because the function uses\n-\t the type canonicalization hashtable, which is GC-ed, so its behavior\n-\t depends on the actual collection points.  Since we are building these\n-\t types on the fly for the debug info only, they would not be attached\n-\t to any GC root and always be swept, so we would make the contents of\n-\t the debug info depend on the collection points.  */\n-      struct tree_map in, *h, **slot;\n-\n-      in.base.from = CONST_CAST_TREE (type);\n-      in.hash = htab_hash_pointer (type);\n-      slot = debug_type_hash->find_slot_with_hash (&in, in.hash, INSERT);\n-      if (*slot)\n-\treturn (*slot)->to;\n-\n-      tree t = build_offset_type (TYPE_PTRMEMFUNC_OBJECT_TYPE (type),\n-\t\t\t\t  TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type)));\n-\n-      h = ggc_alloc<tree_map> ();\n-      h->base.from = CONST_CAST_TREE (type);\n-      h->hash = htab_hash_pointer (type);\n-      h->to = t;\n-      *slot = h;\n-\n-      return t;\n+      tree ktype = CONST_CAST_TREE (type);\n+      if (debug_type_map == NULL)\n+\tdebug_type_map = tree_cache_map::create_ggc (512);\n+      else if (tree *slot = debug_type_map->get (ktype))\n+\treturn *slot;\n+      debug_type_map->put (ktype, dtype);\n     }\n \n-  return NULL_TREE;\n+  return dtype;\n }\n \n /* Return -1 if dwarf ATTR shouldn't be added for DECL, or the attribute"}, {"sha": "6051348048f410f5c1e61d50dd723da33ee03111", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -5124,7 +5124,6 @@ extern GTY(()) vec<tree, va_gc> *static_decls;\n /* An array of vtable-needing types that have no key function, or have\n    an emitted key function.  */\n extern GTY(()) vec<tree, va_gc> *keyed_classes;\n-\n \f\n /* Here's where we control how name mangling takes place.  */\n "}, {"sha": "c4eb28d14e2a9a9d51e2d05a8bc1ae49b9feb8ee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -7283,12 +7283,13 @@ get_tuple_decomp_init (tree decl, unsigned i)\n \n /* It's impossible to recover the decltype of a tuple decomposition variable\n    based on the actual type of the variable, so store it in a hash table.  */\n-static GTY(()) hash_map<tree,tree> *decomp_type_table;\n+\n+static GTY((cache)) tree_cache_map *decomp_type_table;\n static void\n store_decomp_type (tree v, tree t)\n {\n   if (!decomp_type_table)\n-    decomp_type_table = hash_map<tree,tree>::create_ggc (13);\n+    decomp_type_table = tree_cache_map::create_ggc (13);\n   decomp_type_table->put (v, t);\n }\n "}, {"sha": "c76460d6ee6b6ffeca086cca207a7051cb7408cb", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -535,7 +535,7 @@ perform_target_ctor (tree init)\n \n /* Return the non-static data initializer for FIELD_DECL MEMBER.  */\n \n-static GTY(()) hash_map<tree, tree> *nsdmi_inst;\n+static GTY((cache)) tree_cache_map *nsdmi_inst;\n \n tree\n get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n@@ -590,7 +590,7 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t  if (init != error_mark_node)\n \t    {\n \t      if (!nsdmi_inst)\n-\t\tnsdmi_inst = hash_map<tree,tree>::create_ggc (37);\n+\t\tnsdmi_inst = tree_cache_map::create_ggc (37);\n \t      nsdmi_inst->put (member, init);\n \t    }\n "}, {"sha": "562b9272596195d35376d9f8475e6f75f57bea7c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -12014,7 +12014,7 @@ tsubst_aggr_type (tree t,\n     }\n }\n \n-static GTY(()) hash_map<tree, tree> *defarg_inst;\n+static GTY((cache)) tree_cache_map *defarg_inst;\n \n /* Substitute into the default argument ARG (a default argument for\n    FN), which has the indicated TYPE.  */\n@@ -12101,7 +12101,7 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n   if (arg != error_mark_node && !cp_unevaluated_operand)\n     {\n       if (!defarg_inst)\n-\tdefarg_inst = hash_map<tree,tree>::create_ggc (37);\n+\tdefarg_inst = tree_cache_map::create_ggc (37);\n       defarg_inst->put (parm, arg);\n     }\n "}, {"sha": "a92f0cb00f491eaf20174016ee6ed752b1cdab91", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -32,6 +32,7 @@ template <typename H, typename Value>\n struct simple_hashmap_traits\n {\n   typedef typename H::value_type key_type;\n+  static const bool maybe_mx = true;\n   static inline hashval_t hash (const key_type &);\n   static inline bool equal_keys (const key_type &, const key_type &);\n   template <typename T> static inline void remove (T &);\n@@ -97,6 +98,12 @@ simple_hashmap_traits <H, Value>::mark_deleted (T &entry)\n   H::mark_deleted (entry.m_key);\n }\n \n+template <typename H, typename Value>\n+struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>\n+{\n+  static const bool maybe_mx = false;\n+};\n+\n /* Implement traits for a hash_map with values of type Value for cases\n    in which the key cannot represent empty and deleted slots.  Instead\n    record empty and deleted entries in Value.  Derived classes must"}, {"sha": "6b8365a9d0a6bc066a7780b264a519fe2e47461b", "filename": "gcc/hash-map.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -62,6 +62,12 @@ class GTY((user)) hash_map\n \tgt_ggc_mx (e.m_value);\n       }\n \n+    static void ggc_maybe_mx (hash_entry &e)\n+      {\n+\tif (Traits::maybe_mx)\n+\t  ggc_mx (e);\n+      }\n+\n     static void pch_nx (hash_entry &e)\n       {\n \tgt_pch_nx (e.m_key);\n@@ -74,6 +80,11 @@ class GTY((user)) hash_map\n \tpch_nx_helper (e.m_value, op, c);\n       }\n \n+    static int keep_cache_entry (hash_entry &e)\n+      {\n+\treturn ggc_marked_p (e.m_key);\n+      }\n+\n   private:\n     template<typename T>\n     static void\n@@ -237,7 +248,8 @@ class GTY((user)) hash_map\n \n   template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);\n   template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);\n-      template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);\n+  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);\n+  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);\n \n   hash_table<hash_entry> m_table;\n };\n@@ -258,6 +270,13 @@ gt_pch_nx (hash_map<K, V, H> *h)\n   gt_pch_nx (&h->m_table);\n }\n \n+template<typename K, typename V, typename H>\n+static inline void\n+gt_cleare_cache (hash_map<K, V, H> *h)\n+{\n+  gt_cleare_cache (&h->m_table);\n+}\n+\n template<typename K, typename V, typename H>\n static inline void\n gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)"}, {"sha": "b86a1d1b27831d5b72be154963d84daab0a3784e", "filename": "gcc/hash-table.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -1044,7 +1044,9 @@ gt_ggc_mx (hash_table<E> *h)\n \t  || table::is_deleted (h->m_entries[i]))\n \tcontinue;\n \n-      E::ggc_mx (h->m_entries[i]);\n+      /* Use ggc_maxbe_mx so we don't mark right away for cache tables; we'll\n+\t mark in gt_cleare_cache if appropriate.  */\n+      E::ggc_maybe_mx (h->m_entries[i]);\n     }\n }\n \n@@ -1094,7 +1096,6 @@ template<typename H>\n inline void\n gt_cleare_cache (hash_table<H> *h)\n {\n-  extern void gt_ggc_mx (typename H::value_type &t);\n   typedef hash_table<H> table;\n   if (!h)\n     return;\n@@ -1106,7 +1107,7 @@ gt_cleare_cache (hash_table<H> *h)\n \tif (res == 0)\n \t  h->clear_slot (&*iter);\n \telse if (res != -1)\n-\t  gt_ggc_mx (*iter);\n+\t  H::ggc_mx (*iter);\n       }\n }\n "}, {"sha": "6a613c45811726fe485ebadbf4ed31f92fbf89cb", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -235,6 +235,13 @@ struct ggc_remove\n     gt_ggc_mx (p);\n   }\n \n+  /* Overridden in ggc_cache_remove.  */\n+  static void\n+  ggc_maybe_mx (T &p)\n+  {\n+    ggc_mx (p);\n+  }\n+\n   static void\n   pch_nx (T &p)\n   {\n@@ -256,7 +263,7 @@ template<typename T>\n struct ggc_cache_remove : ggc_remove<T>\n {\n   /* Entries are weakly held because this is for caches.  */\n-  static void ggc_mx (T &) {}\n+  static void ggc_maybe_mx (T &) {}\n \n   static int\n   keep_cache_entry (T &e)"}, {"sha": "39acffe52662d42c8086728b902323e6bcf0913b", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21faa10189001f70361ca13133b01a815d2b342c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=21faa10189001f70361ca13133b01a815d2b342c", "patch": "@@ -4858,6 +4858,13 @@ struct tree_decl_map_cache_hasher : ggc_cache_ptr_hash<tree_decl_map>\n #define tree_vec_map_hash tree_decl_map_hash\n #define tree_vec_map_marked_p tree_map_base_marked_p\n \n+/* A hash_map of two trees for use with GTY((cache)).  Garbage collection for\n+   such a map will not mark keys, and will mark values if the key is already\n+   marked.  */\n+struct tree_cache_traits\n+  : simple_cache_map_traits<default_hash_traits<tree>, tree> { };\n+typedef hash_map<tree,tree,tree_cache_traits> tree_cache_map;\n+\n /* Initialize the abstract argument list iterator object ITER with the\n    arguments from CALL_EXPR node EXP.  */\n static inline void"}]}