{"sha": "ea5e803f5d4270439e1cfdae8525c108cd7841ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1ZTgwM2Y1ZDQyNzA0MzllMWNmZGFlODUyNWMxMDhjZDc4NDFhZQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T13:25:07Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T13:25:07Z"}, "message": "trans-array.c (gfc_trans_create_temp_array): Assert loop dimension and info dimension are the same.\n\n2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* trans-array.c (gfc_trans_create_temp_array): Assert loop dimension\n\tand info dimension are the same. Loop over loop dimension.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Set loop dimension\n\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r164090", "tree": {"sha": "d60d58da74620f3332da4110ac15e9fa4c5069bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60d58da74620f3332da4110ac15e9fa4c5069bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5e803f5d4270439e1cfdae8525c108cd7841ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5e803f5d4270439e1cfdae8525c108cd7841ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5e803f5d4270439e1cfdae8525c108cd7841ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5e803f5d4270439e1cfdae8525c108cd7841ae/comments", "author": null, "committer": null, "parents": [{"sha": "4b6133ea8b7a4db9e69e7a72459aa7e754b8c596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6133ea8b7a4db9e69e7a72459aa7e754b8c596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6133ea8b7a4db9e69e7a72459aa7e754b8c596"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "f04bb3140646bb2c8cfaf077e0b556c75ebb3931", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ea5e803f5d4270439e1cfdae8525c108cd7841ae", "patch": "@@ -1,3 +1,9 @@\n+2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_create_temp_array): Assert loop dimension\n+\tand info dimension are the same. Loop over loop dimension.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Set loop dimension\n+\n 2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_conv_array_transpose): Change generated descriptor\n@@ -952,11 +958,11 @@\n \tPR fortran/42051\n \tPR fortran/44064\n \t* symbol.c (changed_syms): Made static again.\n-\t(gfc_symbol_state): Don't conditionalize on GFC_DEBUG. \n+\t(gfc_symbol_state): Don't conditionalize on GFC_DEBUG.\n \tChanged conditional internal error into assert.\n \tRename function to ...\n \t(gfc_enforce_clean_symbol_state): ... this.\n-\t* gfortran.h (gfc_symbol_state, gfc_enforce_clean_symbol_state): \n+\t* gfortran.h (gfc_symbol_state, gfc_enforce_clean_symbol_state):\n \tRename the former to the latter.\n \t* parse.c (decode_statement, decode_omp_directive,\n \tdecode_gcc_attribute): Update callers accordingly. Don't conditionalize\n@@ -1019,12 +1025,12 @@\n \tPR fortran/42051\n \tPR fortran/44064\n \tPR fortran/45151\n-\t* intrinsic.c (gfc_get_intrinsic_sub_symbol): Commit changed symbol. \n+\t* intrinsic.c (gfc_get_intrinsic_sub_symbol): Commit changed symbol.\n \t* symbol.c (gen_cptr_param, gen_fptr_param, gen_shape_param,\n \tgfc_copy_formal_args, gfc_copy_formal_args_intr,\n \tgfc_copy_formal_args_ppc, generate_isocbinding_symbol): Ditto.\n-\t* parse.c (parse_derived_contains, parse_spec, parse_progunit): \n-\tCall reject_statement in case of error. \n+\t* parse.c (parse_derived_contains, parse_spec, parse_progunit):\n+\tCall reject_statement in case of error.\n \t(match_deferred_characteritics): Call gfc_undo_symbols in case match\n \tfails.\n \n@@ -1041,7 +1047,7 @@\n \tPR fortran/42051\n \tPR fortran/44064\n \t* symbol.c (changed_syms): Made non-static.\n-\t* parse.c (changed_syms): Declare new external. \n+\t* parse.c (changed_syms): Declare new external.\n \t(next_statement): Assert changed_syms is NULL at the beginning.\n \n 2010-07-30  Janus Weil  <janus@gcc.gnu.org>\n@@ -1202,7 +1208,7 @@\n \ta parameterized stop condition.\n \t(gfc_free_equiv): Use gfc_free_equiv_until.\n \t* parse.c (next_statement): Save equivalence list.\n-\t(reject_statement): Restore equivalence list. \n+\t(reject_statement): Restore equivalence list.\n \n 2010-07-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -1437,7 +1443,7 @@\n 2010-07-14  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_conv_section_upper_bound): Remove\n-\t(gfc_conv_section_startstride): Don't set the upper bound in the \n+\t(gfc_conv_section_startstride): Don't set the upper bound in the\n \tvector subscript case.\n \t(gfc_conv_loop_setup): Don't use gfc_conv_section_upper_bound\n "}, {"sha": "59b5531267123e2b7a9c9e144cb2f9ce241fbfe7", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ea5e803f5d4270439e1cfdae8525c108cd7841ae", "patch": "@@ -742,6 +742,7 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   int dim;\n \n   gcc_assert (info->dimen > 0);\n+  gcc_assert (loop->dimen == info->dimen);\n \n   if (gfc_option.warn_array_temp && where)\n     gfc_warning (\"Creating array temporary at %L\", where);\n@@ -793,17 +794,17 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \n   or_expr = NULL_TREE;\n \n-  /* If there is at least one null loop->to[n], it is a callee allocated \n+  /* If there is at least one null loop->to[n], it is a callee allocated\n      array.  */\n-  for (n = 0; n < info->dimen; n++)\n+  for (n = 0; n < loop->dimen; n++)\n     if (loop->to[n] == NULL_TREE)\n       {\n \tsize = NULL_TREE;\n \tbreak;\n       }\n \n-  for (n = 0; n < info->dimen; n++)\n-     {\n+  for (n = 0; n < loop->dimen; n++)\n+    {\n       dim = info->dim[n];\n \n       if (size == NULL_TREE)"}, {"sha": "82cddd7c226d7558f0f831082e976aed0f55c925", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5e803f5d4270439e1cfdae8525c108cd7841ae/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=ea5e803f5d4270439e1cfdae8525c108cd7841ae", "patch": "@@ -240,6 +240,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  /* Make a local loopinfo for the temporary creation, so that\n \t     none of the other ss->info's have to be renormalized.  */\n \t  gfc_init_loopinfo (&tmp_loop);\n+\t  tmp_loop.dimen = info->dimen;\n \t  for (n = 0; n < info->dimen; n++)\n \t    {\n \t      tmp_loop.to[n] = loopse->loop->to[n];"}]}