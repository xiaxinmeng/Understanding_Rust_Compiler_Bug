{"sha": "54414978ae4085ffce4bb00d802e29e35ed6d6b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0MTQ5NzhhZTQwODVmZmNlNGJiMDBkODAyZTI5ZTM1ZWQ2ZDZiMw==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-04-09T09:11:27Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-04-09T09:11:27Z"}, "message": "re PR target/65676 (ICE: in extract_insn, at recog.c:2343 (unrecognizable insn) with -mavx512f -funsigned-char and __builtin_ia32_pmovsxwq512_mask())\n\n\n        PR target/65676\ngcc/\n        * config/i386/i386.c (fixup_modeless_constant): New.\n        (ix86_expand_args_builtin): Fixup modeless constant operand.\n        PR target/65676\n        * config/i386/i386.c (fixup_modeless_constant): New.\n        (ix86_expand_args_builtin): Fixup modeless constant operand.\n        (ix86_expand_round_builtin): Ditto.\n        (ix86_expand_special_args_builtin): Ditto.\n        (ix86_expand_builtin): Ditto.\n\ngcc/testsuite/\n        * gcc.target/i386/sse-25.c: New.\n        (ix86_expand_round_builtin): Ditto.\n        (ix86_expand_special_args_builtin): Ditto.\n        (ix86_expand_builtin): Ditto.\n\ntestsuite/\n        PR target/65676\n        * gcc.target/i386/sse-25.c: New.\n\nFrom-SVN: r221943", "tree": {"sha": "2b7654a61dbdfcdf0022cee4171d5066bc64713c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7654a61dbdfcdf0022cee4171d5066bc64713c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54414978ae4085ffce4bb00d802e29e35ed6d6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54414978ae4085ffce4bb00d802e29e35ed6d6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54414978ae4085ffce4bb00d802e29e35ed6d6b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54414978ae4085ffce4bb00d802e29e35ed6d6b3/comments", "author": null, "committer": null, "parents": [{"sha": "da0b9df9a8ece8d062b4fed47e0d67d007c8696a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0b9df9a8ece8d062b4fed47e0d67d007c8696a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0b9df9a8ece8d062b4fed47e0d67d007c8696a"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "e3bf58e4515b1f718e5074ba0d9262e6144f717b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54414978ae4085ffce4bb00d802e29e35ed6d6b3", "patch": "@@ -1,3 +1,12 @@\n+2015-04-09  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/65676\n+\t* config/i386/i386.c (fixup_modeless_constant): New.\n+\t(ix86_expand_args_builtin): Fixup modeless constant operand.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t(ix86_expand_special_args_builtin): Ditto.\n+\t(ix86_expand_builtin): Ditto.\n+\n 2015-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65693"}, {"sha": "a0b543a4101c055f532bcb2fea424ab9de20bb12", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=54414978ae4085ffce4bb00d802e29e35ed6d6b3", "patch": "@@ -35863,6 +35863,15 @@ safe_vector_operand (rtx x, machine_mode mode)\n   return x;\n }\n \n+/* Fixup modeless constants to fit required mode.  */\n+static rtx\n+fixup_modeless_constant (rtx x, machine_mode mode)\n+{\n+  if (GET_MODE (x) == VOIDmode)\n+    x = convert_to_mode (mode, x, 1);\n+  return x;\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of binop insns.  */\n \n static rtx\n@@ -37509,6 +37518,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t  if (memory_operand (op, mode))\n \t    num_memory++;\n \n+\t  op = fixup_modeless_constant (op, mode);\n+\n \t  if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t    {\n \t      if (optimize || !match || num_memory > 1)\n@@ -37882,6 +37893,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t  if (VECTOR_MODE_P (mode))\n \t    op = safe_vector_operand (op, mode);\n \n+\t  op = fixup_modeless_constant (op, mode);\n+\n \t  if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t    {\n \t      if (optimize || !match)\n@@ -38289,6 +38302,8 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t      if (VECTOR_MODE_P (mode))\n \t\top = safe_vector_operand (op, mode);\n \n+\t      op = fixup_modeless_constant (op, mode);\n+\n \t      if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t\top = copy_to_mode_reg (mode, op);\n \t      else\n@@ -39852,6 +39867,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \top1 = copy_to_mode_reg (Pmode, op1);\n       if (!insn_data[icode].operand[3].predicate (op2, mode2))\n \top2 = copy_to_mode_reg (mode2, op2);\n+\n+      op3 = fixup_modeless_constant (op3, mode3);\n+\n       if (GET_MODE (op3) == mode3 || GET_MODE (op3) == VOIDmode)\n \t{\n \t  if (!insn_data[icode].operand[4].predicate (op3, mode3))\n@@ -39995,6 +40013,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n \top0 = copy_to_mode_reg (Pmode, op0);\n \n+      op1 = fixup_modeless_constant (op1, mode1);\n+\n       if (GET_MODE (op1) == mode1 || GET_MODE (op1) == VOIDmode)\n \t{\n \t  if (!insn_data[icode].operand[1].predicate (op1, mode1))\n@@ -40041,6 +40061,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       mode3 = insn_data[icode].operand[3].mode;\n       mode4 = insn_data[icode].operand[4].mode;\n \n+      op0 = fixup_modeless_constant (op0, mode0);\n+\n       if (GET_MODE (op0) == mode0\n \t  || (GET_MODE (op0) == VOIDmode && op0 != constm1_rtx))\n \t{"}, {"sha": "1cd869a0fb58c49ac034f3c8c92133466715f016", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54414978ae4085ffce4bb00d802e29e35ed6d6b3", "patch": "@@ -1,3 +1,8 @@\n+2015-04-09  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/65676\n+\t* gcc.target/i386/sse-25.c: New.\n+\n 2015-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65693"}, {"sha": "c4b334c66e35c388953c937d4134ea3a0d55c7f4", "filename": "gcc/testsuite/gcc.target/i386/sse-25.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54414978ae4085ffce4bb00d802e29e35ed6d6b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-25.c?ref=54414978ae4085ffce4bb00d802e29e35ed6d6b3", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/65676 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -funsigned-char\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#include \"sse-23.c\""}]}