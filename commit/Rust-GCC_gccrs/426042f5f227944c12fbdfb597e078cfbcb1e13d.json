{"sha": "426042f5f227944c12fbdfb597e078cfbcb1e13d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI2MDQyZjVmMjI3OTQ0YzEyZmJkZmI1OTdlMDc4Y2ZiY2IxZTEzZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-16T12:11:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-16T12:11:19Z"}, "message": "Adjust arguments to aligned_alloc or posix_memalign\n\n\t* libsupc++/new_opa.cc [_GLIBCXX_HAVE_POSIX_MEMALIGN] (aligned_alloc):\n\tIncrease alignment if less than sizeof(void*).\n\t[_GLIBCXX_HAVE_ALIGNED_ALLOC] (operator new(size_t, align_val_t)):\n\tIncrease size if not a multiple of alignment.\n\nFrom-SVN: r240187", "tree": {"sha": "b7ee62581873f13e2316d6e476926bfdb9339fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ee62581873f13e2316d6e476926bfdb9339fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/426042f5f227944c12fbdfb597e078cfbcb1e13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426042f5f227944c12fbdfb597e078cfbcb1e13d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426042f5f227944c12fbdfb597e078cfbcb1e13d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426042f5f227944c12fbdfb597e078cfbcb1e13d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c3d35a661a6ac944f23221fc0241436cfaba93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3d35a661a6ac944f23221fc0241436cfaba93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3d35a661a6ac944f23221fc0241436cfaba93d"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "cddff99466dfe96d99f76a1e0656964389f55a7a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426042f5f227944c12fbdfb597e078cfbcb1e13d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426042f5f227944c12fbdfb597e078cfbcb1e13d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=426042f5f227944c12fbdfb597e078cfbcb1e13d", "patch": "@@ -1,3 +1,10 @@\n+2016-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/new_opa.cc [_GLIBCXX_HAVE_POSIX_MEMALIGN] (aligned_alloc):\n+\tIncrease alignment if less than sizeof(void*).\n+\t[_GLIBCXX_HAVE_ALIGNED_ALLOC] (operator new(size_t, align_val_t)):\n+\tIncrease size if not a multiple of alignment.\n+\n 2016-09-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/debug_mode.xml: Minor editorial fixes."}, {"sha": "9c859c1b61b21ad91e2e3787ba1a6dc8e74b751e", "filename": "libstdc++-v3/libsupc++/new_opa.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426042f5f227944c12fbdfb597e078cfbcb1e13d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426042f5f227944c12fbdfb597e078cfbcb1e13d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc?ref=426042f5f227944c12fbdfb597e078cfbcb1e13d", "patch": "@@ -39,6 +39,9 @@ static inline void*\n aligned_alloc (std::size_t al, std::size_t sz)\n {\n   void *ptr;\n+  // The value of alignment shall be a power of two multiple of sizeof(void *).\n+  if (al < sizeof(void*))\n+    al = sizeof(void*);\n   int ret = posix_memalign (&ptr, al, sz);\n   if (ret == 0)\n     return ptr;\n@@ -58,13 +61,19 @@ _GLIBCXX_WEAK_DEFINITION void *\n operator new (std::size_t sz, std::align_val_t al)\n {\n   void *p;\n+  std::size_t align = (std::size_t)al;\n \n   /* malloc (0) is unpredictable; avoid it.  */\n   if (sz == 0)\n     sz = 1;\n \n-  while (__builtin_expect ((p = aligned_alloc ((std::size_t)al, sz)) == 0,\n-\t\t\t   false))\n+#if _GLIBCXX_HAVE_ALIGNED_ALLOC\n+  /* C11: the value of size shall be an integral multiple of alignment.  */\n+  if (std::size_t rem = sz % align)\n+    sz += align - rem;\n+#endif\n+\n+  while (__builtin_expect ((p = aligned_alloc (align, sz)) == 0, false))\n     {\n       new_handler handler = std::get_new_handler ();\n       if (! handler)"}]}