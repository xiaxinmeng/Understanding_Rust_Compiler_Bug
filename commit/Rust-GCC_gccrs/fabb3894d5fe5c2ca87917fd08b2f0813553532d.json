{"sha": "fabb3894d5fe5c2ca87917fd08b2f0813553532d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiYjM4OTRkNWZlNWMyY2E4NzkxN2ZkMDhiMmYwODEzNTUzNTMyZA==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-03-08T20:13:02Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-27T18:03:34Z"}, "message": "WIP for #252\n\nRemoved TyTy::UnitType and TyTy::TypeKind::UNIT.\nReplaced by TyTy::TupleType with an empty list of fields.\n\nAdded default empty vector for fields in ctor for TyTy::TypeType.", "tree": {"sha": "c31d037df544c9dbd3adaa1f904ce38620037d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31d037df544c9dbd3adaa1f904ce38620037d3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fabb3894d5fe5c2ca87917fd08b2f0813553532d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabb3894d5fe5c2ca87917fd08b2f0813553532d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabb3894d5fe5c2ca87917fd08b2f0813553532d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabb3894d5fe5c2ca87917fd08b2f0813553532d/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f1f1d7211e555ae7a22b21723ced7610fa5657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f1f1d7211e555ae7a22b21723ced7610fa5657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f1f1d7211e555ae7a22b21723ced7610fa5657"}], "stats": {"total": 177, "additions": 42, "deletions": 135}, "files": [{"sha": "6347464024e6100d5dc8094263313065bf0582c3", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -351,11 +351,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       ctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::UnitType &) override\n-  {\n-    translated = ctx->get_backend ()->void_type ();\n-  }\n-\n   void visit (TyTy::ADTType &type) override\n   {\n     if (ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type))\n@@ -389,6 +384,12 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::TupleType &type) override\n   {\n+    if (type.num_fields () == 0)\n+      {\n+\ttranslated = ctx->get_backend ()->void_type ();\n+\treturn;\n+      }\n+\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &translated);\n     if (ok)\n       return;"}, {"sha": "d0c752c6ac65096c6923e1a8b1e7d0e78e11f2ec", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -368,7 +368,7 @@ class CompileExpr : public HIRCompileBase\n       }\n \n     Bvariable *tmp = NULL;\n-    bool needs_temp = if_type->get_kind () != TyTy::TypeKind::UNIT;\n+    bool needs_temp = !if_type->is_unit ();\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n@@ -405,7 +405,7 @@ class CompileExpr : public HIRCompileBase\n       }\n \n     Bvariable *tmp = NULL;\n-    bool needs_temp = if_type->get_kind () != TyTy::TypeKind::UNIT;\n+    bool needs_temp = !if_type->is_unit ();\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n@@ -441,7 +441,7 @@ class CompileExpr : public HIRCompileBase\n       }\n \n     Bvariable *tmp = NULL;\n-    bool needs_temp = block_tyty->get_kind () != TyTy::TypeKind::UNIT;\n+    bool needs_temp = !block_tyty->is_unit ();\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n@@ -541,7 +541,7 @@ class CompileExpr : public HIRCompileBase\n \n     fncontext fnctx = ctx->peek_fn ();\n     Bvariable *tmp = NULL;\n-    bool needs_temp = block_tyty->get_kind () != TyTy::TypeKind::UNIT;\n+    bool needs_temp = !block_tyty->is_unit ();\n     if (needs_temp)\n       {\n \tBblock *enclosing_scope = ctx->peek_enclosing_scope ();"}, {"sha": "a777df6589536f58cb0e8f84e1d228074ece9b80", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -81,7 +81,7 @@ class CompileStmt : public HIRCompileBase\n       return;\n \n     auto fnctx = ctx->peek_fn ();\n-    if (ty->get_kind () == TyTy::TypeKind::UNIT)\n+    if (ty->is_unit ())\n       {\n \tBstatement *expr_stmt\n \t  = ctx->get_backend ()->expression_statement (fnctx.fndecl, init);"}, {"sha": "44d941656879921d4a6d6db1387b017df16c1e41", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -50,7 +50,13 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ADTType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n+  void visit (TyTy::TupleType &type) override\n+  {\n+    if (type.num_fields () == 0)\n+      translated = backend->void_type ();\n+    else\n+      gcc_unreachable ();\n+  }\n \n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n \n@@ -60,8 +66,6 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::FnPtr &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &) override { translated = backend->void_type (); }\n-\n   void visit (TyTy::FnType &type) override\n   {\n     Backend::Btyped_identifier receiver;"}, {"sha": "b4ca34f2d6f240b60c9bc0d31783d36963f5b5fb", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -178,7 +178,9 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"str\", builtins, str);\n \n   // unit type ()\n-  TyTy::UnitType *unit_tyty = new TyTy::UnitType (mappings->get_next_hir_id ());\n+\n+  TyTy::TupleType *unit_tyty\n+    = new TyTy::TupleType (mappings->get_next_hir_id ());\n   std::vector<std::unique_ptr<AST::Type> > elems;\n   AST::TupleType *unit_type\n     = new AST::TupleType (std::move (elems), Linemap::predeclared_location ());"}, {"sha": "722f384d055619d8f78607fd1c6fd211a39762fa", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -143,7 +143,7 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     if (!expr.has_return_expr ())\n       {\n-\tinfered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\tinfered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n \treturn;\n       }\n \n@@ -253,7 +253,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::AssignmentExpr &expr) override\n   {\n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n \n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n@@ -587,7 +587,7 @@ class TypeCheckExpr : public TypeCheckBase\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n     TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n \n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::IfExprConseqElse &expr) override\n@@ -810,7 +810,7 @@ class TypeCheckExpr : public TypeCheckBase\n     context->push_new_loop_context (expr.get_mappings ().get_hirid ());\n     TyTy::BaseType *block_expr\n       = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n-    if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n+    if (!block_expr->is_unit ())\n       {\n \trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n \t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n@@ -827,7 +827,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     infered = loop_context_type_infered\n \t\t? loop_context_type\n-\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\t\t: new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::WhileLoopExpr &expr) override\n@@ -838,15 +838,15 @@ class TypeCheckExpr : public TypeCheckBase\n     TyTy::BaseType *block_expr\n       = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n \n-    if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n+    if (!block_expr->is_unit ())\n       {\n \trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n \t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n \treturn;\n       }\n \n     context->pop_loop_context ();\n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BreakExpr &expr) override\n@@ -874,7 +874,7 @@ class TypeCheckExpr : public TypeCheckBase\n \tcontext->swap_head_loop_context (unified_ty);\n       }\n \n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::ContinueExpr &expr) override\n@@ -886,7 +886,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BorrowExpr &expr) override"}, {"sha": "e116048545668c8fd6435226a9883afc7d73aad5", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -66,7 +66,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n     TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n-      ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n+      ret_type = new TyTy::TupleType (function.get_mappings ().get_hirid ());\n     else\n       {\n \tauto resolved\n@@ -119,7 +119,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n     TyTy::BaseType *ret_type = nullptr;\n     if (!method.has_function_return_type ())\n-      ret_type = new TyTy::UnitType (method.get_mappings ().get_hirid ());\n+      ret_type = new TyTy::TupleType (method.get_mappings ().get_hirid ());\n     else\n       {\n \tauto resolved"}, {"sha": "68becd40a640876ef3c40f1ef10bbb7508b71365", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -51,7 +51,7 @@ class TypeCheckStmt : public TypeCheckBase\n \n   void visit (HIR::LetStmt &stmt) override\n   {\n-    infered = new TyTy::UnitType (stmt.get_mappings ().get_hirid ());\n+    infered = new TyTy::TupleType (stmt.get_mappings ().get_hirid ());\n \n     TyTy::BaseType *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())"}, {"sha": "cfc6f59388a034ca53a7870ad9dba761d7dea1df", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -152,7 +152,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n-      ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n+      ret_type = new TyTy::TupleType (function.get_mappings ().get_hirid ());\n     else\n       {\n \tauto resolved"}, {"sha": "173294b3c379030d335c7efc8c1bd2c167c7fc43", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -112,7 +112,7 @@ class TypeCheckType : public TypeCheckBase\n     TyTy::BaseType *return_type\n       = fntype.has_return_type ()\n \t  ? TypeCheckType::Resolve (fntype.get_return_type ().get ())\n-\t  : new TyTy::UnitType (fntype.get_mappings ().get_hirid ());\n+\t  : new TyTy::TupleType (fntype.get_mappings ().get_hirid ());\n \n     std::vector<TyTy::TyVar> params;\n     for (auto &param : fntype.get_function_params ())"}, {"sha": "b105269742161422ef2201a62bcdc350aa8b964a", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -83,7 +83,7 @@ void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n   TyTy::BaseType *block_tyty\n-    = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n \n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n     bool is_final_stmt = expr.is_final_stmt (s);\n@@ -102,7 +102,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n \tdelete block_tyty;\n \tblock_tyty = resolved;\n       }\n-    else if (resolved->get_kind () != TyTy::TypeKind::UNIT)\n+    else if (!resolved->is_unit ())\n       {\n \trust_error_at (s->get_locus_slow (), \"expected () got %s\",\n \t\t       resolved->as_string ().c_str ());"}, {"sha": "46adf846cb3ae47e1d08e006c9e2c8ddd1986cb0", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -79,7 +79,6 @@ class SubstMapper : public TyTy::TyVisitor\n       resolved = concrete;\n   }\n \n-  void visit (TyTy::UnitType &) override { gcc_unreachable (); }\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n@@ -138,7 +137,6 @@ class SubstMapperInternal : public TyTy::TyVisitor\n       resolved = concrete;\n   }\n \n-  void visit (TyTy::UnitType &) override { gcc_unreachable (); }\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }"}, {"sha": "d53ab1186d8b60388f38fd0662a1dda966a692ef", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -39,7 +39,6 @@ class TypeCheckCallExpr : private TyVisitor\n     return checker.resolved;\n   }\n \n-  void visit (UnitType &type) override { gcc_unreachable (); }\n   void visit (InferType &type) override { gcc_unreachable (); }\n   void visit (TupleType &type) override { gcc_unreachable (); }\n   void visit (ArrayType &type) override { gcc_unreachable (); }\n@@ -85,7 +84,6 @@ class TypeCheckMethodCallExpr : private TyVisitor\n     return checker.resolved;\n   }\n \n-  void visit (UnitType &type) override { gcc_unreachable (); }\n   void visit (InferType &type) override { gcc_unreachable (); }\n   void visit (TupleType &type) override { gcc_unreachable (); }\n   void visit (ArrayType &type) override { gcc_unreachable (); }"}, {"sha": "0fb04c5d8c4cdc75866a86bb29ac14edaa329a13", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -106,14 +106,6 @@ class BaseRules : public TyVisitor\n     return resolved;\n   }\n \n-  virtual void visit (UnitType &type) override\n-  {\n-    Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n-\t\t   get_base ()->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n-  }\n-\n   virtual void visit (TupleType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -278,19 +270,6 @@ class InferRules : public BaseRules\n public:\n   InferRules (InferType *base) : BaseRules (base), base (base) {}\n \n-  void visit (UnitType &type) override\n-  {\n-    bool is_valid\n-      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n-    if (is_valid)\n-      {\n-\tresolved = type.clone ();\n-\treturn;\n-      }\n-\n-    BaseRules::visit (type);\n-  }\n-\n   void visit (BoolType &type) override\n   {\n     bool is_valid\n@@ -505,24 +484,6 @@ class InferRules : public BaseRules\n   InferType *base;\n };\n \n-class UnitRules : public BaseRules\n-{\n-  using Rust::TyTy::BaseRules::visit;\n-\n-public:\n-  UnitRules (UnitType *base) : BaseRules (base), base (base) {}\n-\n-  void visit (UnitType &type) override\n-  {\n-    resolved = new UnitType (type.get_ref (), type.get_ty_ref ());\n-  }\n-\n-private:\n-  BaseType *get_base () override { return base; }\n-\n-  UnitType *base;\n-};\n-\n class FnRules : public BaseRules\n {\n   using Rust::TyTy::BaseRules::visit;"}, {"sha": "453a3b6bc864eeff56a3b67b0feeb0cb8faba37e", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -27,7 +27,6 @@ namespace TyTy {\n class TyVisitor\n {\n public:\n-  virtual void visit (UnitType &type) = 0;\n   virtual void visit (InferType &type) = 0;\n   virtual void visit (ADTType &type) = 0;\n   virtual void visit (TupleType &type) = 0;"}, {"sha": "729a6d532befcf7d6badd50e05816c30e840feea", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -63,31 +63,6 @@ TyVar::get_implict_infer_var ()\n   return TyVar (infer->get_ref ());\n }\n \n-void\n-UnitType::accept_vis (TyVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-std::string\n-UnitType::as_string () const\n-{\n-  return \"()\";\n-}\n-\n-BaseType *\n-UnitType::unify (BaseType *other)\n-{\n-  UnitRules r (this);\n-  return r.unify (other);\n-}\n-\n-BaseType *\n-UnitType::clone ()\n-{\n-  return new UnitType (get_ref (), get_ty_ref (), get_combined_refs ());\n-}\n-\n void\n InferType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "2e861fb6f88ca56626933240781b4b49c32ee51c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb3894d5fe5c2ca87917fd08b2f0813553532d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=fabb3894d5fe5c2ca87917fd08b2f0813553532d", "patch": "@@ -43,7 +43,6 @@ enum TypeKind\n   INT,\n   UINT,\n   FLOAT,\n-  UNIT,\n   USIZE,\n   ISIZE,\n   // there are more to add...\n@@ -90,7 +89,7 @@ class BaseType\n     return get_kind () == other.get_kind ();\n   }\n \n-  virtual bool is_unit () const { return kind == TypeKind::UNIT; }\n+  virtual bool is_unit () const { return false; }\n \n   TypeKind get_kind () const { return kind; }\n \n@@ -183,8 +182,6 @@ class InferType : public BaseType\n \n   void accept_vis (TyVisitor &vis) override;\n \n-  bool is_unit () const override { return false; }\n-\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n@@ -225,30 +222,6 @@ class ErrorType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n };\n \n-class UnitType : public BaseType\n-{\n-public:\n-  UnitType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::UNIT, refs)\n-  {}\n-\n-  UnitType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::UNIT, refs)\n-  {}\n-\n-  void accept_vis (TyVisitor &vis) override;\n-\n-  bool is_unit () const override { return true; }\n-\n-  std::string as_string () const override;\n-\n-  BaseType *unify (BaseType *other) override;\n-\n-  BaseType *clone () final override;\n-\n-  std::string get_name () const override final { return as_string (); }\n-};\n-\n class ParamType : public BaseType\n {\n public:\n@@ -321,19 +294,20 @@ class StructFieldType\n class TupleType : public BaseType\n {\n public:\n-  TupleType (HirId ref, std::vector<TyVar> fields,\n+  TupleType (HirId ref, std::vector<TyVar> fields = std::vector<TyVar> (),\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n-  TupleType (HirId ref, HirId ty_ref, std::vector<TyVar> fields,\n+  TupleType (HirId ref, HirId ty_ref,\n+\t     std::vector<TyVar> fields = std::vector<TyVar> (),\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n-  bool is_unit () const override { return false; }\n+  bool is_unit () const override { return this->fields.empty (); }\n \n   std::string as_string () const override;\n \n@@ -602,8 +576,6 @@ class ADTType : public BaseType, public SubstitutionRef\n \n   void accept_vis (TyVisitor &vis) override;\n \n-  bool is_unit () const override { return false; }\n-\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n@@ -1133,9 +1105,6 @@ class TypeKindFormat\n       case TypeKind::FLOAT:\n \treturn \"Float\";\n \n-      case TypeKind::UNIT:\n-\treturn \"Unit\";\n-\n       case TypeKind::USIZE:\n \treturn \"Usize\";\n "}]}