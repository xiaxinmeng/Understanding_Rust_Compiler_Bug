{"sha": "033eaf8501b9611c04430e4f1bf458435fdd1171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzZWFmODUwMWI5NjExYzA0NDMwZTRmMWJmNDU4NDM1ZmRkMTE3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T12:03:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-12T12:03:35Z"}, "message": "[multiple changes]\n\n2011-12-12  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_atag.adb, exp_atag.ads, exp_util.adb, exp_attr.adb,\n\tsem_ch13.adb: Minor reformatting.\n\n2011-12-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch7.adb (Uninstall_Declarations): Don't\n\tapply check for incomplete types used as a result type for an\n\taccess-to-function type when compiling for Ada 2012 or later.\n\t* sem_ch6.adb (Analyze_Subprogram_Declaration):\n\tSpecialize error message for interface subprograms that are\n\tnot declared abstract nor null (functions can't be declared as\n\tnull). Also, remove \"(Ada 2005)\" from message.\n\nFrom-SVN: r182230", "tree": {"sha": "289e0e4c470d0bd8ee28bc500c039a3d85d5d8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/289e0e4c470d0bd8ee28bc500c039a3d85d5d8c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033eaf8501b9611c04430e4f1bf458435fdd1171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033eaf8501b9611c04430e4f1bf458435fdd1171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033eaf8501b9611c04430e4f1bf458435fdd1171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033eaf8501b9611c04430e4f1bf458435fdd1171/comments", "author": null, "committer": null, "parents": [{"sha": "6bed26b5427ac521b5b1bea8d4f24f265980670d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bed26b5427ac521b5b1bea8d4f24f265980670d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bed26b5427ac521b5b1bea8d4f24f265980670d"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "dea19c8888b7d5571e27f5b74102291cd1130255", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -1,3 +1,18 @@\n+2011-12-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_atag.adb, exp_atag.ads, exp_util.adb, exp_attr.adb,\n+\tsem_ch13.adb: Minor reformatting.\n+\n+2011-12-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch7.adb (Uninstall_Declarations): Don't\n+\tapply check for incomplete types used as a result type for an\n+\taccess-to-function type when compiling for Ada 2012 or later.\n+\t* sem_ch6.adb (Analyze_Subprogram_Declaration):\n+\tSpecialize error message for interface subprograms that are\n+\tnot declared abstract nor null (functions can't be declared as\n+\tnull). Also, remove \"(Ada 2005)\" from message.\n+\n 2011-12-12  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (GNAT_Pragma): Check comes from source."}, {"sha": "602014537941b99abdb54827df6dee8b8ca3e5f3", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -300,12 +300,10 @@ package body Exp_Atag is\n    begin\n       return\n         Make_Selected_Component (Loc,\n-          Prefix =>\n-            Build_TSD (Loc,\n-              Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n+          Prefix        =>\n+            Build_TSD (Loc, Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n           Selector_Name =>\n-            New_Reference_To\n-              (RTE_Record_Component (RE_Alignment), Loc));\n+            New_Reference_To (RTE_Record_Component (RE_Alignment), Loc));\n    end Build_Get_Alignment;\n \n    ------------------------------------------"}, {"sha": "6551f153aa9691617741ab3c66f527ef38ac7a1f", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -70,7 +70,6 @@ package Exp_Atag is\n      (Loc      : Source_Ptr;\n       Tag_Node : Node_Id) return Node_Id;\n    --  Build code that retrieves the alignment of the tagged type.\n-   --\n    --  Generates: TSD (Tag).Alignment\n \n    procedure Build_Get_Predefined_Prim_Op_Address"}, {"sha": "111dc8de02be30f2b210cdb1e12851fbce711520", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -1119,20 +1119,18 @@ package body Exp_Attr is\n          --  operation _Alignment applied to X.\n \n          elsif Is_Class_Wide_Type (Ptyp) then\n-\n             New_Node :=\n               Build_Get_Alignment (Loc,\n                 Make_Attribute_Reference (Loc,\n-                  Prefix => Pref,\n+                  Prefix         => Pref,\n                   Attribute_Name => Name_Tag));\n \n-            if Typ /= Standard_Integer then\n-\n-               --  The context is a specific integer type with which the\n-               --  original attribute was compatible. The function has a\n-               --  specific type as well, so to preserve the compatibility\n-               --  we must convert explicitly.\n+            --  Case where the context is a specific integer type with which\n+            --  the original attribute was compatible. The function has a\n+            --  specific type as well, so to preserve the compatibility we\n+            --  must convert explicitly.\n \n+            if Typ /= Standard_Integer then\n                New_Node := Convert_To (Typ, New_Node);\n             end if;\n "}, {"sha": "52541ed67ebcd9ac13b39128b26abf7539b51c65", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -756,9 +756,7 @@ package body Exp_Util is\n          Append_To (Actuals, New_Reference_To (Addr_Id, Loc));\n          Append_To (Actuals, New_Reference_To (Size_Id, Loc));\n \n-         if Is_Allocate\n-           or else not Is_Class_Wide_Type (Desig_Typ)\n-         then\n+         if Is_Allocate or else not Is_Class_Wide_Type (Desig_Typ) then\n             Append_To (Actuals, New_Reference_To (Alig_Id, Loc));\n \n          --  For deallocation of class wide types we obtain the value of\n@@ -777,7 +775,7 @@ package body Exp_Util is\n             Append_To (Actuals,\n               Unchecked_Convert_To (RTE (RE_Storage_Offset),\n                 Make_Attribute_Reference (Loc,\n-                  Prefix =>\n+                  Prefix         =>\n                     Make_Explicit_Dereference (Loc, Relocate_Node (Expr)),\n                   Attribute_Name => Name_Alignment)));\n          end if;\n@@ -879,6 +877,7 @@ package body Exp_Util is\n             else\n                Append_To (Actuals, New_Reference_To (Standard_True, Loc));\n             end if;\n+\n          else\n             Append_To (Actuals, New_Reference_To (Standard_False, Loc));\n          end if;\n@@ -917,31 +916,30 @@ package body Exp_Util is\n                   --  P : Root_Storage_Pool\n \n                    Make_Parameter_Specification (Loc,\n-                     Defining_Identifier =>\n-                       Make_Temporary (Loc, 'P'),\n+                     Defining_Identifier => Make_Temporary (Loc, 'P'),\n                      Parameter_Type =>\n                        New_Reference_To (RTE (RE_Root_Storage_Pool), Loc)),\n \n                   --  A : [out] Address\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Addr_Id,\n-                     Out_Present => Is_Allocate,\n-                     Parameter_Type =>\n+                     Out_Present         => Is_Allocate,\n+                     Parameter_Type      =>\n                        New_Reference_To (RTE (RE_Address), Loc)),\n \n                   --  S : Storage_Count\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Size_Id,\n-                     Parameter_Type =>\n+                     Parameter_Type      =>\n                        New_Reference_To (RTE (RE_Storage_Count), Loc)),\n \n                   --  L : Storage_Count\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Alig_Id,\n-                     Parameter_Type =>\n+                     Parameter_Type      =>\n                        New_Reference_To (RTE (RE_Storage_Count), Loc)))),\n \n              Declarations => No_List,\n@@ -950,8 +948,7 @@ package body Exp_Util is\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (\n                    Make_Procedure_Call_Statement (Loc,\n-                     Name =>\n-                       New_Reference_To (Proc_To_Call, Loc),\n+                     Name => New_Reference_To (Proc_To_Call, Loc),\n                      Parameter_Associations => Actuals)))));\n \n          --  The newly generated Allocate / Deallocate becomes the default"}, {"sha": "d06ba9388acb0d4dfc280d9cb42849757c41e6e1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -2497,6 +2497,7 @@ package body Sem_Ch13 is\n          when Attribute_Alignment => Alignment : declare\n             Align     : constant Uint := Get_Alignment_Value (Expr);\n             Max_Align : constant Uint := UI_From_Int (Maximum_Alignment);\n+\n          begin\n             FOnly := True;\n \n@@ -2512,9 +2513,7 @@ package body Sem_Ch13 is\n             elsif Align /= No_Uint then\n                Set_Has_Alignment_Clause (U_Ent);\n \n-               if Is_Tagged_Type (U_Ent)\n-                 and then Align > Max_Align\n-               then\n+               if Is_Tagged_Type (U_Ent) and then Align > Max_Align then\n                   Error_Msg_N\n                     (\"?alignment for & set to Maximum_Aligment\", Nam);\n                   Set_Alignment (U_Ent, Max_Align);"}, {"sha": "846f3a300661ca4b1150a24d2a00a2edb260ffc1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -3256,9 +3256,16 @@ package body Sem_Ch6 is\n                               and then Null_Present (Specification (N)))\n             then\n                Error_Msg_Name_1 := Chars (Defining_Entity (N));\n-               Error_Msg_N\n-                 (\"(Ada 2005) interface subprogram % must be abstract or null\",\n-                  N);\n+\n+               --  Specialize error message based on procedures vs. functions,\n+               --  since functions can't be null subprograms.\n+\n+               if Ekind (Designator) = E_Procedure then\n+                  Error_Msg_N\n+                    (\"interface procedure % must be abstract or null\", N);\n+               else\n+                  Error_Msg_N (\"interface function % must be abstract\", N);\n+               end if;\n             end if;\n          end;\n       end if;"}, {"sha": "2f87cf07885cfea3fffd115328474ded05dd49af", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033eaf8501b9611c04430e4f1bf458435fdd1171/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=033eaf8501b9611c04430e4f1bf458435fdd1171", "patch": "@@ -2474,10 +2474,13 @@ package body Sem_Ch7 is\n                        (\"type& must be completed in the private part\",\n                          Parent (Subp), Id);\n \n-                  --  The return type of an access_to_function cannot be a\n-                  --  Taft-amendment type.\n+                  --  The result type of an access-to-function type cannot be a\n+                  --  Taft-amendment type, unless the version is Ada 2012 or\n+                  --  later (see AI05-151).\n \n-                  elsif Ekind (Subp) = E_Subprogram_Type then\n+                  elsif Ada_Version < Ada_2012\n+                    and then Ekind (Subp) = E_Subprogram_Type\n+                  then\n                      if Etype (Subp) = Id\n                        or else\n                          (Is_Class_Wide_Type (Etype (Subp))"}]}