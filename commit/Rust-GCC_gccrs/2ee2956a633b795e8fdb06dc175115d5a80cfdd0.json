{"sha": "2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlMjk1NmE2MzNiNzk1ZThmZGIwNmRjMTc1MTE1ZDVhODBjZmRkMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-06T17:22:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-06T17:22:54Z"}, "message": "genconfig.c (main): Disable HAVE_conditional_arithmetic.\n\n        * genconfig.c (main): Disable HAVE_conditional_arithmetic.\n        * jump.c (jump_optimize_1): Document why.\n\nFrom-SVN: r29841", "tree": {"sha": "412f2359a1f55cf40bdd655bba069aaa04f3b5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/412f2359a1f55cf40bdd655bba069aaa04f3b5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/comments", "author": null, "committer": null, "parents": [{"sha": "f428f25240c4c54be3a1504d1122b6b19009fbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f428f25240c4c54be3a1504d1122b6b19009fbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f428f25240c4c54be3a1504d1122b6b19009fbe3"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "67ad3156d9913bc966a1029ed4b8735a94316bae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "patch": "@@ -1,3 +1,8 @@\n+Wed Oct  6 10:21:15 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* genconfig.c (main): Disable HAVE_conditional_arithmetic.\n+\t* jump.c (jump_optimize_1): Document why.\n+\n Wed Oct  6 10:41:56 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* collect2.c (scan_prog_file, scan_libraries): Prototype function"}, {"sha": "bd31d7393c37b21b36f2c4d9c14432e76bebb406", "filename": "gcc/genconfig.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "patch": "@@ -348,8 +348,11 @@ from the machine description file `md'.  */\\n\\n\");\n   if (have_cmove_flag)\n     printf (\"#define HAVE_conditional_move\\n\");\n \n+#if 0\n+  /* Disabled.  See the discussion in jump.c.  */\n   if (have_cond_arith_flag)\n     printf (\"#define HAVE_conditional_arithmetic\\n\");\n+#endif\n \n   if (have_lo_sum_flag)\n     printf (\"#define HAVE_lo_sum\\n\");"}, {"sha": "f6e973e85b9d08cf151d1b6101f74838c05baad5", "filename": "gcc/jump.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee2956a633b795e8fdb06dc175115d5a80cfdd0/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=2ee2956a633b795e8fdb06dc175115d5a80cfdd0", "patch": "@@ -943,6 +943,37 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n #endif /* HAVE_cc0 */\n \n #ifdef HAVE_conditional_arithmetic\n+\t  /* ??? This is disabled in genconfig, as this simple-minded\n+\t     transformation can incredibly lengthen register lifetimes.\n+\n+\t     Consider this example from cexp.c's yyparse:\n+\n+\t\t234 (set (pc)\n+\t\t      (if_then_else (ne (reg:DI 149) (const_int 0 [0x0]))\n+\t\t        (label_ref 248) (pc)))\n+\t\t237 (set (reg/i:DI 0 $0) (const_int 1 [0x1]))\n+\t\t239 (set (pc) (label_ref 2382))\n+\t\t248 (code_label (\"yybackup\"))\n+\n+\t     This will be transformed to:\n+\n+\t\t237 (set (reg/i:DI 0 $0)\n+\t\t      (if_then_else:DI (eq (reg:DI 149) (const_int 0 [0x0]))\n+\t\t        (const_int 1 [0x1]) (reg/i:DI 0 $0)))\n+\t\t239 (set (pc)\n+\t\t      (if_then_else (eq (reg:DI 149) (const_int 0 [0x0]))\n+\t\t        (label_ref 2382) (pc)))\n+\n+\t     which, from this narrow viewpoint looks fine.  Except that\n+\t     between this and 3 other ocurrences of the same pattern, $0\n+\t     is now live for basically the entire function, and we'll \n+\t     get an abort in caller_save.\n+\n+\t     Any replacement for this code should recall that a set of\n+\t     a register that is not live need not, and indeed should not,\n+\t     be conditionalized.  Either that, or delay the transformation\n+\t     until after register allocation.  */\n+\n \t  /* See if this is a conditional jump around a small number of\n \t     instructions that we can conditionalize.  Don't do this before\n \t     the initial CSE pass or after reload."}]}