{"sha": "6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NzBkY2ZhN2FjMDU1ZTVhYzgwMmFlY2YzYzc1ZGZhODg1N2ZiYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T09:38:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T09:38:07Z"}, "message": "[multiple changes]\n\n2013-04-11  Johannes Kanig  <kanig@adacore.com>\n\n\t* debug.adb: Remove comment for -gnatd.G.\n\n2013-04-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb (Expand_Record_Equality.Suitable_Element):\n\tRemove recursive routine, replace with...\n\t(Expand_Record_Equality.Element_To_Compare): New subroutine,\n\timplement iterative search for next element to compare.\n\tAdd explanatory comment in the tagged case.\n\nFrom-SVN: r197747", "tree": {"sha": "f87a356da552224f45279cec853f82e6f77deec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f87a356da552224f45279cec853f82e6f77deec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/comments", "author": null, "committer": null, "parents": [{"sha": "ac7d724dc0ecc1ea34daae88f41f9b3870cfbc0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7d724dc0ecc1ea34daae88f41f9b3870cfbc0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7d724dc0ecc1ea34daae88f41f9b3870cfbc0f"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "243c8db8a701384d09ee1b4107cb01a17c7b43e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "patch": "@@ -1,3 +1,15 @@\n+2013-04-11  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* debug.adb: Remove comment for -gnatd.G.\n+\n+2013-04-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Record_Equality.Suitable_Element):\n+\tRemove recursive routine, replace with...\n+\t(Expand_Record_Equality.Element_To_Compare): New subroutine,\n+\timplement iterative search for next element to compare.\n+\tAdd explanatory comment in the tagged case.\n+\n 2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb: remove spurious warning from non-empty loop."}, {"sha": "f6f69cb4b2a3f04b1d5411418629535ed3407281", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,7 @@ package body Debug is\n    --  d.D  Strict Alfa mode\n    --  d.E  Force Alfa mode for gnat2why\n    --  d.F  Alfa mode\n-   --  d.G  Precondition only mode for gnat2why\n+   --  d.G\n    --  d.H  Standard package only mode for gnat2why\n    --  d.I  SCIL generation mode\n    --  d.J  Disable parallel SCIL generation mode"}, {"sha": "8083898d557807ec3c864c72089d847c9ca5e04f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6b670dcfa7ac055e5ac802aecf3c75dfa8857fbc", "patch": "@@ -10889,53 +10889,60 @@ package body Exp_Ch4 is\n \n       First_Time : Boolean := True;\n \n-      function Suitable_Element (C : Entity_Id) return Entity_Id;\n-      --  Return the first field to compare beginning with C, skipping the\n-      --  inherited components.\n+      function Element_To_Compare (C : Entity_Id) return Entity_Id;\n+      --  Return the next discriminant or component to compare, starting with\n+      --  C, skipping inherited components.\n \n-      ----------------------\n-      -- Suitable_Element --\n-      ----------------------\n+      ------------------------\n+      -- Element_To_Compare --\n+      ------------------------\n \n-      function Suitable_Element (C : Entity_Id) return Entity_Id is\n+      function Element_To_Compare (C : Entity_Id) return Entity_Id is\n+         Comp : Entity_Id;\n       begin\n-         if No (C) then\n-            return Empty;\n+         Comp := C;\n \n-         elsif Ekind (C) /= E_Discriminant\n-           and then Ekind (C) /= E_Component\n-         then\n-            return Suitable_Element (Next_Entity (C));\n+         loop\n+            --  Exit loop when the next element to be compared is found, or\n+            --  there is no more such element.\n \n-         --  Below test for C /= Original_Record_Component (C) is dubious\n-         --  if Typ is a constrained record subtype???\n+            exit when No (Comp);\n \n-         elsif Is_Tagged_Type (Typ)\n-           and then C /= Original_Record_Component (C)\n-         then\n-            return Suitable_Element (Next_Entity (C));\n+            exit when Ekind_In (Comp, E_Discriminant, E_Component)\n+              and then not (\n \n-         elsif Chars (C) = Name_uTag then\n-            return Suitable_Element (Next_Entity (C));\n+              --  Skip inherited components\n \n-         --  The .NET/JVM version of type Root_Controlled contains two fields\n-         --  which should not be considered part of the object. To achieve\n-         --  proper equiality between two controlled objects on .NET/JVM, skip\n-         --  field _parent whenever it is of type Root_Controlled.\n+              --  Note: for a tagged type, we always generate the \"=\" primitive\n+              --  for the base type (not on the first subtype), so the test for\n+              --  Comp /= Original_Record_Component (Comp) is True for\n+              --  inherited components only.\n \n-         elsif Chars (C) = Name_uParent\n-           and then VM_Target /= No_VM\n-           and then Etype (C) = RTE (RE_Root_Controlled)\n-         then\n-            return Suitable_Element (Next_Entity (C));\n+              (Is_Tagged_Type (Typ)\n+                 and then Comp /= Original_Record_Component (Comp))\n \n-         elsif Is_Interface (Etype (C)) then\n-            return Suitable_Element (Next_Entity (C));\n+              --  Skip _Tag\n \n-         else\n-            return C;\n-         end if;\n-      end Suitable_Element;\n+              or else Chars (Comp) = Name_uTag\n+\n+              --  The .NET/JVM version of type Root_Controlled contains two\n+              --  fields which should not be considered part of the object. To\n+              --  achieve proper equiality between two controlled objects on\n+              --  .NET/JVM, skip _Parent whenever it has type Root_Controlled.\n+\n+              or else (Chars (Comp) = Name_uParent\n+                and then VM_Target /= No_VM\n+                and then Etype (Comp) = RTE (RE_Root_Controlled))\n+\n+              --  Skip interface elements (secondary tags???)\n+\n+              or else Is_Interface (Etype (Comp)));\n+\n+            Next_Entity (Comp);\n+         end loop;\n+\n+         return Comp;\n+      end Element_To_Compare;\n \n    --  Start of processing for Expand_Record_Equality\n \n@@ -10951,7 +10958,7 @@ package body Exp_Ch4 is\n       --     and then Lhs.Cmpn = Rhs.Cmpn\n \n       Result := New_Reference_To (Standard_True, Loc);\n-      C := Suitable_Element (First_Entity (Typ));\n+      C := Element_To_Compare (First_Entity (Typ));\n       while Present (C) loop\n          declare\n             New_Lhs : Node_Id;\n@@ -10995,7 +11002,7 @@ package body Exp_Ch4 is\n             end if;\n          end;\n \n-         C := Suitable_Element (Next_Entity (C));\n+         C := Element_To_Compare (Next_Entity (C));\n       end loop;\n \n       return Result;"}]}