{"sha": "65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyODlhM2E0MmU2MGViZmUyM2Y4NThjY2ZhMGU2NmIxM2U4NDRlZA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-07T03:25:07Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-07T03:25:07Z"}, "message": "c-lex.c (init_c_lex): Request #define / #undef callbacks for verbose DWARF[2] debugging.\n\n        * c-lex.c (init_c_lex): Request #define / #undef callbacks\n        for verbose DWARF[2] debugging.\n        (cb_define, cb_undef): The new callbacks.\n        * toplev.h (debug_define, debug_undef): Make const correct.\n        * toplev.c (debug_define, debug_undef): Similarly.  Do not\n        perform the verbosity tests here anymore.\n\nFrom-SVN: r38756", "tree": {"sha": "2c0fbef84f707d26233ad70de66c06425970b8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0fbef84f707d26233ad70de66c06425970b8f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/comments", "author": null, "committer": null, "parents": [{"sha": "f759eb8bf0d98603f2e6930126e517ed995a64a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f759eb8bf0d98603f2e6930126e517ed995a64a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f759eb8bf0d98603f2e6930126e517ed995a64a8"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "2e6206c459bf617be4209931603e90247c5625f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "patch": "@@ -1,3 +1,12 @@\n+2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * c-lex.c (init_c_lex): Request #define / #undef callbacks\n+        for verbose DWARF[2] debugging.\n+        (cb_define, cb_undef): The new callbacks.\n+        * toplev.h (debug_define, debug_undef): Make const correct.\n+        * toplev.c (debug_define, debug_undef): Similarly.  Do not   \n+        perform the verbosity tests here anymore.\n+\n 2001-01-07  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* reload.c (subst_reloads): Take INSN argument.  When"}, {"sha": "0cddf7e4937621e8d802becd201597422a3295ae", "filename": "gcc/c-lex.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "patch": "@@ -92,6 +92,8 @@ static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n static void cb_ident\t\tPARAMS ((cpp_reader *, const cpp_string *));\n static void cb_file_change    PARAMS ((cpp_reader *, const cpp_file_change *));\n static void cb_def_pragma\tPARAMS ((cpp_reader *));\n+static void cb_define\t\tPARAMS ((cpp_reader *, cpp_hashnode *));\n+static void cb_undef\t\tPARAMS ((cpp_reader *, cpp_hashnode *));\n \f\n const char *\n init_c_lex (filename)\n@@ -123,6 +125,14 @@ init_c_lex (filename)\n   parse_in->cb.file_change = cb_file_change;\n   parse_in->cb.def_pragma = cb_def_pragma;\n \n+  /* Set the debug callbacks if we can use them.  */\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && (write_symbols == DWARF_DEBUG || write_symbols == DWARF2_DEBUG))\n+    {\n+      parse_in->cb.define = cb_define;\n+      parse_in->cb.undef = cb_undef;\n+    }\n+\n   if (filename == 0 || !strcmp (filename, \"-\"))\n     filename = \"stdin\";\n \n@@ -317,6 +327,24 @@ cb_def_pragma (pfile)\n     }\n }\n \n+/* #define callback for DWARF and DWARF2 debug info.  */\n+static void\n+cb_define (pfile, node)\n+     cpp_reader *pfile;\n+     cpp_hashnode *node;\n+{\n+  debug_define (lineno, (const char *) cpp_macro_definition (pfile, node));\n+}\n+\n+/* #undef callback for DWARF and DWARF2 debug info.  */\n+static void\n+cb_undef (pfile, node)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     cpp_hashnode *node;\n+{\n+  debug_undef (lineno, (const char *) node->name);\n+}\n+\n /* Parse a '\\uNNNN' or '\\UNNNNNNNN' sequence.\n \n    [lex.charset]: The character designated by the universal-character-name "}, {"sha": "160813710058ed20728728b113feb8a8fce6225a", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "patch": "@@ -5109,44 +5109,40 @@ debug_end_source_file (lineno)\n #endif\n }\n \n-/* Called from check_newline in c-parse.y.  The `buffer' parameter contains\n+/* Called from cb_define in c-lex.c.  The `buffer' parameter contains\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n \n void\n debug_define (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n-     register char *buffer ATTRIBUTE_UNUSED;\n+     register const char *buffer ATTRIBUTE_UNUSED;\n {\n #ifdef DWARF_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF_DEBUG)\n+  if (write_symbols == DWARF_DEBUG)\n     dwarfout_define (lineno, buffer);\n #endif /* DWARF_DEBUGGING_INFO  */\n #ifdef DWARF2_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF2_DEBUG)\n+  if (write_symbols == DWARF2_DEBUG)\n     dwarf2out_define (lineno, buffer);\n #endif /* DWARF2_DEBUGGING_INFO  */\n }\n \n-/* Called from check_newline in c-parse.y.  The `buffer' parameter contains\n+/* Called from cb_undef in c-lex.c.  The `buffer' parameter contains\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n \n void\n debug_undef (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n-     register char *buffer ATTRIBUTE_UNUSED;\n+     register const char *buffer ATTRIBUTE_UNUSED;\n {\n #ifdef DWARF_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF_DEBUG)\n+  if (write_symbols == DWARF_DEBUG)\n     dwarfout_undef (lineno, buffer);\n #endif /* DWARF_DEBUGGING_INFO  */\n #ifdef DWARF2_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF2_DEBUG)\n+  if (write_symbols == DWARF2_DEBUG)\n     dwarf2out_undef (lineno, buffer);\n #endif /* DWARF2_DEBUGGING_INFO  */\n }"}, {"sha": "4e029c0861fe54749988bc58a53f297c568a8e74", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65289a3a42e60ebfe23f858ccfa0e66b13e844ed/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=65289a3a42e60ebfe23f858ccfa0e66b13e844ed", "patch": "@@ -39,8 +39,8 @@ extern char *file_name_nondirectory\tPARAMS ((const char *));\n extern void print_time\t\t\tPARAMS ((const char *, long));\n extern void debug_start_source_file\tPARAMS ((const char *));\n extern void debug_end_source_file\tPARAMS ((unsigned));\n-extern void debug_define\t\tPARAMS ((unsigned, char *));\n-extern void debug_undef\t\t\tPARAMS ((unsigned, char *));\n+extern void debug_define\t\tPARAMS ((unsigned, const char *));\n+extern void debug_undef\t\t\tPARAMS ((unsigned, const char *));\n extern int debug_ignore_block\t\tPARAMS ((union tree_node *));\n extern void fatal\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;"}]}