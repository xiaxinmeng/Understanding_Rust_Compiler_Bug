{"sha": "42db600dba6adb352854e1eeb909fc3e7a2d892a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJkYjYwMGRiYTZhZGIzNTI4NTRlMWVlYjkwOWZjM2U3YTJkODkyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-16T22:09:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-16T22:09:05Z"}, "message": "re PR c++/49229 ([C++0x][SFINAE] ICE with variadics and depending non-type default parameter)\n\n\tPR c++/49229\n\t* pt.c (tsubst_decl) [FUNCTION_DECL]: Handle substitution failure.\n\nFrom-SVN: r175120", "tree": {"sha": "1c49dd0ed0225bd75e52939828942e8090467921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c49dd0ed0225bd75e52939828942e8090467921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42db600dba6adb352854e1eeb909fc3e7a2d892a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42db600dba6adb352854e1eeb909fc3e7a2d892a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42db600dba6adb352854e1eeb909fc3e7a2d892a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42db600dba6adb352854e1eeb909fc3e7a2d892a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80390766bd24c78c10fe3a328a82a233ef46c7cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80390766bd24c78c10fe3a328a82a233ef46c7cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80390766bd24c78c10fe3a328a82a233ef46c7cb"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "000a78149a4198cea161129174a939320adc1c86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=42db600dba6adb352854e1eeb909fc3e7a2d892a", "patch": "@@ -1,5 +1,8 @@\n 2011-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49229\n+\t* pt.c (tsubst_decl) [FUNCTION_DECL]: Handle substitution failure.\n+\n \tPR c++/49251\n \t* semantics.c (finish_id_expression): Mark even dependent\n \tvariables as used."}, {"sha": "1008b3be399a810ec871ec5fe4bef8757b2d2434", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=42db600dba6adb352854e1eeb909fc3e7a2d892a", "patch": "@@ -9548,6 +9548,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n                                           (DECL_TEMPLATE_RESULT\n                                                  (DECL_TI_TEMPLATE (t))),\n \t\t\t\t\t   args, complain, in_decl);\n+\t    if (argvec == error_mark_node)\n+\t      RETURN (error_mark_node);\n \n \t    /* Check to see if we already have this specialization.  */\n \t    hash = hash_tmpl_and_args (gen_tmpl, argvec);"}, {"sha": "677ac710fda3b652ca702ca62b3df8433936a679", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42db600dba6adb352854e1eeb909fc3e7a2d892a", "patch": "@@ -1,5 +1,8 @@\n 2011-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49229\n+\t* g++.dg/cpp0x/sfinae26.C: New.\n+\n \tPR c++/49251\n \t* g++.dg/cpp0x/variadic113.C: New.\n "}, {"sha": "5b8cdd9f5457d5885132b524a9b79cc16c38081e", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae26.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42db600dba6adb352854e1eeb909fc3e7a2d892a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C?ref=42db600dba6adb352854e1eeb909fc3e7a2d892a", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/49229\n+// { dg-options -std=c++0x }\n+\n+extern void* enabler;\n+\n+template<bool, class = void>\n+struct enable_if {};\n+\n+template<class T>\n+struct enable_if<true, T> {\n+  typedef T type;\n+};\n+\n+template<class... Bn>\n+struct and_;\n+\n+template<class B1>\n+struct and_<B1> : B1 {};\n+\n+template<class, class>\n+struct is_same {\n+  static constexpr bool value = false;\n+};\n+\n+template<class T>\n+struct is_same<T, T> {\n+  static constexpr bool value = true;\n+};\n+\n+template<class... T>\n+struct S {\n+  template<class... U,\n+    typename enable_if<and_<is_same<T, U>...>::value>::type*& = enabler\n+  >\n+  S(U...){} // #\n+};\n+\n+S<bool> s(0);\t\t\t// { dg-error \"no match\" }"}]}