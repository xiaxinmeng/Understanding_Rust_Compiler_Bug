{"sha": "d37c81f476c17d292943189335d745c3fb817b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3YzgxZjQ3NmMxN2QyOTI5NDMxODkzMzVkNzQ1YzNmYjgxN2I3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T08:41:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T08:41:00Z"}, "message": "i386: Optimize {,v}{,p}movmsk{b,ps,pd} followed by sign extension [PR91824]\n\nSome time ago, patterns were added to optimize move mask followed by zero\nextension from 32 bits to 64 bit.  As the testcase shows, the intrinsics\nactually return int, not unsigned int, so it will happen quite often that\none actually needs sign extension instead of zero extension.  Except for\nvpmovmskb with 256-bit operand, sign vs. zero extension doesn't make a\ndifference, as we know the bit 31 will not be set (the source will have 2 or\n4 doubles, 4 or 8 floats or 16 or 32 chars).\nSo, for the floating point patterns, this patch just uses a code iterator\nso that we handle both zero extend and sign extend, and for the byte one\nadds a separate pattern for the 128-bit operand.\n\n2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/91824\n\t* config/i386/sse.md\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext): Renamed to ...\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext): ... this.  Use\n\tany_extend code iterator instead of always zero_extend.\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt): Renamed to ...\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_lt): ... this.\n\tUse any_extend code iterator instead of always zero_extend.\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift): Renamed to ...\n\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_shift): ... this.\n\tUse any_extend code iterator instead of always zero_extend.\n\t(*sse2_pmovmskb_ext): New define_insn.\n\t(*sse2_pmovmskb_ext_lt): New define_insn_and_split.\n\n\t* gcc.target/i386/pr91824-2.c: New test.", "tree": {"sha": "c9dbfad184b61b58da3029b61d930fb6e60b6861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9dbfad184b61b58da3029b61d930fb6e60b6861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d37c81f476c17d292943189335d745c3fb817b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37c81f476c17d292943189335d745c3fb817b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d37c81f476c17d292943189335d745c3fb817b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37c81f476c17d292943189335d745c3fb817b7d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b285bebe6ad1e9f6416f0eb6cb69edc44db7813c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b285bebe6ad1e9f6416f0eb6cb69edc44db7813c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b285bebe6ad1e9f6416f0eb6cb69edc44db7813c"}], "stats": {"total": 145, "additions": 137, "deletions": 8}, "files": [{"sha": "4beb63934bc9984ca09aefa6ab93972cbb666010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d37c81f476c17d292943189335d745c3fb817b7d", "patch": "@@ -1,5 +1,19 @@\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/91824\n+\t* config/i386/sse.md\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext): Renamed to ...\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext): ... this.  Use\n+\tany_extend code iterator instead of always zero_extend.\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt): Renamed to ...\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_lt): ... this.\n+\tUse any_extend code iterator instead of always zero_extend.\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift): Renamed to ...\n+\t(*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_shift): ... this.\n+\tUse any_extend code iterator instead of always zero_extend.\n+\t(*sse2_pmovmskb_ext): New define_insn.\n+\t(*sse2_pmovmskb_ext_lt): New define_insn_and_split.\n+\n \tPR target/91824\n \t* config/i386/i386.md (*popcountsi2_zext): New define_insn_and_split.\n \t(*popcountsi2_zext_falsedep): New define_insn."}, {"sha": "f5ff2e930213b771704ed7d3dc74dbc10dc52026", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d37c81f476c17d292943189335d745c3fb817b7d", "patch": "@@ -15815,9 +15815,9 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext\"\n+(define_insn \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n+\t(any_extend:DI\n \t  (unspec:SI\n \t    [(match_operand:VF_128_256 1 \"register_operand\" \"x\")]\n \t    UNSPEC_MOVMSK)))]\n@@ -15844,9 +15844,9 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_lt\"\n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_lt\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n+\t(any_extend:DI\n \t  (unspec:SI\n \t    [(lt:VF_128_256\n \t       (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n@@ -15856,7 +15856,7 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(zero_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+\t(any_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n   \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -15880,9 +15880,9 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_zext_shift\"\n+(define_insn_and_split \"*<sse>_movmsk<ssemodesuffix><avxsizesuffix>_<u>ext_shift\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n+\t(any_extend:DI\n \t  (unspec:SI\n \t    [(subreg:VF_128_256\n \t       (ashiftrt:<sseintvecmode>\n@@ -15893,7 +15893,7 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(zero_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+\t(any_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n   \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -15932,6 +15932,23 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*sse2_pmovmskb_ext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (unspec:SI\n+\t    [(match_operand:V16QI 1 \"register_operand\" \"x\")]\n+\t    UNSPEC_MOVMSK)))]\n+  \"TARGET_64BIT && TARGET_SSE2\"\n+  \"%vpmovmskb\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn_and_split \"*<sse2_avx2>_pmovmskb_lt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n@@ -15975,6 +15992,28 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*sse2_pmovmskb_ext_lt\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (unspec:SI\n+\t    [(lt:V16QI (match_operand:V16QI 1 \"register_operand\" \"x\")\n+\t\t       (match_operand:V16QI 2 \"const0_operand\" \"C\"))]\n+\t    UNSPEC_MOVMSK)))]\n+  \"TARGET_64BIT && TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(sign_extend:DI (unspec:SI [(match_dup 1)] UNSPEC_MOVMSK)))]\n+  \"\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"sse2_maskmovdqu\"\n   [(set (match_operand:V16QI 0 \"memory_operand\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\")"}, {"sha": "842e4198917db7468ce626e045f98dbaf5ab8e6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d37c81f476c17d292943189335d745c3fb817b7d", "patch": "@@ -1,5 +1,8 @@\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/91824\n+\t* gcc.target/i386/pr91824-2.c: New test.\n+\n \tPR target/91824\n \t* gcc.target/i386/pr91824-1.c: New test.\n "}, {"sha": "bdf1295a76513077bdb2a5dd0aebe805b501f0db", "filename": "gcc/testsuite/gcc.target/i386/pr91824-2.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91824-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37c81f476c17d292943189335d745c3fb817b7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91824-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91824-2.c?ref=d37c81f476c17d292943189335d745c3fb817b7d", "patch": "@@ -0,0 +1,73 @@\n+/* PR target/91824 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler-not \"cltq\" } } */\n+/* { dg-final { scan-assembler-not \"movl\\t%eax, %eax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned long long\n+f1 (__m128i x)\n+{\n+  return _mm_movemask_epi8 (x);\n+}\n+\n+unsigned long long\n+f2 (__m128i x)\n+{\n+  return (unsigned) _mm_movemask_epi8 (x);\n+}\n+\n+unsigned long long\n+f3 (__m128 x)\n+{\n+  return _mm_movemask_ps (x);\n+}\n+\n+unsigned long long\n+f4 (__m128 x)\n+{\n+  return (unsigned) _mm_movemask_ps (x);\n+}\n+\n+unsigned long long\n+f5 (__m128d x)\n+{\n+  return _mm_movemask_pd (x);\n+}\n+\n+unsigned long long\n+f6 (__m128d x)\n+{\n+  return (unsigned) _mm_movemask_pd (x);\n+}\n+\n+unsigned long long\n+f7 (__m256 x)\n+{\n+  return _mm256_movemask_ps (x);\n+}\n+\n+unsigned long long\n+f8 (__m256 x)\n+{\n+  return (unsigned) _mm256_movemask_ps (x);\n+}\n+\n+unsigned long long\n+f9 (__m256d x)\n+{\n+  return _mm256_movemask_pd (x);\n+}\n+\n+unsigned long long\n+f10 (__m256d x)\n+{\n+  return (unsigned) _mm256_movemask_pd (x);\n+}\n+\n+unsigned long long\n+f11 (__m256i x)\n+{\n+  return (unsigned) _mm256_movemask_epi8 (x);\n+}"}]}