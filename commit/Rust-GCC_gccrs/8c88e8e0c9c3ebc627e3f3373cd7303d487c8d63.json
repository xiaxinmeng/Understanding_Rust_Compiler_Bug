{"sha": "8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "node_id": "C_kwDOANBUbNoAKDhjODhlOGUwYzljM2ViYzYyN2UzZjMzNzNjZDczMDNkNDg3YzhkNjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-11T14:40:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T14:40:22Z"}, "message": "Merge #1015 #1018\n\n1015: Add code generation for the slice type r=philberty a=philberty\n\nThis type must respect the layout of the FatPtr type in libcore. Rust\r\nimplements slices using Rustc types in libcore and uses a neat trick.\r\n\r\nAddresses #849\n\n1018: builtin-macros: Add more documentation for defining builtins r=CohenArthur a=CohenArthur\n\n`@mvvsmk` you might find this a little more clear. Sorry about the confusion!\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "2310cea8ca2a4dcd6196f97d3398001aa23a2ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2310cea8ca2a4dcd6196f97d3398001aa23a2ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK19WCRBK7hj4Ov3rIwAAExQIAJ1UfXduO3CQEpCSkW5PJBi+\nxA+dQ8ATaE4R6HsIq6Ha2BRF2JDFKtXfYQ/UCBxAlkBXZmZhwl/sAcaHEnHrcT8q\nP85S34XI6o/HxL7cOa8UCvPE/4cK46udt9qNi/QwioI+nHdfWyDj7LTQcW1yfD26\nPrYS+p/FoZm0gFuPcnqhFIwvnxyFVbpMJnClk+YaYn50SFgzItyzctVCsaOotOef\nZJY4n5cHApUwU6DCM9B3e0EPk+MQSH9xMuODeO42stpTwXXohK8HgycDFy8u2xH0\nWeSCRK8P0n9BCnQOtUNufiEDY+9Mj8XR35rUcC1/GFYiJmRh9LAfJsxz6FQVkk0=\n=n6iz\n-----END PGP SIGNATURE-----\n", "payload": "tree 2310cea8ca2a4dcd6196f97d3398001aa23a2ef5\nparent a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc\nparent 040b2ec9a6b20aa2441951e47f344d303dd61d7e\nparent c62e9eb5ee3be6e321a1bf725cbc797ba7fda593\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647009622 +0000\ncommitter GitHub <noreply@github.com> 1647009622 +0000\n\nMerge #1015 #1018\n\n1015: Add code generation for the slice type r=philberty a=philberty\n\nThis type must respect the layout of the FatPtr type in libcore. Rust\r\nimplements slices using Rustc types in libcore and uses a neat trick.\r\n\r\nAddresses #849\n\n1018: builtin-macros: Add more documentation for defining builtins r=CohenArthur a=CohenArthur\n\n`@mvvsmk` you might find this a little more clear. Sorry about the confusion!\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50fcbc2eb4dacdeaa733f2a8dbae6e727693bdc"}, {"sha": "040b2ec9a6b20aa2441951e47f344d303dd61d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040b2ec9a6b20aa2441951e47f344d303dd61d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040b2ec9a6b20aa2441951e47f344d303dd61d7e"}, {"sha": "c62e9eb5ee3be6e321a1bf725cbc797ba7fda593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62e9eb5ee3be6e321a1bf725cbc797ba7fda593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62e9eb5ee3be6e321a1bf725cbc797ba7fda593"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "07b95c78e5a33a9d3d48f138036ac53cd2aa0ca1", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "patch": "@@ -349,8 +349,38 @@ TyTyResolveCompile::visit (const TyTy::ArrayType &type)\n void\n TyTyResolveCompile::visit (const TyTy::SliceType &type)\n {\n-  // TODO\n-  gcc_unreachable ();\n+  if (ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type))\n+    return;\n+\n+  std::vector<Backend::typed_identifier> fields;\n+\n+  tree element_type\n+    = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n+  tree data_field_ty = build_pointer_type (element_type);\n+  Backend::typed_identifier data_field (\"data\", data_field_ty, Location ());\n+  fields.push_back (std::move (data_field));\n+\n+  // lookup usize\n+  TyTy::BaseType *usize = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_builtin (\"usize\", &usize);\n+  rust_assert (ok);\n+\n+  tree len_field_ty = TyTyResolveCompile::compile (ctx, usize);\n+  Backend::typed_identifier len_field (\"len\", len_field_ty, Location ());\n+  fields.push_back (std::move (len_field));\n+\n+  tree type_record = ctx->get_backend ()->struct_type (fields);\n+\n+  std::string named_struct_str\n+    = std::string (\"[\") + type.get_element_type ()->get_name () + \"]\";\n+  tree named_struct\n+    = ctx->get_backend ()->named_type (named_struct_str, type_record,\n+\t\t\t\t       type.get_ident ().locus);\n+\n+  ctx->push_type (named_struct);\n+  translated = named_struct;\n+\n+  ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n }\n \n void"}, {"sha": "37923cfc819066d41ddfd65e9b526a6fd67fab1c", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "patch": "@@ -22,6 +22,43 @@\n #include \"rust-ast.h\"\n #include \"rust-location.h\"\n \n+/**\n+ * This class provides a list of builtin macros implemented by the compiler.\n+ * The functions defined are called \"builtin transcribers\" in that they replace\n+ * the transcribing part of a macro definition.\n+ *\n+ * Like regular macro transcribers, they are responsible for building and\n+ * returning an AST fragment: basically a vector of AST nodes put together.\n+ *\n+ * Unlike regular declarative macros where each match arm has its own associated\n+ * transcriber, builtin transcribers are responsible for handling all match arms\n+ * of the macro. This means that you should take extra care when implementing a\n+ * builtin containing multiple match arms: You will probably need to do some\n+ * lookahead in order to determine which match arm the user intended to use.\n+ *\n+ * An example of this is the `assert!()` macro:\n+ *\n+ * ```\n+ *  macro_rules! assert {\n+ *\t($cond:expr $(,)?) => {{ ... }};\n+ *\t($cond : expr, $ ($arg : tt) +) = > {{ ... }};\n+ * }\n+ * ```\n+ *\n+ * If more tokens exist beyond the optional comma, they need to be handled as\n+ * a token-tree for a custom panic message.\n+ *\n+ * These builtin macros with empty transcribers are defined in the standard\n+ * library. They are marked with a special attribute, `#[rustc_builtin_macro]`.\n+ * When this attribute is present on a macro definition, the compiler should\n+ * look for an associated transcriber in the mappings. Meaning that you must\n+ * remember to insert your transcriber in the `builtin_macros` map of the\n+ *`Mappings`.\n+ *\n+ * This map is built as a static variable in the `insert_macro_def()` method\n+ * of the `Mappings` class.\n+ */\n+\n namespace Rust {\n class MacroBuiltin\n {"}, {"sha": "a0488b3912c57fad9ef155b153648a64fe7a9e3c", "filename": "gcc/testsuite/rust/execute/torture/slice1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs?ref=8c88e8e0c9c3ebc627e3f3373cd7303d487c8d63", "patch": "@@ -0,0 +1,27 @@\n+// { dg-additional-options \"-w\" }\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        let a = FatPtr { data, len };\n+        let b = Repr { raw: a };\n+        b.rust\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = 123;\n+    let b: *const i32 = &a;\n+    let c = slice_from_raw_parts(b, 1);\n+\n+    0\n+}"}]}