{"sha": "5bcd7de6402595fcaefcf1305e053fcb47dfc424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjZDdkZTY0MDI1OTVmY2FlZmNmMTMwNWUwNTNmY2I0N2RmYzQyNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-20T07:17:12Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-20T13:53:22Z"}, "message": "Simplify and split irange::copy_legacy_range into two functions.\n\ncopy_legacy_range was a small but complex function.  It was tricky\nto understand, and easy to introduce bugs into it.  It also did\nunnecessary work on some code paths.\n\nThis patch splits the function into two functions that are more\nefficient and easier to read (copy_to_legacy and\ncopy_legacy_to_multi_range).\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::operator=): Split up call to\n\tcopy_legacy_range into...\n\t(irange::copy_to_legacy): ...this.\n\t(irange::copy_legacy_to_multi_range): ...and this.\n\t(irange::copy_legacy_range): Remove.\n\t* value-range.h: Remove copoy_legacy_range.\n\tAdd copy_legacy_to_multi_range and copy_to_legacy.", "tree": {"sha": "e03de5dd59aa5348bb548c475aacde7319090c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e03de5dd59aa5348bb548c475aacde7319090c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bcd7de6402595fcaefcf1305e053fcb47dfc424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcd7de6402595fcaefcf1305e053fcb47dfc424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcd7de6402595fcaefcf1305e053fcb47dfc424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcd7de6402595fcaefcf1305e053fcb47dfc424/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7378bbf4778a09ccdf7e46dd81731ea4f7d638b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7378bbf4778a09ccdf7e46dd81731ea4f7d638b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7378bbf4778a09ccdf7e46dd81731ea4f7d638b"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "7847104050c12e26f1c8dc6299f2609cc56ba624", "filename": "gcc/value-range.cc", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcd7de6402595fcaefcf1305e053fcb47dfc424/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcd7de6402595fcaefcf1305e053fcb47dfc424/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=5bcd7de6402595fcaefcf1305e053fcb47dfc424", "patch": "@@ -35,18 +35,14 @@ along with GCC; see the file COPYING3.  If not see\n irange &\n irange::operator= (const irange &src)\n {\n-  if (legacy_mode_p () != src.legacy_mode_p ())\n+  if (legacy_mode_p ())\n     {\n-      copy_legacy_range (src);\n+      copy_to_legacy (src);\n       return *this;\n     }\n-  if (legacy_mode_p ())\n+  if (src.legacy_mode_p ())\n     {\n-      gcc_checking_assert (src.legacy_mode_p ());\n-      m_num_ranges = src.m_num_ranges;\n-      m_base[0] = src.m_base[0];\n-      m_base[1] = src.m_base[1];\n-      m_kind = src.m_kind;\n+      copy_legacy_to_multi_range (src);\n       return *this;\n     }\n \n@@ -81,44 +77,60 @@ irange::maybe_anti_range () const\n \t  && upper_bound () == wi::max_value (precision, sign));\n }\n \n-// Copy between a legacy and a multi-range, or vice-versa.\n-\n void\n-irange::copy_legacy_range (const irange &src)\n+irange::copy_legacy_to_multi_range (const irange &src)\n {\n-  gcc_checking_assert (src.legacy_mode_p () != legacy_mode_p ());\n+  gcc_checking_assert (src.legacy_mode_p ());\n+  gcc_checking_assert (!legacy_mode_p ());\n   if (src.undefined_p ())\n     set_undefined ();\n   else if (src.varying_p ())\n     set_varying (src.type ());\n-  else if (src.kind () == VR_ANTI_RANGE)\n-    {\n-      if (src.legacy_mode_p () && !range_has_numeric_bounds_p (&src))\n-\tset_varying (src.type ());\n-      else\n-\tset (src.min (), src.max (), VR_ANTI_RANGE);\n-    }\n-  else if (legacy_mode_p () && src.maybe_anti_range ())\n-    {\n-      int_range<3> tmp (src);\n-      tmp.invert ();\n-      set (tmp.min (), wide_int_to_tree (src.type (), tmp.upper_bound (0)),\n-\t   VR_ANTI_RANGE);\n-    }\n   else\n     {\n-      // If copying legacy to int_range, normalize any symbolics.\n-      if (src.legacy_mode_p () && !range_has_numeric_bounds_p (&src))\n+      if (range_has_numeric_bounds_p (&src))\n+\tset (src.min (), src.max (), src.kind ());\n+      else\n \t{\n \t  value_range cst (src);\n \t  cst.normalize_symbolics ();\n+\t  gcc_checking_assert (cst.varying_p () || cst.kind () == VR_RANGE);\n \t  set (cst.min (), cst.max ());\n-\t  return;\n \t}\n-      set (src.min (), src.max ());\n     }\n }\n \n+// Copy any type of irange into a legacy.\n+\n+void\n+irange::copy_to_legacy (const irange &src)\n+{\n+  gcc_checking_assert (legacy_mode_p ());\n+  // Copy legacy to legacy.\n+  if (src.legacy_mode_p ())\n+    {\n+      m_num_ranges = src.m_num_ranges;\n+      m_base[0] = src.m_base[0];\n+      m_base[1] = src.m_base[1];\n+      m_kind = src.m_kind;\n+      return;\n+    }\n+  // Copy multi-range to legacy.\n+  if (src.undefined_p ())\n+    set_undefined ();\n+  else if (src.varying_p ())\n+    set_varying (src.type ());\n+  else if (src.maybe_anti_range ())\n+    {\n+      int_range<3> r (src);\n+      r.invert ();\n+      // Use tree variants to save on tree -> wi -> tree conversions.\n+      set (r.tree_lower_bound (0), r.tree_upper_bound (0), VR_ANTI_RANGE);\n+    }\n+  else\n+    set (src.tree_lower_bound (), src.tree_upper_bound ());\n+}\n+\n // Swap min/max if they are out of order.  Return TRUE if further\n // processing of the range is necessary, FALSE otherwise.\n "}, {"sha": "760ee7723162b51f79e9af88d562f339878ae101", "filename": "gcc/value-range.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcd7de6402595fcaefcf1305e053fcb47dfc424/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcd7de6402595fcaefcf1305e053fcb47dfc424/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=5bcd7de6402595fcaefcf1305e053fcb47dfc424", "patch": "@@ -124,7 +124,8 @@ class irange\n   wide_int legacy_upper_bound (unsigned) const;\n   int value_inside_range (tree) const;\n   bool maybe_anti_range () const;\n-  void copy_legacy_range (const irange &);\n+  void copy_to_legacy (const irange &);\n+  void copy_legacy_to_multi_range (const irange &);\n \n private:\n   unsigned char m_num_ranges;"}]}