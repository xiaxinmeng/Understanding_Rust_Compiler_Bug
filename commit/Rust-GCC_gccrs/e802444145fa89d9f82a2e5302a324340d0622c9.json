{"sha": "e802444145fa89d9f82a2e5302a324340d0622c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwMjQ0NDE0NWZhODlkOWY4MmEyZTUzMDJhMzI0MzQwZDA2MjJjOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-26T15:24:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-26T15:24:45Z"}, "message": "re PR rtl-optimization/67443 (DSE removes required store instruction)\n\n2015-10-26  Richard Biener  <rguenther@suse.de>\n\tDominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\tPR middle-end/67443\n\t* alias.c (ao_ref_from_mem): Remove promoted subreg handling.\n\tProperly prune ref->ref for accesses outside of ref.\n\n\t* gcc.target/s390/pr67443.c: New testcase.\n\nCo-Authored-By: Dominik Vogt <vogt@linux.vnet.ibm.com>\n\nFrom-SVN: r229372", "tree": {"sha": "314271c235223775e02c6e174ae248fb8969e6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314271c235223775e02c6e174ae248fb8969e6cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e802444145fa89d9f82a2e5302a324340d0622c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e802444145fa89d9f82a2e5302a324340d0622c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e802444145fa89d9f82a2e5302a324340d0622c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e802444145fa89d9f82a2e5302a324340d0622c9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fec40d06dadf9cd5bf4adb0ee9a47f267e6c7693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec40d06dadf9cd5bf4adb0ee9a47f267e6c7693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec40d06dadf9cd5bf4adb0ee9a47f267e6c7693"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "95479f3793a46318e32962ca0f925d98712133e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e802444145fa89d9f82a2e5302a324340d0622c9", "patch": "@@ -1,3 +1,10 @@\n+2015-10-26  Richard Biener  <rguenther@suse.de>\n+\tDominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\tPR middle-end/67443\n+\t* alias.c (ao_ref_from_mem): Remove promoted subreg handling.\n+\tProperly prune ref->ref for accesses outside of ref.\n+\n 2015-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gimple-fold.c (replace_stmt_with_simplification): Don't allow"}, {"sha": "5c1ad34e088140606b74db74a80a58eefb84911f", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e802444145fa89d9f82a2e5302a324340d0622c9", "patch": "@@ -339,15 +339,16 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n       || !MEM_SIZE_KNOWN_P (mem))\n     return true;\n \n-  /* If the base decl is a parameter we can have negative MEM_OFFSET in\n-     case of promoted subregs on bigendian targets.  Trust the MEM_EXPR\n-     here.  */\n+  /* If MEM_OFFSET/MEM_SIZE get us outside of ref->offset/ref->max_size\n+     drop ref->ref.  */\n   if (MEM_OFFSET (mem) < 0\n-      && (MEM_SIZE (mem) + MEM_OFFSET (mem)) * BITS_PER_UNIT == ref->size)\n-    return true;\n+      || (ref->max_size != -1\n+\t  && ((MEM_OFFSET (mem) + MEM_SIZE (mem)) * BITS_PER_UNIT\n+\t      > ref->max_size)))\n+    ref->ref = NULL_TREE;\n \n-  /* Otherwise continue and refine size and offset we got from analyzing\n-     MEM_EXPR by using MEM_SIZE and MEM_OFFSET.  */\n+  /* Refine size and offset we got from analyzing MEM_EXPR by using\n+     MEM_SIZE and MEM_OFFSET.  */\n \n   ref->offset += MEM_OFFSET (mem) * BITS_PER_UNIT;\n   ref->size = MEM_SIZE (mem) * BITS_PER_UNIT;"}, {"sha": "fd5ade4ac889d2dda906638221dc3c308530d57d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e802444145fa89d9f82a2e5302a324340d0622c9", "patch": "@@ -1,3 +1,9 @@\n+2015-10-26  Richard Biener  <rguenther@suse.de>\n+\tDominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\tPR middle-end/67443\n+\t* gcc.target/s390/pr67443.c: New testcase.\n+\n 2015-10-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gfortran.dg/chmod_1.f90: Add suffix to the temporary filename to"}, {"sha": "e011a11882f029e0bed0aa2907db524b0e476c2e", "filename": "gcc/testsuite/gcc.target/s390/pr67443.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e802444145fa89d9f82a2e5302a324340d0622c9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr67443.c?ref=e802444145fa89d9f82a2e5302a324340d0622c9", "patch": "@@ -0,0 +1,49 @@\n+/* Test case for PR/67443.  */\n+\n+/* { dg-do run { target s390*-*-* } } */\n+/* { dg-prune-output \"call-clobbered register used for global register variable\" } */\n+/* { dg-options \"-march=z900 -fPIC -fomit-frame-pointer -O3\" } */\n+\n+#include <assert.h>\n+\n+/* Block all registers except the first three argument registers.  */\n+register long r0 asm (\"r0\");\n+register long r1 asm (\"r1\");\n+register long r5 asm (\"r5\");\n+register long r6 asm (\"r6\");\n+register long r7 asm (\"r7\");\n+register long r8 asm (\"r8\");\n+register long r9 asm (\"r9\");\n+register long r10 asm (\"r10\");\n+register long r11 asm (\"r11\");\n+\n+struct s_t\n+{\n+  unsigned f1 : 8;\n+  unsigned f2 : 24;\n+};\n+\n+__attribute__ ((noinline))\n+void foo (struct s_t *ps, int c, int i)\n+{\n+  /* Uses r2 as address register.  */\n+  ps->f1 = c;\n+  /* The calculation of the value is so expensive that it's cheaper to spill ps\n+     to the stack and reload it later (into a different register).\n+     ==> Uses r4 as address register.*/\n+  ps->f2 = i + i % 3;\n+  /* If dead store elimination fails to detect that the address in r2 during\n+     the first assignment is an alias of the address in r4 during the second\n+     assignment, it eliminates the first assignment and the f1 field is not\n+     written (bug).  */\n+}\n+\n+int main (void)\n+{\n+  struct s_t s = { 0x01u, 0x020304u };\n+\n+  foo (&s, 0, 0);\n+  assert (s.f1 == 0&& s.f2 == 0);\n+\n+  return 0;\n+}"}]}