{"sha": "d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4OGY2ZWEwYzVjNmQ5OWZjOWUzNGI5ODhmZTU1ZWNjNTljMTRlMA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-24T22:44:01Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-02-24T22:44:01Z"}, "message": "re PR ada/15479 (Ada manual problems)\n\nPR documentation/15479\n* gnat_rm.texi, gnat_ugn.texi: Where appropriate, replace `..'\nand `...' with `@dots{}' or `@enddots{}'.\n\nFrom-SVN: r132603", "tree": {"sha": "a013ff92b30edc882d0175833f978e314822b433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a013ff92b30edc882d0175833f978e314822b433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/comments", "author": null, "committer": null, "parents": [{"sha": "1992bbd9b9bd4790e7d1290082e2afbf9b9b983f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1992bbd9b9bd4790e7d1290082e2afbf9b9b983f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1992bbd9b9bd4790e7d1290082e2afbf9b9b983f"}], "stats": {"total": 170, "additions": 87, "deletions": 83}, "files": [{"sha": "9f7f60c54ed8ecb57a5016d250a47c81a57cc897", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "patch": "@@ -1,5 +1,9 @@\n 2008-02-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n+\tPR documentation/15479\n+\t* gnat_rm.texi, gnat_ugn.texi: Where appropriate, replace `..'\n+\tand `...' with `@dots{}' or `@enddots{}'.\n+\n \tPR documentation/15479\n \t* gnat_rm.texi, gnat_ugn.texi: Where appropriate, add @command,\n \tuse @command instead of @code, @option instead of @samp or @code,"}, {"sha": "17e6969a76a37c240c2e1b04621b8e9bb7c22f38", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "patch": "@@ -4650,7 +4650,7 @@ pragmas must appear in sequence:\n \n @smallexample @c ada\n pragma Warnings (Off, Pattern);\n-.. code where given warning is to be suppressed\n+@dots{} code where given warning is to be suppressed\n pragma Warnings (On, Pattern);\n @end smallexample\n \n@@ -11073,7 +11073,7 @@ system-independent manner.\n @item Ada.Decimal (F.2)\n This package provides constants describing the range of decimal numbers\n implemented, and also a decimal divide routine (analogous to the COBOL\n-verb DIVIDE .. GIVING .. REMAINDER ..)\n+verb DIVIDE @dots{} GIVING @dots{} REMAINDER @dots{})\n \n @item Ada.Direct_IO (A.8.4)\n This package provides input-output using a model of a set of records of"}, {"sha": "7595aed406ae0876c62299baeed7c783a233b7a7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d488f6ea0c5c6d99fc9e34b988fe55ecc59c14e0", "patch": "@@ -1786,7 +1786,7 @@ of the compiler (@pxref{Character Set Control}).\n @noindent\n The basic character set is Latin-1. This character set is defined by ISO\n standard 8859, part 1. The lower half (character codes @code{16#00#}\n-... @code{16#7F#)} is identical to standard ASCII coding, but the upper half\n+@dots{} @code{16#7F#)} is identical to standard ASCII coding, but the upper half\n is used to represent additional characters. These include extended letters\n used by European languages, such as French accents, the vowels with umlauts\n used in German, and the extra letter A-ring used in Swedish.\n@@ -3398,10 +3398,10 @@ finalizing the Ada run-time system along the way:\n @b{#include} <iostream>\n @b{using namespace} std;\n \n-void Check_Carnivore (Carnivore *obj) @{ ... @}\n-void Check_Domestic (Domestic *obj)   @{ ... @}\n-void Check_Animal (Animal *obj)       @{ ... @}\n-void Check_Dog (Dog *obj)             @{ ... @}\n+void Check_Carnivore (Carnivore *obj) @{@dots{}@}\n+void Check_Domestic (Domestic *obj)   @{@dots{}@}\n+void Check_Animal (Animal *obj)       @{@dots{}@}\n+void Check_Dog (Dog *obj)             @{@dots{}@}\n \n @b{extern} \"C\" @{\n   void adainit (void);\n@@ -4027,7 +4027,7 @@ Verbose mode. Full error output with source lines to @file{stdout}.\n Control level of validity checking. See separate section describing\n this feature.\n \n-@item ^-gnatw@var{xxx}^/WARNINGS=(@var{option}[,...])^\n+@item ^-gnatw@var{xxx}^/WARNINGS=(@var{option}[,@dots{}])^\n @cindex @option{^-gnatw^/WARNINGS^} (@command{gcc})\n Warning mode where\n ^@var{xxx} is a string of option letters that^the list of options^ denotes\n@@ -4048,7 +4048,7 @@ Wide character encoding method\n @cindex @option{-gnatx} (@command{gcc})\n Suppress generation of cross-reference information.\n \n-@item ^-gnaty^/STYLE_CHECKS=(option,option..)^\n+@item ^-gnaty^/STYLE_CHECKS=(option,option@dots{})^\n @cindex @option{^-gnaty^/STYLE_CHECKS^} (@command{gcc})\n Enable built-in style checks (@pxref{Style Checking}).\n \n@@ -4143,7 +4143,7 @@ Equivalent to @option{/OPTIMIZE=NONE}.\n This is the default behavior in the absence of an @option{/OPTIMIZE}\n qualifier.\n \n-@item /OPTIMIZE[=(keyword[,...])]\n+@item /OPTIMIZE[=(keyword[,@dots{}])]\n @cindex @option{/OPTIMIZE} (@code{GNAT COMPILE})\n Selects the level of optimization for your program. The supported\n keywords are as follows:\n@@ -5232,7 +5232,7 @@ an Assert pragma that checks the low bound, for example:\n @smallexample @c ada\n    procedure K (S : String) is\n       pragma Assert (S'First = 1);\n-      ...\n+      @dots{}\n @end smallexample\n \n @item -gnatwx\n@@ -5553,7 +5553,7 @@ the shift operators defined as intrinsic in package @code{Interfaces}\n and operands for attributes such as @code{Pos}. Checks are also made\n on individual component values for composite comparisons, and on the\n expressions in type conversions and qualified expressions. Checks are\n-also made on explicit ranges using .. (e.g. slices, loops etc).\n+also made on explicit ranges using @samp{..} (e.g. slices, loops etc).\n \n @item -gnatVp\n @emph{Validity checks for parameters.}\n@@ -5639,7 +5639,7 @@ temporary disabling of validity checks.\n @findex Style checking\n \n @noindent\n-The @option{-gnaty^x^(option,option,...)^} switch\n+The @option{-gnaty^x^(option,option,@dots{})^} switch\n @cindex @option{-gnaty} (@command{gcc})\n causes the compiler to\n enforce specified style rules. A limited set of style rules has been used\n@@ -5648,7 +5648,7 @@ to activate all or some of these checks. If the source program fails a\n specified style check, an appropriate warning message is given, preceded by\n the character sequence ``(style)''.\n @ifset vms\n-@code{(option,option,...)} is a sequence of keywords\n+@code{(option,option,@dots{})} is a sequence of keywords\n @end ifset\n @ifclear vms\n The string @var{x} is a sequence of letters or digits\n@@ -5724,7 +5724,7 @@ including @command{gnatprep} (where ``@code{--!}'' is used) and the SPARK\n annotation\n language (where ``@code{--#}'' is used). For the purposes of this rule, a\n special character is defined as being in one of the ASCII ranges\n-@code{16#21#..16#2F#} or @code{16#3A#..16#3F#}.\n+@code{16#21#@dots{}16#2F#} or @code{16#3A#@dots{}16#3F#}.\n Note that this usage is not permitted\n in GNAT implementation units (i.e. when @option{-gnatg} is used).\n \n@@ -6110,7 +6110,7 @@ X2 : Integer range 1 .. 5 := 5;\n X3 : Integer := Integer'Last;\n X4 : Integer range 1 .. 5 := 5;\n F  : Float := 2.0E+20;\n-...\n+@dots{}\n X1 := X1 + 1;\n X2 := X2 + 1;\n X3 := Integer (F);\n@@ -6670,7 +6670,7 @@ An implicit call to a run-time support routine\n (to meet the requirement of H.3.1(9) in a\n convenient manner).\n \n-@item @var{expr} && @var{expr} && @var{expr} ... && @var{expr}\n+@item @var{expr} && @var{expr} && @var{expr} @dots{} && @var{expr}\n A multiple concatenation (same effect as @var{expr} & @var{expr} &\n @var{expr}, but handled more efficiently).\n \n@@ -9413,7 +9413,7 @@ exception handlers are used. The reason is that certain sections of code\n have to be marked as non-abortable.\n \n If you use neither the @code{abort} statement, nor asynchronous transfer\n-of control (@code{select .. then abort}), then this distributed overhead\n+of control (@code{select @dots{} then abort}), then this distributed overhead\n is removed, which may have a general positive effect in improving\n overall performance.  Especially code involving frequent use of tasking\n constructs and controlled types will show much improved performance.\n@@ -9711,13 +9711,13 @@ package R is\n    pragma Inline (Q);\n end R;\n package body R is\n-   ...\n+   @dots{}\n end R;\n \n with R;\n procedure Main is\n begin\n-   ...\n+   @dots{}\n    R.Q;\n end Main;\n @end cartouche\n@@ -9798,16 +9798,16 @@ procedure R is\n    type Int2A is access Int2;\n    Int1V : Int1A;\n    Int2V : Int2A;\n-   ...\n+   @dots{}\n \n begin\n-   ...\n+   @dots{}\n    for J in Data'Range loop\n       if Data (J) = Int1V.all then\n          Int2V.all := Int2V.all + 1;\n       end if;\n    end loop;\n-   ...\n+   @dots{}\n end R;\n @end cartouche\n @end smallexample\n@@ -10457,7 +10457,7 @@ in which GNAT processes the ACVC tests.\n The @code{gnatchop} command has the form:\n \n @smallexample\n-$ gnatchop switches @var{file name} [@var{file name} @var{file name} ...]\n+$ gnatchop switches @var{file name} [@var{file name} @var{file name} @dots{}]\n       [@var{directory}]\n @end smallexample\n \n@@ -11676,9 +11676,9 @@ Skeletal code for a main procedure might be something like the following:\n @group\n with GUI, Comm;\n procedure App_Main is\n-   ...\n+   @dots{}\n begin\n-   ...\n+   @dots{}\n end App_Main;\n @end group\n @end smallexample\n@@ -12690,7 +12690,7 @@ source files.\n   with \"project1\", \"utilities.gpr\";\n   with \"/namings/apex.gpr\";\n   project Main is\n-    ...\n+    @dots{}\n @end group\n @end smallexample\n \n@@ -12817,7 +12817,7 @@ modified versions of some of the source files, without changing the original\n sources. This can be achieved through the @emph{project extension} facility.\n \n @smallexample @c projectfile\n-   project Modified_Utilities extends \"/baseline/utilities.gpr\" is ...\n+   project Modified_Utilities extends \"/baseline/utilities.gpr\" is @dots{}\n @end smallexample\n \n @noindent\n@@ -12896,7 +12896,7 @@ This project hierarchy will need to be extended as follows:\n Create project A1 that extends A, placing modified P1 there:\n \n @smallexample @c 0projectfile\n-project A1 extends \"(...)/A\" is\n+project A1 extends \"(@dots{})/A\" is\n end A1;\n @end smallexample\n \n@@ -12905,8 +12905,8 @@ Create project C1 that \"extends all\" C and imports A1, placing modified\n P3 there:\n \n @smallexample @c 0projectfile\n-with \"(...)/A1\";\n-project C1 extends all \"(...)/C\" is\n+with \"(@dots{})/A1\";\n+project C1 extends all \"(@dots{})/C\" is\n end C1;\n @end smallexample\n @end enumerate\n@@ -12971,7 +12971,7 @@ an attribute declaration.\n    Mode : Mode_Type := external (\"MODE\");\n    case Mode is\n      when \"Debug\" =>\n-        ...\n+        @dots{}\n @end group\n @end smallexample\n \n@@ -13031,7 +13031,7 @@ the project file for an imported project.\n   with \"/global/apex.gpr\";\n   project Example is\n     package Naming renames Apex.Naming;\n-    ...\n+    @dots{}\n   end Example;\n @end group\n @end smallexample\n@@ -13801,7 +13801,7 @@ end Proj4;\n -- Ada source file:\n with Pack;\n procedure Foo_Main is\n-   ...\n+   @dots{}\n end Foo_Main;\n @end group\n @end smallexample\n@@ -14598,7 +14598,7 @@ use the @code{gnat} driver (see @ref{The GNAT Driver and Project Files}).\n @noindent\n The command invocation for @code{gnatxref} is:\n @smallexample\n-$ gnatxref [switches] sourcefile1 [sourcefile2 ...]\n+$ gnatxref [switches] sourcefile1 [sourcefile2 @dots{}]\n @end smallexample\n \n @noindent\n@@ -14730,7 +14730,7 @@ The command line for @code{gnatfind} is:\n \n @smallexample\n $ gnatfind [switches] pattern[:sourcefile[:line[:column]]]\n-      [file1 file2 ...]\n+      [file1 file2 @dots{}]\n @end smallexample\n \n @noindent\n@@ -14764,7 +14764,7 @@ is a decimal integer identifying the exact location on the\n line of the first character of the identifier for the\n entity reference. Columns are numbered from 1.\n \n-@item file1 file2 ...\n+@item file1 file2 @dots{}\n The search will be restricted to these source files. If none are given, then\n the search will be done for every library file in the search path.\n These file must appear only after the pattern or sourcefile.\n@@ -14774,11 +14774,11 @@ specifying 'source*.adb' is the same as giving every file in the current\n directory whose name starts with 'source' and whose extension is 'adb'.\n \n The location of the spec of the entity will always be displayed, even if it\n-isn't in one of file1, file2,... The occurrences of the entity in the\n+isn't in one of file1, file2,@enddots{}  The occurrences of the entity in the\n separate units of the ones given on the command line will also be displayed.\n \n Note that if you specify at least one file in this part, @code{gnatfind} may\n-sometimes not be able to find the body of the subprograms...\n+sometimes not be able to find the body of the subprograms.\n \n @end table\n \n@@ -15042,7 +15042,7 @@ reference manual style BNF is as follows\n @leftskip=.5cm\n @end iftex\n @group\n-regexp ::= term @{| term@}   -- alternation (term or term ...)\n+regexp ::= term @{| term@}   -- alternation (term or term @dots{})\n \n term ::= item @{item@}       -- concatenation (item then item)\n \n@@ -15632,16 +15632,16 @@ These switches allow control over line length and indentation.\n @table @option\n @item ^-M@i{nnn}^/LINE_LENGTH_MAX=@i{nnn}^\n @cindex @option{^-M^/LINE_LENGTH^} (@command{gnatpp})\n-Maximum line length, @i{nnn} from 32 ..256, the default value is 79\n+Maximum line length, @i{nnn} from 32@dots{}256, the default value is 79\n \n @item ^-i@i{nnn}^/INDENTATION_LEVEL=@i{nnn}^\n @cindex @option{^-i^/INDENTATION_LEVEL^} (@command{gnatpp})\n-Indentation level, @i{nnn} from 1 .. 9, the default value is 3\n+Indentation level, @i{nnn} from 1@dots{}9, the default value is 3\n \n @item ^-cl@i{nnn}^/CONTINUATION_INDENT=@i{nnn}^\n @cindex @option{^-cl^/CONTINUATION_INDENT^} (@command{gnatpp})\n Indentation level for continuation lines (relative to the line being\n-continued), @i{nnn} from 1 .. 9.\n+continued), @i{nnn} from 1@dots{}9.\n The default\n value is one less then the (normal) indentation level, unless the\n indentation is set to 1 (in which case the default value for continuation\n@@ -17396,7 +17396,7 @@ The preprocessor conditional inclusion commands have the form\n    lines\n #elsif @i{expression} [then]\n    lines\n-...\n+@dots{}\n #else\n    lines\n #end if;\n@@ -18287,7 +18287,7 @@ write:\n @smallexample @c projectfile\n with \"my_lib\";\n project My_Proj is\n-  ...\n+  @dots{}\n end My_Proj;\n @end smallexample\n \n@@ -18697,7 +18697,7 @@ which might help you in case your project has a lot of subdirectories.\n ##    csc is put in the top level directory (where the Makefile is).\n ##       toplevel_dir __ first_csc  (sources) __ lib (will contain the library)\n ##                    \\_ second_csc (sources) __ lib (will contain the library)\n-##                    \\_ ...\n+##                    \\_ @dots{}\n ## Although this Makefile is build for shared library, it is easy to modify\n ## to build partial link objects instead (modify the lines with -shared and\n ## gnatlink below)\n@@ -18719,7 +18719,7 @@ MAIN=main\n # The following variable should give the directory containing libgnat.so\n # You can get this directory through 'gnatls -v'. This is usually the last\n # directory in the Object_Path.\n-GLIB=...\n+GLIB=@dots{}\n \n # The directories for the libraries\n # (This macro expands the list of CSC to the list of shared libraries, you\n@@ -18769,7 +18769,7 @@ In most makefiles, you will have to specify a list of directories, and\n store it in a variable. For small projects, it is often easier to\n specify each of them by hand, since you then have full control over what\n is the proper order for these directories, which ones should be\n-included...\n+included.\n \n However, in larger projects, which might involve hundreds of\n subdirectories, it might be more convenient to generate this list\n@@ -18780,7 +18780,7 @@ general, gives you more control over the list. It involves wildcard\n characters, that are automatically expanded by @command{make}. Its\n shortcoming is that you need to explicitly specify some of the\n organization of your project, such as for instance the directory tree\n-depth, whether some directories are found in a separate tree,...\n+depth, whether some directories are found in a separate tree, @enddots{}\n \n The second method is the most general one. It requires an external\n program, called @command{find}, which is standard on all Unix systems. All\n@@ -20143,7 +20143,7 @@ flagged (since @code{1..N} is formally a ``range''):\n \n @smallexample @c ada\n for I in 1 .. N loop\n-   ...\n+   @dots{}\n end loop;\n @end smallexample\n \n@@ -20152,9 +20152,9 @@ Declaring an explicit subtype solves the problem:\n \n @smallexample @c ada\n subtype S is Integer range 1..N;\n-...\n+@dots{}\n for I in S loop\n-   ...\n+   @dots{}\n end loop;\n @end smallexample\n \n@@ -21783,7 +21783,7 @@ If you do not specify an extension, it will default to @file{htm}.\n @item -f\n @cindex @option{-f} (@code{gnathtml})\n By default, gnathtml will generate html links only for global entities\n-('with'ed units, global variables and types,...). If you specify\n+('with'ed units, global variables and types,@dots{}).  If you specify\n @option{-f} on the command line, then links will be generated for local\n entities too.\n \n@@ -22641,8 +22641,8 @@ $ addr2line --exe=stb 0x401373 0x40138b 0x40139c 0x401335 0x4011c4\n 0040138B at d:/stb/stb.adb:10\n 0040139C at d:/stb/stb.adb:14\n 00401335 at d:/stb/b~stb.adb:104\n-004011C4 at /build/.../crt1.c:200\n-004011F1 at /build/.../crt1.c:222\n+004011C4 at /build/@dots{}/crt1.c:200\n+004011F1 at /build/@dots{}/crt1.c:222\n 77E892A4 in ?? at ??:0\n @end smallexample\n \n@@ -22666,8 +22666,8 @@ $ addr2line --exe=stb --functions --demangle=gnat 0x401373 0x40138b\n 0040138B in stb.p2 at d:/stb/stb.adb:10\n 0040139C in stb at d:/stb/stb.adb:14\n 00401335 in main at d:/stb/b~stb.adb:104\n-004011C4 in <__mingw_CRTStartup> at /build/.../crt1.c:200\n-004011F1 in <mainCRTStartup> at /build/.../crt1.c:222\n+004011C4 in <__mingw_CRTStartup> at /build/@dots{}/crt1.c:200\n+004011F1 in <mainCRTStartup> at /build/@dots{}/crt1.c:222\n @end smallexample\n \n @noindent\n@@ -23312,7 +23312,7 @@ of declarations:\n @cartouche\n X, Y : Integer := Init_Func;\n Q : String (X .. Y) := \"abc\";\n-...\n+@dots{}\n for Q'Address use Compute_Address;\n @end cartouche\n @end smallexample\n@@ -23327,7 +23327,7 @@ that @code{Q} is declared. To achieve the intended effect, write instead:\n X, Y : Integer := Init_Func;\n Q_Address : constant Address := Compute_Address;\n Q : String (X .. Y) := \"abc\";\n-...\n+@dots{}\n for Q'Address use Q_Address;\n @end cartouche\n @end group\n@@ -25805,7 +25805,7 @@ of that unit before elaborating the unit doing the @code{with}'ing:\n @group\n @cartouche\n with Unit_1;\n-package Unit_2 is ...\n+package Unit_2 is @dots{}\n @end cartouche\n @end group\n @end smallexample\n@@ -26464,7 +26464,7 @@ end Math;\n package body Math is\n    function Sqrt (Arg : Float) return Float is\n    begin\n-         ...\n+         @dots{}\n    end Sqrt;\n end Math;\n @end group\n@@ -26477,7 +26477,7 @@ end Stuff;\n with Stuff;\n procedure Main is\n begin\n-   ...\n+   @dots{}\n end Main;\n @end group\n @end cartouche\n@@ -26524,15 +26524,15 @@ that is not a general rule that can be followed in all cases. Consider\n @smallexample @c ada\n @group\n @cartouche\n-package X is ...\n+package X is @dots{}\n \n-package Y is ...\n+package Y is @dots{}\n \n with X;\n-package body Y is ...\n+package body Y is @dots{}\n \n with Y;\n-package body X is ...\n+package body X is @dots{}\n @end cartouche\n @end group\n @end smallexample\n@@ -26546,7 +26546,7 @@ the body of @code{X} @code{with}'s @code{Y},\n which means you would have to\n elaborate the body of @code{Y} first, but that @code{with}'s @code{X},\n which means\n-you have to elaborate the body of @code{X} first, but ... and we have a\n+you have to elaborate the body of @code{X} first, but @dots{} and we have a\n loop that cannot be broken.\n \n It is true that the binder can in many cases guess an order of elaboration\n@@ -27658,9 +27658,9 @@ constants to control which code is executed.\n @smallexample @c ada\n @group\n FP_Initialize_Required : constant Boolean := True;\n-...\n+@dots{}\n if FP_Initialize_Required then\n-...\n+@dots{}\n end if;\n @end group\n @end smallexample\n@@ -27684,7 +27684,7 @@ something like:\n package Config is\n    FP_Initialize_Required : constant Boolean := True;\n    Reset_Available        : constant Boolean := False;\n-   ...\n+   @dots{}\n end Config;\n @end group\n @end smallexample\n@@ -27803,8 +27803,8 @@ to add a @code{null} statement.\n \n @smallexample @c ada\n @group\n-if ... then\n-   ... -- some statements\n+if @dots{} then\n+   @dots{} -- some statements\n else\n    pragma Assert (Num_Cases < 10);\n    null;\n@@ -27830,13 +27830,13 @@ if Small_Machine then\n    declare\n       X : Bit_String (1 .. 10);\n    begin\n-      ...\n+      @dots{}\n    end;\n else\n    declare\n       X : Large_Bit_String (1 .. 1000);\n    begin\n-      ...\n+      @dots{}\n    end;\n end if;\n @end group\n@@ -27916,9 +27916,9 @@ to compile with an Ada 95 compiler. Conceptually you want to say:\n @smallexample @c ada\n @group\n if Ada_2005 then\n-   ... neat Ada 2005 code\n+   @dots{} neat Ada 2005 code\n else\n-   ... not quite as neat Ada 95 code\n+   @dots{} not quite as neat Ada 95 code\n end if;\n @end group\n @end smallexample\n@@ -28844,15 +28844,15 @@ Some uses of character literals are ambiguous.  Since Ada 95 has introduced\n character literals that were legal in Ada 83 are illegal in Ada 95.\n For example:\n @smallexample @c ada\n-   for Char in 'A' .. 'Z' loop ... end loop;\n+   for Char in 'A' .. 'Z' loop @dots{} end loop;\n @end smallexample\n \n @noindent\n The problem is that @code{'A'} and @code{'Z'} could be from either\n @code{Character} or @code{Wide_Character}.  The simplest correction\n is to make the type explicit; e.g.:\n @smallexample @c ada\n-   for Char in Character range 'A' .. 'Z' loop ... end loop;\n+   for Char in Character range 'A' .. 'Z' loop @dots{} end loop;\n @end smallexample\n \n @item New reserved words\n@@ -30413,7 +30413,7 @@ suffix) has the following structure:\n EXPORTS\n    @i{symbol1}\n    @i{symbol2}\n-   ...\n+   @dots{}\n @end cartouche\n @end group\n @end smallexample\n@@ -30574,7 +30574,7 @@ To build the DLL you must use @command{gcc}'s @option{-shared}\n option. It is quite simple to use this method:\n \n @smallexample\n-$ gcc -shared -o api.dll obj1.o obj2.o ...\n+$ gcc -shared -o api.dll obj1.o obj2.o @dots{}\n @end smallexample\n \n It is important to note that in this case all symbols found in the\n@@ -30583,7 +30583,7 @@ the set of symbols to export by passing to @command{gcc} a definition\n file, @pxref{The Definition File}. For example:\n \n @smallexample\n-$ gcc -shared -o api.dll api.def obj1.o obj2.o ...\n+$ gcc -shared -o api.dll api.def obj1.o obj2.o @dots{}\n @end smallexample\n \n If you use a definition file you must export the elaboration procedures\n@@ -30814,7 +30814,7 @@ package body API is\n       return Fact;\n    end Factorial;\n \n-   ...\n+   @dots{}\n    --  The remainder of this package body is unchanged.\n end API;\n @end cartouche\n@@ -30905,7 +30905,7 @@ example consider a DLL comprising the following package @code{API}:\n @cartouche\n package API is\n    Count : Integer := 0;\n-   ...\n+   @dots{}\n    --  Remainder of the package omitted.\n end API;\n @end cartouche"}]}