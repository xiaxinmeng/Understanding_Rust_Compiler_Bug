{"sha": "dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3NTkwMjBlODFhYjljNzA4MzY1M2FlZjg2ZGZhOWZjZDVjZGVjMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-05-08T09:37:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-08T09:37:17Z"}, "message": "mn10300.c (print_operand): Use gcc_assert and gcc_unreachable as appropriate.\n\n\t* config/mn10300/mn10300.c (print_operand): Use gcc_assert and\n\tgcc_unreachable as appropriate.\n\t(print_operand_address, mn10300_print_reg_list, expand_prologue,\n\texpand_epilogue, notice_update_cc, initial_offset,\n\tmn10300_address_cost_1): Likewise.\n\t* config/mn10300/mn10300.md: Likewise.\n\t(absdf2, abssf2, negdf2, negsf2): Likewise.\n\nFrom-SVN: r99382", "tree": {"sha": "3e1c27a8421da745070a56b665e0f998be2a88b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1c27a8421da745070a56b665e0f998be2a88b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/comments", "author": null, "committer": null, "parents": [{"sha": "5e9ad4cf081ad82c70eb001a7ad010ab307c727d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9ad4cf081ad82c70eb001a7ad010ab307c727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9ad4cf081ad82c70eb001a7ad010ab307c727d"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "38bc458b182574116a2cf1a25d60572048f332b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "patch": "@@ -1,3 +1,13 @@\n+2005-05-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/mn10300/mn10300.c (print_operand): Use gcc_assert and\n+\tgcc_unreachable as appropriate.\n+\t(print_operand_address, mn10300_print_reg_list, expand_prologue,\n+\texpand_epilogue, notice_update_cc, initial_offset,\n+\tmn10300_address_cost_1): Likewise.\n+\t* config/mn10300/mn10300.md: Likewise.\n+\t(absdf2, abssf2, negdf2, negsf2): Likewise.\n+\n 2005-05-08  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR target/21416"}, {"sha": "2c36223dcfc866c1473c4d7fa87132f06f723023", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "patch": "@@ -220,7 +220,7 @@ print_operand (FILE *file, rtx x, int code)\n \t\tfprintf (file, \"ul\");\n \t\tbreak;\n \t      default:\n-\t\tabort ();\n+\t\tgcc_unreachable ();\n \t      }\n \t    break;\n \t  }\n@@ -258,7 +258,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    fprintf (file, \"cs\");\n \t    break;\n \t  default:\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  }\n \tbreak;\n       case 'C':\n@@ -289,7 +289,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    break;\n \n \t  default:\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  }\n \tbreak;\n \n@@ -348,7 +348,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    }\n \n \t  default:\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  }\n \tbreak;\n \n@@ -384,7 +384,7 @@ print_operand (FILE *file, rtx x, int code)\n \t\t      fprintf (file, \"0x%lx\", val[1]);\n \t\t      break;;\n \t\t    case SFmode:\n-\t\t      abort ();\n+\t\t      gcc_unreachable ();\n \t\t    case VOIDmode:\n \t\t    case DImode:\n \t\t      print_operand_address (file, \n@@ -405,7 +405,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    }\n \n \t  default:\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  }\n \tbreak;\n \n@@ -419,14 +419,12 @@ print_operand (FILE *file, rtx x, int code)\n \tbreak;\n \n       case 'N':\n-\tif (INTVAL (x) < -128 || INTVAL (x) > 255)\n-\t  abort ();\n+\tgcc_assert (INTVAL (x) >= -128 && INTVAL (x) <= 255);\n \tfprintf (file, \"%d\", (int)((~INTVAL (x)) & 0xff));\n \tbreak;\n \n       case 'U':\n-\tif (INTVAL (x) < -128 || INTVAL (x) > 255)\n-\t  abort ();\n+\tgcc_assert (INTVAL (x) >= -128 && INTVAL (x) <= 255);\n \tfprintf (file, \"%d\", (int)(INTVAL (x) & 0xff));\n \tbreak;\n \n@@ -484,7 +482,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    print_operand_address (file, x);\n \t    break;\n \t  default:\n-\t    abort ();\n+\t    gcc_unreachable ();\n \t  }\n \tbreak;\n    }\n@@ -514,7 +512,7 @@ print_operand_address (FILE *file, rtx addr)\n \t    && REG_OK_FOR_BASE_P (XEXP (addr, 1)))\n \t  base = XEXP (addr, 1), index = XEXP (addr, 0);\n       \telse\n-\t  abort ();\n+\t  gcc_unreachable ();\n \tprint_operand (file, index, 0);\n \tfputc (',', file);\n \tprint_operand (file, base, 0);;\n@@ -571,8 +569,7 @@ mn10300_print_reg_list (FILE *file, int mask)\n \n   if ((mask & 0x3c000) != 0)\n     {\n-      if ((mask & 0x3c000) != 0x3c000)\n-\tabort();\n+      gcc_assert ((mask & 0x3c000) == 0x3c000);\n       if (need_comma)\n \tfputc (',', file);\n       fputs (\"exreg1\", file);\n@@ -883,7 +880,7 @@ expand_prologue (void)\n \t  break;\n \n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n \t  \n       /* Now prepare register a0, if we have decided to use it.  */\n@@ -905,7 +902,7 @@ expand_prologue (void)\n \t  break;\n \t  \n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n       \n       /* Now actually save the FP registers.  */\n@@ -1121,7 +1118,7 @@ expand_epilogue (void)\n \t      break;\n \n \t    default:\n-\t      abort ();\n+\t      gcc_unreachable ();\n \t    }\n \t}\n \n@@ -1252,7 +1249,7 @@ notice_update_cc (rtx body, rtx insn)\n       break;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -1443,7 +1440,7 @@ initial_offset (int from, int to)\n \t    + (current_function_outgoing_args_size\n \t       ? current_function_outgoing_args_size + 4 : 0)); \n \n-  abort ();\n+  gcc_unreachable ();\n }\n \n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n@@ -1936,7 +1933,7 @@ mn10300_address_cost_1 (rtx x, int *unsig)\n \t  return 5;\n \n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n \n     case PLUS:\n@@ -1973,7 +1970,7 @@ mn10300_address_cost_1 (rtx x, int *unsig)\n       return 8;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n \n     }\n }"}, {"sha": "7dc9499888501e0decf0c6805f1fc1ead882db62", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc759020e81ab9c7083653aef86dfa9fcd5cdec3/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=dc759020e81ab9c7083653aef86dfa9fcd5cdec3", "patch": "@@ -109,7 +109,7 @@\n     case 6:\n       return \\\"fmov %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -142,7 +142,7 @@\n     case 4:\n       return \\\"movbu %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,clobber,none_0hit,none_0hit,none_0hit\")])\n@@ -202,7 +202,7 @@\n     case 6:\n       return \\\"fmov %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -234,7 +234,7 @@\n     case 4:\n       return \\\"movhu %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,clobber,none_0hit,none_0hit,none_0hit\")])\n@@ -378,7 +378,7 @@\n     case 16:\n       return \\\"fmov %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none,none_0hit,none_0hit\")])\n@@ -428,7 +428,7 @@\n \t}\n       return \\\"mov %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"none,none,none,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -509,8 +509,7 @@\n \t    while (GET_CODE (temp) == SUBREG)\n \t      temp = SUBREG_REG (temp);\n \n-\t    if (GET_CODE (temp) != REG)\n-\t      abort ();\n+\t    gcc_assert (GET_CODE (temp) == REG);\n \n \t    if (reg_overlap_mentioned_p (gen_rtx_REG (SImode, REGNO (temp)),\n \t\t\t\t\t XEXP (operands[1], 0)))\n@@ -598,7 +597,7 @@\n \telse\n           return \\\"fmov %L1, %L0\\;fmov %H1, %H0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set (attr \"cc\")\n@@ -721,8 +720,7 @@\n \t    while (GET_CODE (temp) == SUBREG)\n \t      temp = SUBREG_REG (temp);\n \n-\t    if (GET_CODE (temp) != REG)\n-\t      abort ();\n+\t    gcc_assert (GET_CODE (temp) == REG);\n \n \t    if (reg_overlap_mentioned_p (gen_rtx_REG (SImode, REGNO (temp)),\n \t\t\t\t\t XEXP (operands[1], 0)))\n@@ -790,7 +788,7 @@\n \t    return \\\"\\\";\n \t  }\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set (attr \"cc\")\n@@ -971,7 +969,7 @@\n       return \\\"mov %2,%0\\;add %1,%0\\\";\n       }\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"set_zn,none_0hit,set_zn,none_0hit,set_zn,none_0hit,set_zn\")])\n@@ -1013,7 +1011,7 @@\n \treturn \\\"mov %1,%0\\;add %2,%0\\\";\n       return \\\"mov %2,%0\\;add %1,%0\\\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"cc\" \"set_zn,none_0hit,none_0hit,set_zn,none_0hit,set_zn\")])\n@@ -2187,8 +2185,7 @@\n \t\t\t operand_subword_force (operands[1], 1, DFmode),\n \t\t\t GEN_INT (0x7fffffff), target, 0, OPTAB_WIDEN);\n \n-  if (result == 0)\n-    abort ();\n+  gcc_assert (result);\n \n   if (result != target)\n     emit_move_insn (result, target);\n@@ -2222,8 +2219,7 @@\n   result = expand_binop (SImode, and_optab,\n \t\t\t operand_subword_force (operands[1], 0, SFmode),\n \t\t\t GEN_INT (0x7fffffff), target, 0, OPTAB_WIDEN);\n-  if (result == 0)\n-    abort ();\n+  gcc_assert (result);\n \n   if (result != target)\n     emit_move_insn (result, target);\n@@ -2258,8 +2254,7 @@\n \t\t\t GEN_INT (trunc_int_for_mode (0x80000000, SImode)),\n \t\t\t target, 0, OPTAB_WIDEN);\n \n-  if (result == 0)\n-    abort ();\n+  gcc_assert (result);\n \n   if (result != target)\n     emit_move_insn (result, target);\n@@ -2294,8 +2289,7 @@\n \t\t\t operand_subword_force (operands[1], 0, SFmode),\n \t\t\t GEN_INT (trunc_int_for_mode (0x80000000, SImode)),\n \t\t\t target, 0, OPTAB_WIDEN);\n-  if (result == 0)\n-    abort ();\n+  gcc_assert (result);\n \n   if (result != target)\n     emit_move_insn (result, target);"}]}