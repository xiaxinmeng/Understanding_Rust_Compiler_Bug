{"sha": "22a6d99d0a0d383856440ea479b4a9edabf23961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhNmQ5OWQwYTBkMzgzODU2NDQwZWE0NzliNGE5ZWRhYmYyMzk2MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-09T10:50:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-11T11:46:34Z"}, "message": "reduce sparseset memory requirement\n\nCurrently we use HOST_WIDEST_FAST_INT for the sparseset element\ntype which maps to a 64bit type on 64bit hosts.  That's excessive\nfor the only current sparseset users which are LRA and IRA and\nwhich store register numbers in it which are unsigned int.  The\nfollowing changes the sparseset element type to unsigned int.\n\n2021-02-09  Richard Biener  <rguenther@suse.de>\n\n\t* sparseset.h (SPARSESET_ELT_BITS): Remove.\n\t(SPARSESET_ELT_TYPE): Use unsigned int.\n\t* fwprop.c: Do not include sparseset.h.", "tree": {"sha": "4a5ec286822ed47f8e47285beb5d744e5f260f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a5ec286822ed47f8e47285beb5d744e5f260f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a6d99d0a0d383856440ea479b4a9edabf23961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a6d99d0a0d383856440ea479b4a9edabf23961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a6d99d0a0d383856440ea479b4a9edabf23961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a6d99d0a0d383856440ea479b4a9edabf23961/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee5415af8691640b0f7a5332b78d04ba309f4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee5415af8691640b0f7a5332b78d04ba309f4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee5415af8691640b0f7a5332b78d04ba309f4f0"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "4b8a554e823f90d227ee7b3083d982498f07c236", "filename": "gcc/fwprop.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a6d99d0a0d383856440ea479b4a9edabf23961/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a6d99d0a0d383856440ea479b4a9edabf23961/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=22a6d99d0a0d383856440ea479b4a9edabf23961", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"rtl-ssa.h\"\n \n-#include \"sparseset.h\"\n #include \"predict.h\"\n #include \"cfgrtl.h\"\n #include \"cfgcleanup.h\""}, {"sha": "017884e8ad0cb2ef11627747281d306d7e3eb0e6", "filename": "gcc/sparseset.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a6d99d0a0d383856440ea479b4a9edabf23961/gcc%2Fsparseset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a6d99d0a0d383856440ea479b4a9edabf23961/gcc%2Fsparseset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsparseset.h?ref=22a6d99d0a0d383856440ea479b4a9edabf23961", "patch": "@@ -76,15 +76,14 @@ along with GCC; see the file COPYING3.  If not see\n    Sparse sets storage requirements are relatively large: O(U) with a\n    larger constant than sbitmaps (if the storage requirement for an\n    sbitmap with universe U is S, then the storage required for a sparse\n-   set for the same universe are 2*HOST_BITS_PER_WIDEST_FAST_INT * S).\n+   set for the same universe are 2 * sizeof (SPARSESET_ELT_TYPE) * 8 * S).\n    Accessing the sparse vector is not very cache-friendly, but iterating\n    over the members in the set is cache-friendly because only the dense\n    vector is used.  */\n \n /* Data Structure used for the SparseSet representation.  */\n \n-#define SPARSESET_ELT_BITS ((unsigned) HOST_BITS_PER_WIDEST_FAST_INT)\n-#define SPARSESET_ELT_TYPE unsigned HOST_WIDEST_FAST_INT\n+#define SPARSESET_ELT_TYPE unsigned int\n \n typedef struct sparseset_def\n {"}]}