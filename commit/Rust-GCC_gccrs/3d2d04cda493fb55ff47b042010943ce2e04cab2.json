{"sha": "3d2d04cda493fb55ff47b042010943ce2e04cab2", "node_id": "C_kwDOANBUbNoAKDNkMmQwNGNkYTQ5M2ZiNTVmZjQ3YjA0MjAxMDk0M2NlMmUwNGNhYjI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-08T02:52:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-08T02:52:46Z"}, "message": "analyzer: start adding support for errno\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc\n\t(region_model::impl_call_errno_location): New.\n\t* region-model-manager.cc\n\t(region_model_manager::region_model_manager): Initialize\n\tm_thread_local_region and m_errno_region.\n\t* region-model-manager.h (region_model_manager::get_errno_region):\n\tNew accessor.\n\t(region_model_manager::m_thread_local_region): New.\n\t(region_model_manager::m_errno_region): New.\n\t* region-model.cc (region_model::on_call_pre): Special-case\n\t\"__errno_location\".\n\t(region_model::set_errno): New.\n\t* region-model.h (impl_call_errno_location): New decl.\n\t(region_model::set_errno): New decl.\n\t* region.cc (thread_local_region::dump_to_pp): New.\n\t(errno_region::dump_to_pp): New.\n\t* region.h (enum memory_space): Add MEMSPACE_THREAD_LOCAL.\n\t(enum region_kind): Add RK_THREAD_LOCAL and RK_ERRNO.\n\t(class thread_local_region): New.\n\t(is_a_helper <const thread_local_region *>::test): New.\n\t(class errno_region): New.\n\t(is_a_helper <const errno_region *>::test): New.\n\t* store.cc (binding_cluster::escaped_p): New.\n\t(store::escaped_p): Treat errno as always having escaped.\n\t(store::replay_call_summary_cluster): Handle RK_THREAD_LOCAL and\n\tRK_ERRNO.\n\t* store.h (binding_cluster::escaped_p): Remove definition.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/errno-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "0d80e926939efb76066a44c17ee43efe484fd4fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d80e926939efb76066a44c17ee43efe484fd4fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d2d04cda493fb55ff47b042010943ce2e04cab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2d04cda493fb55ff47b042010943ce2e04cab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2d04cda493fb55ff47b042010943ce2e04cab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2d04cda493fb55ff47b042010943ce2e04cab2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be9fdbda1cbcd6a35b05424679c6c059605b61cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9fdbda1cbcd6a35b05424679c6c059605b61cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9fdbda1cbcd6a35b05424679c6c059605b61cb"}], "stats": {"total": 169, "additions": 167, "deletions": 2}, "files": [{"sha": "bc644f8f3add87ac0a9458674a6185c1c918366c", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -413,6 +413,20 @@ region_model::impl_call_calloc (const call_details &cd)\n     }\n }\n \n+/* Handle the on_call_pre part of \"__errno_location\".  */\n+\n+void\n+region_model::impl_call_errno_location (const call_details &cd)\n+{\n+  if (cd.get_lhs_region ())\n+    {\n+      const region *errno_reg = m_mgr->get_errno_region ();\n+      const svalue *errno_ptr = m_mgr->get_ptr_svalue (cd.get_lhs_type (),\n+\t\t\t\t\t\t       errno_reg);\n+      cd.maybe_set_lhs (errno_ptr);\n+    }\n+}\n+\n /* Handle the on_call_pre part of \"error\" and \"error_at_line\" from\n    GNU's non-standard <error.h>.\n    MIN_ARGS identifies the minimum number of expected arguments"}, {"sha": "08bf5d2e758f36dfeed655500d16aea246ef8bf1", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -74,6 +74,8 @@ region_model_manager::region_model_manager (logger *logger)\n   m_fndecls_map (), m_labels_map (),\n   m_globals_region (alloc_region_id (), &m_root_region),\n   m_globals_map (),\n+  m_thread_local_region (alloc_region_id (), &m_root_region),\n+  m_errno_region (alloc_region_id (), &m_thread_local_region),\n   m_store_mgr (this),\n   m_range_mgr (new bounded_ranges_manager ()),\n   m_known_fn_mgr (logger)"}, {"sha": "0ff253b624cd838b4830f3f7e02ce5626bbcde5f", "filename": "gcc/analyzer/region-model-manager.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.h?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -107,6 +107,7 @@ class region_model_manager\n   {\n     return &m_globals_region;\n   }\n+  const errno_region *get_errno_region () const { return &m_errno_region; }\n   const function_region *get_region_for_fndecl (tree fndecl);\n   const label_region *get_region_for_label (tree label);\n   const decl_region *get_region_for_global (tree expr);\n@@ -287,6 +288,9 @@ class region_model_manager\n   typedef globals_map_t::iterator globals_iterator_t;\n   globals_map_t m_globals_map;\n \n+  thread_local_region m_thread_local_region;\n+  errno_region m_errno_region;\n+\n   consolidation_map<field_region> m_field_regions;\n   consolidation_map<element_region> m_element_regions;\n   consolidation_map<offset_region> m_offset_regions;"}, {"sha": "0ca454a0f9c567918f6125245733e11958726b68", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -2288,6 +2288,11 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t  impl_call_realloc (cd);\n \t  return false;\n \t}\n+      else if (is_named_call_p (callee_fndecl, \"__errno_location\", call, 0))\n+\t{\n+\t  impl_call_errno_location (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"error\"))\n \t{\n \t  if (impl_call_error (cd, 3, out_terminate_path))\n@@ -6418,6 +6423,23 @@ region_model::maybe_complain_about_infoleak (const region *dst_reg,\n \t\t\t\t\t\t\t   copied_sval));\n }\n \n+/* Set errno to a positive symbolic int, as if some error has occurred.  */\n+\n+void\n+region_model::set_errno (const call_details &cd)\n+{\n+  const region *errno_reg = m_mgr->get_errno_region ();\n+  conjured_purge p (this, cd.get_ctxt ());\n+  const svalue *new_errno_sval\n+    = m_mgr->get_or_create_conjured_svalue (integer_type_node,\n+\t\t\t\t\t    cd.get_call_stmt (),\n+\t\t\t\t\t    errno_reg, p);\n+  const svalue *zero\n+    = m_mgr->get_or_create_int_cst (integer_type_node, 0);\n+  add_constraint (new_errno_sval, GT_EXPR, zero, cd.get_ctxt ());\n+  set_value (errno_reg, new_errno_sval, cd.get_ctxt ());\n+}\n+\n /* class noop_region_model_context : public region_model_context.  */\n \n void"}, {"sha": "0caaf82936b1f8ce18232f2da2355ec91704fe62", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -349,6 +349,7 @@ class region_model\n   void impl_call_analyzer_get_unknown_ptr (const call_details &cd);\n   void impl_call_builtin_expect (const call_details &cd);\n   void impl_call_calloc (const call_details &cd);\n+  void impl_call_errno_location (const call_details &cd);\n   bool impl_call_error (const call_details &cd, unsigned min_args,\n \t\t\tbool *out_terminate_path);\n   void impl_call_fgets (const call_details &cd);\n@@ -544,6 +545,8 @@ class region_model\n \t\t\t\t      const region *src_reg,\n \t\t\t\t      region_model_context *ctxt);\n \n+  void set_errno (const call_details &cd);\n+\n   /* Implemented in sm-fd.cc  */\n   void mark_as_valid_fd (const svalue *sval, region_model_context *ctxt);\n "}, {"sha": "6d97590a83a0548aea2bc83273ce365d17bbadde", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -1050,6 +1050,17 @@ root_region::dump_to_pp (pretty_printer *pp, bool simple) const\n     pp_string (pp, \"root_region()\");\n }\n \n+/* class thread_local_region : public space_region.  */\n+\n+void\n+thread_local_region::dump_to_pp (pretty_printer *pp, bool simple) const\n+{\n+  if (simple)\n+    pp_string (pp, \"thread_local_region\");\n+  else\n+    pp_string (pp, \"thread_local_region()\");\n+}\n+\n /* class symbolic_region : public map_region.  */\n \n /* symbolic_region's ctor.  */\n@@ -1811,6 +1822,17 @@ var_arg_region::get_frame_region () const\n   return as_a <const frame_region *> (get_parent_region ());\n }\n \n+/* class errno_region : public region.  */\n+\n+void\n+errno_region::dump_to_pp (pretty_printer *pp, bool simple) const\n+{\n+  if (simple)\n+    pp_string (pp, \"errno_region\");\n+  else\n+    pp_string (pp, \"errno_region()\");\n+}\n+\n /* class unknown_region : public region.  */\n \n /* Implementation of region::dump_to_pp vfunc for unknown_region.  */"}, {"sha": "ecae887edaf139e7a20583c677e593735a234e8d", "filename": "gcc/analyzer/region.h", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fregion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.h?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -34,7 +34,8 @@ enum memory_space\n   MEMSPACE_GLOBALS,\n   MEMSPACE_STACK,\n   MEMSPACE_HEAP,\n-  MEMSPACE_READONLY_DATA\n+  MEMSPACE_READONLY_DATA,\n+  MEMSPACE_THREAD_LOCAL\n };\n \n /* An enum for discriminating between the different concrete subclasses\n@@ -49,6 +50,7 @@ enum region_kind\n   RK_LABEL,\n   RK_STACK,\n   RK_HEAP,\n+  RK_THREAD_LOCAL,\n   RK_ROOT,\n   RK_SYMBOLIC,\n   RK_DECL,\n@@ -62,6 +64,7 @@ enum region_kind\n   RK_STRING,\n   RK_BIT_RANGE,\n   RK_VAR_ARG,\n+  RK_ERRNO,\n   RK_UNKNOWN,\n };\n \n@@ -77,6 +80,8 @@ enum region_kind\n        code_region (RK_CODE): represents the code segment, containing functions\n        stack_region (RK_STACK): a stack, containing all stack frames\n        heap_region (RK_HEAP): the heap, containing heap_allocated_regions\n+       thread_local_region (RK_THREAD_LOCAL): thread-local data for the thread\n+                                              being analyzed\n      root_region (RK_ROOT): the top-level region\n      function_region (RK_FUNCTION): the code for a particular function\n      label_region (RK_LABEL): a particular label within a function\n@@ -102,6 +107,7 @@ enum region_kind\n \t\t\t\t      within another region\n      var_arg_region (RK_VAR_ARG): a region for the N-th vararg within a\n \t\t\t\t  frame_region for a variadic call\n+     errno_region (RK_ERRNO): a region for holding \"errno\"\n      unknown_region (RK_UNKNOWN): for handling unimplemented tree codes.  */\n \n /* Abstract base class for representing ways of accessing chunks of memory.\n@@ -555,6 +561,32 @@ is_a_helper <const heap_region *>::test (const region *reg)\n \n namespace ana {\n \n+/* Concrete space_region subclass: thread-local data for the thread\n+   being analyzed.  */\n+\n+class thread_local_region : public space_region\n+{\n+public:\n+  thread_local_region (unsigned id, region *parent)\n+  : space_region (id, parent)\n+  {}\n+\n+  enum region_kind get_kind () const final override { return RK_THREAD_LOCAL; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+};\n+\n+} // namespace ana\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const thread_local_region *>::test (const region *reg)\n+{\n+  return reg->get_kind () == RK_THREAD_LOCAL;\n+}\n+\n+namespace ana {\n+\n /* Concrete region subclass.  The root region, containing all regions\n    (either directly, or as descendents).\n    Unique within a region_model_manager.  */\n@@ -1362,6 +1394,32 @@ template <> struct default_hash_traits<var_arg_region::key_t>\n \n namespace ana {\n \n+/* A region for errno for the current thread.  */\n+\n+class errno_region : public region\n+{\n+public:\n+  errno_region (unsigned id, const thread_local_region *parent)\n+  : region (complexity (parent), id, parent, integer_type_node)\n+  {}\n+\n+  enum region_kind get_kind () const final override { return RK_ERRNO; }\n+\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+};\n+\n+} // namespace ana\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const errno_region *>::test (const region *reg)\n+{\n+  return reg->get_kind () == RK_ERRNO;\n+}\n+\n+namespace ana {\n+\n /* An unknown region, for handling unimplemented tree codes.  */\n \n class unknown_region : public region"}, {"sha": "636d4aa52da544eed0027f6b3f45400cc8befd33", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -2036,6 +2036,17 @@ binding_cluster::on_asm (const gasm *stmt,\n   m_touched = true;\n }\n \n+/* Return true if this cluster has escaped.  */\n+\n+bool\n+binding_cluster::escaped_p () const\n+{\n+  /* Consider the \"errno\" region to always have escaped.  */\n+  if (m_base_region->get_kind () == RK_ERRNO)\n+    return true;\n+  return m_escaped;\n+}\n+\n /* Return true if this binding_cluster has no information\n    i.e. if there are no bindings, and it hasn't been marked as having\n    escaped, or touched symbolically.  */\n@@ -2946,6 +2957,10 @@ store::escaped_p (const region *base_reg) const\n   gcc_assert (base_reg);\n   gcc_assert (base_reg->get_base_region () == base_reg);\n \n+  /* \"errno\" can always be modified by external code.  */\n+  if (base_reg->get_kind () == RK_ERRNO)\n+    return true;\n+\n   if (binding_cluster **cluster_slot\n       = const_cast <cluster_map_t &>(m_cluster_map).get (base_reg))\n     return (*cluster_slot)->escaped_p ();\n@@ -3192,6 +3207,7 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n     case RK_CODE:\n     case RK_STACK:\n     case RK_HEAP:\n+    case RK_THREAD_LOCAL:\n     case RK_ROOT:\n     /* Child regions.  */\n     case RK_FIELD:\n@@ -3242,6 +3258,7 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n \n     case RK_HEAP_ALLOCATED:\n     case RK_DECL:\n+    case RK_ERRNO:\n       {\n \tconst region *caller_dest_reg\n \t  = r.convert_region_from_summary (summary_base_reg);"}, {"sha": "6243ec65ea1a7fce69adb06624ec49eaef17dcd7", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -644,7 +644,7 @@ class binding_cluster\n   void on_asm (const gasm *stmt, store_manager *mgr,\n \t       const conjured_purge &p);\n \n-  bool escaped_p () const { return m_escaped; }\n+  bool escaped_p () const;\n   bool touched_p () const { return m_touched; }\n \n   bool redundant_p () const;"}, {"sha": "6b9d28c1079902e92268e999cc255d55793b26a6", "filename": "gcc/testsuite/gcc.dg/analyzer/errno-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferrno-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2d04cda493fb55ff47b042010943ce2e04cab2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferrno-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferrno-1.c?ref=3d2d04cda493fb55ff47b042010943ce2e04cab2", "patch": "@@ -0,0 +1,23 @@\n+#include <errno.h>\n+#include \"analyzer-decls.h\"\n+\n+extern void external_fn (void);\n+\n+int test_reading_errno (void)\n+{\n+  return errno;\n+}\n+\n+void test_setting_errno (int val)\n+{\n+  errno = val;\n+}\n+\n+void test_storing_to_errno (int val)\n+{\n+  __analyzer_eval (errno == val); /* { dg-warning \"UNKNOWN\" } */\n+  errno = val;\n+  __analyzer_eval (errno == val); /* { dg-warning \"TRUE\" } */\n+  external_fn ();\n+  __analyzer_eval (errno == val); /* { dg-warning \"UNKNOWN\" } */  \n+}"}]}