{"sha": "9945596cefaa45d13ecab76b4d97ad021bc3a872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0NTU5NmNlZmFhNDVkMTNlY2FiNzZiNGQ5N2FkMDIxYmMzYTg3Mg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-05-05T21:27:54Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-05-05T21:27:54Z"}, "message": "rs6000.c (rs6000_vect_nonmem): New static var.\n\n[gcc]\n\n2017-05-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_vect_nonmem): New static var.\n\t(rs6000_init_cost): Initialize rs6000_vect_nonmem.\n\t(rs6000_add_stmt_cost): Update rs6000_vect_nonmem.\n\t(rs6000_finish_cost): Avoid vectorizing simple copy loops with\n\tVF=2 that require versioning.\n\n[gcc/testsuite]\n\n2017-05-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/versioned-copy-loop.c: New file.\n\nFrom-SVN: r247671", "tree": {"sha": "2f004c595c0519caa3260985eb7778f48e61ede4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f004c595c0519caa3260985eb7778f48e61ede4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9945596cefaa45d13ecab76b4d97ad021bc3a872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9945596cefaa45d13ecab76b4d97ad021bc3a872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9945596cefaa45d13ecab76b4d97ad021bc3a872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9945596cefaa45d13ecab76b4d97ad021bc3a872/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba82e6b5c83bd38a14ef50de8d7f92d6314fe2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba82e6b5c83bd38a14ef50de8d7f92d6314fe2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba82e6b5c83bd38a14ef50de8d7f92d6314fe2b3"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "a2f57ac4f094d6783118cd578dbd7db73afcb846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9945596cefaa45d13ecab76b4d97ad021bc3a872", "patch": "@@ -1,3 +1,11 @@\n+2017-05-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_vect_nonmem): New static var.\n+\t(rs6000_init_cost): Initialize rs6000_vect_nonmem.\n+\t(rs6000_add_stmt_cost): Update rs6000_vect_nonmem.\n+\t(rs6000_finish_cost): Avoid vectorizing simple copy loops with\n+\tVF=2 that require versioning.\n+\n 2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic.h (CARET_LINE_MARGIN): Convert from macro to const"}, {"sha": "bac56abcf2600da043f26480a690eeb74db6ae7e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9945596cefaa45d13ecab76b4d97ad021bc3a872", "patch": "@@ -5873,6 +5873,10 @@ rs6000_density_test (rs6000_cost_data *data)\n \n /* Implement targetm.vectorize.init_cost.  */\n \n+/* For each vectorized loop, this var holds TRUE iff a non-memory vector\n+   instruction is needed by the vectorization.  */\n+static bool rs6000_vect_nonmem;\n+\n static void *\n rs6000_init_cost (struct loop *loop_info)\n {\n@@ -5881,6 +5885,7 @@ rs6000_init_cost (struct loop *loop_info)\n   data->cost[vect_prologue] = 0;\n   data->cost[vect_body]     = 0;\n   data->cost[vect_epilogue] = 0;\n+  rs6000_vect_nonmem = false;\n   return data;\n }\n \n@@ -5907,6 +5912,15 @@ rs6000_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n \n       retval = (unsigned) (count * stmt_cost);\n       cost_data->cost[where] += retval;\n+\n+      /* Check whether we're doing something other than just a copy loop.\n+\t Not all such loops may be profitably vectorized; see\n+\t rs6000_finish_cost.  */\n+      if ((kind == vec_to_scalar || kind == vec_perm\n+\t   || kind == vec_promote_demote || kind == vec_construct\n+\t   || kind == scalar_to_vec)\n+\t  || (where == vect_body && kind == vector_stmt))\n+\trs6000_vect_nonmem = true;\n     }\n \n   return retval;\n@@ -5923,6 +5937,19 @@ rs6000_finish_cost (void *data, unsigned *prologue_cost,\n   if (cost_data->loop_info)\n     rs6000_density_test (cost_data);\n \n+  /* Don't vectorize minimum-vectorization-factor, simple copy loops\n+     that require versioning for any reason.  The vectorization is at\n+     best a wash inside the loop, and the versioning checks make\n+     profitability highly unlikely and potentially quite harmful.  */\n+  if (cost_data->loop_info)\n+    {\n+      loop_vec_info vec_info = loop_vec_info_for_loop (cost_data->loop_info);\n+      if (!rs6000_vect_nonmem\n+\t  && LOOP_VINFO_VECT_FACTOR (vec_info) == 2\n+\t  && LOOP_REQUIRES_VERSIONING (vec_info))\n+\tcost_data->cost[vect_body] += 10000;\n+    }\n+\n   *prologue_cost = cost_data->cost[vect_prologue];\n   *body_cost     = cost_data->cost[vect_body];\n   *epilogue_cost = cost_data->cost[vect_epilogue];"}, {"sha": "bec90e32e8417b68d44cf538e187f5f691083238", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9945596cefaa45d13ecab76b4d97ad021bc3a872", "patch": "@@ -1,3 +1,7 @@\n+2017-05-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/versioned-copy-loop.c: New file.\n+\n 2017-05-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/79038"}, {"sha": "bbfd1652e5eb9e11ab235f3b5f9155e48a269288", "filename": "gcc/testsuite/gcc.target/powerpc/versioned-copy-loop.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fversioned-copy-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945596cefaa45d13ecab76b4d97ad021bc3a872/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fversioned-copy-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fversioned-copy-loop.c?ref=9945596cefaa45d13ecab76b4d97ad021bc3a872", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-O3 -fdump-tree-vect-details\" } */\n+\n+/* Verify that a pure copy loop with a vectorization factor of two\n+   that requires alignment will not be vectorized.  See the cost\n+   model hooks in rs6000.c.  */\n+\n+typedef long unsigned int size_t;\n+typedef unsigned char uint8_t;\n+\n+extern void *memcpy (void *__restrict __dest, const void *__restrict __src,\n+       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));\n+\n+void foo (void *dstPtr, const void *srcPtr, void *dstEnd)\n+{\n+    uint8_t *d = (uint8_t*)dstPtr;\n+    const uint8_t *s = (const uint8_t*)srcPtr;\n+    uint8_t* const e = (uint8_t*)dstEnd;\n+\n+    do\n+      {\n+\tmemcpy (d, s, 8);\n+\td += 8;\n+\ts += 8;\n+      }\n+    while (d < e);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */"}]}