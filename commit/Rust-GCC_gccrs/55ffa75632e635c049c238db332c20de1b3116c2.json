{"sha": "55ffa75632e635c049c238db332c20de1b3116c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmZmE3NTYzMmU2MzVjMDQ5YzIzOGRiMzMyYzIwZGUxYjMxMTZjMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-05-28T07:16:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-05-28T07:16:51Z"}, "message": "rx.c (push_regs): New function.\n\n\t* config/rx/rx.c (push_regs): New function.  Extracts code from...\n\t(rx_expand_prologue): ... here.  Use push_regs to push even small\n\tspans of registers.\n\t(pop_regs): New function.\n\t(rx_expand_epilogue):  Use pop_regs to pop even small spans of\n\tregisters.\n\nFrom-SVN: r223799", "tree": {"sha": "f3a694ae8b01dca33cfbef5748c76cca1667f7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a694ae8b01dca33cfbef5748c76cca1667f7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55ffa75632e635c049c238db332c20de1b3116c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ffa75632e635c049c238db332c20de1b3116c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ffa75632e635c049c238db332c20de1b3116c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ffa75632e635c049c238db332c20de1b3116c2/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a4b99c172b8a5485d84e24db16ccbd847a4b1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4b99c172b8a5485d84e24db16ccbd847a4b1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4b99c172b8a5485d84e24db16ccbd847a4b1b7"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "712dacc8f07f8a7875431a5a26de5f1c36a11a15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ffa75632e635c049c238db332c20de1b3116c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ffa75632e635c049c238db332c20de1b3116c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55ffa75632e635c049c238db332c20de1b3116c2", "patch": "@@ -1,3 +1,12 @@\n+2015-05-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.c (push_regs): New function.  Extracts code from...\n+\t(rx_expand_prologue): ... here.  Use push_regs to push even small\n+\tspans of registers.\n+\t(pop_regs): New function.\n+\t(rx_expand_epilogue):  Use pop_regs to pop even small spans of\n+\tregisters.\n+\n 2015-05-28  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (struct _slp_instance): Remove body_cost_vec"}, {"sha": "4c1c5d161f1ed9c3ae34d6d066a4e6c01caa826a", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ffa75632e635c049c238db332c20de1b3116c2/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ffa75632e635c049c238db332c20de1b3116c2/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=55ffa75632e635c049c238db332c20de1b3116c2", "patch": "@@ -1567,6 +1567,10 @@ rx_get_stack_layout (unsigned int * lowest,\n      has specified --fixed-<reg-name> on the command line and in such\n      circumstances we do not want to touch the fixed registers at all.\n \n+     Note also that the code in the prologue/epilogue handlers will\n+     automatically merge multiple PUSHes of adjacent registers into a single\n+     PUSHM.\n+\n      FIXME: Is it worth improving this heuristic ?  */\n   pushed_mask = (-1 << low) & ~(-1 << (high + 1));\n   unneeded_pushes = (pushed_mask & (~ save_mask)) & pushed_mask;\n@@ -1716,6 +1720,19 @@ gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n   return;\n }\n \n+static void\n+push_regs (unsigned int high, unsigned int low)\n+{\n+  rtx insn;\n+\n+  if (low == high)\n+    insn = emit_insn (gen_stack_push (gen_rtx_REG (SImode, low)));\n+  else\n+    insn = emit_insn (gen_stack_pushm (GEN_INT (((high - low) + 1) * UNITS_PER_WORD),\n+\t\t\t\t       gen_rx_store_vector (low, high)));\n+  mark_frame_related (insn);\n+}\n+\n void\n rx_expand_prologue (void)\n {\n@@ -1725,7 +1742,6 @@ rx_expand_prologue (void)\n   unsigned int low;\n   unsigned int high;\n   unsigned int reg;\n-  rtx insn;\n \n   /* Naked functions use their own, programmer provided prologues.  */\n   if (is_naked_func (NULL_TREE))\n@@ -1735,28 +1751,33 @@ rx_expand_prologue (void)\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = frame_size + stack_size;\n-\n+  \n   /* If we use any of the callee-saved registers, save them now.  */\n   if (mask)\n     {\n       /* Push registers in reverse order.  */\n       for (reg = CC_REGNUM; reg --;)\n \tif (mask & (1 << reg))\n \t  {\n-\t    insn = emit_insn (gen_stack_push (gen_rtx_REG (SImode, reg)));\n-\t    mark_frame_related (insn);\n+\t    low = high = reg;\n+\n+\t    /* Look for a span of registers.\n+\t       Note - we do not have to worry about -Os and whether\n+\t       it is better to use a single, longer PUSHM as\n+\t       rx_get_stack_layout has already done that for us.  */\n+\t    while (reg-- > 0)\n+\t      if ((mask & (1 << reg)) == 0)\n+\t\tbreak;\n+\t      else\n+\t\t--low;\n+\n+\t    push_regs (high, low);\n+\t    if (reg == (unsigned) -1)\n+\t      break;\n \t  }\n     }\n   else if (low)\n-    {\n-      if (high == low)\n-\tinsn = emit_insn (gen_stack_push (gen_rtx_REG (SImode, low)));\n-      else\n-\tinsn = emit_insn (gen_stack_pushm (GEN_INT (((high - low) + 1)\n-\t\t\t\t\t\t    * UNITS_PER_WORD),\n-\t\t\t\t\t   gen_rx_store_vector (low, high)));\n-      mark_frame_related (insn);\n-    }\n+    push_regs (high, low);\n \n   if (MUST_SAVE_ACC_REGISTER)\n     {\n@@ -2031,6 +2052,16 @@ rx_can_use_simple_return (void)\n \t  && low == 0);\n }\n \n+static void\n+pop_regs (unsigned int high, unsigned int low)\n+{\n+  if (high == low)\n+    emit_insn (gen_stack_pop (gen_rtx_REG (SImode, low)));\n+  else\n+    emit_insn (gen_stack_popm (GEN_INT (((high - low) + 1) * UNITS_PER_WORD),\n+\t\t\t       gen_rx_popm_vector (low, high)));\n+}\n+\n void\n rx_expand_epilogue (bool is_sibcall)\n {\n@@ -2143,16 +2174,16 @@ rx_expand_epilogue (bool is_sibcall)\n \t{\n \t  for (reg = 0; reg < CC_REGNUM; reg ++)\n \t    if (register_mask & (1 << reg))\n-\t      emit_insn (gen_stack_pop (gen_rtx_REG (SImode, reg)));\n+\t      {\n+\t\tlow = high = reg;\n+\t\twhile (register_mask & (1 << high))\n+\t\t  high ++;\n+\t\tpop_regs (high - 1, low);\n+\t\treg = high;\n+\t      }\n \t}\n       else if (low)\n-\t{\n-\t  if (high == low)\n-\t    emit_insn (gen_stack_pop (gen_rtx_REG (SImode, low)));\n-\t  else\n-\t    emit_insn (gen_stack_popm (GEN_INT (regs_size),\n-\t\t\t\t       gen_rx_popm_vector (low, high)));\n-\t}\n+\tpop_regs (high, low);\n \n       if (is_fast_interrupt_func (NULL_TREE))\n \t{"}]}