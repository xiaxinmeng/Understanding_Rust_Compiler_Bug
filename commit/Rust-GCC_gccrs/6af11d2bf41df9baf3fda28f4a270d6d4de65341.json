{"sha": "6af11d2bf41df9baf3fda28f4a270d6d4de65341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmMTFkMmJmNDFkZjliYWYzZmRhMjhmNGEyNzBkNmQ0ZGU2NTM0MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-14T19:11:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-14T19:11:15Z"}, "message": "sparc-passes.def: New file.\n\n\t* config/sparc/sparc-passes.def: New file.\n\t* config/sparc/t-sparc (PASSES_EXTRA): Add sparc-passes.def.\n\t* config/sparc/sparc-protos.h (make_pass_work_around_errata): New.\n\t* config/sparc/sparc.c (sparc_option_override): Don't register passes.\n\nFrom-SVN: r241180", "tree": {"sha": "27698c1675b35c2230bbd7b074103945798b2966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27698c1675b35c2230bbd7b074103945798b2966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af11d2bf41df9baf3fda28f4a270d6d4de65341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af11d2bf41df9baf3fda28f4a270d6d4de65341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af11d2bf41df9baf3fda28f4a270d6d4de65341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af11d2bf41df9baf3fda28f4a270d6d4de65341/comments", "author": null, "committer": null, "parents": [{"sha": "de1d079440179287ff154a66218b2f2fd41a9acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1d079440179287ff154a66218b2f2fd41a9acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1d079440179287ff154a66218b2f2fd41a9acf"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "63034cd6d58a265592e71395832da2aa6791528b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6af11d2bf41df9baf3fda28f4a270d6d4de65341", "patch": "@@ -1,3 +1,10 @@\n+2016-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc-passes.def: New file.\n+\t* config/sparc/t-sparc (PASSES_EXTRA): Add sparc-passes.def.\n+\t* config/sparc/sparc-protos.h (make_pass_work_around_errata): New.\n+\t* config/sparc/sparc.c (sparc_option_override): Don't register passes.\n+\n 2016-10-14  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* loop-unroll.c (unroll_loop_runtime_iterations): Condition initial\n@@ -13,8 +20,7 @@\n \n 2016-10-14  Pedro Alves  <palves@redhat.com>\n \n-\t* coretypes.h (OVERRIDE, FINAL): Delete, moved to\n-\tinclude/ansidecl.h.\n+\t* coretypes.h (OVERRIDE, FINAL): Delete, moved to include/ansidecl.h.\n \n 2016-10-14  Catherine Moore  <clm@codesourcery.com>\n "}, {"sha": "76296b7ae6eaf5fc821d7ecab8a8863388b966cc", "filename": "gcc/config/sparc/sparc-passes.def", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-passes.def?ref=6af11d2bf41df9baf3fda28f4a270d6d4de65341", "patch": "@@ -0,0 +1,27 @@\n+/* Description of target passes for SPARC. \n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   Macros that can be used in this file:\n+   INSERT_PASS_AFTER (PASS, INSTANCE, TGT_PASS)\n+   INSERT_PASS_BEFORE (PASS, INSTANCE, TGT_PASS)\n+   REPLACE_PASS (PASS, INSTANCE, TGT_PASS)\n+ */\n+\n+  INSERT_PASS_AFTER (pass_delay_slots, 1, pass_work_around_errata);"}, {"sha": "4e23a4406c7ccb47e25e1683da37a89988cf28af", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=6af11d2bf41df9baf3fda28f4a270d6d4de65341", "patch": "@@ -47,6 +47,7 @@ extern void sparc_profile_hook (int);\n extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n extern void sparc_target_macros (void);\n+extern void sparc_emit_membar_for_model (enum memmodel, int, int);\n \n #ifdef RTX_CODE\n extern machine_mode select_cc_mode (enum rtx_code, rtx, rtx);\n@@ -110,6 +111,6 @@ unsigned int sparc_regmode_natural_size (machine_mode);\n bool sparc_modes_tieable_p (machine_mode, machine_mode);\n #endif /* RTX_CODE */\n \n-extern void sparc_emit_membar_for_model (enum memmodel, int, int);\n+extern rtl_opt_pass *make_pass_work_around_errata (gcc::context *);\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "8633b8d34f9f51f5bf981327c0bee49a33d5d9ad", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=6af11d2bf41df9baf3fda28f4a270d6d4de65341", "patch": "@@ -883,10 +883,10 @@ mem_ref (rtx x)\n }\n \n /* We use a machine specific pass to enable workarounds for errata.\n+\n    We need to have the (essentially) final form of the insn stream in order\n    to properly detect the various hazards.  Therefore, this machine specific\n-   pass runs as late as possible.  The pass is inserted in the pass pipeline\n-   at the end of sparc_option_override.  */\n+   pass runs as late as possible.  */\n \n static unsigned int\n sparc_do_work_around_errata (void)\n@@ -1706,21 +1706,6 @@ sparc_option_override (void)\n      pessimizes for double floating-point registers.  */\n   if (!global_options_set.x_flag_ira_share_save_slots)\n     flag_ira_share_save_slots = 0;\n-\n-  /* We register a machine specific pass to work around errata, if any.\n-     The pass mut be scheduled as late as possible so that we have the\n-     (essentially) final form of the insn stream to work on.\n-     Registering the pass must be done at start up.  It's convenient to\n-     do it here.  */\n-  opt_pass *errata_pass = make_pass_work_around_errata (g);\n-  struct register_pass_info insert_pass_work_around_errata =\n-    {\n-      errata_pass,\t\t/* pass */\n-      \"dbr\",\t\t\t/* reference_pass_name */\n-      1,\t\t\t/* ref_pass_instance_number */\n-      PASS_POS_INSERT_AFTER\t/* po_op */\n-    };\n-  register_pass (&insert_pass_work_around_errata);\n }\n \f\n /* Miscellaneous utilities.  */"}, {"sha": "ec396b04ee3af853fb51e23c87cf0e721aacc89a", "filename": "gcc/config/sparc/t-sparc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Ft-sparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af11d2bf41df9baf3fda28f4a270d6d4de65341/gcc%2Fconfig%2Fsparc%2Ft-sparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparc?ref=6af11d2bf41df9baf3fda28f4a270d6d4de65341", "patch": "@@ -18,6 +18,8 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+PASSES_EXTRA += $(srcdir)/config/sparc/sparc-passes.def\n+\n sparc-c.o: $(srcdir)/config/sparc/sparc-c.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}]}