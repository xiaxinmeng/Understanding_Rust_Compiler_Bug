{"sha": "0963cb5fde158cce986523a90fa9edc51c881f31", "node_id": "C_kwDOANBUbNoAKDA5NjNjYjVmZGUxNThjY2U5ODY1MjNhOTBmYTllZGM1MWM4ODFmMzE", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-03-20T20:11:12Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-03-21T13:56:02Z"}, "message": "Terminate GORI calculations if a relation is not relevant.\n\nWe currently allow VARYING lhs GORI calculations to continue if there is\na relation present in the hope it will eventually better refine a result.\nThis adds a check that the relation is relevant to the outgoing range\ncalculation first.  If it is not relevant, stop calculating.\n\n\tPR tree-optimization/109192\n\t* gimple-range-gori.cc (gori_compute::compute_operand_range):\n\tTerminate gori calculations if a relation is not relevant.\n\t* value-relation.h (value_relation::set_relation): Allow\n\tequality between op1 and op2 if they are the same.", "tree": {"sha": "f2fcf612cfc29038ed6a7196ce31eb05c80ab094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2fcf612cfc29038ed6a7196ce31eb05c80ab094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0963cb5fde158cce986523a90fa9edc51c881f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0963cb5fde158cce986523a90fa9edc51c881f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0963cb5fde158cce986523a90fa9edc51c881f31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0963cb5fde158cce986523a90fa9edc51c881f31/comments", "author": null, "committer": null, "parents": [{"sha": "26adc870e3675591050f37edab46850b97a3c122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26adc870e3675591050f37edab46850b97a3c122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26adc870e3675591050f37edab46850b97a3c122"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "2f8d4704ea4c554f1bba0c41d96c6c26b47ddfe4", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0963cb5fde158cce986523a90fa9edc51c881f31/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0963cb5fde158cce986523a90fa9edc51c881f31/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=0963cb5fde158cce986523a90fa9edc51c881f31", "patch": "@@ -653,12 +653,38 @@ gori_compute::compute_operand_range (vrange &r, gimple *stmt,\n   if (!op1_in_chain && !op2_in_chain)\n     return false;\n \n-  // If the lhs doesn't tell us anything and there are no relations, there\n-  // is nothing to be learned.\n-  if (lhs.varying_p () && !vrel_ptr)\n-    return false;\n+  bool res = false;\n+  // If the lhs doesn't tell us anything only a relation can possibly enhance\n+  // the result.\n+  if (lhs.varying_p ())\n+    {\n+      if (!vrel_ptr)\n+\treturn false;\n+      // If there is a relation (ie: x != y) , it can only be relevant if\n+      // a) both elements are in the defchain\n+      //    c = x > y   // (x and y are in c's defchain)\n+      if (op1_in_chain)\n+\tres = in_chain_p (vrel_ptr->op1 (), op1)\n+\t      && in_chain_p (vrel_ptr->op2 (), op1);\n+      if (!res && op2_in_chain)\n+\tres = in_chain_p (vrel_ptr->op1 (), op2)\n+\t      || in_chain_p (vrel_ptr->op2 (), op2);\n+      if (!res)\n+\t{\n+\t  // or b) one relation element is in the defchain of the other and the\n+\t  //       other is the LHS of this stmt.\n+\t  //  x = y + 2\n+\t  if (vrel_ptr->op1 () == handler.lhs ()\n+\t      && (vrel_ptr->op2 () == op1 || vrel_ptr->op2 () == op2))\n+\t    res = true;\n+\t  else if (vrel_ptr->op2 () == handler.lhs ()\n+\t\t   && (vrel_ptr->op1 () == op1 || vrel_ptr->op1 () == op2))\n+\t    res = true;\n+\t}\n+      if (!res)\n+\treturn false;\n+    }\n \n-  bool res;\n   // Process logicals as they have special handling.\n   if (is_gimple_logical_p (stmt))\n     {"}, {"sha": "897cf467dd33274243b8f79074fce62c8061f05a", "filename": "gcc/value-relation.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0963cb5fde158cce986523a90fa9edc51c881f31/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0963cb5fde158cce986523a90fa9edc51c881f31/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=0963cb5fde158cce986523a90fa9edc51c881f31", "patch": "@@ -445,7 +445,7 @@ value_relation::set_relation (relation_kind r, tree n1, tree n2)\n {\n   gcc_checking_assert (TREE_CODE (n1) == SSA_NAME\n \t\t       && TREE_CODE (n2) == SSA_NAME);\n-  if (n1 == n2)\n+  if (n1 == n2 && r != VREL_EQ)\n     {\n       related = VREL_VARYING;\n       name1 = NULL_TREE;"}]}