{"sha": "0fc822d0f936df2b4e500baf257f0c8cb72af512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjODIyZDBmOTM2ZGYyYjRlNTAwYmFmMjU3ZjBjOGNiNzJhZjUxMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-30T08:14:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-30T08:14:09Z"}, "message": "function.h (loops_for_fn): New inline function.\n\n2013-04-30  Richard Biener  <rguenther@suse.de>\n\n\t* function.h (loops_for_fn): New inline function.\n\t(set_loops_for_fn): Likewise.\n\t* cfgloop.h (place_new_loop): Add struct function parameter.\n\t(get_loop): Likewise.\n\t(get_loops): Likewise.\n\t(number_of_loops): Likewise.\n\t(fel_next): Adjust.\n\t(fel_init): Likewise.\n\t* cfg.c (get_loop_copy): Adjust.\n\t* cfgloop.c (flow_loops_dump): Likewise.\n\t(record_loop_exits): Likewise.\n\t(verify_loop_structure): Likewise.\n\t* cfgloopanal.c (mark_irreducible_loops): Likewise.\n\t(estimate_reg_pressure_cost): Likewise.\n\t(mark_loop_exit_edges): Likewise.\n\t* cfgloopmanip.c (place_new_loop): Likewise.\n\t(add_loop): Likewise.\n\t(duplicate_loop): Likewise.\n\t* graph.c (draw_cfg_nodes): Likewise.\n\t* graphite-clast-to-gimple.c (translate_clast_user): Likewise.\n\t* graphite-sese-to-poly.c (build_scop_scattering): Likewise.\n\t(extract_affine_chrec): Likewise.\n\t(build_scop_iteration_domain): Likewise.\n\t* graphite.c (graphite_initialize): Likewise.\n\t* ira-build.c (create_loop_tree_nodes): Likewise.\n\t(more_one_region_p): Likewise.\n\t(rebuild_regno_allocno_maps): Likewise.\n\t(mark_loops_for_removal): Likewise.\n\t(mark_all_loops_for_removal): Likewise.\n\t(remove_unnecessary_regions): Likewise.\n\t(ira_build): Likewise.\n\t* ira-emit.c (setup_entered_from_non_parent_p): Likewise.\n\t* loop-init.c (fix_loop_structure): Likewise.\n\t(gate_rtl_move_loop_invariants): Likewise.\n\t(gate_rtl_unswitch): Likewise.\n\t(gate_rtl_unroll_and_peel_loops): Likewise.\n\t(rtl_doloop): Likewise.\n\t* lto-streamer-in.c (input_cfg): Likewise.\n\t* lto-streamer-out.c (output_cfg): Likewise.\n\t* modulo-sched.c (sms_schedule): Likewise.\n\t* predict.c (tree_estimate_probability): Likewise.\n\t(tree_estimate_probability_driver): Likewise.\n\t(estimate_loops): Likewise.\n\t* tree-cfg.c (fixup_loop_arrays_after_move): Likewise.\n\t(move_sese_region_to_fn): Likewise.\n\t(debug_loop_num): Likewise.\n\t* tree-chrec.c (chrec_evaluate): Likewise.\n\t(hide_evolution_in_other_loops_than_loop): Likewise.\n\t(chrec_component_in_loop_num): Likewise.\n\t(reset_evolution_in_loop): Likewise.\n\t(evolution_function_is_invariant_rec_p): Likewise.\n\t* tree-if-conv.c (main_tree_if_conversion): Likewise.\n\t* tree-inline.c (copy_loops): Likewise.\n\t(copy_cfg_body): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-loop-distribution.c (rdg_flag_loop_exits): Likewise.\n\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n\tLikewise.\n\t(add_to_evolution_1): Likewise.\n\t(scev_const_prop): Likewise.\n\t* tree-scalar-evolution.h (get_chrec_loop): Likewise.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Likewise.\n\t* tree-ssa-loop-im.c (analyze_memory_references): Likewise.\n\t(tree_ssa_lim_initialize): Likewise.\n\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa): Likewise.\n\t(verify_loop_closed_ssa): Likewise.\n\t* tree-ssa-loop.c  (tree_ssa_loop_init): Likewise.\n\t(tree_ssa_loop_im): Likewise.\n\t(tree_ssa_loop_unswitch): Likewise.\n\t(tree_vectorize): Likewise.\n\t(check_data_deps): Likewise.\n\t(tree_ssa_loop_ivcanon): Likewise.\n\t(tree_ssa_loop_bounds): Likewise.\n\t(tree_complete_unroll): Likewise.\n\t(tree_complete_unroll_inner): Likewise.\n\t(tree_parallelize_loops): Likewise.\n\t(tree_ssa_loop_prefetch): Likewise.\n\t(tree_ssa_loop_ivopts): Likewise.\n\t* tree-ssa.c (execute_update_addresses_taken): Liekwise.\n\t* tree-vectorizer.c (vectorize_loops): Likewise.\n\nFrom-SVN: r198441", "tree": {"sha": "356ddee9dfac457bc8a4d0e0c56e83d56f1f6a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356ddee9dfac457bc8a4d0e0c56e83d56f1f6a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fc822d0f936df2b4e500baf257f0c8cb72af512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc822d0f936df2b4e500baf257f0c8cb72af512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc822d0f936df2b4e500baf257f0c8cb72af512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc822d0f936df2b4e500baf257f0c8cb72af512/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37953bd308af0b2ffe9205fbec12b40a0bf725a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37953bd308af0b2ffe9205fbec12b40a0bf725a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37953bd308af0b2ffe9205fbec12b40a0bf725a1"}], "stats": {"total": 351, "additions": 226, "deletions": 125}, "files": [{"sha": "62248a6e258d9521454adde918326f9f5d089fb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1,3 +1,86 @@\n+2013-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* function.h (loops_for_fn): New inline function.\n+\t(set_loops_for_fn): Likewise.\n+\t* cfgloop.h (place_new_loop): Add struct function parameter.\n+\t(get_loop): Likewise.\n+\t(get_loops): Likewise.\n+\t(number_of_loops): Likewise.\n+\t(fel_next): Adjust.\n+\t(fel_init): Likewise.\n+\t* cfg.c (get_loop_copy): Adjust.\n+\t* cfgloop.c (flow_loops_dump): Likewise.\n+\t(record_loop_exits): Likewise.\n+\t(verify_loop_structure): Likewise.\n+\t* cfgloopanal.c (mark_irreducible_loops): Likewise.\n+\t(estimate_reg_pressure_cost): Likewise.\n+\t(mark_loop_exit_edges): Likewise.\n+\t* cfgloopmanip.c (place_new_loop): Likewise.\n+\t(add_loop): Likewise.\n+\t(duplicate_loop): Likewise.\n+\t* graph.c (draw_cfg_nodes): Likewise.\n+\t* graphite-clast-to-gimple.c (translate_clast_user): Likewise.\n+\t* graphite-sese-to-poly.c (build_scop_scattering): Likewise.\n+\t(extract_affine_chrec): Likewise.\n+\t(build_scop_iteration_domain): Likewise.\n+\t* graphite.c (graphite_initialize): Likewise.\n+\t* ira-build.c (create_loop_tree_nodes): Likewise.\n+\t(more_one_region_p): Likewise.\n+\t(rebuild_regno_allocno_maps): Likewise.\n+\t(mark_loops_for_removal): Likewise.\n+\t(mark_all_loops_for_removal): Likewise.\n+\t(remove_unnecessary_regions): Likewise.\n+\t(ira_build): Likewise.\n+\t* ira-emit.c (setup_entered_from_non_parent_p): Likewise.\n+\t* loop-init.c (fix_loop_structure): Likewise.\n+\t(gate_rtl_move_loop_invariants): Likewise.\n+\t(gate_rtl_unswitch): Likewise.\n+\t(gate_rtl_unroll_and_peel_loops): Likewise.\n+\t(rtl_doloop): Likewise.\n+\t* lto-streamer-in.c (input_cfg): Likewise.\n+\t* lto-streamer-out.c (output_cfg): Likewise.\n+\t* modulo-sched.c (sms_schedule): Likewise.\n+\t* predict.c (tree_estimate_probability): Likewise.\n+\t(tree_estimate_probability_driver): Likewise.\n+\t(estimate_loops): Likewise.\n+\t* tree-cfg.c (fixup_loop_arrays_after_move): Likewise.\n+\t(move_sese_region_to_fn): Likewise.\n+\t(debug_loop_num): Likewise.\n+\t* tree-chrec.c (chrec_evaluate): Likewise.\n+\t(hide_evolution_in_other_loops_than_loop): Likewise.\n+\t(chrec_component_in_loop_num): Likewise.\n+\t(reset_evolution_in_loop): Likewise.\n+\t(evolution_function_is_invariant_rec_p): Likewise.\n+\t* tree-if-conv.c (main_tree_if_conversion): Likewise.\n+\t* tree-inline.c (copy_loops): Likewise.\n+\t(copy_cfg_body): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t* tree-loop-distribution.c (rdg_flag_loop_exits): Likewise.\n+\t* tree-scalar-evolution.c (chrec_contains_symbols_defined_in_loop):\n+\tLikewise.\n+\t(add_to_evolution_1): Likewise.\n+\t(scev_const_prop): Likewise.\n+\t* tree-scalar-evolution.h (get_chrec_loop): Likewise.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Likewise.\n+\t* tree-ssa-loop-im.c (analyze_memory_references): Likewise.\n+\t(tree_ssa_lim_initialize): Likewise.\n+\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa): Likewise.\n+\t(verify_loop_closed_ssa): Likewise.\n+\t* tree-ssa-loop.c  (tree_ssa_loop_init): Likewise.\n+\t(tree_ssa_loop_im): Likewise.\n+\t(tree_ssa_loop_unswitch): Likewise.\n+\t(tree_vectorize): Likewise.\n+\t(check_data_deps): Likewise.\n+\t(tree_ssa_loop_ivcanon): Likewise.\n+\t(tree_ssa_loop_bounds): Likewise.\n+\t(tree_complete_unroll): Likewise.\n+\t(tree_complete_unroll_inner): Likewise.\n+\t(tree_parallelize_loops): Likewise.\n+\t(tree_ssa_loop_prefetch): Likewise.\n+\t(tree_ssa_loop_ivopts): Likewise.\n+\t* tree-ssa.c (execute_update_addresses_taken): Liekwise.\n+\t* tree-vectorizer.c (vectorize_loops): Likewise.\n+\n 2013-04-29  Mike Frysinger  <vapier@gentoo.org>\n \n \t* config/arm/bpabi.h (EABI_LINK_SPEC): Define."}, {"sha": "6405f93f429ba16ee42bd5edbb303160b3d0da9a", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1180,7 +1180,7 @@ get_loop_copy (struct loop *loop)\n   key.index1 = loop->num;\n   entry = loop_copy.find (&key);\n   if (entry)\n-    return get_loop (entry->index2);\n+    return get_loop (cfun, entry->index2);\n   else\n     return NULL;\n }"}, {"sha": "01287246c330c2ecd97858aa99a43ce60e949222", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -160,7 +160,7 @@ flow_loops_dump (FILE *file, void (*loop_dump_aux) (const struct loop *, FILE *,\n   if (!current_loops || ! file)\n     return;\n \n-  fprintf (file, \";; %d loops found\\n\", number_of_loops ());\n+  fprintf (file, \";; %d loops found\\n\", number_of_loops (cfun));\n \n   FOR_EACH_LOOP (li, loop, LI_INCLUDE_ROOT)\n     {\n@@ -1077,7 +1077,7 @@ record_loop_exits (void)\n   loops_state_set (LOOPS_HAVE_RECORDED_EXITS);\n \n   gcc_assert (current_loops->exits == NULL);\n-  current_loops->exits = htab_create_ggc (2 * number_of_loops (),\n+  current_loops->exits = htab_create_ggc (2 * number_of_loops (cfun),\n \t\t\t\t\t  loop_exit_hash, loop_exit_eq,\n \t\t\t\t\t  loop_exit_free);\n \n@@ -1324,7 +1324,7 @@ verify_loop_structure (void)\n   struct loop *loop;\n   int err = 0;\n   edge e;\n-  unsigned num = number_of_loops ();\n+  unsigned num = number_of_loops (cfun);\n   loop_iterator li;\n   struct loop_exit *exit, *mexit;\n   bool dom_available = dom_info_available_p (CDI_DOMINATORS);"}, {"sha": "0f24799663057467a96e7eea840dbccab33b445f", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -234,7 +234,7 @@ void rescan_loop_exit (edge, bool, bool);\n /* Loop data structure manipulation/querying.  */\n extern void flow_loop_tree_node_add (struct loop *, struct loop *);\n extern void flow_loop_tree_node_remove (struct loop *);\n-extern void place_new_loop (struct loop *);\n+extern void place_new_loop (struct function *, struct loop *);\n extern void add_loop (struct loop *, struct loop *);\n extern bool flow_loop_nested_p\t(const struct loop *, const struct loop *);\n extern bool flow_bb_inside_loop_p (const struct loop *, const_basic_block);\n@@ -436,12 +436,12 @@ simple_loop_desc (struct loop *loop)\n \n /* Accessors for the loop structures.  */\n \n-/* Returns the loop with index NUM from current_loops.  */\n+/* Returns the loop with index NUM from FNs loop tree.  */\n \n static inline struct loop *\n-get_loop (unsigned num)\n+get_loop (struct function *fn, unsigned num)\n {\n-  return (*current_loops->larray)[num];\n+  return (*loops_for_fn (fn)->larray)[num];\n }\n \n /* Returns the number of superloops of LOOP.  */\n@@ -482,27 +482,29 @@ loop_has_exit_edges (const struct loop *loop)\n   return loop->exits->next->e != NULL;\n }\n \n-/* Returns the list of loops in current_loops.  */\n+/* Returns the list of loops in FN.  */\n \n-static inline vec<loop_p, va_gc> *\n-get_loops (void)\n+inline vec<loop_p, va_gc> *\n+get_loops (struct function *fn)\n {\n-  if (!current_loops)\n+  struct loops *loops = loops_for_fn (fn);\n+  if (!loops)\n     return NULL;\n \n-  return current_loops->larray;\n+  return loops->larray;\n }\n \n-/* Returns the number of loops in current_loops (including the removed\n+/* Returns the number of loops in FN (including the removed\n    ones and the fake loop that forms the root of the loop tree).  */\n \n static inline unsigned\n-number_of_loops (void)\n+number_of_loops (struct function *fn)\n {\n-  if (!current_loops)\n+  struct loops *loops = loops_for_fn (fn);\n+  if (!fn)\n     return 0;\n \n-  return vec_safe_length (current_loops->larray);\n+  return vec_safe_length (loops->larray);\n }\n \n /* Returns true if state of the loops satisfies all properties\n@@ -563,7 +565,7 @@ fel_next (loop_iterator *li, loop_p *loop)\n   while (li->to_visit.iterate (li->idx, &anum))\n     {\n       li->idx++;\n-      *loop = get_loop (anum);\n+      *loop = get_loop (cfun, anum);\n       if (*loop)\n \treturn;\n     }\n@@ -587,7 +589,7 @@ fel_init (loop_iterator *li, loop_p *loop, unsigned flags)\n       return;\n     }\n \n-  li->to_visit.create (number_of_loops ());\n+  li->to_visit.create (number_of_loops (cfun));\n   mn = (flags & LI_INCLUDE_ROOT) ? 0 : 1;\n \n   if (flags & LI_ONLY_INNERMOST)"}, {"sha": "9300237c670020ad69b391239173b94a064c9cae", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -77,7 +77,7 @@ mark_irreducible_loops (void)\n   int src, dest;\n   unsigned depth;\n   struct graph *g;\n-  int num = number_of_loops ();\n+  int num = number_of_loops (cfun);\n   struct loop *cloop;\n   bool irred_loop_found = false;\n   int i;\n@@ -409,7 +409,7 @@ estimate_reg_pressure_cost (unsigned n_new, unsigned n_old, bool speed,\n \n   if (optimize && (flag_ira_region == IRA_REGION_ALL\n \t\t   || flag_ira_region == IRA_REGION_MIXED)\n-      && number_of_loops () <= (unsigned) IRA_MAX_LOOPS_NUM)\n+      && number_of_loops (cfun) <= (unsigned) IRA_MAX_LOOPS_NUM)\n     /* IRA regional allocation deals with high register pressure\n        better.  So decrease the cost (to do more accurate the cost\n        calculation for IRA, we need to know how many registers lives\n@@ -427,7 +427,7 @@ mark_loop_exit_edges (void)\n   basic_block bb;\n   edge e;\n \n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return;\n \n   FOR_EACH_BB (bb)"}, {"sha": "9581677da9f147fbde9ee0431230258edc9a89d0", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -408,13 +408,13 @@ remove_path (edge e)\n   return true;\n }\n \n-/* Creates place for a new LOOP in loops structure.  */\n+/* Creates place for a new LOOP in loops structure of FN.  */\n \n void\n-place_new_loop (struct loop *loop)\n+place_new_loop (struct function *fn, struct loop *loop)\n {\n-  loop->num = number_of_loops ();\n-  vec_safe_push (current_loops->larray, loop);\n+  loop->num = number_of_loops (fn);\n+  vec_safe_push (loops_for_fn (fn)->larray, loop);\n }\n \n /* Given LOOP structure with filled header and latch, find the body of the\n@@ -431,7 +431,7 @@ add_loop (struct loop *loop, struct loop *outer)\n   edge_iterator ei;\n \n   /* Add it to loop structure.  */\n-  place_new_loop (loop);\n+  place_new_loop (cfun, loop);\n   flow_loop_tree_node_add (outer, loop);\n \n   /* Find its nodes.  */\n@@ -1010,7 +1010,7 @@ duplicate_loop (struct loop *loop, struct loop *target)\n {\n   struct loop *cloop;\n   cloop = alloc_loop ();\n-  place_new_loop (cloop);\n+  place_new_loop (cfun, cloop);\n  \n   copy_loop_info (loop, cloop);\n "}, {"sha": "c0e42d3c39c27573c0a59c26507162f996305f73", "filename": "gcc/function.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -700,6 +700,23 @@ extern void push_cfun (struct function *new_cfun);\n extern void pop_cfun (void);\n extern void instantiate_decl_rtl (rtx x);\n \n+/* Return the loop tree of FN.  */\n+\n+inline struct loops *\n+loops_for_fn (struct function *fn)\n+{\n+  return fn->x_current_loops;\n+}\n+\n+/* Set the loop tree of FN to LOOPS.  */\n+\n+inline void\n+set_loops_for_fn (struct function *fn, struct loops *loops)\n+{\n+  gcc_checking_assert (fn->x_current_loops == NULL || loops == NULL);\n+  fn->x_current_loops = loops;\n+}\n+\n /* For backward compatibility... eventually these should all go away.  */\n #define current_function_funcdef_no (cfun->funcdef_no)\n "}, {"sha": "97930d0fabe954a36cb2a5faa445aedb70f14ac6", "filename": "gcc/graph.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -258,10 +258,8 @@ draw_cfg_nodes_for_loop (pretty_printer *pp, int funcdef_no,\n static void\n draw_cfg_nodes (pretty_printer *pp, struct function *fun)\n {\n-  /* ??? This x_current_loops should be enapsulated.  */\n-  if (fun->x_current_loops)\n-    draw_cfg_nodes_for_loop (pp, fun->funcdef_no,\n-\t\t\t     fun->x_current_loops->tree_root);\n+  if (loops_for_fn (fun))\n+    draw_cfg_nodes_for_loop (pp, fun->funcdef_no, get_loop (fun, 0));\n   else\n     draw_cfg_nodes_no_loops (pp, fun);\n }"}, {"sha": "82cae2fe4b8b731b567f403a25c636ba1efa967b", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1094,7 +1094,7 @@ translate_clast_user (struct clast_user_stmt *stmt, edge next_e,\n   if (GBB_BB (gbb) == ENTRY_BLOCK_PTR)\n     return next_e;\n \n-  nb_loops = number_of_loops ();\n+  nb_loops = number_of_loops (cfun);\n   iv_map.create (nb_loops);\n   for (i = 0; i < nb_loops; i++)\n     iv_map.quick_push (NULL_TREE);"}, {"sha": "c4c3eb40449f7f34187b592fd5a2b5aa87778217", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -550,7 +550,7 @@ build_scop_scattering (scop_p scop)\n   isl_space *dc = isl_set_get_space (scop->context);\n   isl_aff *static_sched;\n \n-  dc = isl_space_add_dims (dc, isl_dim_set, number_of_loops());\n+  dc = isl_space_add_dims (dc, isl_dim_set, number_of_loops (cfun));\n   static_sched = isl_aff_zero_on_domain (isl_local_space_from_space (dc));\n \n   /* We have to start schedules at 0 on the first component and\n@@ -590,8 +590,7 @@ extract_affine_chrec (scop_p s, tree e, __isl_take isl_space *space)\n   isl_pw_aff *lhs = extract_affine (s, CHREC_LEFT (e), isl_space_copy (space));\n   isl_pw_aff *rhs = extract_affine (s, CHREC_RIGHT (e), isl_space_copy (space));\n   isl_local_space *ls = isl_local_space_from_space (space);\n-  unsigned pos = sese_loop_depth ((sese) s->region,\n-\t\t\t\t  get_loop (CHREC_VARIABLE (e))) - 1;\n+  unsigned pos = sese_loop_depth ((sese) s->region, get_chrec_loop (e)) - 1;\n   isl_aff *loop = isl_aff_set_coefficient_si\n     (isl_aff_zero_on_domain (ls), isl_dim_in, pos, 1);\n   isl_pw_aff *l = isl_pw_aff_from_aff (loop);\n@@ -1404,7 +1403,7 @@ build_scop_iteration_domain (scop_p scop)\n   sese region = SCOP_REGION (scop);\n   int i;\n   poly_bb_p pbb;\n-  int nb_loops = number_of_loops ();\n+  int nb_loops = number_of_loops (cfun);\n   isl_set **doms = XCNEWVEC (isl_set *, nb_loops);\n \n   FOR_EACH_VEC_ELT (SESE_LOOP_NEST (region), i, loop)"}, {"sha": "f953663941226006186a4b2c2f798cff959ab4d1", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -198,7 +198,7 @@ print_graphite_statistics (FILE* file, vec<scop_p> scops)\n static bool\n graphite_initialize (isl_ctx *ctx)\n {\n-  if (number_of_loops () <= 1\n+  if (number_of_loops (cfun) <= 1\n       /* FIXME: This limit on the number of basic blocks of a function\n \t should be removed when the SCOP detection is faster.  */\n       || n_basic_blocks > PARAM_VALUE (PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION))"}, {"sha": "0e2fd0c551073ba52205830698a5c752ebb7a98c", "filename": "gcc/ira-build.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -151,11 +151,11 @@ create_loop_tree_nodes (void)\n       init_loop_tree_node (ira_loop_nodes, 0);\n       return;\n     }\n-  ira_loop_nodes_count = number_of_loops ();\n+  ira_loop_nodes_count = number_of_loops (cfun);\n   ira_loop_nodes = ((struct ira_loop_tree_node *)\n \t\t    ira_allocate (sizeof (struct ira_loop_tree_node)\n \t\t\t\t  * ira_loop_nodes_count));\n-  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (cfun), i, loop)\n     {\n       if (loop_outer (loop) != NULL)\n \t{\n@@ -194,7 +194,7 @@ more_one_region_p (void)\n   loop_p loop;\n \n   if (current_loops != NULL)\n-    FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n+    FOR_EACH_VEC_SAFE_ELT (get_loops (cfun), i, loop)\n       if (ira_loop_nodes[i].regno_allocno_map != NULL\n \t  && ira_loop_tree_root != &ira_loop_nodes[i])\n \treturn true;\n@@ -379,7 +379,7 @@ rebuild_regno_allocno_maps (void)\n \n   ira_assert (current_loops != NULL);\n   max_regno = max_reg_num ();\n-  FOR_EACH_VEC_SAFE_ELT (get_loops (), l, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (cfun), l, loop)\n     if (ira_loop_nodes[l].regno_allocno_map != NULL)\n       {\n \tira_free (ira_loop_nodes[l].regno_allocno_map);\n@@ -2053,8 +2053,8 @@ mark_loops_for_removal (void)\n   ira_assert (current_loops != NULL);\n   sorted_loops\n     = (ira_loop_tree_node_t *) ira_allocate (sizeof (ira_loop_tree_node_t)\n-\t\t\t\t\t     * number_of_loops ());\n-  for (n = i = 0; vec_safe_iterate (get_loops (), i, &loop); i++)\n+\t\t\t\t\t     * number_of_loops (cfun));\n+  for (n = i = 0; vec_safe_iterate (get_loops (cfun), i, &loop); i++)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       {\n \tif (ira_loop_nodes[i].parent == NULL)\n@@ -2098,7 +2098,7 @@ mark_all_loops_for_removal (void)\n   loop_p loop;\n \n   ira_assert (current_loops != NULL);\n-  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (cfun), i, loop)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       {\n \tif (ira_loop_nodes[i].parent == NULL)\n@@ -2408,8 +2408,8 @@ remove_unnecessary_regions (bool all_p)\n     mark_all_loops_for_removal ();\n   else\n     mark_loops_for_removal ();\n-  children_vec.create(last_basic_block + number_of_loops ());\n-  removed_loop_vec.create(last_basic_block + number_of_loops ());\n+  children_vec.create(last_basic_block + number_of_loops (cfun));\n+  removed_loop_vec.create(last_basic_block + number_of_loops (cfun));\n   remove_uneccesary_loop_nodes_from_loop_tree (ira_loop_tree_root);\n   children_vec.release ();\n   if (all_p)\n@@ -3290,7 +3290,7 @@ ira_build (void)\n \t    }\n \t}\n       fprintf (ira_dump_file, \"  regions=%d, blocks=%d, points=%d\\n\",\n-\t       current_loops == NULL ? 1 : number_of_loops (),\n+\t       current_loops == NULL ? 1 : number_of_loops (cfun),\n \t       n_basic_blocks, ira_max_point);\n       fprintf (ira_dump_file,\n \t       \"    allocnos=%d (big %d), copies=%d, conflicts=%d, ranges=%d\\n\","}, {"sha": "cdd694176aa41c4d6b19411d3439c394a70f0397", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -434,7 +434,7 @@ setup_entered_from_non_parent_p (void)\n   loop_p loop;\n \n   ira_assert (current_loops != NULL);\n-  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (cfun), i, loop)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       ira_loop_nodes[i].entered_from_non_parent_p\n \t= entered_from_non_parent_p (&ira_loop_nodes[i]);"}, {"sha": "65f9c6c9d4a1fd9915bdd3cc36956a017898afef", "filename": "gcc/loop-init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -251,7 +251,7 @@ fix_loop_structure (bitmap changed_bbs)\n \n   /* Remember the number of loops so we can return how many new loops\n      flow_loops_find discovered.  */\n-  old_nloops = number_of_loops ();\n+  old_nloops = number_of_loops (cfun);\n \n   /* Re-compute loop structure in-place.  */\n   flow_loops_find (current_loops);\n@@ -269,10 +269,10 @@ fix_loop_structure (bitmap changed_bbs)\n     }\n \n   /* Finally free deleted loops.  */\n-  FOR_EACH_VEC_ELT (*get_loops (), i, loop)\n+  FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n     if (loop && loop->header == NULL)\n       {\n-\t(*get_loops ())[i] = NULL;\n+\t(*get_loops (cfun))[i] = NULL;\n \tflow_loop_free (loop);\n       }\n \n@@ -287,7 +287,7 @@ fix_loop_structure (bitmap changed_bbs)\n \n   timevar_pop (TV_LOOP_INIT);\n \n-  return number_of_loops () - old_nloops;\n+  return number_of_loops (cfun) - old_nloops;\n }\n \f\n /* Gate for the RTL loop superpass.  The actual passes are subpasses.\n@@ -426,7 +426,7 @@ gate_rtl_move_loop_invariants (void)\n static unsigned int\n rtl_move_loop_invariants (void)\n {\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     move_loop_invariants ();\n   return 0;\n }\n@@ -463,7 +463,7 @@ gate_rtl_unswitch (void)\n static unsigned int\n rtl_unswitch (void)\n {\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     unswitch_loops ();\n   return 0;\n }\n@@ -499,7 +499,7 @@ gate_rtl_unroll_and_peel_loops (void)\n static unsigned int\n rtl_unroll_and_peel_loops (void)\n {\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     {\n       int flags = 0;\n       if (dump_file)\n@@ -553,7 +553,7 @@ static unsigned int\n rtl_doloop (void)\n {\n #ifdef HAVE_doloop_end\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     doloop_optimize_loops ();\n #endif\n   return 0;"}, {"sha": "02889a99501144b29c94a625c3918928e14776a8", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -673,6 +673,7 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n \n   struct loops *loops = ggc_alloc_cleared_loops ();\n   init_loops_structure (fn, loops, n_loops);\n+  set_loops_for_fn (fn, loops);\n \n   /* Input each loop and associate it with its loop header so\n      flow_loops_find can rebuild the loop tree.  */\n@@ -686,7 +687,6 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n \t}\n \n       struct loop *loop = alloc_loop ();\n-      loop->num = loops->larray->length ();\n       loop->header = BASIC_BLOCK_FOR_FUNCTION (fn, header_index);\n       loop->header->loop_father = loop;\n \n@@ -705,15 +705,15 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n \t  loop->nb_iterations_estimate.high = streamer_read_hwi (ib);\n \t}\n \n-      loops->larray->quick_push (loop);\n+      place_new_loop (fn, loop);\n \n       /* flow_loops_find doesn't like loops not in the tree, hook them\n          all as siblings of the tree root temporarily.  */\n       flow_loop_tree_node_add (loops->tree_root, loop);\n     }\n \n   /* Rebuild the loop tree.  */\n-  fn->x_current_loops = flow_loops_find (loops);\n+  flow_loops_find (loops);\n }\n \n "}, {"sha": "dfaf2806b7471d9973436f3df7d6a0205879bc08", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -664,12 +664,12 @@ output_cfg (struct output_block *ob, struct function *fn)\n   gcc_assert (cfun == fn);\n \n   /* Output the number of loops.  */\n-  streamer_write_uhwi (ob, number_of_loops ());\n+  streamer_write_uhwi (ob, number_of_loops (fn));\n \n   /* Output each loop, skipping the tree root which has number zero.  */\n-  for (unsigned i = 1; i < number_of_loops (); ++i)\n+  for (unsigned i = 1; i < number_of_loops (fn); ++i)\n     {\n-      struct loop *loop = get_loop (i);\n+      struct loop *loop = get_loop (fn, i);\n \n       /* Write the index of the loop header.  That's enough to rebuild\n          the loop tree on the reader side.  Stream -1 for an unused"}, {"sha": "1e9b16c6fcb230689c190c7931f489d91077a079", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1360,7 +1360,7 @@ sms_schedule (void)\n \n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t       | LOOPS_HAVE_RECORDED_EXITS);\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     {\n       loop_optimizer_finalize ();\n       return;  /* There are no loops to schedule.  */\n@@ -1384,7 +1384,7 @@ sms_schedule (void)\n \n   /* Allocate memory to hold the DDG array one entry for each loop.\n      We use loop->num as index into this array.  */\n-  g_arr = XCNEWVEC (ddg_ptr, number_of_loops ());\n+  g_arr = XCNEWVEC (ddg_ptr, number_of_loops (cfun));\n \n   if (dump_file)\n   {"}, {"sha": "9a15c87dac9f2f83a21a73f6e8bc901b39175a10", "filename": "gcc/predict.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -2338,7 +2338,7 @@ tree_estimate_probability (void)\n   tree_bb_level_predictions ();\n   record_loop_exits ();\n \n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     predict_loops ();\n \n   FOR_EACH_BB (bb)\n@@ -2372,7 +2372,7 @@ tree_estimate_probability_driver (void)\n \n   mark_irreducible_loops ();\n \n-  nb_loops = number_of_loops ();\n+  nb_loops = number_of_loops (cfun);\n   if (nb_loops > 1)\n     scev_initialize ();\n \n@@ -2694,7 +2694,7 @@ estimate_loops (void)\n   basic_block bb;\n \n   /* Start by estimating the frequencies in the loops.  */\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     estimate_loops_at_level (current_loops->tree_root->inner);\n \n   /* Now propagate the frequencies through all the blocks.  */"}, {"sha": "798a2f74057b21c9642b9153c8628dbea3765394", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -6586,11 +6586,11 @@ fixup_loop_arrays_after_move (struct function *fn1, struct function *fn2,\n \t\t\t      struct loop *loop)\n {\n   /* Discard it from the old loop array.  */\n-  (*fn1->x_current_loops->larray)[loop->num] = NULL;\n+  (*get_loops (fn1))[loop->num] = NULL;\n \n   /* Place it in the new loop array, assigning it a new number.  */\n-  loop->num = vec_safe_length (fn2->x_current_loops->larray);\n-  vec_safe_push (fn2->x_current_loops->larray, loop);\n+  loop->num = number_of_loops (fn2);\n+  vec_safe_push (loops_for_fn (fn2)->larray, loop);\n \n   /* Recurse to children.  */\n   for (loop = loop->inner; loop; loop = loop->next)\n@@ -6717,9 +6717,10 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n     }\n \n   /* Initialize an empty loop tree.  */\n-  dest_cfun->x_current_loops = ggc_alloc_cleared_loops ();\n-  init_loops_structure (dest_cfun, dest_cfun->x_current_loops, 1);\n-  dest_cfun->x_current_loops->state = LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n+  struct loops *loops = ggc_alloc_cleared_loops ();\n+  init_loops_structure (dest_cfun, loops, 1);\n+  loops->state = LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n+  set_loops_for_fn (dest_cfun, loops);\n \n   /* Move the outlined loop tree part.  */\n   FOR_EACH_VEC_ELT (bbs, i, bb)\n@@ -6729,25 +6730,25 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \t{\n \t  struct loop *loop = bb->loop_father;\n \t  flow_loop_tree_node_remove (bb->loop_father);\n-\t  flow_loop_tree_node_add (dest_cfun->x_current_loops->tree_root, loop);\n+\t  flow_loop_tree_node_add (get_loop (dest_cfun, 0), loop);\n \t  fixup_loop_arrays_after_move (saved_cfun, cfun, loop);\n \t}\n \n       /* Remove loop exits from the outlined region.  */\n-      if (saved_cfun->x_current_loops->exits)\n+      if (loops_for_fn (saved_cfun)->exits)\n \tFOR_EACH_EDGE (e, ei, bb->succs)\n \t  {\n \t    void **slot = htab_find_slot_with_hash\n-\t\t(saved_cfun->x_current_loops->exits, e,\n+\t\t(loops_for_fn (saved_cfun)->exits, e,\n \t\t htab_hash_pointer (e), NO_INSERT);\n \t    if (slot)\n-\t      htab_clear_slot (saved_cfun->x_current_loops->exits, slot);\n+\t      htab_clear_slot (loops_for_fn (saved_cfun)->exits, slot);\n \t  }\n     }\n \n \n   /* Adjust the number of blocks in the tree root of the outlined part.  */\n-  dest_cfun->x_current_loops->tree_root->num_nodes = bbs.length () + 2;\n+  get_loop (dest_cfun, 0)->num_nodes = bbs.length () + 2;\n \n   /* Setup a mapping to be used by move_block_to_fn.  */\n   loop->aux = current_loops->tree_root;\n@@ -7226,7 +7227,7 @@ debug_loop (struct loop *loop, int verbosity)\n DEBUG_FUNCTION void\n debug_loop_num (unsigned num, int verbosity)\n {\n-  debug_loop (get_loop (num), verbosity);\n+  debug_loop (get_loop (cfun, num), verbosity);\n }\n \n /* Return true if BB ends with a call, possibly followed by some"}, {"sha": "c18ccd3f9333d750742fc16bf334bb970dc407e1", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -517,7 +517,7 @@ chrec_evaluate (unsigned var, tree chrec, tree n, unsigned int k)\n {\n   tree arg0, arg1, binomial_n_k;\n   tree type = TREE_TYPE (chrec);\n-  struct loop *var_loop = get_loop (var);\n+  struct loop *var_loop = get_loop (cfun, var);\n \n   while (TREE_CODE (chrec) == POLYNOMIAL_CHREC\n \t && flow_loop_nested_p (var_loop, get_chrec_loop (chrec)))\n@@ -690,7 +690,7 @@ tree\n hide_evolution_in_other_loops_than_loop (tree chrec,\n \t\t\t\t\t unsigned loop_num)\n {\n-  struct loop *loop = get_loop (loop_num), *chloop;\n+  struct loop *loop = get_loop (cfun, loop_num), *chloop;\n   if (automatically_generated_chrec_p (chrec))\n     return chrec;\n \n@@ -731,7 +731,7 @@ chrec_component_in_loop_num (tree chrec,\n \t\t\t     bool right)\n {\n   tree component;\n-  struct loop *loop = get_loop (loop_num), *chloop;\n+  struct loop *loop = get_loop (cfun, loop_num), *chloop;\n \n   if (automatically_generated_chrec_p (chrec))\n     return chrec;\n@@ -813,7 +813,7 @@ reset_evolution_in_loop (unsigned loop_num,\n \t\t\t tree chrec,\n \t\t\t tree new_evol)\n {\n-  struct loop *loop = get_loop (loop_num);\n+  struct loop *loop = get_loop (cfun, loop_num);\n \n   if (POINTER_TYPE_P (chrec_type (chrec)))\n     gcc_assert (ptrofftype_p (chrec_type (new_evol)));\n@@ -986,14 +986,14 @@ evolution_function_is_invariant_rec_p (tree chrec, int loopnum)\n \n   if (TREE_CODE (chrec) == SSA_NAME\n       && (loopnum == 0\n-\t  || expr_invariant_in_loop_p (get_loop (loopnum), chrec)))\n+\t  || expr_invariant_in_loop_p (get_loop (cfun, loopnum), chrec)))\n     return true;\n \n   if (TREE_CODE (chrec) == POLYNOMIAL_CHREC)\n     {\n       if (CHREC_VARIABLE (chrec) == (unsigned) loopnum\n-\t  || flow_loop_nested_p (get_loop (loopnum),\n-\t\t\t\t get_loop (CHREC_VARIABLE (chrec)))\n+\t  || flow_loop_nested_p (get_loop (cfun, loopnum),\n+\t\t\t\t get_chrec_loop (chrec))\n \t  || !evolution_function_is_invariant_rec_p (CHREC_RIGHT (chrec),\n \t\t\t\t\t\t     loopnum)\n \t  || !evolution_function_is_invariant_rec_p (CHREC_LEFT (chrec),"}, {"sha": "0ebb8c36cea7e833cf621bfa307a82f521bc3c56", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1818,7 +1818,7 @@ main_tree_if_conversion (void)\n   bool changed = false;\n   unsigned todo = 0;\n \n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   FOR_EACH_LOOP (li, loop, 0)"}, {"sha": "3abaadc5d2e153510ea6c1863c821c3158c92b80", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -2223,7 +2223,7 @@ copy_loops (bitmap blocks_to_copy,\n \t  copy_loop_info (src_loop, dest_loop);\n \n \t  /* Finally place it into the loop array and the loop tree.  */\n-\t  place_new_loop (dest_loop);\n+\t  place_new_loop (cfun, dest_loop);\n \t  flow_loop_tree_node_add (dest_parent, dest_loop);\n \n \t  /* Recurse.  */\n@@ -2332,11 +2332,11 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n     }\n \n   /* Duplicate the loop tree, if available and wanted.  */\n-  if (id->src_cfun->x_current_loops != NULL\n+  if (loops_for_fn (src_cfun) != NULL\n       && current_loops != NULL)\n     {\n       copy_loops (blocks_to_copy, entry_block_map->loop_father,\n-\t\t  id->src_cfun->x_current_loops->tree_root);\n+\t\t  get_loop (src_cfun, 0));\n       /* Defer to cfgcleanup to update loop-father fields of basic-blocks.  */\n       loops_state_set (LOOPS_NEED_FIXUP);\n     }\n@@ -5199,7 +5199,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n     }\n \n   /* Set up the destination functions loop tree.  */\n-  if (DECL_STRUCT_FUNCTION (old_decl)->x_current_loops)\n+  if (loops_for_fn (DECL_STRUCT_FUNCTION (old_decl)) != NULL)\n     {\n       cfun->curr_properties &= ~PROP_loops;\n       loop_optimizer_init (AVOID_CFG_MODIFICATIONS);"}, {"sha": "13b78cc37d2f713c4d219d158d103f938e30c5e0", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -774,7 +774,7 @@ rdg_flag_loop_exits (struct graph *rdg, bitmap loops, partition_t partition,\n   conds.create (3);\n \n   EXECUTE_IF_SET_IN_BITMAP (loops, 0, i, bi)\n-    collect_condition_stmts (get_loop (i), &conds);\n+    collect_condition_stmts (get_loop (cfun, i), &conds);\n \n   while (!conds.is_empty ())\n     {\n@@ -787,7 +787,7 @@ rdg_flag_loop_exits (struct graph *rdg, bitmap loops, partition_t partition,\n \n       EXECUTE_IF_SET_IN_BITMAP (new_loops, 0, i, bi)\n \tif (bitmap_set_bit (loops, i))\n-\t  collect_condition_stmts (get_loop (i), &conds);\n+\t  collect_condition_stmts (get_loop (cfun, i), &conds);\n \n       BITMAP_FREE (new_loops);\n     }"}, {"sha": "f68cd7f41246df8fdf4c996b6fcc397e59be4584", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -422,7 +422,7 @@ chrec_contains_symbols_defined_in_loop (const_tree chrec, unsigned loop_nb)\n \n       def = SSA_NAME_DEF_STMT (chrec);\n       def_loop = loop_containing_stmt (def);\n-      loop = get_loop (loop_nb);\n+      loop = get_loop (cfun, loop_nb);\n \n       if (def_loop == NULL)\n \treturn false;\n@@ -629,7 +629,7 @@ add_to_evolution_1 (unsigned loop_nb, tree chrec_before, tree to_add,\n \t\t    gimple at_stmt)\n {\n   tree type, left, right;\n-  struct loop *loop = get_loop (loop_nb), *chloop;\n+  struct loop *loop = get_loop (cfun, loop_nb), *chloop;\n \n   switch (TREE_CODE (chrec_before))\n     {\n@@ -3258,7 +3258,7 @@ scev_const_prop (void)\n   loop_iterator li;\n   gimple_stmt_iterator psi;\n \n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   FOR_EACH_BB (bb)"}, {"sha": "55ba82c5dbd5a1b574b33c603a00ee936ee033b7", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -64,7 +64,7 @@ instantiate_parameters (struct loop *loop, tree chrec)\n static inline struct loop *\n get_chrec_loop (const_tree chrec)\n {\n-  return get_loop (CHREC_VARIABLE (chrec));\n+  return get_loop (cfun, CHREC_VARIABLE (chrec));\n }\n \n #endif  /* GCC_TREE_SCALAR_EVOLUTION_H  */"}, {"sha": "a1d02997eda1a03c3b15883aab6487a26dfb18fe", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -136,7 +136,7 @@ copy_loop_headers (void)\n \n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t       | LOOPS_HAVE_SIMPLE_LATCHES);\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     {\n       loop_optimizer_finalize ();\n       return 0;"}, {"sha": "e5e502b29013be402a042050c63fd7a81612fe5d", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -1593,7 +1593,7 @@ analyze_memory_references (void)\n   /* Initialize bb_loop_postorder with a mapping from loop->num to\n      its postorder index.  */\n   i = 0;\n-  bb_loop_postorder = XNEWVEC (unsigned, number_of_loops ());\n+  bb_loop_postorder = XNEWVEC (unsigned, number_of_loops (cfun));\n   FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)\n     bb_loop_postorder[loop->num] = i++;\n   /* Collect all basic-blocks in loops and sort them after their\n@@ -2563,14 +2563,14 @@ tree_ssa_lim_initialize (void)\n   memory_accesses.refs_list.quick_push\n     (mem_ref_alloc (error_mark_node, 0, UNANALYZABLE_MEM_ID));\n \n-  memory_accesses.refs_in_loop.create (number_of_loops ());\n-  memory_accesses.refs_in_loop.quick_grow (number_of_loops ());\n-  memory_accesses.refs_stored_in_loop.create (number_of_loops ());\n-  memory_accesses.refs_stored_in_loop.quick_grow (number_of_loops ());\n-  memory_accesses.all_refs_stored_in_loop.create (number_of_loops ());\n-  memory_accesses.all_refs_stored_in_loop.quick_grow (number_of_loops ());\n+  memory_accesses.refs_in_loop.create (number_of_loops (cfun));\n+  memory_accesses.refs_in_loop.quick_grow (number_of_loops (cfun));\n+  memory_accesses.refs_stored_in_loop.create (number_of_loops (cfun));\n+  memory_accesses.refs_stored_in_loop.quick_grow (number_of_loops (cfun));\n+  memory_accesses.all_refs_stored_in_loop.create (number_of_loops (cfun));\n+  memory_accesses.all_refs_stored_in_loop.quick_grow (number_of_loops (cfun));\n \n-  for (i = 0; i < number_of_loops (); i++)\n+  for (i = 0; i < number_of_loops (cfun); i++)\n     {\n       bitmap_initialize (&memory_accesses.refs_in_loop[i],\n \t\t\t &lim_bitmap_obstack);"}, {"sha": "edc5b7b5fdd9670f9cce9d0c54a58c66f06a73a0", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -493,7 +493,7 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   bitmap names_to_rename;\n \n   loops_state_set (LOOP_CLOSED_SSA);\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return;\n \n   /* If the pass has caused the SSA form to be out-of-date, update it\n@@ -516,7 +516,7 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n     {\n       /* An array of bitmaps where LOOP_EXITS[I] is the set of basic blocks\n \t that are the destination of an edge exiting loop number I.  */\n-      bitmap *loop_exits = XNEWVEC (bitmap, number_of_loops ());\n+      bitmap *loop_exits = XNEWVEC (bitmap, number_of_loops (cfun));\n       get_loops_exits (loop_exits);\n \n       /* Add the PHI nodes on exits of the loops for the names we need to\n@@ -578,7 +578,7 @@ verify_loop_closed_ssa (bool verify_ssa_p)\n   edge e;\n   edge_iterator ei;\n \n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return;\n \n   if (verify_ssa_p)"}, {"sha": "99e27a1359a6077249fd9166b1fad01c14645319", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -74,7 +74,7 @@ tree_ssa_loop_init (void)\n      regions into reducible.  */\n   scev_initialize ();\n \n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return 0;\n@@ -105,7 +105,7 @@ struct gimple_opt_pass pass_tree_loop_init =\n static unsigned int\n tree_ssa_loop_im (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return tree_ssa_lim ();\n@@ -142,7 +142,7 @@ struct gimple_opt_pass pass_lim =\n static unsigned int\n tree_ssa_loop_unswitch (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return tree_ssa_unswitch_loops ();\n@@ -216,7 +216,7 @@ struct gimple_opt_pass pass_predcom =\n static unsigned int\n tree_vectorize (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return vectorize_loops ();\n@@ -323,7 +323,7 @@ struct gimple_opt_pass pass_graphite_transforms =\n static unsigned int\n check_data_deps (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   tree_check_data_deps ();\n@@ -361,7 +361,7 @@ struct gimple_opt_pass pass_check_data_deps =\n static unsigned int\n tree_ssa_loop_ivcanon (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return canonicalize_induction_variables ();\n@@ -428,7 +428,7 @@ struct gimple_opt_pass pass_scev_cprop =\n static unsigned int\n tree_ssa_loop_bounds (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   estimate_numbers_of_iterations ();\n@@ -461,7 +461,7 @@ struct gimple_opt_pass pass_record_bounds =\n static unsigned int\n tree_complete_unroll (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return tree_unroll_loops_completely (flag_unroll_loops\n@@ -504,7 +504,7 @@ tree_complete_unroll_inner (void)\n \n   loop_optimizer_init (LOOPS_NORMAL\n \t\t       | LOOPS_HAVE_RECORDED_EXITS);\n-  if (number_of_loops () > 1)\n+  if (number_of_loops (cfun) > 1)\n     {\n       scev_initialize ();\n       ret = tree_unroll_loops_completely (optimize >= 3, false);\n@@ -553,7 +553,7 @@ gate_tree_parallelize_loops (void)\n static unsigned\n tree_parallelize_loops (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   if (parallelize_loops ())\n@@ -586,7 +586,7 @@ struct gimple_opt_pass pass_parallelize_loops =\n static unsigned int\n tree_ssa_loop_prefetch (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   return tree_ssa_prefetch_arrays ();\n@@ -623,7 +623,7 @@ struct gimple_opt_pass pass_loop_prefetch =\n static unsigned int\n tree_ssa_loop_ivopts (void)\n {\n-  if (number_of_loops () <= 1)\n+  if (number_of_loops (cfun) <= 1)\n     return 0;\n \n   tree_ssa_iv_optimize ();"}, {"sha": "215206743e8eaec6b13646c89ed1a3c9056c5c06", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -2117,7 +2117,8 @@ execute_update_addresses_taken (void)\n \t  }\n \n       /* Update SSA form here, we are called as non-pass as well.  */\n-      if (number_of_loops () > 1 && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n+      if (number_of_loops (cfun) > 1\n+\t  && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n \trewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n       else\n \tupdate_ssa (TODO_update_ssa);"}, {"sha": "843a03ca85cebea67fe04619d98a8cf51c9a4b72", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc822d0f936df2b4e500baf257f0c8cb72af512/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=0fc822d0f936df2b4e500baf257f0c8cb72af512", "patch": "@@ -87,7 +87,7 @@ vectorize_loops (void)\n   loop_iterator li;\n   struct loop *loop;\n \n-  vect_loops_num = number_of_loops ();\n+  vect_loops_num = number_of_loops (cfun);\n \n   /* Bail out if there are no loops.  */\n   if (vect_loops_num <= 1)\n@@ -139,7 +139,7 @@ vectorize_loops (void)\n     {\n       loop_vec_info loop_vinfo;\n \n-      loop = get_loop (i);\n+      loop = get_loop (cfun, i);\n       if (!loop)\n \tcontinue;\n       loop_vinfo = (loop_vec_info) loop->aux;"}]}