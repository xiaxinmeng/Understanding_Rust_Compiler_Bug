{"sha": "f00bc26c002e81a23e84c8c359a97c88b6b95447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwYmMyNmMwMDJlODFhMjNlODRjOGMzNTlhOTdjODhiNmI5NTQ0Nw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:23:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:23:19Z"}, "message": "Add testcase missing in last commit.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-cmp-2.c: New test.\n\nFrom-SVN: r243156", "tree": {"sha": "75e31f5df7ec771bd755df91bef401f2f3843434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75e31f5df7ec771bd755df91bef401f2f3843434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f00bc26c002e81a23e84c8c359a97c88b6b95447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00bc26c002e81a23e84c8c359a97c88b6b95447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00bc26c002e81a23e84c8c359a97c88b6b95447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00bc26c002e81a23e84c8c359a97c88b6b95447/comments", "author": null, "committer": null, "parents": [{"sha": "eca9803844ddf459d3f5992aa88353603f0cb731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca9803844ddf459d3f5992aa88353603f0cb731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca9803844ddf459d3f5992aa88353603f0cb731"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "0711f9c05317058458b771130a0825e4aa4ece9c", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-cmp-2.c", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00bc26c002e81a23e84c8c359a97c88b6b95447/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00bc26c002e81a23e84c8c359a97c88b6b95447/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c?ref=f00bc26c002e81a23e84c8c359a97c88b6b95447", "patch": "@@ -0,0 +1,203 @@\n+/* Similiar to vec-cmp-1.c but requires that\n+   s390_canonicalize_comparison is able to merge the the two nested\n+   compares.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -mzvector -fno-asynchronous-unwind-tables\" } */\n+\n+#include <vecintrin.h>\n+\n+extern void foo (void);\n+\n+int __attribute__((noinline,noclone))\n+all_eq_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_eq (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_ne_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_ne (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_gt_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_gt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_lt_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_lt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_ge_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_ge (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_le_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_all_le (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_eq_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_eq (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_ne_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_ne (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_gt_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_gt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_lt_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_lt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_ge_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_ge (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_le_double (vector double a, vector double b)\n+{\n+  if (__builtin_expect (vec_any_le (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_eq_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_eq (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_ne_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_ne (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_gt_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_gt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_lt_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_lt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_ge_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_ge (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+all_le_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_all_le (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_eq_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_eq (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_ne_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_ne (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_gt_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_gt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_lt_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_lt (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_ge_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_ge (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tje 1 } } */\n+\n+int __attribute__((noinline,noclone))\n+any_le_int (vector int a, vector int b)\n+{\n+  if (__builtin_expect (vec_any_le (a, b), 1))\n+    foo ();\n+}\n+/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n+"}]}