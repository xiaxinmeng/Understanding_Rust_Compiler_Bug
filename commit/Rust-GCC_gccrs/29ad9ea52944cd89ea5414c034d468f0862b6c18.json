{"sha": "29ad9ea52944cd89ea5414c034d468f0862b6c18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhZDllYTUyOTQ0Y2Q4OWVhNTQxNGMwMzRkNDY4ZjA4NjJiNmMxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:14:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:14:11Z"}, "message": "[multiple changes]\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-coorse.adb, a-coorse.ads (Generic_Keys): Add a\n\tReference_Control_Type to generic package, to keep additional\n\tinformation for Reference_Types that manipulate keys. Add Adjust and\n\tFinalize procedures for this type.\n\t(Finalize): When finalizing a reference_preserving_key, verify\n\tthat the key of the new value is equivalent to the key of the\n\toriginal element, raise Program_Error otherwise.\n\t(Insert): Detect tampering.\n\t(Reference_Preserving_Key): Build proper Reference_Control_Type,\n\tand update Busy and Lock bits to detect tampering.\n\t* a-cohase.ads: Keep with-clause private.\n\n2014-07-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Eq): Emit a warning when the operands\n\tof an equality are of an Unchecked_Union type and lack inferable\n\tdiscriminants.\n\nFrom-SVN: r213277", "tree": {"sha": "53066db52b318418f14cc54eb9820b3b1bb18089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53066db52b318418f14cc54eb9820b3b1bb18089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ad9ea52944cd89ea5414c034d468f0862b6c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ad9ea52944cd89ea5414c034d468f0862b6c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ad9ea52944cd89ea5414c034d468f0862b6c18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ad9ea52944cd89ea5414c034d468f0862b6c18/comments", "author": null, "committer": null, "parents": [{"sha": "995683a614a3a5f3ac8466a6a13776a27d0f0666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995683a614a3a5f3ac8466a6a13776a27d0f0666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995683a614a3a5f3ac8466a6a13776a27d0f0666"}], "stats": {"total": 153, "additions": 139, "deletions": 14}, "files": [{"sha": "fba9ada2d4744fb9f69cef2ed522d9fe2494ad4f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=29ad9ea52944cd89ea5414c034d468f0862b6c18", "patch": "@@ -1,3 +1,23 @@\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-coorse.adb, a-coorse.ads (Generic_Keys): Add a\n+\tReference_Control_Type to generic package, to keep additional\n+\tinformation for Reference_Types that manipulate keys. Add Adjust and\n+\tFinalize procedures for this type.\n+\t(Finalize): When finalizing a reference_preserving_key, verify\n+\tthat the key of the new value is equivalent to the key of the\n+\toriginal element, raise Program_Error otherwise.\n+\t(Insert): Detect tampering.\n+\t(Reference_Preserving_Key): Build proper Reference_Control_Type,\n+\tand update Busy and Lock bits to detect tampering.\n+\t* a-cohase.ads: Keep with-clause private.\n+\n+2014-07-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): Emit a warning when the operands\n+\tof an equality are of an Unchecked_Union type and lack inferable\n+\tdiscriminants.\n+\n 2014-07-30  Bob Duff  <duff@adacore.com>\n \n \t* g-exctra.adb, g-exctra.ads, s-exctra.adb, s-exctra.ads, Makefile.rtl,"}, {"sha": "cfe048aa56a5d9860e14c8065a47de8fc70a204e", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=29ad9ea52944cd89ea5414c034d468f0862b6c18", "patch": "@@ -35,7 +35,7 @@ with Ada.Iterator_Interfaces;\n \n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n-with Ada.Finalization;\n+private with Ada.Finalization;\n \n generic\n    type Element_Type is private;"}, {"sha": "116305bbf25f500eb8add4d9b7d8157bc44e3571", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 79, "deletions": 9, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=29ad9ea52944cd89ea5414c034d468f0862b6c18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -690,6 +690,24 @@ package body Ada.Containers.Ordered_Sets is\n            Is_Less_Key_Node    => Is_Less_Key_Node,\n            Is_Greater_Key_Node => Is_Greater_Key_Node);\n \n+      ------------\n+      -- Adjust --\n+      ------------\n+\n+      procedure Adjust (Control : in out Reference_Control_Type) is\n+      begin\n+         if Control.Container /= null then\n+            declare\n+               Tree : Tree_Type renames Control.Container.Tree;\n+               B : Natural renames Tree.Busy;\n+               L : Natural renames Tree.Lock;\n+            begin\n+               B := B + 1;\n+               L := L + 1;\n+            end;\n+         end if;\n+      end Adjust;\n+\n       -------------\n       -- Ceiling --\n       -------------\n@@ -793,6 +811,32 @@ package body Ada.Containers.Ordered_Sets is\n          end if;\n       end Exclude;\n \n+      --------------\n+      -- Finalize --\n+      --------------\n+\n+      procedure Finalize (Control : in out Reference_Control_Type) is\n+      begin\n+         if Control.Container /= null then\n+            declare\n+               Tree : Tree_Type renames Control.Container.Tree;\n+               B : Natural renames Tree.Busy;\n+               L : Natural renames Tree.Lock;\n+            begin\n+               B := B - 1;\n+               L := L - 1;\n+            end;\n+\n+            if not (Key (Control.Pos) = Control.Old_Key.all) then\n+               Delete (Control.Container.all, Key (Control.Pos));\n+               raise Program_Error;\n+            end if;\n+\n+            Control.Container := null;\n+            Control.Old_Key   := null;\n+         end if;\n+      end Finalize;\n+\n       ----------\n       -- Find --\n       ----------\n@@ -890,11 +934,24 @@ package body Ada.Containers.Ordered_Sets is\n            (Vet (Container.Tree, Position.Node),\n             \"bad cursor in function Reference_Preserving_Key\");\n \n-         --  Some form of finalization will be required in order to actually\n-         --  check that the key-part of the element designated by Position has\n-         --  not changed.  ???\n+         declare\n+            Tree : Tree_Type renames Container.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n \n-         return (Element => Position.Node.Element'Access);\n+         begin\n+            return R : constant Reference_Type :=\n+              (Element  => Position.Node.Element'Access,\n+                 Control =>\n+                   (Controlled with\n+                     Container => Container'Access,\n+                     Pos       => Position,\n+                     Old_Key   => new Key_Type'(Key (Position))))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Reference_Preserving_Key;\n \n       function Reference_Preserving_Key\n@@ -908,11 +965,24 @@ package body Ada.Containers.Ordered_Sets is\n             raise Constraint_Error with \"key not in set\";\n          end if;\n \n-         --  Some form of finalization will be required in order to actually\n-         --  check that the key-part of the element designated by Position has\n-         --  not changed.  ???\n+         declare\n+            Tree : Tree_Type renames Container.Tree;\n+            B : Natural renames Tree.Busy;\n+            L : Natural renames Tree.Lock;\n \n-         return (Element => Node.Element'Access);\n+         begin\n+            return R : constant Reference_Type :=\n+              (Element  => Node.Element'Access,\n+                 Control =>\n+                   (Controlled with\n+                     Container => Container'Access,\n+                     Pos       => Find (Container, Key),\n+                     Old_Key   => new Key_Type'(Key)))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n+         end;\n       end Reference_Preserving_Key;\n \n       -------------"}, {"sha": "eea99f1c411e50e0ab7672901a3212415f97ccca", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=29ad9ea52944cd89ea5414c034d468f0862b6c18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -278,8 +278,30 @@ package Ada.Containers.Ordered_Sets is\n          Key       : Key_Type) return Reference_Type;\n \n    private\n-      type Reference_Type\n-         (Element : not null access Element_Type) is null record;\n+      type Set_Access is access all Set;\n+      for Set_Access'Storage_Size use 0;\n+\n+      type Key_Access is access all Key_Type;\n+\n+      type Reference_Control_Type is\n+        new Ada.Finalization.Controlled with\n+      record\n+         Container : Set_Access;\n+         Pos       : Cursor;\n+         Old_Key   : Key_Access;\n+      end record;\n+\n+      overriding procedure\n+         Adjust (Control : in out Reference_Control_Type);\n+      pragma Inline (Adjust);\n+\n+      overriding procedure\n+         Finalize (Control : in out Reference_Control_Type);\n+      pragma Inline (Finalize);\n+\n+      type Reference_Type (Element : not null access Element_Type) is record\n+         Control  : Reference_Control_Type;\n+      end record;\n \n       use Ada.Streams;\n "}, {"sha": "b3d180ff4d7c47096e3222ed05b7a6417af4e3fe", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ad9ea52944cd89ea5414c034d468f0862b6c18/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=29ad9ea52944cd89ea5414c034d468f0862b6c18", "patch": "@@ -7357,12 +7357,25 @@ package body Exp_Ch4 is\n                  Make_Raise_Program_Error (Loc,\n                    Reason => PE_Unchecked_Union_Restriction));\n \n+               --  Emit a warning on source equalities only, otherwise the\n+               --  message may appear out of place due to internal use. The\n+               --  warning is unconditional because it is required by the\n+               --  language.\n+\n+               if Comes_From_Source (N) then\n+                  Error_Msg_N\n+                    (\"??Unchecked_Union discriminants cannot be determined\",\n+                     N);\n+                  Error_Msg_N\n+                    (\"\\Program_Error will be raised for equality operation\",\n+                     N);\n+               end if;\n+\n                --  Prevent Gigi from generating incorrect code by rewriting\n                --  the equality as a standard False (documented where???).\n \n                Rewrite (N,\n                  New_Occurrence_Of (Standard_False, Loc));\n-\n             end if;\n \n          --  If a type support function is present (for complex cases), use it"}]}