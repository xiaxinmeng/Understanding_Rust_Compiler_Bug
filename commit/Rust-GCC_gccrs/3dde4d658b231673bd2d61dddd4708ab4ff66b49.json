{"sha": "3dde4d658b231673bd2d61dddd4708ab4ff66b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkZTRkNjU4YjIzMTY3M2JkMmQ2MWRkZGQ0NzA4YWI0ZmY2NmI0OQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2016-01-26T16:34:24Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2016-01-26T16:34:24Z"}, "message": "configure.ac (ac_cv_std_swap_in_utility): New test.\n\n\t* configure.ac (ac_cv_std_swap_in_utility): New test.\n\t* system.h (<algorithm>): Check HAVE_SWAP_IN_UTILITY as well.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r232836", "tree": {"sha": "9edc53bf63b981b4a43ccf59323db191f3ef1075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9edc53bf63b981b4a43ccf59323db191f3ef1075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dde4d658b231673bd2d61dddd4708ab4ff66b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dde4d658b231673bd2d61dddd4708ab4ff66b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dde4d658b231673bd2d61dddd4708ab4ff66b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dde4d658b231673bd2d61dddd4708ab4ff66b49/comments", "author": null, "committer": null, "parents": [{"sha": "8964d2a090ffb96d822c8d3e5b533b5777285240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8964d2a090ffb96d822c8d3e5b533b5777285240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8964d2a090ffb96d822c8d3e5b533b5777285240"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "71e96024dd4f3bb5df3f4b8da85822e699abd5b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dde4d658b231673bd2d61dddd4708ab4ff66b49", "patch": "@@ -1,11 +1,18 @@\n+2016-01-26  Michael Matz  <matz@suse.de>\n+\n+\t* configure.ac (ac_cv_std_swap_in_utility): New test.\n+\t* system.h (<algorithm>): Check HAVE_SWAP_IN_UTILITY as well.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2016-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n \n-        * config/arc/arc.md (cstoresi4): Force operand into register.\n-        (arcset<code>): Fix predicate.\n-        (arcsetltu): Likewise.\n-        (arcsetgeu): Likewise.\n-        (arcsethi): Likewise.\n-        (arcsetls): Likewise.\n+\t* config/arc/arc.md (cstoresi4): Force operand into register.\n+\t(arcset<code>): Fix predicate.\n+\t(arcsetltu): Likewise.\n+\t(arcsetgeu): Likewise.\n+\t(arcsethi): Likewise.\n+\t(arcsetls): Likewise.\n \n 2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "115cb61639dacd2661e2ef1ec7759ffb8917aa0f", "filename": "gcc/config.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=3dde4d658b231673bd2d61dddd4708ab4ff66b49", "patch": "@@ -1705,6 +1705,12 @@\n #endif\n \n \n+/* Define if <utility> defines std::swap. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_SWAP_IN_UTILITY\n+#endif\n+\n+\n /* Define to 1 if you have the `sysconf' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_SYSCONF\n@@ -1865,7 +1871,8 @@\n #endif\n \n \n-/* Define if your assembler supports .dwsect 0xB0000 */\n+/* Define if your assembler supports AIX debug frame section label reference.\n+   */\n #ifndef USED_FOR_TARGET\n #undef HAVE_XCOFF_DWARF_EXTRAS\n #endif"}, {"sha": "8ea4281cce424a774a12208df71fb73803cf3d7f", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3dde4d658b231673bd2d61dddd4708ab4ff66b49", "patch": "@@ -6534,6 +6534,40 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for std::swap in <utility>\" >&5\n+$as_echo_n \"checking for std::swap in <utility>... \" >&6; }\n+if test \"${ac_cv_std_swap_in_utility+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <utility>\n+\n+int\n+main ()\n+{\n+int a, b; std::swap(a,b);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_std_swap_in_utility=yes\n+else\n+  ac_cv_std_swap_in_utility=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_std_swap_in_utility\" >&5\n+$as_echo \"$ac_cv_std_swap_in_utility\" >&6; }\n+if test $ac_cv_std_swap_in_utility = yes; then\n+\n+$as_echo \"#define HAVE_SWAP_IN_UTILITY 1\" >>confdefs.h\n+\n+fi\n+\n # Check whether compiler is affected by placement new aliasing bug (PR 29286).\n # If the host compiler is affected by the bug, and we build with optimization\n # enabled (which happens e.g. when cross-compiling), the pool allocator may\n@@ -18419,7 +18453,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18422 \"configure\"\n+#line 18456 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18525,7 +18559,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18528 \"configure\"\n+#line 18562 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "6cfb68a8520a0a78f2a22019c76e43a4adb0e9c4", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=3dde4d658b231673bd2d61dddd4708ab4ff66b49", "patch": "@@ -416,6 +416,15 @@ struct X<long long> { typedef long long t; };\n ]], [[X<int64_t>::t x;]])],[],[AC_MSG_ERROR([error verifying int64_t uses long long])])\n fi\n \n+AC_CACHE_CHECK(for std::swap in <utility>, ac_cv_std_swap_in_utility, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#include <utility>\n+]], [[int a, b; std::swap(a,b);]])],[ac_cv_std_swap_in_utility=yes],[ac_cv_std_swap_in_utility=no])])\n+if test $ac_cv_std_swap_in_utility = yes; then\n+  AC_DEFINE(HAVE_SWAP_IN_UTILITY, 1,\n+  [Define if <utility> defines std::swap.])\n+fi\n+\n # Check whether compiler is affected by placement new aliasing bug (PR 29286).\n # If the host compiler is affected by the bug, and we build with optimization\n # enabled (which happens e.g. when cross-compiling), the pool allocator may"}, {"sha": "445073c5cae75f9b510ba13f6e46ebd451b6c77e", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dde4d658b231673bd2d61dddd4708ab4ff66b49/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=3dde4d658b231673bd2d61dddd4708ab4ff66b49", "patch": "@@ -217,7 +217,7 @@ extern int errno;\n #endif\n \n #ifdef __cplusplus\n-#ifdef INCLUDE_ALGORITHM\n+#if defined (INCLUDE_ALGORITHM) || !defined (HAVE_SWAP_IN_UTILITY)\n # include <algorithm>\n #endif\n # include <cstring>"}]}