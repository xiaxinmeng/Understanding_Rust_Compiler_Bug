{"sha": "0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0OWIxYjRkN2YwZDM0NTZlNzdjMDM2YTU2YzcwMDNjYThhMWI2NA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-10-30T14:01:12Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-10-30T14:01:12Z"}, "message": "msp430.c (msp430_check_index_not_high_mem): New.\n\ngcc/ChangeLog:\n\n2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.c (msp430_check_index_not_high_mem): New.\n\t(msp430_check_plus_not_high_mem): New.\n\t(msp430_op_not_in_high_mem): Use new functions to check if the operand\n\tmight be in low memory.\n\tIndicate that a 16-bit absolute address is in lower memory.\n\ngcc/testsuite/ChangeLog:\n\n2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* gcc.target/msp430/mlarge-use-430-insn.c: New test.\n\nFrom-SVN: r277623", "tree": {"sha": "c51c5ea93982819333f75bf3d235c56192f090a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c51c5ea93982819333f75bf3d235c56192f090a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7caa12927dff2ff9c5dd60dd38fb833066afdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7caa12927dff2ff9c5dd60dd38fb833066afdf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7caa12927dff2ff9c5dd60dd38fb833066afdf6"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "7b90915be6676cd7f2e8e8560472dda379a66c85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "patch": "@@ -1,3 +1,11 @@\n+2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_check_index_not_high_mem): New.\n+\t(msp430_check_plus_not_high_mem): New.\n+\t(msp430_op_not_in_high_mem): Use new functions to check if the operand\n+\tmight be in low memory.\n+\tIndicate that a 16-bit absolute address is in lower memory.\n+\n 2019-10-30  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (ipa_compute_jump_functions_for_bb): Fix the call to"}, {"sha": "a3d0d9cf64b8ad16b9a09c053a77fee02b707991", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "patch": "@@ -3232,10 +3232,37 @@ msp430_print_operand_addr (FILE * file, machine_mode /*mode*/, rtx addr)\n   msp430_print_operand_raw (file, addr);\n }\n \n+/* We can only allow signed 15-bit indexes i.e. +/-32K.  */\n+static bool\n+msp430_check_index_not_high_mem (rtx op)\n+{\n+  if (CONST_INT_P (op)\n+      && IN_RANGE (INTVAL (op), HOST_WIDE_INT_M1U << 15, (1 << 15) - 1))\n+    return true;\n+  return false;\n+}\n+\n+/* If this returns true, we don't need a 430X insn.  */\n+static bool\n+msp430_check_plus_not_high_mem (rtx op)\n+{\n+  if (GET_CODE (op) != PLUS)\n+    return false;\n+  rtx op0 = XEXP (op, 0);\n+  rtx op1 = XEXP (op, 1);\n+  if (SYMBOL_REF_P (op0)\n+      && (SYMBOL_REF_FLAGS (op0) & SYMBOL_FLAG_LOW_MEM)\n+      && msp430_check_index_not_high_mem (op1))\n+    return true;\n+  return false;\n+}\n+\n /* Determine whether an RTX is definitely not a MEM referencing an address in\n    the upper memory region.  Returns true if we've decided the address will be\n    in the lower memory region, or the RTX is not a MEM.  Returns false\n-   otherwise.  */\n+   otherwise.\n+   The Ys constraint will catch (mem (plus (const/reg)) but we catch cases\n+   involving a symbol_ref here.  */\n bool\n msp430_op_not_in_high_mem (rtx op)\n {\n@@ -3251,11 +3278,15 @@ msp430_op_not_in_high_mem (rtx op)\n        memory.  */\n     return true;\n \n-  /* Catch (mem (const (plus ((symbol_ref) (const_int))))) e.g. &addr+2.  */\n-  if ((GET_CODE (op0) == CONST)\n-      && (GET_CODE (XEXP (op0, 0)) == PLUS)\n-      && (SYMBOL_REF_P (XEXP (XEXP (op0, 0), 0)))\n-      && (SYMBOL_REF_FLAGS (XEXP (XEXP (op0, 0), 0)) & SYMBOL_FLAG_LOW_MEM))\n+  /* Check possibilites for (mem (plus)).\n+     e.g. (mem (const (plus ((symbol_ref) (const_int))))) : &addr+2.  */\n+  if (msp430_check_plus_not_high_mem (op0)\n+      || ((GET_CODE (op0) == CONST)\n+\t  && msp430_check_plus_not_high_mem (XEXP (op0, 0))))\n+    return true;\n+\n+  /* An absolute 16-bit address is allowed.  */\n+  if ((CONST_INT_P (op0) && (IN_RANGE (INTVAL (op0), 0, (1 << 16) - 1))))\n     return true;\n \n   /* Return false when undecided.  */"}, {"sha": "889e33bbc65415e13c164d212ef23b23afd8dd43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "patch": "@@ -1,3 +1,7 @@\n+2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/mlarge-use-430-insn.c: New test.\n+\n 2019-10-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92275"}, {"sha": "efa598be685777599e71d997377e726205c41495", "filename": "gcc/testsuite/gcc.target/msp430/mlarge-use-430-insn.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-use-430-insn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-use-430-insn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-use-430-insn.c?ref=0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=msp430\" \"-mcpu=430\" \"-msmall\" } { \"\" } } */\n+/* { dg-options \"-mlarge -O1\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Test to verify cases where we can use a 430 insn even in the large memory\n+   model.  */\n+\n+int foo[2];\n+\n+/*\n+** func:  { target msp430_region_lower }\n+** ...\n+**\tMOV.W\t#-4088, &foo\n+**\tMOV.W\t#-8531, &40960\n+**\tMOVX.W\t#-16657, &106496\n+** ...\n+*/\n+/*\n+** func:  { target msp430_region_not_lower }\n+** ...\n+**\tMOVX.W\t#-4088, &foo\n+**\tMOV.W\t#-8531, &40960\n+**\tMOVX.W\t#-16657, &106496\n+** ...\n+*/\n+void\n+func (void)\n+{\n+  foo[0] = 0xF008;\n+  (*(int *)0xA000) = 0xDEAD;\n+  (*(int *)0x1A000) = 0xBEEF;\n+}"}]}