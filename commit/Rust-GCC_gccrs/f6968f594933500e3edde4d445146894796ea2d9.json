{"sha": "f6968f594933500e3edde4d445146894796ea2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5NjhmNTk0OTMzNTAwZTNlZGRlNGQ0NDUxNDY4OTQ3OTZlYTJkOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-10T19:33:48Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-10T19:33:48Z"}, "message": "Fix last change; fix large stack frames and int->double conversion\n\nFrom-SVN: r12944", "tree": {"sha": "1f94cfb6eb0f7fc0b3ed4e10e781a0e65a8a5de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f94cfb6eb0f7fc0b3ed4e10e781a0e65a8a5de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6968f594933500e3edde4d445146894796ea2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6968f594933500e3edde4d445146894796ea2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6968f594933500e3edde4d445146894796ea2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6968f594933500e3edde4d445146894796ea2d9/comments", "author": null, "committer": null, "parents": [{"sha": "2eaa1d7ed6aa7a0b287d225c5176404b412b5264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eaa1d7ed6aa7a0b287d225c5176404b412b5264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eaa1d7ed6aa7a0b287d225c5176404b412b5264"}], "stats": {"total": 97, "additions": 35, "deletions": 62}, "files": [{"sha": "b24704ebc634ede3428efead65b7220211e380c6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 35, "deletions": 62, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6968f594933500e3edde4d445146894796ea2d9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6968f594933500e3edde4d445146894796ea2d9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f6968f594933500e3edde4d445146894796ea2d9", "patch": "@@ -3741,18 +3741,20 @@\n   \"*\n {\n   rtx indx;\n+  HOST_WIDE_INT offset = rs6000_fpmem_offset;\n \n   if (rs6000_fpmem_offset > 32760)\n-    indx = operands[1];\n+    {\n+      indx = operands[1];\n+      offset &= 0xffff;\n+    }\n   else if (frame_pointer_needed)\n     indx = frame_pointer_rtx;\n   else\n     indx = stack_pointer_rtx;\n \n   operands[2] = gen_rtx (MEM, SImode,\n-\t\t\t gen_rtx (PLUS, Pmode,\n-\t\t\t\t  indx,\n-\t\t\t\t  GEN_INT (rs6000_fpmem_offset)));\n+\t\t\t gen_rtx (PLUS, Pmode, indx, GEN_INT (offset)));\n \n   return \\\"lfd %0,%2\\\";\n }\"\n@@ -5583,7 +5585,14 @@\n {\n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n-  split_double (operands[1], &operands[4], &operands[5]);\n+\n+#ifdef HOST_WORDS_BIG_ENDIAN\n+  operands[4] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n+  operands[5] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+#else\n+  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+  operands[5] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n+#endif\n }\")\n \n (define_split\n@@ -5595,15 +5604,18 @@\n    (set (match_dup 2) (ior:SI (match_dup 2) (match_dup 6)))]\n   \"\n {\n-  rtx high_rtx, low_rtx;\n   HOST_WIDE_INT high;\n   HOST_WIDE_INT low;\n   rtx high_reg = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   rtx low_reg  = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n \n-  split_double (operands[1], &high_rtx, &low_rtx);\n-  high = INTVAL (high_rtx);\n-  low  = INTVAL (low_rtx);\n+#ifdef HOST_WORDS_BIG_ENDIAN\n+  high = CONST_DOUBLE_LOW  (operands[1]);\n+  low  = CONST_DOUBLE_HIGH (operands[1]);\n+#else\n+  high = CONST_DOUBLE_HIGH (operands[1]);\n+  low  = CONST_DOUBLE_LOW  (operands[1]);\n+#endif\n \n   if (((unsigned HOST_WIDE_INT) (low + 0x8000) < 0x10000)\n       || (low & 0xffff) == 0)\n@@ -5634,13 +5646,8 @@\n    (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 7)))]\n   \"\n {\n-  rtx high_rtx, low_rtx;\n-  HOST_WIDE_INT high;\n-  HOST_WIDE_INT low;\n-\n-  split_double (operands[1], &high_rtx, &low_rtx);\n-  high = INTVAL (high_rtx);\n-  low  = INTVAL (low_rtx);\n+  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n+  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n \n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n@@ -5802,10 +5809,8 @@\n \n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t{\n-\t  rtx high_rtx, low_rtx;\n-\t  split_double (operands[1], &high_rtx, &low_rtx);\n-\t  high = INTVAL (high_rtx);\n-\t  low  = INTVAL (low_rtx);\n+\t  low = CONST_DOUBLE_LOW (operands[1]);\n+\t  high = CONST_DOUBLE_HIGH (operands[1]);\n \t}\n       else\n #if HOST_BITS_PER_WIDE_INT == 32\n@@ -5943,7 +5948,8 @@\n {\n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n-  split_double (operands[1], &operands[4], &operands[5]);\n+  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+  operands[5] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n }\")\n \n (define_split\n@@ -5955,26 +5961,10 @@\n    (set (match_dup 2) (ior:SI (match_dup 2) (match_dup 6)))]\n   \"\n {\n-  rtx high_rtx, low_rtx;\n-  HOST_WIDE_INT high;\n-  HOST_WIDE_INT low;\n-  rtx high_reg, low_reg;\n-\n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      high_reg = gen_rtx (SUBREG, SImode, operands[0], 0);\n-      low_reg  = gen_rtx (SUBREG, SImode, operands[0], 1);\n-      split_double (operands[1], &high_rtx, &low_rtx);\n-    }\n-  else\n-    {\n-      high_reg = gen_rtx (SUBREG, SImode, operands[0], 1);\n-      low_reg  = gen_rtx (SUBREG, SImode, operands[0], 0);\n-      split_double (operands[1], &low_rtx, &high_rtx);\n-    }\n-\n-  high = INTVAL (high_rtx);\n-  low  = INTVAL (low_rtx);\n+  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n+  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  rtx high_reg = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n+  rtx low_reg  = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n \n   if (((unsigned HOST_WIDE_INT) (low + 0x8000) < 0x10000)\n       || (low & 0xffff) == 0)\n@@ -6005,23 +5995,8 @@\n    (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 7)))]\n   \"\n {\n-  rtx high_rtx, low_rtx;\n-  HOST_WIDE_INT high;\n-  HOST_WIDE_INT low;\n-  rtx high_reg, low_reg;\n-\n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      high_reg = gen_rtx (SUBREG, SImode, operands[0], 0);\n-      low_reg  = gen_rtx (SUBREG, SImode, operands[0], 1);\n-      split_double (operands[1], &high_rtx, &low_rtx);\n-    }\n-  else\n-    {\n-      high_reg = gen_rtx (SUBREG, SImode, operands[0], 1);\n-      low_reg  = gen_rtx (SUBREG, SImode, operands[0], 0);\n-      split_double (operands[1], &low_rtx, &high_rtx);\n-    }\n+  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n+  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n \n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n@@ -6083,10 +6058,8 @@\n \n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n-      rtx high_rtx, low_rtx;\n-      split_double (operands[1], &high_rtx, &low_rtx);\n-      high = INTVAL (high_rtx);\n-      low  = INTVAL (low_rtx);\n+      low = CONST_DOUBLE_LOW (operands[1]);\n+      high = CONST_DOUBLE_HIGH (operands[1]);\n     }\n   else\n #if HOST_BITS_PER_WIDE_INT == 32"}]}