{"sha": "9fdb9c918de22529df3e680adcc80cc39677f368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkYjljOTE4ZGUyMjUyOWRmM2U2ODBhZGNjODBjYzM5Njc3ZjM2OA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-08-14T18:39:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-08-14T18:39:59Z"}, "message": "re PR testsuite/52641 (Test cases fail for 16-bit int targets)\n\n        PR testsuite/52641\n        * c-c++-common/simulate-thread/bitfields-2.c: Run test only for\n        target { ! int16 }.\n        * gcc.dg/tree-ssa/pr54245.c: Do slsr scan only for target { ! int16 }.\n        * gcc.dg/tree-ssa/slsr-1.c: Adjust multiplicators to scan for for\n        target { int16 }.  Restrict existing tests to target { int32 }\n        where appropriate.\n        * gcc.dg/tree-ssa/slsr-2.c, gcc.dg/tree-ssa/slsr-27.c: Likewise.\n        * gcc.dg/tree-ssa/slsr-28.c, gcc.dg/tree-ssa/slsr-29.c: Likewise.\n        * gcc.dg/tree-ssa/slsr-3.c, gcc.dg/tree-ssa/ssa-ccp-23.c: Likewise.\n        * lib/target-supports.exp (check_effective_target_int32): New proc.\n\nFrom-SVN: r201743", "tree": {"sha": "c254f1e8330e5c12533f0f55b055ccd6b3acdb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c254f1e8330e5c12533f0f55b055ccd6b3acdb56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fdb9c918de22529df3e680adcc80cc39677f368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdb9c918de22529df3e680adcc80cc39677f368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdb9c918de22529df3e680adcc80cc39677f368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdb9c918de22529df3e680adcc80cc39677f368/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c466cffbaa504b542e6bb367ec59957e7f618120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c466cffbaa504b542e6bb367ec59957e7f618120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c466cffbaa504b542e6bb367ec59957e7f618120"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "35bd4e86386152ec802adfb2676ca902b28d86ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -64,6 +64,19 @@\n \t* c-c++-common/scal-to-vec1.c: Add !int16 and large_double conditions\n \tto tests that assume int/double are larger than short/float.\n \n+\tPR testsuite/52641\n+\t* c-c++-common/simulate-thread/bitfields-2.c: Run test only for\n+\ttarget { ! int16 }.\n+\t* gcc.dg/tree-ssa/pr54245.c: Do slsr scan only for target { ! int16 }.\n+\t* gcc.dg/tree-ssa/slsr-1.c: Adjust multiplicators to scan for for\n+\ttarget { int16 }.  Restrict existing tests to target { int32 }\n+\twhere appropriate.\n+\t* gcc.dg/tree-ssa/slsr-2.c, gcc.dg/tree-ssa/slsr-27.c: Likewise.\n+\t* gcc.dg/tree-ssa/slsr-28.c, gcc.dg/tree-ssa/slsr-29.c: Likewise.\n+\t* gcc.dg/tree-ssa/slsr-3.c, gcc.dg/tree-ssa/ssa-ccp-23.c: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_int32): New proc.\n+\n+\n 2013-08-14  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/pr19599.c: Skip for -mthumb."}, {"sha": "0b29ffb68d4db25da80cf2447fe626cc13e3f46b", "filename": "gcc/testsuite/c-c++-common/simulate-thread/bitfields-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do link } */\n+/* { dg-do link { target { ! int16 } } } */\n /* { dg-options \"--param allow-store-data-races=0\" } */\n /* { dg-final { simulate-thread } } */\n "}, {"sha": "daca0423a1de5f8672d1e8925d02a5cbab6a508b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr54245.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr54245.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr54245.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr54245.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -45,5 +45,5 @@ int main(void)\n /* For now, disable inserting an initializer when the multiplication will\n    take place in a smaller type than originally.  This test may be deleted\n    in future when this case is handled more precisely.  */\n-/* { dg-final { scan-tree-dump-times \"Inserting initializer\" 0 \"slsr\" } } */\n+/* { dg-final { scan-tree-dump-times \"Inserting initializer\" 0 \"slsr\" { target { ! int16 } } } } */\n /* { dg-final { cleanup-tree-dump \"slsr\" } } */"}, {"sha": "e8c0ff021339eaa3d30d8d68370b14a41bf5f236", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-1.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -14,7 +14,9 @@ f (int *p, unsigned int n)\n     foo (*(p + 48 + n * 4));\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\+ 128|\\\\, 128>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 128|\\\\, 128>\" 1 \"optimized\" { target { int32plus } } } } */\n /* { dg-final { scan-tree-dump-times \"\\\\+ 64|\\\\, 64>\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\+ 192|\\\\, 192>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 32|\\\\, 32>\" 1 \"optimized\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 192|\\\\, 192>\" 1 \"optimized\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 96|\\\\, 96>\" 1 \"optimized\" { target { int16 } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "56697ff7f8828f8425f3e6641f8fdcb11900b51a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-2.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -11,6 +11,8 @@ f (int *p, int n)\n   foo (*(p + 16 + n * 4));\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\+ 144|\\\\, 144>\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\+ 96|\\\\, 96>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 144|\\\\, 144>\" 1 \"optimized\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 72|\\\\, 72>\" 1 \"optimized\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 96|\\\\, 96>\" 1 \"optimized\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 48|\\\\, 48>\" 1 \"optimized\" { target { int16 } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c6642627d1fdfabed4bf38204ba021572ecd5ebe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-27.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -16,7 +16,8 @@ f (struct x *p, unsigned int n)\n   foo (p->a[n], p->c[n], p->b[n]);\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+;\" 1 \"dom2\" } } */\n /* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom2\" } } */\n /* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "c4dbf54db86ae39eb7d6fb7215ad99d7d7706b96", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-28.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -20,7 +20,8 @@ f (struct x *p, unsigned int n)\n     foo (p->b[n], p->a[n], p->c[n]);\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom2\" } } */\n /* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom2\" } } */\n /* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "c8e7a5e137b02ab4169bc04c75459fb8a1f59253", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-29.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -22,7 +22,8 @@ f (struct x *p, unsigned int n)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom2\" } } */\n /* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom2\" } } */\n /* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "89d1d2e73fdb69153b7d911862655f94fc5a779d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-3.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-3.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -15,8 +15,11 @@ foo (int a[], int b[], int i)\n   return i;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4\" 1 \"optimized\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2\" 1 \"optimized\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 2|\\\\, 2>\" 5 \"optimized\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"\\\\+ 4|\\\\, 4>\" 2 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\+ 8|\\\\, 8>\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\+ 12|\\\\, 12>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 8|\\\\, 8>\" 1 \"optimized\" { target { int32plus } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 6|\\\\, 6>\" 1 \"optimized\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 12|\\\\, 12>\" 1 \"optimized\" { target { int32 } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8b95b0c343894b14921071035f029af98cc998e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-23.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-23.c?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -15,5 +15,6 @@ int foo (void)\n   return *x;\n }\n \n-/* { dg-final { scan-tree-dump \"MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)&a \\\\\\+ 4B\\\\\\]\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)&a \\\\\\+ 2B\\\\\\]\" \"ccp1\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump \"MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)&a \\\\\\+ 4B\\\\\\]\" \"ccp1\" { target { int32 } } } } */\n /* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "bcf060f7face5c58ca3d443c031bc0154b0c03cd", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb9c918de22529df3e680adcc80cc39677f368/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9fdb9c918de22529df3e680adcc80cc39677f368", "patch": "@@ -1723,6 +1723,15 @@ proc check_effective_target_x32 { } {\n     }]\n }\n \n+# Return 1 if we're generating 32-bit integers using default\n+# options, 0 otherwise.\n+\n+proc check_effective_target_int32 { } {\n+    return [check_no_compiler_messages int32 object {\n+\tint dummy[sizeof (int) == 4 ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if we're generating 32-bit or larger integers using default\n # options, 0 otherwise.\n "}]}