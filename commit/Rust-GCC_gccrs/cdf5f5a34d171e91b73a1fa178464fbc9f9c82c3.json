{"sha": "cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmNWY1YTM0ZDE3MWU5MWI3M2ExZmExNzg0NjRmYmM5ZjljODJjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-29T16:59:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-29T16:59:55Z"}, "message": "condition_variable (enum class cv_status): Add and use it throughout, per N3000.\n\n2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/condition_variable (enum class cv_status): Add and\n\tuse it throughout, per N3000.\n\t(condition_variable_any::wait<>(_Lock&), wait<>(_Lock&, _Predicate),\n\twait_until<>(_Lock&, const chrono::time_point<>&, _Predicate)):\n\tProvide definitions.\n\t* src/condition_variable.cc (condition_variable_any::notify_one,\n\tcondition_variable_any::notify_all): Likewise.\n\t* config/abi/pre/gnu.ver: Export.\n\t* testsuite/30_threads/condition_variable_any/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/30_threads/condition_variable_any/requirements/\n\tstandard_layout.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/members/1.cc: Adjust.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n\tLikewise.\n\nFrom-SVN: r156358", "tree": {"sha": "04295ecc625cf3eb700770cbad2552ec3a84a2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04295ecc625cf3eb700770cbad2552ec3a84a2e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/comments", "author": null, "committer": null, "parents": [{"sha": "f9e06dbc6203596b2338c5a03e3d23e4da2e518c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e06dbc6203596b2338c5a03e3d23e4da2e518c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e06dbc6203596b2338c5a03e3d23e4da2e518c"}], "stats": {"total": 175, "additions": 152, "deletions": 23}, "files": [{"sha": "33d77900808dfb6230dc6dc72e35da99df5a8964", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -1,3 +1,27 @@\n+2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/condition_variable (enum class cv_status): Add and\n+\tuse it throughout, per N3000.\n+\t(condition_variable_any::wait<>(_Lock&), wait<>(_Lock&, _Predicate),\n+\twait_until<>(_Lock&, const chrono::time_point<>&, _Predicate)):\n+\tProvide definitions.\n+\t* src/condition_variable.cc (condition_variable_any::notify_one,\n+\tcondition_variable_any::notify_all): Likewise.\n+\t* config/abi/pre/gnu.ver: Export.\n+\t* testsuite/30_threads/condition_variable_any/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/30_threads/condition_variable_any/requirements/\n+\tstandard_layout.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/1.cc: Adjust.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n+\tLikewise.\n+\n 2010-01-28  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* include/bits/stl_algobase.h (struct __iter_base): Add."}, {"sha": "4b5f6d0d246173665b468dec495dd9812073704a", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -1113,6 +1113,10 @@ GLIBCXX_3.4.14 {\n     # std::time_get::_M_extract_wday_or_month\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE24_M_extract_wday_or_month*;\n \n+    # condition_variable_any::notify_*\n+    _ZNSt22condition_variable_any10notify_allEv;\n+    _ZNSt22condition_variable_any10notify_oneEv;    \n+\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "ea4570ee9a3213ea1f3e3fbc55cedf7d637448fb", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -1,6 +1,6 @@\n // <condition_variable> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,6 +50,9 @@ namespace std\n    * @{\n    */\n \n+  /// cv_status\n+  enum class cv_status { no_timeout, timeout };\n+  \n   /// condition_variable\n   class condition_variable\n   {\n@@ -84,13 +87,13 @@ namespace std\n       }\n \n     template<typename _Duration>\n-      bool\n+      cv_status\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n       { return __wait_until_impl(__lock, __atime); }\n \n     template<typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -110,14 +113,13 @@ namespace std\n \t\t _Predicate __p)\n       {\n \twhile (!__p())\n-\t  if (!wait_until(__lock, __atime))\n+\t  if (wait_until(__lock, __atime) == cv_status::timeout)\n \t    return __p();\n-\n \treturn true;\n       }\n \n     template<typename _Rep, typename _Period>\n-      bool\n+      cv_status\n       wait_for(unique_lock<mutex>& __lock,\n \t       const chrono::duration<_Rep, _Period>& __rtime)\n       { return wait_until(__lock, __clock_t::now() + __rtime); }\n@@ -135,7 +137,7 @@ namespace std\n \n   private:\n     template<typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       __wait_until_impl(unique_lock<mutex>& __lock,\n \t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -154,7 +156,8 @@ namespace std\n \t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n \t\t\t\t &__ts);\n \n-\treturn _Clock::now() < __atime;\n+\treturn (_Clock::now() < __atime\n+\t\t? cv_status::no_timeout : cv_status::timeout);\n       }\n   };\n \n@@ -182,14 +185,24 @@ namespace std\n \n     template<typename _Lock>\n       void\n-      wait(_Lock& __lock);\n+      wait(_Lock& __lock)\n+      {\n+\tint __e = __gthread_cond_wait(&_M_cond,\n+\t\t\t\t      __lock.mutex()->native_handle());\n+\tif (__e)\n+\t  __throw_system_error(__e);\n+      }\n \n     template<typename _Lock, typename _Predicate>\n       void\n-      wait(_Lock& __lock, _Predicate __p);\n+      wait(_Lock& __lock, _Predicate __p)\n+      {\n+\twhile (!__p())\n+\t  wait(__lock);\n+      }\n \n     template<typename _Lock, typename _Clock, typename _Duration>\n-      bool\n+      cv_status\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime);\n \n@@ -198,10 +211,16 @@ namespace std\n       bool\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime,\n-\t\t _Predicate __p);\n+\t\t _Predicate __p)\n+      {\n+\twhile (!__p())\n+\t  if (wait_until(__lock, __atime) == cv_status::timeout)\n+\t    return __p();\n+\treturn true;\n+      }\n \n     template<typename _Lock, typename _Rep, typename _Period>\n-      bool\n+      cv_status\n       wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime);\n \n     template<typename _Lock, typename _Rep,"}, {"sha": "b420379925393f92ebdd09eb8d14587f750d78b8", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -96,6 +96,28 @@ namespace std\n   {\n     __gthread_cond_destroy(&_M_cond);\n   }\n+\n+  void\n+  condition_variable_any::notify_one()\n+  {\n+    int __e = __gthread_cond_signal(&_M_cond);\n+\n+    // XXX not in spec\n+    // EINVAL\n+    if (__e)\n+      __throw_system_error(__e);\n+  }\n+\n+  void\n+  condition_variable_any::notify_all()\n+  {\n+    int __e = __gthread_cond_broadcast(&_M_cond);\n+\n+    // XXX not in spec\n+    // EINVAL\n+    if (__e)\n+      __throw_system_error(__e);\n+  }\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "9e9ad8a7b03c94042aa577374c99d252d9db1bca", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 67 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 70 }"}, {"sha": "5765351554e1bcdf40147698ebde6f25aa82882d", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 66 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 69 }"}, {"sha": "127960a625db7b5c67cec321e84d2f8b9aefe92b", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -40,8 +40,8 @@ int main()\n       std::unique_lock<std::mutex> l(m);\n \n       auto then = std::chrono::system_clock::now();\n-      bool result = c1.wait_for(l, ms);\n-      VERIFY( !result );\n+      std::cv_status result = c1.wait_for(l, ms);\n+      VERIFY( result == std::cv_status::timeout );\n       VERIFY( (std::chrono::system_clock::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }"}, {"sha": "ab2e8776b8422d9855cc0f8733acdd7505d70fc4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -40,8 +40,8 @@ int main()\n       std::unique_lock<std::mutex> l(m);\n \n       auto then = std::chrono::monotonic_clock::now();\n-      bool result = c1.wait_until(l, then + ms);\n-      VERIFY( !result );\n+      std::cv_status result = c1.wait_until(l, then + ms);\n+      VERIFY( result == std::cv_status::timeout );\n       VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n       VERIFY( l.owns_lock() );\n     }"}, {"sha": "5e3e30231b4710db5124f480353c68b4e56710f4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 175 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}, {"sha": "2b61c1b9621afcbf285ea00a5f99be796182ec46", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 174 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 177 }"}, {"sha": "74e57ab354a95fb2830110b73bdf62e8636b32a0", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/requirements/standard_layout.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <condition_variable>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  __gnu_test::standard_layout test;\n+  test.operator()<std::condition_variable_any>();\n+}"}, {"sha": "8a6fd82ccf623b2876ea063504de172895d0ea4b", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Ftypedefs.cc?ref=cdf5f5a34d171e91b73a1fa178464fbc9f9c82c3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::condition_variable_any test_type;\n+  typedef test_type::native_handle_type type;\n+}"}]}