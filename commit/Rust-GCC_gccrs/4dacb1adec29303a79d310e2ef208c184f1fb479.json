{"sha": "4dacb1adec29303a79d310e2ef208c184f1fb479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhY2IxYWRlYzI5MzAzYTc5ZDMxMGUyZWYyMDhjMTg0ZjFmYjQ3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-02T13:16:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-02T13:16:58Z"}, "message": "isl.m4: New file.\n\n2012-07-02  Richard Guenther  <rguenther@suse.de>\n\tMichael Matz  <matz@suse.de>\n\tTobias Grosser <tobias@grosser.es>\n\tSebastian Pop <sebpop@gmail.com>\n\n\t* isl.m4: New file.\n\nFrom-SVN: r189157", "tree": {"sha": "554388e7845959ba671570a5b5d5ae508b37239d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/554388e7845959ba671570a5b5d5ae508b37239d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dacb1adec29303a79d310e2ef208c184f1fb479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dacb1adec29303a79d310e2ef208c184f1fb479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dacb1adec29303a79d310e2ef208c184f1fb479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dacb1adec29303a79d310e2ef208c184f1fb479/comments", "author": null, "committer": null, "parents": [{"sha": "33ad93b9f4cb21a19b8cf60c77344bc1c9bdff6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ad93b9f4cb21a19b8cf60c77344bc1c9bdff6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ad93b9f4cb21a19b8cf60c77344bc1c9bdff6d"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "0ddeddba9c24e6a067d205b36b5f8781cbeacb34", "filename": "config/isl.m4", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dacb1adec29303a79d310e2ef208c184f1fb479/config%2Fisl.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dacb1adec29303a79d310e2ef208c184f1fb479/config%2Fisl.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fisl.m4?ref=4dacb1adec29303a79d310e2ef208c184f1fb479", "patch": "@@ -0,0 +1,162 @@\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+#\n+# Contributed by Richard Guenther <rguenther@suse.de>\n+# Based on cloog.m4\n+\n+# ISL_INIT_FLAGS ()\n+# -------------------------\n+# Provide configure switches for ISL support.\n+# Initialize isllibs/islinc according to the user input.\n+AC_DEFUN([ISL_INIT_FLAGS],\n+[\n+  AC_ARG_WITH(isl,\n+    [AS_HELP_STRING(\n+      [--with-isl=PATH],\n+      [Specify prefix directory for the installed ISL package.\n+       Equivalent to --with-isl-include=PATH/include\n+       plus --with-isl-lib=PATH/lib])])\n+  AC_ARG_WITH([isl-include],\n+    [AS_HELP_STRING(\n+      [--with-isl-include=PATH],\n+      [Specify directory for installed ISL include files])])\n+  AC_ARG_WITH([isl-lib],\n+    [AS_HELP_STRING(\n+      [--with-isl-lib=PATH],\n+      [Specify the directory for the installed ISL library])])\n+\n+  AC_ARG_ENABLE(isl-version-check,\n+    [AS_HELP_STRING(\n+      [--disable-isl-version-check],\n+      [disable check for ISL version])],\n+    ENABLE_ISL_CHECK=$enableval,\n+    ENABLE_ISL_CHECK=yes)\n+  \n+  # Initialize isllibs and islinc.\n+  case $with_isl in\n+    no)\n+      isllibs=\n+      islinc=\n+      ;;\n+    \"\" | yes)\n+      ;;\n+    *)\n+      isllibs=\"-L$with_isl/lib\"\n+      islinc=\"-I$with_isl/include\"\n+      ;;\n+  esac\n+  if test \"x${with_isl_include}\" != x ; then\n+    islinc=\"-I$with_isl_include\"\n+  fi\n+  if test \"x${with_isl_lib}\" != x; then\n+    isllibs=\"-L$with_isl_lib\"\n+  fi\n+  dnl If no --with-isl flag was specified and there is in-tree ISL\n+  dnl source, set up flags to use that and skip any version tests\n+  dnl as we cannot run them before building ISL.\n+  if test \"x${islinc}\" = x && test \"x${isllibs}\" = x \\\n+     && test -d ${srcdir}/isl; then\n+    isllibs='-L$$r/$(HOST_SUBDIR)/isl/'\"$lt_cv_objdir\"' '\n+    islinc='-I$$r/$(HOST_SUBDIR)/isl/include -I$$s/isl/include'\n+    ENABLE_ISL_CHECK=no\n+  fi\n+\n+  isllibs=\"${isllibs} -lisl\"\n+\n+  dnl Flags needed for ISL\n+  AC_SUBST(isllibs)\n+  AC_SUBST(islinc)\n+]\n+)\n+\n+# ISL_REQUESTED (ACTION-IF-REQUESTED, ACTION-IF-NOT)\n+# ----------------------------------------------------\n+# Provide actions for failed CLooG detection.\n+AC_DEFUN([ISL_REQUESTED],\n+[\n+  AC_REQUIRE([ISL_INIT_FLAGS])\n+\n+  if test \"x${with_isl}\" = xno; then\n+    $2\n+  elif test \"x${with_isl}\" != x \\\n+    || test \"x${with_isl_include}\" != x \\\n+    || test \"x${with_isl_lib}\" != x ; then\n+    $1\n+  else\n+    $2\n+  fi\n+]\n+)\n+\n+# _ISL_CHECK_CT_PROG(MAJOR, MINOR)\n+# --------------------------------------------\n+# Helper for verifying CLooG's compile time version.\n+m4_define([_ISL_CHECK_CT_PROG],[AC_LANG_PROGRAM(\n+  [#include <isl/version.h>\n+   #include <string.h>],\n+  [int main()\n+   {\n+     if (strncmp (isl_version (), \"isl-0.10\", strlen (\"isl-$1.$2\")) != 0)\n+       return 1;\n+     return 0;\n+   }])])\n+\n+# ISL_CHECK_VERSION ISL_CHECK_VERSION (MAJOR, MINOR)\n+# ----------------------------------------------------------------\n+# Test the found ISL to be exact of version MAJOR.MINOR and at least\n+# REVISION.\n+AC_DEFUN([ISL_CHECK_VERSION],\n+[\n+  if test \"${ENABLE_ISL_CHECK}\" = yes ; then\n+    _isl_saved_CFLAGS=$CFLAGS\n+    _isl_saved_LDFLAGS=$LDFLAGS\n+\n+    CFLAGS=\"${_isl_saved_CFLAGS} ${islinc} ${gmpinc}\"\n+    LDFLAGS=\"${_isl_saved_LDFLAGS} ${isllibs} -lisl\"\n+    echo $CFLAGS\n+\n+    AC_CACHE_CHECK([for version $1.$2 of ISL],\n+      [gcc_cv_isl],\n+      [AC_RUN_IFELSE([_ISL_CHECK_CT_PROG($1,$2)],\n+\t[gcc_cv_isl=yes],\n+\t[gcc_cv_isl=no])])\n+\n+    CFLAGS=$_isl_saved_CFLAGS\n+    LDFLAGS=$_isl_saved_LDFLAGS\n+  fi\n+]\n+)\n+\n+# ISL_IF_FAILED (ACTION-IF-FAILED)\n+# ----------------------------------\n+# Executes ACTION-IF-FAILED, if GRAPHITE was requested and\n+# the checks failed.\n+AC_DEFUN([ISL_IF_FAILED],\n+[\n+  ISL_REQUESTED([graphite_requested=yes], [graphite_requested=no])\n+  \n+  if test \"${gcc_cv_isl}\" = no ; then\n+    isllibs=\n+    islinc=\n+  fi\n+\n+  if test \"${graphite_requested}\" = yes \\\n+    && test \"x${isllibs}\" = x \\\n+    && test \"x${islinc}\" = x ; then\n+    $1\n+  fi\n+]\n+)"}]}