{"sha": "b1166faeb09066cb5f8106b02cb100a129679bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExNjZmYWViMDkwNjZjYjVmODEwNmIwMmNiMTAwYTEyOTY3OWJkMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:21:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:21:13Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r620", "tree": {"sha": "d28707da2e5cf2a0507f9b72cb52b61cd5f666bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d28707da2e5cf2a0507f9b72cb52b61cd5f666bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1166faeb09066cb5f8106b02cb100a129679bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1166faeb09066cb5f8106b02cb100a129679bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1166faeb09066cb5f8106b02cb100a129679bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1166faeb09066cb5f8106b02cb100a129679bd1/comments", "author": null, "committer": null, "parents": [{"sha": "23ad4d413056ba518720155f304d0524e248ab0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ad4d413056ba518720155f304d0524e248ab0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ad4d413056ba518720155f304d0524e248ab0e"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "0e52648e855bd498dc4962028bffbeec8e3cc9eb", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1166faeb09066cb5f8106b02cb100a129679bd1/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1166faeb09066cb5f8106b02cb100a129679bd1/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=b1166faeb09066cb5f8106b02cb100a129679bd1", "patch": "@@ -872,6 +872,9 @@ asm (\"__builtin_saveregs:\");\n #else\n \tasm (\".global ___builtin_saveregs\");\n \tasm (\"___builtin_saveregs:\");\n+#endif\n+#ifdef NEED_PROC_COMMAND\n+\tasm (\".proc 020\");\n #endif\n \tasm (\"st %i0,[%fp+68]\");\n \tasm (\"st %i1,[%fp+72]\");\n@@ -880,6 +883,10 @@ asm (\"__builtin_saveregs:\");\n \tasm (\"st %i4,[%fp+84]\");\n \tasm (\"retl\");\n \tasm (\"st %i5,[%fp+88]\");\n+#ifdef NEED_TYPE_COMMAND\n+\tasm (\".type __builtin_saveregs,#function\");\n+\tasm (\".size __builtin_saveregs,.-__builtin_saveregs\");\n+#endif\n #else /* not __sparc__ */\n #if defined(__MIPSEL__) | defined(__R3000__) | defined(__R2000__) | defined(__mips__)\n \n@@ -909,10 +916,10 @@ __builtin_saveregs ()\n /* This is used by the `assert' macro.  */\n void\n __eprintf (string, expression, line, filename)\n-     char *string;\n-     char *expression;\n+     const char *string;\n+     const char *expression;\n      int line;\n-     char *filename;\n+     const char *filename;\n {\n   fprintf (stderr, string, expression, line, filename);\n   fflush (stderr);\n@@ -963,8 +970,9 @@ __builtin_new (sz)\n      long sz;\n {\n   void *p;\n+  extern void *malloc ();\n \n-  p = (void *) malloc (sz);\n+  p = malloc (sz);\n   if (p == 0)\n     (*__new_handler) ();\n   return p;\n@@ -974,6 +982,7 @@ __builtin_new (sz)\n #ifdef L_builtin_New\n typedef void (*vfp)(void);\n \n+extern void *__builtin_new ();\n static void default_new_handler ();\n \n vfp __new_handler = default_new_handler;\n@@ -988,7 +997,7 @@ __builtin_vec_new (p, maxindex, size, ctor)\n   void *rval;\n \n   if (p == 0)\n-    p = (void *)__builtin_new (nelts * size);\n+    p = __builtin_new (nelts * size);\n \n   rval = p;\n \n@@ -1020,13 +1029,15 @@ set_new_handler (handler)\n   return __set_new_handler (handler);\n }\n \n+#define MESSAGE \"Virtual memory exceeded in `new'\\n\"\n+\n static void\n default_new_handler ()\n {\n   /* don't use fprintf (stderr, ...) because it may need to call malloc.  */\n   /* This should really print the name of the program, but that is hard to\n      do.  We need a standard, clean way to get at the name.  */\n-  write (2, \"Virtual memory exceeded in `new'\\n\", 33);\n+  write (2, MESSAGE, sizeof (MESSAGE));\n   /* don't call exit () because that may call global destructors which\n      may cause a loop.  */\n   _exit (-1);"}]}