{"sha": "a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiMDdmZjBhZjAwZDY0Nzk1MmYwYWU5NDZiNzM0MGY5ZmNjMmYyMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:39:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:39:54Z"}, "message": "[multiple changes]\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb (Returns_Limited_View): New flag defined\n\ton function entities whose return type is a limited view.\n\t* freeze.adb (Freeze_Entity): Use Returns_Limited_View to determine\n\twhere to place the freeze node for a function that returns the\n\tlimited view of a type, when the function is called and frozen\n\tin a different unit.\n\n2014-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Minor code\n\trefactoring.\n\nFrom-SVN: r213564", "tree": {"sha": "f5c4cf2ed7faa4d649cb4f1c08c6ef8084b4c884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5c4cf2ed7faa4d649cb4f1c08c6ef8084b4c884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/comments", "author": null, "committer": null, "parents": [{"sha": "d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "c45e77a9972263db2ba0d436bcc63e576c24cd70", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "patch": "@@ -1,3 +1,17 @@\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Returns_Limited_View): New flag defined\n+\ton function entities whose return type is a limited view.\n+\t* freeze.adb (Freeze_Entity): Use Returns_Limited_View to determine\n+\twhere to place the freeze node for a function that returns the\n+\tlimited view of a type, when the function is called and frozen\n+\tin a different unit.\n+\n+2014-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Minor code\n+\trefactoring.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Clarify documentation on assertions."}, {"sha": "f3899a93bb71c9583fe57ece5dd3a539a420077c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "patch": "@@ -414,6 +414,7 @@ package body Einfo is\n    --    No_Pool_Assigned                Flag131\n    --    Is_Default_Init_Cond_Procedure  Flag132\n    --    Has_Inherited_Default_Init_Cond Flag133\n+   --    Returns_Limited_View            Flag134\n    --    Has_Aliased_Components          Flag135\n    --    No_Strict_Aliasing              Flag136\n    --    Is_Machine_Code_Subprogram      Flag137\n@@ -572,8 +573,6 @@ package body Einfo is\n    --    No_Predicate_On_Actual          Flag275\n    --    No_Dynamic_Predicate_On_Actual  Flag276\n \n-   --    (unused)                        Flag134\n-\n    --    (unused)                        Flag275\n    --    (unused)                        Flag276\n    --    (unused)                        Flag277\n@@ -2871,6 +2870,11 @@ package body Einfo is\n       return Flag90 (Id);\n    end Returns_By_Ref;\n \n+   function Returns_Limited_View (Id : E) return B is\n+   begin\n+      return Flag134 (Id);\n+   end Returns_Limited_View;\n+\n    function Reverse_Bit_Order (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id));\n@@ -5695,6 +5699,11 @@ package body Einfo is\n       Set_Flag90 (Id, V);\n    end Set_Returns_By_Ref;\n \n+   procedure Set_Returns_Limited_View (Id : E; V : B := True) is\n+   begin\n+      Set_Flag134 (Id, V);\n+   end Set_Returns_Limited_View;\n+\n    procedure Set_Reverse_Bit_Order (Id : E; V : B := True) is\n    begin\n       pragma Assert\n@@ -8552,6 +8561,7 @@ package body Einfo is\n       W (\"Requires_Overriding\",             Flag213 (Id));\n       W (\"Return_Present\",                  Flag54  (Id));\n       W (\"Returns_By_Ref\",                  Flag90  (Id));\n+      W (\"Returns_Limited_View\",            Flag134 (Id));\n       W (\"Reverse_Bit_Order\",               Flag164 (Id));\n       W (\"Reverse_Storage_Order\",           Flag93  (Id));\n       W (\"Sec_Stack_Needed_For_Return\",     Flag167 (Id));"}, {"sha": "14bb0d0d28ebf2aab859f56b1df03dc58b549c0e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "patch": "@@ -3771,6 +3771,12 @@ package Einfo is\n --       returns the result by reference, either because its return type is a\n --       by-reference-type or because it uses explicitly the secondary stack.\n \n+--    Returns_Limited_View (Flag134)\n+--       Defined on function entities, to indicate that the return type of\n+--       the function at the point of definition is a limited view. Used to\n+--       handle the late freezing of the function, when it is called in the\n+--       current semantic unit while it is still unfrozen.\n+\n --    Reverse_Bit_Order (Flag164) [base type only]\n --       Defined in all record type entities. Set if entity has a Bit_Order\n --       aspect (set by an aspect clause or attribute definition clause) that\n@@ -5710,6 +5716,7 @@ package Einfo is\n    --    Requires_Overriding                 (Flag213)  (non-generic case only)\n    --    Return_Present                      (Flag54)\n    --    Returns_By_Ref                      (Flag90)\n+   --    Returns_Limited_View                (Flag134)\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Uses_Sec_Stack                      (Flag95)\n@@ -6843,6 +6850,7 @@ package Einfo is\n    function Return_Applies_To                   (Id : E) return N;\n    function Return_Present                      (Id : E) return B;\n    function Returns_By_Ref                      (Id : E) return B;\n+   function Returns_Limited_View                (Id : E) return B;\n    function Reverse_Bit_Order                   (Id : E) return B;\n    function Reverse_Storage_Order               (Id : E) return B;\n    function Scalar_Range                        (Id : E) return N;\n@@ -7484,6 +7492,7 @@ package Einfo is\n    procedure Set_Return_Applies_To               (Id : E; V : N);\n    procedure Set_Return_Present                  (Id : E; V : B := True);\n    procedure Set_Returns_By_Ref                  (Id : E; V : B := True);\n+   procedure Set_Returns_Limited_View            (Id : E; V : B := True);\n    procedure Set_Reverse_Bit_Order               (Id : E; V : B := True);\n    procedure Set_Reverse_Storage_Order           (Id : E; V : B := True);\n    procedure Set_Scalar_Range                    (Id : E; V : N);\n@@ -8277,6 +8286,7 @@ package Einfo is\n    pragma Inline (Return_Applies_To);\n    pragma Inline (Return_Present);\n    pragma Inline (Returns_By_Ref);\n+   pragma Inline (Returns_Limited_View);\n    pragma Inline (Reverse_Bit_Order);\n    pragma Inline (Reverse_Storage_Order);\n    pragma Inline (Scalar_Range);\n@@ -8717,6 +8727,7 @@ package Einfo is\n    pragma Inline (Set_Return_Applies_To);\n    pragma Inline (Set_Return_Present);\n    pragma Inline (Set_Returns_By_Ref);\n+   pragma Inline (Set_Returns_Limited_View);\n    pragma Inline (Set_Reverse_Bit_Order);\n    pragma Inline (Set_Reverse_Storage_Order);\n    pragma Inline (Set_Scalar_Range);"}, {"sha": "17f96491c38fe990870cf883f38f6bdc15d3b810", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "patch": "@@ -4202,12 +4202,8 @@ package body Freeze is\n \n                      Late_Freezing :=\n                        Get_Source_Unit (E) /= Get_Source_Unit (N)\n-                         and then Expander_Active\n-                         and then Ekind (Scope (E)) = E_Package\n-                         and then Nkind (Unit_Declaration_Node (Scope (E))) =\n-                                                       N_Package_Declaration\n-                         and then not In_Open_Scopes (Scope (E))\n-                         and then Get_Source_Unit (E) /= Current_Sem_Unit;\n+                         and then Returns_Limited_View (E)\n+                         and then not In_Open_Scopes (Scope (E));\n \n                      --  Freeze return type\n \n@@ -4237,6 +4233,7 @@ package body Freeze is\n                          Ekind (Non_Limited_View (R_Type)) = E_Incomplete_Type\n                      then\n                         Set_Is_Frozen (E, False);\n+                        Set_Returns_Limited_View (E);\n                         return Result;\n                      end if;\n "}, {"sha": "94e4510fb8fb7281c23b6586eed0f4f80caa2ce7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b07ff0af00d647952f0ae946b7340f9fcc2f20/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "patch": "@@ -6903,19 +6903,15 @@ package body Sem_Ch3 is\n             return;\n          end if;\n \n-         if not Is_Completion then\n-            --  If this is not a completion, construct the implicit full view\n-            --  by deriving from the full view of the parent type.\n+         --  If this is not a completion, construct the implicit full view by\n+         --  deriving from the full view of the parent type. But if this is a\n+         --  completion, the derived private type being built is a full view\n+         --  and the full derivation can only be its underlying full view.\n \n-            Build_Full_Derivation;\n+         Build_Full_Derivation;\n+         if not Is_Completion then\n             Set_Full_View (Derived_Type, Full_Der);\n-\n          else\n-            --  If this is a completion, the full view being built is itself\n-            --  private. Construct an underlying full view by deriving from\n-            --  the full view of the parent type.\n-\n-            Build_Full_Derivation;\n             Set_Underlying_Full_View (Derived_Type, Full_Der);\n          end if;\n "}]}