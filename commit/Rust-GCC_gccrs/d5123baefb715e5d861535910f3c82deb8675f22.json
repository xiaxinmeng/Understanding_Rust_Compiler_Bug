{"sha": "d5123baefb715e5d861535910f3c82deb8675f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMjNiYWVmYjcxNWU1ZDg2MTUzNTkxMGYzYzgyZGViODY3NWYyMg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2003-11-12T19:53:17Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2003-11-12T19:53:17Z"}, "message": "c-typeck.c (c_convert_parm_for_inlining): Add argnum...\n\n\t* c-typeck.c (c_convert_parm_for_inlining): Add argnum, which\n\tis the argumnt we are processing so that warnings and errors\n\twill have that information.\n\t* c-tree.h (c_convert_parm_for_inlining): Add argnum.\n\t* lang-hooks-def.h\n\t(lhd_tree_inlining_convert_parm_for_inlining): Likewse.\n\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining): Likewise.\n\t* langhooks.h (convert_parm_for_inlining): Likewise.\n\t* tree-inline.c (initialize_inlined_parameters): Compute and\n\tpass argnum down.\n\nFrom-SVN: r73507", "tree": {"sha": "3688d9296922e3e7a321a8a99b5bbb6825b5345d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3688d9296922e3e7a321a8a99b5bbb6825b5345d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5123baefb715e5d861535910f3c82deb8675f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5123baefb715e5d861535910f3c82deb8675f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5123baefb715e5d861535910f3c82deb8675f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5123baefb715e5d861535910f3c82deb8675f22/comments", "author": null, "committer": null, "parents": [{"sha": "ea81d2a3e1896a810829bc423cdb40eb9fb0a113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea81d2a3e1896a810829bc423cdb40eb9fb0a113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea81d2a3e1896a810829bc423cdb40eb9fb0a113"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "d3820e46c9f9ba852f687cd16348188127d5e78e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -1,3 +1,16 @@\n+2003-11-12  Mike Stump  <mrs@apple.com>\n+\n+\t* c-typeck.c (c_convert_parm_for_inlining): Add argnum, which\n+\tis the argumnt we are processing so that warnings and errors\n+\twill have that information.\n+\t* c-tree.h (c_convert_parm_for_inlining): Add argnum.\n+\t* lang-hooks-def.h\n+\t(lhd_tree_inlining_convert_parm_for_inlining): Likewse.\n+\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining): Likewise.\n+\t* langhooks.h (convert_parm_for_inlining): Likewise.\n+\t* tree-inline.c (initialize_inlined_parameters): Compute and\n+\tpass argnum down.\n+\n 2003-11-12  Alexey Starovoytov  <alexey.starovoytov@sun.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "3ba495395b20db595ef7661de42715c72ac0b7c2", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -273,7 +273,7 @@ extern tree c_start_case (tree);\n extern void c_finish_case (void);\n extern tree simple_asm_stmt (tree);\n extern tree build_asm_stmt (tree, tree, tree, tree, tree);\n-extern tree c_convert_parm_for_inlining (tree, tree, tree);\n+extern tree c_convert_parm_for_inlining (tree, tree, tree, int);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "42e495520c514833f94ba88e3fe6933fbaac9a57", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -3605,10 +3605,12 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n   return error_mark_node;\n }\n \n-/* Convert VALUE for assignment into inlined parameter PARM.  */\n+/* Convert VALUE for assignment into inlined parameter PARM.  ARGNUM\n+   is used for error and waring reporting and indicates which argument\n+   is being processed.  */\n \n tree\n-c_convert_parm_for_inlining (tree parm, tree value, tree fn)\n+c_convert_parm_for_inlining (tree parm, tree value, tree fn, int argnum)\n {\n   tree ret, type;\n \n@@ -3620,7 +3622,7 @@ c_convert_parm_for_inlining (tree parm, tree value, tree fn)\n   type = TREE_TYPE (parm);\n   ret = convert_for_assignment (type, value,\n \t\t\t\t(char *) 0 /* arg passing  */, fn,\n-\t\t\t\tDECL_NAME (fn), 0);\n+\t\t\t\tDECL_NAME (fn), argnum);\n   if (targetm.calls.promote_prototypes (TREE_TYPE (fn))\n       && INTEGRAL_TYPE_P (type)\n       && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))"}, {"sha": "6a9f68c86f02a97aecd4e628ff1457ece5faf6ac", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -83,7 +83,7 @@ extern tree lhd_tree_inlining_copy_res_decl_for_inlining (tree, tree, tree,\n extern int lhd_tree_inlining_anon_aggr_type_p (tree);\n extern int lhd_tree_inlining_start_inlining (tree);\n extern void lhd_tree_inlining_end_inlining (tree);\n-extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree);\n+extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree, int);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n "}, {"sha": "0e4aa2219a04832cbd5146428c6976a5d3f717d5", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -420,7 +420,8 @@ lhd_tree_inlining_end_inlining (tree fn ATTRIBUTE_UNUSED)\n tree\n lhd_tree_inlining_convert_parm_for_inlining (tree parm ATTRIBUTE_UNUSED,\n \t\t\t\t\t     tree value,\n-\t\t\t\t\t     tree fndecl ATTRIBUTE_UNUSED)\n+\t\t\t\t\t     tree fndecl ATTRIBUTE_UNUSED,\n+\t\t\t\t\t     int argnum ATTRIBUTE_UNUSED)\n {\n   return value;\n }"}, {"sha": "ce6b7a6b1c75ccfa25fa5ec9516aed78c238464f", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -47,7 +47,7 @@ struct lang_hooks_for_tree_inlining\n   bool (*var_mod_type_p) (tree);\n   int (*start_inlining) (tree);\n   void (*end_inlining) (tree);\n-  tree (*convert_parm_for_inlining) (tree, tree, tree);\n+  tree (*convert_parm_for_inlining) (tree, tree, tree, int);\n   int (*estimate_num_insns) (tree);\n };\n "}, {"sha": "9d0080171d22ee2ef7aa2c45dab39cfe87fa0180", "filename": "gcc/testsuite/gcc.dg/warn-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -5,14 +5,12 @@\n \n static void foo (p)\n      int p;\n-{\t/* { dg-warning \"passing arg of\" } */\n+{\t/* { dg-warning \"passing arg 1 of\" } */\n }\n \n-static void bar (void)\n+void bar (void)\n {\n   void *vp;\n \n   foo (vp);\t/* { dg-warning \"\" } */\n }\n-\n-void (*tourist_guide[]) (void) = { &bar };"}, {"sha": "66f5a82e484a0423518fecf210a7221145d3d7f4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5123baefb715e5d861535910f3c82deb8675f22/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d5123baefb715e5d861535910f3c82deb8675f22", "patch": "@@ -729,9 +729,11 @@ initialize_inlined_parameters (inline_data *id, tree args, tree fn, tree block)\n #ifdef INLINER_FOR_JAVA\n   tree vars = NULL_TREE;\n #endif /* INLINER_FOR_JAVA */\n+  int argnum = 0;\n \n   /* Figure out what the parameters are.  */\n-  parms = DECL_ARGUMENTS (fn);\n+  parms = \n+DECL_ARGUMENTS (fn);\n \n   /* Start with no initializations whatsoever.  */\n   init_stmts = NULL_TREE;\n@@ -749,9 +751,11 @@ initialize_inlined_parameters (inline_data *id, tree args, tree fn, tree block)\n       tree value;\n       tree var_sub;\n \n+      ++argnum;\n+\n       /* Find the initializer.  */\n       value = (*lang_hooks.tree_inlining.convert_parm_for_inlining)\n-\t      (p, a ? TREE_VALUE (a) : NULL_TREE, fn);\n+\t      (p, a ? TREE_VALUE (a) : NULL_TREE, fn, argnum);\n \n       /* If the parameter is never assigned to, we may not need to\n \t create a new variable here at all.  Instead, we may be able"}]}