{"sha": "c30922357a58440aee781193cdc0aa78befff9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwOTIyMzU3YTU4NDQwYWVlNzgxMTkzY2RjMGFhNzhiZWZmZjlkMQ==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-07-16T22:53:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-16T22:53:01Z"}, "message": "(ffecom_finish_symbol_transform_): Revert change of 1998-05-23...\n\nd\n\t* (ffecom_finish_symbol_transform_): Revert change\n\tof 1998-05-23, as it was too aggressive, in that it\n\tprevented transformation of (used) functions before\n\tprimary code generation.\n\nFrom-SVN: r21235", "tree": {"sha": "d7a6f4e325a86e99b4ebf865339137fd6fef7dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7a6f4e325a86e99b4ebf865339137fd6fef7dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c30922357a58440aee781193cdc0aa78befff9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30922357a58440aee781193cdc0aa78befff9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c30922357a58440aee781193cdc0aa78befff9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30922357a58440aee781193cdc0aa78befff9d1/comments", "author": null, "committer": null, "parents": [{"sha": "75750f9c8a098d85ef6a68b0b1115ca6aeae384a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75750f9c8a098d85ef6a68b0b1115ca6aeae384a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75750f9c8a098d85ef6a68b0b1115ca6aeae384a"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "269477dfc6723fc8335914d22557dc4d1aba0566", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30922357a58440aee781193cdc0aa78befff9d1/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30922357a58440aee781193cdc0aa78befff9d1/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=c30922357a58440aee781193cdc0aa78befff9d1", "patch": "@@ -6715,35 +6715,10 @@ ffecom_finish_symbol_transform_ (ffesymbol s)\n \n   if (ffesymbol_hook (s).decl_tree == NULL_TREE)\n     {\n-      if (ffesymbol_where (s) == FFEINFO_whereCONSTANT\n-\t  && (ffesymbol_kind (s) == FFEINFO_kindFUNCTION\n-\t      || ffesymbol_kind (s) == FFEINFO_kindSUBROUTINE))\n-\t{\n-\t  /* An unreferenced statement function.  If this refers to\n-\t     an undeclared array, it'll look like a reference to\n-\t     an external function that might not exist.  Even if it\n-\t     does refer to an non-existent function, it seems silly\n-\t     to force a linker error when the function won't actually\n-\t     be called.  But before the 1998-05-15 change to egcs/gcc\n-\t     toplev.c by Mark Mitchell, to fix other problems, this\n-\t     didn't actually happen, since gcc would defer nested\n-\t     functions to be compiled later only if needed.  With that\n-\t     change, it makes sense to simply avoid telling the back\n-\t     end about the statement (nested) function at all.  But\n-\t     if -Wunused is specified, might as well warn about it.  */\n-\n-\t  if (warn_unused)\n-\t    {\n-\t      ffebad_start (FFEBAD_SFUNC_UNUSED);\n-\t      ffebad_string (ffesymbol_text (s));\n-\t      ffebad_here (0, ffesymbol_where_line (s), ffesymbol_where_column (s));\n-\t      ffebad_finish ();\n-\t    }\n-\t}\n-      else if (ffesymbol_kind (s) != FFEINFO_kindNONE\n-\t       || (ffesymbol_where (s) != FFEINFO_whereNONE\n-\t\t   && ffesymbol_where (s) != FFEINFO_whereINTRINSIC\n-\t\t   && ffesymbol_where (s) != FFEINFO_whereDUMMY))\n+      if (ffesymbol_kind (s) != FFEINFO_kindNONE\n+\t  || (ffesymbol_where (s) != FFEINFO_whereNONE\n+\t      && ffesymbol_where (s) != FFEINFO_whereINTRINSIC\n+\t      && ffesymbol_where (s) != FFEINFO_whereDUMMY))\n \t/* Not transformed, and not CHARACTER*(*), and not a dummy\n \t   argument, which can happen only if the entry point names\n \t   it \"rides in on\" are all invalidated for other reasons.  */"}]}