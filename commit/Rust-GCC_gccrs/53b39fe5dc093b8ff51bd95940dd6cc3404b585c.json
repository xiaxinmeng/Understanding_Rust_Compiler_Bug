{"sha": "53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiMzlmZTVkYzA5M2I4ZmY1MWJkOTU5NDBkZDZjYzM0MDRiNTg1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-04-05T19:29:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-04-05T19:29:02Z"}, "message": "re PR c++/14912 (Do not print default template arguments in error messages)\n\n        PR c++/14912\n        * error.c (count_non_default_template_args): New fn.\n        (dump_template_parms): Call it.\n        (dump_template_argument_list): Call it.  Add parms parm.\n        (dump_template_argument): Adjust call to dump_template_argument_list.\n        (dump_type, dump_decl): Likewise.\n        (dump_template_bindings): Refactor logic.\n\nFrom-SVN: r145566", "tree": {"sha": "58c5580fb0ac381c8d134e5f6b5a55f0922a8817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c5580fb0ac381c8d134e5f6b5a55f0922a8817"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12633413c6a0c00e21075294205cd432daa4461b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12633413c6a0c00e21075294205cd432daa4461b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12633413c6a0c00e21075294205cd432daa4461b"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "8def05c08dc4e4e9b734de61b7312c7f22fba98a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "patch": "@@ -1,3 +1,13 @@\n+2009-04-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/14912\n+\t* error.c (count_non_default_template_args): New fn.\n+\t(dump_template_parms): Call it.\n+\t(dump_template_argument_list): Call it.  Add parms parm.\n+\t(dump_template_argument): Adjust call to dump_template_argument_list.\n+\t(dump_type, dump_decl): Likewise.\n+\t(dump_template_bindings): Refactor logic.\n+\n 2009-04-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/25185"}, {"sha": "a97017a9794e5ee6bc9806c4601a373cb5a30806", "filename": "gcc/cp/error.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "patch": "@@ -73,12 +73,14 @@ static void dump_global_iord (tree);\n static void dump_parameters (tree, int);\n static void dump_exception_spec (tree, int);\n static void dump_template_argument (tree, int);\n-static void dump_template_argument_list (tree, int);\n+static void dump_template_argument_list (tree, tree, int);\n static void dump_template_parameter (tree, int);\n static void dump_template_bindings (tree, tree, VEC(tree,gc) *);\n static void dump_scope (tree, int);\n static void dump_template_parms (tree, int, int);\n \n+static int count_non_default_template_args (tree, tree);\n+\n static const char *function_category (tree);\n static void maybe_print_instantiation_context (diagnostic_context *);\n static void print_instantiation_full_context (diagnostic_context *);\n@@ -140,7 +142,7 @@ static void\n dump_template_argument (tree arg, int flags)\n {\n   if (ARGUMENT_PACK_P (arg))\n-    dump_template_argument_list (ARGUMENT_PACK_ARGS (arg), flags);\n+    dump_template_argument_list (ARGUMENT_PACK_ARGS (arg), NULL_TREE, flags);\n   else if (TYPE_P (arg) || TREE_CODE (arg) == TEMPLATE_DECL)\n     dump_type (arg, flags & ~TFF_CLASS_KEY_OR_ENUM);\n   else\n@@ -152,17 +154,49 @@ dump_template_argument (tree arg, int flags)\n     }\n }\n \n+/* Count the number of template arguments ARGS whose value does not\n+   match the (optional) default template parameter in PARAMS  */\n+\n+static int\n+count_non_default_template_args (tree args, tree params)\n+{\n+  int n = TREE_VEC_LENGTH (args);\n+  int last;\n+\n+  if (params == NULL_TREE)\n+    return n;\n+\n+  for (last = n - 1; last >= 0; --last)\n+    {\n+      tree param = TREE_VEC_ELT (params, last);\n+      tree def = TREE_PURPOSE (param);\n+\n+      if (!def)\n+        break;\n+      if (uses_template_parms (def))\n+\t{\n+\t  ++processing_template_decl;\n+\t  def = tsubst_copy_and_build (def, args, tf_none, NULL_TREE, false, true);\n+\t  --processing_template_decl;\n+\t}\n+      if (!cp_tree_equal (TREE_VEC_ELT (args, last), def))\n+        break;\n+    }\n+\n+  return last + 1;\n+}\n+\n /* Dump a template-argument-list ARGS (always a TREE_VEC) under control\n    of FLAGS.  */\n \n static void\n-dump_template_argument_list (tree args, int flags)\n+dump_template_argument_list (tree args, tree parms, int flags)\n {\n-  int n = TREE_VEC_LENGTH (args);\n+  int n = count_non_default_template_args (args, parms);\n   int need_comma = 0;\n   int i;\n \n-  for (i = 0; i< n; ++i)\n+  for (i = 0; i < n; ++i)\n     {\n       tree arg = TREE_VEC_ELT (args, i);\n \n@@ -240,18 +274,19 @@ dump_template_bindings (tree parms, tree args, VEC(tree,gc)* typenames)\n       int lvl = TMPL_PARMS_DEPTH (parms);\n       int arg_idx = 0;\n       int i;\n+      tree lvl_args = NULL_TREE;\n+\n+      /* Don't crash if we had an invalid argument list.  */\n+      if (TMPL_ARGS_DEPTH (args) >= lvl)\n+\tlvl_args = TMPL_ARGS_LEVEL (args, lvl);\n \n       for (i = 0; i < TREE_VEC_LENGTH (p); ++i)\n \t{\n \t  tree arg = NULL_TREE;\n \n \t  /* Don't crash if we had an invalid argument list.  */\n-\t  if (TMPL_ARGS_DEPTH (args) >= lvl)\n-\t    {\n-\t      tree lvl_args = TMPL_ARGS_LEVEL (args, lvl);\n-\t      if (NUM_TMPL_ARGS (lvl_args) > arg_idx)\n-\t\targ = TREE_VEC_ELT (lvl_args, arg_idx);\n-\t    }\n+\t  if (lvl_args && NUM_TMPL_ARGS (lvl_args) > arg_idx)\n+\t    arg = TREE_VEC_ELT (lvl_args, arg_idx);\n \n \t  if (need_comma)\n \t    pp_separate_with_comma (cxx_pp);\n@@ -365,7 +400,7 @@ dump_type (tree t, int flags)\n \tpp_cxx_cv_qualifier_seq (cxx_pp, t);\n \tpp_cxx_tree_identifier (cxx_pp, TYPE_IDENTIFIER (t));\n \tpp_cxx_begin_template_argument_list (cxx_pp);\n-\tdump_template_argument_list (args, flags);\n+\tdump_template_argument_list (args, NULL_TREE, flags);\n \tpp_cxx_end_template_argument_list (cxx_pp);\n       }\n       break;\n@@ -959,7 +994,7 @@ dump_decl (tree t, int flags)\n \tdump_decl (name, flags);\n \tpp_cxx_begin_template_argument_list (cxx_pp);\n \tif (TREE_OPERAND (t, 1))\n-\t  dump_template_argument_list (TREE_OPERAND (t, 1), flags);\n+\t  dump_template_argument_list (TREE_OPERAND (t, 1), NULL_TREE, flags);\n \tpp_cxx_end_template_argument_list (cxx_pp);\n       }\n       break;\n@@ -1389,11 +1424,15 @@ dump_template_parms (tree info, int primary, int flags)\n   if (args && !primary)\n     {\n       int len, ix;\n+      /* We don't know the parms for a friend template specialization.  */\n+      tree params = (TREE_CODE (TI_TEMPLATE (info)) == TEMPLATE_DECL\n+\t\t     ? DECL_INNERMOST_TEMPLATE_PARMS (TI_TEMPLATE (info))\n+\t\t     : NULL_TREE);\n \n       if (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (args))\n \targs = TREE_VEC_ELT (args, TREE_VEC_LENGTH (args) - 1);\n \n-      len = TREE_VEC_LENGTH (args);\n+      len = count_non_default_template_args (args, params);\n \n       for (ix = 0; ix != len; ix++)\n \t{"}, {"sha": "ef0bda24f24eabee14234b334ba8889b16d75291", "filename": "gcc/testsuite/g++.dg/template/error39.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b39fe5dc093b8ff51bd95940dd6cc3404b585c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror39.C?ref=53b39fe5dc093b8ff51bd95940dd6cc3404b585c", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/14912\n+\n+template <class T, int N=0, int X=1>\n+struct A\n+{\n+};\n+\n+void foo(void)\n+{\n+  A<void> a = 0;\t\t// dg-error { \"A<void\"> }\n+}"}]}