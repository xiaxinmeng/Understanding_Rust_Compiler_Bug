{"sha": "dad2a933ba0fe99918377dc328ce87325365fb91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkMmE5MzNiYTBmZTk5OTE4Mzc3ZGMzMjhjZTg3MzI1MzY1ZmI5MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-27T09:28:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-27T09:28:45Z"}, "message": "re PR c++/14329 ([4.1 only] badly formatted warnings for SRA replacements used uninitialized)\n\n        PR tree-opt/14329\n        * tree.h (struct tree_decl): Add debug_expr_is_from.\n        (DECL_DEBUG_EXPR_IS_FROM): New.\n        (DECL_DEBUG_EXPR): Rename from DECL_DEBUG_ALIAS_OF.\n        * dwarf2out.c (dwarf2out_var_location): Update to match.\n        * tree-outof-ssa.c (create_temp): Likewise.\n        * var-tracking.c (track_expr_p): Likewise.\n        * tree-sra.c (instantiate_element): Set DECL_DEBUG_EXPR.\n        * c-objc-common.c (c_tree_printer) <'D'>: Handle DECL_DEBUG_EXPR.\n        * toplev.c (default_tree_printer): Likewise.\n\nFrom-SVN: r94317", "tree": {"sha": "b06cc8f8944057cfd57dcd5faf93040dd75dae74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06cc8f8944057cfd57dcd5faf93040dd75dae74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad2a933ba0fe99918377dc328ce87325365fb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2a933ba0fe99918377dc328ce87325365fb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad2a933ba0fe99918377dc328ce87325365fb91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2a933ba0fe99918377dc328ce87325365fb91/comments", "author": null, "committer": null, "parents": [{"sha": "17c21957198083a5787308566dff7526d1307bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c21957198083a5787308566dff7526d1307bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c21957198083a5787308566dff7526d1307bc5"}], "stats": {"total": 120, "additions": 98, "deletions": 22}, "files": [{"sha": "6999c439dc2c5bed376edda709452f076befc5b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -1,3 +1,16 @@\n+2005-01-27  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/14329\n+\t* tree.h (struct tree_decl): Add debug_expr_is_from.\n+\t(DECL_DEBUG_EXPR_IS_FROM): New.\n+\t(DECL_DEBUG_EXPR): Rename from DECL_DEBUG_ALIAS_OF.\n+\t* dwarf2out.c (dwarf2out_var_location): Update to match.\n+\t* tree-outof-ssa.c (create_temp): Likewise.\n+\t* var-tracking.c (track_expr_p): Likewise.\n+\t* tree-sra.c (instantiate_element): Set DECL_DEBUG_EXPR.\n+\t* c-objc-common.c (c_tree_printer) <'D'>: Handle DECL_DEBUG_EXPR.\n+\t* toplev.c (default_tree_printer): Likewise.\n+\n 2005-01-27  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/frv/frv.c (frv_class_likely_spilled_p): Add GR8_REGS,"}, {"sha": "50bb0fc0da29298d586967007bbc0804b050d3f2", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -177,6 +177,17 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n   switch (*text->format_spec)\n     {\n     case 'D':\n+      if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+\t{\n+\t  t = DECL_DEBUG_EXPR (t);\n+\t  if (!DECL_P (t))\n+\t    {\n+\t      pp_c_expression (cpp, t);\n+\t      return true;\n+\t    }\n+\t}\n+      /* FALLTHRU */\n+\n     case 'F':\n       if (DECL_NAME (t))\n \tn = lang_hooks.decl_printable_name (t, 2);"}, {"sha": "49bca54c9516aaf143048802e87db62a37a4caf3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -13131,8 +13131,9 @@ dwarf2out_var_location (rtx loc_note)\n   last_insn = loc_note;\n   last_label = newloc->label;\n   decl = NOTE_VAR_LOCATION_DECL (loc_note);\n-  if (DECL_DEBUG_ALIAS_OF (decl))\n-    decl = DECL_DEBUG_ALIAS_OF (decl); \n+  if (DECL_DEBUG_EXPR (decl) && DECL_DEBUG_EXPR_IS_FROM (decl)\n+      && DECL_P (DECL_DEBUG_EXPR (decl)))\n+    decl = DECL_DEBUG_EXPR (decl); \n   add_var_loc_to_decl (decl, newloc);\n }\n "}, {"sha": "bd7c13a1feb933e57d59787cc42c486fb5928548", "filename": "gcc/testsuite/gcc.dg/uninit-I.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options -O2 -Wuninitialized } */\n+\n+int sys_msgctl (void)\n+{\n+  struct { int mode; } setbuf;  /* { dg-warning \"'setbuf[.]mode' is used\" } */\n+  return setbuf.mode;\n+}"}, {"sha": "2659997a9418078ef2d2bfe332fd54288df135d4", "filename": "gcc/toplev.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -1554,23 +1554,36 @@ default_pch_valid_p (const void *data_p, size_t len)\n static bool\n default_tree_printer (pretty_printer * pp, text_info *text)\n {\n+  tree t;\n+\n   switch (*text->format_spec)\n     {\n     case 'D':\n+      t = va_arg (*text->args_ptr, tree);\n+      if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+\tt = DECL_DEBUG_EXPR (t);\n+      break;\n+\n     case 'F':\n     case 'T':\n-      {\n-        tree t = va_arg (*text->args_ptr, tree);\n-        const char *n = DECL_NAME (t)\n-          ? lang_hooks.decl_printable_name (t, 2)\n-          : \"<anonymous>\";\n-        pp_string (pp, n);\n-      }\n-      return true;\n+      t = va_arg (*text->args_ptr, tree);\n+      break;\n \n     default:\n       return false;\n     }\n+\n+  if (DECL_P (t))\n+    {\n+      const char *n = DECL_NAME (t)\n+        ? lang_hooks.decl_printable_name (t, 2)\n+        : \"<anonymous>\";\n+      pp_string (pp, n);\n+    }\n+  else\n+    dump_generic_node (pp, t, 0, 0, 0);\n+\n+  return true;\n }\n \n /* Initialization of the front end environment, before command line"}, {"sha": "65c74d310a4fe18b3eb546194b570b61f578cade", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -157,10 +157,16 @@ create_temp (tree t)\n     name = \"temp\";\n   tmp = create_tmp_var (type, name);\n \n-  if (DECL_DEBUG_ALIAS_OF (t))\n-    DECL_DEBUG_ALIAS_OF (tmp) = DECL_DEBUG_ALIAS_OF (t);  \n+  if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+    {\n+      DECL_DEBUG_EXPR (tmp) = DECL_DEBUG_EXPR (t);  \n+      DECL_DEBUG_EXPR_IS_FROM (tmp) = 1;\n+    }\n   else if (!DECL_IGNORED_P (t))\n-    DECL_DEBUG_ALIAS_OF (tmp) = t;\n+    {\n+      DECL_DEBUG_EXPR (tmp) = t;\n+      DECL_DEBUG_EXPR_IS_FROM (tmp) = 1;\n+    }\n   DECL_ARTIFICIAL (tmp) = DECL_ARTIFICIAL (t);\n   DECL_IGNORED_P (tmp) = DECL_IGNORED_P (t);\n   add_referenced_tmp_var (tmp);"}, {"sha": "01bf53c0af9274d7e39925807732dbfc659f0061", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -144,6 +144,8 @@ static struct obstack sra_obstack;\n static void dump_sra_elt_name (FILE *, struct sra_elt *);\n extern void debug_sra_elt_name (struct sra_elt *);\n \n+/* Forward declarations.  */\n+static tree generate_element_ref (struct sra_elt *);\n \f\n /* Return true if DECL is an SRA candidate.  */\n \n@@ -1112,15 +1114,25 @@ instantiate_element (struct sra_elt *elt)\n \n   elt->replacement = var = make_rename_temp (elt->type, \"SR\");\n   DECL_SOURCE_LOCATION (var) = DECL_SOURCE_LOCATION (base);\n-  TREE_NO_WARNING (var) = TREE_NO_WARNING (base);\n-  DECL_ARTIFICIAL (var) = DECL_ARTIFICIAL (base);\n-  DECL_IGNORED_P (var) = DECL_IGNORED_P (base);\n+  DECL_ARTIFICIAL (var) = 1;\n \n   if (DECL_NAME (base) && !DECL_IGNORED_P (base))\n     {\n       char *pretty_name = build_element_name (elt);\n       DECL_NAME (var) = get_identifier (pretty_name);\n       obstack_free (&sra_obstack, pretty_name);\n+\n+      DECL_DEBUG_EXPR (var) = generate_element_ref (elt);\n+      DECL_DEBUG_EXPR_IS_FROM (var) = 1;\n+\n+      DECL_IGNORED_P (var) = 0;\n+      TREE_NO_WARNING (var) = TREE_NO_WARNING (base);\n+    }\n+  else\n+    {\n+      DECL_IGNORED_P (var) = 1;\n+      /* ??? We can't generate any warning that would be meaningful.  */\n+      TREE_NO_WARNING (var) = 1;\n     }\n \n   if (dump_file)"}, {"sha": "a4c590b476abcb464c5a026b08eadfceb581aa80", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -2018,9 +2018,13 @@ struct tree_binfo GTY (())\n    writing debugging information about vfield and vbase decls for C++.  */\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->decl.vindex)\n \n-/* For VAR_DECL, this is set to the variable we were split from, due to\n-   optimization. */\n-#define DECL_DEBUG_ALIAS_OF(NODE) (DECL_CHECK (NODE)->decl.vindex)\n+/* For VAR_DECL, this is set to either an expression that it was split\n+   from (if DECL_DEBUG_EXPR_IS_FROM is true), otherwise a tree_list of\n+   subexpressions that it was split into.  */\n+#define DECL_DEBUG_EXPR(NODE) (DECL_CHECK (NODE)->decl.vindex)\n+\n+#define DECL_DEBUG_EXPR_IS_FROM(NODE) \\\n+  (DECL_CHECK (NODE)->decl.debug_expr_is_from)\n \n /* Every ..._DECL node gets a unique number.  */\n #define DECL_UID(NODE) (DECL_CHECK (NODE)->decl.uid)\n@@ -2361,7 +2365,8 @@ struct tree_decl GTY(())\n   unsigned possibly_inlined : 1;\n   unsigned preserve_flag: 1;\n   unsigned gimple_formal_temp : 1;\n-  /* 13 unused bits.  */\n+  unsigned debug_expr_is_from : 1;\n+  /* 12 unused bits.  */\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}, {"sha": "7621313fa1392bfdd0076aab9eaa7bf28ada2064", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad2a933ba0fe99918377dc328ce87325365fb91/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=dad2a933ba0fe99918377dc328ce87325365fb91", "patch": "@@ -1460,8 +1460,15 @@ track_expr_p (tree expr)\n      don't need to track this expression if the ultimate declaration is\n      ignored.  */\n   realdecl = expr;\n-  if (DECL_DEBUG_ALIAS_OF (realdecl))\n-    realdecl = DECL_DEBUG_ALIAS_OF  (realdecl);\n+  if (DECL_DEBUG_EXPR (realdecl)\n+      && DECL_DEBUG_EXPR_IS_FROM (realdecl))\n+    {\n+      realdecl = DECL_DEBUG_EXPR (realdecl);\n+      /* ??? We don't yet know how to emit DW_OP_piece for variable\n+\t that has been SRA'ed.  */\n+      if (!DECL_P (realdecl))\n+\treturn 0;\n+    }\n \n   /* Do not track EXPR if REALDECL it should be ignored for debugging\n      purposes.  */ "}]}