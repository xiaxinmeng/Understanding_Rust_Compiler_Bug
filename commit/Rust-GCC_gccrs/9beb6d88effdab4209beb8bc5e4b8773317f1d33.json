{"sha": "9beb6d88effdab4209beb8bc5e4b8773317f1d33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlYjZkODhlZmZkYWI0MjA5YmViOGJjNWU0Yjg3NzMzMTdmMWQzMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-15T19:38:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-15T20:45:18Z"}, "message": "c++: Fix qualified array-type construction [PR 98538]\n\nThis was an assert that was too picky.  The reason I had to alter\narray construction was that on stream in, we cannot dynamically determine\na type's dependentness.  Thus on stream out of the 'problematic' types,\nwe save the dependentness for reconstruction.  Fortunately the paths into\ncp_build_qualified_type_real from streamin with arrays do have the array's\ndependentess set as needed.\n\n\tPR c++/98538\n\tgcc/cp/\n\t* tree.c (cp_build_qualified_type_real): Propagate an array's\n\tdependentness to the copy, if known.\n\tgcc/testsuite/\n\t* g++.dg/template/pr98538.C: New.", "tree": {"sha": "a2e246e22c663ee17ad9ba708068fde08f6c9bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e246e22c663ee17ad9ba708068fde08f6c9bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9beb6d88effdab4209beb8bc5e4b8773317f1d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9beb6d88effdab4209beb8bc5e4b8773317f1d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9beb6d88effdab4209beb8bc5e4b8773317f1d33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9beb6d88effdab4209beb8bc5e4b8773317f1d33/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1efa6af61ab54faf0d8d091328e0c6a1141050c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1efa6af61ab54faf0d8d091328e0c6a1141050c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1efa6af61ab54faf0d8d091328e0c6a1141050c"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "7dcb453ba6ae9cd2629ac908a16abe29cfcec5e6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9beb6d88effdab4209beb8bc5e4b8773317f1d33/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9beb6d88effdab4209beb8bc5e4b8773317f1d33/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9beb6d88effdab4209beb8bc5e4b8773317f1d33", "patch": "@@ -1340,10 +1340,12 @@ cp_build_qualified_type_real (tree type,\n \n       if (!t)\n \t{\n-\t  gcc_checking_assert (TYPE_DEPENDENT_P_VALID (type)\n-\t\t\t       || !dependent_type_p (type));\n+\t  /* If we already know the dependentness, tell the array type\n+\t     constructor.  This is important for module streaming, as we cannot\n+\t     dynamically determine that on read in.  */\n \t  t = build_cplus_array_type (element_type, TYPE_DOMAIN (type),\n-\t\t\t\t      TYPE_DEPENDENT_P (type));\n+\t\t\t\t      TYPE_DEPENDENT_P_VALID (type)\n+\t\t\t\t      ? int (TYPE_DEPENDENT_P (type)) : -1);\n \n \t  /* Keep the typedef name.  */\n \t  if (TYPE_NAME (t) != TYPE_NAME (type))"}, {"sha": "b62e8a96af894f5d9e4d0f99adef304e61e8a52c", "filename": "gcc/testsuite/g++.dg/template/pr98538.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9beb6d88effdab4209beb8bc5e4b8773317f1d33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98538.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9beb6d88effdab4209beb8bc5e4b8773317f1d33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98538.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98538.C?ref=9beb6d88effdab4209beb8bc5e4b8773317f1d33", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/98538\n+// { dg-do compile { target c++11 } }\n+// ICE bulding a dependent array type variant\n+\n+template<typename T> using A = int[1];\n+template<typename T, const A<T>> struct X { };\n+\n+template<typename T>\n+void\n+f (const A<T>)\n+{\n+  const A<T> a;\n+}\n+\n+template<typename T>\n+struct Y {\n+  const A<T> a;\n+};"}]}