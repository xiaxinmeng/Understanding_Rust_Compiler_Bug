{"sha": "62e42210ef0f4c2d80a542cb676b663f4df2bb88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlNDIyMTBlZjBmNGMyZDgwYTU0MmNiNjc2YjY2M2Y0ZGYyYmI4OA==", "commit": {"author": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-09-16T08:04:45Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-09-16T08:04:45Z"}, "message": "Change log update for 202610-202612.\n\nFrom-SVN: r202615", "tree": {"sha": "d4d3f0f92b70cc9a2918d04732034e80b089eecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d3f0f92b70cc9a2918d04732034e80b089eecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e42210ef0f4c2d80a542cb676b663f4df2bb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e42210ef0f4c2d80a542cb676b663f4df2bb88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e42210ef0f4c2d80a542cb676b663f4df2bb88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e42210ef0f4c2d80a542cb676b663f4df2bb88/comments", "author": null, "committer": null, "parents": [{"sha": "96e24d499b3818e76af555e2529082432470aee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e24d499b3818e76af555e2529082432470aee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e24d499b3818e76af555e2529082432470aee4"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "5fbc78c1c2afeb81f3e7c5f1548c580f7211d58b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e42210ef0f4c2d80a542cb676b663f4df2bb88/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e42210ef0f4c2d80a542cb676b663f4df2bb88/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62e42210ef0f4c2d80a542cb676b663f4df2bb88", "patch": "@@ -1,3 +1,57 @@\n+2013-09-16  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* cp-tree.h (type_uses_auto_or_concept): Declare.\n+\t(is_auto_or_concept): Declare.\n+\t* decl.c (grokdeclarator): Allow 'auto' parameters in lambdas with\n+\t-std=gnu++1y or -std=c++1y or, as a GNU extension, in plain functions.\n+\t* type-utils.h: New header defining ...\n+\t(find_type_usage): ... this new function based on pt.c (type_uses_auto)\n+\tfor searching a type tree given a predicate.\n+\t* pt.c (type_uses_auto): Reimplement via type-utils.h (find_type_usage).\n+\t(is_auto_or_concept): New function.\n+\t(type_uses_auto_or_concept): New function.\n+\t* parser.h (struct cp_parser): Add fully_implicit_function_template_p.\n+\t* parser.c (cp_parser_new): Initialize fully_implicit_function_template_p.\n+\t(cp_parser_new): Initialize fully_implicit_function_template_p.\n+\t(cp_parser_lambda_expression): Copy and restore value of\n+\tfully_implicit_function_template_p as per other parser fields.\n+\t(cp_parser_parameter_declaration_list): Count generic\n+\tparameters and call ...\n+\t(add_implicit_template_parms): ... this new function to synthesize them\n+\twith help from type-utils.h (find_type_usage), ...\n+\t(tree_type_is_auto_or_concept): ... this new static function and ...\n+\t(make_generic_type_name): ... this new static function.\n+\t(cp_parser_direct_declarator): Account for implicit template parameters.\n+\t(cp_parser_lambda_declarator_opt): Finish fully implicit template if\n+\tnecessary by calling ...\n+\t(finish_fully_implicit_template): ... this new function.\n+\t(cp_parser_init_declarator): Likewise.\n+\t(cp_parser_function_definition_after_declarator): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t* Make-lang.in (cp/pt.o): Add dependency on type-utils.h.\n+\t(cp/parser.o): Likewise.\n+\n+2013-09-16  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* parser.c (cp_parser_lambda_declarator_opt): Accept template parameter\n+\tlist with std=c++1y or std=gnu++1y.\n+\t(cp_parser_lambda_body): Don't call 'expand_or_defer_fn' for lambda call\n+\toperator template to avoid adding template result to symbol table.\n+\t* lambda.c (lambda_function): Return template result if call operator is\n+\ta template.\n+\t(maybe_add_lambda_conv_op): Move declarations to point of use.  Refactor\n+\toperator call building in order to support conversion of a non-capturing\n+\tlambda template to a function pointer with help from ...\n+\t(prepare_op_call): ... this new function.\n+\t* decl2.c (check_member_template): Don't reject lambda call operator\n+\ttemplate in local [lambda] class.\n+\t* pt.c (instantiate_class_template_1): Don't instantiate lambda call\n+\toperator template when instantiating lambda class.\n+\n+2013-09-16  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* pt.c (make_auto_1): Use input_location rather than BUILTINS_LOCATION.\n+\n 2013-09-15  Jason Merrill  <jason@redhat.com>\n \n \tCore DR 904"}, {"sha": "99d0c36beff665260318e427edfdc3523d94c342", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e42210ef0f4c2d80a542cb676b663f4df2bb88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e42210ef0f4c2d80a542cb676b663f4df2bb88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e42210ef0f4c2d80a542cb676b663f4df2bb88", "patch": "@@ -1,3 +1,8 @@\n+2013-09-16  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* g++.dg/cpp0x/auto9.C: Downgrade two previously expected errors (now\n+\tinterpreted as implicit templates) to be expected pedwarns instead.\n+\n 2013-09-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57697"}]}