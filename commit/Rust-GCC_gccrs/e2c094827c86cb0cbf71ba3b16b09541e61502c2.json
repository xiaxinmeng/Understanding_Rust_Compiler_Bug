{"sha": "e2c094827c86cb0cbf71ba3b16b09541e61502c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjMDk0ODI3Yzg2Y2IwY2JmNzFiYTNiMTZiMDk1NDFlNjE1MDJjMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-02-16T00:44:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-16T00:44:44Z"}, "message": "Add support for -fno-exceptions.\n\n\n2001-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tAdd support for -fno-exceptions.\n\t* include/bits/exception_support.h: Remove.\n\t* include/bits/basic_string.h: Remove exception_support.\n\t(string::_M_check): Replace __OUTOFRANGE with __throw_out_of_range.\n\t(string::at): Same.\n\t(string::substr): Same.\n\t* include/bits/basic_string.tcc (string::reserve): Replace\n\t__LENGTHERROR with __throw_length_error.\n\t(string::_S_create): Same.\n\t(string::resize): Same.\n\t(string::_M_replace): Same.\n\t(string::replace): Same.\n\t(string::copy): Replace __OUTOFRANGE with __throw_out_of_range.\n\t(string::compare): Same.\n\t* include/bits/stl_vector.h: Remove exception_support.\n\t* src/Makefile.am (base_headers): Remove here.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/bits/stl_range_errors.h: Remove.\n\t* include/bits/stl_deque.h: Use __throw_range_error.\n\t* include/bits/std_deque.h: Include functexcept.h.\n\t* include/bits/std_vector.h: Same.\n\t* src/Makefile.am (base_headers): Remove here.\n\t* src/Makefile.in: Regenerate.\n\t* include/ext/stl_bvector.h (class __BVECTOR): Use __throw_range_error.\n\t* include/ext/bvector: Remove stl_range_errors.h\n\n\t* include/bits/c++config (_GLIBCPP_USE_EXCEPTIONS): Remove.\n\n\t* include/bits/functexcept.h: New file.\n\t* src/functexcept.cc: New file. Definitions for function-based\n\texception routines.\n\t* src/Makefile.am (sources): Add functexcept.cc.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/bits/stl_config.h (__STL_USE_EXCEPTIONS): Wrap with\n\t__EXCEPTIONS.\n\n\t* include/bits/localefwd.h: Include functexcept.h.\n\t* include/bits/std_iosfwd.h: Same.\n\n\t* include/bits/basic_ios.h: Use __throw_ios_failure instead of\n\tthrow basic_ios::failure.\n\t* include/bits/fstream.tcc (filebuf::_M_allocate_buffers):\n\tUse __throw_exception_again.\n\t(filebuf::_M_filebuf_init): Same.\n\t* include/bits/streambuf.tcc (__copy_streambufs): Same.\n\t* include/bits/ostream.tcc (ostream::operator<<): Same.\n\t* include/bits/istream.tcc (istream::operator>>): Same.\n\t* include/bits/basic_string.tcc (string::_M_mutate): Same.\n\t(string::_S_construct): Same.\n\t(string::_M_clone): Same.\n\t* include/bits/locale_facets.tcc (use_facet(const locale&)): Use\n\t__throw_bad_cast.\n\t(num_put<_CharT, _OutIter>::do_put): Use __throw_exception_again.\n\t* src/localename.cc (locale::_Imp::_Imp(const _Impl&, size_t): Use\n\t__throw_exception_again.\n\t(locale::_Imp::_Imp(string, size_t): Same.\n\t(locale::_Imp::_M_replace_facet): Use __throw_runtime_error.\n\t* src/locale.cc (locale::_M_coalesce): Use __throw_exception_again.\n\t(locale::locale(const char*)): Use __throw_runtime_error.\n\t(locale::classic): Use __throw_exception_again.\n\t(locale::_S_normalize_category): Use __throw_runtime_error.\n\n\t* src/stdexcept.cc: Remove cruft.\n\n\t* libsupc++/exception_defines.h: New file.\n\t* libsupc++/new_opnt.cc: Include exception_defines.h.\n\t* libsupc++/vec.cc: Same.\n\t(__cxa_vec_new2): Use __throw_exception_again.\n\t(__cxa_vec_new3): Same.\n\t(__cxa_vec_ctor): Same.\n\t(__cxa_vec_delete3): Same.\n\t(__cxa_vec_cctor): Same.\n\t(__cxa_vec_delete2): Same.\n\t(__cxa_vec_dtor): Same.\n\t* libsupc++/exception_support.cc: Include exception_defines.h. Only\n\tcompile exception-handling bits if __EXCEPTIONS is defined.\n\tRemove old ABI support.\n\t* libsupc++/new_op.cc (new): Include exception_defines.h. Use\n\tstd::__throw_bad_alloc() instead of throw bad_alloc.\n\t* libsupc++/Makefile.am: Add exception_defines.h.\n\t* libsupc++/Makefile.in: Reformat.\n\t* libsupc++/*: Format.\n\nFrom-SVN: r39730", "tree": {"sha": "f60e91555ba38a22be308cded2cce3256e60e62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60e91555ba38a22be308cded2cce3256e60e62a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c094827c86cb0cbf71ba3b16b09541e61502c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c094827c86cb0cbf71ba3b16b09541e61502c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c094827c86cb0cbf71ba3b16b09541e61502c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c094827c86cb0cbf71ba3b16b09541e61502c2/comments", "author": null, "committer": null, "parents": [{"sha": "777c9517422d911f184ccde6edd59c317ce5edd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777c9517422d911f184ccde6edd59c317ce5edd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777c9517422d911f184ccde6edd59c317ce5edd8"}], "stats": {"total": 3070, "additions": 1633, "deletions": 1437}, "files": [{"sha": "419ffed4484c1e065a3c9c88da73fa40c85f5bb4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,3 +1,90 @@\n+2001-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tAdd support for -fno-exceptions.\n+\t* include/bits/exception_support.h: Remove.\n+\t* include/bits/basic_string.h: Remove exception_support.\n+\t(string::_M_check): Replace __OUTOFRANGE with __throw_out_of_range.\n+\t(string::at): Same.\n+\t(string::substr): Same.\n+\t* include/bits/basic_string.tcc (string::reserve): Replace\n+\t__LENGTHERROR with __throw_length_error.\n+\t(string::_S_create): Same.\n+\t(string::resize): Same.\n+\t(string::_M_replace): Same.\n+\t(string::replace): Same.\n+\t(string::copy): Replace __OUTOFRANGE with __throw_out_of_range.\n+\t(string::compare): Same.\n+\t* include/bits/stl_vector.h: Remove exception_support.\n+\t* src/Makefile.am (base_headers): Remove here.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* include/bits/stl_range_errors.h: Remove.\n+\t* include/bits/stl_deque.h: Use __throw_range_error.\n+\t* include/bits/std_deque.h: Include functexcept.h.\n+\t* include/bits/std_vector.h: Same.\n+\t* src/Makefile.am (base_headers): Remove here.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/ext/stl_bvector.h (class __BVECTOR): Use __throw_range_error.\n+\t* include/ext/bvector: Remove stl_range_errors.h\n+\n+\t* include/bits/c++config (_GLIBCPP_USE_EXCEPTIONS): Remove.\n+\n+\t* include/bits/functexcept.h: New file.\n+\t* src/functexcept.cc: New file. Definitions for function-based\n+\texception routines.\n+\t* src/Makefile.am (sources): Add functexcept.cc.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* include/bits/stl_config.h (__STL_USE_EXCEPTIONS): Wrap with\n+\t__EXCEPTIONS.\n+\n+\t* include/bits/localefwd.h: Include functexcept.h.\n+\t* include/bits/std_iosfwd.h: Same.\n+\n+\t* include/bits/basic_ios.h: Use __throw_ios_failure instead of\n+\tthrow basic_ios::failure.\n+\t* include/bits/fstream.tcc (filebuf::_M_allocate_buffers):\n+\tUse __throw_exception_again.\n+\t(filebuf::_M_filebuf_init): Same.\n+\t* include/bits/streambuf.tcc (__copy_streambufs): Same.\n+\t* include/bits/ostream.tcc (ostream::operator<<): Same.\n+\t* include/bits/istream.tcc (istream::operator>>): Same.\n+\t* include/bits/basic_string.tcc (string::_M_mutate): Same.\n+\t(string::_S_construct): Same.\n+\t(string::_M_clone): Same.\n+\t* include/bits/locale_facets.tcc (use_facet(const locale&)): Use\n+\t__throw_bad_cast.\n+\t(num_put<_CharT, _OutIter>::do_put): Use __throw_exception_again.\n+\t* src/localename.cc (locale::_Imp::_Imp(const _Impl&, size_t): Use\n+\t__throw_exception_again.\n+\t(locale::_Imp::_Imp(string, size_t): Same.\n+\t(locale::_Imp::_M_replace_facet): Use __throw_runtime_error.\n+\t* src/locale.cc (locale::_M_coalesce): Use __throw_exception_again.\n+\t(locale::locale(const char*)): Use __throw_runtime_error.\n+\t(locale::classic): Use __throw_exception_again.\n+\t(locale::_S_normalize_category): Use __throw_runtime_error.\n+\n+\t* src/stdexcept.cc: Remove cruft.\n+\n+\t* libsupc++/exception_defines.h: New file.\n+\t* libsupc++/new_opnt.cc: Include exception_defines.h.\n+\t* libsupc++/vec.cc: Same.\n+\t(__cxa_vec_new2): Use __throw_exception_again.\n+\t(__cxa_vec_new3): Same.\n+\t(__cxa_vec_ctor): Same.\n+\t(__cxa_vec_delete3): Same.\n+\t(__cxa_vec_cctor): Same.\n+\t(__cxa_vec_delete2): Same.\n+\t(__cxa_vec_dtor): Same.\n+\t* libsupc++/exception_support.cc: Include exception_defines.h. Only\n+\tcompile exception-handling bits if __EXCEPTIONS is defined.\n+\tRemove old ABI support.\n+\t* libsupc++/new_op.cc (new): Include exception_defines.h. Use\n+\tstd::__throw_bad_alloc() instead of throw bad_alloc.\n+\t* libsupc++/Makefile.am: Add exception_defines.h.\n+\t* libsupc++/Makefile.in: Reformat.\n+\t* libsupc++/*: Format.\n+\n 2001-02-15  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/html/configopts.html:  Minor updates and typo fixes."}, {"sha": "e694a0fadc86da7b56a483a2fa56354342169156", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 804, "deletions": 815, "changes": 1619, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2"}, {"sha": "a6a6a87296fb3c5894eca4f304cc55a8aac815d8", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -105,7 +105,7 @@ namespace std {\n \telse\n \t  _M_streambuf_state = __state | badbit;\n \tif ((this->rdstate() & this->exceptions()))\n-\t  throw failure(\"basic_ios::clear(iostate) caused exception\");\n+\t  __throw_ios_failure(\"basic_ios::clear(iostate) caused exception\");\n       }\n \n       inline void "}, {"sha": "c173d56c9876e53c31465a4a12a88a46debe1660", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -34,7 +34,6 @@\n #ifndef _CPP_BITS_STRING_H\n #define _CPP_BITS_STRING_H\t1\n \n-#include <bits/exception_support.h>\n #include <bits/atomicity.h>\n \n namespace std {\n@@ -261,7 +260,8 @@ namespace std {\n       iterator \n       _M_check(size_type __pos) const\n       { \n-\t__OUTOFRANGE(__pos > this->size()); \n+\tif (__pos > this->size())\n+\t  __throw_out_of_range(\"basic_string::_M_check\"); \n \treturn _M_ibegin() + __pos; \n       }\n \n@@ -432,14 +432,16 @@ namespace std {\n       const_reference \n       at(size_type __n) const\n       {\n-\t__OUTOFRANGE(__n >= this->size());\n+\tif (__n >= this->size())\n+\t  __throw_out_of_range(\"basic_string::at\");\n \treturn _M_data()[__n]; \n       }\n \n       reference \n       at(size_type __n)\n       {\n-\t__OUTOFRANGE(__n >= size());\n+\tif (__n >= size())\n+\t  __throw_out_of_range(\"basic_string::at\");\n \t_M_leak(); \n \treturn _M_data()[__n]; \n       }\n@@ -809,7 +811,8 @@ namespace std {\n       basic_string \n       substr(size_type __pos = 0, size_type __n = npos) const\n       { \n-\t__OUTOFRANGE(__pos > this->size());\n+\tif (__pos > this->size())\n+\t  __throw_out_of_range(\"basic_string::substr\");\n \treturn basic_string(*this, __pos, __n); \n       }\n "}, {"sha": "ef26ea3c9fa557b2026691c103ef798fcbbee21c", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 94, "deletions": 80, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -87,44 +87,46 @@ namespace std\n \t_Rep* __r = _Rep::_S_create(__i, __a);\n \ttraits_type::copy(__r->_M_refdata(), __buf, __i);\n \t__r->_M_length = __i;\n-\ttry {\n-\t  // NB: this loop looks precisely this way because\n-\t  // it avoids comparing __beg != __end any more\n-\t  // than strictly necessary; != might be expensive!\n-\t  for (;;)\n-\t    {\n-\t      _CharT* __p = __r->_M_refdata() + __r->_M_length;\n-\t      _CharT* __last = __r->_M_refdata() + __r->_M_capacity;\n-\t      for (;;)\n-\t\t{\n-\t\t  if (__beg == __end)\n-\t\t    {\n-\t\t      __r->_M_length = __p - __r->_M_refdata();\n-\t\t      *__p = _Rep::_S_terminal;       // grrr.\n-\t\t      return __r->_M_refdata();\n-\t\t    }\n-\t\t  if (__p == __last)\n-\t\t    break;\n-\t\t  *__p++ = *__beg; \n-\t\t  ++__beg;\n-\t\t}\n-\t      // Allocate more space.\n-\t      size_type __len = __p - __r->_M_refdata();\n-\t      _Rep* __another = _Rep::_S_create(__len + 1, __a);\n-\t      traits_type::copy(__another->_M_refdata(), \n-\t\t\t\t__r->_M_refdata(), __len);\n-\t      __r->_M_destroy(__a);\n-\t      __r = __another;\n-\t      __r->_M_length = __len;\n-\t    }\n-\t}\n-\tcatch (...) {\n+\ttry \n+\t  {\n+\t    // NB: this loop looks precisely this way because\n+\t    // it avoids comparing __beg != __end any more\n+\t    // than strictly necessary; != might be expensive!\n+\t    for (;;)\n+\t      {\n+\t\t_CharT* __p = __r->_M_refdata() + __r->_M_length;\n+\t\t_CharT* __last = __r->_M_refdata() + __r->_M_capacity;\n+\t\tfor (;;)\n+\t\t  {\n+\t\t    if (__beg == __end)\n+\t\t      {\n+\t\t\t__r->_M_length = __p - __r->_M_refdata();\n+\t\t\t*__p = _Rep::_S_terminal;       // grrr.\n+\t\t\treturn __r->_M_refdata();\n+\t\t      }\n+\t\t    if (__p == __last)\n+\t\t      break;\n+\t\t    *__p++ = *__beg; \n+\t\t    ++__beg;\n+\t\t  }\n+\t\t// Allocate more space.\n+\t\tsize_type __len = __p - __r->_M_refdata();\n+\t\t_Rep* __another = _Rep::_S_create(__len + 1, __a);\n+\t\ttraits_type::copy(__another->_M_refdata(), \n+\t\t\t\t  __r->_M_refdata(), __len);\n+\t\t__r->_M_destroy(__a);\n+\t\t__r = __another;\n+\t\t__r->_M_length = __len;\n+\t      }\n+\t  }\n+\tcatch(...) \n+\t  {\n \t    __r->_M_destroy(__a); \n-\t    throw;\n-\t}\n+\t    __throw_exception_again;\n+\t  }\n \treturn 0;\n       }\n-\n+  \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template <class _InIter>\n       _CharT*\n@@ -139,13 +141,13 @@ namespace std\n \n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, __a);\n-\ttry { \n-\t  _S_copy_chars(__r->_M_refdata(), __beg, __end); \n-\t}\n-\tcatch (...) { \n-\t  __r->_M_destroy(__a); \n-\t  throw; \n-\t}\n+\ttry \n+\t  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }\n+\tcatch(...) \n+\t  { \n+\t    __r->_M_destroy(__a); \n+\t    __throw_exception_again;\n+\t  }\n \t__r->_M_length = __dnew;\n \n \t__r->_M_refdata()[__dnew] = _Rep::_S_terminal;  // grrr.\n@@ -162,14 +164,16 @@ namespace std\n \n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, __a);\n-      try { \n-\tif (__n) \n-\t  traits_type::assign(__r->_M_refdata(), __n, __c); \n-      }\n-      catch (...) { \n-\t__r->_M_destroy(__a); \n-\tthrow; \n-      }\n+      try \n+\t{ \n+\t  if (__n) \n+\t    traits_type::assign(__r->_M_refdata(), __n, __c); \n+\t}\n+      catch(...) \n+\t{ \n+\t  __r->_M_destroy(__a); \n+\t  __throw_exception_again;\n+\t}\n       __r->_M_length = __n;\n       __r->_M_refdata()[__n] = _Rep::_S_terminal;  // grrr\n       return __r->_M_refdata();\n@@ -276,17 +280,19 @@ namespace std\n \t  // Must reallocate.\n \t  allocator_type __a = get_allocator();\n \t  _Rep* __r = _Rep::_S_create(__new_size, __a);\n-\t  try {\n-\t    if (__pos)\n-\t      traits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n-\t    if (__how_much)\n-\t      traits_type::copy(__r->_M_refdata() + __pos + __len2, \n-\t\t\t\t__src, __how_much);\n-\t  }\n-\t  catch (...) { \n-\t    __r->_M_dispose(get_allocator()); \n-\t    throw; \n-\t  }\n+\t  try \n+\t    {\n+\t      if (__pos)\n+\t\ttraits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n+\t      if (__how_much)\n+\t\ttraits_type::copy(__r->_M_refdata() + __pos + __len2, \n+\t\t\t\t  __src, __how_much);\n+\t    }\n+\t  catch(...) \n+\t    { \n+\t      __r->_M_dispose(get_allocator()); \n+\t      __throw_exception_again;\n+\t    }\n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__r->_M_refdata());\n       }\n@@ -307,7 +313,8 @@ namespace std\n     {\n       if (__res > this->capacity() || _M_rep()->_M_is_shared())\n         {\n-\t  __LENGTHERROR(__res > this->max_size());\n+\t  if (__res > this->max_size())\n+\t    __throw_length_error(\"basic_string::reserve\");\n \t  allocator_type __a = get_allocator();\n \t  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());\n \t  _M_rep()->_M_dispose(__a);\n@@ -351,13 +358,14 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _S_create(size_t __capacity, const _Alloc& __alloc)\n     {\n+      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n-      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n-      __LENGTHERROR(__capacity > _S_max_size);\n+      if (__capacity > _S_max_size)\n #else\n-      __LENGTHERROR(__capacity == npos);\n+      if (__capacity == npos)\n #endif\n+\t__throw_length_error(\"basic_string::_S_create\");\n \n       // NB: Need an array of char_type[__capacity], plus a\n       // terminating null char_type() element, plus enough for the\n@@ -381,13 +389,13 @@ namespace std\n       _Rep* __r = _Rep::_S_create(_M_length + __res, __alloc);\n       if (_M_length)\n \t{\n-\t  try { \n-\t    traits_type::copy(__r->_M_refdata(), _M_refdata(), _M_length); \n-\t  }\n-\t  catch (...)  { \n-\t    __r->_M_destroy(__alloc); \n-\t    throw; \n-\t  }\n+\t  try \n+\t    { traits_type::copy(__r->_M_refdata(), _M_refdata(), _M_length); }\n+\t  catch(...)  \n+\t    { \n+\t      __r->_M_destroy(__alloc); \n+\t      __throw_exception_again;\n+\t    }\n \t}\n       __r->_M_length = _M_length;\n       return __r->_M_refdata();\n@@ -410,7 +418,8 @@ namespace std\n     void\n     basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)\n     {\n-      __LENGTHERROR(__n > max_size());\n+      if (__n > max_size())\n+\t__throw_length_error(\"basic_string::resize\");\n       size_type __size = this->size();\n       if (__size < __n)\n \tthis->append(__n - __size, __c);\n@@ -441,7 +450,8 @@ namespace std\n \tsize_type __dmax = this->max_size();\n \tsize_type __dnew = static_cast<size_type>(distance(__k1, __k2));\n \n-\t__LENGTHERROR(__dmax <= __dnew);\n+\tif (__dmax <= __dnew)\n+\t  __throw_length_error(\"basic_string::_M_replace\");\n \tsize_type __off = __i1 - _M_ibegin();\n \t_M_mutate(__off, __dold, __dnew);\n \t// Invalidated __i1, __i2\n@@ -551,7 +561,8 @@ namespace std\n     {\n       size_type __n1 = __i2 - __i1;\n       size_type __off1 = __i1 - _M_ibegin();\n-      __LENGTHERROR(max_size() - (this->size() - __n1) <= __n2);\n+      if (max_size() - (this->size() - __n1) <= __n2)\n+\t__throw_length_error(\"basic_string::replace\");\n       _M_mutate (__off1, __n1, __n2);\n       // Invalidated __i1, __i2\n       if (__n2)\n@@ -564,7 +575,8 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     copy(_CharT* __s, size_type __n, size_type __pos) const\n     {\n-      __OUTOFRANGE(__pos > this->size());\n+      if (__pos > this->size())\n+\t__throw_out_of_range(\"basic_string::copy\");\n       \n       if (__n > this->size() - __pos)\n \t__n = this->size() - __pos;\n@@ -751,7 +763,8 @@ namespace std\n     {\n       size_type __size = this->size();\n       size_type __osize = __str.size();\n-      __OUTOFRANGE(__pos > __size);\n+      if (__pos > __size)\n+\t__throw_out_of_range(\"basic_string::compare\");\n       \n       size_type __rsize= min(__size - __pos, __n);\n       size_type __len = min(__rsize, __osize);\n@@ -769,8 +782,8 @@ namespace std\n     {\n       size_type __size = this->size();\n       size_type __osize = __str.size();\n-      __OUTOFRANGE(__pos1 > __size);\n-      __OUTOFRANGE(__pos2 > __osize);\n+      if (__pos1 > __size || __pos2 > __osize)\n+\t__throw_out_of_range(\"basic_string::compare\");\n       \n       size_type __rsize = min(__size - __pos1, __n1);\n       size_type __rosize = min(__osize - __pos2, __n2);\n@@ -803,7 +816,8 @@ namespace std\n \t    size_type __n2) const\n     {\n       size_type __size = this->size();\n-      __OUTOFRANGE(__pos > __size);\n+      if (__pos > __size)\n+\t__throw_out_of_range(\"basic_string::compare\");\n       \n       size_type __osize = min(traits_type::length(__s), __n2);\n       size_type __rsize = min(__size - __pos, __n1);"}, {"sha": "d47ce42502858e0c28eeb9647b7b6dbaa830ed05", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -36,12 +36,6 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCPP__ 20010102\n \n-// This flag controls the error handling in string, and perhaps other\n-// bits as time goes on: check out bits/basic_string.h for more\n-// info. It also helps alleviate the circular dependency between\n-// string and exception.\n-# define _GLIBCPP_USE_EXCEPTIONS 1 \n-\n // This is necessary until GCC supports separate template\n // compilation.  \n #define _GLIBCPP_NO_TEMPLATE_EXPORT 1"}, {"sha": "5898a21bc90e4d4782f777535c6d94fa50496657", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -49,7 +49,7 @@ namespace std\n \t  catch(...) \n \t    {\n \t      delete _M_file;\n-\t      throw;\n+\t      __throw_exception_again;\n \t    }\n \t}\n     }\n@@ -67,7 +67,7 @@ namespace std\n \t  catch(...) \n \t    {\n \t      delete [] _M_buf;\n-\t      throw;\n+\t      __throw_exception_again;\n \t    }\n \t  \n \t  // Allocate pback buffer.\n@@ -76,7 +76,7 @@ namespace std\n \t  catch(...) \n \t    {\n \t      delete [] _M_pback;\n-\t      throw;\n+\t      __throw_exception_again;\n \t    }\n \t}\n     }"}, {"sha": "a808a16e5acfb20d9387ca2ba6a8f82ad4b9515b", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "renamed", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,6 +1,6 @@\n-// Methods and support infrastructure for exceptions -*- C++ -*-\n+// Function-Based Exception Support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,52 +28,57 @@\n // the GNU General Public License.\n \n //\n-// ISO C++ 14882: 15 Exception handling\n+// ISO C++ 14882: 19.1  Exception classes\n //\n \n-// This file declares functions whose only purpose is to throw an\n-// exception. They help break a circularity between <string> and\n-// <stdexcept>. See src/stdexcept.cc, where these functions are\n-// defined.\n-\n-// XXX: These functions serve a similar purpose to those in\n-// stl/bits/stl_range_errors.h . Eventually the two approaches should\n-// be merged. \n-\n-#ifndef _CPP_EXCEPTION_SUPPORT_H\n-#define _CPP_EXCEPTION_SUPPORT_H\t1\n-\n-namespace std {\n-\n-#if _GLIBCPP_USE_EXCEPTIONS\n-  // Internal functions for string implementation.\n-  extern void __out_of_range(const char *__str);\n-  extern void __length_error(const char *__str);\n-  \n-# define __OUTOFRANGE(__cond) \\\n-  do { if (__cond) __out_of_range(#__cond); } while (0)\n-# define __LENGTHERROR(__cond) \\\n-  do { if (__cond) __length_error(#__cond); } while (0)\n-#else\n-# include <bits/std_cassert.h>\n-# define __OUTOFRANGE(__cond) assert(!(__cond))\n-# define __LENGTHERROR(__cond) assert(!(__cond))\n-#endif\n-\n-} // namespace std\n-\n-#endif\t/* _CPP_EXCEPTION_SUPPORT_H */\n+#include <exception_defines.h>\n \n+namespace std\n+{\n+  // Helper for exception objects in <except> \n+  void\n+  __throw_bad_exception(void);\n \n+  // Helper for exception objects in <new> \n+  void\n+  __throw_bad_alloc(void);\n \n+  // Helper for exception objects in <typeinfo> \n+  void\n+  __throw_bad_cast(void);\n \n+  void\n+  __throw_bad_typeid(void);\n \n+  // Helpers for exception objects in <stdexcept> \n+  void\n+  __throw_logic_error(const char* __s);\n \n+  void\n+  __throw_domain_error(const char* __s);\n \n+  void\n+  __throw_invalid_argument(const char* __s);\n \n+  void\n+  __throw_length_error(const char* __s);\n \n+  void\n+  __throw_out_of_range(const char* __s);\n \n+  void\n+  __throw_runtime_error(const char* __s);\n \n+  void\n+  __throw_range_error(const char* __s);\n \n+  void\n+  __throw_overflow_error(const char* __s);\n \n+  void\n+  __throw_underflow_error(const char* __s);\n \n+  // Helpers for exception objects in basic_ios\n+  void\n+  __throw_ios_failure(const char* __s);\n+} // namespace std", "previous_filename": "libstdc++-v3/include/bits/exception_support.h"}, {"sha": "571af891a733ee1c97e9503911a2c930a3b16c16", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -92,7 +92,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -114,7 +114,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -136,7 +136,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -160,7 +160,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -184,7 +184,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -208,7 +208,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -232,7 +232,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -256,7 +256,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -280,7 +280,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -304,7 +304,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -329,7 +329,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -353,7 +353,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -378,7 +378,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -402,7 +402,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -426,7 +426,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -450,7 +450,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -495,7 +495,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __c;\n@@ -527,7 +527,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -568,7 +568,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       *__s = char_type(NULL);\n@@ -664,7 +664,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       *__s = char_type(NULL);\n@@ -708,7 +708,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -732,7 +732,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t} \n       return __c;\n@@ -776,7 +776,7 @@ namespace std {\n \t\t// Turn this on without causing an ios::failure to be thrown.\n \t\tthis->setstate(ios_base::badbit);\n \t\tif ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t  throw;\n+\t\t  __throw_exception_again;\n \t      }\n \t    }\n \t}\n@@ -813,7 +813,7 @@ namespace std {\n \t\t// Turn this on without causing an ios::failure to be thrown.\n \t\tthis->setstate(ios_base::badbit);\n \t\tif ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t  throw;\n+\t\t  __throw_exception_again;\n \t      }\n \t    }\n \t}\n@@ -841,7 +841,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       else\n@@ -869,7 +869,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       else\n@@ -899,7 +899,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __ret;\n@@ -923,7 +923,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __ret;\n@@ -950,7 +950,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -976,7 +976,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -999,7 +999,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __in.setstate(ios_base::badbit);\n \t    if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       else\n@@ -1059,7 +1059,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __in.setstate(ios_base::badbit);\n \t    if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       if (!__extracted)"}, {"sha": "38c4c0ccf1e9668326807c0df01d5e84b785a65a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -75,7 +75,7 @@ namespace std\n       __vec_facet* __facet = __loc._M_impl->_M_facets;\n       const locale::facet* __fp = (*__facet)[__i]; \n       if (__fp == 0 || __i >= __facet->size())\n-        throw bad_cast();\n+        __throw_bad_cast();\n       return static_cast<const _Facet&>(*__fp);\n     }\n \n@@ -1098,7 +1098,7 @@ namespace std\n       }\n       catch (...) {\n         __io.flags(__fmt);\n-        throw;\n+        __throw_exception_again;\n       }\n     }\n "}, {"sha": "17a2ec23974034351027c468dd180c8670c2ca8e", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -35,10 +35,11 @@\n #define _CPP_BITS_LOCCORE_H\t1\n \n #include <bits/c++config.h>\n+#include <bits/c++locale.h>     // Defines __c_locale.\n #include <bits/std_climits.h>\t// For CHAR_BIT\n #include <bits/std_string.h> \t// For string\n #include <bits/std_cctype.h>\t// For isspace, etc.\n-#include <bits/c++locale.h>     // Defines __c_locale.\n+#include <bits/functexcept.h>\n \n namespace std\n {"}, {"sha": "db6a09ec0f09510199d18de6877730bc61be49aa", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -59,7 +59,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\tthrow;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -81,7 +81,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\tthrow;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -103,7 +103,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\tthrow;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -125,7 +125,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -155,7 +155,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -177,7 +177,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -206,7 +206,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -228,7 +228,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -251,7 +251,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -273,7 +273,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -295,7 +295,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    this->setstate(ios_base::badbit);\n \t    if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return *this;\n@@ -512,7 +512,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __out.setstate(ios_base::badbit);\n \t    if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __out;\n@@ -545,7 +545,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __out.setstate(ios_base::badbit);\n \t    if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __out;\n@@ -577,7 +577,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __out.setstate(ios_base::badbit);\n \t    if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __out;\n@@ -620,7 +620,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __out.setstate(ios_base::badbit);\n \t    if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __out;\n@@ -653,7 +653,7 @@ namespace std {\n \t    // Turn this on without causing an ios::failure to be thrown.\n \t    __out.setstate(ios_base::badbit);\n \t    if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t      throw;\n+\t      __throw_exception_again;\n \t  }\n \t}\n       return __out;"}, {"sha": "9276294f9b719d8bb38bb8f41c797cadcf500bf2", "filename": "libstdc++-v3/include/bits/std_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -27,7 +27,7 @@\n #ifndef _CPP_DEQUE\n #define _CPP_DEQUE 1\n \n-#include <bits/stl_range_errors.h>\n+#include <bits/functexcept.h>\n #include <bits/stl_algobase.h>\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>"}, {"sha": "dc28c863606cd9dffdaae143d692fc6825145871", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,6 +1,6 @@\n // Forwarding declarations -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,7 @@\n #include <bits/c++config.h>\n #include <bits/std_cwchar.h> // For mbstate_t\n #include <bits/stringfwd.h> // For string forward declarations.\n+#include <bits/functexcept.h>\n \n namespace std \n {"}, {"sha": "e3613c383d175d8f2b71ca1a3a8e3b61a67c765c", "filename": "libstdc++-v3/include/bits/std_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -27,7 +27,7 @@\n #ifndef _CPP_VECTOR\n #define _CPP_VECTOR 1\n \n-#include <bits/stl_range_errors.h>\n+#include <bits/functexcept.h>\n #include <bits/stl_algobase.h>\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>"}, {"sha": "6fe8f3046bf87c407256e19f6c694cbeeb664155", "filename": "libstdc++-v3/include/bits/stl_config.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -265,7 +265,9 @@\n #   define __SGI_STL_USE_AUTO_PTR_CONVERSIONS\n #   define __STL_HAS_NAMESPACES\n #   define __STL_USE_NAMESPACES\n-#   define __STL_USE_EXCEPTIONS\n+#   ifdef __EXCEPTIONS\n+#     define __STL_USE_EXCEPTIONS\n+#   endif\n #   define __STL_THROW_RANGE_ERRORS \n #   define __STL_CAN_THROW_RANGE_ERRORS \n #   define __STL_USE_STD_ALLOCATORS "}, {"sha": "aea97ec7711ba3e1eba156e27890829af2ed00cf", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -499,7 +499,7 @@ class deque : protected _Deque_base<_Tp, _Alloc> {\n #ifdef __STL_THROW_RANGE_ERRORS\n   void _M_range_check(size_type __n) const {\n     if (__n >= this->size())\n-      __stl_throw_range_error(\"deque\");\n+      __throw_range_error(\"deque\");\n   }\n \n   reference at(size_type __n)"}, {"sha": "c5ddfe63cbb8f5d9ea4bcaa3c5a855c900757180", "filename": "libstdc++-v3/include/bits/stl_range_errors.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777c9517422d911f184ccde6edd59c317ce5edd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_range_errors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777c9517422d911f184ccde6edd59c317ce5edd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_range_errors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_range_errors.h?ref=777c9517422d911f184ccde6edd59c317ce5edd8", "patch": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright (c) 1999\n- * Silicon Graphics\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- */\n-\n-#ifndef __STL_RANGE_ERRORS_H\n-#define __STL_RANGE_ERRORS_H\n-\n-// A few places in the STL throw range errors, using standard exception\n-// classes defined in <stdexcept>.  This header file provides functions\n-// to throw those exception objects.\n-\n-// __STL_DONT_THROW_RANGE_ERRORS is a hook so that users can disable\n-// this exception throwing.\n-\n-#include <bits/stl_config.h>\n-\n-#if defined(__STL_CAN_THROW_RANGE_ERRORS) && \\\n-    defined(__STL_USE_EXCEPTIONS) && \\\n-    !defined(__STL_DONT_THROW_RANGE_ERRORS)\n-# define __STL_THROW_RANGE_ERRORS\n-#endif\n-\n-// For the SGI 7.3 compiler, declare these functions here and define them\n-// elsewhere.\n-#if defined(__STL_THROW_RANGE_ERRORS) && \\\n-    defined(__sgi) && !defined(__GNUC__) && \\\n-    _COMPILER_VERSION >= 730 && defined(_STANDARD_C_PLUS_PLUS) \\\n-   || defined(__GNUC__) && defined(__STL_THROW_RANGE_ERRORS)\n-\n-__STL_BEGIN_NAMESPACE\n-void __stl_throw_range_error(const char* __msg);\n-void __stl_throw_length_error(const char* __msg);\n-__STL_END_NAMESPACE\n-\n-// For other compilers where we're throwing range errors, include the\n-// stdexcept header and throw the appropriate exceptions directly.\n-#elif defined(__STL_THROW_RANGE_ERRORS) \n-\n-#include <bits/std_stdexcept.h>\n-\n-__STL_BEGIN_NAMESPACE\n-inline void __stl_throw_range_error(const char* __msg) \n-  { throw range_error(__msg); }\n-inline void __stl_throw_length_error(const char* __msg)\n-  { throw length_error(__msg); }\n-__STL_END_NAMESPACE\n-\n-// Otherwise, define inline functions that do nothing.\n-#else \n-\n-__STL_BEGIN_NAMESPACE\n-inline void __stl_throw_range_error(const char*) {}\n-inline void __stl_throw_length_error(const char*) {}\n-__STL_END_NAMESPACE\n-\n-#endif\n-\n-#endif /* __STL_RANGE_ERRORS_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-\n-"}, {"sha": "0c2997579e319711896a39a720d8b8a9b72c25aa", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_VECTOR_H\n #define __SGI_STL_INTERNAL_VECTOR_H\n \n-#include <bits/exception_support.h>\n+#include <bits/functexcept.h>\n \n #include <bits/concept_checks.h>\n \n@@ -231,7 +231,7 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n #ifdef __STL_THROW_RANGE_ERRORS\n   void _M_range_check(size_type __n) const {\n     if (__n >= this->size())\n-      __out_of_range(\"vector\");\n+      __throw_out_of_range(\"vector\");\n   }\n \n   reference at(size_type __n)"}, {"sha": "a4dfaab91bb8fc553a658b851b046f542a597c1d", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -215,7 +215,7 @@ namespace std {\n       }\n       catch(exception& __fail) {\n \tif ((__ios.exceptions() & ios_base::failbit) != 0)\n-\t  throw;\n+\t  __throw_exception_again;\n       }\n       return __ret;\n     }"}, {"sha": "32a06d21be1cbbd9f34211ae9895a7fc8a40e2bc", "filename": "libstdc++-v3/include/ext/bvector", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbvector?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -27,14 +27,8 @@\n #ifndef __SGI_STL_BVECTOR_H\n #define __SGI_STL_BVECTOR_H\n \n-#include <bits/stl_range_errors.h>\n-#ifdef __STL_CLASS_PARTIAL_SPECIALIZATION\n-#include <bits/std_vector.h>\n-#else\n-#include <bits/std_algobase.h>\n-#include <bits/atl_alloc.h>\n-#endif \n \n+#include <bits/std_vector.h>\n #include <ext/stl_bvector.h>\n \n #ifdef __STL_USE_NAMESPACES"}, {"sha": "90787012898c8e529813f05666f440351865170d", "filename": "libstdc++-v3/include/ext/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_bvector.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -522,7 +522,7 @@ class __BVECTOR : public __BVECTOR_BASE\n #ifdef __STL_THROW_RANGE_ERRORS\n   void _M_range_check(size_type __n) const {\n     if (__n >= this->size())\n-      __stl_throw_range_error(\"vector<bool>\");\n+      __throw_range_error(\"vector<bool>\");\n   }\n \n   reference at(size_type __n)"}, {"sha": "60745660fd617582c1396087116b841826a35d20", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -68,7 +68,7 @@ INCLUDES = \\\n \t $(LIBSUPCXX_INCLUDES)\n \n headers = \\\n-\tcxxabi.h exception new typeinfo\n+\texception new typeinfo cxxabi.h exception_defines.h \n \n sources = \\\n \tdel_op.cc \\"}, {"sha": "54e78103bd5f6f10eed01cd9f1012b42f382ecbb", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -150,7 +150,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n \n \n-headers =  \tcxxabi.h exception new typeinfo\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n \n \n sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc"}, {"sha": "28ab2f73285a95b24a94e8c826211fcf1ea04124", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,8 +1,7 @@\n-/* new abi support -*- C++ -*-\n-   Copyright (C) 2000\n-   Free Software Foundation, Inc.\n-   Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>  */\n-\n+// new abi support -*- C++ -*-\n+  \n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n // This file is part of GNU CC.\n //\n // GNU CC is free software; you can redistribute it and/or modify\n@@ -29,6 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+// Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n+ \n /* This file declares the new abi entry points into the runtime. It is not\n    normally necessary for user programs to include this header, or use the\n    entry points directly. However, this header is available should that be"}, {"sha": "f43302496d53d8affa10ebb2ae9d83c602f9291b", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "032ea680cb3c4ab034686cf9e9d744cda3a0e542", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "47d78428dfd19e47515684fcf4555fdca2f50703", "filename": "libstdc++-v3/libsupc++/del_opv.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "3504d99a0b338506a3fb6a78995b2c6ab1904759", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "fac73fb05662414d2efe18a59c983ac6919f93b1", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,7 +1,7 @@\n // Exception Handling support header for -*- C++ -*-\n \n // Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n-\n+//\n // This file is part of GNU CC.\n //\n // GNU CC is free software; you can redistribute it and/or modify"}, {"sha": "fca2d835f4102e5a1e1a176d3658045978dfd06e", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -0,0 +1,42 @@\n+// -fno-exceptions Support -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 19.1  Exception classes\n+//\n+\n+#ifndef __EXCEPTIONS\n+// Iff -fno-exceptions, transform error handling code to work without it.\n+# define try      if (true)\n+# define catch(X) if (false)\n+# define __throw_exception_again\n+#else\n+// Else proceed normally.\n+# define __throw_exception_again throw\n+#endif"}, {"sha": "d84ee6821da1ecd9e2c498630ac81c6829688262", "filename": "libstdc++-v3/libsupc++/exception_support.cc", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,10 +1,10 @@\n // Functions for Exception Support for -*- C++ -*-\n \n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-// 2001 Free Software Foundation\n-\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 \n+// Free Software Foundation\n+//\n // This file is part of GNU CC.\n-\n+//\n // GNU CC is free software; you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 2, or (at your option)\n@@ -35,6 +35,7 @@\n #include \"exception\"\n #include <cstddef>\n #include \"exception_support.h\"\n+#include \"exception_defines.h\"\n \n /* Define terminate, unexpected, set_terminate, set_unexpected as\n    well as the default terminate func and default unexpected func.  */\n@@ -83,18 +84,18 @@ std::unexpected ()\n }\n \n /* Language-specific EH info pointer, defined in libgcc2. */\n-\n extern \"C\" cp_eh_info **__get_eh_info (); \t// actually void **\n+#define CP_EH_INFO ((cp_eh_info *) *__get_eh_info ())\n \n /* Exception allocate and free, defined in libgcc2. */\n extern \"C\" void *__eh_alloc(std::size_t);\n extern \"C\" void __eh_free(void *);\n \n /* Is P the type_info node for a pointer of some kind?  */\n-\n extern bool __is_pointer (void *);\n \n \n+#ifdef __EXCEPTIONS\n /* OLD Compiler hook to return a pointer to the info for the current exception.\n    Used by get_eh_info ().  This fudges the actualy returned value to\n    point to the beginning of what USE to be the cp_eh_info structure.\n@@ -106,8 +107,6 @@ __cp_exception_info (void)\n   return &((*__get_eh_info ())->value);\n }\n \n-#define CP_EH_INFO ((cp_eh_info *) *__get_eh_info ())\n-\n /* Old Compiler hook to return a pointer to the info for the current exception.\n    Used by get_eh_info ().  */\n \n@@ -348,44 +347,40 @@ __check_null_eh_spec (void)\n {\n   __check_eh_spec (0, 0);\n }\n+#endif //__EXCEPTIONS\n \n // Helpers for rtti. Although these don't return, we give them return types so\n // that the type system is not broken.\n-\n-#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n-#define THROW_BAD_CAST __throw_bad_cast\n-#define THROW_BAD_TYPEID __throw_bad_typeid\n-#else \n-#define THROW_BAD_CAST __cxa_bad_cast\n-#define THROW_BAD_TYPEID __cxa_bad_typeid\n-#endif\n-\n extern \"C\" void *\n-THROW_BAD_CAST ()\n+__cxa_bad_cast()\n {\n-  throw std::bad_cast ();\n+#ifdef __EXCEPTIONS  \n+  throw std::bad_cast();\n+#else\n+  std::abort();\n+#endif\n   return 0;\n }\n \n extern \"C\" std::type_info const &\n-THROW_BAD_TYPEID ()\n+__cxa_bad_typeid()\n {\n-  throw std::bad_typeid ();\n+#ifdef __EXCEPTIONS  \n+  throw std::bad_typeid();\n+#else\n+  std::abort();\n+#endif\n   return typeid (void);\n }\n \n /* Has the current exception been caught?  */\n-\n bool\n-std::uncaught_exception () throw()\n+std::uncaught_exception() throw()\n {\n   cp_eh_info *p = CP_EH_INFO;\n   return p && ! p->caught;\n }\n \n-const char * \n-std::exception::\n-what () const throw()\n-{\n-  return typeid (*this).name ();\n-}\n+const char* \n+std::exception::what() const throw()\n+{ return typeid (*this).name (); }"}, {"sha": "cc781192ddba19584ce8eb2bf6d9dec5f6052a0d", "filename": "libstdc++-v3/libsupc++/exception_support.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,5 +1,4 @@\n-// Copyright (C) 2000\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n // \n // GNU CC is free software; you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by"}, {"sha": "a6cf2a2a3fbc3b32b5e1cd3dd4ee98ef10bc1bc8", "filename": "libstdc++-v3/libsupc++/new_handler.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Implementation file for the -*- C++ -*- dynamic memory management header.\n+\n // Copyright (C) 1996, 1997, 1998, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "6b52df7f5ad3a4d4fae19404d18e4ce4969a8951", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,5 +1,5 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -28,6 +28,8 @@\n // the GNU General Public License.\n \n #include \"new\"\n+#include <exception_defines.h>\n+\n using std::new_handler;\n using std::bad_alloc;\n \n@@ -47,7 +49,11 @@ operator new (std::size_t sz) throw (std::bad_alloc)\n     {\n       new_handler handler = __new_handler;\n       if (! handler)\n-\tthrow bad_alloc ();\n+#ifdef __EXCEPTIONS\n+\tthrow bad_alloc();\n+#else\n+        std::abort();\n+#endif\n       handler ();\n       p = (void *) malloc (sz);\n     }"}, {"sha": "e97ac986ab0c2cc2f0d7f48abd99cc1a84d4679c", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,5 +1,5 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -28,6 +28,8 @@\n // the GNU General Public License.\n \n #include \"new\"\n+#include <exception_defines.h>\n+\n using std::new_handler;\n using std::bad_alloc;\n "}, {"sha": "7b1b1ca768e6c8768c7c69e99ee9e8eb3b9d7641", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "ad5fbf48b922677d0f792663c94e82ee3f8a9d47", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n // Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "4e6d0fb558c186659dece007aed7e0854418fa84", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // -*- C++ -*- \n+\n // Copyright (C) 2000 Free Software Foundation\n //\n // This file is part of GNU CC."}, {"sha": "dbb164b2380a62bfe9fbd8a3ad4832e3aac61520", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,8 +1,9 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n-// Copyright (C) 1994, 1996, 1998, 1999, 2000 Free Software Foundation\n \n+// Copyright (C) 1994, 1996, 1998, 1999, 2000 Free Software Foundation\n+//\n // This file is part of GNU CC.\n-\n+//\n // GNU CC is free software; you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 2, or (at your option)"}, {"sha": "e5395836179f77c5bed8667eb53c45932b7b895e", "filename": "libstdc++-v3/libsupc++/tinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,4 +1,5 @@\n // RTTI support internals for -*- C++ -*-\n+\n // Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000 Free Software Foundation\n \n #include \"typeinfo\""}, {"sha": "1f33b438c40bc41e2483d8f76cc0a7f941efa1fd", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,8 +1,10 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n-// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n \n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001 \n+// Free Software Foundation\n+//\n // This file is part of GNU CC.\n-\n+//\n // GNU CC is free software; you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 2, or (at your option)"}, {"sha": "436d220c7a4bc1a0d5a93d50228d480f7c596ee0", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,6 +1,7 @@\n // RTTI support for -*- C++ -*-\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000 Free Software Foundation\n \n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000 Free Software Foundation\n+//\n // This file is part of GNU CC.\n //\n // GNU CC is free software; you can redistribute it and/or modify"}, {"sha": "ac636f19870843d87b2ecd8442e40d542ca7b916", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 240, "deletions": 242, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -1,8 +1,9 @@\n-// new abi support -*- C++ -*-\n-// Copyright (C) 2000\n-// Free Software Foundation, Inc.\n-// Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n-// \n+// New abi Support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//  \n+// This file is part of GNU CC.\n+//\n // GNU CC is free software; you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 2, or (at your option)\n@@ -27,276 +28,273 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+// Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n+\n #include <cxxabi.h>\n #include <new>\n #include <exception>\n+#include <exception_defines.h>\n \n #include \"exception_support.h\"\n \n namespace __cxxabiv1\n {\n+  namespace \n+  {\n+    struct uncatch_exception \n+    {\n+      uncatch_exception () { p = __uncatch_exception (); }\n+      ~uncatch_exception () { __recatch_exception (p); }\n+      \n+      cp_eh_info *p;\n+    };\n+  }\n \n-namespace \n-{\n-struct uncatch_exception {\n-  uncatch_exception () { p = __uncatch_exception (); }\n-  ~uncatch_exception () { __recatch_exception (p); }\n-\n-  cp_eh_info *p;\n-};\n-}\n-\n-/* allocate and construct array */\n-extern \"C\" void *\n-__cxa_vec_new (std::size_t element_count,\n-               std::size_t element_size,\n-               std::size_t padding_size,\n-               void (*constructor) (void *),\n-               void (*destructor) (void *))\n-{\n-  return __cxa_vec_new2 (element_count, element_size, padding_size,\n-                         constructor, destructor,\n-                         &operator new[], &operator delete []);\n-}\n+  // Allocate and construct array.\n+  extern \"C\" void *\n+  __cxa_vec_new(std::size_t element_count,\n+\t\tstd::size_t element_size,\n+\t\tstd::size_t padding_size,\n+\t\tvoid (*constructor) (void *),\n+\t\tvoid (*destructor) (void *))\n+  {\n+    return __cxa_vec_new2(element_count, element_size, padding_size,\n+\t\t\t   constructor, destructor,\n+\t\t\t   &operator new[], &operator delete []);\n+  }\n \n-extern \"C\" void *\n-__cxa_vec_new2 (std::size_t element_count,\n-                std::size_t element_size,\n-                std::size_t padding_size,\n-                void (*constructor) (void *),\n-                void (*destructor) (void *),\n-                void *(*alloc) (size_t),\n-                void (*dealloc) (void *))\n-{\n-  std::size_t size = element_count * element_size + padding_size;\n-  char *base = static_cast <char *> (alloc (size));\n+  extern \"C\" void *\n+  __cxa_vec_new2(std::size_t element_count,\n+\t\t std::size_t element_size,\n+\t\t std::size_t padding_size,\n+\t\t void (*constructor) (void *),\n+\t\t void (*destructor) (void *),\n+\t\t void *(*alloc) (size_t),\n+\t\t void (*dealloc) (void *))\n+  {\n+    std::size_t size = element_count * element_size + padding_size;\n+    char *base = static_cast <char *> (alloc (size));\n+    \n+    if (padding_size)\n+      {\n+\tbase += padding_size;\n+\treinterpret_cast <std::size_t *> (base)[-1] = element_count;\n+      }\n+    try\n+      {\n+\t__cxa_vec_ctor(base, element_count, element_size,\n+\t\t       constructor, destructor);\n+      }\n+    catch (...)\n+      {\n+\t{\n+\t  uncatch_exception ue;\n+\t  dealloc(base - padding_size);\n+\t}\n+\t__throw_exception_again;\n+      }\n+    return base;\n+  }\n   \n-  if (padding_size)\n-    {\n-      base += padding_size;\n-      reinterpret_cast <std::size_t *> (base)[-1] = element_count;\n-    }\n-  try\n-    {\n-      __cxa_vec_ctor (base, element_count, element_size,\n-                      constructor, destructor);\n-    }\n-  catch (...)\n-    {\n+  extern \"C\" void *\n+  __cxa_vec_new3(std::size_t element_count,\n+\t\t std::size_t element_size,\n+\t\t std::size_t padding_size,\n+\t\t void (*constructor) (void *),\n+\t\t void (*destructor) (void *),\n+\t\t void *(*alloc) (std::size_t),\n+\t\t void (*dealloc) (void *, std::size_t))\n+  {\n+    std::size_t size = element_count * element_size + padding_size;\n+    char *base = static_cast<char *>(alloc (size));\n+    \n+    if (padding_size)\n       {\n-\tuncatch_exception ue;\n-\tdealloc (base - padding_size);\n+\tbase += padding_size;\n+\treinterpret_cast<std::size_t *>(base)[-1] = element_count;\n       }\n-      throw;\n-    }\n-  return base;\n-}\n-\n-extern \"C\" void *\n-__cxa_vec_new3 (std::size_t element_count,\n-                std::size_t element_size,\n-                std::size_t padding_size,\n-                void (*constructor) (void *),\n-                void (*destructor) (void *),\n-                void *(*alloc) (std::size_t),\n-                void (*dealloc) (void *, std::size_t))\n-{\n-  std::size_t size = element_count * element_size + padding_size;\n-  char *base = static_cast <char *> (alloc (size));\n+    try\n+      {\n+\t__cxa_vec_ctor(base, element_count, element_size,\n+\t\t       constructor, destructor);\n+      }\n+    catch (...)\n+      {\n+\t{\n+\t  uncatch_exception ue;\n+\t  dealloc(base - padding_size, size);\n+\t}\n+\t__throw_exception_again;\n+      }\n+    return base;\n+  }\n   \n-  if (padding_size)\n-    {\n-      base += padding_size;\n-      reinterpret_cast <std::size_t *> (base)[-1] = element_count;\n-    }\n-  try\n-    {\n-      __cxa_vec_ctor (base, element_count, element_size,\n-                      constructor, destructor);\n-    }\n-  catch (...)\n-    {\n+  // Construct array.\n+  extern \"C\" void\n+  __cxa_vec_ctor(void *array_address,\n+\t\t std::size_t element_count,\n+\t\t std::size_t element_size,\n+\t\t void (*constructor) (void *),\n+\t\t void (*destructor) (void *))\n+  {\n+    std::size_t ix = 0;\n+    char *ptr = static_cast<char *>(array_address);\n+    \n+    try\n       {\n-\tuncatch_exception ue;\n-\tdealloc (base - padding_size, size);\n+\tif (constructor)\n+\t  for (; ix != element_count; ix++, ptr += element_size)\n+\t    constructor(ptr);\n       }\n-      throw;\n-    }\n-  return base;\n-}\n-\n-/* construct array */\n-extern \"C\" void\n-__cxa_vec_ctor (void *array_address,\n-                std::size_t element_count,\n-                std::size_t element_size,\n-                void (*constructor) (void *),\n-                void (*destructor) (void *))\n-{\n-  std::size_t ix = 0;\n-  char *ptr = static_cast <char *> (array_address);\n+    catch (...)\n+      {\n+\t{\n+\t  uncatch_exception ue;\n+\t  __cxa_vec_dtor(array_address, ix, element_size, destructor);\n+\t}\n+\t__throw_exception_again;\n+      }\n+  }\n   \n-  try\n-    {\n-      if (constructor)\n-        for (; ix != element_count; ix++, ptr += element_size)\n-          constructor (ptr);\n-    }\n-  catch (...)\n-    {\n+  // Construct an array by copying.\n+  extern \"C\" void\n+  __cxa_vec_cctor(void *dest_array,\n+\t\t  void *src_array,\n+\t\t  std::size_t element_count,\n+\t\t  std::size_t element_size,\n+\t\t  void (*constructor) (void *, void *),\n+\t\t  void (*destructor) (void *))\n+  {\n+    std::size_t ix = 0;\n+    char *dest_ptr = static_cast<char *>(dest_array);\n+    char *src_ptr = static_cast<char *>(src_array);\n+    \n+    try\n       {\n-\tuncatch_exception ue;\n-\t__cxa_vec_dtor (array_address, ix, element_size, destructor);\n+\tif (constructor)\n+\t  for (; ix != element_count; \n+\t       ix++, src_ptr += element_size, dest_ptr += element_size)\n+\t    constructor(dest_ptr, src_ptr);\n       }\n-      throw;\n-    }\n-}\n-\n-/* construct an array by copying */\n-\n-extern \"C\" void\n-__cxa_vec_cctor (void *dest_array,\n-\t\t void *src_array,\n+    catch (...)\n+      {\n+\t{\n+\t  uncatch_exception ue;\n+\t  __cxa_vec_dtor (dest_array, ix, element_size, destructor);\n+\t}\n+\t__throw_exception_again;\n+      }\n+  }\n+  \n+  // Destruct array.\n+  extern \"C\" void\n+  __cxa_vec_dtor(void *array_address,\n \t\t std::size_t element_count,\n \t\t std::size_t element_size,\n-\t\t void (*constructor) (void *, void *),\n \t\t void (*destructor) (void *))\n-{\n-  std::size_t ix = 0;\n-  char *dest_ptr = static_cast <char *> (dest_array);\n-  char *src_ptr = static_cast <char *> (src_array);\n-\n-  try\n-    {\n-      if (constructor)\n-\tfor (; ix != element_count; \n-\t     ix++, src_ptr += element_size, dest_ptr += element_size)\n-\t  constructor (dest_ptr, src_ptr);\n-    }\n-  catch (...)\n-    {\n+  {\n+    if (destructor)\n       {\n-\tuncatch_exception ue;\n-\t__cxa_vec_dtor (dest_array, ix, element_size, destructor);\n-      }\n-      throw;\n-    }\n-}\n-\n-/* destruct array */\n-extern \"C\" void\n-__cxa_vec_dtor (void *array_address,\n-                std::size_t element_count,\n-                std::size_t element_size,\n-                void (*destructor) (void *))\n-{\n-  if (destructor)\n-    {\n-      char *ptr = static_cast <char *> (array_address);\n-      std::size_t ix = element_count;\n-      bool unwinding = std::uncaught_exception ();\n+\tchar *ptr = static_cast<char *>(array_address);\n+\tstd::size_t ix = element_count;\n+\tbool unwinding = std::uncaught_exception();\n       \n-      ptr += element_count * element_size;\n+\tptr += element_count * element_size;\n       \n-      try\n-        {\n-          while (ix--)\n-            {\n-              ptr -= element_size;\n-              destructor (ptr);\n-            }\n-        }\n-      catch (...)\n-        {\n-          if (unwinding)\n-            // [except.ctor]/3 If a destructor called during stack unwinding\n-            // exits with an exception, terminate is called.\n-            std::terminate ();\n+\ttry\n+\t  {\n+\t    while (ix--)\n+\t      {\n+\t\tptr -= element_size;\n+\t\tdestructor(ptr);\n+\t      }\n+\t  }\n+\tcatch (...)\n \t  {\n-\t    uncatch_exception ue;\n-\t    __cxa_vec_dtor (array_address, ix, element_size,\n-\t\t\t    destructor);\n+\t    if (unwinding)\n+\t      // [except.ctor]/3 If a destructor called during stack unwinding\n+\t      // exits with an exception, terminate is called.\n+\t      std::terminate ();\n+\t    {\n+\t      uncatch_exception ue;\n+\t      __cxa_vec_dtor(array_address, ix, element_size, destructor);\n+\t    }\n+\t    __throw_exception_again;\n \t  }\n-          throw;\n-        }\n-    }\n-}\n+      }\n+  }\n \n-/* destruct and release array */\n-extern \"C\" void\n-__cxa_vec_delete (void *array_address,\n-                  std::size_t element_size,\n-                  std::size_t padding_size,\n-                  void (*destructor) (void *))\n-{\n-  __cxa_vec_delete2 (array_address, element_size, padding_size,\n-                     destructor,\n-                     &operator delete []);\n-}\n+  // Destruct and release array.\n+  extern \"C\" void\n+  __cxa_vec_delete(void *array_address,\n+\t\t   std::size_t element_size,\n+\t\t   std::size_t padding_size,\n+\t\t   void (*destructor) (void *))\n+  {\n+    __cxa_vec_delete2(array_address, element_size, padding_size,\n+\t\t       destructor,\n+\t\t       &operator delete []);\n+  }\n \n-extern \"C\" void\n-__cxa_vec_delete2 (void *array_address,\n-                  std::size_t element_size,\n-                  std::size_t padding_size,\n-                  void (*destructor) (void *),\n-                  void (*dealloc) (void *))\n-{\n-  char *base = static_cast <char *> (array_address);\n+  extern \"C\" void\n+  __cxa_vec_delete2(void *array_address,\n+\t\t    std::size_t element_size,\n+\t\t    std::size_t padding_size,\n+\t\t    void (*destructor) (void *),\n+\t\t    void (*dealloc) (void *))\n+  {\n+    char *base = static_cast<char *>(array_address);\n   \n-  if (padding_size)\n-    {\n-      std::size_t element_count = reinterpret_cast <std::size_t *> (base)[-1];\n-      base -= padding_size;\n-      try\n-        {\n-          __cxa_vec_dtor (array_address, element_count, element_size,\n-                          destructor);\n-        }\n-      catch (...)\n-        {\n+    if (padding_size)\n+      {\n+\tstd::size_t element_count = reinterpret_cast<std::size_t *>(base)[-1];\n+\tbase -= padding_size;\n+\ttry\n \t  {\n-\t    uncatch_exception ue;\n-\t    dealloc (base);\n+\t    __cxa_vec_dtor(array_address, element_count, element_size,\n+\t\t\t   destructor);\n \t  }\n-          throw;\n-        }\n-    }\n-  dealloc (base);\n-}\n-\n-extern \"C\" void\n-__cxa_vec_delete3 (void *array_address,\n-                  std::size_t element_size,\n-                  std::size_t padding_size,\n-                  void (*destructor) (void *),\n-                  void (*dealloc) (void *, std::size_t))\n-{\n-  char *base = static_cast <char *> (array_address);\n-  std::size_t size = 0;\n-  \n-  if (padding_size)\n-    {\n-      std::size_t element_count = reinterpret_cast <std::size_t *> (base)[-1];\n-      base -= padding_size;\n-      size = element_count * element_size + padding_size;\n-      try\n-        {\n-          __cxa_vec_dtor (array_address, element_count, element_size,\n-                          destructor);\n-        }\n-      catch (...)\n-        {\n+\tcatch (...)\n \t  {\n-\t    uncatch_exception ue;\n-\t    dealloc (base, size);\n+\t    {\n+\t      uncatch_exception ue;\n+\t      dealloc(base);\n+\t    }\n+\t    __throw_exception_again;\n \t  }\n-          throw;\n-        }\n-    }\n-  dealloc (base, size);\n-}\n+      }\n+    dealloc(base);\n+  }\n \n+  extern \"C\" void\n+  __cxa_vec_delete3(void *array_address,\n+\t\t    std::size_t element_size,\n+\t\t    std::size_t padding_size,\n+\t\t     void (*destructor) (void *),\n+\t\t    void (*dealloc) (void *, std::size_t))\n+  {\n+    char *base = static_cast <char *> (array_address);\n+    std::size_t size = 0;\n+    \n+    if (padding_size)\n+      {\n+\tstd::size_t element_count = reinterpret_cast<std::size_t *> (base)[-1];\n+\tbase -= padding_size;\n+\tsize = element_count * element_size + padding_size;\n+\ttry\n+\t  {\n+\t    __cxa_vec_dtor(array_address, element_count, element_size,\n+\t\t\t   destructor);\n+\t  }\n+\tcatch (...)\n+\t  {\n+\t    {\n+\t      uncatch_exception ue;\n+\t      dealloc(base, size);\n+\t    }\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+    dealloc(base, size);\n+  }\n } // namespace __cxxabiv1\n-\n-#endif // defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100"}, {"sha": "a5cfa38c6d5abcaea0e8dfb07d5739fc7fb29741", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.70 2001/02/07 01:54:21 bkoz Exp $\n+## $Id: Makefile.am,v 1.71 2001/02/07 20:26:24 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -73,7 +73,6 @@ base_headers = \\\n \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/exception_support.h \\\n \tbits/std_fstream.h bits/std_iomanip.h \\\n \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n@@ -88,7 +87,7 @@ base_headers = \\\n \tbits/std_iterator.h bits/std_list.h \\\n \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n \tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/std_vector.h \\\n+\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n \tbits/stl_deque.h bits/stl_function.h \\\n \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n@@ -97,7 +96,7 @@ base_headers = \\\n \tbits/stl_relops.h bits/stl_set.h \\\n \tbits/stl_stack.h bits/stl_tempbuf.h \\\n \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n+\tbits/type_traits.h bits/std_algorithm.h \\\n \tbits/concept_checks.h bits/container_concepts.h \\\n \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n \n@@ -166,10 +165,9 @@ build_headers = \\\n \n sources = \\\n \tlimitsMEMBERS.cc \\\n-\tcomplex_io.cc \\\n-\tstdexcept.cc bitset.cc \\\n+\tstdexcept.cc functexcept.cc bitset.cc \\\n         globals.cc \\\n-\tc++io.cc ios.cc strstream.cc \\\n+\tc++io.cc ios.cc complex_io.cc strstream.cc \\\n \tc++locale.cc locale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n "}, {"sha": "7c6ccbe5f7f35c1a762c4d7561ab686321e1c321", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -144,7 +144,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n \n \n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n \n \n backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n@@ -166,7 +166,7 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc         globals.cc \tc++io.cc ios.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc         globals.cc \tc++io.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n@@ -251,10 +251,10 @@ libinst_string_la_OBJECTS =  libinst-string.la.lo\n libinst_wstring_la_LDFLAGS = \n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n-libstdc___la_OBJECTS =  limitsMEMBERS.lo complex_io.lo stdexcept.lo \\\n-bitset.lo globals.lo c++io.lo ios.lo strstream.lo c++locale.lo \\\n-locale.lo localename.lo codecvt.lo locale-inst.lo stl-inst.lo \\\n-misc-inst.lo valarray-inst.lo string-inst.lo\n+libstdc___la_OBJECTS =  limitsMEMBERS.lo stdexcept.lo functexcept.lo \\\n+bitset.lo globals.lo c++io.lo ios.lo complex_io.lo strstream.lo \\\n+c++locale.lo locale.lo localename.lo codecvt.lo locale-inst.lo \\\n+stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "aae347c27553768106a218e8f84fd4366ca024f6", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -90,63 +90,61 @@ namespace std\n \n   template\n     basic_istream<char, char_traits<char> >&\n-    operator>>(basic_istream< char, char_traits<char> >&,\n-               complex<float>&);\n+    operator>>(basic_istream<char, char_traits<char> >&, complex<float>&);\n \n   template\n     basic_ostream<char, char_traits<char> >&\n-    operator<<(basic_ostream< char, char_traits<char> >&,\n-               const complex<float>&);\n+    operator<<(basic_ostream<char, char_traits<char> >&, \n+\t       const complex<float>&);\n \n   template\n     basic_istream<char, char_traits<char> >&\n-    operator>>(basic_istream< char, char_traits<char> >&,\n-               complex<double>&);\n+    operator>>(basic_istream<char, char_traits<char> >&, complex<double>&);\n \n   template\n     basic_ostream<char, char_traits<char> >&\n-    operator<<(basic_ostream< char, char_traits<char> >&,\n-               const complex<double>&);\n+    operator<<(basic_ostream<char, char_traits<char> >&, \n+\t       const complex<double>&);\n \n   template\n     basic_istream<char, char_traits<char> >&\n-    operator>>(basic_istream< char, char_traits<char> >&,\n-               complex<long double>&);\n+    operator>>(basic_istream<char, char_traits<char> >&, \n+\t       complex<long double>&);\n \n   template\n     basic_ostream<char, char_traits<char> >&\n-    operator<<(basic_ostream< char, char_traits<char> >&,\n+    operator<<(basic_ostream<char, char_traits<char> >&,\n                const complex<long double>&);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     basic_istream<wchar_t, char_traits<wchar_t> >&\n-    operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n+    operator>>(basic_istream<wchar_t, char_traits<wchar_t> >&,\n                complex<float>&);\n \n   template\n     basic_ostream<wchar_t, char_traits<wchar_t> >&\n-    operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n+    operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n                const complex<float>&);\n \n   template\n     basic_istream<wchar_t, char_traits<wchar_t> >&\n-    operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n+    operator>>(basic_istream<wchar_t, char_traits<wchar_t> >&,\n                complex<double>&);\n \n   template\n     basic_ostream<wchar_t, char_traits<wchar_t> >&\n-    operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n+    operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n                const complex<double>&);\n \n   template\n     basic_istream<wchar_t, char_traits<wchar_t> >&\n-    operator>>(basic_istream< wchar_t, char_traits<wchar_t> >&,\n+    operator>>(basic_istream<wchar_t, char_traits<wchar_t> >&,\n                complex<long double>&);\n \n   template\n     basic_ostream<wchar_t, char_traits<wchar_t> >&\n-    operator<<(basic_ostream< wchar_t, char_traits<wchar_t> >&,\n+    operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n                const complex<long double>&);\n #endif //_GLIBCPP_USE_WCHAR_T\n }"}, {"sha": "8cfaaac7ec962cfbc6b997cbf3f4be188364b0c3", "filename": "libstdc++-v3/src/functexcept.cc", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -0,0 +1,152 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <bits/functexcept.h>\n+#include <cstdlib>\n+#include <exception>\n+#include <new>\n+#include <typeinfo>\n+#include <stdexcept>\n+#include <ios>\n+#include <string>\n+\n+namespace std \n+{\n+#if __EXCEPTIONS\n+  void\n+  __throw_bad_exception(void)\n+  { throw bad_exception(); }\n+\n+  void\n+  __throw_bad_alloc(void)\n+  { throw bad_alloc(); }\n+\n+  void\n+  __throw_bad_cast(void)\n+  { throw bad_cast(); }\n+\n+  void\n+  __throw_bad_typeid(void)\n+  { throw bad_typeid(); }\n+\n+  void\n+  __throw_logic_error(const char* __s)\n+  { throw logic_error(__s); }\n+\n+  void\n+  __throw_domain_error(const char* __s)\n+  { throw domain_error(__s); }\n+\n+  void\n+  __throw_invalid_argument(const char* __s)\n+  { throw invalid_argument(__s); }\n+\n+  void\n+  __throw_length_error(const char* __s)\n+  { throw length_error(__s); }\n+\n+  void\n+  __throw_out_of_range(const char* __s)\n+  { throw out_of_range(__s); }\n+\n+  void\n+  __throw_runtime_error(const char* __s)\n+  { throw runtime_error(__s); }\n+\n+  void\n+  __throw_range_error(const char* __s)\n+  { throw range_error(__s); }\n+\n+  void\n+  __throw_overflow_error(const char* __s)\n+  { throw overflow_error(__s); }\n+\n+  void\n+  __throw_underflow_error(const char* __s)\n+  { throw underflow_error(__s); }\n+\n+  void\n+  __throw_ios_failure(const char* __s)\n+  { throw ios_base::failure(__s); }\n+#else\n+  void\n+  __throw_bad_exception(void)\n+  { abort(); }\n+\n+  void\n+  __throw_bad_alloc(void)\n+  { abort(); }\n+\n+  void\n+  __throw_bad_cast(void)\n+  { abort(); }\n+\n+  void\n+  __throw_bad_typeid(void)\n+  { abort(); }\n+\n+  void\n+  __throw_logic_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_domain_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_invalid_argument(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_length_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_out_of_range(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_runtime_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_range_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_overflow_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_underflow_error(const char* __s)\n+  { abort(); }\n+\n+  void\n+  __throw_ios_failure(const char* __s)\n+  { abort(); }\n+#endif //__EXCEPTIONS\n+}"}, {"sha": "f81a110c9cfbdb441c1b57f36410031aedd3d3f3", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -349,7 +349,7 @@ namespace std\n     catch (...) \n       { \n \t_M_impl->_M_remove_reference(); \n-\tthrow; \n+\t__throw_exception_again;\n       }\n   }\n \n@@ -376,7 +376,7 @@ namespace std\n \t  _M_impl = new _Impl(__s, 1);\n       }\n     else\n-      throw runtime_error(\"attempt to create locale from NULL name\");\n+      __throw_runtime_error(\"attempt to create locale from NULL name\");\n   }\n \n   locale::locale(const locale& __base, const char* __s, category __cat)\n@@ -468,7 +468,7 @@ namespace std\n \t      }\n \t    _S_classic = _S_global = 0;\n \t    // XXX MT\n-\t    throw;\n+\t    __throw_exception_again;\n \t  }\n       }\n     return *__classic_locale;\n@@ -509,7 +509,7 @@ namespace std\n \t    __ret = all;\n \t    break;\n \t  default:\n-\t    throw runtime_error(\"bad locale category\");\n+\t    __throw_runtime_error(\"bad locale category\");\n \t  }\n       }\n     return __ret;"}, {"sha": "c1aab916f71a5ce943d3bd5b29c3deaeb670adca", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -53,7 +53,7 @@ namespace std {\n     catch(...) \n       {\n \tdelete _M_facets;\n-\tthrow;\n+\t__throw_exception_again;\n       }\n \n     for (size_t i = 0; i < _S_num_categories; ++i)\n@@ -83,7 +83,7 @@ namespace std {\n     catch(...) \n       {\n \tdelete _M_facets;\n-\tthrow;\n+\t__throw_exception_again;\n       }\n \n     // Name all the categories.\n@@ -159,7 +159,7 @@ namespace std {\n     if (__index == 0 \n \t|| __imp->_M_facets->size() <= __index \n \t|| (*(__imp->_M_facets))[__index] == 0)\n-      throw runtime_error(\"no locale facet\");\n+      __throw_runtime_error(\"no locale facet\");\n \t\n     _M_install_facet(__idp, (*(__imp->_M_facets))[__index]); \n   }"}, {"sha": "9a3f2dd574bc4b9d70a7ef2c940ee724f7014131", "filename": "libstdc++-v3/src/stdexcept.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c094827c86cb0cbf71ba3b16b09541e61502c2/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc?ref=e2c094827c86cb0cbf71ba3b16b09541e61502c2", "patch": "@@ -33,9 +33,6 @@\n \n #include <bits/std_string.h>\n #include <bits/std_stdexcept.h>\n-#if 1\n-#include <bits/stl_range_errors.h>\n-#endif\n \n namespace std \n {\n@@ -77,27 +74,6 @@ namespace std\n \n   underflow_error::underflow_error(const string& __arg)\n   : runtime_error(__arg) { }\n-\n-#if 1\n-  // XXX need to deal with this.\n-  void\n-  __out_of_range(const char *str)\n-  { throw out_of_range(str); }\n-\n-  void \n-  __length_error(const char *str)\n-  { throw length_error(str); }\n-\n-  // XXX: From stl_range_errors.h, eventually these approaches need to\n-  // be merged.\n-  void \n-  __stl_throw_range_error(const char* __msg) \n-  { throw range_error(__msg); }\n-\n-  void \n-  __stl_throw_length_error(const char* __msg)\n-  { throw length_error(__msg); }\n-#endif\n } // namespace std\n \n "}]}