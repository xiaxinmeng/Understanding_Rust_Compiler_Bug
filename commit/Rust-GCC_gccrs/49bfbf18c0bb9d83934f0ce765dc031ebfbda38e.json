{"sha": "49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliZmJmMThjMGJiOWQ4MzkzNGYwY2U3NjVkYzAzMWViZmJkYTM4ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-27T11:42:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-01T14:56:34Z"}, "message": "analyzer: fix false NULL deref warning after previous deref [PR96792]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96792\n\t* region-model.cc (region_model::deref_rvalue): Add the constraint\n\tthat PTR_SVAL is non-NULL.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96792\n\t* gcc.dg/analyzer/pr96792.c: New test.", "tree": {"sha": "a5ffca38c6d890175030acbc6ce63fd4382097fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ffca38c6d890175030acbc6ce63fd4382097fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a292e31dac72c20cda3478b866ccf6e07dfad1a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a292e31dac72c20cda3478b866ccf6e07dfad1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a292e31dac72c20cda3478b866ccf6e07dfad1a4"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "a7bc48115eec7b6a57d91a32a6ac0a1f43eec6ef", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "patch": "@@ -1398,6 +1398,15 @@ region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n {\n   gcc_assert (ptr_sval);\n \n+  /* If we're dereferencing PTR_SVAL, assume that it is non-NULL; add this\n+     as a constraint.  This suppresses false positives from\n+     -Wanalyzer-null-dereference for the case where we later have an\n+     if (PTR_SVAL) that would occur if we considered the false branch\n+     and transitioned the malloc state machine from start->null.  */\n+  tree null_ptr_cst = build_int_cst (ptr_sval->get_type (), 0);\n+  const svalue *null_ptr = m_mgr->get_or_create_constant_svalue (null_ptr_cst);\n+  m_constraints->add_constraint (ptr_sval, NE_EXPR, null_ptr);\n+\n   switch (ptr_sval->get_kind ())\n     {\n     default:"}, {"sha": "7757645a133956efdea47fb67b6a0e4bf0de9e42", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96792.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96792.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bfbf18c0bb9d83934f0ce765dc031ebfbda38e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96792.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96792.c?ref=49bfbf18c0bb9d83934f0ce765dc031ebfbda38e", "patch": "@@ -0,0 +1,39 @@\n+#define NULL (void *)0\n+\n+struct block\n+{\n+  void *function;\n+  const struct block *superblock;\n+};\n+\n+struct global_block\n+{\n+  struct block block;\n+  void *compunit_symtab;\n+};\n+\n+extern const struct block *block_global_block (const struct block *block);\n+\n+void *\n+block_objfile (const struct block *block)\n+{\n+  const struct global_block *global_block;\n+\n+  if (block->function != NULL)\n+    return block->function;\n+\n+  global_block = (struct global_block *) block_global_block (block);\n+  return global_block->compunit_symtab;\n+}\n+\n+const struct block *\n+block_global_block (const struct block *block)\n+{\n+  if (block == NULL)\n+    return NULL;\n+\n+  while (block->superblock != NULL)\n+    block = block->superblock;\n+\n+  return block;\n+}"}]}