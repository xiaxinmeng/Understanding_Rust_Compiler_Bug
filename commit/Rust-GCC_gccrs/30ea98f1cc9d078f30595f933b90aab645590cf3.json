{"sha": "30ea98f1cc9d078f30595f933b90aab645590cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBlYTk4ZjFjYzlkMDc4ZjMwNTk1ZjkzM2I5MGFhYjY0NTU5MGNmMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-07-11T23:54:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-07-11T23:54:24Z"}, "message": "Check for whether GOT_TOC register was eliminated\n\nFrom-SVN: r12429", "tree": {"sha": "ece0236316f2a9d5b5a0468ce3e4b181cc534c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece0236316f2a9d5b5a0468ce3e4b181cc534c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30ea98f1cc9d078f30595f933b90aab645590cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ea98f1cc9d078f30595f933b90aab645590cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ea98f1cc9d078f30595f933b90aab645590cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ea98f1cc9d078f30595f933b90aab645590cf3/comments", "author": null, "committer": null, "parents": [{"sha": "1ff7789b515733ab51c8c6686d1bcfcbf681b94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff7789b515733ab51c8c6686d1bcfcbf681b94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff7789b515733ab51c8c6686d1bcfcbf681b94b"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "60b544bdd8d11097d49a6694196d2e5020f52439", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ea98f1cc9d078f30595f933b90aab645590cf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ea98f1cc9d078f30595f933b90aab645590cf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=30ea98f1cc9d078f30595f933b90aab645590cf3", "patch": "@@ -2153,45 +2153,60 @@ rs6000_replace_regno (x, from, reg)\n void\n rs6000_finalize_pic ()\n {\n-  if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n+  /* Loop through all of the insns, replacing the special GOT_TOC_REGNUM\n+     with an appropriate pseduo register.  If we find we need GOT/TOC,\n+     add the appropriate init code.  */\n+  if (flag_pic && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS))\n     {\n-      /* Loop through all of the insns, replacing the special GOT_TOC_REGNUM\n-\t with an appropriate pseduo register.  If we find we need GOT/TOC,\n-\t add the appropriate init code.  */\n-      if (flag_pic)\n-\t{\n-\t  rtx insn = get_insns ();\n-\t  rtx reg = NULL_RTX;\n-\t  rtx first_insn;\n+      rtx insn = get_insns ();\n+      rtx reg = NULL_RTX;\n+      rtx first_insn;\n \n-\t  if (GET_CODE (insn) == NOTE)\n-\t    insn = next_nonnote_insn (insn);\n+      if (GET_CODE (insn) == NOTE)\n+\tinsn = next_nonnote_insn (insn);\n \n-\t  first_insn = insn;\n-\t  for ( ; insn != NULL_RTX; insn = NEXT_INSN (insn))\n+      first_insn = insn;\n+      for ( ; insn != NULL_RTX; insn = NEXT_INSN (insn))\n+\t{\n+\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n \t    {\n-\t      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n-\t\t{\n-\t\t  PATTERN (insn) = rs6000_replace_regno (PATTERN (insn),\n+\t      PATTERN (insn) = rs6000_replace_regno (PATTERN (insn),\n+\t\t\t\t\t\t     GOT_TOC_REGNUM,\n+\t\t\t\t\t\t     &reg);\n+\n+\t      if (REG_NOTES (insn))\n+\t\tREG_NOTES (insn) = rs6000_replace_regno (REG_NOTES (insn),\n \t\t\t\t\t\t\t GOT_TOC_REGNUM,\n \t\t\t\t\t\t\t &reg);\n-\n-\t\t  if (REG_NOTES (insn))\n-\t\t    REG_NOTES (insn) = rs6000_replace_regno (REG_NOTES (insn),\n-\t\t\t\t\t\t\t     GOT_TOC_REGNUM,\n-\t\t\t\t\t\t\t     &reg);\n-\t\t}\n \t    }\n+\t}\n \n-\t  if (reg)\n-\t    {\n-\t      rtx init = gen_init_v4_pic (reg);\n-\t      emit_insn_before (init, first_insn);\n-\t    }\n+      if (reg)\n+\t{\n+\t  rtx init = gen_init_v4_pic (reg);\n+\t  emit_insn_before (init, first_insn);\n \t}\n     }\n }\n \n+\f\n+/* Search for any occurrance of the GOT_TOC register marker that should\n+   have been eliminated, but may have crept back in.  */\n+\n+void\n+rs6000_reorg (insn)\n+     rtx insn;\n+{\n+  if (flag_pic && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS))\n+    {\n+      rtx got_reg = gen_rtx (REG, Pmode, GOT_TOC_REGNUM);\n+      for ( ; insn != NULL_RTX; insn = NEXT_INSN (insn))\n+\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t    && reg_mentioned_p (got_reg, PATTERN (insn)))\n+\t  fatal_insn (\"GOT/TOC register marker not removed:\", PATTERN (insn));\n+    }\n+}\n+\n \f\n /* Define the structure for the machine field in struct function.  */\n struct machine_function"}, {"sha": "a497fe45f8a3efbce07446c73a8337d3c6acba43", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ea98f1cc9d078f30595f933b90aab645590cf3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ea98f1cc9d078f30595f933b90aab645590cf3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=30ea98f1cc9d078f30595f933b90aab645590cf3", "patch": "@@ -1954,6 +1954,16 @@ typedef struct rs6000_args\n \n /* #define LEGITIMATE_PIC_OPERAND_P (X) */\n \n+/* In rare cases, correct code generation requires extra machine\n+   dependent processing between the second jump optimization pass and\n+   delayed branch scheduling.  On those machines, define this macro\n+   as a C statement to act on the code starting at INSN.\n+\n+   On the RS/6000, we use it to make sure the GOT_TOC register marker\n+   that FINALIZE_PIC is supposed to remove actually got removed.  */\n+\n+#define MACHINE_DEPENDENT_REORG(INSN) rs6000_reorg (INSN)\n+\n \f\n /* Define this if some processing needs to be done immediately before\n    emitting code for an insn.  */\n@@ -3081,6 +3091,7 @@ extern int addrs_ok_for_quad_peep ();\n extern enum reg_class secondary_reload_class ();\n extern int ccr_bit ();\n extern void rs6000_finalize_pic ();\n+extern void rs6000_reorg ();\n extern void rs6000_save_machine_status ();\n extern void rs6000_restore_machine_status ();\n extern void rs6000_init_expanders ();"}]}