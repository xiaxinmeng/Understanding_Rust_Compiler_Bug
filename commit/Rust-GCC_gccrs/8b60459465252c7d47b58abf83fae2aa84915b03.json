{"sha": "8b60459465252c7d47b58abf83fae2aa84915b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2MDQ1OTQ2NTI1MmM3ZDQ3YjU4YWJmODNmYWUyYWE4NDkxNWIwMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-18T20:43:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-18T20:43:20Z"}, "message": "openmp: Don't optimize shared to firstprivate on task with depend clause\n\nThe attached testcase is miscompiled, because we optimize shared clauses\nto firstprivate when task body can't modify the variable even when the\ntask has depend clause.  That is wrong, because firstprivate means the\nvariable will be copied immediately when the task is created, while with\ndepend clause some other task might change it later before the dependencies\nare satisfied and the task should observe the value only after the change.\n\n2020-12-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimplify.c (struct gimplify_omp_ctx): Add has_depend member.\n\t(gimplify_scan_omp_clauses): Set it to true if OMP_CLAUSE_DEPEND\n\tappears on OMP_TASK.\n\t(gimplify_adjust_omp_clauses_1, gimplify_adjust_omp_clauses): Force\n\tGOVD_WRITTEN on shared variables if task construct has depend clause.\n\n\t* testsuite/libgomp.c/task-6.c: New test.", "tree": {"sha": "1c22419f9d6766808f503ef9c5ec741d6e7065e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c22419f9d6766808f503ef9c5ec741d6e7065e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b60459465252c7d47b58abf83fae2aa84915b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b60459465252c7d47b58abf83fae2aa84915b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b60459465252c7d47b58abf83fae2aa84915b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b60459465252c7d47b58abf83fae2aa84915b03/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb37fa4dd49ee775ae90355464265a2f60c1067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb37fa4dd49ee775ae90355464265a2f60c1067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb37fa4dd49ee775ae90355464265a2f60c1067"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "87b6314e016052e3540637e6d0350df84d077462", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60459465252c7d47b58abf83fae2aa84915b03/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60459465252c7d47b58abf83fae2aa84915b03/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8b60459465252c7d47b58abf83fae2aa84915b03", "patch": "@@ -231,6 +231,7 @@ struct gimplify_omp_ctx\n   bool target_firstprivatize_array_bases;\n   bool add_safelen1;\n   bool order_concurrent;\n+  bool has_depend;\n   int defaultmap[4];\n };\n \n@@ -9497,6 +9498,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (code == OMP_TASK)\n+\t    ctx->has_depend = true;\n \t  break;\n \n \tcase OMP_CLAUSE_TO:\n@@ -10207,6 +10210,11 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n \t    return 0;\n \t}\n       code = OMP_CLAUSE_SHARED;\n+      /* Don't optimize shared into firstprivate for read-only vars\n+\t on tasks with depend clause, we shouldn't try to copy them\n+\t until the dependencies are satisfied.  */\n+      if (gimplify_omp_ctxp->has_depend)\n+\tflags |= GOVD_WRITTEN;\n     }\n   else if (flags & GOVD_PRIVATE)\n     code = OMP_CLAUSE_PRIVATE;\n@@ -10494,6 +10502,10 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t\t  OMP_CLAUSE_SET_CODE (c, OMP_CLAUSE_PRIVATE);\n \t\t  OMP_CLAUSE_PRIVATE_DEBUG (c) = 1;\n \t\t}\n+              if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n+\t\t  && ctx->has_depend\n+\t\t  && DECL_P (decl))\n+\t\tn->value |= GOVD_WRITTEN;\n \t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n \t\t  && (n->value & GOVD_WRITTEN) == 0\n \t\t  && DECL_P (decl)"}, {"sha": "e5fc758d2834c1e8167d83b27dc46e4a3ca17d6c", "filename": "libgomp/testsuite/libgomp.c/task-6.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60459465252c7d47b58abf83fae2aa84915b03/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60459465252c7d47b58abf83fae2aa84915b03/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-6.c?ref=8b60459465252c7d47b58abf83fae2aa84915b03", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+int\n+main ()\n+{\n+  int x = 0, y = 0;\n+  #pragma omp parallel shared(x, y)\n+  #pragma omp master\n+  {\n+    #pragma omp task depend(out:y) shared(x, y)\n+    {\n+      sleep (1);\n+      x = 1;\n+      y = 1;\n+    }\n+    #pragma omp task depend(inout:y) shared(x, y)\n+    {\n+      if (x != 1 || y != 1)\n+\tabort ();\n+      y++;\n+    }\n+  }\n+  if (x != 1 || y != 2)\n+    abort ();\n+  x = 0;\n+  y = 0;\n+  #pragma omp parallel\n+  #pragma omp master\n+  {\n+    #pragma omp task depend(out:y)\n+    {\n+      sleep (1);\n+      x = 1;\n+      y = 1;\n+    }\n+    #pragma omp task depend(inout:y)\n+    {\n+      if (x != 1 || y != 1)\n+\tabort ();\n+      y++;\n+    }\n+  }\n+  if (x != 1 || y != 2)\n+    abort ();\n+  return 0;\n+}"}]}