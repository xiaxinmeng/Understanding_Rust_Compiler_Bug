{"sha": "0b61703ca6adde635f58c71763a524b8fd922009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2MTcwM2NhNmFkZGU2MzVmNThjNzE3NjNhNTI0YjhmZDkyMjAwOQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-10-01T18:45:35Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-10-01T18:45:35Z"}, "message": "rs6000-c.c (altivec_overloaded_builtins): Add Cell Altivec intrinsics.\n\n2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n            Yukishige Shibata <shibata@rd.scei.sony.co.jp>\n            Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n\n        * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add Cell\n        Altivec intrinsics.\n        * config/rs6000/rs6000.c (altivec_expand_lv_builtin): Delete\n        prototype.  Add new parameter, blk.\n        Use BLKmode for the MEM if blk is true.\n        (altivec_expand_builtin): Handle ALTIVEC_BUILTIN_STVLX,\n        ALTIVEC_BUILTIN_STVLXL, ALTIVEC_BUILTIN_STVRX, and\n        ALTIVEC_BUILTIN_STVRXL.\n        Update usage of altivec_expand_lv_builtin.\n        Handle ALTIVEC_BUILTIN_LVLX, ALTIVEC_BUILTIN_LVLXL,\n        ALTIVEC_BUILTIN_LVRX, and ALTIVEC_BUILTIN_LVRXL.\n        (altivec_init_builtins): If compiling for the Cell, also define the\n        cell VMX builtins.\n        * config/rs6000/rs6000.h (rs6000_builtins): Define\n        ALTIVEC_BUILTIN_LVLX, ALTIVEC_BUILTIN_LVLXL, ALTIVEC_BUILTIN_LVRX,\n        ALTIVEC_BUILTIN_LVRXL, ALTIVEC_BUILTIN_STVLX, ALTIVEC_BUILTIN_STVLXL,\n        ALTIVEC_BUILTIN_STVRX, ALTIVEC_BUILTIN_STVRXL,\n        ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_VEC_LVLXL,\n        ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_VEC_LVRXL,\n        ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_VEC_STVLXL,\n        ALTIVEC_BUILTIN_VEC_STVRX, and ALTIVEC_BUILTIN_VEC_STVRXL.\n        * config/rs6000/altivec.md (define_constants): Define UNSPEC_LVLX,\n        UNSPEC_LVLXL, UNSPEC_LVRX, UNSPEC_LVRXL, UNSPEC_STVLX, UNSPEC_STVLXL,\n        UNSPEC_STVRX, and UNSPEC_STVRXL.\n        (altivec_lvlx): New pattern.\n        (altivec_lvlxl): New pattern.\n        (altivec_lvrx): New pattern.\n        (altivec_lvrxl): New pattern.\n        (altivec_stvlx): New pattern.\n        (altivec_stvlxl): New pattern.\n        (altivec_stvrx): New pattern.\n        (altivec_stvrxl): New pattern.\n        * config/rs6000/altivec.h (vec_lvlx): Define if PPU is defined.\n        (vec_lvlxl): Likewise.\n        (vec_lvrx): Define if PPU is defined.\n        (vec_lvrxl): Likewise.\n        (vec_stvlx): Define if PPU is defined.\n        (vec_stvlxl): Likewise.\n        (vec_stvrx): Define if PPU is defined.\n        (vec_stvrxl): Likewise.\n\n2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * gcc.target/powerpc/altivec_check.h (altivec_cell_check): New function.\n        * gcc.target/powerpc/altivec-cell-6.c: New test.\n        * gcc.target/powerpc/altivec-cell-7.c: New test.\n        * gcc.target/powerpc/altivec-cell-8.c: New test.\n\nFrom-SVN: r140820", "tree": {"sha": "ba85afbce5879d55a66eeef30c89205890d782f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba85afbce5879d55a66eeef30c89205890d782f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b61703ca6adde635f58c71763a524b8fd922009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b61703ca6adde635f58c71763a524b8fd922009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b61703ca6adde635f58c71763a524b8fd922009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b61703ca6adde635f58c71763a524b8fd922009/comments", "author": null, "committer": null, "parents": [{"sha": "522aa637e45b961558d783b7c75346406dce5e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522aa637e45b961558d783b7c75346406dce5e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522aa637e45b961558d783b7c75346406dce5e86"}], "stats": {"total": 636, "additions": 618, "deletions": 18}, "files": [{"sha": "f66dae606a0215faf2b20e5954f7b805438a771b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -1,3 +1,48 @@\n+2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+            Yukishige Shibata  <shibata@rd.scei.sony.co.jp>\n+            Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add Cell\n+\tAltivec intrinsics.\n+\t* config/rs6000/rs6000.c (altivec_expand_lv_builtin): Delete\n+\tprototype.  Add new parameter, blk.\n+\tUse BLKmode for the MEM if blk is true.\n+\t(altivec_expand_builtin): Handle ALTIVEC_BUILTIN_STVLX,\n+\tALTIVEC_BUILTIN_STVLXL, ALTIVEC_BUILTIN_STVRX, and\n+\tALTIVEC_BUILTIN_STVRXL.\n+\tUpdate usage of altivec_expand_lv_builtin.\n+\tHandle ALTIVEC_BUILTIN_LVLX, ALTIVEC_BUILTIN_LVLXL,\n+\tALTIVEC_BUILTIN_LVRX, and ALTIVEC_BUILTIN_LVRXL.\n+\t(altivec_init_builtins): If compiling for the Cell, also define the\n+\tcell VMX builtins.\n+\t* config/rs6000/rs6000.h (rs6000_builtins): Define\n+\tALTIVEC_BUILTIN_LVLX, ALTIVEC_BUILTIN_LVLXL, ALTIVEC_BUILTIN_LVRX,\n+\tALTIVEC_BUILTIN_LVRXL, ALTIVEC_BUILTIN_STVLX, ALTIVEC_BUILTIN_STVLXL,\n+\tALTIVEC_BUILTIN_STVRX, ALTIVEC_BUILTIN_STVRXL,\n+\tALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_VEC_LVLXL,\n+\tALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_VEC_LVRXL,\n+\tALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_VEC_STVLXL,\n+\tALTIVEC_BUILTIN_VEC_STVRX, and ALTIVEC_BUILTIN_VEC_STVRXL.\n+\t* config/rs6000/altivec.md (define_constants): Define UNSPEC_LVLX,\n+\tUNSPEC_LVLXL, UNSPEC_LVRX, UNSPEC_LVRXL, UNSPEC_STVLX, UNSPEC_STVLXL,\n+\tUNSPEC_STVRX, and UNSPEC_STVRXL.\n+\t(altivec_lvlx): New pattern.\n+\t(altivec_lvlxl): New pattern.\n+\t(altivec_lvrx): New pattern.\n+\t(altivec_lvrxl): New pattern.\n+\t(altivec_stvlx): New pattern.\n+\t(altivec_stvlxl): New pattern.\n+\t(altivec_stvrx): New pattern.\n+\t(altivec_stvrxl): New pattern.\n+\t* config/rs6000/altivec.h (vec_lvlx): Define if PPU is defined.\n+\t(vec_lvlxl): Likewise.\n+\t(vec_lvrx): Define if PPU is defined.\n+\t(vec_lvrxl): Likewise.\n+\t(vec_stvlx): Define if PPU is defined.\n+\t(vec_stvlxl): Likewise.\n+\t(vec_stvrx): Define if PPU is defined.\n+\t(vec_stvrxl): Likewise.\n+\n 2008-10-01  Geert Bosch  <bosch@adacore.com>\n \n \t* tree.c (contains_placeholder_p): Return 0 for a SAVE_EXPR.\n@@ -10,10 +55,10 @@\n \n 2008-10-01  Richard Guenther  <rguenther@suse.de>\n \n-        PR middle-end/37285\n-        * tree-vrp.c (execute_vrp): If we optimized away the default\n-        case make sure to promote the label that got in place of it\n-        to a default case label.\n+\tPR middle-end/37285\n+\t* tree-vrp.c (execute_vrp): If we optimized away the default\n+\tcase make sure to promote the label that got in place of it\n+\tto a default case label.\n \n 2008-10-01  Richard Henderson  <rth@redhat.com>\n \n@@ -220,7 +265,7 @@\n 2008-09-26  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tRevert:\n-        2008-09-25  Vladimir Makarov  <vmakarov@redhat.com>\n+\t2008-09-25  Vladimir Makarov  <vmakarov@redhat.com>\n \t* ira-lives.c:...\n \t* doc/rtl.texi:...\n "}, {"sha": "39efc4999979e0142818f5a5bcd8edc5944f6388", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -205,6 +205,13 @@\n #define vec_lvebx __builtin_vec_lvebx\n #define vec_lvehx __builtin_vec_lvehx\n #define vec_lvewx __builtin_vec_lvewx\n+/* Cell only intrinsics.  */\n+#ifdef __PPU__\n+#define vec_lvlx __builtin_vec_lvlx\n+#define vec_lvlxl __builtin_vec_lvlxl\n+#define vec_lvrx __builtin_vec_lvrx\n+#define vec_lvrxl __builtin_vec_lvrxl\n+#endif\n #define vec_lvsl __builtin_vec_lvsl\n #define vec_lvsr __builtin_vec_lvsr\n #define vec_max __builtin_vec_max\n@@ -239,6 +246,13 @@\n #define vec_stvebx __builtin_vec_stvebx\n #define vec_stvehx __builtin_vec_stvehx\n #define vec_stvewx __builtin_vec_stvewx\n+/* Cell only intrinsics.  */\n+#ifdef __PPU__\n+#define vec_stvlx __builtin_vec_stvlx\n+#define vec_stvlxl __builtin_vec_stvlxl\n+#define vec_stvrx __builtin_vec_stvrx\n+#define vec_stvrxl __builtin_vec_stvrxl\n+#endif\n #define vec_sub __builtin_vec_sub\n #define vec_subs __builtin_vec_subs\n #define vec_sum __builtin_vec_sum"}, {"sha": "9c6245ae8ac785c7750f96b87ed1650a9444d074", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -130,6 +130,14 @@\n    (UNSPEC_INTERLO_V8HI 233)\n    (UNSPEC_INTERLO_V16QI 234)\n    (UNSPEC_INTERLO_V4SF 235)\n+   (UNSPEC_LVLX         236)\n+   (UNSPEC_LVLXL        237)\n+   (UNSPEC_LVRX         238)\n+   (UNSPEC_LVRXL        239)\n+   (UNSPEC_STVLX        240)\n+   (UNSPEC_STVLXL       241)\n+   (UNSPEC_STVRX        242)\n+   (UNSPEC_STVRXL       243)\n    (UNSPEC_VMULWHUB     308)\n    (UNSPEC_VMULWLUB     309)\n    (UNSPEC_VMULWHSB     310)\n@@ -2677,6 +2685,76 @@\n   DONE;\n }\")\n \n+;; Vector SIMD PEM v2.06c defines LVLX, LVLXL, LVRX, LVRXL,\n+;; STVLX, STVLXL, STVVRX, STVRXL are available only on Cell.\n+(define_insn \"altivec_lvlx\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+\t\t      UNSPEC_LVLX))]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"lvlx %0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"altivec_lvlxl\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+\t\t      UNSPEC_LVLXL))]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"lvlxl %0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"altivec_lvrx\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+\t\t      UNSPEC_LVRX))]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"lvrx %0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"altivec_lvrxl\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+\t\t      UNSPEC_LVRXL))]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"lvrxl %0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"altivec_stvlx\"\n+  [(parallel\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVLX)])]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"stvlx %1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"altivec_stvlxl\"\n+  [(parallel\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVLXL)])]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"stvlxl %1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"altivec_stvrx\"\n+  [(parallel\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVRX)])]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"stvrx %1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"altivec_stvrxl\"\n+  [(parallel\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+     (unspec [(const_int 0)] UNSPEC_STVRXL)])]\n+  \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n+  \"stvrxl %1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n (define_expand \"vec_extract_evenv4si\"\n  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n         (unspec:V8HI [(match_operand:V4SI 1 \"register_operand\" \"\")"}, {"sha": "9ffa43ee747fe8e96967b8ff5499c17cbc56d0cf", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -996,6 +996,150 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LVSR, ALTIVEC_BUILTIN_LVSR,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLX, ALTIVEC_BUILTIN_LVLX,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVLXL, ALTIVEC_BUILTIN_LVLXL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRX, ALTIVEC_BUILTIN_LVRX,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LVRXL, ALTIVEC_BUILTIN_LVRXL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MAX, ALTIVEC_BUILTIN_VMAXUB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MAX, ALTIVEC_BUILTIN_VMAXUB,\n@@ -2432,6 +2576,150 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n   { ALTIVEC_BUILTIN_VEC_STL, ALTIVEC_BUILTIN_STVXL,\n     RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLX, ALTIVEC_BUILTIN_STVLX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVLXL, ALTIVEC_BUILTIN_STVLXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRX, ALTIVEC_BUILTIN_STVRX,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n \n   /* Predicates.  */\n   { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,"}, {"sha": "24d6761c1e0299d7723d11543e6f4058d4d5496a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -905,7 +905,6 @@ static rtx altivec_expand_dst_builtin (tree, rtx, bool *);\n static rtx altivec_expand_abs_builtin (enum insn_code, tree, rtx);\n static rtx altivec_expand_predicate_builtin (enum insn_code,\n \t\t\t\t\t     const char *, tree, rtx);\n-static rtx altivec_expand_lv_builtin (enum insn_code, tree, rtx);\n static rtx altivec_expand_stv_builtin (enum insn_code, tree);\n static rtx altivec_expand_vec_init_builtin (tree, tree, rtx);\n static rtx altivec_expand_vec_set_builtin (tree);\n@@ -8065,7 +8064,7 @@ paired_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n }\n \n static rtx\n-altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n+altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n {\n   rtx pat, addr;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n@@ -8093,12 +8092,12 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target)\n \n   if (op0 == const0_rtx)\n     {\n-      addr = gen_rtx_MEM (tmode, op1);\n+      addr = gen_rtx_MEM (blk ? BLKmode : tmode, op1);\n     }\n   else\n     {\n       op0 = copy_to_mode_reg (mode0, op0);\n-      addr = gen_rtx_MEM (tmode, gen_rtx_PLUS (Pmode, op0, op1));\n+      addr = gen_rtx_MEM (blk ? BLKmode : tmode, gen_rtx_PLUS (Pmode, op0, op1));\n     }\n \n   pat = GEN_FCN (icode) (target, addr);\n@@ -8605,6 +8604,15 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_STVXL:\n       return altivec_expand_stv_builtin (CODE_FOR_altivec_stvxl, exp);\n \n+    case ALTIVEC_BUILTIN_STVLX:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvlx, exp);\n+    case ALTIVEC_BUILTIN_STVLXL:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvlxl, exp);\n+    case ALTIVEC_BUILTIN_STVRX:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvrx, exp);\n+    case ALTIVEC_BUILTIN_STVRXL:\n+      return altivec_expand_stv_builtin (CODE_FOR_altivec_stvrxl, exp);\n+\n     case ALTIVEC_BUILTIN_MFVSCR:\n       icode = CODE_FOR_altivec_mfvscr;\n       tmode = insn_data[icode].operand[0].mode;\n@@ -8707,25 +8715,37 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     {\n     case ALTIVEC_BUILTIN_LVSL:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvsl,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVSR:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvsr,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVEBX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvebx,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVEHX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvehx,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVEWX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvewx,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVXL:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx,\n-\t\t\t\t\texp, target);\n+\t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVLX:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvlx,\n+\t\t\t\t\texp, target, true);\n+    case ALTIVEC_BUILTIN_LVLXL:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvlxl,\n+\t\t\t\t\texp, target, true);\n+    case ALTIVEC_BUILTIN_LVRX:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvrx,\n+\t\t\t\t\texp, target, true);\n+    case ALTIVEC_BUILTIN_LVRXL:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvrxl,\n+\t\t\t\t\texp, target, true);\n     default:\n       break;\n       /* Fall through.  */\n@@ -9910,6 +9930,28 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvebx\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STVEBX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvehx\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STVEHX);\n \n+  if (rs6000_cpu == PROCESSOR_CELL)\n+    {\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvlx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvlxl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLXL);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvrx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVRX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvrxl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVRXL);\n+\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvlx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVLX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvlxl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVLXL);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvrx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVRX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvrxl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVRXL);\n+\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvlx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVLX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvlxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVLXL);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvrx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVRX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvrxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVRXL);\n+\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvlx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVLX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvlxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVLXL);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvrx\",  void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRX);\n+      def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvrxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRXL);\n+    }\n   def_builtin (MASK_ALTIVEC, \"__builtin_vec_step\", int_ftype_opaque, ALTIVEC_BUILTIN_VEC_STEP);\n \n   def_builtin (MASK_ALTIVEC, \"__builtin_vec_sld\", opaque_ftype_opaque_opaque_int, ALTIVEC_BUILTIN_VEC_SLD);"}, {"sha": "ac00e11fbb5e39eee529066fc584bea169cd698c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -2543,10 +2543,18 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_LVXL,\n   ALTIVEC_BUILTIN_LVX,\n   ALTIVEC_BUILTIN_STVX,\n+  ALTIVEC_BUILTIN_LVLX,\n+  ALTIVEC_BUILTIN_LVLXL,\n+  ALTIVEC_BUILTIN_LVRX,\n+  ALTIVEC_BUILTIN_LVRXL,\n   ALTIVEC_BUILTIN_STVEBX,\n   ALTIVEC_BUILTIN_STVEHX,\n   ALTIVEC_BUILTIN_STVEWX,\n   ALTIVEC_BUILTIN_STVXL,\n+  ALTIVEC_BUILTIN_STVLX,\n+  ALTIVEC_BUILTIN_STVLXL,\n+  ALTIVEC_BUILTIN_STVRX,\n+  ALTIVEC_BUILTIN_STVRXL,\n   ALTIVEC_BUILTIN_VCMPBFP_P,\n   ALTIVEC_BUILTIN_VCMPEQFP_P,\n   ALTIVEC_BUILTIN_VCMPEQUB_P,\n@@ -2621,6 +2629,10 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VEC_LVEBX,\n   ALTIVEC_BUILTIN_VEC_LVEHX,\n   ALTIVEC_BUILTIN_VEC_LVEWX,\n+  ALTIVEC_BUILTIN_VEC_LVLX,\n+  ALTIVEC_BUILTIN_VEC_LVLXL,\n+  ALTIVEC_BUILTIN_VEC_LVRX,\n+  ALTIVEC_BUILTIN_VEC_LVRXL,\n   ALTIVEC_BUILTIN_VEC_LVSL,\n   ALTIVEC_BUILTIN_VEC_LVSR,\n   ALTIVEC_BUILTIN_VEC_MADD,\n@@ -2680,6 +2692,10 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VEC_STVEBX,\n   ALTIVEC_BUILTIN_VEC_STVEHX,\n   ALTIVEC_BUILTIN_VEC_STVEWX,\n+  ALTIVEC_BUILTIN_VEC_STVLX,\n+  ALTIVEC_BUILTIN_VEC_STVLXL,\n+  ALTIVEC_BUILTIN_VEC_STVRX,\n+  ALTIVEC_BUILTIN_VEC_STVRXL,\n   ALTIVEC_BUILTIN_VEC_SUB,\n   ALTIVEC_BUILTIN_VEC_SUBC,\n   ALTIVEC_BUILTIN_VEC_SUBS,"}, {"sha": "a28fa88f460d0a1ce85aac4bb7e4cfc7ef59c8a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -1,12 +1,19 @@\n+2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* gcc.target/powerpc/altivec_check.h (altivec_cell_check): New function.\n+\t* gcc.target/powerpc/altivec-cell-6.c: New test.\n+\t* gcc.target/powerpc/altivec-cell-7.c: New test.\n+\t* gcc.target/powerpc/altivec-cell-8.c: New test.\n+\n 2008-10-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37617\n \t* gcc.c-torture/compile/pr37617.c: New testcase.\n \n 2008-10-01  Richard Guenther  <rguenther@suse.de>\n \n-        PR middle-end/37285\n-        * gcc.c-torture/compile/pr37285.c: New testcase.\n+\tPR middle-end/37285\n+\t* gcc.c-torture/compile/pr37285.c: New testcase.\n \n 2008-10-01  Kai Tietz  <kai.tietz@onevision.com>\n "}, {"sha": "5d62f18e13f5ef1b4247713e6b98ac8df06e82a1", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-6.c?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mabi=altivec -mcpu=cell\" } */\n+#include <altivec.h>\n+\n+/* This used to ICE with reloading of a constant address. */\n+\n+vector float f(void)\n+{\n+  vector float * a = (void*)16;\n+  return vec_lvlx (0, a);\n+} "}, {"sha": "ae77694008eb7da5ca08b6dbca6a2a4b12b9a895", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-7.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-7.c?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mabi=altivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"vor\" 2 } } */\n+#include <altivec.h>\n+\n+/* Make sure that lvlx and lvrx are not combined into one insn and\n+   we still get a vor. */\n+\n+vector unsigned char\n+lvx_float (long off, float *p)\n+{\n+    vector unsigned char l, r;\n+\n+    l = (vector unsigned char) vec_lvlx (off, p);\n+    r = (vector unsigned char) vec_lvrx (off, p);\n+    return vec_or(l, r);\n+}\n+\n+vector unsigned char\n+lvxl_float (long off, float *p)\n+{\n+    vector unsigned char l, r;\n+\n+    l = (vector unsigned char) vec_lvlxl (off, p);\n+    r = (vector unsigned char) vec_lvrxl (off, p);\n+    return vec_or(l, r);\n+}"}, {"sha": "778cd11f793aec5e8938daf0d984164e36e4857c", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-8.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mabi=altivec -mcpu=cell\" } */\n+#include <altivec.h>\n+#include <string.h>\n+#include \"altivec_check.h\"\n+\n+typedef short int sint16;\n+typedef signed char int8;\n+\n+int main1(void) __attribute__((noinline));\n+int main1(void)\n+{\n+    sint16 test_vector[4] = { 1678, -2356, 19246, -17892 };\n+    int8 test_dst[128] __attribute__(( aligned( 16 )));\n+    float test_out[4] __attribute__(( aligned( 16 )));\n+    int p;\n+\n+    for( p = 0; p < 24; ++p )\n+    {\n+        memset( test_dst, 0, 128 );\n+        memcpy( &test_dst[p], test_vector, 8 );\n+        {\n+            vector float VR, VL, V;\n+   /* load the righthand section of the misaligned vector */\n+            VR = (vector float) vec_lvrx( 8, &test_dst[p] );\n+            VL = (vector float) vec_lvlx( 0, &test_dst[p] );\n+   /* Vector Shift Left Double by Octet Immediate, move the right hand section into the bytes */\n+            VR = vec_vsldoi( VR, VR, 2 << 2 ); \n+   /* or those two together */\n+            V = vec_vor( VL, VR );\n+   /* sign extend */\n+            V = (vector float) vec_vupkhsh((vector bool short)V );\n+   /* fixed to float by S16_SHIFT_BITS bits */\n+            V = (vector float) vec_vcfsx ((vector signed int)V, 5 ); \n+\n+            vec_stvx( V, 0, &test_out[0] );\n+            if (test_out[0] != 52.437500)\n+                abort ();\n+            if (test_out[1] != -73.625000)\n+                abort ();\n+            if (test_out[2] != 601.437500)\n+                abort ();\n+            if (test_out[3] != -559.125000)\n+                abort ();\n+        }\n+    }\n+return 0;\n+}\n+\n+\n+int main(void)\n+{\n+  altivec_cell_check ();\n+  return main1();\n+}"}, {"sha": "cadcd365d6df1c50f0dc808a0b454258f0b6a3fc", "filename": "gcc/testsuite/gcc.target/powerpc/altivec_check.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b61703ca6adde635f58c71763a524b8fd922009/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h?ref=0b61703ca6adde635f58c71763a524b8fd922009", "patch": "@@ -22,3 +22,17 @@ void altivec_check(void) {\n #endif\n   signal (SIGILL, SIG_DFL);\n }\n+\n+void altivec_cell_check (void)\n+{\n+  /* Exit on systems without the Cell Altivec instructions.  */\n+  signal (SIGILL, sig_ill_handler);\n+#ifdef __MACH__\n+  asm volatile (\"vor v0,v0,v0\");\n+  asm volatile (\"lvlx v0,r0,r0\");\n+#else\n+  asm volatile (\"vor 0,0,0\");\n+  asm volatile (\"lvlx 0,0,0\");\n+#endif\n+  signal (SIGILL, SIG_DFL);\n+}"}]}