{"sha": "16934bbf731f4cd735b9d93d6695f181c7ec59ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5MzRiYmY3MzFmNGNkNzM1YjlkOTNkNjY5NWYxODFjN2VjNTllZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-27T09:44:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-27T09:44:27Z"}, "message": "trans.c (gnat_to_gnu): Avoid making a SAVE_EXPR for a call to a function that returns an unconstrained...\n\n\t* gcc-interface/trans.c (gnat_to_gnu): Avoid making a SAVE_EXPR for\n\ta call to a function that returns an unconstrained type with default\n\tdiscriminant. \u00a0Similarly, avoid doing the conversion to the nominal\n\nFrom-SVN: r183610", "tree": {"sha": "8b72c024f549eb65189d83149eef0e1725f5c97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b72c024f549eb65189d83149eef0e1725f5c97c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16934bbf731f4cd735b9d93d6695f181c7ec59ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16934bbf731f4cd735b9d93d6695f181c7ec59ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16934bbf731f4cd735b9d93d6695f181c7ec59ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16934bbf731f4cd735b9d93d6695f181c7ec59ef/comments", "author": null, "committer": null, "parents": [{"sha": "5f2e59d44bc4aa1dd5e2fd9d2b412b85519fb39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2e59d44bc4aa1dd5e2fd9d2b412b85519fb39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2e59d44bc4aa1dd5e2fd9d2b412b85519fb39d"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "2b9db093cabf5efcc1310ce9eda0e9fd3af314aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16934bbf731f4cd735b9d93d6695f181c7ec59ef", "patch": "@@ -1,3 +1,10 @@\n+2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu): Avoid making a SAVE_EXPR for\n+\ta call to a function that returns an unconstrained type with default\n+\tdiscriminant. \ufffdSimilarly, avoid doing the conversion to the nominal\n+\tresult type in this case.\n+\n 2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_ALIASED_P): New flag."}, {"sha": "53a277e368f0b35e035fc60f03cc8b2240368fcb", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=16934bbf731f4cd735b9d93d6695f181c7ec59ef", "patch": "@@ -6869,10 +6869,14 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t    N_Raise_Constraint_Error));\n     }\n \n-  /* If our result has side-effects and is of an unconstrained type,\n-     make a SAVE_EXPR so that we can be sure it will only be referenced\n-     once.  Note we must do this before any conversions.  */\n+  /* If the result has side-effects and is of an unconstrained type, make a\n+     SAVE_EXPR so that we can be sure it will only be referenced once.  But\n+     this is useless for a call to a function that returns an unconstrained\n+     type with default discriminant, as we cannot compute the size of the\n+     actual returned object.  We must do this before any conversions.  */\n   if (TREE_SIDE_EFFECTS (gnu_result)\n+      && !(TREE_CODE (gnu_result) == CALL_EXPR\n+\t   && TYPE_IS_PADDING_P (TREE_TYPE (gnu_result)))\n       && (TREE_CODE (gnu_result_type) == UNCONSTRAINED_ARRAY_TYPE\n \t  || CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_result_type))))\n     gnu_result = gnat_stabilize_reference (gnu_result, false, NULL);\n@@ -6898,7 +6902,11 @@ gnat_to_gnu (Node_Id gnat_node)\n        3. If the type is void or if we have no result, return error_mark_node\n \t  to show we have no result.\n \n-       4. Finally, if the type of the result is already correct.  */\n+       4. If this a call to a function that returns an unconstrained type with\n+\t  default discriminant, return the call expression unmodified since we\n+\t  cannot compute the size of the actual returned object.\n+\n+       5. Finally, if the type of the result is already correct.  */\n \n   if (Present (Parent (gnat_node))\n       && (lhs_or_actual_p (gnat_node)\n@@ -6949,7 +6957,19 @@ gnat_to_gnu (Node_Id gnat_node)\n   else if (gnu_result == error_mark_node || gnu_result_type == void_type_node)\n     gnu_result = error_mark_node;\n \n-  else if (gnu_result_type != TREE_TYPE (gnu_result))\n+  else if (TREE_CODE (gnu_result) == CALL_EXPR\n+\t   && TYPE_IS_PADDING_P (TREE_TYPE (gnu_result))\n+\t   && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_result_type)))\n+    {\n+      /* ??? We need to convert if the padded type has fixed size because\n+\t gnat_types_compatible_p will say that padded types are compatible\n+\t but the gimplifier will not and, therefore, will ultimately choke\n+\t if there isn't a conversion added early.  */\n+      if (TREE_CODE (TYPE_SIZE (TREE_TYPE (gnu_result))) == INTEGER_CST)\n+\tgnu_result = convert (gnu_result_type, gnu_result);\n+    }\n+\n+  else if (TREE_TYPE (gnu_result) != gnu_result_type)\n     gnu_result = convert (gnu_result_type, gnu_result);\n \n   /* We don't need any NOP_EXPR or NON_LVALUE_EXPR on the result.  */"}, {"sha": "a1844b7cf9033383786ac17401e1ff0f60b24dc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16934bbf731f4cd735b9d93d6695f181c7ec59ef", "patch": "@@ -1,3 +1,8 @@\n+2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr34.adb: New test.\n+\t* gnat.dg/discr34_pkg.ads: New helper.\n+\n 2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr33.adb: New test."}, {"sha": "7beab9540d0ade9ea4b906f600cc315cd86db7fb", "filename": "gcc/testsuite/gnat.dg/discr34.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34.adb?ref=16934bbf731f4cd735b9d93d6695f181c7ec59ef", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+\n+with Discr34_Pkg; use Discr34_Pkg;\n+\n+procedure Discr34 is\n+   Object : Rec := F;\n+begin\n+   null;\n+end;"}, {"sha": "9a3380e371d2ae5527581aab170b582abc5d74a1", "filename": "gcc/testsuite/gnat.dg/discr34_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16934bbf731f4cd735b9d93d6695f181c7ec59ef/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr34_pkg.ads?ref=16934bbf731f4cd735b9d93d6695f181c7ec59ef", "patch": "@@ -0,0 +1,16 @@\n+package Discr34_Pkg is\n+\n+   function N return Natural;\n+\n+   type Enum is (One, Two);\n+\n+   type Rec (D : Enum := One) is record\n+      case D is\n+\t when One => S : String (1 .. N);\n+\t when Two => null;\n+      end case;\n+   end record;\n+\n+   function F return Rec;\n+\n+end Discr34_Pkg;"}]}