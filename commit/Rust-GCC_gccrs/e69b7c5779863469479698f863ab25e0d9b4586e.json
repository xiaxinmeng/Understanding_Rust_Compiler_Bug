{"sha": "e69b7c5779863469479698f863ab25e0d9b4586e", "node_id": "C_kwDOANBUbNoAKGU2OWI3YzU3Nzk4NjM0Njk0Nzk2OThmODYzYWIyNWUwZDliNDU4NmU", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-16T08:15:39Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-16T08:15:39Z"}, "message": "Fix uninitialized access in merge_call_side_effects\n\ngcc/ChangeLog:\n\n\tPR ipa/103262\n\t* ipa-modref.c (merge_call_side_effects): Fix uninitialized\n\taccess.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/modref-dse-5.c: New test.", "tree": {"sha": "39a1c905620184bd8c6fd9782d0123e7c6b9acaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a1c905620184bd8c6fd9782d0123e7c6b9acaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69b7c5779863469479698f863ab25e0d9b4586e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69b7c5779863469479698f863ab25e0d9b4586e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69b7c5779863469479698f863ab25e0d9b4586e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69b7c5779863469479698f863ab25e0d9b4586e/comments", "author": null, "committer": null, "parents": [{"sha": "3200de91bc70bfd6d4b7b40e769bc82756b9b555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3200de91bc70bfd6d4b7b40e769bc82756b9b555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3200de91bc70bfd6d4b7b40e769bc82756b9b555"}], "stats": {"total": 107, "additions": 75, "deletions": 32}, "files": [{"sha": "5783430329040288a8e73862d3baf208429a3df3", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69b7c5779863469479698f863ab25e0d9b4586e/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69b7c5779863469479698f863ab25e0d9b4586e/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=e69b7c5779863469479698f863ab25e0d9b4586e", "patch": "@@ -1014,38 +1014,6 @@ merge_call_side_effects (modref_summary *cur_summary,\n       changed = true;\n     }\n \n-  if (always_executed\n-      && callee_summary->kills.length ()\n-      && (!cfun->can_throw_non_call_exceptions\n-\t  || !stmt_could_throw_p (cfun, stmt)))\n-    {\n-      /* Watch for self recursive updates.  */\n-      auto_vec<modref_access_node, 32> saved_kills;\n-\n-      saved_kills.reserve_exact (callee_summary->kills.length ());\n-      saved_kills.splice (callee_summary->kills);\n-      for (auto kill : saved_kills)\n-\t{\n-\t  if (kill.parm_index >= (int)parm_map.length ())\n-\t    continue;\n-\t  modref_parm_map &m\n-\t\t  = kill.parm_index == MODREF_STATIC_CHAIN_PARM\n-\t\t    ? chain_map\n-\t\t    : parm_map[kill.parm_index];\n-\t  if (m.parm_index == MODREF_LOCAL_MEMORY_PARM\n-\t      || m.parm_index == MODREF_UNKNOWN_PARM\n-\t      || m.parm_index == MODREF_RETSLOT_PARM\n-\t      || !m.parm_offset_known)\n-\t    continue;\n-\t  modref_access_node n = kill;\n-\t  n.parm_index = m.parm_index;\n-\t  n.parm_offset += m.parm_offset;\n-\t  if (modref_access_node::insert_kill (cur_summary->kills, n,\n-\t\t\t\t\t       record_adjustments))\n-\t    changed = true;\n-\t}\n-    }\n-\n   /* We can not safely optimize based on summary of callee if it does\n      not always bind to current def: it is possible that memory load\n      was optimized out earlier which may not happen in the interposed\n@@ -1095,6 +1063,38 @@ merge_call_side_effects (modref_summary *cur_summary,\n   if (dump_file)\n     fprintf (dump_file, \"\\n\");\n \n+  if (always_executed\n+      && callee_summary->kills.length ()\n+      && (!cfun->can_throw_non_call_exceptions\n+\t  || !stmt_could_throw_p (cfun, stmt)))\n+    {\n+      /* Watch for self recursive updates.  */\n+      auto_vec<modref_access_node, 32> saved_kills;\n+\n+      saved_kills.reserve_exact (callee_summary->kills.length ());\n+      saved_kills.splice (callee_summary->kills);\n+      for (auto kill : saved_kills)\n+\t{\n+\t  if (kill.parm_index >= (int)parm_map.length ())\n+\t    continue;\n+\t  modref_parm_map &m\n+\t\t  = kill.parm_index == MODREF_STATIC_CHAIN_PARM\n+\t\t    ? chain_map\n+\t\t    : parm_map[kill.parm_index];\n+\t  if (m.parm_index == MODREF_LOCAL_MEMORY_PARM\n+\t      || m.parm_index == MODREF_UNKNOWN_PARM\n+\t      || m.parm_index == MODREF_RETSLOT_PARM\n+\t      || !m.parm_offset_known)\n+\t    continue;\n+\t  modref_access_node n = kill;\n+\t  n.parm_index = m.parm_index;\n+\t  n.parm_offset += m.parm_offset;\n+\t  if (modref_access_node::insert_kill (cur_summary->kills, n,\n+\t\t\t\t\t       record_adjustments))\n+\t    changed = true;\n+\t}\n+    }\n+\n   /* Merge with callee's summary.  */\n   changed |= cur_summary->loads->merge (callee_summary->loads, &parm_map,\n \t\t\t\t\t&chain_map, record_adjustments);"}, {"sha": "ad35b70136f2103c8f2d84bbd091a5c4d606dd9b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/modref-dse-5.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69b7c5779863469479698f863ab25e0d9b4586e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69b7c5779863469479698f863ab25e0d9b4586e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-5.c?ref=e69b7c5779863469479698f863ab25e0d9b4586e", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse2-details\"  } */\n+struct a {int a,b,c;};\n+__attribute__ ((noinline))\n+void\n+kill_me (struct a *a)\n+{\n+  a->a=0;\n+  a->b=0;\n+  a->c=0;\n+}\n+__attribute__ ((noinline))\n+int\n+wrap(int b, struct a *a)\n+{\n+   kill_me (a);\n+   return b;\n+}\n+__attribute__ ((noinline))\n+void\n+my_pleasure (struct a *a)\n+{\n+  a->a=1;\n+  a->c=2;\n+}\n+__attribute__ ((noinline))\n+int\n+wrap2(int b, struct a *a)\n+{\n+   my_pleasure (a);\n+   return b;\n+}\n+\n+int\n+set (struct a *a)\n+{\n+  wrap (0, a);\n+  int ret = wrap2 (0, a);\n+  //int ret = my_pleasure (a);\n+  a->b=1;\n+  return ret;\n+}\n+/* { dg-final { scan-tree-dump \"Deleted dead store: wrap\" \"dse2\" } } */"}]}