{"sha": "d7e5d7feae8162262948978355a6a1c8aebb9b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlNWQ3ZmVhZTgxNjIyNjI5NDg5NzgzNTVhNmExYzhhZWJiOWI5ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-07T15:10:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-07T15:10:58Z"}, "message": "toplev.c (rest_of_compilation): Revert previous patch.\n\n\n\t* toplev.c (rest_of_compilation): Revert previous patch.\n\t* final.c (shorten_branches): Likewise.\n\nFrom-SVN: r42961", "tree": {"sha": "5711fd02bcbda756226623b9aba91fcf6b11ba33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5711fd02bcbda756226623b9aba91fcf6b11ba33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e5d7feae8162262948978355a6a1c8aebb9b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e5d7feae8162262948978355a6a1c8aebb9b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e5d7feae8162262948978355a6a1c8aebb9b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e5d7feae8162262948978355a6a1c8aebb9b9d/comments", "author": null, "committer": null, "parents": [{"sha": "f9b23f0c9c6cf618fda3a6f3a3ba819a24c2f571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b23f0c9c6cf618fda3a6f3a3ba819a24c2f571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b23f0c9c6cf618fda3a6f3a3ba819a24c2f571"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "00352ed4d367b690ee66b77c346f449fe03c52c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7e5d7feae8162262948978355a6a1c8aebb9b9d", "patch": "@@ -1,3 +1,8 @@\n+Thu Jun  7 17:09:50 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (rest_of_compilation): Revert previous patch.\n+\t* final.c (shorten_branches): Likewise.\n+\n 2001-06-07  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* pself.c, pself1.c, pself2.c, pself3.c, pself4.c, pself5.c:"}, {"sha": "7b36b1b41020b44e577f775fca857c60035c1e70", "filename": "gcc/final.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d7e5d7feae8162262948978355a6a1c8aebb9b9d", "patch": "@@ -960,6 +960,26 @@ shorten_branches (first)\n   int uid;\n   rtx align_tab[MAX_CODE_ALIGN];\n \n+  /* In order to make sure that all instructions have valid length info,\n+     we must split them before we compute the address/length info.  */\n+\n+  for (insn = NEXT_INSN (first); insn; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      {\n+\trtx old = insn;\n+\t/* Don't split the insn if it has been deleted.  */\n+\tif (! INSN_DELETED_P (old))\n+\t  insn = try_split (PATTERN (old), old, 1);\n+\t/* When not optimizing, the old insn will be still left around\n+\t   with only the 'deleted' bit set.  Transform it into a note\n+\t   to avoid confusion of subsequent processing.  */\n+\tif (INSN_DELETED_P (old))\n+\t  {\n+\t    PUT_CODE (old, NOTE);\n+\t    NOTE_LINE_NUMBER (old) = NOTE_INSN_DELETED;\n+\t    NOTE_SOURCE_FILE (old) = 0;\n+\t  }\n+      }\n #endif\n \n   /* We must do some computations even when not actually shortening, in"}, {"sha": "ba0864109b68f6869bb1e2c3dde220d23fa50688", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e5d7feae8162262948978355a6a1c8aebb9b9d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d7e5d7feae8162262948978355a6a1c8aebb9b9d", "patch": "@@ -3685,16 +3685,18 @@ rest_of_compilation (decl)\n     }\n #endif\n \n-  timevar_push (TV_SHORTEN_BRANCH);\n-  if (0\n-#ifdef HAVE_ATTR_length\n-      || 1\n-#endif\n-#ifdef STACK_REGS\n-      || 1\n+#ifndef STACK_REGS\n+  /* ??? Do this before shorten branches so that we aren't creating\n+     insns too late and fail sanity checks in final. */\n+  convert_to_eh_region_ranges ();\n #endif\n-      )\n-    split_all_insns (0);\n+\n+  /* Shorten branches.\n+\n+     Note this must run before reg-stack because of death note (ab)use\n+     in the ia32 backend.  */\n+  timevar_push (TV_SHORTEN_BRANCH);\n+  shorten_branches (get_insns ());\n   timevar_pop (TV_SHORTEN_BRANCH);\n \n #ifdef STACK_REGS\n@@ -3707,14 +3709,9 @@ rest_of_compilation (decl)\n   timevar_pop (TV_REG_STACK);\n \n   ggc_collect ();\n-#endif\n \n   convert_to_eh_region_ranges ();\n-\n-  /* Shorten branches.  */\n-  timevar_push (TV_SHORTEN_BRANCH);\n-  shorten_branches (get_insns ());\n-  timevar_pop (TV_SHORTEN_BRANCH);\n+#endif\n \n   current_function_nothrow = nothrow_function_p ();\n   if (current_function_nothrow)"}]}