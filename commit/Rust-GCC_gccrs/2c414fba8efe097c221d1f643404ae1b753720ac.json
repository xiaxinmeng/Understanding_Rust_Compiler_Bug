{"sha": "2c414fba8efe097c221d1f643404ae1b753720ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0MTRmYmE4ZWZlMDk3YzIyMWQxZjY0MzQwNGFlMWI3NTM3MjBhYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-17T11:34:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-17T11:34:23Z"}, "message": "(expand_mult): Bound second synth_mult cost by cost of algorithm from\nfirst call.\n\n(expand_divmod): When doing logical operations, the size of\nCOMPUTE_MODE should be used, not MODE.\n\nFrom-SVN: r1869", "tree": {"sha": "2be9f00ca70dcb2322341e438e7cebc4c7aac7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be9f00ca70dcb2322341e438e7cebc4c7aac7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c414fba8efe097c221d1f643404ae1b753720ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c414fba8efe097c221d1f643404ae1b753720ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c414fba8efe097c221d1f643404ae1b753720ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c414fba8efe097c221d1f643404ae1b753720ac/comments", "author": null, "committer": null, "parents": [{"sha": "05c0fbb8bcbee55bf0b21bd1eb8201f2fda07240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c0fbb8bcbee55bf0b21bd1eb8201f2fda07240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c0fbb8bcbee55bf0b21bd1eb8201f2fda07240"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "2534f57e854478eb7755cc2fc03035e27e3f3a5e", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c414fba8efe097c221d1f643404ae1b753720ac/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c414fba8efe097c221d1f643404ae1b753720ac/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=2c414fba8efe097c221d1f643404ae1b753720ac", "patch": "@@ -1982,7 +1982,8 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \n       alg = synth_mult (absval, add_cost, shift_cost, mult_cost);\n       neg_alg = synth_mult (- absval, add_cost, shift_cost,\n-\t\t\t    mult_cost - negate_cost);\n+\t\t\t    (alg.cost >= 0 ? alg.cost : mult_cost)\n+\t\t\t    - negate_cost);\n \n       if (neg_alg.cost >= 0 && neg_alg.cost + negate_cost < alg.cost)\n \talg = neg_alg, negate = 1, absval = - absval;\n@@ -2151,6 +2152,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n   register rtx result = 0;\n   enum machine_mode compute_mode;\n   int log = -1;\n+  int size;\n   int can_clobber_op0;\n   int mod_insn_no_good = 0;\n   rtx adjusted_op0 = op0;\n@@ -2247,6 +2249,8 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n   if (compute_mode == VOIDmode)\n     compute_mode = mode;\n \n+  size = GET_MODE_BITSIZE (compute_mode);\n+\n   /* Now convert to the best mode to use.  Show we made a copy of OP0\n      and hence we can clobber it (we cannot use a SUBREG to widen\n      something.  */\n@@ -2299,8 +2303,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t      temp = expand_shift (RSHIFT_EXPR, compute_mode, temp,\n \t\t\t\t   build_int_2 (log - 1, 0), NULL_RTX, 0);\n \t      temp = expand_shift (RSHIFT_EXPR, compute_mode, temp,\n-\t\t\t\t   build_int_2 (GET_MODE_BITSIZE (mode) - log,\n-\t\t\t\t\t\t0),\n+\t\t\t\t   build_int_2 (size - log, 0),\n \t\t\t\t   temp, 1);\n \t      expand_inc (adjusted_op0, temp);\n \t    }\n@@ -2398,7 +2401,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t  rtx temp = gen_reg_rtx (compute_mode);\n \t\t  temp = copy_to_suggested_reg (adjusted_op0, temp, compute_mode);\n \t\t  temp = expand_shift (RSHIFT_EXPR, compute_mode, temp,\n-\t\t\t\t       build_int_2 (GET_MODE_BITSIZE (mode) - 1, 0),\n+\t\t\t\t       build_int_2 (size - 1, 0),\n \t\t\t\t       NULL_RTX, 0);\n \t\t  op1 = expand_binop (compute_mode, xor_optab, op1, temp, op1,\n \t\t\t\t      unsignedp, OPTAB_LIB_WIDEN);"}]}