{"sha": "583a92e874b21a1c7422fadb1153b25a9e647468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzYTkyZTg3NGIyMWExYzc0MjJmYWRiMTE1M2IyNWE5ZTY0NzQ2OA==", "commit": {"author": {"name": "SUGIOKA Toshinobu", "email": "sugioka@itonet.co.jp", "date": "2005-07-22T22:56:27Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-22T22:56:27Z"}, "message": "sysv.S (ffi_call_SYSV): Stop argument popping correctly on sh3.\n\n\t* src/sh/sysv.S (ffi_call_SYSV): Stop argument popping correctly\n\ton sh3.\n\t(ffi_closure_SYSV): Change the stack layout for sh3 struct argument.\n\t* src/sh/ffi.c (ffi_prep_args): Fix sh3 argument copy, when it is\n\tpartially on register.\n\t(ffi_closure_helper_SYSV): Likewise.\n\t(ffi_prep_cif_machdep): Don't set too many cif->flags.\n\nFrom-SVN: r102298", "tree": {"sha": "37e80c18a11c400becc87af9f9e7d35276a41c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e80c18a11c400becc87af9f9e7d35276a41c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/583a92e874b21a1c7422fadb1153b25a9e647468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583a92e874b21a1c7422fadb1153b25a9e647468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583a92e874b21a1c7422fadb1153b25a9e647468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583a92e874b21a1c7422fadb1153b25a9e647468/comments", "author": null, "committer": null, "parents": [{"sha": "46a2c9d2d1b33dae4c6cef7c03657c4eaf026439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a2c9d2d1b33dae4c6cef7c03657c4eaf026439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46a2c9d2d1b33dae4c6cef7c03657c4eaf026439"}], "stats": {"total": 118, "additions": 78, "deletions": 40}, "files": [{"sha": "f61684c056cba2014392cd7b88fc3412c3a44268", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=583a92e874b21a1c7422fadb1153b25a9e647468", "patch": "@@ -1,3 +1,13 @@\n+2005-07-22  SUGIOKA Toshinobu  <sugioka@itonet.co.jp>\n+\n+\t* src/sh/sysv.S (ffi_call_SYSV): Stop argument popping correctly\n+\ton sh3.\n+\t(ffi_closure_SYSV): Change the stack layout for sh3 struct argument.\n+\t* src/sh/ffi.c (ffi_prep_args): Fix sh3 argument copy, when it is\n+\tpartially on register.\n+\t(ffi_closure_helper_SYSV): Likewise.\n+\t(ffi_prep_cif_machdep): Don't set too many cif->flags.\n+\n 2005-07-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* src/sh/ffi.c (ffi_call): Handle small structures correctly."}, {"sha": "38449e9e6c117c74d32aa95eb42beea9f1e2c45d", "filename": "libffi/src/sh/ffi.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2Fsrc%2Fsh%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2Fsrc%2Fsh%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fffi.c?ref=583a92e874b21a1c7422fadb1153b25a9e647468", "patch": "@@ -210,15 +210,11 @@ void ffi_prep_args(char *stack, extended_cif *ecif)\n #if defined(__SH4__)\n \t  if (greg + n - 1 >= NGREGARG)\n \t    continue;\n-\t  greg += n;\n #else\n \t  if (greg >= NGREGARG)\n \t    continue;\n-\t  else if (greg + n - 1 >= NGREGARG)\n-\t    greg = NGREGARG;\n-\t  else\n-\t    greg += n;\n #endif\n+\t  greg += n;\n \t  memcpy (argp, *p_argv, z);\n \t  argp += n * sizeof (int);\n \t}\n@@ -380,9 +376,8 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n       if (greg >= NGREGARG)\n \tcontinue;\n       else if (greg + n - 1 >= NGREGARG)\n-\tgreg = NGREGARG;\n-      else\n-\tgreg += n;\n+\tn = NGREGARG - greg;\n+      greg += n;\n       for (m = 0; m < n; m++)\n         cif->flags += FFI_TYPE_INT << (2 * j++);\n     }\n@@ -628,15 +623,11 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n #if defined(__SH4__)\n \t  if (greg + n - 1 >= NGREGARG)\n \t    continue;\n-\t  greg += n;\n #else\n \t  if (greg >= NGREGARG)\n \t    continue;\n-\t  else if (greg + n - 1 >= NGREGARG)\n-\t    greg = NGREGARG;\n-\t  else\n-\t    greg += n;\n #endif\n+\t  greg += n;\n \t  avalue[i] = pgr;\n \t  pgr += n;\n \t}\n@@ -720,7 +711,8 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n #if (! defined(__SH4__))\n \t  else if (greg < NGREGARG)\n \t    {\n-\t      greg = NGREGARG;\n+\t      greg += n;\n+\t      pst += greg - NGREGARG;\n \t      continue;\n \t    }\n #endif"}, {"sha": "c9002a75027c3fc81b147b5aaf7a278870f8c370", "filename": "libffi/src/sh/sysv.S", "status": "modified", "additions": 62, "deletions": 26, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2Fsrc%2Fsh%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583a92e874b21a1c7422fadb1153b25a9e647468/libffi%2Fsrc%2Fsh%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fsysv.S?ref=583a92e874b21a1c7422fadb1153b25a9e647468", "patch": "@@ -401,6 +401,9 @@ L_pop_d:\n \t mov.l\t@r15+,r7\n \n L_pass_i:\n+\tcmp/eq\t#FFI_TYPE_INT,r0\n+\tbf\tL_call_it\n+\n \tmov\t#8,r0\n \tcmp/hs\tr0,r2\n \tbt/s\t2f\n@@ -492,39 +495,42 @@ L_epilogue:\n \n ENTRY(ffi_closure_SYSV)\n .LFB2:\n-\tmov.l\tr14,@-r15\n+\tmov.l\tr7,@-r15\n .LCFI7:\n+\tmov.l\tr6,@-r15\n+.LCFI8:\n+\tmov.l\tr5,@-r15\n+.LCFI9:\n+\tmov.l\tr4,@-r15\n+.LCFIA:\n+\tmov.l\tr14,@-r15\n+.LCFIB:\n \tsts.l\tpr,@-r15\n \n \t/* Stack layout:\t\n-\t   ...\n-\t   32 bytes (floating register parameters, SH-4 only)\n+\t   xx bytes (on stack parameters)\n \t   16 bytes (register parameters)\n+\t    4 bytes (saved frame pointer)\n+\t    4 bytes (saved return address)\n+\t   32 bytes (floating register parameters, SH-4 only)\n \t    8 bytes (result)\n \t    4 bytes (pad)\n \t    4 bytes (5th arg)\n \t   <- new stack pointer\n \t*/\n-.LCFI8:\n+.LCFIC:\n #if defined(__SH4__)\n-\tadd\t#-64,r15\n+\tadd\t#-48,r15\n #else\n-\tadd\t#-32,r15\n+\tadd\t#-16,r15\n #endif\n-.LCFI9:\n+.LCFID:\n \tmov\tr15,r14\n-.LCFIA:\n-\tmov\tr14,r1\n-\tadd\t#32,r1\n-\tmov.l\tr7,@-r1\n-\tmov.l\tr6,@-r1\n-\tmov.l\tr5,@-r1\n-\tmov.l\tr4,@-r1\n-\tmov\tr1,r6\n+.LCFIE:\n \n #if defined(__SH4__)\n \tmov\tr14,r1\n-\tadd\t#64,r1\n+\tadd\t#48,r1\n #ifdef __LITTLE_ENDIAN__\n \tfmov.s\tfr10,@-r1\n \tfmov.s\tfr11,@-r1\n@@ -545,6 +551,11 @@ ENTRY(ffi_closure_SYSV)\n \tfmov.s\tfr4,@-r1\n #endif\n \tmov\tr1,r7\n+\tmov\tr14,r6\n+\tadd\t#56,r6\n+#else\n+\tmov\tr14,r6\n+\tadd\t#24,r6\n #endif\n \n \tbt/s\t10f\n@@ -678,13 +689,14 @@ L_case_uh:\n \n L_case_v:\n #if defined(__SH4__)\n-\tadd\t#64,r15\n+\tadd\t#48,r15\n #else\n-\tadd\t#32,r15\n+\tadd\t#16,r15\n #endif\n \tlds.l\t@r15+,pr\n+\tmov.l\t@r15+,r14\n \trts\n-\t mov.l\t@r15+,r14\n+\t add\t#16,r15\n .LFE2:\n .ffi_closure_SYSV_end:\n         .size    CNAME(ffi_closure_SYSV),.ffi_closure_SYSV_end-CNAME(ffi_closure_SYSV)\n@@ -788,21 +800,45 @@ __FRAME_BEGIN__:\n \t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n \t.4byte\t.LCFI8-.LCFI7\n \t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n-\t.byte\t0x8\t/* uleb128 0x8 */\n+\t.byte\t0x8\t/* uleb128 0x4 */\n \t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n \t.4byte\t.LCFI9-.LCFI8\n \t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0xc\t/* uleb128 0x4 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t.LCFIA-.LCFI9\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x10\t/* uleb128 0x4 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t.LCFIB-.LCFIA\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x14\t/* uleb128 0x4 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t.LCFIC-.LCFIB\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x18\t/* uleb128 0x4 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t.LCFID-.LCFIC\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n #if defined(__SH4__)\n-\t.byte\t8+64\t/* uleb128 8+64 */\n+\t.byte\t24+48\t/* uleb128 24+48 */\n #else\n-\t.byte\t8+32\t/* uleb128 8+32 */\n+\t.byte\t24+16\t/* uleb128 24+16 */\n #endif\n \t.byte\t0x91\t/* DW_CFA_offset, column 0x11 */\n-        .byte\t0x2\n-        .byte\t0x8e\t/* DW_CFA_offset, column 0xe */\n-        .byte\t0x1\n+\t.byte\t0x6\t/* uleb128 0x6 */\n+\t.byte\t0x8e\t/* DW_CFA_offset, column 0xe */\n+\t.byte\t0x5\t/* uleb128 0x5 */\n+\t.byte\t0x8b\t/* DW_CFA_offset, column 0xb */\n+\t.byte\t0x4\t/* uleb128 0x4 */\n+\t.byte\t0x8a\t/* DW_CFA_offset, column 0xa */\n+\t.byte\t0x3\t/* uleb128 0x3 */\n+\t.byte\t0x89\t/* DW_CFA_offset, column 0x9 */\n+\t.byte\t0x2\t/* uleb128 0x2 */\n+\t.byte\t0x88\t/* DW_CFA_offset, column 0x8 */\n+\t.byte\t0x1\t/* uleb128 0x1 */\n \t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n-\t.4byte\t.LCFIA-.LCFI9\n+\t.4byte\t.LCFIE-.LCFID\n \t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n \t.byte\t0xe\t/* uleb128 0xe */\n \t.align\t2"}]}