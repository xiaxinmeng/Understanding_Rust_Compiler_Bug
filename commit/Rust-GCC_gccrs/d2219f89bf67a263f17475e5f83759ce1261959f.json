{"sha": "d2219f89bf67a263f17475e5f83759ce1261959f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyMTlmODliZjY3YTI2M2YxNzQ3NWU1ZjgzNzU5Y2UxMjYxOTU5Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-02T12:22:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-02T12:22:53Z"}, "message": "vector.tcc (vector<>::_M_insert_aux): In C++0x mode, avoid a memory leak if the first __uninitialized_move_a throws.\n\n2008-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/vector.tcc (vector<>::_M_insert_aux): In C++0x mode,\n\tavoid a memory leak if the first __uninitialized_move_a throws.\n\t(vector<>::_M_fill_insert): Do not always copy to __x_copy, similarly\n\tto _M_insert_aux.\n\t* testsuite/23_containers/vector/modifiers/moveable.cc: Adjust.\n\t* testsuite/23_containers/vector/resize/moveable.cc: Likewise.\n\nFrom-SVN: r136277", "tree": {"sha": "d22ca411651d2fa41a839a449106704b1732c335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22ca411651d2fa41a839a449106704b1732c335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2219f89bf67a263f17475e5f83759ce1261959f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2219f89bf67a263f17475e5f83759ce1261959f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2219f89bf67a263f17475e5f83759ce1261959f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2219f89bf67a263f17475e5f83759ce1261959f/comments", "author": null, "committer": null, "parents": [{"sha": "690028435cafde915d313c19f320bccdf2c0c6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690028435cafde915d313c19f320bccdf2c0c6c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690028435cafde915d313c19f320bccdf2c0c6c2"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "4f6b60491fce4d377dd855f55ed296ad95d5fe3b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2219f89bf67a263f17475e5f83759ce1261959f", "patch": "@@ -1,3 +1,12 @@\n+2008-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/vector.tcc (vector<>::_M_insert_aux): In C++0x mode,\n+\tavoid a memory leak if the first __uninitialized_move_a throws.\n+\t(vector<>::_M_fill_insert): Do not always copy to __x_copy, similarly\n+\tto _M_insert_aux.\n+\t* testsuite/23_containers/vector/modifiers/moveable.cc: Adjust.\n+\t* testsuite/23_containers/vector/resize/moveable.cc: Likewise.\n+\n 2008-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Chris Jefferson  <chris@bubblescope.net>\n "}, {"sha": "462d18f6cbb858c9f3c44a71a80d774ae30a72f6", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=d2219f89bf67a263f17475e5f83759ce1261959f", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -305,22 +305,29 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t{\n \t  const size_type __len =\n \t    _M_check_len(size_type(1), \"vector::_M_insert_aux\");\n+\t  const size_type __elems_before = __position - begin();\n \t  pointer __new_start(this->_M_allocate(__len));\n \t  pointer __new_finish(__new_start);\n \t  try\n \t    {\n+\t      // The order of the three operations is dictated by the C++0x\n+\t      // case, where the moves could alter a new element belonging\n+\t      // to the existing vector.  This is an issue only for callers\n+\t      // taking the element by const lvalue ref (see 23.1/13).\n+\t      this->_M_impl.construct(__new_start + __elems_before,\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t      this->_M_impl.construct(__new_start + (__position - begin()),\n \t\t\t\t      std::forward<_Args>(__args)...);\n+#else\n+\t                              __x);\n #endif\n+\t      __new_finish = 0;\n+\n \t      __new_finish =\n \t\tstd::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t    __position.base(), __new_start,\n \t\t\t\t\t    _M_get_Tp_allocator());\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n-\t      this->_M_impl.construct(__new_finish, __x);\n-#endif\n \t      ++__new_finish;\n+\n \t      __new_finish =\n \t\tstd::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t    this->_M_impl._M_finish,\n@@ -329,7 +336,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    }\n \t  catch(...)\n \t    {\n-\t      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());\n+\t      if (!__new_finish)\n+\t\tthis->_M_impl.destroy(__new_start + __elems_before);\n+\t      else\n+\t\tstd::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());\n \t      _M_deallocate(__new_start, __len);\n \t      __throw_exception_again;\n \t    }\n@@ -351,15 +361,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     {\n       if (__n != 0)\n \t{\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t  value_type __x_copy = __x;\n-#endif\n \t  if (size_type(this->_M_impl._M_end_of_storage\n \t\t\t- this->_M_impl._M_finish) >= __n)\n \t    {\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t      value_type __x_copy = __x;\n-#endif\n \t      const size_type __elems_after = end() - __position;\n \t      pointer __old_finish(this->_M_impl._M_finish);\n \t      if (__elems_after > __n)\n@@ -392,22 +397,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    {\n \t      const size_type __len =\n \t\t_M_check_len(__n, \"vector::_M_fill_insert\");\n+\t      const size_type __elems_before = __position - begin();\n \t      pointer __new_start(this->_M_allocate(__len));\n \t      pointer __new_finish(__new_start);\n \t      try\n \t\t{\n+\t\t  // See _M_insert_aux above.\n+\t\t  std::__uninitialized_fill_n_a(__new_start + __elems_before,\n+\t\t\t\t\t\t__n, __x,\n+\t\t\t\t\t\t_M_get_Tp_allocator());\n+\t\t  __new_finish = 0;\n+\n \t\t  __new_finish =\n \t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t\t__position.base(),\n \t\t\t\t\t\t__new_start,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t\t  std::__uninitialized_fill_n_a(__new_finish, __n, __x_copy,\n-#else\n-\t\t  std::__uninitialized_fill_n_a(__new_finish, __n, __x,\n-#endif\n-\t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t  __new_finish += __n;\n+\n \t\t  __new_finish =\n \t\t    std::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n@@ -416,8 +423,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t}\n \t      catch(...)\n \t\t{\n-\t\t  std::_Destroy(__new_start, __new_finish,\n-\t\t\t\t_M_get_Tp_allocator());\n+\t\t  if (!__new_finish)\n+\t\t    std::_Destroy(__new_start + __elems_before,\n+\t\t\t\t  __new_start + __elems_before + __n,\n+\t\t\t\t  _M_get_Tp_allocator());\n+\t\t  else\n+\t\t    std::_Destroy(__new_start, __new_finish,\n+\t\t\t\t  _M_get_Tp_allocator());\n \t\t  _M_deallocate(__new_start, __len);\n \t\t  __throw_exception_again;\n \t\t}"}, {"sha": "9e466378a62cc5dac6ca3cf99a2d1002dcc5ff13", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/moveable.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc?ref=d2219f89bf67a263f17475e5f83759ce1261959f", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -104,11 +104,11 @@ test04()\n   std::vector<copycounter> a(10, c);\n   copycounter::copycount = 0;\n   a.insert(a.begin(), 20, c);\n-  VERIFY(copycounter::copycount == 20 + 1);\n+  VERIFY(copycounter::copycount == 20);\n   a.insert(a.end(), 50, c);\n-  VERIFY(copycounter::copycount == 70 + 2);\n+  VERIFY(copycounter::copycount == 70);\n   a.insert(a.begin() + 50, 100, c);\n-  VERIFY(copycounter::copycount == 170 + 3);\n+  VERIFY(copycounter::copycount == 170);\n }\n \n // Test vector::insert(iterator, count, value) makes no unneeded copies"}, {"sha": "f24babc079286e44b8c6b5de6f812171445d0c79", "filename": "libstdc++-v3/testsuite/23_containers/vector/resize/moveable.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2219f89bf67a263f17475e5f83759ce1261959f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc?ref=d2219f89bf67a263f17475e5f83759ce1261959f", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,28 +51,28 @@ test01()\n   a.resize(99);\n   a.resize(100);\n #ifndef _GLIBCXX_DEBUG\n-  VERIFY( copycounter::copycount == 100 + 4 );\n+  VERIFY( copycounter::copycount == 100 + 1 );\n #else\n-  VERIFY( copycounter::copycount == 100 + 4 + 4 );\n+  VERIFY( copycounter::copycount == 100 + 1 + 4 );\n #endif\n   a.resize(99);\n   a.resize(0);\n #ifndef _GLIBCXX_DEBUG\n-  VERIFY( copycounter::copycount == 100 + 4 );\n+  VERIFY( copycounter::copycount == 100 + 1 );\n #else\n-  VERIFY( copycounter::copycount == 100 + 4 + 6 );\n+  VERIFY( copycounter::copycount == 100 + 1 + 6 );\n #endif\n   a.resize(100);\n #ifndef _GLIBCXX_DEBUG  \n-  VERIFY( copycounter::copycount == 200 + 5 );\n+  VERIFY( copycounter::copycount == 200 + 2 );\n #else\n-  VERIFY( copycounter::copycount == 200 + 5 + 7 );\n+  VERIFY( copycounter::copycount == 200 + 2 + 7 );\n #endif\n   a.clear();\n #ifndef _GLIBCXX_DEBUG\n-  VERIFY( copycounter::copycount == 200 + 5 );\n+  VERIFY( copycounter::copycount == 200 + 2 );\n #else\n-  VERIFY( copycounter::copycount == 200 + 5 + 7 );\n+  VERIFY( copycounter::copycount == 200 + 2 + 7 );\n #endif\n }\n "}]}