{"sha": "d427407a199a0c276cb02d6bbb64e6ecc02e590d", "node_id": "C_kwDOANBUbNoAKGQ0Mjc0MDdhMTk5YTBjMjc2Y2IwMmQ2YmJiNjRlNmVjYzAyZTU5MGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T09:41:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T09:41:10Z"}, "message": "openmp, c++: Workaround fold_for_warn ICE on invalid OpenMP collapsed loops [PR108503]\n\nMy recent change to deduce structured binding vars earlier caused the following\ninvalid testcase to ICE.  The problem is that because at cp_convert_omp_range_for\nwhen !processing_template_decl we aren't yet ready to finalize the structured bindings\n(e.g. can't emit there associated code) but need to deduce types of the vars so that\nwe don't get errors if we parse invalid uses of those vars in inner loops of the\ncollapsed construct.  This is done by temporarily bumping processing_template_decl\naround the call to cp_finish_decomp.  Unfortunately, as we can't finalize it yet,\nthe types of the vars will be deduced, but their DECL_VALUE_EXPR is not finalized\nyet and if say fold_for_warn tries to constant expression evaluate them, it\nrecurses on DECL_VALUE_EXPR and ICEs because it sees e.g. ARRAY_REF (with NULL type)\non a VAR_DECL with class type.\n\nThe following patch works around that by temporarily hiding the DECL_VALUE_EXPRs\nby clearing DECL_HAS_VALUE_EXPR_P in that case during cp_convert_omp_range_for\nand arranging for cp_finish_omp_range_for to set it back before doing the\nfinal cp_finish_decomp.\n\n2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/108503\n\t* parser.cc (cp_convert_omp_range_for): If cp_finish_decomp has been\n\tcalled in !processing_template_decl with processing_template_decl\n\ttemporarily set, clear DECL_HAS_VALUE_EXPR_P on the vars temporarily.\n\t(cp_finish_omp_range_for): And set it back again here.\n\n\t* g++.dg/gomp/pr108503.C: New test.", "tree": {"sha": "5439044aec873167a5cb2421f3698f725702a88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5439044aec873167a5cb2421f3698f725702a88a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d427407a199a0c276cb02d6bbb64e6ecc02e590d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d427407a199a0c276cb02d6bbb64e6ecc02e590d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d427407a199a0c276cb02d6bbb64e6ecc02e590d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d427407a199a0c276cb02d6bbb64e6ecc02e590d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f6d05e9ad858b59b824f57d09400adcb2c5e4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6d05e9ad858b59b824f57d09400adcb2c5e4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6d05e9ad858b59b824f57d09400adcb2c5e4ad"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "e0c46d2d748db4f70bb947cdf88488398d97291d", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d427407a199a0c276cb02d6bbb64e6ecc02e590d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d427407a199a0c276cb02d6bbb64e6ecc02e590d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=d427407a199a0c276cb02d6bbb64e6ecc02e590d", "patch": "@@ -43039,6 +43039,7 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n {\n   tree begin, end, range_temp_decl = NULL_TREE;\n   tree iter_type, begin_expr, end_expr;\n+  bool clear_has_value_expr = false;\n \n   if (processing_template_decl)\n     {\n@@ -43185,6 +43186,8 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n \t      ++processing_template_decl;\n \t      cp_finish_decomp (orig_decl, decomp_first_name, decomp_cnt);\n \t      --processing_template_decl;\n+\t      if (!processing_template_decl)\n+\t\tclear_has_value_expr = true;\n \t    }\n \t}\n     }\n@@ -43193,8 +43196,20 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n   TREE_VEC_ELT (v, 0) = range_temp_decl;\n   TREE_VEC_ELT (v, 1) = end;\n   TREE_VEC_ELT (v, 2) = orig_decl;\n+  if (clear_has_value_expr)\n+    TREE_PUBLIC (v) = 1;\n   for (unsigned i = 0; i < decomp_cnt; i++)\n     {\n+      if (clear_has_value_expr)\n+\t{\n+\t  /* If cp_finish_decomp was called with processing_template_decl\n+\t     temporarily set to 1, then decomp names will have deduced\n+\t     name but the DECL_VALUE_EXPR will be dependent.  Hide those\n+\t     from folding of other loop initializers e.g. for warning\n+\t     purposes until cp_finish_omp_range_for.  */\n+\t  gcc_checking_assert (DECL_HAS_VALUE_EXPR_P (decomp_first_name));\n+\t  DECL_HAS_VALUE_EXPR_P (decomp_first_name) = 0;\n+\t}\n       TREE_VEC_ELT (v, i + 3) = decomp_first_name;\n       decomp_first_name = DECL_CHAIN (decomp_first_name);\n     }\n@@ -43217,6 +43232,18 @@ cp_finish_omp_range_for (tree orig, tree begin)\n     {\n       decomp_first_name = TREE_VEC_ELT (TREE_CHAIN (orig), 3);\n       decomp_cnt = TREE_VEC_LENGTH (TREE_CHAIN (orig)) - 3;\n+      if (TREE_PUBLIC (TREE_CHAIN (orig)))\n+\t{\n+\t  /* Undo temporary clearing of DECL_HAS_VALUE_EXPR_P done\n+\t     by cp_convert_omp_range_for above.  */\n+\t  TREE_PUBLIC (TREE_CHAIN (orig)) = 0;\n+\t  tree d = decomp_first_name;\n+\t  for (unsigned i = 0; i < decomp_cnt; i++)\n+\t    {\n+\t      DECL_HAS_VALUE_EXPR_P (d) = 1;\n+\t      d = DECL_CHAIN (d);\n+\t    }\n+\t}\n       cp_maybe_mangle_decomp (decl, decomp_first_name, decomp_cnt);\n     }\n "}, {"sha": "906d41b9a8ff0b534f4cb9cab207546a90c3ae1c", "filename": "gcc/testsuite/g++.dg/gomp/pr108503.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d427407a199a0c276cb02d6bbb64e6ecc02e590d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr108503.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d427407a199a0c276cb02d6bbb64e6ecc02e590d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr108503.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr108503.C?ref=d427407a199a0c276cb02d6bbb64e6ecc02e590d", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/108503\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options \"-Wall\" }\n+\n+namespace std {\n+  template <typename T> struct tuple_size;\n+  template <int, typename> struct tuple_element;\n+}\n+struct A {\n+  template <int I> int get () { return 1; }\n+};\n+template <> struct std::tuple_size <A> { static const int value = 3; };\n+template <int I> struct std::tuple_element <I, A> { using type = int; };\n+\n+struct B {\n+  A *begin ();\n+  A *end ();\n+};\n+\n+void\n+foo (B a)\n+{\n+  #pragma omp for collapse(2)\n+  for (auto [i, j, k] : a)\n+    for (int l = i; l < j; l += k)\t// { dg-error \"initializer expression refers to iteration variable 'i'\" }\n+      ;\t\t\t\t\t// { dg-error \"condition expression refers to iteration variable 'j'\" \"\" { target *-*-* } .-1 }\n+}\t\t\t\t\t// { dg-error \"increment expression refers to iteration variable 'k'\" \"\" { target *-*-* } .-2 }"}]}