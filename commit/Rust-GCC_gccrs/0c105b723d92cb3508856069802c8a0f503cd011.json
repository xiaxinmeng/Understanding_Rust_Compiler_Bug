{"sha": "0c105b723d92cb3508856069802c8a0f503cd011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxMDViNzIzZDkyY2IzNTA4ODU2MDY5ODAyYzhhMGY1MDNjZDAxMQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-09-21T12:33:20Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-09-21T12:33:20Z"}, "message": "Implement the Pareto distribution as an extension.\n\nFrom-SVN: r191612", "tree": {"sha": "783d76b2cdeaefd2049a63739e3471833ddb420d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783d76b2cdeaefd2049a63739e3471833ddb420d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c105b723d92cb3508856069802c8a0f503cd011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c105b723d92cb3508856069802c8a0f503cd011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c105b723d92cb3508856069802c8a0f503cd011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c105b723d92cb3508856069802c8a0f503cd011/comments", "author": null, "committer": null, "parents": [{"sha": "b7ce70b395cc04aa0ec1db5b0007879528b94e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ce70b395cc04aa0ec1db5b0007879528b94e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ce70b395cc04aa0ec1db5b0007879528b94e0f"}], "stats": {"total": 622, "additions": 617, "deletions": 5}, "files": [{"sha": "ebf0caea05f97950398e7f7ee6d10fd4184d409e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -1,3 +1,20 @@\n+2012-09-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/ext/random: Add __gnu_cxx::pareto_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::pareto_distribution<>.\n+\t* testsuite/ext/random/pareto_distribution/operators/equal.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/operators/serialize.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/operators/inequal.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\n 2012-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algobase.h (max, min): Use conditional operator.\n@@ -7,14 +24,14 @@\n \tPR libstdc++/28811\n \tPR libstdc++/54482\n \t* configure.ac (glibcxx_lt_pic_flag,\n-          glibcxx_compiler_pic_flag,\n-          glibcxx_compiler_shared_flag): New. Use them.\n+\tglibcxx_compiler_pic_flag,\n+\tglibcxx_compiler_shared_flag): New. Use them.\n \t(lt_prog_compiler_pic_CXX): Set via glibcxx_*_flag(s) above.\n \t(pic_mode): Set to default.\n \t(PIC_CXXFLAGS): Remove.\n \t* Makefile.am (PICFLAG, PICFLAG_FOR_TARGET): Remove. Comment.\n \t* libsupc++/Makefile.am: Use glibcxx_ld_pic_flag and\n-          glibcxx_compiler_shared_flag. Comment.\n+\tglibcxx_compiler_shared_flag. Comment.\n \t* src/c++11/Makefile.am: Same.\n \t* src/c++98/Makefile.am: Same.\n \t* src/Makefile.am: Use glibcxx_compiler_pic_flag.\n@@ -33,8 +50,8 @@\n \t* testsuite/Makefile.in: Same.\n \n \t* src/c++11/compatibility-atomic-c++0x.cc: Use\n-          _GLIBCXX_SHARED instead of PIC to designate shared-only\n-          code blocks.\n+\t_GLIBCXX_SHARED instead of PIC to designate shared-only\n+\tcode blocks.\n \t* src/c++11/compatibility-c++0x.cc: Same.\n \t* src/c++11/compatibility-thread-c++0x.cc: Same.\n \t* src/c++98/compatibility-list-2.cc: Same."}, {"sha": "b2ef546ae4734277460196273fd5a14713afe3f9", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -1360,6 +1360,242 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const nakagami_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A Pareto continuous distribution for random numbers.\n+   *\n+   * The formula for the Pareto cumulative probability function is\n+   * @f[\n+   *     P(x|\\alpha,\\mu) = 1 - \\left(\\frac{\\mu}{x}\\right)^\\alpha\n+   * @f]\n+   * The formula for the Pareto probability density function is\n+   * @f[\n+   *     p(x|\\alpha,\\mu) = \\frac{\\alpha + 1}{\\mu}\n+   *                       \\left(\\frac{\\mu}{x}\\right)^{\\alpha + 1}\n+   * @f]\n+   * where @f$x >= \\mu@f$ and @f$\\mu > 0@f$, @f$\\alpha > 0@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$\\alpha \\mu / (\\alpha - 1)@f$\n+   *              for @f$\\alpha > 1@f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$\\alpha \\mu^2 / [(\\alpha - 1)^2(\\alpha - 2)]@f$\n+   *              for @f$\\alpha > 2@f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[\\mu, \\infty)@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class\n+    pareto_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef pareto_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __alpha = result_type(1),\n+\t\t   result_type __mu = result_type(1))\n+\t: _M_alpha(__alpha), _M_mu(__mu)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > result_type(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_mu > result_type(0));\n+\t}\n+\n+\tresult_type\n+\talpha() const\n+\t{ return _M_alpha; }\n+\n+\tresult_type\n+\tmu() const\n+\t{ return _M_mu; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_alpha == __p2._M_alpha && __p1._M_mu == __p2._M_mu; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_alpha;\n+\tresult_type _M_mu;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      pareto_distribution(result_type __alpha = result_type(1),\n+\t\t\t  result_type __mu = result_type(1))\n+      : _M_param(__alpha, __mu),\n+\t_M_ud()\n+      { }\n+\n+      explicit\n+      pareto_distribution(const param_type& __p)\n+      : _M_param(__p),\n+\t_M_ud()\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      {\n+\t_M_ud.reset();\n+      }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      alpha() const\n+      { return _M_param.alpha(); }\n+\n+      result_type\n+      mu() const\n+      { return _M_param.mu(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return this->mu(); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{\n+\t  return this->mu() * std::pow(this->_M_ud(__urng),\n+\t\t\t\t       -result_type(1) / this->alpha());\n+\t}\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+        {\n+\t  return __p.mu() * std::pow(this->_M_ud(__urng),\n+\t\t\t\t\t   -result_type(1) / __p.alpha());\n+\t}\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two Pareto distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      friend bool\n+      operator==(const pareto_distribution& __d1,\n+\t\t const pareto_distribution& __d2)\n+      { return (__d1.param() == __d2.param()\n+\t\t&& __d1._M_ud == __d2._M_ud); }\n+\n+      /**\n+       * @brief Inserts a %pareto_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %pareto_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const pareto_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %pareto_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %pareto_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   pareto_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+\n+      std::uniform_real_distribution<result_type> _M_ud;\n+    };\n+\n+  /**\n+   * @brief Return true if two Pareto distributions are not equal.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const pareto_distribution<_RealType>& __d1,\n+\t       const pareto_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "18d2a18805fee60587b5ea28ef460b6dc311d170", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -848,6 +848,70 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      pareto_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\tresult_type __mu = __p.mu();\n+\tresult_type __malphinv = -result_type(1) / __p.alpha();\n+\twhile (__f != __t)\n+\t  *__f++ = __mu * std::pow(this->_M_ud(__urng), __malphinv);\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const pareto_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.alpha() << __space << __x.mu();\n+      __os << __space << __x._M_ud;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       pareto_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __alpha, __mu;\n+      __is >> __alpha >> __mu;\n+      __is >> __x._M_ud;\n+      __x.param(typename pareto_distribution<_RealType>::\n+\t\tparam_type(__alpha, __mu));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "785aad0c7110981776becc9cf810280be856edb6", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/cons/default.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template pareto_distribution [rand.dist.ext.pareto]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::pareto_distribution<> u;\n+  VERIFY( u.alpha() == 1.0 );\n+  VERIFY( u.mu() == 1.0 );\n+  VERIFY( u.min() == 1.0 );\n+  typedef __gnu_cxx::pareto_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ae958d7d887bc58e45d8f7fe704c9d9fcdcf3af0", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/cons/parms.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template pareto_distribution [rand.dist.ext.pareto]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::pareto_distribution<> u(1.5, 3.0);\n+  VERIFY( u.alpha() == 1.5 );\n+  VERIFY( u.mu() == 3.0 );\n+  VERIFY( u.min() == 3.0 );\n+  typedef __gnu_cxx::pareto_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "140310da841857e8fd617001ab56443f989b15a7", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fequal.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template pareto_distribution [rand.dist.ext.pareto]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::pareto_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f5fc6f1fa293a9bf73e2b66ebd2894995b591b18", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Finequal.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template pareto_distribution [rand.dist.ext.pareto]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::pareto_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "19dfa341b2569d438abd277167ff09053f26cb84", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Foperators%2Fserialize.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template pareto_distribution [rand.dist.ext.pareto]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::pareto_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9c2c87d219735dde1bc282f480085057e43e04c2", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::pareto_distribution<float>;\n+template class __gnu_cxx::pareto_distribution<double>;\n+template class __gnu_cxx::pareto_distribution<long double>;"}, {"sha": "a1b3355a5774f7985cd57e879ff122f865e30f1d", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c105b723d92cb3508856069802c8a0f503cd011/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Frequirements%2Ftypedefs.cc?ref=0c105b723d92cb3508856069802c8a0f503cd011", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-21  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template pareto_distribution [rand.dist.ext.pareto]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::pareto_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}