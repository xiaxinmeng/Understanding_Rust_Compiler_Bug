{"sha": "312bc27819886e45709545f607ddc8588d8f1f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyYmMyNzgxOTg4NmU0NTcwOTU0NWY2MDdkZGM4NTg4ZDhmMWY3Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-22T18:04:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-22T18:04:42Z"}, "message": "tree-ssa-live.c (create_ssa_var_map): Avoid defined-but-not-used variables due to conditional compilation.\n\n        * tree-ssa-live.c (create_ssa_var_map): Avoid defined-but-not-used\n        variables due to conditional compilation.\n\nFrom-SVN: r85053", "tree": {"sha": "d11774ba3c05afa505e2e851618abe383708ad93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d11774ba3c05afa505e2e851618abe383708ad93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312bc27819886e45709545f607ddc8588d8f1f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312bc27819886e45709545f607ddc8588d8f1f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312bc27819886e45709545f607ddc8588d8f1f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312bc27819886e45709545f607ddc8588d8f1f7f/comments", "author": null, "committer": null, "parents": [{"sha": "53b4bf74eb6a52df6b3e64e49c6fc9680f10b14e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b4bf74eb6a52df6b3e64e49c6fc9680f10b14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b4bf74eb6a52df6b3e64e49c6fc9680f10b14e"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "3c7cc552fd217512fde083f89dc8f47c428ecbb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312bc27819886e45709545f607ddc8588d8f1f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312bc27819886e45709545f607ddc8588d8f1f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=312bc27819886e45709545f607ddc8588d8f1f7f", "patch": "@@ -1,3 +1,8 @@\n+2004-07-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-ssa-live.c (create_ssa_var_map): Avoid defined-but-not-used\n+\tvariables due to conditional compilation.\n+\n 2004-07-22  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-into-ssa.c (set_livein_block): Fix typo in comment."}, {"sha": "45df501ee1b5a3826b5c9e77b7062191b22821ac", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312bc27819886e45709545f607ddc8588d8f1f7f/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312bc27819886e45709545f607ddc8588d8f1f7f/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=312bc27819886e45709545f607ddc8588d8f1f7f", "patch": "@@ -325,21 +325,21 @@ create_ssa_var_map (int flags)\n   tree dest, use;\n   tree stmt;\n   stmt_ann_t ann;\n-  vuse_optype vuses;\n-  v_may_def_optype v_may_defs;\n-  v_must_def_optype v_must_defs;\n   use_optype uses;\n   def_optype defs;\n   unsigned x;\n   var_map map;\n-#if defined ENABLE_CHECKING\n+#ifdef ENABLE_CHECKING\n   sbitmap used_in_real_ops;\n   sbitmap used_in_virtual_ops;\n+  vuse_optype vuses;\n+  v_may_def_optype v_may_defs;\n+  v_must_def_optype v_must_defs;\n #endif\n \n   map = init_var_map (num_ssa_names + 1);\n \n-#if defined ENABLE_CHECKING\n+#ifdef ENABLE_CHECKING\n   used_in_real_ops = sbitmap_alloc (num_referenced_vars);\n   sbitmap_zero (used_in_real_ops);\n \n@@ -384,7 +384,7 @@ create_ssa_var_map (int flags)\n \t      use = USE_OP (uses, x);\n \t      register_ssa_partition (map, use, true);\n \n-#if defined ENABLE_CHECKING\n+#ifdef ENABLE_CHECKING\n \t      SET_BIT (used_in_real_ops, var_ann (SSA_NAME_VAR (use))->uid);\n #endif\n \t    }\n@@ -395,40 +395,34 @@ create_ssa_var_map (int flags)\n \t      dest = DEF_OP (defs, x);\n \t      register_ssa_partition (map, dest, false);\n \n-#if defined ENABLE_CHECKING\n+#ifdef ENABLE_CHECKING\n \t      SET_BIT (used_in_real_ops, var_ann (SSA_NAME_VAR (dest))->uid);\n #endif\n \t    }\n \n-\t  /* While we do not care about virtual operands for\n-\t     out of SSA, we do need to look at them to make sure\n-\t     we mark all the variables which are used.  */\n+#ifdef ENABLE_CHECKING\n+\t  /* Validate that virtual ops don't get used in funny ways.  */\n \t  vuses = VUSE_OPS (ann);\n \t  for (x = 0; x < NUM_VUSES (vuses); x++)\n \t    {\n \t      tree var = VUSE_OP (vuses, x);\n-#if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n-#endif\n \t    }\n \n \t  v_may_defs = V_MAY_DEF_OPS (ann);\n \t  for (x = 0; x < NUM_V_MAY_DEFS (v_may_defs); x++)\n \t    {\n \t      tree var = V_MAY_DEF_OP (v_may_defs, x);\n-#if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n-#endif\n \t    }\n \t    \n \t  v_must_defs = V_MUST_DEF_OPS (ann);\n \t  for (x = 0; x < NUM_V_MUST_DEFS (v_must_defs); x++)\n \t    {\n \t      tree var = V_MUST_DEF_OP (v_must_defs, x);\n-#if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n-#endif\n \t    }\t    \n+#endif /* ENABLE_CHECKING */\n \n \t  mark_all_vars_used (bsi_stmt_ptr (bsi));\n \t}"}]}