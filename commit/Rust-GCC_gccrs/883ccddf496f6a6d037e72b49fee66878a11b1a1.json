{"sha": "883ccddf496f6a6d037e72b49fee66878a11b1a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzY2NkZGY0OTZmNmE2ZDAzN2U3MmI0OWZlZTY2ODc4YTExYjFhMQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-05-24T13:04:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:04:44Z"}, "message": "[Ada] Fix inconsistent documentation for the Contract_Cases pragma\n\nThis patch propagates the renaming from \"condition\" to \"case guard\" in the\ncontract grammar to the paragraphs that describe the pragma semantics.\n\n2018-05-24  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst (Contract_Cases):\n\tChange \"condition\" to \"case guard\" after renaming in the contract\n\tgrammar.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r260647", "tree": {"sha": "db3d77a34497576092ad6e17d91374789d391539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3d77a34497576092ad6e17d91374789d391539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883ccddf496f6a6d037e72b49fee66878a11b1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883ccddf496f6a6d037e72b49fee66878a11b1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883ccddf496f6a6d037e72b49fee66878a11b1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883ccddf496f6a6d037e72b49fee66878a11b1a1/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebea257ee1195ce196ed005a7ee3a4b9e84117fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea257ee1195ce196ed005a7ee3a4b9e84117fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebea257ee1195ce196ed005a7ee3a4b9e84117fb"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "219fa8bfe97de7afe17d2513a5ce53c944956e86", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=883ccddf496f6a6d037e72b49fee66878a11b1a1", "patch": "@@ -1,3 +1,10 @@\n+2018-05-24  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (Contract_Cases):\n+\tChange \"condition\" to \"case guard\" after renaming in the contract\n+\tgrammar.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_util.adb (Expand_Static_Predicates_In_Choices): Indicate that the"}, {"sha": "353a9a5f346120f29ed8ba32548af589162c9a64", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=883ccddf496f6a6d037e72b49fee66878a11b1a1", "patch": "@@ -1173,9 +1173,9 @@ are equivalent to\n   pragma Postcondition (if C2 then Pred2);\n \n \n-The precondition ensures that one and only one of the conditions is\n+The precondition ensures that one and only one of the case guards is\n satisfied on entry to the subprogram.\n-The postcondition ensures that for the condition that was True on entry,\n+The postcondition ensures that for the case guard that was True on entry,\n the corrresponding consequence is True on exit. Other consequence expressions\n are not evaluated.\n \n@@ -1190,13 +1190,13 @@ expressed as contract cases:\n The placement and visibility rules for ``Contract_Cases`` pragmas are\n identical to those described for preconditions and postconditions.\n \n-The compiler checks that boolean expressions given in conditions and\n-consequences are valid, where the rules for conditions are the same as\n+The compiler checks that boolean expressions given in case guards and\n+consequences are valid, where the rules for case guards are the same as\n the rule for an expression in ``Precondition`` and the rules for\n consequences are the same as the rule for an expression in\n ``Postcondition``. In particular, attributes ``'Old`` and\n ``'Result`` can only be used within consequence expressions.\n-The condition for the last contract case may be ``others``, to denote\n+The case guard for the last contract case may be ``others``, to denote\n any case not captured by the previous cases. The\n following is an example of use within a package spec:\n \n@@ -1214,7 +1214,7 @@ following is an example of use within a package spec:\n \n \n The meaning of contract cases is that only one case should apply at each\n-call, as determined by the corresponding condition evaluating to True,\n+call, as determined by the corresponding case guard evaluating to True,\n and that the consequence for this case should hold when the subprogram\n returns.\n "}, {"sha": "ac29d3f6af8efd05c3b10cd9753a4ca606c7fa7f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883ccddf496f6a6d037e72b49fee66878a11b1a1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=883ccddf496f6a6d037e72b49fee66878a11b1a1", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Apr 23, 2018\n+GNAT Reference Manual , Apr 24, 2018\n \n AdaCore\n \n@@ -2556,9 +2556,9 @@ pragma Postcondition (if C1 then Pred1);\n pragma Postcondition (if C2 then Pred2);\n @end example\n \n-The precondition ensures that one and only one of the conditions is\n+The precondition ensures that one and only one of the case guards is\n satisfied on entry to the subprogram.\n-The postcondition ensures that for the condition that was True on entry,\n+The postcondition ensures that for the case guard that was True on entry,\n the corrresponding consequence is True on exit. Other consequence expressions\n are not evaluated.\n \n@@ -2572,13 +2572,13 @@ pragma Contract_Cases (P => Q);\n The placement and visibility rules for @code{Contract_Cases} pragmas are\n identical to those described for preconditions and postconditions.\n \n-The compiler checks that boolean expressions given in conditions and\n-consequences are valid, where the rules for conditions are the same as\n+The compiler checks that boolean expressions given in case guards and\n+consequences are valid, where the rules for case guards are the same as\n the rule for an expression in @code{Precondition} and the rules for\n consequences are the same as the rule for an expression in\n @code{Postcondition}. In particular, attributes @code{'Old} and\n @code{'Result} can only be used within consequence expressions.\n-The condition for the last contract case may be @code{others}, to denote\n+The case guard for the last contract case may be @code{others}, to denote\n any case not captured by the previous cases. The\n following is an example of use within a package spec:\n \n@@ -2594,7 +2594,7 @@ end Math_Functions;\n @end example\n \n The meaning of contract cases is that only one case should apply at each\n-call, as determined by the corresponding condition evaluating to True,\n+call, as determined by the corresponding case guard evaluating to True,\n and that the consequence for this case should hold when the subprogram\n returns.\n "}]}