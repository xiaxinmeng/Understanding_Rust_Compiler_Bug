{"sha": "bd16f8f1525135a3d730a4cc8136aeb3328bdfb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxNmY4ZjE1MjUxMzVhM2Q3MzBhNGNjODEzNmFlYjMzMjhiZGZiMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-05-23T23:02:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-05-23T23:02:53Z"}, "message": "tweak comment\n\nFrom-SVN: r100088", "tree": {"sha": "759c405352fb4d74c1af9ce55e7ac917dd80ea6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/759c405352fb4d74c1af9ce55e7ac917dd80ea6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0/comments", "author": null, "committer": null, "parents": [{"sha": "a9563c96b6dd09bef5ba298e4c6f038275feb42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9563c96b6dd09bef5ba298e4c6f038275feb42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9563c96b6dd09bef5ba298e4c6f038275feb42d"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "0133981b68080a1ed4fccd6f230506ed792cef7c", "filename": "gcc/cp/except.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd16f8f1525135a3d730a4cc8136aeb3328bdfb0/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=bd16f8f1525135a3d730a4cc8136aeb3328bdfb0", "patch": "@@ -697,15 +697,18 @@ build_throw (tree exp)\n \t the space first we would have to deal with cleaning it up if\n \t evaluating this expression throws.\n \n-\t The case where EXP the initializer is a call to a constructor or a\n-\t function returning a class is a bit of a grey area in the\n-\t standard; it's unclear whether or not it should be allowed to\n-\t throw.  We used to say no, as that allowed us to optimize this\n-\t case without worrying about deallocating the exception object if\n-\t it does.  But that conflicted with expectations (PR 13944) and the\n-\t EDG compiler; now we wrap the initialization in a TRY_CATCH_EXPR\n-\t to call do_free_exception rather than in a MUST_NOT_THROW_EXPR,\n-\t for this case only.\n+\t The case where EXP the initializer is a cast or a function\n+\t returning a class is a bit of a grey area in the standard; it's\n+\t unclear whether or not it should be allowed to throw.  We used to\n+\t say no, as that allowed us to optimize this case without worrying\n+\t about deallocating the exception object if it does.  But that\n+\t conflicted with expectations (PR 13944) and the EDG compiler; now\n+\t we wrap the initialization in a TRY_CATCH_EXPR to call\n+\t do_free_exception rather than in a MUST_NOT_THROW_EXPR, for this\n+\t case only.\n+\n+\t BUT: Issue 475 may do away with this inconsistency by removing the\n+\t terminate() in this situation.\n \n          Note that we don't check the return value from stabilize_init\n          because it will only return false in cases where elided is true,"}]}