{"sha": "71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjOGFhZjI5YmIxMjJlYmU1ZTY3Yzg0OTAzZmQyM2ZmMDVmMDRlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T08:17:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T08:17:45Z"}, "message": "i386: Improve [QH]Imode rotates with masked shift count [PR99405]\n\nThe following testcase shows that while we nicely optimize away the\nuseless and? of shift count before rotation for [SD]Imode rotates,\nwe don't do that for [QH]Imode.\n\nThe following patch optimizes that by using the right iterator on those\n4 patterns.\n\n2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99405\n\t* config/i386/i386.md (*<insn><mode>3_mask, *<insn><mode>3_mask_1):\n\tFor any_rotate define_insn_split and following splitters, use\n\tSWI iterator instead of SWI48.\n\n\t* gcc.target/i386/pr99405.c: New test.", "tree": {"sha": "245df97b124278d528317374b2229c502efe67e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245df97b124278d528317374b2229c502efe67e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6bb80931b429631f63e0fd27bee95f32eb57a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6bb80931b429631f63e0fd27bee95f32eb57a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6bb80931b429631f63e0fd27bee95f32eb57a9"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "eff189f17b4d3e9c5e3960ca4f41a5f2835b7764", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "patch": "@@ -11933,9 +11933,9 @@\n \n ;; Avoid useless masking of count operand.\n (define_insn_and_split \"*<insn><mode>3_mask\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n-\t(any_rotate:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(any_rotate:SWI\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n \t      (match_operand:SI 2 \"register_operand\" \"c\")\n@@ -11949,15 +11949,15 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 0)\n-\t   (any_rotate:SWI48 (match_dup 1)\n-\t\t\t     (match_dup 2)))\n+\t   (any_rotate:SWI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n (define_split\n-  [(set (match_operand:SWI48 0 \"register_operand\")\n-\t(any_rotate:SWI48\n-\t  (match_operand:SWI48 1 \"const_int_operand\")\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(any_rotate:SWI\n+\t  (match_operand:SWI 1 \"const_int_operand\")\n \t  (subreg:QI\n \t    (and:SI\n \t      (match_operand:SI 2 \"register_operand\")\n@@ -11966,14 +11966,14 @@\n    == GET_MODE_BITSIZE (<MODE>mode) - 1\"\n  [(set (match_dup 4) (match_dup 1))\n   (set (match_dup 0)\n-       (any_rotate:SWI48 (match_dup 4)\n-\t\t\t (subreg:QI (match_dup 2) 0)))]\n+       (any_rotate:SWI (match_dup 4)\n+\t\t       (subreg:QI (match_dup 2) 0)))]\n  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n \n (define_insn_and_split \"*<insn><mode>3_mask_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n-\t(any_rotate:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n+\t(any_rotate:SWI\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\")\n \t  (and:QI\n \t    (match_operand:QI 2 \"register_operand\" \"c\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n@@ -11986,22 +11986,22 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 0)\n-\t   (any_rotate:SWI48 (match_dup 1)\n-\t\t\t     (match_dup 2)))\n+\t   (any_rotate:SWI (match_dup 1)\n+\t\t\t   (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])])\n \n (define_split\n-  [(set (match_operand:SWI48 0 \"register_operand\")\n-\t(any_rotate:SWI48\n-\t  (match_operand:SWI48 1 \"const_int_operand\")\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(any_rotate:SWI\n+\t  (match_operand:SWI 1 \"const_int_operand\")\n \t  (and:QI\n \t    (match_operand:QI 2 \"register_operand\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))]\n  \"(INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode) - 1))\n   == GET_MODE_BITSIZE (<MODE>mode) - 1\"\n  [(set (match_dup 4) (match_dup 1))\n   (set (match_dup 0)\n-       (any_rotate:SWI48 (match_dup 4) (match_dup 2)))]\n+       (any_rotate:SWI (match_dup 4) (match_dup 2)))]\n  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n \n ;; Implement rotation using two double-precision"}, {"sha": "f3f49e31f4220b91d96075fba7f751c87aff0d31", "filename": "gcc/testsuite/gcc.target/i386/pr99405.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99405.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99405.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99405.c?ref=71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/99405 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler-not \"\\tand\\[bl]\\t\\\\\\$\" } } */\n+\n+unsigned char f1 (unsigned char x, unsigned y) { return (x << (y & 7)) | (x >> (-y & 7)); }\n+unsigned short f2 (unsigned short x, unsigned y) { return (x << (y & 15)) | (x >> (-y & 15)); }\n+unsigned int f3 (unsigned int x, unsigned y) { return (x << (y & 31)) | (x >> (-y & 31)); }\n+unsigned char f4 (unsigned char x, unsigned y) { return (x >> (y & 7)) | (x << (-y & 7)); }\n+unsigned short f5 (unsigned short x, unsigned y) { return (x >> (y & 15)) | (x << (-y & 15)); }\n+unsigned int f6 (unsigned int x, unsigned y) { return (x >> (y & 31)) | (x << (-y & 31)); }\n+unsigned char f7 (unsigned char x, unsigned char y) { unsigned char v = y & 7; unsigned char w = -y & 7; return (x << v) | (x >> w); }\n+unsigned short f8 (unsigned short x, unsigned char y) { unsigned char v = y & 15; unsigned char w = -y & 15; return (x << v) | (x >> w); }\n+unsigned int f9 (unsigned int x, unsigned char y) { unsigned char v = y & 31; unsigned char w = -y & 31; return (x << v) | (x >> w); }\n+unsigned char f10 (unsigned char x, unsigned char y) { unsigned char v = y & 7; unsigned char w = -y & 7; return (x >> v) | (x << w); }\n+unsigned short f11 (unsigned short x, unsigned char y) { unsigned char v = y & 15; unsigned char w = -y & 15; return (x >> v) | (x << w); }\n+unsigned int f12 (unsigned int x, unsigned char y) { unsigned char v = y & 31; unsigned char w = -y & 31; return (x >> v) | (x << w); }\n+#ifdef __x86_64__\n+unsigned long long f13 (unsigned long long x, unsigned y) { return (x << (y & 63)) | (x >> (-y & 63)); }\n+unsigned long long f14 (unsigned long long x, unsigned y) { return (x >> (y & 63)) | (x << (-y & 63)); }\n+unsigned long long f15 (unsigned long long x, unsigned char y) { unsigned char v = y & 63; unsigned char w = -y & 63; return (x << v) | (x >> w); }\n+unsigned long long f16 (unsigned long long x, unsigned char y) { unsigned char v = y & 63; unsigned char w = -y & 63; return (x >> v) | (x << w); }\n+#endif"}]}