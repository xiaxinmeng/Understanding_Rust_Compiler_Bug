{"sha": "97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiMDY1NmQ2N2QyZDM5YTc5NTU2YmQyMDBkM2I2YzQxYjJlNWQ2Zg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2016-12-02T15:24:40Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-12-02T15:24:40Z"}, "message": "Handling ARMv8-M Security Extension's cmse_nonsecure_entry attribute\n\n    gcc/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (arm_handle_cmse_nonsecure_entry): New.\n\t(arm_attribute_table): Added cmse_nonsecure_entry\n\t(arm_compute_func_type): Handle cmse_nonsecure_entry.\n\t(cmse_func_args_or_return_in_stack): New.\n\t(arm_handle_cmse_nonsecure_entry): New.\n\t* config/arm/arm.h (ARM_FT_CMSE_ENTRY): New macro define.\n\t(IS_CMSE_ENTRY): Likewise.\n\t* doc/extend.texi (ARM ARMv8-M Security Extensions): New attribute.\n\n    gcc/testsuite/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/cmse-3.c: New.\n\n\nCo-Authored-By: Thomas Preud'homme <thomas.preudhomme@arm.com>\n\nFrom-SVN: r243188", "tree": {"sha": "b5d308ea673a925aa9036a6f611d91f62c73d93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d308ea673a925aa9036a6f611d91f62c73d93d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de7b57234525f55e5edfe8db77ca7ac2a943468f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7b57234525f55e5edfe8db77ca7ac2a943468f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7b57234525f55e5edfe8db77ca7ac2a943468f"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "7eb56d25e9488aeb0376c2232e9838dc9a3e3cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -1,3 +1,15 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (arm_handle_cmse_nonsecure_entry): New.\n+\t(arm_attribute_table): Added cmse_nonsecure_entry\n+\t(arm_compute_func_type): Handle cmse_nonsecure_entry.\n+\t(cmse_func_args_or_return_in_stack): New.\n+\t(arm_handle_cmse_nonsecure_entry): New.\n+\t* config/arm/arm.h (ARM_FT_CMSE_ENTRY): New macro define.\n+\t(IS_CMSE_ENTRY): Likewise.\n+\t* doc/extend.texi (ARM ARMv8-M Security Extensions): New attribute.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "7761564e8a2ce6967d25abab70ab3cb1e5ee5906", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -136,6 +136,7 @@ static tree arm_handle_isr_attribute (tree *, tree, tree, int, bool *);\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n #endif\n+static tree arm_handle_cmse_nonsecure_entry (tree *, tree, tree, int, bool *);\n static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (const_tree, const_tree);\n@@ -344,6 +345,9 @@ static const struct attribute_spec arm_attribute_table[] =\n   { \"notshared\",    0, 0, false, true, false, arm_handle_notshared_attribute,\n     false },\n #endif\n+  /* ARMv8-M Security Extensions support.  */\n+  { \"cmse_nonsecure_entry\", 0, 0, true, false, false,\n+    arm_handle_cmse_nonsecure_entry, false },\n   { NULL,           0, 0, false, false, false, NULL, false }\n };\n \f\n@@ -3633,6 +3637,9 @@ arm_compute_func_type (void)\n   else\n     type |= arm_isr_value (TREE_VALUE (a));\n \n+  if (lookup_attribute (\"cmse_nonsecure_entry\", attr))\n+    type |= ARM_FT_CMSE_ENTRY;\n+\n   return type;\n }\n \n@@ -6634,6 +6641,113 @@ arm_handle_notshared_attribute (tree *node,\n }\n #endif\n \n+/* This function returns true if a function with declaration FNDECL and type\n+   FNTYPE uses the stack to pass arguments or return variables and false\n+   otherwise.  This is used for functions with the attributes\n+   'cmse_nonsecure_call' or 'cmse_nonsecure_entry' and this function will issue\n+   diagnostic messages if the stack is used.  NAME is the name of the attribute\n+   used.  */\n+\n+static bool\n+cmse_func_args_or_return_in_stack (tree fndecl, tree name, tree fntype)\n+{\n+  function_args_iterator args_iter;\n+  CUMULATIVE_ARGS args_so_far_v;\n+  cumulative_args_t args_so_far;\n+  bool first_param = true;\n+  tree arg_type, prev_arg_type = NULL_TREE, ret_type;\n+\n+  /* Error out if any argument is passed on the stack.  */\n+  arm_init_cumulative_args (&args_so_far_v, fntype, NULL_RTX, fndecl);\n+  args_so_far = pack_cumulative_args (&args_so_far_v);\n+  FOREACH_FUNCTION_ARGS (fntype, arg_type, args_iter)\n+    {\n+      rtx arg_rtx;\n+      machine_mode arg_mode = TYPE_MODE (arg_type);\n+\n+      prev_arg_type = arg_type;\n+      if (VOID_TYPE_P (arg_type))\n+\tcontinue;\n+\n+      if (!first_param)\n+\tarm_function_arg_advance (args_so_far, arg_mode, arg_type, true);\n+      arg_rtx = arm_function_arg (args_so_far, arg_mode, arg_type, true);\n+      if (!arg_rtx\n+\t  || arm_arg_partial_bytes (args_so_far, arg_mode, arg_type, true))\n+\t{\n+\t  error (\"%qE attribute not available to functions with arguments \"\n+\t\t \"passed on the stack\", name);\n+\t  return true;\n+\t}\n+      first_param = false;\n+    }\n+\n+  /* Error out for variadic functions since we cannot control how many\n+     arguments will be passed and thus stack could be used.  stdarg_p () is not\n+     used for the checking to avoid browsing arguments twice.  */\n+  if (prev_arg_type != NULL_TREE && !VOID_TYPE_P (prev_arg_type))\n+    {\n+      error (\"%qE attribute not available to functions with variable number \"\n+\t     \"of arguments\", name);\n+      return true;\n+    }\n+\n+  /* Error out if return value is passed on the stack.  */\n+  ret_type = TREE_TYPE (fntype);\n+  if (arm_return_in_memory (ret_type, fntype))\n+    {\n+      error (\"%qE attribute not available to functions that return value on \"\n+\t     \"the stack\", name);\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* Called upon detection of the use of the cmse_nonsecure_entry attribute, this\n+   function will check whether the attribute is allowed here and will add the\n+   attribute to the function declaration tree or otherwise issue a warning.  */\n+\n+static tree\n+arm_handle_cmse_nonsecure_entry (tree *node, tree name,\n+\t\t\t\t tree /* args */,\n+\t\t\t\t int /* flags */,\n+\t\t\t\t bool *no_add_attrs)\n+{\n+  tree fndecl;\n+\n+  if (!use_cmse)\n+    {\n+      *no_add_attrs = true;\n+      warning (OPT_Wattributes, \"%qE attribute ignored without -mcmse option.\",\n+\t       name);\n+      return NULL_TREE;\n+    }\n+\n+  /* Ignore attribute for function types.  */\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  fndecl = *node;\n+\n+  /* Warn for static linkage functions.  */\n+  if (!TREE_PUBLIC (fndecl))\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute has no effect on functions \"\n+\t       \"with static linkage\", name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  *no_add_attrs |= cmse_func_args_or_return_in_stack (fndecl, name,\n+\t\t\t\t\t\tTREE_TYPE (fndecl));\n+  return NULL_TREE;\n+}\n+\n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */"}, {"sha": "928fad4a8263e5ceb22b84f424a5dc8dae662707", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -1385,6 +1385,7 @@ enum reg_class\n #define ARM_FT_VOLATILE\t\t(1 << 4) /* Does not return.  */\n #define ARM_FT_NESTED\t\t(1 << 5) /* Embedded inside another func.  */\n #define ARM_FT_STACKALIGN\t(1 << 6) /* Called with misaligned stack.  */\n+#define ARM_FT_CMSE_ENTRY\t(1 << 7) /* ARMv8-M non-secure entry function.  */\n \n /* Some macros to test these flags.  */\n #define ARM_FUNC_TYPE(t)\t(t & ARM_FT_TYPE_MASK)\n@@ -1393,6 +1394,7 @@ enum reg_class\n #define IS_NAKED(t)        \t(t & ARM_FT_NAKED)\n #define IS_NESTED(t)       \t(t & ARM_FT_NESTED)\n #define IS_STACKALIGN(t)       \t(t & ARM_FT_STACKALIGN)\n+#define IS_CMSE_ENTRY(t)\t(t & ARM_FT_CMSE_ENTRY)\n \n \n /* Structure used to hold the function stack frame layout.  Offsets are"}, {"sha": "d72af3efaf2cf335ef72186dadcbca5a8597298e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -12648,6 +12648,9 @@ Security Extensions: Requiremenets on Development Tools Engineering\n Specification, which can be found at\n @uref{http://infocenter.arm.com/help/topic/com.arm.doc.ecm0359818/ECM0359818_armv8m_security_extensions_reqs_on_dev_tools_1_0.pdf}.\n \n+As part of the Security Extensions GCC implements a new function attribute\n+@code{cmse_nonsecure_entry}.\n+\n As part of the Security Extensions GCC implements the intrinsics below.  FPTR\n is used here to mean any function pointer type.\n "}, {"sha": "4e1240e22bee46f9fdb2d9b7214b0ec73c1e73aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -1,3 +1,8 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/cmse/cmse-3.c: New.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "2c2920e1dc310106d83203eb51e1a68a275d0152", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b0656d67d2d39a79556bd200d3b6c41b2e5d6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-3.c?ref=97b0656d67d2d39a79556bd200d3b6c41b2e5d6f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" }  */\n+\n+struct span {\n+  int a, b;\n+};\n+struct span2 {\n+  float a, b, c, d;\n+};\n+\n+union test_union\n+{\n+  long long a;\n+  int b;\n+  struct span2 c;\n+} test_union;\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+foo (long long a, int b, long long c) {} /* { dg-error \"not available to functions with arguments passed on the stack\" } */\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+bar (long long a, int b, struct span c) {} /* { dg-error \"not available to functions with arguments passed on the stack\" } */\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+baz (int a, ...) {} /* { dg-error \"not available to functions with variable number of arguments\" } */\n+\n+struct span __attribute__ ((cmse_nonsecure_entry))\n+qux (void) { /* { dg-error \"not available to functions that return value on the stack\" } */\n+  struct span ret = {0, 0};\n+  return ret;\n+}\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+norf (struct span2 a) {}\n+\n+void __attribute__ ((cmse_nonsecure_entry))\n+foo2 (long long a, int b, union test_union c) {} /* { dg-error \"not available to functions with arguments passed on the stack\" } */"}]}