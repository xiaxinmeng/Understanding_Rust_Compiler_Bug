{"sha": "12308bc61de47a985b260889194156021da3cc2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMDhiYzYxZGU0N2E5ODViMjYwODg5MTk0MTU2MDIxZGEzY2MyZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-13T22:20:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-13T22:20:14Z"}, "message": "typeck.c (build_indirect_ref, [...]): Remove uses of ATTRIBUTE_UNUSED on the parameters.\n\n2012-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (build_indirect_ref, build_function_call,\n\tbuild_function_call_vec, build_binary_op, build_unary_op,\n\tbuild_compound_expr, build_c_cast, build_modify_expr): Remove\n\tuses of ATTRIBUTE_UNUSED on the parameters.\n\t* class.c (set_linkage_according_to_type, resort_type_method_vec,\n\tdfs_find_final_overrider_post, empty_base_at_nonzero_offset_p):\n\tLikewise.\n\t* decl.c (local_variable_p_walkfn): Likewise.\n\t* except.c (wrap_cleanups_r, check_noexcept_r): Likewise.\n\t* error.c (find_typenames_r): Likewise.\n\t* tree.c (verify_stmt_tree_r, bot_replace,\n\thandle_java_interface_attribute, handle_com_interface_attribute,\n\thandle_init_priority_attribute, c_register_addr_space): Likewise.\n\t* cp-gimplify.c (cxx_omp_clause_default_ctor): Likewise.\n\t* cp-lang.c (objcp_tsubst_copy_and_build): Likewise.\n\t* pt.c (unify_success, unify_invalid, instantiation_dependent_r):\n\tLikewise.\n\t* semantics.c (dfs_calculate_bases_pre): Likewise.\n\t* decl2.c (fix_temporary_vars_context_r, clear_decl_external):\n\tLikewise.\n\t* parser.c (cp_lexer_token_at, cp_parser_omp_clause_mergeable,\n\tcp_parser_omp_clause_nowait, cp_parser_omp_clause_ordered,\n\tcp_parser_omp_clause_untied): Likewise.\n\t* mangle.c (write_unnamed_type_name,\n\tdiscriminator_for_string_literal): Likewise.\n\t* search.c (dfs_accessible_post, dfs_debug_mark): Likewise.\n\t* lex.c (handle_pragma_vtable, handle_pragma_unit,\n\thandle_pragma_interface, handle_pragma_implementation,\n\thandle_pragma_java_exceptions): Likewise.\n\nFrom-SVN: r191281", "tree": {"sha": "b8054d7aa7fba519c4adca3de68c5ef0eb1519e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8054d7aa7fba519c4adca3de68c5ef0eb1519e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12308bc61de47a985b260889194156021da3cc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12308bc61de47a985b260889194156021da3cc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12308bc61de47a985b260889194156021da3cc2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12308bc61de47a985b260889194156021da3cc2e/comments", "author": null, "committer": null, "parents": [{"sha": "9feb29df994174d571b3fba6e6a60c24a2dc111c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9feb29df994174d571b3fba6e6a60c24a2dc111c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9feb29df994174d571b3fba6e6a60c24a2dc111c"}], "stats": {"total": 150, "additions": 87, "deletions": 63}, "files": [{"sha": "4a9f5c3c2a2ad59d06f9efb742ff674e977d93eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -1,3 +1,35 @@\n+2012-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (build_indirect_ref, build_function_call,\n+\tbuild_function_call_vec, build_binary_op, build_unary_op,\n+\tbuild_compound_expr, build_c_cast, build_modify_expr): Remove\n+\tuses of ATTRIBUTE_UNUSED on the parameters.\n+\t* class.c (set_linkage_according_to_type, resort_type_method_vec,\n+\tdfs_find_final_overrider_post, empty_base_at_nonzero_offset_p):\n+\tLikewise.\n+\t* decl.c (local_variable_p_walkfn): Likewise.\n+\t* except.c (wrap_cleanups_r, check_noexcept_r): Likewise.\n+\t* error.c (find_typenames_r): Likewise.\n+\t* tree.c (verify_stmt_tree_r, bot_replace,\n+\thandle_java_interface_attribute, handle_com_interface_attribute,\n+\thandle_init_priority_attribute, c_register_addr_space): Likewise.\n+\t* cp-gimplify.c (cxx_omp_clause_default_ctor): Likewise.\n+\t* cp-lang.c (objcp_tsubst_copy_and_build): Likewise.\n+\t* pt.c (unify_success, unify_invalid, instantiation_dependent_r):\n+\tLikewise.\n+\t* semantics.c (dfs_calculate_bases_pre): Likewise.\n+\t* decl2.c (fix_temporary_vars_context_r, clear_decl_external):\n+\tLikewise.\n+\t* parser.c (cp_lexer_token_at, cp_parser_omp_clause_mergeable,\n+\tcp_parser_omp_clause_nowait, cp_parser_omp_clause_ordered,\n+\tcp_parser_omp_clause_untied): Likewise.\n+\t* mangle.c (write_unnamed_type_name,\n+\tdiscriminator_for_string_literal): Likewise.\n+\t* search.c (dfs_accessible_post, dfs_debug_mark): Likewise.\n+\t* lex.c (handle_pragma_vtable, handle_pragma_unit,\n+\thandle_pragma_interface, handle_pragma_implementation,\n+\thandle_pragma_java_exceptions): Likewise.\n+\n 2012-09-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53839"}, {"sha": "8de142347f487c3a4b032387fc9140c62aff4bf9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -711,7 +711,7 @@ get_vtable_name (tree type)\n    the abstract.  */\n \n void\n-set_linkage_according_to_type (tree type ATTRIBUTE_UNUSED, tree decl)\n+set_linkage_according_to_type (tree /*type*/, tree decl)\n {\n   TREE_PUBLIC (decl) = 1;\n   determine_visibility (decl);\n@@ -1820,7 +1820,7 @@ resort_method_name_cmp (const void* m1_p, const void* m2_p)\n \n void\n resort_type_method_vec (void* obj,\n-\t\t\tvoid* orig_obj ATTRIBUTE_UNUSED ,\n+\t\t\tvoid* /*orig_obj*/,\n \t\t\tgt_pointer_operator new_value,\n \t\t\tvoid* cookie)\n {\n@@ -2039,7 +2039,7 @@ dfs_find_final_overrider_pre (tree binfo, void *data)\n }\n \n static tree\n-dfs_find_final_overrider_post (tree binfo ATTRIBUTE_UNUSED, void *data)\n+dfs_find_final_overrider_post (tree /*binfo*/, void *data)\n {\n   find_final_overrider_data *ffod = (find_final_overrider_data *) data;\n   VEC_pop (tree, ffod->path);\n@@ -3771,7 +3771,7 @@ layout_nonempty_base_or_field (record_layout_info rli,\n static int\n empty_base_at_nonzero_offset_p (tree type,\n \t\t\t\ttree offset,\n-\t\t\t\tsplay_tree offsets ATTRIBUTE_UNUSED)\n+\t\t\t\tsplay_tree /*offsets*/)\n {\n   return is_empty_class (type) && !integer_zerop (offset);\n }"}, {"sha": "dd2ef067c8fe9e6d88304bd2a111fd970248b6c0", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -1318,8 +1318,7 @@ cxx_omp_clause_apply_fn (tree fn, tree arg1, tree arg2)\n    NULL if there's nothing to do.  */\n \n tree\n-cxx_omp_clause_default_ctor (tree clause, tree decl,\n-\t\t\t     tree outer ATTRIBUTE_UNUSED)\n+cxx_omp_clause_default_ctor (tree clause, tree decl, tree /*outer*/)\n {\n   tree info = CP_OMP_CLAUSE_INFO (clause);\n   tree ret = NULL;"}, {"sha": "54e03946acdfb0728f79555c281bcc7f64463a16", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -92,11 +92,11 @@ struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n /* The following function does something real, but only in Objective-C++.  */\n \n tree\n-objcp_tsubst_copy_and_build (tree t ATTRIBUTE_UNUSED,\n-\t\t\t     tree args ATTRIBUTE_UNUSED,\n-\t\t\t     tsubst_flags_t complain ATTRIBUTE_UNUSED,\n-\t\t\t     tree in_decl ATTRIBUTE_UNUSED,\n-\t\t\t     bool function_p ATTRIBUTE_UNUSED)\n+objcp_tsubst_copy_and_build (tree /*t*/,\n+\t\t\t     tree /*args*/,\n+\t\t\t     tsubst_flags_t /*complain*/,\n+\t\t\t     tree /*in_decl*/,\n+\t\t\t     bool /*function_p*/)\n {\n   return NULL_TREE;\n }"}, {"sha": "06e9ae7d33752d3cb3dfb672428d22b1e768ab45", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -10536,7 +10536,7 @@ local_variable_p (const_tree t)\n \n static tree\n local_variable_p_walkfn (tree *tp, int *walk_subtrees,\n-\t\t\t void *data ATTRIBUTE_UNUSED)\n+\t\t\t void * /*data*/)\n {\n   /* Check DECL_NAME to avoid including temporaries.  We don't check\n      DECL_ARTIFICIAL because we do want to complain about 'this'.  */"}, {"sha": "0df461340bc53aed831aa719aaec7764660723c2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -3037,8 +3037,8 @@ get_priority_info (int priority)\n    it's DECL_CONTECT() properly set.  */\n static tree \n fix_temporary_vars_context_r (tree *node,\n-\t\t\t      int  *unused ATTRIBUTE_UNUSED,\n-\t\t\t      void *unused1 ATTRIBUTE_UNUSED)\n+\t\t\t      int  * /*unused*/,\n+\t\t\t      void * /*unused1*/)\n {\n   gcc_assert (current_function_decl);\n \n@@ -3656,7 +3656,7 @@ collect_all_refs (const char *source_file)\n /* Clear DECL_EXTERNAL for NODE.  */\n \n static bool\n-clear_decl_external (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n+clear_decl_external (struct cgraph_node *node, void * /*data*/)\n {\n   DECL_EXTERNAL (node->symbol.decl) = 0;\n   return false;"}, {"sha": "30fa0182a8f468664270f08b8217957f6035dba6", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -1285,7 +1285,7 @@ struct find_typenames_t\n };\n \n static tree\n-find_typenames_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n+find_typenames_r (tree *tp, int * /*walk_subtrees*/, void *data)\n {\n   struct find_typenames_t *d = (struct find_typenames_t *)data;\n   tree mv = NULL_TREE;"}, {"sha": "ad49211b58bd68a46db98ae70ee68abe81131c0d", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -671,8 +671,7 @@ do_free_exception (tree ptr)\n    Called from build_throw via walk_tree_without_duplicates.  */\n \n static tree\n-wrap_cleanups_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t void *data ATTRIBUTE_UNUSED)\n+wrap_cleanups_r (tree *tp, int *walk_subtrees, void * /*data*/)\n {\n   tree exp = *tp;\n   tree cleanup;\n@@ -1129,8 +1128,7 @@ check_handlers (tree handlers)\n      expression whose type is a polymorphic class type (10.3).  */\n \n static tree\n-check_noexcept_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t  void *data ATTRIBUTE_UNUSED)\n+check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n {\n   tree t = *tp;\n   enum tree_code code = TREE_CODE (t);"}, {"sha": "d4aebf7505271326836be8efbd731785bf9eeb03", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -330,21 +330,21 @@ parse_strconst_pragma (const char* name, int opt)\n }\n \n static void\n-handle_pragma_vtable (cpp_reader* dfile ATTRIBUTE_UNUSED )\n+handle_pragma_vtable (cpp_reader* /*dfile*/)\n {\n   parse_strconst_pragma (\"vtable\", 0);\n   sorry (\"#pragma vtable no longer supported\");\n }\n \n static void\n-handle_pragma_unit (cpp_reader* dfile ATTRIBUTE_UNUSED )\n+handle_pragma_unit (cpp_reader* /*dfile*/)\n {\n   /* Validate syntax, but don't do anything.  */\n   parse_strconst_pragma (\"unit\", 0);\n }\n \n static void\n-handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n+handle_pragma_interface (cpp_reader* /*dfile*/)\n {\n   tree fname = parse_strconst_pragma (\"interface\", 1);\n   struct c_fileinfo *finfo;\n@@ -384,7 +384,7 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n    any effect.  */\n \n static void\n-handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n+handle_pragma_implementation (cpp_reader* /*dfile*/)\n {\n   tree fname = parse_strconst_pragma (\"implementation\", 1);\n   const char *filename;\n@@ -425,7 +425,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n \n /* Indicate that this file uses Java-personality exception handling.  */\n static void\n-handle_pragma_java_exceptions (cpp_reader* dfile ATTRIBUTE_UNUSED)\n+handle_pragma_java_exceptions (cpp_reader* /*dfile*/)\n {\n   tree x;\n   if (pragma_lex (&x) != CPP_EOF)"}, {"sha": "469953a53656875579a19b5a7bafbff877a9a69d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -1337,7 +1337,7 @@ nested_anon_class_index (tree type)\n /* <unnamed-type-name> ::= Ut [ <nonnegative number> ] _ */\n \n static void\n-write_unnamed_type_name (const tree type ATTRIBUTE_UNUSED)\n+write_unnamed_type_name (const tree type)\n {\n   int discriminator;\n   MANGLE_TRACE_TREE (\"unnamed-type-name\", type);\n@@ -1694,8 +1694,8 @@ discriminator_for_local_entity (tree entity)\n    string literals used in FUNCTION.  */\n \n static int\n-discriminator_for_string_literal (tree function ATTRIBUTE_UNUSED,\n-\t\t\t\t  tree string ATTRIBUTE_UNUSED)\n+discriminator_for_string_literal (tree /*function*/,\n+\t\t\t\t  tree /*string*/)\n {\n   /* For now, we don't discriminate amongst string literals.  */\n   return 0;"}, {"sha": "e8c037885efef09ee58257d6033f8d26c6cf02c4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -667,7 +667,7 @@ cp_lexer_token_position (cp_lexer *lexer, bool previous_p)\n }\n \n static inline cp_token *\n-cp_lexer_token_at (cp_lexer *lexer ATTRIBUTE_UNUSED, cp_token_position pos)\n+cp_lexer_token_at (cp_lexer * /*lexer*/, cp_token_position pos)\n {\n   return pos;\n }\n@@ -25322,7 +25322,7 @@ cp_parser_omp_clause_if (cp_parser *parser, tree list, location_t location)\n    mergeable */\n \n static tree\n-cp_parser_omp_clause_mergeable (cp_parser *parser ATTRIBUTE_UNUSED,\n+cp_parser_omp_clause_mergeable (cp_parser * /*parser*/,\n \t\t\t\ttree list, location_t location)\n {\n   tree c;\n@@ -25339,7 +25339,7 @@ cp_parser_omp_clause_mergeable (cp_parser *parser ATTRIBUTE_UNUSED,\n    nowait */\n \n static tree\n-cp_parser_omp_clause_nowait (cp_parser *parser ATTRIBUTE_UNUSED,\n+cp_parser_omp_clause_nowait (cp_parser * /*parser*/,\n \t\t\t     tree list, location_t location)\n {\n   tree c;\n@@ -25385,7 +25385,7 @@ cp_parser_omp_clause_num_threads (cp_parser *parser, tree list,\n    ordered */\n \n static tree\n-cp_parser_omp_clause_ordered (cp_parser *parser ATTRIBUTE_UNUSED,\n+cp_parser_omp_clause_ordered (cp_parser * /*parser*/,\n \t\t\t      tree list, location_t location)\n {\n   tree c;\n@@ -25578,7 +25578,7 @@ cp_parser_omp_clause_schedule (cp_parser *parser, tree list, location_t location\n    untied */\n \n static tree\n-cp_parser_omp_clause_untied (cp_parser *parser ATTRIBUTE_UNUSED,\n+cp_parser_omp_clause_untied (cp_parser * /*parser*/,\n \t\t\t     tree list, location_t location)\n {\n   tree c;"}, {"sha": "7924dff519fb58fc70eef10ea743374e1c2fd69c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -5187,7 +5187,7 @@ has_value_dependent_address (tree op)\n    call.c  */\n \n static int\n-unify_success (bool explain_p ATTRIBUTE_UNUSED)\n+unify_success (bool /*explain_p*/)\n {\n   return 0;\n }\n@@ -5202,7 +5202,7 @@ unify_parameter_deduction_failure (bool explain_p, tree parm)\n }\n \n static int\n-unify_invalid (bool explain_p ATTRIBUTE_UNUSED)\n+unify_invalid (bool /*explain_p*/)\n {\n   return 1;\n }\n@@ -19564,7 +19564,7 @@ type_dependent_expression_p (tree expression)\n \n static tree\n instantiation_dependent_r (tree *tp, int *walk_subtrees,\n-\t\t\t   void *data ATTRIBUTE_UNUSED)\n+\t\t\t   void * /*data*/)\n {\n   if (TYPE_P (*tp))\n     {"}, {"sha": "1614f49350ed9fea709191f0eb8b81b0df8127b1", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -819,7 +819,7 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n /* Called via dfs_walk_once_accessible from accessible_p */\n \n static tree\n-dfs_accessible_post (tree binfo, void *data ATTRIBUTE_UNUSED)\n+dfs_accessible_post (tree binfo, void * /*data*/)\n {\n   if (BINFO_ACCESS (binfo) != ak_none)\n     {\n@@ -2160,7 +2160,7 @@ maybe_suppress_debug_info (tree t)\n    information anyway.  */\n \n static tree\n-dfs_debug_mark (tree binfo, void *data ATTRIBUTE_UNUSED)\n+dfs_debug_mark (tree binfo, void * /*data*/)\n {\n   tree t = BINFO_TYPE (binfo);\n "}, {"sha": "db093e0b98da3678cc9983ab52a5e9bff2163d8e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -3455,7 +3455,7 @@ calculate_direct_bases (tree type)\n /* Virtual base classes are handled separately in finish_bases */\n \n static tree\n-dfs_calculate_bases_pre (tree binfo, ATTRIBUTE_UNUSED void *data_)\n+dfs_calculate_bases_pre (tree binfo, void * /*data_*/)\n {\n   /* Don't walk bases of virtual bases */\n   return BINFO_VIRTUAL_P (binfo) ? dfs_skip_bases : NULL_TREE;"}, {"sha": "7dddf2299c3b96a2ead79b7b70eba2c060158257", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -1915,9 +1915,7 @@ count_trees (tree t)\n /* Called from verify_stmt_tree via walk_tree.  */\n \n static tree\n-verify_stmt_tree_r (tree* tp,\n-\t\t    int* walk_subtrees ATTRIBUTE_UNUSED ,\n-\t\t    void* data)\n+verify_stmt_tree_r (tree* tp, int * /*walk_subtrees*/, void* data)\n {\n   tree t = *tp;\n   htab_t *statements = (htab_t *) data;\n@@ -2155,9 +2153,7 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n    variables.  */\n \n static tree\n-bot_replace (tree* t,\n-\t     int* walk_subtrees ATTRIBUTE_UNUSED ,\n-\t     void* data)\n+bot_replace (tree* t, int* /*walk_subtrees*/, void* data)\n {\n   splay_tree target_remap = ((splay_tree) data);\n \n@@ -3001,7 +2997,7 @@ const struct attribute_spec cxx_attribute_table[] =\n static tree\n handle_java_interface_attribute (tree* node,\n \t\t\t\t tree name,\n-\t\t\t\t tree args ATTRIBUTE_UNUSED ,\n+\t\t\t\t tree /*args*/,\n \t\t\t\t int flags,\n \t\t\t\t bool* no_add_attrs)\n {\n@@ -3026,8 +3022,8 @@ handle_java_interface_attribute (tree* node,\n static tree\n handle_com_interface_attribute (tree* node,\n \t\t\t\ttree name,\n-\t\t\t\ttree args ATTRIBUTE_UNUSED ,\n-\t\t\t\tint flags ATTRIBUTE_UNUSED ,\n+\t\t\t\ttree /*args*/,\n+\t\t\t\tint /*flags*/,\n \t\t\t\tbool* no_add_attrs)\n {\n   static int warned;\n@@ -3056,7 +3052,7 @@ static tree\n handle_init_priority_attribute (tree* node,\n \t\t\t\ttree name,\n \t\t\t\ttree args,\n-\t\t\t\tint flags ATTRIBUTE_UNUSED ,\n+\t\t\t\tint /*flags*/,\n \t\t\t\tbool* no_add_attrs)\n {\n   tree initp_expr = TREE_VALUE (args);\n@@ -3770,8 +3766,7 @@ cp_free_lang_data (tree t)\n    should be a C target hook.  But currently this is not possible,\n    because this function is called via REGISTER_TARGET_PRAGMAS.  */\n void\n-c_register_addr_space (const char *word ATTRIBUTE_UNUSED,\n-\t\t       addr_space_t as ATTRIBUTE_UNUSED)\n+c_register_addr_space (const char * /*word*/, addr_space_t /*as*/)\n {\n }\n "}, {"sha": "60d7319150bb26183e09f606d737dbe521ad8896", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12308bc61de47a985b260889194156021da3cc2e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=12308bc61de47a985b260889194156021da3cc2e", "patch": "@@ -2772,7 +2772,7 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n \n /* Helper function called from c-common.  */\n tree\n-build_indirect_ref (location_t loc ATTRIBUTE_UNUSED,\n+build_indirect_ref (location_t /*loc*/,\n \t\t    tree ptr, ref_operator errorstring)\n {\n   return cp_build_indirect_ref (ptr, errorstring, tf_warning_or_error);\n@@ -3207,17 +3207,17 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function,\n \n /* Used by the C-common bits.  */\n tree\n-build_function_call (location_t loc ATTRIBUTE_UNUSED, \n+build_function_call (location_t /*loc*/, \n \t\t     tree function, tree params)\n {\n   return cp_build_function_call (function, params, tf_warning_or_error);\n }\n \n /* Used by the C-common bits.  */\n tree\n-build_function_call_vec (location_t loc ATTRIBUTE_UNUSED,\n+build_function_call_vec (location_t /*loc*/,\n \t\t\t tree function, VEC(tree,gc) *params,\n-\t\t\t VEC(tree,gc) *origtypes ATTRIBUTE_UNUSED)\n+\t\t\t VEC(tree,gc) * /*origtypes*/)\n {\n   VEC(tree,gc) *orig_params = params;\n   tree ret = cp_build_function_call_vec (function, &params,\n@@ -3693,7 +3693,7 @@ enum_cast_to_int (tree op)\n /* For the c-common bits.  */\n tree\n build_binary_op (location_t location, enum tree_code code, tree op0, tree op1,\n-\t\t int convert_p ATTRIBUTE_UNUSED)\n+\t\t int /*convert_p*/)\n {\n   return cp_build_binary_op (location, code, op0, op1, tf_warning_or_error);\n }\n@@ -5448,7 +5448,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \n /* Hook for the c-common bits that build a unary op.  */\n tree\n-build_unary_op (location_t location ATTRIBUTE_UNUSED,\n+build_unary_op (location_t /*location*/,\n \t\tenum tree_code code, tree xarg, int noconvert)\n {\n   return cp_build_unary_op (code, xarg, noconvert, tf_warning_or_error);\n@@ -5784,7 +5784,7 @@ build_x_compound_expr (location_t loc, tree op1, tree op2,\n /* Like cp_build_compound_expr, but for the c-common bits.  */\n \n tree\n-build_compound_expr (location_t loc ATTRIBUTE_UNUSED, tree lhs, tree rhs)\n+build_compound_expr (location_t /*loc*/, tree lhs, tree rhs)\n {\n   return cp_build_compound_expr (lhs, rhs, tf_warning_or_error);\n }\n@@ -6652,7 +6652,7 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n /* Like cp_build_c_cast, but for the c-common bits.  */\n \n tree\n-build_c_cast (location_t loc ATTRIBUTE_UNUSED, tree type, tree expr)\n+build_c_cast (location_t /*loc*/, tree type, tree expr)\n {\n   return cp_build_c_cast (type, expr, tf_warning_or_error);\n }\n@@ -6782,11 +6782,11 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n \f\n /* For use from the C common bits.  */\n tree\n-build_modify_expr (location_t location ATTRIBUTE_UNUSED,\n-\t\t   tree lhs, tree lhs_origtype ATTRIBUTE_UNUSED,\n+build_modify_expr (location_t /*location*/,\n+\t\t   tree lhs, tree /*lhs_origtype*/,\n \t\t   enum tree_code modifycode, \n-\t\t   location_t rhs_location ATTRIBUTE_UNUSED, tree rhs,\n-\t\t   tree rhs_origtype ATTRIBUTE_UNUSED)\n+\t\t   location_t /*rhs_location*/, tree rhs,\n+\t\t   tree /*rhs_origtype*/)\n {\n   return cp_build_modify_expr (lhs, modifycode, rhs, tf_warning_or_error);\n }"}]}