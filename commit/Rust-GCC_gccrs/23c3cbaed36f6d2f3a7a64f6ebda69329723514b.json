{"sha": "23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "node_id": "C_kwDOANBUbNoAKDIzYzNjYmFlZDM2ZjZkMmYzYTdhNjRmNmViZGE2OTMyOTcyMzUxNGI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-11T19:19:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-11T19:36:09Z"}, "message": "libstdc++: Fix bootstrap for --disable-threads build [PR107221]\n\nThe __scoped_lock type should be used unqualified so that we always\nrefer to pool::__scoped_lock, which might be the dummy fallback\nimplementation.\n\nThe __mutex and __scoped_lock types in <ext/concurrence.h> already work\nfine without __GTHREADS being defined, but that header isn't included at\nall unless _GLIBCXX_HOSTED != 0. The fallback implementation should be\nused for ! _GLIBCXX_HOSTED instead of for !defined __GTHREADS.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR bootstrap/107221\n\t* libsupc++/eh_alloc.cc (pool): Change preprocessor condition\n\tfor using __mutex from __GTHREADS to _GLIBCXX_HOSTED.\n\t(pool::allocate): Remove namespace qualification to use\n\tpool::__scoped_lock instead of __gnu_cxx::__scoped_lock.", "tree": {"sha": "c7bc5a6a395c9f78dcade0b3510261c058986ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7bc5a6a395c9f78dcade0b3510261c058986ddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c3cbaed36f6d2f3a7a64f6ebda69329723514b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9736a42e1fb8df30d72cf28594d9046bf50200c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9736a42e1fb8df30d72cf28594d9046bf50200c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9736a42e1fb8df30d72cf28594d9046bf50200c1"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "81b8a1548c6fd580ca22adf33bc66fb597db5b86", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c3cbaed36f6d2f3a7a64f6ebda69329723514b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c3cbaed36f6d2f3a7a64f6ebda69329723514b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "patch": "@@ -145,7 +145,7 @@ namespace\n \tchar data[] __attribute__((aligned));\n       };\n \n-#ifdef __GTHREADS\n+#if _GLIBCXX_HOSTED\n       // A single mutex controlling emergency allocations.\n       __gnu_cxx::__mutex emergency_mutex;\n       using __scoped_lock = __gnu_cxx::__scoped_lock;\n@@ -236,7 +236,7 @@ namespace\n \n   void *pool::allocate (std::size_t size) noexcept\n     {\n-      __gnu_cxx::__scoped_lock sentry(emergency_mutex);\n+      __scoped_lock sentry(emergency_mutex);\n       // We need an additional size_t member plus the padding to\n       // ensure proper alignment of data.\n       size += offsetof (allocated_entry, data);"}]}