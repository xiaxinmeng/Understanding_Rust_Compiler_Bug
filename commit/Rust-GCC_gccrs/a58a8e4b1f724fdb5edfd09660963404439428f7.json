{"sha": "a58a8e4b1f724fdb5edfd09660963404439428f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4YThlNGIxZjcyNGZkYjVlZGZkMDk2NjA5NjM0MDQ0Mzk0MjhmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-03-16T08:35:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-16T08:35:31Z"}, "message": "re PR debug/45882 (No debug info for vars depending on unused parameter)\n\n\tPR debug/45882\n\t* rtl.def (ENTRY_VALUE): Change format from \"e\" to \"0\".\n\t* rtl.h (ENTRY_VALUE_EXP): Define.\n\t* rtl.c (rtx_equal_p_cb, rtx_equal_p): Handle ENTRY_VALUE.\n\t* cselib.c (rtx_equal_for_cselib_p, cselib_hash_rtx): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* gengtype.c (adjust_field_rtx_def): Likewise.\n\t* var-tracking.c (vt_add_function_parameter): Adjust\n\tgen_rtx_ENTRY_VALUE uses, use ENTRY_VALUE_EXP macro.\n\t* dwarf2out.c (mem_loc_descriptor): Use ENTRY_VALUE_EXP macro.\n\t* cfgexpand.c (expand_debug_expr): If a SSA_NAME without\n\tpartition is a default definition of a PARM_DECL, use ENTRY_VALUE\n\tof its DECL_INCOMING_RTL if possible, or its DECL_RTL if set.\n\n\t* gcc.dg/guality/pr45882.c: New test.\n\nFrom-SVN: r171035", "tree": {"sha": "e1c308ef8c1fe2a484b5a77d166cb4b3682c3f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1c308ef8c1fe2a484b5a77d166cb4b3682c3f18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a58a8e4b1f724fdb5edfd09660963404439428f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58a8e4b1f724fdb5edfd09660963404439428f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58a8e4b1f724fdb5edfd09660963404439428f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58a8e4b1f724fdb5edfd09660963404439428f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b1c543325692d744eec22f779656e13605c3ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1c543325692d744eec22f779656e13605c3ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1c543325692d744eec22f779656e13605c3ceb"}], "stats": {"total": 126, "additions": 115, "deletions": 11}, "files": [{"sha": "ea855fe905c3cc905414ed6721bf995738356fad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -1,5 +1,19 @@\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/45882\n+\t* rtl.def (ENTRY_VALUE): Change format from \"e\" to \"0\".\n+\t* rtl.h (ENTRY_VALUE_EXP): Define.\n+\t* rtl.c (rtx_equal_p_cb, rtx_equal_p): Handle ENTRY_VALUE.\n+\t* cselib.c (rtx_equal_for_cselib_p, cselib_hash_rtx): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* gengtype.c (adjust_field_rtx_def): Likewise.\n+\t* var-tracking.c (vt_add_function_parameter): Adjust\n+\tgen_rtx_ENTRY_VALUE uses, use ENTRY_VALUE_EXP macro.\n+\t* dwarf2out.c (mem_loc_descriptor): Use ENTRY_VALUE_EXP macro.\n+\t* cfgexpand.c (expand_debug_expr): If a SSA_NAME without\n+\tpartition is a default definition of a PARM_DECL, use ENTRY_VALUE\n+\tof its DECL_INCOMING_RTL if possible, or its DECL_RTL if set.\n+\n \t* final.c (final_scan_insn): Handle NOTE_INSN_CALL_ARG_LOCATION.\n \tCall var_location debug hook even on CALL_INSNs.\n \t(rest_of_clean_state): Don't print NOTE_INSN_CALL_ARG_LOCATION."}, {"sha": "ebe0a0352d48ceb486929dd8504270e7a1e0cda1", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -3171,7 +3171,31 @@ expand_debug_expr (tree exp)\n \t    int part = var_to_partition (SA.map, exp);\n \n \t    if (part == NO_PARTITION)\n-\t      return NULL;\n+\t      {\n+\t\t/* If this is a reference to an incoming value of parameter\n+\t\t   that is never used in the code or where the incoming\n+\t\t   value is never used in the code, use PARM_DECL's\n+\t\t   DECL_RTL if set.  */\n+\t\tif (SSA_NAME_IS_DEFAULT_DEF (exp)\n+\t\t    && TREE_CODE (SSA_NAME_VAR (exp)) == PARM_DECL)\n+\t\t  {\n+\t\t    rtx incoming = DECL_INCOMING_RTL (SSA_NAME_VAR (exp));\n+\t\t    if (incoming\n+\t\t\t&& GET_MODE (incoming) != BLKmode\n+\t\t\t&& (REG_P (incoming)\n+\t\t\t    || (MEM_P (incoming) && REG_P (XEXP (incoming, 0)))))\n+\t\t      {\n+\t\t\top0 = gen_rtx_ENTRY_VALUE (GET_MODE (incoming));\n+\t\t\tENTRY_VALUE_EXP (op0) = incoming;\n+\t\t\tgoto adjust_mode;\n+\t\t      }\n+\t\t    op0 = expand_debug_expr (SSA_NAME_VAR (exp));\n+\t\t    if (!op0)\n+\t\t      return NULL;\n+\t\t    goto adjust_mode;\n+\t\t  }\n+\t\treturn NULL;\n+\t      }\n \n \t    gcc_assert (part >= 0 && (unsigned)part < SA.map->num_partitions);\n "}, {"sha": "f9e13ffffef8902e270181ff6a6743148f956e93", "filename": "gcc/cselib.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -803,6 +803,10 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, enum machine_mode memmode)\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);\n \n+    case ENTRY_VALUE:\n+      return rtx_equal_for_cselib_1 (ENTRY_VALUE_EXP (x), ENTRY_VALUE_EXP (y),\n+\t\t\t\t     memmode);\n+\n     case LABEL_REF:\n       return XEXP (x, 0) == XEXP (y, 0);\n \n@@ -949,6 +953,10 @@ cselib_hash_rtx (rtx x, int create, enum machine_mode memmode)\n \t      + DECL_UID (DEBUG_IMPLICIT_PTR_DECL (x));\n       return hash ? hash : (unsigned int) DEBUG_IMPLICIT_PTR;\n \n+    case ENTRY_VALUE:\n+      hash += cselib_hash_rtx (ENTRY_VALUE_EXP (x), create, memmode);\n+      return hash ? hash : (unsigned int) ENTRY_VALUE;\n+\n     case CONST_INT:\n       hash += ((unsigned) CONST_INT << 7) + INTVAL (x);\n       return hash ? hash : (unsigned int) CONST_INT;"}, {"sha": "b4bca7858324e7d8bad10f88ea5cebc1cdda54b5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -14028,14 +14028,14 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n     case ENTRY_VALUE:\n       mem_loc_result = new_loc_descr (DW_OP_GNU_entry_value, 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_loc;\n-      if (REG_P (XEXP (rtl, 0)))\n+      if (REG_P (ENTRY_VALUE_EXP (rtl)))\n \tmem_loc_result->dw_loc_oprnd1.v.val_loc\n-\t  = one_reg_loc_descriptor (dbx_reg_number (XEXP (rtl, 0)),\n+\t  = one_reg_loc_descriptor (dbx_reg_number (ENTRY_VALUE_EXP (rtl)),\n \t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n-      else if (MEM_P (XEXP (rtl, 0)) && REG_P (XEXP (XEXP (rtl, 0), 0)))\n+      else if (MEM_P (ENTRY_VALUE_EXP (rtl)) && REG_P (XEXP (ENTRY_VALUE_EXP (rtl), 0)))\n \t{\n \t  dw_loc_descr_ref ref\n-\t    = mem_loc_descriptor (XEXP (rtl, 0), GET_MODE (rtl),\n+\t    = mem_loc_descriptor (ENTRY_VALUE_EXP (rtl), GET_MODE (rtl),\n \t\t\t\t  VAR_INIT_STATUS_INITIALIZED);\n \t  if (ref == NULL)\n \t    return NULL;"}, {"sha": "bd626ed93a604c4ba7916d4f0de9246eaf45a1c3", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -1101,6 +1101,8 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\tt = symbol_union_tp, subname = \"\";\n \t      else if (i == BARRIER && aindex >= 3)\n \t\tt = scalar_tp, subname = \"rt_int\";\n+\t      else if (i == ENTRY_VALUE && aindex == 0)\n+\t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else\n \t\t{\n \t\t  error_at_line "}, {"sha": "a0f9dfb5bee62f9c7e88e8b5c2b0267e1ea7d0a0", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -334,6 +334,14 @@ print_rtx (const_rtx in_rtx)\n \t\t     DEBUG_TEMP_UID (DEBUG_EXPR_TREE_DECL (in_rtx)));\n #endif\n \t  }\n+\telse if (i == 0 && GET_CODE (in_rtx) == ENTRY_VALUE)\n+\t  {\n+\t    indent += 2;\n+\t    if (!sawclose)\n+\t      fprintf (outfile, \" \");\n+\t    print_rtx (ENTRY_VALUE_EXP (in_rtx));\n+\t    indent -= 2;\n+\t  }\n \tbreak;\n \n       case 'e':"}, {"sha": "613cadb062b0b4220d185746861c613537fb74db", "filename": "gcc/rtl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -1,6 +1,6 @@\n /* RTL utility routines.\n    Copyright (C) 1987, 1988, 1991, 1994, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -412,6 +412,9 @@ rtx_equal_p_cb (const_rtx x, const_rtx y, rtx_equal_p_callback_function cb)\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);\n \n+    case ENTRY_VALUE:\n+      return rtx_equal_p_cb (ENTRY_VALUE_EXP (x), ENTRY_VALUE_EXP (y), cb);\n+\n     default:\n       break;\n     }\n@@ -544,6 +547,9 @@ rtx_equal_p (const_rtx x, const_rtx y)\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);\n \n+    case ENTRY_VALUE:\n+      return rtx_equal_p (ENTRY_VALUE_EXP (x), ENTRY_VALUE_EXP (y));\n+\n     default:\n       break;\n     }"}, {"sha": "cb5555ac59177ade6f5a69e48e78672685737ed9", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -718,9 +718,10 @@ DEF_RTL_EXPR(VAR_LOCATION, \"var_location\", \"tei\", RTX_EXTRA)\n    addressable.  */\n DEF_RTL_EXPR(DEBUG_IMPLICIT_PTR, \"debug_implicit_ptr\", \"t\", RTX_OBJ)\n \n-/* Represents value that argument had on function entry.  Should\n-   be only used in VAR_LOCATION location expression.  */\n-DEF_RTL_EXPR(ENTRY_VALUE, \"entry_value\", \"e\", RTX_OBJ)\n+/* Represents value that argument had on function entry.  The\n+   single argument is the DECL_INCOMING_RTL of the corresponding\n+   parameter.  */\n+DEF_RTL_EXPR(ENTRY_VALUE, \"entry_value\", \"0\", RTX_OBJ)\n \n /* All expressions from this point forward appear only in machine\n    descriptions.  */"}, {"sha": "73739c4f781b1c70c332ed6e273f772f36859fa3", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -833,6 +833,10 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n    but a value from enum reg_note.  */\n #define REG_NOTES(INSN)\tXEXP(INSN, 7)\n \n+/* In an ENTRY_VALUE this is the DECL_INCOMING_RTL of the argument in\n+   question.  */\n+#define ENTRY_VALUE_EXP(RTX) (RTL_CHECKC1 (RTX, 0, ENTRY_VALUE).rt_rtx)\n+\n enum reg_note\n {\n #define DEF_REG_NOTE(NAME) NAME,"}, {"sha": "601c96b7b30695d2dc0e699c5b973bc1859e13f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -1,3 +1,8 @@\n+2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/45882\n+\t* gcc.dg/guality/pr45882.c: New test.\n+\n 2011-03-15  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-recursion.C: New."}, {"sha": "335574d83f27579661be1083920ba8808ed7e2b5", "filename": "gcc/testsuite/gcc.dg/guality/pr45882.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr45882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr45882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr45882.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -0,0 +1,30 @@\n+/* PR debug/45882 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+extern void abort (void);\n+int a[1024];\n+volatile short int v;\n+\n+__attribute__((noinline)) int\n+foo (int i, int j)\n+{\n+  int b = i;\t\t/* { dg-final { gdb-test 16 \"b\" \"7\" } } */\n+  int c = i + 4;\t/* { dg-final { gdb-test 16 \"c\" \"11\" } } */\n+  int d = a[i];\t\t/* { dg-final { gdb-test 16 \"d\" \"112\" } } */\n+  int e = a[i + 6];\t/* { dg-final { gdb-test 16 \"e\" \"142\" } } */\n+  ++v;\n+  return ++j;\n+}\n+\n+int\n+main (void)\n+{\n+  int l;\n+  asm (\"\" : \"=r\" (l) : \"0\" (7));\n+  a[7] = 112;\n+  a[7 + 6] = 142;\n+  if (foo (l, 7) != 8)\n+    abort ();\n+  return l - 7;\n+}"}, {"sha": "50890d8c0ccd5945e89b17915a2ef1dca9066083", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a8e4b1f724fdb5edfd09660963404439428f7/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=a58a8e4b1f724fdb5edfd09660963404439428f7", "patch": "@@ -8377,7 +8377,8 @@ vt_add_function_parameter (tree parm)\n \t  el = (struct elt_loc_list *)\n \t    ggc_alloc_cleared_atomic (sizeof (*el));\n \t  el->next = val->locs;\n-\t  el->loc = gen_rtx_ENTRY_VALUE (GET_MODE (incoming), incoming);\n+\t  el->loc = gen_rtx_ENTRY_VALUE (GET_MODE (incoming));\n+\t  ENTRY_VALUE_EXP (el->loc) = incoming;\n \t  el->setting_insn = get_insns ();\n \t  val->locs = el;\n \t  if (TREE_CODE (TREE_TYPE (parm)) == REFERENCE_TYPE\n@@ -8394,7 +8395,8 @@ vt_add_function_parameter (tree parm)\n \t\t  el = (struct elt_loc_list *)\n \t\t    ggc_alloc_cleared_atomic (sizeof (*el));\n \t\t  el->next = val->locs;\n-\t\t  el->loc = gen_rtx_ENTRY_VALUE (indmode, mem);\n+\t\t  el->loc = gen_rtx_ENTRY_VALUE (indmode);\n+\t\t  ENTRY_VALUE_EXP (el->loc) = mem;\n \t\t  el->setting_insn = get_insns ();\n \t\t  val->locs = el;\n \t\t}"}]}