{"sha": "d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmNDI2ZWNjOTNkNjVjYjljOGM3Njk4MTE2YjZiYWQxOTRmYmRiOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-06T20:34:13Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-06T20:34:13Z"}, "message": "rs6000.opt (rs6000_ieeequad, [...]): Remove TargetVariable entries.\n\n\t* config/rs6000/rs6000.opt (rs6000_ieeequad, rs6000_altivec_abi,\n\trs6000_spe_abi, rs6000_darwin64_abi): Remove TargetVariable\n\tentries.\n\t(mabi=): Replace with separate entries for mabi=altivec,\n\tmabi=no-altivec, mabi=spe, mabi=no-spe, mabi=d64, mabi=d32,\n\tmabi=ieeelongdouble and mabi=ibmlongdouble.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Move\n\tcheck for -mabi=spe without SPE ABI support here.\n\t(rs6000_handle_option): Replace OPT_mabi_ handling with\n\tOPT_mabi_altivec and OPT_mabi_spe handling.\n\nFrom-SVN: r173509", "tree": {"sha": "77aaf3838fe1d8f7ffbdb8e5f52a4dd58d725262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77aaf3838fe1d8f7ffbdb8e5f52a4dd58d725262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e7e7a49b760bc46bf0ade36c25a7d8e088b6dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7e7a49b760bc46bf0ade36c25a7d8e088b6dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7e7a49b760bc46bf0ade36c25a7d8e088b6dea"}], "stats": {"total": 132, "additions": 55, "deletions": 77}, "files": [{"sha": "f72b204321691c4e85dbd298e0a23f18977212f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "patch": "@@ -1,3 +1,16 @@\n+2011-05-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.opt (rs6000_ieeequad, rs6000_altivec_abi,\n+\trs6000_spe_abi, rs6000_darwin64_abi): Remove TargetVariable\n+\tentries.\n+\t(mabi=): Replace with separate entries for mabi=altivec,\n+\tmabi=no-altivec, mabi=spe, mabi=no-spe, mabi=d64, mabi=d32,\n+\tmabi=ieeelongdouble and mabi=ibmlongdouble.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Move\n+\tcheck for -mabi=spe without SPE ABI support here.\n+\t(rs6000_handle_option): Replace OPT_mabi_ handling with\n+\tOPT_mabi_altivec and OPT_mabi_spe handling.\n+\n 2011-05-06  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (contains_subprogram_definition): New function."}, {"sha": "4504ffebb872ec848ea5a34ce9ffd4fc8fcac8b7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 58, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "patch": "@@ -2665,6 +2665,11 @@ rs6000_option_override_internal (bool global_init_p)\n     warning (0, \"-malign-power is not supported for 64-bit Darwin;\"\n \t     \" it is incompatible with the installed C and C++ libraries\");\n \n+  if (global_options_set.x_rs6000_spe_abi\n+      && rs6000_spe_abi\n+      && !TARGET_SPE_ABI)\n+    error (\"not configured for SPE ABI\");\n+\n   /* Numerous experiment shows that IRA based loop pressure\n      calculation works better for RTL loop invariant motion on targets\n      with enough (>= 32) registers.  It is an expensive optimization.\n@@ -4335,65 +4340,13 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       break;\n #endif\n \n-    case OPT_mabi_:\n-      if (!strcmp (arg, \"altivec\"))\n-\t{\n-\t  opts_set->x_rs6000_altivec_abi = true;\n-\t  opts->x_rs6000_altivec_abi = 1;\n-\n-\t  /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n-\t  opts->x_rs6000_spe_abi = 0;\n-\t}\n-      else if (! strcmp (arg, \"no-altivec\"))\n-\t{\n-\t  opts_set->x_rs6000_altivec_abi = true;\n-\t  opts->x_rs6000_altivec_abi = 0;\n-\t}\n-      else if (! strcmp (arg, \"spe\"))\n-\t{\n-\t  opts_set->x_rs6000_spe_abi = true;\n-\t  opts->x_rs6000_spe_abi = 1;\n-\t  opts->x_rs6000_altivec_abi = 0;\n-\t  if (!TARGET_SPE_ABI)\n-\t    error_at (loc, \"not configured for ABI: '%s'\", arg);\n-\t}\n-      else if (! strcmp (arg, \"no-spe\"))\n-\t{\n-\t  opts_set->x_rs6000_spe_abi = true;\n-\t  opts->x_rs6000_spe_abi = 0;\n-\t}\n-\n-      /* These are here for testing during development only, do not\n-\t document in the manual please.  */\n-      else if (! strcmp (arg, \"d64\"))\n-\t{\n-\t  opts->x_rs6000_darwin64_abi = 1;\n-\t  warning_at (loc, 0, \"using darwin64 ABI\");\n-\t}\n-      else if (! strcmp (arg, \"d32\"))\n-\t{\n-\t  opts->x_rs6000_darwin64_abi = 0;\n-\t  warning_at (loc, 0, \"using old darwin ABI\");\n-\t}\n-\n-      else if (! strcmp (arg, \"ibmlongdouble\"))\n-\t{\n-\t  opts_set->x_rs6000_ieeequad = true;\n-\t  opts->x_rs6000_ieeequad = 0;\n-\t  warning_at (loc, 0, \"using IBM extended precision long double\");\n-\t}\n-      else if (! strcmp (arg, \"ieeelongdouble\"))\n-\t{\n-\t  opts_set->x_rs6000_ieeequad = true;\n-\t  opts->x_rs6000_ieeequad = 1;\n-\t  warning_at (loc, 0, \"using IEEE extended precision long double\");\n-\t}\n+    case OPT_mabi_altivec:\n+      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n+      opts->x_rs6000_spe_abi = 0;\n+      break;\n \n-      else\n-\t{\n-\t  error_at (loc, \"unknown ABI specified: '%s'\", arg);\n-\t  return false;\n-\t}\n+    case OPT_mabi_spe:\n+      opts->x_rs6000_altivec_abi = 0;\n       break;\n \n     case OPT_mcpu_:"}, {"sha": "f62417cb9a6140b1f88d4577f2fec8a2ec9c07d3", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f426ecc93d65cb9c8c7698116b6bad194fbdb9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=d8f426ecc93d65cb9c8c7698116b6bad194fbdb9", "patch": "@@ -47,22 +47,6 @@ enum rs6000_dependence_cost rs6000_sched_costly_dep = no_dep_costly\n TargetVariable\n enum rs6000_nop_insertion rs6000_sched_insert_nops = sched_finish_none\n \n-;; IEEE quad extended precision long double.\n-TargetVariable\n-unsigned char rs6000_ieeequad\n-\n-;; Nonzero to use AltiVec ABI.\n-TargetVariable\n-unsigned char rs6000_altivec_abi\n-\n-;; Nonzero if we want SPE ABI extensions.\n-TargetVariable\n-unsigned char rs6000_spe_abi\n-\n-;; Nonzero if we want Darwin's struct-by-value-in-regs ABI.\n-TargetVariable\n-unsigned char rs6000_darwin64_abi\n-\n ;; Non-zero to allow overriding loop alignment.\n TargetVariable\n unsigned char can_override_loop_align\n@@ -385,9 +369,37 @@ mdebug=\n Target RejectNegative Joined\n -mdebug=\tEnable debug output\n \n-mabi=\n-Target RejectNegative Joined\n--mabi=\tSpecify ABI to use\n+mabi=altivec\n+Target RejectNegative Var(rs6000_altivec_abi) Save\n+Use the AltiVec ABI extensions\n+\n+mabi=no-altivec\n+Target RejectNegative Var(rs6000_altivec_abi, 0)\n+Do not use the AltiVec ABI extensions\n+\n+mabi=spe\n+Target RejectNegative Var(rs6000_spe_abi) Save\n+Use the SPE ABI extensions\n+\n+mabi=no-spe\n+Target RejectNegative Var(rs6000_spe_abi, 0)\n+Do not use the SPE ABI extensions\n+\n+; These are here for testing during development only, do not document\n+; in the manual please.\n+\n+; If we want Darwin's struct-by-value-in-regs ABI.\n+mabi=d64\n+Target RejectNegative Undocumented Warn(using darwin64 ABI) Var(rs6000_darwin64_abi) Save\n+\n+mabi=d32\n+Target RejectNegative Undocumented Warn(using old darwin ABI) Var(rs6000_darwin64_abi, 0)\n+\n+mabi=ieeelongdouble\n+Target RejectNegative Undocumented Warn(using IEEE extended precision long double) Var(rs6000_ieeequad) Save\n+\n+mabi=ibmlongdouble\n+Target RejectNegative Undocumented Warn(using IBM extended precision long double) Var(rs6000_ieeequad, 0)\n \n mcpu=\n Target RejectNegative Joined"}]}