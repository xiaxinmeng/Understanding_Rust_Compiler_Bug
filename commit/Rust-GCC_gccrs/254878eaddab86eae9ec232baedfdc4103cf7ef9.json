{"sha": "254878eaddab86eae9ec232baedfdc4103cf7ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0ODc4ZWFkZGFiODZlYWU5ZWMyMzJiYWVkZmRjNDEwM2NmN2VmOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-02-07T03:00:16Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-07T03:00:16Z"}, "message": "builtins.c (expand_builtin_signbit): Use extract_bit_field instead of gen_highpart or gen_lowpart when...\n\n\n\t* builtins.c (expand_builtin_signbit): Use extract_bit_field instead\n\tof gen_highpart or gen_lowpart when the floating point format is\n\twider than the result mode.\n\nCo-Authored-By: Ulrich Weigand <uweigand@de.ibm.com>\n\nFrom-SVN: r77439", "tree": {"sha": "c2bcedcd0f279c5d93fcb70ec7914ccfd0bf9d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2bcedcd0f279c5d93fcb70ec7914ccfd0bf9d4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254878eaddab86eae9ec232baedfdc4103cf7ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254878eaddab86eae9ec232baedfdc4103cf7ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254878eaddab86eae9ec232baedfdc4103cf7ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254878eaddab86eae9ec232baedfdc4103cf7ef9/comments", "author": null, "committer": null, "parents": [{"sha": "b105316055e04324bb2b77497482859ae81367ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b105316055e04324bb2b77497482859ae81367ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b105316055e04324bb2b77497482859ae81367ba"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "48393ee5ece667a9f07c8cbaa279760dfb76930d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254878eaddab86eae9ec232baedfdc4103cf7ef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254878eaddab86eae9ec232baedfdc4103cf7ef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=254878eaddab86eae9ec232baedfdc4103cf7ef9", "patch": "@@ -1,3 +1,10 @@\n+2004-02-06  Roger Sayle  <roger@eyesopen.com>\n+\t    Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* builtins.c (expand_builtin_signbit): Use extract_bit_field instead\n+\tof gen_highpart or gen_lowpart when the floating point format is\n+\twider than the result mode.\n+\n 2004-02-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* dwarf2out.c (loclabel_num): Move into #ifdef "}, {"sha": "48be07b7a26ce69d738a0636e457cb8dc1762542", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254878eaddab86eae9ec232baedfdc4103cf7ef9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254878eaddab86eae9ec232baedfdc4103cf7ef9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=254878eaddab86eae9ec232baedfdc4103cf7ef9", "patch": "@@ -4986,34 +4986,35 @@ expand_builtin_signbit (tree exp, rtx target)\n   temp = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n   temp = gen_lowpart (imode, temp);\n \n-  if (GET_MODE_BITSIZE (imode) < GET_MODE_BITSIZE (rmode))\n-    temp = gen_lowpart (rmode, temp);\n-  else if (GET_MODE_BITSIZE (imode) > GET_MODE_BITSIZE (rmode))\n+  if (GET_MODE_BITSIZE (imode) > GET_MODE_BITSIZE (rmode))\n     {\n-      if (bitpos > GET_MODE_BITSIZE (rmode))\n+      if (BITS_BIG_ENDIAN)\n+\tbitpos = GET_MODE_BITSIZE (imode) - 1 - bitpos;\n+      temp = copy_to_mode_reg (imode, temp);\n+      temp = extract_bit_field (temp, 1, bitpos, 1,\n+\t\t\t\tNULL_RTX, rmode, rmode,\n+\t\t\t\tGET_MODE_SIZE (imode));\n+    }\n+  else\n+    {\n+      if (GET_MODE_BITSIZE (imode) < GET_MODE_BITSIZE (rmode))\n+\ttemp = gen_lowpart (rmode, temp);\n+      if (bitpos < HOST_BITS_PER_WIDE_INT)\n \t{\n-\t  temp = gen_highpart (rmode, temp);\n-\t  bitpos %= GET_MODE_BITSIZE (rmode);\n+\t  hi = 0;\n+\t  lo = (HOST_WIDE_INT) 1 << bitpos;\n \t}\n       else\n-\ttemp = gen_lowpart (rmode, temp);\n-    }\n+\t{\n+\t  hi = (HOST_WIDE_INT) 1 << (bitpos - HOST_BITS_PER_WIDE_INT);\n+\t  lo = 0;\n+\t}\n \n-  if (bitpos < HOST_BITS_PER_WIDE_INT)\n-    {\n-      hi = 0;\n-      lo = (HOST_WIDE_INT) 1 << bitpos;\n+      temp = force_reg (rmode, temp);\n+      temp = expand_binop (rmode, and_optab, temp,\n+\t\t\t   immed_double_const (lo, hi, rmode),\n+\t\t\t   target, 1, OPTAB_LIB_WIDEN);\n     }\n-  else\n-    {\n-      hi = (HOST_WIDE_INT) 1 << (bitpos - HOST_BITS_PER_WIDE_INT);\n-      lo = 0;\n-    }\n-\n-  temp = force_reg (rmode, temp);\n-  temp = expand_binop (rmode, and_optab, temp,\n-\t\t       immed_double_const (lo, hi, rmode),\n-\t\t       target, 1, OPTAB_LIB_WIDEN);\n   return temp;\n }\n \f"}]}