{"sha": "64c01f8071113aff84414204e9d63cff3701bfb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjMDFmODA3MTExM2FmZjg0NDE0MjA0ZTlkNjNjZmYzNzAxYmZiNw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T23:22:34Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T23:22:34Z"}, "message": "(build_binary_op): Warn when ~unsigned is compared against unsigned...\n\n(build_binary_op): Warn when ~unsigned is compared\nagainst unsigned, and type promotions result in an unexpected answer.\n\nFrom-SVN: r9670", "tree": {"sha": "cc8d37f2da5693f9404b7b73405a114de0297a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc8d37f2da5693f9404b7b73405a114de0297a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c01f8071113aff84414204e9d63cff3701bfb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c01f8071113aff84414204e9d63cff3701bfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c01f8071113aff84414204e9d63cff3701bfb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c01f8071113aff84414204e9d63cff3701bfb7/comments", "author": null, "committer": null, "parents": [{"sha": "2a6f449e6661ab9dcd038aefbb35cbb33208b133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6f449e6661ab9dcd038aefbb35cbb33208b133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6f449e6661ab9dcd038aefbb35cbb33208b133"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "9ac1cad26c4b316b8547a8305a5c861380ee85f3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c01f8071113aff84414204e9d63cff3701bfb7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c01f8071113aff84414204e9d63cff3701bfb7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=64c01f8071113aff84414204e9d63cff3701bfb7", "patch": "@@ -2453,6 +2453,10 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      int op0_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op0));\n \t      int op1_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op1));\n \n+\t      int unsignedp0, unsignedp1;\n+\t      tree primop0 = get_narrower (op0, &unsignedp0);\n+\t      tree primop1 = get_narrower (op1, &unsignedp1);\n+\n \t      /* Avoid spurious warnings for comparison with enumerators.  */\n  \n \t      xop0 = orig_op0;\n@@ -2492,6 +2496,61 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t/* OK */;\n \t      else\n \t\twarning (\"comparison between signed and unsigned\");\n+\n+\t      /* Warn if two unsigned values are being compared in a size\n+\t\t larger than their original size, and one (and only one) is the\n+\t\t result of a `~' operator.  This comparison will always fail.\n+\n+\t\t Also warn if one operand is a constant, and the constant\n+\t\t does not have all bits set that are set in the ~ operand\n+\t\t when it is extended.  */\n+\n+\t      if ((TREE_CODE (primop0) == BIT_NOT_EXPR)\n+\t\t  != (TREE_CODE (primop1) == BIT_NOT_EXPR))\n+\t\t{\n+\t\t  if (TREE_CODE (primop0) == BIT_NOT_EXPR)\n+\t\t    primop0 = get_narrower (TREE_OPERAND (primop0, 0),\n+\t\t\t\t\t    &unsignedp0);\n+\t\t  else\n+\t\t    primop1 = get_narrower (TREE_OPERAND (primop1, 0),\n+\t\t\t\t\t    &unsignedp1);\n+\t      \n+\t\t  if (TREE_CODE (primop0) == INTEGER_CST\n+\t\t      || TREE_CODE (primop1) == INTEGER_CST)\n+\t\t    {\n+\t\t      tree primop;\n+\t\t      long constant, mask;\n+\t\t      int unsignedp, bits;\n+\n+\t\t      if (TREE_CODE (primop0) == INTEGER_CST)\n+\t\t\t{\n+\t\t\t  primop = primop1;\n+\t\t\t  unsignedp = unsignedp1;\n+\t\t\t  constant = TREE_INT_CST_LOW (primop0);\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  primop = primop0;\n+\t\t\t  unsignedp = unsignedp0;\n+\t\t\t  constant = TREE_INT_CST_LOW (primop1);\n+\t\t\t}\n+\n+\t\t      bits = TYPE_PRECISION (TREE_TYPE (primop));\n+\t\t      if (bits < TYPE_PRECISION (result_type)\n+\t\t\t  && bits < HOST_BITS_PER_LONG && unsignedp)\n+\t\t\t{\n+\t\t\t  mask = (~0L) << bits;\n+\t\t\t  if ((mask & constant) != mask)\n+\t\t\t    warning (\"comparison of promoted ~unsigned with constant\");\n+\t\t\t}\n+\t\t    }\n+\t\t  else if (unsignedp0 && unsignedp1\n+\t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop0))\n+\t\t\t       < TYPE_PRECISION (result_type))\n+\t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop1))\n+\t\t\t       < TYPE_PRECISION (result_type)))\n+\t\t    warning (\"comparison of promoted ~unsigned with unsigned\");\n+\t\t}\n \t    }\n \t}\n     }"}]}