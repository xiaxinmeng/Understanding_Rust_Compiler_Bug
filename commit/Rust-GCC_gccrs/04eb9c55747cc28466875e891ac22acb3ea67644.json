{"sha": "04eb9c55747cc28466875e891ac22acb3ea67644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlYjljNTU3NDdjYzI4NDY2ODc1ZTg5MWFjMjJhY2IzZWE2NzY0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-29T20:04:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-29T20:04:52Z"}, "message": "PR c++/67445 - returning temporary initializer_list.\n\n\tPR c++/67711 - assigning from temporary initializer_list.\n\tPR c++/48562 - new initializer_list.\n\t* typeck.c (maybe_warn_about_returning_address_of_local): Also warn\n\tabout returning local initializer_list.\n\t* cp-tree.h (AUTO_TEMP_NAME, TEMP_NAME_P): Remove.\n\t* call.c (build_over_call): Warn about assignment from temporary\n\tinit_list.\n\t* init.c (build_new_1): Warn about 'new std::initializer_list'.\n\t(find_list_begin, maybe_warn_list_ctor): New.\n\t(perform_member_init): Use maybe_warn_list_ctor.\n\nFrom-SVN: r260905", "tree": {"sha": "ae59c85ca4dce30aa95d2fe4a1f09b0dd582049e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae59c85ca4dce30aa95d2fe4a1f09b0dd582049e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04eb9c55747cc28466875e891ac22acb3ea67644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eb9c55747cc28466875e891ac22acb3ea67644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04eb9c55747cc28466875e891ac22acb3ea67644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eb9c55747cc28466875e891ac22acb3ea67644/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2e68ea0afc4dbb3fda7679c19749a0a5dd6def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2e68ea0afc4dbb3fda7679c19749a0a5dd6def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2e68ea0afc4dbb3fda7679c19749a0a5dd6def"}], "stats": {"total": 349, "additions": 292, "deletions": 57}, "files": [{"sha": "cb6ee1319c7a93b39348ba61dcf8a5fb8542d7c6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -1,3 +1,7 @@\n+2018-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (Winit-list-lifetime): New flag.\n+\n 2018-05-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-lex.c (get_fileinfo): Use splay_tree_compare_strings and"}, {"sha": "6031cc356b0397269f416b85992ee1b82f185486", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -608,6 +608,10 @@ Winit-self\n C ObjC C++ ObjC++ Var(warn_init_self) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about variables which are initialized to themselves.\n \n+Winit-list-lifetime\n+C++ ObjC++ Var(warn_init_list) Warning Init(1)\n+Warn about uses of std::initializer_list that can result in dangling pointers.\n+\n Wimplicit\n C ObjC Var(warn_implicit) Warning LangEnabledBy(C ObjC,Wall)\n Warn about implicit declarations."}, {"sha": "e94615f0ea339d2f3fb9201ad530859414a3b91a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -1,3 +1,17 @@\n+2018-05-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67445 - returning temporary initializer_list.\n+\tPR c++/67711 - assigning from temporary initializer_list.\n+\tPR c++/48562 - new initializer_list.\n+\t* typeck.c (maybe_warn_about_returning_address_of_local): Also warn\n+\tabout returning local initializer_list.\n+\t* cp-tree.h (AUTO_TEMP_NAME, TEMP_NAME_P): Remove.\n+\t* call.c (build_over_call): Warn about assignment from temporary\n+\tinit_list.\n+\t* init.c (build_new_1): Warn about 'new std::initializer_list'.\n+\t(find_list_begin, maybe_warn_list_ctor): New.\n+\t(perform_member_init): Use maybe_warn_list_ctor.\n+\n 2018-05-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85883"}, {"sha": "2bbf9837487b7e352d490df2a2e355018ccedb0a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -8217,6 +8217,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       tree type = TREE_TYPE (to);\n       tree as_base = CLASSTYPE_AS_BASE (type);\n       tree arg = argarray[1];\n+      location_t loc = EXPR_LOC_OR_LOC (arg, input_location);\n \n       if (is_really_empty_class (type))\n \t{\n@@ -8226,6 +8227,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t}\n       else if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n \t{\n+\t  if (is_std_init_list (type)\n+\t      && conv_binds_ref_to_prvalue (convs[1]))\n+\t    warning_at (loc, OPT_Winit_list_lifetime,\n+\t\t\t\"assignment from temporary initializer_list does not \"\n+\t\t\t\"extend the lifetime of the underlying array\");\n \t  arg = cp_build_fold_indirect_ref (arg);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n \t}"}, {"sha": "6a97abbe4e3bd90ed23fd89a9f2a4c068cec0687", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -5234,10 +5234,6 @@ extern GTY(()) vec<tree, va_gc> *keyed_classes;\n \n #else /* NO_DOLLAR_IN_LABEL */\n \n-#define AUTO_TEMP_NAME \"__tmp_\"\n-#define TEMP_NAME_P(ID_NODE) \\\n-  (!strncmp (IDENTIFIER_POINTER (ID_NODE), AUTO_TEMP_NAME, \\\n-\t     sizeof (AUTO_TEMP_NAME) - 1))\n #define VTABLE_NAME \"__vt_\"\n #define VTABLE_NAME_P(ID_NODE) \\\n   (!strncmp (IDENTIFIER_POINTER (ID_NODE), VTABLE_NAME, \\\n@@ -5272,8 +5268,6 @@ extern GTY(()) vec<tree, va_gc> *keyed_classes;\n   && IDENTIFIER_POINTER (ID_NODE)[2] == 't' \\\n   && IDENTIFIER_POINTER (ID_NODE)[3] == JOINER)\n \n-#define TEMP_NAME_P(ID_NODE) \\\n-  (!strncmp (IDENTIFIER_POINTER (ID_NODE), AUTO_TEMP_NAME, sizeof (AUTO_TEMP_NAME)-1))\n #define VFIELD_NAME_P(ID_NODE) \\\n   (!strncmp (IDENTIFIER_POINTER (ID_NODE), VFIELD_NAME, sizeof(VFIELD_NAME)-1))\n \n@@ -6888,6 +6882,7 @@ extern void finish_label_decl\t\t\t(tree);\n extern cp_expr finish_parenthesized_expr\t(cp_expr);\n extern tree force_paren_expr\t\t\t(tree);\n extern tree maybe_undo_parenthesized_ref\t(tree);\n+extern tree maybe_strip_ref_conversion\t\t(tree);\n extern tree finish_non_static_data_member       (tree, tree, tree);\n extern tree begin_stmt_expr\t\t\t(void);\n extern tree finish_stmt_expr_expr\t\t(tree, tree);"}, {"sha": "24119d188027168d06de33368a6fbb0928c94ed3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -674,6 +674,64 @@ maybe_reject_flexarray_init (tree member, tree init)\n   return true;\n }\n \n+/* If INIT's value can come from a call to std::initializer_list<T>::begin,\n+   return that function.  Otherwise, NULL_TREE.  */\n+\n+static tree\n+find_list_begin (tree init)\n+{\n+  STRIP_NOPS (init);\n+  while (TREE_CODE (init) == COMPOUND_EXPR)\n+    init = TREE_OPERAND (init, 1);\n+  STRIP_NOPS (init);\n+  if (TREE_CODE (init) == COND_EXPR)\n+    {\n+      tree left = TREE_OPERAND (init, 1);\n+      if (!left)\n+\tleft = TREE_OPERAND (init, 0);\n+      left = find_list_begin (left);\n+      if (left)\n+\treturn left;\n+      return find_list_begin (TREE_OPERAND (init, 2));\n+    }\n+  if (TREE_CODE (init) == CALL_EXPR)\n+    if (tree fn = get_callee_fndecl (init))\n+      if (id_equal (DECL_NAME (fn), \"begin\")\n+\t  && is_std_init_list (DECL_CONTEXT (fn)))\n+\treturn fn;\n+  return NULL_TREE;\n+}\n+\n+/* If INIT initializing MEMBER is copying the address of the underlying array\n+   of an initializer_list, warn.  */\n+\n+static void\n+maybe_warn_list_ctor (tree member, tree init)\n+{\n+  tree memtype = TREE_TYPE (member);\n+  if (!init || !TYPE_PTR_P (memtype)\n+      || !is_list_ctor (current_function_decl))\n+    return;\n+\n+  tree parms = FUNCTION_FIRST_USER_PARMTYPE (current_function_decl);\n+  tree initlist = non_reference (TREE_VALUE (parms));\n+  tree targs = CLASSTYPE_TI_ARGS (initlist);\n+  tree elttype = TREE_VEC_ELT (targs, 0);\n+\n+  if (!same_type_ignoring_top_level_qualifiers_p\n+      (TREE_TYPE (memtype), elttype))\n+    return;\n+\n+  tree begin = find_list_begin (init);\n+  if (!begin)\n+    return;\n+\n+  location_t loc = EXPR_LOC_OR_LOC (init, input_location);\n+  warning_at (loc, OPT_Winit_list_lifetime,\n+\t     \"initializing %qD from %qE does not extend the lifetime \"\n+\t     \"of the underlying array\", member, begin);\n+}\n+\n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n    arguments.  If TREE_LIST is void_type_node, an empty initializer\n    list was given; if NULL_TREE no initializer was given.  */\n@@ -886,6 +944,8 @@ perform_member_init (tree member, tree init)\n \tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n \t\t\t\t\t\ttf_warning_or_error);\n \n+      maybe_warn_list_ctor (member, init);\n+\n       /* Reject a member initializer for a flexible array member.  */\n       if (init && !maybe_reject_flexarray_init (member, init))\n \tfinish_expr_stmt (cp_build_modify_expr (input_location, decl,\n@@ -2934,6 +2994,11 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       return error_mark_node;\n     }\n \n+  if (is_std_init_list (elt_type))\n+    warning (OPT_Winit_list_lifetime,\n+\t     \"%<new%> of initializer_list does not \"\n+\t     \"extend the lifetime of the underlying array\");\n+\n   if (abstract_virtuals_error_sfinae (ACU_NEW, elt_type, complain))\n     return error_mark_node;\n "}, {"sha": "25d11f5c7b6c7667dd63c520c71329b6f9d04789", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -9012,6 +9012,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n {\n   tree valtype = TREE_TYPE (DECL_RESULT (current_function_decl));\n   tree whats_returned = fold_for_warn (retval);\n+  location_t loc = EXPR_LOC_OR_LOC (retval, input_location);\n \n   for (;;)\n     {\n@@ -9024,6 +9025,21 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \tbreak;\n     }\n \n+  if (TREE_CODE (whats_returned) == TARGET_EXPR\n+      && is_std_init_list (TREE_TYPE (whats_returned)))\n+    {\n+      tree init = TARGET_EXPR_INITIAL (whats_returned);\n+      if (TREE_CODE (init) == CONSTRUCTOR)\n+\t/* Pull out the array address.  */\n+\twhats_returned = CONSTRUCTOR_ELT (init, 0)->value;\n+      else if (TREE_CODE (init) == INDIRECT_REF)\n+\t/* The source of a trivial copy looks like *(T*)&var.  */\n+\twhats_returned = TREE_OPERAND (init, 0);\n+      else\n+\treturn false;\n+      STRIP_NOPS (whats_returned);\n+    }\n+\n   if (TREE_CODE (whats_returned) != ADDR_EXPR)\n     return false;\n   whats_returned = TREE_OPERAND (whats_returned, 0);\n@@ -9032,21 +9048,17 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t || TREE_CODE (whats_returned) == ARRAY_REF)\n     whats_returned = TREE_OPERAND (whats_returned, 0);\n \n-  if (TYPE_REF_P (valtype))\n+  if (TREE_CODE (whats_returned) == AGGR_INIT_EXPR\n+      || TREE_CODE (whats_returned) == TARGET_EXPR)\n     {\n-      if (TREE_CODE (whats_returned) == AGGR_INIT_EXPR\n-\t  || TREE_CODE (whats_returned) == TARGET_EXPR)\n-\t{\n-\t  warning (OPT_Wreturn_local_addr, \"returning reference to temporary\");\n-\t  return true;\n-\t}\n-      if (VAR_P (whats_returned)\n-\t  && DECL_NAME (whats_returned)\n-\t  && TEMP_NAME_P (DECL_NAME (whats_returned)))\n-\t{\n-\t  warning (OPT_Wreturn_local_addr, \"reference to non-lvalue returned\");\n-\t  return true;\n-\t}\n+      if (TYPE_REF_P (valtype))\n+\twarning_at (loc, OPT_Wreturn_local_addr,\n+\t\t    \"returning reference to temporary\");\n+      else if (is_std_init_list (valtype))\n+\twarning_at (loc, OPT_Winit_list_lifetime,\n+\t\t    \"returning temporary initializer_list does not extend \"\n+\t\t    \"the lifetime of the underlying array\");\n+      return true;\n     }\n \n   if (DECL_P (whats_returned)\n@@ -9056,19 +9068,27 @@ maybe_warn_about_returning_address_of_local (tree retval)\n       && !(TREE_STATIC (whats_returned)\n \t   || TREE_PUBLIC (whats_returned)))\n     {\n+      bool w = false;\n       if (TYPE_REF_P (valtype))\n-\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n-\t\t    OPT_Wreturn_local_addr,\n-\t\t    \"reference to local variable %qD returned\",\n-\t\t    whats_returned);\n+\tw = warning_at (loc, OPT_Wreturn_local_addr,\n+\t\t\t\"reference to local variable %qD returned\",\n+\t\t\twhats_returned);\n+      else if (is_std_init_list (valtype))\n+\tw = warning_at (loc, OPT_Winit_list_lifetime,\n+\t\t\t\"returning local initializer_list variable %qD \"\n+\t\t\t\"does not extend the lifetime of the underlying array\",\n+\t\t\twhats_returned);\n       else if (TREE_CODE (whats_returned) == LABEL_DECL)\n-\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n-\t\t    OPT_Wreturn_local_addr, \"address of label %qD returned\",\n-\t\t    whats_returned);\n+\tw = warning_at (loc, OPT_Wreturn_local_addr,\n+\t\t\t\"address of label %qD returned\",\n+\t\t\twhats_returned);\n       else\n-\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n-\t\t    OPT_Wreturn_local_addr, \"address of local variable %qD \"\n-\t\t    \"returned\", whats_returned);\n+\tw = warning_at (loc, OPT_Wreturn_local_addr,\n+\t\t\t\"address of local variable %qD returned\",\n+\t\t\twhats_returned);\n+      if (w)\n+\tinform (DECL_SOURCE_LOCATION (whats_returned),\n+\t\t\"declared here\");\n       return true;\n     }\n \n@@ -9402,7 +9422,8 @@ check_return_expr (tree retval, bool *no_warning)\n \tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n \t\t\t TREE_OPERAND (retval, 0));\n       else if (!processing_template_decl\n-\t       && maybe_warn_about_returning_address_of_local (retval))\n+\t       && maybe_warn_about_returning_address_of_local (retval)\n+\t       && INDIRECT_TYPE_P (valtype))\n \tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n \t\t\t build_zero_cst (TREE_TYPE (retval)));\n     }"}, {"sha": "53ef14cf17069c89e141ed6d7ebe6f19a8a938ac", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -2909,6 +2909,51 @@ assignment operator is deprecated if the class has a user-provided\n copy constructor, copy assignment operator, or destructor, in C++11\n and up.  This warning is enabled by @option{-Wall}.\n \n+@item -Wno-init-list-lifetime @r{(C++ and Objective-C++ only)}\n+@opindex Winit-list-lifetime\n+@opindex Wno-init-list-lifetime\n+Do not warn about uses of @code{std::initializer_list} that are likely\n+to result in dangling pointers.  Since the underlying array for an\n+@code{initializer_list} is handled like a normal C++ temporary object,\n+it is easy to inadvertently keep a pointer to the array past the end\n+of the array's lifetime.  For example:\n+\n+@itemize @bullet\n+@item\n+If a function returns a temporary @code{initializer_list}, or a local\n+@code{initializer_list} variable, the array's lifetime ends at the end\n+of the return statement, so the value returned has a dangling pointer.\n+\n+@item\n+If a new-expression creates an @code{initializer_list}, the array only\n+lives until the end of the enclosing full-expression, so the\n+@code{initializer_list} in the heap has a dangling pointer.\n+\n+@item\n+When an @code{initializer_list} variable is assigned from a\n+brace-enclosed initializer list, the temporary array created for the\n+right side of the assignment only lives until the end of the\n+full-expression, so at the next statement the @code{initializer_list}\n+variable has a dangling pointer.\n+\n+@smallexample\n+// li's initial underlying array lives as long as li\n+std::initializer_list<int> li = @{ 1,2,3 @};\n+// assignment changes li to point to a temporary array\n+li = @{ 4, 5 @};\n+// now the temporary is gone and li has a dangling pointer\n+int i = li.begin()[0] // undefined behavior\n+@end smallexample\n+\n+@item\n+When a list constructor stores the @code{begin} pointer from the\n+@code{initializer_list} argument, this doesn't extend the lifetime of\n+the array, so if a class variable is constructed from a temporary\n+@code{initializer_list}, the pointer is left dangling by the end of\n+the variable declaration statement.\n+\n+@end itemize\n+\n @item -Wliteral-suffix @r{(C++ and Objective-C++ only)}\n @opindex Wliteral-suffix\n @opindex Wno-literal-suffix"}, {"sha": "6f44ac9b110013aee88e274bfa45b7cc7f792a0b", "filename": "gcc/testsuite/c-c++-common/pr43395.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -5,27 +5,24 @@\n void *\n foo (void)\n {\n- lab: /* { dg-line foo_lab } */\n+ lab:\n   return &&lab;\n-/* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of label\" \"\" { target c++ } foo_lab } */\n+/* { dg-warning \"address of label\" \"\" { target *-*-* } .-1 } */\n }\n \n void *\n bar (void)\n {\n   __label__ lab;\n- lab: /* { dg-line bar_lab } */\n+ lab:\n   return &&lab;\n-/* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of label\" \"\" { target c++ } bar_lab } */\n+/* { dg-warning \"address of label\" \"\" { target *-*-* } .-1 } */\n }\n \n void *\n baz (void)\n {\n-  int i; /* { dg-line baz_i } */\n+  int i;\n   return &i;\n-/* { dg-warning \"function returns address of local variable\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of local variable\" \"\" { target c++ } baz_i } */\n+/* { dg-warning \"address of local variable\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "42c127aae99b46b6bfd262a77969139dbef2ca93", "filename": "gcc/testsuite/g++.dg/cpp1y/pr77591.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77591.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77591.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77591.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -7,13 +7,13 @@ class A { };\n decltype(auto)\n foo ()\n {\n-  A c;\t\t\t// { dg-warning \"reference to local variable 'c' returned\" }\n-  return (c);\n+  A c;\n+  return (c);\t   // { dg-warning \"reference to local variable 'c' returned\" }\n }\n \n decltype(auto)\n bar ()\n {\n-  A c;\t\t\t// { dg-warning \"reference to local variable 'c' returned\" }\n-  return 1==1 ? c : c;\n+  A c;\n+  return 1==1 ? c : c; // { dg-warning \"reference to local variable 'c' returned\" }\n }"}, {"sha": "bf3cb094e0f5952635a31fa931c9de90f0923f6d", "filename": "gcc/testsuite/g++.dg/warn/Winit-list1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list1.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/67711, 48562\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+using IL = std::initializer_list<int>;\n+int main()\n+{\n+  IL il = { 1,2,3 };\n+  il = { 4,5,6 };\t\t// { dg-warning \"initializer_list\" }\n+  // the array is dead, il now points to garbage\n+  il = *new IL{ 7, 8, 9 };\t// { dg-warning \"initializer_list\" }\n+  // the array is dead, il now points to garbage\n+  return *il.begin(); // undefined\n+}"}, {"sha": "2ba4b37f029e7b658b8af668fd609819a48e1ce7", "filename": "gcc/testsuite/g++.dg/warn/Winit-list2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list2.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+using size_t = decltype(sizeof(0));\n+\n+template <typename T> class ArrayRef {\n+public:\n+  using size_type = size_t;\n+\n+private:\n+  /// The start of the array, in an external buffer.\n+  const T *Data = nullptr;\n+\n+  /// The number of elements.\n+  size_type Length = 0;\n+\n+public:\n+  /// Construct an ArrayRef from a std::initializer_list.\n+  /*implicit*/ ArrayRef(const std::initializer_list<T> &Vec)\n+      : Data(Vec.begin() == Vec.end() ? (T *)nullptr : Vec.begin()), // { dg-warning initializer_list }\n+        Length(Vec.size()) {}\n+\n+  const T &operator[](size_t Index) const { return Data[Index]; }\n+};\n+\n+int main() {\n+  const ArrayRef<int> Foo = {42};\n+  printf (\"Foo %d\\n\", Foo[0]);\n+}"}, {"sha": "7736ca46e534dd53eefc5e2d2d7cf70a0ac8d2bf", "filename": "gcc/testsuite/g++.dg/warn/Winit-list3.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinit-list3.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/67445\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+using SL = std::initializer_list<char const*>;\n+\n+SL retArray(int i) noexcept\n+{\n+  if (i == 0)\n+    {\n+      SL l{\"Test 1\", \"Test 2\", \"Test 3\"}; // { dg-message \"declared\" }\n+      return l;\t\t\t// { dg-warning \"initializer_list\" }\n+    }\n+  else if (i == 1)\n+    return SL{\"Test 1\", \"Test 2\", \"Test 3\"}; // { dg-warning \"initializer_list\" }\n+  else if (i == 2)\n+    return {\"Test 1\", \"Test 2\", \"Test 3\"}; // { dg-warning \"initializer_list\" }\n+  else\n+    {\n+      static SL l{\"Test 1\", \"Test 2\", \"Test 3\"};\n+      return l;\t\t\t// no warning about returning static.\n+    }\n+}\n+\n+const char *p;\n+int main(int, char const* const*)\n+{\n+  for (auto&& i : retArray(1))\n+    {\n+      p = i;\n+    }\n+  return 0;\n+}"}, {"sha": "642a5767e841820f9be0ad44e038616d79833025", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-local-addr.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-local-addr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-local-addr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-local-addr.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -4,14 +4,14 @@\n \n int& bad1()\n {\n-  int x = 0;\t\t// { dg-error \"reference to local variable\" }\n-  return x;\n+  int x = 0;\n+  return x;\t\t// { dg-error \"reference to local variable\" }\n }\n \n int* bad2()\n {\n-  int x = 0;\t\t// { dg-error \"address of local variable\" }\n-  return &x;\n+  int x = 0;\n+  return &x;\t\t// { dg-error \"address of local variable\" }\n }\n \n const int& bad4()"}, {"sha": "e9004f77a76f996c06dd9dbda28732b3af6c7eee", "filename": "gcc/testsuite/g++.dg/warn/return-reference2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -10,12 +10,12 @@ public:\n \n int &f()\n {\n-  A a;\t\t\t\t// { dg-warning \"local\" }\n-  return a.second;\n+  A a;\n+  return a.second;\t\t// { dg-warning \"local\" }\n }\n \n int &g()\n {\n-  int ar[42];\t\t\t// { dg-warning \"local\" }\n-  return ar[20];\n+  int ar[42];\n+  return ar[20];\t\t// { dg-warning \"local\" }\n }"}, {"sha": "2ec84fb0f6bf4c742e6b9ff24725a0ad61daf3f5", "filename": "gcc/testsuite/g++.old-deja/g++.bob/array1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Farray1.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -1,6 +1,6 @@\n // { dg-do assemble  }\n char *stuff() {\n-   char array[10]; // { dg-warning \"\" } \n+   char array[10];\n \n-   return array;\n+   return array;\t\t// { dg-warning \"\" } \n }"}, {"sha": "fd4d4b65edb982c11df7cbb7dac586a2ff7b7eb1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash55.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -4,9 +4,9 @@\n \n       int& f(int x)  // { dg-error \"new declaration\" }\n       {\n-          int local; // { dg-warning \"reference to local\" }\n+          int local;\n \n           local = x+2;\n       \n-          return local;\n+          return local; // { dg-warning \"reference to local\" }\n       }"}, {"sha": "f06eb9489bb8149383ef97c4687e7cd40c22478f", "filename": "libstdc++-v3/testsuite/util/testsuite_random.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eb9c55747cc28466875e891ac22acb3ea67644/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eb9c55747cc28466875e891ac22acb3ea67644/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h?ref=04eb9c55747cc28466875e891ac22acb3ea67644", "patch": "@@ -113,7 +113,10 @@ namespace __gnu_test\n   discrete_pdf(int k, std::initializer_list<double> wl)\n   {\n     if (!wl.size())\n-      wl = { 1.0 };\n+      {\n+\tstatic std::initializer_list<double> one = { 1.0 };\n+\twl = one;\n+      }\n \n     if (k < 0 || (std::size_t)k >= wl.size())\n       return 0.0;"}]}