{"sha": "26cea5f108e0facdb080e385000bb141b086845f", "node_id": "C_kwDOANBUbNoAKDI2Y2VhNWYxMDhlMGZhY2RiMDgwZTM4NTAwMGJiMTQxYjA4Njg0NWY", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-01-14T17:51:12Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-07-19T14:16:17Z"}, "message": "tree-cfg: do not duplicate returns_twice calls\n\nA returns_twice call may have associated abnormal edges that correspond\nto the \"second return\" from the call. If the call is duplicated, the\ncopies of those edges also need to be abnormal, but e.g. tracer does not\nenforce that. Just prohibit the (unlikely to be useful) duplication.\n\ngcc/ChangeLog:\n\n\t* cfghooks.cc (duplicate_block): Expand comment.\n\t* tree-cfg.cc (gimple_can_duplicate_bb_p): Reject blocks with\n\tcalls that may return twice.", "tree": {"sha": "ff8fb6fd44e6609fcf03e6b331165cd38107246c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff8fb6fd44e6609fcf03e6b331165cd38107246c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26cea5f108e0facdb080e385000bb141b086845f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cea5f108e0facdb080e385000bb141b086845f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26cea5f108e0facdb080e385000bb141b086845f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cea5f108e0facdb080e385000bb141b086845f/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c3f0dc2f815e0e450642efd5348c3ab852e4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3f0dc2f815e0e450642efd5348c3ab852e4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c3f0dc2f815e0e450642efd5348c3ab852e4d0"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "c6ac9532cb8fa09ab7f18745db39e41ef65faf3e", "filename": "gcc/cfghooks.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cea5f108e0facdb080e385000bb141b086845f/gcc%2Fcfghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cea5f108e0facdb080e385000bb141b086845f/gcc%2Fcfghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.cc?ref=26cea5f108e0facdb080e385000bb141b086845f", "patch": "@@ -1086,9 +1086,16 @@ can_duplicate_block_p (const_basic_block bb)\n   return cfg_hooks->can_duplicate_block_p (bb);\n }\n \n-/* Duplicates basic block BB and redirects edge E to it.  Returns the\n-   new basic block.  The new basic block is placed after the basic block\n-   AFTER.  */\n+/* Duplicate basic block BB, place it after AFTER (if non-null) and redirect\n+   edge E to it (if non-null).  Return the new basic block.\n+\n+   If BB contains a returns_twice call, the caller is responsible for recreating\n+   incoming abnormal edges corresponding to the \"second return\" for the copy.\n+   gimple_can_duplicate_bb_p rejects such blocks, while RTL likes to live\n+   dangerously.\n+\n+   If BB has incoming abnormal edges for some other reason, their destinations\n+   should be tied to label(s) of the original BB and not the copy.  */\n \n basic_block\n duplicate_block (basic_block bb, edge e, basic_block after, copy_bb_data *id)"}, {"sha": "a365aad678f322339c6228f5d6c84acd6af61695", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cea5f108e0facdb080e385000bb141b086845f/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cea5f108e0facdb080e385000bb141b086845f/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=26cea5f108e0facdb080e385000bb141b086845f", "patch": "@@ -6313,12 +6313,15 @@ gimple_can_duplicate_bb_p (const_basic_block bb)\n     {\n       gimple *g = gsi_stmt (gsi);\n \n-      /* An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n+      /* Prohibit duplication of returns_twice calls, otherwise associated\n+\t abnormal edges also need to be duplicated properly.\n+\t An IFN_GOMP_SIMT_ENTER_ALLOC/IFN_GOMP_SIMT_EXIT call must be\n \t duplicated as part of its group, or not at all.\n \t The IFN_GOMP_SIMT_VOTE_ANY and IFN_GOMP_SIMT_XCHG_* are part of such a\n \t group, so the same holds there.  */\n       if (is_gimple_call (g)\n-\t  && (gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n+\t  && (gimple_call_flags (g) & ECF_RETURNS_TWICE\n+\t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_ENTER_ALLOC)\n \t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_EXIT)\n \t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_VOTE_ANY)\n \t      || gimple_call_internal_p (g, IFN_GOMP_SIMT_XCHG_BFLY)"}]}