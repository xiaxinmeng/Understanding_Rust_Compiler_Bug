{"sha": "2a2137c461328e07dc4f523c532b597f4cc8ef93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyMTM3YzQ2MTMyOGUwN2RjNGY1MjNjNTMyYjU5N2Y0Y2M4ZWY5Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-26T23:24:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-26T23:24:38Z"}, "message": "stmt.c (cost_table): Remove.\n\n        * stmt.c (cost_table): Remove.\n        (COST_TABLE, cost_table_initialized): New.\n        (estimate_case_costs): Use the later instead of the former.\n        (balance_case_nodes): Likewise.\n\nFrom-SVN: r39291", "tree": {"sha": "3e597d0b2b56e4364450453b97772088d9e2fe4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e597d0b2b56e4364450453b97772088d9e2fe4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2137c461328e07dc4f523c532b597f4cc8ef93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2137c461328e07dc4f523c532b597f4cc8ef93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2137c461328e07dc4f523c532b597f4cc8ef93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2137c461328e07dc4f523c532b597f4cc8ef93/comments", "author": null, "committer": null, "parents": [{"sha": "d9de4b22f6e72d3613c6460e2ba1bb588834a832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9de4b22f6e72d3613c6460e2ba1bb588834a832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9de4b22f6e72d3613c6460e2ba1bb588834a832"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "3e9eddcc60b49039219986ccbf8d638b77078aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2137c461328e07dc4f523c532b597f4cc8ef93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2137c461328e07dc4f523c532b597f4cc8ef93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a2137c461328e07dc4f523c532b597f4cc8ef93", "patch": "@@ -1,3 +1,10 @@\n+2001-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* stmt.c (cost_table): Remove.\n+\t(COST_TABLE, cost_table_initialized): New.\n+\t(estimate_case_costs): Use the later instead of the former.\n+\t(balance_case_nodes): Likewise.\n+\n 2001-01-26  Richard Henderson  <rth@redhat.com>\n \n \t* alias.c (objects_must_conflict_p): Read-only slots may not"}, {"sha": "c4e9ce014d4f48179564018e7c1f999a08ae97ca", "filename": "gcc/stmt.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2137c461328e07dc4f523c532b597f4cc8ef93/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2137c461328e07dc4f523c532b597f4cc8ef93/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2a2137c461328e07dc4f523c532b597f4cc8ef93", "patch": "@@ -106,8 +106,12 @@ typedef struct case_node *case_node_ptr;\n \n /* This must be a signed type, and non-ANSI compilers lack signed char.  */\n static short cost_table_[129];\n-static short *cost_table;\n static int use_cost_table;\n+static int cost_table_initialized;\n+\n+/* Special care is needed because we allow -1, but TREE_INT_CST_LOW\n+   is unsigned.  */\n+#define COST_TABLE(I)  cost_table_[(unsigned HOST_WIDE_INT)((I) + 1)]\n \f\n /* Stack of control and binding constructs we are currently inside.\n \n@@ -5768,27 +5772,27 @@ estimate_case_costs (node)\n   /* If we haven't already made the cost table, make it now.  Note that the\n      lower bound of the table is -1, not zero.  */\n \n-  if (cost_table == NULL)\n+  if (! cost_table_initialized)\n     {\n-      cost_table = cost_table_ + 1;\n+      cost_table_initialized = 1;\n \n       for (i = 0; i < 128; i++)\n \t{\n \t  if (ISALNUM (i))\n-\t    cost_table[i] = 16;\n+\t    COST_TABLE (i) = 16;\n \t  else if (ISPUNCT (i))\n-\t    cost_table[i] = 8;\n+\t    COST_TABLE (i) = 8;\n \t  else if (ISCNTRL (i))\n-\t    cost_table[i] = -1;\n+\t    COST_TABLE (i) = -1;\n \t}\n \n-      cost_table[' '] = 8;\n-      cost_table['\\t'] = 4;\n-      cost_table['\\0'] = 4;\n-      cost_table['\\n'] = 2;\n-      cost_table['\\f'] = 1;\n-      cost_table['\\v'] = 1;\n-      cost_table['\\b'] = 1;\n+      COST_TABLE (' ') = 8;\n+      COST_TABLE ('\\t') = 4;\n+      COST_TABLE ('\\0') = 4;\n+      COST_TABLE ('\\n') = 2;\n+      COST_TABLE ('\\f') = 1;\n+      COST_TABLE ('\\v') = 1;\n+      COST_TABLE ('\\b') = 1;\n     }\n \n   /* See if all the case expressions look like text.  It is text if the\n@@ -5804,7 +5808,7 @@ estimate_case_costs (node)\n \n       for (i = (HOST_WIDE_INT) TREE_INT_CST_LOW (n->low);\n \t   i <= (HOST_WIDE_INT) TREE_INT_CST_LOW (n->high); i++)\n-\tif (cost_table[i] < 0)\n+\tif (COST_TABLE (i) < 0)\n \t  return 0;\n     }\n \n@@ -5895,11 +5899,11 @@ balance_case_nodes (head, parent)\n \t    {\n \t      ranges++;\n \t      if (use_cost_table)\n-\t\tcost += cost_table[TREE_INT_CST_LOW (np->high)];\n+\t\tcost += COST_TABLE (TREE_INT_CST_LOW (np->high));\n \t    }\n \n \t  if (use_cost_table)\n-\t    cost += cost_table[TREE_INT_CST_LOW (np->low)];\n+\t    cost += COST_TABLE (TREE_INT_CST_LOW (np->low));\n \n \t  i++;\n \t  np = np->right;\n@@ -5920,8 +5924,8 @@ balance_case_nodes (head, parent)\n \t\t{\n \t\t  /* Skip nodes while their cost does not reach that amount.  */\n \t\t  if (!tree_int_cst_equal ((*npp)->low, (*npp)->high))\n-\t\t    i -= cost_table[TREE_INT_CST_LOW ((*npp)->high)];\n-\t\t  i -= cost_table[TREE_INT_CST_LOW ((*npp)->low)];\n+\t\t    i -= COST_TABLE (TREE_INT_CST_LOW ((*npp)->high));\n+\t\t  i -= COST_TABLE (TREE_INT_CST_LOW ((*npp)->low));\n \t\t  if (i <= 0)\n \t\t    break;\n \t\t  npp = &(*npp)->right;\n@@ -6253,7 +6257,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t     a branch-greater-than will get us to the default\n \t     label correctly.  */\n \t  if (use_cost_table\n-\t      && cost_table[TREE_INT_CST_LOW (node->high)] < 12)\n+\t      && COST_TABLE (TREE_INT_CST_LOW (node->high)) < 12)\n \t    ;\n #endif /* 0 */\n \t  if (node->left->left || node->left->right"}]}