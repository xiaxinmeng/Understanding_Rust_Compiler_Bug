{"sha": "7d456b882a8f72b6fb3bdb0e71367811770b4413", "node_id": "C_kwDOANBUbNoAKDdkNDU2Yjg4MmE4ZjcyYjZmYjNiZGIwZTcxMzY3ODExNzcwYjQ0MTM", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-01-14T17:56:56Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-01-14T18:28:11Z"}, "message": "Track end locus of BlockExpr\n\nCapture the closing locus of a block during parsing, and remove the old\nhack to get the final statement locus within the block now that it is\nproperly tracked.\n\nFixes #864", "tree": {"sha": "83fd67a961ce521c6350e9c47bcbe3aa94965751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83fd67a961ce521c6350e9c47bcbe3aa94965751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d456b882a8f72b6fb3bdb0e71367811770b4413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d456b882a8f72b6fb3bdb0e71367811770b4413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d456b882a8f72b6fb3bdb0e71367811770b4413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d456b882a8f72b6fb3bdb0e71367811770b4413/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21caeb3af4313016afeb94a91956e8fc4c2656d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21caeb3af4313016afeb94a91956e8fc4c2656d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21caeb3af4313016afeb94a91956e8fc4c2656d"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "a2ce1d8e0f2dee8ac30491611cf7ae84e25bd85f", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -2326,7 +2326,8 @@ class BlockExpr : public ExprWithBlock\n   std::vector<Attribute> inner_attrs;\n   std::vector<std::unique_ptr<Stmt> > statements;\n   std::unique_ptr<Expr> expr;\n-  Location locus;\n+  Location start_locus;\n+  Location end_locus;\n   bool marked_for_strip = false;\n \n public:\n@@ -2341,18 +2342,19 @@ class BlockExpr : public ExprWithBlock\n   BlockExpr (std::vector<std::unique_ptr<Stmt> > block_statements,\n \t     std::unique_ptr<Expr> block_expr,\n \t     std::vector<Attribute> inner_attribs,\n-\t     std::vector<Attribute> outer_attribs, Location locus)\n+\t     std::vector<Attribute> outer_attribs, Location start_locus,\n+\t     Location end_locus)\n     : outer_attrs (std::move (outer_attribs)),\n       inner_attrs (std::move (inner_attribs)),\n       statements (std::move (block_statements)), expr (std::move (block_expr)),\n-      locus (locus)\n+      start_locus (start_locus), end_locus (end_locus)\n   {}\n \n   // Copy constructor with clone\n   BlockExpr (BlockExpr const &other)\n     : ExprWithBlock (other), outer_attrs (other.outer_attrs),\n-      inner_attrs (other.inner_attrs), locus (other.locus),\n-      marked_for_strip (other.marked_for_strip)\n+      inner_attrs (other.inner_attrs), start_locus (other.start_locus),\n+      end_locus (other.end_locus), marked_for_strip (other.marked_for_strip)\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n@@ -2368,7 +2370,8 @@ class BlockExpr : public ExprWithBlock\n   {\n     ExprWithBlock::operator= (other);\n     inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n+    start_locus = other.start_locus;\n+    end_locus = other.end_locus;\n     marked_for_strip = other.marked_for_strip;\n     outer_attrs = other.outer_attrs;\n \n@@ -2395,7 +2398,10 @@ class BlockExpr : public ExprWithBlock\n     return std::unique_ptr<BlockExpr> (clone_block_expr_impl ());\n   }\n \n-  Location get_locus () const override final { return locus; }\n+  Location get_locus () const override final { return start_locus; }\n+\n+  Location get_start_locus () const { return start_locus; }\n+  Location get_end_locus () const { return end_locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "7bef6ae9e02eca6e113fe666e3eb1e57b07a50af", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -264,7 +264,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n-    Location end_location = function_body->get_closing_locus ();\n+    Location end_location = function_body->get_end_locus ();\n \n     tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n@@ -524,7 +524,7 @@ class CompileTraitItem : public HIRCompileBase\n     tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = func.get_block_expr ().get ();\n     Location start_location = function_body->get_locus ();\n-    Location end_location = function_body->get_closing_locus ();\n+    Location end_location = function_body->get_end_locus ();\n \n     tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,"}, {"sha": "c35efccf79ac3e3c18ca986b7a5b33ad10296ee6", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -142,7 +142,7 @@ class CompileItem : public HIRCompileBase\n \tHIR::BlockExpr *function_body\n \t  = static_cast<HIR::BlockExpr *> (constant.get_expr ());\n \tLocation start_location = function_body->get_locus ();\n-\tLocation end_location = function_body->get_closing_locus ();\n+\tLocation end_location = function_body->get_end_locus ();\n \n \ttree code_block\n \t  = ctx->get_backend ()->block (fndecl, enclosing_scope, {},\n@@ -341,7 +341,7 @@ class CompileItem : public HIRCompileBase\n     tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n-    Location end_location = function_body->get_closing_locus ();\n+    Location end_location = function_body->get_end_locus ();\n \n     tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,"}, {"sha": "a97ad4d2d90561bf0388e479d2fc820c7702554c", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -60,7 +60,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n   fncontext fnctx = ctx->peek_fn ();\n   tree fndecl = fnctx.fndecl;\n   Location start_location = expr.get_locus ();\n-  Location end_location = expr.get_closing_locus ();\n+  Location end_location = expr.get_end_locus ();\n   auto body_mappings = expr.get_mappings ();\n \n   Resolver::Rib *rib = nullptr;"}, {"sha": "d6f5cf26b0f6dfdebddf8afc286380fcb64886e5", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -101,7 +101,8 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n     = new HIR::BlockExpr (mapping, std::move (block_stmts),\n \t\t\t  std::unique_ptr<HIR::ExprWithoutBlock> (tail_expr),\n \t\t\t  tail_reachable, expr.get_inner_attrs (),\n-\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n+\t\t\t  expr.get_outer_attrs (), expr.get_start_locus (),\n+\t\t\t  expr.get_end_locus ());\n \n   terminated = block_did_terminate;\n }"}, {"sha": "7a9332316f48832f15a887d68a470535f57f7bf3", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -2069,7 +2069,8 @@ class BlockExpr : public ExprWithBlock\n   std::vector<std::unique_ptr<Stmt> > statements;\n   std::unique_ptr<Expr> expr;\n   bool tail_reachable;\n-  Location locus;\n+  Location start_locus;\n+  Location end_locus;\n \n   std::string as_string () const override;\n \n@@ -2085,17 +2086,19 @@ class BlockExpr : public ExprWithBlock\n \t     std::vector<std::unique_ptr<Stmt> > block_statements,\n \t     std::unique_ptr<Expr> block_expr, bool tail_reachable,\n \t     AST::AttrVec inner_attribs, AST::AttrVec outer_attribs,\n-\t     Location locus)\n+\t     Location start_locus, Location end_locus)\n     : ExprWithBlock (std::move (mappings), std::move (outer_attribs)),\n       inner_attrs (std::move (inner_attribs)),\n       statements (std::move (block_statements)), expr (std::move (block_expr)),\n-      tail_reachable (tail_reachable), locus (locus)\n+      tail_reachable (tail_reachable), start_locus (start_locus),\n+      end_locus (end_locus)\n   {}\n \n   // Copy constructor with clone\n   BlockExpr (BlockExpr const &other)\n     : ExprWithBlock (other), /*statements(other.statements),*/\n-      inner_attrs (other.inner_attrs), locus (other.locus)\n+      inner_attrs (other.inner_attrs), start_locus (other.start_locus),\n+      end_locus (other.end_locus)\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n@@ -2113,7 +2116,8 @@ class BlockExpr : public ExprWithBlock\n     // statements = other.statements;\n     expr = other.expr->clone_expr ();\n     inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n+    start_locus = other.end_locus;\n+    end_locus = other.end_locus;\n     // outer_attrs = other.outer_attrs;\n \n     statements.reserve (other.statements.size ());\n@@ -2133,19 +2137,15 @@ class BlockExpr : public ExprWithBlock\n     return std::unique_ptr<BlockExpr> (clone_block_expr_impl ());\n   }\n \n-  Location get_locus () const override final { return locus; }\n+  Location get_locus () const override final { return start_locus; }\n \n-  void accept_vis (HIRFullVisitor &vis) override;\n+  Location get_start_locus () const { return start_locus; }\n \n-  bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n+  Location get_end_locus () const { return end_locus; }\n \n-  Location get_closing_locus ()\n-  {\n-    if (statements.size () == 0)\n-      return get_locus ();\n+  void accept_vis (HIRFullVisitor &vis) override;\n \n-    return statements[statements.size () - 1]->get_locus ();\n-  }\n+  bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n \n   std::unique_ptr<Expr> &get_final_expr () { return expr; }\n "}, {"sha": "aabb15cb128c495798302e7bc50e71342a6f784e", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d456b882a8f72b6fb3bdb0e71367811770b4413/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=7d456b882a8f72b6fb3bdb0e71367811770b4413", "patch": "@@ -7347,6 +7347,8 @@ Parser<ManagedTokenSource>::parse_block_expr (AST::AttrVec outer_attrs,\n \t  return nullptr;\n \t}\n \n+      t = lexer.peek_token ();\n+\n       if (expr_or_stmt.stmt != nullptr)\n \t{\n \t  stmts.push_back (std::move (expr_or_stmt.stmt));\n@@ -7357,10 +7359,10 @@ Parser<ManagedTokenSource>::parse_block_expr (AST::AttrVec outer_attrs,\n \t  expr = std::move (expr_or_stmt.expr);\n \t  break;\n \t}\n-\n-      t = lexer.peek_token ();\n     }\n \n+  Location end_locus = t->get_locus ();\n+\n   if (!skip_token (RIGHT_CURLY))\n     {\n       Error error (t->get_locus (),\n@@ -7378,8 +7380,8 @@ Parser<ManagedTokenSource>::parse_block_expr (AST::AttrVec outer_attrs,\n \n   return std::unique_ptr<AST::BlockExpr> (\n     new AST::BlockExpr (std::move (stmts), std::move (expr),\n-\t\t\tstd::move (inner_attrs), std::move (outer_attrs),\n-\t\t\tlocus));\n+\t\t\tstd::move (inner_attrs), std::move (outer_attrs), locus,\n+\t\t\tend_locus));\n }\n \n /* Parses a \"grouped\" expression (expression in parentheses), used to control"}]}