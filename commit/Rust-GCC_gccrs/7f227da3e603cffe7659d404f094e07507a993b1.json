{"sha": "7f227da3e603cffe7659d404f094e07507a993b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyMjdkYTNlNjAzY2ZmZTc2NTlkNDA0ZjA5NGUwNzUwN2E5OTNiMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-27T08:03:45Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-27T08:03:45Z"}, "message": "Use EAF_RETURN_ARG in tree-ssa-ccp.c\n\n\t* tree-ssa-ccp.c (evaluate_stmt): Use EAF_RETURN_ARG; do not handle\n\tstring buitings specially.", "tree": {"sha": "39b6f571d5e527fdd04d1d151e862539cb26517a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b6f571d5e527fdd04d1d151e862539cb26517a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f227da3e603cffe7659d404f094e07507a993b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f227da3e603cffe7659d404f094e07507a993b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f227da3e603cffe7659d404f094e07507a993b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f227da3e603cffe7659d404f094e07507a993b1/comments", "author": null, "committer": null, "parents": [{"sha": "5707996c14fcbbe9e71f97e703f0f5767b1f0611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5707996c14fcbbe9e71f97e703f0f5767b1f0611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5707996c14fcbbe9e71f97e703f0f5767b1f0611"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "ef44e66ce8b7d1b984c2d0e37eb7c1c0882420bf", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f227da3e603cffe7659d404f094e07507a993b1/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f227da3e603cffe7659d404f094e07507a993b1/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7f227da3e603cffe7659d404f094e07507a993b1", "patch": "@@ -1796,6 +1796,7 @@ evaluate_stmt (gimple *stmt)\n   ccp_lattice_t likelyvalue = likely_value (stmt);\n   bool is_constant = false;\n   unsigned int align;\n+  bool ignore_return_flags = false;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1965,22 +1966,9 @@ evaluate_stmt (gimple *stmt)\n \t      val.mask = ~((HOST_WIDE_INT) align / BITS_PER_UNIT - 1);\n \t      break;\n \n-\t    /* These builtins return their first argument, unmodified.  */\n-\t    case BUILT_IN_MEMCPY:\n-\t    case BUILT_IN_MEMMOVE:\n-\t    case BUILT_IN_MEMSET:\n-\t    case BUILT_IN_STRCPY:\n-\t    case BUILT_IN_STRNCPY:\n-\t    case BUILT_IN_MEMCPY_CHK:\n-\t    case BUILT_IN_MEMMOVE_CHK:\n-\t    case BUILT_IN_MEMSET_CHK:\n-\t    case BUILT_IN_STRCPY_CHK:\n-\t    case BUILT_IN_STRNCPY_CHK:\n-\t      val = get_value_for_expr (gimple_call_arg (stmt, 0), true);\n-\t      break;\n-\n \t    case BUILT_IN_ASSUME_ALIGNED:\n \t      val = bit_value_assume_aligned (stmt, NULL_TREE, val, false);\n+\t      ignore_return_flags = true;\n \t      break;\n \n \t    case BUILT_IN_ALIGNED_ALLOC:\n@@ -2049,6 +2037,15 @@ evaluate_stmt (gimple *stmt)\n \t      if (attrs)\n \t\tval = bit_value_assume_aligned (stmt, attrs, val, true);\n \t    }\n+\t  int flags = ignore_return_flags\n+\t\t      ? 0 : gimple_call_return_flags (as_a <gcall *> (stmt));\n+\t  if (flags & ERF_RETURNS_ARG\n+\t      && (flags & ERF_RETURN_ARG_MASK) < gimple_call_num_args (stmt))\n+\t    {\n+\t      val = get_value_for_expr\n+\t\t\t (gimple_call_arg (stmt,\n+\t\t\t\t\t   flags & ERF_RETURN_ARG_MASK), true);\n+\t    }\n \t}\n       is_constant = (val.lattice_val == CONSTANT);\n     }"}]}