{"sha": "2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxOGUyMzEzOWVkZDMzZjFjYWIyMTU4YjQ2YWM5YmJkODFiOGJkNw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-07-22T13:57:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:57:13Z"}, "message": "[Ada] Premature finalization of controlled temporaries in case expressions\n\nThe compiler was generating finalization of temporary objects used in\nevaluating case expressions for controlled types in cases where the case\nstatement created by Expand_N_Expression_With_Actions is rewritten as an\nif statement. This is fixed by inheriting the From_Condition_Expression\nflag from the rewritten case statement.\n\nThe test below must generate the following output when executed:\n\n$ main\nXs(1): 1\n\n----\n\npackage Test is\n\n   type E is (E1, E2);\n   procedure Test (A : in E);\n\nend Test;\n\n----\n\nwith Ada.Text_IO;\nwith Ada.Finalization;\n\npackage body Test is\n\n   type T is new Ada.Finalization.Controlled with\n      record\n         N : Natural := 0;\n      end record;\n\n   overriding procedure Finalize (X : in out T) is\n   begin\n      X.N := 42;\n   end Finalize;\n\n   type T_Array is array (Positive range <>) of T;\n\n   function Make_T (N : Natural) return T is\n   begin\n      return (Ada.Finalization.Controlled with N => N);\n   end Make_T;\n\n   X1 : constant T := Make_T (1);\n   X2 : constant T := Make_T (2);\n\n   procedure Test (A : in E)\n   is\n      Xs : constant T_Array := (case A is\n                                   when E1 => (1 => X1),\n                                   when E2 => (1 => X2));\n   begin\n      Ada.Text_IO.Put_Line (\"Xs(1):\" & Natural'Image (Xs (1).N));\n   end Test;\n\nend Test;\n\n----\n\nwith Test;\n\nprocedure Main is\nbegin\n   Test.Test (Test.E1);\nend Main;\n\n2019-07-22  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_N_Case_Statement): In the case where a\n\tcase statement is rewritten as an equivalent if statement,\n\tinherit the From_Condition_Expression flag from the case\n\tstatement.\n\nFrom-SVN: r273678", "tree": {"sha": "86ff13cbe12830f1d6fafeae04b53d040aa96296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ff13cbe12830f1d6fafeae04b53d040aa96296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2418e23139edd33f1cab2158b46ac9bbd81b8bd7/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7f4682af254be73f91ddbb543bc0bc3fcd27659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f4682af254be73f91ddbb543bc0bc3fcd27659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f4682af254be73f91ddbb543bc0bc3fcd27659"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "e9a4cbd9d052785d54f0c5223bd78bbe1140f9c9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2418e23139edd33f1cab2158b46ac9bbd81b8bd7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2418e23139edd33f1cab2158b46ac9bbd81b8bd7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "patch": "@@ -1,3 +1,10 @@\n+2019-07-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Case_Statement): In the case where a\n+\tcase statement is rewritten as an equivalent if statement,\n+\tinherit the From_Condition_Expression flag from the case\n+\tstatement.\n+\n 2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch8.adb (Check_Constrained_Object): Further extend the"}, {"sha": "682c855d39b15c38120b99887fef28fa07d75321", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2418e23139edd33f1cab2158b46ac9bbd81b8bd7/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2418e23139edd33f1cab2158b46ac9bbd81b8bd7/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2418e23139edd33f1cab2158b46ac9bbd81b8bd7", "patch": "@@ -2856,13 +2856,14 @@ package body Exp_Ch5 is\n    -----------------------------\n \n    procedure Expand_N_Case_Statement (N : Node_Id) is\n-      Loc    : constant Source_Ptr := Sloc (N);\n-      Expr   : constant Node_Id    := Expression (N);\n-      Alt    : Node_Id;\n-      Len    : Nat;\n-      Cond   : Node_Id;\n-      Choice : Node_Id;\n-      Chlist : List_Id;\n+      Loc            : constant Source_Ptr := Sloc (N);\n+      Expr           : constant Node_Id    := Expression (N);\n+      From_Cond_Expr : constant Boolean    := From_Conditional_Expression (N);\n+      Alt            : Node_Id;\n+      Len            : Nat;\n+      Cond           : Node_Id;\n+      Choice         : Node_Id;\n+      Chlist         : List_Id;\n \n    begin\n       --  Check for the situation where we know at compile time which branch\n@@ -3073,7 +3074,15 @@ package body Exp_Ch5 is\n                    Condition => Cond,\n                    Then_Statements => Then_Stms,\n                    Else_Statements => Else_Stms));\n+\n+               --  The rewritten if statement needs to inherit whether the\n+               --  case statement was expanded from a conditional expression,\n+               --  for proper handling of nested controlled objects.\n+\n+               Set_From_Conditional_Expression (N, From_Cond_Expr);\n+\n                Analyze (N);\n+\n                return;\n             end if;\n          end if;"}]}