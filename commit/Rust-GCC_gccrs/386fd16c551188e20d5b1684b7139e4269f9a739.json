{"sha": "386fd16c551188e20d5b1684b7139e4269f9a739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2ZmQxNmM1NTExODhlMjBkNWIxNjg0YjcxMzllNDI2OWY5YTczOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-19T15:27:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-19T15:49:07Z"}, "message": "libstdc++: Make __int128 meet integer-class requirements [PR 96042]\n\nBecause __int128 can be used as the difference type for iota_view, we\nneed to ensure that it meets the requirements of an integer-class type.\nThe requirements in [iterator.concept.winc] p10 include numeric_limits\nbeing specialized and giving meaningful answers. Currently we only\nspecialize numeric_limits for non-standard integer types in non-strict\nmodes.  However, nothing prevents us from defining an explicit\nspecialization for any implementation-defined type, so it doesn't matter\nwhether std::is_integral<__int128> is true or not.\n\nThis patch ensures that the numeric_limits specializations for signed\nand unsigned __int128 are defined whenever __int128 is available. It\nalso makes the __numeric_traits and __int_limits helpers work for\n__int128, via a new __gnu_cxx::__is_integer_nonstrict trait.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96042\n\t* include/ext/numeric_traits.h (__is_integer_nonstrict): New\n\ttrait which is true for 128-bit integers even in strict modes.\n\t(__numeric_traits_integer, __numeric_traits): Use\n\t__is_integer_nonstrict instead of __is_integer.\n\t* include/std/limits [__STRICT_ANSI__ && __SIZEOF_INT128__]\n\t(numeric_limits<__int128>, (numeric_limits<unsigned __int128>):\n\tDefine.\n\t* testsuite/std/ranges/iota/96042.cc: New test.", "tree": {"sha": "8794a3bd26919abf77675933a9b48be10eae18dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8794a3bd26919abf77675933a9b48be10eae18dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386fd16c551188e20d5b1684b7139e4269f9a739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386fd16c551188e20d5b1684b7139e4269f9a739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386fd16c551188e20d5b1684b7139e4269f9a739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386fd16c551188e20d5b1684b7139e4269f9a739/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4432066509441cb6ec3e6688a523f9946e7b5d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4432066509441cb6ec3e6688a523f9946e7b5d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4432066509441cb6ec3e6688a523f9946e7b5d21"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "585ecc0ba9f5e1149be93f79629eba58a506dfab", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=386fd16c551188e20d5b1684b7139e4269f9a739", "patch": "@@ -51,11 +51,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   (__glibcxx_signed(_Tp) ? \\\n    (((((_Tp)1 << (__glibcxx_digits(_Tp) - 1)) - 1) << 1) + 1) : ~(_Tp)0)\n \n+  template<typename _Tp>\n+    struct __is_integer_nonstrict\n+    : public std::__is_integer<_Tp>\n+    { };\n+\n+#if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+  // __is_integer<__int128> is false, but we still want to allow it here.\n+  template<> struct __is_integer_nonstrict<__int128>\n+  { enum { __value = 1 }; typedef std::__true_type __type; };\n+\n+  template<> struct __is_integer_nonstrict<unsigned __int128>\n+  { enum { __value = 1 }; typedef std::__true_type __type; };\n+#endif\n+\n   template<typename _Value>\n     struct __numeric_traits_integer\n     {\n #if __cplusplus >= 201103L\n-      static_assert(std::__is_integer<_Value>::__value,\n+      static_assert(__is_integer_nonstrict<_Value>::__value,\n \t\t    \"invalid specialization\");\n #endif\n \n@@ -132,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Value>\n     struct __numeric_traits\n-    : public __conditional_type<std::__is_integer<_Value>::__value,\n+    : public __conditional_type<__is_integer_nonstrict<_Value>::__value,\n \t\t\t\t__numeric_traits_integer<_Value>,\n \t\t\t\t__numeric_traits_floating<_Value> >::__type\n     { };"}, {"sha": "20883ba640305975f0cda3e162b9f57ccc6dbe5b", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=386fd16c551188e20d5b1684b7139e4269f9a739", "patch": "@@ -1477,8 +1477,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = round_toward_zero;\n     };\n \n-#if !defined(__STRICT_ANSI__)\n-\n #define __INT_N(TYPE, BITSIZE, EXT, UEXT)\t\t\t\t\\\n   template<>\t\t\t\t\t\t\t\t\\\n     struct numeric_limits<TYPE>\t\t\t\t\t\t\\\n@@ -1632,6 +1630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #define __INT_N_U201103(TYPE)\n #endif\n \n+#if !defined(__STRICT_ANSI__)\n #ifdef __GLIBCXX_TYPE_INT_N_0\n   __INT_N(__GLIBCXX_TYPE_INT_N_0, __GLIBCXX_BITSIZE_INT_N_0,\n \t  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_0),\n@@ -1653,11 +1652,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_3))\n #endif\n \n+#elif defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+  __INT_N(__int128, 128,\n+\t  __INT_N_201103 (__int128),\n+\t  __INT_N_U201103 (__int128))\n+#endif\n+\n #undef __INT_N\n #undef __INT_N_201103\n #undef __INT_N_U201103\n \n-#endif\n \n   /// numeric_limits<float> specialization.\n   template<>"}, {"sha": "6f5c8f61fd22fc8d1daafb171409dabca159b3f6", "filename": "libstdc++-v3/testsuite/std/ranges/iota/96042.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fd16c551188e20d5b1684b7139e4269f9a739/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc?ref=386fd16c551188e20d5b1684b7139e4269f9a739", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/96042\n+  using V = std::ranges::iota_view<long long, int>;\n+  using D = std::ranges::range_difference_t<V>;\n+  using L = std::numeric_limits<D>;\n+  static_assert( L::is_specialized );\n+  static_assert( L::is_signed );\n+  static_assert( L::is_integer );\n+  static_assert( L::is_exact );\n+  static_assert( L::digits > std::numeric_limits<long long>::digits );\n+  static_assert( L::digits10 == static_cast<int>(L::digits * 0.30103) );\n+  static_assert( L::min() == (D(1) << L::digits) );\n+  static_assert( L::max() == ~L::min() );\n+  static_assert( L::lowest() == L::min() );\n+}"}]}