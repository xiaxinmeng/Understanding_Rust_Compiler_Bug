{"sha": "831806cb211df749b12f47ee4b669e30f7a5f009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxODA2Y2IyMTFkZjc0OWIxMmY0N2VlNGI2NjllMzBmN2E1ZjAwOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-07T13:41:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-07T13:41:10Z"}, "message": "re PR middle-end/60092 (posix_memalign not recognized to derive alias and alignment info)\n\n2014-02-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/60092\n\t* gimple-low.c (lower_builtin_posix_memalign): New function.\n\t(lower_stmt): Call it to lower posix_memalign in a way\n\tto make alignment info accessible.\n\n\t* gcc.dg/vect/pr60092-2.c: New testcase.\n\nFrom-SVN: r207598", "tree": {"sha": "2aea068f44b0bf1732891a2a54d9ef96c170e646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aea068f44b0bf1732891a2a54d9ef96c170e646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/831806cb211df749b12f47ee4b669e30f7a5f009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831806cb211df749b12f47ee4b669e30f7a5f009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831806cb211df749b12f47ee4b669e30f7a5f009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831806cb211df749b12f47ee4b669e30f7a5f009/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ee9c16fa85f5670bc906894f1216835f277c2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee9c16fa85f5670bc906894f1216835f277c2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee9c16fa85f5670bc906894f1216835f277c2d7"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "df9bc3e5aa62d8ac223658f55835407e227d7198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=831806cb211df749b12f47ee4b669e30f7a5f009", "patch": "@@ -1,3 +1,10 @@\n+2014-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gimple-low.c (lower_builtin_posix_memalign): New function.\n+\t(lower_stmt): Call it to lower posix_memalign in a way\n+\tto make alignment info accessible.\n+\n 2014-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/60082"}, {"sha": "01e9e9cd28d5a8d40351ad0f2b0c1fe261d80785", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=831806cb211df749b12f47ee4b669e30f7a5f009", "patch": "@@ -83,6 +83,7 @@ static void lower_gimple_bind (gimple_stmt_iterator *, struct lower_data *);\n static void lower_try_catch (gimple_stmt_iterator *, struct lower_data *);\n static void lower_gimple_return (gimple_stmt_iterator *, struct lower_data *);\n static void lower_builtin_setjmp (gimple_stmt_iterator *);\n+static void lower_builtin_posix_memalign (gimple_stmt_iterator *);\n \n \n /* Lower the body of current_function_decl from High GIMPLE into Low\n@@ -327,12 +328,19 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t  }\n \n \tif (decl\n-\t    && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t    && DECL_FUNCTION_CODE (decl) == BUILT_IN_SETJMP)\n+\t    && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n \t  {\n-\t    lower_builtin_setjmp (gsi);\n-\t    data->cannot_fallthru = false;\n-\t    return;\n+\t    if (DECL_FUNCTION_CODE (decl) == BUILT_IN_SETJMP)\n+\t      {\n+\t\tlower_builtin_setjmp (gsi);\n+\t\tdata->cannot_fallthru = false;\n+\t\treturn;\n+\t      }\n+\t    else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_POSIX_MEMALIGN)\n+\t      {\n+\t\tlower_builtin_posix_memalign (gsi);\n+\t\treturn;\n+\t      }\n \t  }\n \n \tif (decl && (flags_from_decl_or_type (decl) & ECF_NORETURN))\n@@ -771,6 +779,49 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   /* Remove the call to __builtin_setjmp.  */\n   gsi_remove (gsi, false);\n }\n+\n+/* Lower calls to posix_memalign to\n+     posix_memalign (ptr, align, size);\n+     tem = *ptr;\n+     tem = __builtin_assume_aligned (tem, align);\n+     *ptr = tem;\n+   or to\n+     void *tem;\n+     posix_memalign (&tem, align, size);\n+     ttem = tem;\n+     ttem = __builtin_assume_aligned (ttem, align);\n+     ptr = tem;\n+   in case the first argument was &ptr.  That way we can get at the\n+   alignment of the heap pointer in CCP.  */\n+\n+static void\n+lower_builtin_posix_memalign (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree pptr = gimple_call_arg (stmt, 0);\n+  tree align = gimple_call_arg (stmt, 1);\n+  tree ptr = create_tmp_reg (ptr_type_node, NULL);\n+  if (TREE_CODE (pptr) == ADDR_EXPR)\n+    {\n+      tree tem = create_tmp_var (ptr_type_node, NULL);\n+      TREE_ADDRESSABLE (tem) = 1;\n+      gimple_call_set_arg (stmt, 0, build_fold_addr_expr (tem));\n+      stmt = gimple_build_assign (ptr, tem);\n+    }\n+  else\n+    stmt = gimple_build_assign (ptr,\n+\t\t\t\tfold_build2 (MEM_REF, ptr_type_node, pptr,\n+\t\t\t\t\t     build_int_cst (ptr_type_node, 0)));\n+  gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n+  stmt = gimple_build_call (builtin_decl_implicit (BUILT_IN_ASSUME_ALIGNED),\n+\t\t\t    2, ptr, align);\n+  gimple_call_set_lhs (stmt, ptr);\n+  gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n+  stmt = gimple_build_assign (fold_build2 (MEM_REF, ptr_type_node, pptr,\n+\t\t\t\t\t   build_int_cst (ptr_type_node, 0)),\n+\t\t\t      ptr);\n+  gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n+}\n \f\n \n /* Record the variables in VARS into function FN.  */"}, {"sha": "2e121458198adfaa830fbd7d9294d39eddb5689d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=831806cb211df749b12f47ee4b669e30f7a5f009", "patch": "@@ -1,3 +1,8 @@\n+2014-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gcc.dg/vect/pr60092-2.c: New testcase.\n+\n 2014-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/60082"}, {"sha": "7d2eb6e80eafdde48f55d9af30dccf2f653ae54a", "filename": "gcc/testsuite/gcc.dg/vect/pr60092-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831806cb211df749b12f47ee4b669e30f7a5f009/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092-2.c?ref=831806cb211df749b12f47ee4b669e30f7a5f009", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int *foo (int n)\n+{\n+  int *p;\n+  int *q;\n+  void *tem;\n+  if (posix_memalign (&tem, 256, n * sizeof (int)) != 0)\n+    return (void *)0;\n+  p = (int *)tem;\n+  if (posix_memalign (&tem, 256, n * sizeof (int)) != 0)\n+    return (void *)0;\n+  q = (int *)tem;\n+  bar (q);\n+  int i;\n+  for (i = 0; i < n; ++i)\n+    p[i] = q[i] + q[i];\n+  return p;\n+}\n+\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"Peeling for alignment will be applied\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"Vectorizing an unaligned access\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}