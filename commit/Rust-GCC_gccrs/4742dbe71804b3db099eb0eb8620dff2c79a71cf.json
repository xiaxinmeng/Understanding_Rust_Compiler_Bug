{"sha": "4742dbe71804b3db099eb0eb8620dff2c79a71cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0MmRiZTcxODA0YjNkYjA5OWViMGViODYyMGRmZjJjNzlhNzFjZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-08-28T20:31:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-28T20:31:31Z"}, "message": "PR c++/91360 - Implement C++20 P1143R2: constinit.\n\n\t* c-common.c (c_common_reswords): Add constinit and __constinit.\n\t(keyword_is_decl_specifier): Handle RID_CONSTINIT.\n\t* c-common.h (enum rid): Add RID_CONSTINIT, RID_FIRST_CXX20, and\n\tRID_LAST_CXX20.\n\t(D_CXX20): Define.\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_constinit.\n\t* c-format.c (cxx_keywords): Add \"constinit\".\n\t* c.opt (Wc++2a-compat, Wc++20-compat): New options.\n\n\t* cp-tree.h (TINFO_VAR_DECLARED_CONSTINIT): Define.\n\t(LOOKUP_CONSTINIT): Define.\n\t(enum cp_decl_spec): Add ds_constinit.\n\t* decl.c (check_tag_decl): Give an error for constinit in type\n\tdeclarations.\n\t(check_initializer): Also check LOOKUP_CONSTINIT.\n\t(cp_finish_decl): Add checking for a constinit declaration.  Set\n\tTINFO_VAR_DECLARED_CONSTINIT.\n\t(grokdeclarator): Add checking for a declaration with the constinit\n\tspecifier.\n\t* lex.c (init_reswords): Handle D_CXX20.\n\t* parser.c (cp_lexer_get_preprocessor_token): Pass a better location\n\tto warning_at.  Warn about C++20 keywords.\n\t(cp_keyword_starts_decl_specifier_p): Handle RID_CONSTINIT.\n\t(cp_parser_diagnose_invalid_type_name): Add an inform about constinit.\n\t(cp_parser_decomposition_declaration): Maybe pass LOOKUP_CONSTINIT to\n\tcp_finish_decl.\n\t(cp_parser_decl_specifier_seq): Handle RID_CONSTINIT.\n\t(cp_parser_init_declarator): Maybe pass LOOKUP_CONSTINIT to\n\tcp_finish_decl.\n\t(set_and_check_decl_spec_loc): Add \"constinit\".\n\t* pt.c (tsubst_decl): Set TINFO_VAR_DECLARED_CONSTINIT.\n\t(instantiate_decl): Maybe pass LOOKUP_CONSTINIT to cp_finish_decl.\n\t* typeck2.c (store_init_value): If a constinit variable wasn't\n\tinitialized using a constant initializer, give an error.\n\n\t* doc/invoke.texi: Document -Wc++20-compat.\n\n\t* g++.dg/cpp2a/constinit1.C: New test.\n\t* g++.dg/cpp2a/constinit2.C: New test.\n\t* g++.dg/cpp2a/constinit3.C: New test.\n\t* g++.dg/cpp2a/constinit4.C: New test.\n\t* g++.dg/cpp2a/constinit5.C: New test.\n\t* g++.dg/cpp2a/constinit6.C: New test.\n\t* g++.dg/cpp2a/constinit7.C: New test.\n\t* g++.dg/cpp2a/constinit8.C: New test.\n\t* g++.dg/cpp2a/constinit9.C: New test.\n\t* g++.dg/cpp2a/constinit10.C: New test.\n\t* g++.dg/cpp2a/constinit11.C: New test.\n\t* g++.dg/cpp2a/constinit12.C: New test.\n\nFrom-SVN: r275008", "tree": {"sha": "7af31fa4ebcc89ec48d8f163d2d2f3aeecb4ee11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af31fa4ebcc89ec48d8f163d2d2f3aeecb4ee11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4742dbe71804b3db099eb0eb8620dff2c79a71cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4742dbe71804b3db099eb0eb8620dff2c79a71cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4742dbe71804b3db099eb0eb8620dff2c79a71cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4742dbe71804b3db099eb0eb8620dff2c79a71cf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e12721acde2080202889b3839acca52646b0d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e12721acde2080202889b3839acca52646b0d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e12721acde2080202889b3839acca52646b0d28"}], "stats": {"total": 573, "additions": 556, "deletions": 17}, "files": [{"sha": "8b5ccd2f98d1f6b9f0df04537b6a2d90bcc0c4b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -1,3 +1,8 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91360 - Implement C++20 P1143R2: constinit.\n+\t* doc/invoke.texi: Document -Wc++20-compat.\n+\n 2019-08-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/91457"}, {"sha": "d0a19e3870dd1ccfbd1c50c5297fa903fb846571", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -1,3 +1,15 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91360 - Implement C++20 P1143R2: constinit.\n+\t* c-common.c (c_common_reswords): Add constinit and __constinit.\n+\t(keyword_is_decl_specifier): Handle RID_CONSTINIT.\n+\t* c-common.h (enum rid): Add RID_CONSTINIT, RID_FIRST_CXX20, and\n+\tRID_LAST_CXX20.\n+\t(D_CXX20): Define.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_constinit.\n+\t* c-format.c (cxx_keywords): Add \"constinit\".\n+\t* c.opt (Wc++2a-compat, Wc++20-compat): New options.\n+\n 2019-08-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91415"}, {"sha": "abc85cb29291310d28c087e5cd7e9a18686c02ff", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -326,8 +326,9 @@ static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n    C --std=c89: D_C99 | D_CXXONLY | D_OBJC | D_CXX_OBJC\n    C --std=c99: D_CXXONLY | D_OBJC\n    ObjC is like C except that D_OBJC and D_CXX_OBJC are not set\n-   C++ --std=c++98: D_CONLY | D_CXX11 | D_OBJC\n-   C++ --std=c++11: D_CONLY | D_OBJC\n+   C++ --std=c++98: D_CONLY | D_CXX11 | D_CXX20 | D_OBJC\n+   C++ --std=c++11: D_CONLY | D_CXX20 | D_OBJC\n+   C++ --std=c++2a: D_CONLY | D_OBJC\n    ObjC++ is like C++ except that D_OBJC is not set\n \n    If -fno-asm is used, D_ASM is added to the mask.  If\n@@ -392,6 +393,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__complex__\",\tRID_COMPLEX,\t0 },\n   { \"__const\",\t\tRID_CONST,\t0 },\n   { \"__const__\",\tRID_CONST,\t0 },\n+  { \"__constinit\",\tRID_CONSTINIT,\tD_CXXONLY },\n   { \"__decltype\",       RID_DECLTYPE,   D_CXXONLY },\n   { \"__direct_bases\",   RID_DIRECT_BASES, D_CXXONLY },\n   { \"__extension__\",\tRID_EXTENSION,\t0 },\n@@ -462,6 +464,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"class\",\t\tRID_CLASS,\tD_CXX_OBJC | D_CXXWARN },\n   { \"const\",\t\tRID_CONST,\t0 },\n   { \"constexpr\",\tRID_CONSTEXPR,\tD_CXXONLY | D_CXX11 | D_CXXWARN },\n+  { \"constinit\",\tRID_CONSTINIT,\tD_CXXONLY | D_CXX20 | D_CXXWARN },\n   { \"const_cast\",\tRID_CONSTCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"continue\",\t\tRID_CONTINUE,\t0 },\n   { \"decltype\",         RID_DECLTYPE,   D_CXXONLY | D_CXX11 | D_CXXWARN },\n@@ -7927,6 +7930,7 @@ keyword_is_decl_specifier (enum rid keyword)\n     case RID_TYPEDEF:\n     case RID_FRIEND:\n     case RID_CONSTEXPR:\n+    case RID_CONSTINIT:\n       return true;\n     default:\n       return false;"}, {"sha": "17bd7b1c7d8fb0cf6898cdf87122d80758aa2d03", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -180,6 +180,9 @@ enum rid\n   /* C++11 */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,\n \n+  /* C++20 */\n+  RID_CONSTINIT,\n+\n   /* char8_t */\n   RID_CHAR8,\n \n@@ -250,6 +253,8 @@ enum rid\n \n   RID_FIRST_CXX11 = RID_CONSTEXPR,\n   RID_LAST_CXX11 = RID_STATIC_ASSERT,\n+  RID_FIRST_CXX20 = RID_CONSTINIT,\n+  RID_LAST_CXX20 = RID_CONSTINIT,\n   RID_FIRST_AT = RID_AT_ENCODE,\n   RID_LAST_AT = RID_AT_IMPLEMENTATION,\n   RID_FIRST_PQ = RID_IN,\n@@ -427,6 +432,7 @@ extern machine_mode c_default_pointer_mode;\n #define D_CXX_CONCEPTS  0x0400\t/* In C++, only with concepts.  */\n #define D_TRANSMEM\t0X0800\t/* C++ transactional memory TS.  */\n #define D_CXX_CHAR8_T\t0X1000\t/* In C++, only with -fchar8_t.  */\n+#define D_CXX20\t\t0x2000  /* In C++, C++20 only.  */\n \n #define D_CXX_CONCEPTS_FLAGS D_CXXONLY | D_CXX_CONCEPTS\n #define D_CXX_CHAR8_T_FLAGS D_CXXONLY | D_CXX_CHAR8_T"}, {"sha": "6b18246e0b663f3eb705dd82379a9651f616d9f1", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -986,6 +986,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t{\n \t  /* Set feature test macros for C++2a.  */\n \t  cpp_define (pfile, \"__cpp_conditional_explicit=201806\");\n+\t  cpp_define (pfile, \"__cpp_constinit=201907\");\n \t  cpp_define (pfile, \"__cpp_nontype_template_parameter_class=201806\");\n \t  cpp_define (pfile, \"__cpp_impl_destroying_delete=201806\");\n \t}"}, {"sha": "91bae3d6096f580feeba794e6ef58a719b40ee8d", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -2958,6 +2958,7 @@ static const token_t cxx_keywords[] =\n    NAME (\"catch\", NULL),\n    NAME (\"constexpr if\", NULL),\n    NAME (\"constexpr\", NULL),\n+   NAME (\"constinit\", NULL),\n    NAME (\"consteval\", NULL),\n    NAME (\"decltype\", NULL),\n    NAME (\"nullptr\", NULL),"}, {"sha": "4c468d0f6c288a30c2616659a285f795dc2835cc", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -400,6 +400,13 @@ Wc++17-compat\n C++ ObjC++ Var(warn_cxx17_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.\n \n+Wc++2a-compat\n+C++ ObjC++ Warning Alias(Wc++20-compat) Undocumented\n+\n+Wc++20-compat\n+C++ ObjC++ Var(warn_cxx20_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n+Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.\n+\n Wcast-function-type\n C ObjC C++ ObjC++ Var(warn_cast_function_type) Warning EnabledBy(Wextra)\n Warn about casts between incompatible function types."}, {"sha": "2e7c26cd4476d062d6929fdd66849f2f8e87ed9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -1,3 +1,32 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91360 - Implement C++20 P1143R2: constinit.\n+\t* cp-tree.h (TINFO_VAR_DECLARED_CONSTINIT): Define.\n+\t(LOOKUP_CONSTINIT): Define.\n+\t(enum cp_decl_spec): Add ds_constinit.\n+\t* decl.c (check_tag_decl): Give an error for constinit in type\n+\tdeclarations.\n+\t(check_initializer): Also check LOOKUP_CONSTINIT.\n+\t(cp_finish_decl): Add checking for a constinit declaration.  Set\n+\tTINFO_VAR_DECLARED_CONSTINIT.\n+\t(grokdeclarator): Add checking for a declaration with the constinit\n+\tspecifier.\n+\t* lex.c (init_reswords): Handle D_CXX20.\n+\t* parser.c (cp_lexer_get_preprocessor_token): Pass a better location\n+\tto warning_at.  Warn about C++20 keywords.\n+\t(cp_keyword_starts_decl_specifier_p): Handle RID_CONSTINIT.\n+\t(cp_parser_diagnose_invalid_type_name): Add an inform about constinit.\n+\t(cp_parser_decomposition_declaration): Maybe pass LOOKUP_CONSTINIT to\n+\tcp_finish_decl.\n+\t(cp_parser_decl_specifier_seq): Handle RID_CONSTINIT.\n+\t(cp_parser_init_declarator): Maybe pass LOOKUP_CONSTINIT to\n+\tcp_finish_decl.\n+\t(set_and_check_decl_spec_loc): Add \"constinit\".\n+\t* pt.c (tsubst_decl): Set TINFO_VAR_DECLARED_CONSTINIT.\n+\t(instantiate_decl): Maybe pass LOOKUP_CONSTINIT to cp_finish_decl.\n+\t* typeck2.c (store_init_value): If a constinit variable wasn't\n+\tinitialized using a constant initializer, give an error.\n+\n 2019-08-28  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/90613"}, {"sha": "0e514d5cc221163c2472a8f73934a50fd77af0eb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -443,6 +443,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n+      TINFO_VAR_DECLARED_CONSTINIT (in TEMPLATE_INFO)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -1435,6 +1436,11 @@ typedef struct qualified_typedef_usage_s qualified_typedef_usage_t;\n #define TINFO_USED_TEMPLATE_ID(NODE) \\\n   (TREE_LANG_FLAG_1 (TEMPLATE_INFO_CHECK (NODE)))\n \n+/* Non-zero if this variable template specialization was declared with the\n+   `constinit' specifier.  */\n+#define TINFO_VAR_DECLARED_CONSTINIT(NODE) \\\n+  (TREE_LANG_FLAG_2 (TEMPLATE_INFO_CHECK (NODE)))\n+\n struct GTY(()) tree_template_info {\n   struct tree_base base;\n   tree tmpl;\n@@ -5502,6 +5508,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define LOOKUP_DELEGATING_CONS (LOOKUP_NO_NON_INTEGRAL << 1)\n /* Allow initialization of a flexible array members.  */\n #define LOOKUP_ALLOW_FLEXARRAY_INIT (LOOKUP_DELEGATING_CONS << 1)\n+/* Require constant initialization of a non-constant variable.  */\n+#define LOOKUP_CONSTINIT (LOOKUP_ALLOW_FLEXARRAY_INIT << 1)\n \n #define LOOKUP_NAMESPACES_ONLY(F)  \\\n   (((F) & LOOKUP_PREFER_NAMESPACES) && !((F) & LOOKUP_PREFER_TYPES))\n@@ -5815,6 +5823,7 @@ enum cp_decl_spec {\n   ds_alias,\n   ds_constexpr,\n   ds_complex,\n+  ds_constinit,\n   ds_thread,\n   ds_type_spec,\n   ds_redefined_builtin_type_spec,"}, {"sha": "c5cc22a8d6d646cf250c7e4becfd2a60f4af7ba9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -4962,6 +4962,9 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n       else if (decl_spec_seq_has_spec_p (declspecs,  ds_constexpr))\n         error_at (declspecs->locations[ds_constexpr],\n \t\t  \"%<constexpr%> cannot be used for type declarations\");\n+      else if (decl_spec_seq_has_spec_p (declspecs,  ds_constinit))\n+\terror_at (declspecs->locations[ds_constinit],\n+\t\t  \"%<constinit%> cannot be used for type declarations\");\n     }\n \n   if (declspecs->attributes && warn_attributes && declared_type)\n@@ -6595,11 +6598,12 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t\t about aggregate initialization of non-aggregate classes.  */\n \t      flags |= LOOKUP_ALREADY_DIGESTED;\n \t    }\n-\t  else if (DECL_DECLARED_CONSTEXPR_P (decl))\n+\t  else if (DECL_DECLARED_CONSTEXPR_P (decl)\n+\t\t   || (flags & LOOKUP_CONSTINIT))\n \t    {\n-\t      /* Declared constexpr, but no suitable initializer; massage\n-\t\t init appropriately so we can pass it into store_init_value\n-\t\t for the error.  */\n+\t      /* Declared constexpr or constinit, but no suitable initializer;\n+\t\t massage init appropriately so we can pass it into\n+\t\t store_init_value for the error.  */\n \t      if (CLASS_TYPE_P (type)\n \t\t  && (!init || TREE_CODE (init) == TREE_LIST))\n \t\t{\n@@ -7162,6 +7166,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  DECL_INITIAL (decl) = NULL_TREE;\n \t}\n \n+      /* Handle `constinit' on variable templates.  */\n+      if (flags & LOOKUP_CONSTINIT)\n+\tTINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (decl)) = true;\n+\n       /* Generally, initializers in templates are expanded when the\n \t template is instantiated.  But, if DECL is a variable constant\n \t then it can be used in future constant expressions, so its value\n@@ -7253,6 +7261,18 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n   if (VAR_P (decl))\n     {\n+      duration_kind dk = decl_storage_duration (decl);\n+      /* [dcl.constinit]/1 \"The constinit specifier shall be applied\n+\t only to a declaration of a variable with static or thread storage\n+\t duration.\"  */\n+      if ((flags & LOOKUP_CONSTINIT)\n+\t  && !(dk == dk_thread || dk == dk_static))\n+\t{\n+\t  error (\"%<constinit%> can only be applied to a variable with static \"\n+\t\t \"or thread storage duration\");\n+\t  return;\n+\t}\n+\n       /* If this is a local variable that will need a mangled name,\n \t register it now.  We must do this before processing the\n \t initializer for the variable, since the initialization might\n@@ -10477,6 +10497,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool template_parm_flag = false;\n   bool typedef_p = decl_spec_seq_has_spec_p (declspecs, ds_typedef);\n   bool constexpr_p = decl_spec_seq_has_spec_p (declspecs, ds_constexpr);\n+  bool constinit_p = decl_spec_seq_has_spec_p (declspecs, ds_constinit);\n   bool late_return_type_p = false;\n   bool array_parameter_p = false;\n   location_t saved_loc = input_location;\n@@ -10763,6 +10784,24 @@ grokdeclarator (const cp_declarator *declarator,\n       return error_mark_node;\n     }\n \n+  if (constinit_p && typedef_p)\n+    {\n+      error_at (declspecs->locations[ds_constinit],\n+\t\t\"%<constinit%> cannot appear in a typedef declaration\");\n+      return error_mark_node;\n+    }\n+\n+  /* [dcl.spec]/2 \"At most one of the constexpr, consteval, and constinit\n+     keywords shall appear in a decl-specifier-seq.\"  */\n+  if (constinit_p && constexpr_p)\n+    {\n+      error_at (min_location (declspecs->locations[ds_constinit],\n+\t\t\t      declspecs->locations[ds_constexpr]),\n+\t\t\"can use at most one of the %<constinit%> and %<constexpr%> \"\n+\t\t\"specifiers\");\n+      return error_mark_node;\n+    }\n+\n   /* If there were multiple types specified in the decl-specifier-seq,\n      issue an error message.  */\n   if (declspecs->multiple_types_p)\n@@ -11155,6 +11194,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    \"a parameter cannot be declared %<constexpr%>\");\n           constexpr_p = 0;\n         }\n+      else if (constinit_p)\n+\t{\n+\t  error_at (declspecs->locations[ds_constinit],\n+\t\t    \"a parameter cannot be declared %<constinit%>\");\n+\t  constexpr_p = 0;\n+\t}\n     }\n \n   /* Give error if `virtual' is used outside of class declaration.  */\n@@ -11597,6 +11642,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t  \"an array\", name);\n \t\treturn error_mark_node;\n \t      }\n+\t    if (constinit_p)\n+\t      {\n+\t\terror_at (declspecs->locations[ds_constinit],\n+\t\t\t  \"%<constinit%> on function return type is not \"\n+\t\t\t  \"allowed\");\n+\t\treturn error_mark_node;\n+\t      }\n \n \t    if (ctype == NULL_TREE\n \t\t&& decl_context == FIELD\n@@ -12794,10 +12846,17 @@ grokdeclarator (const cp_declarator *declarator,\n                 else if (constexpr_p)\n \t\t  {\n \t\t    error_at (declspecs->locations[ds_constexpr],\n-\t\t\t      \"non-static data member %qE declared %<constexpr%>\",\n-\t\t\t      unqualified_id);\n+\t\t\t      \"non-static data member %qE declared \"\n+\t\t\t      \"%<constexpr%>\", unqualified_id);\n \t\t    constexpr_p = false;\n \t\t  }\n+\t\telse if (constinit_p)\n+\t\t  {\n+\t\t    error_at (declspecs->locations[ds_constinit],\n+\t\t\t      \"non-static data member %qE declared \"\n+\t\t\t      \"%<constinit%>\", unqualified_id);\n+\t\t    constinit_p = false;\n+\t\t  }\n \t\tdecl = build_decl (id_loc, FIELD_DECL, unqualified_id, type);\n \t\tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \t\tif (bitfield && !unqualified_id)"}, {"sha": "5b43723a8fac961978cb949fcdde9bef22892afd", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -229,6 +229,8 @@ init_reswords (void)\n \n   if (cxx_dialect < cxx11)\n     mask |= D_CXX11;\n+  if (cxx_dialect < cxx2a)\n+    mask |= D_CXX20;\n   if (!flag_concepts)\n     mask |= D_CXX_CONCEPTS;\n   if (!flag_tm)"}, {"sha": "93cdaddf52d51e86ca194e120fe77e258207ddc0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -834,14 +834,28 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n             {\n               /* Warn about the C++0x keyword (but still treat it as\n                  an identifier).  */\n-              warning (OPT_Wc__11_compat,\n-                       \"identifier %qE is a keyword in C++11\",\n-                       token->u.value);\n+\t      warning_at (token->location, OPT_Wc__11_compat,\n+\t\t\t  \"identifier %qE is a keyword in C++11\",\n+\t\t\t  token->u.value);\n \n               /* Clear out the C_RID_CODE so we don't warn about this\n                  particular identifier-turned-keyword again.  */\n               C_SET_RID_CODE (token->u.value, RID_MAX);\n             }\n+\t  if (warn_cxx20_compat\n+\t      && C_RID_CODE (token->u.value) >= RID_FIRST_CXX20\n+\t      && C_RID_CODE (token->u.value) <= RID_LAST_CXX20)\n+\t    {\n+\t      /* Warn about the C++20 keyword (but still treat it as\n+\t\t an identifier).  */\n+\t      warning_at (token->location, OPT_Wc__20_compat,\n+\t\t\t  \"identifier %qE is a keyword in C++20\",\n+\t\t\t  token->u.value);\n+\n+\t      /* Clear out the C_RID_CODE so we don't warn about this\n+\t\t particular identifier-turned-keyword again.  */\n+\t      C_SET_RID_CODE (token->u.value, RID_MAX);\n+\t    }\n \n \t  token->keyword = RID_MAX;\n \t}\n@@ -986,6 +1000,7 @@ cp_keyword_starts_decl_specifier_p (enum rid keyword)\n     case RID_DECLTYPE:\n     case RID_UNDERLYING_TYPE:\n     case RID_CONSTEXPR:\n+    case RID_CONSTINIT:\n       return true;\n \n     default:\n@@ -3353,6 +3368,9 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t       && id_equal (id, \"thread_local\"))\n \tinform (location, \"C++11 %<thread_local%> only available with \"\n \t\t\"%<-std=c++11%> or %<-std=gnu++11%>\");\n+      else if (cxx_dialect < cxx2a && id == ridpointers[(int)RID_CONSTINIT])\n+\tinform (location, \"C++20 %<constinit%> only available with \"\n+\t\t\"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_CONCEPT])\n \tinform (location, \"%<concept%> only available with %<-fconcepts%>\");\n       else if (processing_template_decl && current_class_type\n@@ -13839,9 +13857,12 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \n       if (decl != error_mark_node)\n \t{\n+\t  int flags = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)\n+\t\t       ? LOOKUP_CONSTINIT : 0);\n \t  cp_maybe_mangle_decomp (decl, prev, v.length ());\n \t  cp_finish_decl (decl, initializer, non_constant_p, NULL_TREE,\n-\t\t\t  is_direct_init ? LOOKUP_NORMAL : LOOKUP_IMPLICIT);\n+\t\t\t  (is_direct_init ? LOOKUP_NORMAL : LOOKUP_IMPLICIT)\n+\t\t\t  | flags);\n \t  cp_finish_decomp (decl, prev, v.length ());\n \t}\n     }\n@@ -13993,7 +14014,8 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t{\n \t  /* decl-specifier:\n \t       friend\n-               constexpr */\n+\t       constexpr\n+\t       constinit */\n \tcase RID_FRIEND:\n \t  if (!at_class_scope_p ())\n \t    {\n@@ -14015,6 +14037,11 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n           cp_lexer_consume_token (parser->lexer);\n           break;\n \n+\tcase RID_CONSTINIT:\n+\t  ds = ds_constinit;\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  break;\n+\n         case RID_CONCEPT:\n           ds = ds_concept;\n           cp_lexer_consume_token (parser->lexer);\n@@ -20532,6 +20559,8 @@ cp_parser_init_declarator (cp_parser* parser,\n      declarations.  */\n   if (!member_p && decl && decl != error_mark_node && !range_for_decl_p)\n     {\n+      int cf = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)\n+\t\t? LOOKUP_CONSTINIT : 0);\n       cp_finish_decl (decl,\n \t\t      initializer, !is_non_constant_init,\n \t\t      asm_specification,\n@@ -20540,7 +20569,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t `explicit' constructor is OK.  Otherwise, an\n \t\t\t `explicit' constructor cannot be used.  */\n \t\t      ((is_direct_init || !is_initialized)\n-\t\t       ? LOOKUP_NORMAL : LOOKUP_IMPLICIT));\n+\t\t       ? LOOKUP_NORMAL : LOOKUP_IMPLICIT) | cf);\n     }\n   else if ((cxx_dialect != cxx98) && friend_p\n \t   && decl && TREE_CODE (decl) == FUNCTION_DECL)\n@@ -29470,7 +29499,8 @@ set_and_check_decl_spec_loc (cp_decl_specifier_seq *decl_specs,\n \t    \"typedef\",\n \t    \"using\",\n             \"constexpr\",\n-\t    \"__complex\"\n+\t    \"__complex\",\n+\t    \"constinit\"\n \t  };\n \t  gcc_rich_location richloc (location);\n \t  richloc.add_fixit_remove ();"}, {"sha": "54d36f91ddccd84cfc40c40f800f6d150aaa5c58", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -13955,6 +13955,10 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \t    DECL_TEMPLATE_INFO (r) = build_template_info (tmpl, argvec);\n \t    SET_DECL_IMPLICIT_INSTANTIATION (r);\n+\t    /* Remember whether we require constant initialization of\n+\t       a non-constant template variable.  */\n+\t    TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (r))\n+\t      = TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (t));\n \t    if (!error_operand_p (r) || (complain & tf_error))\n \t      register_specialization (r, gen_tmpl, argvec, false, hash);\n \t  }\n@@ -24744,7 +24748,9 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n         push_nested_class (DECL_CONTEXT (d));\n \n       const_init = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n-      cp_finish_decl (d, init, const_init, NULL_TREE, 0);\n+      int flags = (TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (d))\n+\t\t   ? LOOKUP_CONSTINIT : 0);\n+      cp_finish_decl (d, init, const_init, NULL_TREE, flags);\n \n       if (enter_context)\n         pop_nested_class ();"}, {"sha": "d5098fa24bb465ce70d95eae82bc62f16d4b2a0d", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -885,7 +885,22 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n       if (!TYPE_REF_P (type))\n \tTREE_CONSTANT (decl) = const_init && decl_maybe_constant_var_p (decl);\n       if (!const_init)\n-\tvalue = oldval;\n+\t{\n+\t  /* [dcl.constinit]/2 \"If a variable declared with the constinit\n+\t     specifier has dynamic initialization, the program is\n+\t     ill-formed.\"  */\n+\t  if (flags & LOOKUP_CONSTINIT)\n+\t    {\n+\t      error_at (location_of (decl),\n+\t\t\t\"%<constinit%> variable %qD does not have a constant \"\n+\t\t\t\"initializer\", decl);\n+\t      if (require_constant_expression (value))\n+\t\tcxx_constant_init (value, decl);\n+\t      value = error_mark_node;\n+\t    }\n+\t  else\n+\t    value = oldval;\n+\t}\n     }\n   value = cp_fully_fold_init (value);\n "}, {"sha": "1391a562c352f44f86715c52572963eab7759641", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -295,6 +295,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  -Wc++17-compat  @gol\n+-Wc++20-compat  @gol\n -Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual  @gol\n -Wchar-subscripts  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wclobbered  -Wcomment  -Wconditionally-supported @gol\n@@ -6792,6 +6793,12 @@ and ISO C++ 2014.  This warning is enabled by @option{-Wall}.\n Warn about C++ constructs whose meaning differs between ISO C++ 2014\n and ISO C++ 2017.  This warning is enabled by @option{-Wall}.\n \n+@item -Wc++20-compat @r{(C++ and Objective-C++ only)}\n+@opindex Wc++20-compat\n+@opindex Wno-c++20-compat\n+Warn about C++ constructs whose meaning differs between ISO C++ 2017\n+and ISO C++ 2020.  This warning is enabled by @option{-Wall}.\n+\n @item -Wcast-qual\n @opindex Wcast-qual\n @opindex Wno-cast-qual"}, {"sha": "77fa37f75b827bc8417f6cc33b75f99bb81a9e22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -1,3 +1,19 @@\n+2019-08-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91360 - Implement C++20 P1143R2: constinit.\n+\t* g++.dg/cpp2a/constinit1.C: New test.\n+\t* g++.dg/cpp2a/constinit2.C: New test.\n+\t* g++.dg/cpp2a/constinit3.C: New test.\n+\t* g++.dg/cpp2a/constinit4.C: New test.\n+\t* g++.dg/cpp2a/constinit5.C: New test.\n+\t* g++.dg/cpp2a/constinit6.C: New test.\n+\t* g++.dg/cpp2a/constinit7.C: New test.\n+\t* g++.dg/cpp2a/constinit8.C: New test.\n+\t* g++.dg/cpp2a/constinit9.C: New test.\n+\t* g++.dg/cpp2a/constinit10.C: New test.\n+\t* g++.dg/cpp2a/constinit11.C: New test.\n+\t* g++.dg/cpp2a/constinit12.C: New test.\n+\n 2019-08-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91565"}, {"sha": "9d1c0289a62710262a88ec3cd310bb4364b39014", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+// Test basic usage of 'constinit'.\n+\n+const char *g() { return \"dynamic init\"; }\n+constexpr const char *f(bool p) { return p ? \"constant init\" : g(); } // { dg-error \"call to non-.constexpr. function\" }\n+\n+constinit const char *c = f(true);\n+constinit const char *d = f(false); // { dg-error \"variable .d. does not have a constant initializer\" }\n+// { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-1 }\n+static constinit const char *e = f(true);\n+\n+constexpr int foo(int x) { return x; }\n+constinit int i = foo(42);\n+constinit int j // { dg-error \"variable .j. does not have a constant initializer\" }\n+  = foo(i); // { dg-error \"not usable in a constant expression\" }\n+\n+int y = 42;\n+constinit int x // { dg-error \"variable .x. does not have a constant initializer\" }\n+  = y; // { dg-error \"not usable in a constant expression\" }\n+\n+constinit int z;\n+const constinit unsigned cst = 1u;\n+\n+void\n+fn ()\n+{\n+  static constinit int m = foo(42);\n+  static constinit int n // { dg-error \"variable .n. does not have a constant initializer\" }\n+    = foo(m); // { dg-error \"not usable in a constant expression\" }\n+\n+  // Make sure we can still modify constinit variables.\n+  c = \"foo\";\n+  i = 10;\n+  m = 90;\n+  // ... unless they're 'const'.\n+  cst *= 2; // { dg-error \"assignment of read-only variable\" }\n+}"}, {"sha": "a50f285ecb1570eb9e778e28c95d36c2a7f7da15", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit10.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+// From PR83428.\n+\n+struct S1\n+{\n+    constexpr S1 ();\n+    int m_i;\n+};\n+\n+struct alignas(64) S2\n+{\n+    constexpr S2 ()\n+    : m_tabS1()\n+    {}\n+\n+    S1 m_tabS1[7];\n+};\n+\n+constinit S2 objX; // { dg-error \".constinit. variable .objX. does not have a constant initializer\" }\n+// { dg-error \"used before its definition\" \"\" { target *-*-* } .-1 }\n+// // { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-2 }\n+\n+constexpr S1::S1 ()\n+: m_i(14)\n+{}"}, {"sha": "ab3715b2064deb7dc5d9f53171c9c8e5599ebf87", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit11.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+\n+int foo ();\n+constexpr int constfoo () { return 42; }\n+int gl = 42;\n+\n+struct nonliteral {\n+  int m;\n+  nonliteral() : m() { }\n+  nonliteral(int n) : m(n) { }\n+  ~nonliteral() {}\n+};\n+\n+struct literal {\n+  int m;\n+  constexpr literal() : m() { }\n+  constexpr literal(int n) : m(n) { }\n+};\n+\n+struct pod {\n+  int m;\n+};\n+\n+struct S {\n+  static constinit pod p;\n+  static constinit pod pc;\n+  static const constinit nonliteral n;\n+};\n+\n+struct W {\n+  int w = 42;\n+};\n+\n+constinit W w;\n+\n+constinit const int &r1 = gl;\n+constinit thread_local const int &r2 = gl;\n+constinit const int &r3 // { dg-error \"variable .r3. does not have a constant initializer\" }\n+  = foo (); // { dg-error \"call to non-.constexpr. function\" }\n+constinit const literal &r4 = 42;\n+constinit const nonliteral &r5 // { dg-error \"variable .r5. does not have a constant initializer\" }\n+  = 42; // { dg-error \"call to non-.constexpr. function\" }\n+constinit const int &r6 = nonliteral(2).m; // { dg-error \"variable .r6. does not have a constant initializer|call to non-.constexpr. function\" }\n+\n+constinit pod p1;\n+constinit pod p2 = { 42 };\n+constinit pod p3 = { constfoo() };\n+constinit pod p4 = { foo() }; // { dg-error \"variable .p4. does not have a constant initializer|call to non-.constexpr. function\" }\n+\n+constexpr literal lit;\n+constinit literal l1 = lit;\n+constinit literal l2 = 42;\n+constinit literal l3 = constfoo();\n+constinit literal l4 = foo(); // { dg-error \"variable .l4. does not have a constant initializer|call to non-.constexpr. function\" }\n+constinit literal l5 = {};\n+constinit literal l6{};\n+constinit thread_local literal l7 = lit;\n+constinit thread_local literal l8 = 42;\n+constinit thread_local literal l9 = constfoo();\n+constinit thread_local literal l10 = foo(); // { dg-error \"variable .l10. does not have a constant initializer|call to non-.constexpr. function\" }\n+constinit thread_local literal l11{};\n+\n+pod S::p;\n+constinit pod S::pc(S::p); // { dg-error \"variable .S::pc. does not have a constant initializer|not usable\" }\n+\n+constinit const nonliteral S::n(42); // { dg-error \"variable .S::n. does not have a constant initializer|call to non-.constexpr. function\" }\n+constinit int n1 = nonliteral{42}.m; // { dg-error \"variable .n1. does not have a constant initializer|temporary of non-literal type\" }\n+constinit int n2 = literal{42}.m;\n+\n+void\n+fn1 ()\n+{\n+  const int c = 42;\n+  static constinit const int &l // { dg-error \"variable .l. does not have a constant initializer\" }\n+    = c; // { dg-error \"not a constant\" }\n+  static const int &l2 = 10;\n+  static const int &l3 = gl;\n+}"}, {"sha": "b5b736f87c20427eda3b43314af7c44b679f4340", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit12.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  S(int) { }\n+};\n+\n+template <class T>\n+struct U {\n+  T m;\n+  constexpr U(int i) : m(i) { } // { dg-error \"call to non-.constexpr. function\" }\n+};\n+\n+constinit U<S> u(42); // { dg-error \"does not have a constant initializer|called in a constant expression\" }"}, {"sha": "3e9f578f8ca1d7ad69240d9a974911ff15153c96", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit2.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++11 } }\n+// Test that 'constinit' isn't recognized pre-C++2a, but '__constinit' is.\n+\n+constinit int g = 42; // { dg-error \".constinit. does not name a type\" \"\" { target c++17_down } }\n+__constinit int g2 = 42;\n+static __constinit int g3 = 42;\n+\n+void\n+fn ()\n+{\n+  static constinit int x = 69; // { dg-error \".constinit. does not name a type\" \"\" { target c++17_down } }\n+  static __constinit int x2 = 69;\n+}"}, {"sha": "316937e5bf3bdfbbe7245eae8644d29c67cb52f5", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit3.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,58 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+\n+constinit constinit int v1; // { dg-error \"duplicate .constinit.\" }\n+constexpr constinit int v2 = 1; // { dg-error \"can use at most one of the .constinit. and .constexpr. specifiers\" }\n+constinit constexpr int v3 = 1; // { dg-error \"an use at most one of the .constinit. and .constexpr. specifiers\" }\n+\n+extern static constinit int v4; // { dg-error \"conflicting specifiers\" }\n+extern thread_local constinit int v5;\n+extern constinit int v6;\n+\n+constinit typedef int T; // { dg-error \".constinit. cannot appear in a typedef declaration\" }\n+\n+struct S2 {\n+  constinit int m1; // { dg-error \"non-static data member .m1. declared .constinit.\" }\n+  constinit unsigned int b : 32; // { dg-error \" non-static data member .b. declared .constinit.\" }\n+};\n+\n+struct S3 {\n+  constinit S3() {} // { dg-error \".constinit. on function return type is not allowed\" }\n+  constinit ~S3() {} // { dg-error \".constinit. on function return type is not allowed\" }\n+};\n+\n+constinit struct S4 { // { dg-error \".constinit. cannot be used for type declarations\" }\n+};\n+\n+template<constinit int I> // { dg-error \"a parameter cannot be declared .constinit.\" }\n+struct X { };\n+\n+int\n+fn1 ()\n+{\n+  // Not static storage\n+  constinit int a1 = 42; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+  constinit int a2 = 42; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+  extern constinit int e1;\n+\n+  return 0;\n+}\n+\n+constinit int // { dg-error \".constinit. on function return type is not allowed\" }\n+fn3 ()\n+{\n+}\n+\n+void\n+fn2 (int i, constinit int p) // { dg-error \"a parameter cannot be declared .constinit.\" }\n+{\n+  constinit auto l = [i](){ return i; }; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+}\n+\n+struct B { int d; };\n+\n+void\n+fn3 (B b)\n+{\n+  constinit auto [ a ] = b; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+}"}, {"sha": "748a7ffa3a9c147693c34e27d2048a99f272d47c", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+\n+struct S { };\n+constinit extern S s;\n+constinit S s2 = { };\n+\n+struct T {\n+  int i;\n+};\n+\n+constinit T t;\n+struct U : T {\n+  int j;\n+};\n+constinit U u;"}, {"sha": "3d21f48dbee9b0f621f7fe98309935f577e5ccc0", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit5.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+// Check that we preserve DECL_DECLARED_CONSTINIT_P in duplicate_decls.\n+\n+int gl = 42;\n+\n+struct S {\n+  constinit static int m;\n+  constinit static int n;\n+  constinit static const int &r1;\n+  constinit static const int &r2;\n+};\n+\n+int S::m = 42;\n+int nonconst;\n+constinit int S::n = nonconst; // { dg-error \"variable .S::n. does not have a constant initializer\" }\n+// { dg-error \"not usable in a constant expression\" \"\" { target *-*-* } .-1 }\n+\n+const int &S::r1 = gl;\n+const int &S::r2 = 42;\n+\n+struct T {\n+  constinit static thread_local const int &r1;\n+  constinit static thread_local const int &r2;\n+};\n+constinit thread_local const int &T::r1 = gl;\n+constinit thread_local const int &T::r2 = 42; // { dg-error \"variable .T::r2. does not have a constant initializer|not a constant expression\" }"}, {"sha": "73e78832844d984420e0d568cab1f13570247d58", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit6.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit6.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++17_down } }\n+// { dg-options \"-Wc++20-compat\" }\n+\n+int constinit; // { dg-warning \"identifier .constinit. is a keyword\" }"}, {"sha": "e9a0da3f8c872bf8139eea530c4d78b2906519c1", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit7.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++11 } }\n+\n+struct T {\n+  constexpr T(int) {}\n+  ~T();\n+};\n+__constinit T x = { 42 };\n+// ??? This should be rejected in C++14: copy initialization is not a constant\n+// expression on a non-literal type in C++14.  But 'constinit' is C++20 only.\n+__constinit T y = 42;"}, {"sha": "c6b2975350c1241687bd7ec2d11049a08fa26b63", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do compile { target c++2a } }\n+// Variable templates.\n+\n+int nonconst;\n+\n+template<typename T>\n+constinit T v1 = 42;\n+\n+template<typename T>\n+constinit T v2 = nonconst; // { dg-error \"does not have a constant initializer|not usable\" }\n+\n+void\n+fn ()\n+{\n+  v1<int>;\n+  v2<int>;\n+}"}, {"sha": "4c7f89251698d82204a21eed663f407cc4f3c7a5", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit9.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4742dbe71804b3db099eb0eb8620dff2c79a71cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C?ref=4742dbe71804b3db099eb0eb8620dff2c79a71cf", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/91360 - Implement C++20 P1143R2: constinit\n+// { dg-do run { target c++2a } }\n+// A run-time test.\n+\n+constexpr int foo (int x) { return x; }\n+constinit int b = foo(42);\n+\n+int\n+main ()\n+{\n+  if (b != 42)\n+    __builtin_abort ();\n+  // We can still modify 'b'.\n+  b = 10;\n+  if (b != 10)\n+    __builtin_abort ();\n+\n+  constinit static int s = foo(14);\n+  if (s != 14)\n+    __builtin_abort ();\n+  s++;\n+  if (s != 15)\n+    __builtin_abort ();\n+}"}]}