{"sha": "2bd749490845f2edc7de74dca4b29fd7d7698dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkNzQ5NDkwODQ1ZjJlZGM3ZGU3NGRjYTRiMjlmZDdkNzY5OGRmZg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-06-12T17:34:47Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-12T17:34:47Z"}, "message": "check.c (gfc_check_second_sub, [...]): New functions.\n\n\t* check.c (gfc_check_second_sub, gfc_check_irand, gfc_check_rand\n\tgfc_check_srand, gfc_check_etime, gfc_check_etime_sub): New functions.\n\t* gfortran.h (gfc_generic_isym_id): New symbols GFC_ISYM_ETIME,\n\tGFC_ISYM_IRAND, GFC_ISYM_RAND, GFC_ISYM_SECOND.\n\t* trans-intrinsic.c:  Use symbols.\n\t* intrinsic.c (add_sym_2s): New function.\n\t* intrinsic.c: Add etime, dtime, irand, rand, second, srand.\n\t* intrinsic.h: Function prototypes.\n\t* iresolve.c (gfc_resolve_etime_sub, gfc_resolve_second_sub\n\tgfc_resolve_srand):  New functions.\nlibgfortran\n\t* Makefile.am: Add rand.c and etime.c\n\t* Makefile.in: Regenerated.\n\t* aclocal.in: Regenerated.\n\t* cpu_time.c (second_sub, second): New functions.\n\t* rand.c (irand, rand, srand): New file.\n\t* etime.c (etime_sub, etime): New file.\n\nFrom-SVN: r83034", "tree": {"sha": "a1452828cb51b5aff27e540fe28a2545fc15adb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1452828cb51b5aff27e540fe28a2545fc15adb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd749490845f2edc7de74dca4b29fd7d7698dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd749490845f2edc7de74dca4b29fd7d7698dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd749490845f2edc7de74dca4b29fd7d7698dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd749490845f2edc7de74dca4b29fd7d7698dff/comments", "author": null, "committer": null, "parents": [{"sha": "b08eae928826bd8474cd30a33949af242dfc400c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08eae928826bd8474cd30a33949af242dfc400c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b08eae928826bd8474cd30a33949af242dfc400c"}], "stats": {"total": 760, "additions": 756, "deletions": 4}, "files": [{"sha": "e1cf74e951820bfbf4a5c71757180aa44e20b173", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -1,3 +1,16 @@\n+2004-06-12  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* check.c (gfc_check_second_sub, gfc_check_irand, gfc_check_rand\n+\tgfc_check_srand, gfc_check_etime, gfc_check_etime_sub): New functions.\n+\t* gfortran.h (gfc_generic_isym_id): New symbols GFC_ISYM_ETIME,\n+\tGFC_ISYM_IRAND, GFC_ISYM_RAND, GFC_ISYM_SECOND.\n+\t* trans-intrinsic.c:  Use symbols.\n+\t* intrinsic.c (add_sym_2s): New function.\n+\t* intrinsic.c: Add etime, dtime, irand, rand, second, srand.\n+\t* intrinsic.h: Function prototypes.\n+\t* iresolve.c (gfc_resolve_etime_sub, gfc_resolve_second_sub \n+\tgfc_resolve_srand):  New functions.\n+\n 2004-06-12  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/14957"}, {"sha": "cbf3d9dba7ab8e74c755459355e41b0b046ec4ce", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -1877,6 +1877,23 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n   return SUCCESS;\n }\n \n+try\n+gfc_check_second_sub (gfc_expr * time)\n+{\n+\n+  if (scalar_check (time, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (time, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(time, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n /* The arguments of SYSTEM_CLOCK are scalar, integer variables.  Note,\n    count, count_rate, and count_max are all optional arguments */\n \n@@ -1935,3 +1952,99 @@ gfc_check_system_clock (gfc_expr * count, gfc_expr * count_rate,\n \n     return SUCCESS;\n }\n+\n+try\n+gfc_check_irand (gfc_expr * x)\n+{\n+  if (scalar_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (x, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(x, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+try\n+gfc_check_rand (gfc_expr * x)\n+{\n+  if (scalar_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (x, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(x, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+try\n+gfc_check_srand (gfc_expr * x)\n+{\n+  if (scalar_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (x, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(x, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+try\n+gfc_check_etime (gfc_expr * x)\n+{\n+  if (array_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (rank_check (x, 0, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (variable_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (x, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(x, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+try\n+gfc_check_etime_sub (gfc_expr * values, gfc_expr * time)\n+{\n+  if (array_check (values, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (rank_check (values, 0, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (variable_check (values, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (values, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(values, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (time, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (time, 1, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(time, 1, 4) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}"}, {"sha": "a533b1c348e4c3c37c7f82daad8f2b3ed8834860", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -301,6 +301,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_DOT_PRODUCT,\n   GFC_ISYM_DPROD,\n   GFC_ISYM_EOSHIFT,\n+  GFC_ISYM_ETIME,\n   GFC_ISYM_EXP,\n   GFC_ISYM_EXPONENT,\n   GFC_ISYM_FLOOR,\n@@ -315,6 +316,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_INDEX,\n   GFC_ISYM_INT,\n   GFC_ISYM_IOR,\n+  GFC_ISYM_IRAND,\n   GFC_ISYM_ISHFT,\n   GFC_ISYM_ISHFTC,\n   GFC_ISYM_LBOUND,\n@@ -343,12 +345,14 @@ enum gfc_generic_isym_id\n   GFC_ISYM_PACK,\n   GFC_ISYM_PRESENT,\n   GFC_ISYM_PRODUCT,\n+  GFC_ISYM_RAND,\n   GFC_ISYM_REAL,\n   GFC_ISYM_REPEAT,\n   GFC_ISYM_RESHAPE,\n   GFC_ISYM_RRSPACING,\n   GFC_ISYM_SCALE,\n   GFC_ISYM_SCAN,\n+  GFC_ISYM_SECOND,\n   GFC_ISYM_SET_EXPONENT,\n   GFC_ISYM_SHAPE,\n   GFC_ISYM_SI_KIND,"}, {"sha": "7247d892ebe138b24f1497abf538bffeaf7d12bc", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -429,6 +429,32 @@ static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n+/* Add the name of an intrinsic subroutine with two arguments to the list\n+   of intrinsic names. */\n+\n+static void add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n+\t\t       int kind,\n+\t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t       void (*resolve)(gfc_code *),\n+\t\t       const char* a1, bt type1, int kind1, int optional1,\n+\t\t       const char* a2, bt type2, int kind2, int optional2\n+\t\t       ) {\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f3 = check;\n+  sf.f3 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+\t   a1, type1, kind1, optional1,\n+\t   a2, type2, kind2, optional2,\n+\t   (void*)0);\n+}\n+\n+\n static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -989,6 +1015,16 @@ add_functions (void)\n \n   make_generic (\"epsilon\", GFC_ISYM_NONE);\n \n+  /* G77 compatibility */\n+  add_sym_1 (\"etime\", 0, 1, BT_REAL, 4,\n+\t     gfc_check_etime, NULL, NULL,\n+\t     x, BT_REAL, 4, 0);\n+\n+  make_alias (\"dtime\");\n+\n+  make_generic (\"etime\", GFC_ISYM_ETIME);\n+\n+\n   add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_REAL, dr, 0);\n \n@@ -1098,6 +1134,13 @@ add_functions (void)\n \n   make_generic (\"ior\", GFC_ISYM_IOR);\n \n+  /* The following function is for G77 compatibility.  */\n+  add_sym_1 (\"irand\", 0, 1, BT_INTEGER, 4,\n+             gfc_check_irand, NULL, NULL,\n+             i, BT_INTEGER, 4, 0);\n+\n+  make_generic (\"irand\", GFC_ISYM_IRAND);\n+\n   add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, 0, sh, BT_INTEGER, di, 0);\n@@ -1386,6 +1429,13 @@ add_functions (void)\n \n   make_generic (\"radix\", GFC_ISYM_NONE);\n \n+  /* The following function is for G77 compatibility.  */\n+  add_sym_1 (\"rand\", 0, 1, BT_REAL, 4,\n+             gfc_check_rand, NULL, NULL,\n+             i, BT_INTEGER, 4, 0);\n+\n+  make_generic (\"rand\", GFC_ISYM_RAND);\n+\n   add_sym_1 (\"range\", 0, 1, BT_INTEGER, di,\n \t     gfc_check_range, gfc_simplify_range, NULL,\n \t     x, BT_REAL, dr, 0);\n@@ -1436,6 +1486,11 @@ add_functions (void)\n \n   make_generic (\"scan\", GFC_ISYM_SCAN);\n \n+  /* Added for G77 compatibility garbage. */\n+  add_sym_0 (\"second\", 0, 1, BT_REAL, 4, NULL, NULL, NULL);\n+\n+  make_generic (\"second\", GFC_ISYM_SECOND);\n+\n   add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,\n \t     NULL, gfc_simplify_selected_int_kind, NULL,\n \t     r, BT_INTEGER, di, 0);\n@@ -1606,6 +1661,8 @@ add_functions (void)\n \t     bck, BT_LOGICAL, dl, 1);\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY);\n+\n+\n }\n \n \n@@ -1634,11 +1691,25 @@ add_subroutines (void)\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n \t      tm, BT_REAL, dr, 0);\n \n+  /* More G77 compatibility garbage. */\n+  add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0,\n+\t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n+\t      tm, BT_REAL, dr, 0);\n+\n   add_sym_4 (\"date_and_time\", 0, 1, BT_UNKNOWN, 0,\n \t     gfc_check_date_and_time, NULL, NULL,\n \t     dt, BT_CHARACTER, dc, 1, tm, BT_CHARACTER, dc, 1,\n \t     zn, BT_CHARACTER, dc, 1, vl, BT_INTEGER, di, 1);\n \n+  /* More G77 compatibility garbage. */\n+  add_sym_2s (\"etime\", 0, 1, BT_UNKNOWN, 0,\n+\t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n+\t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n+\n+  add_sym_2s (\"dtime\", 0, 1, BT_UNKNOWN, 0,\n+\t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n+\t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n+\n   add_sym_2 (\"getarg\", 0, 1, BT_UNKNOWN, 0,\n \t     NULL, NULL, NULL,\n \t     c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n@@ -1659,6 +1730,11 @@ add_subroutines (void)\n \t     sz, BT_INTEGER, di, 1, pt, BT_INTEGER, di, 1,\n \t     gt, BT_INTEGER, di, 1);\n \n+  /* More G77 compatibility garbage. */\n+  add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di,\n+             gfc_check_srand, NULL, gfc_resolve_srand,\n+             c, BT_INTEGER, 4, 0);\n+\n   add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0,\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,"}, {"sha": "ab261431f06e45ea5994f0d5b172fd1899605a44", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -1,6 +1,6 @@\n /* Header file for intrinsics check, resolve and simplify function\n    prototypes.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n This file is part of GCC.\n@@ -44,6 +44,8 @@ try gfc_check_dble (gfc_expr *);\n try gfc_check_digits (gfc_expr *);\n try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_etime (gfc_expr *);\n+try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_huge (gfc_expr *);\n try gfc_check_i (gfc_expr *);\n try gfc_check_iand (gfc_expr *, gfc_expr *);\n@@ -55,6 +57,7 @@ try gfc_check_ieor (gfc_expr *, gfc_expr *);\n try gfc_check_index (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_int (gfc_expr *, gfc_expr *);\n try gfc_check_ior (gfc_expr *, gfc_expr *);\n+try gfc_check_irand (gfc_expr *);\n try gfc_check_ishft (gfc_expr *, gfc_expr *);\n try gfc_check_ishftc (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_kind (gfc_expr *);\n@@ -75,18 +78,21 @@ try gfc_check_precision (gfc_expr *);\n try gfc_check_present (gfc_expr *);\n try gfc_check_product (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_radix (gfc_expr *);\n+try gfc_check_rand (gfc_expr *);\n try gfc_check_range (gfc_expr *);\n try gfc_check_real (gfc_expr *, gfc_expr *);\n try gfc_check_repeat (gfc_expr *, gfc_expr *);\n try gfc_check_reshape (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_scale (gfc_expr *, gfc_expr *);\n try gfc_check_scan (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_second_sub (gfc_expr *);\n try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *);\n try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n try gfc_check_shape (gfc_expr *);\n try gfc_check_size (gfc_expr *, gfc_expr *);\n try gfc_check_sign (gfc_expr *, gfc_expr *);\n try gfc_check_spread (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_srand (gfc_expr *);\n try gfc_check_sum (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_transfer (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_transpose (gfc_expr *);\n@@ -240,6 +246,7 @@ void gfc_resolve_dot_product (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dprod (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t  gfc_expr *);\n+void gfc_resolve_etime_sub (gfc_code *);\n void gfc_resolve_exp (gfc_expr *, gfc_expr *);\n void gfc_resolve_exponent (gfc_expr *, gfc_expr *);\n void gfc_resolve_floor (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -283,6 +290,7 @@ void gfc_resolve_reshape (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n void gfc_resolve_rrspacing (gfc_expr *, gfc_expr *);\n void gfc_resolve_scale (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_second_sub (gfc_code *);\n void gfc_resolve_set_exponent (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_shape (gfc_expr *, gfc_expr *);\n void gfc_resolve_sign (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -291,6 +299,7 @@ void gfc_resolve_sinh (gfc_expr *, gfc_expr *);\n void gfc_resolve_spacing (gfc_expr *, gfc_expr *);\n void gfc_resolve_spread (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_sqrt (gfc_expr *, gfc_expr *);\n+void gfc_resolve_srand (gfc_code *);\n void gfc_resolve_sum (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_tan (gfc_expr *, gfc_expr *);\n void gfc_resolve_tanh (gfc_expr *, gfc_expr *);"}, {"sha": "2d8fffd4558ce07738689a5c0664b554291d221d", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -1369,6 +1369,42 @@ gfc_resolve_random_number (gfc_code * c ATTRIBUTE_UNUSED)\n     name = gfc_get_string (PREFIX(\"arandom_r%d\"), kind);\n   \n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+\n+}\n+\n+\n+/* G77 compatibility subroutines etime() and dtime().  */\n+\n+void\n+gfc_resolve_etime_sub (gfc_code * c)\n+{\n+  const char *name;\n+\n+  name = gfc_get_string (PREFIX(\"etime_sub\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n+/* G77 compatibility subroutine second().  */\n+\n+void\n+gfc_resolve_second_sub (gfc_code * c)\n+{\n+  const char *name;\n+\n+  name = gfc_get_string (PREFIX(\"second_sub\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n+/* G77 compatibility function srand().  */\n+\n+void\n+gfc_resolve_srand (gfc_code * c)\n+{\n+  const char *name;\n+  name = gfc_get_string (PREFIX(\"srand\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n \n@@ -1393,7 +1429,6 @@ gfc_resolve_system_clock (gfc_code * c)\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n-\n void\n gfc_iresolve_init_1 (void)\n {"}, {"sha": "e2c1b7e1529f45e7bf3c2df59dcc62005878b79c", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -2867,6 +2867,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n \n     case GFC_ISYM_DOT_PRODUCT:\n     case GFC_ISYM_MATMUL:\n+    case GFC_ISYM_IRAND:\n+    case GFC_ISYM_RAND:\n+    case GFC_ISYM_ETIME:\n+    case GFC_ISYM_SECOND:\n       gfc_conv_intrinsic_funcall (se, expr);\n       break;\n "}, {"sha": "2865a4342b21391c40efeede609d29129db140d0", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -1,3 +1,12 @@\n+2004-06-12  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* Makefile.am: Add rand.c and etime.c\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.in: Regenerated.\n+\t* cpu_time.c (second_sub, second): New functions.\n+\t* rand.c (irand, rand, srand): New file.\n+\t* etime.c (etime_sub, etime): New file.\n+\n 2004-06-12  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \t    Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "a395cdddf7b13f45ccc040d7c497b2ba72a373bb", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -42,11 +42,13 @@ intrinsics/cshift0.c \\\n intrinsics/date_and_time.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n+intrinsics/etime.c \\\n intrinsics/ishftc.c \\\n intrinsics/pack_generic.c \\\n intrinsics/size.c \\\n intrinsics/spread_generic.c \\\n intrinsics/string_intrinsics.c \\\n+intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\"}, {"sha": "01399c917b7579caa1ccd9da3a05d95f224eb017", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -119,9 +119,9 @@ am__objects_32 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo rewind.lo transfer.lo \\\n \tunit.lo unix.lo write.lo\n am__objects_33 = associated.lo abort.lo args.lo cpu_time.lo cshift0.lo \\\n-\tdate_and_time.lo eoshift0.lo eoshift2.lo ishftc.lo \\\n+\tdate_and_time.lo eoshift0.lo eoshift2.lo etime.lo ishftc.lo \\\n \tpack_generic.lo size.lo spread_generic.lo string_intrinsics.lo \\\n-\trandom.lo reshape_generic.lo reshape_packed.lo \\\n+\trand.lo random.lo reshape_generic.lo reshape_packed.lo \\\n \tselected_kind.lo system_clock.lo transpose_generic.lo \\\n \tunpack_generic.lo in_pack_generic.lo in_unpack_generic.lo\n am__objects_34 =\n@@ -314,11 +314,13 @@ intrinsics/cshift0.c \\\n intrinsics/date_and_time.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n+intrinsics/etime.c \\\n intrinsics/ishftc.c \\\n intrinsics/pack_generic.c \\\n intrinsics/size.c \\\n intrinsics/spread_generic.c \\\n intrinsics/string_intrinsics.c \\\n+intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n@@ -2029,6 +2031,15 @@ eoshift2.obj: intrinsics/eoshift2.c\n eoshift2.lo: intrinsics/eoshift2.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o eoshift2.lo `test -f 'intrinsics/eoshift2.c' || echo '$(srcdir)/'`intrinsics/eoshift2.c\n \n+etime.o: intrinsics/etime.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o etime.o `test -f 'intrinsics/etime.c' || echo '$(srcdir)/'`intrinsics/etime.c\n+\n+etime.obj: intrinsics/etime.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o etime.obj `if test -f 'intrinsics/etime.c'; then $(CYGPATH_W) 'intrinsics/etime.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/etime.c'; fi`\n+\n+etime.lo: intrinsics/etime.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o etime.lo `test -f 'intrinsics/etime.c' || echo '$(srcdir)/'`intrinsics/etime.c\n+\n ishftc.o: intrinsics/ishftc.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ishftc.o `test -f 'intrinsics/ishftc.c' || echo '$(srcdir)/'`intrinsics/ishftc.c\n \n@@ -2074,6 +2085,15 @@ string_intrinsics.obj: intrinsics/string_intrinsics.c\n string_intrinsics.lo: intrinsics/string_intrinsics.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o string_intrinsics.lo `test -f 'intrinsics/string_intrinsics.c' || echo '$(srcdir)/'`intrinsics/string_intrinsics.c\n \n+rand.o: intrinsics/rand.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rand.o `test -f 'intrinsics/rand.c' || echo '$(srcdir)/'`intrinsics/rand.c\n+\n+rand.obj: intrinsics/rand.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rand.obj `if test -f 'intrinsics/rand.c'; then $(CYGPATH_W) 'intrinsics/rand.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/rand.c'; fi`\n+\n+rand.lo: intrinsics/rand.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rand.lo `test -f 'intrinsics/rand.c' || echo '$(srcdir)/'`intrinsics/rand.c\n+\n random.o: intrinsics/random.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o random.o `test -f 'intrinsics/random.c' || echo '$(srcdir)/'`intrinsics/random.c\n "}, {"sha": "887debc3e53a2ef2758b3d31c78e75d56abeda2d", "filename": "libgfortran/intrinsics/cpu_time.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fcpu_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fcpu_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcpu_time.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -114,3 +114,16 @@ void prefix(cpu_time_##KIND) (GFC_REAL_##KIND *__time)\t\t\\\n CPU_TIME(4)\n CPU_TIME(8)\n \n+void\n+prefix(second_sub) (GFC_REAL_4 *s)\n+{\n+  prefix(cpu_time_4)(s);\n+}\n+\n+GFC_REAL_4\n+prefix(second) (void)\n+{\n+  GFC_REAL_4 s;\n+  prefix(cpu_time_4)(&s);\n+  return s;\n+}"}, {"sha": "6a09b2aeba25fa8fa72e0cb12994b7d30f5e5435", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -0,0 +1,280 @@\n+/* Implementation of the DATE_AND_TIME intrinsic.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+   Contributed by Steven Bosscher.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#include <string.h>\n+#include <assert.h>\n+#include \"libgfortran.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#undef HAVE_NO_DATE_TIME\n+#if TIME_WITH_SYS_TIME\n+#  include <sys/time.h>\n+#  include <time.h>\n+#else\n+#  if HAVE_SYS_TIME_H\n+#    include <sys/time.h>\n+#  else\n+#    ifdef HAVE_TIME_H\n+#      include <time.h>\n+#    else\n+#      define HAVE_NO_DATE_TIME\n+#    endif  /* HAVE_TIME_H  */\n+#  endif  /* HAVE_SYS_TIME_H  */\n+#endif  /* TIME_WITH_SYS_TIME  */\n+\n+#ifndef abs\n+#define abs(x) ((x)>=0 ? (x) : -(x))\n+#endif\n+\n+/* DATE_AND_TIME ([DATE, TIME, ZONE, VALUES])\n+\n+   Description: Returns data on the real-time clock and date in a form\n+   compatible with the representations defined in ISO 8601:1988.\n+\n+   Class: Non-elemental subroutine.\n+\n+   Arguments:\n+\n+   DATE (optional) shall be scalar and of type default character, and\n+   shall be of length at least 8 in order to contain the complete\n+   value. It is an INTENT (OUT) argument. Its leftmost 8 characters\n+   are assigned a value of the form CCYYMMDD, where CC is the century,\n+   YY the year within the century, MM the month within the year, and\n+   DD the day within the month. If there is no date available, they\n+   are assigned blanks.\n+\n+   TIME (optional) shall be scalar and of type default character, and\n+   shall be of length at least 10 in order to contain the complete\n+   value. It is an INTENT (OUT) argument. Its leftmost 10 characters\n+   are assigned a value of the form hhmmss.sss, where hh is the hour\n+   of the day, mm is the minutes of the hour, and ss.sss is the\n+   seconds and milliseconds of the minute. If there is no clock\n+   available, they are assigned blanks.\n+\n+   ZONE (optional) shall be scalar and of type default character, and\n+   shall be of length at least 5 in order to contain the complete\n+   value. It is an INTENT (OUT) argument. Its leftmost 5 characters\n+   are assigned a value of the form \u00b1hhmm, where hh and mm are the\n+   time difference with respect to Coordinated Universal Time (UTC) in\n+   hours and parts of an hour expressed in minutes, respectively. If\n+   there is no clock available, they are assigned blanks.\n+\n+   VALUES (optional) shall be of type default integer and of rank\n+   one. It is an INTENT (OUT) argument. Its size shall be at least\n+   8. The values returned in VALUES are as follows:\n+\n+      VALUES (1) the year (for example, 2003), or HUGE (0) if there is\n+      no date available;\n+\n+      VALUES (2) the month of the year, or HUGE (0) if there\n+      is no date available;\n+\n+      VALUES (3) the day of the month, or HUGE (0) if there is no date\n+      available;\n+\n+      VALUES (4) the time difference with respect to Coordinated\n+      Universal Time (UTC) in minutes, or HUGE (0) if this information\n+      is not available;\n+\n+      VALUES (5) the hour of the day, in the range of 0 to 23, or HUGE\n+      (0) if there is no clock;\n+\n+      VALUES (6) the minutes of the hour, in the range 0 to 59, or\n+      HUGE (0) if there is no clock;\n+\n+      VALUES (7) the seconds of the minute, in the range 0 to 60, or\n+      HUGE (0) if there is no clock;\n+\n+      VALUES (8) the milliseconds of the second, in the range 0 to\n+      999, or HUGE (0) if there is no clock.\n+\n+   NULL pointer represent missing OPTIONAL arguments.  All arguments\n+   have INTENT(OUT).  Because of the -i8 option, we must implement\n+   VALUES for INTEGER(kind=4) and INTEGER(kind=8).\n+\n+   Based on libU77's date_time_.c.\n+\n+   TODO :\n+   - Check year boundaries.\n+   - There is no STDC/POSIX way to get VALUES(8).  A GNUish way may\n+     be to use ftime.\n+*/\n+\n+void\n+date_and_time (char *__date,\n+\t       char *__time,\n+\t       char *__zone,\n+\t       gfc_array_i4 *__values,\n+\t       GFC_INTEGER_4 __date_len,\n+\t       GFC_INTEGER_4 __time_len,\n+\t       GFC_INTEGER_4 __zone_len)\n+{\n+#define DATE_LEN 8\n+#define TIME_LEN 10   \n+#define ZONE_LEN 5\n+#define VALUES_SIZE 8\n+  char date[DATE_LEN + 1];\n+  char timec[TIME_LEN + 1];\n+  char zone[ZONE_LEN + 1];\n+  GFC_INTEGER_4 values[VALUES_SIZE];\n+\n+#ifndef HAVE_NO_DATE_TIME\n+  time_t lt = time (NULL);\n+  struct tm local_time = *localtime (&lt);\n+  struct tm UTC_time = *gmtime (&lt);\n+\n+  /* All arguments can be derived from VALUES.  */\n+  values[0] = 1900 + local_time.tm_year;\n+  values[1] = 1 + local_time.tm_mon;\n+  values[2] = local_time.tm_mday;\n+  values[3] = (local_time.tm_min - UTC_time.tm_min +\n+\t       60 * (local_time.tm_hour - UTC_time.tm_hour +\n+\t\t     24 * (local_time.tm_yday - UTC_time.tm_yday)));\n+  values[4] = local_time.tm_hour;\n+  values[5] = local_time.tm_min;\n+  values[6] = local_time.tm_sec;\n+#if HAVE_GETTIMEOFDAY\n+    {\n+      struct timeval tp;\n+#  if GETTIMEOFDAY_ONE_ARGUMENT\n+      if (!gettimeofday (&tp))\n+#  else\n+#    if HAVE_STRUCT_TIMEZONE\n+      struct timezone tzp;\n+\n+      /* Some systems such as HP-UX, do have struct timezone, but\n+\t gettimeofday takes void* as the 2nd arg.  However, the\n+\t effect of passing anything other than a null pointer is\n+\t unspecified on HPUX.  Configure checks if gettimeofday\n+\t actually fails with a non-NULL arg and pretends that\n+\t struct timezone is missing if it does fail.  */\n+      if (!gettimeofday (&tp, &tzp))\n+#    else\n+      if (!gettimeofday (&tp, (void *) 0))\n+#    endif /* HAVE_STRUCT_TIMEZONE  */\n+#  endif /* GETTIMEOFDAY_ONE_ARGUMENT  */\n+\tvalues[7] = tp.tv_usec / 1000;\n+    }\n+#else\n+   values[7] = GFC_INTEGER_4_HUGE;\n+#endif /* HAVE_GETTIMEOFDAY */\n+\n+  if (__date)\n+    {\n+      snprintf (date, DATE_LEN + 1, \"%04d%02d%02d\",\n+\t\tvalues[0], values[1], values[2]);\n+    }\n+\n+  if (__time)\n+    {\n+      snprintf (timec, TIME_LEN + 1, \"%02d%02d%02d.%03d\",\n+\t\tvalues[4], values[5], values[6], values[7]);\n+    }\n+\n+  if (__zone)\n+    {\n+      snprintf (zone, ZONE_LEN + 1, \"%+03d%02d\",\n+\t\tvalues[3] / 60, abs (values[3] % 60));\n+    }\n+#else /* if defined HAVE_NO_DATE_TIME  */\n+  /* We really have *nothing* to return, so return blanks and HUGE(0).  */\n+    {\n+      int i;\n+\n+      memset (date, ' ', DATE_LEN);\n+      date[DATE_LEN] = '\\0';\n+\n+      memset (timec, ' ', TIME_LEN);\n+      time[TIME_LEN] = '\\0';\n+\n+      memset (zone, ' ', ZONE_LEN);\n+      zone[ZONE_LEN] = '\\0';\n+\n+      for (i = 0; i < VALUES_SIZE; i++)\n+        values[i] = GFC_INTEGER_4_HUGE;\n+    }\n+#endif  /* HAVE_NO_DATE_TIME  */\n+\n+  /* Copy the values into the arguments.  */\n+  if (__values)\n+    {\n+      int i;\n+      size_t len, delta, elt_size;\n+\n+      elt_size = GFC_DESCRIPTOR_SIZE (__values);\n+      len = __values->dim[0].ubound + 1 - __values->dim[0].lbound;\n+      delta = __values->dim[0].stride;\n+      if (delta == 0)\n+\tdelta = 1;\n+\n+      assert (len >= VALUES_SIZE);\n+      /* Cope with different type kinds.  */\n+      if (elt_size == 4)\n+        {\n+\t  GFC_INTEGER_4 *vptr4 = __values->data;\n+\n+\t  for (i = 0; i < VALUES_SIZE; i++, vptr4 += delta)\n+\t    {\n+\t      *vptr4 = values[i];\n+\t    }\n+\t}\n+      else if (elt_size == 8)\n+        {\n+\t  GFC_INTEGER_8 *vptr8 = (GFC_INTEGER_8 *)__values->data;\n+\n+\t  for (i = 0; i < VALUES_SIZE; i++, vptr8 += delta)\n+\t    {\n+\t      if (values[i] == GFC_INTEGER_4_HUGE)\n+\t\t*vptr8 = GFC_INTEGER_8_HUGE;\n+\t      else\n+\t\t*vptr8 = values[i];\n+\t    }\n+\t}\n+      else \n+\tabort ();\n+    }\n+\n+  if (__zone)\n+    {\n+      assert (__zone_len >= ZONE_LEN);\n+      fstrcpy (__zone, ZONE_LEN, zone, ZONE_LEN);\n+    }\n+\n+  if (__time)\n+    {\n+      assert (__time_len >= TIME_LEN);\n+      fstrcpy (__time, TIME_LEN, timec, TIME_LEN);\n+    }\n+\n+  if (__date)\n+    {\n+      assert (__date_len >= DATE_LEN);\n+      fstrcpy (__date, DATE_LEN, date, DATE_LEN);\n+    }\n+#undef DATE_LEN\n+#undef TIME_LEN   \n+#undef ZONE_LEN\n+#undef VALUES_SIZE\n+}"}, {"sha": "89ee539f0642e53a176d61a0f9d7b9e35ddfcc01", "filename": "libgfortran/intrinsics/etime.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fetime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Fetime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fetime.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -0,0 +1,81 @@\n+/* Implementation of the ETIME intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#include \"libgfortran.h\"\n+\n+#include <stdio.h>\n+\n+#if defined (HAVE_SYS_TIME_H) && defined (HAVE_SYS_RESOURCE_H)\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+#endif\n+\n+void\n+prefix(etime_sub) (gfc_array_r4 *t, GFC_REAL_4 *result)\n+{\n+  GFC_REAL_4 tu, ts, tt, *tp;\n+  index_type dim;\n+\n+#if defined(HAVE_SYS_TIME_H) && defined(HAVE_SYS_RESOURCE_H)\n+  struct rusage rt;\n+\n+  if (getrusage(RUSAGE_SELF, &rt) == 0)\n+    {\n+      tu = (GFC_REAL_4)(rt.ru_utime.tv_sec + 1.e-6 * rt.ru_utime.tv_usec);\n+      ts = (GFC_REAL_4)(rt.ru_stime.tv_sec + 1.e-6 * rt.ru_stime.tv_usec);\n+      tt = tu + ts;\n+    }\n+  else\n+    {\n+      tu = -1.;\n+      ts = -1.;\n+      tt = -1.;\n+    }\n+#else\n+  tu = -1.;\n+  ts = -1.;\n+  tt = -1.;\n+#endif\n+\n+  dim = GFC_DESCRIPTOR_RANK (t);\n+  if (dim != 1)\n+    runtime_error (\"Array rank of TARRAY is not 1.\");\n+\n+  if (t->dim[0].stride == 0)\n+    t->dim[0].stride = 1;\n+\n+  tp = t->data;\n+\n+  *tp = tu;\n+  tp += t->dim[0].stride;\n+  *tp = ts;\n+  *result = tt;\n+}\n+\n+GFC_REAL_4\n+prefix(etime) (gfc_array_r4 *t)\n+{\n+  GFC_REAL_4 val;\n+  prefix(etime_sub) (t, &val);\n+  return val;\n+}"}, {"sha": "c4782fcdf6165fc6db7821cd5a70754a62784ca4", "filename": "libgfortran/intrinsics/rand.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Frand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd749490845f2edc7de74dca4b29fd7d7698dff/libgfortran%2Fintrinsics%2Frand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frand.c?ref=2bd749490845f2edc7de74dca4b29fd7d7698dff", "patch": "@@ -0,0 +1,93 @@\n+/* Implementation of the IRAND, RAND, and SRAND intrinsics.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Simple multiplicative congruent algorithm.\n+   The period of this generator is approximately 2^31-1, which means that\n+   it should not be used for anything serious.  The implementation here\n+   is based of an algorithm from  S.K. Park and K.W. Miller, Comm. ACM,\n+   31, 1192-1201 (1988).  It is also provided solely for compatibility \n+   with G77.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#define GFC_RAND_A\t16807\n+#define GFC_RAND_M\t2147483647\n+#define GFC_RAND_M1\t(GFC_RAND_M - 1)\n+\n+static GFC_UINTEGER_8 rand_seed = 1;\n+\n+\n+/* Set the seed of the irand generator.  Note 0 is a bad seed.  */\n+\n+void\n+prefix(srand) (GFC_INTEGER_4 *i)\n+{\n+  rand_seed = (GFC_UINTEGER_8) (*i != 0) ? *i : 123459876;\n+}\n+\n+\n+/* Return an INTEGER in the range [1,GFC_RAND_M-1].  */\n+\n+GFC_INTEGER_4\n+prefix(irand) (GFC_INTEGER_4 *i)\n+{\n+  \n+  GFC_INTEGER_4 j = *i;\n+\n+  switch (j)\n+  {\n+    /* Return the next RN. */\n+    case 0:\n+      break;\n+\n+    /* Reset the RN sequence to system-dependent sequence and return the\n+       first value.  */\n+    case 1:\n+      j = 0;\n+      prefix(srand) (&j);\n+      break;\n+    \n+    /* Seed the RN sequence with j and return the first value.  */\n+    default:\n+      prefix(srand) (&j);\n+   }\n+\n+   rand_seed = GFC_RAND_A * rand_seed % GFC_RAND_M;\n+\n+   return (GFC_INTEGER_4) rand_seed;\n+}\n+\n+\n+/*  Return a REAL in the range [0,1).  Cast to double to use the full\n+    range of pseudo-random numbers returned by irand().  */\n+\n+GFC_REAL_4\n+prefix(rand) (GFC_INTEGER_4 *i)\n+{\n+  GFC_REAL_4 val;\n+\n+  do \n+    val = (GFC_REAL_4)((double)(prefix(irand) (i) - 1) / (double) GFC_RAND_M1);\n+  while (val == 1.0);\n+\n+  return val;\n+}"}]}