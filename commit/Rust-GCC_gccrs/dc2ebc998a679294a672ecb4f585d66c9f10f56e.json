{"sha": "dc2ebc998a679294a672ecb4f585d66c9f10f56e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyZWJjOTk4YTY3OTI5NGE2NzJlY2I0ZjU4NWQ2NmM5ZjEwZjU2ZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2018-05-18T22:21:20Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2018-05-18T22:21:20Z"}, "message": "Aliasing 'this' in a C++ constructor\n\n2018-05-18  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/82899\ngcc/\n\t* tree-ssa-structalias.c (create_variable_info_for_1): Extra argument.\n\t(intra_create_variable_infos): Handle C++ constructors.\n\ngcc/testsuite/\n\t* g++.dg/pr82899.C: New testcase.\n\nFrom-SVN: r260383", "tree": {"sha": "ac4cbbf954c3597164ef4be19650cadd4f582b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac4cbbf954c3597164ef4be19650cadd4f582b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc2ebc998a679294a672ecb4f585d66c9f10f56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2ebc998a679294a672ecb4f585d66c9f10f56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2ebc998a679294a672ecb4f585d66c9f10f56e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2ebc998a679294a672ecb4f585d66c9f10f56e/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b0cd47a1caedcd752884b1a785b7fc975530d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0cd47a1caedcd752884b1a785b7fc975530d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0cd47a1caedcd752884b1a785b7fc975530d18"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "581f05076bc4003959e0b7b0d5959e7305c95ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc2ebc998a679294a672ecb4f585d66c9f10f56e", "patch": "@@ -1,3 +1,9 @@\n+2018-05-18  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/82899\n+\t* tree-ssa-structalias.c (create_variable_info_for_1): Extra argument.\n+\t(intra_create_variable_infos): Handle C++ constructors.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \t* passes.def: Remove a redundant pass."}, {"sha": "76e016990078946a7cd34c60d4851ee82d732afd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc2ebc998a679294a672ecb4f585d66c9f10f56e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-18  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/82899\n+\t* g++.dg/pr82899.C: New testcase.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/pr68766.c: Change pruned output."}, {"sha": "0dee25f36e4547fddc1f17dcdcbc8bb74131fd36", "filename": "gcc/testsuite/g++.dg/pr82899.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82899.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82899.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82899.C?ref=dc2ebc998a679294a672ecb4f585d66c9f10f56e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+struct A {\n+  int i;\n+  A(A&);\n+};\n+int X;\n+A::A(A&a):i(42){\n+  a.i=0;\n+  X=i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"X = 42;\" \"optimized\" } } */"}, {"sha": "8fb13a0cdf823615ab8c9ddc854f53ff62b2e18a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2ebc998a679294a672ecb4f585d66c9f10f56e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=dc2ebc998a679294a672ecb4f585d66c9f10f56e", "patch": "@@ -5935,11 +5935,14 @@ check_for_overlaps (vec<fieldoff_s> fieldstack)\n    This will also create any varinfo structures necessary for fields\n    of DECL.  DECL is a function parameter if HANDLE_PARAM is set.\n    HANDLED_STRUCT_TYPE is used to register struct types reached by following\n-   restrict pointers.  This is needed to prevent infinite recursion.  */\n+   restrict pointers.  This is needed to prevent infinite recursion.\n+   If ADD_RESTRICT, pretend that the pointer NAME is restrict even if DECL\n+   does not advertise it.  */\n \n static varinfo_t\n create_variable_info_for_1 (tree decl, const char *name, bool add_id,\n-\t\t\t    bool handle_param, bitmap handled_struct_type)\n+\t\t\t    bool handle_param, bitmap handled_struct_type,\n+\t\t\t    bool add_restrict = false)\n {\n   varinfo_t vi, newvi;\n   tree decl_type = TREE_TYPE (decl);\n@@ -6013,7 +6016,7 @@ create_variable_info_for_1 (tree decl, const char *name, bool add_id,\n       vi->size = vi->fullsize;\n       vi->is_full_var = true;\n       if (POINTER_TYPE_P (decl_type)\n-\t  && TYPE_RESTRICT (decl_type))\n+\t  && (TYPE_RESTRICT (decl_type) || add_restrict))\n \tvi->only_restrict_pointers = 1;\n       if (vi->only_restrict_pointers\n \t  && !type_contains_placeholder_p (TREE_TYPE (decl_type))\n@@ -6242,6 +6245,7 @@ intra_create_variable_infos (struct function *fn)\n {\n   tree t;\n   bitmap handled_struct_type = NULL;\n+  bool this_parm_in_ctor = DECL_CXX_CONSTRUCTOR_P (fn->decl);\n \n   /* For each incoming pointer argument arg, create the constraint ARG\n      = NONLOCAL or a dummy variable if it is a restrict qualified\n@@ -6253,10 +6257,12 @@ intra_create_variable_infos (struct function *fn)\n \n       varinfo_t p\n \t= create_variable_info_for_1 (t, alias_get_name (t), false, true,\n-\t\t\t\t      handled_struct_type);\n+\t\t\t\t      handled_struct_type, this_parm_in_ctor);\n       insert_vi_for_tree (t, p);\n \n       make_param_constraints (p);\n+\n+      this_parm_in_ctor = false;\n     }\n \n   if (handled_struct_type != NULL)"}]}