{"sha": "224bb3734dd32877806ad33b28e39a70b8cb3c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0YmIzNzM0ZGQzMjg3NzgwNmFkMzNiMjhlMzlhNzBiOGNiM2M1Yg==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1999-06-21T05:11:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-06-21T05:11:15Z"}, "message": "c-pragma.c (push_alignment): Don't ignore alignments greater than 4 bytes.\n\n        * c-pragma.c (push_alignment): Don't ignore alignments greater than\n        4 bytes.\n        (insert_pack_attributes): Take into account member natural\n        alignment.\n\nFrom-SVN: r27648", "tree": {"sha": "ee92f4ae95adf9823b844a162e6c97b3635091b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee92f4ae95adf9823b844a162e6c97b3635091b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/224bb3734dd32877806ad33b28e39a70b8cb3c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224bb3734dd32877806ad33b28e39a70b8cb3c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224bb3734dd32877806ad33b28e39a70b8cb3c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224bb3734dd32877806ad33b28e39a70b8cb3c5b/comments", "author": null, "committer": null, "parents": [{"sha": "90e72e20a3808c9791c2fc1e062f260359adb771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e72e20a3808c9791c2fc1e062f260359adb771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e72e20a3808c9791c2fc1e062f260359adb771"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "19869b0b94d5da21507d1605032ea125705ef7dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224bb3734dd32877806ad33b28e39a70b8cb3c5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224bb3734dd32877806ad33b28e39a70b8cb3c5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=224bb3734dd32877806ad33b28e39a70b8cb3c5b", "patch": "@@ -1,5 +1,10 @@\n Mon Jun 21 05:33:15 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \n+\t* c-pragma.c (push_alignment): Don't ignore alignments greater than\n+\t4 bytes.\n+\t(insert_pack_attributes): Take into account member natural \n+\talignment.\n+\n \t* i386/winnt.c (exports_head): New static variable.\n \t(i386_pe_record_exported_symbol): New function.\n \t(i386_pe_asm_file_end): Use."}, {"sha": "5aa8d9f2870fc5d08e8f6b1c961a5f178d8049be", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224bb3734dd32877806ad33b28e39a70b8cb3c5b/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224bb3734dd32877806ad33b28e39a70b8cb3c5b/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=224bb3734dd32877806ad33b28e39a70b8cb3c5b", "patch": "@@ -141,7 +141,7 @@ pop_alignment (id)\n     {\n       entry = alignment_stack->prev;\n \n-      if (entry == NULL || entry->alignment > 4)\n+      if (entry == NULL)\n \tmaximum_field_alignment = 0;\n       else\n \tmaximum_field_alignment = entry->alignment * 8;\n@@ -163,6 +163,7 @@ insert_pack_attributes (node, attributes, prefix)\n      tree * prefix;\n {\n   tree a;\n+  int field_alignment;\n \n   /* If we are not packing, then there is nothing to do.  */\n   if (maximum_field_alignment == 0\n@@ -173,12 +174,16 @@ insert_pack_attributes (node, attributes, prefix)\n   if (TREE_CODE_CLASS (TREE_CODE (node)) != 'd'\n       || TREE_CODE (node) != FIELD_DECL)\n     return;\n+  \n+  field_alignment = TYPE_ALIGN (TREE_TYPE (node));\n+  if (field_alignment <= 0 || field_alignment > maximum_field_alignment)\n+    field_alignment = maximum_field_alignment;\n \n   /* Add a 'packed' attribute.  */\n   * attributes = tree_cons (get_identifier (\"packed\"), NULL, * attributes);\n   \n   /* If the alignment is > 8 then add an alignment attribute as well.  */\n-  if (maximum_field_alignment > 8)\n+  if (field_alignment > 8)\n     {\n       /* If the aligned attribute is already present then do not override it.  */\n       for (a = * attributes; a; a = TREE_CHAIN (a))\n@@ -201,7 +206,7 @@ insert_pack_attributes (node, attributes, prefix)\n \t  * attributes = tree_cons\n \t      (get_identifier (\"aligned\"),\n \t       tree_cons (NULL,\n-\t\t\t  build_int_2 (maximum_field_alignment / 8, 0),\n+\t\t\t  build_int_2 (field_alignment / 8, 0),\n \t\t\t  NULL),\n \t       * attributes);\n \t}"}]}