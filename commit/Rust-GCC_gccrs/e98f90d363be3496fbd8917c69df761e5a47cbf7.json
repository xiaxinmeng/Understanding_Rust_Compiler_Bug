{"sha": "e98f90d363be3496fbd8917c69df761e5a47cbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4ZjkwZDM2M2JlMzQ5NmZiZDg5MTdjNjlkZjc2MWU1YTQ3Y2JmNw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-11-20T04:12:11Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-11-20T04:12:11Z"}, "message": "* expmed.c (extract_bit_field): Don't create invalid SUBREGs.\n\nFrom-SVN: r47196", "tree": {"sha": "1ccd724b6adc95dce984fa68fefd6b1a126ab750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ccd724b6adc95dce984fa68fefd6b1a126ab750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98f90d363be3496fbd8917c69df761e5a47cbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98f90d363be3496fbd8917c69df761e5a47cbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98f90d363be3496fbd8917c69df761e5a47cbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98f90d363be3496fbd8917c69df761e5a47cbf7/comments", "author": null, "committer": null, "parents": [{"sha": "34806eda305c2da75ef89f0c88f9003ebc50a272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34806eda305c2da75ef89f0c88f9003ebc50a272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34806eda305c2da75ef89f0c88f9003ebc50a272"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "4bb5ce1374a269e020e6878de47fe6b22c9dd5e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98f90d363be3496fbd8917c69df761e5a47cbf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98f90d363be3496fbd8917c69df761e5a47cbf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e98f90d363be3496fbd8917c69df761e5a47cbf7", "patch": "@@ -1,3 +1,7 @@\n+2001-11-19  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* expmed.c (extract_bit_field): Don't create invalid SUBREGs.\n+\n 2001-11-19  Zack Weinberg  <zack@codesourcery.com>\n \n \t* mkconfig.sh: Undefine ENABLE_NLS if GENERATOR_FILE is"}, {"sha": "cb21cf5d277aee642806270181aa4e4279ec57ed", "filename": "gcc/expmed.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98f90d363be3496fbd8917c69df761e5a47cbf7/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98f90d363be3496fbd8917c69df761e5a47cbf7/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=e98f90d363be3496fbd8917c69df761e5a47cbf7", "patch": "@@ -998,6 +998,8 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n   enum machine_mode int_mode;\n   enum machine_mode extv_mode = mode_for_extraction (EP_extv, 0);\n   enum machine_mode extzv_mode = mode_for_extraction (EP_extzv, 0);\n+  enum machine_mode mode1;\n+  int byte_offset;\n \n   /* Discount the part of the structure before the desired byte.\n      We need to know how many bytes are safe to reference after it.  */\n@@ -1071,9 +1073,18 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n      So too extracting a subword value in\n      the least significant part of the register.  */\n \n+  byte_offset = (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n+                + (offset * UNITS_PER_WORD);\n+\n+  mode1  = (VECTOR_MODE_P (tmode)\n+           ? mode\n+\t   : mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0));\n+\n   if (((GET_CODE (op0) != MEM\n \t&& TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t  GET_MODE_BITSIZE (GET_MODE (op0))))\n+\t\t\t\t  GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t&& GET_MODE_SIZE (mode1) != 0\n+\t&& byte_offset % GET_MODE_SIZE (mode1) == 0)\n        || (GET_CODE (op0) == MEM\n \t   && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (op0))\n \t       || (offset * BITS_PER_UNIT % bitsize == 0\n@@ -1089,10 +1100,6 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \t\t  ? bitpos + bitsize == BITS_PER_WORD\n \t\t  : bitpos == 0))))\n     {\n-      enum machine_mode mode1\n-\t= (VECTOR_MODE_P (tmode) ? mode\n-\t   : mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0));\n-\n       if (mode1 != GET_MODE (op0))\n \t{\n \t  if (GET_CODE (op0) == SUBREG)\n@@ -1108,9 +1115,7 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \t\tabort ();\n \t    }\n \t  if (GET_CODE (op0) == REG)\n-\t    op0 = gen_rtx_SUBREG (mode1, op0,\n-\t\t\t\t  (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n-\t\t\t\t  + (offset * UNITS_PER_WORD));\n+\t    op0 = gen_rtx_SUBREG (mode1, op0, byte_offset);\n \t  else\n \t    op0 = adjust_address (op0, mode1, offset);\n \t}"}]}