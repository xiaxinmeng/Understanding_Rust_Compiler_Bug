{"sha": "d2782048a2d28004bbb2fca8aad5ced64774b638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3ODIwNDhhMmQyODAwNGJiYjJmY2E4YWFkNWNlZDY0Nzc0YjYzOA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-03-05T10:41:27Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-03-05T10:41:27Z"}, "message": "simplify-rtx.c (simplify_relational_operation): If flag_wrapv is set...\n\n2004-03-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* simplify-rtx.c (simplify_relational_operation): If\n        flag_wrapv is set, do not move terms between the two\n        side of a relational operator.\n\nFrom-SVN: r78962", "tree": {"sha": "84242829927d10321448fbb1078ced9276267afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84242829927d10321448fbb1078ced9276267afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2782048a2d28004bbb2fca8aad5ced64774b638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2782048a2d28004bbb2fca8aad5ced64774b638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2782048a2d28004bbb2fca8aad5ced64774b638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2782048a2d28004bbb2fca8aad5ced64774b638/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f894b69b7561a8be2b2def5ae0adad4d2e2e5ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f894b69b7561a8be2b2def5ae0adad4d2e2e5ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f894b69b7561a8be2b2def5ae0adad4d2e2e5ec5"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "723492a658a725b53c980169f7ac96ac6e075497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2782048a2d28004bbb2fca8aad5ced64774b638/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2782048a2d28004bbb2fca8aad5ced64774b638/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2782048a2d28004bbb2fca8aad5ced64774b638", "patch": "@@ -1,3 +1,9 @@\n+2004-03-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* simplify-rtx.c (simplify_relational_operation): If\n+\tflag_wrapv is set, do not move terms between the two\n+\tside of a relational operator.\n+\n 2004-03-05  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* rtlanal.c: Include target.h and output.h"}, {"sha": "b86a8b214734087a6a05a5102e9d4debbaad65e9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2782048a2d28004bbb2fca8aad5ced64774b638/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2782048a2d28004bbb2fca8aad5ced64774b638/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d2782048a2d28004bbb2fca8aad5ced64774b638", "patch": "@@ -2559,9 +2559,10 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n      If CODE is an unsigned comparison, then we can never do this optimization,\n      because it gives an incorrect result if the subtraction wraps around zero.\n      ANSI C defines unsigned operations such that they never overflow, and\n-     thus such cases can not be ignored.  */\n+     thus such cases can not be ignored; but we cannot do it even for\n+     signed comparisons for languages such as Java, so test flag_wrapv.  */\n \n-  if (INTEGRAL_MODE_P (mode) && trueop1 != const0_rtx\n+  if (!flag_wrapv && INTEGRAL_MODE_P (mode) && trueop1 != const0_rtx\n       && ! ((GET_CODE (op0) == REG || GET_CODE (trueop0) == CONST_INT)\n \t    && (GET_CODE (op1) == REG || GET_CODE (trueop1) == CONST_INT))\n       && 0 != (tem = simplify_binary_operation (MINUS, mode, op0, op1))"}]}