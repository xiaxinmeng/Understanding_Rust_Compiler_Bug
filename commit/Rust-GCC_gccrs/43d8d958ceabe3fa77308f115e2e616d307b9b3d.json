{"sha": "43d8d958ceabe3fa77308f115e2e616d307b9b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkOGQ5NThjZWFiZTNmYTc3MzA4ZjExNWUyZTYxNmQzMDdiOWIzZA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-11-19T05:29:32Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2003-11-19T05:29:32Z"}, "message": "libtool.m4: Sync darwin bits from libtool cvs to build a gcc with shared/dylibed libraries.\n\n2003-11-19  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* libtool.m4: Sync darwin bits from libtool cvs to build a gcc with\n\tshared/dylibed libraries.\n\t* ltmain.sh: Likewise.\n\t* ltcf-c.sh: Likewise, disable shared library build for OS-X < 10.3.\n\t* ltcf-cxx.sh: Likewise.\n\t* ltcf-gcj.sh: Likewise.\n\t* ltconfig: Likewise.\n\nFrom-SVN: r73729", "tree": {"sha": "a48bbeae29df42ceed0c81554bc0e2cce1f201d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48bbeae29df42ceed0c81554bc0e2cce1f201d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43d8d958ceabe3fa77308f115e2e616d307b9b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d8d958ceabe3fa77308f115e2e616d307b9b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d8d958ceabe3fa77308f115e2e616d307b9b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d8d958ceabe3fa77308f115e2e616d307b9b3d/comments", "author": null, "committer": null, "parents": [{"sha": "f7a75b82d2228bdd8b92bef1138660b78454fae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a75b82d2228bdd8b92bef1138660b78454fae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a75b82d2228bdd8b92bef1138660b78454fae2"}], "stats": {"total": 252, "additions": 234, "deletions": 18}, "files": [{"sha": "00763602372620ad413e487a945d6c5d0fb2b186", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -1,3 +1,13 @@\n+2003-11-19  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* libtool.m4: Sync darwin bits from libtool cvs to build a gcc with\n+\tshared/dylibed libraries.\n+\t* ltmain.sh: Likewise.\n+\t* ltcf-c.sh: Likewise, disable shared library build for OS-X < 10.3.\n+\t* ltcf-cxx.sh: Likewise.\n+\t* ltcf-gcj.sh: Likewise.\n+\t* ltconfig: Likewise.\n+\n 2003-11-17  Stan Cox  <scox@redhat.com>\n \n \t* MAINTAINERS: Add myself as iq2000 port maintainer."}, {"sha": "0312861d47f3f236ede696d2715c78b2751e045d", "filename": "libtool.m4", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -607,6 +607,7 @@ cygwin* | mingw* |pw32*)\n   ;;\n \n darwin* | rhapsody*)\n+  # this will be overwritten by pass_all, but leave it in just in case\n   lt_cv_deplibs_check_method='file_magic Mach-O dynamically linked shared library'\n   lt_cv_file_magic_cmd='/usr/bin/file -L'\n   case \"$host_os\" in\n@@ -617,6 +618,7 @@ darwin* | rhapsody*)\n     lt_cv_file_magic_test_file='/usr/lib/libSystem.dylib'\n     ;;\n   esac\n+  lt_cv_deplibs_check_method=pass_all\n   ;;\n \n freebsd* )\n@@ -780,8 +782,9 @@ AC_DEFUN([AC_CHECK_LIBM],\n [AC_REQUIRE([AC_CANONICAL_HOST])dnl\n LIBM=\n case $host in\n-*-*-beos* | *-*-cygwin* | *-*-pw32*)\n+*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n   # These system don't have libm\n+  # on darwin the libm is a symbolic link to libSystem.dylib\n   ;;\n *-ncr-sysv4.3*)\n   AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")"}, {"sha": "2c51fd3d55c655bdd9e8cac827df79230d965658", "filename": "ltcf-c.sh", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-c.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-c.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltcf-c.sh?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -175,16 +175,6 @@ EOF\n       $CC $output_objdir/$soname-exp '$lt_cv_cc_dll_switch' -Wl,-e,'$dll_entry' -o $output_objdir/$soname '$ltdll_obj'$libobjs $deplibs $compiler_flags'\n     ;;\n \n-  darwin* | rhapsody*)\n-    allow_undefined_flag='-undefined suppress'\n-    archive_cmds='$CC `test .$module = .yes && echo -bundle || echo -dynamiclib` $allow_undefined_flag -o $lib $libobjs $deplibs $linkopts -install_name $rpath/$soname `test -n \"$verstring\" -a x$verstring != x0.0 && echo $verstring`'\n-    # We need to add '_' to the symbols in $export_symbols first\n-    #archive_expsym_cmds=\"$archive_cmds\"' && strip -s $export_symbols'\n-    hardcode_direct=yes\n-    hardcode_shlibpath_var=no\n-    whole_archive_flag_spec='-all_load $convenience'\n-    ;;\n-\n   netbsd*)\n     if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n       archive_cmds='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n@@ -385,10 +375,53 @@ else\n     fix_srcfile_path='`cygpath -w \"$srcfile\"`'\n     ;;\n \n-  freebsd1*)\n-    ld_shlibs=no\n+  darwin* | rhapsody*)\n+    case \"$host_os\" in\n+    rhapsody* | darwin1.[[012]])\n+\tallow_undefined_flag='-undefined suppress'\n+\t;;\n+    *) # Darwin 1.3 on\n+    if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n+       allow_undefined_flag='-flat_namespace -undefined suppress'\n+    else\n+\tcase ${MACOSX_DEPLOYMENT_TARGET} in\n+\t    10.[[012]])\n+\t\tallow_undefined_flag='-flat_namespace -undefined suppress'\n+\t\t;;\n+\t    10.*)\n+\t\tallow_undefined_flag='-undefined dynamic_lookup'\n+\t\t;;\n+\tesac\n+    fi\n+    ;;\n+    esac\n+    # Disable shared library build on OS-X older than 10.3.\n+    case $host_os in\n+\tdarwin[1-6]*)\n+\t    can_build_shared=no\n+\t    ;;\n+\tdarwin7*)\n+\t    can_build_shared=yes\n+\t    ;;\n+    esac\n+    output_verbose_link_cmd='echo'\n+    archive_cmds='$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs$compiler_flags -install_name $rpath/$soname $verstring'\n+    module_cmds='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n+    # Don't fix this by using the ld -exported_symbols_list flag,\n+    # it doesn't exist in older darwin ld's\n+    archive_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib $allow_undefined_flag  -o $lib $libobjs $deplibs$compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    module_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    hardcode_direct=no\n+    hardcode_automatic=yes\n+    hardcode_shlibpath_var=unsupported\n+    whole_archive_flag_spec='-all_load $convenience'\n+    link_all_deplibs=yes\n     ;;\n \n+  freebsd1*)\n+  ld_shlibs=no\n+  ;;\n+\n   # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n   # support.  Future versions do this automatically, but an explicit c++rt0.o\n   # does not break anything, and helps significantly (at the cost of a little\n@@ -670,7 +703,7 @@ else\n     darwin* | rhapsody*)\n       # PIC is the default on this platform\n       # Common symbols not allowed in MH_DYLIB files\n-      lt_cv_prog_cc_pic='-fno-common'\n+      ac_cv_prog_cc_pic='-fno-common'\n       ;;\n     *djgpp*)\n       # DJGPP does not support shared libraries at all"}, {"sha": "2ecd53e5758b9325ecfbb5c86c26e9b5dbb8eb93", "filename": "ltcf-cxx.sh", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-cxx.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-cxx.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltcf-cxx.sh?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -223,6 +223,51 @@ case $host_os in\n         ;;\n     esac\n     ;;\n+\n+  darwin* | rhapsody*)\n+    case \"$host_os\" in\n+\trhapsody* | darwin1.[[012]])\n+\t    allow_undefined_flag='-undefined suppress'\n+\t;;\n+\t*) # Darwin 1.3 on\n+\t    if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n+\t\tallow_undefined_flag='-flat_namespace -undefined suppress'\n+      else\n+\tcase ${MACOSX_DEPLOYMENT_TARGET} in\n+\t    10.[[012]])\n+\t\tallow_undefined_flag='-flat_namespace -undefined suppress'\n+\t    ;;\n+\t    10.*)\n+\t\tallow_undefined_flag='-undefined dynamic_lookup'\n+\t    ;;\n+\tesac\n+    fi\n+    ;;\n+    esac\n+    # Disable shared library build on OS-X older than 10.3.\n+    case $host_os in\n+\tdarwin[1-6]*)\n+\t    can_build_shared=no\n+\t    ;;\n+\tdarwin7*)\n+\t    can_build_shared=yes\n+\t    ;;\n+    esac\n+    output_verbose_link_cmd='echo'\n+    archive_cmds='$CC -r ${wl}-bind_at_load -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n+    module_cmds='$CC ${wl}-bind_at_load $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n+\n+    # Don't fix this by using the ld -exported_symbols_list flag,\n+    # it doesn't exist in older darwin ld's\n+    archive_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -r ${wl}-bind_at_load -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    module_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    hardcode_direct=no\n+    hardcode_automatic=yes\n+    hardcode_shlibpath_var=unsupported\n+    whole_archive_flag_spec='-all_load $convenience'\n+    link_all_deplibs=yes\n+    ;;\n+\n   dgux*)\n     case $cc_basename in\n       ec++)\n@@ -712,7 +757,7 @@ if test \"$with_gcc\" = yes; then\n   darwin* | rhapsody*)\n     # PIC is the default on this platform\n     # Common symbols not allowed in MH_DYLIB files\n-    lt_cv_prog_cc_pic='-fno-common'\n+    ac_cv_prog_cc_pic='-fno-common'\n     ;;\n   *djgpp*)\n     # DJGPP does not support shared libraries at all"}, {"sha": "ac4fbbca3d44dada8af575d2b5ef1410dd51e525", "filename": "ltcf-gcj.sh", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-gcj.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltcf-gcj.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltcf-gcj.sh?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -378,6 +378,49 @@ else\n     fix_srcfile_path='`cygpath -w \"$srcfile\"`'\n     ;;\n \n+  darwin* | rhapsody*)\n+    case \"$host_os\" in\n+    rhapsody* | darwin1.[[012]])\n+\tallow_undefined_flag='-undefined suppress'\n+\t;;\n+    *) # Darwin 1.3 on\n+      if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n+\t  allow_undefined_flag='-flat_namespace -undefined suppress'\n+      else\n+\t  case ${MACOSX_DEPLOYMENT_TARGET} in\n+\t      10.[[012]])\n+\t\t  allow_undefined_flag='-flat_namespace -undefined suppress'\n+\t\t  ;;\n+\t      10.*)\n+\t\t  allow_undefined_flag='-undefined dynamic_lookup'\n+\t\t  ;;\n+\t  esac\n+      fi\n+      ;;\n+    esac\n+    # Disable shared library build on OS-X older than 10.3.\n+    case $host_os in\n+\tdarwin[1-6]*)\n+\t    can_build_shared=no\n+\t    ;;\n+\tdarwin7*)\n+\t    can_build_shared=yes\n+\t    ;;\n+    esac\n+    output_verbose_link_cmd='echo'\n+    archive_cmds='$CC -r ${wl}-bind_at_load -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n+    module_cmds='$CC ${wl}-bind_at_load $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n+      # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin ld's\n+    archive_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -r ${wl}-bind_at_load -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    module_expsym_cmds='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n+    hardcode_direct=no\n+    hardcode_automatic=yes\n+    hardcode_shlibpath_var=unsupported\n+    whole_archive_flag_spec='-all_load $convenience'\n+    link_all_deplibs=yes\n+    ;;\n+\n+\n   freebsd1*)\n     ld_shlibs=no\n     ;;\n@@ -628,6 +671,12 @@ fi\n       # built for inclusion in a dll (and should export symbols for example).\n       ac_cv_prog_cc_pic='-DDLL_EXPORT'\n       ;;\n+\n+    darwin* | rhapsody*)\n+      # PIC is the default on this platform\n+      # Common symbols not allowed in MH_DYLIB files\n+      ac_cv_prog_cc_pic='-fno-common'\n+      ;;\n     amigaos*)\n       # FIXME: we need at least 68020 code to build shared libraries, but\n       # adding the `-m68020' flag to GCC prevents building anything better,"}, {"sha": "9c420ace72625ef3fc4f80a18b73b2b5b8eccb8c", "filename": "ltconfig", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltconfig?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -965,6 +965,7 @@ test -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n library_names_spec=\n libname_spec='lib$name'\n soname_spec=\n+shrext=\".so\"\n postinstall_cmds=\n postuninstall_cmds=\n finish_cmds=\n@@ -1102,13 +1103,28 @@ cygwin* | mingw* | pw32*)\n \n darwin* | rhapsody*)\n   dynamic_linker=\"$host_os dyld\"\n+  lt_cv_dlopen=\"dyld\"\n+  lt_cv_dlopen_libs=\n+  lt_cv_dlopen_self=yes\n   version_type=darwin\n   need_lib_prefix=no\n   need_version=no\n-  library_names_spec='${libname}${release}${versuffix}.`test .$module = .yes && echo so || echo dylib` ${libname}${release}${major}.$`test .$module = .yes && echo so || echo dylib` ${libname}.`test .$module = .yes && echo so || echo dylib`'\n-  soname_spec='${libname}${release}${major}.`test .$module = .yes && echo so || echo dylib`'\n+  # Disable shared library build on OS-X older than 10.3.\n+  case $host_os in\n+      darwin[1-6]*)\n+\t  can_build_shared=no\n+\t  ;;\n+      darwin7*)\n+\t  can_build_shared=yes\n+\t  ;;\n+  esac\n+  library_names_spec='${libname}${release}${versuffix}$shared_ext ${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n+  soname_spec='${libname}${release}${major}$shared_ext'\n   shlibpath_overrides_runpath=yes\n   shlibpath_var=DYLD_LIBRARY_PATH\n+  shrext='$(test .$module = .yes && echo .so || echo .dylib)'\n+  sys_lib_search_path_spec=`$CC -print-search-dirs | tr \"\\n\" \"$PATH_SEPARATOR\" | sed -e 's/libraries:/@libraries:/' | tr \"@\" \"\\n\" | grep \"^libraries:\" | sed -e \"s/^libraries://\" -e \"s,=/,/,g\" -e \"s,$PATH_SEPARATOR, ,g\" -e \"s,.*,& /lib /usr/lib /usr/local/lib,g\"`\n+  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n   ;;\n \n freebsd1*)\n@@ -2325,6 +2341,9 @@ objext=\"$objext\"\n # Old archive suffix (normally \"a\").\n libext=\"$libext\"\n \n+# Shared library suffix (normally \".so\").\n+shrext='$shrext'\n+\n # Executable file suffix (normally \"\").\n exeext=\"$exeext\"\n "}, {"sha": "5ccf95c7d1d6bd7d4673e2dd8fd183c2aa0ba1dd", "filename": "ltmain.sh", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltmain.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d8d958ceabe3fa77308f115e2e616d307b9b3d/ltmain.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltmain.sh?ref=43d8d958ceabe3fa77308f115e2e616d307b9b3d", "patch": "@@ -1111,6 +1111,19 @@ EOF\n \t  finalize_command=\"$finalize_command $wl$qarg\"\n \t  continue\n \t  ;;\n+\tframework)\n+\t  case $host in\n+\t   *-*-darwin*)\n+\t     case \"$deplibs \" in\n+\t       *\" $qarg.framework \"*) ;;\n+\t       *) deplibs=\"$deplibs $qarg.framework\" # this is fixed later\n+\t\t  ;;\n+\t     esac\n+\t     ;;\n+\t  esac\n+\t  prev=\n+\t  continue\n+\t  ;;\n \t*)\n \t  eval \"$prev=\\\"\\$arg\\\"\"\n \t  prev=\n@@ -1363,6 +1376,10 @@ EOF\n \tprev=xlinker\n \tcontinue\n \t;;\n+      -framework)\n+\tprev=framework\n+\tcontinue\n+\t;;\n \n       # Some other compiler flag.\n       -* | +*)\n@@ -1841,6 +1858,13 @@ EOF\n \t*) . ./$lib ;;\n \tesac\n \n+\tcase $host in\n+\t    *-*-darwin*)\n+\t  # Convert \"-framework foo\" to \"foo.framework\" in dependency_libs\n+\t\ttest -n \"$dependency_libs\" && dependency_libs=`$echo \"X$dependency_libs\" | $Xsed -e 's/-framework \\([^ $]*\\)/\\1.framework/g'`\n+\t\t;;\n+\tesac\n+\n \tif test \"$linkmode,$pass\" = \"lib,link\" ||\n \t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n \t   { test $linkmode = oldlib && test $linkmode = obj; }; then\n@@ -2446,6 +2470,7 @@ EOF\n       case $outputname in\n       lib*)\n \tname=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//' -e 's/^lib//'`\n+\teval shared_ext=\\\"$shrext\\\"\n \teval libname=\\\"$libname_spec\\\"\n \t;;\n       *)\n@@ -2457,6 +2482,7 @@ EOF\n \tif test \"$need_lib_prefix\" != no; then\n \t  # Add the \"lib\" prefix for modules if required\n \t  name=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//'`\n+\t  eval shared_ext=\\\"$shrext\\\"\n \t  eval libname=\\\"$libname_spec\\\"\n \telse\n \t  libname=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//'`\n@@ -2644,7 +2670,16 @@ EOF\n \t# Clear the version info if we defaulted, and they specified a release.\n \tif test -z \"$vinfo\" && test -n \"$release\"; then\n \t  major=\n-\t  verstring=\"0.0\"\n+\t  case $version_type in\n+\t  darwin)\n+\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n+\t    # problems, so we reset it completely\n+\t    verstring=\n+\t    ;;\n+\t  *)\n+\t    verstring=\"0.0\"\n+\t    ;;\n+\t  esac\n \t  if test \"$need_version\" = no; then\n \t    versuffix=\n \t  else\n@@ -3020,6 +3055,14 @@ EOF\n \t    fi\n \t  fi\n \tfi\n+\t# Time to change all our \"foo.framework\" stuff back to \"-framework foo\"\n+\tcase $host in\n+\t    *-*-darwin*)\n+\t\tnewdeplibs=`$echo \"X $newdeplibs\" | $Xsed -e 's% \\([^ $]*\\).framework% -framework \\1%g'`\n+\t\tdependency_libs=`$echo \"X $dependency_libs\" | $Xsed -e 's% \\([^ $]*\\).framework% -framework \\1%g'`\n+\t\t;;\n+\tesac\n+\t# Done checking deplibs!\n \t# Done checking deplibs!\n \tdeplibs=$newdeplibs\n       fi\n@@ -3088,6 +3131,7 @@ EOF\n \n \t# Get the real and link names of the library.\n \teval library_names=\\\"$library_names_spec\\\"\n+\teval shared_ext=\\\"$shrext\\\"\n \tset dummy $library_names\n \trealname=\"$2\"\n \tshift; shift\n@@ -3533,6 +3577,19 @@ EOF\n \t;;\n       esac\n \n+      case $host in\n+      *-*-darwin*)\n+      # Don't allow lazy linking, it breaks C++ global constructors\n+\tif test \"$tagname\" = CXX ; then\n+\t   compile_command=\"$compile_command ${wl}-bind_at_load\"\n+\t   finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n+\tfi\n+      # Time to change all our \"foo.framework\" stuff back to \"-framework foo\"\n+\tcompile_deplibs=`$echo \"X $compile_deplibs\" | $Xsed -e 's% \\([^ $]*\\).framework% -framework \\1%g'`\n+\tfinalize_deplibs=`$echo \"X $finalize_deplibs\" | $Xsed -e 's% \\([^ $]*\\).framework% -framework \\1%g'`\n+\t;;\n+      esac\n+\n       compile_command=\"$compile_command $compile_deplibs\"\n       finalize_command=\"$finalize_command $finalize_deplibs\"\n "}]}