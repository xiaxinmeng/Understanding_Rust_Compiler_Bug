{"sha": "7e7be827b1adac2b9dc374e31e20940d7edbc18b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3YmU4MjdiMWFkYWMyYjlkYzM3NGUzMWUyMDk0MGQ3ZWRiYzE4Yg==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2001-03-04T00:29:59Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2001-03-04T00:29:59Z"}, "message": "Re-remove c-gperf.h.\n\nApproved by:  Jeffrey A Law <law@redhat.com>\n              <6253.979532098@upchuck.cygnus.com>\n              Tom Tromey <tromey@redhat.com>\n              <87d7ce8gcz.fsf@creche.redhat.com>\n\nFrom-SVN: r40225", "tree": {"sha": "41c7288c562acc3b898c20b43e2e866d2f51abd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41c7288c562acc3b898c20b43e2e866d2f51abd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7be827b1adac2b9dc374e31e20940d7edbc18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7be827b1adac2b9dc374e31e20940d7edbc18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7be827b1adac2b9dc374e31e20940d7edbc18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7be827b1adac2b9dc374e31e20940d7edbc18b/comments", "author": null, "committer": null, "parents": [{"sha": "e8408f251a70640dcc208877ef3122efd5b7e824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8408f251a70640dcc208877ef3122efd5b7e824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8408f251a70640dcc208877ef3122efd5b7e824"}], "stats": {"total": 259, "additions": 7, "deletions": 252}, "files": [{"sha": "4a34930fe3b9071669948ac85e30f47eed2ab9eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7be827b1adac2b9dc374e31e20940d7edbc18b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7be827b1adac2b9dc374e31e20940d7edbc18b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e7be827b1adac2b9dc374e31e20940d7edbc18b", "patch": "@@ -1,3 +1,10 @@\n+2001-03-03  David O'Brien  <obrien@FreeBSD.org>\n+\t\n+\tfrom 2000-09-06  Zack Weinberg  <zack@wolery.cumb.org>\n+\t* c-parse.gperf, c-gperf.h: Delete.\n+\t(c-gperf.h was accidently re-added to the CVS repo in the rev 1.16 commit\n+\tby tromey)\n+\n 2001-03-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpplex.c (_cpp_lex_token): Don't warn about directives in"}, {"sha": "842b3a457ac205d5a6de87dff379f9866713ffa3", "filename": "gcc/c-gperf.h", "status": "removed", "additions": 0, "deletions": 252, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8408f251a70640dcc208877ef3122efd5b7e824/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8408f251a70640dcc208877ef3122efd5b7e824/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=e8408f251a70640dcc208877ef3122efd5b7e824", "patch": "@@ -1,252 +0,0 @@\n-/* C code produced by gperf version 2.7 */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ../../egcs/gcc/c-parse.gperf  */\n-/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n-struct resword { const char *name; short token; enum rid rid; };\n-#ifdef __GNUC__\n-__inline\n-#endif\n-static unsigned int hash PARAMS ((const char *, unsigned int));\n-#ifdef __GNUC__\n-__inline\n-#endif\n-struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n-\n-#define TOTAL_KEYWORDS 92\n-#define MIN_WORD_LENGTH 2\n-#define MAX_WORD_LENGTH 20\n-#define MIN_HASH_VALUE 17\n-#define MAX_HASH_VALUE 301\n-/* maximum key range = 285, duplicates = 0 */\n-\n-#ifdef __GNUC__\n-__inline\n-#endif\n-static unsigned int\n-hash (str, len)\n-     register const char *str;\n-     register unsigned int len;\n-{\n-  static unsigned short asso_values[] =\n-    {\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 113, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302,   1, 302,  78,  52, 111,\n-       34,   9,  46,  59,   1,  20, 302,   1, 118,  17,\n-       18,  39,  58, 302,   7,   6,  33,  70,  21,   2,\n-        5,   1,   1, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302, 302, 302, 302, 302,\n-      302, 302, 302, 302, 302, 302\n-    };\n-  register int hval = len;\n-\n-  switch (hval)\n-    {\n-      default:\n-      case 3:\n-        hval += asso_values[(unsigned char)str[2]];\n-      case 2:\n-      case 1:\n-        hval += asso_values[(unsigned char)str[0]];\n-        break;\n-    }\n-  return hval + asso_values[(unsigned char)str[len - 1]];\n-}\n-\n-static struct resword wordlist[] =\n-  {\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__real__\", REALPART, NORID},\n-    {\"__signed__\", TYPESPEC, RID_SIGNED},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__restrict__\", TYPE_QUAL, RID_RESTRICT},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__extension__\", EXTENSION, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"else\", ELSE, NORID},\n-    {\"\", 0, 0},\n-    {\"__imag__\", IMAGPART, NORID},\n-    {\"\", 0, 0},\n-    {\"__inline__\", SCSPEC, RID_INLINE},\n-    {\"switch\", SWITCH, NORID},\n-    {\"\", 0, 0},\n-    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n-    {\"while\", WHILE, NORID},\n-    {\"\", 0, 0},\n-    {\"__inline\", SCSPEC, RID_INLINE},\n-    {\"\", 0, 0},\n-    {\"in\", TYPE_QUAL, RID_IN},\n-    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__typeof__\", TYPEOF, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__signed\", TYPESPEC, RID_SIGNED},\n-    {\"\", 0, 0},\n-    {\"__restrict\", TYPE_QUAL, RID_RESTRICT},\n-    {\"struct\", STRUCT, NORID},\n-    {\"\", 0, 0},\n-    {\"restrict\", TYPE_QUAL, RID_RESTRICT},\n-    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n-    {\"id\", OBJECTNAME, RID_ID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"sizeof\", SIZEOF, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"for\", FOR, NORID},\n-    {\"return\", RETURN, NORID},\n-    {\"__bounded__\", TYPE_QUAL, RID_BOUNDED},\n-    {\"extern\", SCSPEC, RID_EXTERN},\n-    {\"break\", BREAK, NORID},\n-    {\"if\", IF, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__ptrbase__\", PTR_BASE, NORID},\n-    {\"__ptrvalue__\", PTR_VALUE, NORID},\n-    {\"__ptrextent__\", PTR_EXTENT, NORID},\n-    {\"\", 0, 0},\n-    {\"do\", DO, NORID},\n-    {\"\", 0, 0},\n-    {\"__ptrbase\", PTR_BASE, NORID},\n-    {\"__ptrvalue\", PTR_VALUE, NORID},\n-    {\"void\", TYPESPEC, RID_VOID},\n-    {\"\", 0, 0},\n-    {\"register\", SCSPEC, RID_REGISTER},\n-    {\"\", 0, 0},\n-    {\"short\", TYPESPEC, RID_SHORT},\n-    {\"\", 0, 0},\n-    {\"__unbounded__\", TYPE_QUAL, RID_UNBOUNDED},\n-    {\"__imag\", IMAGPART, NORID},\n-    {\"__asm__\", ASM_KEYWORD, NORID},\n-    {\"__typeof\", TYPEOF, NORID},\n-    {\"int\", TYPESPEC, RID_INT},\n-    {\"\", 0, 0},\n-    {\"__alignof__\", ALIGNOF, NORID},\n-    {\"\", 0, 0},\n-    {\"__attribute__\", ATTRIBUTE, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__bounded\", TYPE_QUAL, RID_BOUNDED},\n-    {\"inout\", TYPE_QUAL, RID_INOUT},\n-    {\"\", 0, 0},\n-    {\"__attribute\", ATTRIBUTE, NORID},\n-    {\"enum\", ENUM, NORID},\n-    {\"__asm\", ASM_KEYWORD, NORID},\n-    {\"\", 0, 0},\n-    {\"__ptrextent\", PTR_EXTENT, NORID},\n-    {\"\", 0, 0},\n-    {\"signed\", TYPESPEC, RID_SIGNED},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"out\", TYPE_QUAL, RID_OUT},\n-    {\"\", 0, 0},\n-    {\"byref\", TYPE_QUAL, RID_BYREF},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"union\", UNION, NORID},\n-    {\"\", 0, 0},\n-    {\"asm\", ASM_KEYWORD, NORID},\n-    {\"__unbounded\", TYPE_QUAL, RID_UNBOUNDED},\n-    {\"\", 0, 0},\n-    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n-    {\"double\", TYPESPEC, RID_DOUBLE},\n-    {\"default\", DEFAULT, NORID},\n-    {\"\", 0, 0},\n-    {\"__const__\", TYPE_QUAL, RID_CONST},\n-    {\"float\", TYPESPEC, RID_FLOAT},\n-    {\"__complex__\", TYPESPEC, RID_COMPLEX},\n-    {\"\", 0, 0},\n-    {\"__complex\", TYPESPEC, RID_COMPLEX},\n-    {\"\", 0, 0},\n-    {\"__builtin_va_arg\", VA_ARG, NORID},\n-    {\"__label__\", LABEL, NORID},\n-    {\"case\", CASE, NORID},\n-    {\"\", 0, 0},\n-    {\"__real\", REALPART, NORID},\n-    {\"@defs\", DEFS, NORID},\n-    {\"__alignof\", ALIGNOF, NORID},\n-    {\"goto\", GOTO, NORID},\n-    {\"\", 0, 0},\n-    {\"@private\", PRIVATE, NORID},\n-    {\"@selector\", SELECTOR, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"typeof\", TYPEOF, NORID},\n-    {\"typedef\", SCSPEC, RID_TYPEDEF},\n-    {\"\", 0, 0},\n-    {\"continue\", CONTINUE, NORID},\n-    {\"@encode\", ENCODE, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@interface\", INTERFACE, NORID},\n-    {\"\", 0, 0},\n-    {\"__const\", TYPE_QUAL, RID_CONST},\n-    {\"inline\", SCSPEC, RID_INLINE},\n-    {\"auto\", SCSPEC, RID_AUTO},\n-    {\"\", 0, 0},\n-    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@implementation\", IMPLEMENTATION, NORID},\n-    {\"@protected\", PROTECTED, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"const\", TYPE_QUAL, RID_CONST},\n-    {\"\", 0, 0},\n-    {\"@end\", END, NORID},\n-    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@compatibility_alias\", ALIAS, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"long\", TYPESPEC, RID_LONG},\n-    {\"char\", TYPESPEC, RID_CHAR},\n-    {\"static\", SCSPEC, RID_STATIC},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@class\", CLASS, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@protocol\", PROTOCOL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@public\", PUBLIC, NORID}\n-  };\n-\n-#ifdef __GNUC__\n-__inline\n-#endif\n-struct resword *\n-is_reserved_word (str, len)\n-     register const char *str;\n-     register unsigned int len;\n-{\n-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n-    {\n-      register int key = hash (str, len);\n-\n-      if (key <= MAX_HASH_VALUE && key >= 0)\n-        {\n-          register const char *s = wordlist[key].name;\n-\n-          if (*str == *s && !strcmp (str + 1, s + 1))\n-            return &wordlist[key];\n-        }\n-    }\n-  return 0;\n-}"}]}