{"sha": "0c91936e402e7cb99d802e8ea24eb7f344341e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5MTkzNmU0MDJlN2NiOTlkODAyZThlYTI0ZWI3ZjM0NDM0MWUyZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-02-02T07:43:16Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-02-02T07:43:16Z"}, "message": "natPosixProcess.cc (myclose): New function.\n\n\t* java/lang/natPosixProcess.cc (myclose): New function.\n\t(fail): Use it.\n\t(startProcess): Likewise.\n\nFrom-SVN: r49433", "tree": {"sha": "508e13ef733cd58ad28a6ab9385d013f5588ea24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508e13ef733cd58ad28a6ab9385d013f5588ea24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c91936e402e7cb99d802e8ea24eb7f344341e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c91936e402e7cb99d802e8ea24eb7f344341e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c91936e402e7cb99d802e8ea24eb7f344341e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c91936e402e7cb99d802e8ea24eb7f344341e2d/comments", "author": null, "committer": null, "parents": [{"sha": "5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "61c319278f73d8bf729c999ecc26b9bbe7df0f4d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91936e402e7cb99d802e8ea24eb7f344341e2d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91936e402e7cb99d802e8ea24eb7f344341e2d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0c91936e402e7cb99d802e8ea24eb7f344341e2d", "patch": "@@ -1,3 +1,9 @@\n+2002-02-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natPosixProcess.cc (myclose): New function.\n+\t(fail): Use it.\n+\t(startProcess): Likewise.\n+\n 2002-02-01  Adam Megacz <adam@xwt.org>\n \n \t* prims.cc: Added #undef STRICT after #include<windows.h>."}, {"sha": "c7dffe9034552fb9885792557f9570e990eea9bb", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91936e402e7cb99d802e8ea24eb7f344341e2d/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91936e402e7cb99d802e8ea24eb7f344341e2d/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=0c91936e402e7cb99d802e8ea24eb7f344341e2d", "patch": "@@ -1,6 +1,6 @@\n // natPosixProcess.cc - Native side of POSIX process code.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -103,6 +103,17 @@ cleanup (char **args, char **env)\n     }\n }\n \n+// This makes our error handling a bit simpler and it lets us avoid\n+// thread bugs where we close a possibly-reopened file descriptor for\n+// a second time.\n+static void\n+myclose (int &fd)\n+{\n+  if (fd != -1)\n+    close (fd);\n+  fd = -1;\n+}\n+\n static void\n fail (int error_value, char **args, char **env,\n       int *one = NULL, int *two = NULL,\n@@ -112,23 +123,23 @@ fail (int error_value, char **args, char **env,\n   cleanup (args, env);\n   if (one != NULL)\n     {\n-      close (one[0]);\n-      close (one[1]);\n+      myclose (one[0]);\n+      myclose (one[1]);\n     }\n   if (two != NULL)\n     {\n-      close (two[0]);\n-      close (two[1]);\n+      myclose (two[0]);\n+      myclose (two[1]);\n     }\n   if (three != NULL)\n     {\n-      close (three[0]);\n-      close (three[1]);\n+      myclose (three[0]);\n+      myclose (three[1]);\n     }\n   if (four != NULL)\n     {\n-      close (four[0]);\n-      close (four[1]);\n+      myclose (four[0]);\n+      myclose (four[1]);\n     }\n   if (t == NULL)\n     t = new java::io::IOException (JvNewStringLatin1 (strerror (error_value)));\n@@ -238,6 +249,8 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n       dup2 (inp[1], 1);\n       dup2 (errp[1], 2);\n \n+      // Use close and not myclose -- we're in the child, and we\n+      // aren't worried about the possible race condition.\n       close (inp[0]);\n       close (inp[1]);\n       close (errp[0]);\n@@ -256,10 +269,10 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n \n   // Parent.  Close extra file descriptors and mark ours as\n   // close-on-exec.\n-  close (outp[0]);\n-  close (inp[1]);\n-  close (errp[1]);\n-  close (msgp[1]);\n+  myclose (outp[0]);\n+  myclose (inp[1]);\n+  myclose (errp[1]);\n+  myclose (msgp[1]);\n \n   char c;\n   int r = read (msgp[0], &c, 1);\n@@ -268,7 +281,7 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n   else if (r != 0)\n     fail (c, args, env, inp, outp, errp, msgp);\n \n-  close (msgp[0]);\n+  myclose (msgp[0]);\n   cleanup (args, env);\n \n   fcntl (outp[1], F_SETFD, 1);"}]}