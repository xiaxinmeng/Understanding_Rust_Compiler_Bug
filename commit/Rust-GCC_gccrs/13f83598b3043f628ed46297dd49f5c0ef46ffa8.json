{"sha": "13f83598b3043f628ed46297dd49f5c0ef46ffa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmODM1OThiMzA0M2Y2MjhlZDQ2Mjk3ZGQ0OWY1YzBlZjQ2ZmZhOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-30T04:35:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-30T04:35:49Z"}, "message": "locale_facets.tcc (locale::combine): Clone _Impl.\n\n\n2001-06-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc (locale::combine): Clone _Impl.\n\tbefore replacing facet.\n\t* include/bits/localefwd.h (locale::_Impl::_M_remove_reference):\n\tCorrect decrement.\n\t* src/localename.cc (locale::_Impl): Correct ctor initialization\n\tlists. Initialize ref count with one. Simplify.\n\t* src/locale.cc: Add comment.\n\t* testsuite/22_locale/numpunct.cc (test01): Add derivation test.\n\t* testsuite/22_locale/numpunct_char_members.cc (test01): Add tests.\n\t* testsuite/22_locale/members.cc (test02): Fix.\n\nFrom-SVN: r43661", "tree": {"sha": "995ded702483dea4d437f12cb2404f0b4cc96c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/995ded702483dea4d437f12cb2404f0b4cc96c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13f83598b3043f628ed46297dd49f5c0ef46ffa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f83598b3043f628ed46297dd49f5c0ef46ffa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f83598b3043f628ed46297dd49f5c0ef46ffa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f83598b3043f628ed46297dd49f5c0ef46ffa8/comments", "author": null, "committer": null, "parents": [{"sha": "8f1ae09ac2d66b503fa48b09dc3780180650224e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1ae09ac2d66b503fa48b09dc3780180650224e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1ae09ac2d66b503fa48b09dc3780180650224e"}], "stats": {"total": 154, "additions": 98, "deletions": 56}, "files": [{"sha": "a5af915002e6720b2ffa890483f44eccdd77ceb6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -1,3 +1,16 @@\n+2001-06-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc (locale::combine): Clone _Impl.\n+\tbefore replacing facet.\n+\t* include/bits/localefwd.h (locale::_Impl::_M_remove_reference):\n+\tCorrect decrement.\n+\t* src/localename.cc (locale::_Impl): Correct ctor initialization\n+\tlists. Initialize ref count with one. Simplify.\n+\t* src/locale.cc: Add comment.\n+\t* testsuite/22_locale/numpunct.cc (test01): Add derivation test.\n+\t* testsuite/22_locale/numpunct_char_members.cc (test01): Add tests.\n+\t* testsuite/22_locale/members.cc (test02): Fix.\n+\n 2001-06-27  Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/backward/algo.h:  Add \"GPL plus runtime exception\" comment\n@@ -81,7 +94,7 @@\n \t* src/bitset.cc:  Likewise.\n \t* src/strstream.cc:  Likewise.\n \n-2001-06-26  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n+2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n \t                     <vakatov@ncbi.nlm.nih.gov>\n \n \tlibstdc++/3272"}, {"sha": "982914fb5f46e0955f5ad001835c529fd9ef63ed", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -42,16 +42,15 @@\n #include <typeinfo> \t\t// For bad_cast\n #include <bits/std_vector.h>\t\n \n-\n namespace std\n {\n   template<typename _Facet>\n     locale\n     locale::combine(const locale& __other)\n     {\n-      locale __copy(*this);\n-      __copy._M_impl->_M_replace_facet(__other._M_impl, &_Facet::id);\n-      return __copy;\n+      _Impl* __tmp = new _Impl(*_M_impl, 1);\n+      __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n+      return locale(__tmp);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "da84110746ef515e05f6ff88575adccf948ee619", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -326,7 +326,7 @@ namespace std\n     inline void \n     _M_remove_reference() throw()\n     {\n-      if (_M_references-- == 0)  // XXX MT\n+      if (--_M_references == 0)  // XXX MT\n \t{\n \t  try \n \t    { delete this; } "}, {"sha": "de4f983814886951d725d289c35fe7f88bc7b183", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -362,6 +362,7 @@ namespace std\n   locale::locale(const locale& __other) throw()\n   { (_M_impl = __other._M_impl)->_M_add_reference(); }\n \n+  // This is used to initialize global and classic locales.\n   locale::locale(_Impl* __ip) throw()\n   : _M_impl(__ip)\n   { __ip->_M_add_reference(); }"}, {"sha": "ff98ee3202f6667699aa96febbe4c641febd48f9", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -47,7 +47,7 @@ namespace std\n   // Clone existing _Impl object.\n   locale::_Impl::\n   _Impl(const _Impl& __imp, size_t __refs)\n-  : _M_references(__refs - 1), _M_facets(0), _M_c_locale(0) // XXX\n+  : _M_references(__refs), _M_facets(0), _M_c_locale(0) // XXX\n   {\n     try\n       {  _M_facets = new __vec_facet(*(__imp._M_facets)); }\n@@ -69,7 +69,7 @@ namespace std\n   // Construct named _Impl, including the standard \"C\" locale.\n   locale::_Impl::\n   _Impl(string __str, size_t __refs)\n-  : _M_references(__refs - 1), _M_facets(0)\n+  : _M_references(__refs), _M_facets(0)\n   {\n     // Initialize the underlying locale model, which also checks to\n     // see if the given name is valid.\n@@ -184,8 +184,7 @@ namespace std\n \t    // Replacing an existing facet.\n \t    // Order matters, here:\n \t    __fp->_M_add_reference();\n-\t    if (__fpr) \n-\t      __fpr->_M_remove_reference();\n+\t    __fpr->_M_remove_reference();\n \t    __fpr = __fp;\n \t  }\n \telse\n@@ -198,4 +197,3 @@ namespace std\n       }\n   }\n } // namespace std\n-"}, {"sha": "adee6196ae9bf7a1137502a98815613b1eafc8c8", "filename": "libstdc++-v3/testsuite/22_locale/members.cc", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmembers.cc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -86,46 +86,47 @@ test02()\n   VERIFY( loc_2 != loc_c );\n \n   // extract facet\n-  const numpunct<char>&\tf_nump_1 = use_facet<numpunct<char> >(loc_1); \n-  const numpunct<char>&\tf_nump_2 = use_facet<numpunct<char> >(loc_2); \n-  const numpunct<char>&\tf_nump_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>&\tf_nump_fr = use_facet<numpunct<char> >(loc_fr); \n+  const numpunct<char>&\tnump_1 = use_facet<numpunct<char> >(loc_1); \n+  const numpunct<char>&\tnump_2 = use_facet<numpunct<char> >(loc_2); \n+  const numpunct<char>&\tnump_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>&\tnump_fr = use_facet<numpunct<char> >(loc_fr); \n \n   // sanity check the data is correct.\n-  char dp1 = f_nump_c.decimal_point();\n-  char th1 = f_nump_c.thousands_sep();\n-  string g1 = f_nump_c.grouping();\n-  string t1 = f_nump_c.truename();\n-  string f1 = f_nump_c.falsename();\n-\n-  char dp2 = f_nump_1.decimal_point();\n-  char th2 = f_nump_1.thousands_sep();\n-  string g2 = f_nump_1.grouping();\n-  string t2 = f_nump_1.truename();\n-  string f2 = f_nump_1.falsename();\n-\n-  char dp3 = f_nump_2.decimal_point();\n-  char th3 = f_nump_2.thousands_sep();\n-  string g3 = f_nump_2.grouping();\n-  string t3 = f_nump_2.truename();\n-  string f3 = f_nump_2.falsename();\n-\n-  char dp4 = f_nump_fr.decimal_point();\n-  char th4 = f_nump_fr.thousands_sep();\n-  string g4 = f_nump_fr.grouping();\n-  string t4 = f_nump_fr.truename();\n-  string f4 = f_nump_fr.falsename();\n-\n-#if 0\n-  // XXX these should not be the same if named locales are working correctly.\n+  char dp1 = nump_c.decimal_point();\n+  char th1 = nump_c.thousands_sep();\n+  string g1 = nump_c.grouping();\n+  string t1 = nump_c.truename();\n+  string f1 = nump_c.falsename();\n+\n+  char dp2 = nump_1.decimal_point();\n+  char th2 = nump_1.thousands_sep();\n+  string g2 = nump_1.grouping();\n+  string t2 = nump_1.truename();\n+  string f2 = nump_1.falsename();\n+\n+  char dp3 = nump_2.decimal_point();\n+  char th3 = nump_2.thousands_sep();\n+  string g3 = nump_2.grouping();\n+  string t3 = nump_2.truename();\n+  string f3 = nump_2.falsename();\n+\n+  char dp4 = nump_fr.decimal_point();\n+  char th4 = nump_fr.thousands_sep();\n+  string g4 = nump_fr.grouping();\n+  string t4 = nump_fr.truename();\n+  string f4 = nump_fr.falsename();\n   VERIFY( dp1 != dp2 );\n   VERIFY( th1 != th2 );\n-#endif\n \n   VERIFY( dp1 == dp3 );\n   VERIFY( th1 == th3 );\n   VERIFY( t1 == t3 );\n   VERIFY( f1 == f3 );\n+\n+  VERIFY( dp2 == dp4 );\n+  VERIFY( th2 == th4 );\n+  VERIFY( t2 == t4 );\n+  VERIFY( f2 == f4 );\n }\n \n "}, {"sha": "6e281b023edf729516212f611ead9fd5c710b486", "filename": "libstdc++-v3/testsuite/22_locale/numpunct.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct.cc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -22,13 +22,27 @@\n \n #include <locale>\n \n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::numpunct<char> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+}\n+\n // Should be able to instantiate this for other types besides char, wchar_t\n class gnu_numpunct: public std::numpunct<unsigned char> \n { };\n \n-\n-int main() \n+void test02()\n { \n   gnu_numpunct facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n   return 0;\n }"}, {"sha": "803097710be7cf64f9d0ccc7a9a6dd5b4232a636", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_char_members.cc", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f83598b3043f628ed46297dd49f5c0ef46ffa8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_char_members.cc?ref=13f83598b3043f628ed46297dd49f5c0ef46ffa8", "patch": "@@ -42,19 +42,19 @@ void test01()\n   str = loc_fr.name();\n   VERIFY( loc_c != loc_fr );\n \n-  VERIFY( loc_us != loc_fr );\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+  VERIFY( loc_c != loc_de );\n \n-  locale loc_combo(loc_us, loc_fr, locale::numeric);\n-  str = loc_combo.name();\n-  VERIFY( loc_combo != loc_fr );\n-  VERIFY( loc_combo != loc_us );\n-  VERIFY( loc_combo != loc_c );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n \n   // cache the numpunct facets\n   const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n   const numpunct<char>& nump_us = use_facet<numpunct<char> >(loc_us); \n   const numpunct<char>& nump_fr = use_facet<numpunct<char> >(loc_fr); \n-  const numpunct<char>& nump_combo = use_facet<numpunct<char> >(loc_combo); \n+  const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n \n   // sanity check the data is correct.\n   char dp1 = nump_c.decimal_point();\n@@ -75,11 +75,27 @@ void test01()\n   string t3 = nump_fr.truename();\n   string f3 = nump_fr.falsename();\n \n-  char dp4 = nump_combo.decimal_point();\n-  char th4 = nump_combo.thousands_sep();\n-  string g4 = nump_combo.grouping();\n-  string t4 = nump_combo.truename();\n-  string f4 = nump_combo.falsename();\n+  char dp4 = nump_de.decimal_point();\n+  char th4 = nump_de.thousands_sep();\n+  string g4 = nump_de.grouping();\n+  string t4 = nump_de.truename();\n+  string f4 = nump_de.falsename();\n+\n+  VERIFY( dp2 != dp3 );\n+  VERIFY( th2 != th3 );\n+#if 0\n+  // XXX isn't actually supported right now.\n+  VERIFY( t2 != t3 );\n+  VERIFY( f2 != f3 );\n+#endif\n+\n+  VERIFY( dp2 != dp4 );\n+  VERIFY( th2 != th4 );\n+#if 0\n+  // XXX isn't actually supported right now.\n+  VERIFY( t2 != t3 );\n+  VERIFY( f2 != f3 );\n+#endif\n }\n \n int main()"}]}