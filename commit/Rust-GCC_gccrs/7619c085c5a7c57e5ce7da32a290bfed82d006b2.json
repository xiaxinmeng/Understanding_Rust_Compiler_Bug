{"sha": "7619c085c5a7c57e5ce7da32a290bfed82d006b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxOWMwODVjNWE3YzU3ZTVjZTdkYTMyYTI5MGJmZWQ4MmQwMDZiMg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2004-06-25T21:24:21Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2004-06-25T21:24:21Z"}, "message": "c-common.h (warn_cast_qual, [...]): Remove explicit declarations.\n\n* c-common.h (warn_cast_qual, warn_missing_format_attribute,\nwarn_pointer_arith, warn_missing_prototypes, warn_parentheses,\nwarn_missing_braces, warn_sign_compare, warn_long_long,\nwarn_redundant_decls, warn_float_equal, warn_char_subscripts,\nwarn_conversion, warn_format_y2k, warn_format_extra_args,\nwarn_format_zero_length, warn_format_nonliteral,\nwarn_format_security, mesg_implicit_function_declaration,\nwarn_bad_function_cast, warn_traditional,\nwarn_declaration_after_statement, warn_strict_prototypes,\nwarn_missing_declarations, warn_nested_externs,\nwarn_sequence_point, warn_init_self, warn_div_by_zero,\nwarn_implicit_int, warn_nonnull, warn_old_style_definition,\nwarn_selector, warn_undeclared_selector, warn_protocol,\nwarn_abi, warn_invalid_offsetof, warn_ctor_dtor_privacy,\nwarn_overloaded_virtual, warn_nonvdtor, warn_reorder,\nwarn_synth, warn_pmf2ptr, warn_ecpp, warn_sign_promo,\nwarn_old_style_cast, warn_nontemplate_friend,\nwarn_deprecated): Remove explicit declarations.\n* c-common.c: Likewise, remove explicit definitions.\n* c-opts.c: Likewise, remove explicit assignments.\n* c.opts: Likewise, add implicit declare/define/assign.\n\nFrom-SVN: r83680", "tree": {"sha": "cff9a63bfecea7018da48a2aefd09f4fe8e000fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff9a63bfecea7018da48a2aefd09f4fe8e000fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7619c085c5a7c57e5ce7da32a290bfed82d006b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7619c085c5a7c57e5ce7da32a290bfed82d006b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7619c085c5a7c57e5ce7da32a290bfed82d006b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7619c085c5a7c57e5ce7da32a290bfed82d006b2/comments", "author": null, "committer": null, "parents": [{"sha": "af72267c7201ac7b0c3e4a90721bfc9bac0e4787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af72267c7201ac7b0c3e4a90721bfc9bac0e4787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af72267c7201ac7b0c3e4a90721bfc9bac0e4787"}], "stats": {"total": 726, "additions": 76, "deletions": 650}, "files": [{"sha": "f015ca46904b75cdc0dfa1d043fbea028bda6e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7619c085c5a7c57e5ce7da32a290bfed82d006b2", "patch": "@@ -1,3 +1,27 @@\n+2004-06-25  DJ Delorie  <dj@redhat.com>\n+\n+\t* c-common.h (warn_cast_qual, warn_missing_format_attribute,\n+\twarn_pointer_arith, warn_missing_prototypes, warn_parentheses,\n+\twarn_missing_braces, warn_sign_compare, warn_long_long,\n+\twarn_redundant_decls, warn_float_equal, warn_char_subscripts,\n+\twarn_conversion, warn_format_y2k, warn_format_extra_args,\n+\twarn_format_zero_length, warn_format_nonliteral,\n+\twarn_format_security, mesg_implicit_function_declaration,\n+\twarn_bad_function_cast, warn_traditional,\n+\twarn_declaration_after_statement, warn_strict_prototypes,\n+\twarn_missing_declarations, warn_nested_externs,\n+\twarn_sequence_point, warn_init_self, warn_div_by_zero,\n+\twarn_implicit_int, warn_nonnull, warn_old_style_definition,\n+\twarn_selector, warn_undeclared_selector, warn_protocol,\n+\twarn_abi, warn_invalid_offsetof, warn_ctor_dtor_privacy,\n+\twarn_overloaded_virtual, warn_nonvdtor, warn_reorder,\n+\twarn_synth, warn_pmf2ptr, warn_ecpp, warn_sign_promo,\n+\twarn_old_style_cast, warn_nontemplate_friend,\n+\twarn_deprecated): Remove explicit declarations.\n+\t* c-common.c: Likewise, remove explicit definitions.\n+\t* c-opts.c: Likewise, remove explicit assignments.\n+\t* c.opts: Likewise, add implicit declare/define/assign.\n+\n 2004-06-25  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gimplify.c (lookup_tmp_var): Set TREE_READONLY in is_formal case."}, {"sha": "0edbd5f7925ccb3a65ce2992422de0c3e4084bb8", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 215, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7619c085c5a7c57e5ce7da32a290bfed82d006b2", "patch": "@@ -268,65 +268,11 @@ int flag_const_strings;\n int flag_signed_bitfields = 1;\n int explicit_flag_signed_bitfields;\n \n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-int warn_cast_qual;\n-\n-/* Warn about functions which might be candidates for format attributes.  */\n-\n-int warn_missing_format_attribute;\n-\n-/* Nonzero means warn about sizeof(function) or addition/subtraction\n-   of function pointers.  */\n-\n-int warn_pointer_arith;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous prototype decl.  */\n-\n-int warn_missing_prototypes;\n-\n-/* Warn if adding () is suggested.  */\n-\n-int warn_parentheses;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-int warn_missing_braces;\n-\n-/* Warn about comparison of signed and unsigned values.\n-   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified\n-   (in which case -Wextra gets to decide).  */\n-\n-int warn_sign_compare = -1;\n-\n-/* Nonzero means warn about usage of long long when `-pedantic'.  */\n-\n-int warn_long_long = 1;\n-\n /* Nonzero means warn about deprecated conversion from string constant to\n    `char *'.  */\n \n int warn_write_strings;\n \n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-int warn_redundant_decls;\n-\n-/* Warn about testing equality of floating point numbers.  */\n-\n-int warn_float_equal;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-int warn_char_subscripts;\n-\n-/* Warn if a type conversion is done that might have confusing results.  */\n-\n-int warn_conversion;\n-\n /* Warn about #pragma directives that are not recognized.  */\n \n int warn_unknown_pragmas; /* Tri state variable.  */\n@@ -336,26 +282,6 @@ int warn_unknown_pragmas; /* Tri state variable.  */\n \n int warn_format;\n \n-/* Warn about Y2K problems with strftime formats.  */\n-\n-int warn_format_y2k;\n-\n-/* Warn about excess arguments to formats.  */\n-\n-int warn_format_extra_args;\n-\n-/* Warn about zero-length formats.  */\n-\n-int warn_format_zero_length;\n-\n-/* Warn about non-literal format arguments.  */\n-\n-int warn_format_nonliteral;\n-\n-/* Warn about possible security problems with calls to format functions.  */\n-\n-int warn_format_security;\n-\n /* Zero means that faster, ...NonNil variants of objc_msgSend...\n    calls will be used in ObjC; passing nil receivers to such calls\n    will most likely result in crashes.  */\n@@ -381,11 +307,6 @@ int flag_replace_objc_classes = 0;\n /* C/ObjC language option variables.  */\n \n \n-/* Nonzero means message about use of implicit function declarations;\n- 1 means warning; 2 means error.  */\n-\n-int mesg_implicit_function_declaration = -1;\n-\n /* Nonzero means allow type mismatches in conditional expressions;\n    just make their values `void'.  */\n \n@@ -403,67 +324,10 @@ int flag_isoc99;\n \n int flag_hosted = 1;\n \n-/* Nonzero means warn when casting a function call to a type that does\n-   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n-   when there is no previous declaration of sqrt or malloc.  */\n-\n-int warn_bad_function_cast;\n-\n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-int warn_traditional;\n-\n-/* Nonzero means warn for a declaration found after a statement.  */\n-\n-int warn_declaration_after_statement;\n-\n-/* Nonzero means warn for non-prototype function decls\n-   or non-prototyped defs without previous prototype.  */\n-\n-int warn_strict_prototypes;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous decl.  */\n-\n-int warn_missing_declarations;\n-\n-/* Nonzero means warn about declarations of objects not at\n-   file-scope level and about *all* declarations of functions (whether\n-   or static) not at file-scope level.  Note that we exclude\n-   implicit function declarations.  To get warnings about those, use\n-   -Wimplicit.  */\n-\n-int warn_nested_externs;\n-\n /* Warn if main is suspicious.  */\n \n int warn_main;\n \n-/* Nonzero means warn about possible violations of sequence point rules.  */\n-\n-int warn_sequence_point;\n-\n-/* Nonzero means warn about uninitialized variable when it is initialized with itself.\n-   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero.  */\n-\n-int warn_init_self;\n-\n-/* Nonzero means to warn about compile-time division by zero.  */\n-int warn_div_by_zero = 1;\n-\n-/* Nonzero means warn about use of implicit int.  */\n-\n-int warn_implicit_int;\n-\n-/* Warn about NULL being passed to argument slots marked as requiring\n-   non-NULL.  */\n-\n-int warn_nonnull;\n-\n-/* Warn about old-style parameter declaration.  */\n-\n-int warn_old_style_definition;\n-\n \n /* ObjC language option variables.  */\n \n@@ -491,25 +355,6 @@ int print_struct_values;\n \n const char *constant_string_class_name;\n \n-/* Warn if multiple methods are seen for the same selector, but with\n-   different argument types.  Performs the check on the whole selector\n-   table at the end of compilation.  */\n-\n-int warn_selector;\n-\n-/* Warn if a @selector() is found, and no method with that selector\n-   has been previously declared.  The check is done on each\n-   @selector() as soon as it is found - so it warns about forward\n-   declarations.  */\n-\n-int warn_undeclared_selector;\n-\n-/* Warn if methods required by a protocol are not implemented in the\n-   class adopting it.  When turned off, methods inherited to that\n-   class are also considered implemented.  */\n-\n-int warn_protocol = 1;\n-\n \n /* C++ language option variables.  */\n \n@@ -612,70 +457,10 @@ int flag_permissive;\n \n int flag_enforce_eh_specs = 1;\n \n-/* Nonzero means warn about things that will change when compiling\n-   with an ABI-compliant compiler.  */\n-\n-int warn_abi = 0;\n-\n-/* Nonzero means warn about invalid uses of offsetof.  */\n-\n-int warn_invalid_offsetof = 1;\n-\n /* Nonzero means warn about implicit declarations.  */\n \n int warn_implicit = 1;\n \n-/* Nonzero means warn when all ctors or dtors are private, and the class\n-   has no friends.  */\n-\n-int warn_ctor_dtor_privacy = 0;\n-\n-/* Nonzero means warn in function declared in derived class has the\n-   same name as a virtual in the base class, but fails to match the\n-   type signature of any virtual function in the base class.  */\n-\n-int warn_overloaded_virtual;\n-\n-/* Nonzero means warn when declaring a class that has a non virtual\n-   destructor, when it really ought to have a virtual one.  */\n-\n-int warn_nonvdtor;\n-\n-/* Nonzero means warn when the compiler will reorder code.  */\n-\n-int warn_reorder;\n-\n-/* Nonzero means warn when synthesis behavior differs from Cfront's.  */\n-\n-int warn_synth;\n-\n-/* Nonzero means warn when we convert a pointer to member function\n-   into a pointer to (void or function).  */\n-\n-int warn_pmf2ptr = 1;\n-\n-/* Nonzero means warn about violation of some Effective C++ style rules.  */\n-\n-int warn_ecpp;\n-\n-/* Nonzero means warn where overload resolution chooses a promotion from\n-   unsigned to signed over a conversion to an unsigned of the same size.  */\n-\n-int warn_sign_promo;\n-\n-/* Nonzero means warn when an old-style cast is used.  */\n-\n-int warn_old_style_cast;\n-\n-/* Nonzero means warn when non-templatized friend functions are\n-   declared within a template */\n-\n-int warn_nontemplate_friend = 1;\n-\n-/* Nonzero means complain about deprecated features.  */\n-\n-int warn_deprecated = 1;\n-\n /* Maximum template instantiation depth.  This limit is rather\n    arbitrary, but it exists to limit the time it takes to notice\n    infinite template instantiations.  */"}, {"sha": "ae5fbb690bc6dfd20e1a7e30f18ee663e4abe3a0", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 215, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7619c085c5a7c57e5ce7da32a290bfed82d006b2", "patch": "@@ -403,64 +403,11 @@ extern int flag_const_strings;\n extern int flag_signed_bitfields;\n extern int explicit_flag_signed_bitfields;\n \n-/* Nonzero means warn about pointer casts that can drop a type qualifier\n-   from the pointer target type.  */\n-\n-extern int warn_cast_qual;\n-\n-/* Warn about functions which might be candidates for format attributes.  */\n-\n-extern int warn_missing_format_attribute;\n-\n-/* Nonzero means warn about sizeof(function) or addition/subtraction\n-   of function pointers.  */\n-\n-extern int warn_pointer_arith;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous prototype decl.  */\n-\n-extern int warn_missing_prototypes;\n-\n-/* Warn if adding () is suggested.  */\n-\n-extern int warn_parentheses;\n-\n-/* Warn if initializer is not completely bracketed.  */\n-\n-extern int warn_missing_braces;\n-\n-/* Warn about comparison of signed and unsigned values.\n-   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n-\n-extern int warn_sign_compare;\n-\n-/* Nonzero means warn about usage of long long when `-pedantic'.  */\n-\n-extern int warn_long_long;\n-\n /* Nonzero means warn about deprecated conversion from string constant to\n    `char *'.  */\n \n extern int warn_write_strings;\n \n-/* Nonzero means warn about multiple (redundant) decls for the same single\n-   variable or function.  */\n-\n-extern int warn_redundant_decls;\n-\n-/* Warn about testing equality of floating point numbers.  */\n-\n-extern int warn_float_equal;\n-\n-/* Warn about a subscript that has type char.  */\n-\n-extern int warn_char_subscripts;\n-\n-/* Warn if a type conversion is done that might have confusing results.  */\n-\n-extern int warn_conversion;\n-\n /* Warn about #pragma directives that are not recognized.  */      \n \n extern int warn_unknown_pragmas; /* Tri state variable.  */  \n@@ -470,35 +417,10 @@ extern int warn_unknown_pragmas; /* Tri state variable.  */\n \n extern int warn_format;\n \n-/* Warn about Y2K problems with strftime formats.  */\n-\n-extern int warn_format_y2k;\n-\n-/* Warn about excess arguments to formats.  */\n-\n-extern int warn_format_extra_args;\n-\n-/* Warn about zero-length formats.  */\n-\n-extern int warn_format_zero_length;\n-\n-/* Warn about non-literal format arguments.  */\n-\n-extern int warn_format_nonliteral;\n-\n-/* Warn about possible security problems with calls to format functions.  */\n-\n-extern int warn_format_security;\n-\n \n /* C/ObjC language option variables.  */\n \n \n-/* Nonzero means message about use of implicit function declarations;\n- 1 means warning; 2 means error.  */\n-\n-extern int mesg_implicit_function_declaration;\n-\n /* Nonzero means allow type mismatches in conditional expressions;\n    just make their values `void'.  */\n \n@@ -516,68 +438,10 @@ extern int flag_isoc99;\n \n extern int flag_hosted;\n \n-/* Nonzero means warn when casting a function call to a type that does\n-   not match the return type (e.g. (float)sqrt() or (anything*)malloc()\n-   when there is no previous declaration of sqrt or malloc.  */\n-\n-extern int warn_bad_function_cast;\n-\n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-extern int warn_traditional;\n-\n-/* Nonzero means warn for a declaration found after a statement.  */\n-\n-extern int warn_declaration_after_statement;\n-\n-/* Nonzero means warn for non-prototype function decls\n-   or non-prototyped defs without previous prototype.  */\n-\n-extern int warn_strict_prototypes;\n-\n-/* Nonzero means warn for any global function def\n-   without separate previous decl.  */\n-\n-extern int warn_missing_declarations;\n-\n-/* Nonzero means warn about extern declarations of objects not at\n-   file-scope level and about *all* declarations of functions (whether\n-   extern or static) not at file-scope level.  Note that we exclude\n-   implicit function declarations.  To get warnings about those, use\n-   -Wimplicit.  */\n-\n-extern int warn_nested_externs;\n-\n /* Warn if main is suspicious.  */\n \n extern int warn_main;\n \n-/* Nonzero means warn about possible violations of sequence point rules.  */\n-\n-extern int warn_sequence_point;\n-\n-/* Nonzero means warn about uninitialized variable when it is initialized with itself. \n-   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero.  */\n-\n-extern int warn_init_self;\n-\n-\n-/* Nonzero means to warn about compile-time division by zero.  */\n-extern int warn_div_by_zero;\n-\n-/* Nonzero means warn about use of implicit int.  */\n-\n-extern int warn_implicit_int;\n-\n-/* Warn about NULL being passed to argument slots marked as requiring\n-   non-NULL.  */ \n-      \n-extern int warn_nonnull;\n-\n-/* Warn about old-style parameter declaration.  */\n-\n-extern int warn_old_style_definition;\n-\n \n /* ObjC language option variables.  */\n \n@@ -601,25 +465,6 @@ extern int print_struct_values;\n \n extern const char *constant_string_class_name;\n \n-/* Warn if multiple methods are seen for the same selector, but with\n-   different argument types.  Performs the check on the whole selector\n-   table at the end of compilation.  */\n-\n-extern int warn_selector;\n-\n-/* Warn if a @selector() is found, and no method with that selector\n-   has been previously declared.  The check is done on each\n-   @selector() as soon as it is found - so it warns about forward\n-   declarations.  */\n-\n-extern int warn_undeclared_selector;\n-\n-/* Warn if methods required by a protocol are not implemented in the \n-   class adopting it.  When turned off, methods inherited to that\n-   class are also considered implemented.  */\n-\n-extern int warn_protocol;\n-\n \n /* C++ language option variables.  */\n \n@@ -722,70 +567,10 @@ extern int flag_permissive;\n \n extern int flag_enforce_eh_specs;\n \n-/* Nonzero means warn about things that will change when compiling\n-   with an ABI-compliant compiler.  */\n-\n-extern int warn_abi;\n-\n-/* Nonzero means warn about invalid uses of offsetof.  */\n- \n-extern int warn_invalid_offsetof;\n-\n /* Nonzero means warn about implicit declarations.  */\n \n extern int warn_implicit;\n \n-/* Nonzero means warn when all ctors or dtors are private, and the class\n-   has no friends.  */\n-\n-extern int warn_ctor_dtor_privacy;\n-\n-/* Nonzero means warn in function declared in derived class has the\n-   same name as a virtual in the base class, but fails to match the\n-   type signature of any virtual function in the base class.  */\n-\n-extern int warn_overloaded_virtual;\n-\n-/* Nonzero means warn when declaring a class that has a non virtual\n-   destructor, when it really ought to have a virtual one.  */\n-\n-extern int warn_nonvdtor;\n-\n-/* Nonzero means warn when the compiler will reorder code.  */\n-\n-extern int warn_reorder;\n-\n-/* Nonzero means warn when synthesis behavior differs from Cfront's.  */\n-\n-extern int warn_synth;\n-\n-/* Nonzero means warn when we convert a pointer to member function\n-   into a pointer to (void or function).  */\n-\n-extern int warn_pmf2ptr;\n-\n-/* Nonzero means warn about violation of some Effective C++ style rules.  */\n-\n-extern int warn_ecpp;\n-\n-/* Nonzero means warn where overload resolution chooses a promotion from\n-   unsigned to signed over a conversion to an unsigned of the same size.  */\n-\n-extern int warn_sign_promo;\n-\n-/* Nonzero means warn when an old-style cast is used.  */\n-\n-extern int warn_old_style_cast;\n-\n-/* Nonzero means warn when non-templatized friend functions are\n-   declared within a template */\n-\n-extern int warn_nontemplate_friend;\n-\n-/* Nonzero means complain about deprecated features.  */\n-\n-extern int warn_deprecated;\n-\n /* Maximum template instantiation depth.  This limit is rather\n    arbitrary, but it exists to limit the time it takes to notice\n    infinite template instantiations.  */"}, {"sha": "06b8ed0b0164c2cc55f32996aa0b9f260d7d9de1", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 174, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7619c085c5a7c57e5ce7da32a290bfed82d006b2", "patch": "@@ -260,6 +260,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n   switch (code)\n     {\n     default:\n+      if (cl_options[code].flags & (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX))\n+\tbreak;\n       result = permit_fortran_options;\n       break;\n \n@@ -359,10 +361,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       defer_opt (code, arg);\n       break;\n \n-    case OPT_Wabi:\n-      warn_abi = value;\n-      break;\n-\n     case OPT_Wall:\n       set_Wunused (value);\n       set_Wformat (value);\n@@ -405,48 +403,19 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->warn_multichar = value;\t/* Was C++ only.  */\n       break;\n \n-    case OPT_Wbad_function_cast:\n-      warn_bad_function_cast = value;\n-      break;\n-\n-    case OPT_Wcast_qual:\n-      warn_cast_qual = value;\n-      break;\n-\n-    case OPT_Wchar_subscripts:\n-      warn_char_subscripts = value;\n-      break;\n-\n     case OPT_Wcomment:\n     case OPT_Wcomments:\n       cpp_opts->warn_comments = value;\n       break;\n \n-    case OPT_Wconversion:\n-      warn_conversion = value;\n-      break;\n-\n-    case OPT_Wctor_dtor_privacy:\n-      warn_ctor_dtor_privacy = value;\n-      break;\n-\n-    case OPT_Wdeclaration_after_statement:\n-      warn_declaration_after_statement = value;\n-      break;\n-\n     case OPT_Wdeprecated:\n-      warn_deprecated = value;\n       cpp_opts->warn_deprecated = value;\n       break;\n \n     case OPT_Wdiv_by_zero:\n       warn_div_by_zero = value;\n       break;\n \n-    case OPT_Weffc__:\n-      warn_ecpp = value;\n-      break;\n-\n     case OPT_Wendif_labels:\n       cpp_opts->warn_endif_labels = value;\n       break;\n@@ -459,10 +428,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       mesg_implicit_function_declaration = 2;\n       break;\n \n-    case OPT_Wfloat_equal:\n-      warn_float_equal = value;\n-      break;\n-\n     case OPT_Wformat:\n       set_Wformat (value);\n       break;\n@@ -471,186 +436,49 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       set_Wformat (atoi (arg));\n       break;\n \n-    case OPT_Wformat_extra_args:\n-      warn_format_extra_args = value;\n-      break;\n-\n-    case OPT_Wformat_nonliteral:\n-      warn_format_nonliteral = value;\n-      break;\n-\n-    case OPT_Wformat_security:\n-      warn_format_security = value;\n-      break;\n-\n-    case OPT_Wformat_y2k:\n-      warn_format_y2k = value;\n-      break;\n-\n-    case OPT_Wformat_zero_length:\n-      warn_format_zero_length = value;\n-      break;\n-\n-    case OPT_Winit_self:\n-      warn_init_self = value;\n-      break;\n-\n     case OPT_Wimplicit:\n       set_Wimplicit (value);\n       break;\n \n-    case OPT_Wimplicit_function_declaration:\n-      mesg_implicit_function_declaration = value;\n-      break;\n-\n-    case OPT_Wimplicit_int:\n-      warn_implicit_int = value;\n-      break;\n-\n     case OPT_Wimport:\n       /* Silently ignore for now.  */\n       break;\n \n-    case OPT_Winvalid_offsetof:\n-      warn_invalid_offsetof = value;\n-      break;\n-\n     case OPT_Winvalid_pch:\n       cpp_opts->warn_invalid_pch = value;\n       break;\n \n-    case OPT_Wlong_long:\n-      warn_long_long = value;\n-      break;\n-\n     case OPT_Wmain:\n       if (value)\n \twarn_main = 1;\n       else\n \twarn_main = -1;\n       break;\n \n-    case OPT_Wmissing_braces:\n-      warn_missing_braces = value;\n-      break;\n-\n-    case OPT_Wmissing_declarations:\n-      warn_missing_declarations = value;\n-      break;\n-\n-    case OPT_Wmissing_format_attribute:\n-      warn_missing_format_attribute = value;\n-      break;\n-\n     case OPT_Wmissing_include_dirs:\n       cpp_opts->warn_missing_include_dirs = value;\n       break;\n \n-    case OPT_Wmissing_prototypes:\n-      warn_missing_prototypes = value;\n-      break;\n-\n     case OPT_Wmultichar:\n       cpp_opts->warn_multichar = value;\n       break;\n \n-    case OPT_Wnested_externs:\n-      warn_nested_externs = value;\n-      break;\n-\n-    case OPT_Wnon_template_friend:\n-      warn_nontemplate_friend = value;\n-      break;\n-\n-    case OPT_Wnon_virtual_dtor:\n-      warn_nonvdtor = value;\n-      break;\n-\n-    case OPT_Wnonnull:\n-      warn_nonnull = value;\n-      break;\n-\n-    case OPT_Wold_style_definition:\n-      warn_old_style_definition = value;\n-      break;\n-\n-    case OPT_Wold_style_cast:\n-      warn_old_style_cast = value;\n-      break;\n-\n-    case OPT_Woverloaded_virtual:\n-      warn_overloaded_virtual = value;\n-      break;\n-\n-    case OPT_Wparentheses:\n-      warn_parentheses = value;\n-      break;\n-\n-    case OPT_Wpmf_conversions:\n-      warn_pmf2ptr = value;\n-      break;\n-\n-    case OPT_Wpointer_arith:\n-      warn_pointer_arith = value;\n-      break;\n-\n-    case OPT_Wprotocol:\n-      warn_protocol = value;\n-      break;\n-\n-    case OPT_Wselector:\n-      warn_selector = value;\n-      break;\n-\n-    case OPT_Wredundant_decls:\n-      warn_redundant_decls = value;\n-      break;\n-\n-    case OPT_Wreorder:\n-      warn_reorder = value;\n-      break;\n-\n     case OPT_Wreturn_type:\n       warn_return_type = value;\n       break;\n \n-    case OPT_Wsequence_point:\n-      warn_sequence_point = value;\n-      break;\n-\n-    case OPT_Wsign_compare:\n-      warn_sign_compare = value;\n-      break;\n-\n-    case OPT_Wsign_promo:\n-      warn_sign_promo = value;\n-      break;\n-\n-    case OPT_Wstrict_prototypes:\n-      warn_strict_prototypes = value;\n-      break;\n-\n-    case OPT_Wsynth:\n-      warn_synth = value;\n-      break;\n-\n     case OPT_Wsystem_headers:\n       cpp_opts->warn_system_headers = value;\n       break;\n \n     case OPT_Wtraditional:\n-      warn_traditional = value;\n       cpp_opts->warn_traditional = value;\n       break;\n \n     case OPT_Wtrigraphs:\n       cpp_opts->warn_trigraphs = value;\n       break;\n \n-    case OPT_Wundeclared_selector:\n-      warn_undeclared_selector = value;\n-      break;\n-\n     case OPT_Wundef:\n       cpp_opts->warn_undef = value;\n       break;"}, {"sha": "464cab8466f856c04d0cda951a6cc85d887dbc08", "filename": "gcc/c.opt", "status": "modified", "additions": 50, "deletions": 46, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619c085c5a7c57e5ce7da32a290bfed82d006b2/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7619c085c5a7c57e5ce7da32a290bfed82d006b2", "patch": "@@ -157,22 +157,23 @@ C ObjC C++ ObjC++ Joined Separate\n -U<macro>\tUndefine <macro>\n \n Wabi\n-C++ ObjC++\n+C++ ObjC++ Var(warn_abi)\n+Warn about things that will change when compiling with an ABI-compliant compiler\n \n Wall\n C ObjC C++ ObjC++\n Enable most warning messages\n \n Wbad-function-cast\n-C ObjC\n+C ObjC Var(warn_bad_function_cast)\n Warn about casting functions to incompatible types\n \n Wcast-qual\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_cast_qual)\n Warn about casts which discard qualifiers\n \n Wchar-subscripts\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_char_subscripts)\n Warn about subscripts whose type is \\\"char\\\"\n \n Wcomment\n@@ -184,27 +185,27 @@ C ObjC C++ ObjC++\n Synonym for -Wcomment\n \n Wconversion\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_conversion)\n Warn about possibly confusing type conversions\n \n Wctor-dtor-privacy\n-C++ ObjC++\n+C++ ObjC++ Var(warn_ctor_dtor_privacy)\n Warn when all constructors and destructors are private\n \n Wdeclaration-after-statement\n-C ObjC\n+C ObjC Var(warn_declaration_after_statement)\n Warn when a declaration is found after a statement\n \n Wdeprecated\n-C++ ObjC++\n+C++ ObjC++ Var(warn_deprecated) Init(1)\n Warn about deprecated compiler features\n \n Wdiv-by-zero\n-C ObjC\n+C ObjC Var(warn_div_by_zero) Init(1)\n Warn about compile-time integer division by zero\n \n Weffc++\n-C++ ObjC++\n+C++ ObjC++ Var(warn_ecpp)\n Warn about violations of Effective C++ style rules\n \n Wendif-labels\n@@ -220,187 +221,190 @@ C ObjC RejectNegative\n Make implicit function declarations an error\n \n Wfloat-equal\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_float_equal)\n Warn if testing floating point numbers for equality\n \n Wformat\n C ObjC C++ ObjC++\n Warn about printf/scanf/strftime/strfmon format string anomalies\n \n Wformat-extra-args\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_format_extra_args)\n Warn if passing too many arguments to a function for its format string\n \n Wformat-nonliteral\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_format_nonliteral)\n Warn about format strings that are not literals\n \n Wformat-security\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_format_security)\n Warn about possible security problems with format functions\n \n Wformat-y2k\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_format_y2k)\n Warn about strftime formats yielding 2-digit years\n \n Wformat-zero-length\n-C ObjC\n+C ObjC Var(warn_format_zero_length)\n+Warn about zero-length formats\n \n Wformat=\n C ObjC C++ ObjC++ Joined\n \n Winit-self\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_init_self)\n Warn about variables which are initialized to themselves.\n \n Wimplicit\n C ObjC C++ ObjC++\n \n Wimplicit-function-declaration\n-C ObjC\n+C ObjC Var(mesg_implicit_function_declaration) Init(-1)\n Warn about implicit function declarations\n \n Wimplicit-int\n-C ObjC\n+C ObjC Var(warn_implicit_int)\n Warn when a declaration does not specify a type\n \n Wimport\n C ObjC C++ ObjC++\n Deprecated.  This switch has no effect.\n \n Winvalid-offsetof\n-C++ ObjC++\n+C++ ObjC++ Var(warn_invalid_offsetof) Init(1)\n Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n C ObjC C++ ObjC++\n Warn about PCH files that are found but not used\n \n Wlong-long\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_long_long) Init(1)\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n C ObjC\n Warn about suspicious declarations of \\\"main\\\"\n \n Wmissing-braces\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_missing_braces)\n Warn about possibly missing braces around initializers\n \n Wmissing-declarations\n-C ObjC\n+C ObjC Var(warn_missing_declarations)\n Warn about global functions without previous declarations\n \n Wmissing-format-attribute\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_missing_format_attribute)\n Warn about functions which might be candidates for format attributes\n \n Wmissing-include-dirs\n C ObjC C++ ObjC++\n Warn about user-specified include directories that do not exist\n \n Wmissing-prototypes\n-C ObjC\n+C ObjC Var(warn_missing_prototypes)\n Warn about global functions without prototypes\n \n Wmultichar\n C ObjC C++ ObjC++\n Warn about use of multi-character character constants\n \n Wnested-externs\n-C ObjC\n+C ObjC Var(warn_nested_externs)\n Warn about \\\"extern\\\" declarations not at file scope\n \n Wnon-template-friend\n-C++ ObjC++\n+C++ ObjC++ Var(warn_nontemplate_friend) Init(1)\n Warn when non-templatized friend functions are declared within a template\n \n Wnon-virtual-dtor\n-C++ ObjC++\n+C++ ObjC++ Var(warn_nonvdtor)\n Warn about non-virtual destructors\n \n Wnonnull\n-C ObjC\n+C ObjC Var(warn_nonnull)\n+Warn about NULL being passed to argument slots marked as requiring non-NULL\n \n Wold-style-cast\n-C++ ObjC++\n+C++ ObjC++ Var(warn_old_style_cast)\n Warn if a C-style cast is used in a program\n \n Wold-style-definition\n-C ObjC\n+C ObjC Var(warn_old_style_definition)\n Warn if an old-style parameter definition is used\n \n Woverloaded-virtual\n-C++ ObjC++\n+C++ ObjC++ Var(warn_overloaded_virtual)\n Warn about overloaded virtual function names\n \n Wparentheses\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_parentheses)\n Warn about possibly missing parentheses\n \n Wpmf-conversions\n-C++ ObjC++\n+C++ ObjC++ Var(warn_pmf2ptr) Init(1)\n Warn when converting the type of pointers to member functions\n \n Wpointer-arith\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_pointer_arith)\n Warn about function pointer arithmetic\n \n Wprotocol\n-ObjC ObjC++\n+ObjC ObjC++ Var(warn_protocol) Init(1)\n Warn if inherited methods are unimplemented\n \n Wredundant-decls\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_redundant_decls)\n Warn about multiple declarations of the same object\n \n Wreorder\n-C++ ObjC++\n+C++ ObjC++ Var(warn_reorder)\n Warn when the compiler reorders code\n \n Wreturn-type\n C ObjC C++ ObjC++\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)\n \n Wselector\n-ObjC ObjC++\n+ObjC ObjC++ Var(warn_selector)\n Warn if a selector has multiple methods\n \n Wsequence-point\n-C ObjC\n+C ObjC Var(warn_sequence_point)\n Warn about possible violations of sequence point rules\n \n Wsign-compare\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1)\n Warn about signed-unsigned comparisons\n \n Wsign-promo\n-C++ ObjC++\n+C++ ObjC++ Var(warn_sign_promo)\n Warn when overload promotes from unsigned to signed\n \n Wstrict-prototypes\n-C ObjC\n+C ObjC Var(warn_strict_prototypes)\n Warn about unprototyped function declarations\n \n Wsynth\n-C++ ObjC++\n+C++ ObjC++ Var(warn_synth)\n Warn when synthesis behavior differs from Cfront\n \n Wsystem-headers\n C ObjC C++ ObjC++\n Do not suppress warnings from system headers\n \n Wtraditional\n-C ObjC\n+C ObjC Var(warn_traditional)\n Warn about features not present in traditional C\n \n Wtrigraphs\n C ObjC C++ ObjC++\n Warn if trigraphs are encountered that might affect the meaning of the program\n \n Wundeclared-selector\n-ObjC ObjC++\n+ObjC ObjC++ Var(warn_undeclared_selector)\n+Warn about @selector()s without previously declared methods\n \n Wundef\n C ObjC C++ ObjC++"}]}