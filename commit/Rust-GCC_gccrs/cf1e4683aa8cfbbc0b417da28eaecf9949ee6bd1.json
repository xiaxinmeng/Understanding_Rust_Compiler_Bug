{"sha": "cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxZTQ2ODNhYThjZmJiYzBiNDE3ZGEyOGVhZWNmOTk0OWVlNmJkMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-11T15:44:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-11T15:44:54Z"}, "message": "alpha.md (DWI): New mode attribute.\n\n\t* config/alpha/alpha.md (DWI): New mode attribute.\n\t(*sadd<modesuffix>): Macroize insn from *saddl and *saddq using\n\tI48MODE mode iterator.\n\t(addv<mode>3): Macroize insn from addvsi3 and addvdi3 using\n\tI48MODE mode iterator.\n\t(neg<mode>2): Macroize insn from negsi2 and negdi2 using\n\tI48MODE mode iterator.\n\t(negv<mode>2): Macroize insn from negvsi2 and negvdi2 using\n\tI48MODE mode iterator.\n\t(sub<mode>3): Macroize insn from subsi3 and subdi3 using\n\tI48MODE mode iterator.\n\t(*ssub<modesuffix>): Macroize insn from *ssubl and *ssubq using\n\tI48MODE mode iterator.\n\t(subv<mode>3): Macroize insn from subvsi3 and subvdi3 using\n\tI48MODE mode iterator.\n\t(mul<mode>3): Macroize insn from mulsi3 and muldi3 using\n\tI48MODE mode iterator.\n\t(mulv<mode>3): Macroize insn from mulvsi3 and mulvdi3 using\n\tI48MODE mode iterator.\n\t(*iornot<mode>3): Macroize insn from *iornotsi3 and *iornotdi3 using\n\tI48MODE mode iterator.\n\t(*xornot<mode>3): Macroize insn from *xornotsi3 and *xornotdi3 using\n\tI48MODE mode iterator.\n\nFrom-SVN: r192370", "tree": {"sha": "ce960b96c7f568a1487dc862b0292598dbe87645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce960b96c7f568a1487dc862b0292598dbe87645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1/comments", "author": null, "committer": null, "parents": [{"sha": "21a092a900f1e8515324d6adba05be05cf743b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a092a900f1e8515324d6adba05be05cf743b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a092a900f1e8515324d6adba05be05cf743b63"}], "stats": {"total": 303, "additions": 115, "deletions": 188}, "files": [{"sha": "1509897e762ec6c0d60e6ebd75e1607734d96c6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "patch": "@@ -1,3 +1,29 @@\n+2012-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md (DWI): New mode attribute.\n+\t(*sadd<modesuffix>): Macroize insn from *saddl and *saddq using\n+\tI48MODE mode iterator.\n+\t(addv<mode>3): Macroize insn from addvsi3 and addvdi3 using\n+\tI48MODE mode iterator.\n+\t(neg<mode>2): Macroize insn from negsi2 and negdi2 using\n+\tI48MODE mode iterator.\n+\t(negv<mode>2): Macroize insn from negvsi2 and negvdi2 using\n+\tI48MODE mode iterator.\n+\t(sub<mode>3): Macroize insn from subsi3 and subdi3 using\n+\tI48MODE mode iterator.\n+\t(*ssub<modesuffix>): Macroize insn from *ssubl and *ssubq using\n+\tI48MODE mode iterator.\n+\t(subv<mode>3): Macroize insn from subvsi3 and subvdi3 using\n+\tI48MODE mode iterator.\n+\t(mul<mode>3): Macroize insn from mulsi3 and muldi3 using\n+\tI48MODE mode iterator.\n+\t(mulv<mode>3): Macroize insn from mulvsi3 and mulvdi3 using\n+\tI48MODE mode iterator.\n+\t(*iornot<mode>3): Macroize insn from *iornotsi3 and *iornotdi3 using\n+\tI48MODE mode iterator.\n+\t(*xornot<mode>3): Macroize insn from *xornotsi3 and *xornotdi3 using\n+\tI48MODE mode iterator.\n+\n 2012-10-11  Jason Merrill  <jason@redhat.com>\n \n \t* configure.ac (gcc_cv_as_aix_ref): Fix typo.\n@@ -97,8 +123,7 @@\n \n 2012-10-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n-\t* config/rs6000/rs6000.h (PRINT_OPERAND_PUNCT_VALID_P):\n-\tDelete '.'.\n+\t* config/rs6000/rs6000.h (PRINT_OPERAND_PUNCT_VALID_P): Delete '.'.\n \n 2012-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -118,8 +143,7 @@\n \t(lto_write_tree): Adjust.\n \t(output_eh_region): Likewise.\n \t(output_struct_function_base): Likewise.\n-\t* lto-streamer.c (lto_streamer_hooks_init): Initialize location\n-\thooks.\n+\t* lto-streamer.c (lto_streamer_hooks_init): Initialize location hooks.\n \t* lto-streamer.h (lto_input_location): Adjust prototype.\n \t(lto_output_location): Likewise.\n \t* streamer-hooks.h (struct streamer_hooks): Adjust prototype\n@@ -200,8 +224,7 @@\n \t(rs6000_print_options_internal): New function for expanded\n \t-mdebug=reg option printing to print both the ISA options, and the\n \tbuiltins that are enabled.\n-\t(rs6000_print_isa_options): New function to print the ISA\n-\toptions.\n+\t(rs6000_print_isa_options): New function to print the ISA options.\n \t(rs6000_print_builtin_options): New function to print the builtin\n \tfunctions enabled.\n \n@@ -240,7 +263,7 @@\n 2012-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config.gcc: Enable zEC12 for with-arch and with-tune\n-          configure switches.\n+\tconfigure switches.\n \t* common/config/s390/s390-common.c (processor_flags_table): Add\n \tzEC12 entry.\n \t* config/s390/2827.md: New file.\n@@ -253,8 +276,7 @@\n \tSet parameter defaults for zEC12.\n \t(legitimate_reload_fp_constant_p): Adjust comment.\n \t(preferred_la_operand_p): Adjust comment.\n-\t(s390_expand_insv): Generate insv pattern without CC clobber for\n-\tzEC12.\n+\t(s390_expand_insv): Generate insv pattern without CC clobber for zEC12.\n \t(s390_adjust_priority): Add zEC12 check.\n \t(s390_issue_rate): Return 2 for zEC12.\n \t(s390_reorg): Enable code optimizations for zEC12.\n@@ -282,8 +304,10 @@\n \t(*movsf_insn): Likewise.\n \t(*movdf_insn_sp64): Likewise.\n \t(*mov<VM32:mode>_insn): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n-\t(*mov<VM64:mode>_insn_sp64): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n-\t(*mov<VM64:mode>_insn_sp32): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n+\t(*mov<VM64:mode>_insn_sp64): Likewise, use 'fsrc2s'\n+\tinstead of 'fsrc1s'.\n+\t(*mov<VM64:mode>_insn_sp32): Likewise, use 'fsrc2s'\n+\tinstead of 'fsrc1s'.\n \t(VIS logical instructions): Mark as visl.\n \t(pdist_vis): Use 'pdist'.\n \t(pditsn<mode>_vis): Use 'pdistn'.\n@@ -314,15 +338,16 @@\n \t* Makefile.in (fold-const.o): Add depencence on hash-table.h.\n \t(dse.o): Likewise.\n \t(cfg.o): Likewise.\n-\t* fold-const.c (fold_checksum_tree): Change to new type-safe hash table.\n+\t* fold-const.c (fold_checksum_tree): Change to new\n+\ttype-safe hash table.\n \t* (print_fold_checksum): Likewise.\n \t* cfg.c (var bb_original): Likewise.\n \t* (var bb_copy): Likewise.\n \t* (var loop_copy): Likewise.\n \t* hash-table.h (template hash_table): Constify parameters for find...\n \tand remove_elt... member functions.\n-        (hash_table::empty) Correct size expression.\n-        (hash_table::clear_slot) Correct deleted entry assignment.\n+\t(hash_table::empty) Correct size expression.\n+\t(hash_table::clear_slot) Correct deleted entry assignment.\n \t* dse.c (var rtx_group_table): Change to new type-safe hash table.\n \n 2012-10-09  Steven Bosscher  <steven@gcc.gnu.org>"}, {"sha": "422993c03b7b8aced201635f7cb23d3759e71ff8", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 76, "deletions": 174, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=cf1e4683aa8cfbbc0b417da28eaecf9949ee6bd1", "patch": "@@ -92,6 +92,7 @@\n ;; Other mode iterators\n (define_mode_iterator I12MODE [QI HI])\n (define_mode_iterator I48MODE [SI DI])\n+(define_mode_attr DWI [(SI \"DI\") (DI \"TI\")])\n (define_mode_attr modesuffix [(SI \"l\") (DI \"q\")])\n \n ;; Where necessary, the suffixes _le and _be are used to distinguish between\n@@ -358,20 +359,6 @@\n   operands[7] = gen_lowpart (SImode, operands[5]);\n })\n \n-(define_insn \"addvsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ,rJ\")\n-\t\t (match_operand:SI 2 \"sext_add_operand\" \"rI,O\")))\n-   (trap_if (ne (plus:DI (sign_extend:DI (match_dup 1))\n-\t\t\t (sign_extend:DI (match_dup 2)))\n-\t\t(sign_extend:DI (plus:SI (match_dup 1)\n-\t\t\t\t\t (match_dup 2))))\n-\t    (const_int 0))]\n-  \"\"\n-  \"@\n-   addlv %r1,%2,%0\n-   sublv %r1,%n2,%0\")\n-\n (define_expand \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n@@ -522,15 +509,16 @@\n     FAIL;\n })\n \n-(define_insn \"*saddl\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n-\t\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\")))]\n+(define_insn \"*sadd<modesuffix>\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r,r\")\n+\t(plus:I48MODE\n+\t (mult:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t       (match_operand:I48MODE 2 \"const48_operand\" \"I,I\"))\n+\t (match_operand:I48MODE 3 \"sext_add_operand\" \"rI,O\")))]\n   \"\"\n   \"@\n-   s%2addl %1,%3,%0\n-   s%2subl %1,%n3,%0\")\n+   s%2add<modesuffix> %1,%3,%0\n+   s%2sub<modesuffix> %1,%n3,%0\")\n \n (define_insn \"*saddl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n@@ -563,35 +551,25 @@\n   operands[8] = gen_lowpart (SImode, operands[6]);\n })\n \n-(define_insn \"*saddq\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t\t  (match_operand:DI 2 \"const48_operand\" \"I,I\"))\n-\t\t (match_operand:DI 3 \"sext_add_operand\" \"rI,O\")))]\n-  \"\"\n-  \"@\n-   s%2addq %1,%3,%0\n-   s%2subq %1,%n3,%0\")\n-\n-(define_insn \"addvdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ,rJ\")\n-\t\t (match_operand:DI 2 \"sext_add_operand\" \"rI,O\")))\n-   (trap_if (ne (plus:TI (sign_extend:TI (match_dup 1))\n-\t\t\t (sign_extend:TI (match_dup 2)))\n-\t\t(sign_extend:TI (plus:DI (match_dup 1)\n-\t\t\t\t\t (match_dup 2))))\n+(define_insn \"addv<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r,r\")\n+\t(plus:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"%rJ,rJ\")\n+\t\t      (match_operand:I48MODE 2 \"sext_add_operand\" \"rI,O\")))\n+   (trap_if (ne (plus:<DWI> (sign_extend:<DWI> (match_dup 1))\n+\t\t\t    (sign_extend:<DWI> (match_dup 2)))\n+\t\t(sign_extend:<DWI> (plus:I48MODE (match_dup 1)\n+\t\t\t\t\t\t (match_dup 2))))\n \t    (const_int 0))]\n   \"\"\n   \"@\n-   addqv %r1,%2,%0\n-   subqv %r1,%n2,%0\")\n+   add<modesuffix>v %r1,%2,%0\n+   sub<modesuffix>v %r1,%n2,%0\")\n \n-(define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\")))]\n+(define_insn \"neg<mode>2\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(neg:I48MODE (match_operand:I48MODE 1 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"subl $31,%1,%0\")\n+  \"sub<modesuffix> $31,%1,%0\")\n \n (define_insn \"*negsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -600,36 +578,21 @@\n   \"\"\n   \"subl $31,%1,%0\")\n \n-(define_insn \"negvsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (trap_if (ne (neg:DI (sign_extend:DI (match_dup 1)))\n-\t\t(sign_extend:DI (neg:SI (match_dup 1))))\n+(define_insn \"negv<mode>2\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(neg:I48MODE (match_operand:I48MODE 1 \"register_operand\" \"r\")))\n+   (trap_if (ne (neg:<DWI> (sign_extend:<DWI> (match_dup 1)))\n+\t\t(sign_extend:<DWI> (neg:I48MODE (match_dup 1))))\n \t    (const_int 0))]\n   \"\"\n-  \"sublv $31,%1,%0\")\n+  \"sub<modesuffix>v $31,%1,%0\")\n \n-(define_insn \"negdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\")))]\n+(define_insn \"sub<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(minus:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t       (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"subq $31,%1,%0\")\n-\n-(define_insn \"negvdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (trap_if (ne (neg:TI (sign_extend:TI (match_dup 1)))\n-\t\t(sign_extend:TI (neg:DI (match_dup 1))))\n-\t    (const_int 0))]\n-  \"\"\n-  \"subqv $31,%1,%0\")\n-\n-(define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t  (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))]\n-  \"\"\n-  \"subl %r1,%2,%0\")\n+  \"sub<modesuffix> %r1,%2,%0\")\n \n (define_insn \"*subsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -647,32 +610,14 @@\n   \"\"\n   \"subl %r1,%2,%0\")\n \n-(define_insn \"subvsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t  (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))\n-   (trap_if (ne (minus:DI (sign_extend:DI (match_dup 1))\n-\t\t\t  (sign_extend:DI (match_dup 2)))\n-\t\t(sign_extend:DI (minus:SI (match_dup 1)\n-\t\t\t\t\t  (match_dup 2))))\n-\t    (const_int 0))]\n-  \"\"\n-  \"sublv %r1,%2,%0\")\n-\n-(define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t  (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))]\n-  \"\"\n-  \"subq %r1,%2,%0\")\n-\n-(define_insn \"*ssubl\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n-\t\t  (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\")))]\n+(define_insn \"*ssub<modesuffix>\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(minus:I48MODE\n+\t (mult:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r\")\n+\t\t       (match_operand:I48MODE 2 \"const48_operand\" \"I\"))\n+\t\t  (match_operand:I48MODE 3 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"s%2subl %1,%3,%0\")\n+  \"s%2sub<modesuffix> %1,%3,%0\")\n \n (define_insn \"*ssubl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -683,34 +628,26 @@\n   \"\"\n   \"s%2subl %1,%3,%0\")\n \n-(define_insn \"*ssubq\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n-\t\t  (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")))]\n-  \"\"\n-  \"s%2subq %1,%3,%0\")\n-\n-(define_insn \"subvdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t  (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))\n-   (trap_if (ne (minus:TI (sign_extend:TI (match_dup 1))\n-\t\t\t  (sign_extend:TI (match_dup 2)))\n-\t\t(sign_extend:TI (minus:DI (match_dup 1)\n-\t\t\t\t\t  (match_dup 2))))\n+(define_insn \"subv<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(minus:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t       (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"rI\")))\n+   (trap_if (ne (minus:<DWI> (sign_extend:<DWI> (match_dup 1))\n+\t\t\t     (sign_extend:<DWI> (match_dup 2)))\n+\t\t(sign_extend:<DWI> (minus:I48MODE (match_dup 1)\n+\t\t\t\t\t\t  (match_dup 2))))\n \t    (const_int 0))]\n   \"\"\n-  \"subqv %r1,%2,%0\")\n+  \"sub<modesuffix>v %r1,%2,%0\")\n \n-(define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))]\n+(define_insn \"mul<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(mult:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"%rJ\")\n+\t\t      (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"mull %r1,%2,%0\"\n+  \"mul<modesuffix> %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")\n-   (set_attr \"opsize\" \"si\")])\n+   (set_attr \"opsize\" \"<mode>\")])\n \n (define_insn \"*mulsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -722,40 +659,19 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"si\")])\n \n-(define_insn \"mulvsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))\n-   (trap_if (ne (mult:DI (sign_extend:DI (match_dup 1))\n-\t\t\t (sign_extend:DI (match_dup 2)))\n-\t\t(sign_extend:DI (mult:SI (match_dup 1)\n-\t\t\t\t\t (match_dup 2))))\n+(define_insn \"mulv<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(mult:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"%rJ\")\n+\t\t      (match_operand:I48MODE 2 \"reg_or_8bit_operand\" \"rI\")))\n+   (trap_if (ne (mult:<DWI> (sign_extend:<DWI> (match_dup 1))\n+\t\t\t    (sign_extend:<DWI> (match_dup 2)))\n+\t\t(sign_extend:<DWI> (mult:I48MODE (match_dup 1)\n+\t\t\t\t\t\t (match_dup 2))))\n \t    (const_int 0))]\n   \"\"\n-  \"mullv %r1,%2,%0\"\n+  \"mul<modesuffix>v %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")\n-   (set_attr \"opsize\" \"si\")])\n-\n-(define_insn \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))]\n-  \"\"\n-  \"mulq %r1,%2,%0\"\n-  [(set_attr \"type\" \"imul\")])\n-\n-(define_insn \"mulvdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))\n-   (trap_if (ne (mult:TI (sign_extend:TI (match_dup 1))\n-\t\t\t (sign_extend:TI (match_dup 2)))\n-\t\t(sign_extend:TI (mult:DI (match_dup 1)\n-\t\t\t\t\t (match_dup 2))))\n-\t    (const_int 0))]\n-  \"\"\n-  \"mulqv %r1,%2,%0\"\n-  [(set_attr \"type\" \"imul\")])\n+   (set_attr \"opsize\" \"<mode>\")])\n \n (define_expand \"umuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1222,18 +1138,11 @@\n   \"ornot $31,%1,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_insn \"*iornotsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (not:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t\t(match_operand:SI 2 \"reg_or_0_operand\" \"rJ\")))]\n-  \"\"\n-  \"ornot %r2,%1,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_insn \"*iornotdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ior:DI (not:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t\t(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")))]\n+(define_insn \"*iornot<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(ior:I48MODE (not:I48MODE\n+\t\t      (match_operand:I48MODE 1 \"reg_or_8bit_operand\" \"rI\"))\n+\t\t     (match_operand:I48MODE 2 \"reg_or_0_operand\" \"rJ\")))]\n   \"\"\n   \"ornot %r2,%1,%0\"\n   [(set_attr \"type\" \"ilog\")])\n@@ -1258,18 +1167,11 @@\n    eqv %r1,%N2,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_insn \"*xornotsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(not:SI (xor:SI (match_operand:SI 1 \"register_operand\" \"%rJ\")\n-\t\t\t(match_operand:SI 2 \"register_operand\" \"rI\"))))]\n-  \"\"\n-  \"eqv %r1,%2,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_insn \"*xornotdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"%rJ\")\n-\t\t\t(match_operand:DI 2 \"register_operand\" \"rI\"))))]\n+(define_insn \"*xornot<mode>3\"\n+  [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n+\t(not:I48MODE (xor:I48MODE\n+\t\t      (match_operand:I48MODE 1 \"register_operand\" \"%rJ\")\n+\t\t      (match_operand:I48MODE 2 \"register_operand\" \"rI\"))))]\n   \"\"\n   \"eqv %r1,%2,%0\"\n   [(set_attr \"type\" \"ilog\")])"}]}