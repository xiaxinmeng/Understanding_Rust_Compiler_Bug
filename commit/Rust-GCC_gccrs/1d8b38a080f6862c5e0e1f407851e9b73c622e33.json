{"sha": "1d8b38a080f6862c5e0e1f407851e9b73c622e33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4YjM4YTA4MGY2ODYyYzVlMGUxZjQwNzg1MWU5YjczYzYyMmUzMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-03-25T17:32:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-03-25T17:32:34Z"}, "message": "re PR middle-end/26717 (complex/complex gives a REAL_CST)\n\n\tPR middle-end/26717\n\t* fold-const.c (fold_binary) [RDIV_EXPR]: Do not optimize A / A\n\tto 1.0 for non-real operands. Implement A / A optimization for\n\tcomplex operands.\n\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r112379", "tree": {"sha": "48e974648a8fcb1e216b90855fef2c32b4a4f150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48e974648a8fcb1e216b90855fef2c32b4a4f150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8b38a080f6862c5e0e1f407851e9b73c622e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8b38a080f6862c5e0e1f407851e9b73c622e33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8b38a080f6862c5e0e1f407851e9b73c622e33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8b38a080f6862c5e0e1f407851e9b73c622e33/comments", "author": null, "committer": null, "parents": [{"sha": "75bcbcdb5e3ae1c1695e701ff5517a41b9ae3a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bcbcdb5e3ae1c1695e701ff5517a41b9ae3a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75bcbcdb5e3ae1c1695e701ff5517a41b9ae3a14"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "acaf8b6e4b87048ecc0e0f017dca89e41ae3e2a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d8b38a080f6862c5e0e1f407851e9b73c622e33", "patch": "@@ -1,3 +1,11 @@\n+2006-03-25  Uros Bizjak  <uros@kss-loka.si>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/26717\n+\t* fold-const.c (fold_binary) [RDIV_EXPR]: Do not optimize A / A\n+\tto 1.0 for non-real operands. Implement A / A optimization for\n+\tcomplex operands.\n+\n 2006-03-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (size_cost): Correct the comment for"}, {"sha": "9ea3232d4f7ffd9a35b57c6b6abf0fd6b0c86b30", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1d8b38a080f6862c5e0e1f407851e9b73c622e33", "patch": "@@ -8902,8 +8902,10 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \treturn NULL_TREE;\n \n       /* Optimize A / A to 1.0 if we don't care about\n-\t NaNs or Infinities.  */\n-      if (! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t NaNs or Infinities.  Skip the transformation\n+\t for non-real operands.  */\n+      if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (arg0))\n+\t  && ! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n \t  && ! HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (arg0)))\n \t  && operand_equal_p (arg0, arg1, 0))\n \t{\n@@ -8912,6 +8914,20 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  return omit_two_operands (type, r, arg0, arg1);\n \t}\n \n+      /* The complex version of the above A / A optimization.  */\n+      if (COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0))\n+\t  && operand_equal_p (arg0, arg1, 0))\n+\t{\n+\t  tree elem_type = TREE_TYPE (TREE_TYPE (arg0));\n+\t  if (! HONOR_NANS (TYPE_MODE (elem_type))\n+\t      && ! HONOR_INFINITIES (TYPE_MODE (elem_type)))\n+\t    {\n+\t      tree r = build_real (elem_type, dconst1);\n+\t      /* omit_two_operands will call fold_convert for us.  */\n+\t      return omit_two_operands (type, r, arg0, arg1);\n+\t    }\n+\t}\n+\n       /* (-A) / (-B) -> A / B  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR && negate_expr_p (arg1))\n \treturn fold_build2 (RDIV_EXPR, type,"}, {"sha": "f9c591cd2b9f374b69f784a842db455a377d7c2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d8b38a080f6862c5e0e1f407851e9b73c622e33", "patch": "@@ -1,3 +1,8 @@\n+2006-03-25  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR middle-end/26717\n+\t* gcc.dg/pr26717.c: New test.\n+\n 2006-03-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/dependency_12.f90: New test case."}, {"sha": "d16b576ed24a235097664d1836e1fa4e9a90c5de", "filename": "gcc/testsuite/gcc.dg/pr26717.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26717.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b38a080f6862c5e0e1f407851e9b73c622e33/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26717.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26717.c?ref=1d8b38a080f6862c5e0e1f407851e9b73c622e33", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ffast-math\" } */\n+_Complex float f (_Complex float a)\n+{\n+  _Complex float b = a / a;\n+  return b;\n+}"}]}