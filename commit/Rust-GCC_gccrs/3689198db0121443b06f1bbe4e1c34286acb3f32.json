{"sha": "3689198db0121443b06f1bbe4e1c34286acb3f32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4OTE5OGRiMDEyMTQ0M2IwNmYxYmJlNGUxYzM0Mjg2YWNiM2YzMg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-27T16:53:09Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-27T16:53:09Z"}, "message": "Fix PR49471: canonicalize_loop_ivs should not generate unsigned types.\n\n2011-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/49471\n\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Build an unsigned\n\tiv only when the largest type is unsigned.  Do not call\n\tlang_hooks.types.type_for_size.\n\n\t* testsuite/libgomp.graphite/force-parallel-1.c: Un-xfail.\n\t* testsuite/libgomp.graphite/force-parallel-2.c: Adjust pattern.\n\nFrom-SVN: r176838", "tree": {"sha": "e1b8b759d9b426b961abafcc38d68c6a098bae4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1b8b759d9b426b961abafcc38d68c6a098bae4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3689198db0121443b06f1bbe4e1c34286acb3f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3689198db0121443b06f1bbe4e1c34286acb3f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3689198db0121443b06f1bbe4e1c34286acb3f32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3689198db0121443b06f1bbe4e1c34286acb3f32/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27165eddf6cd08f66d24bfd7751675cfb84c6a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27165eddf6cd08f66d24bfd7751675cfb84c6a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27165eddf6cd08f66d24bfd7751675cfb84c6a6c"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "b07d494d6797160475502882ef35d34c98430ad5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689198db0121443b06f1bbe4e1c34286acb3f32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689198db0121443b06f1bbe4e1c34286acb3f32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3689198db0121443b06f1bbe4e1c34286acb3f32", "patch": "@@ -1,3 +1,10 @@\n+2011-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/49471\n+\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Build an unsigned\n+\tiv only when the largest type is unsigned.  Do not call\n+\tlang_hooks.types.type_for_size.\n+\n 2011-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/45450"}, {"sha": "0cec7872b8118faac7f1f86c2a6b80260a99def5", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689198db0121443b06f1bbe4e1c34286acb3f32/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689198db0121443b06f1bbe4e1c34286acb3f32/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=3689198db0121443b06f1bbe4e1c34286acb3f32", "patch": "@@ -1200,18 +1200,36 @@ canonicalize_loop_ivs (struct loop *loop, tree *nit, bool bump_in_latch)\n   gimple stmt;\n   edge exit = single_dom_exit (loop);\n   gimple_seq stmts;\n+  enum machine_mode mode;\n+  bool unsigned_p = false;\n \n   for (psi = gsi_start_phis (loop->header);\n        !gsi_end_p (psi); gsi_next (&psi))\n     {\n       gimple phi = gsi_stmt (psi);\n       tree res = PHI_RESULT (phi);\n+      bool uns;\n \n-      if (is_gimple_reg (res) && TYPE_PRECISION (TREE_TYPE (res)) > precision)\n-\tprecision = TYPE_PRECISION (TREE_TYPE (res));\n+      type = TREE_TYPE (res);\n+      if (!is_gimple_reg (res)\n+\t  || (!INTEGRAL_TYPE_P (type)\n+\t      && !POINTER_TYPE_P (type))\n+\t  || TYPE_PRECISION (type) < precision)\n+\tcontinue;\n+\n+      uns = POINTER_TYPE_P (type) | TYPE_UNSIGNED (type);\n+\n+      if (TYPE_PRECISION (type) > precision)\n+\tunsigned_p = uns;\n+      else\n+\tunsigned_p |= uns;\n+\n+      precision = TYPE_PRECISION (type);\n     }\n \n-  type = lang_hooks.types.type_for_size (precision, 1);\n+  mode = smallest_mode_for_size (precision, MODE_INT);\n+  precision = GET_MODE_PRECISION (mode);\n+  type = build_nonstandard_integer_type (precision, unsigned_p);\n \n   if (original_precision != precision)\n     {"}, {"sha": "b9455b416384c7a5ead869f72553b8c6ec890772", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3689198db0121443b06f1bbe4e1c34286acb3f32", "patch": "@@ -1,3 +1,8 @@\n+2011-07-23  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* testsuite/libgomp.graphite/force-parallel-1.c: Un-xfail.\n+\t* testsuite/libgomp.graphite/force-parallel-2.c: Adjust pattern.\n+\n 2011-07-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libgomp/45351"}, {"sha": "7f043d83d8b11fce586eb6f65b2f6cda0438eceb", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-1.c?ref=3689198db0121443b06f1bbe4e1c34286acb3f32", "patch": "@@ -23,7 +23,7 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 2 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 2 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"parloops\" } } */"}, {"sha": "03d823653a7475b59ef480a1e0789926b3855062", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689198db0121443b06f1bbe4e1c34286acb3f32/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-2.c?ref=3689198db0121443b06f1bbe4e1c34286acb3f32", "patch": "@@ -23,7 +23,7 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 2 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"parloops\" } } */"}]}