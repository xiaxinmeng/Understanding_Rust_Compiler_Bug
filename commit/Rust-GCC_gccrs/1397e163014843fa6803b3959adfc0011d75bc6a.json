{"sha": "1397e163014843fa6803b3959adfc0011d75bc6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5N2UxNjMwMTQ4NDNmYTY4MDNiMzk1OWFkZmMwMDExZDc1YmM2YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-07-20T18:33:30Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-07-20T18:33:30Z"}, "message": "S/390: Remove mode size check in encode_section_info.\n\nWith the last change the not-aligned symbol ref markers are always set\nfor modes with size zero.  This is wrong since for larl the size of\nthe access does not matter.  This patch removes that check entirely\nfrom s390_encode_section_info.  Modes with a size of 0 get rejected in\ns390_check_symref_alignment which is used for the load/store relative\ninstructions to check for natural alignment.\n\nBootstrapped and regression tested on s390 and s390x with\n--with-arch=z900 and --with-arch=z13.\n\ngcc/ChangeLog:\n\n2016-07-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_encode_section_info): Remove mode size\n\tcheck.\n\nFrom-SVN: r238536", "tree": {"sha": "d1029eb1f7d0073b2b7c9c5fd8a74f00059b2a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1029eb1f7d0073b2b7c9c5fd8a74f00059b2a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1397e163014843fa6803b3959adfc0011d75bc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1397e163014843fa6803b3959adfc0011d75bc6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1397e163014843fa6803b3959adfc0011d75bc6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1397e163014843fa6803b3959adfc0011d75bc6a/comments", "author": null, "committer": null, "parents": [{"sha": "09a855ae3c80dfcf5fa97c3fc6425f52660652d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a855ae3c80dfcf5fa97c3fc6425f52660652d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a855ae3c80dfcf5fa97c3fc6425f52660652d6"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "8016ac1f6318a576dc2606d47a8d36f29788163a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1397e163014843fa6803b3959adfc0011d75bc6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1397e163014843fa6803b3959adfc0011d75bc6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1397e163014843fa6803b3959adfc0011d75bc6a", "patch": "@@ -1,3 +1,8 @@\n+2016-07-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_encode_section_info): Remove mode size\n+\tcheck.\n+\n 2016-07-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* cse.c: Use HOST_WIDE_INT_M1 instead of ~(HOST_WIDE_INT) 0."}, {"sha": "23d758c35d6d366520eb2fd87749e03721150e38", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1397e163014843fa6803b3959adfc0011d75bc6a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1397e163014843fa6803b3959adfc0011d75bc6a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1397e163014843fa6803b3959adfc0011d75bc6a", "patch": "@@ -12413,8 +12413,7 @@ s390_encode_section_info (tree decl, rtx rtl, int first)\n       /* Store the alignment to be able to check if we can use\n \t a larl/load-relative instruction.  We only handle the cases\n \t that can go wrong (i.e. no FUNC_DECLs).  */\n-      if (DECL_ALIGN (decl) == 0\n-\t  || DECL_ALIGN (decl) % 16)\n+      if (DECL_ALIGN (decl) == 0 || DECL_ALIGN (decl) % 16)\n \tSYMBOL_FLAG_SET_NOTALIGN2 (XEXP (rtl, 0));\n       else if (DECL_ALIGN (decl) % 32)\n \tSYMBOL_FLAG_SET_NOTALIGN4 (XEXP (rtl, 0));\n@@ -12429,9 +12428,7 @@ s390_encode_section_info (tree decl, rtx rtl, int first)\n       && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF\n       && TREE_CONSTANT_POOL_ADDRESS_P (XEXP (rtl, 0)))\n     {\n-      if (MEM_ALIGN (rtl) == 0\n-\t  || GET_MODE_SIZE (GET_MODE (rtl)) == 0\n-\t  || MEM_ALIGN (rtl) % 16)\n+      if (MEM_ALIGN (rtl) == 0 || MEM_ALIGN (rtl) % 16)\n \tSYMBOL_FLAG_SET_NOTALIGN2 (XEXP (rtl, 0));\n       else if (MEM_ALIGN (rtl) % 32)\n \tSYMBOL_FLAG_SET_NOTALIGN4 (XEXP (rtl, 0));"}]}