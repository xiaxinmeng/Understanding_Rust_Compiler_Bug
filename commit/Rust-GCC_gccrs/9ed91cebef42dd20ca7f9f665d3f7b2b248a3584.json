{"sha": "9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkOTFjZWJlZjQyZGQyMGNhN2Y5ZjY2NWQzZjdiMmIyNDhhMzU4NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T15:10:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T15:10:58Z"}, "message": "Fix handling of named results for functions which call recover.\n\nFrom-SVN: r168170", "tree": {"sha": "15649d4f6cbdbc5d9d2219cbd8271f15ed0ef7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15649d4f6cbdbc5d9d2219cbd8271f15ed0ef7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584/comments", "author": null, "committer": null, "parents": [{"sha": "46fc230528907c9adc42104c73819415de8d0a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fc230528907c9adc42104c73819415de8d0a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fc230528907c9adc42104c73819415de8d0a6c"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "be4de9ce097d561a69e38aa5221bb7c05b81de71", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "patch": "@@ -2177,6 +2177,10 @@ Build_recover_thunks::function(Named_object* orig_no)\n   Convert_recover convert_recover(can_recover_no);\n   new_func->traverse(&convert_recover);\n \n+  // Update the function pointers in any named results.\n+  new_func->update_named_result_variables();\n+  orig_func->update_named_result_variables();\n+\n   return TRAVERSE_CONTINUE;\n }\n \n@@ -2505,6 +2509,21 @@ Function::create_named_result_variables(Gogo* gogo)\n     }\n }\n \n+// Update the named result variables when cloning a function which\n+// calls recover.\n+\n+void\n+Function::update_named_result_variables()\n+{\n+  if (this->named_results_ == NULL)\n+    return;\n+\n+  for (Named_results::iterator p = this->named_results_->begin();\n+       p != this->named_results_->end();\n+       ++p)\n+    (*p)->result_var_value()->set_function(this);\n+}\n+\n // Return the closure variable, creating it if necessary.\n \n Named_object*"}, {"sha": "dd7afc86a19d8fc0ff5c56b19249c46e580926aa", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed91cebef42dd20ca7f9f665d3f7b2b248a3584/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=9ed91cebef42dd20ca7f9f665d3f7b2b248a3584", "patch": "@@ -787,6 +787,11 @@ class Function\n   void\n   create_named_result_variables(Gogo*);\n \n+  // Update the named result variables when cloning a function which\n+  // calls recover.\n+  void\n+  update_named_result_variables();\n+\n   // Add a new field to the closure variable.\n   void\n   add_closure_field(Named_object* var, source_location loc)\n@@ -1318,6 +1323,12 @@ class Result_variable\n   is_in_heap() const\n   { return this->is_address_taken_; }\n \n+  // Set the function.  This is used when cloning functions which call\n+  // recover.\n+  void\n+  set_function(Function* function)\n+  { this->function_ = function; }\n+\n  private:\n   // Type of result variable.\n   Type* type_;"}]}