{"sha": "a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhMjA2N2FjNWIyYTVjZTBiODQzOWQ0MjE2N2RmNTY5NGQyYmI1Yg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-06-21T08:46:33Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-06-21T08:46:33Z"}, "message": "func_derived_2.f90, [...]: New tests.\n\n2005-06-21  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n\tPaul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/func_derived_2.f90, gfortran.dg/func_derived_3.f90:\n\tNew tests.\n\nFrom-SVN: r101230", "tree": {"sha": "f60f6eff7d8eab47412171523f7b467e6a315cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60f6eff7d8eab47412171523f7b467e6a315cf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5eadacc354407939f4bbf55bd44d750e3554344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eadacc354407939f4bbf55bd44d750e3554344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5eadacc354407939f4bbf55bd44d750e3554344"}], "stats": {"total": 175, "additions": 174, "deletions": 1}, "files": [{"sha": "e452f4cd84752df41e02a8737a9b9c76a496e5f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "patch": "@@ -1,4 +1,10 @@\n-2005-06-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+2005-06-21  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tPaul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/func_derived_2.f90, gfortran.dg/func_derived_3.f90:\n+\tNew tests.\n+\t\n+2005-06-20  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* gfortran.dg/backslash_1.f90: New test.\n \t* gfortran.dg/backslash_2.f90: New test."}, {"sha": "2f3aefa7ee23de38241b3b422e223c384bd07195", "filename": "gcc/testsuite/gfortran.dg/func_derived_2.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_2.f90?ref=a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! This tests the \"virtual fix\" for PR19561, where functions returning\n+! pointers to derived types were not generating correct code.  This\n+! testcase is based on a simplified example in the PR discussion.\n+!\n+! Submitted by Paul Thomas  pault@gcc.gnu.org\n+! Slightly extended by Tobias Schl\u00fcter\n+module mpoint\n+  type           ::       mytype\n+    integer      ::       i\n+  end type mytype\n+\n+contains\n+\n+  function get (a) result (b)\n+    type (mytype), target   ::      a\n+    type (mytype), pointer  ::      b\n+    b => a\n+  end function get\n+\n+  function get2 (a)\n+    type (mytype), target   ::      a\n+    type (mytype), pointer  ::      get2\n+    get2 => a\n+  end function get2\n+\n+end module mpoint\n+\n+program func_derived_2\n+  use mpoint\n+  type (mytype), target  ::       x\n+  type (mytype), pointer ::       y\n+  x = mytype (42)\n+  y => get (x)\n+  if (y%i.ne.42) call abort ()\n+\n+  x = mytype (112)\n+  y => get2 (x)\n+  if (y%i.ne.112) call abort ()\n+end program func_derived_2\n+\n+"}, {"sha": "a271fe98f6e45d15d838aa58c2a5c5515569c681", "filename": "gcc/testsuite/gfortran.dg/func_derived_3.f90", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_3.f90?ref=a3a2067ac5b2a5ce0b8439d42167df5694d2bb5b", "patch": "@@ -0,0 +1,125 @@\n+! { dg-do run }\n+! This tests the \"virtual fix\" for PR19561, where pointers to derived\n+! types were not generating correct code.  This testcase is based on\n+! the original PR example.  This example not only tests the\n+! original problem but throughly tests derived types in modules,\n+! module interfaces and compound derived types.\n+!\n+! Original by Martin Reinecke  martin@mpa-garching.mpg.de  \n+! Submitted by Paul Thomas  pault@gcc.gnu.org\n+! Slightly modified by Tobias Schl\u00fcter\n+module func_derived_3\n+  implicit none\n+  type objA\n+    private\n+    integer :: i\n+  end type objA\n+\n+  interface new\n+    module procedure oaInit\n+  end interface\n+\n+  interface print\n+    module procedure oaPrint\n+  end interface\n+\n+  private\n+  public objA,new,print\n+\n+contains\n+\n+  subroutine oaInit(oa,i)\n+    integer :: i\n+    type(objA) :: oa\n+    oa%i=i\n+  end subroutine oaInit\n+\n+  subroutine oaPrint (oa)\n+    type (objA) :: oa\n+    write (10, '(\"simple  = \",i5)') oa%i\n+    end subroutine oaPrint\n+\n+end module func_derived_3\n+\n+module func_derived_3a\n+  use func_derived_3\n+  implicit none\n+\n+  type objB\n+    private\n+    integer :: i\n+    type(objA), pointer :: oa\n+  end type objB\n+\n+  interface new\n+    module procedure obInit\n+  end interface\n+\n+  interface print\n+    module procedure obPrint\n+  end interface\n+\n+  private\n+  public objB, new, print, getOa, getOa2\n+\n+contains\n+\n+  subroutine obInit (ob,oa,i)\n+    integer :: i\n+    type(objA), target :: oa\n+    type(objB) :: ob\n+\n+    ob%i=i\n+    ob%oa=>oa\n+  end subroutine obInit\n+\n+  subroutine obPrint (ob)\n+    type (objB) :: ob\n+    write (10, '(\"derived = \",i5)') ob%i\n+    call print (ob%oa)\n+  end subroutine obPrint\n+\n+  function getOa (ob) result (oa)\n+    type (objB),target :: ob\n+    type (objA), pointer :: oa\n+\n+    oa=>ob%oa\n+  end function getOa\n+\n+! without a result clause \n+  function getOa2 (ob)\n+    type (objB),target :: ob\n+    type (objA), pointer :: getOa2\n+\n+    getOa2=>ob%oa\n+  end function getOa2\n+    \n+end module func_derived_3a\n+\n+  use func_derived_3\n+  use func_derived_3a\n+  implicit none\n+  type (objA),target :: oa\n+  type (objB),target :: ob\n+  character (len=80) :: line\n+\n+  open (10, status='scratch')\n+\n+  call new (oa,1)\n+  call new (ob, oa, 2)\n+\n+  call print (ob)\n+  call print (getOa (ob))\n+  call print (getOa2 (ob))\n+  \n+  rewind (10)\n+  read (10, '(80a)') line\n+  if (trim (line).ne.\"derived =     2\") call abort ()\n+  read (10,  '(80a)') line\n+  if (trim (line).ne.\"simple  =     1\") call abort ()\n+  read (10,  '(80a)') line\n+  if (trim (line).ne.\"simple  =     1\") call abort ()\n+  read (10,  '(80a)') line\n+  if (trim (line).ne.\"simple  =     1\") call abort ()\n+  close (10)\n+end program"}]}