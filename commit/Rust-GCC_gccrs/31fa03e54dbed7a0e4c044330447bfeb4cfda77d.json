{"sha": "31fa03e54dbed7a0e4c044330447bfeb4cfda77d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFmYTAzZTU0ZGJlZDdhMGU0YzA0NDMzMDQ0N2JmZWI0Y2ZkYTc3ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-06T13:49:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-06T13:49:05Z"}, "message": "Use the new trampoline definition.\n\n(TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE): Deleted.\n(INITIALIZE_TRAMPOLINE): Changed.\n(FINALIZE_TRAMPOLINE, CLEAR_INSN_CACHE): New.\n\nFrom-SVN: r11936", "tree": {"sha": "d0675d1d22356d00330a4e9444dc2774fa98128b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0675d1d22356d00330a4e9444dc2774fa98128b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31fa03e54dbed7a0e4c044330447bfeb4cfda77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fa03e54dbed7a0e4c044330447bfeb4cfda77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31fa03e54dbed7a0e4c044330447bfeb4cfda77d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fa03e54dbed7a0e4c044330447bfeb4cfda77d/comments", "author": null, "committer": null, "parents": [{"sha": "833c0b26acf93940a534d9633ef8d423c7ba3016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833c0b26acf93940a534d9633ef8d423c7ba3016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833c0b26acf93940a534d9633ef8d423c7ba3016"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "00f8f4251f4486257b67376f4b65776f8c7881df", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fa03e54dbed7a0e4c044330447bfeb4cfda77d/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fa03e54dbed7a0e4c044330447bfeb4cfda77d/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=31fa03e54dbed7a0e4c044330447bfeb4cfda77d", "patch": "@@ -302,35 +302,55 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef PCC_STATIC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.  */\n \n-/* On m68k svr4, the trampoline is different from the generic version\n-   in that we use a1 as the static call chain.  */\n+/* This is different from the generic version in that we use a1 as the\n+   static call chain.  */\n \n-#undef TRAMPOLINE_TEMPLATE\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n+#undef INITIALIZE_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x227a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2f3a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4e75));\t\\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, HImode, TRAMP), GEN_INT (0x227C));\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 2)), CXT); \\\n+  emit_move_insn (gen_rtx (MEM, HImode, plus_constant (TRAMP, 6)),\t\\\n+\t\t  GEN_INT (0x4EF9));\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 8)), FNADDR); \\\n+  FINALIZE_TRAMPOLINE (TRAMP);\t\t\t\t\t\t\\\n }\n \n-/* Redefine since we are using a different trampoline */\n-#undef TRAMPOLINE_SIZE\n-#define TRAMPOLINE_SIZE 18\n+/* Finalize the trampoline by flushing the insn cache.  */\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n+#undef FINALIZE_TRAMPOLINE\n+#define FINALIZE_TRAMPOLINE(TRAMP)\t\t\t\t\t\\\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__clear_cache\"),\t\\\n+\t\t     0, VOIDmode, 2, TRAMP, Pmode,\t\t\t\\\n+\t\t     plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);\n \n-#undef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)                       \\\n-{                                                                       \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 10)), CXT); \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 14)), FNADDR); \\\n+/* Clear the instruction cache from `beg' to `end'.  This makes an\n+   inline system call to SYS_cacheflush.  The arguments are as\n+   follows:\n+\n+\tcacheflush (addr, scope, cache, len)\n+\n+   addr\t  - the start address for the flush\n+   scope  - the scope of the flush (see the cpush insn)\n+   cache  - which cache to flush (see the cpush insn)\n+   len    - a factor relating to the number of flushes to perform:\n+   \t    len/16 lines, or len/4096 pages.  */\n+\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _beg __asm (\"%d1\") = (unsigned long) (BEG);\t\\\n+  unsigned long _end = (unsigned long) (END);\t\t\t\t\\\n+  register unsigned long _len __asm (\"%d4\") = (_end - _beg + 32);\t\\\n+  __asm __volatile\t\t\t\t\t\t\t\\\n+    (\"move%.l %#123, %/d0\\n\\t\"\t/* system call nr */\t\t\t\\\n+     \"move%.l %#1, %/d2\\n\\t\"\t/* clear lines */\t\t\t\\\n+     \"move%.l %#3, %/d3\\n\\t\"\t/* insn+data caches */\t\t\t\\\n+     \"trap %#0\"\t\t\t\t\t\t\t\t\\\n+     : /* no outputs */\t\t\t\t\t\t\t\\\n+     : \"d\" (_beg), \"d\" (_len)\t\t\t\t\t\t\\\n+     : \"%d0\", \"%d2\", \"%d3\");\t\t\t\t\t\t\\\n }"}]}