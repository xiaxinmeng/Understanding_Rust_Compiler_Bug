{"sha": "f51430ed7aa820f0c77e0095a5b7a1a7846fc345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNDMwZWQ3YWE4MjBmMGM3N2UwMDk1YTViN2ExYTc4NDZmYzM0NQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-16T00:58:40Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-16T00:58:40Z"}, "message": "except.c (expand_start_all_catch): If the machine needs to perform any actions at the start of an expcetion...\n\n\t* except.c (expand_start_all_catch): If the machine needs to\n\tperform any actions at the start of an expcetion handler that\n\thasn't already been done, use gen_exception_receiver to emit it.\n\t(expand_leftover_cleanups): Likewise.\n\t* alpha/alpha.md (exception_receiver): Use it.\n\t* pa/pa.h (exception_receiver): Use it.\nFix -fpic on hppa when excetpions are throw across shared libraries.\n\nFrom-SVN: r14070", "tree": {"sha": "1441a97a1b0ebc431e3f90213f8ceb00f9ca1aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1441a97a1b0ebc431e3f90213f8ceb00f9ca1aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51430ed7aa820f0c77e0095a5b7a1a7846fc345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51430ed7aa820f0c77e0095a5b7a1a7846fc345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51430ed7aa820f0c77e0095a5b7a1a7846fc345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51430ed7aa820f0c77e0095a5b7a1a7846fc345/comments", "author": null, "committer": null, "parents": [{"sha": "59cfb80c42c06b8816682519dcd55ff40d867028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cfb80c42c06b8816682519dcd55ff40d867028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59cfb80c42c06b8816682519dcd55ff40d867028"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "7fcce82668ad0cb69c47e92474edb9db29632826", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51430ed7aa820f0c77e0095a5b7a1a7846fc345/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51430ed7aa820f0c77e0095a5b7a1a7846fc345/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f51430ed7aa820f0c77e0095a5b7a1a7846fc345", "patch": "@@ -1159,6 +1159,12 @@ expand_leftover_cleanups ()\n       /* Output the label for the start of the exception handler.  */\n       emit_label (entry->exception_handler_label);\n \n+#ifdef HAVE_exception_receiver\n+      if (! exceptions_via_longjmp)\n+\tif (HAVE_exception_receiver)\n+\t  emit_insn (gen_exception_receiver ());\n+#endif\n+\n #ifdef HAVE_nonlocal_goto_receiver\n       if (! exceptions_via_longjmp)\n \tif (HAVE_nonlocal_goto_receiver)\n@@ -1258,6 +1264,12 @@ expand_start_all_catch ()\n \t end up being the handler.  */\n       emit_label (entry->exception_handler_label);\n \n+#ifdef HAVE_exception_receiver\n+      if (! exceptions_via_longjmp)\n+\tif (HAVE_exception_receiver)\n+\t  emit_insn (gen_exception_receiver ());\n+#endif\n+\n #ifdef HAVE_nonlocal_goto_receiver\n       if (! exceptions_via_longjmp)\n \tif (HAVE_nonlocal_goto_receiver)"}]}