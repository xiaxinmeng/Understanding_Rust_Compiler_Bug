{"sha": "d3073c70c5db2f657da6185f16662d14e3e32270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwNzNjNzBjNWRiMmY2NTdkYTYxODVmMTY2NjJkMTRlM2UzMjI3MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-05T18:19:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-05T18:19:26Z"}, "message": "re PR target/23602 (1081 test failures in libjava, when configured for i486-linux)\n\n        PR target/23602\n        * toplev.c (process_options): Warn about unsupported combinations\n        of unwind tables and omit-frame-pointer.\n        * config/i386/i386.c (override_options): Similarly.  Enable\n        accumulate-outgoing-args if not explicitly disabled.\ntestsuite/\n        * g++.dg/eh/omit-frame-pointer.C: Remove i?86 specific options.\n        * g++.dg/eh/omit-frame-pointer2.C: Likewise.\nlibjava/\n        * configure.host (i?86-*): Set -fomit-frame-pointer in libgcj_flags,\n        but not BACKTRACESPEC.\n        (x86_64-*): Similarly.  Don't set -ffloat-store in 64-bit mode.\n\nFrom-SVN: r105009", "tree": {"sha": "d99bcd5da2f6437d8312957a5442aca23f22ce74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d99bcd5da2f6437d8312957a5442aca23f22ce74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3073c70c5db2f657da6185f16662d14e3e32270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3073c70c5db2f657da6185f16662d14e3e32270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3073c70c5db2f657da6185f16662d14e3e32270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3073c70c5db2f657da6185f16662d14e3e32270/comments", "author": null, "committer": null, "parents": [{"sha": "10dc6e8cea9ca2bef33572e27a196d87e772546b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10dc6e8cea9ca2bef33572e27a196d87e772546b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10dc6e8cea9ca2bef33572e27a196d87e772546b"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "677e379a9d487f913815b9f87558ab105c5f9055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1,3 +1,11 @@\n+2005-10-05  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/23602\n+\t* toplev.c (process_options): Warn about unsupported combinations\n+\tof unwind tables and omit-frame-pointer.\n+\t* config/i386/i386.c (override_options): Similarly.  Enable\n+\taccumulate-outgoing-args if not explicitly disabled.\n+\n 2005-10-05  Steve Ellcey  <sje@cup.hp.com>\n \n \t* vect.md (vec_initv2si): Fix typo of V2SF to V2SI."}, {"sha": "fa2957080effb1493300ee56c315af141e47d5a0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1653,6 +1653,21 @@ override_options (void)\n       && !optimize_size)\n     target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n \n+  /* ??? Unwind info is not correct around the CFG unless either a frame\n+     pointer is present or M_A_O_A is set.  Fixing this requires rewriting\n+     unwind info generation to be aware of the CFG and propagating states\n+     around edges.  */\n+  if ((flag_unwind_tables || flag_asynchronous_unwind_tables\n+       || flag_exceptions || flag_non_call_exceptions)\n+      && flag_omit_frame_pointer\n+      && !(target_flags & MASK_ACCUMULATE_OUTGOING_ARGS))\n+    {\n+      if (target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n+\twarning (0, \"unwind tables currently require either a frame pointer \"\n+\t\t \"or -maccumulate-outgoing-args for correctness\");\n+      target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n+    }\n+\n   /* Figure out what ASM_GENERATE_INTERNAL_LABEL builds as a prefix.  */\n   {\n     char *p;"}, {"sha": "8d26dd24fb6d6b025d14bc1493bccd694ef475c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1,3 +1,9 @@\n+2005-10-05  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/23602\n+\t* g++.dg/eh/omit-frame-pointer.C: Remove i?86 specific options.\n+\t* g++.dg/eh/omit-frame-pointer2.C: Likewise.\n+\n 2005-10-05  Dale Johannesen  <dalej@apple.com>\n \n \t* gcc.c-torture/execute/float-floor.c:  New."}, {"sha": "3792e11fe4c90d0213f12ad821d6f09aaa677152", "filename": "gcc/testsuite/g++.dg/eh/omit-frame-pointer.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer.C?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1,6 +1,5 @@\n // { dg-do run }\n // { dg-options -fomit-frame-pointer }\n-// { dg-options \"-fomit-frame-pointer -mno-accumulate-outgoing-args\" { target i?86-*-* } }\n \n #include <iostream>\n "}, {"sha": "78026b518430c5bf2f1c055695cc96ad2dfd1f82", "filename": "gcc/testsuite/g++.dg/eh/omit-frame-pointer2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fomit-frame-pointer2.C?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1,6 +1,5 @@\n // Reduced from PR c++/5246, PR c++/2447\n // { dg-options \"-O -fomit-frame-pointer\" }\n-// { dg-options \"-O -fomit-frame-pointer -mno-accumulate-outgoing-args\" { target i?86-*-* } }\n // { dg-do run }\n \n void step (int)"}, {"sha": "796c7bf87e542d3621fbc2e4f7748ed1c84b68a2", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1778,6 +1778,18 @@ process_options (void)\n     }\n   if (!flag_stack_protect)\n     warn_stack_protect = 0;\n+\n+  /* ??? Unwind info is not correct around the CFG unless either a frame\n+     pointer is present or A_O_A is set.  Fixing this requires rewriting\n+     unwind info generation to be aware of the CFG and propagating states\n+     around edges.  */\n+  if (flag_unwind_tables && !ACCUMULATE_OUTGOING_ARGS\n+      && flag_omit_frame_pointer)\n+    {\n+      warning (0, \"unwind tables currently requires a frame pointer \"\n+\t       \"for correctness\");\n+      flag_omit_frame_pointer = 0;\n+    }\n }\n \n /* Initialize the compiler back end.  */"}, {"sha": "10ae06b58c8b4dc421ff2d4f6344855457c244a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -1,3 +1,10 @@\n+2005-10-05  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/23602\n+\t* configure.host (i?86-*): Set -fomit-frame-pointer in libgcj_flags,\n+\tbut not BACKTRACESPEC.\n+\t(x86_64-*): Similarly.  Don't set -ffloat-store in 64-bit mode.\n+\n 2005-10-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* testsuite/lib/jni.exp (gcj_jni_test_one): For"}, {"sha": "41429d3cd1153fb3b27f484d61b2d66db0bf42e8", "filename": "libjava/configure.host", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3073c70c5db2f657da6185f16662d14e3e32270/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3073c70c5db2f657da6185f16662d14e3e32270/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=d3073c70c5db2f657da6185f16662d14e3e32270", "patch": "@@ -95,18 +95,27 @@ case \"${host}\" in\n \t;;\n   i686-*|i586-*|i486-*|i386-*)\n \tsysdeps_dir=i386\n-\tlibgcj_flags=\"${libgcj_flags} -ffloat-store\"\n+\t# With -fomit-frame-pointer -maccumulate-outgoing-args (implied),\n+\t# the .text section of libgcj.so is 30k larger, and the .eh_frame\n+\t# section is 1.4M smaller.\n+\tlibgcj_flags=\"${libgcj_flags} -ffloat-store -fomit-frame-pointer\"\n \tlibgcj_interpreter=yes\n \tlibgcj_cxxflags=\n \tlibgcj_cflags=\n \tDIVIDESPEC=-fno-use-divide-subroutine\n-\tBACKTRACESPEC=-fomit-frame-pointer\n \tenable_hash_synchronization_default=yes\n \tslow_pthread_self=yes\n \t;;\n   x86_64-*)\n \tsysdeps_dir=x86-64\n-\tlibgcj_flags=\"${libgcj_flags} -ffloat-store\"\n+\t# For 64-bit we always use SSE registers for arithmetic,\n+\t# which doesn't have the extra precision problems of the fpu.\n+\t# But be careful about 32-bit multilibs.\n+\tcase \" $CC \" in\n+\t*\" -m32 \"*)\n+\t\tlibgcj_flags=\"${libgcj_flags} -ffloat-store\" ;;\n+\tesac\n+\tlibgcj_flags=\"${libgcj_flags} -fomit-frame-pointer\"\n \tlibgcj_cxxflags=\n \tlibgcj_cflags=\n \tDIVIDESPEC=-f%{m32:no-}use-divide-subroutine"}]}