{"sha": "c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkNjFhYjg2M2MxODgyNjdiOGJhYjNjNGQwZGIyYjllOTEwNDdjMA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-07-14T15:26:09Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-07-14T15:26:09Z"}, "message": "[ARM] Rewire -mfpu=fp-armv8 as VFPv5 + D32 + DP\n\nfp-armv8 is currently defined as a double precision FPv5 with 32 D\nregisters *and* a special FP_ARMv8 bit. However FP for ARMv8 should only\nbring 32 D registers on top of FPv5-D16 so this FP_ARMv8 bit is\nspurious. As a consequence, many instruction patterns which are guarded\nby TARGET_FPU_ARMV8 are unavailable to FPv5-D16 and FPv5-SP-D16.\n\nThis commit gets rid of TARGET_FPU_ARMV8 and rewire all uses to\nexpressions based on TARGET_VFP5, TARGET_VFPD32 and TARGET_VFP_DOUBLE.\nIt also redefine ISA_FP_ARMv8 to include the D32 capability to\ndistinguish it from FPv5-D16. At last, it sets the +fp.sp for ARMv8-R to\nenable FPv5-SP-D16 (ie FP for ARMv8 with single precision only and 16 D\nregisters).\n\n2017-07-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm-isa.h (isa_bit_FP_ARMv8): Delete enumerator.\n    (ISA_FP_ARMv8): Define as ISA_FPv5 and ISA_FP_D32.\n    * config/arm/arm-cpus.in (armv8-r): Define fp.sp as enabling FPv5.\n    (fp-armv8): Define it as FP_ARMv8 only.\n    config/arm/arm.h (TARGET_FPU_ARMV8): Delete.\n    (TARGET_VFP_FP16INST): Define using TARGET_VFP5 rather than\n    TARGET_FPU_ARMV8.\n    config/arm/arm.c (arm_rtx_costs_internal): Replace checks against\n    TARGET_FPU_ARMV8 by checks against TARGET_VFP5.\n    * config/arm/arm-builtins.c (arm_builtin_vectorized_function): Define\n    first ARM_CHECK_BUILTIN_MODE definition using TARGET_VFP5 rather\n    than TARGET_FPU_ARMV8.\n    * config/arm/arm-c.c (arm_cpu_builtins): Likewise for\n    __ARM_FEATURE_NUMERIC_MAXMIN macro definition.\n    * config/arm/arm.md (cmov<mode>): Condition on TARGET_VFP5 rather than\n    TARGET_FPU_ARMV8.\n    * config/arm/neon.md (neon_vrint): Likewise.\n    (neon_vcvt): Likewise.\n    (neon_<fmaxmin_op><mode>): Likewise.\n    (<fmaxmin><mode>3): Likewise.\n    * config/arm/vfp.md (l<vrint_pattern><su_optab><mode>si2): Likewise.\n    * config/arm/predicates.md (arm_cond_move_operator): Check against\n    TARGET_VFP5 rather than TARGET_FPU_ARMV8 and fix spacing.\n\nFrom-SVN: r250204", "tree": {"sha": "65a21350058a307eaab1593cd7856d8249f64d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a21350058a307eaab1593cd7856d8249f64d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "51bd2c2d32292fb1101616e0e255481319dd441c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -1,3 +1,29 @@\n+2017-07-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm-isa.h (isa_bit_FP_ARMv8): Delete enumerator.\n+\t(ISA_FP_ARMv8): Define as ISA_FPv5 and ISA_FP_D32.\n+\t* config/arm/arm-cpus.in (armv8-r): Define fp.sp as enabling FPv5.\n+\t(fp-armv8): Define it as FP_ARMv8 only.\n+\tconfig/arm/arm.h (TARGET_FPU_ARMV8): Delete.\n+\t(TARGET_VFP_FP16INST): Define using TARGET_VFP5 rather than\n+\tTARGET_FPU_ARMV8.\n+\tconfig/arm/arm.c (arm_rtx_costs_internal): Replace checks against\n+\tTARGET_FPU_ARMV8 by checks against TARGET_VFP5.\n+\t* config/arm/arm-builtins.c (arm_builtin_vectorized_function): Define\n+\tfirst ARM_CHECK_BUILTIN_MODE definition using TARGET_VFP5 rather\n+\tthan TARGET_FPU_ARMV8.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Likewise for\n+\t__ARM_FEATURE_NUMERIC_MAXMIN macro definition.\n+\t* config/arm/arm.md (cmov<mode>): Condition on TARGET_VFP5 rather than\n+\tTARGET_FPU_ARMV8.\n+\t* config/arm/neon.md (neon_vrint): Likewise.\n+\t(neon_vcvt): Likewise.\n+\t(neon_<fmaxmin_op><mode>): Likewise.\n+\t(<fmaxmin><mode>3): Likewise.\n+\t* config/arm/vfp.md (l<vrint_pattern><su_optab><mode>si2): Likewise.\n+\t* config/arm/predicates.md (arm_cond_move_operator): Check against\n+\tTARGET_VFP5 rather than TARGET_FPU_ARMV8 and fix spacing.\n+\n 2017-07-14  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_print_operand): Move comments"}, {"sha": "7504ed581c63a657a0dff48442633704bd252b2e", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -3098,7 +3098,7 @@ arm_builtin_vectorized_function (unsigned int fn, tree type_out, tree type_in)\n    NULL_TREE is returned if no such builtin is available.  */\n #undef ARM_CHECK_BUILTIN_MODE\n #define ARM_CHECK_BUILTIN_MODE(C)    \\\n-  (TARGET_FPU_ARMV8   \\\n+  (TARGET_VFP5   \\\n    && flag_unsafe_math_optimizations \\\n    && ARM_CHECK_BUILTIN_MODE_1 (C))\n "}, {"sha": "9178937b6d9e0fe5d0948701390c4cf01f4f8c7d", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -96,7 +96,7 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n \t\t       || TARGET_ARM_ARCH_ISA_THUMB >=2));\n \n   def_or_undef_macro (pfile, \"__ARM_FEATURE_NUMERIC_MAXMIN\",\n-\t\t      TARGET_ARM_ARCH >= 8 && TARGET_NEON && TARGET_FPU_ARMV8);\n+\t\t      TARGET_ARM_ARCH >= 8 && TARGET_NEON && TARGET_VFP5);\n \n   def_or_undef_macro (pfile, \"__ARM_FEATURE_SIMD32\", TARGET_INT_SIMD);\n "}, {"sha": "e2ff297aed7514073dbb3bf5ee86964f202e5a14", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -389,7 +389,7 @@ begin arch armv8-r\n  option crc add bit_crc32\n # fp.sp => fp-armv8 (d16); simd => simd + fp-armv8 + d32 + double precision\n # note: no fp option for fp-armv8 (d16) + double precision at the moment\n- option fp.sp add FP_ARMv8\n+ option fp.sp add FPv5\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n  option nocrypto remove ALL_CRYPTO\n@@ -1390,7 +1390,7 @@ begin fpu fpv5-d16\n end fpu fpv5-d16\n \n begin fpu fp-armv8\n- isa FP_ARMv8 FP_D32\n+ isa FP_ARMv8\n end fpu fp-armv8\n \n begin fpu neon-fp-armv8"}, {"sha": "dbd29eaa52f2007498c2aff6263b8b6c3a70e2c2", "filename": "gcc/config/arm/arm-isa.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm-isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-isa.h?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -60,7 +60,6 @@ enum isa_feature\n     isa_bit_VFPv4,\t/* Vector floating point v4.  */\n     isa_bit_FPv5,\t/* Floating point v5.  */\n     isa_bit_lpae,\t/* ARMv7-A LPAE.  */\n-    isa_bit_FP_ARMv8,\t/* ARMv8 floating-point extension.  */\n     isa_bit_neon,\t/* Advanced SIMD instructions.  */\n     isa_bit_fp16conv,\t/* Conversions to/from fp16 (VFPv3 extension).  */\n     isa_bit_fp_dbl,\t/* Double precision operations supported.  */\n@@ -143,7 +142,7 @@ enum isa_feature\n    default.  isa_bit_fp16 is deliberately missing from this list.  */\n #define ISA_ALL_FPU_INTERNAL\t\t\t\t\t\t\\\n   isa_bit_VFPv2, isa_bit_VFPv3, isa_bit_VFPv4, isa_bit_FPv5,\t\t\\\n-  isa_bit_FP_ARMv8, isa_bit_fp16conv, isa_bit_fp_dbl, ISA_ALL_SIMD\n+  isa_bit_fp16conv, isa_bit_fp_dbl, ISA_ALL_SIMD\n \n /* Similarly, but including fp16 and other extensions that aren't part of\n    -mfpu support.  */\n@@ -154,10 +153,10 @@ enum isa_feature\n #define ISA_VFPv3\tISA_VFPv2, isa_bit_VFPv3\n #define ISA_VFPv4\tISA_VFPv3, isa_bit_VFPv4, isa_bit_fp16conv\n #define ISA_FPv5\tISA_VFPv4, isa_bit_FPv5\n-#define ISA_FP_ARMv8\tISA_FPv5, isa_bit_FP_ARMv8\n \n #define ISA_FP_DBL\tisa_bit_fp_dbl\n #define ISA_FP_D32\tISA_FP_DBL, isa_bit_fp_d32\n+#define ISA_FP_ARMv8\tISA_FPv5, ISA_FP_D32\n #define ISA_NEON\tISA_FP_D32, isa_bit_neon\n #define ISA_CRYPTO\tISA_NEON, isa_bit_crypto\n "}, {"sha": "f59132c3f079d10d9e3d920b61037db2f3144eee", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -10755,7 +10755,7 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t{\n \t  if (speed_p)\n \t    *cost += extra_cost->fp[mode == DFmode].widen;\n-\t  if (!TARGET_FPU_ARMV8\n+\t  if (!TARGET_VFP5\n \t      && GET_MODE (XEXP (x, 0)) == HFmode)\n \t    {\n \t      /* Pre v8, widening HF->DF is a two-step process, first\n@@ -10849,7 +10849,7 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t      return true;\n \t    }\n \t  else if (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t\t   && TARGET_FPU_ARMV8)\n+\t\t   && TARGET_VFP5)\n \t    {\n \t      if (speed_p)\n \t\t*cost += extra_cost->fp[mode == DFmode].roundint;"}, {"sha": "4f53583cf0219de4329bc64a47a5a42c550ff354", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -196,10 +196,6 @@ extern tree arm_fp16_type_node;\n /* FPU supports fused-multiply-add operations.  */\n #define TARGET_FMA (bitmap_bit_p (arm_active_target.isa, isa_bit_VFPv4))\n \n-/* FPU is ARMv8 compatible.  */\n-#define TARGET_FPU_ARMV8\t\t\t\t\t\\\n-  (bitmap_bit_p (arm_active_target.isa, isa_bit_FP_ARMv8))\n-\n /* FPU supports Crypto extensions.  */\n #define TARGET_CRYPTO (bitmap_bit_p (arm_active_target.isa, isa_bit_crypto))\n \n@@ -216,7 +212,7 @@ extern tree arm_fp16_type_node;\n \n /* FPU supports the floating point FP16 instructions for ARMv8.2 and later.  */\n #define TARGET_VFP_FP16INST \\\n-  (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 && arm_fp16_inst)\n+  (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP5 && arm_fp16_inst)\n \n /* FPU supports the AdvSIMD FP16 instructions for ARMv8.2 and later.  */\n #define TARGET_NEON_FP16INST (TARGET_VFP_FP16INST && TARGET_NEON_RDMA)"}, {"sha": "049a78edefe9f85c6f84a4ecf0158d559e1d5674", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -7879,7 +7879,7 @@\n \t\t\t                      \"<F_constraint>\")\n \t\t\t  (match_operand:SDF 4 \"s_register_operand\"\n \t\t\t                      \"<F_constraint>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 <vfp_double_cond>\"\n+  \"TARGET_HARD_FLOAT && TARGET_VFP5 <vfp_double_cond>\"\n   \"*\n   {\n     enum arm_cond_code code = maybe_get_arm_condition_code (operands[1]);"}, {"sha": "235c46da1a19712e2924d748545474ed991d9f92", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -751,7 +751,7 @@\n         (unspec:VCVTF [(match_operand:VCVTF 1\n \t\t         \"s_register_operand\" \"w\")]\n \t\tNEON_VRINT))]\n-  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"TARGET_NEON && TARGET_VFP5\"\n   \"vrint<nvrint_variant>.f32\\\\t%<V_reg>0, %<V_reg>1\"\n   [(set_attr \"type\" \"neon_fp_round_<V_elem_ch><q>\")]\n )\n@@ -761,7 +761,7 @@\n \t(FIXUORS:<V_cmp_result> (unspec:VCVTF\n \t\t\t       [(match_operand:VCVTF 1 \"register_operand\" \"w\")]\n \t\t\t       NEON_VCVT)))]\n-  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"TARGET_NEON && TARGET_VFP5\"\n   \"vcvt<nvrint_variant>.<su>32.f32\\\\t%<V_reg>0, %<V_reg>1\"\n   [(set_attr \"type\" \"neon_fp_to_int_<V_elem_ch><q>\")\n    (set_attr \"predicable\" \"no\")]\n@@ -2901,7 +2901,7 @@\n \t(unspec:VCVTF [(match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:VCVTF 2 \"s_register_operand\" \"w\")]\n \t\t       VMAXMINFNM))]\n-  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"TARGET_NEON && TARGET_VFP5\"\n   \"<fmaxmin_op>.<V_s_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_fp_minmax_s<q>\")]\n )\n@@ -2912,7 +2912,7 @@\n \t(unspec:VCVTF [(match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:VCVTF 2 \"s_register_operand\" \"w\")]\n \t\t       VMAXMINFNM))]\n-  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"TARGET_NEON && TARGET_VFP5\"\n   \"<fmaxmin_op>.<V_s_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_fp_minmax_s<q>\")]\n )"}, {"sha": "3e25cd16b29231d53b4cadce3db0fbb3168cd4c5", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -350,9 +350,9 @@\n \n (define_special_predicate \"arm_cond_move_operator\"\n   (if_then_else (match_test \"arm_restrict_it\")\n-                (and (match_test \"TARGET_FPU_ARMV8\")\n-                     (match_operand 0 \"arm_vsel_comparison_operator\"))\n-                (match_operand 0 \"expandable_comparison_operator\")))\n+\t\t(and (match_test \"TARGET_VFP5\")\n+\t\t     (match_operand 0 \"arm_vsel_comparison_operator\"))\n+\t\t(match_operand 0 \"expandable_comparison_operator\")))\n \n (define_special_predicate \"noov_comparison_operator\"\n   (match_code \"lt,ge,eq,ne\"))"}, {"sha": "23c1d67c9e3707e64a4e206dc62727e4c79ba89c", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d61ab863c188267b8bab3c4d0db2b9e91047c0/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=c8d61ab863c188267b8bab3c4d0db2b9e91047c0", "patch": "@@ -1997,7 +1997,7 @@\n         (FIXUORS:SI (unspec:SDF\n                         [(match_operand:SDF 1\n                            \"register_operand\" \"<F_constraint>\")] VCVT)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 <vfp_double_cond>\"\n+  \"TARGET_HARD_FLOAT && TARGET_VFP5 <vfp_double_cond>\"\n   \"vcvt<vrint_variant>.<su>32.<V_if_elem>\\\\t%0, %<V_reg>1\"\n   [(set_attr \"predicable\" \"no\")\n    (set_attr \"conds\" \"unconditional\")"}]}