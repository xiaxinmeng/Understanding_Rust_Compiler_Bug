{"sha": "d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhNTdiMDMwZjFjN2RmMzNjNmJjM2M2NjFkMTZjOWNiNzllOTZkZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-27T17:30:36Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-27T17:30:36Z"}, "message": "Fix handling of VEC_COND_EXPR trap tests [PR100284]\n\nNow that VEC_COND_EXPR has normal unnested operands,\noperation_could_trap_p can treat it like any other expression.\n\nThis fixes many testsuite ICEs for SVE, but it turns out that none\nof the tests in gcc.target/aarch64/sve were affected.  Anyone testing\non non-SVE aarch64 therefore wouldn't have seen it.\n\ngcc/\n\tPR middle-end/100284\n\t* gimple.c (gimple_could_trap_p_1): Remove VEC_COND_EXPR test.\n\t* tree-eh.c (operation_could_trap_p): Handle VEC_COND_EXPR rather\n\tthan asserting on it.\n\ngcc/testsuite/\n\tPR middle-end/100284\n\t* gcc.target/aarch64/sve/pr81003.c: New test.", "tree": {"sha": "f795bc6ca70c9a3e42e8ec329abb66a32579b101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f795bc6ca70c9a3e42e8ec329abb66a32579b101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae2a45c287d254c2890feff2cca46ed2ddb06ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae2a45c287d254c2890feff2cca46ed2ddb06ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae2a45c287d254c2890feff2cca46ed2ddb06ca"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "f1044e9c630e2324da4ad1ef9cc0df90086d3143", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "patch": "@@ -2161,9 +2161,6 @@ gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n       /* For COND_EXPR only the condition may trap.  */\n       if (op == COND_EXPR)\n \treturn tree_could_trap_p (gimple_assign_rhs1 (s));\n-      /* A VEC_COND_EXPR cannot trap.  */\n-      else if (op == VEC_COND_EXPR)\n-\treturn false;\n \n       /* For comparisons we need to check rhs operand types instead of rhs type\n          (which is BOOLEAN_TYPE).  */"}, {"sha": "661a6f97d6d70aeecfb8294ed21b16185dbdfec9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr81003.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr81003.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr81003.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr81003.c?ref=d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-O3\" } */\n+\n+unsigned int a, b;\n+\n+void\n+foo (void)\n+{\n+  for (b = 0; b < 13; b += 2)\n+    a &= !!b;\n+}"}, {"sha": "601285c401cc63a9035b76f4023006b2b72d12dc", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=d0a57b030f1c7df33c6bc3c661d16c9cb79e96dd", "patch": "@@ -2541,9 +2541,9 @@ operation_could_trap_p (enum tree_code op, bool fp_operation, bool honor_trapv,\n   bool honor_snans = fp_operation && flag_signaling_nans != 0;\n   bool handled;\n \n-  /* This function cannot tell whether or not COND_EXPR and VEC_COND_EXPR could\n-     trap, because that depends on the respective condition op.  */\n-  gcc_assert (op != COND_EXPR && op != VEC_COND_EXPR);\n+  /* This function cannot tell whether or not COND_EXPR could trap,\n+     because that depends on its condition op.  */\n+  gcc_assert (op != COND_EXPR);\n \n   if (TREE_CODE_CLASS (op) != tcc_comparison\n       && TREE_CODE_CLASS (op) != tcc_unary"}]}