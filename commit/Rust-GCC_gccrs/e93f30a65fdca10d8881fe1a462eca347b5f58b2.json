{"sha": "e93f30a65fdca10d8881fe1a462eca347b5f58b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzZjMwYTY1ZmRjYTEwZDg4ODFmZTFhNDYyZWNhMzQ3YjVmNThiMg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2016-11-10T17:04:31Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2016-11-10T17:04:31Z"}, "message": "target.def (additional_allocno_class_p): New.\n\n2016-11-10  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* target.def (additional_allocno_class_p): New.\n\t* hooks.h (hook_bool_reg_class_t_false): New prototype.\n\t* hooks.c (hook_bool_reg_class_t_false): New.\n\t* ira.c (setup_allocno_and_important_classes): Use the new hook.\n\t* doc/tm.texi.in (TARGET_ADDITIONAL_ALLOCNO_CLASS_P): Add it.\n\t* doc/tm.texi: Update.\n\nFrom-SVN: r242043", "tree": {"sha": "cba95c2cc570e9520f81b488fc88cce5f8c0814f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba95c2cc570e9520f81b488fc88cce5f8c0814f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93f30a65fdca10d8881fe1a462eca347b5f58b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93f30a65fdca10d8881fe1a462eca347b5f58b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93f30a65fdca10d8881fe1a462eca347b5f58b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93f30a65fdca10d8881fe1a462eca347b5f58b2/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0569479efa2b65ce9e08e24d452d0619d60afd95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0569479efa2b65ce9e08e24d452d0619d60afd95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0569479efa2b65ce9e08e24d452d0619d60afd95"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "a87a17f13416b071032c6655e3cdf5e7bf29f069", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -1,3 +1,12 @@\n+2016-11-10  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* target.def (additional_allocno_class_p): New.\n+\t* hooks.h (hook_bool_reg_class_t_false): New prototype.\n+\t* hooks.c (hook_bool_reg_class_t_false): New.\n+\t* ira.c (setup_allocno_and_important_classes): Use the new hook.\n+\t* doc/tm.texi.in (TARGET_ADDITIONAL_ALLOCNO_CLASS_P): Add it.\n+\t* doc/tm.texi: Update.\n+\n 2016-11-10  Jason Merrill  <jason@redhat.com>\n \n \t* gengtype.c (new_structure): Append to structures list."}, {"sha": "85341aeeacea531ae2c8bc1e043eac376b6e2214", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -2899,6 +2899,10 @@ addressing.\n This hook defines a class of registers which could be used for spilling  pseudos of the given mode and class, or @code{NO_REGS} if only memory  should be used.  Not defining this hook is equivalent to returning  @code{NO_REGS} for all inputs.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_ADDITIONAL_ALLOCNO_CLASS_P (reg_class_t)\n+This hook should return @code{true} if given class of registers should  be an allocno class in any way.  Usually RA uses only one register  class from all classes containing the same register set.  In some  complicated cases, you need to have two or more such classes as  allocno ones for RA correct work.  Not defining this hook is  equivalent to returning @code{false} for all inputs.\n+@end deftypefn\n+\n @deftypefn {Target Hook} machine_mode TARGET_CSTORE_MODE (enum insn_code @var{icode})\n This hook defines the machine mode to use for the boolean result of  conditional store patterns.  The ICODE argument is the instruction code  for the cstore being performed.  Not definiting this hook is the same  as accepting the mode encoded into operand 0 of the cstore expander  patterns.\n @end deftypefn"}, {"sha": "400d574f3fa9e4b144cf2780e3edf5b9478e66c7", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -2507,6 +2507,8 @@ value that the middle-end intended.\n \n @hook TARGET_SPILL_CLASS\n \n+@hook TARGET_ADDITIONAL_ALLOCNO_CLASS_P\n+\n @hook TARGET_CSTORE_MODE\n \n @hook TARGET_COMPUTE_PRESSURE_CLASSES"}, {"sha": "6fed2c506c8bdb65093c61c2ab6953e4a36cdd48", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -466,3 +466,11 @@ hook_bool_uint_uintp_false (unsigned int, unsigned int *)\n {\n   return false;\n }\n+\n+/* Generic hook that takes a register class and returns false.  */\n+bool\n+hook_bool_reg_class_t_false (reg_class_t regclass ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+"}, {"sha": "e59b42e3a7f10b6e85688d6509f70729b207f516", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -55,6 +55,7 @@ extern bool hook_bool_rtx_insn_true (rtx_insn *);\n extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_rtx_insn_int_false (rtx_insn *, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n+extern bool hook_bool_reg_class_t_false (reg_class_t regclass);\n extern bool hook_bool_rtx_mode_int_int_intp_bool_false (rtx, machine_mode,\n \t\t\t\t\t\t\tint, int, int *, bool);\n extern bool hook_bool_tree_tree_false (tree, tree);"}, {"sha": "315b8470b7f28690cf493d61b2f18fea085a2e77", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -1012,7 +1012,7 @@ setup_allocno_and_important_classes (void)\n \t\t\t\t    temp_hard_regset2))\n \t    break;\n \t}\n-      if (j >= n)\n+      if (j >= n || targetm.additional_allocno_class_p (i))\n \tclasses[n++] = (enum reg_class) i;\n       else if (i == GENERAL_REGS)\n \t/* Prefer general regs.  For i386 example, it means that"}, {"sha": "caeeff9c22ac7c577245f0e367d695da09212155", "filename": "gcc/target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f30a65fdca10d8881fe1a462eca347b5f58b2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e93f30a65fdca10d8881fe1a462eca347b5f58b2", "patch": "@@ -5029,6 +5029,18 @@ DEFHOOK\n  reg_class_t, (reg_class_t, machine_mode),\n  NULL)\n \n+/* Determine an additional allocno class.  */\n+DEFHOOK\n+(additional_allocno_class_p,\n+ \"This hook should return @code{true} if given class of registers should\\\n+  be an allocno class in any way.  Usually RA uses only one register\\\n+  class from all classes containing the same register set.  In some\\\n+  complicated cases, you need to have two or more such classes as\\\n+  allocno ones for RA correct work.  Not defining this hook is\\\n+  equivalent to returning @code{false} for all inputs.\",\n+ bool, (reg_class_t),\n+ hook_bool_reg_class_t_false)\n+\n DEFHOOK\n (cstore_mode,\n  \"This hook defines the machine mode to use for the boolean result of\\"}]}