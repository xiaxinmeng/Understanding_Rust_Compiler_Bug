{"sha": "ee9631816531f0ef9005558cec7d10ea5ee6a074", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5NjMxODE2NTMxZjBlZjkwMDU1NThjZWM3ZDEwZWE1ZWU2YTA3NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-31T15:34:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-31T15:34:52Z"}, "message": "invoke.texi (-msselibm): Document.\n\n2006-01-31  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (-msselibm): Document.\n\t* target.h (expand_library_builtin): New target hook.\n\t* builtins.c (expand_builtin): Use expand_library_builtin.\n\t(default_expand_library_builtin): New function.\n\t* gcc.c (LINK_GCC_MATH_SPEC): Define.\n\t(LINK_COMMAND_SPEC): Handle %(link_gcc_math).\n\t(link_gcc_math_spec): Declare.\n\t(static_specs): Add link_gcc_math_spec.\n\t* expr.h (default_expand_library_builtin): Declare.\n\t* target-def.h (TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n\t(TARGET_INITIALIZER): Add TARGET_EXPAND_LIBRARY_BUILTIN.\n\t* config/i386/i386.h: Provide LINK_GCC_MATH_SPEC.\n\t* config/i386/i386.opt (msselibm): New target option.\n\t* config/i386/i386.c (ix86_builtin_function_variants): New array.\n\t(ix86_init_sse_abi_builtins): New function.\n\t(ix86_expand_library_builtin): Likewise.\n\t(TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n\t(override_options): Handle error conditions wrt -msselibm.\n\t(ix86_builtins): Add function codes for SSE2 ABI builtins.\n\t(ix86_init_builtins): Call ix86_init_sse_abi_builtins.\n\t* doc/extend.texi (__builtin_sse2_*): Document new target specific\n\tbuiltins.\n\n\t* gcc.target/i386/sselibm-1.c: New testcase.\n\t* gcc.target/i386/sselibm-2.c: Likewise.\n\t* gcc.target/i386/sselibm-3.c: Likewise.\n\t* gcc.target/i386/sselibm-4.c: Likewise.\n\t* gcc.target/i386/sselibm-5.c: Likewise.\n\nFrom-SVN: r110439", "tree": {"sha": "15376ec8b6b321d2bd9b82addcfc370a7717f2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15376ec8b6b321d2bd9b82addcfc370a7717f2e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee9631816531f0ef9005558cec7d10ea5ee6a074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9631816531f0ef9005558cec7d10ea5ee6a074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9631816531f0ef9005558cec7d10ea5ee6a074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9631816531f0ef9005558cec7d10ea5ee6a074/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b082276563252b8e0721f1f9ee84dfaa98bcc620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b082276563252b8e0721f1f9ee84dfaa98bcc620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b082276563252b8e0721f1f9ee84dfaa98bcc620"}], "stats": {"total": 386, "additions": 384, "deletions": 2}, "files": [{"sha": "03b7cfe165f21a95e4f13ebde679eb547e7530da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -1,3 +1,28 @@\n+2006-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-msselibm): Document.\n+\t* target.h (expand_library_builtin): New target hook.\n+\t* builtins.c (expand_builtin): Use expand_library_builtin.\n+\t(default_expand_library_builtin): New function.\n+\t* gcc.c (LINK_GCC_MATH_SPEC): Define.\n+\t(LINK_COMMAND_SPEC): Handle %(link_gcc_math).\n+\t(link_gcc_math_spec): Declare.\n+\t(static_specs): Add link_gcc_math_spec.\n+\t* expr.h (default_expand_library_builtin): Declare.\n+\t* target-def.h (TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n+\t(TARGET_INITIALIZER): Add TARGET_EXPAND_LIBRARY_BUILTIN.\n+\t* config/i386/i386.h: Provide LINK_GCC_MATH_SPEC.\n+\t* config/i386/i386.opt (msselibm): New target option.\n+\t* config/i386/i386.c (ix86_builtin_function_variants): New array.\n+\t(ix86_init_sse_abi_builtins): New function.\n+\t(ix86_expand_library_builtin): Likewise.\n+\t(TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n+\t(override_options): Handle error conditions wrt -msselibm.\n+\t(ix86_builtins): Add function codes for SSE2 ABI builtins.\n+\t(ix86_init_builtins): Call ix86_init_sse_abi_builtins.\n+\t* doc/extend.texi (__builtin_sse2_*): Document new target specific\n+\tbuiltins.\n+\n 2006-01-31  Richard Guenther  <rguenther@suse.de>\n \tPaolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "fd551daf45669cafe252b308737208e23cc16f4f", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -5560,6 +5560,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return targetm.expand_builtin (exp, target, subtarget, mode, ignore);\n+  else\n+    {\n+      /* Try expanding the builtin via the generic target hook.  */\n+      rtx tmp = targetm.expand_library_builtin (exp, target, subtarget,\n+\t\t\t\t\t\tmode, ignore);\n+      if (tmp != NULL_RTX)\n+\treturn tmp;\n+    }\n \n   /* When not optimizing, generate calls to library functions for a certain\n      set of builtins.  */\n@@ -8913,6 +8921,18 @@ default_expand_builtin (tree exp ATTRIBUTE_UNUSED,\n   return NULL_RTX;\n }\n \n+/* Default target-specific library builtin expander that does nothing.  */\n+\n+rtx\n+default_expand_library_builtin (tree exp ATTRIBUTE_UNUSED,\n+\t\t\trtx target ATTRIBUTE_UNUSED,\n+\t\t\trtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\tint ignore ATTRIBUTE_UNUSED)\n+{\n+  return NULL_RTX;\n+}\n+\n /* Returns true is EXP represents data that would potentially reside\n    in a readonly section.  */\n "}, {"sha": "ed23c86a1d44180911d50c6d3c76b9c1562b60dc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -1050,6 +1050,9 @@ int ix86_section_threshold = 65536;\n /* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n char internal_label_prefix[16];\n int internal_label_prefix_len;\n+\n+/* Table for BUILT_IN_NORMAL to BUILT_IN_MD mapping.  */\n+static GTY(()) tree ix86_builtin_function_variants[(int) END_BUILTINS];\n \f\n static bool ix86_handle_option (size_t, const char *, int);\n static void output_pic_addr_const (FILE *, rtx, int);\n@@ -1084,6 +1087,7 @@ static int ix86_issue_rate (void);\n static int ix86_adjust_cost (rtx, rtx, rtx, int);\n static int ia32_multipass_dfa_lookahead (void);\n static void ix86_init_mmx_sse_builtins (void);\n+static void ix86_init_sse_abi_builtins (void);\n static rtx x86_this_parameter (tree);\n static void x86_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, tree);\n@@ -1140,6 +1144,7 @@ static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n static void ix86_init_builtins (void);\n static rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static rtx ix86_expand_library_builtin (tree, rtx, rtx, enum machine_mode, int);\n static const char *ix86_mangle_fundamental_type (tree);\n static tree ix86_stack_protect_fail (void);\n static rtx ix86_internal_arg_pointer (void);\n@@ -1204,6 +1209,8 @@ static section *x86_64_elf_select_section (tree decl, int reloc,\n #define TARGET_INIT_BUILTINS ix86_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n+#undef TARGET_EXPAND_LIBRARY_BUILTIN\n+#define TARGET_EXPAND_LIBRARY_BUILTIN ix86_expand_library_builtin\n \n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ix86_output_function_epilogue\n@@ -1886,6 +1893,16 @@ override_options (void)\n       && ! TARGET_SSE)\n     error (\"-msseregparm used without SSE enabled\");\n \n+  /* Accept -msselibm only if at least SSE support is enabled.  */\n+  if (TARGET_SSELIBM\n+      && ! TARGET_SSE2)\n+    error (\"-msselibm used without SSE2 enabled\");\n+\n+  /* Ignore -msselibm on 64bit targets.  */\n+  if (TARGET_SSELIBM\n+      && TARGET_64BIT)\n+    error (\"-msselibm used on a 64bit target\");\n+\n   ix86_fpmath = TARGET_FPMATH_DEFAULT;\n \n   if (ix86_fpmath_string != 0)\n@@ -14235,6 +14252,28 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_SET_V8HI,\n   IX86_BUILTIN_VEC_SET_V4HI,\n \n+  /* SSE2 ABI functions.  */\n+  IX86_BUILTIN_SSE2_ACOS,\n+  IX86_BUILTIN_SSE2_ACOSF,\n+  IX86_BUILTIN_SSE2_ASIN,\n+  IX86_BUILTIN_SSE2_ASINF,\n+  IX86_BUILTIN_SSE2_ATAN,\n+  IX86_BUILTIN_SSE2_ATANF,\n+  IX86_BUILTIN_SSE2_ATAN2,\n+  IX86_BUILTIN_SSE2_ATAN2F,\n+  IX86_BUILTIN_SSE2_COS,\n+  IX86_BUILTIN_SSE2_COSF,\n+  IX86_BUILTIN_SSE2_EXP,\n+  IX86_BUILTIN_SSE2_EXPF,\n+  IX86_BUILTIN_SSE2_LOG10,\n+  IX86_BUILTIN_SSE2_LOG10F,\n+  IX86_BUILTIN_SSE2_LOG,\n+  IX86_BUILTIN_SSE2_LOGF,\n+  IX86_BUILTIN_SSE2_SIN,\n+  IX86_BUILTIN_SSE2_SINF,\n+  IX86_BUILTIN_SSE2_TAN,\n+  IX86_BUILTIN_SSE2_TANF,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -14616,6 +14655,8 @@ ix86_init_builtins (void)\n {\n   if (TARGET_MMX)\n     ix86_init_mmx_sse_builtins ();\n+  if (TARGET_SSE2)\n+    ix86_init_sse_abi_builtins ();\n }\n \n /* Set up all the MMX/SSE builtins.  This is not called if TARGET_MMX\n@@ -15255,6 +15296,70 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_vec_set_v4hi\",\n \t       ftype, IX86_BUILTIN_VEC_SET_V4HI);\n }\n+#undef def_builtin\n+\n+/* Set up all the SSE ABI builtins that we may use to override\n+   the normal builtins.  */\n+static void\n+ix86_init_sse_abi_builtins (void)\n+{\n+  tree dbl, flt, dbl2, flt2;\n+\n+  /* Bail out in case the template definitions are not available.  */\n+  if (! built_in_decls [BUILT_IN_SIN]\n+      || ! built_in_decls [BUILT_IN_SINF]\n+      || ! built_in_decls [BUILT_IN_ATAN2]\n+      || ! built_in_decls [BUILT_IN_ATAN2F])\n+    return;\n+\n+  /* Build the function types as variants of the existing ones.  */\n+  dbl = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_SIN]));\n+  TYPE_ATTRIBUTES (dbl)\n+    = tree_cons (get_identifier (\"sseregparm\"),\n+                 NULL_TREE, TYPE_ATTRIBUTES (dbl));\n+  flt = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_SINF]));\n+  TYPE_ATTRIBUTES (flt)\n+    = tree_cons (get_identifier (\"sseregparm\"),\n+                 NULL_TREE, TYPE_ATTRIBUTES (flt));\n+  dbl2 = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_ATAN2]));\n+  TYPE_ATTRIBUTES (dbl2)\n+    = tree_cons (get_identifier (\"sseregparm\"),\n+                 NULL_TREE, TYPE_ATTRIBUTES (dbl2));\n+  flt2 = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_ATAN2F]));\n+  TYPE_ATTRIBUTES (flt2)\n+    = tree_cons (get_identifier (\"sseregparm\"),\n+                 NULL_TREE, TYPE_ATTRIBUTES (flt2));\n+\n+#define def_builtin(capname, name, type) \\\n+  ix86_builtin_function_variants [BUILT_IN_ ## capname]\t\t\t\\\n+    = lang_hooks.builtin_function (\"__builtin_sse2_\" # name, type,\t\\\n+\t\t\t\t   IX86_BUILTIN_SSE2_ ## capname,\t\\\n+\t\t\t\t   BUILT_IN_NORMAL,\t\t\t\\\n+\t\t\t\t   \"__libm_sse2_\" # name, NULL_TREE)\n+ \n+  def_builtin (ACOS, acos, dbl);\n+  def_builtin (ACOSF, acosf, flt);\n+  def_builtin (ASIN, asin, dbl);\n+  def_builtin (ASINF, asinf, flt);\n+  def_builtin (ATAN, atan, dbl);\n+  def_builtin (ATANF, atanf, flt);\n+  def_builtin (ATAN2, atan2, dbl2);\n+  def_builtin (ATAN2F, atan2f, flt2);\n+  def_builtin (COS, cos, dbl);\n+  def_builtin (COSF, cosf, flt);\n+  def_builtin (EXP, exp, dbl);\n+  def_builtin (EXPF, expf, flt);\n+  def_builtin (LOG10, log10, dbl);\n+  def_builtin (LOG10F, log10f, flt);\n+  def_builtin (LOG, log, dbl);\n+  def_builtin (LOGF, logf, flt);\n+  def_builtin (SIN, sin, dbl);\n+  def_builtin (SINF, sinf, flt);\n+  def_builtin (TAN, tan, dbl);\n+  def_builtin (TANF, tanf, flt);\n+\n+#undef def_builtin\n+}\n \n /* Errors in the source file can cause expand_expr to return const0_rtx\n    where we expect a vector.  To avoid crashing, use one of the vector\n@@ -16089,6 +16194,39 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n+/* Expand an expression EXP that calls a built-in library function,\n+   with result going to TARGET if that's convenient\n+   (and in mode MODE if that's convenient).\n+   SUBTARGET may be used as the target for computing one of EXP's operands.\n+   IGNORE is nonzero if the value is to be ignored.  */\n+\n+static rtx\n+ix86_expand_library_builtin (tree exp, rtx target,\n+\t\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t     int ignore)\n+{\n+  enum built_in_function fncode;\n+  tree fndecl, newfn, call;\n+\n+  /* Try expanding builtin math functions to the SSE2 ABI variants.  */\n+  if (!TARGET_SSELIBM)\n+      return NULL_RTX;\n+\n+  fncode = builtin_mathfn_code (exp);\n+  if (!ix86_builtin_function_variants [(int)fncode])\n+    return NULL_RTX;\n+\n+  fndecl = get_callee_fndecl (exp);\n+  if (DECL_RTL_SET_P (fndecl))\n+    return NULL_RTX;\n+\n+  /* Build the redirected call and expand it.  */\n+  newfn = ix86_builtin_function_variants [(int)fncode];\n+  call = build_function_call_expr (newfn, TREE_OPERAND (exp, 1));\n+  return expand_call (call, target, ignore);\n+}\n+\n /* Store OPERAND to the memory after reload is completed.  This means\n    that we can't easily use assign_stack_local.  */\n rtx"}, {"sha": "307cc97d4df45a6abc4423bc21f29c6ea19ab98a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -497,6 +497,8 @@ extern int x86_prefetch_sse;\n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n   { \"cc1_cpu\",  CC1_CPU_SPEC },\t\t\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n+\n+#define LINK_GCC_MATH_SPEC \"%{msselibm:-lgcc-math}\"\n \f\n /* target machine storage layout */\n "}, {"sha": "9cd29b40cd329a6be81d7d6f2d72ecee68b3742c", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -201,6 +201,10 @@ msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode\n \n+msselibm\n+Target Mask(SSELIBM)\n+Use SSE2 ABI libgcc-math routines if using SSE math\n+\n msvr3-shlib\n Target Report Mask(SVR3_SHLIB)\n Uninitialized locals in .bss"}, {"sha": "a20349d8488642294e4cfdf6a1893ca6019537e7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -6804,6 +6804,35 @@ v2sf __builtin_ia32_pswapdsf (v2sf)\n v2si __builtin_ia32_pswapdsi (v2si)\n @end smallexample\n \n+The following built-in functions are available when @option{-msse2}\n+is used.  All of them generate calls to an SSE2 ABI IEEE754 math intrinsic\n+that is part of the name.  Rather than using these directly you may\n+want them automatically substituted for calls to the regular intrinsics\n+using the @option{-msselibm}.\n+\n+@smallexample\n+double __builtin_sse2_acos (double)\n+float __builtin_sse2_acosf (float)\n+double __builtin_sse2_asin (double)\n+float __builtin_sse2_asinf (float)\n+double __builtin_sse2_atan (double)\n+float __builtin_sse2_atanf (float)\n+double __builtin_sse2_atan2 (double, double)\n+float __builtin_sse2_atan2f (float, float)\n+double __builtin_sse2_cos (double)\n+float __builtin_sse2_cosf (float)\n+double __builtin_sse2_exp (double)\n+float __builtin_sse2_expf (float)\n+double __builtin_sse2_log10 (double)\n+float __builtin_sse2_log10f (float)\n+double __builtin_sse2_log (double)\n+float __builtin_sse2_logf (float)\n+double __builtin_sse2_sin (double)\n+float __builtin_sse2_sinf (float)\n+double __builtin_sse2_tan (double)\n+float __builtin_sse2_tanf (float)\n+@end smallexample\n+\n @node MIPS DSP Built-in Functions\n @subsection MIPS DSP Built-in Functions\n "}, {"sha": "8edff2a42674cf6c1fc9663e7e32624bf842ad1e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -528,7 +528,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n--mmmx  -msse  -msse2 -msse3 -m3dnow @gol\n+-mmmx  -msse  -msse2 -msse3 -m3dnow -msselibm @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -9437,6 +9437,12 @@ supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n \n+@item -msselibm\n+@opindex msselibm\n+Use special versions of certain libm routines that come with an SSE\n+ABI and an SSE implementation.  Useful together with @option{-mfpmath=sse}\n+to avoid moving values between SSE registers and the x87 FP stack.\n+\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "2be41005942a25c942a678d86b06f9d384c1d5a9", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -338,6 +338,7 @@ extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern tree std_build_builtin_va_list (void);\n extern void std_expand_builtin_va_start (tree, rtx);\n extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+extern rtx default_expand_library_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern rtx expand_builtin_saveregs (void);"}, {"sha": "a2cefe71d99505f5bafa046964fe9521bc02030e", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -680,6 +680,10 @@ proper position among the other output files.  */\n #endif\n #endif\n \n+#ifndef LINK_GCC_MATH_SPEC\n+#define LINK_GCC_MATH_SPEC \"\"\n+#endif\n+\n #ifndef LINK_PIE_SPEC\n #ifdef HAVE_LD_PIE\n #define LINK_PIE_SPEC \"%{pie:-pie} \"\n@@ -702,7 +706,7 @@ proper position among the other output files.  */\n     %{static:} %{L*} %(mfwrap) %{fopenmp:%:include(libgomp.spec)%(link_gomp)}\\\n     %(link_libgcc) %o %(mflib)\\\n     %{fprofile-arcs|fprofile-generate|coverage:-lgcov}\\\n-    %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}\\\n+    %{!nostdlib:%{!nodefaultlibs:%(link_gcc_math) %(link_ssp) %(link_gcc_c_sequence)}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n #endif\n \n@@ -733,6 +737,7 @@ static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n static const char *link_gcc_c_sequence_spec = LINK_GCC_C_SEQUENCE_SPEC;\n static const char *link_ssp_spec = LINK_SSP_SPEC;\n+static const char *link_gcc_math_spec = LINK_GCC_MATH_SPEC;\n static const char *asm_spec = ASM_SPEC;\n static const char *asm_final_spec = ASM_FINAL_SPEC;\n static const char *link_spec = LINK_SPEC;\n@@ -1540,6 +1545,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"cc1plus\",\t\t\t&cc1plus_spec),\n   INIT_STATIC_SPEC (\"link_gcc_c_sequence\",\t&link_gcc_c_sequence_spec),\n   INIT_STATIC_SPEC (\"link_ssp\",\t\t\t&link_ssp_spec),\n+  INIT_STATIC_SPEC (\"link_gcc_math\",\t\t&link_gcc_math_spec),\n   INIT_STATIC_SPEC (\"endfile\",\t\t\t&endfile_spec),\n   INIT_STATIC_SPEC (\"link\",\t\t\t&link_spec),\n   INIT_STATIC_SPEC (\"lib\",\t\t\t&lib_spec),"}, {"sha": "ffeec2e583c82dbe06a8b2dbb2c8878e546839e9", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -320,6 +320,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n+#define TARGET_EXPAND_LIBRARY_BUILTIN default_expand_library_builtin\n #define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n #define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n \n@@ -578,6 +579,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_ALIGN_ANON_BITFIELD,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n+  TARGET_EXPAND_LIBRARY_BUILTIN,\t\t\\\n   TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\\n   TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\"}, {"sha": "2ac0882883309c2774ade8a37cb9d2c294516b02", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -369,6 +369,10 @@ struct gcc_target\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);\n \n+  /* Expand a target-specific library builtin.  */\n+  rtx (* expand_library_builtin) (tree exp, rtx target, rtx subtarget,\n+\t\t\t  enum machine_mode mode, int ignore);\n+\n   /* Select a replacement for a target-specific builtin.  This is done\n      *before* regular type checking, and so allows the target to implement\n      a crude form of function overloading.  The result is a complete"}, {"sha": "47f662310dafc4a1ad5815d0cc5441d9cb8f45b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -1,3 +1,11 @@\n+2006-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/sselibm-1.c: New testcase.\n+\t* gcc.target/i386/sselibm-2.c: Likewise.\n+\t* gcc.target/i386/sselibm-3.c: Likewise.\n+\t* gcc.target/i386/sselibm-4.c: Likewise.\n+\t* gcc.target/i386/sselibm-5.c: Likewise.\n+\n 2005-01-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \tPR fortran/24266"}, {"sha": "1e9f0c62272f95deeae0eee9063551fc353c98e3", "filename": "gcc/testsuite/gcc.target/i386/sselibm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -mfpmath=sse\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+double sin(double);\n+\n+double foo(double x)\n+{\n+  return sin(x);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__libm_sse2_sin\" } } */"}, {"sha": "84502628c6bf2996db53cf7b5b7dd86de9e186a5", "filename": "gcc/testsuite/gcc.target/i386/sselibm-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -mfpmath=sse -msselibm\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+double sin(double);\n+\n+double foo(double x)\n+{\n+  return sin(x);\n+}\n+\n+/* { dg-final { scan-assembler \"__libm_sse2_sin\" } } */"}, {"sha": "76c1134c58ee064d054f3ca30d408f2eba7bca1b", "filename": "gcc/testsuite/gcc.target/i386/sselibm-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+double sin(double);\n+double (*mysin)(double) = sin;\n+\n+double f1(double x)\n+{\n+  return sin(x);\n+}\n+\n+double f2(double x)\n+{\n+  /* Verify we do not expand the following call to __libm_sse2_sin.  */\n+  return (*mysin)(x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"__libm_sse2_sin\" 1 } } */"}, {"sha": "ad20bce0b349665233e4d11d26e9d7626642daf0", "filename": "gcc/testsuite/gcc.target/i386/sselibm-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+extern double acos(double);\n+extern double asin(double);\n+extern double atan(double);\n+extern double atan2(double, double);\n+extern double cos(double);\n+extern double exp(double);\n+extern double log10(double);\n+extern double log(double);\n+extern double sin(double);\n+extern double tan(double);\n+\n+extern float acosf(float);\n+extern float asinf(float);\n+extern float atanf(float);\n+extern float atan2f(float, float);\n+extern float cosf(float);\n+extern float expf(float);\n+extern float log10f(float);\n+extern float logf(float);\n+extern float sinf(float);\n+extern float tanf(float);\n+\n+float foof(float x)\n+{\n+  return acosf(x) + asinf(x) + atanf(x) + atan2f(x, x) + cosf(x) + expf(x)\n+\t+ log10f(x) + logf(x) + sinf(x) + tanf(x);\n+}\n+\n+double foo(double x)\n+{\n+  return acos(x) + asin(x) + atan(x) + atan2(x, x) + cos(x) + exp(x)\n+\t+ log10(x) + log(x) + sin(x) + tan(x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"__libm_sse2\" 20 } } */"}, {"sha": "c7493198689e76435e3015d5e4a9416f5fb93252", "filename": "gcc/testsuite/gcc.target/i386/sselibm-5.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9631816531f0ef9005558cec7d10ea5ee6a074/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c?ref=ee9631816531f0ef9005558cec7d10ea5ee6a074", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+extern double acos(double);\n+extern double asin(double);\n+extern double atan(double);\n+extern double atan2(double, double);\n+extern double cos(double);\n+extern double exp(double);\n+extern double log10(double);\n+extern double log(double);\n+extern double sin(double);\n+extern double tan(double);\n+\n+extern float acosf(float);\n+extern float asinf(float);\n+extern float atanf(float);\n+extern float atan2f(float, float);\n+extern float cosf(float);\n+extern float expf(float);\n+extern float log10f(float);\n+extern float logf(float);\n+extern float sinf(float);\n+extern float tanf(float);\n+\n+float foof(float x)\n+{\n+  return __builtin_sse2_acosf(x)\n+\t+ __builtin_sse2_asinf(x)\n+\t+ __builtin_sse2_atanf(x)\n+\t+ __builtin_sse2_atan2f(x, x)\n+\t+ __builtin_sse2_cosf(x)\n+\t+ __builtin_sse2_expf(x)\n+\t+ __builtin_sse2_log10f(x)\n+\t+ __builtin_sse2_logf(x)\n+\t+ __builtin_sse2_sinf(x)\n+\t+ __builtin_sse2_tanf(x);\n+}\n+\n+double foo(double x)\n+{\n+  return __builtin_sse2_acos(x)\n+\t+ __builtin_sse2_asin(x)\n+\t+ __builtin_sse2_atan(x)\n+\t+ __builtin_sse2_atan2(x, x)\n+\t+ __builtin_sse2_cos(x)\n+\t+ __builtin_sse2_exp(x)\n+\t+ __builtin_sse2_log10(x)\n+\t+ __builtin_sse2_log(x)\n+\t+ __builtin_sse2_sin(x)\n+\t+ __builtin_sse2_tan(x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"__libm_sse2\" 20 } } */"}]}